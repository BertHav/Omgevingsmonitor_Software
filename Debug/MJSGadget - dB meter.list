
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025970  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ee0  08025a30  08025a30  00026a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029910  08029910  0002b438  2**0
                  CONTENTS
  4 .ARM          00000008  08029910  08029910  0002a910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029918  08029918  0002b438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029918  08029918  0002a918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802991c  0802991c  0002a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000438  20000000  08029920  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003160  20000438  08029d58  0002b438  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003598  08029d58  0002b598  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002b438  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003577f  00000000  00000000  0002b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009958  00000000  00000000  00060bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c50  00000000  00000000  0006a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020e5  00000000  00000000  0006d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023989  00000000  00000000  0006f26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004426e  00000000  00000000  00092bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d2c  00000000  00000000  000d6e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00178b90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b414  00000000  00000000  00178c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00184058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  001840c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00186641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000438 	.word	0x20000438
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08025a18 	.word	0x08025a18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000043c 	.word	0x2000043c
 8000104:	08025a18 	.word	0x08025a18

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08028aa4 	.word	0x08028aa4
 8000e0c:	08028ae4 	.word	0x08028ae4
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08028b20 	.word	0x08028b20
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	2000062c 	.word	0x2000062c

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00d fd24 	bl	80110b8 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000628 	.word	0x20000628

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f003 fc0e 	bl	8006eac <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f003 fc6b 	bl	8006f70 <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	20000580 	.word	0x20000580
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000584 	.word	0x20000584

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f005 fd99 	bl	8009214 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000674 	.word	0x20000674
 8003730:	0808000c 	.word	0x0808000c
 8003734:	20000680 	.word	0x20000680
 8003738:	20000684 	.word	0x20000684

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f005 fd63 	bl	8009214 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	20000688 	.word	0x20000688
 800379c:	08080090 	.word	0x08080090
 80037a0:	200006a8 	.word	0x200006a8
 80037a4:	200006ac 	.word	0x200006ac

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000638 	.word	0x20000638

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000638 	.word	0x20000638

08003800 <sethPa>:

void sethPa(float hPa) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <sethPa+0x30>)
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (hPa > MeasVal.hPaValuemax) {
 800380e:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <sethPa+0x30>)
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	1c19      	adds	r1, r3, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fc fe9f 	bl	8000558 <__aeabi_fcmpgt>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d100      	bne.n	8003820 <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 800381e:	e002      	b.n	8003826 <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 8003820:	4b03      	ldr	r3, [pc, #12]	@ (8003830 <sethPa+0x30>)
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	20000638 	.word	0x20000638

08003834 <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <setMic+0x28>)
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <setMic+0x28>)
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <setMic+0x28>)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	20000638 	.word	0x20000638

08003860 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	0002      	movs	r2, r0
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd fead 	bl	80015d0 <__aeabi_i2f>
 8003876:	1c03      	adds	r3, r0, #0
 8003878:	490d      	ldr	r1, [pc, #52]	@ (80038b0 <setPM2p5+0x50>)
 800387a:	1c18      	adds	r0, r3, #0
 800387c:	f7fd f9aa 	bl	8000bd4 <__aeabi_fdiv>
 8003880:	1c03      	adds	r3, r0, #0
 8003882:	1c1a      	adds	r2, r3, #0
 8003884:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <setPM2p5+0x54>)
 8003886:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <setPM2p5+0x54>)
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <setPM2p5+0x54>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	1c19      	adds	r1, r3, #0
 8003892:	1c10      	adds	r0, r2, #0
 8003894:	f7fc fe60 	bl	8000558 <__aeabi_fcmpgt>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d100      	bne.n	800389e <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 800389c:	e003      	b.n	80038a6 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800389e:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <setPM2p5+0x54>)
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <setPM2p5+0x54>)
 80038a4:	60da      	str	r2, [r3, #12]
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	41200000 	.word	0x41200000
 80038b4:	20000638 	.word	0x20000638

080038b8 <setPM10>:

void setPM10(uint16_t PM10) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7fd fe81 	bl	80015d0 <__aeabi_i2f>
 80038ce:	1c03      	adds	r3, r0, #0
 80038d0:	490d      	ldr	r1, [pc, #52]	@ (8003908 <setPM10+0x50>)
 80038d2:	1c18      	adds	r0, r3, #0
 80038d4:	f7fd f97e 	bl	8000bd4 <__aeabi_fdiv>
 80038d8:	1c03      	adds	r3, r0, #0
 80038da:	1c1a      	adds	r2, r3, #0
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <setPM10+0x54>)
 80038de:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <setPM10+0x54>)
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <setPM10+0x54>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	1c19      	adds	r1, r3, #0
 80038ea:	1c10      	adds	r0, r2, #0
 80038ec:	f7fc fe34 	bl	8000558 <__aeabi_fcmpgt>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d100      	bne.n	80038f6 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038f4:	e003      	b.n	80038fe <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038f6:	4b05      	ldr	r3, [pc, #20]	@ (800390c <setPM10+0x54>)
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	4b04      	ldr	r3, [pc, #16]	@ (800390c <setPM10+0x54>)
 80038fc:	615a      	str	r2, [r3, #20]
}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b002      	add	sp, #8
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	41200000 	.word	0x41200000
 800390c:	20000638 	.word	0x20000638

08003910 <setNOx>:

void setNOx(uint16_t nox) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	0002      	movs	r2, r0
 8003918:	1dbb      	adds	r3, r7, #6
 800391a:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 800391c:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <setNOx+0x30>)
 800391e:	1dba      	adds	r2, r7, #6
 8003920:	8812      	ldrh	r2, [r2, #0]
 8003922:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <setNOx+0x30>)
 8003926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003928:	1dba      	adds	r2, r7, #6
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d903      	bls.n	8003938 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setNOx+0x30>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000638 	.word	0x20000638

08003944 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003948:	f007 fc8c 	bl	800b264 <sen5x_Get_sen5x_enable_state>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d008      	beq.n	8003962 <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 8003950:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 8003952:	2200      	movs	r2, #0
 8003954:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003956:	4b07      	ldr	r3, [pc, #28]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 8003958:	2200      	movs	r2, #0
 800395a:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 800395e:	2200      	movs	r2, #0
 8003960:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.hPaValuemax = 0.0;
 8003962:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 8003964:	2200      	movs	r2, #0
 8003966:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.VOCIndexmax = 0;
 8003968:	4b02      	ldr	r3, [pc, #8]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 800396a:	2200      	movs	r2, #0
 800396c:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000638 	.word	0x20000638

08003978 <SetConfigMode>:

void SetConfigMode(){
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 800397c:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <SetConfigMode+0x30>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	4053      	eors	r3, r2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 800398a:	4a08      	ldr	r2, [pc, #32]	@ (80039ac <SetConfigMode+0x34>)
 800398c:	4b08      	ldr	r3, [pc, #32]	@ (80039b0 <SetConfigMode+0x38>)
 800398e:	0019      	movs	r1, r3
 8003990:	2003      	movs	r0, #3
 8003992:	f00c ff45 	bl	8010820 <CreateLine>
  }
  ReconfigSet = true;
 8003996:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <SetConfigMode+0x30>)
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <SetConfigMode+0x3c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	2000055f 	.word	0x2000055f
 80039ac:	08025a30 	.word	0x08025a30
 80039b0:	08025a50 	.word	0x08025a50
 80039b4:	20000207 	.word	0x20000207

080039b8 <GetReconfigMode>:

bool GetReconfigMode() {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  return ReconfigSet;
 80039bc:	4b02      	ldr	r3, [pc, #8]	@ (80039c8 <GetReconfigMode+0x10>)
 80039be:	781b      	ldrb	r3, [r3, #0]
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	2000055f 	.word	0x2000055f

080039cc <ESP_GetUID>:

void ESP_GetUID(){
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039d0:	f00d fbbc 	bl	801114c <HAL_GetUIDw0>
 80039d4:	0002      	movs	r2, r0
 80039d6:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <ESP_GetUID+0x28>)
 80039d8:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039da:	f00d fbc1 	bl	8011160 <HAL_GetUIDw1>
 80039de:	0002      	movs	r2, r0
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ESP_GetUID+0x28>)
 80039e2:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039e4:	f00d fbc6 	bl	8011174 <HAL_GetUIDw2>
 80039e8:	0002      	movs	r2, r0
 80039ea:	4b02      	ldr	r3, [pc, #8]	@ (80039f4 <ESP_GetUID+0x28>)
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000568 	.word	0x20000568

080039f8 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003a00:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <ESP_Init+0x2c>)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a06:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <ESP_Init+0x30>)
 8003a08:	2202      	movs	r2, #2
 8003a0a:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a0c:	f7ff ffde 	bl	80039cc <ESP_GetUID>
  beurs = checkEEprom();
 8003a10:	f7ff fe5e 	bl	80036d0 <checkEEprom>
 8003a14:	0003      	movs	r3, r0
 8003a16:	001a      	movs	r2, r3
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <ESP_Init+0x34>)
 8003a1a:	701a      	strb	r2, [r3, #0]
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000454 	.word	0x20000454
 8003a28:	2000002c 	.word	0x2000002c
 8003a2c:	20000562 	.word	0x20000562

08003a30 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a30:	b5b0      	push	{r4, r5, r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	000a      	movs	r2, r1
 8003a3a:	1cbb      	adds	r3, r7, #2
 8003a3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <ESP_Send+0x54>)
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	250f      	movs	r5, #15
 8003a44:	197c      	adds	r4, r7, r5
 8003a46:	1cbb      	adds	r3, r7, #2
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	f016 f8f5 	bl	8019c3c <HAL_UART_Transmit_DMA>
 8003a52:	0003      	movs	r3, r0
 8003a54:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a56:	197b      	adds	r3, r7, r5
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a88 <ESP_Send+0x58>)
 8003a60:	4b0a      	ldr	r3, [pc, #40]	@ (8003a8c <ESP_Send+0x5c>)
 8003a62:	0019      	movs	r1, r3
 8003a64:	2001      	movs	r0, #1
 8003a66:	f00c fedb 	bl	8010820 <CreateLine>
    return false;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e006      	b.n	8003a7c <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <ESP_Send+0x60>)
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f01e fe5b 	bl	8022730 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bdb0      	pop	{r4, r5, r7, pc}
 8003a84:	20000454 	.word	0x20000454
 8003a88:	08025a54 	.word	0x08025a54
 8003a8c:	08025a74 	.word	0x08025a74
 8003a90:	08025a78 	.word	0x08025a78

08003a94 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	000a      	movs	r2, r1
 8003a9e:	1cbb      	adds	r3, r7, #2
 8003aa0:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003aa2:	4b52      	ldr	r3, [pc, #328]	@ (8003bec <ESP_Receive+0x158>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003aa8:	260f      	movs	r6, #15
 8003aaa:	19bb      	adds	r3, r7, r6
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf0 <ESP_Receive+0x15c>)
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	250e      	movs	r5, #14
 8003ab6:	197c      	adds	r4, r7, r5
 8003ab8:	1cbb      	adds	r3, r7, #2
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0019      	movs	r1, r3
 8003ac0:	f016 f94c 	bl	8019d5c <HAL_UART_Receive_DMA>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003ac8:	002c      	movs	r4, r5
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d100      	bne.n	8003ad4 <ESP_Receive+0x40>
 8003ad2:	e085      	b.n	8003be0 <ESP_Receive+0x14c>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ad4:	4b46      	ldr	r3, [pc, #280]	@ (8003bf0 <ESP_Receive+0x15c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2284      	movs	r2, #132	@ 0x84
 8003ada:	589b      	ldr	r3, [r3, r2]
 8003adc:	4a45      	ldr	r2, [pc, #276]	@ (8003bf4 <ESP_Receive+0x160>)
 8003ade:	4946      	ldr	r1, [pc, #280]	@ (8003bf8 <ESP_Receive+0x164>)
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f00c fe9d 	bl	8010820 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ae6:	193b      	adds	r3, r7, r4
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	4013      	ands	r3, r2
 8003aee:	d008      	beq.n	8003b02 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003af0:	4a42      	ldr	r2, [pc, #264]	@ (8003bfc <ESP_Receive+0x168>)
 8003af2:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <ESP_Receive+0x164>)
 8003af4:	0019      	movs	r1, r3
 8003af6:	2001      	movs	r0, #1
 8003af8:	f00c fe92 	bl	8010820 <CreateLine>
      reset = true;
 8003afc:	19bb      	adds	r3, r7, r6
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003b02:	230e      	movs	r3, #14
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d005      	beq.n	8003b1a <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8003c00 <ESP_Receive+0x16c>)
 8003b10:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b12:	0019      	movs	r1, r3
 8003b14:	2001      	movs	r0, #1
 8003b16:	f00c fe83 	bl	8010820 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b1a:	230e      	movs	r3, #14
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2204      	movs	r2, #4
 8003b22:	4013      	ands	r3, r2
 8003b24:	d005      	beq.n	8003b32 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003b26:	4a37      	ldr	r2, [pc, #220]	@ (8003c04 <ESP_Receive+0x170>)
 8003b28:	4b33      	ldr	r3, [pc, #204]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f00c fe77 	bl	8010820 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b32:	230e      	movs	r3, #14
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d005      	beq.n	8003b4a <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b3e:	4a32      	ldr	r2, [pc, #200]	@ (8003c08 <ESP_Receive+0x174>)
 8003b40:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b42:	0019      	movs	r1, r3
 8003b44:	2001      	movs	r0, #1
 8003b46:	f00c fe6b 	bl	8010820 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b4a:	230e      	movs	r3, #14
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2210      	movs	r2, #16
 8003b52:	4013      	ands	r3, r2
 8003b54:	d005      	beq.n	8003b62 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b56:	4a2d      	ldr	r2, [pc, #180]	@ (8003c0c <ESP_Receive+0x178>)
 8003b58:	4b27      	ldr	r3, [pc, #156]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f00c fe5f 	bl	8010820 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b62:	230e      	movs	r3, #14
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d005      	beq.n	8003b7a <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b6e:	4a28      	ldr	r2, [pc, #160]	@ (8003c10 <ESP_Receive+0x17c>)
 8003b70:	4b21      	ldr	r3, [pc, #132]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b72:	0019      	movs	r1, r3
 8003b74:	2001      	movs	r0, #1
 8003b76:	f00c fe53 	bl	8010820 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b7a:	230e      	movs	r3, #14
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2240      	movs	r2, #64	@ 0x40
 8003b82:	4013      	ands	r3, r2
 8003b84:	d005      	beq.n	8003b92 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b86:	4a23      	ldr	r2, [pc, #140]	@ (8003c14 <ESP_Receive+0x180>)
 8003b88:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f00c fe47 	bl	8010820 <CreateLine>
    }
#endif
    if (reset) {
 8003b92:	230f      	movs	r3, #15
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01c      	beq.n	8003bd6 <ESP_Receive+0x142>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c18 <ESP_Receive+0x184>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f00e fd19 	bl	80125da <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f00d fa8f 	bl	80110cc <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	481a      	ldr	r0, [pc, #104]	@ (8003c1c <ESP_Receive+0x188>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	f00e fd0f 	bl	80125da <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	f00d fa85 	bl	80110cc <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8003bc2:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <ESP_Receive+0x184>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f00e fd06 	bl	80125da <HAL_GPIO_WritePin>
      SetAllREDLED();
 8003bce:	f00b fd99 	bl	800f704 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003bd2:	f00d ff3a 	bl	8011a4a <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003bd6:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <ESP_Receive+0x158>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
    return false;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <ESP_Receive+0x14e>
  }
  return true;
 8003be0:	2301      	movs	r3, #1
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b005      	add	sp, #20
 8003be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	20000458 	.word	0x20000458
 8003bf0:	20000454 	.word	0x20000454
 8003bf4:	08025a88 	.word	0x08025a88
 8003bf8:	08025a74 	.word	0x08025a74
 8003bfc:	08025ab8 	.word	0x08025ab8
 8003c00:	08025adc 	.word	0x08025adc
 8003c04:	08025b00 	.word	0x08025b00
 8003c08:	08025b24 	.word	0x08025b24
 8003c0c:	08025b48 	.word	0x08025b48
 8003c10:	08025b74 	.word	0x08025b74
 8003c14:	08025ba4 	.word	0x08025ba4
 8003c18:	50001c00 	.word	0x50001c00
 8003c1c:	50000800 	.word	0x50000800

08003c20 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003c28:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <HAL_UART_ErrorCallback+0xf0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d16b      	bne.n	8003d0a <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2284      	movs	r2, #132	@ 0x84
 8003c36:	589b      	ldr	r3, [r3, r2]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d065      	beq.n	8003d08 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2284      	movs	r2, #132	@ 0x84
 8003c40:	589b      	ldr	r3, [r3, r2]
 8003c42:	4a34      	ldr	r2, [pc, #208]	@ (8003d14 <HAL_UART_ErrorCallback+0xf4>)
 8003c44:	4934      	ldr	r1, [pc, #208]	@ (8003d18 <HAL_UART_ErrorCallback+0xf8>)
 8003c46:	2003      	movs	r0, #3
 8003c48:	f00c fdea 	bl	8010820 <CreateLine>
    switch (huart->ErrorCode) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2284      	movs	r2, #132	@ 0x84
 8003c50:	589b      	ldr	r3, [r3, r2]
 8003c52:	2b0c      	cmp	r3, #12
 8003c54:	d851      	bhi.n	8003cfa <HAL_UART_ErrorCallback+0xda>
 8003c56:	009a      	lsls	r2, r3, #2
 8003c58:	4b30      	ldr	r3, [pc, #192]	@ (8003d1c <HAL_UART_ErrorCallback+0xfc>)
 8003c5a:	18d3      	adds	r3, r2, r3
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003c60:	4a2f      	ldr	r2, [pc, #188]	@ (8003d20 <HAL_UART_ErrorCallback+0x100>)
 8003c62:	4b30      	ldr	r3, [pc, #192]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c64:	0019      	movs	r1, r3
 8003c66:	2001      	movs	r0, #1
 8003c68:	f00c fdda 	bl	8010820 <CreateLine>
        break;
 8003c6c:	e04d      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003d28 <HAL_UART_ErrorCallback+0x108>)
 8003c70:	4b2c      	ldr	r3, [pc, #176]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c72:	0019      	movs	r1, r3
 8003c74:	2001      	movs	r0, #1
 8003c76:	f00c fdd3 	bl	8010820 <CreateLine>
        break;
 8003c7a:	e046      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d2c <HAL_UART_ErrorCallback+0x10c>)
 8003c7e:	4b29      	ldr	r3, [pc, #164]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	2001      	movs	r0, #1
 8003c84:	f00c fdcc 	bl	8010820 <CreateLine>
        break;
 8003c88:	e03f      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c8a:	4a29      	ldr	r2, [pc, #164]	@ (8003d30 <HAL_UART_ErrorCallback+0x110>)
 8003c8c:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00c fdc5 	bl	8010820 <CreateLine>
        break;
 8003c96:	e038      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c98:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <HAL_UART_ErrorCallback+0x114>)
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f00c fdbe 	bl	8010820 <CreateLine>
        break;
 8003ca4:	e031      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003ca6:	4a24      	ldr	r2, [pc, #144]	@ (8003d38 <HAL_UART_ErrorCallback+0x118>)
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003caa:	0019      	movs	r1, r3
 8003cac:	2001      	movs	r0, #1
 8003cae:	f00c fdb7 	bl	8010820 <CreateLine>
        break;
 8003cb2:	e02a      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003cb4:	4a21      	ldr	r2, [pc, #132]	@ (8003d3c <HAL_UART_ErrorCallback+0x11c>)
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cb8:	0019      	movs	r1, r3
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f00c fdb0 	bl	8010820 <CreateLine>
        break;
 8003cc0:	e023      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <HAL_UART_ErrorCallback+0x120>)
 8003cc4:	4b17      	ldr	r3, [pc, #92]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f00c fda9 	bl	8010820 <CreateLine>
        break;
 8003cce:	e01c      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <HAL_UART_ErrorCallback+0x124>)
 8003cd2:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f00c fda2 	bl	8010820 <CreateLine>
        break;
 8003cdc:	e015      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003cde:	4a1a      	ldr	r2, [pc, #104]	@ (8003d48 <HAL_UART_ErrorCallback+0x128>)
 8003ce0:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f00c fd9b 	bl	8010820 <CreateLine>
        break;
 8003cea:	e00e      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003cec:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_UART_ErrorCallback+0x12c>)
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f00c fd94 	bl	8010820 <CreateLine>
        break;
 8003cf8:	e007      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003cfa:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <HAL_UART_ErrorCallback+0x130>)
 8003cfc:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cfe:	0019      	movs	r1, r3
 8003d00:	2001      	movs	r0, #1
 8003d02:	f00c fd8d 	bl	8010820 <CreateLine>
 8003d06:	e000      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      return;
 8003d08:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000454 	.word	0x20000454
 8003d14:	08025bd4 	.word	0x08025bd4
 8003d18:	08025a50 	.word	0x08025a50
 8003d1c:	08028bec 	.word	0x08028bec
 8003d20:	08025c04 	.word	0x08025c04
 8003d24:	08025a74 	.word	0x08025a74
 8003d28:	08025c38 	.word	0x08025c38
 8003d2c:	08025c64 	.word	0x08025c64
 8003d30:	08025c98 	.word	0x08025c98
 8003d34:	08025cc4 	.word	0x08025cc4
 8003d38:	08025cec 	.word	0x08025cec
 8003d3c:	08025d1c 	.word	0x08025d1c
 8003d40:	08025d54 	.word	0x08025d54
 8003d44:	08025d8c 	.word	0x08025d8c
 8003d48:	08025db4 	.word	0x08025db4
 8003d4c:	08025ddc 	.word	0x08025ddc
 8003d50:	08025e08 	.word	0x08025e08

08003d54 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e010      	b.n	8003d86 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	001a      	movs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	1898      	adds	r0, r3, r2
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	001a      	movs	r2, r3
 8003d78:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <uint8ArrayToString+0x44>)
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	f01e fd48 	bl	8022810 <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b0b      	cmp	r3, #11
 8003d8a:	ddeb      	ble.n	8003d64 <uint8ArrayToString+0x10>
  }
}
 8003d8c:	46c0      	nop			@ (mov r8, r8)
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	08025e2c 	.word	0x08025e2c

08003d9c <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9e:	b089      	sub	sp, #36	@ 0x24
 8003da0:	af04      	add	r7, sp, #16
 8003da2:	6039      	str	r1, [r7, #0]
 8003da4:	0011      	movs	r1, r2
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	1c02      	adds	r2, r0, #0
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	1dbb      	adds	r3, r7, #6
 8003dae:	1c0a      	adds	r2, r1, #0
 8003db0:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003db2:	4b23      	ldr	r3, [pc, #140]	@ (8003e40 <CreateMessage+0xa4>)
 8003db4:	4823      	ldr	r0, [pc, #140]	@ (8003e44 <CreateMessage+0xa8>)
 8003db6:	220c      	movs	r2, #12
 8003db8:	0019      	movs	r1, r3
 8003dba:	f005 fa2b 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003dbe:	4b22      	ldr	r3, [pc, #136]	@ (8003e48 <CreateMessage+0xac>)
 8003dc0:	4822      	ldr	r0, [pc, #136]	@ (8003e4c <CreateMessage+0xb0>)
 8003dc2:	220c      	movs	r2, #12
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	f005 fa25 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003dca:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <CreateMessage+0xb4>)
 8003dcc:	4821      	ldr	r0, [pc, #132]	@ (8003e54 <CreateMessage+0xb8>)
 8003dce:	220c      	movs	r2, #12
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	f005 fa1f 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003dd6:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <CreateMessage+0xbc>)
 8003dd8:	4820      	ldr	r0, [pc, #128]	@ (8003e5c <CreateMessage+0xc0>)
 8003dda:	220c      	movs	r2, #12
 8003ddc:	0019      	movs	r1, r3
 8003dde:	f005 fa19 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8003de2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e60 <CreateMessage+0xc4>)
 8003de4:	481f      	ldr	r0, [pc, #124]	@ (8003e64 <CreateMessage+0xc8>)
 8003de6:	220c      	movs	r2, #12
 8003de8:	0019      	movs	r1, r3
 8003dea:	f005 fa13 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003dee:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <CreateMessage+0xcc>)
 8003df0:	481e      	ldr	r0, [pc, #120]	@ (8003e6c <CreateMessage+0xd0>)
 8003df2:	220c      	movs	r2, #12
 8003df4:	0019      	movs	r1, r3
 8003df6:	f005 fa0d 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003e70 <CreateMessage+0xd4>)
 8003dfc:	481d      	ldr	r0, [pc, #116]	@ (8003e74 <CreateMessage+0xd8>)
 8003dfe:	220c      	movs	r2, #12
 8003e00:	0019      	movs	r1, r3
 8003e02:	f005 fa07 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003e06:	4b1c      	ldr	r3, [pc, #112]	@ (8003e78 <CreateMessage+0xdc>)
 8003e08:	481c      	ldr	r0, [pc, #112]	@ (8003e7c <CreateMessage+0xe0>)
 8003e0a:	220c      	movs	r2, #12
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	f005 fa01 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003e12:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <CreateMessage+0xe4>)
 8003e14:	481b      	ldr	r0, [pc, #108]	@ (8003e84 <CreateMessage+0xe8>)
 8003e16:	220c      	movs	r2, #12
 8003e18:	0019      	movs	r1, r3
 8003e1a:	f005 f9fb 	bl	8009214 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <CreateMessage+0xec>)
 8003e20:	481a      	ldr	r0, [pc, #104]	@ (8003e8c <CreateMessage+0xf0>)
 8003e22:	220c      	movs	r2, #12
 8003e24:	0019      	movs	r1, r3
 8003e26:	f005 f9f5 	bl	8009214 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003e2a:	f7ff fc87 	bl	800373c <checkName>
 8003e2e:	1e03      	subs	r3, r0, #0
 8003e30:	d032      	beq.n	8003e98 <CreateMessage+0xfc>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e32:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <CreateMessage+0xf4>)
 8003e34:	4817      	ldr	r0, [pc, #92]	@ (8003e94 <CreateMessage+0xf8>)
 8003e36:	2220      	movs	r2, #32
 8003e38:	0019      	movs	r1, r3
 8003e3a:	f005 f9eb 	bl	8009214 <ReadUint8ArrayEEprom>
 8003e3e:	e031      	b.n	8003ea4 <CreateMessage+0x108>
 8003e40:	200006b0 	.word	0x200006b0
 8003e44:	0808000c 	.word	0x0808000c
 8003e48:	200006bc 	.word	0x200006bc
 8003e4c:	08080018 	.word	0x08080018
 8003e50:	200006c8 	.word	0x200006c8
 8003e54:	08080048 	.word	0x08080048
 8003e58:	200006d4 	.word	0x200006d4
 8003e5c:	08080030 	.word	0x08080030
 8003e60:	200006e0 	.word	0x200006e0
 8003e64:	0808003c 	.word	0x0808003c
 8003e68:	200006ec 	.word	0x200006ec
 8003e6c:	0808006c 	.word	0x0808006c
 8003e70:	200006f8 	.word	0x200006f8
 8003e74:	08080078 	.word	0x08080078
 8003e78:	20000704 	.word	0x20000704
 8003e7c:	08080024 	.word	0x08080024
 8003e80:	20000710 	.word	0x20000710
 8003e84:	08080054 	.word	0x08080054
 8003e88:	2000071c 	.word	0x2000071c
 8003e8c:	08080060 	.word	0x08080060
 8003e90:	20000728 	.word	0x20000728
 8003e94:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e98:	4bed      	ldr	r3, [pc, #948]	@ (8004250 <CreateMessage+0x4b4>)
 8003e9a:	4aee      	ldr	r2, [pc, #952]	@ (8004254 <CreateMessage+0x4b8>)
 8003e9c:	6811      	ldr	r1, [r2, #0]
 8003e9e:	6019      	str	r1, [r3, #0]
 8003ea0:	7912      	ldrb	r2, [r2, #4]
 8003ea2:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003ea4:	f7ff fbf0 	bl	8003688 <setCharges>
  uint16_t index = 0;
 8003ea8:	260e      	movs	r6, #14
 8003eaa:	19bb      	adds	r3, r7, r6
 8003eac:	2200      	movs	r2, #0
 8003eae:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003eb0:	19bb      	adds	r3, r7, r6
 8003eb2:	881a      	ldrh	r2, [r3, #0]
 8003eb4:	4be8      	ldr	r3, [pc, #928]	@ (8004258 <CreateMessage+0x4bc>)
 8003eb6:	18d3      	adds	r3, r2, r3
 8003eb8:	4ae8      	ldr	r2, [pc, #928]	@ (800425c <CreateMessage+0x4c0>)
 8003eba:	0011      	movs	r1, r2
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f01e fca7 	bl	8022810 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8003ec2:	4ae7      	ldr	r2, [pc, #924]	@ (8004260 <CreateMessage+0x4c4>)
 8003ec4:	4be7      	ldr	r3, [pc, #924]	@ (8004264 <CreateMessage+0x4c8>)
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7ff ff43 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003ece:	4be6      	ldr	r3, [pc, #920]	@ (8004268 <CreateMessage+0x4cc>)
 8003ed0:	689c      	ldr	r4, [r3, #8]
 8003ed2:	4be6      	ldr	r3, [pc, #920]	@ (800426c <CreateMessage+0x4d0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1c18      	adds	r0, r3, #0
 8003ed8:	f7ff fac4 	bl	8003464 <__aeabi_f2d>
 8003edc:	0002      	movs	r2, r0
 8003ede:	000b      	movs	r3, r1
 8003ee0:	4ddb      	ldr	r5, [pc, #876]	@ (8004250 <CreateMessage+0x4b4>)
 8003ee2:	49e3      	ldr	r1, [pc, #908]	@ (8004270 <CreateMessage+0x4d4>)
 8003ee4:	48e3      	ldr	r0, [pc, #908]	@ (8004274 <CreateMessage+0x4d8>)
 8003ee6:	9202      	str	r2, [sp, #8]
 8003ee8:	9303      	str	r3, [sp, #12]
 8003eea:	4bde      	ldr	r3, [pc, #888]	@ (8004264 <CreateMessage+0x4c8>)
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	002b      	movs	r3, r5
 8003ef0:	0022      	movs	r2, r4
 8003ef2:	f01e fc8d 	bl	8022810 <siprintf>
#endif
index = strlen(message);
 8003ef6:	4bd8      	ldr	r3, [pc, #864]	@ (8004258 <CreateMessage+0x4bc>)
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fc f937 	bl	800016c <strlen>
 8003efe:	0002      	movs	r2, r0
 8003f00:	19bb      	adds	r3, r7, r6
 8003f02:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f04:	1dbb      	adds	r3, r7, #6
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d019      	beq.n	8003f40 <CreateMessage+0x1a4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f0c:	4bd2      	ldr	r3, [pc, #840]	@ (8004258 <CreateMessage+0x4bc>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fc f92c 	bl	800016c <strlen>
 8003f14:	0003      	movs	r3, r0
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	4bcf      	ldr	r3, [pc, #828]	@ (8004258 <CreateMessage+0x4bc>)
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fd87 	bl	8003a30 <ESP_Send>
 8003f22:	0003      	movs	r3, r0
 8003f24:	001a      	movs	r2, r3
 8003f26:	4bd4      	ldr	r3, [pc, #848]	@ (8004278 <CreateMessage+0x4dc>)
 8003f28:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f2a:	4bd4      	ldr	r3, [pc, #848]	@ (800427c <CreateMessage+0x4e0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	001a      	movs	r2, r3
 8003f30:	4bd1      	ldr	r3, [pc, #836]	@ (8004278 <CreateMessage+0x4dc>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4013      	ands	r3, r2
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	4193      	sbcs	r3, r2
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4bcf      	ldr	r3, [pc, #828]	@ (800427c <CreateMessage+0x4e0>)
 8003f3e:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003f40:	4acf      	ldr	r2, [pc, #828]	@ (8004280 <CreateMessage+0x4e4>)
 8003f42:	4bc8      	ldr	r3, [pc, #800]	@ (8004264 <CreateMessage+0x4c8>)
 8003f44:	0011      	movs	r1, r2
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff ff04 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003f4c:	4bc6      	ldr	r3, [pc, #792]	@ (8004268 <CreateMessage+0x4cc>)
 8003f4e:	689c      	ldr	r4, [r3, #8]
 8003f50:	4bc6      	ldr	r3, [pc, #792]	@ (800426c <CreateMessage+0x4d0>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	1c18      	adds	r0, r3, #0
 8003f56:	f7ff fa85 	bl	8003464 <__aeabi_f2d>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	000b      	movs	r3, r1
 8003f5e:	4dbc      	ldr	r5, [pc, #752]	@ (8004250 <CreateMessage+0x4b4>)
 8003f60:	49c8      	ldr	r1, [pc, #800]	@ (8004284 <CreateMessage+0x4e8>)
 8003f62:	48bd      	ldr	r0, [pc, #756]	@ (8004258 <CreateMessage+0x4bc>)
 8003f64:	9202      	str	r2, [sp, #8]
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	4bbe      	ldr	r3, [pc, #760]	@ (8004264 <CreateMessage+0x4c8>)
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	002b      	movs	r3, r5
 8003f6e:	0022      	movs	r2, r4
 8003f70:	f01e fc4e 	bl	8022810 <siprintf>
#endif
  index += strlen(message);
 8003f74:	4bb8      	ldr	r3, [pc, #736]	@ (8004258 <CreateMessage+0x4bc>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7fc f8f8 	bl	800016c <strlen>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	b299      	uxth	r1, r3
 8003f80:	220e      	movs	r2, #14
 8003f82:	18bb      	adds	r3, r7, r2
 8003f84:	18ba      	adds	r2, r7, r2
 8003f86:	8812      	ldrh	r2, [r2, #0]
 8003f88:	188a      	adds	r2, r1, r2
 8003f8a:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f8c:	1dbb      	adds	r3, r7, #6
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d019      	beq.n	8003fc8 <CreateMessage+0x22c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f94:	4bb0      	ldr	r3, [pc, #704]	@ (8004258 <CreateMessage+0x4bc>)
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fc f8e8 	bl	800016c <strlen>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	4bad      	ldr	r3, [pc, #692]	@ (8004258 <CreateMessage+0x4bc>)
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff fd43 	bl	8003a30 <ESP_Send>
 8003faa:	0003      	movs	r3, r0
 8003fac:	001a      	movs	r2, r3
 8003fae:	4bb2      	ldr	r3, [pc, #712]	@ (8004278 <CreateMessage+0x4dc>)
 8003fb0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fb2:	4bb2      	ldr	r3, [pc, #712]	@ (800427c <CreateMessage+0x4e0>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	4baf      	ldr	r3, [pc, #700]	@ (8004278 <CreateMessage+0x4dc>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	1e5a      	subs	r2, r3, #1
 8003fc0:	4193      	sbcs	r3, r2
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	4bad      	ldr	r3, [pc, #692]	@ (800427c <CreateMessage+0x4e0>)
 8003fc6:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003fc8:	4aaf      	ldr	r2, [pc, #700]	@ (8004288 <CreateMessage+0x4ec>)
 8003fca:	4ba6      	ldr	r3, [pc, #664]	@ (8004264 <CreateMessage+0x4c8>)
 8003fcc:	0011      	movs	r1, r2
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7ff fec0 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003fd4:	4ba4      	ldr	r3, [pc, #656]	@ (8004268 <CreateMessage+0x4cc>)
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	4ba4      	ldr	r3, [pc, #656]	@ (800426c <CreateMessage+0x4d0>)
 8003fda:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003fdc:	4c9c      	ldr	r4, [pc, #624]	@ (8004250 <CreateMessage+0x4b4>)
 8003fde:	49ab      	ldr	r1, [pc, #684]	@ (800428c <CreateMessage+0x4f0>)
 8003fe0:	489d      	ldr	r0, [pc, #628]	@ (8004258 <CreateMessage+0x4bc>)
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	4b9f      	ldr	r3, [pc, #636]	@ (8004264 <CreateMessage+0x4c8>)
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	0023      	movs	r3, r4
 8003fea:	f01e fc11 	bl	8022810 <siprintf>
#endif
  index += strlen(message);
 8003fee:	4b9a      	ldr	r3, [pc, #616]	@ (8004258 <CreateMessage+0x4bc>)
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7fc f8bb 	bl	800016c <strlen>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	b299      	uxth	r1, r3
 8003ffa:	220e      	movs	r2, #14
 8003ffc:	18bb      	adds	r3, r7, r2
 8003ffe:	18ba      	adds	r2, r7, r2
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	188a      	adds	r2, r1, r2
 8004004:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004006:	1dbb      	adds	r3, r7, #6
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d019      	beq.n	8004042 <CreateMessage+0x2a6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800400e:	4b92      	ldr	r3, [pc, #584]	@ (8004258 <CreateMessage+0x4bc>)
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f8ab 	bl	800016c <strlen>
 8004016:	0003      	movs	r3, r0
 8004018:	b29a      	uxth	r2, r3
 800401a:	4b8f      	ldr	r3, [pc, #572]	@ (8004258 <CreateMessage+0x4bc>)
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f7ff fd06 	bl	8003a30 <ESP_Send>
 8004024:	0003      	movs	r3, r0
 8004026:	001a      	movs	r2, r3
 8004028:	4b93      	ldr	r3, [pc, #588]	@ (8004278 <CreateMessage+0x4dc>)
 800402a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800402c:	4b93      	ldr	r3, [pc, #588]	@ (800427c <CreateMessage+0x4e0>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	001a      	movs	r2, r3
 8004032:	4b91      	ldr	r3, [pc, #580]	@ (8004278 <CreateMessage+0x4dc>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4013      	ands	r3, r2
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	4193      	sbcs	r3, r2
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b8f      	ldr	r3, [pc, #572]	@ (800427c <CreateMessage+0x4e0>)
 8004040:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 8004042:	f006 f9e1 	bl	800a408 <IsBMP280SensorPresent>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d043      	beq.n	80040d2 <CreateMessage+0x336>
    uint8ArrayToString(Buffer, hPaConfig);
 800404a:	4a91      	ldr	r2, [pc, #580]	@ (8004290 <CreateMessage+0x4f4>)
 800404c:	4b85      	ldr	r3, [pc, #532]	@ (8004264 <CreateMessage+0x4c8>)
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f7ff fe7f 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
    sprintf(&message[0], ",{\"name\":\"hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8004056:	4b84      	ldr	r3, [pc, #528]	@ (8004268 <CreateMessage+0x4cc>)
 8004058:	689c      	ldr	r4, [r3, #8]
 800405a:	4b84      	ldr	r3, [pc, #528]	@ (800426c <CreateMessage+0x4d0>)
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	1c18      	adds	r0, r3, #0
 8004060:	f7ff fa00 	bl	8003464 <__aeabi_f2d>
 8004064:	0002      	movs	r2, r0
 8004066:	000b      	movs	r3, r1
 8004068:	4d79      	ldr	r5, [pc, #484]	@ (8004250 <CreateMessage+0x4b4>)
 800406a:	498a      	ldr	r1, [pc, #552]	@ (8004294 <CreateMessage+0x4f8>)
 800406c:	487a      	ldr	r0, [pc, #488]	@ (8004258 <CreateMessage+0x4bc>)
 800406e:	9202      	str	r2, [sp, #8]
 8004070:	9303      	str	r3, [sp, #12]
 8004072:	4b7c      	ldr	r3, [pc, #496]	@ (8004264 <CreateMessage+0x4c8>)
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	002b      	movs	r3, r5
 8004078:	0022      	movs	r2, r4
 800407a:	f01e fbc9 	bl	8022810 <siprintf>
#endif
    index += strlen(message);
 800407e:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <CreateMessage+0x4bc>)
 8004080:	0018      	movs	r0, r3
 8004082:	f7fc f873 	bl	800016c <strlen>
 8004086:	0003      	movs	r3, r0
 8004088:	b299      	uxth	r1, r3
 800408a:	220e      	movs	r2, #14
 800408c:	18bb      	adds	r3, r7, r2
 800408e:	18ba      	adds	r2, r7, r2
 8004090:	8812      	ldrh	r2, [r2, #0]
 8004092:	188a      	adds	r2, r1, r2
 8004094:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004096:	1dbb      	adds	r3, r7, #6
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d019      	beq.n	80040d2 <CreateMessage+0x336>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800409e:	4b6e      	ldr	r3, [pc, #440]	@ (8004258 <CreateMessage+0x4bc>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7fc f863 	bl	800016c <strlen>
 80040a6:	0003      	movs	r3, r0
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004258 <CreateMessage+0x4bc>)
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fcbe 	bl	8003a30 <ESP_Send>
 80040b4:	0003      	movs	r3, r0
 80040b6:	001a      	movs	r2, r3
 80040b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004278 <CreateMessage+0x4dc>)
 80040ba:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80040bc:	4b6f      	ldr	r3, [pc, #444]	@ (800427c <CreateMessage+0x4e0>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	001a      	movs	r2, r3
 80040c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004278 <CreateMessage+0x4dc>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	4013      	ands	r3, r2
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	4193      	sbcs	r3, r2
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4b6b      	ldr	r3, [pc, #428]	@ (800427c <CreateMessage+0x4e0>)
 80040d0:	701a      	strb	r2, [r3, #0]
    }
  }

  uint8ArrayToString(Buffer, soundConfig);
 80040d2:	4a71      	ldr	r2, [pc, #452]	@ (8004298 <CreateMessage+0x4fc>)
 80040d4:	4b63      	ldr	r3, [pc, #396]	@ (8004264 <CreateMessage+0x4c8>)
 80040d6:	0011      	movs	r1, r2
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff fe3b 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 80040de:	4b62      	ldr	r3, [pc, #392]	@ (8004268 <CreateMessage+0x4cc>)
 80040e0:	689c      	ldr	r4, [r3, #8]
 80040e2:	4b62      	ldr	r3, [pc, #392]	@ (800426c <CreateMessage+0x4d0>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	1c18      	adds	r0, r3, #0
 80040e8:	f7ff f9bc 	bl	8003464 <__aeabi_f2d>
 80040ec:	0002      	movs	r2, r0
 80040ee:	000b      	movs	r3, r1
 80040f0:	4d57      	ldr	r5, [pc, #348]	@ (8004250 <CreateMessage+0x4b4>)
 80040f2:	496a      	ldr	r1, [pc, #424]	@ (800429c <CreateMessage+0x500>)
 80040f4:	4858      	ldr	r0, [pc, #352]	@ (8004258 <CreateMessage+0x4bc>)
 80040f6:	9202      	str	r2, [sp, #8]
 80040f8:	9303      	str	r3, [sp, #12]
 80040fa:	4b5a      	ldr	r3, [pc, #360]	@ (8004264 <CreateMessage+0x4c8>)
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	002b      	movs	r3, r5
 8004100:	0022      	movs	r2, r4
 8004102:	f01e fb85 	bl	8022810 <siprintf>
#endif
  index += strlen(message);
 8004106:	4b54      	ldr	r3, [pc, #336]	@ (8004258 <CreateMessage+0x4bc>)
 8004108:	0018      	movs	r0, r3
 800410a:	f7fc f82f 	bl	800016c <strlen>
 800410e:	0003      	movs	r3, r0
 8004110:	b299      	uxth	r1, r3
 8004112:	220e      	movs	r2, #14
 8004114:	18bb      	adds	r3, r7, r2
 8004116:	18ba      	adds	r2, r7, r2
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	188a      	adds	r2, r1, r2
 800411c:	801a      	strh	r2, [r3, #0]
  if (send) {
 800411e:	1dbb      	adds	r3, r7, #6
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d019      	beq.n	800415a <CreateMessage+0x3be>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004126:	4b4c      	ldr	r3, [pc, #304]	@ (8004258 <CreateMessage+0x4bc>)
 8004128:	0018      	movs	r0, r3
 800412a:	f7fc f81f 	bl	800016c <strlen>
 800412e:	0003      	movs	r3, r0
 8004130:	b29a      	uxth	r2, r3
 8004132:	4b49      	ldr	r3, [pc, #292]	@ (8004258 <CreateMessage+0x4bc>)
 8004134:	0011      	movs	r1, r2
 8004136:	0018      	movs	r0, r3
 8004138:	f7ff fc7a 	bl	8003a30 <ESP_Send>
 800413c:	0003      	movs	r3, r0
 800413e:	001a      	movs	r2, r3
 8004140:	4b4d      	ldr	r3, [pc, #308]	@ (8004278 <CreateMessage+0x4dc>)
 8004142:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004144:	4b4d      	ldr	r3, [pc, #308]	@ (800427c <CreateMessage+0x4e0>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	001a      	movs	r2, r3
 800414a:	4b4b      	ldr	r3, [pc, #300]	@ (8004278 <CreateMessage+0x4dc>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	4013      	ands	r3, r2
 8004150:	1e5a      	subs	r2, r3, #1
 8004152:	4193      	sbcs	r3, r2
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b49      	ldr	r3, [pc, #292]	@ (800427c <CreateMessage+0x4e0>)
 8004158:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	4053      	eors	r3, r2
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d100      	bne.n	800416a <CreateMessage+0x3ce>
 8004168:	e14b      	b.n	8004402 <CreateMessage+0x666>
    uint8ArrayToString(Buffer, solarConfig);
 800416a:	4a4d      	ldr	r2, [pc, #308]	@ (80042a0 <CreateMessage+0x504>)
 800416c:	4b3d      	ldr	r3, [pc, #244]	@ (8004264 <CreateMessage+0x4c8>)
 800416e:	0011      	movs	r1, r2
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff fdef 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8004176:	4b3c      	ldr	r3, [pc, #240]	@ (8004268 <CreateMessage+0x4cc>)
 8004178:	689c      	ldr	r4, [r3, #8]
 800417a:	4b4a      	ldr	r3, [pc, #296]	@ (80042a4 <CreateMessage+0x508>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	1c18      	adds	r0, r3, #0
 8004180:	f7ff f970 	bl	8003464 <__aeabi_f2d>
 8004184:	0002      	movs	r2, r0
 8004186:	000b      	movs	r3, r1
 8004188:	4d31      	ldr	r5, [pc, #196]	@ (8004250 <CreateMessage+0x4b4>)
 800418a:	4947      	ldr	r1, [pc, #284]	@ (80042a8 <CreateMessage+0x50c>)
 800418c:	4832      	ldr	r0, [pc, #200]	@ (8004258 <CreateMessage+0x4bc>)
 800418e:	9202      	str	r2, [sp, #8]
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	4b34      	ldr	r3, [pc, #208]	@ (8004264 <CreateMessage+0x4c8>)
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	002b      	movs	r3, r5
 8004198:	0022      	movs	r2, r4
 800419a:	f01e fb39 	bl	8022810 <siprintf>
#endif
    index += strlen(message);
 800419e:	4b2e      	ldr	r3, [pc, #184]	@ (8004258 <CreateMessage+0x4bc>)
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7fb ffe3 	bl	800016c <strlen>
 80041a6:	0003      	movs	r3, r0
 80041a8:	b299      	uxth	r1, r3
 80041aa:	220e      	movs	r2, #14
 80041ac:	18bb      	adds	r3, r7, r2
 80041ae:	18ba      	adds	r2, r7, r2
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	188a      	adds	r2, r1, r2
 80041b4:	801a      	strh	r2, [r3, #0]
    if (send) {
 80041b6:	1dbb      	adds	r3, r7, #6
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d019      	beq.n	80041f2 <CreateMessage+0x456>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80041be:	4b26      	ldr	r3, [pc, #152]	@ (8004258 <CreateMessage+0x4bc>)
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fb ffd3 	bl	800016c <strlen>
 80041c6:	0003      	movs	r3, r0
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	4b23      	ldr	r3, [pc, #140]	@ (8004258 <CreateMessage+0x4bc>)
 80041cc:	0011      	movs	r1, r2
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff fc2e 	bl	8003a30 <ESP_Send>
 80041d4:	0003      	movs	r3, r0
 80041d6:	001a      	movs	r2, r3
 80041d8:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <CreateMessage+0x4dc>)
 80041da:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80041dc:	4b27      	ldr	r3, [pc, #156]	@ (800427c <CreateMessage+0x4e0>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	001a      	movs	r2, r3
 80041e2:	4b25      	ldr	r3, [pc, #148]	@ (8004278 <CreateMessage+0x4dc>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	4013      	ands	r3, r2
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	4193      	sbcs	r3, r2
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4b23      	ldr	r3, [pc, #140]	@ (800427c <CreateMessage+0x4e0>)
 80041f0:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80041f2:	4b2e      	ldr	r3, [pc, #184]	@ (80042ac <CreateMessage+0x510>)
 80041f4:	791b      	ldrb	r3, [r3, #4]
 80041f6:	2b35      	cmp	r3, #53	@ 0x35
 80041f8:	d000      	beq.n	80041fc <CreateMessage+0x460>
 80041fa:	e075      	b.n	80042e8 <CreateMessage+0x54c>
 80041fc:	f002 ff0c 	bl	8007018 <Check_USB_PowerOn>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d071      	beq.n	80042e8 <CreateMessage+0x54c>
      uint8ArrayToString(Buffer, noxConfig);
 8004204:	4a2a      	ldr	r2, [pc, #168]	@ (80042b0 <CreateMessage+0x514>)
 8004206:	4b17      	ldr	r3, [pc, #92]	@ (8004264 <CreateMessage+0x4c8>)
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f7ff fda2 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004210:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <CreateMessage+0x4cc>)
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	4b15      	ldr	r3, [pc, #84]	@ (800426c <CreateMessage+0x4d0>)
 8004216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004218:	4c0d      	ldr	r4, [pc, #52]	@ (8004250 <CreateMessage+0x4b4>)
 800421a:	4926      	ldr	r1, [pc, #152]	@ (80042b4 <CreateMessage+0x518>)
 800421c:	480e      	ldr	r0, [pc, #56]	@ (8004258 <CreateMessage+0x4bc>)
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <CreateMessage+0x4c8>)
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	0023      	movs	r3, r4
 8004226:	f01e faf3 	bl	8022810 <siprintf>
#endif
      index += strlen(message);
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <CreateMessage+0x4bc>)
 800422c:	0018      	movs	r0, r3
 800422e:	f7fb ff9d 	bl	800016c <strlen>
 8004232:	0003      	movs	r3, r0
 8004234:	b299      	uxth	r1, r3
 8004236:	220e      	movs	r2, #14
 8004238:	18bb      	adds	r3, r7, r2
 800423a:	18ba      	adds	r2, r7, r2
 800423c:	8812      	ldrh	r2, [r2, #0]
 800423e:	188a      	adds	r2, r1, r2
 8004240:	801a      	strh	r2, [r3, #0]
      if (send) {
 8004242:	1dbb      	adds	r3, r7, #6
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04e      	beq.n	80042e8 <CreateMessage+0x54c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800424a:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <CreateMessage+0x4bc>)
 800424c:	0018      	movs	r0, r3
 800424e:	e033      	b.n	80042b8 <CreateMessage+0x51c>
 8004250:	20000728 	.word	0x20000728
 8004254:	08028b80 	.word	0x08028b80
 8004258:	20000588 	.word	0x20000588
 800425c:	08025e34 	.word	0x08025e34
 8004260:	200006b0 	.word	0x200006b0
 8004264:	20000748 	.word	0x20000748
 8004268:	20000568 	.word	0x20000568
 800426c:	20000638 	.word	0x20000638
 8004270:	08025e38 	.word	0x08025e38
 8004274:	20000589 	.word	0x20000589
 8004278:	20000761 	.word	0x20000761
 800427c:	2000002d 	.word	0x2000002d
 8004280:	200006bc 	.word	0x200006bc
 8004284:	08025e8c 	.word	0x08025e8c
 8004288:	200006d4 	.word	0x200006d4
 800428c:	08025ee4 	.word	0x08025ee4
 8004290:	200006e0 	.word	0x200006e0
 8004294:	08025f38 	.word	0x08025f38
 8004298:	200006c8 	.word	0x200006c8
 800429c:	08025f90 	.word	0x08025f90
 80042a0:	200006f8 	.word	0x200006f8
 80042a4:	20000584 	.word	0x20000584
 80042a8:	08025fec 	.word	0x08025fec
 80042ac:	20000e48 	.word	0x20000e48
 80042b0:	20000704 	.word	0x20000704
 80042b4:	0802604c 	.word	0x0802604c
 80042b8:	f7fb ff58 	bl	800016c <strlen>
 80042bc:	0003      	movs	r3, r0
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b7d      	ldr	r3, [pc, #500]	@ (80044b8 <CreateMessage+0x71c>)
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff fbb3 	bl	8003a30 <ESP_Send>
 80042ca:	0003      	movs	r3, r0
 80042cc:	001a      	movs	r2, r3
 80042ce:	4b7b      	ldr	r3, [pc, #492]	@ (80044bc <CreateMessage+0x720>)
 80042d0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80042d2:	4b7b      	ldr	r3, [pc, #492]	@ (80044c0 <CreateMessage+0x724>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	001a      	movs	r2, r3
 80042d8:	4b78      	ldr	r3, [pc, #480]	@ (80044bc <CreateMessage+0x720>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4013      	ands	r3, r2
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	4193      	sbcs	r3, r2
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b76      	ldr	r3, [pc, #472]	@ (80044c0 <CreateMessage+0x724>)
 80042e6:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 80042e8:	f006 ffbc 	bl	800b264 <sen5x_Get_sen5x_enable_state>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d100      	bne.n	80042f2 <CreateMessage+0x556>
 80042f0:	e087      	b.n	8004402 <CreateMessage+0x666>
      uint8ArrayToString(Buffer, PM2Config);
 80042f2:	4a74      	ldr	r2, [pc, #464]	@ (80044c4 <CreateMessage+0x728>)
 80042f4:	4b74      	ldr	r3, [pc, #464]	@ (80044c8 <CreateMessage+0x72c>)
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff fd2b 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 80042fe:	4b73      	ldr	r3, [pc, #460]	@ (80044cc <CreateMessage+0x730>)
 8004300:	689c      	ldr	r4, [r3, #8]
 8004302:	4b73      	ldr	r3, [pc, #460]	@ (80044d0 <CreateMessage+0x734>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	1c18      	adds	r0, r3, #0
 8004308:	f7ff f8ac 	bl	8003464 <__aeabi_f2d>
 800430c:	0002      	movs	r2, r0
 800430e:	000b      	movs	r3, r1
 8004310:	4d70      	ldr	r5, [pc, #448]	@ (80044d4 <CreateMessage+0x738>)
 8004312:	4971      	ldr	r1, [pc, #452]	@ (80044d8 <CreateMessage+0x73c>)
 8004314:	4868      	ldr	r0, [pc, #416]	@ (80044b8 <CreateMessage+0x71c>)
 8004316:	9202      	str	r2, [sp, #8]
 8004318:	9303      	str	r3, [sp, #12]
 800431a:	4b6b      	ldr	r3, [pc, #428]	@ (80044c8 <CreateMessage+0x72c>)
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	002b      	movs	r3, r5
 8004320:	0022      	movs	r2, r4
 8004322:	f01e fa75 	bl	8022810 <siprintf>
#endif
      index += strlen(message);
 8004326:	4b64      	ldr	r3, [pc, #400]	@ (80044b8 <CreateMessage+0x71c>)
 8004328:	0018      	movs	r0, r3
 800432a:	f7fb ff1f 	bl	800016c <strlen>
 800432e:	0003      	movs	r3, r0
 8004330:	b299      	uxth	r1, r3
 8004332:	220e      	movs	r2, #14
 8004334:	18bb      	adds	r3, r7, r2
 8004336:	18ba      	adds	r2, r7, r2
 8004338:	8812      	ldrh	r2, [r2, #0]
 800433a:	188a      	adds	r2, r1, r2
 800433c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800433e:	1dbb      	adds	r3, r7, #6
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d019      	beq.n	800437a <CreateMessage+0x5de>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8004346:	4b5c      	ldr	r3, [pc, #368]	@ (80044b8 <CreateMessage+0x71c>)
 8004348:	0018      	movs	r0, r3
 800434a:	f7fb ff0f 	bl	800016c <strlen>
 800434e:	0003      	movs	r3, r0
 8004350:	b29a      	uxth	r2, r3
 8004352:	4b59      	ldr	r3, [pc, #356]	@ (80044b8 <CreateMessage+0x71c>)
 8004354:	0011      	movs	r1, r2
 8004356:	0018      	movs	r0, r3
 8004358:	f7ff fb6a 	bl	8003a30 <ESP_Send>
 800435c:	0003      	movs	r3, r0
 800435e:	001a      	movs	r2, r3
 8004360:	4b56      	ldr	r3, [pc, #344]	@ (80044bc <CreateMessage+0x720>)
 8004362:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8004364:	4b56      	ldr	r3, [pc, #344]	@ (80044c0 <CreateMessage+0x724>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	001a      	movs	r2, r3
 800436a:	4b54      	ldr	r3, [pc, #336]	@ (80044bc <CreateMessage+0x720>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	4013      	ands	r3, r2
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	4193      	sbcs	r3, r2
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4b52      	ldr	r3, [pc, #328]	@ (80044c0 <CreateMessage+0x724>)
 8004378:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 800437a:	4a58      	ldr	r2, [pc, #352]	@ (80044dc <CreateMessage+0x740>)
 800437c:	4b52      	ldr	r3, [pc, #328]	@ (80044c8 <CreateMessage+0x72c>)
 800437e:	0011      	movs	r1, r2
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fce7 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8004386:	4b51      	ldr	r3, [pc, #324]	@ (80044cc <CreateMessage+0x730>)
 8004388:	689c      	ldr	r4, [r3, #8]
 800438a:	4b51      	ldr	r3, [pc, #324]	@ (80044d0 <CreateMessage+0x734>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	1c18      	adds	r0, r3, #0
 8004390:	f7ff f868 	bl	8003464 <__aeabi_f2d>
 8004394:	0002      	movs	r2, r0
 8004396:	000b      	movs	r3, r1
 8004398:	4d4e      	ldr	r5, [pc, #312]	@ (80044d4 <CreateMessage+0x738>)
 800439a:	4951      	ldr	r1, [pc, #324]	@ (80044e0 <CreateMessage+0x744>)
 800439c:	4846      	ldr	r0, [pc, #280]	@ (80044b8 <CreateMessage+0x71c>)
 800439e:	9202      	str	r2, [sp, #8]
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	4b49      	ldr	r3, [pc, #292]	@ (80044c8 <CreateMessage+0x72c>)
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	002b      	movs	r3, r5
 80043a8:	0022      	movs	r2, r4
 80043aa:	f01e fa31 	bl	8022810 <siprintf>
#endif
      index += strlen(message);
 80043ae:	4b42      	ldr	r3, [pc, #264]	@ (80044b8 <CreateMessage+0x71c>)
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7fb fedb 	bl	800016c <strlen>
 80043b6:	0003      	movs	r3, r0
 80043b8:	b299      	uxth	r1, r3
 80043ba:	220e      	movs	r2, #14
 80043bc:	18bb      	adds	r3, r7, r2
 80043be:	18ba      	adds	r2, r7, r2
 80043c0:	8812      	ldrh	r2, [r2, #0]
 80043c2:	188a      	adds	r2, r1, r2
 80043c4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80043c6:	1dbb      	adds	r3, r7, #6
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d019      	beq.n	8004402 <CreateMessage+0x666>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80043ce:	4b3a      	ldr	r3, [pc, #232]	@ (80044b8 <CreateMessage+0x71c>)
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fb fecb 	bl	800016c <strlen>
 80043d6:	0003      	movs	r3, r0
 80043d8:	b29a      	uxth	r2, r3
 80043da:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <CreateMessage+0x71c>)
 80043dc:	0011      	movs	r1, r2
 80043de:	0018      	movs	r0, r3
 80043e0:	f7ff fb26 	bl	8003a30 <ESP_Send>
 80043e4:	0003      	movs	r3, r0
 80043e6:	001a      	movs	r2, r3
 80043e8:	4b34      	ldr	r3, [pc, #208]	@ (80044bc <CreateMessage+0x720>)
 80043ea:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80043ec:	4b34      	ldr	r3, [pc, #208]	@ (80044c0 <CreateMessage+0x724>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	001a      	movs	r2, r3
 80043f2:	4b32      	ldr	r3, [pc, #200]	@ (80044bc <CreateMessage+0x720>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	4013      	ands	r3, r2
 80043f8:	1e5a      	subs	r2, r3, #1
 80043fa:	4193      	sbcs	r3, r2
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b30      	ldr	r3, [pc, #192]	@ (80044c0 <CreateMessage+0x724>)
 8004400:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 8004402:	4a38      	ldr	r2, [pc, #224]	@ (80044e4 <CreateMessage+0x748>)
 8004404:	4b30      	ldr	r3, [pc, #192]	@ (80044c8 <CreateMessage+0x72c>)
 8004406:	0011      	movs	r1, r2
 8004408:	0018      	movs	r0, r3
 800440a:	f7ff fca3 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800440e:	4b2f      	ldr	r3, [pc, #188]	@ (80044cc <CreateMessage+0x730>)
 8004410:	689c      	ldr	r4, [r3, #8]
 8004412:	4b35      	ldr	r3, [pc, #212]	@ (80044e8 <CreateMessage+0x74c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	1c18      	adds	r0, r3, #0
 8004418:	f7ff f824 	bl	8003464 <__aeabi_f2d>
 800441c:	0002      	movs	r2, r0
 800441e:	000b      	movs	r3, r1
 8004420:	4d2c      	ldr	r5, [pc, #176]	@ (80044d4 <CreateMessage+0x738>)
 8004422:	4932      	ldr	r1, [pc, #200]	@ (80044ec <CreateMessage+0x750>)
 8004424:	4824      	ldr	r0, [pc, #144]	@ (80044b8 <CreateMessage+0x71c>)
 8004426:	9202      	str	r2, [sp, #8]
 8004428:	9303      	str	r3, [sp, #12]
 800442a:	4b27      	ldr	r3, [pc, #156]	@ (80044c8 <CreateMessage+0x72c>)
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	002b      	movs	r3, r5
 8004430:	0022      	movs	r2, r4
 8004432:	f01e f9ed 	bl	8022810 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8004436:	4b20      	ldr	r3, [pc, #128]	@ (80044b8 <CreateMessage+0x71c>)
 8004438:	0018      	movs	r0, r3
 800443a:	f7fb fe97 	bl	800016c <strlen>
 800443e:	0002      	movs	r2, r0
 8004440:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <CreateMessage+0x71c>)
 8004442:	18d3      	adds	r3, r2, r3
 8004444:	4a2a      	ldr	r2, [pc, #168]	@ (80044f0 <CreateMessage+0x754>)
 8004446:	0011      	movs	r1, r2
 8004448:	0018      	movs	r0, r3
 800444a:	f01e f9e1 	bl	8022810 <siprintf>
  index += strlen(message);
 800444e:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <CreateMessage+0x71c>)
 8004450:	0018      	movs	r0, r3
 8004452:	f7fb fe8b 	bl	800016c <strlen>
 8004456:	0003      	movs	r3, r0
 8004458:	b299      	uxth	r1, r3
 800445a:	220e      	movs	r2, #14
 800445c:	18bb      	adds	r3, r7, r2
 800445e:	18ba      	adds	r2, r7, r2
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	188a      	adds	r2, r1, r2
 8004464:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004466:	1dbb      	adds	r3, r7, #6
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <CreateMessage+0x706>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800446e:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <CreateMessage+0x71c>)
 8004470:	0018      	movs	r0, r3
 8004472:	f7fb fe7b 	bl	800016c <strlen>
 8004476:	0003      	movs	r3, r0
 8004478:	b29a      	uxth	r2, r3
 800447a:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <CreateMessage+0x71c>)
 800447c:	0011      	movs	r1, r2
 800447e:	0018      	movs	r0, r3
 8004480:	f7ff fad6 	bl	8003a30 <ESP_Send>
 8004484:	0003      	movs	r3, r0
 8004486:	001a      	movs	r2, r3
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <CreateMessage+0x720>)
 800448a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800448c:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <CreateMessage+0x724>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	001a      	movs	r2, r3
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <CreateMessage+0x720>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	4013      	ands	r3, r2
 8004498:	1e5a      	subs	r2, r3, #1
 800449a:	4193      	sbcs	r3, r2
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b08      	ldr	r3, [pc, #32]	@ (80044c0 <CreateMessage+0x724>)
 80044a0:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <CreateMessage+0x724>)
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
  return index;
 80044aa:	230e      	movs	r3, #14
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	881b      	ldrh	r3, [r3, #0]
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b005      	add	sp, #20
 80044b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b8:	20000588 	.word	0x20000588
 80044bc:	20000761 	.word	0x20000761
 80044c0:	2000002d 	.word	0x2000002d
 80044c4:	20000710 	.word	0x20000710
 80044c8:	20000748 	.word	0x20000748
 80044cc:	20000568 	.word	0x20000568
 80044d0:	20000638 	.word	0x20000638
 80044d4:	20000728 	.word	0x20000728
 80044d8:	080260a0 	.word	0x080260a0
 80044dc:	2000071c 	.word	0x2000071c
 80044e0:	080260fc 	.word	0x080260fc
 80044e4:	200006ec 	.word	0x200006ec
 80044e8:	20000580 	.word	0x20000580
 80044ec:	08026158 	.word	0x08026158
 80044f0:	080261b0 	.word	0x080261b0

080044f4 <StartProg>:

void StartProg(){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80044f8:	2064      	movs	r0, #100	@ 0x64
 80044fa:	f00c fde7 	bl	80110cc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <StartProg+0x60>)
 8004500:	2200      	movs	r2, #0
 8004502:	2101      	movs	r1, #1
 8004504:	0018      	movs	r0, r3
 8004506:	f00e f868 	bl	80125da <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800450a:	2064      	movs	r0, #100	@ 0x64
 800450c:	f00c fdde 	bl	80110cc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004510:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <StartProg+0x60>)
 8004512:	2200      	movs	r2, #0
 8004514:	2102      	movs	r1, #2
 8004516:	0018      	movs	r0, r3
 8004518:	f00e f85f 	bl	80125da <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800451c:	23fa      	movs	r3, #250	@ 0xfa
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	0018      	movs	r0, r3
 8004522:	f00c fdd3 	bl	80110cc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <StartProg+0x60>)
 8004528:	2201      	movs	r2, #1
 800452a:	2101      	movs	r1, #1
 800452c:	0018      	movs	r0, r3
 800452e:	f00e f854 	bl	80125da <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004532:	23fa      	movs	r3, #250	@ 0xfa
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	0018      	movs	r0, r3
 8004538:	f00c fdc8 	bl	80110cc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <StartProg+0x60>)
 800453e:	2201      	movs	r2, #1
 8004540:	2102      	movs	r1, #2
 8004542:	0018      	movs	r0, r3
 8004544:	f00e f849 	bl	80125da <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004548:	2028      	movs	r0, #40	@ 0x28
 800454a:	f00c fdbf 	bl	80110cc <HAL_Delay>
}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	50001c00 	.word	0x50001c00

08004558 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	b0d9      	sub	sp, #356	@ 0x164
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	0008      	movs	r0, r1
 8004562:	0011      	movs	r1, r2
 8004564:	4ba4      	ldr	r3, [pc, #656]	@ (80047f8 <ParseBuffer+0x2a0>)
 8004566:	24b0      	movs	r4, #176	@ 0xb0
 8004568:	0064      	lsls	r4, r4, #1
 800456a:	191b      	adds	r3, r3, r4
 800456c:	19db      	adds	r3, r3, r7
 800456e:	1c02      	adds	r2, r0, #0
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	4ba2      	ldr	r3, [pc, #648]	@ (80047fc <ParseBuffer+0x2a4>)
 8004574:	191b      	adds	r3, r3, r4
 8004576:	19db      	adds	r3, r3, r7
 8004578:	1c0a      	adds	r2, r1, #0
 800457a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800457c:	2380      	movs	r3, #128	@ 0x80
 800457e:	005a      	lsls	r2, r3, #1
 8004580:	2348      	movs	r3, #72	@ 0x48
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2100      	movs	r1, #0
 8004586:	0018      	movs	r0, r3
 8004588:	f01e faa8 	bl	8022adc <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800458c:	2360      	movs	r3, #96	@ 0x60
 800458e:	33ff      	adds	r3, #255	@ 0xff
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004596:	23ae      	movs	r3, #174	@ 0xae
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	18fb      	adds	r3, r7, r3
 800459c:	2200      	movs	r2, #0
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	e013      	b.n	80045ca <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80045a2:	20ae      	movs	r0, #174	@ 0xae
 80045a4:	0040      	lsls	r0, r0, #1
 80045a6:	183b      	adds	r3, r7, r0
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	18d2      	adds	r2, r2, r3
 80045ae:	183b      	adds	r3, r7, r0
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	7811      	ldrb	r1, [r2, #0]
 80045b4:	4a92      	ldr	r2, [pc, #584]	@ (8004800 <ParseBuffer+0x2a8>)
 80045b6:	24b0      	movs	r4, #176	@ 0xb0
 80045b8:	0064      	lsls	r4, r4, #1
 80045ba:	1912      	adds	r2, r2, r4
 80045bc:	19d2      	adds	r2, r2, r7
 80045be:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	183b      	adds	r3, r7, r0
 80045c6:	3201      	adds	r2, #1
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	23ae      	movs	r3, #174	@ 0xae
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	18fa      	adds	r2, r7, r3
 80045d0:	4b89      	ldr	r3, [pc, #548]	@ (80047f8 <ParseBuffer+0x2a0>)
 80045d2:	21b0      	movs	r1, #176	@ 0xb0
 80045d4:	0049      	lsls	r1, r1, #1
 80045d6:	185b      	adds	r3, r3, r1
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	8812      	ldrh	r2, [r2, #0]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3df      	bcc.n	80045a2 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80045e2:	4b85      	ldr	r3, [pc, #532]	@ (80047f8 <ParseBuffer+0x2a0>)
 80045e4:	185b      	adds	r3, r3, r1
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	4a85      	ldr	r2, [pc, #532]	@ (8004800 <ParseBuffer+0x2a8>)
 80045ec:	1852      	adds	r2, r2, r1
 80045ee:	19d2      	adds	r2, r2, r7
 80045f0:	2100      	movs	r1, #0
 80045f2:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80045f4:	f00c f98e 	bl	8010914 <GetVerboseLevel>
 80045f8:	0003      	movs	r3, r0
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d106      	bne.n	800460c <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80045fe:	2348      	movs	r3, #72	@ 0x48
 8004600:	18fa      	adds	r2, r7, r3
 8004602:	4b80      	ldr	r3, [pc, #512]	@ (8004804 <ParseBuffer+0x2ac>)
 8004604:	0011      	movs	r1, r2
 8004606:	0018      	movs	r0, r3
 8004608:	f01e f892 	bl	8022730 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	26ac      	movs	r6, #172	@ 0xac
 8004610:	0076      	lsls	r6, r6, #1
 8004612:	19ba      	adds	r2, r7, r6
 8004614:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004616:	4b7c      	ldr	r3, [pc, #496]	@ (8004808 <ParseBuffer+0x2b0>)
 8004618:	25b0      	movs	r5, #176	@ 0xb0
 800461a:	006d      	lsls	r5, r5, #1
 800461c:	195b      	adds	r3, r3, r5
 800461e:	19db      	adds	r3, r3, r7
 8004620:	4a7a      	ldr	r2, [pc, #488]	@ (800480c <ParseBuffer+0x2b4>)
 8004622:	8811      	ldrh	r1, [r2, #0]
 8004624:	8019      	strh	r1, [r3, #0]
 8004626:	7892      	ldrb	r2, [r2, #2]
 8004628:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 800462a:	4b79      	ldr	r3, [pc, #484]	@ (8004810 <ParseBuffer+0x2b8>)
 800462c:	195b      	adds	r3, r3, r5
 800462e:	19db      	adds	r3, r3, r7
 8004630:	4a78      	ldr	r2, [pc, #480]	@ (8004814 <ParseBuffer+0x2bc>)
 8004632:	6811      	ldr	r1, [r2, #0]
 8004634:	6019      	str	r1, [r3, #0]
 8004636:	8892      	ldrh	r2, [r2, #4]
 8004638:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800463a:	4b77      	ldr	r3, [pc, #476]	@ (8004818 <ParseBuffer+0x2c0>)
 800463c:	195b      	adds	r3, r3, r5
 800463e:	19db      	adds	r3, r3, r7
 8004640:	4a76      	ldr	r2, [pc, #472]	@ (800481c <ParseBuffer+0x2c4>)
 8004642:	6811      	ldr	r1, [r2, #0]
 8004644:	6019      	str	r1, [r3, #0]
 8004646:	7912      	ldrb	r2, [r2, #4]
 8004648:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800464a:	4b75      	ldr	r3, [pc, #468]	@ (8004820 <ParseBuffer+0x2c8>)
 800464c:	195b      	adds	r3, r3, r5
 800464e:	19db      	adds	r3, r3, r7
 8004650:	4a74      	ldr	r2, [pc, #464]	@ (8004824 <ParseBuffer+0x2cc>)
 8004652:	6811      	ldr	r1, [r2, #0]
 8004654:	6019      	str	r1, [r3, #0]
 8004656:	8892      	ldrh	r2, [r2, #4]
 8004658:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800465a:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <ParseBuffer+0x2d0>)
 800465c:	195b      	adds	r3, r3, r5
 800465e:	19db      	adds	r3, r3, r7
 8004660:	223e      	movs	r2, #62	@ 0x3e
 8004662:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004664:	4b71      	ldr	r3, [pc, #452]	@ (800482c <ParseBuffer+0x2d4>)
 8004666:	195b      	adds	r3, r3, r5
 8004668:	19db      	adds	r3, r3, r7
 800466a:	4a71      	ldr	r2, [pc, #452]	@ (8004830 <ParseBuffer+0x2d8>)
 800466c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800466e:	c313      	stmia	r3!, {r0, r1, r4}
 8004670:	8811      	ldrh	r1, [r2, #0]
 8004672:	8019      	strh	r1, [r3, #0]
 8004674:	7892      	ldrb	r2, [r2, #2]
 8004676:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004678:	4b6e      	ldr	r3, [pc, #440]	@ (8004834 <ParseBuffer+0x2dc>)
 800467a:	195b      	adds	r3, r3, r5
 800467c:	19db      	adds	r3, r3, r7
 800467e:	4a6e      	ldr	r2, [pc, #440]	@ (8004838 <ParseBuffer+0x2e0>)
 8004680:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004682:	c313      	stmia	r3!, {r0, r1, r4}
 8004684:	8812      	ldrh	r2, [r2, #0]
 8004686:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004688:	4b5c      	ldr	r3, [pc, #368]	@ (80047fc <ParseBuffer+0x2a4>)
 800468a:	195b      	adds	r3, r3, r5
 800468c:	19db      	adds	r3, r3, r7
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004694:	2344      	movs	r3, #68	@ 0x44
 8004696:	18fa      	adds	r2, r7, r3
 8004698:	2348      	movs	r3, #72	@ 0x48
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	0011      	movs	r1, r2
 800469e:	0018      	movs	r0, r3
 80046a0:	f01e fa57 	bl	8022b52 <strstr>
 80046a4:	0003      	movs	r3, r0
 80046a6:	19ba      	adds	r2, r7, r6
 80046a8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80046aa:	4b54      	ldr	r3, [pc, #336]	@ (80047fc <ParseBuffer+0x2a4>)
 80046ac:	22b0      	movs	r2, #176	@ 0xb0
 80046ae:	0052      	lsls	r2, r2, #1
 80046b0:	189b      	adds	r3, r3, r2
 80046b2:	19db      	adds	r3, r3, r7
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10c      	bne.n	80046d4 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80046ba:	232c      	movs	r3, #44	@ 0x2c
 80046bc:	18fa      	adds	r2, r7, r3
 80046be:	2348      	movs	r3, #72	@ 0x48
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f01e fa44 	bl	8022b52 <strstr>
 80046ca:	0003      	movs	r3, r0
 80046cc:	22ac      	movs	r2, #172	@ 0xac
 80046ce:	0052      	lsls	r2, r2, #1
 80046d0:	18ba      	adds	r2, r7, r2
 80046d2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80046d4:	4b49      	ldr	r3, [pc, #292]	@ (80047fc <ParseBuffer+0x2a4>)
 80046d6:	22b0      	movs	r2, #176	@ 0xb0
 80046d8:	0052      	lsls	r2, r2, #1
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	19db      	adds	r3, r3, r7
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d10c      	bne.n	80046fe <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80046e4:	2328      	movs	r3, #40	@ 0x28
 80046e6:	18fa      	adds	r2, r7, r3
 80046e8:	2348      	movs	r3, #72	@ 0x48
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	0011      	movs	r1, r2
 80046ee:	0018      	movs	r0, r3
 80046f0:	f01e fa2f 	bl	8022b52 <strstr>
 80046f4:	0003      	movs	r3, r0
 80046f6:	22ac      	movs	r2, #172	@ 0xac
 80046f8:	0052      	lsls	r2, r2, #1
 80046fa:	18ba      	adds	r2, r7, r2
 80046fc:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80046fe:	4b3f      	ldr	r3, [pc, #252]	@ (80047fc <ParseBuffer+0x2a4>)
 8004700:	22b0      	movs	r2, #176	@ 0xb0
 8004702:	0052      	lsls	r2, r2, #1
 8004704:	189b      	adds	r3, r3, r2
 8004706:	19db      	adds	r3, r3, r7
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b05      	cmp	r3, #5
 800470c:	d10c      	bne.n	8004728 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800470e:	2308      	movs	r3, #8
 8004710:	18fa      	adds	r2, r7, r3
 8004712:	2348      	movs	r3, #72	@ 0x48
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	0011      	movs	r1, r2
 8004718:	0018      	movs	r0, r3
 800471a:	f01e fa1a 	bl	8022b52 <strstr>
 800471e:	0003      	movs	r3, r0
 8004720:	22ac      	movs	r2, #172	@ 0xac
 8004722:	0052      	lsls	r2, r2, #1
 8004724:	18ba      	adds	r2, r7, r2
 8004726:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004728:	233c      	movs	r3, #60	@ 0x3c
 800472a:	18fa      	adds	r2, r7, r3
 800472c:	2448      	movs	r4, #72	@ 0x48
 800472e:	193b      	adds	r3, r7, r4
 8004730:	0011      	movs	r1, r2
 8004732:	0018      	movs	r0, r3
 8004734:	f01e fa0d 	bl	8022b52 <strstr>
 8004738:	0003      	movs	r3, r0
 800473a:	22aa      	movs	r2, #170	@ 0xaa
 800473c:	0052      	lsls	r2, r2, #1
 800473e:	18ba      	adds	r2, r7, r2
 8004740:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004742:	2318      	movs	r3, #24
 8004744:	18fa      	adds	r2, r7, r3
 8004746:	193b      	adds	r3, r7, r4
 8004748:	0011      	movs	r1, r2
 800474a:	0018      	movs	r0, r3
 800474c:	f01e fa01 	bl	8022b52 <strstr>
 8004750:	0003      	movs	r3, r0
 8004752:	22a8      	movs	r2, #168	@ 0xa8
 8004754:	0052      	lsls	r2, r2, #1
 8004756:	18ba      	adds	r2, r7, r2
 8004758:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 800475a:	4a38      	ldr	r2, [pc, #224]	@ (800483c <ParseBuffer+0x2e4>)
 800475c:	193b      	adds	r3, r7, r4
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f01e f9f6 	bl	8022b52 <strstr>
 8004766:	0003      	movs	r3, r0
 8004768:	22a6      	movs	r2, #166	@ 0xa6
 800476a:	0052      	lsls	r2, r2, #1
 800476c:	18ba      	adds	r2, r7, r2
 800476e:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004770:	2334      	movs	r3, #52	@ 0x34
 8004772:	18fa      	adds	r2, r7, r3
 8004774:	193b      	adds	r3, r7, r4
 8004776:	0011      	movs	r1, r2
 8004778:	0018      	movs	r0, r3
 800477a:	f01e f9ea 	bl	8022b52 <strstr>
 800477e:	0003      	movs	r3, r0
 8004780:	22a4      	movs	r2, #164	@ 0xa4
 8004782:	0052      	lsls	r2, r2, #1
 8004784:	18ba      	adds	r2, r7, r2
 8004786:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004788:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <ParseBuffer+0x2a0>)
 800478a:	21b0      	movs	r1, #176	@ 0xb0
 800478c:	0049      	lsls	r1, r1, #1
 800478e:	185b      	adds	r3, r3, r1
 8004790:	19db      	adds	r3, r3, r7
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d800      	bhi.n	800479a <ParseBuffer+0x242>
 8004798:	e0bf      	b.n	800491a <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800479a:	22ac      	movs	r2, #172	@ 0xac
 800479c:	0052      	lsls	r2, r2, #1
 800479e:	18bb      	adds	r3, r7, r2
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d052      	beq.n	800484c <ParseBuffer+0x2f4>
 80047a6:	18bb      	adds	r3, r7, r2
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b4f      	cmp	r3, #79	@ 0x4f
 80047ae:	d14d      	bne.n	800484c <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80047b0:	2360      	movs	r3, #96	@ 0x60
 80047b2:	33ff      	adds	r3, #255	@ 0xff
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80047ba:	4b21      	ldr	r3, [pc, #132]	@ (8004840 <ParseBuffer+0x2e8>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b12      	cmp	r3, #18
 80047c0:	d144      	bne.n	800484c <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <ParseBuffer+0x2a0>)
 80047c4:	185b      	adds	r3, r3, r1
 80047c6:	19db      	adds	r3, r3, r7
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80047cc:	d10b      	bne.n	80047e6 <ParseBuffer+0x28e>
 80047ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <ParseBuffer+0x2a8>)
 80047d0:	185b      	adds	r3, r3, r1
 80047d2:	19db      	adds	r3, r3, r7
 80047d4:	2221      	movs	r2, #33	@ 0x21
 80047d6:	5c9b      	ldrb	r3, [r3, r2]
 80047d8:	2b32      	cmp	r3, #50	@ 0x32
 80047da:	d104      	bne.n	80047e6 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80047dc:	193b      	adds	r3, r7, r4
 80047de:	0018      	movs	r0, r3
 80047e0:	f002 fd86 	bl	80072f0 <ParseTime>
 80047e4:	e032      	b.n	800484c <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 80047e6:	4a17      	ldr	r2, [pc, #92]	@ (8004844 <ParseBuffer+0x2ec>)
 80047e8:	4b17      	ldr	r3, [pc, #92]	@ (8004848 <ParseBuffer+0x2f0>)
 80047ea:	0019      	movs	r1, r3
 80047ec:	2001      	movs	r0, #1
 80047ee:	f00c f817 	bl	8010820 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80047f2:	2306      	movs	r3, #6
 80047f4:	e095      	b.n	8004922 <ParseBuffer+0x3ca>
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	fffffea2 	.word	0xfffffea2
 80047fc:	fffffea1 	.word	0xfffffea1
 8004800:	fffffee8 	.word	0xfffffee8
 8004804:	080261b4 	.word	0x080261b4
 8004808:	fffffee4 	.word	0xfffffee4
 800480c:	080261e0 	.word	0x080261e0
 8004810:	fffffedc 	.word	0xfffffedc
 8004814:	080261e4 	.word	0x080261e4
 8004818:	fffffed4 	.word	0xfffffed4
 800481c:	080261ec 	.word	0x080261ec
 8004820:	fffffecc 	.word	0xfffffecc
 8004824:	080261f4 	.word	0x080261f4
 8004828:	fffffec8 	.word	0xfffffec8
 800482c:	fffffeb8 	.word	0xfffffeb8
 8004830:	080261fc 	.word	0x080261fc
 8004834:	fffffea8 	.word	0xfffffea8
 8004838:	0802620c 	.word	0x0802620c
 800483c:	08028b60 	.word	0x08028b60
 8004840:	20000632 	.word	0x20000632
 8004844:	080261cc 	.word	0x080261cc
 8004848:	08025a74 	.word	0x08025a74
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800484c:	22ac      	movs	r2, #172	@ 0xac
 800484e:	0052      	lsls	r2, r2, #1
 8004850:	18bb      	adds	r3, r7, r2
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <ParseBuffer+0x314>
 8004858:	18bb      	adds	r3, r7, r2
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b72      	cmp	r3, #114	@ 0x72
 8004860:	d104      	bne.n	800486c <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 8004862:	2360      	movs	r3, #96	@ 0x60
 8004864:	33ff      	adds	r3, #255	@ 0xff
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	2202      	movs	r2, #2
 800486a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 800486c:	22ac      	movs	r2, #172	@ 0xac
 800486e:	0052      	lsls	r2, r2, #1
 8004870:	18bb      	adds	r3, r7, r2
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <ParseBuffer+0x334>
 8004878:	18bb      	adds	r3, r7, r2
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004880:	d104      	bne.n	800488c <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 8004882:	2360      	movs	r3, #96	@ 0x60
 8004884:	33ff      	adds	r3, #255	@ 0xff
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2205      	movs	r2, #5
 800488a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800488c:	22ac      	movs	r2, #172	@ 0xac
 800488e:	0052      	lsls	r2, r2, #1
 8004890:	18bb      	adds	r3, r7, r2
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <ParseBuffer+0x354>
 8004898:	18bb      	adds	r3, r7, r2
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b2b      	cmp	r3, #43	@ 0x2b
 80048a0:	d104      	bne.n	80048ac <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 80048a2:	2360      	movs	r3, #96	@ 0x60
 80048a4:	33ff      	adds	r3, #255	@ 0xff
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	220b      	movs	r2, #11
 80048aa:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80048ac:	22aa      	movs	r2, #170	@ 0xaa
 80048ae:	0052      	lsls	r2, r2, #1
 80048b0:	18bb      	adds	r3, r7, r2
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d004      	beq.n	80048c2 <ParseBuffer+0x36a>
 80048b8:	18bb      	adds	r3, r7, r2
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b45      	cmp	r3, #69	@ 0x45
 80048c0:	d00a      	beq.n	80048d8 <ParseBuffer+0x380>
 80048c2:	22a4      	movs	r2, #164	@ 0xa4
 80048c4:	0052      	lsls	r2, r2, #1
 80048c6:	18bb      	adds	r3, r7, r2
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <ParseBuffer+0x38a>
 80048ce:	18bb      	adds	r3, r7, r2
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b46      	cmp	r3, #70	@ 0x46
 80048d6:	d104      	bne.n	80048e2 <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80048d8:	2360      	movs	r3, #96	@ 0x60
 80048da:	33ff      	adds	r3, #255	@ 0xff
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80048e2:	22a8      	movs	r2, #168	@ 0xa8
 80048e4:	0052      	lsls	r2, r2, #1
 80048e6:	18bb      	adds	r3, r7, r2
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <ParseBuffer+0x3a6>
 80048ee:	18bb      	adds	r3, r7, r2
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b57      	cmp	r3, #87	@ 0x57
 80048f6:	d102      	bne.n	80048fe <ParseBuffer+0x3a6>
      ConnectionMade = true;
 80048f8:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <ParseBuffer+0x3d4>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80048fe:	22a6      	movs	r2, #166	@ 0xa6
 8004900:	0052      	lsls	r2, r2, #1
 8004902:	18bb      	adds	r3, r7, r2
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <ParseBuffer+0x3c2>
 800490a:	18bb      	adds	r3, r7, r2
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b32      	cmp	r3, #50	@ 0x32
 8004912:	d102      	bne.n	800491a <ParseBuffer+0x3c2>
      beurs = true;
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <ParseBuffer+0x3d8>)
 8004916:	2201      	movs	r2, #1
 8004918:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800491a:	2360      	movs	r3, #96	@ 0x60
 800491c:	33ff      	adds	r3, #255	@ 0xff
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	781b      	ldrb	r3, [r3, #0]

}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b059      	add	sp, #356	@ 0x164
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	20000560 	.word	0x20000560
 8004930:	20000562 	.word	0x20000562

08004934 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <PollAwake+0x34>)
 800493c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f7fb fc13 	bl	800016c <strlen>
 8004946:	0003      	movs	r3, r0
 8004948:	b29a      	uxth	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	0011      	movs	r1, r2
 800494e:	0018      	movs	r0, r3
 8004950:	f7ff f86e 	bl	8003a30 <ESP_Send>
 8004954:	1e03      	subs	r3, r0, #0
 8004956:	d001      	beq.n	800495c <PollAwake+0x28>
    return true;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <PollAwake+0x2a>
  }
  else{
    return false;
 800495c:	2300      	movs	r3, #0
  }
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b002      	add	sp, #8
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	0802621c 	.word	0x0802621c

0800496c <RFPower>:

bool RFPower(){
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <RFPower+0x34>)
 8004974:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f7fb fbf7 	bl	800016c <strlen>
 800497e:	0003      	movs	r3, r0
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff f852 	bl	8003a30 <ESP_Send>
 800498c:	1e03      	subs	r3, r0, #0
 800498e:	d001      	beq.n	8004994 <RFPower+0x28>
    return true;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <RFPower+0x2a>
  }
  else{
    return false;
 8004994:	2300      	movs	r3, #0
  }
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	08026224 	.word	0x08026224

080049a4 <CheckRFPower>:

bool CheckRFPower(){
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <CheckRFPower+0x34>)
 80049ac:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fb fbdb 	bl	800016c <strlen>
 80049b6:	0003      	movs	r3, r0
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0011      	movs	r1, r2
 80049be:	0018      	movs	r0, r3
 80049c0:	f7ff f836 	bl	8003a30 <ESP_Send>
 80049c4:	1e03      	subs	r3, r0, #0
 80049c6:	d001      	beq.n	80049cc <CheckRFPower+0x28>
    return true;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <CheckRFPower+0x2a>
  }
  else{
    return false;
 80049cc:	2300      	movs	r3, #0
  }
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	08026234 	.word	0x08026234

080049dc <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80049e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <ATRestore+0x34>)
 80049e4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7fb fbbf 	bl	800016c <strlen>
 80049ee:	0003      	movs	r3, r0
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0011      	movs	r1, r2
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff f81a 	bl	8003a30 <ESP_Send>
 80049fc:	1e03      	subs	r3, r0, #0
 80049fe:	d001      	beq.n	8004a04 <ATRestore+0x28>
    return true;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <ATRestore+0x2a>
  }
  else{
    return false;
 8004a04:	2300      	movs	r3, #0
  }
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b002      	add	sp, #8
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	08026244 	.word	0x08026244

08004a14 <CWINIT>:

bool CWINIT(){
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a48 <CWINIT+0x34>)
 8004a1c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fb fba3 	bl	800016c <strlen>
 8004a26:	0003      	movs	r3, r0
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0011      	movs	r1, r2
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f7fe fffe 	bl	8003a30 <ESP_Send>
 8004a34:	1e03      	subs	r3, r0, #0
 8004a36:	d001      	beq.n	8004a3c <CWINIT+0x28>
    return true;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <CWINIT+0x2a>
  }
  else{
    return false;
 8004a3c:	2300      	movs	r3, #0
  }
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b002      	add	sp, #8
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	08026254 	.word	0x08026254

08004a4c <CWMODE1>:

bool CWMODE1(){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <CWMODE1+0x34>)
 8004a54:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fb fb87 	bl	800016c <strlen>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	0011      	movs	r1, r2
 8004a66:	0018      	movs	r0, r3
 8004a68:	f7fe ffe2 	bl	8003a30 <ESP_Send>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d001      	beq.n	8004a74 <CWMODE1+0x28>
    return true;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004a74:	2300      	movs	r3, #0
  }
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	08026264 	.word	0x08026264

08004a84 <CWMODE2>:

bool CWMODE2(){
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <CWMODE2+0x34>)
 8004a8c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7fb fb6b 	bl	800016c <strlen>
 8004a96:	0003      	movs	r3, r0
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0011      	movs	r1, r2
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7fe ffc6 	bl	8003a30 <ESP_Send>
 8004aa4:	1e03      	subs	r3, r0, #0
 8004aa6:	d001      	beq.n	8004aac <CWMODE2+0x28>
    return true;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <CWMODE2+0x2a>
  }
  else{
    return false;
 8004aac:	2300      	movs	r3, #0
  }
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b002      	add	sp, #8
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	08026274 	.word	0x08026274

08004abc <CWAUTOCONN>:

bool CWAUTOCONN(){
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <CWAUTOCONN+0x34>)
 8004ac4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fb fb4f 	bl	800016c <strlen>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0011      	movs	r1, r2
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fe ffaa 	bl	8003a30 <ESP_Send>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d001      	beq.n	8004ae4 <CWAUTOCONN+0x28>
    return true;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004ae4:	2300      	movs	r3, #0
  }
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b002      	add	sp, #8
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	08026284 	.word	0x08026284

08004af4 <CWJAP>:

bool CWJAP(){
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	46c6      	mov	lr, r8
 8004af8:	b500      	push	{lr}
 8004afa:	b0a2      	sub	sp, #136	@ 0x88
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	466b      	mov	r3, sp
 8004b00:	4698      	mov	r8, r3
  beursTest = true;
 8004b02:	4b39      	ldr	r3, [pc, #228]	@ (8004be8 <CWJAP+0xf4>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004b08:	2618      	movs	r6, #24
 8004b0a:	19bb      	adds	r3, r7, r6
 8004b0c:	2264      	movs	r2, #100	@ 0x64
 8004b0e:	2100      	movs	r1, #0
 8004b10:	0018      	movs	r0, r3
 8004b12:	f01d ffe3 	bl	8022adc <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004b16:	4b35      	ldr	r3, [pc, #212]	@ (8004bec <CWJAP+0xf8>)
 8004b18:	4a35      	ldr	r2, [pc, #212]	@ (8004bf0 <CWJAP+0xfc>)
 8004b1a:	4936      	ldr	r1, [pc, #216]	@ (8004bf4 <CWJAP+0x100>)
 8004b1c:	19b8      	adds	r0, r7, r6
 8004b1e:	f01d fe77 	bl	8022810 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004b22:	19bb      	adds	r3, r7, r6
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7fb fb21 	bl	800016c <strlen>
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	216f      	movs	r1, #111	@ 0x6f
 8004b2e:	0030      	movs	r0, r6
 8004b30:	180b      	adds	r3, r1, r0
 8004b32:	19db      	adds	r3, r3, r7
 8004b34:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004b36:	180b      	adds	r3, r1, r0
 8004b38:	19db      	adds	r3, r3, r7
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	2180      	movs	r1, #128	@ 0x80
 8004b42:	1879      	adds	r1, r7, r1
 8004b44:	600a      	str	r2, [r1, #0]
 8004b46:	001a      	movs	r2, r3
 8004b48:	60ba      	str	r2, [r7, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	60fa      	str	r2, [r7, #12]
 8004b4e:	68b8      	ldr	r0, [r7, #8]
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	0002      	movs	r2, r0
 8004b54:	0f52      	lsrs	r2, r2, #29
 8004b56:	000e      	movs	r6, r1
 8004b58:	00f6      	lsls	r6, r6, #3
 8004b5a:	617e      	str	r6, [r7, #20]
 8004b5c:	697e      	ldr	r6, [r7, #20]
 8004b5e:	4316      	orrs	r6, r2
 8004b60:	617e      	str	r6, [r7, #20]
 8004b62:	0002      	movs	r2, r0
 8004b64:	00d2      	lsls	r2, r2, #3
 8004b66:	613a      	str	r2, [r7, #16]
 8004b68:	001a      	movs	r2, r3
 8004b6a:	603a      	str	r2, [r7, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	6838      	ldr	r0, [r7, #0]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	0002      	movs	r2, r0
 8004b76:	0f52      	lsrs	r2, r2, #29
 8004b78:	000e      	movs	r6, r1
 8004b7a:	00f5      	lsls	r5, r6, #3
 8004b7c:	4315      	orrs	r5, r2
 8004b7e:	0002      	movs	r2, r0
 8004b80:	00d4      	lsls	r4, r2, #3
 8004b82:	3307      	adds	r3, #7
 8004b84:	08db      	lsrs	r3, r3, #3
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	466a      	mov	r2, sp
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	469d      	mov	sp, r3
 8004b8e:	466b      	mov	r3, sp
 8004b90:	3300      	adds	r3, #0
 8004b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004b94:	246f      	movs	r4, #111	@ 0x6f
 8004b96:	2518      	movs	r5, #24
 8004b98:	1963      	adds	r3, r4, r5
 8004b9a:	19db      	adds	r3, r3, r7
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f01d ff98 	bl	8022adc <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004bac:	1963      	adds	r3, r4, r5
 8004bae:	19db      	adds	r3, r3, r7
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	1979      	adds	r1, r7, r5
 8004bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f01d ffb7 	bl	8022b2a <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004bbc:	1963      	adds	r3, r4, r5
 8004bbe:	19db      	adds	r3, r3, r7
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fe ff31 	bl	8003a30 <ESP_Send>
 8004bce:	1e03      	subs	r3, r0, #0
 8004bd0:	d001      	beq.n	8004bd6 <CWJAP+0xe2>
    return true;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <CWJAP+0xe4>
  }
  else{
    return false;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	46c5      	mov	sp, r8
  }
}
 8004bda:	0018      	movs	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b022      	add	sp, #136	@ 0x88
 8004be0:	bc80      	pop	{r7}
 8004be2:	46b8      	mov	r8, r7
 8004be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	20000561 	.word	0x20000561
 8004bec:	08028b6c 	.word	0x08028b6c
 8004bf0:	08028b60 	.word	0x08028b60
 8004bf4:	08026298 	.word	0x08026298

08004bf8 <CWMODE3>:

bool CWMODE3(){
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <CWMODE3+0x34>)
 8004c00:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7fb fab1 	bl	800016c <strlen>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0011      	movs	r1, r2
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fe ff0c 	bl	8003a30 <ESP_Send>
 8004c18:	1e03      	subs	r3, r0, #0
 8004c1a:	d001      	beq.n	8004c20 <CWMODE3+0x28>
    return true;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004c20:	2300      	movs	r3, #0
  }
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b002      	add	sp, #8
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	080262b0 	.word	0x080262b0

08004c30 <CWSTATE>:

bool CWSTATE(){
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <CWSTATE+0x34>)
 8004c38:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fb fa95 	bl	800016c <strlen>
 8004c42:	0003      	movs	r3, r0
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7fe fef0 	bl	8003a30 <ESP_Send>
 8004c50:	1e03      	subs	r3, r0, #0
 8004c52:	d001      	beq.n	8004c58 <CWSTATE+0x28>
    return true;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004c58:	2300      	movs	r3, #0
  }
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	080262c0 	.word	0x080262c0

08004c68 <CWSAP>:

bool CWSAP(){
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <CWSAP+0x34>)
 8004c70:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7fb fa79 	bl	800016c <strlen>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	0011      	movs	r1, r2
 8004c82:	0018      	movs	r0, r3
 8004c84:	f7fe fed4 	bl	8003a30 <ESP_Send>
 8004c88:	1e03      	subs	r3, r0, #0
 8004c8a:	d001      	beq.n	8004c90 <CWSAP+0x28>
    return true;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <CWSAP+0x2a>
  }
  else{
    return false;
 8004c90:	2300      	movs	r3, #0
  }
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	080262d0 	.word	0x080262d0

08004ca0 <CIPMUX>:

bool CIPMUX(){
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <CIPMUX+0x34>)
 8004ca8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fb fa5d 	bl	800016c <strlen>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0011      	movs	r1, r2
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7fe feb8 	bl	8003a30 <ESP_Send>
 8004cc0:	1e03      	subs	r3, r0, #0
 8004cc2:	d001      	beq.n	8004cc8 <CIPMUX+0x28>
    return true;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <CIPMUX+0x2a>
  }
  else{
    return false;
 8004cc8:	2300      	movs	r3, #0
  }
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	080262f4 	.word	0x080262f4

08004cd8 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <WEBSERVER+0x34>)
 8004ce0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7fb fa41 	bl	800016c <strlen>
 8004cea:	0003      	movs	r3, r0
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	0011      	movs	r1, r2
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f7fe fe9c 	bl	8003a30 <ESP_Send>
 8004cf8:	1e03      	subs	r3, r0, #0
 8004cfa:	d001      	beq.n	8004d00 <WEBSERVER+0x28>
    return true;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004d00:	2300      	movs	r3, #0
  }
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	08026304 	.word	0x08026304

08004d10 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004d16:	1cfb      	adds	r3, r7, #3
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004d1c:	4b26      	ldr	r3, [pc, #152]	@ (8004db8 <HTTPCPOST+0xa8>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	1dbc      	adds	r4, r7, #6
 8004d22:	1cf9      	adds	r1, r7, #3
 8004d24:	2200      	movs	r2, #0
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7ff f838 	bl	8003d9c <CreateMessage>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004d30:	4b21      	ldr	r3, [pc, #132]	@ (8004db8 <HTTPCPOST+0xa8>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004d38:	1dbb      	adds	r3, r7, #6
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dbc <HTTPCPOST+0xac>)
 8004d3e:	4920      	ldr	r1, [pc, #128]	@ (8004dc0 <HTTPCPOST+0xb0>)
 8004d40:	4820      	ldr	r0, [pc, #128]	@ (8004dc4 <HTTPCPOST+0xb4>)
 8004d42:	f01d fd65 	bl	8022810 <siprintf>
 8004d46:	e015      	b.n	8004d74 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004d48:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc8 <HTTPCPOST+0xb8>)
 8004d4a:	4820      	ldr	r0, [pc, #128]	@ (8004dcc <HTTPCPOST+0xbc>)
 8004d4c:	220c      	movs	r2, #12
 8004d4e:	0019      	movs	r1, r3
 8004d50:	f004 fa60 	bl	8009214 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004d54:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc8 <HTTPCPOST+0xb8>)
 8004d56:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <HTTPCPOST+0xc0>)
 8004d58:	0011      	movs	r1, r2
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fe fffa 	bl	8003d54 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004d60:	1dbb      	adds	r3, r7, #6
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	4c1a      	ldr	r4, [pc, #104]	@ (8004dd0 <HTTPCPOST+0xc0>)
 8004d66:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd4 <HTTPCPOST+0xc4>)
 8004d68:	491b      	ldr	r1, [pc, #108]	@ (8004dd8 <HTTPCPOST+0xc8>)
 8004d6a:	4816      	ldr	r0, [pc, #88]	@ (8004dc4 <HTTPCPOST+0xb4>)
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	0023      	movs	r3, r4
 8004d70:	f01d fd4e 	bl	8022810 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004d74:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <HTTPCPOST+0xb4>)
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fb f9f8 	bl	800016c <strlen>
 8004d7c:	0002      	movs	r2, r0
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	8818      	ldrh	r0, [r3, #0]
 8004d86:	1cfb      	adds	r3, r7, #3
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	4a14      	ldr	r2, [pc, #80]	@ (8004ddc <HTTPCPOST+0xcc>)
 8004d8c:	4914      	ldr	r1, [pc, #80]	@ (8004de0 <HTTPCPOST+0xd0>)
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	0003      	movs	r3, r0
 8004d92:	2003      	movs	r0, #3
 8004d94:	f00b fd44 	bl	8010820 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	881a      	ldrh	r2, [r3, #0]
 8004d9c:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HTTPCPOST+0xb4>)
 8004d9e:	0011      	movs	r1, r2
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7fe fe45 	bl	8003a30 <ESP_Send>
 8004da6:	1e03      	subs	r3, r0, #0
 8004da8:	d001      	beq.n	8004dae <HTTPCPOST+0x9e>
    return true;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004dae:	2300      	movs	r3, #0
  }
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b003      	add	sp, #12
 8004db6:	bd90      	pop	{r4, r7, pc}
 8004db8:	20000562 	.word	0x20000562
 8004dbc:	08028b88 	.word	0x08028b88
 8004dc0:	0802631c 	.word	0x0802631c
 8004dc4:	20000588 	.word	0x20000588
 8004dc8:	20000764 	.word	0x20000764
 8004dcc:	08080000 	.word	0x08080000
 8004dd0:	20000770 	.word	0x20000770
 8004dd4:	08028bc4 	.word	0x08028bc4
 8004dd8:	08026354 	.word	0x08026354
 8004ddc:	08026394 	.word	0x08026394
 8004de0:	08025a50 	.word	0x08025a50

08004de4 <SENDDATA>:

bool SENDDATA(){
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af02      	add	r7, sp, #8
  bool result = false;
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004df0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <SENDDATA+0x48>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	1df9      	adds	r1, r7, #7
 8004df6:	2201      	movs	r2, #1
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fe ffcf 	bl	8003d9c <CreateMessage>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	001a      	movs	r2, r3
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <SENDDATA+0x4c>)
 8004e04:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <SENDDATA+0x4c>)
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	4a08      	ldr	r2, [pc, #32]	@ (8004e34 <SENDDATA+0x50>)
 8004e12:	4909      	ldr	r1, [pc, #36]	@ (8004e38 <SENDDATA+0x54>)
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	0003      	movs	r3, r0
 8004e18:	2003      	movs	r0, #3
 8004e1a:	f00b fd01 	bl	8010820 <CreateLine>
  return result;
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781b      	ldrb	r3, [r3, #0]
}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b002      	add	sp, #8
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	20000562 	.word	0x20000562
 8004e30:	2000057c 	.word	0x2000057c
 8004e34:	080263f0 	.word	0x080263f0
 8004e38:	08025a50 	.word	0x08025a50

08004e3c <SLEEP>:

bool SLEEP(){
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004e42:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <SLEEP+0x34>)
 8004e44:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7fb f98f 	bl	800016c <strlen>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0011      	movs	r1, r2
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fe fdea 	bl	8003a30 <ESP_Send>
 8004e5c:	1e03      	subs	r3, r0, #0
 8004e5e:	d001      	beq.n	8004e64 <SLEEP+0x28>
    return true;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <SLEEP+0x2a>
  }
  else{
    return false;
 8004e64:	2300      	movs	r3, #0
  }
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	0802642c 	.word	0x0802642c

08004e74 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <CIPSNTPCFG+0x3c>)
 8004e7c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f7fb f973 	bl	800016c <strlen>
 8004e86:	0003      	movs	r3, r0
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0011      	movs	r1, r2
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f7fe fdce 	bl	8003a30 <ESP_Send>
 8004e94:	1e03      	subs	r3, r0, #0
 8004e96:	d006      	beq.n	8004ea6 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004e98:	23fa      	movs	r3, #250	@ 0xfa
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f00c f915 	bl	80110cc <HAL_Delay>
    return true;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004ea6:	2300      	movs	r3, #0
  }
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	0802643c 	.word	0x0802643c

08004eb4 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <CIPSNTPTIME+0x34>)
 8004ebc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f7fb f953 	bl	800016c <strlen>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	0011      	movs	r1, r2
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f7fe fdae 	bl	8003a30 <ESP_Send>
 8004ed4:	1e03      	subs	r3, r0, #0
 8004ed6:	d001      	beq.n	8004edc <CIPSNTPTIME+0x28>
    return true;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004edc:	2300      	movs	r3, #0
  }
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	0802648c 	.word	0x0802648c

08004eec <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <CIPSNTPINTV+0x34>)
 8004ef4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7fb f937 	bl	800016c <strlen>
 8004efe:	0003      	movs	r3, r0
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	0011      	movs	r1, r2
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7fe fd92 	bl	8003a30 <ESP_Send>
 8004f0c:	1e03      	subs	r3, r0, #0
 8004f0e:	d001      	beq.n	8004f14 <CIPSNTPINTV+0x28>
    return true;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004f14:	2300      	movs	r3, #0
  }
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b002      	add	sp, #8
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	080264a0 	.word	0x080264a0

08004f24 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004f24:	b5b0      	push	{r4, r5, r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004f30:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <DMA_ProcessBuffer+0x1c0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	200e      	movs	r0, #14
 8004f3a:	183b      	adds	r3, r7, r0
 8004f3c:	2180      	movs	r1, #128	@ 0x80
 8004f3e:	0049      	lsls	r1, r1, #1
 8004f40:	1a8a      	subs	r2, r1, r2
 8004f42:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004f44:	230d      	movs	r3, #13
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	2203      	movs	r2, #3
 8004f4a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004f4c:	183b      	adds	r3, r7, r0
 8004f4e:	881a      	ldrh	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	@ 0x80
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d903      	bls.n	8004f60 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004f58:	183b      	adds	r3, r7, r0
 8004f5a:	2280      	movs	r2, #128	@ 0x80
 8004f5c:	0052      	lsls	r2, r2, #1
 8004f5e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004f60:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	001a      	movs	r2, r3
 8004f68:	230e      	movs	r3, #14
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d131      	bne.n	8004fd6 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004f72:	4b5e      	ldr	r3, [pc, #376]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b14      	cmp	r3, #20
 8004f78:	d91b      	bls.n	8004fb2 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004f80:	4b5b      	ldr	r3, [pc, #364]	@ (80050f0 <DMA_ProcessBuffer+0x1cc>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <DMA_ProcessBuffer+0x74>
 8004f88:	4b5a      	ldr	r3, [pc, #360]	@ (80050f4 <DMA_ProcessBuffer+0x1d0>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004f90:	230d      	movs	r3, #13
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	2207      	movs	r2, #7
 8004f96:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004f98:	4b55      	ldr	r3, [pc, #340]	@ (80050f0 <DMA_ProcessBuffer+0x1cc>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d103      	bne.n	8004fa8 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004fa0:	4b55      	ldr	r3, [pc, #340]	@ (80050f8 <DMA_ProcessBuffer+0x1d4>)
 8004fa2:	220b      	movs	r2, #11
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e016      	b.n	8004fd6 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004fa8:	230d      	movs	r3, #13
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	2206      	movs	r2, #6
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e011      	b.n	8004fd6 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004fb2:	4b4e      	ldr	r3, [pc, #312]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4b4c      	ldr	r3, [pc, #304]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004fbc:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004fbe:	f00c f87b 	bl	80110b8 <HAL_GetTick>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	33f5      	adds	r3, #245	@ 0xf5
 8004fc6:	33ff      	adds	r3, #255	@ 0xff
 8004fc8:	001a      	movs	r2, r3
 8004fca:	4b4c      	ldr	r3, [pc, #304]	@ (80050fc <DMA_ProcessBuffer+0x1d8>)
 8004fcc:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004fce:	230d      	movs	r3, #13
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004fd6:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	001a      	movs	r2, r3
 8004fde:	210e      	movs	r1, #14
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d100      	bne.n	8004fea <DMA_ProcessBuffer+0xc6>
 8004fe8:	e075      	b.n	80050d6 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004fea:	4b40      	ldr	r3, [pc, #256]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004ff0:	4b43      	ldr	r3, [pc, #268]	@ (8005100 <DMA_ProcessBuffer+0x1dc>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d109      	bne.n	8005014 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8005000:	187b      	adds	r3, r7, r1
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4b3e      	ldr	r3, [pc, #248]	@ (8005100 <DMA_ProcessBuffer+0x1dc>)
 8005008:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 800500a:	230d      	movs	r3, #13
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	220a      	movs	r2, #10
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e060      	b.n	80050d6 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8005014:	4b3a      	ldr	r3, [pc, #232]	@ (8005100 <DMA_ProcessBuffer+0x1dc>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	001a      	movs	r2, r3
 800501c:	210e      	movs	r1, #14
 800501e:	187b      	adds	r3, r7, r1
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8005026:	187b      	adds	r3, r7, r1
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	4b34      	ldr	r3, [pc, #208]	@ (8005100 <DMA_ProcessBuffer+0x1dc>)
 800502e:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8005030:	230d      	movs	r3, #13
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	220a      	movs	r2, #10
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e04d      	b.n	80050d6 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 800503a:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	001a      	movs	r2, r3
 8005042:	210e      	movs	r1, #14
 8005044:	187b      	adds	r3, r7, r1
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	4293      	cmp	r3, r2
 800504a:	d917      	bls.n	800507c <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800504c:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	001a      	movs	r2, r3
 8005054:	4b2b      	ldr	r3, [pc, #172]	@ (8005104 <DMA_ProcessBuffer+0x1e0>)
 8005056:	18d0      	adds	r0, r2, r3
 8005058:	4b23      	ldr	r3, [pc, #140]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	001a      	movs	r2, r3
 8005060:	187b      	adds	r3, r7, r1
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	b299      	uxth	r1, r3
 8005068:	230d      	movs	r3, #13
 800506a:	18fc      	adds	r4, r7, r3
 800506c:	1dfb      	adds	r3, r7, #7
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	001a      	movs	r2, r3
 8005072:	f7ff fa71 	bl	8004558 <ParseBuffer>
 8005076:	0003      	movs	r3, r0
 8005078:	7023      	strb	r3, [r4, #0]
 800507a:	e026      	b.n	80050ca <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 800507c:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	001a      	movs	r2, r3
 8005084:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <DMA_ProcessBuffer+0x1e0>)
 8005086:	18d0      	adds	r0, r2, r3
 8005088:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	001a      	movs	r2, r3
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	b299      	uxth	r1, r3
 8005098:	250d      	movs	r5, #13
 800509a:	197c      	adds	r4, r7, r5
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	001a      	movs	r2, r3
 80050a2:	f7ff fa59 	bl	8004558 <ParseBuffer>
 80050a6:	0003      	movs	r3, r0
 80050a8:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80050aa:	210e      	movs	r1, #14
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80050b4:	197c      	adds	r4, r7, r5
 80050b6:	1dfb      	adds	r3, r7, #7
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	187b      	adds	r3, r7, r1
 80050bc:	8819      	ldrh	r1, [r3, #0]
 80050be:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <DMA_ProcessBuffer+0x1e0>)
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7ff fa49 	bl	8004558 <ParseBuffer>
 80050c6:	0003      	movs	r3, r0
 80050c8:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 80050ca:	230e      	movs	r3, #14
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	4b05      	ldr	r3, [pc, #20]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 80050d4:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 80050d6:	230d      	movs	r3, #13
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	781b      	ldrb	r3, [r3, #0]
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b004      	add	sp, #16
 80050e2:	bdb0      	pop	{r4, r5, r7, pc}
 80050e4:	200020dc 	.word	0x200020dc
 80050e8:	20000789 	.word	0x20000789
 80050ec:	20000630 	.word	0x20000630
 80050f0:	20000632 	.word	0x20000632
 80050f4:	20000000 	.word	0x20000000
 80050f8:	2000002c 	.word	0x2000002c
 80050fc:	20000628 	.word	0x20000628
 8005100:	2000078a 	.word	0x2000078a
 8005104:	2000045c 	.word	0x2000045c

08005108 <clearDMABuffer>:

void clearDMABuffer(){
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	005a      	lsls	r2, r3, #1
 8005110:	4b03      	ldr	r3, [pc, #12]	@ (8005120 <clearDMABuffer+0x18>)
 8005112:	2100      	movs	r1, #0
 8005114:	0018      	movs	r0, r3
 8005116:	f01d fce1 	bl	8022adc <memset>
}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	2000045c 	.word	0x2000045c

08005124 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	0002      	movs	r2, r0
 800512c:	1dfb      	adds	r3, r7, #7
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	1dbb      	adds	r3, r7, #6
 8005132:	1c0a      	adds	r2, r1, #0
 8005134:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005136:	210f      	movs	r1, #15
 8005138:	187b      	adds	r3, r7, r1
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800513e:	1dbb      	adds	r3, r7, #6
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005146:	187b      	adds	r3, r7, r1
 8005148:	1dfa      	adds	r2, r7, #7
 800514a:	7812      	ldrb	r2, [r2, #0]
 800514c:	4251      	negs	r1, r2
 800514e:	414a      	adcs	r2, r1
 8005150:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8005152:	1dbb      	adds	r3, r7, #6
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d107      	bne.n	800516a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800515a:	230f      	movs	r3, #15
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	1dfa      	adds	r2, r7, #7
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	3a02      	subs	r2, #2
 8005164:	4251      	negs	r1, r2
 8005166:	414a      	adcs	r2, r1
 8005168:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800516a:	1dbb      	adds	r3, r7, #6
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d107      	bne.n	8005182 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8005172:	230f      	movs	r3, #15
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	1dfa      	adds	r2, r7, #7
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	3a05      	subs	r2, #5
 800517c:	4251      	negs	r1, r2
 800517e:	414a      	adcs	r2, r1
 8005180:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8005182:	1dbb      	adds	r3, r7, #6
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d107      	bne.n	800519a <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800518a:	230f      	movs	r3, #15
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	1dfa      	adds	r2, r7, #7
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	3a0b      	subs	r2, #11
 8005194:	4251      	negs	r1, r2
 8005196:	414a      	adcs	r2, r1
 8005198:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800519a:	230f      	movs	r3, #15
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	781b      	ldrb	r3, [r3, #0]
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b004      	add	sp, #16
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <AT_Send>:

bool AT_Send(AT_Commands state){
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	0002      	movs	r2, r0
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80051b4:	230f      	movs	r3, #15
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
  switch (state){
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b14      	cmp	r3, #20
 80051c2:	d900      	bls.n	80051c6 <AT_Send+0x1e>
 80051c4:	e19e      	b.n	8005504 <AT_Send+0x35c>
 80051c6:	009a      	lsls	r2, r3, #2
 80051c8:	4bd2      	ldr	r3, [pc, #840]	@ (8005514 <AT_Send+0x36c>)
 80051ca:	18d3      	adds	r3, r2, r3
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80051d0:	4bd1      	ldr	r3, [pc, #836]	@ (8005518 <AT_Send+0x370>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f00b facd 	bl	8010774 <TimestampIsReached>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d100      	bne.n	80051e0 <AT_Send+0x38>
 80051de:	e190      	b.n	8005502 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80051e0:	4ace      	ldr	r2, [pc, #824]	@ (800551c <AT_Send+0x374>)
 80051e2:	4bcf      	ldr	r3, [pc, #828]	@ (8005520 <AT_Send+0x378>)
 80051e4:	0019      	movs	r1, r3
 80051e6:	2003      	movs	r0, #3
 80051e8:	f00b fb1a 	bl	8010820 <CreateLine>
    ATCommandSend = PollAwake();
 80051ec:	230f      	movs	r3, #15
 80051ee:	18fc      	adds	r4, r7, r3
 80051f0:	f7ff fba0 	bl	8004934 <PollAwake>
 80051f4:	0003      	movs	r3, r0
 80051f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80051f8:	f00b ff5e 	bl	80110b8 <HAL_GetTick>
 80051fc:	0003      	movs	r3, r0
 80051fe:	3332      	adds	r3, #50	@ 0x32
 8005200:	001a      	movs	r2, r3
 8005202:	4bc5      	ldr	r3, [pc, #788]	@ (8005518 <AT_Send+0x370>)
 8005204:	601a      	str	r2, [r3, #0]
  }
  break;
 8005206:	e17c      	b.n	8005502 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005208:	4ac6      	ldr	r2, [pc, #792]	@ (8005524 <AT_Send+0x37c>)
 800520a:	4bc5      	ldr	r3, [pc, #788]	@ (8005520 <AT_Send+0x378>)
 800520c:	0019      	movs	r1, r3
 800520e:	2003      	movs	r0, #3
 8005210:	f00b fb06 	bl	8010820 <CreateLine>
    ATCommandSend = RFPower();
 8005214:	230f      	movs	r3, #15
 8005216:	18fc      	adds	r4, r7, r3
 8005218:	f7ff fba8 	bl	800496c <RFPower>
 800521c:	0003      	movs	r3, r0
 800521e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005220:	f00b ff4a 	bl	80110b8 <HAL_GetTick>
 8005224:	0003      	movs	r3, r0
 8005226:	330a      	adds	r3, #10
 8005228:	001a      	movs	r2, r3
 800522a:	4bbb      	ldr	r3, [pc, #748]	@ (8005518 <AT_Send+0x370>)
 800522c:	601a      	str	r2, [r3, #0]
    break;
 800522e:	e169      	b.n	8005504 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8005230:	4abd      	ldr	r2, [pc, #756]	@ (8005528 <AT_Send+0x380>)
 8005232:	4bbb      	ldr	r3, [pc, #748]	@ (8005520 <AT_Send+0x378>)
 8005234:	0019      	movs	r1, r3
 8005236:	2003      	movs	r0, #3
 8005238:	f00b faf2 	bl	8010820 <CreateLine>
    ATCommandSend = CheckRFPower();
 800523c:	230f      	movs	r3, #15
 800523e:	18fc      	adds	r4, r7, r3
 8005240:	f7ff fbb0 	bl	80049a4 <CheckRFPower>
 8005244:	0003      	movs	r3, r0
 8005246:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005248:	f00b ff36 	bl	80110b8 <HAL_GetTick>
 800524c:	0003      	movs	r3, r0
 800524e:	330a      	adds	r3, #10
 8005250:	001a      	movs	r2, r3
 8005252:	4bb1      	ldr	r3, [pc, #708]	@ (8005518 <AT_Send+0x370>)
 8005254:	601a      	str	r2, [r3, #0]
    break;
 8005256:	e155      	b.n	8005504 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005258:	4ab4      	ldr	r2, [pc, #720]	@ (800552c <AT_Send+0x384>)
 800525a:	4bb1      	ldr	r3, [pc, #708]	@ (8005520 <AT_Send+0x378>)
 800525c:	0019      	movs	r1, r3
 800525e:	2003      	movs	r0, #3
 8005260:	f00b fade 	bl	8010820 <CreateLine>
    ATCommandSend = ATRestore();
 8005264:	230f      	movs	r3, #15
 8005266:	18fc      	adds	r4, r7, r3
 8005268:	f7ff fbb8 	bl	80049dc <ATRestore>
 800526c:	0003      	movs	r3, r0
 800526e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005270:	f00b ff22 	bl	80110b8 <HAL_GetTick>
 8005274:	0003      	movs	r3, r0
 8005276:	3332      	adds	r3, #50	@ 0x32
 8005278:	001a      	movs	r2, r3
 800527a:	4ba7      	ldr	r3, [pc, #668]	@ (8005518 <AT_Send+0x370>)
 800527c:	601a      	str	r2, [r3, #0]
    break;
 800527e:	e141      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8005280:	4aab      	ldr	r2, [pc, #684]	@ (8005530 <AT_Send+0x388>)
 8005282:	4ba7      	ldr	r3, [pc, #668]	@ (8005520 <AT_Send+0x378>)
 8005284:	0019      	movs	r1, r3
 8005286:	2003      	movs	r0, #3
 8005288:	f00b faca 	bl	8010820 <CreateLine>
    ATCommandSend = CWINIT();
 800528c:	230f      	movs	r3, #15
 800528e:	18fc      	adds	r4, r7, r3
 8005290:	f7ff fbc0 	bl	8004a14 <CWINIT>
 8005294:	0003      	movs	r3, r0
 8005296:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005298:	f00b ff0e 	bl	80110b8 <HAL_GetTick>
 800529c:	0003      	movs	r3, r0
 800529e:	33f5      	adds	r3, #245	@ 0xf5
 80052a0:	33ff      	adds	r3, #255	@ 0xff
 80052a2:	001a      	movs	r2, r3
 80052a4:	4b9c      	ldr	r3, [pc, #624]	@ (8005518 <AT_Send+0x370>)
 80052a6:	601a      	str	r2, [r3, #0]
    break;
 80052a8:	e12c      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 80052aa:	4aa2      	ldr	r2, [pc, #648]	@ (8005534 <AT_Send+0x38c>)
 80052ac:	4b9c      	ldr	r3, [pc, #624]	@ (8005520 <AT_Send+0x378>)
 80052ae:	0019      	movs	r1, r3
 80052b0:	2003      	movs	r0, #3
 80052b2:	f00b fab5 	bl	8010820 <CreateLine>
    ATCommandSend = CWSTATE();
 80052b6:	230f      	movs	r3, #15
 80052b8:	18fc      	adds	r4, r7, r3
 80052ba:	f7ff fcb9 	bl	8004c30 <CWSTATE>
 80052be:	0003      	movs	r3, r0
 80052c0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80052c2:	f00b fef9 	bl	80110b8 <HAL_GetTick>
 80052c6:	0003      	movs	r3, r0
 80052c8:	33f5      	adds	r3, #245	@ 0xf5
 80052ca:	33ff      	adds	r3, #255	@ 0xff
 80052cc:	001a      	movs	r2, r3
 80052ce:	4b92      	ldr	r3, [pc, #584]	@ (8005518 <AT_Send+0x370>)
 80052d0:	601a      	str	r2, [r3, #0]
    break;
 80052d2:	e117      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80052d4:	4a98      	ldr	r2, [pc, #608]	@ (8005538 <AT_Send+0x390>)
 80052d6:	4b92      	ldr	r3, [pc, #584]	@ (8005520 <AT_Send+0x378>)
 80052d8:	0019      	movs	r1, r3
 80052da:	2003      	movs	r0, #3
 80052dc:	f00b faa0 	bl	8010820 <CreateLine>
    ATCommandSend = CWMODE1();
 80052e0:	230f      	movs	r3, #15
 80052e2:	18fc      	adds	r4, r7, r3
 80052e4:	f7ff fbb2 	bl	8004a4c <CWMODE1>
 80052e8:	0003      	movs	r3, r0
 80052ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052ec:	f00b fee4 	bl	80110b8 <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	330a      	adds	r3, #10
 80052f4:	001a      	movs	r2, r3
 80052f6:	4b88      	ldr	r3, [pc, #544]	@ (8005518 <AT_Send+0x370>)
 80052f8:	601a      	str	r2, [r3, #0]
    break;
 80052fa:	e103      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80052fc:	4a8e      	ldr	r2, [pc, #568]	@ (8005538 <AT_Send+0x390>)
 80052fe:	4b88      	ldr	r3, [pc, #544]	@ (8005520 <AT_Send+0x378>)
 8005300:	0019      	movs	r1, r3
 8005302:	2003      	movs	r0, #3
 8005304:	f00b fa8c 	bl	8010820 <CreateLine>
    ATCommandSend = CWMODE2();
 8005308:	230f      	movs	r3, #15
 800530a:	18fc      	adds	r4, r7, r3
 800530c:	f7ff fbba 	bl	8004a84 <CWMODE2>
 8005310:	0003      	movs	r3, r0
 8005312:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005314:	f00b fed0 	bl	80110b8 <HAL_GetTick>
 8005318:	0003      	movs	r3, r0
 800531a:	330a      	adds	r3, #10
 800531c:	001a      	movs	r2, r3
 800531e:	4b7e      	ldr	r3, [pc, #504]	@ (8005518 <AT_Send+0x370>)
 8005320:	601a      	str	r2, [r3, #0]
    break;
 8005322:	e0ef      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005324:	4a85      	ldr	r2, [pc, #532]	@ (800553c <AT_Send+0x394>)
 8005326:	4b7e      	ldr	r3, [pc, #504]	@ (8005520 <AT_Send+0x378>)
 8005328:	0019      	movs	r1, r3
 800532a:	2003      	movs	r0, #3
 800532c:	f00b fa78 	bl	8010820 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8005330:	230f      	movs	r3, #15
 8005332:	18fc      	adds	r4, r7, r3
 8005334:	f7ff fbc2 	bl	8004abc <CWAUTOCONN>
 8005338:	0003      	movs	r3, r0
 800533a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800533c:	f00b febc 	bl	80110b8 <HAL_GetTick>
 8005340:	0003      	movs	r3, r0
 8005342:	330a      	adds	r3, #10
 8005344:	001a      	movs	r2, r3
 8005346:	4b74      	ldr	r3, [pc, #464]	@ (8005518 <AT_Send+0x370>)
 8005348:	601a      	str	r2, [r3, #0]
    break;
 800534a:	e0db      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800534c:	4a7c      	ldr	r2, [pc, #496]	@ (8005540 <AT_Send+0x398>)
 800534e:	4b74      	ldr	r3, [pc, #464]	@ (8005520 <AT_Send+0x378>)
 8005350:	0019      	movs	r1, r3
 8005352:	2003      	movs	r0, #3
 8005354:	f00b fa64 	bl	8010820 <CreateLine>
    ATCommandSend = CWJAP();
 8005358:	230f      	movs	r3, #15
 800535a:	18fc      	adds	r4, r7, r3
 800535c:	f7ff fbca 	bl	8004af4 <CWJAP>
 8005360:	0003      	movs	r3, r0
 8005362:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005364:	f00b fea8 	bl	80110b8 <HAL_GetTick>
 8005368:	0003      	movs	r3, r0
 800536a:	3332      	adds	r3, #50	@ 0x32
 800536c:	001a      	movs	r2, r3
 800536e:	4b6a      	ldr	r3, [pc, #424]	@ (8005518 <AT_Send+0x370>)
 8005370:	601a      	str	r2, [r3, #0]
    break;
 8005372:	e0c7      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005374:	4a73      	ldr	r2, [pc, #460]	@ (8005544 <AT_Send+0x39c>)
 8005376:	4b6a      	ldr	r3, [pc, #424]	@ (8005520 <AT_Send+0x378>)
 8005378:	0019      	movs	r1, r3
 800537a:	2003      	movs	r0, #3
 800537c:	f00b fa50 	bl	8010820 <CreateLine>
    ATCommandSend = CWMODE3();
 8005380:	230f      	movs	r3, #15
 8005382:	18fc      	adds	r4, r7, r3
 8005384:	f7ff fc38 	bl	8004bf8 <CWMODE3>
 8005388:	0003      	movs	r3, r0
 800538a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800538c:	f00b fe94 	bl	80110b8 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	330a      	adds	r3, #10
 8005394:	001a      	movs	r2, r3
 8005396:	4b60      	ldr	r3, [pc, #384]	@ (8005518 <AT_Send+0x370>)
 8005398:	601a      	str	r2, [r3, #0]
    break;
 800539a:	e0b3      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800539c:	4a6a      	ldr	r2, [pc, #424]	@ (8005548 <AT_Send+0x3a0>)
 800539e:	4b60      	ldr	r3, [pc, #384]	@ (8005520 <AT_Send+0x378>)
 80053a0:	0019      	movs	r1, r3
 80053a2:	2003      	movs	r0, #3
 80053a4:	f00b fa3c 	bl	8010820 <CreateLine>
    ATCommandSend = CWSAP();
 80053a8:	230f      	movs	r3, #15
 80053aa:	18fc      	adds	r4, r7, r3
 80053ac:	f7ff fc5c 	bl	8004c68 <CWSAP>
 80053b0:	0003      	movs	r3, r0
 80053b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053b4:	f00b fe80 	bl	80110b8 <HAL_GetTick>
 80053b8:	0003      	movs	r3, r0
 80053ba:	330a      	adds	r3, #10
 80053bc:	001a      	movs	r2, r3
 80053be:	4b56      	ldr	r3, [pc, #344]	@ (8005518 <AT_Send+0x370>)
 80053c0:	601a      	str	r2, [r3, #0]
    break;
 80053c2:	e09f      	b.n	8005504 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80053c4:	4a61      	ldr	r2, [pc, #388]	@ (800554c <AT_Send+0x3a4>)
 80053c6:	4b56      	ldr	r3, [pc, #344]	@ (8005520 <AT_Send+0x378>)
 80053c8:	0019      	movs	r1, r3
 80053ca:	2003      	movs	r0, #3
 80053cc:	f00b fa28 	bl	8010820 <CreateLine>
    ATCommandSend = CIPMUX();
 80053d0:	230f      	movs	r3, #15
 80053d2:	18fc      	adds	r4, r7, r3
 80053d4:	f7ff fc64 	bl	8004ca0 <CIPMUX>
 80053d8:	0003      	movs	r3, r0
 80053da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053dc:	f00b fe6c 	bl	80110b8 <HAL_GetTick>
 80053e0:	0003      	movs	r3, r0
 80053e2:	330a      	adds	r3, #10
 80053e4:	001a      	movs	r2, r3
 80053e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005518 <AT_Send+0x370>)
 80053e8:	601a      	str	r2, [r3, #0]
    break;
 80053ea:	e08b      	b.n	8005504 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80053ec:	4a58      	ldr	r2, [pc, #352]	@ (8005550 <AT_Send+0x3a8>)
 80053ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005520 <AT_Send+0x378>)
 80053f0:	0019      	movs	r1, r3
 80053f2:	2003      	movs	r0, #3
 80053f4:	f00b fa14 	bl	8010820 <CreateLine>
    ATCommandSend = WEBSERVER();
 80053f8:	230f      	movs	r3, #15
 80053fa:	18fc      	adds	r4, r7, r3
 80053fc:	f7ff fc6c 	bl	8004cd8 <WEBSERVER>
 8005400:	0003      	movs	r3, r0
 8005402:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005404:	f00b fe58 	bl	80110b8 <HAL_GetTick>
 8005408:	0003      	movs	r3, r0
 800540a:	330a      	adds	r3, #10
 800540c:	001a      	movs	r2, r3
 800540e:	4b42      	ldr	r3, [pc, #264]	@ (8005518 <AT_Send+0x370>)
 8005410:	601a      	str	r2, [r3, #0]
    break;
 8005412:	e077      	b.n	8005504 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005414:	230f      	movs	r3, #15
 8005416:	18fc      	adds	r4, r7, r3
 8005418:	f7ff fc7a 	bl	8004d10 <HTTPCPOST>
 800541c:	0003      	movs	r3, r0
 800541e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005420:	f00b fe4a 	bl	80110b8 <HAL_GetTick>
 8005424:	0003      	movs	r3, r0
 8005426:	33f5      	adds	r3, #245	@ 0xf5
 8005428:	33ff      	adds	r3, #255	@ 0xff
 800542a:	001a      	movs	r2, r3
 800542c:	4b3a      	ldr	r3, [pc, #232]	@ (8005518 <AT_Send+0x370>)
 800542e:	601a      	str	r2, [r3, #0]
    break;
 8005430:	e068      	b.n	8005504 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 8005432:	4a48      	ldr	r2, [pc, #288]	@ (8005554 <AT_Send+0x3ac>)
 8005434:	4b3a      	ldr	r3, [pc, #232]	@ (8005520 <AT_Send+0x378>)
 8005436:	0019      	movs	r1, r3
 8005438:	2003      	movs	r0, #3
 800543a:	f00b f9f1 	bl	8010820 <CreateLine>
    ATCommandSend = SENDDATA();
 800543e:	230f      	movs	r3, #15
 8005440:	18fc      	adds	r4, r7, r3
 8005442:	f7ff fccf 	bl	8004de4 <SENDDATA>
 8005446:	0003      	movs	r3, r0
 8005448:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800544a:	f00b fe35 	bl	80110b8 <HAL_GetTick>
 800544e:	0003      	movs	r3, r0
 8005450:	33f5      	adds	r3, #245	@ 0xf5
 8005452:	33ff      	adds	r3, #255	@ 0xff
 8005454:	001a      	movs	r2, r3
 8005456:	4b30      	ldr	r3, [pc, #192]	@ (8005518 <AT_Send+0x370>)
 8005458:	601a      	str	r2, [r3, #0]
    break;
 800545a:	e053      	b.n	8005504 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800545c:	4a3e      	ldr	r2, [pc, #248]	@ (8005558 <AT_Send+0x3b0>)
 800545e:	4b30      	ldr	r3, [pc, #192]	@ (8005520 <AT_Send+0x378>)
 8005460:	0019      	movs	r1, r3
 8005462:	2003      	movs	r0, #3
 8005464:	f00b f9dc 	bl	8010820 <CreateLine>
    ATCommandSend = SLEEP();
 8005468:	230f      	movs	r3, #15
 800546a:	18fc      	adds	r4, r7, r3
 800546c:	f7ff fce6 	bl	8004e3c <SLEEP>
 8005470:	0003      	movs	r3, r0
 8005472:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005474:	f00b fe20 	bl	80110b8 <HAL_GetTick>
 8005478:	0003      	movs	r3, r0
 800547a:	330a      	adds	r3, #10
 800547c:	001a      	movs	r2, r3
 800547e:	4b26      	ldr	r3, [pc, #152]	@ (8005518 <AT_Send+0x370>)
 8005480:	601a      	str	r2, [r3, #0]
    break;
 8005482:	e03f      	b.n	8005504 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8005484:	4a35      	ldr	r2, [pc, #212]	@ (800555c <AT_Send+0x3b4>)
 8005486:	4b26      	ldr	r3, [pc, #152]	@ (8005520 <AT_Send+0x378>)
 8005488:	0019      	movs	r1, r3
 800548a:	2003      	movs	r0, #3
 800548c:	f00b f9c8 	bl	8010820 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005490:	230f      	movs	r3, #15
 8005492:	18fc      	adds	r4, r7, r3
 8005494:	f7ff fcee 	bl	8004e74 <CIPSNTPCFG>
 8005498:	0003      	movs	r3, r0
 800549a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800549c:	f00b fe0c 	bl	80110b8 <HAL_GetTick>
 80054a0:	0003      	movs	r3, r0
 80054a2:	330a      	adds	r3, #10
 80054a4:	001a      	movs	r2, r3
 80054a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005518 <AT_Send+0x370>)
 80054a8:	601a      	str	r2, [r3, #0]
    break;
 80054aa:	e02b      	b.n	8005504 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80054ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005560 <AT_Send+0x3b8>)
 80054ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005520 <AT_Send+0x378>)
 80054b0:	0019      	movs	r1, r3
 80054b2:	2003      	movs	r0, #3
 80054b4:	f00b f9b4 	bl	8010820 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80054b8:	230f      	movs	r3, #15
 80054ba:	18fc      	adds	r4, r7, r3
 80054bc:	f7ff fcfa 	bl	8004eb4 <CIPSNTPTIME>
 80054c0:	0003      	movs	r3, r0
 80054c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80054c4:	f00b fdf8 	bl	80110b8 <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	33f5      	adds	r3, #245	@ 0xf5
 80054cc:	33ff      	adds	r3, #255	@ 0xff
 80054ce:	001a      	movs	r2, r3
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <AT_Send+0x370>)
 80054d2:	601a      	str	r2, [r3, #0]
    break;
 80054d4:	e016      	b.n	8005504 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80054d6:	4a23      	ldr	r2, [pc, #140]	@ (8005564 <AT_Send+0x3bc>)
 80054d8:	4b11      	ldr	r3, [pc, #68]	@ (8005520 <AT_Send+0x378>)
 80054da:	0019      	movs	r1, r3
 80054dc:	2003      	movs	r0, #3
 80054de:	f00b f99f 	bl	8010820 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80054e2:	230f      	movs	r3, #15
 80054e4:	18fc      	adds	r4, r7, r3
 80054e6:	f7ff fd01 	bl	8004eec <CIPSNTPINTV>
 80054ea:	0003      	movs	r3, r0
 80054ec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80054ee:	f00b fde3 	bl	80110b8 <HAL_GetTick>
 80054f2:	0003      	movs	r3, r0
 80054f4:	330a      	adds	r3, #10
 80054f6:	001a      	movs	r2, r3
 80054f8:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <AT_Send+0x370>)
 80054fa:	601a      	str	r2, [r3, #0]
    break;
 80054fc:	e002      	b.n	8005504 <AT_Send+0x35c>

  case AT_END:
    break;
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	e000      	b.n	8005504 <AT_Send+0x35c>
  break;
 8005502:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005504:	230f      	movs	r3, #15
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	781b      	ldrb	r3, [r3, #0]
}
 800550a:	0018      	movs	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	b005      	add	sp, #20
 8005510:	bd90      	pop	{r4, r7, pc}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	08028c20 	.word	0x08028c20
 8005518:	20000628 	.word	0x20000628
 800551c:	080264b8 	.word	0x080264b8
 8005520:	08025a50 	.word	0x08025a50
 8005524:	080264c4 	.word	0x080264c4
 8005528:	080264d8 	.word	0x080264d8
 800552c:	080264ec 	.word	0x080264ec
 8005530:	080264fc 	.word	0x080264fc
 8005534:	08026510 	.word	0x08026510
 8005538:	08026528 	.word	0x08026528
 800553c:	08026540 	.word	0x08026540
 8005540:	08026558 	.word	0x08026558
 8005544:	0802656c 	.word	0x0802656c
 8005548:	08026588 	.word	0x08026588
 800554c:	080265a4 	.word	0x080265a4
 8005550:	080265c0 	.word	0x080265c0
 8005554:	080265dc 	.word	0x080265dc
 8005558:	080265ec 	.word	0x080265ec
 800555c:	08026610 	.word	0x08026610
 8005560:	08026624 	.word	0x08026624
 8005564:	0802663c 	.word	0x0802663c

08005568 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800556e:	1dfb      	adds	r3, r7, #7
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005574:	4b7d      	ldr	r3, [pc, #500]	@ (800576c <ESP_WakeTest+0x204>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d900      	bls.n	800557e <ESP_WakeTest+0x16>
 800557c:	e0d9      	b.n	8005732 <ESP_WakeTest+0x1ca>
 800557e:	009a      	lsls	r2, r3, #2
 8005580:	4b7b      	ldr	r3, [pc, #492]	@ (8005770 <ESP_WakeTest+0x208>)
 8005582:	18d3      	adds	r3, r2, r3
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005588:	4b7a      	ldr	r3, [pc, #488]	@ (8005774 <ESP_WakeTest+0x20c>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2201      	movs	r2, #1
 800558e:	4053      	eors	r3, r2
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d036      	beq.n	8005604 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005596:	2380      	movs	r3, #128	@ 0x80
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	4877      	ldr	r0, [pc, #476]	@ (8005778 <ESP_WakeTest+0x210>)
 800559c:	2200      	movs	r2, #0
 800559e:	0019      	movs	r1, r3
 80055a0:	f00d f81b 	bl	80125da <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80055a4:	2032      	movs	r0, #50	@ 0x32
 80055a6:	f00b fd91 	bl	80110cc <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80055aa:	2380      	movs	r3, #128	@ 0x80
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	4872      	ldr	r0, [pc, #456]	@ (8005778 <ESP_WakeTest+0x210>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	0019      	movs	r1, r3
 80055b4:	f00d f811 	bl	80125da <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055b8:	200a      	movs	r0, #10
 80055ba:	f00b fd87 	bl	80110cc <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80055be:	4b6f      	ldr	r3, [pc, #444]	@ (800577c <ESP_WakeTest+0x214>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	2101      	movs	r1, #1
 80055c4:	0018      	movs	r0, r3
 80055c6:	f00d f808 	bl	80125da <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055ca:	200a      	movs	r0, #10
 80055cc:	f00b fd7e 	bl	80110cc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80055d0:	4b6a      	ldr	r3, [pc, #424]	@ (800577c <ESP_WakeTest+0x214>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	2102      	movs	r1, #2
 80055d6:	0018      	movs	r0, r3
 80055d8:	f00c ffff 	bl	80125da <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055dc:	200a      	movs	r0, #10
 80055de:	f00b fd75 	bl	80110cc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80055e2:	4b66      	ldr	r3, [pc, #408]	@ (800577c <ESP_WakeTest+0x214>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	2101      	movs	r1, #1
 80055e8:	0018      	movs	r0, r3
 80055ea:	f00c fff6 	bl	80125da <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80055ee:	f00b fd63 	bl	80110b8 <HAL_GetTick>
 80055f2:	0003      	movs	r3, r0
 80055f4:	22af      	movs	r2, #175	@ 0xaf
 80055f6:	0092      	lsls	r2, r2, #2
 80055f8:	189a      	adds	r2, r3, r2
 80055fa:	4b61      	ldr	r3, [pc, #388]	@ (8005780 <ESP_WakeTest+0x218>)
 80055fc:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80055fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005774 <ESP_WakeTest+0x20c>)
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	005a      	lsls	r2, r3, #1
 8005608:	4b5e      	ldr	r3, [pc, #376]	@ (8005784 <ESP_WakeTest+0x21c>)
 800560a:	0011      	movs	r1, r2
 800560c:	0018      	movs	r0, r3
 800560e:	f7fe fa41 	bl	8003a94 <ESP_Receive>
 8005612:	1e03      	subs	r3, r0, #0
 8005614:	d100      	bne.n	8005618 <ESP_WakeTest+0xb0>
 8005616:	e09f      	b.n	8005758 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005618:	4b54      	ldr	r3, [pc, #336]	@ (800576c <ESP_WakeTest+0x204>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800561e:	e09b      	b.n	8005758 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005620:	4b57      	ldr	r3, [pc, #348]	@ (8005780 <ESP_WakeTest+0x218>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	0018      	movs	r0, r3
 8005626:	f00b f8a5 	bl	8010774 <TimestampIsReached>
 800562a:	1e03      	subs	r3, r0, #0
 800562c:	d100      	bne.n	8005630 <ESP_WakeTest+0xc8>
 800562e:	e095      	b.n	800575c <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8005630:	4b55      	ldr	r3, [pc, #340]	@ (8005788 <ESP_WakeTest+0x220>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	1dfc      	adds	r4, r7, #7
 8005636:	0018      	movs	r0, r3
 8005638:	f7ff fdb6 	bl	80051a8 <AT_Send>
 800563c:	0003      	movs	r3, r0
 800563e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005640:	1dfb      	adds	r3, r7, #7
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d100      	bne.n	800564a <ESP_WakeTest+0xe2>
 8005648:	e088      	b.n	800575c <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 800564a:	4b48      	ldr	r3, [pc, #288]	@ (800576c <ESP_WakeTest+0x204>)
 800564c:	2202      	movs	r2, #2
 800564e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005650:	e084      	b.n	800575c <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8005652:	4b4b      	ldr	r3, [pc, #300]	@ (8005780 <ESP_WakeTest+0x218>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	0018      	movs	r0, r3
 8005658:	f00b f88c 	bl	8010774 <TimestampIsReached>
 800565c:	1e03      	subs	r3, r0, #0
 800565e:	d100      	bne.n	8005662 <ESP_WakeTest+0xfa>
 8005660:	e07e      	b.n	8005760 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005662:	4b4a      	ldr	r3, [pc, #296]	@ (800578c <ESP_WakeTest+0x224>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff fc5c 	bl	8004f24 <DMA_ProcessBuffer>
 800566c:	0003      	movs	r3, r0
 800566e:	001a      	movs	r2, r3
 8005670:	4b47      	ldr	r3, [pc, #284]	@ (8005790 <ESP_WakeTest+0x228>)
 8005672:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005674:	4b46      	ldr	r3, [pc, #280]	@ (8005790 <ESP_WakeTest+0x228>)
 8005676:	781a      	ldrb	r2, [r3, #0]
 8005678:	4b44      	ldr	r3, [pc, #272]	@ (800578c <ESP_WakeTest+0x224>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	1dbc      	adds	r4, r7, #6
 800567e:	0019      	movs	r1, r3
 8005680:	0010      	movs	r0, r2
 8005682:	f7ff fd4f 	bl	8005124 <ATCompare>
 8005686:	0003      	movs	r3, r0
 8005688:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800568a:	4b41      	ldr	r3, [pc, #260]	@ (8005790 <ESP_WakeTest+0x228>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d102      	bne.n	8005698 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8005692:	4b36      	ldr	r3, [pc, #216]	@ (800576c <ESP_WakeTest+0x204>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005698:	4b3d      	ldr	r3, [pc, #244]	@ (8005790 <ESP_WakeTest+0x228>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b07      	cmp	r3, #7
 800569e:	d104      	bne.n	80056aa <ESP_WakeTest+0x142>
          StartProg();
 80056a0:	f7fe ff28 	bl	80044f4 <StartProg>
          TestState = ESP_TEST_BOOT;
 80056a4:	4b31      	ldr	r3, [pc, #196]	@ (800576c <ESP_WakeTest+0x204>)
 80056a6:	2205      	movs	r2, #5
 80056a8:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80056aa:	4b39      	ldr	r3, [pc, #228]	@ (8005790 <ESP_WakeTest+0x228>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d109      	bne.n	80056c6 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80056b2:	f00b fd01 	bl	80110b8 <HAL_GetTick>
 80056b6:	0003      	movs	r3, r0
 80056b8:	3332      	adds	r3, #50	@ 0x32
 80056ba:	001a      	movs	r2, r3
 80056bc:	4b30      	ldr	r3, [pc, #192]	@ (8005780 <ESP_WakeTest+0x218>)
 80056be:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80056c0:	4b2a      	ldr	r3, [pc, #168]	@ (800576c <ESP_WakeTest+0x204>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80056c6:	1dbb      	adds	r3, r7, #6
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d048      	beq.n	8005760 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80056ce:	4b27      	ldr	r3, [pc, #156]	@ (800576c <ESP_WakeTest+0x204>)
 80056d0:	2203      	movs	r2, #3
 80056d2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80056d4:	e044      	b.n	8005760 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005794 <ESP_WakeTest+0x22c>)
 80056d8:	22fa      	movs	r2, #250	@ 0xfa
 80056da:	0112      	lsls	r2, r2, #4
 80056dc:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80056de:	f009 fdef 	bl	800f2c0 <Calculate_LED_ON>
 80056e2:	0003      	movs	r3, r0
 80056e4:	001a      	movs	r2, r3
 80056e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005794 <ESP_WakeTest+0x22c>)
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80056ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005794 <ESP_WakeTest+0x22c>)
 80056ec:	22fa      	movs	r2, #250	@ 0xfa
 80056ee:	0112      	lsls	r2, r2, #4
 80056f0:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80056f2:	4b1e      	ldr	r3, [pc, #120]	@ (800576c <ESP_WakeTest+0x204>)
 80056f4:	2204      	movs	r2, #4
 80056f6:	701a      	strb	r2, [r3, #0]

      break;
 80056f8:	e033      	b.n	8005762 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80056fa:	4b27      	ldr	r3, [pc, #156]	@ (8005798 <ESP_WakeTest+0x230>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005700:	4b1c      	ldr	r3, [pc, #112]	@ (8005774 <ESP_WakeTest+0x20c>)
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005706:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <ESP_WakeTest+0x214>)
 8005708:	2200      	movs	r2, #0
 800570a:	2101      	movs	r1, #1
 800570c:	0018      	movs	r0, r3
 800570e:	f00c ff64 	bl	80125da <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005712:	2380      	movs	r3, #128	@ 0x80
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	4818      	ldr	r0, [pc, #96]	@ (8005778 <ESP_WakeTest+0x210>)
 8005718:	2200      	movs	r2, #0
 800571a:	0019      	movs	r1, r3
 800571c:	f00c ff5d 	bl	80125da <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005720:	4b16      	ldr	r3, [pc, #88]	@ (800577c <ESP_WakeTest+0x214>)
 8005722:	2200      	movs	r2, #0
 8005724:	2102      	movs	r1, #2
 8005726:	0018      	movs	r0, r3
 8005728:	f00c ff57 	bl	80125da <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800572c:	f004 feda 	bl	800a4e4 <SetESPMeasurementDone>
      break;
 8005730:	e017      	b.n	8005762 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 8005732:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <ESP_WakeTest+0x204>)
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
      break;
 8005738:	e013      	b.n	8005762 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 800573a:	4b16      	ldr	r3, [pc, #88]	@ (8005794 <ESP_WakeTest+0x22c>)
 800573c:	22fa      	movs	r2, #250	@ 0xfa
 800573e:	0112      	lsls	r2, r2, #4
 8005740:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8005742:	4b14      	ldr	r3, [pc, #80]	@ (8005794 <ESP_WakeTest+0x22c>)
 8005744:	22fa      	movs	r2, #250	@ 0xfa
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 800574a:	f009 fdb9 	bl	800f2c0 <Calculate_LED_ON>
 800574e:	0003      	movs	r3, r0
 8005750:	001a      	movs	r2, r3
 8005752:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <ESP_WakeTest+0x22c>)
 8005754:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005756:	e004      	b.n	8005762 <ESP_WakeTest+0x1fa>
      break;
 8005758:	46c0      	nop			@ (mov r8, r8)
 800575a:	e002      	b.n	8005762 <ESP_WakeTest+0x1fa>
      break;
 800575c:	46c0      	nop			@ (mov r8, r8)
 800575e:	e000      	b.n	8005762 <ESP_WakeTest+0x1fa>
      break;
 8005760:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	46bd      	mov	sp, r7
 8005766:	b003      	add	sp, #12
 8005768:	bd90      	pop	{r4, r7, pc}
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	20000634 	.word	0x20000634
 8005770:	08028c74 	.word	0x08028c74
 8005774:	2000055c 	.word	0x2000055c
 8005778:	50000800 	.word	0x50000800
 800577c:	50001c00 	.word	0x50001c00
 8005780:	20000628 	.word	0x20000628
 8005784:	2000045c 	.word	0x2000045c
 8005788:	20000632 	.word	0x20000632
 800578c:	20000631 	.word	0x20000631
 8005790:	2000002e 	.word	0x2000002e
 8005794:	40000400 	.word	0x40000400
 8005798:	20000000 	.word	0x20000000

0800579c <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 800579c:	b5b0      	push	{r4, r5, r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80057a2:	1dfb      	adds	r3, r7, #7
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80057a8:	4be2      	ldr	r3, [pc, #904]	@ (8005b34 <ESP_Upkeep+0x398>)
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	4be2      	ldr	r3, [pc, #904]	@ (8005b38 <ESP_Upkeep+0x39c>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d024      	beq.n	80057fe <ESP_Upkeep+0x62>
 80057b4:	f00b f8ae 	bl	8010914 <GetVerboseLevel>
 80057b8:	0003      	movs	r3, r0
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d11f      	bne.n	80057fe <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80057be:	4bdd      	ldr	r3, [pc, #884]	@ (8005b34 <ESP_Upkeep+0x398>)
 80057c0:	781a      	ldrb	r2, [r3, #0]
 80057c2:	4bdd      	ldr	r3, [pc, #884]	@ (8005b38 <ESP_Upkeep+0x39c>)
 80057c4:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80057c6:	4bdc      	ldr	r3, [pc, #880]	@ (8005b38 <ESP_Upkeep+0x39c>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d103      	bne.n	80057d6 <ESP_Upkeep+0x3a>
 80057ce:	4bdb      	ldr	r3, [pc, #876]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b0e      	cmp	r3, #14
 80057d4:	d013      	beq.n	80057fe <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80057d6:	4bd8      	ldr	r3, [pc, #864]	@ (8005b38 <ESP_Upkeep+0x39c>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	001d      	movs	r5, r3
 80057dc:	4bd7      	ldr	r3, [pc, #860]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	0018      	movs	r0, r3
 80057e2:	4bd7      	ldr	r3, [pc, #860]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	001c      	movs	r4, r3
 80057e8:	4bd6      	ldr	r3, [pc, #856]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	4ad6      	ldr	r2, [pc, #856]	@ (8005b48 <ESP_Upkeep+0x3ac>)
 80057ee:	49d7      	ldr	r1, [pc, #860]	@ (8005b4c <ESP_Upkeep+0x3b0>)
 80057f0:	9302      	str	r3, [sp, #8]
 80057f2:	9401      	str	r4, [sp, #4]
 80057f4:	9000      	str	r0, [sp, #0]
 80057f6:	002b      	movs	r3, r5
 80057f8:	2003      	movs	r0, #3
 80057fa:	f00b f811 	bl	8010820 <CreateLine>
    }
  }
  switch (EspState) {
 80057fe:	4bcd      	ldr	r3, [pc, #820]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b0f      	cmp	r3, #15
 8005804:	d901      	bls.n	800580a <ESP_Upkeep+0x6e>
 8005806:	f000 fc32 	bl	800606e <ESP_Upkeep+0x8d2>
 800580a:	009a      	lsls	r2, r3, #2
 800580c:	4bd0      	ldr	r3, [pc, #832]	@ (8005b50 <ESP_Upkeep+0x3b4>)
 800580e:	18d3      	adds	r3, r2, r3
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005814:	4bc7      	ldr	r3, [pc, #796]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
      break;
 800581a:	f000 fc41 	bl	80060a0 <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800581e:	f005 f943 	bl	800aaa8 <DisableConnectedDevices>
      SetESPIndicator();
 8005822:	f009 fedf 	bl	800f5e4 <SetESPIndicator>
      if(!EspTurnedOn){
 8005826:	4bcb      	ldr	r3, [pc, #812]	@ (8005b54 <ESP_Upkeep+0x3b8>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	4053      	eors	r3, r2
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d036      	beq.n	80058a2 <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005834:	2380      	movs	r3, #128	@ 0x80
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	48c7      	ldr	r0, [pc, #796]	@ (8005b58 <ESP_Upkeep+0x3bc>)
 800583a:	2200      	movs	r2, #0
 800583c:	0019      	movs	r1, r3
 800583e:	f00c fecc 	bl	80125da <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005842:	2001      	movs	r0, #1
 8005844:	f00b fc42 	bl	80110cc <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005848:	2380      	movs	r3, #128	@ 0x80
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	48c2      	ldr	r0, [pc, #776]	@ (8005b58 <ESP_Upkeep+0x3bc>)
 800584e:	2201      	movs	r2, #1
 8005850:	0019      	movs	r1, r3
 8005852:	f00c fec2 	bl	80125da <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005856:	2001      	movs	r0, #1
 8005858:	f00b fc38 	bl	80110cc <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800585c:	4bbf      	ldr	r3, [pc, #764]	@ (8005b5c <ESP_Upkeep+0x3c0>)
 800585e:	2200      	movs	r2, #0
 8005860:	2101      	movs	r1, #1
 8005862:	0018      	movs	r0, r3
 8005864:	f00c feb9 	bl	80125da <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005868:	2001      	movs	r0, #1
 800586a:	f00b fc2f 	bl	80110cc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800586e:	4bbb      	ldr	r3, [pc, #748]	@ (8005b5c <ESP_Upkeep+0x3c0>)
 8005870:	2201      	movs	r2, #1
 8005872:	2102      	movs	r1, #2
 8005874:	0018      	movs	r0, r3
 8005876:	f00c feb0 	bl	80125da <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800587a:	2001      	movs	r0, #1
 800587c:	f00b fc26 	bl	80110cc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005880:	4bb6      	ldr	r3, [pc, #728]	@ (8005b5c <ESP_Upkeep+0x3c0>)
 8005882:	2201      	movs	r2, #1
 8005884:	2101      	movs	r1, #1
 8005886:	0018      	movs	r0, r3
 8005888:	f00c fea7 	bl	80125da <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800588c:	f00b fc14 	bl	80110b8 <HAL_GetTick>
 8005890:	0003      	movs	r3, r0
 8005892:	22af      	movs	r2, #175	@ 0xaf
 8005894:	0092      	lsls	r2, r2, #2
 8005896:	189a      	adds	r2, r3, r2
 8005898:	4bb1      	ldr	r3, [pc, #708]	@ (8005b60 <ESP_Upkeep+0x3c4>)
 800589a:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800589c:	4bad      	ldr	r3, [pc, #692]	@ (8005b54 <ESP_Upkeep+0x3b8>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80058a2:	2380      	movs	r3, #128	@ 0x80
 80058a4:	005a      	lsls	r2, r3, #1
 80058a6:	4baf      	ldr	r3, [pc, #700]	@ (8005b64 <ESP_Upkeep+0x3c8>)
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fe f8f2 	bl	8003a94 <ESP_Receive>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d101      	bne.n	80058b8 <ESP_Upkeep+0x11c>
 80058b4:	f000 fbe7 	bl	8006086 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80058b8:	4b9e      	ldr	r3, [pc, #632]	@ (8005b34 <ESP_Upkeep+0x398>)
 80058ba:	220f      	movs	r2, #15
 80058bc:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80058be:	f00b fbfb 	bl	80110b8 <HAL_GetTick>
 80058c2:	0003      	movs	r3, r0
 80058c4:	22fa      	movs	r2, #250	@ 0xfa
 80058c6:	00d2      	lsls	r2, r2, #3
 80058c8:	189a      	adds	r2, r3, r2
 80058ca:	4ba7      	ldr	r3, [pc, #668]	@ (8005b68 <ESP_Upkeep+0x3cc>)
 80058cc:	601a      	str	r2, [r3, #0]
      }
      break;
 80058ce:	f000 fbda 	bl	8006086 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80058d2:	2001      	movs	r0, #1
 80058d4:	f7ff fb26 	bl	8004f24 <DMA_ProcessBuffer>
 80058d8:	0003      	movs	r3, r0
 80058da:	001a      	movs	r2, r3
 80058dc:	4ba3      	ldr	r3, [pc, #652]	@ (8005b6c <ESP_Upkeep+0x3d0>)
 80058de:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80058e0:	4ba2      	ldr	r3, [pc, #648]	@ (8005b6c <ESP_Upkeep+0x3d0>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	1dbc      	adds	r4, r7, #6
 80058e6:	2101      	movs	r1, #1
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7ff fc1b 	bl	8005124 <ATCompare>
 80058ee:	0003      	movs	r3, r0
 80058f0:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80058f2:	1dbb      	adds	r3, r7, #6
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d108      	bne.n	800590c <ESP_Upkeep+0x170>
 80058fa:	4b9b      	ldr	r3, [pc, #620]	@ (8005b68 <ESP_Upkeep+0x3cc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	0018      	movs	r0, r3
 8005900:	f00a ff38 	bl	8010774 <TimestampIsReached>
 8005904:	1e03      	subs	r3, r0, #0
 8005906:	d101      	bne.n	800590c <ESP_Upkeep+0x170>
 8005908:	f000 fbbf 	bl	800608a <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 800590c:	4b89      	ldr	r3, [pc, #548]	@ (8005b34 <ESP_Upkeep+0x398>)
 800590e:	220b      	movs	r2, #11
 8005910:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005912:	f000 fbba 	bl	800608a <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005916:	4b96      	ldr	r3, [pc, #600]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005918:	2209      	movs	r2, #9
 800591a:	2114      	movs	r1, #20
 800591c:	0018      	movs	r0, r3
 800591e:	f01d f8dd 	bl	8022adc <memset>
      if(!InitIsDone || WifiReset){
 8005922:	4b94      	ldr	r3, [pc, #592]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	4053      	eors	r3, r2
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <ESP_Upkeep+0x19c>
 8005930:	4b91      	ldr	r3, [pc, #580]	@ (8005b78 <ESP_Upkeep+0x3dc>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01a      	beq.n	800596e <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005938:	4b8d      	ldr	r3, [pc, #564]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 800593a:	4a90      	ldr	r2, [pc, #576]	@ (8005b7c <ESP_Upkeep+0x3e0>)
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	6019      	str	r1, [r3, #0]
 8005940:	8891      	ldrh	r1, [r2, #4]
 8005942:	8099      	strh	r1, [r3, #4]
 8005944:	7992      	ldrb	r2, [r2, #6]
 8005946:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005948:	4b7a      	ldr	r3, [pc, #488]	@ (8005b34 <ESP_Upkeep+0x398>)
 800594a:	2204      	movs	r2, #4
 800594c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800594e:	4b8c      	ldr	r3, [pc, #560]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005954:	4b7a      	ldr	r3, [pc, #488]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800595a:	4b89      	ldr	r3, [pc, #548]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	001a      	movs	r2, r3
 8005960:	4b83      	ldr	r3, [pc, #524]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005962:	5c9a      	ldrb	r2, [r3, r2]
 8005964:	4b75      	ldr	r3, [pc, #468]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005966:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005968:	4b76      	ldr	r3, [pc, #472]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800596e:	4b81      	ldr	r3, [pc, #516]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01f      	beq.n	80059b6 <ESP_Upkeep+0x21a>
 8005976:	4b83      	ldr	r3, [pc, #524]	@ (8005b84 <ESP_Upkeep+0x3e8>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2201      	movs	r2, #1
 800597c:	4053      	eors	r3, r2
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d018      	beq.n	80059b6 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005984:	4b7a      	ldr	r3, [pc, #488]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005986:	4a80      	ldr	r2, [pc, #512]	@ (8005b88 <ESP_Upkeep+0x3ec>)
 8005988:	6811      	ldr	r1, [r2, #0]
 800598a:	6019      	str	r1, [r3, #0]
 800598c:	8892      	ldrh	r2, [r2, #4]
 800598e:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005990:	4b68      	ldr	r3, [pc, #416]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005992:	2204      	movs	r2, #4
 8005994:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005996:	4b7a      	ldr	r3, [pc, #488]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800599c:	4b68      	ldr	r3, [pc, #416]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059a2:	4b77      	ldr	r3, [pc, #476]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	001a      	movs	r2, r3
 80059a8:	4b71      	ldr	r3, [pc, #452]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 80059aa:	5c9a      	ldrb	r2, [r3, r2]
 80059ac:	4b63      	ldr	r3, [pc, #396]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 80059ae:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059b0:	4b64      	ldr	r3, [pc, #400]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80059b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d021      	beq.n	8005a02 <ESP_Upkeep+0x266>
 80059be:	4b71      	ldr	r3, [pc, #452]	@ (8005b84 <ESP_Upkeep+0x3e8>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01d      	beq.n	8005a02 <ESP_Upkeep+0x266>
 80059c6:	4b71      	ldr	r3, [pc, #452]	@ (8005b8c <ESP_Upkeep+0x3f0>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	4053      	eors	r3, r2
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d016      	beq.n	8005a02 <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80059d4:	4b6e      	ldr	r3, [pc, #440]	@ (8005b90 <ESP_Upkeep+0x3f4>)
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	4b65      	ldr	r3, [pc, #404]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 80059da:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059dc:	4b55      	ldr	r3, [pc, #340]	@ (8005b34 <ESP_Upkeep+0x398>)
 80059de:	2204      	movs	r2, #4
 80059e0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059e2:	4b67      	ldr	r3, [pc, #412]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80059e8:	4b55      	ldr	r3, [pc, #340]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 80059ea:	2204      	movs	r2, #4
 80059ec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059ee:	4b64      	ldr	r3, [pc, #400]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	001a      	movs	r2, r3
 80059f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 80059f6:	5c9a      	ldrb	r2, [r3, r2]
 80059f8:	4b50      	ldr	r3, [pc, #320]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 80059fa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059fc:	4b51      	ldr	r3, [pc, #324]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005a02:	4b5c      	ldr	r3, [pc, #368]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d02c      	beq.n	8005a64 <ESP_Upkeep+0x2c8>
 8005a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8005b84 <ESP_Upkeep+0x3e8>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d028      	beq.n	8005a64 <ESP_Upkeep+0x2c8>
 8005a12:	4b5e      	ldr	r3, [pc, #376]	@ (8005b8c <ESP_Upkeep+0x3f0>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d024      	beq.n	8005a64 <ESP_Upkeep+0x2c8>
 8005a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8005b94 <ESP_Upkeep+0x3f8>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	4053      	eors	r3, r2
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01d      	beq.n	8005a64 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005a28:	4b51      	ldr	r3, [pc, #324]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8005b98 <ESP_Upkeep+0x3fc>)
 8005a2c:	8811      	ldrh	r1, [r2, #0]
 8005a2e:	8019      	strh	r1, [r3, #0]
 8005a30:	7892      	ldrb	r2, [r2, #2]
 8005a32:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005a34:	4b3f      	ldr	r3, [pc, #252]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005a36:	2204      	movs	r2, #4
 8005a38:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a3a:	4b51      	ldr	r3, [pc, #324]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005a40:	4b3f      	ldr	r3, [pc, #252]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 8005a42:	2202      	movs	r2, #2
 8005a44:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005a46:	f00b fb37 	bl	80110b8 <HAL_GetTick>
 8005a4a:	0002      	movs	r2, r0
 8005a4c:	4b53      	ldr	r3, [pc, #332]	@ (8005b9c <ESP_Upkeep+0x400>)
 8005a4e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005a50:	4b4b      	ldr	r3, [pc, #300]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	001a      	movs	r2, r3
 8005a56:	4b46      	ldr	r3, [pc, #280]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005a58:	5c9a      	ldrb	r2, [r3, r2]
 8005a5a:	4b38      	ldr	r3, [pc, #224]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005a5c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a5e:	4b39      	ldr	r3, [pc, #228]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005a64:	4b43      	ldr	r3, [pc, #268]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d027      	beq.n	8005abc <ESP_Upkeep+0x320>
 8005a6c:	4b45      	ldr	r3, [pc, #276]	@ (8005b84 <ESP_Upkeep+0x3e8>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d023      	beq.n	8005abc <ESP_Upkeep+0x320>
 8005a74:	4b45      	ldr	r3, [pc, #276]	@ (8005b8c <ESP_Upkeep+0x3f0>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01f      	beq.n	8005abc <ESP_Upkeep+0x320>
 8005a7c:	4b45      	ldr	r3, [pc, #276]	@ (8005b94 <ESP_Upkeep+0x3f8>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01b      	beq.n	8005abc <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005a84:	4b46      	ldr	r3, [pc, #280]	@ (8005ba0 <ESP_Upkeep+0x404>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	4b39      	ldr	r3, [pc, #228]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005a8a:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005a8c:	4b29      	ldr	r3, [pc, #164]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005a8e:	2204      	movs	r2, #4
 8005a90:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a92:	4b3b      	ldr	r3, [pc, #236]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005a98:	4b29      	ldr	r3, [pc, #164]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005a9e:	f00b fb0b 	bl	80110b8 <HAL_GetTick>
 8005aa2:	0002      	movs	r2, r0
 8005aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8005b9c <ESP_Upkeep+0x400>)
 8005aa6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005aa8:	4b35      	ldr	r3, [pc, #212]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	001a      	movs	r2, r3
 8005aae:	4b30      	ldr	r3, [pc, #192]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005ab0:	5c9a      	ldrb	r2, [r3, r2]
 8005ab2:	4b22      	ldr	r3, [pc, #136]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005ab4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005ab6:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005abc:	4b39      	ldr	r3, [pc, #228]	@ (8005ba4 <ESP_Upkeep+0x408>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d100      	bne.n	8005ac6 <ESP_Upkeep+0x32a>
 8005ac4:	e2e3      	b.n	800608e <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005ac8:	4a37      	ldr	r2, [pc, #220]	@ (8005ba8 <ESP_Upkeep+0x40c>)
 8005aca:	6811      	ldr	r1, [r2, #0]
 8005acc:	6019      	str	r1, [r3, #0]
 8005ace:	7912      	ldrb	r2, [r2, #4]
 8005ad0:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 8005ad2:	4a36      	ldr	r2, [pc, #216]	@ (8005bac <ESP_Upkeep+0x410>)
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b4c <ESP_Upkeep+0x3b0>)
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	2003      	movs	r0, #3
 8005ada:	f00a fea1 	bl	8010820 <CreateLine>
        DisableConnectedDevices();
 8005ade:	f004 ffe3 	bl	800aaa8 <DisableConnectedDevices>
        usblog = false;
 8005ae2:	4b33      	ldr	r3, [pc, #204]	@ (8005bb0 <ESP_Upkeep+0x414>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005ae8:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005aea:	2204      	movs	r2, #4
 8005aec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005aee:	4b24      	ldr	r3, [pc, #144]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005af4:	4b12      	ldr	r3, [pc, #72]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 8005af6:	2203      	movs	r2, #3
 8005af8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005afa:	4b21      	ldr	r3, [pc, #132]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	001a      	movs	r2, r3
 8005b00:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005b02:	5c9a      	ldrb	r2, [r3, r2]
 8005b04:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005b06:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005b08:	4b0e      	ldr	r3, [pc, #56]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005b0e:	e2be      	b.n	800608e <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8005b10:	4b0a      	ldr	r3, [pc, #40]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	1dfc      	adds	r4, r7, #7
 8005b16:	0018      	movs	r0, r3
 8005b18:	f7ff fb46 	bl	80051a8 <AT_Send>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005b20:	1dfb      	adds	r3, r7, #7
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d100      	bne.n	8005b2a <ESP_Upkeep+0x38e>
 8005b28:	e2b3      	b.n	8006092 <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005b2a:	4b02      	ldr	r3, [pc, #8]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005b30:	e2af      	b.n	8006092 <ESP_Upkeep+0x8f6>
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	2000002c 	.word	0x2000002c
 8005b38:	20000002 	.word	0x20000002
 8005b3c:	20000632 	.word	0x20000632
 8005b40:	20000633 	.word	0x20000633
 8005b44:	20000631 	.word	0x20000631
 8005b48:	0802665c 	.word	0x0802665c
 8005b4c:	08025a50 	.word	0x08025a50
 8005b50:	08028c8c 	.word	0x08028c8c
 8005b54:	2000055c 	.word	0x2000055c
 8005b58:	50000800 	.word	0x50000800
 8005b5c:	50001c00 	.word	0x50001c00
 8005b60:	20000628 	.word	0x20000628
 8005b64:	2000045c 	.word	0x2000045c
 8005b68:	2000078c 	.word	0x2000078c
 8005b6c:	2000002f 	.word	0x2000002f
 8005b70:	20000618 	.word	0x20000618
 8005b74:	2000055d 	.word	0x2000055d
 8005b78:	2000055e 	.word	0x2000055e
 8005b7c:	20000004 	.word	0x20000004
 8005b80:	20000622 	.word	0x20000622
 8005b84:	20000560 	.word	0x20000560
 8005b88:	20000014 	.word	0x20000014
 8005b8c:	20000561 	.word	0x20000561
 8005b90:	20000010 	.word	0x20000010
 8005b94:	20000001 	.word	0x20000001
 8005b98:	2000000c 	.word	0x2000000c
 8005b9c:	20000574 	.word	0x20000574
 8005ba0:	20000024 	.word	0x20000024
 8005ba4:	2000055f 	.word	0x2000055f
 8005ba8:	2000001c 	.word	0x2000001c
 8005bac:	08026688 	.word	0x08026688
 8005bb0:	20000207 	.word	0x20000207

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005bb4:	4bc9      	ldr	r3, [pc, #804]	@ (8005edc <ESP_Upkeep+0x740>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <ESP_Upkeep+0x430>
 8005bbc:	4bc8      	ldr	r3, [pc, #800]	@ (8005ee0 <ESP_Upkeep+0x744>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d003      	beq.n	8005bcc <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005bc4:	4bc7      	ldr	r3, [pc, #796]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005bc6:	220b      	movs	r2, #11
 8005bc8:	701a      	strb	r2, [r3, #0]
        break;
 8005bca:	e269      	b.n	80060a0 <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005bcc:	4bc6      	ldr	r3, [pc, #792]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f00a fdcf 	bl	8010774 <TimestampIsReached>
 8005bd6:	1e03      	subs	r3, r0, #0
 8005bd8:	d100      	bne.n	8005bdc <ESP_Upkeep+0x440>
 8005bda:	e25c      	b.n	8006096 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005bdc:	4bc3      	ldr	r3, [pc, #780]	@ (8005eec <ESP_Upkeep+0x750>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	0018      	movs	r0, r3
 8005be2:	f7ff f99f 	bl	8004f24 <DMA_ProcessBuffer>
 8005be6:	0003      	movs	r3, r0
 8005be8:	001a      	movs	r2, r3
 8005bea:	4bc1      	ldr	r3, [pc, #772]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005bec:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005bee:	4bc0      	ldr	r3, [pc, #768]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	4bbe      	ldr	r3, [pc, #760]	@ (8005eec <ESP_Upkeep+0x750>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	1d7c      	adds	r4, r7, #5
 8005bf8:	0019      	movs	r1, r3
 8005bfa:	0010      	movs	r0, r2
 8005bfc:	f7ff fa92 	bl	8005124 <ATCompare>
 8005c00:	0003      	movs	r3, r0
 8005c02:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005c04:	4bba      	ldr	r3, [pc, #744]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d138      	bne.n	8005c7e <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005c0c:	4bb9      	ldr	r3, [pc, #740]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b0f      	cmp	r3, #15
 8005c12:	d108      	bne.n	8005c26 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005c14:	4bb7      	ldr	r3, [pc, #732]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005c16:	220e      	movs	r2, #14
 8005c18:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c1a:	4bb4      	ldr	r3, [pc, #720]	@ (8005eec <ESP_Upkeep+0x750>)
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005c20:	4bb5      	ldr	r3, [pc, #724]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005c26:	4baf      	ldr	r3, [pc, #700]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005c28:	2204      	movs	r2, #4
 8005c2a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005c2c:	4bb3      	ldr	r3, [pc, #716]	@ (8005efc <ESP_Upkeep+0x760>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	4bb1      	ldr	r3, [pc, #708]	@ (8005efc <ESP_Upkeep+0x760>)
 8005c36:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005c38:	4bb0      	ldr	r3, [pc, #704]	@ (8005efc <ESP_Upkeep+0x760>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d91e      	bls.n	8005c7e <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005c40:	f00b fa3a 	bl	80110b8 <HAL_GetTick>
 8005c44:	0003      	movs	r3, r0
 8005c46:	4aae      	ldr	r2, [pc, #696]	@ (8005f00 <ESP_Upkeep+0x764>)
 8005c48:	189a      	adds	r2, r3, r2
 8005c4a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005c4c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005c4e:	4bad      	ldr	r3, [pc, #692]	@ (8005f04 <ESP_Upkeep+0x768>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005c54:	f7ff fa58 	bl	8005108 <clearDMABuffer>
            stop = HAL_GetTick();
 8005c58:	f00b fa2e 	bl	80110b8 <HAL_GetTick>
 8005c5c:	0002      	movs	r2, r0
 8005c5e:	4baa      	ldr	r3, [pc, #680]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005c60:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005c62:	4ba9      	ldr	r3, [pc, #676]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4ba9      	ldr	r3, [pc, #676]	@ (8005f0c <ESP_Upkeep+0x770>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	4aa8      	ldr	r2, [pc, #672]	@ (8005f10 <ESP_Upkeep+0x774>)
 8005c6e:	49a9      	ldr	r1, [pc, #676]	@ (8005f14 <ESP_Upkeep+0x778>)
 8005c70:	2001      	movs	r0, #1
 8005c72:	f00a fdd5 	bl	8010820 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005c76:	4b9b      	ldr	r3, [pc, #620]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005c78:	220d      	movs	r2, #13
 8005c7a:	701a      	strb	r2, [r3, #0]
            break;
 8005c7c:	e210      	b.n	80060a0 <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d106      	bne.n	8005c94 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005c86:	f00b fa17 	bl	80110b8 <HAL_GetTick>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	330a      	adds	r3, #10
 8005c8e:	001a      	movs	r2, r3
 8005c90:	4b95      	ldr	r3, [pc, #596]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005c92:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005c94:	4b96      	ldr	r3, [pc, #600]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b0a      	cmp	r3, #10
 8005c9a:	d106      	bne.n	8005caa <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005c9c:	f00b fa0c 	bl	80110b8 <HAL_GetTick>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	330a      	adds	r3, #10
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	4b90      	ldr	r3, [pc, #576]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005ca8:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005caa:	4b91      	ldr	r3, [pc, #580]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b06      	cmp	r3, #6
 8005cb0:	d14b      	bne.n	8005d4a <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005cb2:	4b99      	ldr	r3, [pc, #612]	@ (8005f18 <ESP_Upkeep+0x77c>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	4b97      	ldr	r3, [pc, #604]	@ (8005f18 <ESP_Upkeep+0x77c>)
 8005cbc:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005cbe:	4a97      	ldr	r2, [pc, #604]	@ (8005f1c <ESP_Upkeep+0x780>)
 8005cc0:	4b94      	ldr	r3, [pc, #592]	@ (8005f14 <ESP_Upkeep+0x778>)
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	f00a fdab 	bl	8010820 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005cca:	4b93      	ldr	r3, [pc, #588]	@ (8005f18 <ESP_Upkeep+0x77c>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d924      	bls.n	8005d1c <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005cd2:	f00b f9f1 	bl	80110b8 <HAL_GetTick>
 8005cd6:	0003      	movs	r3, r0
 8005cd8:	4a91      	ldr	r2, [pc, #580]	@ (8005f20 <ESP_Upkeep+0x784>)
 8005cda:	189a      	adds	r2, r3, r2
 8005cdc:	4b82      	ldr	r3, [pc, #520]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005cde:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005ce0:	4b88      	ldr	r3, [pc, #544]	@ (8005f04 <ESP_Upkeep+0x768>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005ce6:	f7ff fa0f 	bl	8005108 <clearDMABuffer>
            stop = HAL_GetTick();
 8005cea:	f00b f9e5 	bl	80110b8 <HAL_GetTick>
 8005cee:	0002      	movs	r2, r0
 8005cf0:	4b85      	ldr	r3, [pc, #532]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005cf2:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005cf4:	4b84      	ldr	r3, [pc, #528]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b84      	ldr	r3, [pc, #528]	@ (8005f0c <ESP_Upkeep+0x770>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	4a89      	ldr	r2, [pc, #548]	@ (8005f24 <ESP_Upkeep+0x788>)
 8005d00:	4984      	ldr	r1, [pc, #528]	@ (8005f14 <ESP_Upkeep+0x778>)
 8005d02:	2001      	movs	r0, #1
 8005d04:	f00a fd8c 	bl	8010820 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d08:	4b76      	ldr	r3, [pc, #472]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005d0a:	220d      	movs	r2, #13
 8005d0c:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005d0e:	4b79      	ldr	r3, [pc, #484]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d10:	2214      	movs	r2, #20
 8005d12:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005d14:	4b75      	ldr	r3, [pc, #468]	@ (8005eec <ESP_Upkeep+0x750>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	701a      	strb	r2, [r3, #0]
            break;
 8005d1a:	e1c1      	b.n	80060a0 <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005d1c:	4b75      	ldr	r3, [pc, #468]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b0f      	cmp	r3, #15
 8005d22:	d003      	beq.n	8005d2c <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005d24:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005d26:	2204      	movs	r2, #4
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e00e      	b.n	8005d4a <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005d2c:	4b71      	ldr	r3, [pc, #452]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d2e:	220e      	movs	r2, #14
 8005d30:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005d32:	4b71      	ldr	r3, [pc, #452]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d3c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005d3e:	4b6b      	ldr	r3, [pc, #428]	@ (8005eec <ESP_Upkeep+0x750>)
 8005d40:	2202      	movs	r2, #2
 8005d42:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005d44:	4b67      	ldr	r3, [pc, #412]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005d46:	2204      	movs	r2, #4
 8005d48:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005d4a:	1d7b      	adds	r3, r7, #5
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d100      	bne.n	8005d54 <ESP_Upkeep+0x5b8>
 8005d52:	e1a0      	b.n	8006096 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005d54:	4b63      	ldr	r3, [pc, #396]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005d56:	2205      	movs	r2, #5
 8005d58:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005d5a:	e19c      	b.n	8006096 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005d5c:	4b66      	ldr	r3, [pc, #408]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	4b64      	ldr	r3, [pc, #400]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d66:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005d68:	4b63      	ldr	r3, [pc, #396]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	001a      	movs	r2, r3
 8005d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f28 <ESP_Upkeep+0x78c>)
 8005d70:	5c9a      	ldrb	r2, [r3, r2]
 8005d72:	4b60      	ldr	r3, [pc, #384]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d74:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005d76:	4b5f      	ldr	r3, [pc, #380]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d102      	bne.n	8005d84 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8005eec <ESP_Upkeep+0x750>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005d84:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b0e      	cmp	r3, #14
 8005d8a:	d102      	bne.n	8005d92 <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005d8c:	4b57      	ldr	r3, [pc, #348]	@ (8005eec <ESP_Upkeep+0x750>)
 8005d8e:	2202      	movs	r2, #2
 8005d90:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005d92:	4b58      	ldr	r3, [pc, #352]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b0e      	cmp	r3, #14
 8005d98:	d006      	beq.n	8005da8 <ESP_Upkeep+0x60c>
 8005d9a:	4b56      	ldr	r3, [pc, #344]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d002      	beq.n	8005da8 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005da2:	4b52      	ldr	r3, [pc, #328]	@ (8005eec <ESP_Upkeep+0x750>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005da8:	4b52      	ldr	r3, [pc, #328]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b11      	cmp	r3, #17
 8005dae:	d102      	bne.n	8005db6 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005db0:	4b4e      	ldr	r3, [pc, #312]	@ (8005eec <ESP_Upkeep+0x750>)
 8005db2:	2205      	movs	r2, #5
 8005db4:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005db6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005db8:	2204      	movs	r2, #4
 8005dba:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b14      	cmp	r3, #20
 8005dc2:	d000      	beq.n	8005dc6 <ESP_Upkeep+0x62a>
 8005dc4:	e169      	b.n	800609a <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005dc6:	4b46      	ldr	r3, [pc, #280]	@ (8005ee0 <ESP_Upkeep+0x744>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d124      	bne.n	8005e18 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005dce:	f00b f973 	bl	80110b8 <HAL_GetTick>
 8005dd2:	0003      	movs	r3, r0
 8005dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8005f00 <ESP_Upkeep+0x764>)
 8005dd6:	189a      	adds	r2, r3, r2
 8005dd8:	4b43      	ldr	r3, [pc, #268]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005dda:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005ddc:	f7ff f994 	bl	8005108 <clearDMABuffer>
          stop = HAL_GetTick();
 8005de0:	f00b f96a 	bl	80110b8 <HAL_GetTick>
 8005de4:	0002      	movs	r2, r0
 8005de6:	4b48      	ldr	r3, [pc, #288]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005de8:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005dea:	4b47      	ldr	r3, [pc, #284]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b47      	ldr	r3, [pc, #284]	@ (8005f0c <ESP_Upkeep+0x770>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	4a4d      	ldr	r2, [pc, #308]	@ (8005f2c <ESP_Upkeep+0x790>)
 8005df6:	494e      	ldr	r1, [pc, #312]	@ (8005f30 <ESP_Upkeep+0x794>)
 8005df8:	2002      	movs	r0, #2
 8005dfa:	f00a fd11 	bl	8010820 <CreateLine>
          ResetdBAmax();
 8005dfe:	f004 fec9 	bl	800ab94 <ResetdBAmax>
          resetMaxMeasurementValues();
 8005e02:	f7fd fd9f 	bl	8003944 <resetMaxMeasurementValues>
          showTime();
 8005e06:	f001 f937 	bl	8007078 <showTime>
          ESPTransmitDone = true;
 8005e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f04 <ESP_Upkeep+0x768>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005e10:	4b34      	ldr	r3, [pc, #208]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005e12:	220d      	movs	r2, #13
 8005e14:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005e16:	e140      	b.n	800609a <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005e18:	4b31      	ldr	r3, [pc, #196]	@ (8005ee0 <ESP_Upkeep+0x744>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d12c      	bne.n	8005e7a <ESP_Upkeep+0x6de>
            setTime = false;
 8005e20:	4b44      	ldr	r3, [pc, #272]	@ (8005f34 <ESP_Upkeep+0x798>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005e26:	f00b f947 	bl	80110b8 <HAL_GetTick>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	4a42      	ldr	r2, [pc, #264]	@ (8005f38 <ESP_Upkeep+0x79c>)
 8005e2e:	189a      	adds	r2, r3, r2
 8005e30:	4b42      	ldr	r3, [pc, #264]	@ (8005f3c <ESP_Upkeep+0x7a0>)
 8005e32:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005e34:	4b41      	ldr	r3, [pc, #260]	@ (8005f3c <ESP_Upkeep+0x7a0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a41      	ldr	r2, [pc, #260]	@ (8005f40 <ESP_Upkeep+0x7a4>)
 8005e3a:	493d      	ldr	r1, [pc, #244]	@ (8005f30 <ESP_Upkeep+0x794>)
 8005e3c:	2002      	movs	r0, #2
 8005e3e:	f00a fcef 	bl	8010820 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005e42:	4b40      	ldr	r3, [pc, #256]	@ (8005f44 <ESP_Upkeep+0x7a8>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b28      	ldr	r3, [pc, #160]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005e48:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005e4a:	f7ff f95d 	bl	8005108 <clearDMABuffer>
            stop = HAL_GetTick();
 8005e4e:	f00b f933 	bl	80110b8 <HAL_GetTick>
 8005e52:	0002      	movs	r2, r0
 8005e54:	4b2c      	ldr	r3, [pc, #176]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005e56:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005e58:	4b2b      	ldr	r3, [pc, #172]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005f0c <ESP_Upkeep+0x770>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	4a39      	ldr	r2, [pc, #228]	@ (8005f48 <ESP_Upkeep+0x7ac>)
 8005e64:	4932      	ldr	r1, [pc, #200]	@ (8005f30 <ESP_Upkeep+0x794>)
 8005e66:	2002      	movs	r0, #2
 8005e68:	f00a fcda 	bl	8010820 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005e6e:	220d      	movs	r2, #13
 8005e70:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005e72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee0 <ESP_Upkeep+0x744>)
 8005e74:	2202      	movs	r2, #2
 8005e76:	701a      	strb	r2, [r3, #0]
    break;
 8005e78:	e10f      	b.n	800609a <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005e7c:	2209      	movs	r2, #9
 8005e7e:	701a      	strb	r2, [r3, #0]
    break;
 8005e80:	e10b      	b.n	800609a <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005e82:	4b32      	ldr	r3, [pc, #200]	@ (8005f4c <ESP_Upkeep+0x7b0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005e88:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <ESP_Upkeep+0x7b4>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f00c fba3 	bl	80125da <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005e94:	2001      	movs	r0, #1
 8005e96:	f00b f919 	bl	80110cc <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005e9a:	2380      	movs	r3, #128	@ 0x80
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	482d      	ldr	r0, [pc, #180]	@ (8005f54 <ESP_Upkeep+0x7b8>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	f00c fb99 	bl	80125da <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	f00b f90f 	bl	80110cc <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005eae:	4b28      	ldr	r3, [pc, #160]	@ (8005f50 <ESP_Upkeep+0x7b4>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f00c fb90 	bl	80125da <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005eba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005ebc:	2209      	movs	r2, #9
 8005ebe:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005ec0:	f004 fdba 	bl	800aa38 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	f00b f901 	bl	80110cc <HAL_Delay>
      ResetESPIndicator();
 8005eca:	f009 fba3 	bl	800f614 <ResetESPIndicator>
      errorcntr = 0;
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <ESP_Upkeep+0x760>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005ed4:	4b10      	ldr	r3, [pc, #64]	@ (8005f18 <ESP_Upkeep+0x77c>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
      break;
 8005eda:	e0e1      	b.n	80060a0 <ESP_Upkeep+0x904>
 8005edc:	2000055f 	.word	0x2000055f
 8005ee0:	20000633 	.word	0x20000633
 8005ee4:	2000002c 	.word	0x2000002c
 8005ee8:	20000628 	.word	0x20000628
 8005eec:	20000631 	.word	0x20000631
 8005ef0:	2000002f 	.word	0x2000002f
 8005ef4:	20000632 	.word	0x20000632
 8005ef8:	20000622 	.word	0x20000622
 8005efc:	20000623 	.word	0x20000623
 8005f00:	0003a980 	.word	0x0003a980
 8005f04:	20000564 	.word	0x20000564
 8005f08:	20000578 	.word	0x20000578
 8005f0c:	20000574 	.word	0x20000574
 8005f10:	080266b8 	.word	0x080266b8
 8005f14:	08025a74 	.word	0x08025a74
 8005f18:	20000624 	.word	0x20000624
 8005f1c:	080266ec 	.word	0x080266ec
 8005f20:	0000c350 	.word	0x0000c350
 8005f24:	08026728 	.word	0x08026728
 8005f28:	20000618 	.word	0x20000618
 8005f2c:	08026758 	.word	0x08026758
 8005f30:	08026770 	.word	0x08026770
 8005f34:	20000001 	.word	0x20000001
 8005f38:	047e7c4f 	.word	0x047e7c4f
 8005f3c:	2000062c 	.word	0x2000062c
 8005f40:	08026774 	.word	0x08026774
 8005f44:	20000028 	.word	0x20000028
 8005f48:	080267b8 	.word	0x080267b8
 8005f4c:	2000055c 	.word	0x2000055c
 8005f50:	50001c00 	.word	0x50001c00
 8005f54:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005f58:	4b54      	ldr	r3, [pc, #336]	@ (80060ac <ESP_Upkeep+0x910>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f00a fc09 	bl	8010774 <TimestampIsReached>
 8005f62:	1e03      	subs	r3, r0, #0
 8005f64:	d103      	bne.n	8005f6e <ESP_Upkeep+0x7d2>
 8005f66:	4b52      	ldr	r3, [pc, #328]	@ (80060b0 <ESP_Upkeep+0x914>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d043      	beq.n	8005ff6 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005f6e:	4b51      	ldr	r3, [pc, #324]	@ (80060b4 <ESP_Upkeep+0x918>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005f74:	4b50      	ldr	r3, [pc, #320]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80060bc <ESP_Upkeep+0x920>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005f82:	4b4f      	ldr	r3, [pc, #316]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005f84:	220b      	movs	r2, #11
 8005f86:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005f88:	4b4b      	ldr	r3, [pc, #300]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d108      	bne.n	8005fa2 <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005f90:	4b4c      	ldr	r3, [pc, #304]	@ (80060c4 <ESP_Upkeep+0x928>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005f96:	4b4c      	ldr	r3, [pc, #304]	@ (80060c8 <ESP_Upkeep+0x92c>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005f9c:	4b48      	ldr	r3, [pc, #288]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005f9e:	220b      	movs	r2, #11
 8005fa0:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005fa2:	4b45      	ldr	r3, [pc, #276]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d102      	bne.n	8005fb0 <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005faa:	4b45      	ldr	r3, [pc, #276]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005fac:	2202      	movs	r2, #2
 8005fae:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005fb0:	4b41      	ldr	r3, [pc, #260]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d108      	bne.n	8005fca <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005fb8:	4b41      	ldr	r3, [pc, #260]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005fba:	220e      	movs	r2, #14
 8005fbc:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005fbe:	4a43      	ldr	r2, [pc, #268]	@ (80060cc <ESP_Upkeep+0x930>)
 8005fc0:	4b43      	ldr	r3, [pc, #268]	@ (80060d0 <ESP_Upkeep+0x934>)
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	2002      	movs	r0, #2
 8005fc6:	f00a fc2b 	bl	8010820 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005fca:	4b3b      	ldr	r3, [pc, #236]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d105      	bne.n	8005fde <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005fd4:	220b      	movs	r2, #11
 8005fd6:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80060d4 <ESP_Upkeep+0x938>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005fde:	4b34      	ldr	r3, [pc, #208]	@ (80060b0 <ESP_Upkeep+0x914>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d020      	beq.n	8006028 <ESP_Upkeep+0x88c>
 8005fe6:	4b34      	ldr	r3, [pc, #208]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d01c      	beq.n	8006028 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005fee:	4b34      	ldr	r3, [pc, #208]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ff4:	e018      	b.n	8006028 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005ff6:	4b38      	ldr	r3, [pc, #224]	@ (80060d8 <ESP_Upkeep+0x93c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f00a fbba 	bl	8010774 <TimestampIsReached>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d04c      	beq.n	800609e <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8006004:	4b2c      	ldr	r3, [pc, #176]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d148      	bne.n	800609e <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 800600c:	4b2a      	ldr	r3, [pc, #168]	@ (80060b8 <ESP_Upkeep+0x91c>)
 800600e:	2205      	movs	r2, #5
 8006010:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8006012:	4b2b      	ldr	r3, [pc, #172]	@ (80060c0 <ESP_Upkeep+0x924>)
 8006014:	2202      	movs	r2, #2
 8006016:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8006018:	4b24      	ldr	r3, [pc, #144]	@ (80060ac <ESP_Upkeep+0x910>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b2f      	ldr	r3, [pc, #188]	@ (80060dc <ESP_Upkeep+0x940>)
 800601e:	601a      	str	r2, [r3, #0]
           setTime = true;
 8006020:	4b2f      	ldr	r3, [pc, #188]	@ (80060e0 <ESP_Upkeep+0x944>)
 8006022:	2201      	movs	r2, #1
 8006024:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006026:	e03a      	b.n	800609e <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006028:	46c0      	nop			@ (mov r8, r8)
      break;
 800602a:	e038      	b.n	800609e <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 800602c:	4b2d      	ldr	r3, [pc, #180]	@ (80060e4 <ESP_Upkeep+0x948>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2201      	movs	r2, #1
 8006032:	4053      	eors	r3, r2
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 800603a:	4a24      	ldr	r2, [pc, #144]	@ (80060cc <ESP_Upkeep+0x930>)
 800603c:	4b24      	ldr	r3, [pc, #144]	@ (80060d0 <ESP_Upkeep+0x934>)
 800603e:	0019      	movs	r1, r3
 8006040:	2002      	movs	r0, #2
 8006042:	f00a fbed 	bl	8010820 <CreateLine>
        msgdone = true;
 8006046:	4b27      	ldr	r3, [pc, #156]	@ (80060e4 <ESP_Upkeep+0x948>)
 8006048:	2201      	movs	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 800604c:	f019 fb0c 	bl	801f668 <GetUsbRxPointer>
 8006050:	0003      	movs	r3, r0
 8006052:	0018      	movs	r0, r3
 8006054:	f000 f94a 	bl	80062ec <Process_PC_Config>
      break;
 8006058:	e022      	b.n	80060a0 <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 800605a:	4a23      	ldr	r2, [pc, #140]	@ (80060e8 <ESP_Upkeep+0x94c>)
 800605c:	4b23      	ldr	r3, [pc, #140]	@ (80060ec <ESP_Upkeep+0x950>)
 800605e:	0019      	movs	r1, r3
 8006060:	2001      	movs	r0, #1
 8006062:	f00a fbdd 	bl	8010820 <CreateLine>
      EspState = ESP_STATE_INIT;
 8006066:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <ESP_Upkeep+0x924>)
 8006068:	2202      	movs	r2, #2
 800606a:	701a      	strb	r2, [r3, #0]
      break;
 800606c:	e018      	b.n	80060a0 <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 800606e:	4a20      	ldr	r2, [pc, #128]	@ (80060f0 <ESP_Upkeep+0x954>)
 8006070:	4b1e      	ldr	r3, [pc, #120]	@ (80060ec <ESP_Upkeep+0x950>)
 8006072:	0019      	movs	r1, r3
 8006074:	2001      	movs	r0, #1
 8006076:	f00a fbd3 	bl	8010820 <CreateLine>
      EspState = ESP_STATE_ERROR;
 800607a:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <ESP_Upkeep+0x924>)
 800607c:	2207      	movs	r2, #7
 800607e:	701a      	strb	r2, [r3, #0]
      break;
 8006080:	e00e      	b.n	80060a0 <ESP_Upkeep+0x904>
      break;
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	e00c      	b.n	80060a0 <ESP_Upkeep+0x904>
      break;
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	e00a      	b.n	80060a0 <ESP_Upkeep+0x904>
        break;
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	e008      	b.n	80060a0 <ESP_Upkeep+0x904>
    break;
 800608e:	46c0      	nop			@ (mov r8, r8)
 8006090:	e006      	b.n	80060a0 <ESP_Upkeep+0x904>
    break;
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	e004      	b.n	80060a0 <ESP_Upkeep+0x904>
      break;
 8006096:	46c0      	nop			@ (mov r8, r8)
 8006098:	e002      	b.n	80060a0 <ESP_Upkeep+0x904>
    break;
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	e000      	b.n	80060a0 <ESP_Upkeep+0x904>
      break;
 800609e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80060a0:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <ESP_Upkeep+0x924>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
}
 80060a4:	0018      	movs	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b002      	add	sp, #8
 80060aa:	bdb0      	pop	{r4, r5, r7, pc}
 80060ac:	20000628 	.word	0x20000628
 80060b0:	2000055f 	.word	0x2000055f
 80060b4:	20000564 	.word	0x20000564
 80060b8:	20000633 	.word	0x20000633
 80060bc:	2000055d 	.word	0x2000055d
 80060c0:	2000002c 	.word	0x2000002c
 80060c4:	20000560 	.word	0x20000560
 80060c8:	20000562 	.word	0x20000562
 80060cc:	080267d8 	.word	0x080267d8
 80060d0:	08026770 	.word	0x08026770
 80060d4:	20000561 	.word	0x20000561
 80060d8:	2000062c 	.word	0x2000062c
 80060dc:	20000028 	.word	0x20000028
 80060e0:	20000001 	.word	0x20000001
 80060e4:	20000563 	.word	0x20000563
 80060e8:	080267f0 	.word	0x080267f0
 80060ec:	08025a74 	.word	0x08025a74
 80060f0:	08026804 	.word	0x08026804

080060f4 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80060fc:	4b0f      	ldr	r3, [pc, #60]	@ (800613c <I2CSensors_Init+0x48>)
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8006102:	4a0f      	ldr	r2, [pc, #60]	@ (8006140 <I2CSensors_Init+0x4c>)
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <I2CSensors_Init+0x50>)
 8006106:	0011      	movs	r1, r2
 8006108:	0018      	movs	r0, r3
 800610a:	f00a fced 	bl	8010ae8 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 800610e:	4a0c      	ldr	r2, [pc, #48]	@ (8006140 <I2CSensors_Init+0x4c>)
 8006110:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <I2CSensors_Init+0x50>)
 8006112:	0011      	movs	r1, r2
 8006114:	0018      	movs	r0, r3
 8006116:	f007 fc55 	bl	800d9c4 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C);
 800611a:	4a09      	ldr	r2, [pc, #36]	@ (8006140 <I2CSensors_Init+0x4c>)
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <I2CSensors_Init+0x50>)
 800611e:	0011      	movs	r1, r2
 8006120:	0018      	movs	r0, r3
 8006122:	f001 ff01 	bl	8007f28 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8006126:	4a08      	ldr	r2, [pc, #32]	@ (8006148 <I2CSensors_Init+0x54>)
 8006128:	4b08      	ldr	r3, [pc, #32]	@ (800614c <I2CSensors_Init+0x58>)
 800612a:	0011      	movs	r1, r2
 800612c:	0018      	movs	r0, r3
 800612e:	f002 fc67 	bl	8008a00 <BMP_Init>
}
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	46bd      	mov	sp, r7
 8006136:	b002      	add	sp, #8
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	20000790 	.word	0x20000790
 8006140:	080061a5 	.word	0x080061a5
 8006144:	08006151 	.word	0x08006151
 8006148:	08006275 	.word	0x08006275
 800614c:	080061f9 	.word	0x080061f9

08006150 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006150:	b5b0      	push	{r4, r5, r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6039      	str	r1, [r7, #0]
 8006158:	0011      	movs	r1, r2
 800615a:	1dfb      	adds	r3, r7, #7
 800615c:	1c02      	adds	r2, r0, #0
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	1dbb      	adds	r3, r7, #6
 8006162:	1c0a      	adds	r2, r1, #0
 8006164:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006166:	4b0e      	ldr	r3, [pc, #56]	@ (80061a0 <ReadI2C+0x50>)
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	1dfb      	adds	r3, r7, #7
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	18db      	adds	r3, r3, r3
 8006172:	b299      	uxth	r1, r3
 8006174:	1dbb      	adds	r3, r7, #6
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	250f      	movs	r5, #15
 800617c:	197c      	adds	r4, r7, r5
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	f00c fe10 	bl	8012da4 <HAL_I2C_Master_Receive_DMA>
 8006184:	0003      	movs	r3, r0
 8006186:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006188:	197b      	adds	r3, r7, r5
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <ReadI2C+0x44>
        return false;
 8006190:	2300      	movs	r3, #0
 8006192:	e000      	b.n	8006196 <ReadI2C+0x46>
    }
    return true;
 8006194:	2301      	movs	r3, #1
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b004      	add	sp, #16
 800619c:	bdb0      	pop	{r4, r5, r7, pc}
 800619e:	46c0      	nop			@ (mov r8, r8)
 80061a0:	20000790 	.word	0x20000790

080061a4 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6039      	str	r1, [r7, #0]
 80061ac:	0011      	movs	r1, r2
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	1c02      	adds	r2, r0, #0
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	1dbb      	adds	r3, r7, #6
 80061b6:	1c0a      	adds	r2, r1, #0
 80061b8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80061ba:	4b0e      	ldr	r3, [pc, #56]	@ (80061f4 <WriteI2C+0x50>)
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	1dfb      	adds	r3, r7, #7
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	18db      	adds	r3, r3, r3
 80061c6:	b299      	uxth	r1, r3
 80061c8:	1dbb      	adds	r3, r7, #6
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	250f      	movs	r5, #15
 80061d0:	197c      	adds	r4, r7, r5
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	f00c fce0 	bl	8012b98 <HAL_I2C_Master_Transmit_DMA>
 80061d8:	0003      	movs	r3, r0
 80061da:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80061dc:	197b      	adds	r3, r7, r5
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <WriteI2C+0x44>
        return false;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <WriteI2C+0x46>
    }
    return true;
 80061e8:	2301      	movs	r3, #1
}
 80061ea:	0018      	movs	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bdb0      	pop	{r4, r5, r7, pc}
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	20000790 	.word	0x20000790

080061f8 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80061f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061fa:	b08b      	sub	sp, #44	@ 0x2c
 80061fc:	af04      	add	r7, sp, #16
 80061fe:	0004      	movs	r4, r0
 8006200:	0008      	movs	r0, r1
 8006202:	0011      	movs	r1, r2
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	250f      	movs	r5, #15
 8006208:	197b      	adds	r3, r7, r5
 800620a:	1c22      	adds	r2, r4, #0
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	260c      	movs	r6, #12
 8006210:	19bb      	adds	r3, r7, r6
 8006212:	1c02      	adds	r2, r0, #0
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	230a      	movs	r3, #10
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	1c0a      	adds	r2, r1, #0
 800621c:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 800621e:	4b14      	ldr	r3, [pc, #80]	@ (8006270 <ReadI2CMem+0x78>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	197b      	adds	r3, r7, r5
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	18db      	adds	r3, r3, r3
 800622a:	b299      	uxth	r1, r3
 800622c:	2217      	movs	r2, #23
 800622e:	18bc      	adds	r4, r7, r2
 8006230:	230a      	movs	r3, #10
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	881d      	ldrh	r5, [r3, #0]
 8006236:	19bb      	adds	r3, r7, r6
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	2364      	movs	r3, #100	@ 0x64
 800623c:	9302      	str	r3, [sp, #8]
 800623e:	2328      	movs	r3, #40	@ 0x28
 8006240:	2608      	movs	r6, #8
 8006242:	199b      	adds	r3, r3, r6
 8006244:	19db      	adds	r3, r3, r7
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	002b      	movs	r3, r5
 8006250:	f00c feae 	bl	8012fb0 <HAL_I2C_Mem_Read>
 8006254:	0003      	movs	r3, r0
 8006256:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8006258:	2217      	movs	r2, #23
 800625a:	18bb      	adds	r3, r7, r2
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <ReadI2CMem+0x6e>
     return false;
 8006262:	2300      	movs	r3, #0
 8006264:	e000      	b.n	8006268 <ReadI2CMem+0x70>
   }
   return true;
 8006266:	2301      	movs	r3, #1
}
 8006268:	0018      	movs	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	b007      	add	sp, #28
 800626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006270:	20000790 	.word	0x20000790

08006274 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8006274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006276:	b089      	sub	sp, #36	@ 0x24
 8006278:	af02      	add	r7, sp, #8
 800627a:	0004      	movs	r4, r0
 800627c:	0008      	movs	r0, r1
 800627e:	0011      	movs	r1, r2
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	250f      	movs	r5, #15
 8006284:	197b      	adds	r3, r7, r5
 8006286:	1c22      	adds	r2, r4, #0
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	260c      	movs	r6, #12
 800628c:	19bb      	adds	r3, r7, r6
 800628e:	1c02      	adds	r2, r0, #0
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	230a      	movs	r3, #10
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	1c0a      	adds	r2, r1, #0
 8006298:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 800629a:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <WriteI2CMem+0x74>)
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	197b      	adds	r3, r7, r5
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	18db      	adds	r3, r3, r3
 80062a6:	b299      	uxth	r1, r3
 80062a8:	2217      	movs	r2, #23
 80062aa:	18bc      	adds	r4, r7, r2
 80062ac:	230a      	movs	r3, #10
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	881d      	ldrh	r5, [r3, #0]
 80062b2:	19bb      	adds	r3, r7, r6
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	2328      	movs	r3, #40	@ 0x28
 80062b8:	2608      	movs	r6, #8
 80062ba:	199b      	adds	r3, r3, r6
 80062bc:	19db      	adds	r3, r3, r7
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	002b      	movs	r3, r5
 80062c8:	f00c ffa6 	bl	8013218 <HAL_I2C_Mem_Write_DMA>
 80062cc:	0003      	movs	r3, r0
 80062ce:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80062d0:	2217      	movs	r2, #23
 80062d2:	18bb      	adds	r3, r7, r2
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <WriteI2CMem+0x6a>
     return false;
 80062da:	2300      	movs	r3, #0
 80062dc:	e000      	b.n	80062e0 <WriteI2CMem+0x6c>
   }
   return true;
 80062de:	2301      	movs	r3, #1
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b007      	add	sp, #28
 80062e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e8:	20000790 	.word	0x20000790

080062ec <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b0c3      	sub	sp, #268	@ 0x10c
 80062f0:	af3e      	add	r7, sp, #248	@ 0xf8
 80062f2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80062f4:	f019 f9d8 	bl	801f6a8 <GetUsbRxDataSize>
 80062f8:	0003      	movs	r3, r0
 80062fa:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d971      	bls.n	80063e6 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2123      	movs	r1, #35	@ 0x23
 8006306:	0018      	movs	r0, r3
 8006308:	f01c fbf0 	bl	8022aec <strchr>
 800630c:	0003      	movs	r3, r0
 800630e:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d065      	beq.n	80063e2 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	785a      	ldrb	r2, [r3, #1]
 800631a:	4b34      	ldr	r3, [pc, #208]	@ (80063ec <Process_PC_Config+0x100>)
 800631c:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	789a      	ldrb	r2, [r3, #2]
 8006322:	4b32      	ldr	r3, [pc, #200]	@ (80063ec <Process_PC_Config+0x100>)
 8006324:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8006326:	4b31      	ldr	r3, [pc, #196]	@ (80063ec <Process_PC_Config+0x100>)
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	3305      	adds	r3, #5
 800632c:	001a      	movs	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4293      	cmp	r3, r2
 8006332:	d351      	bcc.n	80063d8 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	1cd9      	adds	r1, r3, #3
 8006338:	4b2c      	ldr	r3, [pc, #176]	@ (80063ec <Process_PC_Config+0x100>)
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	001a      	movs	r2, r3
 800633e:	4b2c      	ldr	r3, [pc, #176]	@ (80063f0 <Process_PC_Config+0x104>)
 8006340:	0018      	movs	r0, r3
 8006342:	f01c fca7 	bl	8022c94 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8006346:	4b29      	ldr	r3, [pc, #164]	@ (80063ec <Process_PC_Config+0x100>)
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	3303      	adds	r3, #3
 800634c:	001a      	movs	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	189b      	adds	r3, r3, r2
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	b21a      	sxth	r2, r3
 8006358:	4b24      	ldr	r3, [pc, #144]	@ (80063ec <Process_PC_Config+0x100>)
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	3304      	adds	r3, #4
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	18cb      	adds	r3, r1, r3
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	b21b      	sxth	r3, r3
 8006366:	4313      	orrs	r3, r2
 8006368:	b21b      	sxth	r3, r3
 800636a:	b299      	uxth	r1, r3
 800636c:	4a1f      	ldr	r2, [pc, #124]	@ (80063ec <Process_PC_Config+0x100>)
 800636e:	2381      	movs	r3, #129	@ 0x81
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8006374:	4a1d      	ldr	r2, [pc, #116]	@ (80063ec <Process_PC_Config+0x100>)
 8006376:	2381      	movs	r3, #129	@ 0x81
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	5ad4      	ldrh	r4, [r2, r3]
 800637c:	4b1b      	ldr	r3, [pc, #108]	@ (80063ec <Process_PC_Config+0x100>)
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	3303      	adds	r3, #3
 8006382:	b29a      	uxth	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	0011      	movs	r1, r2
 8006388:	0018      	movs	r0, r3
 800638a:	f000 f975 	bl	8006678 <CRC16_ARC>
 800638e:	0003      	movs	r3, r0
 8006390:	429c      	cmp	r4, r3
 8006392:	d007      	beq.n	80063a4 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8006394:	4b15      	ldr	r3, [pc, #84]	@ (80063ec <Process_PC_Config+0x100>)
 8006396:	785a      	ldrb	r2, [r3, #1]
 8006398:	4b15      	ldr	r3, [pc, #84]	@ (80063f0 <Process_PC_Config+0x104>)
 800639a:	0019      	movs	r1, r3
 800639c:	2001      	movs	r0, #1
 800639e:	f000 f919 	bl	80065d4 <Create_Message>
 80063a2:	e016      	b.n	80063d2 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80063a4:	4c11      	ldr	r4, [pc, #68]	@ (80063ec <Process_PC_Config+0x100>)
 80063a6:	466b      	mov	r3, sp
 80063a8:	0018      	movs	r0, r3
 80063aa:	0023      	movs	r3, r4
 80063ac:	3310      	adds	r3, #16
 80063ae:	22f4      	movs	r2, #244	@ 0xf4
 80063b0:	0019      	movs	r1, r3
 80063b2:	f01c fc6f 	bl	8022c94 <memcpy>
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	6861      	ldr	r1, [r4, #4]
 80063ba:	68a2      	ldr	r2, [r4, #8]
 80063bc:	68e3      	ldr	r3, [r4, #12]
 80063be:	f000 f819 	bl	80063f4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <Process_PC_Config+0x100>)
 80063c4:	7818      	ldrb	r0, [r3, #0]
 80063c6:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <Process_PC_Config+0x100>)
 80063c8:	785a      	ldrb	r2, [r3, #1]
 80063ca:	4b09      	ldr	r3, [pc, #36]	@ (80063f0 <Process_PC_Config+0x104>)
 80063cc:	0019      	movs	r1, r3
 80063ce:	f000 f901 	bl	80065d4 <Create_Message>
                }
                ResetUsbRxDataSize();
 80063d2:	f019 f951 	bl	801f678 <ResetUsbRxDataSize>
                return;
 80063d6:	e006      	b.n	80063e6 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	0018      	movs	r0, r3
 80063dc:	f019 f96e 	bl	801f6bc <GetUsbRxNextChunk>
 80063e0:	e001      	b.n	80063e6 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80063e2:	f019 f949 	bl	801f678 <ResetUsbRxDataSize>
        }
    }
}
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b005      	add	sp, #20
 80063ea:	bd90      	pop	{r4, r7, pc}
 80063ec:	20000794 	.word	0x20000794
 80063f0:	20000796 	.word	0x20000796

080063f4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80063f4:	b084      	sub	sp, #16
 80063f6:	b5b0      	push	{r4, r5, r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	2518      	movs	r5, #24
 80063fe:	197c      	adds	r4, r7, r5
 8006400:	6020      	str	r0, [r4, #0]
 8006402:	6061      	str	r1, [r4, #4]
 8006404:	60a2      	str	r2, [r4, #8]
 8006406:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006408:	197b      	adds	r3, r7, r5
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2bfe      	cmp	r3, #254	@ 0xfe
 800640e:	d100      	bne.n	8006412 <ProcessCmd+0x1e>
 8006410:	e09c      	b.n	800654c <ProcessCmd+0x158>
 8006412:	dd00      	ble.n	8006416 <ProcessCmd+0x22>
 8006414:	e0bc      	b.n	8006590 <ProcessCmd+0x19c>
 8006416:	2b0c      	cmp	r3, #12
 8006418:	dc0a      	bgt.n	8006430 <ProcessCmd+0x3c>
 800641a:	2b00      	cmp	r3, #0
 800641c:	da00      	bge.n	8006420 <ProcessCmd+0x2c>
 800641e:	e0b7      	b.n	8006590 <ProcessCmd+0x19c>
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d900      	bls.n	8006426 <ProcessCmd+0x32>
 8006424:	e0b4      	b.n	8006590 <ProcessCmd+0x19c>
 8006426:	009a      	lsls	r2, r3, #2
 8006428:	4b5d      	ldr	r3, [pc, #372]	@ (80065a0 <ProcessCmd+0x1ac>)
 800642a:	18d3      	adds	r3, r2, r3
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	469f      	mov	pc, r3
 8006430:	2bfd      	cmp	r3, #253	@ 0xfd
 8006432:	d100      	bne.n	8006436 <ProcessCmd+0x42>
 8006434:	e084      	b.n	8006540 <ProcessCmd+0x14c>
            }
            break;
        }
    }

}
 8006436:	e0ab      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006438:	2118      	movs	r1, #24
 800643a:	187b      	adds	r3, r7, r1
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	001a      	movs	r2, r3
 8006440:	187b      	adds	r3, r7, r1
 8006442:	1c99      	adds	r1, r3, #2
 8006444:	4857      	ldr	r0, [pc, #348]	@ (80065a4 <ProcessCmd+0x1b0>)
 8006446:	230c      	movs	r3, #12
 8006448:	f002 fec8 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 800644c:	e0a0      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800644e:	2118      	movs	r1, #24
 8006450:	187b      	adds	r3, r7, r1
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	001a      	movs	r2, r3
 8006456:	187b      	adds	r3, r7, r1
 8006458:	1c99      	adds	r1, r3, #2
 800645a:	4853      	ldr	r0, [pc, #332]	@ (80065a8 <ProcessCmd+0x1b4>)
 800645c:	230c      	movs	r3, #12
 800645e:	f002 febd 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 8006462:	e095      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006464:	2118      	movs	r1, #24
 8006466:	187b      	adds	r3, r7, r1
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	001a      	movs	r2, r3
 800646c:	187b      	adds	r3, r7, r1
 800646e:	1c99      	adds	r1, r3, #2
 8006470:	484e      	ldr	r0, [pc, #312]	@ (80065ac <ProcessCmd+0x1b8>)
 8006472:	230c      	movs	r3, #12
 8006474:	f002 feb2 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 8006478:	e08a      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800647a:	2118      	movs	r1, #24
 800647c:	187b      	adds	r3, r7, r1
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	001a      	movs	r2, r3
 8006482:	187b      	adds	r3, r7, r1
 8006484:	1c99      	adds	r1, r3, #2
 8006486:	484a      	ldr	r0, [pc, #296]	@ (80065b0 <ProcessCmd+0x1bc>)
 8006488:	230c      	movs	r3, #12
 800648a:	f002 fea7 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 800648e:	e07f      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006490:	2118      	movs	r1, #24
 8006492:	187b      	adds	r3, r7, r1
 8006494:	785b      	ldrb	r3, [r3, #1]
 8006496:	001a      	movs	r2, r3
 8006498:	187b      	adds	r3, r7, r1
 800649a:	1c99      	adds	r1, r3, #2
 800649c:	4845      	ldr	r0, [pc, #276]	@ (80065b4 <ProcessCmd+0x1c0>)
 800649e:	230c      	movs	r3, #12
 80064a0:	f002 fe9c 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 80064a4:	e074      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064a6:	2118      	movs	r1, #24
 80064a8:	187b      	adds	r3, r7, r1
 80064aa:	785b      	ldrb	r3, [r3, #1]
 80064ac:	001a      	movs	r2, r3
 80064ae:	187b      	adds	r3, r7, r1
 80064b0:	1c99      	adds	r1, r3, #2
 80064b2:	4841      	ldr	r0, [pc, #260]	@ (80065b8 <ProcessCmd+0x1c4>)
 80064b4:	230c      	movs	r3, #12
 80064b6:	f002 fe91 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 80064ba:	e069      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064bc:	2118      	movs	r1, #24
 80064be:	187b      	adds	r3, r7, r1
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	001a      	movs	r2, r3
 80064c4:	187b      	adds	r3, r7, r1
 80064c6:	1c99      	adds	r1, r3, #2
 80064c8:	483c      	ldr	r0, [pc, #240]	@ (80065bc <ProcessCmd+0x1c8>)
 80064ca:	230c      	movs	r3, #12
 80064cc:	f002 fe86 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 80064d0:	e05e      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80064d2:	2118      	movs	r1, #24
 80064d4:	187b      	adds	r3, r7, r1
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	001a      	movs	r2, r3
 80064da:	187b      	adds	r3, r7, r1
 80064dc:	1c99      	adds	r1, r3, #2
 80064de:	4838      	ldr	r0, [pc, #224]	@ (80065c0 <ProcessCmd+0x1cc>)
 80064e0:	2320      	movs	r3, #32
 80064e2:	f002 fe7b 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 80064e6:	e053      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064e8:	2118      	movs	r1, #24
 80064ea:	187b      	adds	r3, r7, r1
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	001a      	movs	r2, r3
 80064f0:	187b      	adds	r3, r7, r1
 80064f2:	1c99      	adds	r1, r3, #2
 80064f4:	4833      	ldr	r0, [pc, #204]	@ (80065c4 <ProcessCmd+0x1d0>)
 80064f6:	230c      	movs	r3, #12
 80064f8:	f002 fe70 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 80064fc:	e048      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064fe:	2118      	movs	r1, #24
 8006500:	187b      	adds	r3, r7, r1
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	001a      	movs	r2, r3
 8006506:	187b      	adds	r3, r7, r1
 8006508:	1c99      	adds	r1, r3, #2
 800650a:	482f      	ldr	r0, [pc, #188]	@ (80065c8 <ProcessCmd+0x1d4>)
 800650c:	230c      	movs	r3, #12
 800650e:	f002 fe65 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 8006512:	e03d      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006514:	2118      	movs	r1, #24
 8006516:	187b      	adds	r3, r7, r1
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	001a      	movs	r2, r3
 800651c:	187b      	adds	r3, r7, r1
 800651e:	1c99      	adds	r1, r3, #2
 8006520:	482a      	ldr	r0, [pc, #168]	@ (80065cc <ProcessCmd+0x1d8>)
 8006522:	230c      	movs	r3, #12
 8006524:	f002 fe5a 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 8006528:	e032      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800652a:	2118      	movs	r1, #24
 800652c:	187b      	adds	r3, r7, r1
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	001a      	movs	r2, r3
 8006532:	187b      	adds	r3, r7, r1
 8006534:	1c99      	adds	r1, r3, #2
 8006536:	4826      	ldr	r0, [pc, #152]	@ (80065d0 <ProcessCmd+0x1dc>)
 8006538:	230c      	movs	r3, #12
 800653a:	f002 fe4f 	bl	80091dc <WriteUint8ArrayEepromSafe>
        break;
 800653e:	e027      	b.n	8006590 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006540:	4b18      	ldr	r3, [pc, #96]	@ (80065a4 <ProcessCmd+0x1b0>)
 8006542:	21f8      	movs	r1, #248	@ 0xf8
 8006544:	0018      	movs	r0, r3
 8006546:	f002 fe8e 	bl	8009266 <ClearEEprom>
        break;
 800654a:	e021      	b.n	8006590 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800654c:	2118      	movs	r1, #24
 800654e:	187b      	adds	r3, r7, r1
 8006550:	789b      	ldrb	r3, [r3, #2]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	b21a      	sxth	r2, r3
 8006556:	187b      	adds	r3, r7, r1
 8006558:	78db      	ldrb	r3, [r3, #3]
 800655a:	b21b      	sxth	r3, r3
 800655c:	4313      	orrs	r3, r2
 800655e:	b21a      	sxth	r2, r3
 8006560:	1dbb      	adds	r3, r7, #6
 8006562:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006564:	1dbb      	adds	r3, r7, #6
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	23c0      	movs	r3, #192	@ 0xc0
 800656a:	015b      	lsls	r3, r3, #5
 800656c:	429a      	cmp	r2, r3
 800656e:	d207      	bcs.n	8006580 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006570:	1dbb      	adds	r3, r7, #6
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	4a0b      	ldr	r2, [pc, #44]	@ (80065a4 <ProcessCmd+0x1b0>)
 8006576:	0019      	movs	r1, r3
 8006578:	0010      	movs	r0, r2
 800657a:	f002 fe74 	bl	8009266 <ClearEEprom>
            break;
 800657e:	e006      	b.n	800658e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006580:	23c0      	movs	r3, #192	@ 0xc0
 8006582:	015b      	lsls	r3, r3, #5
 8006584:	4a07      	ldr	r2, [pc, #28]	@ (80065a4 <ProcessCmd+0x1b0>)
 8006586:	0019      	movs	r1, r3
 8006588:	0010      	movs	r0, r2
 800658a:	f002 fe6c 	bl	8009266 <ClearEEprom>
            break;
 800658e:	46c0      	nop			@ (mov r8, r8)
}
 8006590:	46c0      	nop			@ (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bcb0      	pop	{r4, r5, r7}
 8006598:	bc08      	pop	{r3}
 800659a:	b004      	add	sp, #16
 800659c:	4718      	bx	r3
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	08028ccc 	.word	0x08028ccc
 80065a4:	08080000 	.word	0x08080000
 80065a8:	0808000c 	.word	0x0808000c
 80065ac:	08080018 	.word	0x08080018
 80065b0:	08080024 	.word	0x08080024
 80065b4:	08080030 	.word	0x08080030
 80065b8:	0808003c 	.word	0x0808003c
 80065bc:	08080048 	.word	0x08080048
 80065c0:	08080090 	.word	0x08080090
 80065c4:	08080078 	.word	0x08080078
 80065c8:	0808006c 	.word	0x0808006c
 80065cc:	08080060 	.word	0x08080060
 80065d0:	08080054 	.word	0x08080054

080065d4 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80065d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6039      	str	r1, [r7, #0]
 80065dc:	0011      	movs	r1, r2
 80065de:	1dfb      	adds	r3, r7, #7
 80065e0:	1c02      	adds	r2, r0, #0
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	1dbb      	adds	r3, r7, #6
 80065e6:	1c0a      	adds	r2, r1, #0
 80065e8:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80065ea:	2223      	movs	r2, #35	@ 0x23
 80065ec:	4b20      	ldr	r3, [pc, #128]	@ (8006670 <Create_Message+0x9c>)
 80065ee:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80065f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006670 <Create_Message+0x9c>)
 80065f2:	1dfa      	adds	r2, r7, #7
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80065f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <Create_Message+0x9c>)
 80065fa:	1dba      	adds	r2, r7, #6
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8006600:	1dbb      	adds	r3, r7, #6
 8006602:	781a      	ldrb	r2, [r3, #0]
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	4b1b      	ldr	r3, [pc, #108]	@ (8006674 <Create_Message+0xa0>)
 8006608:	0018      	movs	r0, r3
 800660a:	f01c fb43 	bl	8022c94 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800660e:	1dbb      	adds	r3, r7, #6
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b29a      	uxth	r2, r3
 8006614:	250e      	movs	r5, #14
 8006616:	197b      	adds	r3, r7, r5
 8006618:	3203      	adds	r2, #3
 800661a:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 800661c:	260c      	movs	r6, #12
 800661e:	19bc      	adds	r4, r7, r6
 8006620:	197b      	adds	r3, r7, r5
 8006622:	881a      	ldrh	r2, [r3, #0]
 8006624:	4b12      	ldr	r3, [pc, #72]	@ (8006670 <Create_Message+0x9c>)
 8006626:	0011      	movs	r1, r2
 8006628:	0018      	movs	r0, r3
 800662a:	f000 f825 	bl	8006678 <CRC16_ARC>
 800662e:	0003      	movs	r3, r0
 8006630:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8006632:	0030      	movs	r0, r6
 8006634:	183b      	adds	r3, r7, r0
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	b29a      	uxth	r2, r3
 800663c:	197b      	adds	r3, r7, r5
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b2d1      	uxtb	r1, r2
 8006642:	4a0b      	ldr	r2, [pc, #44]	@ (8006670 <Create_Message+0x9c>)
 8006644:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006646:	197b      	adds	r3, r7, r5
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	183a      	adds	r2, r7, r0
 800664e:	8812      	ldrh	r2, [r2, #0]
 8006650:	b2d1      	uxtb	r1, r2
 8006652:	4a07      	ldr	r2, [pc, #28]	@ (8006670 <Create_Message+0x9c>)
 8006654:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006656:	197b      	adds	r3, r7, r5
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	3302      	adds	r3, #2
 800665c:	b29a      	uxth	r2, r3
 800665e:	4b04      	ldr	r3, [pc, #16]	@ (8006670 <Create_Message+0x9c>)
 8006660:	0011      	movs	r1, r2
 8006662:	0018      	movs	r0, r3
 8006664:	f018 ffc6 	bl	801f5f4 <CDC_Transmit_FS>
}
 8006668:	46c0      	nop			@ (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b005      	add	sp, #20
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	200008a0 	.word	0x200008a0
 8006674:	200008a3 	.word	0x200008a3

08006678 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	000a      	movs	r2, r1
 8006682:	1cbb      	adds	r3, r7, #2
 8006684:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006686:	2316      	movs	r3, #22
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2200      	movs	r2, #0
 800668c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	e02e      	b.n	80066f2 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	18d3      	adds	r3, r2, r3
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	0019      	movs	r1, r3
 800669e:	2216      	movs	r2, #22
 80066a0:	18bb      	adds	r3, r7, r2
 80066a2:	18ba      	adds	r2, r7, r2
 80066a4:	8812      	ldrh	r2, [r2, #0]
 80066a6:	404a      	eors	r2, r1
 80066a8:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e01a      	b.n	80066e6 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80066b0:	2116      	movs	r1, #22
 80066b2:	187b      	adds	r3, r7, r1
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	4013      	ands	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80066bc:	187b      	adds	r3, r7, r1
 80066be:	187a      	adds	r2, r7, r1
 80066c0:	8812      	ldrh	r2, [r2, #0]
 80066c2:	0852      	lsrs	r2, r2, #1
 80066c4:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80066c6:	187b      	adds	r3, r7, r1
 80066c8:	187a      	adds	r2, r7, r1
 80066ca:	8812      	ldrh	r2, [r2, #0]
 80066cc:	490f      	ldr	r1, [pc, #60]	@ (800670c <CRC16_ARC+0x94>)
 80066ce:	404a      	eors	r2, r1
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	e005      	b.n	80066e0 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80066d4:	2216      	movs	r2, #22
 80066d6:	18bb      	adds	r3, r7, r2
 80066d8:	18ba      	adds	r2, r7, r2
 80066da:	8812      	ldrh	r2, [r2, #0]
 80066dc:	0852      	lsrs	r2, r2, #1
 80066de:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b07      	cmp	r3, #7
 80066ea:	dde1      	ble.n	80066b0 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3301      	adds	r3, #1
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	1cbb      	adds	r3, r7, #2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	dbcb      	blt.n	8006694 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80066fc:	2316      	movs	r3, #22
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	881b      	ldrh	r3, [r3, #0]
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b006      	add	sp, #24
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	ffffa001 	.word	0xffffa001

08006710 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8006710:	b40f      	push	{r0, r1, r2, r3}
 8006712:	b590      	push	{r4, r7, lr}
 8006714:	b0a9      	sub	sp, #164	@ 0xa4
 8006716:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8006718:	23ac      	movs	r3, #172	@ 0xac
 800671a:	2108      	movs	r1, #8
 800671c:	185b      	adds	r3, r3, r1
 800671e:	19db      	adds	r3, r3, r7
 8006720:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	23a8      	movs	r3, #168	@ 0xa8
 8006726:	185b      	adds	r3, r3, r1
 8006728:	19db      	adds	r3, r3, r7
 800672a:	6819      	ldr	r1, [r3, #0]
 800672c:	2408      	movs	r4, #8
 800672e:	193b      	adds	r3, r7, r4
 8006730:	0018      	movs	r0, r3
 8006732:	f01c f927 	bl	8022984 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8006736:	193b      	adds	r3, r7, r4
 8006738:	0018      	movs	r0, r3
 800673a:	f7f9 fd17 	bl	800016c <strlen>
 800673e:	0003      	movs	r3, r0
 8006740:	b29a      	uxth	r2, r3
 8006742:	193b      	adds	r3, r7, r4
 8006744:	0011      	movs	r1, r2
 8006746:	0018      	movs	r0, r3
 8006748:	f018 ff54 	bl	801f5f4 <CDC_Transmit_FS>
}
 800674c:	46c0      	nop			@ (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b029      	add	sp, #164	@ 0xa4
 8006752:	bc90      	pop	{r4, r7}
 8006754:	bc08      	pop	{r3}
 8006756:	b004      	add	sp, #16
 8006758:	4718      	bx	r3

0800675a <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	000a      	movs	r2, r1
 8006764:	1cfb      	adds	r3, r7, #3
 8006766:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8006768:	1cfb      	adds	r3, r7, #3
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <PC_selectout+0x1e>
    printf_USB(msg);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	0018      	movs	r0, r3
 8006774:	f7ff ffcc 	bl	8006710 <printf_USB>
  }
//  else {
    printf(msg);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0018      	movs	r0, r3
 800677c:	f01b ffd8 	bl	8022730 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 8006780:	200a      	movs	r0, #10
 8006782:	f00a fca3 	bl	80110cc <HAL_Delay>
}
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	46bd      	mov	sp, r7
 800678a:	b002      	add	sp, #8
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <PC_show_Keys>:

void PC_show_Keys() {
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  static char msg[64];
  if(Check_USB_PowerOn()){
 8006794:	f000 fc40 	bl	8007018 <Check_USB_PowerOn>
 8006798:	1e03      	subs	r3, r0, #0
 800679a:	d003      	beq.n	80067a4 <PC_show_Keys+0x14>
    usb_out = true;
 800679c:	4bcc      	ldr	r3, [pc, #816]	@ (8006ad0 <PC_show_Keys+0x340>)
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e002      	b.n	80067aa <PC_show_Keys+0x1a>
  }
  else {
    usb_out = false;
 80067a4:	4bca      	ldr	r3, [pc, #808]	@ (8006ad0 <PC_show_Keys+0x340>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80067aa:	4aca      	ldr	r2, [pc, #808]	@ (8006ad4 <PC_show_Keys+0x344>)
 80067ac:	4bca      	ldr	r3, [pc, #808]	@ (8006ad8 <PC_show_Keys+0x348>)
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f01c f82d 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067b6:	4bc6      	ldr	r3, [pc, #792]	@ (8006ad0 <PC_show_Keys+0x340>)
 80067b8:	781a      	ldrb	r2, [r3, #0]
 80067ba:	4bc7      	ldr	r3, [pc, #796]	@ (8006ad8 <PC_show_Keys+0x348>)
 80067bc:	0011      	movs	r1, r2
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff ffcb 	bl	800675a <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80067c4:	4bc5      	ldr	r3, [pc, #788]	@ (8006adc <PC_show_Keys+0x34c>)
 80067c6:	48c6      	ldr	r0, [pc, #792]	@ (8006ae0 <PC_show_Keys+0x350>)
 80067c8:	220c      	movs	r2, #12
 80067ca:	0019      	movs	r1, r3
 80067cc:	f002 fd22 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80067d0:	4ac2      	ldr	r2, [pc, #776]	@ (8006adc <PC_show_Keys+0x34c>)
 80067d2:	4bc4      	ldr	r3, [pc, #784]	@ (8006ae4 <PC_show_Keys+0x354>)
 80067d4:	0011      	movs	r1, r2
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7fd fabc 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "Box id ----------------------: %s\r\n", Buffer);
 80067dc:	4ac1      	ldr	r2, [pc, #772]	@ (8006ae4 <PC_show_Keys+0x354>)
 80067de:	49c2      	ldr	r1, [pc, #776]	@ (8006ae8 <PC_show_Keys+0x358>)
 80067e0:	4bbd      	ldr	r3, [pc, #756]	@ (8006ad8 <PC_show_Keys+0x348>)
 80067e2:	0018      	movs	r0, r3
 80067e4:	f01c f814 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067e8:	4bb9      	ldr	r3, [pc, #740]	@ (8006ad0 <PC_show_Keys+0x340>)
 80067ea:	781a      	ldrb	r2, [r3, #0]
 80067ec:	4bba      	ldr	r3, [pc, #744]	@ (8006ad8 <PC_show_Keys+0x348>)
 80067ee:	0011      	movs	r1, r2
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7ff ffb2 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80067f6:	4bbd      	ldr	r3, [pc, #756]	@ (8006aec <PC_show_Keys+0x35c>)
 80067f8:	48bd      	ldr	r0, [pc, #756]	@ (8006af0 <PC_show_Keys+0x360>)
 80067fa:	220c      	movs	r2, #12
 80067fc:	0019      	movs	r1, r3
 80067fe:	f002 fd09 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8006802:	4aba      	ldr	r2, [pc, #744]	@ (8006aec <PC_show_Keys+0x35c>)
 8006804:	4bb7      	ldr	r3, [pc, #732]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006806:	0011      	movs	r1, r2
 8006808:	0018      	movs	r0, r3
 800680a:	f7fd faa3 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "1 - Temperature sensor id: --: %s\r\n", Buffer);
 800680e:	4ab5      	ldr	r2, [pc, #724]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006810:	49b8      	ldr	r1, [pc, #736]	@ (8006af4 <PC_show_Keys+0x364>)
 8006812:	4bb1      	ldr	r3, [pc, #708]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006814:	0018      	movs	r0, r3
 8006816:	f01b fffb 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800681a:	4bad      	ldr	r3, [pc, #692]	@ (8006ad0 <PC_show_Keys+0x340>)
 800681c:	781a      	ldrb	r2, [r3, #0]
 800681e:	4bae      	ldr	r3, [pc, #696]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006820:	0011      	movs	r1, r2
 8006822:	0018      	movs	r0, r3
 8006824:	f7ff ff99 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8006828:	4bb3      	ldr	r3, [pc, #716]	@ (8006af8 <PC_show_Keys+0x368>)
 800682a:	48b4      	ldr	r0, [pc, #720]	@ (8006afc <PC_show_Keys+0x36c>)
 800682c:	220c      	movs	r2, #12
 800682e:	0019      	movs	r1, r3
 8006830:	f002 fcf0 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8006834:	4ab0      	ldr	r2, [pc, #704]	@ (8006af8 <PC_show_Keys+0x368>)
 8006836:	4bab      	ldr	r3, [pc, #684]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006838:	0011      	movs	r1, r2
 800683a:	0018      	movs	r0, r3
 800683c:	f7fd fa8a 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "2 - Humidity sensor id ------: %s\r\n", Buffer);
 8006840:	4aa8      	ldr	r2, [pc, #672]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006842:	49af      	ldr	r1, [pc, #700]	@ (8006b00 <PC_show_Keys+0x370>)
 8006844:	4ba4      	ldr	r3, [pc, #656]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006846:	0018      	movs	r0, r3
 8006848:	f01b ffe2 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800684c:	4ba0      	ldr	r3, [pc, #640]	@ (8006ad0 <PC_show_Keys+0x340>)
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006852:	0011      	movs	r1, r2
 8006854:	0018      	movs	r0, r3
 8006856:	f7ff ff80 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 800685a:	4baa      	ldr	r3, [pc, #680]	@ (8006b04 <PC_show_Keys+0x374>)
 800685c:	48aa      	ldr	r0, [pc, #680]	@ (8006b08 <PC_show_Keys+0x378>)
 800685e:	220c      	movs	r2, #12
 8006860:	0019      	movs	r1, r3
 8006862:	f002 fcd7 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8006866:	4aa7      	ldr	r2, [pc, #668]	@ (8006b04 <PC_show_Keys+0x374>)
 8006868:	4b9e      	ldr	r3, [pc, #632]	@ (8006ae4 <PC_show_Keys+0x354>)
 800686a:	0011      	movs	r1, r2
 800686c:	0018      	movs	r0, r3
 800686e:	f7fd fa71 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "3 - NOx sensor id -----------: %s\r\n", Buffer);
 8006872:	4a9c      	ldr	r2, [pc, #624]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006874:	49a5      	ldr	r1, [pc, #660]	@ (8006b0c <PC_show_Keys+0x37c>)
 8006876:	4b98      	ldr	r3, [pc, #608]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006878:	0018      	movs	r0, r3
 800687a:	f01b ffc9 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800687e:	4b94      	ldr	r3, [pc, #592]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	4b95      	ldr	r3, [pc, #596]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006884:	0011      	movs	r1, r2
 8006886:	0018      	movs	r0, r3
 8006888:	f7ff ff67 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 800688c:	4ba0      	ldr	r3, [pc, #640]	@ (8006b10 <PC_show_Keys+0x380>)
 800688e:	48a1      	ldr	r0, [pc, #644]	@ (8006b14 <PC_show_Keys+0x384>)
 8006890:	220c      	movs	r2, #12
 8006892:	0019      	movs	r1, r3
 8006894:	f002 fcbe 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8006898:	4a9d      	ldr	r2, [pc, #628]	@ (8006b10 <PC_show_Keys+0x380>)
 800689a:	4b92      	ldr	r3, [pc, #584]	@ (8006ae4 <PC_show_Keys+0x354>)
 800689c:	0011      	movs	r1, r2
 800689e:	0018      	movs	r0, r3
 80068a0:	f7fd fa58 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "4 - VOC sensor id -----------: %s\r\n", Buffer);
 80068a4:	4a8f      	ldr	r2, [pc, #572]	@ (8006ae4 <PC_show_Keys+0x354>)
 80068a6:	499c      	ldr	r1, [pc, #624]	@ (8006b18 <PC_show_Keys+0x388>)
 80068a8:	4b8b      	ldr	r3, [pc, #556]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068aa:	0018      	movs	r0, r3
 80068ac:	f01b ffb0 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068b0:	4b87      	ldr	r3, [pc, #540]	@ (8006ad0 <PC_show_Keys+0x340>)
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	4b88      	ldr	r3, [pc, #544]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068b6:	0011      	movs	r1, r2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7ff ff4e 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, soundConfig, IdSize);
 80068be:	4b97      	ldr	r3, [pc, #604]	@ (8006b1c <PC_show_Keys+0x38c>)
 80068c0:	4897      	ldr	r0, [pc, #604]	@ (8006b20 <PC_show_Keys+0x390>)
 80068c2:	220c      	movs	r2, #12
 80068c4:	0019      	movs	r1, r3
 80068c6:	f002 fca5 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80068ca:	4a94      	ldr	r2, [pc, #592]	@ (8006b1c <PC_show_Keys+0x38c>)
 80068cc:	4b85      	ldr	r3, [pc, #532]	@ (8006ae4 <PC_show_Keys+0x354>)
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7fd fa3f 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "5 is former dBa unused\r\n");
 80068d6:	4a93      	ldr	r2, [pc, #588]	@ (8006b24 <PC_show_Keys+0x394>)
 80068d8:	4b7f      	ldr	r3, [pc, #508]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068da:	0011      	movs	r1, r2
 80068dc:	0018      	movs	r0, r3
 80068de:	f01b ff97 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068e2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ad0 <PC_show_Keys+0x340>)
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068e8:	0011      	movs	r1, r2
 80068ea:	0018      	movs	r0, r3
 80068ec:	f7ff ff35 	bl	800675a <PC_selectout>
  sprintf(msg, "5 - Air pressure sensor id --: %s\r\n", Buffer);
 80068f0:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae4 <PC_show_Keys+0x354>)
 80068f2:	498d      	ldr	r1, [pc, #564]	@ (8006b28 <PC_show_Keys+0x398>)
 80068f4:	4b78      	ldr	r3, [pc, #480]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068f6:	0018      	movs	r0, r3
 80068f8:	f01b ff8a 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068fc:	4b74      	ldr	r3, [pc, #464]	@ (8006ad0 <PC_show_Keys+0x340>)
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	4b75      	ldr	r3, [pc, #468]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006902:	0011      	movs	r1, r2
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff ff28 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 800690a:	4b84      	ldr	r3, [pc, #528]	@ (8006b1c <PC_show_Keys+0x38c>)
 800690c:	4887      	ldr	r0, [pc, #540]	@ (8006b2c <PC_show_Keys+0x39c>)
 800690e:	220c      	movs	r2, #12
 8006910:	0019      	movs	r1, r3
 8006912:	f002 fc7f 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8006916:	4a81      	ldr	r2, [pc, #516]	@ (8006b1c <PC_show_Keys+0x38c>)
 8006918:	4b72      	ldr	r3, [pc, #456]	@ (8006ae4 <PC_show_Keys+0x354>)
 800691a:	0011      	movs	r1, r2
 800691c:	0018      	movs	r0, r3
 800691e:	f7fd fa19 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "6 is former dBc\r\n");
 8006922:	4a83      	ldr	r2, [pc, #524]	@ (8006b30 <PC_show_Keys+0x3a0>)
 8006924:	4b6c      	ldr	r3, [pc, #432]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006926:	0011      	movs	r1, r2
 8006928:	0018      	movs	r0, r3
 800692a:	f01b ff71 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800692e:	4b68      	ldr	r3, [pc, #416]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	4b69      	ldr	r3, [pc, #420]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006934:	0011      	movs	r1, r2
 8006936:	0018      	movs	r0, r3
 8006938:	f7ff ff0f 	bl	800675a <PC_selectout>
  sprintf(msg, "6 - Sound dBA sensor id -----: %s\r\n", Buffer);
 800693c:	4a69      	ldr	r2, [pc, #420]	@ (8006ae4 <PC_show_Keys+0x354>)
 800693e:	497d      	ldr	r1, [pc, #500]	@ (8006b34 <PC_show_Keys+0x3a4>)
 8006940:	4b65      	ldr	r3, [pc, #404]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006942:	0018      	movs	r0, r3
 8006944:	f01b ff64 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006948:	4b61      	ldr	r3, [pc, #388]	@ (8006ad0 <PC_show_Keys+0x340>)
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	4b62      	ldr	r3, [pc, #392]	@ (8006ad8 <PC_show_Keys+0x348>)
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f7ff ff02 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8006956:	4b78      	ldr	r3, [pc, #480]	@ (8006b38 <PC_show_Keys+0x3a8>)
 8006958:	4878      	ldr	r0, [pc, #480]	@ (8006b3c <PC_show_Keys+0x3ac>)
 800695a:	2220      	movs	r2, #32
 800695c:	0019      	movs	r1, r3
 800695e:	f002 fc59 	bl	8009214 <ReadUint8ArrayEEprom>
  sprintf(msg, "7 - Stored name -------------: ");
 8006962:	4a77      	ldr	r2, [pc, #476]	@ (8006b40 <PC_show_Keys+0x3b0>)
 8006964:	4b5c      	ldr	r3, [pc, #368]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006966:	0011      	movs	r1, r2
 8006968:	0018      	movs	r0, r3
 800696a:	f01b ff51 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800696e:	4b58      	ldr	r3, [pc, #352]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006970:	781a      	ldrb	r2, [r3, #0]
 8006972:	4b59      	ldr	r3, [pc, #356]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006974:	0011      	movs	r1, r2
 8006976:	0018      	movs	r0, r3
 8006978:	f7ff feef 	bl	800675a <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);
 800697c:	4a6e      	ldr	r2, [pc, #440]	@ (8006b38 <PC_show_Keys+0x3a8>)
 800697e:	4971      	ldr	r1, [pc, #452]	@ (8006b44 <PC_show_Keys+0x3b4>)
 8006980:	4b55      	ldr	r3, [pc, #340]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006982:	0018      	movs	r0, r3
 8006984:	f01b ff44 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006988:	4b51      	ldr	r3, [pc, #324]	@ (8006ad0 <PC_show_Keys+0x340>)
 800698a:	781a      	ldrb	r2, [r3, #0]
 800698c:	4b52      	ldr	r3, [pc, #328]	@ (8006ad8 <PC_show_Keys+0x348>)
 800698e:	0011      	movs	r1, r2
 8006990:	0018      	movs	r0, r3
 8006992:	f7ff fee2 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8006996:	4b6c      	ldr	r3, [pc, #432]	@ (8006b48 <PC_show_Keys+0x3b8>)
 8006998:	486c      	ldr	r0, [pc, #432]	@ (8006b4c <PC_show_Keys+0x3bc>)
 800699a:	220c      	movs	r2, #12
 800699c:	0019      	movs	r1, r3
 800699e:	f002 fc39 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80069a2:	4a69      	ldr	r2, [pc, #420]	@ (8006b48 <PC_show_Keys+0x3b8>)
 80069a4:	4b4f      	ldr	r3, [pc, #316]	@ (8006ae4 <PC_show_Keys+0x354>)
 80069a6:	0011      	movs	r1, r2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7fd f9d3 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "8 - Solar voltage sensor id -: %s\r\n", Buffer);
 80069ae:	4a4d      	ldr	r2, [pc, #308]	@ (8006ae4 <PC_show_Keys+0x354>)
 80069b0:	4967      	ldr	r1, [pc, #412]	@ (8006b50 <PC_show_Keys+0x3c0>)
 80069b2:	4b49      	ldr	r3, [pc, #292]	@ (8006ad8 <PC_show_Keys+0x348>)
 80069b4:	0018      	movs	r0, r3
 80069b6:	f01b ff2b 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80069ba:	4b45      	ldr	r3, [pc, #276]	@ (8006ad0 <PC_show_Keys+0x340>)
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	4b46      	ldr	r3, [pc, #280]	@ (8006ad8 <PC_show_Keys+0x348>)
 80069c0:	0011      	movs	r1, r2
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7ff fec9 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80069c8:	4b62      	ldr	r3, [pc, #392]	@ (8006b54 <PC_show_Keys+0x3c4>)
 80069ca:	4863      	ldr	r0, [pc, #396]	@ (8006b58 <PC_show_Keys+0x3c8>)
 80069cc:	220c      	movs	r2, #12
 80069ce:	0019      	movs	r1, r3
 80069d0:	f002 fc20 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80069d4:	4a5f      	ldr	r2, [pc, #380]	@ (8006b54 <PC_show_Keys+0x3c4>)
 80069d6:	4b43      	ldr	r3, [pc, #268]	@ (8006ae4 <PC_show_Keys+0x354>)
 80069d8:	0011      	movs	r1, r2
 80069da:	0018      	movs	r0, r3
 80069dc:	f7fd f9ba 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "9 - Battery voltage sensor id: %s\r\n", Buffer);
 80069e0:	4a40      	ldr	r2, [pc, #256]	@ (8006ae4 <PC_show_Keys+0x354>)
 80069e2:	495e      	ldr	r1, [pc, #376]	@ (8006b5c <PC_show_Keys+0x3cc>)
 80069e4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ad8 <PC_show_Keys+0x348>)
 80069e6:	0018      	movs	r0, r3
 80069e8:	f01b ff12 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80069ec:	4b38      	ldr	r3, [pc, #224]	@ (8006ad0 <PC_show_Keys+0x340>)
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	4b39      	ldr	r3, [pc, #228]	@ (8006ad8 <PC_show_Keys+0x348>)
 80069f2:	0011      	movs	r1, r2
 80069f4:	0018      	movs	r0, r3
 80069f6:	f7ff feb0 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 80069fa:	4b59      	ldr	r3, [pc, #356]	@ (8006b60 <PC_show_Keys+0x3d0>)
 80069fc:	4859      	ldr	r0, [pc, #356]	@ (8006b64 <PC_show_Keys+0x3d4>)
 80069fe:	220c      	movs	r2, #12
 8006a00:	0019      	movs	r1, r3
 8006a02:	f002 fc07 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8006a06:	4a56      	ldr	r2, [pc, #344]	@ (8006b60 <PC_show_Keys+0x3d0>)
 8006a08:	4b36      	ldr	r3, [pc, #216]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006a0a:	0011      	movs	r1, r2
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f7fd f9a1 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, ": - PM10 sensor id ----------: %s\r\n", Buffer);
 8006a12:	4a34      	ldr	r2, [pc, #208]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006a14:	4954      	ldr	r1, [pc, #336]	@ (8006b68 <PC_show_Keys+0x3d8>)
 8006a16:	4b30      	ldr	r3, [pc, #192]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f01b fef9 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006a24:	0011      	movs	r1, r2
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7ff fe97 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8006a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8006b6c <PC_show_Keys+0x3dc>)
 8006a2e:	4850      	ldr	r0, [pc, #320]	@ (8006b70 <PC_show_Keys+0x3e0>)
 8006a30:	220c      	movs	r2, #12
 8006a32:	0019      	movs	r1, r3
 8006a34:	f002 fbee 	bl	8009214 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8006a38:	4a4c      	ldr	r2, [pc, #304]	@ (8006b6c <PC_show_Keys+0x3dc>)
 8006a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7fd f988 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "; - PM2p5 sensor id ---------: %s\r\n", Buffer);
 8006a44:	4a27      	ldr	r2, [pc, #156]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006a46:	494b      	ldr	r1, [pc, #300]	@ (8006b74 <PC_show_Keys+0x3e4>)
 8006a48:	4b23      	ldr	r3, [pc, #140]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f01b fee0 	bl	8022810 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006a50:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	4b20      	ldr	r3, [pc, #128]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006a56:	0011      	movs	r1, r2
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f7ff fe7e 	bl	800675a <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 8006a5e:	4b46      	ldr	r3, [pc, #280]	@ (8006b78 <PC_show_Keys+0x3e8>)
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7ff fe55 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a66:	200a      	movs	r0, #10
 8006a68:	f00a fb30 	bl	80110cc <HAL_Delay>
  printf_USB("Command example for air pressure => #5,6a\r\n");
 8006a6c:	4b43      	ldr	r3, [pc, #268]	@ (8006b7c <PC_show_Keys+0x3ec>)
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f7ff fe4e 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a74:	200a      	movs	r0, #10
 8006a76:	f00a fb29 	bl	80110cc <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8006a7a:	4b41      	ldr	r3, [pc, #260]	@ (8006b80 <PC_show_Keys+0x3f0>)
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff fe47 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a82:	200a      	movs	r0, #10
 8006a84:	f00a fb22 	bl	80110cc <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8006a88:	4b3e      	ldr	r3, [pc, #248]	@ (8006b84 <PC_show_Keys+0x3f4>)
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7ff fe40 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a90:	200a      	movs	r0, #10
 8006a92:	f00a fb1b 	bl	80110cc <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8006a96:	4b3c      	ldr	r3, [pc, #240]	@ (8006b88 <PC_show_Keys+0x3f8>)
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7ff fe39 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a9e:	200a      	movs	r0, #10
 8006aa0:	f00a fb14 	bl	80110cc <HAL_Delay>
  printf_USB(" $5,67af09374cdef30007b35055\r\n");
 8006aa4:	4b39      	ldr	r3, [pc, #228]	@ (8006b8c <PC_show_Keys+0x3fc>)
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f7ff fe32 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006aac:	200a      	movs	r0, #10
 8006aae:	f00a fb0d 	bl	80110cc <HAL_Delay>
  if (!usb_out) {
 8006ab2:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4053      	eors	r3, r2
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <PC_show_Keys+0x338>
    printf("A key can only be changed by USB input.\r\n");
 8006ac0:	4b33      	ldr	r3, [pc, #204]	@ (8006b90 <PC_show_Keys+0x400>)
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f01b fe9a 	bl	80227fc <puts>
  }
}
 8006ac8:	46c0      	nop			@ (mov r8, r8)
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	200009a5 	.word	0x200009a5
 8006ad4:	08026834 	.word	0x08026834
 8006ad8:	200009a8 	.word	0x200009a8
 8006adc:	200009e8 	.word	0x200009e8
 8006ae0:	08080000 	.word	0x08080000
 8006ae4:	200009f4 	.word	0x200009f4
 8006ae8:	08026850 	.word	0x08026850
 8006aec:	20000a10 	.word	0x20000a10
 8006af0:	0808000c 	.word	0x0808000c
 8006af4:	08026874 	.word	0x08026874
 8006af8:	20000a1c 	.word	0x20000a1c
 8006afc:	08080018 	.word	0x08080018
 8006b00:	08026898 	.word	0x08026898
 8006b04:	20000a28 	.word	0x20000a28
 8006b08:	08080024 	.word	0x08080024
 8006b0c:	080268bc 	.word	0x080268bc
 8006b10:	20000a34 	.word	0x20000a34
 8006b14:	08080030 	.word	0x08080030
 8006b18:	080268e0 	.word	0x080268e0
 8006b1c:	20000a40 	.word	0x20000a40
 8006b20:	0808003c 	.word	0x0808003c
 8006b24:	08026904 	.word	0x08026904
 8006b28:	08026920 	.word	0x08026920
 8006b2c:	08080048 	.word	0x08080048
 8006b30:	08026944 	.word	0x08026944
 8006b34:	08026958 	.word	0x08026958
 8006b38:	20000a4c 	.word	0x20000a4c
 8006b3c:	08080090 	.word	0x08080090
 8006b40:	0802697c 	.word	0x0802697c
 8006b44:	0802699c 	.word	0x0802699c
 8006b48:	20000a6c 	.word	0x20000a6c
 8006b4c:	08080078 	.word	0x08080078
 8006b50:	080269a4 	.word	0x080269a4
 8006b54:	20000a78 	.word	0x20000a78
 8006b58:	0808006c 	.word	0x0808006c
 8006b5c:	080269c8 	.word	0x080269c8
 8006b60:	20000a84 	.word	0x20000a84
 8006b64:	08080060 	.word	0x08080060
 8006b68:	080269ec 	.word	0x080269ec
 8006b6c:	20000a90 	.word	0x20000a90
 8006b70:	08080054 	.word	0x08080054
 8006b74:	08026a10 	.word	0x08026a10
 8006b78:	08026a34 	.word	0x08026a34
 8006b7c:	08026a64 	.word	0x08026a64
 8006b80:	08026a90 	.word	0x08026a90
 8006b84:	08026acc 	.word	0x08026acc
 8006b88:	08026b04 	.word	0x08026b04
 8006b8c:	08026b38 	.word	0x08026b38
 8006b90:	08026b58 	.word	0x08026b58

08006b94 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b0c5      	sub	sp, #276	@ 0x114
 8006b98:	af3e      	add	r7, sp, #248	@ 0xf8
 8006b9a:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  static uint32_t len = 5;
  uint32_t length = GetUsbRxDataSize();
 8006b9c:	f018 fd84 	bl	801f6a8 <GetUsbRxDataSize>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	613b      	str	r3, [r7, #16]
  static uint8_t r = 0;
//  uint8_t* message;
  static char Buffer[24];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2124      	movs	r1, #36	@ 0x24
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f01b ff9f 	bl	8022aec <strchr>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	60fb      	str	r3, [r7, #12]
  if ((length == 1) && (message != NULL) && (len != 27)){
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10f      	bne.n	8006bd8 <Process_USB_input+0x44>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00c      	beq.n	8006bd8 <Process_USB_input+0x44>
 8006bbe:	4bab      	ldr	r3, [pc, #684]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b1b      	cmp	r3, #27
 8006bc4:	d008      	beq.n	8006bd8 <Process_USB_input+0x44>
      Debug("Switching to input length of 27 for full opensensemap keylength");
 8006bc6:	4aaa      	ldr	r2, [pc, #680]	@ (8006e70 <Process_USB_input+0x2dc>)
 8006bc8:	4baa      	ldr	r3, [pc, #680]	@ (8006e74 <Process_USB_input+0x2e0>)
 8006bca:	0019      	movs	r1, r3
 8006bcc:	2003      	movs	r0, #3
 8006bce:	f009 fe27 	bl	8010820 <CreateLine>
      len = 27;
 8006bd2:	4ba6      	ldr	r3, [pc, #664]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006bd4:	221b      	movs	r2, #27
 8006bd6:	601a      	str	r2, [r3, #0]
  }
  if (length > len) {
 8006bd8:	4ba4      	ldr	r3, [pc, #656]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d800      	bhi.n	8006be4 <Process_USB_input+0x50>
 8006be2:	e12c      	b.n	8006e3e <Process_USB_input+0x2aa>
//    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
    printf_USB("USB input: %s\r\n", (const char*)data);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4ba4      	ldr	r3, [pc, #656]	@ (8006e78 <Process_USB_input+0x2e4>)
 8006be8:	0011      	movs	r1, r2
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7ff fd90 	bl	8006710 <printf_USB>
    message = (unsigned char*)data;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]
    if (message[0] == '$') {
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b24      	cmp	r3, #36	@ 0x24
 8006bfa:	d102      	bne.n	8006c02 <Process_USB_input+0x6e>
      len = 27;
 8006bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006bfe:	221b      	movs	r2, #27
 8006c00:	601a      	str	r2, [r3, #0]
    }
    if((message[0] == '#') || (message[0] == '$')) {
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b23      	cmp	r3, #35	@ 0x23
 8006c08:	d004      	beq.n	8006c14 <Process_USB_input+0x80>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b24      	cmp	r3, #36	@ 0x24
 8006c10:	d000      	beq.n	8006c14 <Process_USB_input+0x80>
 8006c12:	e0f7      	b.n	8006e04 <Process_USB_input+0x270>
      received.Command = (message[1] & 0x0F);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	220f      	movs	r2, #15
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	4b96      	ldr	r3, [pc, #600]	@ (8006e7c <Process_USB_input+0x2e8>)
 8006c22:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3302      	adds	r3, #2
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b2c      	cmp	r3, #44	@ 0x2c
 8006c2c:	d000      	beq.n	8006c30 <Process_USB_input+0x9c>
 8006c2e:	e0e2      	b.n	8006df6 <Process_USB_input+0x262>
        for (uint8_t i=3; i < len; i++) {
 8006c30:	2317      	movs	r3, #23
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	2203      	movs	r2, #3
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e084      	b.n	8006d44 <Process_USB_input+0x1b0>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", message[i], i, r);
          HAL_Delay(10);
 8006c3a:	200a      	movs	r0, #10
 8006c3c:	f00a fa46 	bl	80110cc <HAL_Delay>
          if (isxdigit(message[i])) {
 8006c40:	2117      	movs	r1, #23
 8006c42:	187b      	adds	r3, r7, r1
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	18d3      	adds	r3, r2, r3
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	4b8c      	ldr	r3, [pc, #560]	@ (8006e80 <Process_USB_input+0x2ec>)
 8006c50:	18d3      	adds	r3, r2, r3
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	001a      	movs	r2, r3
 8006c56:	2344      	movs	r3, #68	@ 0x44
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d05c      	beq.n	8006d16 <Process_USB_input+0x182>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 8006c5c:	4b89      	ldr	r3, [pc, #548]	@ (8006e84 <Process_USB_input+0x2f0>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	b25a      	sxtb	r2, r3
 8006c64:	0008      	movs	r0, r1
 8006c66:	187b      	adds	r3, r7, r1
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	18cb      	adds	r3, r1, r3
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	4b83      	ldr	r3, [pc, #524]	@ (8006e80 <Process_USB_input+0x2ec>)
 8006c74:	18cb      	adds	r3, r1, r3
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	0019      	movs	r1, r3
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	d008      	beq.n	8006c92 <Process_USB_input+0xfe>
 8006c80:	183b      	adds	r3, r7, r0
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	68f9      	ldr	r1, [r7, #12]
 8006c86:	18cb      	adds	r3, r1, r3
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	3b30      	subs	r3, #48	@ 0x30
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	b25b      	sxtb	r3, r3
 8006c90:	e01e      	b.n	8006cd0 <Process_USB_input+0x13c>
 8006c92:	2317      	movs	r3, #23
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	68f9      	ldr	r1, [r7, #12]
 8006c9a:	18c9      	adds	r1, r1, r3
 8006c9c:	200b      	movs	r0, #11
 8006c9e:	183b      	adds	r3, r7, r0
 8006ca0:	7809      	ldrb	r1, [r1, #0]
 8006ca2:	7019      	strb	r1, [r3, #0]
 8006ca4:	183b      	adds	r3, r7, r0
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	1c59      	adds	r1, r3, #1
 8006caa:	4b75      	ldr	r3, [pc, #468]	@ (8006e80 <Process_USB_input+0x2ec>)
 8006cac:	18cb      	adds	r3, r1, r3
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	0019      	movs	r1, r3
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	400b      	ands	r3, r1
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d103      	bne.n	8006cc2 <Process_USB_input+0x12e>
 8006cba:	183b      	adds	r3, r7, r0
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	3b20      	subs	r3, #32
 8006cc0:	e002      	b.n	8006cc8 <Process_USB_input+0x134>
 8006cc2:	230b      	movs	r3, #11
 8006cc4:	18fb      	adds	r3, r7, r3
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	3b37      	subs	r3, #55	@ 0x37
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8006e84 <Process_USB_input+0x2f0>)
 8006cd8:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%2X\r\n", result);
            HAL_Delay(10);
 8006cda:	200a      	movs	r0, #10
 8006cdc:	f00a f9f6 	bl	80110cc <HAL_Delay>
            if (len == 27) {
 8006ce0:	4b62      	ldr	r3, [pc, #392]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b1b      	cmp	r3, #27
 8006ce6:	d127      	bne.n	8006d38 <Process_USB_input+0x1a4>
              if ((i % 2) == 0) {
 8006ce8:	2317      	movs	r3, #23
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11f      	bne.n	8006d38 <Process_USB_input+0x1a4>
                message[r] = result;
 8006cf8:	4b63      	ldr	r3, [pc, #396]	@ (8006e88 <Process_USB_input+0x2f4>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	001a      	movs	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	189b      	adds	r3, r3, r2
 8006d02:	4a60      	ldr	r2, [pc, #384]	@ (8006e84 <Process_USB_input+0x2f0>)
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	701a      	strb	r2, [r3, #0]
                r++;
 8006d08:	4b5f      	ldr	r3, [pc, #380]	@ (8006e88 <Process_USB_input+0x2f4>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	4b5d      	ldr	r3, [pc, #372]	@ (8006e88 <Process_USB_input+0x2f4>)
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e010      	b.n	8006d38 <Process_USB_input+0x1a4>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", message[i], i);
 8006d16:	2017      	movs	r0, #23
 8006d18:	183b      	adds	r3, r7, r0
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	18d3      	adds	r3, r2, r3
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	0019      	movs	r1, r3
 8006d24:	183b      	adds	r3, r7, r0
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	4b58      	ldr	r3, [pc, #352]	@ (8006e8c <Process_USB_input+0x2f8>)
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	f7ff fcf0 	bl	8006710 <printf_USB>
            ResetUsbRxDataSize();
 8006d30:	f018 fca2 	bl	801f678 <ResetUsbRxDataSize>
            return false; // Of een andere foutwaarde
 8006d34:	2300      	movs	r3, #0
 8006d36:	e095      	b.n	8006e64 <Process_USB_input+0x2d0>
        for (uint8_t i=3; i < len; i++) {
 8006d38:	2117      	movs	r1, #23
 8006d3a:	187b      	adds	r3, r7, r1
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	187b      	adds	r3, r7, r1
 8006d40:	3201      	adds	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	2317      	movs	r3, #23
 8006d46:	18fb      	adds	r3, r7, r3
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	4b48      	ldr	r3, [pc, #288]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d200      	bcs.n	8006d54 <Process_USB_input+0x1c0>
 8006d52:	e772      	b.n	8006c3a <Process_USB_input+0xa6>
          }
        }
        if (len == 5) {
 8006d54:	4b45      	ldr	r3, [pc, #276]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b05      	cmp	r3, #5
 8006d5a:	d112      	bne.n	8006d82 <Process_USB_input+0x1ee>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006e90 <Process_USB_input+0x2fc>)
 8006d5e:	484d      	ldr	r0, [pc, #308]	@ (8006e94 <Process_USB_input+0x300>)
 8006d60:	220c      	movs	r2, #12
 8006d62:	0019      	movs	r1, r3
 8006d64:	f002 fa56 	bl	8009214 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte
 8006d68:	4b46      	ldr	r3, [pc, #280]	@ (8006e84 <Process_USB_input+0x2f0>)
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	4b48      	ldr	r3, [pc, #288]	@ (8006e90 <Process_USB_input+0x2fc>)
 8006d6e:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8006d70:	4b42      	ldr	r3, [pc, #264]	@ (8006e7c <Process_USB_input+0x2e8>)
 8006d72:	2202      	movs	r2, #2
 8006d74:	4946      	ldr	r1, [pc, #280]	@ (8006e90 <Process_USB_input+0x2fc>)
 8006d76:	189b      	adds	r3, r3, r2
 8006d78:	220c      	movs	r2, #12
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f01b ff8a 	bl	8022c94 <memcpy>
 8006d80:	e005      	b.n	8006d8e <Process_USB_input+0x1fa>
        }
        else {
          memcpy(received.Payload, message, IdSize);
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	4b44      	ldr	r3, [pc, #272]	@ (8006e98 <Process_USB_input+0x304>)
 8006d86:	220c      	movs	r2, #12
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f01b ff83 	bl	8022c94 <memcpy>
        }
        received.PayloadLength = IdSize;
 8006d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e7c <Process_USB_input+0x2e8>)
 8006d90:	220c      	movs	r2, #12
 8006d92:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8006d94:	4a40      	ldr	r2, [pc, #256]	@ (8006e98 <Process_USB_input+0x304>)
 8006d96:	4b41      	ldr	r3, [pc, #260]	@ (8006e9c <Process_USB_input+0x308>)
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7fc ffda 	bl	8003d54 <uint8ArrayToString>
        ProcessCmd(received);
 8006da0:	4c36      	ldr	r4, [pc, #216]	@ (8006e7c <Process_USB_input+0x2e8>)
 8006da2:	466b      	mov	r3, sp
 8006da4:	0018      	movs	r0, r3
 8006da6:	0023      	movs	r3, r4
 8006da8:	3310      	adds	r3, #16
 8006daa:	22f4      	movs	r2, #244	@ 0xf4
 8006dac:	0019      	movs	r1, r3
 8006dae:	f01b ff71 	bl	8022c94 <memcpy>
 8006db2:	6820      	ldr	r0, [r4, #0]
 8006db4:	6861      	ldr	r1, [r4, #4]
 8006db6:	68a2      	ldr	r2, [r4, #8]
 8006db8:	68e3      	ldr	r3, [r4, #12]
 8006dba:	f7ff fb1b 	bl	80063f4 <ProcessCmd>
        ResetUsbRxDataSize();
 8006dbe:	f018 fc5b 	bl	801f678 <ResetUsbRxDataSize>
        PC_show_Keys();
 8006dc2:	f7ff fce5 	bl	8006790 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8006dc6:	2316      	movs	r3, #22
 8006dc8:	18fb      	adds	r3, r7, r3
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e00b      	b.n	8006de8 <Process_USB_input+0x254>
          data[i] = '\0';
 8006dd0:	2116      	movs	r1, #22
 8006dd2:	187b      	adds	r3, r7, r1
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	18d3      	adds	r3, r2, r3
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8006dde:	187b      	adds	r3, r7, r1
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	187b      	adds	r3, r7, r1
 8006de4:	3201      	adds	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	2316      	movs	r3, #22
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b1f      	cmp	r3, #31
 8006df0:	d9ee      	bls.n	8006dd0 <Process_USB_input+0x23c>
        }
        return true;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e036      	b.n	8006e64 <Process_USB_input+0x2d0>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8006df6:	4b2a      	ldr	r3, [pc, #168]	@ (8006ea0 <Process_USB_input+0x30c>)
 8006df8:	0018      	movs	r0, r3
 8006dfa:	f7ff fc89 	bl	8006710 <printf_USB>
        ResetUsbRxDataSize();
 8006dfe:	f018 fc3b 	bl	801f678 <ResetUsbRxDataSize>
      if (message[2] == ',') {
 8006e02:	e006      	b.n	8006e12 <Process_USB_input+0x27e>
      }
    }
    else {
      len = 5;
 8006e04:	4b19      	ldr	r3, [pc, #100]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006e06:	2205      	movs	r2, #5
 8006e08:	601a      	str	r2, [r3, #0]
      PC_show_Keys();
 8006e0a:	f7ff fcc1 	bl	8006790 <PC_show_Keys>
      ResetUsbRxDataSize();
 8006e0e:	f018 fc33 	bl	801f678 <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 32; i++) {
 8006e12:	2315      	movs	r3, #21
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e00b      	b.n	8006e34 <Process_USB_input+0x2a0>
      data[i] = '\0';
 8006e1c:	2115      	movs	r1, #21
 8006e1e:	187b      	adds	r3, r7, r1
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	18d3      	adds	r3, r2, r3
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8006e2a:	187b      	adds	r3, r7, r1
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	187b      	adds	r3, r7, r1
 8006e30:	3201      	adds	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	2315      	movs	r3, #21
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b1f      	cmp	r3, #31
 8006e3c:	d9ee      	bls.n	8006e1c <Process_USB_input+0x288>
    }

  }
  if (formerlength != length) {
 8006e3e:	4b19      	ldr	r3, [pc, #100]	@ (8006ea4 <Process_USB_input+0x310>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d008      	beq.n	8006e5a <Process_USB_input+0x2c6>
    printf_USB("USB input: %s\r", (const char*)data);
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4b17      	ldr	r3, [pc, #92]	@ (8006ea8 <Process_USB_input+0x314>)
 8006e4c:	0011      	movs	r1, r2
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f7ff fc5e 	bl	8006710 <printf_USB>
    formerlength = length;
 8006e54:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <Process_USB_input+0x310>)
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f018 fc2d 	bl	801f6bc <GetUsbRxNextChunk>

  return false;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b007      	add	sp, #28
 8006e6a:	bd90      	pop	{r4, r7, pc}
 8006e6c:	20000030 	.word	0x20000030
 8006e70:	08026b84 	.word	0x08026b84
 8006e74:	08026bc4 	.word	0x08026bc4
 8006e78:	08026bc8 	.word	0x08026bc8
 8006e7c:	20000794 	.word	0x20000794
 8006e80:	08029528 	.word	0x08029528
 8006e84:	20000898 	.word	0x20000898
 8006e88:	20000a9c 	.word	0x20000a9c
 8006e8c:	08026bd8 	.word	0x08026bd8
 8006e90:	20000aa0 	.word	0x20000aa0
 8006e94:	08080000 	.word	0x08080000
 8006e98:	20000796 	.word	0x20000796
 8006e9c:	20000aac 	.word	0x20000aac
 8006ea0:	08026c10 	.word	0x08026c10
 8006ea4:	2000089c 	.word	0x2000089c
 8006ea8:	08026c3c 	.word	0x08026c3c

08006eac <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006eb0:	4b26      	ldr	r3, [pc, #152]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006eb2:	4a27      	ldr	r2, [pc, #156]	@ (8006f50 <ReadBatteryVoltage+0xa4>)
 8006eb4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006eb6:	4b25      	ldr	r3, [pc, #148]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006eb8:	2280      	movs	r2, #128	@ 0x80
 8006eba:	0152      	lsls	r2, r2, #5
 8006ebc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ebe:	4a23      	ldr	r2, [pc, #140]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006ec0:	4b24      	ldr	r3, [pc, #144]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006ec2:	0011      	movs	r1, r2
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f00a fbcf 	bl	8011668 <HAL_ADC_ConfigChannel>
 8006eca:	1e03      	subs	r3, r0, #0
 8006ecc:	d001      	beq.n	8006ed2 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006ece:	f003 fa41 	bl	800a354 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006ed2:	4b20      	ldr	r3, [pc, #128]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f00a facb 	bl	8011470 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006eda:	4b1e      	ldr	r3, [pc, #120]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006edc:	2101      	movs	r1, #1
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f00a fb1a 	bl	8011518 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f00a fbb2 	bl	8011650 <HAL_ADC_GetValue>
 8006eec:	0002      	movs	r2, r0
 8006eee:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <ReadBatteryVoltage+0xac>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4353      	muls	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4919      	ldr	r1, [pc, #100]	@ (8006f5c <ReadBatteryVoltage+0xb0>)
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f7f9 f953 	bl	80001a4 <__udivsi3>
 8006efe:	0003      	movs	r3, r0
 8006f00:	001a      	movs	r2, r3
 8006f02:	4b17      	ldr	r3, [pc, #92]	@ (8006f60 <ReadBatteryVoltage+0xb4>)
 8006f04:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006f06:	4b16      	ldr	r3, [pc, #88]	@ (8006f60 <ReadBatteryVoltage+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f7fa fbac 	bl	8001668 <__aeabi_ui2f>
 8006f10:	1c03      	adds	r3, r0, #0
 8006f12:	4914      	ldr	r1, [pc, #80]	@ (8006f64 <ReadBatteryVoltage+0xb8>)
 8006f14:	1c18      	adds	r0, r3, #0
 8006f16:	f7f9 fe5d 	bl	8000bd4 <__aeabi_fdiv>
 8006f1a:	1c03      	adds	r3, r0, #0
 8006f1c:	1c1a      	adds	r2, r3, #0
 8006f1e:	4b12      	ldr	r3, [pc, #72]	@ (8006f68 <ReadBatteryVoltage+0xbc>)
 8006f20:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006f22:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006f24:	4a0a      	ldr	r2, [pc, #40]	@ (8006f50 <ReadBatteryVoltage+0xa4>)
 8006f26:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006f28:	4b08      	ldr	r3, [pc, #32]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006f2a:	4a10      	ldr	r2, [pc, #64]	@ (8006f6c <ReadBatteryVoltage+0xc0>)
 8006f2c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006f2e:	4a07      	ldr	r2, [pc, #28]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006f30:	4b08      	ldr	r3, [pc, #32]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006f32:	0011      	movs	r1, r2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f00a fb97 	bl	8011668 <HAL_ADC_ConfigChannel>
 8006f3a:	1e03      	subs	r3, r0, #0
 8006f3c:	d001      	beq.n	8006f42 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006f3e:	f003 fa09 	bl	800a354 <Error_Handler>
  }
  return trueValue;
 8006f42:	4b09      	ldr	r3, [pc, #36]	@ (8006f68 <ReadBatteryVoltage+0xbc>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 }
 8006f46:	1c18      	adds	r0, r3, #0
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000ac4 	.word	0x20000ac4
 8006f50:	38004000 	.word	0x38004000
 8006f54:	20000b00 	.word	0x20000b00
 8006f58:	20000034 	.word	0x20000034
 8006f5c:	00000fff 	.word	0x00000fff
 8006f60:	20000acc 	.word	0x20000acc
 8006f64:	447a0000 	.word	0x447a0000
 8006f68:	20000ad0 	.word	0x20000ad0
 8006f6c:	00001001 	.word	0x00001001

08006f70 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006f74:	4b21      	ldr	r3, [pc, #132]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006f76:	4a22      	ldr	r2, [pc, #136]	@ (8007000 <ReadSolarVoltage+0x90>)
 8006f78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006f7a:	4b20      	ldr	r3, [pc, #128]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006f7c:	2280      	movs	r2, #128	@ 0x80
 8006f7e:	0152      	lsls	r2, r2, #5
 8006f80:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006f82:	4a1e      	ldr	r2, [pc, #120]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006f84:	4b1f      	ldr	r3, [pc, #124]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006f86:	0011      	movs	r1, r2
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f00a fb6d 	bl	8011668 <HAL_ADC_ConfigChannel>
 8006f8e:	1e03      	subs	r3, r0, #0
 8006f90:	d001      	beq.n	8006f96 <ReadSolarVoltage+0x26>
    Error_Handler();
 8006f92:	f003 f9df 	bl	800a354 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006f96:	4b1b      	ldr	r3, [pc, #108]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f00a fa69 	bl	8011470 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006f9e:	4b19      	ldr	r3, [pc, #100]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f00a fab8 	bl	8011518 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006fa8:	4b16      	ldr	r3, [pc, #88]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006faa:	0018      	movs	r0, r3
 8006fac:	f00a fb50 	bl	8011650 <HAL_ADC_GetValue>
 8006fb0:	0002      	movs	r2, r0
 8006fb2:	4b15      	ldr	r3, [pc, #84]	@ (8007008 <ReadSolarVoltage+0x98>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	435a      	muls	r2, r3
 8006fb8:	0013      	movs	r3, r2
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	189b      	adds	r3, r3, r2
 8006fbe:	4913      	ldr	r1, [pc, #76]	@ (800700c <ReadSolarVoltage+0x9c>)
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7f9 f8ef 	bl	80001a4 <__udivsi3>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	001a      	movs	r2, r3
 8006fca:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <ReadSolarVoltage+0xa0>)
 8006fcc:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006fce:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8007000 <ReadSolarVoltage+0x90>)
 8006fd2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006fd4:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8007014 <ReadSolarVoltage+0xa4>)
 8006fd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006fda:	4a08      	ldr	r2, [pc, #32]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006fdc:	4b09      	ldr	r3, [pc, #36]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006fde:	0011      	movs	r1, r2
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f00a fb41 	bl	8011668 <HAL_ADC_ConfigChannel>
 8006fe6:	1e03      	subs	r3, r0, #0
 8006fe8:	d001      	beq.n	8006fee <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006fea:	f003 f9b3 	bl	800a354 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006fee:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <ReadSolarVoltage+0xa0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 }
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			@ (mov r8, r8)
 8006ffc:	20000ac4 	.word	0x20000ac4
 8007000:	3c008000 	.word	0x3c008000
 8007004:	20000b00 	.word	0x20000b00
 8007008:	20000034 	.word	0x20000034
 800700c:	00000fff 	.word	0x00000fff
 8007010:	20000ad4 	.word	0x20000ad4
 8007014:	00001001 	.word	0x00001001

08007018 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 800701c:	23a0      	movs	r3, #160	@ 0xa0
 800701e:	05db      	lsls	r3, r3, #23
 8007020:	2180      	movs	r1, #128	@ 0x80
 8007022:	0018      	movs	r0, r3
 8007024:	f00b fabc 	bl	80125a0 <HAL_GPIO_ReadPin>
 8007028:	0003      	movs	r3, r0
 800702a:	1e5a      	subs	r2, r3, #1
 800702c:	4193      	sbcs	r3, r2
 800702e:	b2db      	uxtb	r3, r3
}
 8007030:	0018      	movs	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8007036:	b580      	push	{r7, lr}
 8007038:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800703a:	2380      	movs	r3, #128	@ 0x80
 800703c:	021a      	lsls	r2, r3, #8
 800703e:	23a0      	movs	r3, #160	@ 0xa0
 8007040:	05db      	lsls	r3, r3, #23
 8007042:	0011      	movs	r1, r2
 8007044:	0018      	movs	r0, r3
 8007046:	f00b faab 	bl	80125a0 <HAL_GPIO_ReadPin>
 800704a:	0003      	movs	r3, r0
 800704c:	1e5a      	subs	r2, r3, #1
 800704e:	4193      	sbcs	r3, r2
 8007050:	b2db      	uxtb	r3, r3
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <UserButton_Pressed+0x1c>)
 800705e:	2104      	movs	r1, #4
 8007060:	0018      	movs	r0, r3
 8007062:	f00b fa9d 	bl	80125a0 <HAL_GPIO_ReadPin>
 8007066:	0003      	movs	r3, r0
 8007068:	425a      	negs	r2, r3
 800706a:	4153      	adcs	r3, r2
 800706c:	b2db      	uxtb	r3, r3
}
 800706e:	0018      	movs	r0, r3
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	50000c00 	.word	0x50000c00

08007078 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8007078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707a:	46d6      	mov	lr, sl
 800707c:	464f      	mov	r7, r9
 800707e:	4646      	mov	r6, r8
 8007080:	b5c0      	push	{r6, r7, lr}
 8007082:	b08e      	sub	sp, #56	@ 0x38
 8007084:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8007086:	4b21      	ldr	r3, [pc, #132]	@ (800710c <showTime+0x94>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d036      	beq.n	80070fc <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800708e:	003a      	movs	r2, r7
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	0011      	movs	r1, r2
 8007094:	0018      	movs	r0, r3
 8007096:	f000 fa2b 	bl	80074f0 <RTC_GetTime>
  UpdateSystemUptime();
 800709a:	f000 f83f 	bl	800711c <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800709e:	003b      	movs	r3, r7
 80070a0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070a2:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80070a4:	003b      	movs	r3, r7
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070aa:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <showTime+0x98>)
 80070ac:	0092      	lsls	r2, r2, #2
 80070ae:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80070b0:	003b      	movs	r3, r7
 80070b2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070b4:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070ba:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80070bc:	1d3b      	adds	r3, r7, #4
 80070be:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070c0:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070c2:	1d3b      	adds	r3, r7, #4
 80070c4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070c6:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070c8:	4b12      	ldr	r3, [pc, #72]	@ (8007114 <showTime+0x9c>)
 80070ca:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070cc:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070ce:	4b11      	ldr	r3, [pc, #68]	@ (8007114 <showTime+0x9c>)
 80070d0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070d2:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007114 <showTime+0x9c>)
 80070d6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070d8:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070da:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <showTime+0x9c>)
 80070dc:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070de:	480e      	ldr	r0, [pc, #56]	@ (8007118 <showTime+0xa0>)
 80070e0:	9306      	str	r3, [sp, #24]
 80070e2:	4643      	mov	r3, r8
 80070e4:	9305      	str	r3, [sp, #20]
 80070e6:	4663      	mov	r3, ip
 80070e8:	9304      	str	r3, [sp, #16]
 80070ea:	9603      	str	r6, [sp, #12]
 80070ec:	9502      	str	r5, [sp, #8]
 80070ee:	9401      	str	r4, [sp, #4]
 80070f0:	9100      	str	r1, [sp, #0]
 80070f2:	4653      	mov	r3, sl
 80070f4:	4649      	mov	r1, r9
 80070f6:	f01b fb1b 	bl	8022730 <iprintf>
 80070fa:	e000      	b.n	80070fe <showTime+0x86>
    return;
 80070fc:	46c0      	nop			@ (mov r8, r8)
}
 80070fe:	46bd      	mov	sp, r7
 8007100:	b006      	add	sp, #24
 8007102:	bce0      	pop	{r5, r6, r7}
 8007104:	46ba      	mov	sl, r7
 8007106:	46b1      	mov	r9, r6
 8007108:	46a8      	mov	r8, r5
 800710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710c:	20000ae4 	.word	0x20000ae4
 8007110:	20000054 	.word	0x20000054
 8007114:	20000ad8 	.word	0x20000ad8
 8007118:	08026c98 	.word	0x08026c98

0800711c <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8007122:	003a      	movs	r2, r7
 8007124:	1d3b      	adds	r3, r7, #4
 8007126:	0011      	movs	r1, r2
 8007128:	0018      	movs	r0, r3
 800712a:	f000 f9e1 	bl	80074f0 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800712e:	1d3a      	adds	r2, r7, #4
 8007130:	003b      	movs	r3, r7
 8007132:	0011      	movs	r1, r2
 8007134:	0018      	movs	r0, r3
 8007136:	f000 fbad 	bl	8007894 <makeTime>
 800713a:	0002      	movs	r2, r0
 800713c:	4b1e      	ldr	r3, [pc, #120]	@ (80071b8 <UpdateSystemUptime+0x9c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	213c      	movs	r1, #60	@ 0x3c
 800714c:	0018      	movs	r0, r3
 800714e:	f7f9 f8af 	bl	80002b0 <__aeabi_uidivmod>
 8007152:	000b      	movs	r3, r1
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4b19      	ldr	r3, [pc, #100]	@ (80071bc <UpdateSystemUptime+0xa0>)
 8007158:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	213c      	movs	r1, #60	@ 0x3c
 800715e:	0018      	movs	r0, r3
 8007160:	f7f9 f820 	bl	80001a4 <__udivsi3>
 8007164:	0003      	movs	r3, r0
 8007166:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	213c      	movs	r1, #60	@ 0x3c
 800716c:	0018      	movs	r0, r3
 800716e:	f7f9 f89f 	bl	80002b0 <__aeabi_uidivmod>
 8007172:	000b      	movs	r3, r1
 8007174:	b2da      	uxtb	r2, r3
 8007176:	4b11      	ldr	r3, [pc, #68]	@ (80071bc <UpdateSystemUptime+0xa0>)
 8007178:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	213c      	movs	r1, #60	@ 0x3c
 800717e:	0018      	movs	r0, r3
 8007180:	f7f9 f810 	bl	80001a4 <__udivsi3>
 8007184:	0003      	movs	r3, r0
 8007186:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2118      	movs	r1, #24
 800718c:	0018      	movs	r0, r3
 800718e:	f7f9 f88f 	bl	80002b0 <__aeabi_uidivmod>
 8007192:	000b      	movs	r3, r1
 8007194:	b2da      	uxtb	r2, r3
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <UpdateSystemUptime+0xa0>)
 8007198:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2118      	movs	r1, #24
 800719e:	0018      	movs	r0, r3
 80071a0:	f7f9 f800 	bl	80001a4 <__udivsi3>
 80071a4:	0003      	movs	r3, r0
 80071a6:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	4b03      	ldr	r3, [pc, #12]	@ (80071bc <UpdateSystemUptime+0xa0>)
 80071ae:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80071b0:	46c0      	nop			@ (mov r8, r8)
 80071b2:	46bd      	mov	sp, r7
 80071b4:	b008      	add	sp, #32
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000ae4 	.word	0x20000ae4
 80071bc:	20000ad8 	.word	0x20000ad8

080071c0 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	0008      	movs	r0, r1
 80071ca:	0011      	movs	r1, r2
 80071cc:	1cfb      	adds	r3, r7, #3
 80071ce:	1c02      	adds	r2, r0, #0
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	1cbb      	adds	r3, r7, #2
 80071d4:	1c0a      	adds	r2, r1, #0
 80071d6:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80071d8:	230e      	movs	r3, #14
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80071e0:	230f      	movs	r3, #15
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	1cfa      	adds	r2, r7, #3
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e015      	b.n	8007218 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80071ec:	200f      	movs	r0, #15
 80071ee:	183b      	adds	r3, r7, r0
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	18d2      	adds	r2, r2, r3
 80071f6:	240e      	movs	r4, #14
 80071f8:	193b      	adds	r3, r7, r4
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	7811      	ldrb	r1, [r2, #0]
 80071fe:	2208      	movs	r2, #8
 8007200:	18ba      	adds	r2, r7, r2
 8007202:	54d1      	strb	r1, [r2, r3]
    pos++;
 8007204:	193b      	adds	r3, r7, r4
 8007206:	781a      	ldrb	r2, [r3, #0]
 8007208:	193b      	adds	r3, r7, r4
 800720a:	3201      	adds	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800720e:	183b      	adds	r3, r7, r0
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	183b      	adds	r3, r7, r0
 8007214:	3201      	adds	r2, #1
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	200f      	movs	r0, #15
 800721a:	183a      	adds	r2, r7, r0
 800721c:	1cbb      	adds	r3, r7, #2
 800721e:	7812      	ldrb	r2, [r2, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d9e2      	bls.n	80071ec <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8007226:	230e      	movs	r3, #14
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2208      	movs	r2, #8
 800722e:	18ba      	adds	r2, r7, r2
 8007230:	2100      	movs	r1, #0
 8007232:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8007234:	1cfb      	adds	r3, r7, #3
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b13      	cmp	r3, #19
 800723a:	d849      	bhi.n	80072d0 <aBuff2int+0x110>
    if (start == 17) { //month
 800723c:	1cfb      	adds	r3, r7, #3
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b11      	cmp	r3, #17
 8007242:	d122      	bne.n	800728a <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8007244:	183b      	adds	r3, r7, r0
 8007246:	2200      	movs	r2, #0
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e018      	b.n	800727e <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800724c:	240f      	movs	r4, #15
 800724e:	193b      	adds	r3, r7, r4
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	4b25      	ldr	r3, [pc, #148]	@ (80072e8 <aBuff2int+0x128>)
 8007254:	0092      	lsls	r2, r2, #2
 8007256:	58d2      	ldr	r2, [r2, r3]
 8007258:	2308      	movs	r3, #8
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	0011      	movs	r1, r2
 800725e:	0018      	movs	r0, r3
 8007260:	f7f8 ff7a 	bl	8000158 <strcmp>
 8007264:	1e03      	subs	r3, r0, #0
 8007266:	d104      	bne.n	8007272 <aBuff2int+0xb2>
          return i+1;
 8007268:	193b      	adds	r3, r7, r4
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	e035      	b.n	80072de <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8007272:	210f      	movs	r1, #15
 8007274:	187b      	adds	r3, r7, r1
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	187b      	adds	r3, r7, r1
 800727a:	3201      	adds	r2, #1
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	230f      	movs	r3, #15
 8007280:	18fb      	adds	r3, r7, r3
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b0b      	cmp	r3, #11
 8007286:	d9e1      	bls.n	800724c <aBuff2int+0x8c>
 8007288:	e022      	b.n	80072d0 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800728a:	230f      	movs	r3, #15
 800728c:	18fb      	adds	r3, r7, r3
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	e018      	b.n	80072c6 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8007294:	240f      	movs	r4, #15
 8007296:	193b      	adds	r3, r7, r4
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	4b14      	ldr	r3, [pc, #80]	@ (80072ec <aBuff2int+0x12c>)
 800729c:	0092      	lsls	r2, r2, #2
 800729e:	58d2      	ldr	r2, [r2, r3]
 80072a0:	2308      	movs	r3, #8
 80072a2:	18fb      	adds	r3, r7, r3
 80072a4:	0011      	movs	r1, r2
 80072a6:	0018      	movs	r0, r3
 80072a8:	f7f8 ff56 	bl	8000158 <strcmp>
 80072ac:	1e03      	subs	r3, r0, #0
 80072ae:	d104      	bne.n	80072ba <aBuff2int+0xfa>
          return i+1;
 80072b0:	193b      	adds	r3, r7, r4
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	3301      	adds	r3, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	e011      	b.n	80072de <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80072ba:	210f      	movs	r1, #15
 80072bc:	187b      	adds	r3, r7, r1
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	187b      	adds	r3, r7, r1
 80072c2:	3201      	adds	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	230f      	movs	r3, #15
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b06      	cmp	r3, #6
 80072ce:	d9e1      	bls.n	8007294 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80072d0:	2308      	movs	r3, #8
 80072d2:	18fb      	adds	r3, r7, r3
 80072d4:	0018      	movs	r0, r3
 80072d6:	f019 fe50 	bl	8020f7a <atoi>
 80072da:	0003      	movs	r3, r0
 80072dc:	b2db      	uxtb	r3, r3
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b005      	add	sp, #20
 80072e4:	bd90      	pop	{r4, r7, pc}
 80072e6:	46c0      	nop			@ (mov r8, r8)
 80072e8:	20000054 	.word	0x20000054
 80072ec:	20000038 	.word	0x20000038

080072f0 <ParseTime>:

void ParseTime(char* buffer) {
 80072f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f2:	b08b      	sub	sp, #44	@ 0x2c
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80072f8:	2408      	movs	r4, #8
 80072fa:	193a      	adds	r2, r7, r4
 80072fc:	260c      	movs	r6, #12
 80072fe:	19bb      	adds	r3, r7, r6
 8007300:	0011      	movs	r1, r2
 8007302:	0018      	movs	r0, r3
 8007304:	f000 f8f4 	bl	80074f0 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2219      	movs	r2, #25
 800730c:	2118      	movs	r1, #24
 800730e:	0018      	movs	r0, r3
 8007310:	f7ff ff56 	bl	80071c0 <aBuff2int>
 8007314:	0003      	movs	r3, r0
 8007316:	001a      	movs	r2, r3
 8007318:	19bb      	adds	r3, r7, r6
 800731a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	221c      	movs	r2, #28
 8007320:	211b      	movs	r1, #27
 8007322:	0018      	movs	r0, r3
 8007324:	f7ff ff4c 	bl	80071c0 <aBuff2int>
 8007328:	0003      	movs	r3, r0
 800732a:	001a      	movs	r2, r3
 800732c:	19bb      	adds	r3, r7, r6
 800732e:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	221f      	movs	r2, #31
 8007334:	211e      	movs	r1, #30
 8007336:	0018      	movs	r0, r3
 8007338:	f7ff ff42 	bl	80071c0 <aBuff2int>
 800733c:	0003      	movs	r3, r0
 800733e:	001a      	movs	r2, r3
 8007340:	19bb      	adds	r3, r7, r6
 8007342:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2224      	movs	r2, #36	@ 0x24
 8007348:	2123      	movs	r1, #35	@ 0x23
 800734a:	0018      	movs	r0, r3
 800734c:	f7ff ff38 	bl	80071c0 <aBuff2int>
 8007350:	0003      	movs	r3, r0
 8007352:	001a      	movs	r2, r3
 8007354:	0025      	movs	r5, r4
 8007356:	197b      	adds	r3, r7, r5
 8007358:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2213      	movs	r2, #19
 800735e:	2111      	movs	r1, #17
 8007360:	0018      	movs	r0, r3
 8007362:	f7ff ff2d 	bl	80071c0 <aBuff2int>
 8007366:	0003      	movs	r3, r0
 8007368:	001a      	movs	r2, r3
 800736a:	197b      	adds	r3, r7, r5
 800736c:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2216      	movs	r2, #22
 8007372:	2115      	movs	r1, #21
 8007374:	0018      	movs	r0, r3
 8007376:	f7ff ff23 	bl	80071c0 <aBuff2int>
 800737a:	0003      	movs	r3, r0
 800737c:	001a      	movs	r2, r3
 800737e:	197b      	adds	r3, r7, r5
 8007380:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	220f      	movs	r2, #15
 8007386:	210d      	movs	r1, #13
 8007388:	0018      	movs	r0, r3
 800738a:	f7ff ff19 	bl	80071c0 <aBuff2int>
 800738e:	0003      	movs	r3, r0
 8007390:	001a      	movs	r2, r3
 8007392:	197b      	adds	r3, r7, r5
 8007394:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8007396:	19bb      	adds	r3, r7, r6
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	001c      	movs	r4, r3
 800739c:	19bb      	adds	r3, r7, r6
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	0018      	movs	r0, r3
 80073a2:	19bb      	adds	r3, r7, r6
 80073a4:	789b      	ldrb	r3, [r3, #2]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007418 <ParseTime+0x128>)
 80073a8:	491c      	ldr	r1, [pc, #112]	@ (800741c <ParseTime+0x12c>)
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	9000      	str	r0, [sp, #0]
 80073ae:	0023      	movs	r3, r4
 80073b0:	2003      	movs	r0, #3
 80073b2:	f009 fa35 	bl	8010820 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80073b6:	197b      	adds	r3, r7, r5
 80073b8:	789b      	ldrb	r3, [r3, #2]
 80073ba:	001c      	movs	r4, r3
 80073bc:	197b      	adds	r3, r7, r5
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	0018      	movs	r0, r3
 80073c2:	197b      	adds	r3, r7, r5
 80073c4:	78db      	ldrb	r3, [r3, #3]
 80073c6:	4a16      	ldr	r2, [pc, #88]	@ (8007420 <ParseTime+0x130>)
 80073c8:	4914      	ldr	r1, [pc, #80]	@ (800741c <ParseTime+0x12c>)
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	9000      	str	r0, [sp, #0]
 80073ce:	0023      	movs	r3, r4
 80073d0:	2003      	movs	r0, #3
 80073d2:	f009 fa25 	bl	8010820 <CreateLine>
  RTC_SetTime(&currentTime);
 80073d6:	19bb      	adds	r3, r7, r6
 80073d8:	0018      	movs	r0, r3
 80073da:	f000 f825 	bl	8007428 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80073de:	197b      	adds	r3, r7, r5
 80073e0:	0018      	movs	r0, r3
 80073e2:	f000 f847 	bl	8007474 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80073e6:	197b      	adds	r3, r7, r5
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d101      	bne.n	80073f2 <ParseTime+0x102>
    reset_fanCleaningDone();
 80073ee:	f004 f82d 	bl	800b44c <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80073f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007424 <ParseTime+0x134>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 80073fa:	230c      	movs	r3, #12
 80073fc:	18fa      	adds	r2, r7, r3
 80073fe:	2308      	movs	r3, #8
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	0011      	movs	r1, r2
 8007404:	0018      	movs	r0, r3
 8007406:	f000 fa45 	bl	8007894 <makeTime>
 800740a:	0002      	movs	r2, r0
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <ParseTime+0x134>)
 800740e:	601a      	str	r2, [r3, #0]
  }
}
 8007410:	46c0      	nop			@ (mov r8, r8)
 8007412:	46bd      	mov	sp, r7
 8007414:	b009      	add	sp, #36	@ 0x24
 8007416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007418:	08026cf0 	.word	0x08026cf0
 800741c:	08026d28 	.word	0x08026d28
 8007420:	08026d2c 	.word	0x08026d2c
 8007424:	20000ae4 	.word	0x20000ae4

08007428 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8007442:	4b09      	ldr	r3, [pc, #36]	@ (8007468 <RTC_SetTime+0x40>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	0018      	movs	r0, r3
 800744c:	f011 f9ec 	bl	8018828 <HAL_RTC_SetTime>
 8007450:	1e03      	subs	r3, r0, #0
 8007452:	d005      	beq.n	8007460 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8007454:	4a05      	ldr	r2, [pc, #20]	@ (800746c <RTC_SetTime+0x44>)
 8007456:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <RTC_SetTime+0x48>)
 8007458:	0019      	movs	r1, r3
 800745a:	2001      	movs	r0, #1
 800745c:	f009 f9e0 	bl	8010820 <CreateLine>
    }
}
 8007460:	46c0      	nop			@ (mov r8, r8)
 8007462:	46bd      	mov	sp, r7
 8007464:	b002      	add	sp, #8
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000ae0 	.word	0x20000ae0
 800746c:	08026d60 	.word	0x08026d60
 8007470:	08026d7c 	.word	0x08026d7c

08007474 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800747c:	4b16      	ldr	r3, [pc, #88]	@ (80074d8 <RTC_SetDate+0x64>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	0018      	movs	r0, r3
 8007486:	f011 fad7 	bl	8018a38 <HAL_RTC_SetDate>
 800748a:	1e03      	subs	r3, r0, #0
 800748c:	d005      	beq.n	800749a <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800748e:	4a13      	ldr	r2, [pc, #76]	@ (80074dc <RTC_SetDate+0x68>)
 8007490:	4b13      	ldr	r3, [pc, #76]	@ (80074e0 <RTC_SetDate+0x6c>)
 8007492:	0019      	movs	r1, r3
 8007494:	2001      	movs	r0, #1
 8007496:	f009 f9c3 	bl	8010820 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800749a:	4b0f      	ldr	r3, [pc, #60]	@ (80074d8 <RTC_SetDate+0x64>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2101      	movs	r1, #1
 80074a0:	0018      	movs	r0, r3
 80074a2:	f011 fe0f 	bl	80190c4 <HAL_RTCEx_BKUPRead>
 80074a6:	0003      	movs	r3, r0
 80074a8:	4a0e      	ldr	r2, [pc, #56]	@ (80074e4 <RTC_SetDate+0x70>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d010      	beq.n	80074d0 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80074ae:	4a0e      	ldr	r2, [pc, #56]	@ (80074e8 <RTC_SetDate+0x74>)
 80074b0:	4b0e      	ldr	r3, [pc, #56]	@ (80074ec <RTC_SetDate+0x78>)
 80074b2:	0019      	movs	r1, r3
 80074b4:	2003      	movs	r0, #3
 80074b6:	f009 f9b3 	bl	8010820 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80074ba:	f010 f935 	bl	8017728 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <RTC_SetDate+0x64>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a08      	ldr	r2, [pc, #32]	@ (80074e4 <RTC_SetDate+0x70>)
 80074c4:	2101      	movs	r1, #1
 80074c6:	0018      	movs	r0, r3
 80074c8:	f011 fde4 	bl	8019094 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80074cc:	f010 f93a 	bl	8017744 <HAL_PWR_DisableBkUpAccess>
    }
}
 80074d0:	46c0      	nop			@ (mov r8, r8)
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b002      	add	sp, #8
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000ae0 	.word	0x20000ae0
 80074dc:	08026d80 	.word	0x08026d80
 80074e0:	08026d7c 	.word	0x08026d7c
 80074e4:	0000bebe 	.word	0x0000bebe
 80074e8:	08026d9c 	.word	0x08026d9c
 80074ec:	08026d28 	.word	0x08026d28

080074f0 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80074f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 80074fa:	250f      	movs	r5, #15
 80074fc:	197b      	adds	r3, r7, r5
 80074fe:	2201      	movs	r2, #1
 8007500:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8007502:	230e      	movs	r3, #14
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800750a:	260c      	movs	r6, #12
 800750c:	19bc      	adds	r4, r7, r6
 800750e:	f008 fa19 	bl	800f944 <powerCheck>
 8007512:	0003      	movs	r3, r0
 8007514:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8007516:	19bb      	adds	r3, r7, r6
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800751e:	197b      	adds	r3, r7, r5
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	197b      	adds	r3, r7, r5
 8007524:	3201      	adds	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8007528:	230d      	movs	r3, #13
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	e039      	b.n	80075a6 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8007532:	4b23      	ldr	r3, [pc, #140]	@ (80075c0 <RTC_GetTime+0xd0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	0018      	movs	r0, r3
 800753c:	f011 fa1e 	bl	801897c <HAL_RTC_GetTime>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d005      	beq.n	8007550 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8007544:	4a1f      	ldr	r2, [pc, #124]	@ (80075c4 <RTC_GetTime+0xd4>)
 8007546:	4b20      	ldr	r3, [pc, #128]	@ (80075c8 <RTC_GetTime+0xd8>)
 8007548:	0019      	movs	r1, r3
 800754a:	2001      	movs	r0, #1
 800754c:	f009 f968 	bl	8010820 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007550:	4b1b      	ldr	r3, [pc, #108]	@ (80075c0 <RTC_GetTime+0xd0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	2200      	movs	r2, #0
 8007558:	0018      	movs	r0, r3
 800755a:	f011 fb01 	bl	8018b60 <HAL_RTC_GetDate>
 800755e:	1e03      	subs	r3, r0, #0
 8007560:	d005      	beq.n	800756e <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8007562:	4a1a      	ldr	r2, [pc, #104]	@ (80075cc <RTC_GetTime+0xdc>)
 8007564:	4b18      	ldr	r3, [pc, #96]	@ (80075c8 <RTC_GetTime+0xd8>)
 8007566:	0019      	movs	r1, r3
 8007568:	2001      	movs	r0, #1
 800756a:	f009 f959 	bl	8010820 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800756e:	230c      	movs	r3, #12
 8007570:	18fb      	adds	r3, r7, r3
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d110      	bne.n	800759a <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	210e      	movs	r1, #14
 800757e:	187a      	adds	r2, r7, r1
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d018      	beq.n	80075b8 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8007586:	187b      	adds	r3, r7, r1
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	701a      	strb	r2, [r3, #0]
        t++;
 800758e:	210f      	movs	r1, #15
 8007590:	187b      	adds	r3, r7, r1
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	187b      	adds	r3, r7, r1
 8007596:	3201      	adds	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800759a:	210d      	movs	r1, #13
 800759c:	187b      	adds	r3, r7, r1
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	187b      	adds	r3, r7, r1
 80075a2:	3201      	adds	r2, #1
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	230d      	movs	r3, #13
 80075a8:	18fa      	adds	r2, r7, r3
 80075aa:	230f      	movs	r3, #15
 80075ac:	18fb      	adds	r3, r7, r3
 80075ae:	7812      	ldrb	r2, [r2, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d3bd      	bcc.n	8007532 <RTC_GetTime+0x42>
 80075b6:	e000      	b.n	80075ba <RTC_GetTime+0xca>
      }
      else {
        return;
 80075b8:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b005      	add	sp, #20
 80075be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c0:	20000ae0 	.word	0x20000ae0
 80075c4:	08026db4 	.word	0x08026db4
 80075c8:	08026d7c 	.word	0x08026d7c
 80075cc:	08026dd0 	.word	0x08026dd0

080075d0 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80075d6:	003a      	movs	r2, r7
 80075d8:	1d3b      	adds	r3, r7, #4
 80075da:	0011      	movs	r1, r2
 80075dc:	0018      	movs	r0, r3
 80075de:	f7ff ff87 	bl	80074f0 <RTC_GetTime>
  return currentDate.WeekDay;
 80075e2:	003b      	movs	r3, r7
 80075e4:	781b      	ldrb	r3, [r3, #0]
}
 80075e6:	0018      	movs	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	b006      	add	sp, #24
 80075ec:	bd80      	pop	{r7, pc}

080075ee <getPosixTime>:

uint32_t getPosixTime(void) {
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80075f4:	003a      	movs	r2, r7
 80075f6:	1d3b      	adds	r3, r7, #4
 80075f8:	0011      	movs	r1, r2
 80075fa:	0018      	movs	r0, r3
 80075fc:	f7ff ff78 	bl	80074f0 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8007600:	1d3a      	adds	r2, r7, #4
 8007602:	003b      	movs	r3, r7
 8007604:	0011      	movs	r1, r2
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f944 	bl	8007894 <makeTime>
 800760c:	0003      	movs	r3, r0
}
 800760e:	0018      	movs	r0, r3
 8007610:	46bd      	mov	sp, r7
 8007612:	b006      	add	sp, #24
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8007618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761a:	b08d      	sub	sp, #52	@ 0x34
 800761c:	af04      	add	r7, sp, #16
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8007622:	240c      	movs	r4, #12
 8007624:	193a      	adds	r2, r7, r4
 8007626:	2508      	movs	r5, #8
 8007628:	1979      	adds	r1, r7, r5
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	0018      	movs	r0, r3
 800762e:	f000 f9fb 	bl	8007a28 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007632:	002a      	movs	r2, r5
 8007634:	18bb      	adds	r3, r7, r2
 8007636:	789b      	ldrb	r3, [r3, #2]
 8007638:	001e      	movs	r6, r3
 800763a:	18bb      	adds	r3, r7, r2
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	469c      	mov	ip, r3
 8007640:	18bb      	adds	r3, r7, r2
 8007642:	78db      	ldrb	r3, [r3, #3]
 8007644:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007646:	0021      	movs	r1, r4
 8007648:	187b      	adds	r3, r7, r1
 800764a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800764c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800764e:	187b      	adds	r3, r7, r1
 8007650:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007652:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007654:	187b      	adds	r3, r7, r1
 8007656:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007658:	4906      	ldr	r1, [pc, #24]	@ (8007674 <getUTCfromPosixTime+0x5c>)
 800765a:	6838      	ldr	r0, [r7, #0]
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	9502      	str	r5, [sp, #8]
 8007660:	9401      	str	r4, [sp, #4]
 8007662:	9200      	str	r2, [sp, #0]
 8007664:	4663      	mov	r3, ip
 8007666:	0032      	movs	r2, r6
 8007668:	f01b f8d2 	bl	8022810 <siprintf>
}
 800766c:	46c0      	nop			@ (mov r8, r8)
 800766e:	46bd      	mov	sp, r7
 8007670:	b009      	add	sp, #36	@ 0x24
 8007672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007674:	08026dec 	.word	0x08026dec

08007678 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8007680:	4b10      	ldr	r3, [pc, #64]	@ (80076c4 <RTC_SetWakeUpTimer+0x4c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	0018      	movs	r0, r3
 8007686:	f011 fc69 	bl	8018f5c <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800768a:	4b0e      	ldr	r3, [pc, #56]	@ (80076c4 <RTC_SetWakeUpTimer+0x4c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	22ff      	movs	r2, #255	@ 0xff
 8007694:	401a      	ands	r2, r3
 8007696:	4b0b      	ldr	r3, [pc, #44]	@ (80076c4 <RTC_SetWakeUpTimer+0x4c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	490a      	ldr	r1, [pc, #40]	@ (80076c8 <RTC_SetWakeUpTimer+0x50>)
 800769e:	430a      	orrs	r2, r1
 80076a0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80076a2:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <RTC_SetWakeUpTimer+0x54>)
 80076a4:	2280      	movs	r2, #128	@ 0x80
 80076a6:	0352      	lsls	r2, r2, #13
 80076a8:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80076aa:	4b06      	ldr	r3, [pc, #24]	@ (80076c4 <RTC_SetWakeUpTimer+0x4c>)
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	2204      	movs	r2, #4
 80076b4:	0019      	movs	r1, r3
 80076b6:	f011 fb79 	bl	8018dac <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	46bd      	mov	sp, r7
 80076be:	b002      	add	sp, #8
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	20000ae0 	.word	0x20000ae0
 80076c8:	fffffb7f 	.word	0xfffffb7f
 80076cc:	40010400 	.word	0x40010400

080076d0 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80076d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007704 <Enter_Standby_Mode+0x34>)
 80076d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <Enter_Standby_Mode+0x38>)
 80076d8:	0019      	movs	r1, r3
 80076da:	2003      	movs	r0, #3
 80076dc:	f009 f8a0 	bl	8010820 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 80076e0:	2064      	movs	r0, #100	@ 0x64
 80076e2:	f009 fcf3 	bl	80110cc <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80076e6:	4b09      	ldr	r3, [pc, #36]	@ (800770c <Enter_Standby_Mode+0x3c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	0018      	movs	r0, r3
 80076ec:	f011 fc36 	bl	8018f5c <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80076f0:	f002 f86a 	bl	80097c8 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 80076f4:	f009 fd0e 	bl	8011114 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 80076f8:	f010 f890 	bl	801781c <HAL_PWR_EnterSTANDBYMode>
}
 80076fc:	46c0      	nop			@ (mov r8, r8)
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	08026e40 	.word	0x08026e40
 8007708:	08026d28 	.word	0x08026d28
 800770c:	20000ae0 	.word	0x20000ae0

08007710 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af02      	add	r7, sp, #8
 8007716:	0002      	movs	r2, r0
 8007718:	1dbb      	adds	r3, r7, #6
 800771a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800771c:	4b4a      	ldr	r3, [pc, #296]	@ (8007848 <Enter_Stop_Mode+0x138>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8007724:	f003 fe66 	bl	800b3f4 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007728:	f7ff fbc0 	bl	8006eac <ReadBatteryVoltage>
 800772c:	1c03      	adds	r3, r0, #0
 800772e:	1c18      	adds	r0, r3, #0
 8007730:	f7fb fe98 	bl	8003464 <__aeabi_f2d>
 8007734:	0002      	movs	r2, r0
 8007736:	000b      	movs	r3, r1
 8007738:	4844      	ldr	r0, [pc, #272]	@ (800784c <Enter_Stop_Mode+0x13c>)
 800773a:	4945      	ldr	r1, [pc, #276]	@ (8007850 <Enter_Stop_Mode+0x140>)
 800773c:	9200      	str	r2, [sp, #0]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	0002      	movs	r2, r0
 8007742:	2002      	movs	r0, #2
 8007744:	f009 f86c 	bl	8010820 <CreateLine>
  powerDisplay(powerCheck());
 8007748:	f008 f8fc 	bl	800f944 <powerCheck>
 800774c:	0003      	movs	r3, r0
 800774e:	0018      	movs	r0, r3
 8007750:	f008 f914 	bl	800f97c <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8007754:	1dbb      	adds	r3, r7, #6
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	4a3e      	ldr	r2, [pc, #248]	@ (8007854 <Enter_Stop_Mode+0x144>)
 800775a:	493f      	ldr	r1, [pc, #252]	@ (8007858 <Enter_Stop_Mode+0x148>)
 800775c:	2003      	movs	r0, #3
 800775e:	f009 f85f 	bl	8010820 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8007762:	f7ff ff44 	bl	80075ee <getPosixTime>
 8007766:	0002      	movs	r2, r0
 8007768:	1dbb      	adds	r3, r7, #6
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	18d3      	adds	r3, r2, r3
 800776e:	4a3b      	ldr	r2, [pc, #236]	@ (800785c <Enter_Stop_Mode+0x14c>)
 8007770:	0011      	movs	r1, r2
 8007772:	0018      	movs	r0, r3
 8007774:	f7ff ff50 	bl	8007618 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8007778:	4b38      	ldr	r3, [pc, #224]	@ (800785c <Enter_Stop_Mode+0x14c>)
 800777a:	4a39      	ldr	r2, [pc, #228]	@ (8007860 <Enter_Stop_Mode+0x150>)
 800777c:	4934      	ldr	r1, [pc, #208]	@ (8007850 <Enter_Stop_Mode+0x140>)
 800777e:	2002      	movs	r0, #2
 8007780:	f009 f84e 	bl	8010820 <CreateLine>
  HAL_Delay(100);
 8007784:	2064      	movs	r0, #100	@ 0x64
 8007786:	f009 fca1 	bl	80110cc <HAL_Delay>
  HAL_SuspendTick();
 800778a:	f009 fcc3 	bl	8011114 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800778e:	1dbb      	adds	r3, r7, #6
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	0018      	movs	r0, r3
 8007794:	f7ff ff70 	bl	8007678 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8007798:	2101      	movs	r1, #1
 800779a:	2001      	movs	r0, #1
 800779c:	f00f ffe2 	bl	8017764 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80077a0:	f002 fc88 	bl	800a0b4 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 80077a4:	f009 fcc4 	bl	8011130 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 80077a8:	1dbb      	adds	r3, r7, #6
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	0018      	movs	r0, r3
 80077ae:	f003 fd95 	bl	800b2dc <sen5x_enable>
 80077b2:	1e03      	subs	r3, r0, #0
 80077b4:	d01e      	beq.n	80077f4 <Enter_Stop_Mode+0xe4>
    showTime();
 80077b6:	f7ff fc5f 	bl	8007078 <showTime>
    set_light_on_state();
 80077ba:	f004 fa9d 	bl	800bcf8 <set_light_on_state>
    if (!userToggle) {
 80077be:	4b29      	ldr	r3, [pc, #164]	@ (8007864 <Enter_Stop_Mode+0x154>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	4053      	eors	r3, r2
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d013      	beq.n	80077f4 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 80077cc:	201c      	movs	r0, #28
 80077ce:	f7ff ff53 	bl	8007678 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80077d2:	4a20      	ldr	r2, [pc, #128]	@ (8007854 <Enter_Stop_Mode+0x144>)
 80077d4:	4920      	ldr	r1, [pc, #128]	@ (8007858 <Enter_Stop_Mode+0x148>)
 80077d6:	231c      	movs	r3, #28
 80077d8:	2003      	movs	r0, #3
 80077da:	f009 f821 	bl	8010820 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80077de:	2101      	movs	r1, #1
 80077e0:	2001      	movs	r0, #1
 80077e2:	f00f ffbf 	bl	8017764 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 80077e6:	f002 fc65 	bl	800a0b4 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 80077ea:	f009 fca1 	bl	8011130 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 80077ee:	2000      	movs	r0, #0
 80077f0:	f003 fd52 	bl	800b298 <setsen5xReadTimer>
    }
  }
  showTime();
 80077f4:	f7ff fc40 	bl	8007078 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 80077f8:	f003 f9e8 	bl	800abcc <ResetDBACalculator>
  ResetSGP40samplecounter();
 80077fc:	f006 f8d8 	bl	800d9b0 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8007800:	2000      	movs	r0, #0
 8007802:	f003 fd5b 	bl	800b2bc <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8007806:	4b18      	ldr	r3, [pc, #96]	@ (8007868 <Enter_Stop_Mode+0x158>)
 8007808:	0018      	movs	r0, r3
 800780a:	f7fb ff2b 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800780e:	201e      	movs	r0, #30
 8007810:	f006 f8bc 	bl	800d98c <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8007814:	2000      	movs	r0, #0
 8007816:	f009 f9c7 	bl	8010ba8 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800781a:	203c      	movs	r0, #60	@ 0x3c
 800781c:	f000 fb72 	bl	8007f04 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8007820:	205a      	movs	r0, #90	@ 0x5a
 8007822:	f000 febb 	bl	800859c <setBMP280TimeStamp>
  setMICTimeStamp(0);
 8007826:	2000      	movs	r0, #0
 8007828:	f003 f9be 	bl	800aba8 <setMICTimeStamp>
  ESPTransmitDone = false;
 800782c:	4b0f      	ldr	r3, [pc, #60]	@ (800786c <Enter_Stop_Mode+0x15c>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8007832:	f009 fc41 	bl	80110b8 <HAL_GetTick>
 8007836:	0003      	movs	r3, r0
 8007838:	4a0d      	ldr	r2, [pc, #52]	@ (8007870 <Enter_Stop_Mode+0x160>)
 800783a:	189a      	adds	r2, r3, r2
 800783c:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <Enter_Stop_Mode+0x164>)
 800783e:	601a      	str	r2, [r3, #0]
}
 8007840:	46c0      	nop			@ (mov r8, r8)
 8007842:	46bd      	mov	sp, r7
 8007844:	b002      	add	sp, #8
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000e45 	.word	0x20000e45
 800784c:	08026e64 	.word	0x08026e64
 8007850:	08026e7c 	.word	0x08026e7c
 8007854:	08026e80 	.word	0x08026e80
 8007858:	08026d28 	.word	0x08026d28
 800785c:	20000ae8 	.word	0x20000ae8
 8007860:	08026ea4 	.word	0x08026ea4
 8007864:	20001dd6 	.word	0x20001dd6
 8007868:	00001194 	.word	0x00001194
 800786c:	20000564 	.word	0x20000564
 8007870:	00000bb8 	.word	0x00000bb8
 8007874:	20000d9c 	.word	0x20000d9c

08007878 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8007880:	4b03      	ldr	r3, [pc, #12]	@ (8007890 <InitClock+0x18>)
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	46bd      	mov	sp, r7
 800788a:	b002      	add	sp, #8
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	20000ae0 	.word	0x20000ae0

08007894 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	78db      	ldrb	r3, [r3, #3]
 80078a2:	001a      	movs	r2, r3
 80078a4:	0013      	movs	r3, r2
 80078a6:	025b      	lsls	r3, r3, #9
 80078a8:	189b      	adds	r3, r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	189b      	adds	r3, r3, r2
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	189b      	adds	r3, r3, r2
 80078b2:	011a      	lsls	r2, r3, #4
 80078b4:	1ad2      	subs	r2, r2, r3
 80078b6:	01d3      	lsls	r3, r2, #7
 80078b8:	001a      	movs	r2, r3
 80078ba:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e028      	b.n	8007914 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4a53      	ldr	r2, [pc, #332]	@ (8007a14 <makeTime+0x180>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	db21      	blt.n	800790e <makeTime+0x7a>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4a52      	ldr	r2, [pc, #328]	@ (8007a18 <makeTime+0x184>)
 80078ce:	4694      	mov	ip, r2
 80078d0:	4463      	add	r3, ip
 80078d2:	001a      	movs	r2, r3
 80078d4:	2303      	movs	r3, #3
 80078d6:	4013      	ands	r3, r2
 80078d8:	d119      	bne.n	800790e <makeTime+0x7a>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4a4e      	ldr	r2, [pc, #312]	@ (8007a18 <makeTime+0x184>)
 80078de:	4694      	mov	ip, r2
 80078e0:	4463      	add	r3, ip
 80078e2:	2164      	movs	r1, #100	@ 0x64
 80078e4:	0018      	movs	r0, r3
 80078e6:	f7f8 fdcd 	bl	8000484 <__aeabi_idivmod>
 80078ea:	1e0b      	subs	r3, r1, #0
 80078ec:	d10a      	bne.n	8007904 <makeTime+0x70>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a49      	ldr	r2, [pc, #292]	@ (8007a18 <makeTime+0x184>)
 80078f2:	4694      	mov	ip, r2
 80078f4:	4463      	add	r3, ip
 80078f6:	22c8      	movs	r2, #200	@ 0xc8
 80078f8:	0051      	lsls	r1, r2, #1
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7f8 fdc2 	bl	8000484 <__aeabi_idivmod>
 8007900:	1e0b      	subs	r3, r1, #0
 8007902:	d104      	bne.n	800790e <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4a45      	ldr	r2, [pc, #276]	@ (8007a1c <makeTime+0x188>)
 8007908:	4694      	mov	ip, r2
 800790a:	4463      	add	r3, ip
 800790c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3301      	adds	r3, #1
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	001a      	movs	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4293      	cmp	r3, r2
 800791e:	dbd0      	blt.n	80078c2 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8007920:	2301      	movs	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e03c      	b.n	80079a0 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b02      	cmp	r3, #2
 800792a:	d125      	bne.n	8007978 <makeTime+0xe4>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	78db      	ldrb	r3, [r3, #3]
 8007930:	4a39      	ldr	r2, [pc, #228]	@ (8007a18 <makeTime+0x184>)
 8007932:	4694      	mov	ip, r2
 8007934:	4463      	add	r3, ip
 8007936:	001a      	movs	r2, r3
 8007938:	2303      	movs	r3, #3
 800793a:	4013      	ands	r3, r2
 800793c:	d11c      	bne.n	8007978 <makeTime+0xe4>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	78db      	ldrb	r3, [r3, #3]
 8007942:	4a35      	ldr	r2, [pc, #212]	@ (8007a18 <makeTime+0x184>)
 8007944:	4694      	mov	ip, r2
 8007946:	4463      	add	r3, ip
 8007948:	2164      	movs	r1, #100	@ 0x64
 800794a:	0018      	movs	r0, r3
 800794c:	f7f8 fd9a 	bl	8000484 <__aeabi_idivmod>
 8007950:	1e0b      	subs	r3, r1, #0
 8007952:	d10b      	bne.n	800796c <makeTime+0xd8>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	78db      	ldrb	r3, [r3, #3]
 8007958:	4a2f      	ldr	r2, [pc, #188]	@ (8007a18 <makeTime+0x184>)
 800795a:	4694      	mov	ip, r2
 800795c:	4463      	add	r3, ip
 800795e:	22c8      	movs	r2, #200	@ 0xc8
 8007960:	0051      	lsls	r1, r2, #1
 8007962:	0018      	movs	r0, r3
 8007964:	f7f8 fd8e 	bl	8000484 <__aeabi_idivmod>
 8007968:	1e0b      	subs	r3, r1, #0
 800796a:	d105      	bne.n	8007978 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a20 <makeTime+0x18c>)
 8007970:	4694      	mov	ip, r2
 8007972:	4463      	add	r3, ip
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	e010      	b.n	800799a <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3b01      	subs	r3, #1
 800797c:	4a29      	ldr	r2, [pc, #164]	@ (8007a24 <makeTime+0x190>)
 800797e:	5cd3      	ldrb	r3, [r2, r3]
 8007980:	001a      	movs	r2, r3
 8007982:	0013      	movs	r3, r2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	189b      	adds	r3, r3, r2
 8007988:	011a      	lsls	r2, r3, #4
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	0113      	lsls	r3, r2, #4
 800798e:	1a9b      	subs	r3, r3, r2
 8007990:	01db      	lsls	r3, r3, #7
 8007992:	001a      	movs	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	189b      	adds	r3, r3, r2
 8007998:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	001a      	movs	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	dbbc      	blt.n	8007926 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	789b      	ldrb	r3, [r3, #2]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	001a      	movs	r2, r3
 80079b4:	0013      	movs	r3, r2
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	189b      	adds	r3, r3, r2
 80079ba:	011a      	lsls	r2, r3, #4
 80079bc:	1ad2      	subs	r2, r2, r3
 80079be:	0113      	lsls	r3, r2, #4
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	01db      	lsls	r3, r3, #7
 80079c4:	001a      	movs	r2, r3
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	189b      	adds	r3, r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	001a      	movs	r2, r3
 80079d2:	0013      	movs	r3, r2
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	011a      	lsls	r2, r3, #4
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	0113      	lsls	r3, r2, #4
 80079de:	001a      	movs	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	001a      	movs	r2, r3
 80079ec:	0013      	movs	r3, r2
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	001a      	movs	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	189b      	adds	r3, r3, r2
 80079fa:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	789b      	ldrb	r3, [r3, #2]
 8007a00:	001a      	movs	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	189b      	adds	r3, r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]
  return seconds;
 8007a08:	68bb      	ldr	r3, [r7, #8]
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b004      	add	sp, #16
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	fffff84f 	.word	0xfffff84f
 8007a18:	000007b2 	.word	0x000007b2
 8007a1c:	00015180 	.word	0x00015180
 8007a20:	00263b80 	.word	0x00263b80
 8007a24:	08028d00 	.word	0x08028d00

08007a28 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007a28:	b590      	push	{r4, r7, lr}
 8007a2a:	b089      	sub	sp, #36	@ 0x24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	213c      	movs	r1, #60	@ 0x3c
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f7f8 fc37 	bl	80002b0 <__aeabi_uidivmod>
 8007a42:	000b      	movs	r3, r1
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	213c      	movs	r1, #60	@ 0x3c
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f7f8 fba8 	bl	80001a4 <__udivsi3>
 8007a54:	0003      	movs	r3, r0
 8007a56:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	213c      	movs	r1, #60	@ 0x3c
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f7f8 fc27 	bl	80002b0 <__aeabi_uidivmod>
 8007a62:	000b      	movs	r3, r1
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	213c      	movs	r1, #60	@ 0x3c
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f7f8 fb98 	bl	80001a4 <__udivsi3>
 8007a74:	0003      	movs	r3, r0
 8007a76:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2118      	movs	r1, #24
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f7f8 fc17 	bl	80002b0 <__aeabi_uidivmod>
 8007a82:	000b      	movs	r3, r1
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2118      	movs	r1, #24
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f7f8 fb88 	bl	80001a4 <__udivsi3>
 8007a94:	0003      	movs	r3, r0
 8007a96:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	2107      	movs	r1, #7
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f7f8 fc06 	bl	80002b0 <__aeabi_uidivmod>
 8007aa4:	000b      	movs	r3, r1
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	701a      	strb	r2, [r3, #0]
  year = 0;
 8007ab0:	231f      	movs	r3, #31
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
  days = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8007abc:	e005      	b.n	8007aca <breakPosixTime+0xa2>
    year++;
 8007abe:	211f      	movs	r1, #31
 8007ac0:	187b      	adds	r3, r7, r1
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	187b      	adds	r3, r7, r1
 8007ac6:	3201      	adds	r2, #1
 8007ac8:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8007aca:	241f      	movs	r4, #31
 8007acc:	193b      	adds	r3, r7, r4
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	4a64      	ldr	r2, [pc, #400]	@ (8007c64 <breakPosixTime+0x23c>)
 8007ad2:	4694      	mov	ip, r2
 8007ad4:	4463      	add	r3, ip
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	2303      	movs	r3, #3
 8007ada:	4013      	ands	r3, r2
 8007adc:	d119      	bne.n	8007b12 <breakPosixTime+0xea>
 8007ade:	193b      	adds	r3, r7, r4
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	4a60      	ldr	r2, [pc, #384]	@ (8007c64 <breakPosixTime+0x23c>)
 8007ae4:	4694      	mov	ip, r2
 8007ae6:	4463      	add	r3, ip
 8007ae8:	2164      	movs	r1, #100	@ 0x64
 8007aea:	0018      	movs	r0, r3
 8007aec:	f7f8 fcca 	bl	8000484 <__aeabi_idivmod>
 8007af0:	1e0b      	subs	r3, r1, #0
 8007af2:	d10b      	bne.n	8007b0c <breakPosixTime+0xe4>
 8007af4:	193b      	adds	r3, r7, r4
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	4a5a      	ldr	r2, [pc, #360]	@ (8007c64 <breakPosixTime+0x23c>)
 8007afa:	4694      	mov	ip, r2
 8007afc:	4463      	add	r3, ip
 8007afe:	22c8      	movs	r2, #200	@ 0xc8
 8007b00:	0051      	lsls	r1, r2, #1
 8007b02:	0018      	movs	r0, r3
 8007b04:	f7f8 fcbe 	bl	8000484 <__aeabi_idivmod>
 8007b08:	1e0b      	subs	r3, r1, #0
 8007b0a:	d102      	bne.n	8007b12 <breakPosixTime+0xea>
 8007b0c:	23b7      	movs	r3, #183	@ 0xb7
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	e001      	b.n	8007b16 <breakPosixTime+0xee>
 8007b12:	236e      	movs	r3, #110	@ 0x6e
 8007b14:	33ff      	adds	r3, #255	@ 0xff
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	18d3      	adds	r3, r2, r3
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d9cc      	bls.n	8007abe <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	241f      	movs	r4, #31
 8007b28:	193a      	adds	r2, r7, r4
 8007b2a:	7812      	ldrb	r2, [r2, #0]
 8007b2c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8007b2e:	193b      	adds	r3, r7, r4
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	4a4c      	ldr	r2, [pc, #304]	@ (8007c64 <breakPosixTime+0x23c>)
 8007b34:	4694      	mov	ip, r2
 8007b36:	4463      	add	r3, ip
 8007b38:	001a      	movs	r2, r3
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	d119      	bne.n	8007b74 <breakPosixTime+0x14c>
 8007b40:	193b      	adds	r3, r7, r4
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4a47      	ldr	r2, [pc, #284]	@ (8007c64 <breakPosixTime+0x23c>)
 8007b46:	4694      	mov	ip, r2
 8007b48:	4463      	add	r3, ip
 8007b4a:	2164      	movs	r1, #100	@ 0x64
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f7f8 fc99 	bl	8000484 <__aeabi_idivmod>
 8007b52:	1e0b      	subs	r3, r1, #0
 8007b54:	d10b      	bne.n	8007b6e <breakPosixTime+0x146>
 8007b56:	193b      	adds	r3, r7, r4
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	4a42      	ldr	r2, [pc, #264]	@ (8007c64 <breakPosixTime+0x23c>)
 8007b5c:	4694      	mov	ip, r2
 8007b5e:	4463      	add	r3, ip
 8007b60:	22c8      	movs	r2, #200	@ 0xc8
 8007b62:	0051      	lsls	r1, r2, #1
 8007b64:	0018      	movs	r0, r3
 8007b66:	f7f8 fc8d 	bl	8000484 <__aeabi_idivmod>
 8007b6a:	1e0b      	subs	r3, r1, #0
 8007b6c:	d102      	bne.n	8007b74 <breakPosixTime+0x14c>
 8007b6e:	23b7      	movs	r3, #183	@ 0xb7
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	e001      	b.n	8007b78 <breakPosixTime+0x150>
 8007b74:	236e      	movs	r3, #110	@ 0x6e
 8007b76:	33ff      	adds	r3, #255	@ 0xff
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	61bb      	str	r3, [r7, #24]

  days=0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
  month=0;
 8007b8a:	211e      	movs	r1, #30
 8007b8c:	187b      	adds	r3, r7, r1
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8007b92:	231d      	movs	r3, #29
 8007b94:	18fb      	adds	r3, r7, r3
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8007b9a:	187b      	adds	r3, r7, r1
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e048      	b.n	8007c34 <breakPosixTime+0x20c>
    if (month==1) { // february
 8007ba2:	231e      	movs	r3, #30
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d12a      	bne.n	8007c02 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8007bac:	241f      	movs	r4, #31
 8007bae:	193b      	adds	r3, r7, r4
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8007c64 <breakPosixTime+0x23c>)
 8007bb4:	4694      	mov	ip, r2
 8007bb6:	4463      	add	r3, ip
 8007bb8:	001a      	movs	r2, r3
 8007bba:	2303      	movs	r3, #3
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d11b      	bne.n	8007bf8 <breakPosixTime+0x1d0>
 8007bc0:	193b      	adds	r3, r7, r4
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	4a27      	ldr	r2, [pc, #156]	@ (8007c64 <breakPosixTime+0x23c>)
 8007bc6:	4694      	mov	ip, r2
 8007bc8:	4463      	add	r3, ip
 8007bca:	2164      	movs	r1, #100	@ 0x64
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f7f8 fc59 	bl	8000484 <__aeabi_idivmod>
 8007bd2:	1e0b      	subs	r3, r1, #0
 8007bd4:	d10b      	bne.n	8007bee <breakPosixTime+0x1c6>
 8007bd6:	193b      	adds	r3, r7, r4
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	4a22      	ldr	r2, [pc, #136]	@ (8007c64 <breakPosixTime+0x23c>)
 8007bdc:	4694      	mov	ip, r2
 8007bde:	4463      	add	r3, ip
 8007be0:	22c8      	movs	r2, #200	@ 0xc8
 8007be2:	0051      	lsls	r1, r2, #1
 8007be4:	0018      	movs	r0, r3
 8007be6:	f7f8 fc4d 	bl	8000484 <__aeabi_idivmod>
 8007bea:	1e0b      	subs	r3, r1, #0
 8007bec:	d104      	bne.n	8007bf8 <breakPosixTime+0x1d0>
        monthLength=29;
 8007bee:	231d      	movs	r3, #29
 8007bf0:	18fb      	adds	r3, r7, r3
 8007bf2:	221d      	movs	r2, #29
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e00c      	b.n	8007c12 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007bf8:	231d      	movs	r3, #29
 8007bfa:	18fb      	adds	r3, r7, r3
 8007bfc:	221c      	movs	r2, #28
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	e007      	b.n	8007c12 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007c02:	231e      	movs	r3, #30
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	781a      	ldrb	r2, [r3, #0]
 8007c08:	231d      	movs	r3, #29
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	4916      	ldr	r1, [pc, #88]	@ (8007c68 <breakPosixTime+0x240>)
 8007c0e:	5c8a      	ldrb	r2, [r1, r2]
 8007c10:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007c12:	211d      	movs	r1, #29
 8007c14:	187b      	adds	r3, r7, r1
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d310      	bcc.n	8007c40 <breakPosixTime+0x218>
      time -= monthLength;
 8007c1e:	187b      	adds	r3, r7, r1
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007c28:	211e      	movs	r1, #30
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	781a      	ldrb	r2, [r3, #0]
 8007c2e:	187b      	adds	r3, r7, r1
 8007c30:	3201      	adds	r2, #1
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	231e      	movs	r3, #30
 8007c36:	18fb      	adds	r3, r7, r3
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b0b      	cmp	r3, #11
 8007c3c:	d9b1      	bls.n	8007ba2 <breakPosixTime+0x17a>
 8007c3e:	e000      	b.n	8007c42 <breakPosixTime+0x21a>
    } else {
        break;
 8007c40:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007c42:	231e      	movs	r3, #30
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	3301      	adds	r3, #1
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	709a      	strb	r2, [r3, #2]
}
 8007c5c:	46c0      	nop			@ (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b009      	add	sp, #36	@ 0x24
 8007c62:	bd90      	pop	{r4, r7, pc}
 8007c64:	000007b2 	.word	0x000007b2
 8007c68:	08028d00 	.word	0x08028d00

08007c6c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007c72:	003b      	movs	r3, r7
 8007c74:	0018      	movs	r0, r3
 8007c76:	2308      	movs	r3, #8
 8007c78:	001a      	movs	r2, r3
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	f01a ff2e 	bl	8022adc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8007c80:	4b30      	ldr	r3, [pc, #192]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c82:	4a31      	ldr	r2, [pc, #196]	@ (8007d48 <MX_ADC_Init+0xdc>)
 8007c84:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8007c86:	4b2f      	ldr	r3, [pc, #188]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c8e:	22c0      	movs	r2, #192	@ 0xc0
 8007c90:	0612      	lsls	r2, r2, #24
 8007c92:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007c94:	4b2b      	ldr	r3, [pc, #172]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007ca0:	4b28      	ldr	r3, [pc, #160]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007ca6:	4b27      	ldr	r3, [pc, #156]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8007cac:	4b25      	ldr	r3, [pc, #148]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cae:	2220      	movs	r2, #32
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007cb4:	4b23      	ldr	r3, [pc, #140]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cb6:	2221      	movs	r2, #33	@ 0x21
 8007cb8:	2101      	movs	r1, #1
 8007cba:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007cbc:	4b21      	ldr	r3, [pc, #132]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007cc2:	4b20      	ldr	r3, [pc, #128]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cc4:	22c2      	movs	r2, #194	@ 0xc2
 8007cc6:	32ff      	adds	r2, #255	@ 0xff
 8007cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8007cca:	4b1e      	ldr	r3, [pc, #120]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ccc:	222c      	movs	r2, #44	@ 0x2c
 8007cce:	2100      	movs	r1, #0
 8007cd0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007cde:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007ce4:	4b17      	ldr	r3, [pc, #92]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007cea:	4b16      	ldr	r3, [pc, #88]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007cf0:	4b14      	ldr	r3, [pc, #80]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f009 fa48 	bl	8011188 <HAL_ADC_Init>
 8007cf8:	1e03      	subs	r3, r0, #0
 8007cfa:	d001      	beq.n	8007d00 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007cfc:	f002 fb2a 	bl	800a354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007d00:	003b      	movs	r3, r7
 8007d02:	4a12      	ldr	r2, [pc, #72]	@ (8007d4c <MX_ADC_Init+0xe0>)
 8007d04:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007d06:	003b      	movs	r3, r7
 8007d08:	2280      	movs	r2, #128	@ 0x80
 8007d0a:	0152      	lsls	r2, r2, #5
 8007d0c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007d0e:	003a      	movs	r2, r7
 8007d10:	4b0c      	ldr	r3, [pc, #48]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007d12:	0011      	movs	r1, r2
 8007d14:	0018      	movs	r0, r3
 8007d16:	f009 fca7 	bl	8011668 <HAL_ADC_ConfigChannel>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d001      	beq.n	8007d22 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007d1e:	f002 fb19 	bl	800a354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007d22:	003b      	movs	r3, r7
 8007d24:	4a0a      	ldr	r2, [pc, #40]	@ (8007d50 <MX_ADC_Init+0xe4>)
 8007d26:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007d28:	003a      	movs	r2, r7
 8007d2a:	4b06      	ldr	r3, [pc, #24]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007d2c:	0011      	movs	r1, r2
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f009 fc9a 	bl	8011668 <HAL_ADC_ConfigChannel>
 8007d34:	1e03      	subs	r3, r0, #0
 8007d36:	d001      	beq.n	8007d3c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007d38:	f002 fb0c 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007d3c:	46c0      	nop			@ (mov r8, r8)
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	b002      	add	sp, #8
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20000b00 	.word	0x20000b00
 8007d48:	40012400 	.word	0x40012400
 8007d4c:	38004000 	.word	0x38004000
 8007d50:	3c008000 	.word	0x3c008000

08007d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007d54:	b590      	push	{r4, r7, lr}
 8007d56:	b089      	sub	sp, #36	@ 0x24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d5c:	240c      	movs	r4, #12
 8007d5e:	193b      	adds	r3, r7, r4
 8007d60:	0018      	movs	r0, r3
 8007d62:	2314      	movs	r3, #20
 8007d64:	001a      	movs	r2, r3
 8007d66:	2100      	movs	r1, #0
 8007d68:	f01a feb8 	bl	8022adc <memset>
  if(adcHandle->Instance==ADC1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a14      	ldr	r2, [pc, #80]	@ (8007dc4 <HAL_ADC_MspInit+0x70>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d121      	bne.n	8007dba <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d76:	4b14      	ldr	r3, [pc, #80]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d7a:	4b13      	ldr	r3, [pc, #76]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d7c:	2180      	movs	r1, #128	@ 0x80
 8007d7e:	0089      	lsls	r1, r1, #2
 8007d80:	430a      	orrs	r2, r1
 8007d82:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d84:	4b10      	ldr	r3, [pc, #64]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d88:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d8a:	2104      	movs	r1, #4
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d90:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	2204      	movs	r2, #4
 8007d96:	4013      	ands	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007d9c:	193b      	adds	r3, r7, r4
 8007d9e:	2230      	movs	r2, #48	@ 0x30
 8007da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007da2:	193b      	adds	r3, r7, r4
 8007da4:	2203      	movs	r2, #3
 8007da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da8:	193b      	adds	r3, r7, r4
 8007daa:	2200      	movs	r2, #0
 8007dac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dae:	193b      	adds	r3, r7, r4
 8007db0:	4a06      	ldr	r2, [pc, #24]	@ (8007dcc <HAL_ADC_MspInit+0x78>)
 8007db2:	0019      	movs	r1, r3
 8007db4:	0010      	movs	r0, r2
 8007db6:	f00a fa75 	bl	80122a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007dba:	46c0      	nop			@ (mov r8, r8)
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	b009      	add	sp, #36	@ 0x24
 8007dc0:	bd90      	pop	{r4, r7, pc}
 8007dc2:	46c0      	nop			@ (mov r8, r8)
 8007dc4:	40012400 	.word	0x40012400
 8007dc8:	40021000 	.word	0x40021000
 8007dcc:	50000800 	.word	0x50000800

08007dd0 <ReadRegister>:
static uint8_t airtemphumraw[7];
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6039      	str	r1, [r7, #0]
 8007dd8:	0011      	movs	r1, r2
 8007dda:	1dfb      	adds	r3, r7, #7
 8007ddc:	1c02      	adds	r2, r0, #0
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	1dbb      	adds	r3, r7, #6
 8007de2:	1c0a      	adds	r2, r1, #0
 8007de4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8007de6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <ReadRegister+0x40>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8007dee:	4b08      	ldr	r3, [pc, #32]	@ (8007e10 <ReadRegister+0x40>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	1dba      	adds	r2, r7, #6
 8007df4:	7814      	ldrb	r4, [r2, #0]
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	1dfa      	adds	r2, r7, #7
 8007dfa:	7810      	ldrb	r0, [r2, #0]
 8007dfc:	0022      	movs	r2, r4
 8007dfe:	4798      	blx	r3
 8007e00:	0003      	movs	r3, r0
 8007e02:	e000      	b.n	8007e06 <ReadRegister+0x36>
  }
  return false;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	0018      	movs	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	b003      	add	sp, #12
 8007e0c:	bd90      	pop	{r4, r7, pc}
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	20000b64 	.word	0x20000b64

08007e14 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6039      	str	r1, [r7, #0]
 8007e1c:	0011      	movs	r1, r2
 8007e1e:	1dfb      	adds	r3, r7, #7
 8007e20:	1c02      	adds	r2, r0, #0
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	1dbb      	adds	r3, r7, #6
 8007e26:	1c0a      	adds	r2, r1, #0
 8007e28:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <WriteRegister+0x40>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8007e32:	4b08      	ldr	r3, [pc, #32]	@ (8007e54 <WriteRegister+0x40>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	1dba      	adds	r2, r7, #6
 8007e38:	7814      	ldrb	r4, [r2, #0]
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	1dfa      	adds	r2, r7, #7
 8007e3e:	7810      	ldrb	r0, [r2, #0]
 8007e40:	0022      	movs	r2, r4
 8007e42:	4798      	blx	r3
 8007e44:	0003      	movs	r3, r0
 8007e46:	e000      	b.n	8007e4a <WriteRegister+0x36>
  }
  return false;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b003      	add	sp, #12
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	20000b68 	.word	0x20000b68

08007e58 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	000a      	movs	r2, r1
 8007e62:	1cfb      	adds	r3, r7, #3
 8007e64:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8007e66:	230f      	movs	r3, #15
 8007e68:	18fb      	adds	r3, r7, r3
 8007e6a:	22ff      	movs	r2, #255	@ 0xff
 8007e6c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007e6e:	230e      	movs	r3, #14
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	e037      	b.n	8007ee8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007e78:	230e      	movs	r3, #14
 8007e7a:	18fb      	adds	r3, r7, r3
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	18d3      	adds	r3, r2, r3
 8007e82:	7819      	ldrb	r1, [r3, #0]
 8007e84:	220f      	movs	r2, #15
 8007e86:	18bb      	adds	r3, r7, r2
 8007e88:	18ba      	adds	r2, r7, r2
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	404a      	eors	r2, r1
 8007e8e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007e90:	230d      	movs	r3, #13
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	e01b      	b.n	8007ed2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8007e9a:	210f      	movs	r1, #15
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b25b      	sxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da09      	bge.n	8007eba <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8007ea6:	187b      	adds	r3, r7, r1
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	b25b      	sxtb	r3, r3
 8007eae:	2231      	movs	r2, #49	@ 0x31
 8007eb0:	4053      	eors	r3, r2
 8007eb2:	b25a      	sxtb	r2, r3
 8007eb4:	187b      	adds	r3, r7, r1
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e005      	b.n	8007ec6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8007eba:	230f      	movs	r3, #15
 8007ebc:	18fa      	adds	r2, r7, r3
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	18db      	adds	r3, r3, r3
 8007ec4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007ec6:	210d      	movs	r1, #13
 8007ec8:	187b      	adds	r3, r7, r1
 8007eca:	781a      	ldrb	r2, [r3, #0]
 8007ecc:	187b      	adds	r3, r7, r1
 8007ece:	3201      	adds	r2, #1
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	230d      	movs	r3, #13
 8007ed4:	18fb      	adds	r3, r7, r3
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b07      	cmp	r3, #7
 8007eda:	d9de      	bls.n	8007e9a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007edc:	210e      	movs	r1, #14
 8007ede:	187b      	adds	r3, r7, r1
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	187b      	adds	r3, r7, r1
 8007ee4:	3201      	adds	r2, #1
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	230e      	movs	r3, #14
 8007eea:	18fa      	adds	r2, r7, r3
 8007eec:	1cfb      	adds	r3, r7, #3
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3c0      	bcc.n	8007e78 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8007ef6:	230f      	movs	r3, #15
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	781b      	ldrb	r3, [r3, #0]
}
 8007efc:	0018      	movs	r0, r3
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b004      	add	sp, #16
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8007f0c:	f009 f8d4 	bl	80110b8 <HAL_GetTick>
 8007f10:	0002      	movs	r2, r0
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	18d2      	adds	r2, r2, r3
 8007f16:	4b03      	ldr	r3, [pc, #12]	@ (8007f24 <setAHT20TimeStamp+0x20>)
 8007f18:	601a      	str	r2, [r3, #0]
}
 8007f1a:	46c0      	nop			@ (mov r8, r8)
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	b002      	add	sp, #8
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	46c0      	nop			@ (mov r8, r8)
 8007f24:	20000b5c 	.word	0x20000b5c

08007f28 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8007f32:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <AHT_Init+0x20>)
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8007f38:	4b04      	ldr	r3, [pc, #16]	@ (8007f4c <AHT_Init+0x24>)
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	601a      	str	r2, [r3, #0]
}
 8007f3e:	46c0      	nop			@ (mov r8, r8)
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b002      	add	sp, #8
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	20000b64 	.word	0x20000b64
 8007f4c:	20000b68 	.word	0x20000b68

08007f50 <AHT20_init>:


bool AHT20_init(void) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 8007f54:	f009 f8b0 	bl	80110b8 <HAL_GetTick>
 8007f58:	0003      	movs	r3, r0
 8007f5a:	3332      	adds	r3, #50	@ 0x32
 8007f5c:	001a      	movs	r2, r3
 8007f5e:	4b06      	ldr	r3, [pc, #24]	@ (8007f78 <AHT20_init+0x28>)
 8007f60:	601a      	str	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8007f62:	4b06      	ldr	r3, [pc, #24]	@ (8007f7c <AHT20_init+0x2c>)
 8007f64:	2203      	movs	r2, #3
 8007f66:	0019      	movs	r1, r3
 8007f68:	2038      	movs	r0, #56	@ 0x38
 8007f6a:	f7ff ff53 	bl	8007e14 <WriteRegister>
 8007f6e:	0003      	movs	r3, r0
}
 8007f70:	0018      	movs	r0, r3
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	20000b5c 	.word	0x20000b5c
 8007f7c:	20000084 	.word	0x20000084

08007f80 <AHT20_calibration_start>:

bool AHT20_calibration_start() {
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_calibrated, 1);
 8007f86:	1dfc      	adds	r4, r7, #7
 8007f88:	4b10      	ldr	r3, [pc, #64]	@ (8007fcc <AHT20_calibration_start+0x4c>)
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	0019      	movs	r1, r3
 8007f8e:	2038      	movs	r0, #56	@ 0x38
 8007f90:	f7ff ff40 	bl	8007e14 <WriteRegister>
 8007f94:	0003      	movs	r3, r0
 8007f96:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8007f98:	1dfb      	adds	r3, r7, #7
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4053      	eors	r3, r2
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d005      	beq.n	8007fb2 <AHT20_calibration_start+0x32>
    Error("AHT20 Write error during calibaration");
 8007fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd0 <AHT20_calibration_start+0x50>)
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <AHT20_calibration_start+0x54>)
 8007faa:	0019      	movs	r1, r3
 8007fac:	2001      	movs	r0, #1
 8007fae:	f008 fc37 	bl	8010820 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 8007fb2:	f009 f881 	bl	80110b8 <HAL_GetTick>
 8007fb6:	0003      	movs	r3, r0
 8007fb8:	3332      	adds	r3, #50	@ 0x32
 8007fba:	001a      	movs	r2, r3
 8007fbc:	4b06      	ldr	r3, [pc, #24]	@ (8007fd8 <AHT20_calibration_start+0x58>)
 8007fbe:	601a      	str	r2, [r3, #0]
  return response;
 8007fc0:	1dfb      	adds	r3, r7, #7
 8007fc2:	781b      	ldrb	r3, [r3, #0]
}
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b003      	add	sp, #12
 8007fca:	bd90      	pop	{r4, r7, pc}
 8007fcc:	20000090 	.word	0x20000090
 8007fd0:	08026ec4 	.word	0x08026ec4
 8007fd4:	08026eec 	.word	0x08026eec
 8007fd8:	20000b5c 	.word	0x20000b5c

08007fdc <AHT20_calibration_complete>:

bool AHT20_calibration_complete(void) {
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  airtemphumraw[0] = 0; // clear the buffer
 8007fe0:	4b19      	ldr	r3, [pc, #100]	@ (8008048 <AHT20_calibration_complete+0x6c>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
  if (!ReadRegister(AHT20_ADDRESS, airtemphumraw, 1)) {
 8007fe6:	4b18      	ldr	r3, [pc, #96]	@ (8008048 <AHT20_calibration_complete+0x6c>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	0019      	movs	r1, r3
 8007fec:	2038      	movs	r0, #56	@ 0x38
 8007fee:	f7ff feef 	bl	8007dd0 <ReadRegister>
 8007ff2:	0003      	movs	r3, r0
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4053      	eors	r3, r2
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <AHT20_calibration_complete+0x34>
    Error("AHT20 Read error during calibaration");
 8008000:	4a12      	ldr	r2, [pc, #72]	@ (800804c <AHT20_calibration_complete+0x70>)
 8008002:	4b13      	ldr	r3, [pc, #76]	@ (8008050 <AHT20_calibration_complete+0x74>)
 8008004:	0019      	movs	r1, r3
 8008006:	2001      	movs	r0, #1
 8008008:	f008 fc0a 	bl	8010820 <CreateLine>
    return false;
 800800c:	2300      	movs	r3, #0
 800800e:	e018      	b.n	8008042 <AHT20_calibration_complete+0x66>
  }
  HAL_Delay(10);  // wait to be sure for completing the DMA transfer :(
 8008010:	200a      	movs	r0, #10
 8008012:	f009 f85b 	bl	80110cc <HAL_Delay>
  if (airtemphumraw[0] ==0xff) {
 8008016:	4b0c      	ldr	r3, [pc, #48]	@ (8008048 <AHT20_calibration_complete+0x6c>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2bff      	cmp	r3, #255	@ 0xff
 800801c:	d102      	bne.n	8008024 <AHT20_calibration_complete+0x48>
    airtemphumraw[0] = 0;
 800801e:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <AHT20_calibration_complete+0x6c>)
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
  }
//  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
 8008024:	f009 f848 	bl	80110b8 <HAL_GetTick>
 8008028:	0003      	movs	r3, r0
 800802a:	33c8      	adds	r3, #200	@ 0xc8
 800802c:	001a      	movs	r2, r3
 800802e:	4b09      	ldr	r3, [pc, #36]	@ (8008054 <AHT20_calibration_complete+0x78>)
 8008030:	601a      	str	r2, [r3, #0]
  return (airtemphumraw[0] & 0x08);
 8008032:	4b05      	ldr	r3, [pc, #20]	@ (8008048 <AHT20_calibration_complete+0x6c>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	001a      	movs	r2, r3
 8008038:	2308      	movs	r3, #8
 800803a:	4013      	ands	r3, r2
 800803c:	1e5a      	subs	r2, r3, #1
 800803e:	4193      	sbcs	r3, r2
 8008040:	b2db      	uxtb	r3, r3
}
 8008042:	0018      	movs	r0, r3
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000b6c 	.word	0x20000b6c
 800804c:	08026ef0 	.word	0x08026ef0
 8008050:	08026eec 	.word	0x08026eec
 8008054:	20000b5c 	.word	0x20000b5c

08008058 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800805c:	4a0a      	ldr	r2, [pc, #40]	@ (8008088 <AHT20_DeviceConnected+0x30>)
 800805e:	4b0b      	ldr	r3, [pc, #44]	@ (800808c <AHT20_DeviceConnected+0x34>)
 8008060:	0019      	movs	r1, r3
 8008062:	2003      	movs	r0, #3
 8008064:	f008 fbdc 	bl	8010820 <CreateLine>
   AHT20_init();
 8008068:	f7ff ff72 	bl	8007f50 <AHT20_init>
   HAL_Delay(50);
 800806c:	2032      	movs	r0, #50	@ 0x32
 800806e:	f009 f82d 	bl	80110cc <HAL_Delay>
   AHT20_calibration_start();
 8008072:	f7ff ff85 	bl	8007f80 <AHT20_calibration_start>
   HAL_Delay(50);
 8008076:	2032      	movs	r0, #50	@ 0x32
 8008078:	f009 f828 	bl	80110cc <HAL_Delay>
   return AHT20_calibration_complete();
 800807c:	f7ff ffae 	bl	8007fdc <AHT20_calibration_complete>
 8008080:	0003      	movs	r3, r0
 }
 8008082:	0018      	movs	r0, r3
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	08026f18 	.word	0x08026f18
 800808c:	08026f30 	.word	0x08026f30

08008090 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 8008090:	b590      	push	{r4, r7, lr}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 8008096:	1dfc      	adds	r4, r7, #7
 8008098:	4b10      	ldr	r3, [pc, #64]	@ (80080dc <AHT20_StartMeasurement+0x4c>)
 800809a:	2203      	movs	r2, #3
 800809c:	0019      	movs	r1, r3
 800809e:	2038      	movs	r0, #56	@ 0x38
 80080a0:	f7ff feb8 	bl	8007e14 <WriteRegister>
 80080a4:	0003      	movs	r3, r0
 80080a6:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 80080a8:	1dfb      	adds	r3, r7, #7
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2201      	movs	r2, #1
 80080ae:	4053      	eors	r3, r2
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 80080b6:	4a0a      	ldr	r2, [pc, #40]	@ (80080e0 <AHT20_StartMeasurement+0x50>)
 80080b8:	4b0a      	ldr	r3, [pc, #40]	@ (80080e4 <AHT20_StartMeasurement+0x54>)
 80080ba:	0019      	movs	r1, r3
 80080bc:	2001      	movs	r0, #1
 80080be:	f008 fbaf 	bl	8010820 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 100;
 80080c2:	f008 fff9 	bl	80110b8 <HAL_GetTick>
 80080c6:	0003      	movs	r3, r0
 80080c8:	3364      	adds	r3, #100	@ 0x64
 80080ca:	001a      	movs	r2, r3
 80080cc:	4b06      	ldr	r3, [pc, #24]	@ (80080e8 <AHT20_StartMeasurement+0x58>)
 80080ce:	601a      	str	r2, [r3, #0]
  return response;
 80080d0:	1dfb      	adds	r3, r7, #7
 80080d2:	781b      	ldrb	r3, [r3, #0]
}
 80080d4:	0018      	movs	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b003      	add	sp, #12
 80080da:	bd90      	pop	{r4, r7, pc}
 80080dc:	2000008c 	.word	0x2000008c
 80080e0:	08026f34 	.word	0x08026f34
 80080e4:	08026eec 	.word	0x08026eec
 80080e8:	20000b5c 	.word	0x20000b5c

080080ec <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 80080ec:	b590      	push	{r4, r7, lr}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
  bool response = ReadRegister(AHT20_ADDRESS, airtemphumraw, 7);
 80080f2:	1dfc      	adds	r4, r7, #7
 80080f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008120 <AHT20_GetMeasurementValues+0x34>)
 80080f6:	2207      	movs	r2, #7
 80080f8:	0019      	movs	r1, r3
 80080fa:	2038      	movs	r0, #56	@ 0x38
 80080fc:	f7ff fe68 	bl	8007dd0 <ReadRegister>
 8008100:	0003      	movs	r3, r0
 8008102:	7023      	strb	r3, [r4, #0]
  AHT20TimeStamp = HAL_GetTick() + 100;
 8008104:	f008 ffd8 	bl	80110b8 <HAL_GetTick>
 8008108:	0003      	movs	r3, r0
 800810a:	3364      	adds	r3, #100	@ 0x64
 800810c:	001a      	movs	r2, r3
 800810e:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <AHT20_GetMeasurementValues+0x38>)
 8008110:	601a      	str	r2, [r3, #0]
  return response;
 8008112:	1dfb      	adds	r3, r7, #7
 8008114:	781b      	ldrb	r3, [r3, #0]
}
 8008116:	0018      	movs	r0, r3
 8008118:	46bd      	mov	sp, r7
 800811a:	b003      	add	sp, #12
 800811c:	bd90      	pop	{r4, r7, pc}
 800811e:	46c0      	nop			@ (mov r8, r8)
 8008120:	20000b6c 	.word	0x20000b6c
 8008124:	20000b5c 	.word	0x20000b5c

08008128 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 8008128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800812a:	46c6      	mov	lr, r8
 800812c:	b500      	push	{lr}
 800812e:	b08a      	sub	sp, #40	@ 0x28
 8008130:	af06      	add	r7, sp, #24
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if (airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) {
 8008136:	4b53      	ldr	r3, [pc, #332]	@ (8008284 <AHT20_Calculate+0x15c>)
 8008138:	799c      	ldrb	r4, [r3, #6]
 800813a:	4b52      	ldr	r3, [pc, #328]	@ (8008284 <AHT20_Calculate+0x15c>)
 800813c:	2106      	movs	r1, #6
 800813e:	0018      	movs	r0, r3
 8008140:	f7ff fe8a 	bl	8007e58 <CalculateCRC>
 8008144:	0003      	movs	r3, r0
 8008146:	429c      	cmp	r4, r3
 8008148:	d038      	beq.n	80081bc <AHT20_Calculate+0x94>
    Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800814a:	4b4e      	ldr	r3, [pc, #312]	@ (8008284 <AHT20_Calculate+0x15c>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	4698      	mov	r8, r3
 8008150:	4b4c      	ldr	r3, [pc, #304]	@ (8008284 <AHT20_Calculate+0x15c>)
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	0018      	movs	r0, r3
 8008156:	4b4b      	ldr	r3, [pc, #300]	@ (8008284 <AHT20_Calculate+0x15c>)
 8008158:	789b      	ldrb	r3, [r3, #2]
 800815a:	001c      	movs	r4, r3
 800815c:	4b49      	ldr	r3, [pc, #292]	@ (8008284 <AHT20_Calculate+0x15c>)
 800815e:	78db      	ldrb	r3, [r3, #3]
 8008160:	001d      	movs	r5, r3
 8008162:	4b48      	ldr	r3, [pc, #288]	@ (8008284 <AHT20_Calculate+0x15c>)
 8008164:	791b      	ldrb	r3, [r3, #4]
 8008166:	001e      	movs	r6, r3
 8008168:	4b46      	ldr	r3, [pc, #280]	@ (8008284 <AHT20_Calculate+0x15c>)
 800816a:	795b      	ldrb	r3, [r3, #5]
 800816c:	469c      	mov	ip, r3
 800816e:	4b45      	ldr	r3, [pc, #276]	@ (8008284 <AHT20_Calculate+0x15c>)
 8008170:	799b      	ldrb	r3, [r3, #6]
 8008172:	4a45      	ldr	r2, [pc, #276]	@ (8008288 <AHT20_Calculate+0x160>)
 8008174:	4945      	ldr	r1, [pc, #276]	@ (800828c <AHT20_Calculate+0x164>)
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	4663      	mov	r3, ip
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	9603      	str	r6, [sp, #12]
 800817e:	9502      	str	r5, [sp, #8]
 8008180:	9401      	str	r4, [sp, #4]
 8008182:	9000      	str	r0, [sp, #0]
 8008184:	4643      	mov	r3, r8
 8008186:	2003      	movs	r0, #3
 8008188:	f008 fb4a 	bl	8010820 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800818c:	4b3d      	ldr	r3, [pc, #244]	@ (8008284 <AHT20_Calculate+0x15c>)
 800818e:	799b      	ldrb	r3, [r3, #6]
 8008190:	001c      	movs	r4, r3
 8008192:	4b3c      	ldr	r3, [pc, #240]	@ (8008284 <AHT20_Calculate+0x15c>)
 8008194:	2106      	movs	r1, #6
 8008196:	0018      	movs	r0, r3
 8008198:	f7ff fe5e 	bl	8007e58 <CalculateCRC>
 800819c:	0003      	movs	r3, r0
 800819e:	4a3c      	ldr	r2, [pc, #240]	@ (8008290 <AHT20_Calculate+0x168>)
 80081a0:	493c      	ldr	r1, [pc, #240]	@ (8008294 <AHT20_Calculate+0x16c>)
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	0023      	movs	r3, r4
 80081a6:	2001      	movs	r0, #1
 80081a8:	f008 fb3a 	bl	8010820 <CreateLine>
    *airtemp = 0.0;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
    return false;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e05c      	b.n	8008276 <AHT20_Calculate+0x14e>
  }
  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 80081bc:	4b31      	ldr	r3, [pc, #196]	@ (8008284 <AHT20_Calculate+0x15c>)
 80081be:	78db      	ldrb	r3, [r3, #3]
 80081c0:	041a      	lsls	r2, r3, #16
 80081c2:	23f0      	movs	r3, #240	@ 0xf0
 80081c4:	031b      	lsls	r3, r3, #12
 80081c6:	401a      	ands	r2, r3
 80081c8:	4b2e      	ldr	r3, [pc, #184]	@ (8008284 <AHT20_Calculate+0x15c>)
 80081ca:	791b      	ldrb	r3, [r3, #4]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	18d3      	adds	r3, r2, r3
 80081d0:	4a2c      	ldr	r2, [pc, #176]	@ (8008284 <AHT20_Calculate+0x15c>)
 80081d2:	7952      	ldrb	r2, [r2, #5]
 80081d4:	189b      	adds	r3, r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7f9 fa45 	bl	8001668 <__aeabi_ui2f>
 80081de:	1c03      	adds	r3, r0, #0
 80081e0:	2193      	movs	r1, #147	@ 0x93
 80081e2:	05c9      	lsls	r1, r1, #23
 80081e4:	1c18      	adds	r0, r3, #0
 80081e6:	f7f8 fcf5 	bl	8000bd4 <__aeabi_fdiv>
 80081ea:	1c03      	adds	r3, r0, #0
 80081ec:	492a      	ldr	r1, [pc, #168]	@ (8008298 <AHT20_Calculate+0x170>)
 80081ee:	1c18      	adds	r0, r3, #0
 80081f0:	f7f8 fed6 	bl	8000fa0 <__aeabi_fmul>
 80081f4:	1c03      	adds	r3, r0, #0
 80081f6:	4929      	ldr	r1, [pc, #164]	@ (800829c <AHT20_Calculate+0x174>)
 80081f8:	1c18      	adds	r0, r3, #0
 80081fa:	f7f9 f80f 	bl	800121c <__aeabi_fsub>
 80081fe:	1c03      	adds	r3, r0, #0
 8008200:	1c1a      	adds	r2, r3, #0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 8008206:	4b1f      	ldr	r3, [pc, #124]	@ (8008284 <AHT20_Calculate+0x15c>)
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	031a      	lsls	r2, r3, #12
 800820c:	4b1d      	ldr	r3, [pc, #116]	@ (8008284 <AHT20_Calculate+0x15c>)
 800820e:	789b      	ldrb	r3, [r3, #2]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	18d3      	adds	r3, r2, r3
 8008214:	4a1b      	ldr	r2, [pc, #108]	@ (8008284 <AHT20_Calculate+0x15c>)
 8008216:	78d2      	ldrb	r2, [r2, #3]
 8008218:	0912      	lsrs	r2, r2, #4
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	189b      	adds	r3, r3, r2
 800821e:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 8008220:	68b8      	ldr	r0, [r7, #8]
 8008222:	f7f9 fa21 	bl	8001668 <__aeabi_ui2f>
 8008226:	1c03      	adds	r3, r0, #0
 8008228:	2193      	movs	r1, #147	@ 0x93
 800822a:	05c9      	lsls	r1, r1, #23
 800822c:	1c18      	adds	r0, r3, #0
 800822e:	f7f8 fcd1 	bl	8000bd4 <__aeabi_fdiv>
 8008232:	1c03      	adds	r3, r0, #0
 8008234:	491a      	ldr	r1, [pc, #104]	@ (80082a0 <AHT20_Calculate+0x178>)
 8008236:	1c18      	adds	r0, r3, #0
 8008238:	f7f8 feb2 	bl	8000fa0 <__aeabi_fmul>
 800823c:	1c03      	adds	r3, r0, #0
 800823e:	1c1a      	adds	r2, r3, #0
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %f, temperature = %f", *airhum, *airtemp);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	1c18      	adds	r0, r3, #0
 800824a:	f7fb f90b 	bl	8003464 <__aeabi_f2d>
 800824e:	0004      	movs	r4, r0
 8008250:	000d      	movs	r5, r1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	1c18      	adds	r0, r3, #0
 8008258:	f7fb f904 	bl	8003464 <__aeabi_f2d>
 800825c:	0002      	movs	r2, r0
 800825e:	000b      	movs	r3, r1
 8008260:	4810      	ldr	r0, [pc, #64]	@ (80082a4 <AHT20_Calculate+0x17c>)
 8008262:	490a      	ldr	r1, [pc, #40]	@ (800828c <AHT20_Calculate+0x164>)
 8008264:	9202      	str	r2, [sp, #8]
 8008266:	9303      	str	r3, [sp, #12]
 8008268:	9400      	str	r4, [sp, #0]
 800826a:	9501      	str	r5, [sp, #4]
 800826c:	0002      	movs	r2, r0
 800826e:	2003      	movs	r0, #3
 8008270:	f008 fad6 	bl	8010820 <CreateLine>
  return true;
 8008274:	2301      	movs	r3, #1
}
 8008276:	0018      	movs	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	b004      	add	sp, #16
 800827c:	bc80      	pop	{r7}
 800827e:	46b8      	mov	r8, r7
 8008280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008282:	46c0      	nop			@ (mov r8, r8)
 8008284:	20000b6c 	.word	0x20000b6c
 8008288:	08026f60 	.word	0x08026f60
 800828c:	08026f30 	.word	0x08026f30
 8008290:	08026fcc 	.word	0x08026fcc
 8008294:	08026eec 	.word	0x08026eec
 8008298:	43480000 	.word	0x43480000
 800829c:	42480000 	.word	0x42480000
 80082a0:	42c80000 	.word	0x42c80000
 80082a4:	08026ff4 	.word	0x08026ff4

080082a8 <AHT20_reset>:

bool AHT20_reset(void) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 80082ac:	f008 ff04 	bl	80110b8 <HAL_GetTick>
 80082b0:	0003      	movs	r3, r0
 80082b2:	3332      	adds	r3, #50	@ 0x32
 80082b4:	001a      	movs	r2, r3
 80082b6:	4b07      	ldr	r3, [pc, #28]	@ (80082d4 <AHT20_reset+0x2c>)
 80082b8:	601a      	str	r2, [r3, #0]
  calibrated = false;
 80082ba:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <AHT20_reset+0x30>)
 80082bc:	2200      	movs	r2, #0
 80082be:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 80082c0:	4b06      	ldr	r3, [pc, #24]	@ (80082dc <AHT20_reset+0x34>)
 80082c2:	2201      	movs	r2, #1
 80082c4:	0019      	movs	r1, r3
 80082c6:	2038      	movs	r0, #56	@ 0x38
 80082c8:	f7ff fda4 	bl	8007e14 <WriteRegister>
 80082cc:	0003      	movs	r3, r0
}
 80082ce:	0018      	movs	r0, r3
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000b5c 	.word	0x20000b5c
 80082d8:	20000b60 	.word	0x20000b60
 80082dc:	20000088 	.word	0x20000088

080082e0 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 80082e6:	4b73      	ldr	r3, [pc, #460]	@ (80084b4 <AHT_Upkeep+0x1d4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	0018      	movs	r0, r3
 80082ec:	f008 fa42 	bl	8010774 <TimestampIsReached>
 80082f0:	0003      	movs	r3, r0
 80082f2:	001a      	movs	r2, r3
 80082f4:	2301      	movs	r3, #1
 80082f6:	4053      	eors	r3, r2
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <AHT_Upkeep+0x24>
    return AHTState;
 80082fe:	4b6e      	ldr	r3, [pc, #440]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	e0d2      	b.n	80084aa <AHT_Upkeep+0x1ca>
  }
  switch(AHTState) {
 8008304:	4b6c      	ldr	r3, [pc, #432]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b08      	cmp	r3, #8
 800830a:	d900      	bls.n	800830e <AHT_Upkeep+0x2e>
 800830c:	e0b4      	b.n	8008478 <AHT_Upkeep+0x198>
 800830e:	009a      	lsls	r2, r3, #2
 8008310:	4b6a      	ldr	r3, [pc, #424]	@ (80084bc <AHT_Upkeep+0x1dc>)
 8008312:	18d3      	adds	r3, r2, r3
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 8008318:	4a69      	ldr	r2, [pc, #420]	@ (80084c0 <AHT_Upkeep+0x1e0>)
 800831a:	4b6a      	ldr	r3, [pc, #424]	@ (80084c4 <AHT_Upkeep+0x1e4>)
 800831c:	0019      	movs	r1, r3
 800831e:	2003      	movs	r0, #3
 8008320:	f008 fa7e 	bl	8010820 <CreateLine>
    break;
 8008324:	e0bf      	b.n	80084a6 <AHT_Upkeep+0x1c6>

  case AHT_STATE_INIT:
    if (getSensorLock() != FREE) {
 8008326:	f002 fbf3 	bl	800ab10 <getSensorLock>
 800832a:	1e03      	subs	r3, r0, #0
 800832c:	d000      	beq.n	8008330 <AHT_Upkeep+0x50>
 800832e:	e0b1      	b.n	8008494 <AHT_Upkeep+0x1b4>
      break;
    }
    if (!AHT20_init()) {
 8008330:	f7ff fe0e 	bl	8007f50 <AHT20_init>
 8008334:	0003      	movs	r3, r0
 8008336:	001a      	movs	r2, r3
 8008338:	2301      	movs	r3, #1
 800833a:	4053      	eors	r3, r2
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d008      	beq.n	8008354 <AHT_Upkeep+0x74>
      Debug("AHT20 Error during initialization");
 8008342:	4a61      	ldr	r2, [pc, #388]	@ (80084c8 <AHT_Upkeep+0x1e8>)
 8008344:	4b5f      	ldr	r3, [pc, #380]	@ (80084c4 <AHT_Upkeep+0x1e4>)
 8008346:	0019      	movs	r1, r3
 8008348:	2003      	movs	r0, #3
 800834a:	f008 fa69 	bl	8010820 <CreateLine>
      AHTState = AHT20_ERROR;
 800834e:	4b5a      	ldr	r3, [pc, #360]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008350:	22ff      	movs	r2, #255	@ 0xff
 8008352:	701a      	strb	r2, [r3, #0]
    }
    if(!calibrated) {
 8008354:	4b5d      	ldr	r3, [pc, #372]	@ (80084cc <AHT_Upkeep+0x1ec>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2201      	movs	r2, #1
 800835a:	4053      	eors	r3, r2
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <AHT_Upkeep+0x8a>
      AHTState = AHT_START_CALIBRATION;
 8008362:	4b55      	ldr	r3, [pc, #340]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008364:	2201      	movs	r2, #1
 8008366:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_START_MEASUREMENTS;
    }
    break;
 8008368:	e09d      	b.n	80084a6 <AHT_Upkeep+0x1c6>
      AHTState = AHT_STATE_START_MEASUREMENTS;
 800836a:	4b53      	ldr	r3, [pc, #332]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 800836c:	2203      	movs	r2, #3
 800836e:	701a      	strb	r2, [r3, #0]
    break;
 8008370:	e099      	b.n	80084a6 <AHT_Upkeep+0x1c6>

  case AHT_START_CALIBRATION:
  calibrated = false;
 8008372:	4b56      	ldr	r3, [pc, #344]	@ (80084cc <AHT_Upkeep+0x1ec>)
 8008374:	2200      	movs	r2, #0
 8008376:	701a      	strb	r2, [r3, #0]
  if (getSensorLock() != FREE) {
 8008378:	f002 fbca 	bl	800ab10 <getSensorLock>
 800837c:	1e03      	subs	r3, r0, #0
 800837e:	d000      	beq.n	8008382 <AHT_Upkeep+0xa2>
 8008380:	e08a      	b.n	8008498 <AHT_Upkeep+0x1b8>
    break;
  }
  setSensorLock(AHT20);
 8008382:	2003      	movs	r0, #3
 8008384:	f002 fbb4 	bl	800aaf0 <setSensorLock>
  if (AHT20_calibration_start()) {
 8008388:	f7ff fdfa 	bl	8007f80 <AHT20_calibration_start>
 800838c:	1e03      	subs	r3, r0, #0
 800838e:	d100      	bne.n	8008392 <AHT_Upkeep+0xb2>
 8008390:	e084      	b.n	800849c <AHT_Upkeep+0x1bc>
    AHTState = AHT_CALIBRATED;
 8008392:	4b49      	ldr	r3, [pc, #292]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008394:	2202      	movs	r2, #2
 8008396:	701a      	strb	r2, [r3, #0]
  }
  break;
 8008398:	e080      	b.n	800849c <AHT_Upkeep+0x1bc>

  case AHT_CALIBRATED:
    if (AHT20_calibration_complete()) {
 800839a:	f7ff fe1f 	bl	8007fdc <AHT20_calibration_complete>
 800839e:	1e03      	subs	r3, r0, #0
 80083a0:	d00f      	beq.n	80083c2 <AHT_Upkeep+0xe2>
      calibrated = true;
 80083a2:	4b4a      	ldr	r3, [pc, #296]	@ (80084cc <AHT_Upkeep+0x1ec>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 80083a8:	2000      	movs	r0, #0
 80083aa:	f002 fba1 	bl	800aaf0 <setSensorLock>
      AHTState = AHT_STATE_START_MEASUREMENTS;
 80083ae:	4b42      	ldr	r3, [pc, #264]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 80083b0:	2203      	movs	r2, #3
 80083b2:	701a      	strb	r2, [r3, #0]
      Info("AHT20 Calibration success");
 80083b4:	4a46      	ldr	r2, [pc, #280]	@ (80084d0 <AHT_Upkeep+0x1f0>)
 80083b6:	4b47      	ldr	r3, [pc, #284]	@ (80084d4 <AHT_Upkeep+0x1f4>)
 80083b8:	0019      	movs	r1, r3
 80083ba:	2002      	movs	r0, #2
 80083bc:	f008 fa30 	bl	8010820 <CreateLine>
 80083c0:	e009      	b.n	80083d6 <AHT_Upkeep+0xf6>
    }
    else {
      AHTState = AHT_START_CALIBRATION;
 80083c2:	4b3d      	ldr	r3, [pc, #244]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	701a      	strb	r2, [r3, #0]
      AHT20TimeStamp = HAL_GetTick() + 20;
 80083c8:	f008 fe76 	bl	80110b8 <HAL_GetTick>
 80083cc:	0003      	movs	r3, r0
 80083ce:	3314      	adds	r3, #20
 80083d0:	001a      	movs	r2, r3
 80083d2:	4b38      	ldr	r3, [pc, #224]	@ (80084b4 <AHT_Upkeep+0x1d4>)
 80083d4:	601a      	str	r2, [r3, #0]
    }
    setSensorLock(FREE);
 80083d6:	2000      	movs	r0, #0
 80083d8:	f002 fb8a 	bl	800aaf0 <setSensorLock>
    break;
 80083dc:	e063      	b.n	80084a6 <AHT_Upkeep+0x1c6>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 80083de:	f002 fb97 	bl	800ab10 <getSensorLock>
 80083e2:	1e03      	subs	r3, r0, #0
 80083e4:	d15c      	bne.n	80084a0 <AHT_Upkeep+0x1c0>
      break;
    }
    setSensorLock(AHT20);
 80083e6:	2003      	movs	r0, #3
 80083e8:	f002 fb82 	bl	800aaf0 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 80083ec:	f7ff fe50 	bl	8008090 <AHT20_StartMeasurement>
 80083f0:	0003      	movs	r3, r0
 80083f2:	001a      	movs	r2, r3
 80083f4:	2301      	movs	r3, #1
 80083f6:	4053      	eors	r3, r2
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <AHT_Upkeep+0x126>
      AHTState = AHT20_ERROR;
 80083fe:	4b2e      	ldr	r3, [pc, #184]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008400:	22ff      	movs	r2, #255	@ 0xff
 8008402:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 8008404:	e04f      	b.n	80084a6 <AHT_Upkeep+0x1c6>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 8008406:	4b2c      	ldr	r3, [pc, #176]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008408:	2204      	movs	r2, #4
 800840a:	701a      	strb	r2, [r3, #0]
    break;
 800840c:	e04b      	b.n	80084a6 <AHT_Upkeep+0x1c6>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800840e:	f7ff fe6d 	bl	80080ec <AHT20_GetMeasurementValues>
 8008412:	1e03      	subs	r3, r0, #0
 8008414:	d006      	beq.n	8008424 <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 8008416:	2000      	movs	r0, #0
 8008418:	f002 fb6a 	bl	800aaf0 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800841c:	4b26      	ldr	r3, [pc, #152]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 800841e:	2205      	movs	r2, #5
 8008420:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHT20TimeStamp = HAL_GetTick() + 40;
    }
    break;
 8008422:	e040      	b.n	80084a6 <AHT_Upkeep+0x1c6>
      AHT20TimeStamp = HAL_GetTick() + 40;
 8008424:	f008 fe48 	bl	80110b8 <HAL_GetTick>
 8008428:	0003      	movs	r3, r0
 800842a:	3328      	adds	r3, #40	@ 0x28
 800842c:	001a      	movs	r2, r3
 800842e:	4b21      	ldr	r3, [pc, #132]	@ (80084b4 <AHT_Upkeep+0x1d4>)
 8008430:	601a      	str	r2, [r3, #0]
    break;
 8008432:	e038      	b.n	80084a6 <AHT_Upkeep+0x1c6>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 8008434:	003a      	movs	r2, r7
 8008436:	1d3b      	adds	r3, r7, #4
 8008438:	0011      	movs	r1, r2
 800843a:	0018      	movs	r0, r3
 800843c:	f7ff fe74 	bl	8008128 <AHT20_Calculate>
 8008440:	0003      	movs	r3, r0
 8008442:	001a      	movs	r2, r3
 8008444:	2301      	movs	r3, #1
 8008446:	4053      	eors	r3, r2
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <AHT_Upkeep+0x17a>
      AHTState = AHT20_ERROR;
 800844e:	4b1a      	ldr	r3, [pc, #104]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008450:	22ff      	movs	r2, #255	@ 0xff
 8008452:	701a      	strb	r2, [r3, #0]
      return AHTState;
 8008454:	4b18      	ldr	r3, [pc, #96]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	e027      	b.n	80084aa <AHT_Upkeep+0x1ca>
    }
//    BMP280_setAirTemPHum(airtemp, airhum);
    AHTState = AHT_STATE_WAIT;
 800845a:	4b17      	ldr	r3, [pc, #92]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 800845c:	2208      	movs	r2, #8
 800845e:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 8008460:	f008 fe2a 	bl	80110b8 <HAL_GetTick>
 8008464:	0003      	movs	r3, r0
 8008466:	4a1c      	ldr	r2, [pc, #112]	@ (80084d8 <AHT_Upkeep+0x1f8>)
 8008468:	189a      	adds	r2, r3, r2
 800846a:	4b12      	ldr	r3, [pc, #72]	@ (80084b4 <AHT_Upkeep+0x1d4>)
 800846c:	601a      	str	r2, [r3, #0]
    break;
 800846e:	e01a      	b.n	80084a6 <AHT_Upkeep+0x1c6>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 8008470:	4b11      	ldr	r3, [pc, #68]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 8008472:	2203      	movs	r2, #3
 8008474:	701a      	strb	r2, [r3, #0]
  break;
 8008476:	e016      	b.n	80084a6 <AHT_Upkeep+0x1c6>

  default:
    // Handle unexpected state
    AHT20_reset();
 8008478:	f7ff ff16 	bl	80082a8 <AHT20_reset>
    AHTState = AHT_STATE_INIT;
 800847c:	4b0e      	ldr	r3, [pc, #56]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 8008482:	f002 fb45 	bl	800ab10 <getSensorLock>
 8008486:	0003      	movs	r3, r0
 8008488:	2b03      	cmp	r3, #3
 800848a:	d10b      	bne.n	80084a4 <AHT_Upkeep+0x1c4>
      setSensorLock(FREE);
 800848c:	2000      	movs	r0, #0
 800848e:	f002 fb2f 	bl	800aaf0 <setSensorLock>
    }
    break;
 8008492:	e007      	b.n	80084a4 <AHT_Upkeep+0x1c4>
      break;
 8008494:	46c0      	nop			@ (mov r8, r8)
 8008496:	e006      	b.n	80084a6 <AHT_Upkeep+0x1c6>
    break;
 8008498:	46c0      	nop			@ (mov r8, r8)
 800849a:	e004      	b.n	80084a6 <AHT_Upkeep+0x1c6>
  break;
 800849c:	46c0      	nop			@ (mov r8, r8)
 800849e:	e002      	b.n	80084a6 <AHT_Upkeep+0x1c6>
      break;
 80084a0:	46c0      	nop			@ (mov r8, r8)
 80084a2:	e000      	b.n	80084a6 <AHT_Upkeep+0x1c6>
    break;
 80084a4:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 80084a6:	4b04      	ldr	r3, [pc, #16]	@ (80084b8 <AHT_Upkeep+0x1d8>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
}
 80084aa:	0018      	movs	r0, r3
 80084ac:	46bd      	mov	sp, r7
 80084ae:	b002      	add	sp, #8
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	46c0      	nop			@ (mov r8, r8)
 80084b4:	20000b5c 	.word	0x20000b5c
 80084b8:	20000091 	.word	0x20000091
 80084bc:	08028d0c 	.word	0x08028d0c
 80084c0:	08027020 	.word	0x08027020
 80084c4:	08026f30 	.word	0x08026f30
 80084c8:	08027048 	.word	0x08027048
 80084cc:	20000b60 	.word	0x20000b60
 80084d0:	0802706c 	.word	0x0802706c
 80084d4:	08027088 	.word	0x08027088
 80084d8:	0000ea60 	.word	0x0000ea60

080084dc <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80084dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084de:	b087      	sub	sp, #28
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	0004      	movs	r4, r0
 80084e4:	0008      	movs	r0, r1
 80084e6:	60ba      	str	r2, [r7, #8]
 80084e8:	0019      	movs	r1, r3
 80084ea:	260e      	movs	r6, #14
 80084ec:	19bb      	adds	r3, r7, r6
 80084ee:	1c22      	adds	r2, r4, #0
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	230c      	movs	r3, #12
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	1c02      	adds	r2, r0, #0
 80084f8:	801a      	strh	r2, [r3, #0]
 80084fa:	1dbb      	adds	r3, r7, #6
 80084fc:	1c0a      	adds	r2, r1, #0
 80084fe:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8008500:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <WriteMemRegister+0x58>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d010      	beq.n	800852a <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 8008508:	4b0a      	ldr	r3, [pc, #40]	@ (8008534 <WriteMemRegister+0x58>)
 800850a:	681c      	ldr	r4, [r3, #0]
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <WriteMemRegister+0x5c>)
 800850e:	7818      	ldrb	r0, [r3, #0]
 8008510:	68bd      	ldr	r5, [r7, #8]
 8008512:	230c      	movs	r3, #12
 8008514:	18fb      	adds	r3, r7, r3
 8008516:	881a      	ldrh	r2, [r3, #0]
 8008518:	19bb      	adds	r3, r7, r6
 800851a:	8819      	ldrh	r1, [r3, #0]
 800851c:	1dbb      	adds	r3, r7, #6
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	002b      	movs	r3, r5
 8008524:	47a0      	blx	r4
 8008526:	0003      	movs	r3, r0
 8008528:	e000      	b.n	800852c <WriteMemRegister+0x50>
  }
  return false;
 800852a:	2300      	movs	r3, #0
}
 800852c:	0018      	movs	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	b005      	add	sp, #20
 8008532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008534:	20000b74 	.word	0x20000b74
 8008538:	20000092 	.word	0x20000092

0800853c <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800853c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853e:	b087      	sub	sp, #28
 8008540:	af02      	add	r7, sp, #8
 8008542:	0004      	movs	r4, r0
 8008544:	0008      	movs	r0, r1
 8008546:	60ba      	str	r2, [r7, #8]
 8008548:	0019      	movs	r1, r3
 800854a:	260e      	movs	r6, #14
 800854c:	19bb      	adds	r3, r7, r6
 800854e:	1c22      	adds	r2, r4, #0
 8008550:	801a      	strh	r2, [r3, #0]
 8008552:	230c      	movs	r3, #12
 8008554:	18fb      	adds	r3, r7, r3
 8008556:	1c02      	adds	r2, r0, #0
 8008558:	801a      	strh	r2, [r3, #0]
 800855a:	1dbb      	adds	r3, r7, #6
 800855c:	1c0a      	adds	r2, r1, #0
 800855e:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8008560:	4b0c      	ldr	r3, [pc, #48]	@ (8008594 <ReadMemRegister+0x58>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d010      	beq.n	800858a <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 8008568:	4b0a      	ldr	r3, [pc, #40]	@ (8008594 <ReadMemRegister+0x58>)
 800856a:	681c      	ldr	r4, [r3, #0]
 800856c:	4b0a      	ldr	r3, [pc, #40]	@ (8008598 <ReadMemRegister+0x5c>)
 800856e:	7818      	ldrb	r0, [r3, #0]
 8008570:	68bd      	ldr	r5, [r7, #8]
 8008572:	230c      	movs	r3, #12
 8008574:	18fb      	adds	r3, r7, r3
 8008576:	881a      	ldrh	r2, [r3, #0]
 8008578:	19bb      	adds	r3, r7, r6
 800857a:	8819      	ldrh	r1, [r3, #0]
 800857c:	1dbb      	adds	r3, r7, #6
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	002b      	movs	r3, r5
 8008584:	47a0      	blx	r4
 8008586:	0003      	movs	r3, r0
 8008588:	e000      	b.n	800858c <ReadMemRegister+0x50>
  }
  return false;
 800858a:	2300      	movs	r3, #0
}
 800858c:	0018      	movs	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	b005      	add	sp, #20
 8008592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008594:	20000b78 	.word	0x20000b78
 8008598:	20000092 	.word	0x20000092

0800859c <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 80085a4:	f008 fd88 	bl	80110b8 <HAL_GetTick>
 80085a8:	0002      	movs	r2, r0
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	18d2      	adds	r2, r2, r3
 80085ae:	4b03      	ldr	r3, [pc, #12]	@ (80085bc <setBMP280TimeStamp+0x20>)
 80085b0:	601a      	str	r2, [r3, #0]
}
 80085b2:	46c0      	nop			@ (mov r8, r8)
 80085b4:	46bd      	mov	sp, r7
 80085b6:	b002      	add	sp, #8
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	46c0      	nop			@ (mov r8, r8)
 80085bc:	20000ba0 	.word	0x20000ba0

080085c0 <BMP280_reset>:

static void BMP280_reset() {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 80085c6:	1dfb      	adds	r3, r7, #7
 80085c8:	22b6      	movs	r2, #182	@ 0xb6
 80085ca:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 80085cc:	1dfa      	adds	r2, r7, #7
 80085ce:	2301      	movs	r3, #1
 80085d0:	2101      	movs	r1, #1
 80085d2:	20e0      	movs	r0, #224	@ 0xe0
 80085d4:	f7ff ff82 	bl	80084dc <WriteMemRegister>
  Info("BMP280 has been reset");
 80085d8:	4a06      	ldr	r2, [pc, #24]	@ (80085f4 <BMP280_reset+0x34>)
 80085da:	4b07      	ldr	r3, [pc, #28]	@ (80085f8 <BMP280_reset+0x38>)
 80085dc:	0019      	movs	r1, r3
 80085de:	2002      	movs	r0, #2
 80085e0:	f008 f91e 	bl	8010820 <CreateLine>
  HAL_Delay(100);
 80085e4:	2064      	movs	r0, #100	@ 0x64
 80085e6:	f008 fd71 	bl	80110cc <HAL_Delay>
}
 80085ea:	46c0      	nop			@ (mov r8, r8)
 80085ec:	46bd      	mov	sp, r7
 80085ee:	b002      	add	sp, #8
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	46c0      	nop			@ (mov r8, r8)
 80085f4:	0802708c 	.word	0x0802708c
 80085f8:	080270a4 	.word	0x080270a4

080085fc <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b083      	sub	sp, #12
 8008600:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 8008602:	4aae      	ldr	r2, [pc, #696]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008604:	231a      	movs	r3, #26
 8008606:	2101      	movs	r1, #1
 8008608:	2088      	movs	r0, #136	@ 0x88
 800860a:	f7ff ff97 	bl	800853c <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800860e:	4bab      	ldr	r3, [pc, #684]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	b29b      	uxth	r3, r3
 8008616:	4aa9      	ldr	r2, [pc, #676]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	189b      	adds	r3, r3, r2
 800861c:	b29a      	uxth	r2, r3
 800861e:	4ba8      	ldr	r3, [pc, #672]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 8008620:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 8008622:	4ba6      	ldr	r3, [pc, #664]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008624:	78db      	ldrb	r3, [r3, #3]
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	b29b      	uxth	r3, r3
 800862a:	4aa4      	ldr	r2, [pc, #656]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 800862c:	7892      	ldrb	r2, [r2, #2]
 800862e:	189b      	adds	r3, r3, r2
 8008630:	b29b      	uxth	r3, r3
 8008632:	b21a      	sxth	r2, r3
 8008634:	4ba2      	ldr	r3, [pc, #648]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 8008636:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 8008638:	4ba0      	ldr	r3, [pc, #640]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 800863a:	795b      	ldrb	r3, [r3, #5]
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	b29b      	uxth	r3, r3
 8008640:	4a9e      	ldr	r2, [pc, #632]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008642:	7912      	ldrb	r2, [r2, #4]
 8008644:	189b      	adds	r3, r3, r2
 8008646:	b29b      	uxth	r3, r3
 8008648:	b21a      	sxth	r2, r3
 800864a:	4b9d      	ldr	r3, [pc, #628]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 800864c:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800864e:	4b9b      	ldr	r3, [pc, #620]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008650:	79db      	ldrb	r3, [r3, #7]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	b29b      	uxth	r3, r3
 8008656:	4a99      	ldr	r2, [pc, #612]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008658:	7992      	ldrb	r2, [r2, #6]
 800865a:	189b      	adds	r3, r3, r2
 800865c:	b29a      	uxth	r2, r3
 800865e:	4b98      	ldr	r3, [pc, #608]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 8008660:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 8008662:	4b96      	ldr	r3, [pc, #600]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008664:	7a5b      	ldrb	r3, [r3, #9]
 8008666:	021b      	lsls	r3, r3, #8
 8008668:	b29b      	uxth	r3, r3
 800866a:	4a94      	ldr	r2, [pc, #592]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 800866c:	7a12      	ldrb	r2, [r2, #8]
 800866e:	189b      	adds	r3, r3, r2
 8008670:	b29b      	uxth	r3, r3
 8008672:	b21a      	sxth	r2, r3
 8008674:	4b92      	ldr	r3, [pc, #584]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 8008676:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 8008678:	4b90      	ldr	r3, [pc, #576]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 800867a:	7adb      	ldrb	r3, [r3, #11]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	b29b      	uxth	r3, r3
 8008680:	4a8e      	ldr	r2, [pc, #568]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008682:	7a92      	ldrb	r2, [r2, #10]
 8008684:	189b      	adds	r3, r3, r2
 8008686:	b29b      	uxth	r3, r3
 8008688:	b21a      	sxth	r2, r3
 800868a:	4b8d      	ldr	r3, [pc, #564]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 800868c:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800868e:	4b8b      	ldr	r3, [pc, #556]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008690:	7b5b      	ldrb	r3, [r3, #13]
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	b29b      	uxth	r3, r3
 8008696:	4a89      	ldr	r2, [pc, #548]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008698:	7b12      	ldrb	r2, [r2, #12]
 800869a:	189b      	adds	r3, r3, r2
 800869c:	b29b      	uxth	r3, r3
 800869e:	b21a      	sxth	r2, r3
 80086a0:	4b87      	ldr	r3, [pc, #540]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 80086a2:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 80086a4:	4b85      	ldr	r3, [pc, #532]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086a6:	7bdb      	ldrb	r3, [r3, #15]
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	4a83      	ldr	r2, [pc, #524]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086ae:	7b92      	ldrb	r2, [r2, #14]
 80086b0:	189b      	adds	r3, r3, r2
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	b21a      	sxth	r2, r3
 80086b6:	4b82      	ldr	r3, [pc, #520]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 80086b8:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 80086ba:	4b80      	ldr	r3, [pc, #512]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086bc:	7c5b      	ldrb	r3, [r3, #17]
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	4a7e      	ldr	r2, [pc, #504]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086c4:	7c12      	ldrb	r2, [r2, #16]
 80086c6:	189b      	adds	r3, r3, r2
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	b21a      	sxth	r2, r3
 80086cc:	4b7c      	ldr	r3, [pc, #496]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 80086ce:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 80086d0:	4b7a      	ldr	r3, [pc, #488]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086d2:	7cdb      	ldrb	r3, [r3, #19]
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	4a78      	ldr	r2, [pc, #480]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086da:	7c92      	ldrb	r2, [r2, #18]
 80086dc:	189b      	adds	r3, r3, r2
 80086de:	b29b      	uxth	r3, r3
 80086e0:	b21a      	sxth	r2, r3
 80086e2:	4b77      	ldr	r3, [pc, #476]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 80086e4:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 80086e6:	4b75      	ldr	r3, [pc, #468]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086e8:	7d5b      	ldrb	r3, [r3, #21]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	4a73      	ldr	r2, [pc, #460]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086f0:	7d12      	ldrb	r2, [r2, #20]
 80086f2:	189b      	adds	r3, r3, r2
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	b21a      	sxth	r2, r3
 80086f8:	4b71      	ldr	r3, [pc, #452]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 80086fa:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 80086fc:	4b6f      	ldr	r3, [pc, #444]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80086fe:	7ddb      	ldrb	r3, [r3, #23]
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	b29b      	uxth	r3, r3
 8008704:	4a6d      	ldr	r2, [pc, #436]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008706:	7d92      	ldrb	r2, [r2, #22]
 8008708:	189b      	adds	r3, r3, r2
 800870a:	b29b      	uxth	r3, r3
 800870c:	b21a      	sxth	r2, r3
 800870e:	4b6c      	ldr	r3, [pc, #432]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 8008710:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 8008712:	4a6c      	ldr	r2, [pc, #432]	@ (80088c4 <BMP280_get_calibration+0x2c8>)
 8008714:	4b6c      	ldr	r3, [pc, #432]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 8008716:	0019      	movs	r1, r3
 8008718:	2003      	movs	r0, #3
 800871a:	f008 f881 	bl	8010820 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800871e:	4b67      	ldr	r3, [pc, #412]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008720:	785b      	ldrb	r3, [r3, #1]
 8008722:	001c      	movs	r4, r3
 8008724:	4b65      	ldr	r3, [pc, #404]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	0018      	movs	r0, r3
 800872a:	4b65      	ldr	r3, [pc, #404]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	4a67      	ldr	r2, [pc, #412]	@ (80088cc <BMP280_get_calibration+0x2d0>)
 8008730:	4965      	ldr	r1, [pc, #404]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	9000      	str	r0, [sp, #0]
 8008736:	0023      	movs	r3, r4
 8008738:	2003      	movs	r0, #3
 800873a:	f008 f871 	bl	8010820 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800873e:	4b5f      	ldr	r3, [pc, #380]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008740:	78db      	ldrb	r3, [r3, #3]
 8008742:	001c      	movs	r4, r3
 8008744:	4b5d      	ldr	r3, [pc, #372]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008746:	789b      	ldrb	r3, [r3, #2]
 8008748:	0018      	movs	r0, r3
 800874a:	4b5d      	ldr	r3, [pc, #372]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 800874c:	2202      	movs	r2, #2
 800874e:	5e9b      	ldrsh	r3, [r3, r2]
 8008750:	4a5f      	ldr	r2, [pc, #380]	@ (80088d0 <BMP280_get_calibration+0x2d4>)
 8008752:	495d      	ldr	r1, [pc, #372]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	9000      	str	r0, [sp, #0]
 8008758:	0023      	movs	r3, r4
 800875a:	2003      	movs	r0, #3
 800875c:	f008 f860 	bl	8010820 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 8008760:	4b56      	ldr	r3, [pc, #344]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008762:	795b      	ldrb	r3, [r3, #5]
 8008764:	001c      	movs	r4, r3
 8008766:	4b55      	ldr	r3, [pc, #340]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008768:	791b      	ldrb	r3, [r3, #4]
 800876a:	0018      	movs	r0, r3
 800876c:	4b54      	ldr	r3, [pc, #336]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 800876e:	2204      	movs	r2, #4
 8008770:	5e9b      	ldrsh	r3, [r3, r2]
 8008772:	4a58      	ldr	r2, [pc, #352]	@ (80088d4 <BMP280_get_calibration+0x2d8>)
 8008774:	4954      	ldr	r1, [pc, #336]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	9000      	str	r0, [sp, #0]
 800877a:	0023      	movs	r3, r4
 800877c:	2003      	movs	r0, #3
 800877e:	f008 f84f 	bl	8010820 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 8008782:	4b4e      	ldr	r3, [pc, #312]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008784:	79db      	ldrb	r3, [r3, #7]
 8008786:	001c      	movs	r4, r3
 8008788:	4b4c      	ldr	r3, [pc, #304]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 800878a:	799b      	ldrb	r3, [r3, #6]
 800878c:	0018      	movs	r0, r3
 800878e:	4b4c      	ldr	r3, [pc, #304]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 8008790:	88db      	ldrh	r3, [r3, #6]
 8008792:	4a51      	ldr	r2, [pc, #324]	@ (80088d8 <BMP280_get_calibration+0x2dc>)
 8008794:	494c      	ldr	r1, [pc, #304]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	9000      	str	r0, [sp, #0]
 800879a:	0023      	movs	r3, r4
 800879c:	2003      	movs	r0, #3
 800879e:	f008 f83f 	bl	8010820 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 80087a2:	4b46      	ldr	r3, [pc, #280]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80087a4:	7a5b      	ldrb	r3, [r3, #9]
 80087a6:	001c      	movs	r4, r3
 80087a8:	4b44      	ldr	r3, [pc, #272]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80087aa:	7a1b      	ldrb	r3, [r3, #8]
 80087ac:	0018      	movs	r0, r3
 80087ae:	4b44      	ldr	r3, [pc, #272]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 80087b0:	2208      	movs	r2, #8
 80087b2:	5e9b      	ldrsh	r3, [r3, r2]
 80087b4:	4a49      	ldr	r2, [pc, #292]	@ (80088dc <BMP280_get_calibration+0x2e0>)
 80087b6:	4944      	ldr	r1, [pc, #272]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	9000      	str	r0, [sp, #0]
 80087bc:	0023      	movs	r3, r4
 80087be:	2003      	movs	r0, #3
 80087c0:	f008 f82e 	bl	8010820 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 80087c4:	4b3d      	ldr	r3, [pc, #244]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80087c6:	7adb      	ldrb	r3, [r3, #11]
 80087c8:	001c      	movs	r4, r3
 80087ca:	4b3c      	ldr	r3, [pc, #240]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80087cc:	7a9b      	ldrb	r3, [r3, #10]
 80087ce:	0018      	movs	r0, r3
 80087d0:	4b3b      	ldr	r3, [pc, #236]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 80087d2:	220a      	movs	r2, #10
 80087d4:	5e9b      	ldrsh	r3, [r3, r2]
 80087d6:	4a42      	ldr	r2, [pc, #264]	@ (80088e0 <BMP280_get_calibration+0x2e4>)
 80087d8:	493b      	ldr	r1, [pc, #236]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	9000      	str	r0, [sp, #0]
 80087de:	0023      	movs	r3, r4
 80087e0:	2003      	movs	r0, #3
 80087e2:	f008 f81d 	bl	8010820 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 80087e6:	4b35      	ldr	r3, [pc, #212]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80087e8:	7b5b      	ldrb	r3, [r3, #13]
 80087ea:	001c      	movs	r4, r3
 80087ec:	4b33      	ldr	r3, [pc, #204]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 80087ee:	7b1b      	ldrb	r3, [r3, #12]
 80087f0:	0018      	movs	r0, r3
 80087f2:	4b33      	ldr	r3, [pc, #204]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 80087f4:	220c      	movs	r2, #12
 80087f6:	5e9b      	ldrsh	r3, [r3, r2]
 80087f8:	4a3a      	ldr	r2, [pc, #232]	@ (80088e4 <BMP280_get_calibration+0x2e8>)
 80087fa:	4933      	ldr	r1, [pc, #204]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	9000      	str	r0, [sp, #0]
 8008800:	0023      	movs	r3, r4
 8008802:	2003      	movs	r0, #3
 8008804:	f008 f80c 	bl	8010820 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 8008808:	4b2c      	ldr	r3, [pc, #176]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 800880a:	7bdb      	ldrb	r3, [r3, #15]
 800880c:	001c      	movs	r4, r3
 800880e:	4b2b      	ldr	r3, [pc, #172]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008810:	7b9b      	ldrb	r3, [r3, #14]
 8008812:	0018      	movs	r0, r3
 8008814:	4b2a      	ldr	r3, [pc, #168]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 8008816:	220e      	movs	r2, #14
 8008818:	5e9b      	ldrsh	r3, [r3, r2]
 800881a:	4a33      	ldr	r2, [pc, #204]	@ (80088e8 <BMP280_get_calibration+0x2ec>)
 800881c:	492a      	ldr	r1, [pc, #168]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	9000      	str	r0, [sp, #0]
 8008822:	0023      	movs	r3, r4
 8008824:	2003      	movs	r0, #3
 8008826:	f007 fffb 	bl	8010820 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800882a:	4b24      	ldr	r3, [pc, #144]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 800882c:	7c5b      	ldrb	r3, [r3, #17]
 800882e:	001c      	movs	r4, r3
 8008830:	4b22      	ldr	r3, [pc, #136]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008832:	7c1b      	ldrb	r3, [r3, #16]
 8008834:	0018      	movs	r0, r3
 8008836:	4b22      	ldr	r3, [pc, #136]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 8008838:	2210      	movs	r2, #16
 800883a:	5e9b      	ldrsh	r3, [r3, r2]
 800883c:	4a2b      	ldr	r2, [pc, #172]	@ (80088ec <BMP280_get_calibration+0x2f0>)
 800883e:	4922      	ldr	r1, [pc, #136]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	9000      	str	r0, [sp, #0]
 8008844:	0023      	movs	r3, r4
 8008846:	2003      	movs	r0, #3
 8008848:	f007 ffea 	bl	8010820 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800884c:	4b1b      	ldr	r3, [pc, #108]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 800884e:	7cdb      	ldrb	r3, [r3, #19]
 8008850:	001c      	movs	r4, r3
 8008852:	4b1a      	ldr	r3, [pc, #104]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008854:	7c9b      	ldrb	r3, [r3, #18]
 8008856:	0018      	movs	r0, r3
 8008858:	4b19      	ldr	r3, [pc, #100]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 800885a:	2212      	movs	r2, #18
 800885c:	5e9b      	ldrsh	r3, [r3, r2]
 800885e:	4a24      	ldr	r2, [pc, #144]	@ (80088f0 <BMP280_get_calibration+0x2f4>)
 8008860:	4919      	ldr	r1, [pc, #100]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	9000      	str	r0, [sp, #0]
 8008866:	0023      	movs	r3, r4
 8008868:	2003      	movs	r0, #3
 800886a:	f007 ffd9 	bl	8010820 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800886e:	4b13      	ldr	r3, [pc, #76]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008870:	7d5b      	ldrb	r3, [r3, #21]
 8008872:	001c      	movs	r4, r3
 8008874:	4b11      	ldr	r3, [pc, #68]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008876:	7d1b      	ldrb	r3, [r3, #20]
 8008878:	0018      	movs	r0, r3
 800887a:	4b11      	ldr	r3, [pc, #68]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 800887c:	2214      	movs	r2, #20
 800887e:	5e9b      	ldrsh	r3, [r3, r2]
 8008880:	4a1c      	ldr	r2, [pc, #112]	@ (80088f4 <BMP280_get_calibration+0x2f8>)
 8008882:	4911      	ldr	r1, [pc, #68]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	9000      	str	r0, [sp, #0]
 8008888:	0023      	movs	r3, r4
 800888a:	2003      	movs	r0, #3
 800888c:	f007 ffc8 	bl	8010820 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 8008890:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008892:	7ddb      	ldrb	r3, [r3, #23]
 8008894:	001c      	movs	r4, r3
 8008896:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <BMP280_get_calibration+0x2c0>)
 8008898:	7d9b      	ldrb	r3, [r3, #22]
 800889a:	0018      	movs	r0, r3
 800889c:	4b08      	ldr	r3, [pc, #32]	@ (80088c0 <BMP280_get_calibration+0x2c4>)
 800889e:	2216      	movs	r2, #22
 80088a0:	5e9b      	ldrsh	r3, [r3, r2]
 80088a2:	4a15      	ldr	r2, [pc, #84]	@ (80088f8 <BMP280_get_calibration+0x2fc>)
 80088a4:	4908      	ldr	r1, [pc, #32]	@ (80088c8 <BMP280_get_calibration+0x2cc>)
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	9000      	str	r0, [sp, #0]
 80088aa:	0023      	movs	r3, r4
 80088ac:	2003      	movs	r0, #3
 80088ae:	f007 ffb7 	bl	8010820 <CreateLine>
}
 80088b2:	46c0      	nop			@ (mov r8, r8)
 80088b4:	46bd      	mov	sp, r7
 80088b6:	b001      	add	sp, #4
 80088b8:	bd90      	pop	{r4, r7, pc}
 80088ba:	46c0      	nop			@ (mov r8, r8)
 80088bc:	20000ba4 	.word	0x20000ba4
 80088c0:	20000b7c 	.word	0x20000b7c
 80088c4:	080270a8 	.word	0x080270a8
 80088c8:	080270c4 	.word	0x080270c4
 80088cc:	080270c8 	.word	0x080270c8
 80088d0:	080270fc 	.word	0x080270fc
 80088d4:	08027130 	.word	0x08027130
 80088d8:	08027164 	.word	0x08027164
 80088dc:	08027198 	.word	0x08027198
 80088e0:	080271cc 	.word	0x080271cc
 80088e4:	08027200 	.word	0x08027200
 80088e8:	08027234 	.word	0x08027234
 80088ec:	08027268 	.word	0x08027268
 80088f0:	0802729c 	.word	0x0802729c
 80088f4:	080272d0 	.word	0x080272d0
 80088f8:	08027304 	.word	0x08027304

080088fc <BMP280_probe>:

static bool BMP280_probe() {
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 8008902:	4b34      	ldr	r3, [pc, #208]	@ (80089d4 <BMP280_probe+0xd8>)
 8008904:	2276      	movs	r2, #118	@ 0x76
 8008906:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 8008908:	1dba      	adds	r2, r7, #6
 800890a:	2301      	movs	r3, #1
 800890c:	2101      	movs	r1, #1
 800890e:	20d0      	movs	r0, #208	@ 0xd0
 8008910:	f7ff fe14 	bl	800853c <ReadMemRegister>
 8008914:	0003      	movs	r3, r0
 8008916:	001a      	movs	r2, r3
 8008918:	1dfb      	adds	r3, r7, #7
 800891a:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800891c:	1dfb      	adds	r3, r7, #7
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	b25b      	sxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <BMP280_probe+0x40>
 8008926:	1dbb      	adds	r3, r7, #6
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d006      	beq.n	800893c <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800892e:	1dbb      	adds	r3, r7, #6
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	4a29      	ldr	r2, [pc, #164]	@ (80089d8 <BMP280_probe+0xdc>)
 8008934:	4929      	ldr	r1, [pc, #164]	@ (80089dc <BMP280_probe+0xe0>)
 8008936:	2003      	movs	r0, #3
 8008938:	f007 ff72 	bl	8010820 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800893c:	1dbb      	adds	r3, r7, #6
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b58      	cmp	r3, #88	@ 0x58
 8008942:	d01f      	beq.n	8008984 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 8008944:	4b23      	ldr	r3, [pc, #140]	@ (80089d4 <BMP280_probe+0xd8>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	3301      	adds	r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	4b21      	ldr	r3, [pc, #132]	@ (80089d4 <BMP280_probe+0xd8>)
 800894e:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 8008950:	1dba      	adds	r2, r7, #6
 8008952:	2301      	movs	r3, #1
 8008954:	2101      	movs	r1, #1
 8008956:	20d0      	movs	r0, #208	@ 0xd0
 8008958:	f7ff fdf0 	bl	800853c <ReadMemRegister>
 800895c:	0003      	movs	r3, r0
 800895e:	001a      	movs	r2, r3
 8008960:	1dfb      	adds	r3, r7, #7
 8008962:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 8008964:	1dfb      	adds	r3, r7, #7
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	b25b      	sxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <BMP280_probe+0x88>
 800896e:	1dbb      	adds	r3, r7, #6
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d006      	beq.n	8008984 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 8008976:	1dbb      	adds	r3, r7, #6
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	4a17      	ldr	r2, [pc, #92]	@ (80089d8 <BMP280_probe+0xdc>)
 800897c:	4917      	ldr	r1, [pc, #92]	@ (80089dc <BMP280_probe+0xe0>)
 800897e:	2003      	movs	r0, #3
 8008980:	f007 ff4e 	bl	8010820 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 8008984:	1dbb      	adds	r3, r7, #6
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b58      	cmp	r3, #88	@ 0x58
 800898a:	d110      	bne.n	80089ae <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800898c:	1dbb      	adds	r3, r7, #6
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	0018      	movs	r0, r3
 8008992:	4b10      	ldr	r3, [pc, #64]	@ (80089d4 <BMP280_probe+0xd8>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	4a12      	ldr	r2, [pc, #72]	@ (80089e0 <BMP280_probe+0xe4>)
 8008998:	4912      	ldr	r1, [pc, #72]	@ (80089e4 <BMP280_probe+0xe8>)
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	0003      	movs	r3, r0
 800899e:	2002      	movs	r0, #2
 80089a0:	f007 ff3e 	bl	8010820 <CreateLine>
      BMP280_reset(); // get an initial state
 80089a4:	f7ff fe0c 	bl	80085c0 <BMP280_reset>
      BMP280_get_calibration();
 80089a8:	f7ff fe28 	bl	80085fc <BMP280_get_calibration>
 80089ac:	e008      	b.n	80089c0 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 80089ae:	4b09      	ldr	r3, [pc, #36]	@ (80089d4 <BMP280_probe+0xd8>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 80089b4:	4a0c      	ldr	r2, [pc, #48]	@ (80089e8 <BMP280_probe+0xec>)
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <BMP280_probe+0xf0>)
 80089b8:	0019      	movs	r1, r3
 80089ba:	2001      	movs	r0, #1
 80089bc:	f007 ff30 	bl	8010820 <CreateLine>
    }
    return bmp280I2Caddr;
 80089c0:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <BMP280_probe+0xd8>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	1e5a      	subs	r2, r3, #1
 80089c6:	4193      	sbcs	r3, r2
 80089c8:	b2db      	uxtb	r3, r3
}
 80089ca:	0018      	movs	r0, r3
 80089cc:	46bd      	mov	sp, r7
 80089ce:	b002      	add	sp, #8
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	46c0      	nop			@ (mov r8, r8)
 80089d4:	20000092 	.word	0x20000092
 80089d8:	08027338 	.word	0x08027338
 80089dc:	080270c4 	.word	0x080270c4
 80089e0:	08027368 	.word	0x08027368
 80089e4:	080270a4 	.word	0x080270a4
 80089e8:	080273a0 	.word	0x080273a0
 80089ec:	080273b4 	.word	0x080273b4

080089f0 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  return BMP280_probe();
 80089f4:	f7ff ff82 	bl	80088fc <BMP280_probe>
 80089f8:	0003      	movs	r3, r0
}
 80089fa:	0018      	movs	r0, r3
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 8008a0a:	4b05      	ldr	r3, [pc, #20]	@ (8008a20 <BMP_Init+0x20>)
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 8008a10:	4b04      	ldr	r3, [pc, #16]	@ (8008a24 <BMP_Init+0x24>)
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	601a      	str	r2, [r3, #0]
}
 8008a16:	46c0      	nop			@ (mov r8, r8)
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b002      	add	sp, #8
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	46c0      	nop			@ (mov r8, r8)
 8008a20:	20000b78 	.word	0x20000b78
 8008a24:	20000b74 	.word	0x20000b74

08008a28 <BMP280_set_config>:


static bool BMP280_set_config() {
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 8008a2e:	1dbb      	adds	r3, r7, #6
 8008a30:	228c      	movs	r2, #140	@ 0x8c
 8008a32:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 8008a34:	1dba      	adds	r2, r7, #6
 8008a36:	2301      	movs	r3, #1
 8008a38:	2101      	movs	r1, #1
 8008a3a:	20f5      	movs	r0, #245	@ 0xf5
 8008a3c:	f7ff fd4e 	bl	80084dc <WriteMemRegister>
 8008a40:	0003      	movs	r3, r0
 8008a42:	001a      	movs	r2, r3
 8008a44:	1dfb      	adds	r3, r7, #7
 8008a46:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 8008a48:	f008 fb36 	bl	80110b8 <HAL_GetTick>
 8008a4c:	0003      	movs	r3, r0
 8008a4e:	330a      	adds	r3, #10
 8008a50:	001a      	movs	r2, r3
 8008a52:	4b06      	ldr	r3, [pc, #24]	@ (8008a6c <BMP280_set_config+0x44>)
 8008a54:	601a      	str	r2, [r3, #0]
  return rslt;
 8008a56:	1dfb      	adds	r3, r7, #7
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	b25b      	sxtb	r3, r3
 8008a5c:	1e5a      	subs	r2, r3, #1
 8008a5e:	4193      	sbcs	r3, r2
 8008a60:	b2db      	uxtb	r3, r3
}
 8008a62:	0018      	movs	r0, r3
 8008a64:	46bd      	mov	sp, r7
 8008a66:	b002      	add	sp, #8
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	46c0      	nop			@ (mov r8, r8)
 8008a6c:	20000ba0 	.word	0x20000ba0

08008a70 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 8008a76:	1dbb      	adds	r3, r7, #6
 8008a78:	2208      	movs	r2, #8
 8008a7a:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 8008a7c:	4b22      	ldr	r3, [pc, #136]	@ (8008b08 <BMP280_set_mode+0x98>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	224c      	movs	r2, #76	@ 0x4c
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	1d7b      	adds	r3, r7, #5
 8008a88:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 8008a8a:	1d7a      	adds	r2, r7, #5
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	2101      	movs	r1, #1
 8008a90:	20f4      	movs	r0, #244	@ 0xf4
 8008a92:	f7ff fd23 	bl	80084dc <WriteMemRegister>
 8008a96:	0003      	movs	r3, r0
 8008a98:	001a      	movs	r2, r3
 8008a9a:	1dfb      	adds	r3, r7, #7
 8008a9c:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 8008a9e:	f008 fb0b 	bl	80110b8 <HAL_GetTick>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	22fa      	movs	r2, #250	@ 0xfa
 8008aa6:	0092      	lsls	r2, r2, #2
 8008aa8:	189a      	adds	r2, r3, r2
 8008aaa:	4b18      	ldr	r3, [pc, #96]	@ (8008b0c <BMP280_set_mode+0x9c>)
 8008aac:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 8008aae:	e016      	b.n	8008ade <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 8008ab0:	1dba      	adds	r2, r7, #6
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	20f3      	movs	r0, #243	@ 0xf3
 8008ab8:	f7ff fd40 	bl	800853c <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 8008abc:	4b13      	ldr	r3, [pc, #76]	@ (8008b0c <BMP280_set_mode+0x9c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f007 fe57 	bl	8010774 <TimestampIsReached>
 8008ac6:	1e03      	subs	r3, r0, #0
 8008ac8:	d006      	beq.n	8008ad8 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 8008aca:	4a11      	ldr	r2, [pc, #68]	@ (8008b10 <BMP280_set_mode+0xa0>)
 8008acc:	4b11      	ldr	r3, [pc, #68]	@ (8008b14 <BMP280_set_mode+0xa4>)
 8008ace:	0019      	movs	r1, r3
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	f007 fea5 	bl	8010820 <CreateLine>
      break;
 8008ad6:	e008      	b.n	8008aea <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 8008ad8:	2001      	movs	r0, #1
 8008ada:	f008 faf7 	bl	80110cc <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 8008ade:	1dbb      	adds	r3, r7, #6
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	001a      	movs	r2, r3
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	d1e2      	bne.n	8008ab0 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 8008aea:	f008 fae5 	bl	80110b8 <HAL_GetTick>
 8008aee:	0002      	movs	r2, r0
 8008af0:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <BMP280_set_mode+0x9c>)
 8008af2:	601a      	str	r2, [r3, #0]
  return rslt;
 8008af4:	1dfb      	adds	r3, r7, #7
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	b25b      	sxtb	r3, r3
 8008afa:	1e5a      	subs	r2, r3, #1
 8008afc:	4193      	sbcs	r3, r2
 8008afe:	b2db      	uxtb	r3, r3
}
 8008b00:	0018      	movs	r0, r3
 8008b02:	46bd      	mov	sp, r7
 8008b04:	b002      	add	sp, #8
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000093 	.word	0x20000093
 8008b0c:	20000ba0 	.word	0x20000ba0
 8008b10:	080273b8 	.word	0x080273b8
 8008b14:	080273b4 	.word	0x080273b4

08008b18 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 8008b1e:	1dba      	adds	r2, r7, #6
 8008b20:	2301      	movs	r3, #1
 8008b22:	2101      	movs	r1, #1
 8008b24:	20f4      	movs	r0, #244	@ 0xf4
 8008b26:	f7ff fd09 	bl	800853c <ReadMemRegister>
 8008b2a:	0003      	movs	r3, r0
 8008b2c:	001a      	movs	r2, r3
 8008b2e:	1dfb      	adds	r3, r7, #7
 8008b30:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 8008b32:	1dbb      	adds	r3, r7, #6
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2203      	movs	r2, #3
 8008b38:	4013      	ands	r3, r2
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	1dbb      	adds	r3, r7, #6
 8008b3e:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 8008b40:	f008 faba 	bl	80110b8 <HAL_GetTick>
 8008b44:	0003      	movs	r3, r0
 8008b46:	330a      	adds	r3, #10
 8008b48:	001a      	movs	r2, r3
 8008b4a:	4b08      	ldr	r3, [pc, #32]	@ (8008b6c <BMP280_get_mode+0x54>)
 8008b4c:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 8008b4e:	1dfb      	adds	r3, r7, #7
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <BMP280_get_mode+0x46>
    bmpData = 255;
 8008b58:	1dbb      	adds	r3, r7, #6
 8008b5a:	22ff      	movs	r2, #255	@ 0xff
 8008b5c:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 8008b5e:	1dbb      	adds	r3, r7, #6
 8008b60:	781b      	ldrb	r3, [r3, #0]
}
 8008b62:	0018      	movs	r0, r3
 8008b64:	46bd      	mov	sp, r7
 8008b66:	b002      	add	sp, #8
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	46c0      	nop			@ (mov r8, r8)
 8008b6c:	20000ba0 	.word	0x20000ba0

08008b70 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 8008b70:	b5b0      	push	{r4, r5, r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 8008b76:	1d3a      	adds	r2, r7, #4
 8008b78:	2306      	movs	r3, #6
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	20f7      	movs	r0, #247	@ 0xf7
 8008b7e:	f7ff fcdd 	bl	800853c <ReadMemRegister>
 8008b82:	0003      	movs	r3, r0
 8008b84:	001a      	movs	r2, r3
 8008b86:	230f      	movs	r3, #15
 8008b88:	18fb      	adds	r3, r7, r3
 8008b8a:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 8008b8c:	1d3b      	adds	r3, r7, #4
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b80      	cmp	r3, #128	@ 0x80
 8008b92:	d00f      	beq.n	8008bb4 <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 8008b94:	1d3b      	adds	r3, r7, #4
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	031a      	lsls	r2, r3, #12
 8008b9a:	1d3b      	adds	r3, r7, #4
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	011b      	lsls	r3, r3, #4
 8008ba0:	18d3      	adds	r3, r2, r3
 8008ba2:	1d3a      	adds	r2, r7, #4
 8008ba4:	7892      	ldrb	r2, [r2, #2]
 8008ba6:	0912      	lsrs	r2, r2, #4
 8008ba8:	b2d2      	uxtb	r2, r2
 8008baa:	189b      	adds	r3, r3, r2
 8008bac:	001a      	movs	r2, r3
 8008bae:	4b2b      	ldr	r3, [pc, #172]	@ (8008c5c <BMP280_get_measurement_values+0xec>)
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	e019      	b.n	8008be8 <BMP280_get_measurement_values+0x78>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 8008bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8008c60 <BMP280_get_measurement_values+0xf0>)
 8008bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8008c64 <BMP280_get_measurement_values+0xf4>)
 8008bb8:	0019      	movs	r1, r3
 8008bba:	2001      	movs	r0, #1
 8008bbc:	f007 fe30 	bl	8010820 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 8008bc0:	1d3b      	adds	r3, r7, #4
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	001d      	movs	r5, r3
 8008bc6:	1d3b      	adds	r3, r7, #4
 8008bc8:	785b      	ldrb	r3, [r3, #1]
 8008bca:	0018      	movs	r0, r3
 8008bcc:	1d3b      	adds	r3, r7, #4
 8008bce:	789b      	ldrb	r3, [r3, #2]
 8008bd0:	001c      	movs	r4, r3
 8008bd2:	4b22      	ldr	r3, [pc, #136]	@ (8008c5c <BMP280_get_measurement_values+0xec>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a24      	ldr	r2, [pc, #144]	@ (8008c68 <BMP280_get_measurement_values+0xf8>)
 8008bd8:	4924      	ldr	r1, [pc, #144]	@ (8008c6c <BMP280_get_measurement_values+0xfc>)
 8008bda:	9302      	str	r3, [sp, #8]
 8008bdc:	9401      	str	r4, [sp, #4]
 8008bde:	9000      	str	r0, [sp, #0]
 8008be0:	002b      	movs	r3, r5
 8008be2:	2003      	movs	r0, #3
 8008be4:	f007 fe1c 	bl	8010820 <CreateLine>
  }
  if (bmpData[3] != 0x80) {
 8008be8:	1d3b      	adds	r3, r7, #4
 8008bea:	78db      	ldrb	r3, [r3, #3]
 8008bec:	2b80      	cmp	r3, #128	@ 0x80
 8008bee:	d00f      	beq.n	8008c10 <BMP280_get_measurement_values+0xa0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	78db      	ldrb	r3, [r3, #3]
 8008bf4:	031a      	lsls	r2, r3, #12
 8008bf6:	1d3b      	adds	r3, r7, #4
 8008bf8:	791b      	ldrb	r3, [r3, #4]
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	18d3      	adds	r3, r2, r3
 8008bfe:	1d3a      	adds	r2, r7, #4
 8008c00:	7952      	ldrb	r2, [r2, #5]
 8008c02:	0912      	lsrs	r2, r2, #4
 8008c04:	b2d2      	uxtb	r2, r2
 8008c06:	189b      	adds	r3, r3, r2
 8008c08:	001a      	movs	r2, r3
 8008c0a:	4b19      	ldr	r3, [pc, #100]	@ (8008c70 <BMP280_get_measurement_values+0x100>)
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	e019      	b.n	8008c44 <BMP280_get_measurement_values+0xd4>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 8008c10:	4a18      	ldr	r2, [pc, #96]	@ (8008c74 <BMP280_get_measurement_values+0x104>)
 8008c12:	4b14      	ldr	r3, [pc, #80]	@ (8008c64 <BMP280_get_measurement_values+0xf4>)
 8008c14:	0019      	movs	r1, r3
 8008c16:	2001      	movs	r0, #1
 8008c18:	f007 fe02 	bl	8010820 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 8008c1c:	1d3b      	adds	r3, r7, #4
 8008c1e:	78db      	ldrb	r3, [r3, #3]
 8008c20:	001d      	movs	r5, r3
 8008c22:	1d3b      	adds	r3, r7, #4
 8008c24:	791b      	ldrb	r3, [r3, #4]
 8008c26:	0018      	movs	r0, r3
 8008c28:	1d3b      	adds	r3, r7, #4
 8008c2a:	795b      	ldrb	r3, [r3, #5]
 8008c2c:	001c      	movs	r4, r3
 8008c2e:	4b10      	ldr	r3, [pc, #64]	@ (8008c70 <BMP280_get_measurement_values+0x100>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a11      	ldr	r2, [pc, #68]	@ (8008c78 <BMP280_get_measurement_values+0x108>)
 8008c34:	490d      	ldr	r1, [pc, #52]	@ (8008c6c <BMP280_get_measurement_values+0xfc>)
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	9401      	str	r4, [sp, #4]
 8008c3a:	9000      	str	r0, [sp, #0]
 8008c3c:	002b      	movs	r3, r5
 8008c3e:	2003      	movs	r0, #3
 8008c40:	f007 fdee 	bl	8010820 <CreateLine>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 8008c44:	230f      	movs	r3, #15
 8008c46:	18fb      	adds	r3, r7, r3
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b25b      	sxtb	r3, r3
 8008c4c:	1e5a      	subs	r2, r3, #1
 8008c4e:	4193      	sbcs	r3, r2
 8008c50:	b2db      	uxtb	r3, r3
}
 8008c52:	0018      	movs	r0, r3
 8008c54:	46bd      	mov	sp, r7
 8008c56:	b004      	add	sp, #16
 8008c58:	bdb0      	pop	{r4, r5, r7, pc}
 8008c5a:	46c0      	nop			@ (mov r8, r8)
 8008c5c:	20000b9c 	.word	0x20000b9c
 8008c60:	080273e4 	.word	0x080273e4
 8008c64:	080273b4 	.word	0x080273b4
 8008c68:	08027428 	.word	0x08027428
 8008c6c:	080270c4 	.word	0x080270c4
 8008c70:	20000b98 	.word	0x20000b98
 8008c74:	08027470 	.word	0x08027470
 8008c78:	080274ac 	.word	0x080274ac

08008c7c <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 8008c82:	4b1e      	ldr	r3, [pc, #120]	@ (8008cfc <BMP280_calc_temperature+0x80>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	10da      	asrs	r2, r3, #3
 8008c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008d00 <BMP280_calc_temperature+0x84>)
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	4a1a      	ldr	r2, [pc, #104]	@ (8008d00 <BMP280_calc_temperature+0x84>)
 8008c96:	2102      	movs	r1, #2
 8008c98:	5e52      	ldrsh	r2, [r2, r1]
 8008c9a:	4353      	muls	r3, r2
 8008c9c:	12db      	asrs	r3, r3, #11
 8008c9e:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	111b      	asrs	r3, r3, #4
 8008ca4:	4a16      	ldr	r2, [pc, #88]	@ (8008d00 <BMP280_calc_temperature+0x84>)
 8008ca6:	8812      	ldrh	r2, [r2, #0]
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	1112      	asrs	r2, r2, #4
 8008cae:	4914      	ldr	r1, [pc, #80]	@ (8008d00 <BMP280_calc_temperature+0x84>)
 8008cb0:	8809      	ldrh	r1, [r1, #0]
 8008cb2:	1a52      	subs	r2, r2, r1
 8008cb4:	4353      	muls	r3, r2
 8008cb6:	131b      	asrs	r3, r3, #12
 8008cb8:	4a11      	ldr	r2, [pc, #68]	@ (8008d00 <BMP280_calc_temperature+0x84>)
 8008cba:	2104      	movs	r1, #4
 8008cbc:	5e52      	ldrsh	r2, [r2, r1]
 8008cbe:	4353      	muls	r3, r2
 8008cc0:	139b      	asrs	r3, r3, #14
 8008cc2:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	18d2      	adds	r2, r2, r3
 8008cca:	4b0e      	ldr	r3, [pc, #56]	@ (8008d04 <BMP280_calc_temperature+0x88>)
 8008ccc:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 8008cce:	4b0d      	ldr	r3, [pc, #52]	@ (8008d04 <BMP280_calc_temperature+0x88>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	0013      	movs	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	189b      	adds	r3, r3, r2
 8008cd8:	3380      	adds	r3, #128	@ 0x80
 8008cda:	121b      	asrs	r3, r3, #8
 8008cdc:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 8008cde:	68b8      	ldr	r0, [r7, #8]
 8008ce0:	f7f8 fc76 	bl	80015d0 <__aeabi_i2f>
 8008ce4:	1c03      	adds	r3, r0, #0
 8008ce6:	4908      	ldr	r1, [pc, #32]	@ (8008d08 <BMP280_calc_temperature+0x8c>)
 8008ce8:	1c18      	adds	r0, r3, #0
 8008cea:	f7f7 ff73 	bl	8000bd4 <__aeabi_fdiv>
 8008cee:	1c03      	adds	r3, r0, #0
 8008cf0:	607b      	str	r3, [r7, #4]
  return airTemp;
 8008cf2:	687b      	ldr	r3, [r7, #4]
}
 8008cf4:	1c18      	adds	r0, r3, #0
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	b006      	add	sp, #24
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20000b98 	.word	0x20000b98
 8008d00:	20000b7c 	.word	0x20000b7c
 8008d04:	20000b94 	.word	0x20000b94
 8008d08:	42c80000 	.word	0x42c80000

08008d0c <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 8008d12:	4b4e      	ldr	r3, [pc, #312]	@ (8008e4c <BMP280_calc_pressure+0x140>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 8008d18:	4b4d      	ldr	r3, [pc, #308]	@ (8008e50 <BMP280_calc_pressure+0x144>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	105b      	asrs	r3, r3, #1
 8008d1e:	4a4d      	ldr	r2, [pc, #308]	@ (8008e54 <BMP280_calc_pressure+0x148>)
 8008d20:	4694      	mov	ip, r2
 8008d22:	4463      	add	r3, ip
 8008d24:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	109b      	asrs	r3, r3, #2
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	1092      	asrs	r2, r2, #2
 8008d2e:	4353      	muls	r3, r2
 8008d30:	12db      	asrs	r3, r3, #11
 8008d32:	4a49      	ldr	r2, [pc, #292]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008d34:	2110      	movs	r1, #16
 8008d36:	5e52      	ldrsh	r2, [r2, r1]
 8008d38:	4353      	muls	r3, r2
 8008d3a:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 8008d3c:	4b46      	ldr	r3, [pc, #280]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008d3e:	220e      	movs	r2, #14
 8008d40:	5e9b      	ldrsh	r3, [r3, r2]
 8008d42:	001a      	movs	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4353      	muls	r3, r2
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	18d3      	adds	r3, r2, r3
 8008d4e:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	109a      	asrs	r2, r3, #2
 8008d54:	4b40      	ldr	r3, [pc, #256]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008d56:	210c      	movs	r1, #12
 8008d58:	5e5b      	ldrsh	r3, [r3, r1]
 8008d5a:	041b      	lsls	r3, r3, #16
 8008d5c:	18d3      	adds	r3, r2, r3
 8008d5e:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 8008d60:	4b3d      	ldr	r3, [pc, #244]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008d62:	220a      	movs	r2, #10
 8008d64:	5e9b      	ldrsh	r3, [r3, r2]
 8008d66:	0019      	movs	r1, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	109b      	asrs	r3, r3, #2
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	1092      	asrs	r2, r2, #2
 8008d70:	4353      	muls	r3, r2
 8008d72:	135b      	asrs	r3, r3, #13
 8008d74:	434b      	muls	r3, r1
 8008d76:	10da      	asrs	r2, r3, #3
 8008d78:	4b37      	ldr	r3, [pc, #220]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008d7a:	2108      	movs	r1, #8
 8008d7c:	5e5b      	ldrsh	r3, [r3, r1]
 8008d7e:	0019      	movs	r1, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	434b      	muls	r3, r1
 8008d84:	105b      	asrs	r3, r3, #1
 8008d86:	18d3      	adds	r3, r2, r3
 8008d88:	149b      	asrs	r3, r3, #18
 8008d8a:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2280      	movs	r2, #128	@ 0x80
 8008d90:	0212      	lsls	r2, r2, #8
 8008d92:	4694      	mov	ip, r2
 8008d94:	4463      	add	r3, ip
 8008d96:	4a30      	ldr	r2, [pc, #192]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008d98:	88d2      	ldrh	r2, [r2, #6]
 8008d9a:	4353      	muls	r3, r2
 8008d9c:	13db      	asrs	r3, r3, #15
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <BMP280_calc_pressure+0x9e>
    return 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e04b      	b.n	8008e42 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2280      	movs	r2, #128	@ 0x80
 8008dae:	0352      	lsls	r2, r2, #13
 8008db0:	1ad2      	subs	r2, r2, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	131b      	asrs	r3, r3, #12
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	001a      	movs	r2, r3
 8008dba:	4b28      	ldr	r3, [pc, #160]	@ (8008e5c <BMP280_calc_pressure+0x150>)
 8008dbc:	4353      	muls	r3, r2
 8008dbe:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	db09      	blt.n	8008dda <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	0011      	movs	r1, r2
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f7f7 f9e8 	bl	80001a4 <__udivsi3>
 8008dd4:	0003      	movs	r3, r0
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	e007      	b.n	8008dea <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	0019      	movs	r1, r3
 8008dde:	6978      	ldr	r0, [r7, #20]
 8008de0:	f7f7 f9e0 	bl	80001a4 <__udivsi3>
 8008de4:	0003      	movs	r3, r0
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 8008dea:	4b1b      	ldr	r3, [pc, #108]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008dec:	2216      	movs	r2, #22
 8008dee:	5e9b      	ldrsh	r3, [r3, r2]
 8008df0:	0019      	movs	r1, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	08db      	lsrs	r3, r3, #3
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	08d2      	lsrs	r2, r2, #3
 8008dfa:	4353      	muls	r3, r2
 8008dfc:	0b5b      	lsrs	r3, r3, #13
 8008dfe:	434b      	muls	r3, r1
 8008e00:	131b      	asrs	r3, r3, #12
 8008e02:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	089b      	lsrs	r3, r3, #2
 8008e08:	001a      	movs	r2, r3
 8008e0a:	4b13      	ldr	r3, [pc, #76]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008e0c:	2114      	movs	r1, #20
 8008e0e:	5e5b      	ldrsh	r3, [r3, r1]
 8008e10:	4353      	muls	r3, r2
 8008e12:	135b      	asrs	r3, r3, #13
 8008e14:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	18d3      	adds	r3, r2, r3
 8008e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8008e58 <BMP280_calc_pressure+0x14c>)
 8008e1e:	2112      	movs	r1, #18
 8008e20:	5e52      	ldrsh	r2, [r2, r1]
 8008e22:	189b      	adds	r3, r3, r2
 8008e24:	111a      	asrs	r2, r3, #4
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	18d3      	adds	r3, r2, r3
 8008e2a:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 8008e2c:	6978      	ldr	r0, [r7, #20]
 8008e2e:	f7f8 fc1b 	bl	8001668 <__aeabi_ui2f>
 8008e32:	1c03      	adds	r3, r0, #0
 8008e34:	490a      	ldr	r1, [pc, #40]	@ (8008e60 <BMP280_calc_pressure+0x154>)
 8008e36:	1c18      	adds	r0, r3, #0
 8008e38:	f7f7 fecc 	bl	8000bd4 <__aeabi_fdiv>
 8008e3c:	1c03      	adds	r3, r0, #0
 8008e3e:	607b      	str	r3, [r7, #4]
  return airhPa;
 8008e40:	687b      	ldr	r3, [r7, #4]
}
 8008e42:	1c18      	adds	r0, r3, #0
 8008e44:	46bd      	mov	sp, r7
 8008e46:	b006      	add	sp, #24
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	46c0      	nop			@ (mov r8, r8)
 8008e4c:	20000b9c 	.word	0x20000b9c
 8008e50:	20000b94 	.word	0x20000b94
 8008e54:	ffff0600 	.word	0xffff0600
 8008e58:	20000b7c 	.word	0x20000b7c
 8008e5c:	00000c35 	.word	0x00000c35
 8008e60:	42c80000 	.word	0x42c80000

08008e64 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 8008e64:	b5b0      	push	{r4, r5, r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 8008e6a:	4b97      	ldr	r3, [pc, #604]	@ (80090c8 <BMP_Upkeep+0x264>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f007 fc80 	bl	8010774 <TimestampIsReached>
 8008e74:	0003      	movs	r3, r0
 8008e76:	001a      	movs	r2, r3
 8008e78:	2301      	movs	r3, #1
 8008e7a:	4053      	eors	r3, r2
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <BMP_Upkeep+0x24>
    return BMPState;
 8008e82:	4b92      	ldr	r3, [pc, #584]	@ (80090cc <BMP_Upkeep+0x268>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	e11b      	b.n	80090c0 <BMP_Upkeep+0x25c>
  }
  switch(BMPState) {
 8008e88:	4b90      	ldr	r3, [pc, #576]	@ (80090cc <BMP_Upkeep+0x268>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d900      	bls.n	8008e92 <BMP_Upkeep+0x2e>
 8008e90:	e101      	b.n	8009096 <BMP_Upkeep+0x232>
 8008e92:	009a      	lsls	r2, r3, #2
 8008e94:	4b8e      	ldr	r3, [pc, #568]	@ (80090d0 <BMP_Upkeep+0x26c>)
 8008e96:	18d3      	adds	r3, r2, r3
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 8008e9c:	4a8d      	ldr	r2, [pc, #564]	@ (80090d4 <BMP_Upkeep+0x270>)
 8008e9e:	4b8e      	ldr	r3, [pc, #568]	@ (80090d8 <BMP_Upkeep+0x274>)
 8008ea0:	0019      	movs	r1, r3
 8008ea2:	2003      	movs	r0, #3
 8008ea4:	f007 fcbc 	bl	8010820 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8008ea8:	f008 f906 	bl	80110b8 <HAL_GetTick>
 8008eac:	0003      	movs	r3, r0
 8008eae:	4a8b      	ldr	r2, [pc, #556]	@ (80090dc <BMP_Upkeep+0x278>)
 8008eb0:	189a      	adds	r2, r3, r2
 8008eb2:	4b85      	ldr	r3, [pc, #532]	@ (80090c8 <BMP_Upkeep+0x264>)
 8008eb4:	601a      	str	r2, [r3, #0]
    break;
 8008eb6:	e101      	b.n	80090bc <BMP_Upkeep+0x258>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 8008eb8:	f001 fe2a 	bl	800ab10 <getSensorLock>
 8008ebc:	1e03      	subs	r3, r0, #0
 8008ebe:	d000      	beq.n	8008ec2 <BMP_Upkeep+0x5e>
 8008ec0:	e0f5      	b.n	80090ae <BMP_Upkeep+0x24a>
      break;
    }
    BMP280_reset();
 8008ec2:	f7ff fb7d 	bl	80085c0 <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 8008ec6:	4b81      	ldr	r3, [pc, #516]	@ (80090cc <BMP_Upkeep+0x268>)
 8008ec8:	2201      	movs	r2, #1
 8008eca:	701a      	strb	r2, [r3, #0]
    break;
 8008ecc:	e0f6      	b.n	80090bc <BMP_Upkeep+0x258>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 8008ece:	f001 fe1f 	bl	800ab10 <getSensorLock>
 8008ed2:	1e03      	subs	r3, r0, #0
 8008ed4:	d000      	beq.n	8008ed8 <BMP_Upkeep+0x74>
 8008ed6:	e0ec      	b.n	80090b2 <BMP_Upkeep+0x24e>
      break;
    }
    setSensorLock(BMP280);
 8008ed8:	2004      	movs	r0, #4
 8008eda:	f001 fe09 	bl	800aaf0 <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 8008ede:	200a      	movs	r0, #10
 8008ee0:	f008 f8f4 	bl	80110cc <HAL_Delay>
    if (BMP280_set_config()) {
 8008ee4:	f7ff fda0 	bl	8008a28 <BMP280_set_config>
 8008ee8:	1e03      	subs	r3, r0, #0
 8008eea:	d003      	beq.n	8008ef4 <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8008eec:	4b77      	ldr	r3, [pc, #476]	@ (80090cc <BMP_Upkeep+0x268>)
 8008eee:	2202      	movs	r2, #2
 8008ef0:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 8008ef2:	e0e3      	b.n	80090bc <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8008ef4:	4b75      	ldr	r3, [pc, #468]	@ (80090cc <BMP_Upkeep+0x268>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
  break;
 8008efa:	e0df      	b.n	80090bc <BMP_Upkeep+0x258>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 8008efc:	f001 fe08 	bl	800ab10 <getSensorLock>
 8008f00:	1e03      	subs	r3, r0, #0
 8008f02:	d035      	beq.n	8008f70 <BMP_Upkeep+0x10c>
 8008f04:	f001 fe04 	bl	800ab10 <getSensorLock>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d030      	beq.n	8008f70 <BMP_Upkeep+0x10c>
      uint8_t locktype = getSensorLock();
 8008f0e:	1dfc      	adds	r4, r7, #7
 8008f10:	f001 fdfe 	bl	800ab10 <getSensorLock>
 8008f14:	0003      	movs	r3, r0
 8008f16:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 8008f18:	1dfb      	adds	r3, r7, #7
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d019      	beq.n	8008f54 <BMP_Upkeep+0xf0>
 8008f20:	1dfb      	adds	r3, r7, #7
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d013      	beq.n	8008f50 <BMP_Upkeep+0xec>
 8008f28:	1dfb      	adds	r3, r7, #7
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d00d      	beq.n	8008f4c <BMP_Upkeep+0xe8>
 8008f30:	1dfb      	adds	r3, r7, #7
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d007      	beq.n	8008f48 <BMP_Upkeep+0xe4>
 8008f38:	1dfb      	adds	r3, r7, #7
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d101      	bne.n	8008f44 <BMP_Upkeep+0xe0>
 8008f40:	4b67      	ldr	r3, [pc, #412]	@ (80090e0 <BMP_Upkeep+0x27c>)
 8008f42:	e008      	b.n	8008f56 <BMP_Upkeep+0xf2>
 8008f44:	4b67      	ldr	r3, [pc, #412]	@ (80090e4 <BMP_Upkeep+0x280>)
 8008f46:	e006      	b.n	8008f56 <BMP_Upkeep+0xf2>
 8008f48:	4b67      	ldr	r3, [pc, #412]	@ (80090e8 <BMP_Upkeep+0x284>)
 8008f4a:	e004      	b.n	8008f56 <BMP_Upkeep+0xf2>
 8008f4c:	4b67      	ldr	r3, [pc, #412]	@ (80090ec <BMP_Upkeep+0x288>)
 8008f4e:	e002      	b.n	8008f56 <BMP_Upkeep+0xf2>
 8008f50:	4b67      	ldr	r3, [pc, #412]	@ (80090f0 <BMP_Upkeep+0x28c>)
 8008f52:	e000      	b.n	8008f56 <BMP_Upkeep+0xf2>
 8008f54:	4b67      	ldr	r3, [pc, #412]	@ (80090f4 <BMP_Upkeep+0x290>)
 8008f56:	4a68      	ldr	r2, [pc, #416]	@ (80090f8 <BMP_Upkeep+0x294>)
 8008f58:	495f      	ldr	r1, [pc, #380]	@ (80090d8 <BMP_Upkeep+0x274>)
 8008f5a:	2003      	movs	r0, #3
 8008f5c:	f007 fc60 	bl	8010820 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 8008f60:	f008 f8aa 	bl	80110b8 <HAL_GetTick>
 8008f64:	0003      	movs	r3, r0
 8008f66:	3361      	adds	r3, #97	@ 0x61
 8008f68:	001a      	movs	r2, r3
 8008f6a:	4b57      	ldr	r3, [pc, #348]	@ (80090c8 <BMP_Upkeep+0x264>)
 8008f6c:	601a      	str	r2, [r3, #0]
      break;
 8008f6e:	e0a5      	b.n	80090bc <BMP_Upkeep+0x258>
    }
    if (getSensorLock() == FREE) {
 8008f70:	f001 fdce 	bl	800ab10 <getSensorLock>
 8008f74:	1e03      	subs	r3, r0, #0
 8008f76:	d105      	bne.n	8008f84 <BMP_Upkeep+0x120>
      HAL_Delay(10);
 8008f78:	200a      	movs	r0, #10
 8008f7a:	f008 f8a7 	bl	80110cc <HAL_Delay>
      setSensorLock(BMP280);
 8008f7e:	2004      	movs	r0, #4
 8008f80:	f001 fdb6 	bl	800aaf0 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 8008f84:	f7ff fd74 	bl	8008a70 <BMP280_set_mode>
 8008f88:	1e03      	subs	r3, r0, #0
 8008f8a:	d003      	beq.n	8008f94 <BMP_Upkeep+0x130>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8008f8c:	4b4f      	ldr	r3, [pc, #316]	@ (80090cc <BMP_Upkeep+0x268>)
 8008f8e:	2205      	movs	r2, #5
 8008f90:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 8008f92:	e093      	b.n	80090bc <BMP_Upkeep+0x258>
      Error("Error while setting BMP280 to forced mode");
 8008f94:	4a59      	ldr	r2, [pc, #356]	@ (80090fc <BMP_Upkeep+0x298>)
 8008f96:	4b5a      	ldr	r3, [pc, #360]	@ (8009100 <BMP_Upkeep+0x29c>)
 8008f98:	0019      	movs	r1, r3
 8008f9a:	2001      	movs	r0, #1
 8008f9c:	f007 fc40 	bl	8010820 <CreateLine>
      BMPState = BMP_STATE_INIT ;
 8008fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80090cc <BMP_Upkeep+0x268>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
    break;
 8008fa6:	e089      	b.n	80090bc <BMP_Upkeep+0x258>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 8008fa8:	f7ff fde2 	bl	8008b70 <BMP280_get_measurement_values>
 8008fac:	1e03      	subs	r3, r0, #0
 8008fae:	d006      	beq.n	8008fbe <BMP_Upkeep+0x15a>
      setSensorLock(FREE);
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f001 fd9d 	bl	800aaf0 <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 8008fb6:	4b45      	ldr	r3, [pc, #276]	@ (80090cc <BMP_Upkeep+0x268>)
 8008fb8:	2203      	movs	r2, #3
 8008fba:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 8008fbc:	e07e      	b.n	80090bc <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8008fbe:	4b43      	ldr	r3, [pc, #268]	@ (80090cc <BMP_Upkeep+0x268>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 8008fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8009104 <BMP_Upkeep+0x2a0>)
 8008fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8009100 <BMP_Upkeep+0x29c>)
 8008fc8:	0019      	movs	r1, r3
 8008fca:	2001      	movs	r0, #1
 8008fcc:	f007 fc28 	bl	8010820 <CreateLine>
  break;
 8008fd0:	e074      	b.n	80090bc <BMP_Upkeep+0x258>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 8008fd2:	f7ff fe53 	bl	8008c7c <BMP280_calc_temperature>
 8008fd6:	1c03      	adds	r3, r0, #0
 8008fd8:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 8008fda:	f7ff fe97 	bl	8008d0c <BMP280_calc_pressure>
 8008fde:	1c03      	adds	r3, r0, #0
 8008fe0:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 8008fe2:	4949      	ldr	r1, [pc, #292]	@ (8009108 <BMP_Upkeep+0x2a4>)
 8008fe4:	68b8      	ldr	r0, [r7, #8]
 8008fe6:	f7f7 fab7 	bl	8000558 <__aeabi_fcmpgt>
 8008fea:	1e03      	subs	r3, r0, #0
 8008fec:	d025      	beq.n	800903a <BMP_Upkeep+0x1d6>
 8008fee:	4947      	ldr	r1, [pc, #284]	@ (800910c <BMP_Upkeep+0x2a8>)
 8008ff0:	68b8      	ldr	r0, [r7, #8]
 8008ff2:	f7f7 fa9d 	bl	8000530 <__aeabi_fcmplt>
 8008ff6:	1e03      	subs	r3, r0, #0
 8008ff8:	d01f      	beq.n	800903a <BMP_Upkeep+0x1d6>
      sethPa(airhpa);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	1c18      	adds	r0, r3, #0
 8008ffe:	f7fa fbff 	bl	8003800 <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7fa fa2e 	bl	8003464 <__aeabi_f2d>
 8009008:	0004      	movs	r4, r0
 800900a:	000d      	movs	r5, r1
 800900c:	68b8      	ldr	r0, [r7, #8]
 800900e:	f7fa fa29 	bl	8003464 <__aeabi_f2d>
 8009012:	0002      	movs	r2, r0
 8009014:	000b      	movs	r3, r1
 8009016:	483e      	ldr	r0, [pc, #248]	@ (8009110 <BMP_Upkeep+0x2ac>)
 8009018:	493e      	ldr	r1, [pc, #248]	@ (8009114 <BMP_Upkeep+0x2b0>)
 800901a:	9202      	str	r2, [sp, #8]
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	9400      	str	r4, [sp, #0]
 8009020:	9501      	str	r5, [sp, #4]
 8009022:	0002      	movs	r2, r0
 8009024:	2002      	movs	r0, #2
 8009026:	f007 fbfb 	bl	8010820 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 800902a:	f008 f845 	bl	80110b8 <HAL_GetTick>
 800902e:	0003      	movs	r3, r0
 8009030:	4a39      	ldr	r2, [pc, #228]	@ (8009118 <BMP_Upkeep+0x2b4>)
 8009032:	189a      	adds	r2, r3, r2
 8009034:	4b24      	ldr	r3, [pc, #144]	@ (80090c8 <BMP_Upkeep+0x264>)
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	e00d      	b.n	8009056 <BMP_Upkeep+0x1f2>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800903a:	4a38      	ldr	r2, [pc, #224]	@ (800911c <BMP_Upkeep+0x2b8>)
 800903c:	4b30      	ldr	r3, [pc, #192]	@ (8009100 <BMP_Upkeep+0x29c>)
 800903e:	0019      	movs	r1, r3
 8009040:	2001      	movs	r0, #1
 8009042:	f007 fbed 	bl	8010820 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 2000;
 8009046:	f008 f837 	bl	80110b8 <HAL_GetTick>
 800904a:	0003      	movs	r3, r0
 800904c:	22fa      	movs	r2, #250	@ 0xfa
 800904e:	00d2      	lsls	r2, r2, #3
 8009050:	189a      	adds	r2, r3, r2
 8009052:	4b1d      	ldr	r3, [pc, #116]	@ (80090c8 <BMP_Upkeep+0x264>)
 8009054:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 8009056:	4b1d      	ldr	r3, [pc, #116]	@ (80090cc <BMP_Upkeep+0x268>)
 8009058:	2208      	movs	r2, #8
 800905a:	701a      	strb	r2, [r3, #0]
    break;
 800905c:	e02e      	b.n	80090bc <BMP_Upkeep+0x258>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800905e:	4b1b      	ldr	r3, [pc, #108]	@ (80090cc <BMP_Upkeep+0x268>)
 8009060:	2209      	movs	r2, #9
 8009062:	701a      	strb	r2, [r3, #0]
    break;
 8009064:	e02a      	b.n	80090bc <BMP_Upkeep+0x258>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 8009066:	f001 fd53 	bl	800ab10 <getSensorLock>
 800906a:	1e03      	subs	r3, r0, #0
 800906c:	d123      	bne.n	80090b6 <BMP_Upkeep+0x252>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800906e:	f7ff fd53 	bl	8008b18 <BMP280_get_mode>
 8009072:	0003      	movs	r3, r0
 8009074:	2b03      	cmp	r3, #3
 8009076:	d103      	bne.n	8009080 <BMP_Upkeep+0x21c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8009078:	4b14      	ldr	r3, [pc, #80]	@ (80090cc <BMP_Upkeep+0x268>)
 800907a:	2205      	movs	r2, #5
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	e002      	b.n	8009086 <BMP_Upkeep+0x222>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8009080:	4b12      	ldr	r3, [pc, #72]	@ (80090cc <BMP_Upkeep+0x268>)
 8009082:	2202      	movs	r2, #2
 8009084:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 23;
 8009086:	f008 f817 	bl	80110b8 <HAL_GetTick>
 800908a:	0003      	movs	r3, r0
 800908c:	3317      	adds	r3, #23
 800908e:	001a      	movs	r2, r3
 8009090:	4b0d      	ldr	r3, [pc, #52]	@ (80090c8 <BMP_Upkeep+0x264>)
 8009092:	601a      	str	r2, [r3, #0]
    break;
 8009094:	e012      	b.n	80090bc <BMP_Upkeep+0x258>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 8009096:	4b0d      	ldr	r3, [pc, #52]	@ (80090cc <BMP_Upkeep+0x268>)
 8009098:	2200      	movs	r2, #0
 800909a:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 800909c:	f001 fd38 	bl	800ab10 <getSensorLock>
 80090a0:	0003      	movs	r3, r0
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d009      	beq.n	80090ba <BMP_Upkeep+0x256>
      setSensorLock(FREE);
 80090a6:	2000      	movs	r0, #0
 80090a8:	f001 fd22 	bl	800aaf0 <setSensorLock>
    }
    break;
 80090ac:	e005      	b.n	80090ba <BMP_Upkeep+0x256>
      break;
 80090ae:	46c0      	nop			@ (mov r8, r8)
 80090b0:	e004      	b.n	80090bc <BMP_Upkeep+0x258>
      break;
 80090b2:	46c0      	nop			@ (mov r8, r8)
 80090b4:	e002      	b.n	80090bc <BMP_Upkeep+0x258>
      break;
 80090b6:	46c0      	nop			@ (mov r8, r8)
 80090b8:	e000      	b.n	80090bc <BMP_Upkeep+0x258>
    break;
 80090ba:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 80090bc:	4b03      	ldr	r3, [pc, #12]	@ (80090cc <BMP_Upkeep+0x268>)
 80090be:	781b      	ldrb	r3, [r3, #0]
}
 80090c0:	0018      	movs	r0, r3
 80090c2:	46bd      	mov	sp, r7
 80090c4:	b004      	add	sp, #16
 80090c6:	bdb0      	pop	{r4, r5, r7, pc}
 80090c8:	20000ba0 	.word	0x20000ba0
 80090cc:	20000094 	.word	0x20000094
 80090d0:	08028d30 	.word	0x08028d30
 80090d4:	080274f4 	.word	0x080274f4
 80090d8:	080270c4 	.word	0x080270c4
 80090dc:	002f9b80 	.word	0x002f9b80
 80090e0:	08027530 	.word	0x08027530
 80090e4:	08027538 	.word	0x08027538
 80090e8:	08027540 	.word	0x08027540
 80090ec:	08027548 	.word	0x08027548
 80090f0:	08027550 	.word	0x08027550
 80090f4:	08027558 	.word	0x08027558
 80090f8:	08027560 	.word	0x08027560
 80090fc:	08027588 	.word	0x08027588
 8009100:	080273b4 	.word	0x080273b4
 8009104:	080275b4 	.word	0x080275b4
 8009108:	44548000 	.word	0x44548000
 800910c:	44898000 	.word	0x44898000
 8009110:	080275ec 	.word	0x080275ec
 8009114:	080270a4 	.word	0x080270a4
 8009118:	0000ea60 	.word	0x0000ea60
 800911c:	08027624 	.word	0x08027624

08009120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009126:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <MX_DMA_Init+0x48>)
 8009128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800912a:	4b0f      	ldr	r3, [pc, #60]	@ (8009168 <MX_DMA_Init+0x48>)
 800912c:	2101      	movs	r1, #1
 800912e:	430a      	orrs	r2, r1
 8009130:	631a      	str	r2, [r3, #48]	@ 0x30
 8009132:	4b0d      	ldr	r3, [pc, #52]	@ (8009168 <MX_DMA_Init+0x48>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009136:	2201      	movs	r2, #1
 8009138:	4013      	ands	r3, r2
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800913e:	2200      	movs	r2, #0
 8009140:	2100      	movs	r1, #0
 8009142:	200a      	movs	r0, #10
 8009144:	f008 fc5c 	bl	8011a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8009148:	200a      	movs	r0, #10
 800914a:	f008 fc6e 	bl	8011a2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800914e:	2200      	movs	r2, #0
 8009150:	2103      	movs	r1, #3
 8009152:	200b      	movs	r0, #11
 8009154:	f008 fc54 	bl	8011a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8009158:	200b      	movs	r0, #11
 800915a:	f008 fc66 	bl	8011a2a <HAL_NVIC_EnableIRQ>

}
 800915e:	46c0      	nop			@ (mov r8, r8)
 8009160:	46bd      	mov	sp, r7
 8009162:	b002      	add	sp, #8
 8009164:	bd80      	pop	{r7, pc}
 8009166:	46c0      	nop			@ (mov r8, r8)
 8009168:	40021000 	.word	0x40021000

0800916c <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800916c:	b590      	push	{r4, r7, lr}
 800916e:	b087      	sub	sp, #28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	1dbb      	adds	r3, r7, #6
 8009178:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800917a:	4b17      	ldr	r3, [pc, #92]	@ (80091d8 <WriteUint8ArrayEeprom+0x6c>)
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8009180:	f008 ffd0 	bl	8012124 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8009184:	2316      	movs	r3, #22
 8009186:	18fb      	adds	r3, r7, r3
 8009188:	2200      	movs	r2, #0
 800918a:	801a      	strh	r2, [r3, #0]
 800918c:	e015      	b.n	80091ba <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800918e:	4b12      	ldr	r3, [pc, #72]	@ (80091d8 <WriteUint8ArrayEeprom+0x6c>)
 8009190:	6819      	ldr	r1, [r3, #0]
 8009192:	2416      	movs	r4, #22
 8009194:	193b      	adds	r3, r7, r4
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	18d3      	adds	r3, r2, r3
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	001a      	movs	r2, r3
 80091a0:	2000      	movs	r0, #0
 80091a2:	f009 f827 	bl	80121f4 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 80091a6:	4b0c      	ldr	r3, [pc, #48]	@ (80091d8 <WriteUint8ArrayEeprom+0x6c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	4b0a      	ldr	r3, [pc, #40]	@ (80091d8 <WriteUint8ArrayEeprom+0x6c>)
 80091ae:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 80091b0:	193b      	adds	r3, r7, r4
 80091b2:	881a      	ldrh	r2, [r3, #0]
 80091b4:	193b      	adds	r3, r7, r4
 80091b6:	3201      	adds	r2, #1
 80091b8:	801a      	strh	r2, [r3, #0]
 80091ba:	2316      	movs	r3, #22
 80091bc:	18fa      	adds	r2, r7, r3
 80091be:	1dbb      	adds	r3, r7, #6
 80091c0:	8812      	ldrh	r2, [r2, #0]
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3e2      	bcc.n	800918e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80091c8:	f008 ffda 	bl	8012180 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80091cc:	4b02      	ldr	r3, [pc, #8]	@ (80091d8 <WriteUint8ArrayEeprom+0x6c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
}
 80091d0:	0018      	movs	r0, r3
 80091d2:	46bd      	mov	sp, r7
 80091d4:	b007      	add	sp, #28
 80091d6:	bd90      	pop	{r4, r7, pc}
 80091d8:	20000bc4 	.word	0x20000bc4

080091dc <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	0019      	movs	r1, r3
 80091e8:	1dbb      	adds	r3, r7, #6
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	1d3b      	adds	r3, r7, #4
 80091ee:	1c0a      	adds	r2, r1, #0
 80091f0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80091f2:	1dba      	adds	r2, r7, #6
 80091f4:	1d3b      	adds	r3, r7, #4
 80091f6:	8812      	ldrh	r2, [r2, #0]
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d806      	bhi.n	800920c <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80091fe:	1dbb      	adds	r3, r7, #6
 8009200:	881a      	ldrh	r2, [r3, #0]
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	0018      	movs	r0, r3
 8009208:	f7ff ffb0 	bl	800916c <WriteUint8ArrayEeprom>
    }
}
 800920c:	46c0      	nop			@ (mov r8, r8)
 800920e:	46bd      	mov	sp, r7
 8009210:	b004      	add	sp, #16
 8009212:	bd80      	pop	{r7, pc}

08009214 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	1dbb      	adds	r3, r7, #6
 8009220:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8009222:	2316      	movs	r3, #22
 8009224:	18fb      	adds	r3, r7, r3
 8009226:	2200      	movs	r2, #0
 8009228:	801a      	strh	r2, [r3, #0]
 800922a:	e010      	b.n	800924e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800922c:	2016      	movs	r0, #22
 800922e:	183b      	adds	r3, r7, r0
 8009230:	881a      	ldrh	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	18d3      	adds	r3, r2, r3
 8009236:	0019      	movs	r1, r3
 8009238:	183b      	adds	r3, r7, r0
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	18d3      	adds	r3, r2, r3
 8009240:	780a      	ldrb	r2, [r1, #0]
 8009242:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8009244:	183b      	adds	r3, r7, r0
 8009246:	881a      	ldrh	r2, [r3, #0]
 8009248:	183b      	adds	r3, r7, r0
 800924a:	3201      	adds	r2, #1
 800924c:	801a      	strh	r2, [r3, #0]
 800924e:	2316      	movs	r3, #22
 8009250:	18fa      	adds	r2, r7, r3
 8009252:	1dbb      	adds	r3, r7, #6
 8009254:	8812      	ldrh	r2, [r2, #0]
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d3e7      	bcc.n	800922c <ReadUint8ArrayEEprom+0x18>
    }
}
 800925c:	46c0      	nop			@ (mov r8, r8)
 800925e:	46c0      	nop			@ (mov r8, r8)
 8009260:	46bd      	mov	sp, r7
 8009262:	b006      	add	sp, #24
 8009264:	bd80      	pop	{r7, pc}

08009266 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8009266:	b590      	push	{r4, r7, lr}
 8009268:	b085      	sub	sp, #20
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	000a      	movs	r2, r1
 8009270:	1cbb      	adds	r3, r7, #2
 8009272:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8009274:	f008 ff56 	bl	8012124 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8009278:	230e      	movs	r3, #14
 800927a:	18fb      	adds	r3, r7, r3
 800927c:	2200      	movs	r2, #0
 800927e:	801a      	strh	r2, [r3, #0]
 8009280:	e00c      	b.n	800929c <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8009282:	240e      	movs	r4, #14
 8009284:	193b      	adds	r3, r7, r4
 8009286:	881a      	ldrh	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	18d3      	adds	r3, r2, r3
 800928c:	0018      	movs	r0, r3
 800928e:	f008 ff85 	bl	801219c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8009292:	193b      	adds	r3, r7, r4
 8009294:	193a      	adds	r2, r7, r4
 8009296:	8812      	ldrh	r2, [r2, #0]
 8009298:	3204      	adds	r2, #4
 800929a:	801a      	strh	r2, [r3, #0]
 800929c:	230e      	movs	r3, #14
 800929e:	18fa      	adds	r2, r7, r3
 80092a0:	1cbb      	adds	r3, r7, #2
 80092a2:	8812      	ldrh	r2, [r2, #0]
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d3eb      	bcc.n	8009282 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80092aa:	f008 ff69 	bl	8012180 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 80092ae:	46c0      	nop			@ (mov r8, r8)
 80092b0:	46bd      	mov	sp, r7
 80092b2:	b005      	add	sp, #20
 80092b4:	bd90      	pop	{r4, r7, pc}
	...

080092b8 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80092c8:	d901      	bls.n	80092ce <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80092ca:	237f      	movs	r3, #127	@ 0x7f
 80092cc:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80092ce:	2017      	movs	r0, #23
 80092d0:	183b      	adds	r3, r7, r0
 80092d2:	490d      	ldr	r1, [pc, #52]	@ (8009308 <accessLUT10log10+0x50>)
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	188a      	adds	r2, r1, r2
 80092d8:	7812      	ldrb	r2, [r2, #0]
 80092da:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80092dc:	0001      	movs	r1, r0
 80092de:	187b      	adds	r3, r7, r1
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2206      	movs	r2, #6
 80092e4:	4113      	asrs	r3, r2
 80092e6:	001a      	movs	r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80092ec:	187b      	adds	r3, r7, r1
 80092ee:	781a      	ldrb	r2, [r3, #0]
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2106      	movs	r1, #6
 80092f6:	408b      	lsls	r3, r1
 80092f8:	1ad2      	subs	r2, r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	601a      	str	r2, [r3, #0]
}
 80092fe:	46c0      	nop			@ (mov r8, r8)
 8009300:	46bd      	mov	sp, r7
 8009302:	b006      	add	sp, #24
 8009304:	bd80      	pop	{r7, pc}
 8009306:	46c0      	nop			@ (mov r8, r8)
 8009308:	08028d58 	.word	0x08028d58

0800930c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800930c:	b5b0      	push	{r4, r5, r7, lr}
 800930e:	b090      	sub	sp, #64	@ 0x40
 8009310:	af00      	add	r7, sp, #0
 8009312:	6138      	str	r0, [r7, #16]
 8009314:	6179      	str	r1, [r7, #20]
 8009316:	60fa      	str	r2, [r7, #12]
 8009318:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800931a:	2308      	movs	r3, #8
 800931c:	001a      	movs	r2, r3
 800931e:	3a20      	subs	r2, #32
 8009320:	2a00      	cmp	r2, #0
 8009322:	db03      	blt.n	800932c <efficient10log10+0x20>
 8009324:	2101      	movs	r1, #1
 8009326:	4091      	lsls	r1, r2
 8009328:	000d      	movs	r5, r1
 800932a:	e008      	b.n	800933e <efficient10log10+0x32>
 800932c:	2220      	movs	r2, #32
 800932e:	1ad2      	subs	r2, r2, r3
 8009330:	2101      	movs	r1, #1
 8009332:	40d1      	lsrs	r1, r2
 8009334:	000a      	movs	r2, r1
 8009336:	2100      	movs	r1, #0
 8009338:	4099      	lsls	r1, r3
 800933a:	000d      	movs	r5, r1
 800933c:	4315      	orrs	r5, r2
 800933e:	2201      	movs	r2, #1
 8009340:	409a      	lsls	r2, r3
 8009342:	0014      	movs	r4, r2
 8009344:	2201      	movs	r2, #1
 8009346:	4252      	negs	r2, r2
 8009348:	17d3      	asrs	r3, r2, #31
 800934a:	1912      	adds	r2, r2, r4
 800934c:	416b      	adcs	r3, r5
 800934e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8009352:	2336      	movs	r3, #54	@ 0x36
 8009354:	2208      	movs	r2, #8
 8009356:	189b      	adds	r3, r3, r2
 8009358:	19db      	adds	r3, r3, r7
 800935a:	2200      	movs	r2, #0
 800935c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800935e:	e017      	b.n	8009390 <efficient10log10+0x84>
    {
        P = P >> 1;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	07db      	lsls	r3, r3, #31
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	0852      	lsrs	r2, r2, #1
 8009368:	603a      	str	r2, [r7, #0]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	431a      	orrs	r2, r3
 800936e:	603a      	str	r2, [r7, #0]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	085b      	lsrs	r3, r3, #1
 8009374:	607b      	str	r3, [r7, #4]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	687c      	ldr	r4, [r7, #4]
 800937a:	613b      	str	r3, [r7, #16]
 800937c:	617c      	str	r4, [r7, #20]
        bShift++;
 800937e:	2136      	movs	r1, #54	@ 0x36
 8009380:	2008      	movs	r0, #8
 8009382:	180b      	adds	r3, r1, r0
 8009384:	19db      	adds	r3, r3, r7
 8009386:	881a      	ldrh	r2, [r3, #0]
 8009388:	180b      	adds	r3, r1, r0
 800938a:	19db      	adds	r3, r3, r7
 800938c:	3201      	adds	r2, #1
 800938e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009394:	429a      	cmp	r2, r3
 8009396:	d8e3      	bhi.n	8009360 <efficient10log10+0x54>
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800939c:	429a      	cmp	r2, r3
 800939e:	d103      	bne.n	80093a8 <efficient10log10+0x9c>
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d8db      	bhi.n	8009360 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	2308      	movs	r3, #8
 80093ac:	3b01      	subs	r3, #1
 80093ae:	2101      	movs	r1, #1
 80093b0:	4099      	lsls	r1, r3
 80093b2:	000b      	movs	r3, r1
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80093c0:	231c      	movs	r3, #28
 80093c2:	2408      	movs	r4, #8
 80093c4:	191b      	adds	r3, r3, r4
 80093c6:	19da      	adds	r2, r3, r7
 80093c8:	2320      	movs	r3, #32
 80093ca:	191b      	adds	r3, r3, r4
 80093cc:	19d9      	adds	r1, r3, r7
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	0018      	movs	r0, r3
 80093d2:	f7ff ff71 	bl	80092b8 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80093d6:	2215      	movs	r2, #21
 80093d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093da:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80093dc:	2036      	movs	r0, #54	@ 0x36
 80093de:	1902      	adds	r2, r0, r4
 80093e0:	19d2      	adds	r2, r2, r7
 80093e2:	8812      	ldrh	r2, [r2, #0]
 80093e4:	2103      	movs	r1, #3
 80093e6:	434a      	muls	r2, r1
 80093e8:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80093ea:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80093ec:	0021      	movs	r1, r4
 80093ee:	1843      	adds	r3, r0, r1
 80093f0:	19db      	adds	r3, r3, r7
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	2201      	movs	r2, #1
 80093f6:	4353      	muls	r3, r2
 80093f8:	2203      	movs	r2, #3
 80093fa:	4113      	asrs	r3, r2
 80093fc:	001a      	movs	r2, r3
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8009402:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8009404:	2314      	movs	r3, #20
 8009406:	185b      	adds	r3, r3, r1
 8009408:	19da      	adds	r2, r3, r7
 800940a:	2318      	movs	r3, #24
 800940c:	185b      	adds	r3, r3, r1
 800940e:	19db      	adds	r3, r3, r7
 8009410:	0011      	movs	r1, r2
 8009412:	0018      	movs	r0, r3
 8009414:	f000 f80a 	bl	800942c <correctIntFracNumber>
    integerPart[0] = intPart;
 8009418:	6a3a      	ldr	r2, [r7, #32]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	46c0      	nop			@ (mov r8, r8)
 8009426:	46bd      	mov	sp, r7
 8009428:	b010      	add	sp, #64	@ 0x40
 800942a:	bdb0      	pop	{r4, r5, r7, pc}

0800942c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8009436:	e00a      	b.n	800944e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3b0a      	subs	r3, #10
 8009448:	001a      	movs	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b09      	cmp	r3, #9
 8009454:	dcf0      	bgt.n	8009438 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8009456:	e00a      	b.n	800946e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	1e5a      	subs	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	330a      	adds	r3, #10
 8009468:	001a      	movs	r2, r3
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3309      	adds	r3, #9
 8009474:	dbf0      	blt.n	8009458 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	da0f      	bge.n	800949e <correctIntFracNumber+0x72>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd0b      	ble.n	800949e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3b0a      	subs	r3, #10
 8009496:	001a      	movs	r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800949c:	e012      	b.n	80094c4 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dd0e      	ble.n	80094c4 <correctIntFracNumber+0x98>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da0a      	bge.n	80094c4 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	1e5a      	subs	r2, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	330a      	adds	r3, #10
 80094be:	001a      	movs	r2, r3
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	601a      	str	r2, [r3, #0]
}
 80094c4:	46c0      	nop			@ (mov r8, r8)
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b002      	add	sp, #8
 80094ca:	bd80      	pop	{r7, pc}

080094cc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b08b      	sub	sp, #44	@ 0x2c
 80094d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094d2:	2414      	movs	r4, #20
 80094d4:	193b      	adds	r3, r7, r4
 80094d6:	0018      	movs	r0, r3
 80094d8:	2314      	movs	r3, #20
 80094da:	001a      	movs	r2, r3
 80094dc:	2100      	movs	r1, #0
 80094de:	f019 fafd 	bl	8022adc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80094e2:	4b8a      	ldr	r3, [pc, #552]	@ (800970c <MX_GPIO_Init+0x240>)
 80094e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e6:	4b89      	ldr	r3, [pc, #548]	@ (800970c <MX_GPIO_Init+0x240>)
 80094e8:	2104      	movs	r1, #4
 80094ea:	430a      	orrs	r2, r1
 80094ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094ee:	4b87      	ldr	r3, [pc, #540]	@ (800970c <MX_GPIO_Init+0x240>)
 80094f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f2:	2204      	movs	r2, #4
 80094f4:	4013      	ands	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]
 80094f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80094fa:	4b84      	ldr	r3, [pc, #528]	@ (800970c <MX_GPIO_Init+0x240>)
 80094fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094fe:	4b83      	ldr	r3, [pc, #524]	@ (800970c <MX_GPIO_Init+0x240>)
 8009500:	2180      	movs	r1, #128	@ 0x80
 8009502:	430a      	orrs	r2, r1
 8009504:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009506:	4b81      	ldr	r3, [pc, #516]	@ (800970c <MX_GPIO_Init+0x240>)
 8009508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950a:	2280      	movs	r2, #128	@ 0x80
 800950c:	4013      	ands	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009512:	4b7e      	ldr	r3, [pc, #504]	@ (800970c <MX_GPIO_Init+0x240>)
 8009514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009516:	4b7d      	ldr	r3, [pc, #500]	@ (800970c <MX_GPIO_Init+0x240>)
 8009518:	2101      	movs	r1, #1
 800951a:	430a      	orrs	r2, r1
 800951c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800951e:	4b7b      	ldr	r3, [pc, #492]	@ (800970c <MX_GPIO_Init+0x240>)
 8009520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009522:	2201      	movs	r2, #1
 8009524:	4013      	ands	r3, r2
 8009526:	60bb      	str	r3, [r7, #8]
 8009528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800952a:	4b78      	ldr	r3, [pc, #480]	@ (800970c <MX_GPIO_Init+0x240>)
 800952c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952e:	4b77      	ldr	r3, [pc, #476]	@ (800970c <MX_GPIO_Init+0x240>)
 8009530:	2102      	movs	r1, #2
 8009532:	430a      	orrs	r2, r1
 8009534:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009536:	4b75      	ldr	r3, [pc, #468]	@ (800970c <MX_GPIO_Init+0x240>)
 8009538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953a:	2202      	movs	r2, #2
 800953c:	4013      	ands	r3, r2
 800953e:	607b      	str	r3, [r7, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009542:	4b72      	ldr	r3, [pc, #456]	@ (800970c <MX_GPIO_Init+0x240>)
 8009544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009546:	4b71      	ldr	r3, [pc, #452]	@ (800970c <MX_GPIO_Init+0x240>)
 8009548:	2108      	movs	r1, #8
 800954a:	430a      	orrs	r2, r1
 800954c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800954e:	4b6f      	ldr	r3, [pc, #444]	@ (800970c <MX_GPIO_Init+0x240>)
 8009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009552:	2208      	movs	r2, #8
 8009554:	4013      	ands	r3, r2
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800955a:	4b6d      	ldr	r3, [pc, #436]	@ (8009710 <MX_GPIO_Init+0x244>)
 800955c:	2201      	movs	r2, #1
 800955e:	2101      	movs	r1, #1
 8009560:	0018      	movs	r0, r3
 8009562:	f009 f83a 	bl	80125da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8009566:	4b6a      	ldr	r3, [pc, #424]	@ (8009710 <MX_GPIO_Init+0x244>)
 8009568:	2200      	movs	r2, #0
 800956a:	2102      	movs	r1, #2
 800956c:	0018      	movs	r0, r3
 800956e:	f009 f834 	bl	80125da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8009572:	4968      	ldr	r1, [pc, #416]	@ (8009714 <MX_GPIO_Init+0x248>)
 8009574:	4b68      	ldr	r3, [pc, #416]	@ (8009718 <MX_GPIO_Init+0x24c>)
 8009576:	2201      	movs	r2, #1
 8009578:	0018      	movs	r0, r3
 800957a:	f009 f82e 	bl	80125da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800957e:	2380      	movs	r3, #128	@ 0x80
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	4866      	ldr	r0, [pc, #408]	@ (800971c <MX_GPIO_Init+0x250>)
 8009584:	2201      	movs	r2, #1
 8009586:	0019      	movs	r1, r3
 8009588:	f009 f827 	bl	80125da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800958c:	2380      	movs	r3, #128	@ 0x80
 800958e:	015b      	lsls	r3, r3, #5
 8009590:	4862      	ldr	r0, [pc, #392]	@ (800971c <MX_GPIO_Init+0x250>)
 8009592:	2200      	movs	r2, #0
 8009594:	0019      	movs	r1, r3
 8009596:	f009 f820 	bl	80125da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800959a:	193b      	adds	r3, r7, r4
 800959c:	4a60      	ldr	r2, [pc, #384]	@ (8009720 <MX_GPIO_Init+0x254>)
 800959e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80095a0:	193b      	adds	r3, r7, r4
 80095a2:	2203      	movs	r2, #3
 80095a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095a6:	193b      	adds	r3, r7, r4
 80095a8:	2200      	movs	r2, #0
 80095aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80095ac:	193b      	adds	r3, r7, r4
 80095ae:	4a5b      	ldr	r2, [pc, #364]	@ (800971c <MX_GPIO_Init+0x250>)
 80095b0:	0019      	movs	r1, r3
 80095b2:	0010      	movs	r0, r2
 80095b4:	f008 fe76 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80095b8:	193b      	adds	r3, r7, r4
 80095ba:	2203      	movs	r2, #3
 80095bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80095be:	193b      	adds	r3, r7, r4
 80095c0:	2201      	movs	r2, #1
 80095c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c4:	193b      	adds	r3, r7, r4
 80095c6:	2200      	movs	r2, #0
 80095c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095ca:	193b      	adds	r3, r7, r4
 80095cc:	2200      	movs	r2, #0
 80095ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80095d0:	193b      	adds	r3, r7, r4
 80095d2:	4a4f      	ldr	r2, [pc, #316]	@ (8009710 <MX_GPIO_Init+0x244>)
 80095d4:	0019      	movs	r1, r3
 80095d6:	0010      	movs	r0, r2
 80095d8:	f008 fe64 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80095dc:	193b      	adds	r3, r7, r4
 80095de:	2270      	movs	r2, #112	@ 0x70
 80095e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80095e2:	193b      	adds	r3, r7, r4
 80095e4:	2203      	movs	r2, #3
 80095e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095e8:	193b      	adds	r3, r7, r4
 80095ea:	2200      	movs	r2, #0
 80095ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095ee:	193a      	adds	r2, r7, r4
 80095f0:	23a0      	movs	r3, #160	@ 0xa0
 80095f2:	05db      	lsls	r3, r3, #23
 80095f4:	0011      	movs	r1, r2
 80095f6:	0018      	movs	r0, r3
 80095f8:	f008 fe54 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80095fc:	193b      	adds	r3, r7, r4
 80095fe:	22c0      	movs	r2, #192	@ 0xc0
 8009600:	0052      	lsls	r2, r2, #1
 8009602:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009604:	193b      	adds	r3, r7, r4
 8009606:	2200      	movs	r2, #0
 8009608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960a:	193b      	adds	r3, r7, r4
 800960c:	2200      	movs	r2, #0
 800960e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009610:	193a      	adds	r2, r7, r4
 8009612:	23a0      	movs	r3, #160	@ 0xa0
 8009614:	05db      	lsls	r3, r3, #23
 8009616:	0011      	movs	r1, r2
 8009618:	0018      	movs	r0, r3
 800961a:	f008 fe43 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800961e:	193b      	adds	r3, r7, r4
 8009620:	4a3c      	ldr	r2, [pc, #240]	@ (8009714 <MX_GPIO_Init+0x248>)
 8009622:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009624:	193b      	adds	r3, r7, r4
 8009626:	2201      	movs	r2, #1
 8009628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800962a:	193b      	adds	r3, r7, r4
 800962c:	2200      	movs	r2, #0
 800962e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009630:	193b      	adds	r3, r7, r4
 8009632:	2200      	movs	r2, #0
 8009634:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009636:	193b      	adds	r3, r7, r4
 8009638:	4a37      	ldr	r2, [pc, #220]	@ (8009718 <MX_GPIO_Init+0x24c>)
 800963a:	0019      	movs	r1, r3
 800963c:	0010      	movs	r0, r2
 800963e:	f008 fe31 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8009642:	193b      	adds	r3, r7, r4
 8009644:	4a37      	ldr	r2, [pc, #220]	@ (8009724 <MX_GPIO_Init+0x258>)
 8009646:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009648:	193b      	adds	r3, r7, r4
 800964a:	2203      	movs	r2, #3
 800964c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800964e:	193b      	adds	r3, r7, r4
 8009650:	2200      	movs	r2, #0
 8009652:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009654:	193b      	adds	r3, r7, r4
 8009656:	4a30      	ldr	r2, [pc, #192]	@ (8009718 <MX_GPIO_Init+0x24c>)
 8009658:	0019      	movs	r1, r3
 800965a:	0010      	movs	r0, r2
 800965c:	f008 fe22 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009660:	0021      	movs	r1, r4
 8009662:	187b      	adds	r3, r7, r1
 8009664:	2280      	movs	r2, #128	@ 0x80
 8009666:	0092      	lsls	r2, r2, #2
 8009668:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800966a:	000c      	movs	r4, r1
 800966c:	193b      	adds	r3, r7, r4
 800966e:	2200      	movs	r2, #0
 8009670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009672:	193b      	adds	r3, r7, r4
 8009674:	2200      	movs	r2, #0
 8009676:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009678:	193b      	adds	r3, r7, r4
 800967a:	4a28      	ldr	r2, [pc, #160]	@ (800971c <MX_GPIO_Init+0x250>)
 800967c:	0019      	movs	r1, r3
 800967e:	0010      	movs	r0, r2
 8009680:	f008 fe10 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8009684:	193b      	adds	r3, r7, r4
 8009686:	2280      	movs	r2, #128	@ 0x80
 8009688:	0212      	lsls	r2, r2, #8
 800968a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800968c:	193b      	adds	r3, r7, r4
 800968e:	2288      	movs	r2, #136	@ 0x88
 8009690:	0352      	lsls	r2, r2, #13
 8009692:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009694:	193b      	adds	r3, r7, r4
 8009696:	2200      	movs	r2, #0
 8009698:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800969a:	193a      	adds	r2, r7, r4
 800969c:	23a0      	movs	r3, #160	@ 0xa0
 800969e:	05db      	lsls	r3, r3, #23
 80096a0:	0011      	movs	r1, r2
 80096a2:	0018      	movs	r0, r3
 80096a4:	f008 fdfe 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 80096a8:	0021      	movs	r1, r4
 80096aa:	187b      	adds	r3, r7, r1
 80096ac:	22c0      	movs	r2, #192	@ 0xc0
 80096ae:	0152      	lsls	r2, r2, #5
 80096b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096b2:	000c      	movs	r4, r1
 80096b4:	193b      	adds	r3, r7, r4
 80096b6:	2201      	movs	r2, #1
 80096b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ba:	193b      	adds	r3, r7, r4
 80096bc:	2200      	movs	r2, #0
 80096be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096c0:	193b      	adds	r3, r7, r4
 80096c2:	2200      	movs	r2, #0
 80096c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096c6:	193b      	adds	r3, r7, r4
 80096c8:	4a14      	ldr	r2, [pc, #80]	@ (800971c <MX_GPIO_Init+0x250>)
 80096ca:	0019      	movs	r1, r3
 80096cc:	0010      	movs	r0, r2
 80096ce:	f008 fde9 	bl	80122a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80096d2:	0021      	movs	r1, r4
 80096d4:	187b      	adds	r3, r7, r1
 80096d6:	2204      	movs	r2, #4
 80096d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096da:	187b      	adds	r3, r7, r1
 80096dc:	2200      	movs	r2, #0
 80096de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	2201      	movs	r2, #1
 80096e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80096e6:	187b      	adds	r3, r7, r1
 80096e8:	4a0f      	ldr	r2, [pc, #60]	@ (8009728 <MX_GPIO_Init+0x25c>)
 80096ea:	0019      	movs	r1, r3
 80096ec:	0010      	movs	r0, r2
 80096ee:	f008 fdd9 	bl	80122a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80096f2:	2200      	movs	r2, #0
 80096f4:	2100      	movs	r1, #0
 80096f6:	2007      	movs	r0, #7
 80096f8:	f008 f982 	bl	8011a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80096fc:	2007      	movs	r0, #7
 80096fe:	f008 f994 	bl	8011a2a <HAL_NVIC_EnableIRQ>

}
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	46bd      	mov	sp, r7
 8009706:	b00b      	add	sp, #44	@ 0x2c
 8009708:	bd90      	pop	{r4, r7, pc}
 800970a:	46c0      	nop			@ (mov r8, r8)
 800970c:	40021000 	.word	0x40021000
 8009710:	50001c00 	.word	0x50001c00
 8009714:	00000301 	.word	0x00000301
 8009718:	50000400 	.word	0x50000400
 800971c:	50000800 	.word	0x50000800
 8009720:	0000200c 	.word	0x0000200c
 8009724:	0000403e 	.word	0x0000403e
 8009728:	50000c00 	.word	0x50000c00

0800972c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2100      	movs	r1, #0
 800973a:	0018      	movs	r0, r3
 800973c:	f00f fdc0 	bl	80192c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2108      	movs	r1, #8
 8009744:	0018      	movs	r0, r3
 8009746:	f00f fdbb 	bl	80192c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	210c      	movs	r1, #12
 800974e:	0018      	movs	r0, r3
 8009750:	f00f fdb6 	bl	80192c0 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8009754:	2380      	movs	r3, #128	@ 0x80
 8009756:	05db      	lsls	r3, r3, #23
 8009758:	22fa      	movs	r2, #250	@ 0xfa
 800975a:	0112      	lsls	r2, r2, #4
 800975c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800975e:	2380      	movs	r3, #128	@ 0x80
 8009760:	05db      	lsls	r3, r3, #23
 8009762:	22fa      	movs	r2, #250	@ 0xfa
 8009764:	0112      	lsls	r2, r2, #4
 8009766:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8009768:	2380      	movs	r3, #128	@ 0x80
 800976a:	05db      	lsls	r3, r3, #23
 800976c:	22fa      	movs	r2, #250	@ 0xfa
 800976e:	0112      	lsls	r2, r2, #4
 8009770:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8009772:	2380      	movs	r3, #128	@ 0x80
 8009774:	05db      	lsls	r3, r3, #23
 8009776:	22fa      	movs	r2, #250	@ 0xfa
 8009778:	0112      	lsls	r2, r2, #4
 800977a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2100      	movs	r1, #0
 8009780:	0018      	movs	r0, r3
 8009782:	f00f fd9d 	bl	80192c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2104      	movs	r1, #4
 800978a:	0018      	movs	r0, r3
 800978c:	f00f fd98 	bl	80192c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2108      	movs	r1, #8
 8009794:	0018      	movs	r0, r3
 8009796:	f00f fd93 	bl	80192c0 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800979a:	4b0a      	ldr	r3, [pc, #40]	@ (80097c4 <GPIO_InitPWMLEDs+0x98>)
 800979c:	22fa      	movs	r2, #250	@ 0xfa
 800979e:	0112      	lsls	r2, r2, #4
 80097a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 80097a2:	4b08      	ldr	r3, [pc, #32]	@ (80097c4 <GPIO_InitPWMLEDs+0x98>)
 80097a4:	22fa      	movs	r2, #250	@ 0xfa
 80097a6:	0112      	lsls	r2, r2, #4
 80097a8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80097aa:	4b06      	ldr	r3, [pc, #24]	@ (80097c4 <GPIO_InitPWMLEDs+0x98>)
 80097ac:	22fa      	movs	r2, #250	@ 0xfa
 80097ae:	0112      	lsls	r2, r2, #4
 80097b0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80097b2:	4b04      	ldr	r3, [pc, #16]	@ (80097c4 <GPIO_InitPWMLEDs+0x98>)
 80097b4:	22fa      	movs	r2, #250	@ 0xfa
 80097b6:	0112      	lsls	r2, r2, #4
 80097b8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80097ba:	46c0      	nop			@ (mov r8, r8)
 80097bc:	46bd      	mov	sp, r7
 80097be:	b002      	add	sp, #8
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	46c0      	nop			@ (mov r8, r8)
 80097c4:	40000400 	.word	0x40000400

080097c8 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097ce:	1d3b      	adds	r3, r7, #4
 80097d0:	0018      	movs	r0, r3
 80097d2:	2314      	movs	r3, #20
 80097d4:	001a      	movs	r2, r3
 80097d6:	2100      	movs	r1, #0
 80097d8:	f019 f980 	bl	8022adc <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80097dc:	1d3b      	adds	r3, r7, #4
 80097de:	2205      	movs	r2, #5
 80097e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097e2:	1d3b      	adds	r3, r7, #4
 80097e4:	2203      	movs	r2, #3
 80097e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e8:	1d3b      	adds	r3, r7, #4
 80097ea:	2200      	movs	r2, #0
 80097ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ee:	1d3a      	adds	r2, r7, #4
 80097f0:	23a0      	movs	r3, #160	@ 0xa0
 80097f2:	05db      	lsls	r3, r3, #23
 80097f4:	0011      	movs	r1, r2
 80097f6:	0018      	movs	r0, r3
 80097f8:	f008 fd54 	bl	80122a4 <HAL_GPIO_Init>
}
 80097fc:	46c0      	nop			@ (mov r8, r8)
 80097fe:	46bd      	mov	sp, r7
 8009800:	b006      	add	sp, #24
 8009802:	bd80      	pop	{r7, pc}

08009804 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009808:	4b1b      	ldr	r3, [pc, #108]	@ (8009878 <MX_I2C1_Init+0x74>)
 800980a:	4a1c      	ldr	r2, [pc, #112]	@ (800987c <MX_I2C1_Init+0x78>)
 800980c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800980e:	4b1a      	ldr	r3, [pc, #104]	@ (8009878 <MX_I2C1_Init+0x74>)
 8009810:	4a1b      	ldr	r2, [pc, #108]	@ (8009880 <MX_I2C1_Init+0x7c>)
 8009812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009814:	4b18      	ldr	r3, [pc, #96]	@ (8009878 <MX_I2C1_Init+0x74>)
 8009816:	2200      	movs	r2, #0
 8009818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800981a:	4b17      	ldr	r3, [pc, #92]	@ (8009878 <MX_I2C1_Init+0x74>)
 800981c:	2201      	movs	r2, #1
 800981e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009820:	4b15      	ldr	r3, [pc, #84]	@ (8009878 <MX_I2C1_Init+0x74>)
 8009822:	2200      	movs	r2, #0
 8009824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009826:	4b14      	ldr	r3, [pc, #80]	@ (8009878 <MX_I2C1_Init+0x74>)
 8009828:	2200      	movs	r2, #0
 800982a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800982c:	4b12      	ldr	r3, [pc, #72]	@ (8009878 <MX_I2C1_Init+0x74>)
 800982e:	2200      	movs	r2, #0
 8009830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009832:	4b11      	ldr	r3, [pc, #68]	@ (8009878 <MX_I2C1_Init+0x74>)
 8009834:	2200      	movs	r2, #0
 8009836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009838:	4b0f      	ldr	r3, [pc, #60]	@ (8009878 <MX_I2C1_Init+0x74>)
 800983a:	2200      	movs	r2, #0
 800983c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800983e:	4b0e      	ldr	r3, [pc, #56]	@ (8009878 <MX_I2C1_Init+0x74>)
 8009840:	0018      	movs	r0, r3
 8009842:	f008 ff03 	bl	801264c <HAL_I2C_Init>
 8009846:	1e03      	subs	r3, r0, #0
 8009848:	d001      	beq.n	800984e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800984a:	f000 fd83 	bl	800a354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800984e:	4b0a      	ldr	r3, [pc, #40]	@ (8009878 <MX_I2C1_Init+0x74>)
 8009850:	2100      	movs	r1, #0
 8009852:	0018      	movs	r0, r3
 8009854:	f00b fd6c 	bl	8015330 <HAL_I2CEx_ConfigAnalogFilter>
 8009858:	1e03      	subs	r3, r0, #0
 800985a:	d001      	beq.n	8009860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800985c:	f000 fd7a 	bl	800a354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009860:	4b05      	ldr	r3, [pc, #20]	@ (8009878 <MX_I2C1_Init+0x74>)
 8009862:	2100      	movs	r1, #0
 8009864:	0018      	movs	r0, r3
 8009866:	f00b fdaf 	bl	80153c8 <HAL_I2CEx_ConfigDigitalFilter>
 800986a:	1e03      	subs	r3, r0, #0
 800986c:	d001      	beq.n	8009872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800986e:	f000 fd71 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009872:	46c0      	nop			@ (mov r8, r8)
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000bc8 	.word	0x20000bc8
 800987c:	40005400 	.word	0x40005400
 8009880:	00503d58 	.word	0x00503d58

08009884 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009888:	4b1b      	ldr	r3, [pc, #108]	@ (80098f8 <MX_I2C2_Init+0x74>)
 800988a:	4a1c      	ldr	r2, [pc, #112]	@ (80098fc <MX_I2C2_Init+0x78>)
 800988c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800988e:	4b1a      	ldr	r3, [pc, #104]	@ (80098f8 <MX_I2C2_Init+0x74>)
 8009890:	4a1b      	ldr	r2, [pc, #108]	@ (8009900 <MX_I2C2_Init+0x7c>)
 8009892:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009894:	4b18      	ldr	r3, [pc, #96]	@ (80098f8 <MX_I2C2_Init+0x74>)
 8009896:	2200      	movs	r2, #0
 8009898:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800989a:	4b17      	ldr	r3, [pc, #92]	@ (80098f8 <MX_I2C2_Init+0x74>)
 800989c:	2201      	movs	r2, #1
 800989e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80098a0:	4b15      	ldr	r3, [pc, #84]	@ (80098f8 <MX_I2C2_Init+0x74>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80098a6:	4b14      	ldr	r3, [pc, #80]	@ (80098f8 <MX_I2C2_Init+0x74>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80098ac:	4b12      	ldr	r3, [pc, #72]	@ (80098f8 <MX_I2C2_Init+0x74>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80098b2:	4b11      	ldr	r3, [pc, #68]	@ (80098f8 <MX_I2C2_Init+0x74>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80098b8:	4b0f      	ldr	r3, [pc, #60]	@ (80098f8 <MX_I2C2_Init+0x74>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80098be:	4b0e      	ldr	r3, [pc, #56]	@ (80098f8 <MX_I2C2_Init+0x74>)
 80098c0:	0018      	movs	r0, r3
 80098c2:	f008 fec3 	bl	801264c <HAL_I2C_Init>
 80098c6:	1e03      	subs	r3, r0, #0
 80098c8:	d001      	beq.n	80098ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80098ca:	f000 fd43 	bl	800a354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80098ce:	4b0a      	ldr	r3, [pc, #40]	@ (80098f8 <MX_I2C2_Init+0x74>)
 80098d0:	2100      	movs	r1, #0
 80098d2:	0018      	movs	r0, r3
 80098d4:	f00b fd2c 	bl	8015330 <HAL_I2CEx_ConfigAnalogFilter>
 80098d8:	1e03      	subs	r3, r0, #0
 80098da:	d001      	beq.n	80098e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80098dc:	f000 fd3a 	bl	800a354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80098e0:	4b05      	ldr	r3, [pc, #20]	@ (80098f8 <MX_I2C2_Init+0x74>)
 80098e2:	2100      	movs	r1, #0
 80098e4:	0018      	movs	r0, r3
 80098e6:	f00b fd6f 	bl	80153c8 <HAL_I2CEx_ConfigDigitalFilter>
 80098ea:	1e03      	subs	r3, r0, #0
 80098ec:	d001      	beq.n	80098f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80098ee:	f000 fd31 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80098f2:	46c0      	nop			@ (mov r8, r8)
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	20000c1c 	.word	0x20000c1c
 80098fc:	40005800 	.word	0x40005800
 8009900:	00503d58 	.word	0x00503d58

08009904 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009904:	b590      	push	{r4, r7, lr}
 8009906:	b08b      	sub	sp, #44	@ 0x2c
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800990c:	2414      	movs	r4, #20
 800990e:	193b      	adds	r3, r7, r4
 8009910:	0018      	movs	r0, r3
 8009912:	2314      	movs	r3, #20
 8009914:	001a      	movs	r2, r3
 8009916:	2100      	movs	r1, #0
 8009918:	f019 f8e0 	bl	8022adc <memset>
  if(i2cHandle->Instance==I2C1)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a5d      	ldr	r2, [pc, #372]	@ (8009a98 <HAL_I2C_MspInit+0x194>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d000      	beq.n	8009928 <HAL_I2C_MspInit+0x24>
 8009926:	e083      	b.n	8009a30 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009928:	4b5c      	ldr	r3, [pc, #368]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 800992a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800992c:	4b5b      	ldr	r3, [pc, #364]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 800992e:	2102      	movs	r1, #2
 8009930:	430a      	orrs	r2, r1
 8009932:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009934:	4b59      	ldr	r3, [pc, #356]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 8009936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009938:	2202      	movs	r2, #2
 800993a:	4013      	ands	r3, r2
 800993c:	613b      	str	r3, [r7, #16]
 800993e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009940:	0021      	movs	r1, r4
 8009942:	187b      	adds	r3, r7, r1
 8009944:	22c0      	movs	r2, #192	@ 0xc0
 8009946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009948:	187b      	adds	r3, r7, r1
 800994a:	2212      	movs	r2, #18
 800994c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800994e:	187b      	adds	r3, r7, r1
 8009950:	2200      	movs	r2, #0
 8009952:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009954:	187b      	adds	r3, r7, r1
 8009956:	2203      	movs	r2, #3
 8009958:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800995a:	187b      	adds	r3, r7, r1
 800995c:	2201      	movs	r2, #1
 800995e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009960:	187b      	adds	r3, r7, r1
 8009962:	4a4f      	ldr	r2, [pc, #316]	@ (8009aa0 <HAL_I2C_MspInit+0x19c>)
 8009964:	0019      	movs	r1, r3
 8009966:	0010      	movs	r0, r2
 8009968:	f008 fc9c 	bl	80122a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800996c:	4b4b      	ldr	r3, [pc, #300]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 800996e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009970:	4b4a      	ldr	r3, [pc, #296]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 8009972:	2180      	movs	r1, #128	@ 0x80
 8009974:	0389      	lsls	r1, r1, #14
 8009976:	430a      	orrs	r2, r1
 8009978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800997a:	4b4a      	ldr	r3, [pc, #296]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 800997c:	4a4a      	ldr	r2, [pc, #296]	@ (8009aa8 <HAL_I2C_MspInit+0x1a4>)
 800997e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8009980:	4b48      	ldr	r3, [pc, #288]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 8009982:	2206      	movs	r2, #6
 8009984:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009986:	4b47      	ldr	r3, [pc, #284]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 8009988:	2200      	movs	r2, #0
 800998a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800998c:	4b45      	ldr	r3, [pc, #276]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 800998e:	2200      	movs	r2, #0
 8009990:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009992:	4b44      	ldr	r3, [pc, #272]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 8009994:	2280      	movs	r2, #128	@ 0x80
 8009996:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009998:	4b42      	ldr	r3, [pc, #264]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 800999a:	2200      	movs	r2, #0
 800999c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800999e:	4b41      	ldr	r3, [pc, #260]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80099a4:	4b3f      	ldr	r3, [pc, #252]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80099aa:	4b3e      	ldr	r3, [pc, #248]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80099b0:	4b3c      	ldr	r3, [pc, #240]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 80099b2:	0018      	movs	r0, r3
 80099b4:	f008 f85a 	bl	8011a6c <HAL_DMA_Init>
 80099b8:	1e03      	subs	r3, r0, #0
 80099ba:	d001      	beq.n	80099c0 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80099bc:	f000 fcca 	bl	800a354 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a38      	ldr	r2, [pc, #224]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 80099c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80099c6:	4b37      	ldr	r3, [pc, #220]	@ (8009aa4 <HAL_I2C_MspInit+0x1a0>)
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80099cc:	4b37      	ldr	r3, [pc, #220]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099ce:	4a38      	ldr	r2, [pc, #224]	@ (8009ab0 <HAL_I2C_MspInit+0x1ac>)
 80099d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80099d2:	4b36      	ldr	r3, [pc, #216]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099d4:	2206      	movs	r2, #6
 80099d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80099d8:	4b34      	ldr	r3, [pc, #208]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099da:	2210      	movs	r2, #16
 80099dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099de:	4b33      	ldr	r3, [pc, #204]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80099e4:	4b31      	ldr	r3, [pc, #196]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099e6:	2280      	movs	r2, #128	@ 0x80
 80099e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80099ea:	4b30      	ldr	r3, [pc, #192]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80099f0:	4b2e      	ldr	r3, [pc, #184]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80099f6:	4b2d      	ldr	r3, [pc, #180]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80099fc:	4b2b      	ldr	r3, [pc, #172]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8009a02:	4b2a      	ldr	r3, [pc, #168]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 8009a04:	0018      	movs	r0, r3
 8009a06:	f008 f831 	bl	8011a6c <HAL_DMA_Init>
 8009a0a:	1e03      	subs	r3, r0, #0
 8009a0c:	d001      	beq.n	8009a12 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8009a0e:	f000 fca1 	bl	800a354 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a25      	ldr	r2, [pc, #148]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 8009a16:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a18:	4b24      	ldr	r3, [pc, #144]	@ (8009aac <HAL_I2C_MspInit+0x1a8>)
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	2017      	movs	r0, #23
 8009a24:	f007 ffec 	bl	8011a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8009a28:	2017      	movs	r0, #23
 8009a2a:	f007 fffe 	bl	8011a2a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8009a2e:	e02e      	b.n	8009a8e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a1f      	ldr	r2, [pc, #124]	@ (8009ab4 <HAL_I2C_MspInit+0x1b0>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d129      	bne.n	8009a8e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a3a:	4b18      	ldr	r3, [pc, #96]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 8009a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3e:	4b17      	ldr	r3, [pc, #92]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 8009a40:	2102      	movs	r1, #2
 8009a42:	430a      	orrs	r2, r1
 8009a44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a46:	4b15      	ldr	r3, [pc, #84]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 8009a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009a52:	2114      	movs	r1, #20
 8009a54:	187b      	adds	r3, r7, r1
 8009a56:	22c0      	movs	r2, #192	@ 0xc0
 8009a58:	0112      	lsls	r2, r2, #4
 8009a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009a5c:	187b      	adds	r3, r7, r1
 8009a5e:	2212      	movs	r2, #18
 8009a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a62:	187b      	adds	r3, r7, r1
 8009a64:	2200      	movs	r2, #0
 8009a66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a68:	187b      	adds	r3, r7, r1
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8009a6e:	187b      	adds	r3, r7, r1
 8009a70:	2206      	movs	r2, #6
 8009a72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a74:	187b      	adds	r3, r7, r1
 8009a76:	4a0a      	ldr	r2, [pc, #40]	@ (8009aa0 <HAL_I2C_MspInit+0x19c>)
 8009a78:	0019      	movs	r1, r3
 8009a7a:	0010      	movs	r0, r2
 8009a7c:	f008 fc12 	bl	80122a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009a80:	4b06      	ldr	r3, [pc, #24]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 8009a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a84:	4b05      	ldr	r3, [pc, #20]	@ (8009a9c <HAL_I2C_MspInit+0x198>)
 8009a86:	2180      	movs	r1, #128	@ 0x80
 8009a88:	03c9      	lsls	r1, r1, #15
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009a8e:	46c0      	nop			@ (mov r8, r8)
 8009a90:	46bd      	mov	sp, r7
 8009a92:	b00b      	add	sp, #44	@ 0x2c
 8009a94:	bd90      	pop	{r4, r7, pc}
 8009a96:	46c0      	nop			@ (mov r8, r8)
 8009a98:	40005400 	.word	0x40005400
 8009a9c:	40021000 	.word	0x40021000
 8009aa0:	50000400 	.word	0x50000400
 8009aa4:	20000c70 	.word	0x20000c70
 8009aa8:	40020030 	.word	0x40020030
 8009aac:	20000cb8 	.word	0x20000cb8
 8009ab0:	4002001c 	.word	0x4002001c
 8009ab4:	40005800 	.word	0x40005800

08009ab8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8009abc:	4b10      	ldr	r3, [pc, #64]	@ (8009b00 <MX_I2S2_Init+0x48>)
 8009abe:	4a11      	ldr	r2, [pc, #68]	@ (8009b04 <MX_I2S2_Init+0x4c>)
 8009ac0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b00 <MX_I2S2_Init+0x48>)
 8009ac4:	22c0      	movs	r2, #192	@ 0xc0
 8009ac6:	0092      	lsls	r2, r2, #2
 8009ac8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8009aca:	4b0d      	ldr	r3, [pc, #52]	@ (8009b00 <MX_I2S2_Init+0x48>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8009ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b00 <MX_I2S2_Init+0x48>)
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8009ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8009b00 <MX_I2S2_Init+0x48>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8009adc:	4b08      	ldr	r3, [pc, #32]	@ (8009b00 <MX_I2S2_Init+0x48>)
 8009ade:	22fa      	movs	r2, #250	@ 0xfa
 8009ae0:	0192      	lsls	r2, r2, #6
 8009ae2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8009ae4:	4b06      	ldr	r3, [pc, #24]	@ (8009b00 <MX_I2S2_Init+0x48>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8009aea:	4b05      	ldr	r3, [pc, #20]	@ (8009b00 <MX_I2S2_Init+0x48>)
 8009aec:	0018      	movs	r0, r3
 8009aee:	f00b fcb7 	bl	8015460 <HAL_I2S_Init>
 8009af2:	1e03      	subs	r3, r0, #0
 8009af4:	d001      	beq.n	8009afa <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8009af6:	f000 fc2d 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8009afa:	46c0      	nop			@ (mov r8, r8)
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000d00 	.word	0x20000d00
 8009b04:	40003800 	.word	0x40003800

08009b08 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8009b08:	b590      	push	{r4, r7, lr}
 8009b0a:	b089      	sub	sp, #36	@ 0x24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b10:	240c      	movs	r4, #12
 8009b12:	193b      	adds	r3, r7, r4
 8009b14:	0018      	movs	r0, r3
 8009b16:	2314      	movs	r3, #20
 8009b18:	001a      	movs	r2, r3
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	f018 ffde 	bl	8022adc <memset>
  if(i2sHandle->Instance==SPI2)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a2d      	ldr	r2, [pc, #180]	@ (8009bdc <HAL_I2S_MspInit+0xd4>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d154      	bne.n	8009bd4 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8009be0 <HAL_I2S_MspInit+0xd8>)
 8009b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8009be0 <HAL_I2S_MspInit+0xd8>)
 8009b30:	2180      	movs	r1, #128	@ 0x80
 8009b32:	01c9      	lsls	r1, r1, #7
 8009b34:	430a      	orrs	r2, r1
 8009b36:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b38:	4b29      	ldr	r3, [pc, #164]	@ (8009be0 <HAL_I2S_MspInit+0xd8>)
 8009b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b3c:	4b28      	ldr	r3, [pc, #160]	@ (8009be0 <HAL_I2S_MspInit+0xd8>)
 8009b3e:	2102      	movs	r1, #2
 8009b40:	430a      	orrs	r2, r1
 8009b42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009b44:	4b26      	ldr	r3, [pc, #152]	@ (8009be0 <HAL_I2S_MspInit+0xd8>)
 8009b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b48:	2202      	movs	r2, #2
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	60bb      	str	r3, [r7, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8009b50:	193b      	adds	r3, r7, r4
 8009b52:	22b0      	movs	r2, #176	@ 0xb0
 8009b54:	0212      	lsls	r2, r2, #8
 8009b56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b58:	0021      	movs	r1, r4
 8009b5a:	187b      	adds	r3, r7, r1
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b60:	187b      	adds	r3, r7, r1
 8009b62:	2200      	movs	r2, #0
 8009b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b66:	187b      	adds	r3, r7, r1
 8009b68:	2200      	movs	r2, #0
 8009b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8009b6c:	187b      	adds	r3, r7, r1
 8009b6e:	2200      	movs	r2, #0
 8009b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b72:	187b      	adds	r3, r7, r1
 8009b74:	4a1b      	ldr	r2, [pc, #108]	@ (8009be4 <HAL_I2S_MspInit+0xdc>)
 8009b76:	0019      	movs	r1, r3
 8009b78:	0010      	movs	r0, r2
 8009b7a:	f008 fb93 	bl	80122a4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8009b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009b80:	4a1a      	ldr	r2, [pc, #104]	@ (8009bec <HAL_I2S_MspInit+0xe4>)
 8009b82:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8009b84:	4b18      	ldr	r3, [pc, #96]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009b86:	2202      	movs	r2, #2
 8009b88:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009b8a:	4b17      	ldr	r3, [pc, #92]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b90:	4b15      	ldr	r3, [pc, #84]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009b96:	4b14      	ldr	r3, [pc, #80]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009b98:	2280      	movs	r2, #128	@ 0x80
 8009b9a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009b9c:	4b12      	ldr	r3, [pc, #72]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009b9e:	2280      	movs	r2, #128	@ 0x80
 8009ba0:	0052      	lsls	r2, r2, #1
 8009ba2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009ba4:	4b10      	ldr	r3, [pc, #64]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009ba6:	2280      	movs	r2, #128	@ 0x80
 8009ba8:	00d2      	lsls	r2, r2, #3
 8009baa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8009bac:	4b0e      	ldr	r3, [pc, #56]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009bae:	2220      	movs	r2, #32
 8009bb0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009bba:	0018      	movs	r0, r3
 8009bbc:	f007 ff56 	bl	8011a6c <HAL_DMA_Init>
 8009bc0:	1e03      	subs	r3, r0, #0
 8009bc2:	d001      	beq.n	8009bc8 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8009bc4:	f000 fbc6 	bl	800a354 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a07      	ldr	r2, [pc, #28]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8009bce:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <HAL_I2S_MspInit+0xe0>)
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009bd4:	46c0      	nop			@ (mov r8, r8)
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	b009      	add	sp, #36	@ 0x24
 8009bda:	bd90      	pop	{r4, r7, pc}
 8009bdc:	40003800 	.word	0x40003800
 8009be0:	40021000 	.word	0x40021000
 8009be4:	50000400 	.word	0x50000400
 8009be8:	20000d3c 	.word	0x20000d3c
 8009bec:	40020044 	.word	0x40020044

08009bf0 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
  testDone = true;
 8009bf4:	4b14      	ldr	r3, [pc, #80]	@ (8009c48 <SetTestDone+0x58>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8009bfa:	23fa      	movs	r3, #250	@ 0xfa
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f007 fa64 	bl	80110cc <HAL_Delay>
  SetDBLED(false, false, true);
 8009c04:	2201      	movs	r2, #1
 8009c06:	2100      	movs	r1, #0
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f005 fbd5 	bl	800f3b8 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 8009c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8009c4c <SetTestDone+0x5c>)
 8009c10:	23fa      	movs	r3, #250	@ 0xfa
 8009c12:	0119      	lsls	r1, r3, #4
 8009c14:	23fa      	movs	r3, #250	@ 0xfa
 8009c16:	011b      	lsls	r3, r3, #4
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f005 fb99 	bl	800f350 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 8009c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8009c4c <SetTestDone+0x5c>)
 8009c20:	23fa      	movs	r3, #250	@ 0xfa
 8009c22:	0119      	lsls	r1, r3, #4
 8009c24:	23fa      	movs	r3, #250	@ 0xfa
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	0018      	movs	r0, r3
 8009c2a:	f005 fc0f 	bl	800f44c <SetVocLED>
  HAL_Delay(500);
 8009c2e:	23fa      	movs	r3, #250	@ 0xfa
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	0018      	movs	r0, r3
 8009c34:	f007 fa4a 	bl	80110cc <HAL_Delay>
  SetLEDsOff();
 8009c38:	f005 fd48 	bl	800f6cc <SetLEDsOff>
  InitDone();
 8009c3c:	f005 fadc 	bl	800f1f8 <InitDone>
}
 8009c40:	46c0      	nop			@ (mov r8, r8)
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	46c0      	nop			@ (mov r8, r8)
 8009c48:	20000d84 	.word	0x20000d84
 8009c4c:	00000bb8 	.word	0x00000bb8

08009c50 <FlashLEDs>:

void FlashLEDs(){
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8009c56:	1dfb      	adds	r3, r7, #7
 8009c58:	2200      	movs	r2, #0
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	e021      	b.n	8009ca2 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8009c5e:	2201      	movs	r2, #1
 8009c60:	2101      	movs	r1, #1
 8009c62:	2001      	movs	r0, #1
 8009c64:	f005 fba8 	bl	800f3b8 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 8009c68:	4a12      	ldr	r2, [pc, #72]	@ (8009cb4 <FlashLEDs+0x64>)
 8009c6a:	23fa      	movs	r3, #250	@ 0xfa
 8009c6c:	0119      	lsls	r1, r3, #4
 8009c6e:	23fa      	movs	r3, #250	@ 0xfa
 8009c70:	011b      	lsls	r3, r3, #4
 8009c72:	0018      	movs	r0, r3
 8009c74:	f005 fb6c 	bl	800f350 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 8009c78:	4a0e      	ldr	r2, [pc, #56]	@ (8009cb4 <FlashLEDs+0x64>)
 8009c7a:	23fa      	movs	r3, #250	@ 0xfa
 8009c7c:	0119      	lsls	r1, r3, #4
 8009c7e:	23fa      	movs	r3, #250	@ 0xfa
 8009c80:	011b      	lsls	r3, r3, #4
 8009c82:	0018      	movs	r0, r3
 8009c84:	f005 fbe2 	bl	800f44c <SetVocLED>
    HAL_Delay(250);
 8009c88:	20fa      	movs	r0, #250	@ 0xfa
 8009c8a:	f007 fa1f 	bl	80110cc <HAL_Delay>
    SetLEDsOff();
 8009c8e:	f005 fd1d 	bl	800f6cc <SetLEDsOff>
    HAL_Delay(250);
 8009c92:	20fa      	movs	r0, #250	@ 0xfa
 8009c94:	f007 fa1a 	bl	80110cc <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8009c98:	1dfb      	adds	r3, r7, #7
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	1dfb      	adds	r3, r7, #7
 8009c9e:	3201      	adds	r2, #1
 8009ca0:	701a      	strb	r2, [r3, #0]
 8009ca2:	1dfb      	adds	r3, r7, #7
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b04      	cmp	r3, #4
 8009ca8:	d9d9      	bls.n	8009c5e <FlashLEDs+0xe>
  }
}
 8009caa:	46c0      	nop			@ (mov r8, r8)
 8009cac:	46c0      	nop			@ (mov r8, r8)
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	b002      	add	sp, #8
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	00000bb8 	.word	0x00000bb8

08009cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009cbe:	f007 f995 	bl	8010fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009cc2:	f000 f9f7 	bl	800a0b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009cc6:	f7ff fc01 	bl	80094cc <MX_GPIO_Init>
  MX_DMA_Init();
 8009cca:	f7ff fa29 	bl	8009120 <MX_DMA_Init>
  MX_I2C1_Init();
 8009cce:	f7ff fd99 	bl	8009804 <MX_I2C1_Init>
  MX_I2S2_Init();
 8009cd2:	f7ff fef1 	bl	8009ab8 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8009cd6:	f006 fbb5 	bl	8010444 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8009cda:	f7ff fdd3 	bl	8009884 <MX_I2C2_Init>
  MX_TIM2_Init();
 8009cde:	f006 f9a9 	bl	8010034 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009ce2:	f006 fa1b 	bl	801011c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8009ce6:	f006 fbdd 	bl	80104a4 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8009cea:	f7fd ffbf 	bl	8007c6c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8009cee:	f015 fbe1 	bl	801f4b4 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8009cf2:	f001 fa29 	bl	800b148 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8009cf6:	f006 fb6f 	bl	80103d8 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8009cfa:	f006 fa8d 	bl	8010218 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8009cfe:	4ac7      	ldr	r2, [pc, #796]	@ (800a01c <main+0x364>)
 8009d00:	4bc7      	ldr	r3, [pc, #796]	@ (800a020 <main+0x368>)
 8009d02:	0011      	movs	r1, r2
 8009d04:	0018      	movs	r0, r3
 8009d06:	f7ff fd11 	bl	800972c <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8009d0a:	f006 fe0d 	bl	8010928 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8009d0e:	f006 f819 	bl	800fd44 <Battery_Upkeep>
 8009d12:	0003      	movs	r3, r0
 8009d14:	001a      	movs	r2, r3
 8009d16:	4bc3      	ldr	r3, [pc, #780]	@ (800a024 <main+0x36c>)
 8009d18:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8009d1a:	4bc2      	ldr	r3, [pc, #776]	@ (800a024 <main+0x36c>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d113      	bne.n	8009d4a <main+0x92>
    SetAllREDLED();
 8009d22:	f005 fcef 	bl	800f704 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 8009d26:	f7fd f8c1 	bl	8006eac <ReadBatteryVoltage>
 8009d2a:	1c03      	adds	r3, r0, #0
 8009d2c:	1c18      	adds	r0, r3, #0
 8009d2e:	f7f9 fb99 	bl	8003464 <__aeabi_f2d>
 8009d32:	0002      	movs	r2, r0
 8009d34:	000b      	movs	r3, r1
 8009d36:	48bc      	ldr	r0, [pc, #752]	@ (800a028 <main+0x370>)
 8009d38:	49bc      	ldr	r1, [pc, #752]	@ (800a02c <main+0x374>)
 8009d3a:	9200      	str	r2, [sp, #0]
 8009d3c:	9301      	str	r3, [sp, #4]
 8009d3e:	0002      	movs	r2, r0
 8009d40:	2002      	movs	r0, #2
 8009d42:	f006 fd6d 	bl	8010820 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8009d46:	f7fd fcc3 	bl	80076d0 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8009d4a:	f7fd f985 	bl	8007058 <UserButton_Pressed>
 8009d4e:	1e03      	subs	r3, r0, #0
 8009d50:	d004      	beq.n	8009d5c <main+0xa4>
    EnableESPProg();
 8009d52:	f015 fc7f 	bl	801f654 <EnableESPProg>
    ESP_Programming = true;
 8009d56:	4bb6      	ldr	r3, [pc, #728]	@ (800a030 <main+0x378>)
 8009d58:	2201      	movs	r2, #1
 8009d5a:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8009d5c:	2003      	movs	r0, #3
 8009d5e:	f006 fdc9 	bl	80108f4 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8009d62:	49b4      	ldr	r1, [pc, #720]	@ (800a034 <main+0x37c>)
 8009d64:	4bb4      	ldr	r3, [pc, #720]	@ (800a038 <main+0x380>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	0018      	movs	r0, r3
 8009d6a:	f00f ff09 	bl	8019b80 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8009d6e:	4bb3      	ldr	r3, [pc, #716]	@ (800a03c <main+0x384>)
 8009d70:	0018      	movs	r0, r3
 8009d72:	f7fd fd81 	bl	8007878 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8009d76:	4ab2      	ldr	r2, [pc, #712]	@ (800a040 <main+0x388>)
 8009d78:	49b2      	ldr	r1, [pc, #712]	@ (800a044 <main+0x38c>)
 8009d7a:	48b3      	ldr	r0, [pc, #716]	@ (800a048 <main+0x390>)
 8009d7c:	230b      	movs	r3, #11
 8009d7e:	f004 fbb1 	bl	800e4e4 <soundInit>
 8009d82:	0003      	movs	r3, r0
 8009d84:	001a      	movs	r2, r3
 8009d86:	2301      	movs	r3, #1
 8009d88:	4053      	eors	r3, r2
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8009d90:	4aae      	ldr	r2, [pc, #696]	@ (800a04c <main+0x394>)
 8009d92:	4baf      	ldr	r3, [pc, #700]	@ (800a050 <main+0x398>)
 8009d94:	21f9      	movs	r1, #249	@ 0xf9
 8009d96:	0018      	movs	r0, r3
 8009d98:	f006 fdfa 	bl	8010990 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8009d9c:	4bad      	ldr	r3, [pc, #692]	@ (800a054 <main+0x39c>)
 8009d9e:	4aae      	ldr	r2, [pc, #696]	@ (800a058 <main+0x3a0>)
 8009da0:	49a8      	ldr	r1, [pc, #672]	@ (800a044 <main+0x38c>)
 8009da2:	48ae      	ldr	r0, [pc, #696]	@ (800a05c <main+0x3a4>)
 8009da4:	f000 fba8 	bl	800a4f8 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 8009da8:	f007 f986 	bl	80110b8 <HAL_GetTick>
 8009dac:	0003      	movs	r3, r0
 8009dae:	4aac      	ldr	r2, [pc, #688]	@ (800a060 <main+0x3a8>)
 8009db0:	189a      	adds	r2, r3, r2
 8009db2:	4bac      	ldr	r3, [pc, #688]	@ (800a064 <main+0x3ac>)
 8009db4:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8009db6:	f7fd f92f 	bl	8007018 <Check_USB_PowerOn>
 8009dba:	0003      	movs	r3, r0
 8009dbc:	1e5a      	subs	r2, r3, #1
 8009dbe:	4193      	sbcs	r3, r2
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	4053      	eors	r3, r2
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	1c1a      	adds	r2, r3, #0
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4013      	ands	r3, r2
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	4ba5      	ldr	r3, [pc, #660]	@ (800a068 <main+0x3b0>)
 8009dd2:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 8009dd4:	f7fd f920 	bl	8007018 <Check_USB_PowerOn>
 8009dd8:	1e03      	subs	r3, r0, #0
 8009dda:	d003      	beq.n	8009de4 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 8009ddc:	4ba3      	ldr	r3, [pc, #652]	@ (800a06c <main+0x3b4>)
 8009dde:	0018      	movs	r0, r3
 8009de0:	f7fc fc96 	bl	8006710 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8009de4:	4ba2      	ldr	r3, [pc, #648]	@ (800a070 <main+0x3b8>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	0018      	movs	r0, r3
 8009dea:	f006 fcc3 	bl	8010774 <TimestampIsReached>
 8009dee:	1e03      	subs	r3, r0, #0
 8009df0:	d00e      	beq.n	8009e10 <main+0x158>
      charge = Battery_Upkeep();
 8009df2:	f005 ffa7 	bl	800fd44 <Battery_Upkeep>
 8009df6:	0003      	movs	r3, r0
 8009df8:	001a      	movs	r2, r3
 8009dfa:	4b8a      	ldr	r3, [pc, #552]	@ (800a024 <main+0x36c>)
 8009dfc:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 8009dfe:	f007 f95b 	bl	80110b8 <HAL_GetTick>
 8009e02:	0003      	movs	r3, r0
 8009e04:	4a9b      	ldr	r2, [pc, #620]	@ (800a074 <main+0x3bc>)
 8009e06:	189a      	adds	r2, r3, r2
 8009e08:	4b99      	ldr	r3, [pc, #612]	@ (800a070 <main+0x3b8>)
 8009e0a:	601a      	str	r2, [r3, #0]
      showTime();
 8009e0c:	f7fd f934 	bl	8007078 <showTime>

    }
    configCheck();
 8009e10:	f005 fdfc 	bl	800fa0c <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8009e14:	4b98      	ldr	r3, [pc, #608]	@ (800a078 <main+0x3c0>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8009e1a:	4b82      	ldr	r3, [pc, #520]	@ (800a024 <main+0x36c>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d003      	beq.n	8009e2a <main+0x172>
 8009e22:	4b80      	ldr	r3, [pc, #512]	@ (800a024 <main+0x36c>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d104      	bne.n	8009e34 <main+0x17c>
          FlashLEDs();
 8009e2a:	f7ff ff11 	bl	8009c50 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8009e2e:	4b93      	ldr	r3, [pc, #588]	@ (800a07c <main+0x3c4>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8009e34:	4b7b      	ldr	r3, [pc, #492]	@ (800a024 <main+0x36c>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d109      	bne.n	8009e50 <main+0x198>
 8009e3c:	4b90      	ldr	r3, [pc, #576]	@ (800a080 <main+0x3c8>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d105      	bne.n	8009e50 <main+0x198>
          batteryEmpty = true;
 8009e44:	4b8f      	ldr	r3, [pc, #572]	@ (800a084 <main+0x3cc>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8009e4a:	f7fd fc41 	bl	80076d0 <Enter_Standby_Mode>
 8009e4e:	e002      	b.n	8009e56 <main+0x19e>
        }
        else{
          batteryEmpty = false;
 8009e50:	4b8c      	ldr	r3, [pc, #560]	@ (800a084 <main+0x3cc>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8009e56:	4b8c      	ldr	r3, [pc, #560]	@ (800a088 <main+0x3d0>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d100      	bne.n	8009e60 <main+0x1a8>
 8009e5e:	e088      	b.n	8009f72 <main+0x2ba>
 8009e60:	4b73      	ldr	r3, [pc, #460]	@ (800a030 <main+0x378>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2201      	movs	r2, #1
 8009e66:	4053      	eors	r3, r2
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d100      	bne.n	8009e70 <main+0x1b8>
 8009e6e:	e080      	b.n	8009f72 <main+0x2ba>
 8009e70:	4b84      	ldr	r3, [pc, #528]	@ (800a084 <main+0x3cc>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2201      	movs	r2, #1
 8009e76:	4053      	eors	r3, r2
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d100      	bne.n	8009e80 <main+0x1c8>
 8009e7e:	e078      	b.n	8009f72 <main+0x2ba>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8009e80:	4b79      	ldr	r3, [pc, #484]	@ (800a068 <main+0x3b0>)
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	4b81      	ldr	r3, [pc, #516]	@ (800a08c <main+0x3d4>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d020      	beq.n	8009ece <main+0x216>
        if (IsSGPPresent() && !usbPluggedIn) {
 8009e8c:	f000 fac6 	bl	800a41c <IsSGPPresent>
 8009e90:	1e03      	subs	r3, r0, #0
 8009e92:	d009      	beq.n	8009ea8 <main+0x1f0>
 8009e94:	4b7d      	ldr	r3, [pc, #500]	@ (800a08c <main+0x3d4>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	4053      	eors	r3, r2
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d002      	beq.n	8009ea8 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	f000 fac4 	bl	800a430 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8009ea8:	4b79      	ldr	r3, [pc, #484]	@ (800a090 <main+0x3d8>)
 8009eaa:	791b      	ldrb	r3, [r3, #4]
 8009eac:	2b34      	cmp	r3, #52	@ 0x34
 8009eae:	d003      	beq.n	8009eb8 <main+0x200>
 8009eb0:	4b77      	ldr	r3, [pc, #476]	@ (800a090 <main+0x3d8>)
 8009eb2:	791b      	ldrb	r3, [r3, #4]
 8009eb4:	2b35      	cmp	r3, #53	@ 0x35
 8009eb6:	d106      	bne.n	8009ec6 <main+0x20e>
 8009eb8:	4b74      	ldr	r3, [pc, #464]	@ (800a08c <main+0x3d4>)
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	f000 fab5 	bl	800a430 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8009ec6:	4b71      	ldr	r3, [pc, #452]	@ (800a08c <main+0x3d4>)
 8009ec8:	781a      	ldrb	r2, [r3, #0]
 8009eca:	4b67      	ldr	r3, [pc, #412]	@ (800a068 <main+0x3b0>)
 8009ecc:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 8009ece:	f000 fe29 	bl	800ab24 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 8009ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800a07c <main+0x3c4>)
 8009ed4:	78db      	ldrb	r3, [r3, #3]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d005      	beq.n	8009ee6 <main+0x22e>
        MICstate = Mic_Upkeep();
 8009eda:	f001 f821 	bl	800af20 <Mic_Upkeep>
 8009ede:	0003      	movs	r3, r0
 8009ee0:	001a      	movs	r2, r3
 8009ee2:	4b6c      	ldr	r3, [pc, #432]	@ (800a094 <main+0x3dc>)
 8009ee4:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8009ee6:	4b4f      	ldr	r3, [pc, #316]	@ (800a024 <main+0x36c>)
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d803      	bhi.n	8009ef6 <main+0x23e>
 8009eee:	4b62      	ldr	r3, [pc, #392]	@ (800a078 <main+0x3c0>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d016      	beq.n	8009f24 <main+0x26c>
 8009ef6:	4b61      	ldr	r3, [pc, #388]	@ (800a07c <main+0x3c4>)
 8009ef8:	789b      	ldrb	r3, [r3, #2]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d012      	beq.n	8009f24 <main+0x26c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8009efe:	f001 f9b1 	bl	800b264 <sen5x_Get_sen5x_enable_state>
 8009f02:	0003      	movs	r3, r0
 8009f04:	001a      	movs	r2, r3
 8009f06:	2301      	movs	r3, #1
 8009f08:	4053      	eors	r3, r2
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <main+0x266>
 8009f10:	4b5e      	ldr	r3, [pc, #376]	@ (800a08c <main+0x3d4>)
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <main+0x266>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 8009f18:	2000      	movs	r0, #0
 8009f1a:	f001 f9df 	bl	800b2dc <sen5x_enable>
        }
        sen5x_statemachine();
 8009f1e:	f001 ff29 	bl	800bd74 <sen5x_statemachine>
 8009f22:	e020      	b.n	8009f66 <main+0x2ae>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8009f24:	4b3f      	ldr	r3, [pc, #252]	@ (800a024 <main+0x36c>)
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d81c      	bhi.n	8009f66 <main+0x2ae>
 8009f2c:	4b52      	ldr	r3, [pc, #328]	@ (800a078 <main+0x3c0>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	2201      	movs	r2, #1
 8009f32:	4053      	eors	r3, r2
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d015      	beq.n	8009f66 <main+0x2ae>
 8009f3a:	4b50      	ldr	r3, [pc, #320]	@ (800a07c <main+0x3c4>)
 8009f3c:	789b      	ldrb	r3, [r3, #2]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d011      	beq.n	8009f66 <main+0x2ae>
        Info("Battery level insufficient for sen5x operation");
 8009f42:	4a55      	ldr	r2, [pc, #340]	@ (800a098 <main+0x3e0>)
 8009f44:	4b39      	ldr	r3, [pc, #228]	@ (800a02c <main+0x374>)
 8009f46:	0019      	movs	r1, r3
 8009f48:	2002      	movs	r0, #2
 8009f4a:	f006 fc69 	bl	8010820 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8009f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800a07c <main+0x3c4>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8009f54:	4b51      	ldr	r3, [pc, #324]	@ (800a09c <main+0x3e4>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8009f5a:	4b51      	ldr	r3, [pc, #324]	@ (800a0a0 <main+0x3e8>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <main+0x2ae>
          sen5x_Power_Off();
 8009f62:	f001 fa47 	bl	800b3f4 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8009f66:	f7fb fc19 	bl	800579c <ESP_Upkeep>
 8009f6a:	0003      	movs	r3, r0
 8009f6c:	001a      	movs	r2, r3
 8009f6e:	4b44      	ldr	r3, [pc, #272]	@ (800a080 <main+0x3c8>)
 8009f70:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8009f72:	4b45      	ldr	r3, [pc, #276]	@ (800a088 <main+0x3d0>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2201      	movs	r2, #1
 8009f78:	4053      	eors	r3, r2
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00f      	beq.n	8009fa0 <main+0x2e8>
 8009f80:	4b2b      	ldr	r3, [pc, #172]	@ (800a030 <main+0x378>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2201      	movs	r2, #1
 8009f86:	4053      	eors	r3, r2
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d008      	beq.n	8009fa0 <main+0x2e8>
 8009f8e:	4b3d      	ldr	r3, [pc, #244]	@ (800a084 <main+0x3cc>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2201      	movs	r2, #1
 8009f94:	4053      	eors	r3, r2
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <main+0x2e8>
      Device_Test();  // for device with startup time
 8009f9c:	f000 fc54 	bl	800a848 <Device_Test>
    }
    if (!usbPluggedIn) {
 8009fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800a08c <main+0x3d4>)
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	4053      	eors	r3, r2
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d01c      	beq.n	8009fe8 <main+0x330>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8009fae:	4b3d      	ldr	r3, [pc, #244]	@ (800a0a4 <main+0x3ec>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	4053      	eors	r3, r2
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d015      	beq.n	8009fe8 <main+0x330>
 8009fbc:	f000 fcc2 	bl	800a944 <AllDevicesReady>
 8009fc0:	1e03      	subs	r3, r0, #0
 8009fc2:	d011      	beq.n	8009fe8 <main+0x330>
 8009fc4:	4b38      	ldr	r3, [pc, #224]	@ (800a0a8 <main+0x3f0>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00d      	beq.n	8009fe8 <main+0x330>
        EnabledConnectedDevices();
 8009fcc:	f000 fd34 	bl	800aa38 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8009fd0:	4b36      	ldr	r3, [pc, #216]	@ (800a0ac <main+0x3f4>)
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <main+0x326>
 8009fd8:	23d7      	movs	r3, #215	@ 0xd7
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	e001      	b.n	8009fe2 <main+0x32a>
 8009fde:	23dc      	movs	r3, #220	@ 0xdc
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f7fd fb94 	bl	8007710 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 8009fe8:	4b12      	ldr	r3, [pc, #72]	@ (800a034 <main+0x37c>)
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <main+0x33c>
      check_cli_command();
 8009ff0:	f000 f8ea 	bl	800a1c8 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 8009ff4:	f7fd f810 	bl	8007018 <Check_USB_PowerOn>
 8009ff8:	1e03      	subs	r3, r0, #0
 8009ffa:	d100      	bne.n	8009ffe <main+0x346>
 8009ffc:	e6f2      	b.n	8009de4 <main+0x12c>
 8009ffe:	4b2c      	ldr	r3, [pc, #176]	@ (800a0b0 <main+0x3f8>)
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	2201      	movs	r2, #1
 800a004:	4053      	eors	r3, r2
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d100      	bne.n	800a00e <main+0x356>
 800a00c:	e6ea      	b.n	8009de4 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800a00e:	f015 fb2b 	bl	801f668 <GetUsbRxPointer>
 800a012:	0003      	movs	r3, r0
 800a014:	0018      	movs	r0, r3
 800a016:	f7fc fdbd 	bl	8006b94 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800a01a:	e6e3      	b.n	8009de4 <main+0x12c>
 800a01c:	20001e34 	.word	0x20001e34
 800a020:	20001df4 	.word	0x20001df4
 800a024:	20000da0 	.word	0x20000da0
 800a028:	08027658 	.word	0x08027658
 800a02c:	0802767c 	.word	0x0802767c
 800a030:	20000d85 	.word	0x20000d85
 800a034:	20000d8c 	.word	0x20000d8c
 800a038:	20001f6c 	.word	0x20001f6c
 800a03c:	20000e20 	.word	0x20000e20
 800a040:	20001e74 	.word	0x20001e74
 800a044:	20000d00 	.word	0x20000d00
 800a048:	20000d3c 	.word	0x20000d3c
 800a04c:	08027680 	.word	0x08027680
 800a050:	08028e28 	.word	0x08028e28
 800a054:	20002024 	.word	0x20002024
 800a058:	20000b00 	.word	0x20000b00
 800a05c:	20000bc8 	.word	0x20000bc8
 800a060:	000061a8 	.word	0x000061a8
 800a064:	20000d9c 	.word	0x20000d9c
 800a068:	20000d87 	.word	0x20000d87
 800a06c:	08027694 	.word	0x08027694
 800a070:	20000098 	.word	0x20000098
 800a074:	0000c350 	.word	0x0000c350
 800a078:	20000095 	.word	0x20000095
 800a07c:	20000da4 	.word	0x20000da4
 800a080:	20000d89 	.word	0x20000d89
 800a084:	20000d86 	.word	0x20000d86
 800a088:	20000d84 	.word	0x20000d84
 800a08c:	20001dd5 	.word	0x20001dd5
 800a090:	20000e48 	.word	0x20000e48
 800a094:	20000d88 	.word	0x20000d88
 800a098:	080276c8 	.word	0x080276c8
 800a09c:	20000e46 	.word	0x20000e46
 800a0a0:	20000e45 	.word	0x20000e45
 800a0a4:	20001dd6 	.word	0x20001dd6
 800a0a8:	20000564 	.word	0x20000564
 800a0ac:	20000dac 	.word	0x20000dac
 800a0b0:	2000055f 	.word	0x2000055f

0800a0b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b09d      	sub	sp, #116	@ 0x74
 800a0b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a0ba:	2438      	movs	r4, #56	@ 0x38
 800a0bc:	193b      	adds	r3, r7, r4
 800a0be:	0018      	movs	r0, r3
 800a0c0:	2338      	movs	r3, #56	@ 0x38
 800a0c2:	001a      	movs	r2, r3
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	f018 fd09 	bl	8022adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a0ca:	2324      	movs	r3, #36	@ 0x24
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	2314      	movs	r3, #20
 800a0d2:	001a      	movs	r2, r3
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	f018 fd01 	bl	8022adc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a0da:	003b      	movs	r3, r7
 800a0dc:	0018      	movs	r0, r3
 800a0de:	2324      	movs	r3, #36	@ 0x24
 800a0e0:	001a      	movs	r2, r3
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	f018 fcfa 	bl	8022adc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a0e8:	4b34      	ldr	r3, [pc, #208]	@ (800a1bc <SystemClock_Config+0x108>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a34      	ldr	r2, [pc, #208]	@ (800a1c0 <SystemClock_Config+0x10c>)
 800a0ee:	401a      	ands	r2, r3
 800a0f0:	4b32      	ldr	r3, [pc, #200]	@ (800a1bc <SystemClock_Config+0x108>)
 800a0f2:	2180      	movs	r1, #128	@ 0x80
 800a0f4:	0109      	lsls	r1, r1, #4
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a0fa:	f00d fb15 	bl	8017728 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800a0fe:	4b31      	ldr	r3, [pc, #196]	@ (800a1c4 <SystemClock_Config+0x110>)
 800a100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a102:	4a2f      	ldr	r2, [pc, #188]	@ (800a1c0 <SystemClock_Config+0x10c>)
 800a104:	401a      	ands	r2, r3
 800a106:	4b2f      	ldr	r3, [pc, #188]	@ (800a1c4 <SystemClock_Config+0x110>)
 800a108:	2180      	movs	r1, #128	@ 0x80
 800a10a:	0149      	lsls	r1, r1, #5
 800a10c:	430a      	orrs	r2, r1
 800a10e:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800a110:	193b      	adds	r3, r7, r4
 800a112:	2226      	movs	r2, #38	@ 0x26
 800a114:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a116:	193b      	adds	r3, r7, r4
 800a118:	2280      	movs	r2, #128	@ 0x80
 800a11a:	0052      	lsls	r2, r2, #1
 800a11c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a11e:	0021      	movs	r1, r4
 800a120:	187b      	adds	r3, r7, r1
 800a122:	2201      	movs	r2, #1
 800a124:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a126:	187b      	adds	r3, r7, r1
 800a128:	2210      	movs	r2, #16
 800a12a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a12c:	187b      	adds	r3, r7, r1
 800a12e:	2201      	movs	r2, #1
 800a130:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a132:	187b      	adds	r3, r7, r1
 800a134:	2200      	movs	r2, #0
 800a136:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a138:	187b      	adds	r3, r7, r1
 800a13a:	0018      	movs	r0, r3
 800a13c:	f00d fb84 	bl	8017848 <HAL_RCC_OscConfig>
 800a140:	1e03      	subs	r3, r0, #0
 800a142:	d001      	beq.n	800a148 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a144:	f000 f906 	bl	800a354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a148:	2124      	movs	r1, #36	@ 0x24
 800a14a:	187b      	adds	r3, r7, r1
 800a14c:	220f      	movs	r2, #15
 800a14e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800a150:	187b      	adds	r3, r7, r1
 800a152:	2201      	movs	r2, #1
 800a154:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a156:	187b      	adds	r3, r7, r1
 800a158:	2200      	movs	r2, #0
 800a15a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a15c:	187b      	adds	r3, r7, r1
 800a15e:	2200      	movs	r2, #0
 800a160:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a162:	187b      	adds	r3, r7, r1
 800a164:	2200      	movs	r2, #0
 800a166:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a168:	187b      	adds	r3, r7, r1
 800a16a:	2100      	movs	r1, #0
 800a16c:	0018      	movs	r0, r3
 800a16e:	f00d ff3f 	bl	8017ff0 <HAL_RCC_ClockConfig>
 800a172:	1e03      	subs	r3, r0, #0
 800a174:	d001      	beq.n	800a17a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800a176:	f000 f8ed 	bl	800a354 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800a17a:	003b      	movs	r3, r7
 800a17c:	226d      	movs	r2, #109	@ 0x6d
 800a17e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a180:	003b      	movs	r3, r7
 800a182:	2200      	movs	r2, #0
 800a184:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a186:	003b      	movs	r3, r7
 800a188:	2200      	movs	r2, #0
 800a18a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a18c:	003b      	movs	r3, r7
 800a18e:	2200      	movs	r2, #0
 800a190:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a192:	003b      	movs	r3, r7
 800a194:	2280      	movs	r2, #128	@ 0x80
 800a196:	0252      	lsls	r2, r2, #9
 800a198:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a19a:	003b      	movs	r3, r7
 800a19c:	2280      	movs	r2, #128	@ 0x80
 800a19e:	04d2      	lsls	r2, r2, #19
 800a1a0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1a2:	003b      	movs	r3, r7
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f00e f947 	bl	8018438 <HAL_RCCEx_PeriphCLKConfig>
 800a1aa:	1e03      	subs	r3, r0, #0
 800a1ac:	d001      	beq.n	800a1b2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800a1ae:	f000 f8d1 	bl	800a354 <Error_Handler>
  }
}
 800a1b2:	46c0      	nop			@ (mov r8, r8)
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b01d      	add	sp, #116	@ 0x74
 800a1b8:	bd90      	pop	{r4, r7, pc}
 800a1ba:	46c0      	nop			@ (mov r8, r8)
 800a1bc:	40007000 	.word	0x40007000
 800a1c0:	ffffe7ff 	.word	0xffffe7ff
 800a1c4:	40021000 	.word	0x40021000

0800a1c8 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800a1cc:	4b34      	ldr	r3, [pc, #208]	@ (800a2a0 <check_cli_command+0xd8>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	3b61      	subs	r3, #97	@ 0x61
 800a1d2:	2b13      	cmp	r3, #19
 800a1d4:	d833      	bhi.n	800a23e <check_cli_command+0x76>
 800a1d6:	009a      	lsls	r2, r3, #2
 800a1d8:	4b32      	ldr	r3, [pc, #200]	@ (800a2a4 <check_cli_command+0xdc>)
 800a1da:	18d3      	adds	r3, r2, r3
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800a1e0:	4b31      	ldr	r3, [pc, #196]	@ (800a2a8 <check_cli_command+0xe0>)
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f018 fb0a 	bl	80227fc <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800a1e8:	2003      	movs	r0, #3
 800a1ea:	f006 fb83 	bl	80108f4 <SetVerboseLevel>
      break;
 800a1ee:	e051      	b.n	800a294 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800a1f0:	f7fc face 	bl	8006790 <PC_show_Keys>
    break;
 800a1f4:	e04e      	b.n	800a294 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800a1f6:	f7f9 fa2b 	bl	8003650 <forceNTPupdate>
    break;
 800a1fa:	e04b      	b.n	800a294 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800a1fc:	4b2b      	ldr	r3, [pc, #172]	@ (800a2ac <check_cli_command+0xe4>)
 800a1fe:	0018      	movs	r0, r3
 800a200:	f018 fafc 	bl	80227fc <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800a204:	2002      	movs	r0, #2
 800a206:	f006 fb75 	bl	80108f4 <SetVerboseLevel>
      break;
 800a20a:	e043      	b.n	800a294 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800a20c:	4b28      	ldr	r3, [pc, #160]	@ (800a2b0 <check_cli_command+0xe8>)
 800a20e:	0018      	movs	r0, r3
 800a210:	f018 faf4 	bl	80227fc <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800a214:	2001      	movs	r0, #1
 800a216:	f006 fb6d 	bl	80108f4 <SetVerboseLevel>
      break;
 800a21a:	e03b      	b.n	800a294 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800a21c:	4b25      	ldr	r3, [pc, #148]	@ (800a2b4 <check_cli_command+0xec>)
 800a21e:	0018      	movs	r0, r3
 800a220:	f018 faec 	bl	80227fc <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800a224:	2000      	movs	r0, #0
 800a226:	f006 fb65 	bl	80108f4 <SetVerboseLevel>
      break;
 800a22a:	e033      	b.n	800a294 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800a22c:	f006 ff44 	bl	80110b8 <HAL_GetTick>
 800a230:	0002      	movs	r2, r0
 800a232:	4b21      	ldr	r3, [pc, #132]	@ (800a2b8 <check_cli_command+0xf0>)
 800a234:	601a      	str	r2, [r3, #0]
      break;
 800a236:	e02d      	b.n	800a294 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800a238:	f7fc ff1e 	bl	8007078 <showTime>
      break;
 800a23c:	e02a      	b.n	800a294 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800a23e:	4a1f      	ldr	r2, [pc, #124]	@ (800a2bc <check_cli_command+0xf4>)
 800a240:	4b1f      	ldr	r3, [pc, #124]	@ (800a2c0 <check_cli_command+0xf8>)
 800a242:	0019      	movs	r1, r3
 800a244:	2001      	movs	r0, #1
 800a246:	f006 faeb 	bl	8010820 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800a24a:	4b1e      	ldr	r3, [pc, #120]	@ (800a2c4 <check_cli_command+0xfc>)
 800a24c:	0018      	movs	r0, r3
 800a24e:	f018 fad5 	bl	80227fc <puts>
      printf("a - VerboseLevel set to all\r\n");
 800a252:	4b1d      	ldr	r3, [pc, #116]	@ (800a2c8 <check_cli_command+0x100>)
 800a254:	0018      	movs	r0, r3
 800a256:	f018 fad1 	bl	80227fc <puts>
      printf("e - show EEPROM\r\n");
 800a25a:	4b1c      	ldr	r3, [pc, #112]	@ (800a2cc <check_cli_command+0x104>)
 800a25c:	0018      	movs	r0, r3
 800a25e:	f018 facd 	bl	80227fc <puts>
      printf("f - Force NTP time synchronization\r\n");
 800a262:	4b1b      	ldr	r3, [pc, #108]	@ (800a2d0 <check_cli_command+0x108>)
 800a264:	0018      	movs	r0, r3
 800a266:	f018 fac9 	bl	80227fc <puts>
      printf("i - VerboseLevel set to info\r\n");
 800a26a:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d4 <check_cli_command+0x10c>)
 800a26c:	0018      	movs	r0, r3
 800a26e:	f018 fac5 	bl	80227fc <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800a272:	4b19      	ldr	r3, [pc, #100]	@ (800a2d8 <check_cli_command+0x110>)
 800a274:	0018      	movs	r0, r3
 800a276:	f018 fac1 	bl	80227fc <puts>
      printf("n - VerboseLevel set to none\r\n");
 800a27a:	4b18      	ldr	r3, [pc, #96]	@ (800a2dc <check_cli_command+0x114>)
 800a27c:	0018      	movs	r0, r3
 800a27e:	f018 fabd 	bl	80227fc <puts>
      printf("s - Start particle measurement\r\n");
 800a282:	4b17      	ldr	r3, [pc, #92]	@ (800a2e0 <check_cli_command+0x118>)
 800a284:	0018      	movs	r0, r3
 800a286:	f018 fab9 	bl	80227fc <puts>
      printf("t - Show actual systemtime\r\n");
 800a28a:	4b16      	ldr	r3, [pc, #88]	@ (800a2e4 <check_cli_command+0x11c>)
 800a28c:	0018      	movs	r0, r3
 800a28e:	f018 fab5 	bl	80227fc <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800a292:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800a294:	4b02      	ldr	r3, [pc, #8]	@ (800a2a0 <check_cli_command+0xd8>)
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
}
 800a29a:	46c0      	nop			@ (mov r8, r8)
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20000d8c 	.word	0x20000d8c
 800a2a4:	08028dd8 	.word	0x08028dd8
 800a2a8:	080276f8 	.word	0x080276f8
 800a2ac:	08027714 	.word	0x08027714
 800a2b0:	08027730 	.word	0x08027730
 800a2b4:	08027750 	.word	0x08027750
 800a2b8:	20000e54 	.word	0x20000e54
 800a2bc:	0802776c 	.word	0x0802776c
 800a2c0:	0802779c 	.word	0x0802779c
 800a2c4:	080277a0 	.word	0x080277a0
 800a2c8:	080277b8 	.word	0x080277b8
 800a2cc:	080277d8 	.word	0x080277d8
 800a2d0:	080277ec 	.word	0x080277ec
 800a2d4:	08027810 	.word	0x08027810
 800a2d8:	08027830 	.word	0x08027830
 800a2dc:	08027854 	.word	0x08027854
 800a2e0:	08027874 	.word	0x08027874
 800a2e4:	08027894 	.word	0x08027894

0800a2e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800a2f0:	4907      	ldr	r1, [pc, #28]	@ (800a310 <HAL_UART_RxCpltCallback+0x28>)
 800a2f2:	4b08      	ldr	r3, [pc, #32]	@ (800a314 <HAL_UART_RxCpltCallback+0x2c>)
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	f00f fc42 	bl	8019b80 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800a2fc:	4904      	ldr	r1, [pc, #16]	@ (800a310 <HAL_UART_RxCpltCallback+0x28>)
 800a2fe:	4b05      	ldr	r3, [pc, #20]	@ (800a314 <HAL_UART_RxCpltCallback+0x2c>)
 800a300:	2201      	movs	r2, #1
 800a302:	0018      	movs	r0, r3
 800a304:	f00f fc3c 	bl	8019b80 <HAL_UART_Receive_IT>
}
 800a308:	46c0      	nop			@ (mov r8, r8)
 800a30a:	46bd      	mov	sp, r7
 800a30c:	b002      	add	sp, #8
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20000d8c 	.word	0x20000d8c
 800a314:	20001f6c 	.word	0x20001f6c

0800a318 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	0002      	movs	r2, r0
 800a320:	1dbb      	adds	r3, r7, #6
 800a322:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800a324:	1dbb      	adds	r3, r7, #6
 800a326:	881a      	ldrh	r2, [r3, #0]
 800a328:	2380      	movs	r3, #128	@ 0x80
 800a32a:	021b      	lsls	r3, r3, #8
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d10b      	bne.n	800a348 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800a330:	f005 fd1c 	bl	800fd6c <setuserToggle>
    if (GetPMSensorPresence()) {
 800a334:	f000 f854 	bl	800a3e0 <GetPMSensorPresence>
 800a338:	1e03      	subs	r3, r0, #0
 800a33a:	d005      	beq.n	800a348 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800a33c:	4b04      	ldr	r3, [pc, #16]	@ (800a350 <HAL_GPIO_EXTI_Callback+0x38>)
 800a33e:	2201      	movs	r2, #1
 800a340:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800a342:	2000      	movs	r0, #0
 800a344:	f000 ff98 	bl	800b278 <sen5x_Set_sen5x_state>
    }
  }
}
 800a348:	46c0      	nop			@ (mov r8, r8)
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b002      	add	sp, #8
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000da4 	.word	0x20000da4

0800a354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800a358:	f005 f9d4 	bl	800f704 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a35c:	b672      	cpsid	i
}
 800a35e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800a360:	4a05      	ldr	r2, [pc, #20]	@ (800a378 <Error_Handler+0x24>)
 800a362:	4b06      	ldr	r3, [pc, #24]	@ (800a37c <Error_Handler+0x28>)
 800a364:	0019      	movs	r1, r3
 800a366:	2001      	movs	r0, #1
 800a368:	f006 fa5a 	bl	8010820 <CreateLine>

    HAL_Delay(2500);
 800a36c:	4b04      	ldr	r3, [pc, #16]	@ (800a380 <Error_Handler+0x2c>)
 800a36e:	0018      	movs	r0, r3
 800a370:	f006 feac 	bl	80110cc <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800a374:	46c0      	nop			@ (mov r8, r8)
 800a376:	e7f3      	b.n	800a360 <Error_Handler+0xc>
 800a378:	080278b0 	.word	0x080278b0
 800a37c:	0802779c 	.word	0x0802779c
 800a380:	000009c4 	.word	0x000009c4

0800a384 <testInit>:
static uint8_t SGPstate;
static uint8_t HIDSstate;
static uint8_t AHTstate;
static uint8_t BMPstate;

void testInit(){
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800a388:	4b13      	ldr	r3, [pc, #76]	@ (800a3d8 <testInit+0x54>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800a38e:	4b12      	ldr	r3, [pc, #72]	@ (800a3d8 <testInit+0x54>)
 800a390:	2200      	movs	r2, #0
 800a392:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800a394:	4b10      	ldr	r3, [pc, #64]	@ (800a3d8 <testInit+0x54>)
 800a396:	2200      	movs	r2, #0
 800a398:	709a      	strb	r2, [r3, #2]
  SensorProbe.BMP280_Present = false;
 800a39a:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d8 <testInit+0x54>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	70da      	strb	r2, [r3, #3]
  SensorProbe.PM_Present = false;
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d8 <testInit+0x54>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	711a      	strb	r2, [r3, #4]
  SensorProbe.MIC_Present = false;
 800a3a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d8 <testInit+0x54>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	715a      	strb	r2, [r3, #5]
  SensorProbe.ESP_Present = false;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <testInit+0x54>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	719a      	strb	r2, [r3, #6]
  SensorProbe.SGP_Enabled = false;
 800a3b2:	4b09      	ldr	r3, [pc, #36]	@ (800a3d8 <testInit+0x54>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	71da      	strb	r2, [r3, #7]
  Sensor.HT_measurementEnabled = true;
 800a3b8:	4b08      	ldr	r3, [pc, #32]	@ (800a3dc <testInit+0x58>)
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800a3be:	4b07      	ldr	r3, [pc, #28]	@ (800a3dc <testInit+0x58>)
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800a3c4:	4b05      	ldr	r3, [pc, #20]	@ (800a3dc <testInit+0x58>)
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800a3ca:	4b04      	ldr	r3, [pc, #16]	@ (800a3dc <testInit+0x58>)
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	70da      	strb	r2, [r3, #3]
}
 800a3d0:	46c0      	nop			@ (mov r8, r8)
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	46c0      	nop			@ (mov r8, r8)
 800a3d8:	20000dac 	.word	0x20000dac
 800a3dc:	20000da4 	.word	0x20000da4

0800a3e0 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800a3e4:	4b02      	ldr	r3, [pc, #8]	@ (800a3f0 <GetPMSensorPresence+0x10>)
 800a3e6:	791b      	ldrb	r3, [r3, #4]
}
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	46c0      	nop			@ (mov r8, r8)
 800a3f0:	20000dac 	.word	0x20000dac

0800a3f4 <DisablePMSensor>:

void DisablePMSensor() {
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800a3f8:	4b02      	ldr	r3, [pc, #8]	@ (800a404 <DisablePMSensor+0x10>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	711a      	strb	r2, [r3, #4]
}
 800a3fe:	46c0      	nop			@ (mov r8, r8)
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20000dac 	.word	0x20000dac

0800a408 <IsBMP280SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsBMP280SensorPresent() {
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800a40c:	4b02      	ldr	r3, [pc, #8]	@ (800a418 <IsBMP280SensorPresent+0x10>)
 800a40e:	78db      	ldrb	r3, [r3, #3]
}
 800a410:	0018      	movs	r0, r3
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	46c0      	nop			@ (mov r8, r8)
 800a418:	20000dac 	.word	0x20000dac

0800a41c <IsSGPPresent>:

bool IsSGPPresent() {
 800a41c:	b580      	push	{r7, lr}
 800a41e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800a420:	4b02      	ldr	r3, [pc, #8]	@ (800a42c <IsSGPPresent+0x10>)
 800a422:	785b      	ldrb	r3, [r3, #1]
}
 800a424:	0018      	movs	r0, r3
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	46c0      	nop			@ (mov r8, r8)
 800a42c:	20000dac 	.word	0x20000dac

0800a430 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	0002      	movs	r2, r0
 800a438:	1dfb      	adds	r3, r7, #7
 800a43a:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800a43c:	4b0b      	ldr	r3, [pc, #44]	@ (800a46c <SetVOCSensorDIS_ENA+0x3c>)
 800a43e:	1dfa      	adds	r2, r7, #7
 800a440:	7812      	ldrb	r2, [r2, #0]
 800a442:	71da      	strb	r2, [r3, #7]
  Sensor.VOC_measurementEnabled = setting;
 800a444:	4b0a      	ldr	r3, [pc, #40]	@ (800a470 <SetVOCSensorDIS_ENA+0x40>)
 800a446:	1dfa      	adds	r2, r7, #7
 800a448:	7812      	ldrb	r2, [r2, #0]
 800a44a:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800a44c:	1dfb      	adds	r3, r7, #7
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <SetVOCSensorDIS_ENA+0x28>
 800a454:	4b07      	ldr	r3, [pc, #28]	@ (800a474 <SetVOCSensorDIS_ENA+0x44>)
 800a456:	e000      	b.n	800a45a <SetVOCSensorDIS_ENA+0x2a>
 800a458:	4b07      	ldr	r3, [pc, #28]	@ (800a478 <SetVOCSensorDIS_ENA+0x48>)
 800a45a:	4a08      	ldr	r2, [pc, #32]	@ (800a47c <SetVOCSensorDIS_ENA+0x4c>)
 800a45c:	4908      	ldr	r1, [pc, #32]	@ (800a480 <SetVOCSensorDIS_ENA+0x50>)
 800a45e:	2003      	movs	r0, #3
 800a460:	f006 f9de 	bl	8010820 <CreateLine>
}
 800a464:	46c0      	nop			@ (mov r8, r8)
 800a466:	46bd      	mov	sp, r7
 800a468:	b002      	add	sp, #8
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20000dac 	.word	0x20000dac
 800a470:	20000da4 	.word	0x20000da4
 800a474:	080278dc 	.word	0x080278dc
 800a478:	080278e4 	.word	0x080278e4
 800a47c:	080278f0 	.word	0x080278f0
 800a480:	08027904 	.word	0x08027904

0800a484 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800a488:	4b02      	ldr	r3, [pc, #8]	@ (800a494 <IsPMSensorEnabled+0x10>)
 800a48a:	789b      	ldrb	r3, [r3, #2]
}
 800a48c:	0018      	movs	r0, r3
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	46c0      	nop			@ (mov r8, r8)
 800a494:	20000da4 	.word	0x20000da4

0800a498 <SetVOCSensorStatus>:

void SetBMP280SensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	0002      	movs	r2, r0
 800a4a0:	1dfb      	adds	r3, r7, #7
 800a4a2:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800a4a4:	4b05      	ldr	r3, [pc, #20]	@ (800a4bc <SetVOCSensorStatus+0x24>)
 800a4a6:	79db      	ldrb	r3, [r3, #7]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d003      	beq.n	800a4b4 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800a4ac:	4b04      	ldr	r3, [pc, #16]	@ (800a4c0 <SetVOCSensorStatus+0x28>)
 800a4ae:	1dfa      	adds	r2, r7, #7
 800a4b0:	7812      	ldrb	r2, [r2, #0]
 800a4b2:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800a4b4:	46c0      	nop			@ (mov r8, r8)
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	b002      	add	sp, #8
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20000dac 	.word	0x20000dac
 800a4c0:	20000da4 	.word	0x20000da4

0800a4c4 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	0002      	movs	r2, r0
 800a4cc:	1dfb      	adds	r3, r7, #7
 800a4ce:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800a4d0:	4b03      	ldr	r3, [pc, #12]	@ (800a4e0 <SetPMSensorStatus+0x1c>)
 800a4d2:	1dfa      	adds	r2, r7, #7
 800a4d4:	7812      	ldrb	r2, [r2, #0]
 800a4d6:	709a      	strb	r2, [r3, #2]
}
 800a4d8:	46c0      	nop			@ (mov r8, r8)
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b002      	add	sp, #8
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	20000da4 	.word	0x20000da4

0800a4e4 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800a4e8:	4b02      	ldr	r3, [pc, #8]	@ (800a4f4 <SetESPMeasurementDone+0x10>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	719a      	strb	r2, [r3, #6]
}
 800a4ee:	46c0      	nop			@ (mov r8, r8)
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20000dac 	.word	0x20000dac

0800a4f8 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
  testInit();
 800a506:	f7ff ff3d 	bl	800a384 <testInit>
  I2CSensors_Init(sensorI2C);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	0018      	movs	r0, r3
 800a50e:	f7fb fdf1 	bl	80060f4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800a512:	f006 fbb7 	bl	8010c84 <HIDS_DeviceConnected>
 800a516:	0003      	movs	r3, r0
 800a518:	001a      	movs	r2, r3
 800a51a:	2301      	movs	r3, #1
 800a51c:	4053      	eors	r3, r2
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00c      	beq.n	800a53e <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800a524:	4aaa      	ldr	r2, [pc, #680]	@ (800a7d0 <Device_Init+0x2d8>)
 800a526:	4bab      	ldr	r3, [pc, #684]	@ (800a7d4 <Device_Init+0x2dc>)
 800a528:	0019      	movs	r1, r3
 800a52a:	2001      	movs	r0, #1
 800a52c:	f006 f978 	bl	8010820 <CreateLine>
     SensorProbe.HT_Present = false;
 800a530:	4ba9      	ldr	r3, [pc, #676]	@ (800a7d8 <Device_Init+0x2e0>)
 800a532:	2200      	movs	r2, #0
 800a534:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800a536:	4ba9      	ldr	r3, [pc, #676]	@ (800a7dc <Device_Init+0x2e4>)
 800a538:	2200      	movs	r2, #0
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	e008      	b.n	800a550 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800a53e:	4ba6      	ldr	r3, [pc, #664]	@ (800a7d8 <Device_Init+0x2e0>)
 800a540:	2201      	movs	r2, #1
 800a542:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800a544:	4aa6      	ldr	r2, [pc, #664]	@ (800a7e0 <Device_Init+0x2e8>)
 800a546:	4ba7      	ldr	r3, [pc, #668]	@ (800a7e4 <Device_Init+0x2ec>)
 800a548:	0019      	movs	r1, r3
 800a54a:	2003      	movs	r0, #3
 800a54c:	f006 f968 	bl	8010820 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800a550:	f7fd fd82 	bl	8008058 <AHT20_DeviceConnected>
 800a554:	0003      	movs	r3, r0
 800a556:	001a      	movs	r2, r3
 800a558:	2301      	movs	r3, #1
 800a55a:	4053      	eors	r3, r2
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00c      	beq.n	800a57c <Device_Init+0x84>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800a562:	4aa1      	ldr	r2, [pc, #644]	@ (800a7e8 <Device_Init+0x2f0>)
 800a564:	4b9b      	ldr	r3, [pc, #620]	@ (800a7d4 <Device_Init+0x2dc>)
 800a566:	0019      	movs	r1, r3
 800a568:	2001      	movs	r0, #1
 800a56a:	f006 f959 	bl	8010820 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800a56e:	4b9a      	ldr	r3, [pc, #616]	@ (800a7d8 <Device_Init+0x2e0>)
 800a570:	2200      	movs	r2, #0
 800a572:	709a      	strb	r2, [r3, #2]
     Sensor.AHT20_measurementEnabled = false;
 800a574:	4b99      	ldr	r3, [pc, #612]	@ (800a7dc <Device_Init+0x2e4>)
 800a576:	2200      	movs	r2, #0
 800a578:	711a      	strb	r2, [r3, #4]
 800a57a:	e008      	b.n	800a58e <Device_Init+0x96>
  }else {
    SensorProbe.AHT20_Present = true;
 800a57c:	4b96      	ldr	r3, [pc, #600]	@ (800a7d8 <Device_Init+0x2e0>)
 800a57e:	2201      	movs	r2, #1
 800a580:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800a582:	4a9a      	ldr	r2, [pc, #616]	@ (800a7ec <Device_Init+0x2f4>)
 800a584:	4b97      	ldr	r3, [pc, #604]	@ (800a7e4 <Device_Init+0x2ec>)
 800a586:	0019      	movs	r1, r3
 800a588:	2003      	movs	r0, #3
 800a58a:	f006 f949 	bl	8010820 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800a58e:	f7fe fa2f 	bl	80089f0 <BMP280_DeviceConnected>
 800a592:	0003      	movs	r3, r0
 800a594:	001a      	movs	r2, r3
 800a596:	2301      	movs	r3, #1
 800a598:	4053      	eors	r3, r2
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00c      	beq.n	800a5ba <Device_Init+0xc2>
     Error("Air pressure / Temperature sensor NOT connected!");
 800a5a0:	4a93      	ldr	r2, [pc, #588]	@ (800a7f0 <Device_Init+0x2f8>)
 800a5a2:	4b8c      	ldr	r3, [pc, #560]	@ (800a7d4 <Device_Init+0x2dc>)
 800a5a4:	0019      	movs	r1, r3
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	f006 f93a 	bl	8010820 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800a5ac:	4b8a      	ldr	r3, [pc, #552]	@ (800a7d8 <Device_Init+0x2e0>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	70da      	strb	r2, [r3, #3]
     Sensor.BMP280_measurementEnabled = false;
 800a5b2:	4b8a      	ldr	r3, [pc, #552]	@ (800a7dc <Device_Init+0x2e4>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	715a      	strb	r2, [r3, #5]
 800a5b8:	e008      	b.n	800a5cc <Device_Init+0xd4>
  }else {
    SensorProbe.BMP280_Present = true;
 800a5ba:	4b87      	ldr	r3, [pc, #540]	@ (800a7d8 <Device_Init+0x2e0>)
 800a5bc:	2201      	movs	r2, #1
 800a5be:	70da      	strb	r2, [r3, #3]
    Debug("Air pressure / Temperature sensor initialised.");
 800a5c0:	4a8c      	ldr	r2, [pc, #560]	@ (800a7f4 <Device_Init+0x2fc>)
 800a5c2:	4b88      	ldr	r3, [pc, #544]	@ (800a7e4 <Device_Init+0x2ec>)
 800a5c4:	0019      	movs	r1, r3
 800a5c6:	2003      	movs	r0, #3
 800a5c8:	f006 f92a 	bl	8010820 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800a5cc:	f003 fbd0 	bl	800dd70 <SGP_DeviceConnected>
 800a5d0:	0003      	movs	r3, r0
 800a5d2:	001a      	movs	r2, r3
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	4053      	eors	r3, r2
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00c      	beq.n	800a5f8 <Device_Init+0x100>
    SensorProbe.VOC_Present = false;
 800a5de:	4b7e      	ldr	r3, [pc, #504]	@ (800a7d8 <Device_Init+0x2e0>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800a5e4:	4a84      	ldr	r2, [pc, #528]	@ (800a7f8 <Device_Init+0x300>)
 800a5e6:	4b7b      	ldr	r3, [pc, #492]	@ (800a7d4 <Device_Init+0x2dc>)
 800a5e8:	0019      	movs	r1, r3
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	f006 f918 	bl	8010820 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800a5f0:	4b7a      	ldr	r3, [pc, #488]	@ (800a7dc <Device_Init+0x2e4>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	705a      	strb	r2, [r3, #1]
 800a5f6:	e00b      	b.n	800a610 <Device_Init+0x118>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800a5f8:	4b77      	ldr	r3, [pc, #476]	@ (800a7d8 <Device_Init+0x2e0>)
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	71da      	strb	r2, [r3, #7]
    SensorProbe.VOC_Present = true;
 800a5fe:	4b76      	ldr	r3, [pc, #472]	@ (800a7d8 <Device_Init+0x2e0>)
 800a600:	2201      	movs	r2, #1
 800a602:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800a604:	4a7d      	ldr	r2, [pc, #500]	@ (800a7fc <Device_Init+0x304>)
 800a606:	4b77      	ldr	r3, [pc, #476]	@ (800a7e4 <Device_Init+0x2ec>)
 800a608:	0019      	movs	r1, r3
 800a60a:	2003      	movs	r0, #3
 800a60c:	f006 f908 	bl	8010820 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800a610:	4b71      	ldr	r3, [pc, #452]	@ (800a7d8 <Device_Init+0x2e0>)
 800a612:	785b      	ldrb	r3, [r3, #1]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d009      	beq.n	800a62c <Device_Init+0x134>
 800a618:	4b6f      	ldr	r3, [pc, #444]	@ (800a7d8 <Device_Init+0x2e0>)
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d005      	beq.n	800a62c <Device_Init+0x134>
    SetDBLED(false, true, false);
 800a620:	2200      	movs	r2, #0
 800a622:	2101      	movs	r1, #1
 800a624:	2000      	movs	r0, #0
 800a626:	f004 fec7 	bl	800f3b8 <SetDBLED>
 800a62a:	e018      	b.n	800a65e <Device_Init+0x166>
  }
  else{
    SetDBLED(true, false, false);
 800a62c:	2200      	movs	r2, #0
 800a62e:	2100      	movs	r1, #0
 800a630:	2001      	movs	r0, #1
 800a632:	f004 fec1 	bl	800f3b8 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800a636:	4b72      	ldr	r3, [pc, #456]	@ (800a800 <Device_Init+0x308>)
 800a638:	2200      	movs	r2, #0
 800a63a:	2101      	movs	r1, #1
 800a63c:	0018      	movs	r0, r3
 800a63e:	f007 ffcc 	bl	80125da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800a642:	2380      	movs	r3, #128	@ 0x80
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	486e      	ldr	r0, [pc, #440]	@ (800a800 <Device_Init+0x308>)
 800a648:	2201      	movs	r2, #1
 800a64a:	0019      	movs	r1, r3
 800a64c:	f007 ffc5 	bl	80125da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800a650:	2380      	movs	r3, #128	@ 0x80
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	486a      	ldr	r0, [pc, #424]	@ (800a800 <Device_Init+0x308>)
 800a656:	2201      	movs	r2, #1
 800a658:	0019      	movs	r1, r3
 800a65a:	f007 ffbe 	bl	80125da <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800a65e:	4b5f      	ldr	r3, [pc, #380]	@ (800a7dc <Device_Init+0x2e4>)
 800a660:	78db      	ldrb	r3, [r3, #3]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d028      	beq.n	800a6b8 <Device_Init+0x1c0>
    Info("Device_Init calls enableMicrophone");
 800a666:	4a67      	ldr	r2, [pc, #412]	@ (800a804 <Device_Init+0x30c>)
 800a668:	4b67      	ldr	r3, [pc, #412]	@ (800a808 <Device_Init+0x310>)
 800a66a:	0019      	movs	r1, r3
 800a66c:	2002      	movs	r0, #2
 800a66e:	f006 f8d7 	bl	8010820 <CreateLine>
    if (!enableMicrophone(true)) {
 800a672:	2001      	movs	r0, #1
 800a674:	f003 ff9e 	bl	800e5b4 <enableMicrophone>
 800a678:	0003      	movs	r3, r0
 800a67a:	001a      	movs	r2, r3
 800a67c:	2301      	movs	r3, #1
 800a67e:	4053      	eors	r3, r2
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00c      	beq.n	800a6a0 <Device_Init+0x1a8>
      Error("Microphone device not connected! DMA Error.");
 800a686:	4a61      	ldr	r2, [pc, #388]	@ (800a80c <Device_Init+0x314>)
 800a688:	4b52      	ldr	r3, [pc, #328]	@ (800a7d4 <Device_Init+0x2dc>)
 800a68a:	0019      	movs	r1, r3
 800a68c:	2001      	movs	r0, #1
 800a68e:	f006 f8c7 	bl	8010820 <CreateLine>
      SensorProbe.MIC_Present = false;
 800a692:	4b51      	ldr	r3, [pc, #324]	@ (800a7d8 <Device_Init+0x2e0>)
 800a694:	2200      	movs	r2, #0
 800a696:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = false;
 800a698:	4b50      	ldr	r3, [pc, #320]	@ (800a7dc <Device_Init+0x2e4>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	70da      	strb	r2, [r3, #3]
 800a69e:	e00b      	b.n	800a6b8 <Device_Init+0x1c0>
    }
    else{
      SensorProbe.MIC_Present = true;
 800a6a0:	4b4d      	ldr	r3, [pc, #308]	@ (800a7d8 <Device_Init+0x2e0>)
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = true;
 800a6a6:	4b4d      	ldr	r3, [pc, #308]	@ (800a7dc <Device_Init+0x2e4>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800a6ac:	4a58      	ldr	r2, [pc, #352]	@ (800a810 <Device_Init+0x318>)
 800a6ae:	4b4d      	ldr	r3, [pc, #308]	@ (800a7e4 <Device_Init+0x2ec>)
 800a6b0:	0019      	movs	r1, r3
 800a6b2:	2003      	movs	r0, #3
 800a6b4:	f006 f8b4 	bl	8010820 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800a6b8:	f000 fed2 	bl	800b460 <probe_sen5x>
 800a6bc:	1e03      	subs	r3, r0, #0
 800a6be:	d122      	bne.n	800a706 <Device_Init+0x20e>
    Debug("PM sensor initialised.");
 800a6c0:	4a54      	ldr	r2, [pc, #336]	@ (800a814 <Device_Init+0x31c>)
 800a6c2:	4b48      	ldr	r3, [pc, #288]	@ (800a7e4 <Device_Init+0x2ec>)
 800a6c4:	0019      	movs	r1, r3
 800a6c6:	2003      	movs	r0, #3
 800a6c8:	f006 f8aa 	bl	8010820 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800a6cc:	4b42      	ldr	r3, [pc, #264]	@ (800a7d8 <Device_Init+0x2e0>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	711a      	strb	r2, [r3, #4]
    Sensor.PM_measurementEnabled = true;
 800a6d2:	4b42      	ldr	r3, [pc, #264]	@ (800a7dc <Device_Init+0x2e4>)
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800a6d8:	4b4f      	ldr	r3, [pc, #316]	@ (800a818 <Device_Init+0x320>)
 800a6da:	791b      	ldrb	r3, [r3, #4]
 800a6dc:	2b34      	cmp	r3, #52	@ 0x34
 800a6de:	d003      	beq.n	800a6e8 <Device_Init+0x1f0>
 800a6e0:	4b4d      	ldr	r3, [pc, #308]	@ (800a818 <Device_Init+0x320>)
 800a6e2:	791b      	ldrb	r3, [r3, #4]
 800a6e4:	2b35      	cmp	r3, #53	@ 0x35
 800a6e6:	d11c      	bne.n	800a722 <Device_Init+0x22a>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800a6e8:	4a4c      	ldr	r2, [pc, #304]	@ (800a81c <Device_Init+0x324>)
 800a6ea:	4b47      	ldr	r3, [pc, #284]	@ (800a808 <Device_Init+0x310>)
 800a6ec:	0019      	movs	r1, r3
 800a6ee:	2002      	movs	r0, #2
 800a6f0:	f006 f896 	bl	8010820 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800a6f4:	4b39      	ldr	r3, [pc, #228]	@ (800a7dc <Device_Init+0x2e4>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800a6fa:	4b37      	ldr	r3, [pc, #220]	@ (800a7d8 <Device_Init+0x2e0>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	71da      	strb	r2, [r3, #7]
      SGP_SoftReset();
 800a700:	f003 fd1a 	bl	800e138 <SGP_SoftReset>
 800a704:	e00d      	b.n	800a722 <Device_Init+0x22a>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800a706:	f000 fe75 	bl	800b3f4 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800a70a:	4a45      	ldr	r2, [pc, #276]	@ (800a820 <Device_Init+0x328>)
 800a70c:	4b35      	ldr	r3, [pc, #212]	@ (800a7e4 <Device_Init+0x2ec>)
 800a70e:	0019      	movs	r1, r3
 800a710:	2003      	movs	r0, #3
 800a712:	f006 f885 	bl	8010820 <CreateLine>
    SensorProbe.PM_Present = false;
 800a716:	4b30      	ldr	r3, [pc, #192]	@ (800a7d8 <Device_Init+0x2e0>)
 800a718:	2200      	movs	r2, #0
 800a71a:	711a      	strb	r2, [r3, #4]
    Sensor.PM_measurementEnabled = false;
 800a71c:	4b2f      	ldr	r3, [pc, #188]	@ (800a7dc <Device_Init+0x2e4>)
 800a71e:	2200      	movs	r2, #0
 800a720:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800a722:	4b2d      	ldr	r3, [pc, #180]	@ (800a7d8 <Device_Init+0x2e0>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d001      	beq.n	800a72e <Device_Init+0x236>
 800a72a:	4b3e      	ldr	r3, [pc, #248]	@ (800a824 <Device_Init+0x32c>)
 800a72c:	e000      	b.n	800a730 <Device_Init+0x238>
 800a72e:	4b3e      	ldr	r3, [pc, #248]	@ (800a828 <Device_Init+0x330>)
 800a730:	4a3e      	ldr	r2, [pc, #248]	@ (800a82c <Device_Init+0x334>)
 800a732:	4935      	ldr	r1, [pc, #212]	@ (800a808 <Device_Init+0x310>)
 800a734:	2002      	movs	r0, #2
 800a736:	f006 f873 	bl	8010820 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800a73a:	4b27      	ldr	r3, [pc, #156]	@ (800a7d8 <Device_Init+0x2e0>)
 800a73c:	785b      	ldrb	r3, [r3, #1]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <Device_Init+0x24e>
 800a742:	4b38      	ldr	r3, [pc, #224]	@ (800a824 <Device_Init+0x32c>)
 800a744:	e000      	b.n	800a748 <Device_Init+0x250>
 800a746:	4b38      	ldr	r3, [pc, #224]	@ (800a828 <Device_Init+0x330>)
 800a748:	4a39      	ldr	r2, [pc, #228]	@ (800a830 <Device_Init+0x338>)
 800a74a:	492f      	ldr	r1, [pc, #188]	@ (800a808 <Device_Init+0x310>)
 800a74c:	2002      	movs	r0, #2
 800a74e:	f006 f867 	bl	8010820 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800a752:	4b21      	ldr	r3, [pc, #132]	@ (800a7d8 <Device_Init+0x2e0>)
 800a754:	789b      	ldrb	r3, [r3, #2]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <Device_Init+0x266>
 800a75a:	4b32      	ldr	r3, [pc, #200]	@ (800a824 <Device_Init+0x32c>)
 800a75c:	e000      	b.n	800a760 <Device_Init+0x268>
 800a75e:	4b32      	ldr	r3, [pc, #200]	@ (800a828 <Device_Init+0x330>)
 800a760:	4a34      	ldr	r2, [pc, #208]	@ (800a834 <Device_Init+0x33c>)
 800a762:	4929      	ldr	r1, [pc, #164]	@ (800a808 <Device_Init+0x310>)
 800a764:	2002      	movs	r0, #2
 800a766:	f006 f85b 	bl	8010820 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800a76a:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d8 <Device_Init+0x2e0>)
 800a76c:	78db      	ldrb	r3, [r3, #3]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <Device_Init+0x27e>
 800a772:	4b2c      	ldr	r3, [pc, #176]	@ (800a824 <Device_Init+0x32c>)
 800a774:	e000      	b.n	800a778 <Device_Init+0x280>
 800a776:	4b2c      	ldr	r3, [pc, #176]	@ (800a828 <Device_Init+0x330>)
 800a778:	4a2f      	ldr	r2, [pc, #188]	@ (800a838 <Device_Init+0x340>)
 800a77a:	4923      	ldr	r1, [pc, #140]	@ (800a808 <Device_Init+0x310>)
 800a77c:	2002      	movs	r0, #2
 800a77e:	f006 f84f 	bl	8010820 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800a782:	4b15      	ldr	r3, [pc, #84]	@ (800a7d8 <Device_Init+0x2e0>)
 800a784:	791b      	ldrb	r3, [r3, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <Device_Init+0x296>
 800a78a:	4b26      	ldr	r3, [pc, #152]	@ (800a824 <Device_Init+0x32c>)
 800a78c:	e000      	b.n	800a790 <Device_Init+0x298>
 800a78e:	4b26      	ldr	r3, [pc, #152]	@ (800a828 <Device_Init+0x330>)
 800a790:	4a2a      	ldr	r2, [pc, #168]	@ (800a83c <Device_Init+0x344>)
 800a792:	491d      	ldr	r1, [pc, #116]	@ (800a808 <Device_Init+0x310>)
 800a794:	2002      	movs	r0, #2
 800a796:	f006 f843 	bl	8010820 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800a79a:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d8 <Device_Init+0x2e0>)
 800a79c:	795b      	ldrb	r3, [r3, #5]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <Device_Init+0x2ae>
 800a7a2:	4b20      	ldr	r3, [pc, #128]	@ (800a824 <Device_Init+0x32c>)
 800a7a4:	e000      	b.n	800a7a8 <Device_Init+0x2b0>
 800a7a6:	4b20      	ldr	r3, [pc, #128]	@ (800a828 <Device_Init+0x330>)
 800a7a8:	4a25      	ldr	r2, [pc, #148]	@ (800a840 <Device_Init+0x348>)
 800a7aa:	4917      	ldr	r1, [pc, #92]	@ (800a808 <Device_Init+0x310>)
 800a7ac:	2002      	movs	r0, #2
 800a7ae:	f006 f837 	bl	8010820 <CreateLine>
  ESP_Init(espUart);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f7f9 f91f 	bl	80039f8 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800a7ba:	4a22      	ldr	r2, [pc, #136]	@ (800a844 <Device_Init+0x34c>)
 800a7bc:	4b09      	ldr	r3, [pc, #36]	@ (800a7e4 <Device_Init+0x2ec>)
 800a7be:	0019      	movs	r1, r3
 800a7c0:	2003      	movs	r0, #3
 800a7c2:	f006 f82d 	bl	8010820 <CreateLine>
}
 800a7c6:	46c0      	nop			@ (mov r8, r8)
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	b004      	add	sp, #16
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	46c0      	nop			@ (mov r8, r8)
 800a7d0:	08027908 	.word	0x08027908
 800a7d4:	08027938 	.word	0x08027938
 800a7d8:	20000dac 	.word	0x20000dac
 800a7dc:	20000da4 	.word	0x20000da4
 800a7e0:	0802793c 	.word	0x0802793c
 800a7e4:	08027904 	.word	0x08027904
 800a7e8:	08027968 	.word	0x08027968
 800a7ec:	0802799c 	.word	0x0802799c
 800a7f0:	080279d0 	.word	0x080279d0
 800a7f4:	08027a04 	.word	0x08027a04
 800a7f8:	08027a34 	.word	0x08027a34
 800a7fc:	08027a50 	.word	0x08027a50
 800a800:	50000400 	.word	0x50000400
 800a804:	08027a68 	.word	0x08027a68
 800a808:	08027a8c 	.word	0x08027a8c
 800a80c:	08027a90 	.word	0x08027a90
 800a810:	08027abc 	.word	0x08027abc
 800a814:	08027ae8 	.word	0x08027ae8
 800a818:	20000e48 	.word	0x20000e48
 800a81c:	08027b00 	.word	0x08027b00
 800a820:	08027b50 	.word	0x08027b50
 800a824:	08027b74 	.word	0x08027b74
 800a828:	08027b78 	.word	0x08027b78
 800a82c:	08027b7c 	.word	0x08027b7c
 800a830:	08027b98 	.word	0x08027b98
 800a834:	08027bb4 	.word	0x08027bb4
 800a838:	08027bd4 	.word	0x08027bd4
 800a83c:	08027bf4 	.word	0x08027bf4
 800a840:	08027c10 	.word	0x08027c10
 800a844:	08027c2c 	.word	0x08027c2c

0800a848 <Device_Test>:

void Device_Test(){
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800a84c:	4b34      	ldr	r3, [pc, #208]	@ (800a920 <Device_Test+0xd8>)
 800a84e:	795b      	ldrb	r3, [r3, #5]
 800a850:	2201      	movs	r2, #1
 800a852:	4053      	eors	r3, r2
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	d027      	beq.n	800a8aa <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800a85a:	f000 fb31 	bl	800aec0 <MIC_TestMeasurementDone>
 800a85e:	1e03      	subs	r3, r0, #0
 800a860:	d011      	beq.n	800a886 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800a862:	4b2f      	ldr	r3, [pc, #188]	@ (800a920 <Device_Test+0xd8>)
 800a864:	2201      	movs	r2, #1
 800a866:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = true;
 800a868:	4b2e      	ldr	r3, [pc, #184]	@ (800a924 <Device_Test+0xdc>)
 800a86a:	2201      	movs	r2, #1
 800a86c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800a86e:	f004 fd27 	bl	800f2c0 <Calculate_LED_ON>
 800a872:	0003      	movs	r3, r0
 800a874:	0019      	movs	r1, r3
 800a876:	23fa      	movs	r3, #250	@ 0xfa
 800a878:	011a      	lsls	r2, r3, #4
 800a87a:	23fa      	movs	r3, #250	@ 0xfa
 800a87c:	011b      	lsls	r3, r3, #4
 800a87e:	0018      	movs	r0, r3
 800a880:	f004 fd66 	bl	800f350 <SetStatusLED>
 800a884:	e011      	b.n	800a8aa <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800a886:	f003 fe71 	bl	800e56c <micSettlingComplete>
 800a88a:	1e03      	subs	r3, r0, #0
 800a88c:	d00d      	beq.n	800a8aa <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800a88e:	4b25      	ldr	r3, [pc, #148]	@ (800a924 <Device_Test+0xdc>)
 800a890:	2201      	movs	r2, #1
 800a892:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800a894:	f004 fd14 	bl	800f2c0 <Calculate_LED_ON>
 800a898:	0003      	movs	r3, r0
 800a89a:	0018      	movs	r0, r3
 800a89c:	23fa      	movs	r3, #250	@ 0xfa
 800a89e:	011a      	lsls	r2, r3, #4
 800a8a0:	23fa      	movs	r3, #250	@ 0xfa
 800a8a2:	011b      	lsls	r3, r3, #4
 800a8a4:	0019      	movs	r1, r3
 800a8a6:	f004 fd53 	bl	800f350 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800a8aa:	4b1d      	ldr	r3, [pc, #116]	@ (800a920 <Device_Test+0xd8>)
 800a8ac:	799b      	ldrb	r3, [r3, #6]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	4053      	eors	r3, r2
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800a8b8:	f7fa fe56 	bl	8005568 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800a8bc:	4b18      	ldr	r3, [pc, #96]	@ (800a920 <Device_Test+0xd8>)
 800a8be:	799b      	ldrb	r3, [r3, #6]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d003      	beq.n	800a8cc <Device_Test+0x84>
 800a8c4:	4b16      	ldr	r3, [pc, #88]	@ (800a920 <Device_Test+0xd8>)
 800a8c6:	795b      	ldrb	r3, [r3, #5]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <Device_Test+0x92>
 800a8cc:	4b16      	ldr	r3, [pc, #88]	@ (800a928 <Device_Test+0xe0>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	f005 ff4f 	bl	8010774 <TimestampIsReached>
 800a8d6:	1e03      	subs	r3, r0, #0
 800a8d8:	d01f      	beq.n	800a91a <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800a8da:	4b11      	ldr	r3, [pc, #68]	@ (800a920 <Device_Test+0xd8>)
 800a8dc:	799b      	ldrb	r3, [r3, #6]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <Device_Test+0x9e>
 800a8e2:	4b12      	ldr	r3, [pc, #72]	@ (800a92c <Device_Test+0xe4>)
 800a8e4:	e000      	b.n	800a8e8 <Device_Test+0xa0>
 800a8e6:	4b12      	ldr	r3, [pc, #72]	@ (800a930 <Device_Test+0xe8>)
 800a8e8:	4a12      	ldr	r2, [pc, #72]	@ (800a934 <Device_Test+0xec>)
 800a8ea:	4913      	ldr	r1, [pc, #76]	@ (800a938 <Device_Test+0xf0>)
 800a8ec:	2002      	movs	r0, #2
 800a8ee:	f005 ff97 	bl	8010820 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800a8f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a920 <Device_Test+0xd8>)
 800a8f4:	795b      	ldrb	r3, [r3, #5]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <Device_Test+0xb6>
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a92c <Device_Test+0xe4>)
 800a8fc:	e000      	b.n	800a900 <Device_Test+0xb8>
 800a8fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a930 <Device_Test+0xe8>)
 800a900:	4a0e      	ldr	r2, [pc, #56]	@ (800a93c <Device_Test+0xf4>)
 800a902:	490d      	ldr	r1, [pc, #52]	@ (800a938 <Device_Test+0xf0>)
 800a904:	2002      	movs	r0, #2
 800a906:	f005 ff8b 	bl	8010820 <CreateLine>
    Info("Test completed");
 800a90a:	4a0d      	ldr	r2, [pc, #52]	@ (800a940 <Device_Test+0xf8>)
 800a90c:	4b0a      	ldr	r3, [pc, #40]	@ (800a938 <Device_Test+0xf0>)
 800a90e:	0019      	movs	r1, r3
 800a910:	2002      	movs	r0, #2
 800a912:	f005 ff85 	bl	8010820 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800a916:	f7ff f96b 	bl	8009bf0 <SetTestDone>
  }
}
 800a91a:	46c0      	nop			@ (mov r8, r8)
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20000dac 	.word	0x20000dac
 800a924:	20000da4 	.word	0x20000da4
 800a928:	20000d9c 	.word	0x20000d9c
 800a92c:	08027c50 	.word	0x08027c50
 800a930:	08027c58 	.word	0x08027c58
 800a934:	08027c60 	.word	0x08027c60
 800a938:	08027a8c 	.word	0x08027a8c
 800a93c:	08027c74 	.word	0x08027c74
 800a940:	08027c88 	.word	0x08027c88

0800a944 <AllDevicesReady>:

bool AllDevicesReady() {
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800a948:	4b31      	ldr	r3, [pc, #196]	@ (800aa10 <AllDevicesReady+0xcc>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	0018      	movs	r0, r3
 800a94e:	f005 ff11 	bl	8010774 <TimestampIsReached>
 800a952:	1e03      	subs	r3, r0, #0
 800a954:	d058      	beq.n	800aa08 <AllDevicesReady+0xc4>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800a956:	4b2f      	ldr	r3, [pc, #188]	@ (800aa14 <AllDevicesReady+0xd0>)
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b06      	cmp	r3, #6
 800a95c:	d102      	bne.n	800a964 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800a95e:	4b2e      	ldr	r3, [pc, #184]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]
    }
    if (AHTstate == AHT_STATE_WAIT) {
 800a964:	4b2d      	ldr	r3, [pc, #180]	@ (800aa1c <AllDevicesReady+0xd8>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	2b08      	cmp	r3, #8
 800a96a:	d102      	bne.n	800a972 <AllDevicesReady+0x2e>
      Sensor.AHT20_measurementEnabled = false;
 800a96c:	4b2a      	ldr	r3, [pc, #168]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a96e:	2200      	movs	r2, #0
 800a970:	711a      	strb	r2, [r3, #4]
    }
    if (BMPstate == BMP_STATE_WAIT) {
 800a972:	4b2b      	ldr	r3, [pc, #172]	@ (800aa20 <AllDevicesReady+0xdc>)
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b08      	cmp	r3, #8
 800a978:	d102      	bne.n	800a980 <AllDevicesReady+0x3c>
      Sensor.BMP280_measurementEnabled = false;
 800a97a:	4b27      	ldr	r3, [pc, #156]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	715a      	strb	r2, [r3, #5]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800a980:	4b28      	ldr	r3, [pc, #160]	@ (800aa24 <AllDevicesReady+0xe0>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b07      	cmp	r3, #7
 800a986:	d006      	beq.n	800a996 <AllDevicesReady+0x52>
 800a988:	4b27      	ldr	r3, [pc, #156]	@ (800aa28 <AllDevicesReady+0xe4>)
 800a98a:	79db      	ldrb	r3, [r3, #7]
 800a98c:	2201      	movs	r2, #1
 800a98e:	4053      	eors	r3, r2
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d002      	beq.n	800a99c <AllDevicesReady+0x58>
      Sensor.VOC_measurementEnabled = false;
 800a996:	4b20      	ldr	r3, [pc, #128]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a998:	2200      	movs	r2, #0
 800a99a:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800a99c:	4b23      	ldr	r3, [pc, #140]	@ (800aa2c <AllDevicesReady+0xe8>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d102      	bne.n	800a9aa <AllDevicesReady+0x66>
      Sensor.PM_measurementEnabled = false;
 800a9a4:	4b1c      	ldr	r3, [pc, #112]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800a9aa:	4b21      	ldr	r3, [pc, #132]	@ (800aa30 <AllDevicesReady+0xec>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d102      	bne.n	800a9b8 <AllDevicesReady+0x74>
      Sensor.MIC_measurementEnabled = false;
 800a9b2:	4b19      	ldr	r3, [pc, #100]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 800a9b8:	4b1e      	ldr	r3, [pc, #120]	@ (800aa34 <AllDevicesReady+0xf0>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b09      	cmp	r3, #9
 800a9be:	d123      	bne.n	800aa08 <AllDevicesReady+0xc4>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a9c0:	4b15      	ldr	r3, [pc, #84]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	4053      	eors	r3, r2
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d016      	beq.n	800a9fc <AllDevicesReady+0xb8>
 800a9ce:	4b12      	ldr	r3, [pc, #72]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	4053      	eors	r3, r2
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00f      	beq.n	800a9fc <AllDevicesReady+0xb8>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800a9dc:	4b0e      	ldr	r3, [pc, #56]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a9de:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	4053      	eors	r3, r2
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d008      	beq.n	800a9fc <AllDevicesReady+0xb8>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	@ (800aa18 <AllDevicesReady+0xd4>)
 800a9ec:	78db      	ldrb	r3, [r3, #3]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	4053      	eors	r3, r2
 800a9f2:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <AllDevicesReady+0xb8>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e000      	b.n	800a9fe <AllDevicesReady+0xba>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	1c1a      	adds	r2, r3, #0
 800aa00:	2301      	movs	r3, #1
 800aa02:	4013      	ands	r3, r2
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	e000      	b.n	800aa0a <AllDevicesReady+0xc6>
    }
  }
  return false;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20000d9c 	.word	0x20000d9c
 800aa14:	20000db6 	.word	0x20000db6
 800aa18:	20000da4 	.word	0x20000da4
 800aa1c:	20000db7 	.word	0x20000db7
 800aa20:	20000db8 	.word	0x20000db8
 800aa24:	20000db5 	.word	0x20000db5
 800aa28:	20000dac 	.word	0x20000dac
 800aa2c:	2000009d 	.word	0x2000009d
 800aa30:	20000d88 	.word	0x20000d88
 800aa34:	20000d89 	.word	0x20000d89

0800aa38 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800aa3c:	4b18      	ldr	r3, [pc, #96]	@ (800aaa0 <EnabledConnectedDevices+0x68>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800aa44:	4b17      	ldr	r3, [pc, #92]	@ (800aaa4 <EnabledConnectedDevices+0x6c>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800aa4a:	4b15      	ldr	r3, [pc, #84]	@ (800aaa0 <EnabledConnectedDevices+0x68>)
 800aa4c:	789b      	ldrb	r3, [r3, #2]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <EnabledConnectedDevices+0x20>
    Sensor.AHT20_measurementEnabled = true;
 800aa52:	4b14      	ldr	r3, [pc, #80]	@ (800aaa4 <EnabledConnectedDevices+0x6c>)
 800aa54:	2201      	movs	r2, #1
 800aa56:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800aa58:	4b11      	ldr	r3, [pc, #68]	@ (800aaa0 <EnabledConnectedDevices+0x68>)
 800aa5a:	78db      	ldrb	r3, [r3, #3]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <EnabledConnectedDevices+0x2e>
    Sensor.BMP280_measurementEnabled = true;
 800aa60:	4b10      	ldr	r3, [pc, #64]	@ (800aaa4 <EnabledConnectedDevices+0x6c>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	715a      	strb	r2, [r3, #5]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800aa66:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa0 <EnabledConnectedDevices+0x68>)
 800aa68:	785b      	ldrb	r3, [r3, #1]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d006      	beq.n	800aa7c <EnabledConnectedDevices+0x44>
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa0 <EnabledConnectedDevices+0x68>)
 800aa70:	79db      	ldrb	r3, [r3, #7]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d002      	beq.n	800aa7c <EnabledConnectedDevices+0x44>
    Sensor.VOC_measurementEnabled = true;
 800aa76:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa4 <EnabledConnectedDevices+0x6c>)
 800aa78:	2201      	movs	r2, #1
 800aa7a:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800aa7c:	4b08      	ldr	r3, [pc, #32]	@ (800aaa0 <EnabledConnectedDevices+0x68>)
 800aa7e:	791b      	ldrb	r3, [r3, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <EnabledConnectedDevices+0x52>
    Sensor.PM_measurementEnabled = true;
 800aa84:	4b07      	ldr	r3, [pc, #28]	@ (800aaa4 <EnabledConnectedDevices+0x6c>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800aa8a:	4b05      	ldr	r3, [pc, #20]	@ (800aaa0 <EnabledConnectedDevices+0x68>)
 800aa8c:	795b      	ldrb	r3, [r3, #5]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <EnabledConnectedDevices+0x60>
    Sensor.MIC_measurementEnabled = true;
 800aa92:	4b04      	ldr	r3, [pc, #16]	@ (800aaa4 <EnabledConnectedDevices+0x6c>)
 800aa94:	2201      	movs	r2, #1
 800aa96:	70da      	strb	r2, [r3, #3]
  }
}
 800aa98:	46c0      	nop			@ (mov r8, r8)
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	46c0      	nop			@ (mov r8, r8)
 800aaa0:	20000dac 	.word	0x20000dac
 800aaa4:	20000da4 	.word	0x20000da4

0800aaa8 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 800aaac:	4a0d      	ldr	r2, [pc, #52]	@ (800aae4 <DisableConnectedDevices+0x3c>)
 800aaae:	4b0e      	ldr	r3, [pc, #56]	@ (800aae8 <DisableConnectedDevices+0x40>)
 800aab0:	0019      	movs	r1, r3
 800aab2:	2003      	movs	r0, #3
 800aab4:	f005 feb4 	bl	8010820 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800aab8:	4b0c      	ldr	r3, [pc, #48]	@ (800aaec <DisableConnectedDevices+0x44>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800aabe:	4b0b      	ldr	r3, [pc, #44]	@ (800aaec <DisableConnectedDevices+0x44>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	705a      	strb	r2, [r3, #1]
  Sensor.AHT20_measurementEnabled = false;
 800aac4:	4b09      	ldr	r3, [pc, #36]	@ (800aaec <DisableConnectedDevices+0x44>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	711a      	strb	r2, [r3, #4]
  Sensor.BMP280_measurementEnabled = false;
 800aaca:	4b08      	ldr	r3, [pc, #32]	@ (800aaec <DisableConnectedDevices+0x44>)
 800aacc:	2200      	movs	r2, #0
 800aace:	715a      	strb	r2, [r3, #5]
  Sensor.PM_measurementEnabled = false;
 800aad0:	4b06      	ldr	r3, [pc, #24]	@ (800aaec <DisableConnectedDevices+0x44>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800aad6:	4b05      	ldr	r3, [pc, #20]	@ (800aaec <DisableConnectedDevices+0x44>)
 800aad8:	2200      	movs	r2, #0
 800aada:	70da      	strb	r2, [r3, #3]
}
 800aadc:	46c0      	nop			@ (mov r8, r8)
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	46c0      	nop			@ (mov r8, r8)
 800aae4:	08027c98 	.word	0x08027c98
 800aae8:	08027904 	.word	0x08027904
 800aaec:	20000da4 	.word	0x20000da4

0800aaf0 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	0002      	movs	r2, r0
 800aaf8:	1dfb      	adds	r3, r7, #7
 800aafa:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800aafc:	4b03      	ldr	r3, [pc, #12]	@ (800ab0c <setSensorLock+0x1c>)
 800aafe:	1dfa      	adds	r2, r7, #7
 800ab00:	7812      	ldrb	r2, [r2, #0]
 800ab02:	701a      	strb	r2, [r3, #0]
}
 800ab04:	46c0      	nop			@ (mov r8, r8)
 800ab06:	46bd      	mov	sp, r7
 800ab08:	b002      	add	sp, #8
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20000db4 	.word	0x20000db4

0800ab10 <getSensorLock>:

uint8_t getSensorLock() {
 800ab10:	b580      	push	{r7, lr}
 800ab12:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800ab14:	4b02      	ldr	r3, [pc, #8]	@ (800ab20 <getSensorLock+0x10>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
}
 800ab18:	0018      	movs	r0, r3
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	46c0      	nop			@ (mov r8, r8)
 800ab20:	20000db4 	.word	0x20000db4

0800ab24 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
  if (Sensor.HT_measurementEnabled) {
 800ab28:	4b15      	ldr	r3, [pc, #84]	@ (800ab80 <UpkeepI2Csensors+0x5c>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800ab30:	f006 f99a 	bl	8010e68 <HIDS_Upkeep>
 800ab34:	0003      	movs	r3, r0
 800ab36:	001a      	movs	r2, r3
 800ab38:	4b12      	ldr	r3, [pc, #72]	@ (800ab84 <UpkeepI2Csensors+0x60>)
 800ab3a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800ab3c:	4b10      	ldr	r3, [pc, #64]	@ (800ab80 <UpkeepI2Csensors+0x5c>)
 800ab3e:	785b      	ldrb	r3, [r3, #1]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800ab44:	f003 fb1e 	bl	800e184 <SGP_Upkeep>
 800ab48:	0003      	movs	r3, r0
 800ab4a:	001a      	movs	r2, r3
 800ab4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ab88 <UpkeepI2Csensors+0x64>)
 800ab4e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT20_measurementEnabled) {
 800ab50:	4b0b      	ldr	r3, [pc, #44]	@ (800ab80 <UpkeepI2Csensors+0x5c>)
 800ab52:	791b      	ldrb	r3, [r3, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800ab58:	f7fd fbc2 	bl	80082e0 <AHT_Upkeep>
 800ab5c:	0003      	movs	r3, r0
 800ab5e:	001a      	movs	r2, r3
 800ab60:	4b0a      	ldr	r3, [pc, #40]	@ (800ab8c <UpkeepI2Csensors+0x68>)
 800ab62:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP280_measurementEnabled) {
 800ab64:	4b06      	ldr	r3, [pc, #24]	@ (800ab80 <UpkeepI2Csensors+0x5c>)
 800ab66:	795b      	ldrb	r3, [r3, #5]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d005      	beq.n	800ab78 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800ab6c:	f7fe f97a 	bl	8008e64 <BMP_Upkeep>
 800ab70:	0003      	movs	r3, r0
 800ab72:	001a      	movs	r2, r3
 800ab74:	4b06      	ldr	r3, [pc, #24]	@ (800ab90 <UpkeepI2Csensors+0x6c>)
 800ab76:	701a      	strb	r2, [r3, #0]
  }
}
 800ab78:	46c0      	nop			@ (mov r8, r8)
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	46c0      	nop			@ (mov r8, r8)
 800ab80:	20000da4 	.word	0x20000da4
 800ab84:	20000db6 	.word	0x20000db6
 800ab88:	20000db5 	.word	0x20000db5
 800ab8c:	20000db7 	.word	0x20000db7
 800ab90:	20000db8 	.word	0x20000db8

0800ab94 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800ab98:	4b02      	ldr	r3, [pc, #8]	@ (800aba4 <ResetdBAmax+0x10>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	601a      	str	r2, [r3, #0]
}
 800ab9e:	46c0      	nop			@ (mov r8, r8)
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	20000e00 	.word	0x20000e00

0800aba8 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800abb0:	f006 fa82 	bl	80110b8 <HAL_GetTick>
 800abb4:	0002      	movs	r2, r0
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	18d2      	adds	r2, r2, r3
 800abba:	4b03      	ldr	r3, [pc, #12]	@ (800abc8 <setMICTimeStamp+0x20>)
 800abbc:	601a      	str	r2, [r3, #0]
}
 800abbe:	46c0      	nop			@ (mov r8, r8)
 800abc0:	46bd      	mov	sp, r7
 800abc2:	b002      	add	sp, #8
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	46c0      	nop			@ (mov r8, r8)
 800abc8:	20000e08 	.word	0x20000e08

0800abcc <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0
  counter = 0;
 800abd0:	4b05      	ldr	r3, [pc, #20]	@ (800abe8 <ResetDBACalculator+0x1c>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800abd6:	4b05      	ldr	r3, [pc, #20]	@ (800abec <ResetDBACalculator+0x20>)
 800abd8:	2201      	movs	r2, #1
 800abda:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800abdc:	4b04      	ldr	r3, [pc, #16]	@ (800abf0 <ResetDBACalculator+0x24>)
 800abde:	2200      	movs	r2, #0
 800abe0:	701a      	strb	r2, [r3, #0]
}
 800abe2:	46c0      	nop			@ (mov r8, r8)
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20000e04 	.word	0x20000e04
 800abec:	2000009c 	.word	0x2000009c
 800abf0:	20000e05 	.word	0x20000e05

0800abf4 <MIC_Print>:

void MIC_Print(void) {
 800abf4:	b5b0      	push	{r4, r5, r7, lr}
 800abf6:	b08a      	sub	sp, #40	@ 0x28
 800abf8:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800abfa:	4b9f      	ldr	r3, [pc, #636]	@ (800ae78 <MIC_Print+0x284>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4b9f      	ldr	r3, [pc, #636]	@ (800ae7c <MIC_Print+0x288>)
 800ac00:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800ac02:	4b9f      	ldr	r3, [pc, #636]	@ (800ae80 <MIC_Print+0x28c>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	001a      	movs	r2, r3
 800ac08:	4b9c      	ldr	r3, [pc, #624]	@ (800ae7c <MIC_Print+0x288>)
 800ac0a:	6819      	ldr	r1, [r3, #0]
 800ac0c:	4b9d      	ldr	r3, [pc, #628]	@ (800ae84 <MIC_Print+0x290>)
 800ac0e:	0092      	lsls	r2, r2, #2
 800ac10:	50d1      	str	r1, [r2, r3]
  counter++;
 800ac12:	4b9b      	ldr	r3, [pc, #620]	@ (800ae80 <MIC_Print+0x28c>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	3301      	adds	r3, #1
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	4b99      	ldr	r3, [pc, #612]	@ (800ae80 <MIC_Print+0x28c>)
 800ac1c:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800ac1e:	4b98      	ldr	r3, [pc, #608]	@ (800ae80 <MIC_Print+0x28c>)
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b09      	cmp	r3, #9
 800ac24:	d80b      	bhi.n	800ac3e <MIC_Print+0x4a>
 800ac26:	4b98      	ldr	r3, [pc, #608]	@ (800ae88 <MIC_Print+0x294>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	4053      	eors	r3, r2
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d004      	beq.n	800ac3e <MIC_Print+0x4a>
    denominator = counter;
 800ac34:	4b92      	ldr	r3, [pc, #584]	@ (800ae80 <MIC_Print+0x28c>)
 800ac36:	781a      	ldrb	r2, [r3, #0]
 800ac38:	4b94      	ldr	r3, [pc, #592]	@ (800ae8c <MIC_Print+0x298>)
 800ac3a:	701a      	strb	r2, [r3, #0]
 800ac3c:	e005      	b.n	800ac4a <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800ac3e:	4b93      	ldr	r3, [pc, #588]	@ (800ae8c <MIC_Print+0x298>)
 800ac40:	220a      	movs	r2, #10
 800ac42:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800ac44:	4b90      	ldr	r3, [pc, #576]	@ (800ae88 <MIC_Print+0x294>)
 800ac46:	2201      	movs	r2, #1
 800ac48:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800ac4a:	4b91      	ldr	r3, [pc, #580]	@ (800ae90 <MIC_Print+0x29c>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800ac50:	230f      	movs	r3, #15
 800ac52:	18fb      	adds	r3, r7, r3
 800ac54:	2200      	movs	r2, #0
 800ac56:	701a      	strb	r2, [r3, #0]
 800ac58:	e042      	b.n	800ace0 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800ac5a:	240f      	movs	r4, #15
 800ac5c:	193b      	adds	r3, r7, r4
 800ac5e:	781a      	ldrb	r2, [r3, #0]
 800ac60:	4b88      	ldr	r3, [pc, #544]	@ (800ae84 <MIC_Print+0x290>)
 800ac62:	0092      	lsls	r2, r2, #2
 800ac64:	58d2      	ldr	r2, [r2, r3]
 800ac66:	4b8a      	ldr	r3, [pc, #552]	@ (800ae90 <MIC_Print+0x29c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	1c19      	adds	r1, r3, #0
 800ac6c:	1c10      	adds	r0, r2, #0
 800ac6e:	f7f5 fe27 	bl	80008c0 <__aeabi_fadd>
 800ac72:	1c03      	adds	r3, r0, #0
 800ac74:	1c1a      	adds	r2, r3, #0
 800ac76:	4b86      	ldr	r3, [pc, #536]	@ (800ae90 <MIC_Print+0x29c>)
 800ac78:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800ac7a:	193b      	adds	r3, r7, r4
 800ac7c:	781a      	ldrb	r2, [r3, #0]
 800ac7e:	4b81      	ldr	r3, [pc, #516]	@ (800ae84 <MIC_Print+0x290>)
 800ac80:	0092      	lsls	r2, r2, #2
 800ac82:	58d2      	ldr	r2, [r2, r3]
 800ac84:	4b83      	ldr	r3, [pc, #524]	@ (800ae94 <MIC_Print+0x2a0>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	1c19      	adds	r1, r3, #0
 800ac8a:	1c10      	adds	r0, r2, #0
 800ac8c:	f7f5 fc64 	bl	8000558 <__aeabi_fcmpgt>
 800ac90:	1e03      	subs	r3, r0, #0
 800ac92:	d006      	beq.n	800aca2 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800ac94:	193b      	adds	r3, r7, r4
 800ac96:	781a      	ldrb	r2, [r3, #0]
 800ac98:	4b7a      	ldr	r3, [pc, #488]	@ (800ae84 <MIC_Print+0x290>)
 800ac9a:	0092      	lsls	r2, r2, #2
 800ac9c:	58d2      	ldr	r2, [r2, r3]
 800ac9e:	4b7d      	ldr	r3, [pc, #500]	@ (800ae94 <MIC_Print+0x2a0>)
 800aca0:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800aca2:	4b7b      	ldr	r3, [pc, #492]	@ (800ae90 <MIC_Print+0x29c>)
 800aca4:	681c      	ldr	r4, [r3, #0]
 800aca6:	4b79      	ldr	r3, [pc, #484]	@ (800ae8c <MIC_Print+0x298>)
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	0018      	movs	r0, r3
 800acac:	f7f6 fcdc 	bl	8001668 <__aeabi_ui2f>
 800acb0:	1c03      	adds	r3, r0, #0
 800acb2:	1c19      	adds	r1, r3, #0
 800acb4:	1c20      	adds	r0, r4, #0
 800acb6:	f7f5 ff8d 	bl	8000bd4 <__aeabi_fdiv>
 800acba:	1c03      	adds	r3, r0, #0
 800acbc:	1c1a      	adds	r2, r3, #0
 800acbe:	4b76      	ldr	r3, [pc, #472]	@ (800ae98 <MIC_Print+0x2a4>)
 800acc0:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800acc2:	4b6e      	ldr	r3, [pc, #440]	@ (800ae7c <MIC_Print+0x288>)
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	4b73      	ldr	r3, [pc, #460]	@ (800ae94 <MIC_Print+0x2a0>)
 800acc8:	6819      	ldr	r1, [r3, #0]
 800acca:	4b73      	ldr	r3, [pc, #460]	@ (800ae98 <MIC_Print+0x2a4>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	1c1a      	adds	r2, r3, #0
 800acd0:	f7f8 fdb0 	bl	8003834 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800acd4:	210f      	movs	r1, #15
 800acd6:	187b      	adds	r3, r7, r1
 800acd8:	781a      	ldrb	r2, [r3, #0]
 800acda:	187b      	adds	r3, r7, r1
 800acdc:	3201      	adds	r2, #1
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	4b6a      	ldr	r3, [pc, #424]	@ (800ae8c <MIC_Print+0x298>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	220f      	movs	r2, #15
 800ace6:	18ba      	adds	r2, r7, r2
 800ace8:	7812      	ldrb	r2, [r2, #0]
 800acea:	429a      	cmp	r2, r3
 800acec:	d3b5      	bcc.n	800ac5a <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800acee:	4b63      	ldr	r3, [pc, #396]	@ (800ae7c <MIC_Print+0x288>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	1c18      	adds	r0, r3, #0
 800acf4:	f7f8 fbb6 	bl	8003464 <__aeabi_f2d>
 800acf8:	6038      	str	r0, [r7, #0]
 800acfa:	6079      	str	r1, [r7, #4]
 800acfc:	4b65      	ldr	r3, [pc, #404]	@ (800ae94 <MIC_Print+0x2a0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	1c18      	adds	r0, r3, #0
 800ad02:	f7f8 fbaf 	bl	8003464 <__aeabi_f2d>
 800ad06:	0004      	movs	r4, r0
 800ad08:	000d      	movs	r5, r1
 800ad0a:	4b63      	ldr	r3, [pc, #396]	@ (800ae98 <MIC_Print+0x2a4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	1c18      	adds	r0, r3, #0
 800ad10:	f7f8 fba8 	bl	8003464 <__aeabi_f2d>
 800ad14:	0002      	movs	r2, r0
 800ad16:	000b      	movs	r3, r1
 800ad18:	4960      	ldr	r1, [pc, #384]	@ (800ae9c <MIC_Print+0x2a8>)
 800ad1a:	9204      	str	r2, [sp, #16]
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	9402      	str	r4, [sp, #8]
 800ad20:	9503      	str	r5, [sp, #12]
 800ad22:	4b5f      	ldr	r3, [pc, #380]	@ (800aea0 <MIC_Print+0x2ac>)
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	0008      	movs	r0, r1
 800ad2c:	f017 fd00 	bl	8022730 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800ad30:	4b53      	ldr	r3, [pc, #332]	@ (800ae80 <MIC_Print+0x28c>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b0a      	cmp	r3, #10
 800ad36:	d902      	bls.n	800ad3e <MIC_Print+0x14a>
    counter = 0;
 800ad38:	4b51      	ldr	r3, [pc, #324]	@ (800ae80 <MIC_Print+0x28c>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800ad3e:	4b4f      	ldr	r3, [pc, #316]	@ (800ae7c <MIC_Print+0x288>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4958      	ldr	r1, [pc, #352]	@ (800aea4 <MIC_Print+0x2b0>)
 800ad44:	1c18      	adds	r0, r3, #0
 800ad46:	f7f5 fc11 	bl	800056c <__aeabi_fcmpge>
 800ad4a:	1e03      	subs	r3, r0, #0
 800ad4c:	d004      	beq.n	800ad58 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800ad4e:	2201      	movs	r2, #1
 800ad50:	2101      	movs	r1, #1
 800ad52:	2001      	movs	r0, #1
 800ad54:	f004 fb30 	bl	800f3b8 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800ad58:	4b48      	ldr	r3, [pc, #288]	@ (800ae7c <MIC_Print+0x288>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4952      	ldr	r1, [pc, #328]	@ (800aea8 <MIC_Print+0x2b4>)
 800ad5e:	1c18      	adds	r0, r3, #0
 800ad60:	f7f5 fc04 	bl	800056c <__aeabi_fcmpge>
 800ad64:	1e03      	subs	r3, r0, #0
 800ad66:	d00c      	beq.n	800ad82 <MIC_Print+0x18e>
 800ad68:	4b44      	ldr	r3, [pc, #272]	@ (800ae7c <MIC_Print+0x288>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	494d      	ldr	r1, [pc, #308]	@ (800aea4 <MIC_Print+0x2b0>)
 800ad6e:	1c18      	adds	r0, r3, #0
 800ad70:	f7f5 fbde 	bl	8000530 <__aeabi_fcmplt>
 800ad74:	1e03      	subs	r3, r0, #0
 800ad76:	d004      	beq.n	800ad82 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	f004 fb1b 	bl	800f3b8 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800ad82:	4b3e      	ldr	r3, [pc, #248]	@ (800ae7c <MIC_Print+0x288>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4949      	ldr	r1, [pc, #292]	@ (800aeac <MIC_Print+0x2b8>)
 800ad88:	1c18      	adds	r0, r3, #0
 800ad8a:	f7f5 fbef 	bl	800056c <__aeabi_fcmpge>
 800ad8e:	1e03      	subs	r3, r0, #0
 800ad90:	d00c      	beq.n	800adac <MIC_Print+0x1b8>
 800ad92:	4b3a      	ldr	r3, [pc, #232]	@ (800ae7c <MIC_Print+0x288>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4944      	ldr	r1, [pc, #272]	@ (800aea8 <MIC_Print+0x2b4>)
 800ad98:	1c18      	adds	r0, r3, #0
 800ad9a:	f7f5 fbc9 	bl	8000530 <__aeabi_fcmplt>
 800ad9e:	1e03      	subs	r3, r0, #0
 800ada0:	d004      	beq.n	800adac <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800ada2:	2200      	movs	r2, #0
 800ada4:	2101      	movs	r1, #1
 800ada6:	2001      	movs	r0, #1
 800ada8:	f004 fb06 	bl	800f3b8 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800adac:	4b33      	ldr	r3, [pc, #204]	@ (800ae7c <MIC_Print+0x288>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	493f      	ldr	r1, [pc, #252]	@ (800aeb0 <MIC_Print+0x2bc>)
 800adb2:	1c18      	adds	r0, r3, #0
 800adb4:	f7f5 fbda 	bl	800056c <__aeabi_fcmpge>
 800adb8:	1e03      	subs	r3, r0, #0
 800adba:	d00c      	beq.n	800add6 <MIC_Print+0x1e2>
 800adbc:	4b2f      	ldr	r3, [pc, #188]	@ (800ae7c <MIC_Print+0x288>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	493a      	ldr	r1, [pc, #232]	@ (800aeac <MIC_Print+0x2b8>)
 800adc2:	1c18      	adds	r0, r3, #0
 800adc4:	f7f5 fbb4 	bl	8000530 <__aeabi_fcmplt>
 800adc8:	1e03      	subs	r3, r0, #0
 800adca:	d004      	beq.n	800add6 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800adcc:	2200      	movs	r2, #0
 800adce:	2101      	movs	r1, #1
 800add0:	2000      	movs	r0, #0
 800add2:	f004 faf1 	bl	800f3b8 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800add6:	4b29      	ldr	r3, [pc, #164]	@ (800ae7c <MIC_Print+0x288>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4936      	ldr	r1, [pc, #216]	@ (800aeb4 <MIC_Print+0x2c0>)
 800addc:	1c18      	adds	r0, r3, #0
 800adde:	f7f5 fbc5 	bl	800056c <__aeabi_fcmpge>
 800ade2:	1e03      	subs	r3, r0, #0
 800ade4:	d00c      	beq.n	800ae00 <MIC_Print+0x20c>
 800ade6:	4b25      	ldr	r3, [pc, #148]	@ (800ae7c <MIC_Print+0x288>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4931      	ldr	r1, [pc, #196]	@ (800aeb0 <MIC_Print+0x2bc>)
 800adec:	1c18      	adds	r0, r3, #0
 800adee:	f7f5 fb9f 	bl	8000530 <__aeabi_fcmplt>
 800adf2:	1e03      	subs	r3, r0, #0
 800adf4:	d004      	beq.n	800ae00 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800adf6:	2201      	movs	r2, #1
 800adf8:	2101      	movs	r1, #1
 800adfa:	2000      	movs	r0, #0
 800adfc:	f004 fadc 	bl	800f3b8 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800ae00:	4b1e      	ldr	r3, [pc, #120]	@ (800ae7c <MIC_Print+0x288>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	492c      	ldr	r1, [pc, #176]	@ (800aeb8 <MIC_Print+0x2c4>)
 800ae06:	1c18      	adds	r0, r3, #0
 800ae08:	f7f5 fbb0 	bl	800056c <__aeabi_fcmpge>
 800ae0c:	1e03      	subs	r3, r0, #0
 800ae0e:	d00c      	beq.n	800ae2a <MIC_Print+0x236>
 800ae10:	4b1a      	ldr	r3, [pc, #104]	@ (800ae7c <MIC_Print+0x288>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4927      	ldr	r1, [pc, #156]	@ (800aeb4 <MIC_Print+0x2c0>)
 800ae16:	1c18      	adds	r0, r3, #0
 800ae18:	f7f5 fb8a 	bl	8000530 <__aeabi_fcmplt>
 800ae1c:	1e03      	subs	r3, r0, #0
 800ae1e:	d004      	beq.n	800ae2a <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800ae20:	2201      	movs	r2, #1
 800ae22:	2100      	movs	r1, #0
 800ae24:	2000      	movs	r0, #0
 800ae26:	f004 fac7 	bl	800f3b8 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800ae2a:	4b14      	ldr	r3, [pc, #80]	@ (800ae7c <MIC_Print+0x288>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4923      	ldr	r1, [pc, #140]	@ (800aebc <MIC_Print+0x2c8>)
 800ae30:	1c18      	adds	r0, r3, #0
 800ae32:	f7f5 fb9b 	bl	800056c <__aeabi_fcmpge>
 800ae36:	1e03      	subs	r3, r0, #0
 800ae38:	d00c      	beq.n	800ae54 <MIC_Print+0x260>
 800ae3a:	4b10      	ldr	r3, [pc, #64]	@ (800ae7c <MIC_Print+0x288>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	491e      	ldr	r1, [pc, #120]	@ (800aeb8 <MIC_Print+0x2c4>)
 800ae40:	1c18      	adds	r0, r3, #0
 800ae42:	f7f5 fb75 	bl	8000530 <__aeabi_fcmplt>
 800ae46:	1e03      	subs	r3, r0, #0
 800ae48:	d004      	beq.n	800ae54 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	2001      	movs	r0, #1
 800ae50:	f004 fab2 	bl	800f3b8 <SetDBLED>
  }
  if(dBA < 35){//off
 800ae54:	4b09      	ldr	r3, [pc, #36]	@ (800ae7c <MIC_Print+0x288>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4918      	ldr	r1, [pc, #96]	@ (800aebc <MIC_Print+0x2c8>)
 800ae5a:	1c18      	adds	r0, r3, #0
 800ae5c:	f7f5 fb68 	bl	8000530 <__aeabi_fcmplt>
 800ae60:	1e03      	subs	r3, r0, #0
 800ae62:	d100      	bne.n	800ae66 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800ae64:	e004      	b.n	800ae70 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800ae66:	2200      	movs	r2, #0
 800ae68:	2100      	movs	r1, #0
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	f004 faa4 	bl	800f3b8 <SetDBLED>
}
 800ae70:	46c0      	nop			@ (mov r8, r8)
 800ae72:	46bd      	mov	sp, r7
 800ae74:	b004      	add	sp, #16
 800ae76:	bdb0      	pop	{r4, r5, r7, pc}
 800ae78:	20000dfc 	.word	0x20000dfc
 800ae7c:	20000dc8 	.word	0x20000dc8
 800ae80:	20000e04 	.word	0x20000e04
 800ae84:	20000dcc 	.word	0x20000dcc
 800ae88:	20000e05 	.word	0x20000e05
 800ae8c:	2000009c 	.word	0x2000009c
 800ae90:	20000df8 	.word	0x20000df8
 800ae94:	20000e00 	.word	0x20000e00
 800ae98:	20000df4 	.word	0x20000df4
 800ae9c:	08027cac 	.word	0x08027cac
 800aea0:	20000dbc 	.word	0x20000dbc
 800aea4:	42b40000 	.word	0x42b40000
 800aea8:	42a00000 	.word	0x42a00000
 800aeac:	428c0000 	.word	0x428c0000
 800aeb0:	42700000 	.word	0x42700000
 800aeb4:	42480000 	.word	0x42480000
 800aeb8:	42200000 	.word	0x42200000
 800aebc:	420c0000 	.word	0x420c0000

0800aec0 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800aec6:	4b11      	ldr	r3, [pc, #68]	@ (800af0c <MIC_TestMeasurementDone+0x4c>)
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	4a10      	ldr	r2, [pc, #64]	@ (800af10 <MIC_TestMeasurementDone+0x50>)
 800aece:	4911      	ldr	r1, [pc, #68]	@ (800af14 <MIC_TestMeasurementDone+0x54>)
 800aed0:	2002      	movs	r0, #2
 800aed2:	f005 fca5 	bl	8010820 <CreateLine>
  if(DataReady) {
 800aed6:	4b0d      	ldr	r3, [pc, #52]	@ (800af0c <MIC_TestMeasurementDone+0x4c>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d010      	beq.n	800af02 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800aee0:	1dfb      	adds	r3, r7, #7
 800aee2:	4a0d      	ldr	r2, [pc, #52]	@ (800af18 <MIC_TestMeasurementDone+0x58>)
 800aee4:	7812      	ldrb	r2, [r2, #0]
 800aee6:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800aee8:	4b0b      	ldr	r3, [pc, #44]	@ (800af18 <MIC_TestMeasurementDone+0x58>)
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	4a0b      	ldr	r2, [pc, #44]	@ (800af1c <MIC_TestMeasurementDone+0x5c>)
 800aef0:	4908      	ldr	r1, [pc, #32]	@ (800af14 <MIC_TestMeasurementDone+0x54>)
 800aef2:	2002      	movs	r0, #2
 800aef4:	f005 fc94 	bl	8010820 <CreateLine>
    ResetMICIndicator();
 800aef8:	f004 fb4c 	bl	800f594 <ResetMICIndicator>
    return Check;
 800aefc:	1dfb      	adds	r3, r7, #7
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	e000      	b.n	800af04 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800af02:	2300      	movs	r3, #0
}
 800af04:	0018      	movs	r0, r3
 800af06:	46bd      	mov	sp, r7
 800af08:	b002      	add	sp, #8
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20000f39 	.word	0x20000f39
 800af10:	08027cf4 	.word	0x08027cf4
 800af14:	08027d20 	.word	0x08027d20
 800af18:	20000f3a 	.word	0x20000f3a
 800af1c:	08027d24 	.word	0x08027d24

0800af20 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800af26:	4b78      	ldr	r3, [pc, #480]	@ (800b108 <Mic_Upkeep+0x1e8>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d100      	bne.n	800af30 <Mic_Upkeep+0x10>
 800af2e:	e0b8      	b.n	800b0a2 <Mic_Upkeep+0x182>
 800af30:	dd00      	ble.n	800af34 <Mic_Upkeep+0x14>
 800af32:	e0d3      	b.n	800b0dc <Mic_Upkeep+0x1bc>
 800af34:	2b02      	cmp	r3, #2
 800af36:	d037      	beq.n	800afa8 <Mic_Upkeep+0x88>
 800af38:	dd00      	ble.n	800af3c <Mic_Upkeep+0x1c>
 800af3a:	e0cf      	b.n	800b0dc <Mic_Upkeep+0x1bc>
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <Mic_Upkeep+0x26>
 800af40:	2b01      	cmp	r3, #1
 800af42:	d014      	beq.n	800af6e <Mic_Upkeep+0x4e>
 800af44:	e0ca      	b.n	800b0dc <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800af46:	2001      	movs	r0, #1
 800af48:	f003 fb34 	bl	800e5b4 <enableMicrophone>
 800af4c:	0003      	movs	r3, r0
 800af4e:	001a      	movs	r2, r3
 800af50:	2301      	movs	r3, #1
 800af52:	4053      	eors	r3, r2
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800af5a:	4a6c      	ldr	r2, [pc, #432]	@ (800b10c <Mic_Upkeep+0x1ec>)
 800af5c:	4b6c      	ldr	r3, [pc, #432]	@ (800b110 <Mic_Upkeep+0x1f0>)
 800af5e:	217f      	movs	r1, #127	@ 0x7f
 800af60:	0018      	movs	r0, r3
 800af62:	f005 fd15 	bl	8010990 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800af66:	4b68      	ldr	r3, [pc, #416]	@ (800b108 <Mic_Upkeep+0x1e8>)
 800af68:	2201      	movs	r2, #1
 800af6a:	701a      	strb	r2, [r3, #0]
    break;
 800af6c:	e0c5      	b.n	800b0fa <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800af6e:	f003 fafd 	bl	800e56c <micSettlingComplete>
 800af72:	1e03      	subs	r3, r0, #0
 800af74:	d105      	bne.n	800af82 <Mic_Upkeep+0x62>
 800af76:	4b67      	ldr	r3, [pc, #412]	@ (800b114 <Mic_Upkeep+0x1f4>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d100      	bne.n	800af82 <Mic_Upkeep+0x62>
 800af80:	e0b6      	b.n	800b0f0 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800af82:	f003 fb81 	bl	800e688 <startSPLcalculation>
 800af86:	0003      	movs	r3, r0
 800af88:	001a      	movs	r2, r3
 800af8a:	2301      	movs	r3, #1
 800af8c:	4053      	eors	r3, r2
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d005      	beq.n	800afa0 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800af94:	4a5d      	ldr	r2, [pc, #372]	@ (800b10c <Mic_Upkeep+0x1ec>)
 800af96:	4b5e      	ldr	r3, [pc, #376]	@ (800b110 <Mic_Upkeep+0x1f0>)
 800af98:	2188      	movs	r1, #136	@ 0x88
 800af9a:	0018      	movs	r0, r3
 800af9c:	f005 fcf8 	bl	8010990 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800afa0:	4b59      	ldr	r3, [pc, #356]	@ (800b108 <Mic_Upkeep+0x1e8>)
 800afa2:	2202      	movs	r2, #2
 800afa4:	701a      	strb	r2, [r3, #0]
    }
    break;
 800afa6:	e0a3      	b.n	800b0f0 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800afa8:	4b5b      	ldr	r3, [pc, #364]	@ (800b118 <Mic_Upkeep+0x1f8>)
 800afaa:	2201      	movs	r2, #1
 800afac:	2101      	movs	r1, #1
 800afae:	0018      	movs	r0, r3
 800afb0:	f003 f9be 	bl	800e330 <getSoundData>
 800afb4:	1e03      	subs	r3, r0, #0
 800afb6:	d100      	bne.n	800afba <Mic_Upkeep+0x9a>
 800afb8:	e09c      	b.n	800b0f4 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800afba:	f003 fab7 	bl	800e52c <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800afbe:	4b56      	ldr	r3, [pc, #344]	@ (800b118 <Mic_Upkeep+0x1f8>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	001a      	movs	r2, r3
 800afc4:	4b54      	ldr	r3, [pc, #336]	@ (800b118 <Mic_Upkeep+0x1f8>)
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	4954      	ldr	r1, [pc, #336]	@ (800b11c <Mic_Upkeep+0x1fc>)
 800afca:	0038      	movs	r0, r7
 800afcc:	f017 fc20 	bl	8022810 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800afd0:	4b51      	ldr	r3, [pc, #324]	@ (800b118 <Mic_Upkeep+0x1f8>)
 800afd2:	89db      	ldrh	r3, [r3, #14]
 800afd4:	001a      	movs	r2, r3
 800afd6:	4b50      	ldr	r3, [pc, #320]	@ (800b118 <Mic_Upkeep+0x1f8>)
 800afd8:	7c1b      	ldrb	r3, [r3, #16]
 800afda:	4951      	ldr	r1, [pc, #324]	@ (800b120 <Mic_Upkeep+0x200>)
 800afdc:	4851      	ldr	r0, [pc, #324]	@ (800b124 <Mic_Upkeep+0x204>)
 800afde:	f017 fc17 	bl	8022810 <siprintf>
      dBValue = atof(dBbuffer);
 800afe2:	003b      	movs	r3, r7
 800afe4:	0018      	movs	r0, r3
 800afe6:	f015 ffc3 	bl	8020f70 <atof>
 800afea:	0002      	movs	r2, r0
 800afec:	000b      	movs	r3, r1
 800afee:	0010      	movs	r0, r2
 800aff0:	0019      	movs	r1, r3
 800aff2:	f7f8 fa7f 	bl	80034f4 <__aeabi_d2f>
 800aff6:	1c02      	adds	r2, r0, #0
 800aff8:	4b4b      	ldr	r3, [pc, #300]	@ (800b128 <Mic_Upkeep+0x208>)
 800affa:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800affc:	4b4a      	ldr	r3, [pc, #296]	@ (800b128 <Mic_Upkeep+0x208>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	494a      	ldr	r1, [pc, #296]	@ (800b12c <Mic_Upkeep+0x20c>)
 800b002:	1c18      	adds	r0, r3, #0
 800b004:	f7f5 ffcc 	bl	8000fa0 <__aeabi_fmul>
 800b008:	1c03      	adds	r3, r0, #0
 800b00a:	1c18      	adds	r0, r3, #0
 800b00c:	f7f8 fa2a 	bl	8003464 <__aeabi_f2d>
 800b010:	2200      	movs	r2, #0
 800b012:	4b47      	ldr	r3, [pc, #284]	@ (800b130 <Mic_Upkeep+0x210>)
 800b014:	f7f6 fb6a 	bl	80016ec <__aeabi_dadd>
 800b018:	0002      	movs	r2, r0
 800b01a:	000b      	movs	r3, r1
 800b01c:	0010      	movs	r0, r2
 800b01e:	0019      	movs	r1, r3
 800b020:	f7f8 f992 	bl	8003348 <__aeabi_d2iz>
 800b024:	0003      	movs	r3, r0
 800b026:	0018      	movs	r0, r3
 800b028:	f7f8 f9ca 	bl	80033c0 <__aeabi_i2d>
 800b02c:	2200      	movs	r2, #0
 800b02e:	4b41      	ldr	r3, [pc, #260]	@ (800b134 <Mic_Upkeep+0x214>)
 800b030:	f7f6 fec0 	bl	8001db4 <__aeabi_ddiv>
 800b034:	0002      	movs	r2, r0
 800b036:	000b      	movs	r3, r1
 800b038:	0010      	movs	r0, r2
 800b03a:	0019      	movs	r1, r3
 800b03c:	f7f8 fa5a 	bl	80034f4 <__aeabi_d2f>
 800b040:	1c02      	adds	r2, r0, #0
 800b042:	4b39      	ldr	r3, [pc, #228]	@ (800b128 <Mic_Upkeep+0x208>)
 800b044:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800b046:	f7ff fdd5 	bl	800abf4 <MIC_Print>
      if (!startSPLcalculation()) {
 800b04a:	f003 fb1d 	bl	800e688 <startSPLcalculation>
 800b04e:	0003      	movs	r3, r0
 800b050:	001a      	movs	r2, r3
 800b052:	2301      	movs	r3, #1
 800b054:	4053      	eors	r3, r2
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d005      	beq.n	800b068 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800b05c:	4a2b      	ldr	r2, [pc, #172]	@ (800b10c <Mic_Upkeep+0x1ec>)
 800b05e:	4b2c      	ldr	r3, [pc, #176]	@ (800b110 <Mic_Upkeep+0x1f0>)
 800b060:	2198      	movs	r1, #152	@ 0x98
 800b062:	0018      	movs	r0, r3
 800b064:	f005 fc94 	bl	8010990 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800b068:	2000      	movs	r0, #0
 800b06a:	f003 faa3 	bl	800e5b4 <enableMicrophone>
 800b06e:	0003      	movs	r3, r0
 800b070:	001a      	movs	r2, r3
 800b072:	2301      	movs	r3, #1
 800b074:	4053      	eors	r3, r2
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800b07c:	4a23      	ldr	r2, [pc, #140]	@ (800b10c <Mic_Upkeep+0x1ec>)
 800b07e:	4b24      	ldr	r3, [pc, #144]	@ (800b110 <Mic_Upkeep+0x1f0>)
 800b080:	219b      	movs	r1, #155	@ 0x9b
 800b082:	0018      	movs	r0, r3
 800b084:	f005 fc84 	bl	8010990 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800b088:	f006 f816 	bl	80110b8 <HAL_GetTick>
 800b08c:	0003      	movs	r3, r0
 800b08e:	4a2a      	ldr	r2, [pc, #168]	@ (800b138 <Mic_Upkeep+0x218>)
 800b090:	189a      	adds	r2, r3, r2
 800b092:	4b2a      	ldr	r3, [pc, #168]	@ (800b13c <Mic_Upkeep+0x21c>)
 800b094:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800b096:	4b1c      	ldr	r3, [pc, #112]	@ (800b108 <Mic_Upkeep+0x1e8>)
 800b098:	2203      	movs	r2, #3
 800b09a:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800b09c:	f004 fa7a 	bl	800f594 <ResetMICIndicator>
    }
    break;
 800b0a0:	e028      	b.n	800b0f4 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800b0a2:	4b26      	ldr	r3, [pc, #152]	@ (800b13c <Mic_Upkeep+0x21c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	f005 fb64 	bl	8010774 <TimestampIsReached>
 800b0ac:	1e03      	subs	r3, r0, #0
 800b0ae:	d023      	beq.n	800b0f8 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	f003 fa7f 	bl	800e5b4 <enableMicrophone>
 800b0b6:	0003      	movs	r3, r0
 800b0b8:	001a      	movs	r2, r3
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	4053      	eors	r3, r2
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d005      	beq.n	800b0d0 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800b0c4:	4a11      	ldr	r2, [pc, #68]	@ (800b10c <Mic_Upkeep+0x1ec>)
 800b0c6:	4b12      	ldr	r3, [pc, #72]	@ (800b110 <Mic_Upkeep+0x1f0>)
 800b0c8:	21a6      	movs	r1, #166	@ 0xa6
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f005 fc60 	bl	8010990 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800b0d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b108 <Mic_Upkeep+0x1e8>)
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800b0d6:	f004 fa1b 	bl	800f510 <SetMICIndicator>
    }
    break;
 800b0da:	e00d      	b.n	800b0f8 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800b0dc:	4a18      	ldr	r2, [pc, #96]	@ (800b140 <Mic_Upkeep+0x220>)
 800b0de:	4b19      	ldr	r3, [pc, #100]	@ (800b144 <Mic_Upkeep+0x224>)
 800b0e0:	0019      	movs	r1, r3
 800b0e2:	2003      	movs	r0, #3
 800b0e4:	f005 fb9c 	bl	8010820 <CreateLine>
    MicState = MIC_STATE_INIT;
 800b0e8:	4b07      	ldr	r3, [pc, #28]	@ (800b108 <Mic_Upkeep+0x1e8>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	701a      	strb	r2, [r3, #0]
    break;
 800b0ee:	e004      	b.n	800b0fa <Mic_Upkeep+0x1da>
    break;
 800b0f0:	46c0      	nop			@ (mov r8, r8)
 800b0f2:	e002      	b.n	800b0fa <Mic_Upkeep+0x1da>
    break;
 800b0f4:	46c0      	nop			@ (mov r8, r8)
 800b0f6:	e000      	b.n	800b0fa <Mic_Upkeep+0x1da>
    break;
 800b0f8:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800b0fa:	4b03      	ldr	r3, [pc, #12]	@ (800b108 <Mic_Upkeep+0x1e8>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
}
 800b0fe:	0018      	movs	r0, r3
 800b100:	46bd      	mov	sp, r7
 800b102:	b002      	add	sp, #8
 800b104:	bd80      	pop	{r7, pc}
 800b106:	46c0      	nop			@ (mov r8, r8)
 800b108:	20000e1e 	.word	0x20000e1e
 800b10c:	08027d3c 	.word	0x08027d3c
 800b110:	08028e30 	.word	0x08028e30
 800b114:	20000f39 	.word	0x20000f39
 800b118:	20000e0c 	.word	0x20000e0c
 800b11c:	08027d58 	.word	0x08027d58
 800b120:	08027d60 	.word	0x08027d60
 800b124:	20000dbc 	.word	0x20000dbc
 800b128:	20000dfc 	.word	0x20000dfc
 800b12c:	42c80000 	.word	0x42c80000
 800b130:	3fe00000 	.word	0x3fe00000
 800b134:	40590000 	.word	0x40590000
 800b138:	000002f3 	.word	0x000002f3
 800b13c:	20000e08 	.word	0x20000e08
 800b140:	08027d68 	.word	0x08027d68
 800b144:	08027d88 	.word	0x08027d88

0800b148 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b14e:	1d3b      	adds	r3, r7, #4
 800b150:	0018      	movs	r0, r3
 800b152:	2314      	movs	r3, #20
 800b154:	001a      	movs	r2, r3
 800b156:	2100      	movs	r1, #0
 800b158:	f017 fcc0 	bl	8022adc <memset>
  RTC_DateTypeDef sDate = {0};
 800b15c:	003b      	movs	r3, r7
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800b162:	4b2e      	ldr	r3, [pc, #184]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b164:	4a2e      	ldr	r2, [pc, #184]	@ (800b220 <MX_RTC_Init+0xd8>)
 800b166:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b168:	4b2c      	ldr	r3, [pc, #176]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b16e:	4b2b      	ldr	r3, [pc, #172]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b170:	227f      	movs	r2, #127	@ 0x7f
 800b172:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b174:	4b29      	ldr	r3, [pc, #164]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b176:	22ff      	movs	r2, #255	@ 0xff
 800b178:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b17a:	4b28      	ldr	r3, [pc, #160]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800b180:	4b26      	ldr	r3, [pc, #152]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b182:	2200      	movs	r2, #0
 800b184:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b186:	4b25      	ldr	r3, [pc, #148]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b188:	2200      	movs	r2, #0
 800b18a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b18c:	4b23      	ldr	r3, [pc, #140]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b18e:	2200      	movs	r2, #0
 800b190:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b192:	4b22      	ldr	r3, [pc, #136]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b194:	0018      	movs	r0, r3
 800b196:	f00d faab 	bl	80186f0 <HAL_RTC_Init>
 800b19a:	1e03      	subs	r3, r0, #0
 800b19c:	d001      	beq.n	800b1a2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800b19e:	f7ff f8d9 	bl	800a354 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800b1a2:	1d3b      	adds	r3, r7, #4
 800b1a4:	220d      	movs	r2, #13
 800b1a6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800b1a8:	1d3b      	adds	r3, r7, #4
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800b1ae:	1d3b      	adds	r3, r7, #4
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b1b4:	1d3b      	adds	r3, r7, #4
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b1ba:	1d3b      	adds	r3, r7, #4
 800b1bc:	2200      	movs	r2, #0
 800b1be:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800b1c0:	1d39      	adds	r1, r7, #4
 800b1c2:	4b16      	ldr	r3, [pc, #88]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f00d fb2e 	bl	8018828 <HAL_RTC_SetTime>
 800b1cc:	1e03      	subs	r3, r0, #0
 800b1ce:	d001      	beq.n	800b1d4 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800b1d0:	f7ff f8c0 	bl	800a354 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800b1d4:	003b      	movs	r3, r7
 800b1d6:	2206      	movs	r2, #6
 800b1d8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800b1da:	003b      	movs	r3, r7
 800b1dc:	2211      	movs	r2, #17
 800b1de:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800b1e0:	003b      	movs	r3, r7
 800b1e2:	2217      	movs	r2, #23
 800b1e4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800b1e6:	003b      	movs	r3, r7
 800b1e8:	2218      	movs	r2, #24
 800b1ea:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b1ec:	0039      	movs	r1, r7
 800b1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	f00d fc20 	bl	8018a38 <HAL_RTC_SetDate>
 800b1f8:	1e03      	subs	r3, r0, #0
 800b1fa:	d001      	beq.n	800b200 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800b1fc:	f7ff f8aa 	bl	800a354 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800b200:	4b06      	ldr	r3, [pc, #24]	@ (800b21c <MX_RTC_Init+0xd4>)
 800b202:	2200      	movs	r2, #0
 800b204:	2100      	movs	r1, #0
 800b206:	0018      	movs	r0, r3
 800b208:	f00d fdd0 	bl	8018dac <HAL_RTCEx_SetWakeUpTimer_IT>
 800b20c:	1e03      	subs	r3, r0, #0
 800b20e:	d001      	beq.n	800b214 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800b210:	f7ff f8a0 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b214:	46c0      	nop			@ (mov r8, r8)
 800b216:	46bd      	mov	sp, r7
 800b218:	b006      	add	sp, #24
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20000e20 	.word	0x20000e20
 800b220:	40002800 	.word	0x40002800

0800b224 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a0a      	ldr	r2, [pc, #40]	@ (800b25c <HAL_RTC_MspInit+0x38>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d10e      	bne.n	800b254 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b236:	4b0a      	ldr	r3, [pc, #40]	@ (800b260 <HAL_RTC_MspInit+0x3c>)
 800b238:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b23a:	4b09      	ldr	r3, [pc, #36]	@ (800b260 <HAL_RTC_MspInit+0x3c>)
 800b23c:	2180      	movs	r1, #128	@ 0x80
 800b23e:	02c9      	lsls	r1, r1, #11
 800b240:	430a      	orrs	r2, r1
 800b242:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800b244:	2200      	movs	r2, #0
 800b246:	2100      	movs	r1, #0
 800b248:	2002      	movs	r0, #2
 800b24a:	f006 fbd9 	bl	8011a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800b24e:	2002      	movs	r0, #2
 800b250:	f006 fbeb 	bl	8011a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800b254:	46c0      	nop			@ (mov r8, r8)
 800b256:	46bd      	mov	sp, r7
 800b258:	b002      	add	sp, #8
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	40002800 	.word	0x40002800
 800b260:	40021000 	.word	0x40021000

0800b264 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800b264:	b580      	push	{r7, lr}
 800b266:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800b268:	4b02      	ldr	r3, [pc, #8]	@ (800b274 <sen5x_Get_sen5x_enable_state+0x10>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
}
 800b26c:	0018      	movs	r0, r3
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	46c0      	nop			@ (mov r8, r8)
 800b274:	20000e47 	.word	0x20000e47

0800b278 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	0002      	movs	r2, r0
 800b280:	1dfb      	adds	r3, r7, #7
 800b282:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800b284:	4b03      	ldr	r3, [pc, #12]	@ (800b294 <sen5x_Set_sen5x_state+0x1c>)
 800b286:	1dfa      	adds	r2, r7, #7
 800b288:	7812      	ldrb	r2, [r2, #0]
 800b28a:	701a      	strb	r2, [r3, #0]
}
 800b28c:	46c0      	nop			@ (mov r8, r8)
 800b28e:	46bd      	mov	sp, r7
 800b290:	b002      	add	sp, #8
 800b292:	bd80      	pop	{r7, pc}
 800b294:	20000e47 	.word	0x20000e47

0800b298 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800b2a0:	f005 ff0a 	bl	80110b8 <HAL_GetTick>
 800b2a4:	0002      	movs	r2, r0
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	18d2      	adds	r2, r2, r3
 800b2aa:	4b03      	ldr	r3, [pc, #12]	@ (800b2b8 <setsen5xReadTimer+0x20>)
 800b2ac:	601a      	str	r2, [r3, #0]
}
 800b2ae:	46c0      	nop			@ (mov r8, r8)
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	b002      	add	sp, #8
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	46c0      	nop			@ (mov r8, r8)
 800b2b8:	20000e54 	.word	0x20000e54

0800b2bc <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	0002      	movs	r2, r0
 800b2c4:	1dfb      	adds	r3, r7, #7
 800b2c6:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800b2c8:	4b03      	ldr	r3, [pc, #12]	@ (800b2d8 <setsen5xSamplecounter+0x1c>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
}
 800b2ce:	46c0      	nop			@ (mov r8, r8)
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	b002      	add	sp, #8
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	46c0      	nop			@ (mov r8, r8)
 800b2d8:	20000e50 	.word	0x20000e50

0800b2dc <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800b2e4:	f7ff f8ce 	bl	800a484 <IsPMSensorEnabled>
 800b2e8:	1e03      	subs	r3, r0, #0
 800b2ea:	d035      	beq.n	800b358 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800b2ec:	f003 ff8e 	bl	800f20c <batteryChargeCheck>
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d103      	bne.n	800b2fe <sen5x_enable+0x22>
      sen5x_Enable = true;
 800b2f6:	4b20      	ldr	r3, [pc, #128]	@ (800b378 <sen5x_enable+0x9c>)
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	e00d      	b.n	800b31a <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800b2fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b378 <sen5x_enable+0x9c>)
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	1e5a      	subs	r2, r3, #1
 800b304:	4193      	sbcs	r3, r2
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2201      	movs	r2, #1
 800b30a:	4053      	eors	r3, r2
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	1c1a      	adds	r2, r3, #0
 800b310:	2301      	movs	r3, #1
 800b312:	4013      	ands	r3, r2
 800b314:	b2da      	uxtb	r2, r3
 800b316:	4b18      	ldr	r3, [pc, #96]	@ (800b378 <sen5x_enable+0x9c>)
 800b318:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800b31a:	4b17      	ldr	r3, [pc, #92]	@ (800b378 <sen5x_enable+0x9c>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800b322:	2000      	movs	r0, #0
 800b324:	f7ff ffb8 	bl	800b298 <setsen5xReadTimer>
 800b328:	e009      	b.n	800b33e <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800b32a:	f005 fec5 	bl	80110b8 <HAL_GetTick>
 800b32e:	0002      	movs	r2, r0
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2164      	movs	r1, #100	@ 0x64
 800b334:	434b      	muls	r3, r1
 800b336:	18d3      	adds	r3, r2, r3
 800b338:	0018      	movs	r0, r3
 800b33a:	f7ff ffad 	bl	800b298 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800b33e:	4b0e      	ldr	r3, [pc, #56]	@ (800b378 <sen5x_enable+0x9c>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <sen5x_enable+0x6e>
 800b346:	4b0d      	ldr	r3, [pc, #52]	@ (800b37c <sen5x_enable+0xa0>)
 800b348:	e000      	b.n	800b34c <sen5x_enable+0x70>
 800b34a:	4b0d      	ldr	r3, [pc, #52]	@ (800b380 <sen5x_enable+0xa4>)
 800b34c:	4a0d      	ldr	r2, [pc, #52]	@ (800b384 <sen5x_enable+0xa8>)
 800b34e:	490e      	ldr	r1, [pc, #56]	@ (800b388 <sen5x_enable+0xac>)
 800b350:	2002      	movs	r0, #2
 800b352:	f005 fa65 	bl	8010820 <CreateLine>
 800b356:	e005      	b.n	800b364 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800b358:	4a0c      	ldr	r2, [pc, #48]	@ (800b38c <sen5x_enable+0xb0>)
 800b35a:	4b0b      	ldr	r3, [pc, #44]	@ (800b388 <sen5x_enable+0xac>)
 800b35c:	0019      	movs	r1, r3
 800b35e:	2002      	movs	r0, #2
 800b360:	f005 fa5e 	bl	8010820 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800b364:	4b0a      	ldr	r3, [pc, #40]	@ (800b390 <sen5x_enable+0xb4>)
 800b366:	2201      	movs	r2, #1
 800b368:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800b36a:	4b03      	ldr	r3, [pc, #12]	@ (800b378 <sen5x_enable+0x9c>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
}
 800b36e:	0018      	movs	r0, r3
 800b370:	46bd      	mov	sp, r7
 800b372:	b002      	add	sp, #8
 800b374:	bd80      	pop	{r7, pc}
 800b376:	46c0      	nop			@ (mov r8, r8)
 800b378:	20000e47 	.word	0x20000e47
 800b37c:	08027d8c 	.word	0x08027d8c
 800b380:	08027d94 	.word	0x08027d94
 800b384:	08027da0 	.word	0x08027da0
 800b388:	08027dbc 	.word	0x08027dbc
 800b38c:	08027dc0 	.word	0x08027dc0
 800b390:	2000009d 	.word	0x2000009d

0800b394 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800b398:	2380      	movs	r3, #128	@ 0x80
 800b39a:	015b      	lsls	r3, r3, #5
 800b39c:	480f      	ldr	r0, [pc, #60]	@ (800b3dc <sen5x_Power_On+0x48>)
 800b39e:	2201      	movs	r2, #1
 800b3a0:	0019      	movs	r1, r3
 800b3a2:	f007 f91a 	bl	80125da <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800b3a6:	4a0e      	ldr	r2, [pc, #56]	@ (800b3e0 <sen5x_Power_On+0x4c>)
 800b3a8:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e4 <sen5x_Power_On+0x50>)
 800b3aa:	0019      	movs	r1, r3
 800b3ac:	2003      	movs	r0, #3
 800b3ae:	f005 fa37 	bl	8010820 <CreateLine>
  HAL_Delay(150);
 800b3b2:	2096      	movs	r0, #150	@ 0x96
 800b3b4:	f005 fe8a 	bl	80110cc <HAL_Delay>
  if (sen5x_device_reset()) {
 800b3b8:	f001 f98c 	bl	800c6d4 <sen5x_device_reset>
 800b3bc:	1e03      	subs	r3, r0, #0
 800b3be:	d006      	beq.n	800b3ce <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800b3c0:	4a09      	ldr	r2, [pc, #36]	@ (800b3e8 <sen5x_Power_On+0x54>)
 800b3c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3ec <sen5x_Power_On+0x58>)
 800b3c4:	0019      	movs	r1, r3
 800b3c6:	2001      	movs	r0, #1
 800b3c8:	f005 fa2a 	bl	8010820 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800b3cc:	e002      	b.n	800b3d4 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800b3ce:	4b08      	ldr	r3, [pc, #32]	@ (800b3f0 <sen5x_Power_On+0x5c>)
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	701a      	strb	r2, [r3, #0]
}
 800b3d4:	46c0      	nop			@ (mov r8, r8)
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	46c0      	nop			@ (mov r8, r8)
 800b3dc:	50000800 	.word	0x50000800
 800b3e0:	08027de0 	.word	0x08027de0
 800b3e4:	08027dfc 	.word	0x08027dfc
 800b3e8:	08027e00 	.word	0x08027e00
 800b3ec:	08027e28 	.word	0x08027e28
 800b3f0:	20000e45 	.word	0x20000e45

0800b3f4 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800b3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b434 <sen5x_Power_Off+0x40>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d006      	beq.n	800b40e <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800b400:	4a0d      	ldr	r2, [pc, #52]	@ (800b438 <sen5x_Power_Off+0x44>)
 800b402:	4b0e      	ldr	r3, [pc, #56]	@ (800b43c <sen5x_Power_Off+0x48>)
 800b404:	0019      	movs	r1, r3
 800b406:	2003      	movs	r0, #3
 800b408:	f005 fa0a 	bl	8010820 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800b40c:	e00f      	b.n	800b42e <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800b40e:	4a0c      	ldr	r2, [pc, #48]	@ (800b440 <sen5x_Power_Off+0x4c>)
 800b410:	4b0a      	ldr	r3, [pc, #40]	@ (800b43c <sen5x_Power_Off+0x48>)
 800b412:	0019      	movs	r1, r3
 800b414:	2003      	movs	r0, #3
 800b416:	f005 fa03 	bl	8010820 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800b41a:	2380      	movs	r3, #128	@ 0x80
 800b41c:	015b      	lsls	r3, r3, #5
 800b41e:	4809      	ldr	r0, [pc, #36]	@ (800b444 <sen5x_Power_Off+0x50>)
 800b420:	2200      	movs	r2, #0
 800b422:	0019      	movs	r1, r3
 800b424:	f007 f8d9 	bl	80125da <HAL_GPIO_WritePin>
      sen5x_On = false;
 800b428:	4b07      	ldr	r3, [pc, #28]	@ (800b448 <sen5x_Power_Off+0x54>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	701a      	strb	r2, [r3, #0]
}
 800b42e:	46c0      	nop			@ (mov r8, r8)
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	20000e46 	.word	0x20000e46
 800b438:	08027e2c 	.word	0x08027e2c
 800b43c:	08027dfc 	.word	0x08027dfc
 800b440:	08027e5c 	.word	0x08027e5c
 800b444:	50000800 	.word	0x50000800
 800b448:	20000e45 	.word	0x20000e45

0800b44c <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800b450:	4b02      	ldr	r3, [pc, #8]	@ (800b45c <reset_fanCleaningDone+0x10>)
 800b452:	2200      	movs	r2, #0
 800b454:	701a      	strb	r2, [r3, #0]
}
 800b456:	46c0      	nop			@ (mov r8, r8)
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	20000e44 	.word	0x20000e44

0800b460 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b462:	b093      	sub	sp, #76	@ 0x4c
 800b464:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800b466:	2436      	movs	r4, #54	@ 0x36
 800b468:	193b      	adds	r3, r7, r4
 800b46a:	2200      	movs	r2, #0
 800b46c:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800b46e:	2335      	movs	r3, #53	@ 0x35
 800b470:	18fb      	adds	r3, r7, r3
 800b472:	2220      	movs	r2, #32
 800b474:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800b476:	2334      	movs	r3, #52	@ 0x34
 800b478:	18fb      	adds	r3, r7, r3
 800b47a:	2220      	movs	r2, #32
 800b47c:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800b47e:	f7ff ff89 	bl	800b394 <sen5x_Power_On>
  error = sen5x_device_reset();
 800b482:	0025      	movs	r5, r4
 800b484:	193c      	adds	r4, r7, r4
 800b486:	f001 f925 	bl	800c6d4 <sen5x_device_reset>
 800b48a:	0003      	movs	r3, r0
 800b48c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b48e:	002c      	movs	r4, r5
 800b490:	193b      	adds	r3, r7, r4
 800b492:	2200      	movs	r2, #0
 800b494:	5e9b      	ldrsh	r3, [r3, r2]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00b      	beq.n	800b4b2 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800b49a:	193b      	adds	r3, r7, r4
 800b49c:	2200      	movs	r2, #0
 800b49e:	5e9b      	ldrsh	r3, [r3, r2]
 800b4a0:	4a75      	ldr	r2, [pc, #468]	@ (800b678 <probe_sen5x+0x218>)
 800b4a2:	4976      	ldr	r1, [pc, #472]	@ (800b67c <probe_sen5x+0x21c>)
 800b4a4:	2001      	movs	r0, #1
 800b4a6:	f005 f9bb 	bl	8010820 <CreateLine>
      return error;
 800b4aa:	193b      	adds	r3, r7, r4
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	5e9b      	ldrsh	r3, [r3, r2]
 800b4b0:	e0de      	b.n	800b670 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800b4b2:	2536      	movs	r5, #54	@ 0x36
 800b4b4:	197c      	adds	r4, r7, r5
 800b4b6:	2335      	movs	r3, #53	@ 0x35
 800b4b8:	18fb      	adds	r3, r7, r3
 800b4ba:	781a      	ldrb	r2, [r3, #0]
 800b4bc:	230c      	movs	r3, #12
 800b4be:	18fb      	adds	r3, r7, r3
 800b4c0:	0011      	movs	r1, r2
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	f000 fff2 	bl	800c4ac <sen5x_get_serial_number>
 800b4c8:	0003      	movs	r3, r0
 800b4ca:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b4cc:	197b      	adds	r3, r7, r5
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	5e9b      	ldrsh	r3, [r3, r2]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00b      	beq.n	800b4ee <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800b4d6:	197b      	adds	r3, r7, r5
 800b4d8:	2200      	movs	r2, #0
 800b4da:	5e9a      	ldrsh	r2, [r3, r2]
 800b4dc:	4b68      	ldr	r3, [pc, #416]	@ (800b680 <probe_sen5x+0x220>)
 800b4de:	0011      	movs	r1, r2
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f017 f925 	bl	8022730 <iprintf>
      return error;
 800b4e6:	197b      	adds	r3, r7, r5
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	5e9b      	ldrsh	r3, [r3, r2]
 800b4ec:	e0c0      	b.n	800b670 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	18fa      	adds	r2, r7, r3
 800b4f2:	4b64      	ldr	r3, [pc, #400]	@ (800b684 <probe_sen5x+0x224>)
 800b4f4:	0011      	movs	r1, r2
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f017 f91a 	bl	8022730 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800b4fc:	2536      	movs	r5, #54	@ 0x36
 800b4fe:	197c      	adds	r4, r7, r5
 800b500:	2334      	movs	r3, #52	@ 0x34
 800b502:	18fb      	adds	r3, r7, r3
 800b504:	781a      	ldrb	r2, [r3, #0]
 800b506:	4b60      	ldr	r3, [pc, #384]	@ (800b688 <probe_sen5x+0x228>)
 800b508:	0011      	movs	r1, r2
 800b50a:	0018      	movs	r0, r3
 800b50c:	f000 ff78 	bl	800c400 <sen5x_get_product_name>
 800b510:	0003      	movs	r3, r0
 800b512:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b514:	197b      	adds	r3, r7, r5
 800b516:	2200      	movs	r2, #0
 800b518:	5e9b      	ldrsh	r3, [r3, r2]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00b      	beq.n	800b536 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800b51e:	197b      	adds	r3, r7, r5
 800b520:	2200      	movs	r2, #0
 800b522:	5e9a      	ldrsh	r2, [r3, r2]
 800b524:	4b59      	ldr	r3, [pc, #356]	@ (800b68c <probe_sen5x+0x22c>)
 800b526:	0011      	movs	r1, r2
 800b528:	0018      	movs	r0, r3
 800b52a:	f017 f901 	bl	8022730 <iprintf>
      return error;
 800b52e:	197b      	adds	r3, r7, r5
 800b530:	2200      	movs	r2, #0
 800b532:	5e9b      	ldrsh	r3, [r3, r2]
 800b534:	e09c      	b.n	800b670 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800b536:	4a54      	ldr	r2, [pc, #336]	@ (800b688 <probe_sen5x+0x228>)
 800b538:	4b55      	ldr	r3, [pc, #340]	@ (800b690 <probe_sen5x+0x230>)
 800b53a:	0011      	movs	r1, r2
 800b53c:	0018      	movs	r0, r3
 800b53e:	f017 f8f7 	bl	8022730 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800b542:	2636      	movs	r6, #54	@ 0x36
 800b544:	19bc      	adds	r4, r7, r6
 800b546:	2308      	movs	r3, #8
 800b548:	18fd      	adds	r5, r7, r3
 800b54a:	2309      	movs	r3, #9
 800b54c:	18fa      	adds	r2, r7, r3
 800b54e:	230a      	movs	r3, #10
 800b550:	18f9      	adds	r1, r7, r3
 800b552:	230b      	movs	r3, #11
 800b554:	18f8      	adds	r0, r7, r3
 800b556:	1d7b      	adds	r3, r7, #5
 800b558:	9302      	str	r3, [sp, #8]
 800b55a:	1dbb      	adds	r3, r7, #6
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	1dfb      	adds	r3, r7, #7
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	002b      	movs	r3, r5
 800b564:	f000 fff8 	bl	800c558 <sen5x_get_version>
 800b568:	0003      	movs	r3, r0
 800b56a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800b56c:	19bb      	adds	r3, r7, r6
 800b56e:	2200      	movs	r2, #0
 800b570:	5e9b      	ldrsh	r3, [r3, r2]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00b      	beq.n	800b58e <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800b576:	19bb      	adds	r3, r7, r6
 800b578:	2200      	movs	r2, #0
 800b57a:	5e9a      	ldrsh	r2, [r3, r2]
 800b57c:	4b45      	ldr	r3, [pc, #276]	@ (800b694 <probe_sen5x+0x234>)
 800b57e:	0011      	movs	r1, r2
 800b580:	0018      	movs	r0, r3
 800b582:	f017 f8d5 	bl	8022730 <iprintf>
      return error;
 800b586:	19bb      	adds	r3, r7, r6
 800b588:	2200      	movs	r2, #0
 800b58a:	5e9b      	ldrsh	r3, [r3, r2]
 800b58c:	e070      	b.n	800b670 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800b58e:	230b      	movs	r3, #11
 800b590:	18fb      	adds	r3, r7, r3
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	0019      	movs	r1, r3
 800b596:	230a      	movs	r3, #10
 800b598:	18fb      	adds	r3, r7, r3
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	001a      	movs	r2, r3
 800b59e:	2308      	movs	r3, #8
 800b5a0:	18fb      	adds	r3, r7, r3
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	001c      	movs	r4, r3
 800b5a6:	1dfb      	adds	r3, r7, #7
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	483b      	ldr	r0, [pc, #236]	@ (800b698 <probe_sen5x+0x238>)
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	0023      	movs	r3, r4
 800b5b0:	f017 f8be 	bl	8022730 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800b5b8:	262e      	movs	r6, #46	@ 0x2e
 800b5ba:	19bb      	adds	r3, r7, r6
 800b5bc:	2200      	movs	r2, #0
 800b5be:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800b5c0:	232c      	movs	r3, #44	@ 0x2c
 800b5c2:	18fb      	adds	r3, r7, r3
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800b5c8:	4934      	ldr	r1, [pc, #208]	@ (800b69c <probe_sen5x+0x23c>)
 800b5ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5cc:	f7f5 fce8 	bl	8000fa0 <__aeabi_fmul>
 800b5d0:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800b5d2:	1c18      	adds	r0, r3, #0
 800b5d4:	f7f5 ffdc 	bl	8001590 <__aeabi_f2iz>
 800b5d8:	0003      	movs	r3, r0
 800b5da:	b218      	sxth	r0, r3
 800b5dc:	2536      	movs	r5, #54	@ 0x36
 800b5de:	197c      	adds	r4, r7, r5
 800b5e0:	232c      	movs	r3, #44	@ 0x2c
 800b5e2:	18fb      	adds	r3, r7, r3
 800b5e4:	881a      	ldrh	r2, [r3, #0]
 800b5e6:	19bb      	adds	r3, r7, r6
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	5e5b      	ldrsh	r3, [r3, r1]
 800b5ec:	0019      	movs	r1, r3
 800b5ee:	f000 fea3 	bl	800c338 <sen5x_set_temperature_offset_parameters>
 800b5f2:	0003      	movs	r3, r0
 800b5f4:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b5f6:	197b      	adds	r3, r7, r5
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	5e9b      	ldrsh	r3, [r3, r2]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00b      	beq.n	800b618 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800b600:	197b      	adds	r3, r7, r5
 800b602:	2200      	movs	r2, #0
 800b604:	5e9b      	ldrsh	r3, [r3, r2]
 800b606:	4a26      	ldr	r2, [pc, #152]	@ (800b6a0 <probe_sen5x+0x240>)
 800b608:	491c      	ldr	r1, [pc, #112]	@ (800b67c <probe_sen5x+0x21c>)
 800b60a:	2001      	movs	r0, #1
 800b60c:	f005 f908 	bl	8010820 <CreateLine>
      return error;
 800b610:	197b      	adds	r3, r7, r5
 800b612:	2200      	movs	r2, #0
 800b614:	5e9b      	ldrsh	r3, [r3, r2]
 800b616:	e02b      	b.n	800b670 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800b618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b61a:	f7f7 ff23 	bl	8003464 <__aeabi_f2d>
 800b61e:	0002      	movs	r2, r0
 800b620:	000b      	movs	r3, r1
 800b622:	4820      	ldr	r0, [pc, #128]	@ (800b6a4 <probe_sen5x+0x244>)
 800b624:	4920      	ldr	r1, [pc, #128]	@ (800b6a8 <probe_sen5x+0x248>)
 800b626:	9200      	str	r2, [sp, #0]
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	0002      	movs	r2, r0
 800b62c:	2002      	movs	r0, #2
 800b62e:	f005 f8f7 	bl	8010820 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800b632:	f7fb fcf1 	bl	8007018 <Check_USB_PowerOn>
 800b636:	0003      	movs	r3, r0
 800b638:	001a      	movs	r2, r3
 800b63a:	2301      	movs	r3, #1
 800b63c:	4053      	eors	r3, r2
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00a      	beq.n	800b65a <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800b644:	f7ff fed6 	bl	800b3f4 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800b648:	f005 fd36 	bl	80110b8 <HAL_GetTick>
 800b64c:	0003      	movs	r3, r0
 800b64e:	22fa      	movs	r2, #250	@ 0xfa
 800b650:	00d2      	lsls	r2, r2, #3
 800b652:	189a      	adds	r2, r3, r2
 800b654:	4b15      	ldr	r3, [pc, #84]	@ (800b6ac <probe_sen5x+0x24c>)
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	e006      	b.n	800b668 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800b65a:	f005 fd2d 	bl	80110b8 <HAL_GetTick>
 800b65e:	0003      	movs	r3, r0
 800b660:	4a13      	ldr	r2, [pc, #76]	@ (800b6b0 <probe_sen5x+0x250>)
 800b662:	189a      	adds	r2, r3, r2
 800b664:	4b11      	ldr	r3, [pc, #68]	@ (800b6ac <probe_sen5x+0x24c>)
 800b666:	601a      	str	r2, [r3, #0]
  }
  return error;
 800b668:	2336      	movs	r3, #54	@ 0x36
 800b66a:	18fb      	adds	r3, r7, r3
 800b66c:	2200      	movs	r2, #0
 800b66e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b670:	0018      	movs	r0, r3
 800b672:	46bd      	mov	sp, r7
 800b674:	b00f      	add	sp, #60	@ 0x3c
 800b676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b678:	08027e78 	.word	0x08027e78
 800b67c:	08027e28 	.word	0x08027e28
 800b680:	08027ea4 	.word	0x08027ea4
 800b684:	08027ed4 	.word	0x08027ed4
 800b688:	20000e48 	.word	0x20000e48
 800b68c:	08027ee8 	.word	0x08027ee8
 800b690:	08027f18 	.word	0x08027f18
 800b694:	08027f2c 	.word	0x08027f2c
 800b698:	08027f58 	.word	0x08027f58
 800b69c:	43480000 	.word	0x43480000
 800b6a0:	08027f7c 	.word	0x08027f7c
 800b6a4:	08027fbc 	.word	0x08027fbc
 800b6a8:	08027dbc 	.word	0x08027dbc
 800b6ac:	20000e54 	.word	0x20000e54
 800b6b0:	00006d60 	.word	0x00006d60

0800b6b4 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800b6b4:	b590      	push	{r4, r7, lr}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800b6ba:	1dbb      	adds	r3, r7, #6
 800b6bc:	2200      	movs	r2, #0
 800b6be:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800b6c0:	4b1b      	ldr	r3, [pc, #108]	@ (800b730 <sen5x_lightup_measurement+0x7c>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00b      	beq.n	800b6e0 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800b6c8:	4a1a      	ldr	r2, [pc, #104]	@ (800b734 <sen5x_lightup_measurement+0x80>)
 800b6ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b738 <sen5x_lightup_measurement+0x84>)
 800b6cc:	0019      	movs	r1, r3
 800b6ce:	2002      	movs	r0, #2
 800b6d0:	f005 f8a6 	bl	8010820 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800b6d4:	1dbc      	adds	r4, r7, #6
 800b6d6:	f000 fcbb 	bl	800c050 <sen5x_start_measurement_without_pm>
 800b6da:	0003      	movs	r3, r0
 800b6dc:	8023      	strh	r3, [r4, #0]
 800b6de:	e00a      	b.n	800b6f6 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800b6e0:	4a16      	ldr	r2, [pc, #88]	@ (800b73c <sen5x_lightup_measurement+0x88>)
 800b6e2:	4b15      	ldr	r3, [pc, #84]	@ (800b738 <sen5x_lightup_measurement+0x84>)
 800b6e4:	0019      	movs	r1, r3
 800b6e6:	2002      	movs	r0, #2
 800b6e8:	f005 f89a 	bl	8010820 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800b6ec:	1dbc      	adds	r4, r7, #6
 800b6ee:	f000 fc81 	bl	800bff4 <sen5x_start_measurement>
 800b6f2:	0003      	movs	r3, r0
 800b6f4:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800b6f6:	1dbb      	adds	r3, r7, #6
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	5e9b      	ldrsh	r3, [r3, r2]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d008      	beq.n	800b712 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800b700:	1dbb      	adds	r3, r7, #6
 800b702:	2200      	movs	r2, #0
 800b704:	5e9b      	ldrsh	r3, [r3, r2]
 800b706:	4a0e      	ldr	r2, [pc, #56]	@ (800b740 <sen5x_lightup_measurement+0x8c>)
 800b708:	490e      	ldr	r1, [pc, #56]	@ (800b744 <sen5x_lightup_measurement+0x90>)
 800b70a:	2001      	movs	r0, #1
 800b70c:	f005 f888 	bl	8010820 <CreateLine>
 800b710:	e007      	b.n	800b722 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800b712:	f7fb fcb1 	bl	8007078 <showTime>
    Info("sen5x_start_measurement executed");
 800b716:	4a0c      	ldr	r2, [pc, #48]	@ (800b748 <sen5x_lightup_measurement+0x94>)
 800b718:	4b07      	ldr	r3, [pc, #28]	@ (800b738 <sen5x_lightup_measurement+0x84>)
 800b71a:	0019      	movs	r1, r3
 800b71c:	2002      	movs	r0, #2
 800b71e:	f005 f87f 	bl	8010820 <CreateLine>
  }
  return error;
 800b722:	1dbb      	adds	r3, r7, #6
 800b724:	2200      	movs	r2, #0
 800b726:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b728:	0018      	movs	r0, r3
 800b72a:	46bd      	mov	sp, r7
 800b72c:	b003      	add	sp, #12
 800b72e:	bd90      	pop	{r4, r7, pc}
 800b730:	20000e46 	.word	0x20000e46
 800b734:	08027ff4 	.word	0x08027ff4
 800b738:	08027dbc 	.word	0x08027dbc
 800b73c:	08028020 	.word	0x08028020
 800b740:	08028040 	.word	0x08028040
 800b744:	08027e28 	.word	0x08027e28
 800b748:	08028070 	.word	0x08028070

0800b74c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800b74c:	b590      	push	{r4, r7, lr}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800b752:	1dbb      	adds	r3, r7, #6
 800b754:	2200      	movs	r2, #0
 800b756:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800b758:	4b21      	ldr	r3, [pc, #132]	@ (800b7e0 <sen5x_extinguish_measurement+0x94>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01e      	beq.n	800b79e <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800b760:	4a20      	ldr	r2, [pc, #128]	@ (800b7e4 <sen5x_extinguish_measurement+0x98>)
 800b762:	4b21      	ldr	r3, [pc, #132]	@ (800b7e8 <sen5x_extinguish_measurement+0x9c>)
 800b764:	0019      	movs	r1, r3
 800b766:	2002      	movs	r0, #2
 800b768:	f005 f85a 	bl	8010820 <CreateLine>
    Info("PM measurement is disabled");
 800b76c:	4a1f      	ldr	r2, [pc, #124]	@ (800b7ec <sen5x_extinguish_measurement+0xa0>)
 800b76e:	4b1e      	ldr	r3, [pc, #120]	@ (800b7e8 <sen5x_extinguish_measurement+0x9c>)
 800b770:	0019      	movs	r1, r3
 800b772:	2002      	movs	r0, #2
 800b774:	f005 f854 	bl	8010820 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800b778:	1dbc      	adds	r4, r7, #6
 800b77a:	f000 fc69 	bl	800c050 <sen5x_start_measurement_without_pm>
 800b77e:	0003      	movs	r3, r0
 800b780:	8023      	strh	r3, [r4, #0]
    if (error) {
 800b782:	1dbb      	adds	r3, r7, #6
 800b784:	2200      	movs	r2, #0
 800b786:	5e9b      	ldrsh	r3, [r3, r2]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d022      	beq.n	800b7d2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800b78c:	1dbb      	adds	r3, r7, #6
 800b78e:	2200      	movs	r2, #0
 800b790:	5e9b      	ldrsh	r3, [r3, r2]
 800b792:	4a17      	ldr	r2, [pc, #92]	@ (800b7f0 <sen5x_extinguish_measurement+0xa4>)
 800b794:	4917      	ldr	r1, [pc, #92]	@ (800b7f4 <sen5x_extinguish_measurement+0xa8>)
 800b796:	2001      	movs	r0, #1
 800b798:	f005 f842 	bl	8010820 <CreateLine>
 800b79c:	e019      	b.n	800b7d2 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800b79e:	1dbc      	adds	r4, r7, #6
 800b7a0:	f000 fc84 	bl	800c0ac <sen5x_stop_measurement>
 800b7a4:	0003      	movs	r3, r0
 800b7a6:	8023      	strh	r3, [r4, #0]
    showTime();
 800b7a8:	f7fb fc66 	bl	8007078 <showTime>
    Info("sen5x_stop_measurement executed");
 800b7ac:	4a12      	ldr	r2, [pc, #72]	@ (800b7f8 <sen5x_extinguish_measurement+0xac>)
 800b7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b7e8 <sen5x_extinguish_measurement+0x9c>)
 800b7b0:	0019      	movs	r1, r3
 800b7b2:	2002      	movs	r0, #2
 800b7b4:	f005 f834 	bl	8010820 <CreateLine>
    if (error) {
 800b7b8:	1dbb      	adds	r3, r7, #6
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	5e9b      	ldrsh	r3, [r3, r2]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d007      	beq.n	800b7d2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800b7c2:	1dbb      	adds	r3, r7, #6
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	5e9b      	ldrsh	r3, [r3, r2]
 800b7c8:	4a0c      	ldr	r2, [pc, #48]	@ (800b7fc <sen5x_extinguish_measurement+0xb0>)
 800b7ca:	490a      	ldr	r1, [pc, #40]	@ (800b7f4 <sen5x_extinguish_measurement+0xa8>)
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	f005 f827 	bl	8010820 <CreateLine>
    }
  }
  return error;
 800b7d2:	1dbb      	adds	r3, r7, #6
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b7d8:	0018      	movs	r0, r3
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	b003      	add	sp, #12
 800b7de:	bd90      	pop	{r4, r7, pc}
 800b7e0:	20000e46 	.word	0x20000e46
 800b7e4:	08028094 	.word	0x08028094
 800b7e8:	08027dbc 	.word	0x08027dbc
 800b7ec:	080280cc 	.word	0x080280cc
 800b7f0:	080280e8 	.word	0x080280e8
 800b7f4:	08027e28 	.word	0x08027e28
 800b7f8:	08028128 	.word	0x08028128
 800b7fc:	08028148 	.word	0x08028148

0800b800 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800b800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b802:	b08d      	sub	sp, #52	@ 0x34
 800b804:	af04      	add	r7, sp, #16
 800b806:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800b808:	261e      	movs	r6, #30
 800b80a:	19bb      	adds	r3, r7, r6
 800b80c:	2200      	movs	r2, #0
 800b80e:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800b810:	19bc      	adds	r4, r7, r6
 800b812:	2316      	movs	r3, #22
 800b814:	18fd      	adds	r5, r7, r3
 800b816:	2318      	movs	r3, #24
 800b818:	18fa      	adds	r2, r7, r3
 800b81a:	231a      	movs	r3, #26
 800b81c:	18f9      	adds	r1, r7, r3
 800b81e:	231c      	movs	r3, #28
 800b820:	18f8      	adds	r0, r7, r3
 800b822:	230e      	movs	r3, #14
 800b824:	18fb      	adds	r3, r7, r3
 800b826:	9303      	str	r3, [sp, #12]
 800b828:	2310      	movs	r3, #16
 800b82a:	18fb      	adds	r3, r7, r3
 800b82c:	9302      	str	r3, [sp, #8]
 800b82e:	2312      	movs	r3, #18
 800b830:	18fb      	adds	r3, r7, r3
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	2314      	movs	r3, #20
 800b836:	18fb      	adds	r3, r7, r3
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	002b      	movs	r3, r5
 800b83c:	f000 fcb8 	bl	800c1b0 <sen5x_read_measured_values>
 800b840:	0003      	movs	r3, r0
 800b842:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800b844:	19bb      	adds	r3, r7, r6
 800b846:	2200      	movs	r2, #0
 800b848:	5e9b      	ldrsh	r3, [r3, r2]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <sen5x_read_measurement+0x56>
    return error;
 800b84e:	19bb      	adds	r3, r7, r6
 800b850:	2200      	movs	r2, #0
 800b852:	5e9b      	ldrsh	r3, [r3, r2]
 800b854:	e02c      	b.n	800b8b0 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800b856:	231c      	movs	r3, #28
 800b858:	18fb      	adds	r3, r7, r3
 800b85a:	881a      	ldrh	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800b860:	231a      	movs	r3, #26
 800b862:	18fb      	adds	r3, r7, r3
 800b864:	881a      	ldrh	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800b86a:	2318      	movs	r3, #24
 800b86c:	18fb      	adds	r3, r7, r3
 800b86e:	881a      	ldrh	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800b874:	2316      	movs	r3, #22
 800b876:	18fb      	adds	r3, r7, r3
 800b878:	881a      	ldrh	r2, [r3, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800b87e:	2314      	movs	r3, #20
 800b880:	18fb      	adds	r3, r7, r3
 800b882:	2200      	movs	r2, #0
 800b884:	5e9a      	ldrsh	r2, [r3, r2]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800b88a:	2312      	movs	r3, #18
 800b88c:	18fb      	adds	r3, r7, r3
 800b88e:	2200      	movs	r2, #0
 800b890:	5e9a      	ldrsh	r2, [r3, r2]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800b896:	2310      	movs	r3, #16
 800b898:	18fb      	adds	r3, r7, r3
 800b89a:	2200      	movs	r2, #0
 800b89c:	5e9a      	ldrsh	r2, [r3, r2]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800b8a2:	230e      	movs	r3, #14
 800b8a4:	18fb      	adds	r3, r7, r3
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	5e9a      	ldrsh	r2, [r3, r2]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	81da      	strh	r2, [r3, #14]
  return 0;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	b009      	add	sp, #36	@ 0x24
 800b8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8b8 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800b8bc:	4b63      	ldr	r3, [pc, #396]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b8be:	881b      	ldrh	r3, [r3, #0]
 800b8c0:	4a63      	ldr	r2, [pc, #396]	@ (800ba50 <sen5x_printvalues+0x198>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d013      	beq.n	800b8ee <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800b8c6:	4b61      	ldr	r3, [pc, #388]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	0018      	movs	r0, r3
 800b8cc:	f7f5 fe80 	bl	80015d0 <__aeabi_i2f>
 800b8d0:	1c03      	adds	r3, r0, #0
 800b8d2:	4960      	ldr	r1, [pc, #384]	@ (800ba54 <sen5x_printvalues+0x19c>)
 800b8d4:	1c18      	adds	r0, r3, #0
 800b8d6:	f7f5 f97d 	bl	8000bd4 <__aeabi_fdiv>
 800b8da:	1c03      	adds	r3, r0, #0
 800b8dc:	1c18      	adds	r0, r3, #0
 800b8de:	f7f7 fdc1 	bl	8003464 <__aeabi_f2d>
 800b8e2:	0002      	movs	r2, r0
 800b8e4:	000b      	movs	r3, r1
 800b8e6:	495c      	ldr	r1, [pc, #368]	@ (800ba58 <sen5x_printvalues+0x1a0>)
 800b8e8:	0008      	movs	r0, r1
 800b8ea:	f016 ff21 	bl	8022730 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800b8ee:	4b57      	ldr	r3, [pc, #348]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b8f0:	885b      	ldrh	r3, [r3, #2]
 800b8f2:	4a57      	ldr	r2, [pc, #348]	@ (800ba50 <sen5x_printvalues+0x198>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d013      	beq.n	800b920 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800b8f8:	4b54      	ldr	r3, [pc, #336]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b8fa:	885b      	ldrh	r3, [r3, #2]
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f7f5 fe67 	bl	80015d0 <__aeabi_i2f>
 800b902:	1c03      	adds	r3, r0, #0
 800b904:	4953      	ldr	r1, [pc, #332]	@ (800ba54 <sen5x_printvalues+0x19c>)
 800b906:	1c18      	adds	r0, r3, #0
 800b908:	f7f5 f964 	bl	8000bd4 <__aeabi_fdiv>
 800b90c:	1c03      	adds	r3, r0, #0
 800b90e:	1c18      	adds	r0, r3, #0
 800b910:	f7f7 fda8 	bl	8003464 <__aeabi_f2d>
 800b914:	0002      	movs	r2, r0
 800b916:	000b      	movs	r3, r1
 800b918:	4950      	ldr	r1, [pc, #320]	@ (800ba5c <sen5x_printvalues+0x1a4>)
 800b91a:	0008      	movs	r0, r1
 800b91c:	f016 ff08 	bl	8022730 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800b920:	4b4a      	ldr	r3, [pc, #296]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b922:	889b      	ldrh	r3, [r3, #4]
 800b924:	4a4a      	ldr	r2, [pc, #296]	@ (800ba50 <sen5x_printvalues+0x198>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d013      	beq.n	800b952 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800b92a:	4b48      	ldr	r3, [pc, #288]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b92c:	889b      	ldrh	r3, [r3, #4]
 800b92e:	0018      	movs	r0, r3
 800b930:	f7f5 fe4e 	bl	80015d0 <__aeabi_i2f>
 800b934:	1c03      	adds	r3, r0, #0
 800b936:	4947      	ldr	r1, [pc, #284]	@ (800ba54 <sen5x_printvalues+0x19c>)
 800b938:	1c18      	adds	r0, r3, #0
 800b93a:	f7f5 f94b 	bl	8000bd4 <__aeabi_fdiv>
 800b93e:	1c03      	adds	r3, r0, #0
 800b940:	1c18      	adds	r0, r3, #0
 800b942:	f7f7 fd8f 	bl	8003464 <__aeabi_f2d>
 800b946:	0002      	movs	r2, r0
 800b948:	000b      	movs	r3, r1
 800b94a:	4945      	ldr	r1, [pc, #276]	@ (800ba60 <sen5x_printvalues+0x1a8>)
 800b94c:	0008      	movs	r0, r1
 800b94e:	f016 feef 	bl	8022730 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800b952:	4b3e      	ldr	r3, [pc, #248]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b954:	88db      	ldrh	r3, [r3, #6]
 800b956:	4a3e      	ldr	r2, [pc, #248]	@ (800ba50 <sen5x_printvalues+0x198>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d013      	beq.n	800b984 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800b95c:	4b3b      	ldr	r3, [pc, #236]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b95e:	88db      	ldrh	r3, [r3, #6]
 800b960:	0018      	movs	r0, r3
 800b962:	f7f5 fe35 	bl	80015d0 <__aeabi_i2f>
 800b966:	1c03      	adds	r3, r0, #0
 800b968:	493a      	ldr	r1, [pc, #232]	@ (800ba54 <sen5x_printvalues+0x19c>)
 800b96a:	1c18      	adds	r0, r3, #0
 800b96c:	f7f5 f932 	bl	8000bd4 <__aeabi_fdiv>
 800b970:	1c03      	adds	r3, r0, #0
 800b972:	1c18      	adds	r0, r3, #0
 800b974:	f7f7 fd76 	bl	8003464 <__aeabi_f2d>
 800b978:	0002      	movs	r2, r0
 800b97a:	000b      	movs	r3, r1
 800b97c:	4939      	ldr	r1, [pc, #228]	@ (800ba64 <sen5x_printvalues+0x1ac>)
 800b97e:	0008      	movs	r0, r1
 800b980:	f016 fed6 	bl	8022730 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800b984:	4b31      	ldr	r3, [pc, #196]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b986:	2208      	movs	r2, #8
 800b988:	5e9b      	ldrsh	r3, [r3, r2]
 800b98a:	4a37      	ldr	r2, [pc, #220]	@ (800ba68 <sen5x_printvalues+0x1b0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d014      	beq.n	800b9ba <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800b990:	4b2e      	ldr	r3, [pc, #184]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b992:	2208      	movs	r2, #8
 800b994:	5e9b      	ldrsh	r3, [r3, r2]
 800b996:	0018      	movs	r0, r3
 800b998:	f7f5 fe1a 	bl	80015d0 <__aeabi_i2f>
 800b99c:	1c03      	adds	r3, r0, #0
 800b99e:	4933      	ldr	r1, [pc, #204]	@ (800ba6c <sen5x_printvalues+0x1b4>)
 800b9a0:	1c18      	adds	r0, r3, #0
 800b9a2:	f7f5 f917 	bl	8000bd4 <__aeabi_fdiv>
 800b9a6:	1c03      	adds	r3, r0, #0
 800b9a8:	1c18      	adds	r0, r3, #0
 800b9aa:	f7f7 fd5b 	bl	8003464 <__aeabi_f2d>
 800b9ae:	0002      	movs	r2, r0
 800b9b0:	000b      	movs	r3, r1
 800b9b2:	492f      	ldr	r1, [pc, #188]	@ (800ba70 <sen5x_printvalues+0x1b8>)
 800b9b4:	0008      	movs	r0, r1
 800b9b6:	f016 febb 	bl	8022730 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800b9ba:	4b24      	ldr	r3, [pc, #144]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b9bc:	220a      	movs	r2, #10
 800b9be:	5e9b      	ldrsh	r3, [r3, r2]
 800b9c0:	4a29      	ldr	r2, [pc, #164]	@ (800ba68 <sen5x_printvalues+0x1b0>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d014      	beq.n	800b9f0 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800b9c6:	4b21      	ldr	r3, [pc, #132]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b9c8:	220a      	movs	r2, #10
 800b9ca:	5e9b      	ldrsh	r3, [r3, r2]
 800b9cc:	0018      	movs	r0, r3
 800b9ce:	f7f5 fdff 	bl	80015d0 <__aeabi_i2f>
 800b9d2:	1c03      	adds	r3, r0, #0
 800b9d4:	4927      	ldr	r1, [pc, #156]	@ (800ba74 <sen5x_printvalues+0x1bc>)
 800b9d6:	1c18      	adds	r0, r3, #0
 800b9d8:	f7f5 f8fc 	bl	8000bd4 <__aeabi_fdiv>
 800b9dc:	1c03      	adds	r3, r0, #0
 800b9de:	1c18      	adds	r0, r3, #0
 800b9e0:	f7f7 fd40 	bl	8003464 <__aeabi_f2d>
 800b9e4:	0002      	movs	r2, r0
 800b9e6:	000b      	movs	r3, r1
 800b9e8:	4923      	ldr	r1, [pc, #140]	@ (800ba78 <sen5x_printvalues+0x1c0>)
 800b9ea:	0008      	movs	r0, r1
 800b9ec:	f016 fea0 	bl	8022730 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800b9f0:	4b16      	ldr	r3, [pc, #88]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b9f2:	220c      	movs	r2, #12
 800b9f4:	5e9b      	ldrsh	r3, [r3, r2]
 800b9f6:	4a1c      	ldr	r2, [pc, #112]	@ (800ba68 <sen5x_printvalues+0x1b0>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d00e      	beq.n	800ba1a <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800b9fc:	4b13      	ldr	r3, [pc, #76]	@ (800ba4c <sen5x_printvalues+0x194>)
 800b9fe:	220c      	movs	r2, #12
 800ba00:	5e9b      	ldrsh	r3, [r3, r2]
 800ba02:	210a      	movs	r1, #10
 800ba04:	0018      	movs	r0, r3
 800ba06:	f7f4 fc57 	bl	80002b8 <__divsi3>
 800ba0a:	0003      	movs	r3, r0
 800ba0c:	b21b      	sxth	r3, r3
 800ba0e:	001a      	movs	r2, r3
 800ba10:	4b1a      	ldr	r3, [pc, #104]	@ (800ba7c <sen5x_printvalues+0x1c4>)
 800ba12:	0011      	movs	r1, r2
 800ba14:	0018      	movs	r0, r3
 800ba16:	f016 fe8b 	bl	8022730 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ba1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba4c <sen5x_printvalues+0x194>)
 800ba1c:	220e      	movs	r2, #14
 800ba1e:	5e9b      	ldrsh	r3, [r3, r2]
 800ba20:	4a11      	ldr	r2, [pc, #68]	@ (800ba68 <sen5x_printvalues+0x1b0>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d00e      	beq.n	800ba44 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800ba26:	4b09      	ldr	r3, [pc, #36]	@ (800ba4c <sen5x_printvalues+0x194>)
 800ba28:	220e      	movs	r2, #14
 800ba2a:	5e9b      	ldrsh	r3, [r3, r2]
 800ba2c:	210a      	movs	r1, #10
 800ba2e:	0018      	movs	r0, r3
 800ba30:	f7f4 fc42 	bl	80002b8 <__divsi3>
 800ba34:	0003      	movs	r3, r0
 800ba36:	b21b      	sxth	r3, r3
 800ba38:	001a      	movs	r2, r3
 800ba3a:	4b11      	ldr	r3, [pc, #68]	@ (800ba80 <sen5x_printvalues+0x1c8>)
 800ba3c:	0011      	movs	r1, r2
 800ba3e:	0018      	movs	r0, r3
 800ba40:	f016 fe76 	bl	8022730 <iprintf>
  }
}
 800ba44:	46c0      	nop			@ (mov r8, r8)
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	46c0      	nop			@ (mov r8, r8)
 800ba4c:	20000e58 	.word	0x20000e58
 800ba50:	0000ffff 	.word	0x0000ffff
 800ba54:	41200000 	.word	0x41200000
 800ba58:	08028178 	.word	0x08028178
 800ba5c:	080281a4 	.word	0x080281a4
 800ba60:	080281d0 	.word	0x080281d0
 800ba64:	080281fc 	.word	0x080281fc
 800ba68:	00007fff 	.word	0x00007fff
 800ba6c:	42c80000 	.word	0x42c80000
 800ba70:	08028228 	.word	0x08028228
 800ba74:	43480000 	.word	0x43480000
 800ba78:	0802824c 	.word	0x0802824c
 800ba7c:	08028274 	.word	0x08028274
 800ba80:	0802828c 	.word	0x0802828c

0800ba84 <sen5xStore>:

void sen5xStore() {
 800ba84:	b580      	push	{r7, lr}
 800ba86:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ba88:	4b2e      	ldr	r3, [pc, #184]	@ (800bb44 <sen5xStore+0xc0>)
 800ba8a:	885b      	ldrh	r3, [r3, #2]
 800ba8c:	4a2e      	ldr	r2, [pc, #184]	@ (800bb48 <sen5xStore+0xc4>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d004      	beq.n	800ba9c <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800ba92:	4b2c      	ldr	r3, [pc, #176]	@ (800bb44 <sen5xStore+0xc0>)
 800ba94:	885b      	ldrh	r3, [r3, #2]
 800ba96:	0018      	movs	r0, r3
 800ba98:	f7f7 fee2 	bl	8003860 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ba9c:	4b29      	ldr	r3, [pc, #164]	@ (800bb44 <sen5xStore+0xc0>)
 800ba9e:	88db      	ldrh	r3, [r3, #6]
 800baa0:	4a29      	ldr	r2, [pc, #164]	@ (800bb48 <sen5xStore+0xc4>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d004      	beq.n	800bab0 <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800baa6:	4b27      	ldr	r3, [pc, #156]	@ (800bb44 <sen5xStore+0xc0>)
 800baa8:	88db      	ldrh	r3, [r3, #6]
 800baaa:	0018      	movs	r0, r3
 800baac:	f7f7 ff04 	bl	80038b8 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800bab0:	4b26      	ldr	r3, [pc, #152]	@ (800bb4c <sen5xStore+0xc8>)
 800bab2:	791b      	ldrb	r3, [r3, #4]
 800bab4:	2b34      	cmp	r3, #52	@ 0x34
 800bab6:	d003      	beq.n	800bac0 <sen5xStore+0x3c>
 800bab8:	4b24      	ldr	r3, [pc, #144]	@ (800bb4c <sen5xStore+0xc8>)
 800baba:	791b      	ldrb	r3, [r3, #4]
 800babc:	2b35      	cmp	r3, #53	@ 0x35
 800babe:	d13d      	bne.n	800bb3c <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800bac0:	4b23      	ldr	r3, [pc, #140]	@ (800bb50 <sen5xStore+0xcc>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2201      	movs	r2, #1
 800bac6:	4053      	eors	r3, r2
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d103      	bne.n	800bad6 <sen5xStore+0x52>
 800bace:	4b21      	ldr	r3, [pc, #132]	@ (800bb54 <sen5xStore+0xd0>)
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d032      	beq.n	800bb3c <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800bad6:	4b1b      	ldr	r3, [pc, #108]	@ (800bb44 <sen5xStore+0xc0>)
 800bad8:	220c      	movs	r2, #12
 800bada:	5e9b      	ldrsh	r3, [r3, r2]
 800badc:	4a1e      	ldr	r2, [pc, #120]	@ (800bb58 <sen5xStore+0xd4>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d019      	beq.n	800bb16 <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800bae2:	4b18      	ldr	r3, [pc, #96]	@ (800bb44 <sen5xStore+0xc0>)
 800bae4:	220c      	movs	r2, #12
 800bae6:	5e9b      	ldrsh	r3, [r3, r2]
 800bae8:	210a      	movs	r1, #10
 800baea:	0018      	movs	r0, r3
 800baec:	f7f4 fbe4 	bl	80002b8 <__divsi3>
 800baf0:	0003      	movs	r3, r0
 800baf2:	b21b      	sxth	r3, r3
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	0018      	movs	r0, r3
 800baf8:	f003 fe42 	bl	800f780 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800bafc:	4b11      	ldr	r3, [pc, #68]	@ (800bb44 <sen5xStore+0xc0>)
 800bafe:	220c      	movs	r2, #12
 800bb00:	5e9b      	ldrsh	r3, [r3, r2]
 800bb02:	210a      	movs	r1, #10
 800bb04:	0018      	movs	r0, r3
 800bb06:	f7f4 fbd7 	bl	80002b8 <__divsi3>
 800bb0a:	0003      	movs	r3, r0
 800bb0c:	b21b      	sxth	r3, r3
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	0018      	movs	r0, r3
 800bb12:	f7f7 fe5b 	bl	80037cc <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800bb16:	4b0b      	ldr	r3, [pc, #44]	@ (800bb44 <sen5xStore+0xc0>)
 800bb18:	220e      	movs	r2, #14
 800bb1a:	5e9b      	ldrsh	r3, [r3, r2]
 800bb1c:	4a0e      	ldr	r2, [pc, #56]	@ (800bb58 <sen5xStore+0xd4>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d00c      	beq.n	800bb3c <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800bb22:	4b08      	ldr	r3, [pc, #32]	@ (800bb44 <sen5xStore+0xc0>)
 800bb24:	220e      	movs	r2, #14
 800bb26:	5e9b      	ldrsh	r3, [r3, r2]
 800bb28:	210a      	movs	r1, #10
 800bb2a:	0018      	movs	r0, r3
 800bb2c:	f7f4 fbc4 	bl	80002b8 <__divsi3>
 800bb30:	0003      	movs	r3, r0
 800bb32:	b21b      	sxth	r3, r3
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	0018      	movs	r0, r3
 800bb38:	f7f7 feea 	bl	8003910 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800bb3c:	46c0      	nop			@ (mov r8, r8)
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	46c0      	nop			@ (mov r8, r8)
 800bb44:	20000e58 	.word	0x20000e58
 800bb48:	0000ffff 	.word	0x0000ffff
 800bb4c:	20000e48 	.word	0x20000e48
 800bb50:	20000e46 	.word	0x20000e46
 800bb54:	20001dd5 	.word	0x20001dd5
 800bb58:	00007fff 	.word	0x00007fff

0800bb5c <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800bb5c:	b590      	push	{r4, r7, lr}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af02      	add	r7, sp, #8
 800bb62:	6039      	str	r1, [r7, #0]
 800bb64:	0011      	movs	r1, r2
 800bb66:	1dfb      	adds	r3, r7, #7
 800bb68:	1c02      	adds	r2, r0, #0
 800bb6a:	701a      	strb	r2, [r3, #0]
 800bb6c:	1d3b      	adds	r3, r7, #4
 800bb6e:	1c0a      	adds	r2, r1, #0
 800bb70:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800bb72:	1dfb      	adds	r3, r7, #7
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	18db      	adds	r3, r3, r3
 800bb7a:	b299      	uxth	r1, r3
 800bb7c:	1d3b      	adds	r3, r7, #4
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	4805      	ldr	r0, [pc, #20]	@ (800bb98 <sensirion_i2c_hal_read+0x3c>)
 800bb84:	2464      	movs	r4, #100	@ 0x64
 800bb86:	9400      	str	r4, [sp, #0]
 800bb88:	f006 fefe 	bl	8012988 <HAL_I2C_Master_Receive>
 800bb8c:	0003      	movs	r3, r0
 800bb8e:	b25b      	sxtb	r3, r3
}
 800bb90:	0018      	movs	r0, r3
 800bb92:	46bd      	mov	sp, r7
 800bb94:	b003      	add	sp, #12
 800bb96:	bd90      	pop	{r4, r7, pc}
 800bb98:	20000c1c 	.word	0x20000c1c

0800bb9c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800bb9c:	b590      	push	{r4, r7, lr}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af02      	add	r7, sp, #8
 800bba2:	6039      	str	r1, [r7, #0]
 800bba4:	0011      	movs	r1, r2
 800bba6:	1dfb      	adds	r3, r7, #7
 800bba8:	1c02      	adds	r2, r0, #0
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	1d3b      	adds	r3, r7, #4
 800bbae:	1c0a      	adds	r2, r1, #0
 800bbb0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800bbb2:	1dfb      	adds	r3, r7, #7
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	18db      	adds	r3, r3, r3
 800bbba:	b299      	uxth	r1, r3
 800bbbc:	1d3b      	adds	r3, r7, #4
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	4805      	ldr	r0, [pc, #20]	@ (800bbd8 <sensirion_i2c_hal_write+0x3c>)
 800bbc4:	2464      	movs	r4, #100	@ 0x64
 800bbc6:	9400      	str	r4, [sp, #0]
 800bbc8:	f006 fdd6 	bl	8012778 <HAL_I2C_Master_Transmit>
 800bbcc:	0003      	movs	r3, r0
 800bbce:	b25b      	sxtb	r3, r3
}
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	b003      	add	sp, #12
 800bbd6:	bd90      	pop	{r4, r7, pc}
 800bbd8:	20000c1c 	.word	0x20000c1c

0800bbdc <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	22fa      	movs	r2, #250	@ 0xfa
 800bbe8:	0091      	lsls	r1, r2, #2
 800bbea:	0018      	movs	r0, r3
 800bbec:	f7f4 fada 	bl	80001a4 <__udivsi3>
 800bbf0:	0003      	movs	r3, r0
 800bbf2:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	22fa      	movs	r2, #250	@ 0xfa
 800bbf8:	0091      	lsls	r1, r2, #2
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f7f4 fb58 	bl	80002b0 <__aeabi_uidivmod>
 800bc00:	1e0b      	subs	r3, r1, #0
 800bc02:	d002      	beq.n	800bc0a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	3301      	adds	r3, #1
 800bc08:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	0018      	movs	r0, r3
 800bc0e:	f005 fa5d 	bl	80110cc <HAL_Delay>
}
 800bc12:	46c0      	nop			@ (mov r8, r8)
 800bc14:	46bd      	mov	sp, r7
 800bc16:	b004      	add	sp, #16
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800bc26:	1d3b      	adds	r3, r7, #4
 800bc28:	0018      	movs	r0, r3
 800bc2a:	f000 fd01 	bl	800c630 <sen5x_read_device_status>
 800bc2e:	1e03      	subs	r3, r0, #0
 800bc30:	d007      	beq.n	800bc42 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800bc32:	4a28      	ldr	r2, [pc, #160]	@ (800bcd4 <sen5x_check_for_errors+0xb8>)
 800bc34:	4b28      	ldr	r3, [pc, #160]	@ (800bcd8 <sen5x_check_for_errors+0xbc>)
 800bc36:	0019      	movs	r1, r3
 800bc38:	2001      	movs	r0, #1
 800bc3a:	f004 fdf1 	bl	8010820 <CreateLine>
    return true;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e043      	b.n	800bcca <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <sen5x_check_for_errors+0x30>
    return false;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	e03e      	b.n	800bcca <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	2380      	movs	r3, #128	@ 0x80
 800bc50:	039b      	lsls	r3, r3, #14
 800bc52:	4013      	ands	r3, r2
 800bc54:	d005      	beq.n	800bc62 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800bc56:	4a21      	ldr	r2, [pc, #132]	@ (800bcdc <sen5x_check_for_errors+0xc0>)
 800bc58:	4b21      	ldr	r3, [pc, #132]	@ (800bce0 <sen5x_check_for_errors+0xc4>)
 800bc5a:	0019      	movs	r1, r3
 800bc5c:	2003      	movs	r0, #3
 800bc5e:	f004 fddf 	bl	8010820 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	2380      	movs	r3, #128	@ 0x80
 800bc66:	031b      	lsls	r3, r3, #12
 800bc68:	4013      	ands	r3, r2
 800bc6a:	d005      	beq.n	800bc78 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800bc6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bce4 <sen5x_check_for_errors+0xc8>)
 800bc6e:	4b1c      	ldr	r3, [pc, #112]	@ (800bce0 <sen5x_check_for_errors+0xc4>)
 800bc70:	0019      	movs	r1, r3
 800bc72:	2003      	movs	r0, #3
 800bc74:	f004 fdd4 	bl	8010820 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2280      	movs	r2, #128	@ 0x80
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	d005      	beq.n	800bc8c <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800bc80:	4a19      	ldr	r2, [pc, #100]	@ (800bce8 <sen5x_check_for_errors+0xcc>)
 800bc82:	4b17      	ldr	r3, [pc, #92]	@ (800bce0 <sen5x_check_for_errors+0xc4>)
 800bc84:	0019      	movs	r1, r3
 800bc86:	2003      	movs	r0, #3
 800bc88:	f004 fdca 	bl	8010820 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2240      	movs	r2, #64	@ 0x40
 800bc90:	4013      	ands	r3, r2
 800bc92:	d005      	beq.n	800bca0 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800bc94:	4a15      	ldr	r2, [pc, #84]	@ (800bcec <sen5x_check_for_errors+0xd0>)
 800bc96:	4b12      	ldr	r3, [pc, #72]	@ (800bce0 <sen5x_check_for_errors+0xc4>)
 800bc98:	0019      	movs	r1, r3
 800bc9a:	2003      	movs	r0, #3
 800bc9c:	f004 fdc0 	bl	8010820 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2220      	movs	r2, #32
 800bca4:	4013      	ands	r3, r2
 800bca6:	d005      	beq.n	800bcb4 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800bca8:	4a11      	ldr	r2, [pc, #68]	@ (800bcf0 <sen5x_check_for_errors+0xd4>)
 800bcaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bce0 <sen5x_check_for_errors+0xc4>)
 800bcac:	0019      	movs	r1, r3
 800bcae:	2003      	movs	r0, #3
 800bcb0:	f004 fdb6 	bl	8010820 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2210      	movs	r2, #16
 800bcb8:	4013      	ands	r3, r2
 800bcba:	d005      	beq.n	800bcc8 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800bcbc:	4a0d      	ldr	r2, [pc, #52]	@ (800bcf4 <sen5x_check_for_errors+0xd8>)
 800bcbe:	4b08      	ldr	r3, [pc, #32]	@ (800bce0 <sen5x_check_for_errors+0xc4>)
 800bcc0:	0019      	movs	r1, r3
 800bcc2:	2003      	movs	r0, #3
 800bcc4:	f004 fdac 	bl	8010820 <CreateLine>
  }
  return 1;
 800bcc8:	2301      	movs	r3, #1
}
 800bcca:	0018      	movs	r0, r3
 800bccc:	46bd      	mov	sp, r7
 800bcce:	b002      	add	sp, #8
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	46c0      	nop			@ (mov r8, r8)
 800bcd4:	080282a4 	.word	0x080282a4
 800bcd8:	08027e28 	.word	0x08027e28
 800bcdc:	080282d0 	.word	0x080282d0
 800bce0:	08027dfc 	.word	0x08027dfc
 800bce4:	080282f0 	.word	0x080282f0
 800bce8:	0802830c 	.word	0x0802830c
 800bcec:	08028330 	.word	0x08028330
 800bcf0:	08028350 	.word	0x08028350
 800bcf4:	08028364 	.word	0x08028364

0800bcf8 <set_light_on_state>:

void set_light_on_state(void) {
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800bcfc:	4b15      	ldr	r3, [pc, #84]	@ (800bd54 <set_light_on_state+0x5c>)
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2201      	movs	r2, #1
 800bd02:	4053      	eors	r3, r2
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d008      	beq.n	800bd1c <set_light_on_state+0x24>
    sen5x_Power_On();
 800bd0a:	f7ff fb43 	bl	800b394 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800bd0e:	4a12      	ldr	r2, [pc, #72]	@ (800bd58 <set_light_on_state+0x60>)
 800bd10:	4b12      	ldr	r3, [pc, #72]	@ (800bd5c <set_light_on_state+0x64>)
 800bd12:	0019      	movs	r1, r3
 800bd14:	2003      	movs	r0, #3
 800bd16:	f004 fd83 	bl	8010820 <CreateLine>
 800bd1a:	e00a      	b.n	800bd32 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800bd1c:	f005 f9cc 	bl	80110b8 <HAL_GetTick>
 800bd20:	0002      	movs	r2, r0
 800bd22:	4b0f      	ldr	r3, [pc, #60]	@ (800bd60 <set_light_on_state+0x68>)
 800bd24:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800bd26:	4a0f      	ldr	r2, [pc, #60]	@ (800bd64 <set_light_on_state+0x6c>)
 800bd28:	4b0c      	ldr	r3, [pc, #48]	@ (800bd5c <set_light_on_state+0x64>)
 800bd2a:	0019      	movs	r1, r3
 800bd2c:	2003      	movs	r0, #3
 800bd2e:	f004 fd77 	bl	8010820 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800bd32:	f7ff fcbf 	bl	800b6b4 <sen5x_lightup_measurement>
 800bd36:	1e03      	subs	r3, r0, #0
 800bd38:	d005      	beq.n	800bd46 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800bd3a:	4a0b      	ldr	r2, [pc, #44]	@ (800bd68 <set_light_on_state+0x70>)
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd6c <set_light_on_state+0x74>)
 800bd3e:	0019      	movs	r1, r3
 800bd40:	2001      	movs	r0, #1
 800bd42:	f004 fd6d 	bl	8010820 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800bd46:	4b0a      	ldr	r3, [pc, #40]	@ (800bd70 <set_light_on_state+0x78>)
 800bd48:	2203      	movs	r2, #3
 800bd4a:	701a      	strb	r2, [r3, #0]
}
 800bd4c:	46c0      	nop			@ (mov r8, r8)
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	46c0      	nop			@ (mov r8, r8)
 800bd54:	20000e45 	.word	0x20000e45
 800bd58:	080283a0 	.word	0x080283a0
 800bd5c:	08027dfc 	.word	0x08027dfc
 800bd60:	20000e54 	.word	0x20000e54
 800bd64:	080283cc 	.word	0x080283cc
 800bd68:	080283e4 	.word	0x080283e4
 800bd6c:	08027e28 	.word	0x08027e28
 800bd70:	2000009d 	.word	0x2000009d

0800bd74 <sen5x_statemachine>:

void sen5x_statemachine() {
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800bd7a:	1dfb      	adds	r3, r7, #7
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800bd80:	4b86      	ldr	r3, [pc, #536]	@ (800bf9c <sen5x_statemachine+0x228>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	0018      	movs	r0, r3
 800bd86:	f004 fcf5 	bl	8010774 <TimestampIsReached>
 800bd8a:	1e03      	subs	r3, r0, #0
 800bd8c:	d100      	bne.n	800bd90 <sen5x_statemachine+0x1c>
 800bd8e:	e100      	b.n	800bf92 <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800bd90:	4b83      	ldr	r3, [pc, #524]	@ (800bfa0 <sen5x_statemachine+0x22c>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b05      	cmp	r3, #5
 800bd96:	d900      	bls.n	800bd9a <sen5x_statemachine+0x26>
 800bd98:	e0fb      	b.n	800bf92 <sen5x_statemachine+0x21e>
 800bd9a:	009a      	lsls	r2, r3, #2
 800bd9c:	4b81      	ldr	r3, [pc, #516]	@ (800bfa4 <sen5x_statemachine+0x230>)
 800bd9e:	18d3      	adds	r3, r2, r3
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800bda4:	4a80      	ldr	r2, [pc, #512]	@ (800bfa8 <sen5x_statemachine+0x234>)
 800bda6:	4b81      	ldr	r3, [pc, #516]	@ (800bfac <sen5x_statemachine+0x238>)
 800bda8:	0019      	movs	r1, r3
 800bdaa:	2001      	movs	r0, #1
 800bdac:	f004 fd38 	bl	8010820 <CreateLine>
      SetPMSensorStatus(false);
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	f7fe fb87 	bl	800a4c4 <SetPMSensorStatus>
      DisablePMSensor();
 800bdb6:	f7fe fb1d 	bl	800a3f4 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800bdba:	f005 f97d 	bl	80110b8 <HAL_GetTick>
 800bdbe:	0003      	movs	r3, r0
 800bdc0:	4a7b      	ldr	r2, [pc, #492]	@ (800bfb0 <sen5x_statemachine+0x23c>)
 800bdc2:	189a      	adds	r2, r3, r2
 800bdc4:	4b75      	ldr	r3, [pc, #468]	@ (800bf9c <sen5x_statemachine+0x228>)
 800bdc6:	601a      	str	r2, [r3, #0]
      break;
 800bdc8:	e0e3      	b.n	800bf92 <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800bdca:	f005 f975 	bl	80110b8 <HAL_GetTick>
 800bdce:	0003      	movs	r3, r0
 800bdd0:	4a78      	ldr	r2, [pc, #480]	@ (800bfb4 <sen5x_statemachine+0x240>)
 800bdd2:	189a      	adds	r2, r3, r2
 800bdd4:	4b71      	ldr	r3, [pc, #452]	@ (800bf9c <sen5x_statemachine+0x228>)
 800bdd6:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800bdd8:	f7ff ff8e 	bl	800bcf8 <set_light_on_state>
      break;
 800bddc:	e0d9      	b.n	800bf92 <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800bdde:	4b70      	ldr	r3, [pc, #448]	@ (800bfa0 <sen5x_statemachine+0x22c>)
 800bde0:	2202      	movs	r2, #2
 800bde2:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800bde4:	4b74      	ldr	r3, [pc, #464]	@ (800bfb8 <sen5x_statemachine+0x244>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b05      	cmp	r3, #5
 800bdea:	d905      	bls.n	800bdf8 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800bdec:	4b6c      	ldr	r3, [pc, #432]	@ (800bfa0 <sen5x_statemachine+0x22c>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800bdf2:	f7ff faff 	bl	800b3f4 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800bdf6:	e0c9      	b.n	800bf8c <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800bdf8:	f7ff ff10 	bl	800bc1c <sen5x_check_for_errors>
 800bdfc:	1e03      	subs	r3, r0, #0
 800bdfe:	d01f      	beq.n	800be40 <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800be00:	f000 fc68 	bl	800c6d4 <sen5x_device_reset>
 800be04:	1e03      	subs	r3, r0, #0
 800be06:	d00f      	beq.n	800be28 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800be08:	4a6c      	ldr	r2, [pc, #432]	@ (800bfbc <sen5x_statemachine+0x248>)
 800be0a:	4b68      	ldr	r3, [pc, #416]	@ (800bfac <sen5x_statemachine+0x238>)
 800be0c:	0019      	movs	r1, r3
 800be0e:	2001      	movs	r0, #1
 800be10:	f004 fd06 	bl	8010820 <CreateLine>
            sen5xErrors++;
 800be14:	4b68      	ldr	r3, [pc, #416]	@ (800bfb8 <sen5x_statemachine+0x244>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	3301      	adds	r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	4b66      	ldr	r3, [pc, #408]	@ (800bfb8 <sen5x_statemachine+0x244>)
 800be1e:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800be20:	4b5f      	ldr	r3, [pc, #380]	@ (800bfa0 <sen5x_statemachine+0x22c>)
 800be22:	2203      	movs	r2, #3
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	e005      	b.n	800be34 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800be28:	4a65      	ldr	r2, [pc, #404]	@ (800bfc0 <sen5x_statemachine+0x24c>)
 800be2a:	4b66      	ldr	r3, [pc, #408]	@ (800bfc4 <sen5x_statemachine+0x250>)
 800be2c:	0019      	movs	r1, r3
 800be2e:	2002      	movs	r0, #2
 800be30:	f004 fcf6 	bl	8010820 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800be34:	f005 f940 	bl	80110b8 <HAL_GetTick>
 800be38:	0002      	movs	r2, r0
 800be3a:	4b58      	ldr	r3, [pc, #352]	@ (800bf9c <sen5x_statemachine+0x228>)
 800be3c:	601a      	str	r2, [r3, #0]
      break;
 800be3e:	e0a5      	b.n	800bf8c <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800be40:	4b5d      	ldr	r3, [pc, #372]	@ (800bfb8 <sen5x_statemachine+0x244>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d100      	bne.n	800be4a <sen5x_statemachine+0xd6>
 800be48:	e0a0      	b.n	800bf8c <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800be4a:	4b5b      	ldr	r3, [pc, #364]	@ (800bfb8 <sen5x_statemachine+0x244>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800be50:	4a5d      	ldr	r2, [pc, #372]	@ (800bfc8 <sen5x_statemachine+0x254>)
 800be52:	4b5e      	ldr	r3, [pc, #376]	@ (800bfcc <sen5x_statemachine+0x258>)
 800be54:	0019      	movs	r1, r3
 800be56:	2003      	movs	r0, #3
 800be58:	f004 fce2 	bl	8010820 <CreateLine>
      break;
 800be5c:	e096      	b.n	800bf8c <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800be5e:	1dfb      	adds	r3, r7, #7
 800be60:	0018      	movs	r0, r3
 800be62:	f000 f953 	bl	800c10c <sen5x_read_data_ready>
      if (data_ready) {
 800be66:	1dfb      	adds	r3, r7, #7
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d02c      	beq.n	800bec8 <sen5x_statemachine+0x154>
        SetPMIndicator();
 800be6e:	f003 fbe7 	bl	800f640 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800be72:	4b57      	ldr	r3, [pc, #348]	@ (800bfd0 <sen5x_statemachine+0x25c>)
 800be74:	0018      	movs	r0, r3
 800be76:	f7ff fcc3 	bl	800b800 <sen5x_read_measurement>
 800be7a:	1e03      	subs	r3, r0, #0
 800be7c:	d00b      	beq.n	800be96 <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800be7e:	4a55      	ldr	r2, [pc, #340]	@ (800bfd4 <sen5x_statemachine+0x260>)
 800be80:	4b4a      	ldr	r3, [pc, #296]	@ (800bfac <sen5x_statemachine+0x238>)
 800be82:	0019      	movs	r1, r3
 800be84:	2001      	movs	r0, #1
 800be86:	f004 fccb 	bl	8010820 <CreateLine>
          sen5xErrors++;
 800be8a:	4b4b      	ldr	r3, [pc, #300]	@ (800bfb8 <sen5x_statemachine+0x244>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	3301      	adds	r3, #1
 800be90:	b2da      	uxtb	r2, r3
 800be92:	4b49      	ldr	r3, [pc, #292]	@ (800bfb8 <sen5x_statemachine+0x244>)
 800be94:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800be96:	4b50      	ldr	r3, [pc, #320]	@ (800bfd8 <sen5x_statemachine+0x264>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	3301      	adds	r3, #1
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	4b4e      	ldr	r3, [pc, #312]	@ (800bfd8 <sen5x_statemachine+0x264>)
 800bea0:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800bea2:	4b4d      	ldr	r3, [pc, #308]	@ (800bfd8 <sen5x_statemachine+0x264>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	2b1f      	cmp	r3, #31
 800bea8:	d102      	bne.n	800beb0 <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800beaa:	4b4b      	ldr	r3, [pc, #300]	@ (800bfd8 <sen5x_statemachine+0x264>)
 800beac:	2200      	movs	r2, #0
 800beae:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800beb0:	4b49      	ldr	r3, [pc, #292]	@ (800bfd8 <sen5x_statemachine+0x264>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d901      	bls.n	800bebc <sen5x_statemachine+0x148>
          sen5xStore();
 800beb8:	f7ff fde4 	bl	800ba84 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800bebc:	4b46      	ldr	r3, [pc, #280]	@ (800bfd8 <sen5x_statemachine+0x264>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d101      	bne.n	800bec8 <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800bec4:	f7ff fcf8 	bl	800b8b8 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800bec8:	4b44      	ldr	r3, [pc, #272]	@ (800bfdc <sen5x_statemachine+0x268>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d103      	bne.n	800bed8 <sen5x_statemachine+0x164>
 800bed0:	4b41      	ldr	r3, [pc, #260]	@ (800bfd8 <sen5x_statemachine+0x264>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d95b      	bls.n	800bf90 <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800bed8:	4b31      	ldr	r3, [pc, #196]	@ (800bfa0 <sen5x_statemachine+0x22c>)
 800beda:	2204      	movs	r2, #4
 800bedc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bede:	e057      	b.n	800bf90 <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800bee0:	f7fb fb76 	bl	80075d0 <RTC_GetWeekday>
 800bee4:	0003      	movs	r3, r0
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d11a      	bne.n	800bf20 <sen5x_statemachine+0x1ac>
 800beea:	4b3d      	ldr	r3, [pc, #244]	@ (800bfe0 <sen5x_statemachine+0x26c>)
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	2201      	movs	r2, #1
 800bef0:	4053      	eors	r3, r2
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d013      	beq.n	800bf20 <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800bef8:	f000 f9ee 	bl	800c2d8 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800befc:	4a39      	ldr	r2, [pc, #228]	@ (800bfe4 <sen5x_statemachine+0x270>)
 800befe:	4b31      	ldr	r3, [pc, #196]	@ (800bfc4 <sen5x_statemachine+0x250>)
 800bf00:	0019      	movs	r1, r3
 800bf02:	2002      	movs	r0, #2
 800bf04:	f004 fc8c 	bl	8010820 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800bf08:	f005 f8d6 	bl	80110b8 <HAL_GetTick>
 800bf0c:	0003      	movs	r3, r0
 800bf0e:	4a36      	ldr	r2, [pc, #216]	@ (800bfe8 <sen5x_statemachine+0x274>)
 800bf10:	189a      	adds	r2, r3, r2
 800bf12:	4b22      	ldr	r3, [pc, #136]	@ (800bf9c <sen5x_statemachine+0x228>)
 800bf14:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800bf16:	4b32      	ldr	r3, [pc, #200]	@ (800bfe0 <sen5x_statemachine+0x26c>)
 800bf18:	2201      	movs	r2, #1
 800bf1a:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800bf1c:	f7ff fbca 	bl	800b6b4 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800bf20:	4b1f      	ldr	r3, [pc, #124]	@ (800bfa0 <sen5x_statemachine+0x22c>)
 800bf22:	2205      	movs	r2, #5
 800bf24:	701a      	strb	r2, [r3, #0]
      break;
 800bf26:	e034      	b.n	800bf92 <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800bf28:	4b2c      	ldr	r3, [pc, #176]	@ (800bfdc <sen5x_statemachine+0x268>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	4053      	eors	r3, r2
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d01c      	beq.n	800bf70 <sen5x_statemachine+0x1fc>
 800bf36:	4b2d      	ldr	r3, [pc, #180]	@ (800bfec <sen5x_statemachine+0x278>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	4053      	eors	r3, r2
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d015      	beq.n	800bf70 <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800bf44:	f7ff fc02 	bl	800b74c <sen5x_extinguish_measurement>
 800bf48:	1e03      	subs	r3, r0, #0
 800bf4a:	d005      	beq.n	800bf58 <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800bf4c:	4a28      	ldr	r2, [pc, #160]	@ (800bff0 <sen5x_statemachine+0x27c>)
 800bf4e:	4b17      	ldr	r3, [pc, #92]	@ (800bfac <sen5x_statemachine+0x238>)
 800bf50:	0019      	movs	r1, r3
 800bf52:	2001      	movs	r0, #1
 800bf54:	f004 fc64 	bl	8010820 <CreateLine>
        }
        sen5xSamples = 0;
 800bf58:	4b1f      	ldr	r3, [pc, #124]	@ (800bfd8 <sen5x_statemachine+0x264>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800bf5e:	f7ff fa49 	bl	800b3f4 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800bf62:	2000      	movs	r0, #0
 800bf64:	f7fe faae 	bl	800a4c4 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800bf68:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa0 <sen5x_statemachine+0x22c>)
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	701a      	strb	r2, [r3, #0]
 800bf6e:	e002      	b.n	800bf76 <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800bf70:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa0 <sen5x_statemachine+0x22c>)
 800bf72:	2203      	movs	r2, #3
 800bf74:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800bf76:	f003 fb89 	bl	800f68c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800bf7a:	f005 f89d 	bl	80110b8 <HAL_GetTick>
 800bf7e:	0003      	movs	r3, r0
 800bf80:	22fa      	movs	r2, #250	@ 0xfa
 800bf82:	0092      	lsls	r2, r2, #2
 800bf84:	189a      	adds	r2, r3, r2
 800bf86:	4b05      	ldr	r3, [pc, #20]	@ (800bf9c <sen5x_statemachine+0x228>)
 800bf88:	601a      	str	r2, [r3, #0]
    }
  }
}
 800bf8a:	e002      	b.n	800bf92 <sen5x_statemachine+0x21e>
      break;
 800bf8c:	46c0      	nop			@ (mov r8, r8)
 800bf8e:	e000      	b.n	800bf92 <sen5x_statemachine+0x21e>
      break;
 800bf90:	46c0      	nop			@ (mov r8, r8)
}
 800bf92:	46c0      	nop			@ (mov r8, r8)
 800bf94:	46bd      	mov	sp, r7
 800bf96:	b002      	add	sp, #8
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	46c0      	nop			@ (mov r8, r8)
 800bf9c:	20000e54 	.word	0x20000e54
 800bfa0:	2000009d 	.word	0x2000009d
 800bfa4:	08028e3c 	.word	0x08028e3c
 800bfa8:	08028410 	.word	0x08028410
 800bfac:	08027e28 	.word	0x08027e28
 800bfb0:	002fefd8 	.word	0x002fefd8
 800bfb4:	00005910 	.word	0x00005910
 800bfb8:	20000e51 	.word	0x20000e51
 800bfbc:	08028440 	.word	0x08028440
 800bfc0:	08028458 	.word	0x08028458
 800bfc4:	08027dbc 	.word	0x08027dbc
 800bfc8:	08028470 	.word	0x08028470
 800bfcc:	08027dfc 	.word	0x08027dfc
 800bfd0:	20000e58 	.word	0x20000e58
 800bfd4:	08028484 	.word	0x08028484
 800bfd8:	20000e50 	.word	0x20000e50
 800bfdc:	20001dd5 	.word	0x20001dd5
 800bfe0:	20000e44 	.word	0x20000e44
 800bfe4:	080284b4 	.word	0x080284b4
 800bfe8:	00002710 	.word	0x00002710
 800bfec:	20001dd6 	.word	0x20001dd6
 800bff0:	080284cc 	.word	0x080284cc

0800bff4 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800bff4:	b590      	push	{r4, r7, lr}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800bffa:	1dbb      	adds	r3, r7, #6
 800bffc:	2200      	movs	r2, #0
 800bffe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800c000:	1dbc      	adds	r4, r7, #6
 800c002:	1dbb      	adds	r3, r7, #6
 800c004:	8819      	ldrh	r1, [r3, #0]
 800c006:	003b      	movs	r3, r7
 800c008:	2221      	movs	r2, #33	@ 0x21
 800c00a:	0018      	movs	r0, r3
 800c00c:	f001 fb56 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c010:	0003      	movs	r3, r0
 800c012:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c014:	1d3c      	adds	r4, r7, #4
 800c016:	1dbb      	adds	r3, r7, #6
 800c018:	881a      	ldrh	r2, [r3, #0]
 800c01a:	003b      	movs	r3, r7
 800c01c:	0019      	movs	r1, r3
 800c01e:	2069      	movs	r0, #105	@ 0x69
 800c020:	f001 fbd0 	bl	800d7c4 <sensirion_i2c_write_data>
 800c024:	0003      	movs	r3, r0
 800c026:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c028:	1d3b      	adds	r3, r7, #4
 800c02a:	2200      	movs	r2, #0
 800c02c:	5e9b      	ldrsh	r3, [r3, r2]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <sen5x_start_measurement+0x46>
        return error;
 800c032:	1d3b      	adds	r3, r7, #4
 800c034:	2200      	movs	r2, #0
 800c036:	5e9b      	ldrsh	r3, [r3, r2]
 800c038:	e004      	b.n	800c044 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800c03a:	4b04      	ldr	r3, [pc, #16]	@ (800c04c <sen5x_start_measurement+0x58>)
 800c03c:	0018      	movs	r0, r3
 800c03e:	f7ff fdcd 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c042:	2300      	movs	r3, #0
}
 800c044:	0018      	movs	r0, r3
 800c046:	46bd      	mov	sp, r7
 800c048:	b003      	add	sp, #12
 800c04a:	bd90      	pop	{r4, r7, pc}
 800c04c:	0000c350 	.word	0x0000c350

0800c050 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c056:	1dbb      	adds	r3, r7, #6
 800c058:	2200      	movs	r2, #0
 800c05a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800c05c:	1dbc      	adds	r4, r7, #6
 800c05e:	1dbb      	adds	r3, r7, #6
 800c060:	8819      	ldrh	r1, [r3, #0]
 800c062:	003b      	movs	r3, r7
 800c064:	2237      	movs	r2, #55	@ 0x37
 800c066:	0018      	movs	r0, r3
 800c068:	f001 fb28 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c06c:	0003      	movs	r3, r0
 800c06e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c070:	1d3c      	adds	r4, r7, #4
 800c072:	1dbb      	adds	r3, r7, #6
 800c074:	881a      	ldrh	r2, [r3, #0]
 800c076:	003b      	movs	r3, r7
 800c078:	0019      	movs	r1, r3
 800c07a:	2069      	movs	r0, #105	@ 0x69
 800c07c:	f001 fba2 	bl	800d7c4 <sensirion_i2c_write_data>
 800c080:	0003      	movs	r3, r0
 800c082:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c084:	1d3b      	adds	r3, r7, #4
 800c086:	2200      	movs	r2, #0
 800c088:	5e9b      	ldrsh	r3, [r3, r2]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800c08e:	1d3b      	adds	r3, r7, #4
 800c090:	2200      	movs	r2, #0
 800c092:	5e9b      	ldrsh	r3, [r3, r2]
 800c094:	e004      	b.n	800c0a0 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800c096:	4b04      	ldr	r3, [pc, #16]	@ (800c0a8 <sen5x_start_measurement_without_pm+0x58>)
 800c098:	0018      	movs	r0, r3
 800c09a:	f7ff fd9f 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	0018      	movs	r0, r3
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	b003      	add	sp, #12
 800c0a6:	bd90      	pop	{r4, r7, pc}
 800c0a8:	0000c350 	.word	0x0000c350

0800c0ac <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800c0ac:	b590      	push	{r4, r7, lr}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c0b2:	1dbb      	adds	r3, r7, #6
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800c0b8:	1dbc      	adds	r4, r7, #6
 800c0ba:	2382      	movs	r3, #130	@ 0x82
 800c0bc:	005a      	lsls	r2, r3, #1
 800c0be:	1dbb      	adds	r3, r7, #6
 800c0c0:	8819      	ldrh	r1, [r3, #0]
 800c0c2:	003b      	movs	r3, r7
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	f001 faf9 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c0ca:	0003      	movs	r3, r0
 800c0cc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c0ce:	1d3c      	adds	r4, r7, #4
 800c0d0:	1dbb      	adds	r3, r7, #6
 800c0d2:	881a      	ldrh	r2, [r3, #0]
 800c0d4:	003b      	movs	r3, r7
 800c0d6:	0019      	movs	r1, r3
 800c0d8:	2069      	movs	r0, #105	@ 0x69
 800c0da:	f001 fb73 	bl	800d7c4 <sensirion_i2c_write_data>
 800c0de:	0003      	movs	r3, r0
 800c0e0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c0e2:	1d3b      	adds	r3, r7, #4
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	5e9b      	ldrsh	r3, [r3, r2]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d003      	beq.n	800c0f4 <sen5x_stop_measurement+0x48>
        return error;
 800c0ec:	1d3b      	adds	r3, r7, #4
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	5e9b      	ldrsh	r3, [r3, r2]
 800c0f2:	e004      	b.n	800c0fe <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800c0f4:	4b04      	ldr	r3, [pc, #16]	@ (800c108 <sen5x_stop_measurement+0x5c>)
 800c0f6:	0018      	movs	r0, r3
 800c0f8:	f7ff fd70 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	0018      	movs	r0, r3
 800c100:	46bd      	mov	sp, r7
 800c102:	b003      	add	sp, #12
 800c104:	bd90      	pop	{r4, r7, pc}
 800c106:	46c0      	nop			@ (mov r8, r8)
 800c108:	00030d40 	.word	0x00030d40

0800c10c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800c10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800c114:	250e      	movs	r5, #14
 800c116:	197b      	adds	r3, r7, r5
 800c118:	2200      	movs	r2, #0
 800c11a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800c11c:	197c      	adds	r4, r7, r5
 800c11e:	4a22      	ldr	r2, [pc, #136]	@ (800c1a8 <sen5x_read_data_ready+0x9c>)
 800c120:	197b      	adds	r3, r7, r5
 800c122:	8819      	ldrh	r1, [r3, #0]
 800c124:	2308      	movs	r3, #8
 800c126:	18fb      	adds	r3, r7, r3
 800c128:	0018      	movs	r0, r3
 800c12a:	f001 fac7 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c12e:	0003      	movs	r3, r0
 800c130:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c132:	260c      	movs	r6, #12
 800c134:	19bc      	adds	r4, r7, r6
 800c136:	197b      	adds	r3, r7, r5
 800c138:	881a      	ldrh	r2, [r3, #0]
 800c13a:	2308      	movs	r3, #8
 800c13c:	18fb      	adds	r3, r7, r3
 800c13e:	0019      	movs	r1, r3
 800c140:	2069      	movs	r0, #105	@ 0x69
 800c142:	f001 fb3f 	bl	800d7c4 <sensirion_i2c_write_data>
 800c146:	0003      	movs	r3, r0
 800c148:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c14a:	19bb      	adds	r3, r7, r6
 800c14c:	2200      	movs	r2, #0
 800c14e:	5e9b      	ldrsh	r3, [r3, r2]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d003      	beq.n	800c15c <sen5x_read_data_ready+0x50>
        return error;
 800c154:	19bb      	adds	r3, r7, r6
 800c156:	2200      	movs	r2, #0
 800c158:	5e9b      	ldrsh	r3, [r3, r2]
 800c15a:	e020      	b.n	800c19e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c15c:	4b13      	ldr	r3, [pc, #76]	@ (800c1ac <sen5x_read_data_ready+0xa0>)
 800c15e:	0018      	movs	r0, r3
 800c160:	f7ff fd3c 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800c164:	250c      	movs	r5, #12
 800c166:	197c      	adds	r4, r7, r5
 800c168:	2308      	movs	r3, #8
 800c16a:	18fb      	adds	r3, r7, r3
 800c16c:	2202      	movs	r2, #2
 800c16e:	0019      	movs	r1, r3
 800c170:	2069      	movs	r0, #105	@ 0x69
 800c172:	f001 fb3f 	bl	800d7f4 <sensirion_i2c_read_data_inplace>
 800c176:	0003      	movs	r3, r0
 800c178:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c17a:	197b      	adds	r3, r7, r5
 800c17c:	2200      	movs	r2, #0
 800c17e:	5e9b      	ldrsh	r3, [r3, r2]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d003      	beq.n	800c18c <sen5x_read_data_ready+0x80>
        return error;
 800c184:	197b      	adds	r3, r7, r5
 800c186:	2200      	movs	r2, #0
 800c188:	5e9b      	ldrsh	r3, [r3, r2]
 800c18a:	e008      	b.n	800c19e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800c18c:	2308      	movs	r3, #8
 800c18e:	18fb      	adds	r3, r7, r3
 800c190:	785b      	ldrb	r3, [r3, #1]
 800c192:	1e5a      	subs	r2, r3, #1
 800c194:	4193      	sbcs	r3, r2
 800c196:	b2da      	uxtb	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	0018      	movs	r0, r3
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	b005      	add	sp, #20
 800c1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a6:	46c0      	nop			@ (mov r8, r8)
 800c1a8:	00000202 	.word	0x00000202
 800c1ac:	00004e20 	.word	0x00004e20

0800c1b0 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800c1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1b2:	b08d      	sub	sp, #52	@ 0x34
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
 800c1bc:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800c1be:	252e      	movs	r5, #46	@ 0x2e
 800c1c0:	197b      	adds	r3, r7, r5
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800c1c6:	197c      	adds	r4, r7, r5
 800c1c8:	23f1      	movs	r3, #241	@ 0xf1
 800c1ca:	009a      	lsls	r2, r3, #2
 800c1cc:	197b      	adds	r3, r7, r5
 800c1ce:	8819      	ldrh	r1, [r3, #0]
 800c1d0:	2314      	movs	r3, #20
 800c1d2:	18fb      	adds	r3, r7, r3
 800c1d4:	0018      	movs	r0, r3
 800c1d6:	f001 fa71 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c1da:	0003      	movs	r3, r0
 800c1dc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c1de:	262c      	movs	r6, #44	@ 0x2c
 800c1e0:	19bc      	adds	r4, r7, r6
 800c1e2:	197b      	adds	r3, r7, r5
 800c1e4:	881a      	ldrh	r2, [r3, #0]
 800c1e6:	2314      	movs	r3, #20
 800c1e8:	18fb      	adds	r3, r7, r3
 800c1ea:	0019      	movs	r1, r3
 800c1ec:	2069      	movs	r0, #105	@ 0x69
 800c1ee:	f001 fae9 	bl	800d7c4 <sensirion_i2c_write_data>
 800c1f2:	0003      	movs	r3, r0
 800c1f4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c1f6:	19bb      	adds	r3, r7, r6
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	5e9b      	ldrsh	r3, [r3, r2]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d003      	beq.n	800c208 <sen5x_read_measured_values+0x58>
        return error;
 800c200:	19bb      	adds	r3, r7, r6
 800c202:	2200      	movs	r2, #0
 800c204:	5e9b      	ldrsh	r3, [r3, r2]
 800c206:	e060      	b.n	800c2ca <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c208:	4b32      	ldr	r3, [pc, #200]	@ (800c2d4 <sen5x_read_measured_values+0x124>)
 800c20a:	0018      	movs	r0, r3
 800c20c:	f7ff fce6 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800c210:	252c      	movs	r5, #44	@ 0x2c
 800c212:	197c      	adds	r4, r7, r5
 800c214:	2314      	movs	r3, #20
 800c216:	18fb      	adds	r3, r7, r3
 800c218:	2210      	movs	r2, #16
 800c21a:	0019      	movs	r1, r3
 800c21c:	2069      	movs	r0, #105	@ 0x69
 800c21e:	f001 fae9 	bl	800d7f4 <sensirion_i2c_read_data_inplace>
 800c222:	0003      	movs	r3, r0
 800c224:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c226:	197b      	adds	r3, r7, r5
 800c228:	2200      	movs	r2, #0
 800c22a:	5e9b      	ldrsh	r3, [r3, r2]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d003      	beq.n	800c238 <sen5x_read_measured_values+0x88>
        return error;
 800c230:	197b      	adds	r3, r7, r5
 800c232:	2200      	movs	r2, #0
 800c234:	5e9b      	ldrsh	r3, [r3, r2]
 800c236:	e048      	b.n	800c2ca <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800c238:	2414      	movs	r4, #20
 800c23a:	193b      	adds	r3, r7, r4
 800c23c:	0018      	movs	r0, r3
 800c23e:	f000 fa79 	bl	800c734 <sensirion_common_bytes_to_uint16_t>
 800c242:	0003      	movs	r3, r0
 800c244:	001a      	movs	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800c24a:	193b      	adds	r3, r7, r4
 800c24c:	3302      	adds	r3, #2
 800c24e:	0018      	movs	r0, r3
 800c250:	f000 fa70 	bl	800c734 <sensirion_common_bytes_to_uint16_t>
 800c254:	0003      	movs	r3, r0
 800c256:	001a      	movs	r2, r3
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800c25c:	193b      	adds	r3, r7, r4
 800c25e:	3304      	adds	r3, #4
 800c260:	0018      	movs	r0, r3
 800c262:	f000 fa67 	bl	800c734 <sensirion_common_bytes_to_uint16_t>
 800c266:	0003      	movs	r3, r0
 800c268:	001a      	movs	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800c26e:	193b      	adds	r3, r7, r4
 800c270:	3306      	adds	r3, #6
 800c272:	0018      	movs	r0, r3
 800c274:	f000 fa5e 	bl	800c734 <sensirion_common_bytes_to_uint16_t>
 800c278:	0003      	movs	r3, r0
 800c27a:	001a      	movs	r2, r3
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800c280:	193b      	adds	r3, r7, r4
 800c282:	3308      	adds	r3, #8
 800c284:	0018      	movs	r0, r3
 800c286:	f000 fa81 	bl	800c78c <sensirion_common_bytes_to_int16_t>
 800c28a:	0003      	movs	r3, r0
 800c28c:	001a      	movs	r2, r3
 800c28e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c290:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800c292:	193b      	adds	r3, r7, r4
 800c294:	330a      	adds	r3, #10
 800c296:	0018      	movs	r0, r3
 800c298:	f000 fa78 	bl	800c78c <sensirion_common_bytes_to_int16_t>
 800c29c:	0003      	movs	r3, r0
 800c29e:	001a      	movs	r2, r3
 800c2a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2a2:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800c2a4:	193b      	adds	r3, r7, r4
 800c2a6:	330c      	adds	r3, #12
 800c2a8:	0018      	movs	r0, r3
 800c2aa:	f000 fa6f 	bl	800c78c <sensirion_common_bytes_to_int16_t>
 800c2ae:	0003      	movs	r3, r0
 800c2b0:	001a      	movs	r2, r3
 800c2b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2b4:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800c2b6:	193b      	adds	r3, r7, r4
 800c2b8:	330e      	adds	r3, #14
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f000 fa66 	bl	800c78c <sensirion_common_bytes_to_int16_t>
 800c2c0:	0003      	movs	r3, r0
 800c2c2:	001a      	movs	r2, r3
 800c2c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2c6:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	0018      	movs	r0, r3
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	b00d      	add	sp, #52	@ 0x34
 800c2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2d2:	46c0      	nop			@ (mov r8, r8)
 800c2d4:	00004e20 	.word	0x00004e20

0800c2d8 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800c2d8:	b590      	push	{r4, r7, lr}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c2de:	1dbb      	adds	r3, r7, #6
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800c2e4:	1dbc      	adds	r4, r7, #6
 800c2e6:	4a12      	ldr	r2, [pc, #72]	@ (800c330 <sen5x_start_fan_cleaning+0x58>)
 800c2e8:	1dbb      	adds	r3, r7, #6
 800c2ea:	8819      	ldrh	r1, [r3, #0]
 800c2ec:	003b      	movs	r3, r7
 800c2ee:	0018      	movs	r0, r3
 800c2f0:	f001 f9e4 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c2f4:	0003      	movs	r3, r0
 800c2f6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c2f8:	1d3c      	adds	r4, r7, #4
 800c2fa:	1dbb      	adds	r3, r7, #6
 800c2fc:	881a      	ldrh	r2, [r3, #0]
 800c2fe:	003b      	movs	r3, r7
 800c300:	0019      	movs	r1, r3
 800c302:	2069      	movs	r0, #105	@ 0x69
 800c304:	f001 fa5e 	bl	800d7c4 <sensirion_i2c_write_data>
 800c308:	0003      	movs	r3, r0
 800c30a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c30c:	1d3b      	adds	r3, r7, #4
 800c30e:	2200      	movs	r2, #0
 800c310:	5e9b      	ldrsh	r3, [r3, r2]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <sen5x_start_fan_cleaning+0x46>
        return error;
 800c316:	1d3b      	adds	r3, r7, #4
 800c318:	2200      	movs	r2, #0
 800c31a:	5e9b      	ldrsh	r3, [r3, r2]
 800c31c:	e004      	b.n	800c328 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800c31e:	4b05      	ldr	r3, [pc, #20]	@ (800c334 <sen5x_start_fan_cleaning+0x5c>)
 800c320:	0018      	movs	r0, r3
 800c322:	f7ff fc5b 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c326:	2300      	movs	r3, #0
}
 800c328:	0018      	movs	r0, r3
 800c32a:	46bd      	mov	sp, r7
 800c32c:	b003      	add	sp, #12
 800c32e:	bd90      	pop	{r4, r7, pc}
 800c330:	00005607 	.word	0x00005607
 800c334:	00004e20 	.word	0x00004e20

0800c338 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800c338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c33a:	b087      	sub	sp, #28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	0004      	movs	r4, r0
 800c340:	0008      	movs	r0, r1
 800c342:	0011      	movs	r1, r2
 800c344:	1dbb      	adds	r3, r7, #6
 800c346:	1c22      	adds	r2, r4, #0
 800c348:	801a      	strh	r2, [r3, #0]
 800c34a:	1d3b      	adds	r3, r7, #4
 800c34c:	1c02      	adds	r2, r0, #0
 800c34e:	801a      	strh	r2, [r3, #0]
 800c350:	1cbb      	adds	r3, r7, #2
 800c352:	1c0a      	adds	r2, r1, #0
 800c354:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800c356:	2516      	movs	r5, #22
 800c358:	197b      	adds	r3, r7, r5
 800c35a:	2200      	movs	r2, #0
 800c35c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800c35e:	197c      	adds	r4, r7, r5
 800c360:	4a25      	ldr	r2, [pc, #148]	@ (800c3f8 <sen5x_set_temperature_offset_parameters+0xc0>)
 800c362:	197b      	adds	r3, r7, r5
 800c364:	8819      	ldrh	r1, [r3, #0]
 800c366:	2608      	movs	r6, #8
 800c368:	19bb      	adds	r3, r7, r6
 800c36a:	0018      	movs	r0, r3
 800c36c:	f001 f9a6 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c370:	0003      	movs	r3, r0
 800c372:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800c374:	197c      	adds	r4, r7, r5
 800c376:	1dbb      	adds	r3, r7, #6
 800c378:	2200      	movs	r2, #0
 800c37a:	5e9a      	ldrsh	r2, [r3, r2]
 800c37c:	197b      	adds	r3, r7, r5
 800c37e:	8819      	ldrh	r1, [r3, #0]
 800c380:	19bb      	adds	r3, r7, r6
 800c382:	0018      	movs	r0, r3
 800c384:	f001 fa05 	bl	800d792 <sensirion_i2c_add_int16_t_to_buffer>
 800c388:	0003      	movs	r3, r0
 800c38a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800c38c:	197c      	adds	r4, r7, r5
 800c38e:	1d3b      	adds	r3, r7, #4
 800c390:	2200      	movs	r2, #0
 800c392:	5e9a      	ldrsh	r2, [r3, r2]
 800c394:	197b      	adds	r3, r7, r5
 800c396:	8819      	ldrh	r1, [r3, #0]
 800c398:	19bb      	adds	r3, r7, r6
 800c39a:	0018      	movs	r0, r3
 800c39c:	f001 f9f9 	bl	800d792 <sensirion_i2c_add_int16_t_to_buffer>
 800c3a0:	0003      	movs	r3, r0
 800c3a2:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800c3a4:	197c      	adds	r4, r7, r5
 800c3a6:	1cbb      	adds	r3, r7, #2
 800c3a8:	881a      	ldrh	r2, [r3, #0]
 800c3aa:	197b      	adds	r3, r7, r5
 800c3ac:	8819      	ldrh	r1, [r3, #0]
 800c3ae:	19bb      	adds	r3, r7, r6
 800c3b0:	0018      	movs	r0, r3
 800c3b2:	f001 f9af 	bl	800d714 <sensirion_i2c_add_uint16_t_to_buffer>
 800c3b6:	0003      	movs	r3, r0
 800c3b8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c3ba:	2214      	movs	r2, #20
 800c3bc:	18bc      	adds	r4, r7, r2
 800c3be:	197b      	adds	r3, r7, r5
 800c3c0:	881a      	ldrh	r2, [r3, #0]
 800c3c2:	19bb      	adds	r3, r7, r6
 800c3c4:	0019      	movs	r1, r3
 800c3c6:	2069      	movs	r0, #105	@ 0x69
 800c3c8:	f001 f9fc 	bl	800d7c4 <sensirion_i2c_write_data>
 800c3cc:	0003      	movs	r3, r0
 800c3ce:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c3d0:	2214      	movs	r2, #20
 800c3d2:	18bb      	adds	r3, r7, r2
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	5e5b      	ldrsh	r3, [r3, r1]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d003      	beq.n	800c3e4 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800c3dc:	18bb      	adds	r3, r7, r2
 800c3de:	2200      	movs	r2, #0
 800c3e0:	5e9b      	ldrsh	r3, [r3, r2]
 800c3e2:	e004      	b.n	800c3ee <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800c3e4:	4b05      	ldr	r3, [pc, #20]	@ (800c3fc <sen5x_set_temperature_offset_parameters+0xc4>)
 800c3e6:	0018      	movs	r0, r3
 800c3e8:	f7ff fbf8 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	0018      	movs	r0, r3
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	b007      	add	sp, #28
 800c3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f6:	46c0      	nop			@ (mov r8, r8)
 800c3f8:	000060b2 	.word	0x000060b2
 800c3fc:	00004e20 	.word	0x00004e20

0800c400 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800c400:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c402:	b091      	sub	sp, #68	@ 0x44
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	000a      	movs	r2, r1
 800c40a:	1cfb      	adds	r3, r7, #3
 800c40c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800c40e:	253e      	movs	r5, #62	@ 0x3e
 800c410:	197b      	adds	r3, r7, r5
 800c412:	2200      	movs	r2, #0
 800c414:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800c416:	197c      	adds	r4, r7, r5
 800c418:	4a22      	ldr	r2, [pc, #136]	@ (800c4a4 <sen5x_get_product_name+0xa4>)
 800c41a:	197b      	adds	r3, r7, r5
 800c41c:	8819      	ldrh	r1, [r3, #0]
 800c41e:	230c      	movs	r3, #12
 800c420:	18fb      	adds	r3, r7, r3
 800c422:	0018      	movs	r0, r3
 800c424:	f001 f94a 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c428:	0003      	movs	r3, r0
 800c42a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c42c:	263c      	movs	r6, #60	@ 0x3c
 800c42e:	19bc      	adds	r4, r7, r6
 800c430:	197b      	adds	r3, r7, r5
 800c432:	881a      	ldrh	r2, [r3, #0]
 800c434:	230c      	movs	r3, #12
 800c436:	18fb      	adds	r3, r7, r3
 800c438:	0019      	movs	r1, r3
 800c43a:	2069      	movs	r0, #105	@ 0x69
 800c43c:	f001 f9c2 	bl	800d7c4 <sensirion_i2c_write_data>
 800c440:	0003      	movs	r3, r0
 800c442:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c444:	19bb      	adds	r3, r7, r6
 800c446:	2200      	movs	r2, #0
 800c448:	5e9b      	ldrsh	r3, [r3, r2]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d003      	beq.n	800c456 <sen5x_get_product_name+0x56>
        return error;
 800c44e:	19bb      	adds	r3, r7, r6
 800c450:	2200      	movs	r2, #0
 800c452:	5e9b      	ldrsh	r3, [r3, r2]
 800c454:	e021      	b.n	800c49a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800c456:	4b14      	ldr	r3, [pc, #80]	@ (800c4a8 <sen5x_get_product_name+0xa8>)
 800c458:	0018      	movs	r0, r3
 800c45a:	f7ff fbbf 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800c45e:	253c      	movs	r5, #60	@ 0x3c
 800c460:	197c      	adds	r4, r7, r5
 800c462:	230c      	movs	r3, #12
 800c464:	18fb      	adds	r3, r7, r3
 800c466:	2220      	movs	r2, #32
 800c468:	0019      	movs	r1, r3
 800c46a:	2069      	movs	r0, #105	@ 0x69
 800c46c:	f001 f9c2 	bl	800d7f4 <sensirion_i2c_read_data_inplace>
 800c470:	0003      	movs	r3, r0
 800c472:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c474:	197b      	adds	r3, r7, r5
 800c476:	2200      	movs	r2, #0
 800c478:	5e9b      	ldrsh	r3, [r3, r2]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <sen5x_get_product_name+0x86>
        return error;
 800c47e:	197b      	adds	r3, r7, r5
 800c480:	2200      	movs	r2, #0
 800c482:	5e9b      	ldrsh	r3, [r3, r2]
 800c484:	e009      	b.n	800c49a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800c486:	1cfb      	adds	r3, r7, #3
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	230c      	movs	r3, #12
 800c490:	18fb      	adds	r3, r7, r3
 800c492:	0018      	movs	r0, r3
 800c494:	f000 f988 	bl	800c7a8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	0018      	movs	r0, r3
 800c49c:	46bd      	mov	sp, r7
 800c49e:	b011      	add	sp, #68	@ 0x44
 800c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a2:	46c0      	nop			@ (mov r8, r8)
 800c4a4:	0000d014 	.word	0x0000d014
 800c4a8:	0000c350 	.word	0x0000c350

0800c4ac <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ae:	b091      	sub	sp, #68	@ 0x44
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	000a      	movs	r2, r1
 800c4b6:	1cfb      	adds	r3, r7, #3
 800c4b8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800c4ba:	253e      	movs	r5, #62	@ 0x3e
 800c4bc:	197b      	adds	r3, r7, r5
 800c4be:	2200      	movs	r2, #0
 800c4c0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800c4c2:	197c      	adds	r4, r7, r5
 800c4c4:	4a22      	ldr	r2, [pc, #136]	@ (800c550 <sen5x_get_serial_number+0xa4>)
 800c4c6:	197b      	adds	r3, r7, r5
 800c4c8:	8819      	ldrh	r1, [r3, #0]
 800c4ca:	230c      	movs	r3, #12
 800c4cc:	18fb      	adds	r3, r7, r3
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	f001 f8f4 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c4d4:	0003      	movs	r3, r0
 800c4d6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c4d8:	263c      	movs	r6, #60	@ 0x3c
 800c4da:	19bc      	adds	r4, r7, r6
 800c4dc:	197b      	adds	r3, r7, r5
 800c4de:	881a      	ldrh	r2, [r3, #0]
 800c4e0:	230c      	movs	r3, #12
 800c4e2:	18fb      	adds	r3, r7, r3
 800c4e4:	0019      	movs	r1, r3
 800c4e6:	2069      	movs	r0, #105	@ 0x69
 800c4e8:	f001 f96c 	bl	800d7c4 <sensirion_i2c_write_data>
 800c4ec:	0003      	movs	r3, r0
 800c4ee:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c4f0:	19bb      	adds	r3, r7, r6
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	5e9b      	ldrsh	r3, [r3, r2]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d003      	beq.n	800c502 <sen5x_get_serial_number+0x56>
        return error;
 800c4fa:	19bb      	adds	r3, r7, r6
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	5e9b      	ldrsh	r3, [r3, r2]
 800c500:	e021      	b.n	800c546 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800c502:	4b14      	ldr	r3, [pc, #80]	@ (800c554 <sen5x_get_serial_number+0xa8>)
 800c504:	0018      	movs	r0, r3
 800c506:	f7ff fb69 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800c50a:	253c      	movs	r5, #60	@ 0x3c
 800c50c:	197c      	adds	r4, r7, r5
 800c50e:	230c      	movs	r3, #12
 800c510:	18fb      	adds	r3, r7, r3
 800c512:	2220      	movs	r2, #32
 800c514:	0019      	movs	r1, r3
 800c516:	2069      	movs	r0, #105	@ 0x69
 800c518:	f001 f96c 	bl	800d7f4 <sensirion_i2c_read_data_inplace>
 800c51c:	0003      	movs	r3, r0
 800c51e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c520:	197b      	adds	r3, r7, r5
 800c522:	2200      	movs	r2, #0
 800c524:	5e9b      	ldrsh	r3, [r3, r2]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <sen5x_get_serial_number+0x86>
        return error;
 800c52a:	197b      	adds	r3, r7, r5
 800c52c:	2200      	movs	r2, #0
 800c52e:	5e9b      	ldrsh	r3, [r3, r2]
 800c530:	e009      	b.n	800c546 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800c532:	1cfb      	adds	r3, r7, #3
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	b29a      	uxth	r2, r3
 800c538:	6879      	ldr	r1, [r7, #4]
 800c53a:	230c      	movs	r3, #12
 800c53c:	18fb      	adds	r3, r7, r3
 800c53e:	0018      	movs	r0, r3
 800c540:	f000 f932 	bl	800c7a8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800c544:	2300      	movs	r3, #0
}
 800c546:	0018      	movs	r0, r3
 800c548:	46bd      	mov	sp, r7
 800c54a:	b011      	add	sp, #68	@ 0x44
 800c54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c54e:	46c0      	nop			@ (mov r8, r8)
 800c550:	0000d033 	.word	0x0000d033
 800c554:	0000c350 	.word	0x0000c350

0800c558 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800c558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55a:	b089      	sub	sp, #36	@ 0x24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800c566:	251e      	movs	r5, #30
 800c568:	197b      	adds	r3, r7, r5
 800c56a:	2200      	movs	r2, #0
 800c56c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800c56e:	197c      	adds	r4, r7, r5
 800c570:	23d1      	movs	r3, #209	@ 0xd1
 800c572:	021a      	lsls	r2, r3, #8
 800c574:	197b      	adds	r3, r7, r5
 800c576:	8819      	ldrh	r1, [r3, #0]
 800c578:	2310      	movs	r3, #16
 800c57a:	18fb      	adds	r3, r7, r3
 800c57c:	0018      	movs	r0, r3
 800c57e:	f001 f89d 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c582:	0003      	movs	r3, r0
 800c584:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c586:	261c      	movs	r6, #28
 800c588:	19bc      	adds	r4, r7, r6
 800c58a:	197b      	adds	r3, r7, r5
 800c58c:	881a      	ldrh	r2, [r3, #0]
 800c58e:	2310      	movs	r3, #16
 800c590:	18fb      	adds	r3, r7, r3
 800c592:	0019      	movs	r1, r3
 800c594:	2069      	movs	r0, #105	@ 0x69
 800c596:	f001 f915 	bl	800d7c4 <sensirion_i2c_write_data>
 800c59a:	0003      	movs	r3, r0
 800c59c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c59e:	19bb      	adds	r3, r7, r6
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	5e9b      	ldrsh	r3, [r3, r2]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d003      	beq.n	800c5b0 <sen5x_get_version+0x58>
        return error;
 800c5a8:	19bb      	adds	r3, r7, r6
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	5e9b      	ldrsh	r3, [r3, r2]
 800c5ae:	e038      	b.n	800c622 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c5b0:	4b1e      	ldr	r3, [pc, #120]	@ (800c62c <sen5x_get_version+0xd4>)
 800c5b2:	0018      	movs	r0, r3
 800c5b4:	f7ff fb12 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800c5b8:	251c      	movs	r5, #28
 800c5ba:	197c      	adds	r4, r7, r5
 800c5bc:	2310      	movs	r3, #16
 800c5be:	18fb      	adds	r3, r7, r3
 800c5c0:	2208      	movs	r2, #8
 800c5c2:	0019      	movs	r1, r3
 800c5c4:	2069      	movs	r0, #105	@ 0x69
 800c5c6:	f001 f915 	bl	800d7f4 <sensirion_i2c_read_data_inplace>
 800c5ca:	0003      	movs	r3, r0
 800c5cc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c5ce:	197b      	adds	r3, r7, r5
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	5e9b      	ldrsh	r3, [r3, r2]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <sen5x_get_version+0x88>
        return error;
 800c5d8:	197b      	adds	r3, r7, r5
 800c5da:	2200      	movs	r2, #0
 800c5dc:	5e9b      	ldrsh	r3, [r3, r2]
 800c5de:	e020      	b.n	800c622 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800c5e0:	2110      	movs	r1, #16
 800c5e2:	187b      	adds	r3, r7, r1
 800c5e4:	781a      	ldrb	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800c5ea:	187b      	adds	r3, r7, r1
 800c5ec:	785a      	ldrb	r2, [r3, #1]
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800c5f2:	187b      	adds	r3, r7, r1
 800c5f4:	789b      	ldrb	r3, [r3, #2]
 800c5f6:	1e5a      	subs	r2, r3, #1
 800c5f8:	4193      	sbcs	r3, r2
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800c600:	187b      	adds	r3, r7, r1
 800c602:	78da      	ldrb	r2, [r3, #3]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800c608:	187b      	adds	r3, r7, r1
 800c60a:	791a      	ldrb	r2, [r3, #4]
 800c60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800c610:	187b      	adds	r3, r7, r1
 800c612:	795a      	ldrb	r2, [r3, #5]
 800c614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c616:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800c618:	187b      	adds	r3, r7, r1
 800c61a:	799a      	ldrb	r2, [r3, #6]
 800c61c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c61e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800c620:	2300      	movs	r3, #0
}
 800c622:	0018      	movs	r0, r3
 800c624:	46bd      	mov	sp, r7
 800c626:	b009      	add	sp, #36	@ 0x24
 800c628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c62a:	46c0      	nop			@ (mov r8, r8)
 800c62c:	00004e20 	.word	0x00004e20

0800c630 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800c630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c632:	b087      	sub	sp, #28
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800c638:	2516      	movs	r5, #22
 800c63a:	197b      	adds	r3, r7, r5
 800c63c:	2200      	movs	r2, #0
 800c63e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800c640:	197c      	adds	r4, r7, r5
 800c642:	4a22      	ldr	r2, [pc, #136]	@ (800c6cc <sen5x_read_device_status+0x9c>)
 800c644:	197b      	adds	r3, r7, r5
 800c646:	8819      	ldrh	r1, [r3, #0]
 800c648:	230c      	movs	r3, #12
 800c64a:	18fb      	adds	r3, r7, r3
 800c64c:	0018      	movs	r0, r3
 800c64e:	f001 f835 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c652:	0003      	movs	r3, r0
 800c654:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c656:	2614      	movs	r6, #20
 800c658:	19bc      	adds	r4, r7, r6
 800c65a:	197b      	adds	r3, r7, r5
 800c65c:	881a      	ldrh	r2, [r3, #0]
 800c65e:	230c      	movs	r3, #12
 800c660:	18fb      	adds	r3, r7, r3
 800c662:	0019      	movs	r1, r3
 800c664:	2069      	movs	r0, #105	@ 0x69
 800c666:	f001 f8ad 	bl	800d7c4 <sensirion_i2c_write_data>
 800c66a:	0003      	movs	r3, r0
 800c66c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c66e:	19bb      	adds	r3, r7, r6
 800c670:	2200      	movs	r2, #0
 800c672:	5e9b      	ldrsh	r3, [r3, r2]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <sen5x_read_device_status+0x50>
        return error;
 800c678:	19bb      	adds	r3, r7, r6
 800c67a:	2200      	movs	r2, #0
 800c67c:	5e9b      	ldrsh	r3, [r3, r2]
 800c67e:	e020      	b.n	800c6c2 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c680:	4b13      	ldr	r3, [pc, #76]	@ (800c6d0 <sen5x_read_device_status+0xa0>)
 800c682:	0018      	movs	r0, r3
 800c684:	f7ff faaa 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800c688:	2514      	movs	r5, #20
 800c68a:	197c      	adds	r4, r7, r5
 800c68c:	230c      	movs	r3, #12
 800c68e:	18fb      	adds	r3, r7, r3
 800c690:	2204      	movs	r2, #4
 800c692:	0019      	movs	r1, r3
 800c694:	2069      	movs	r0, #105	@ 0x69
 800c696:	f001 f8ad 	bl	800d7f4 <sensirion_i2c_read_data_inplace>
 800c69a:	0003      	movs	r3, r0
 800c69c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c69e:	197b      	adds	r3, r7, r5
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	5e9b      	ldrsh	r3, [r3, r2]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d003      	beq.n	800c6b0 <sen5x_read_device_status+0x80>
        return error;
 800c6a8:	197b      	adds	r3, r7, r5
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	5e9b      	ldrsh	r3, [r3, r2]
 800c6ae:	e008      	b.n	800c6c2 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800c6b0:	230c      	movs	r3, #12
 800c6b2:	18fb      	adds	r3, r7, r3
 800c6b4:	0018      	movs	r0, r3
 800c6b6:	f000 f850 	bl	800c75a <sensirion_common_bytes_to_uint32_t>
 800c6ba:	0002      	movs	r2, r0
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	0018      	movs	r0, r3
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	b007      	add	sp, #28
 800c6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ca:	46c0      	nop			@ (mov r8, r8)
 800c6cc:	0000d206 	.word	0x0000d206
 800c6d0:	00004e20 	.word	0x00004e20

0800c6d4 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800c6d4:	b590      	push	{r4, r7, lr}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c6da:	1dbb      	adds	r3, r7, #6
 800c6dc:	2200      	movs	r2, #0
 800c6de:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800c6e0:	1dbc      	adds	r4, r7, #6
 800c6e2:	4a12      	ldr	r2, [pc, #72]	@ (800c72c <sen5x_device_reset+0x58>)
 800c6e4:	1dbb      	adds	r3, r7, #6
 800c6e6:	8819      	ldrh	r1, [r3, #0]
 800c6e8:	003b      	movs	r3, r7
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	f000 ffe6 	bl	800d6bc <sensirion_i2c_add_command_to_buffer>
 800c6f0:	0003      	movs	r3, r0
 800c6f2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c6f4:	1d3c      	adds	r4, r7, #4
 800c6f6:	1dbb      	adds	r3, r7, #6
 800c6f8:	881a      	ldrh	r2, [r3, #0]
 800c6fa:	003b      	movs	r3, r7
 800c6fc:	0019      	movs	r1, r3
 800c6fe:	2069      	movs	r0, #105	@ 0x69
 800c700:	f001 f860 	bl	800d7c4 <sensirion_i2c_write_data>
 800c704:	0003      	movs	r3, r0
 800c706:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c708:	1d3b      	adds	r3, r7, #4
 800c70a:	2200      	movs	r2, #0
 800c70c:	5e9b      	ldrsh	r3, [r3, r2]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <sen5x_device_reset+0x46>
        return error;
 800c712:	1d3b      	adds	r3, r7, #4
 800c714:	2200      	movs	r2, #0
 800c716:	5e9b      	ldrsh	r3, [r3, r2]
 800c718:	e004      	b.n	800c724 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800c71a:	4b05      	ldr	r3, [pc, #20]	@ (800c730 <sen5x_device_reset+0x5c>)
 800c71c:	0018      	movs	r0, r3
 800c71e:	f7ff fa5d 	bl	800bbdc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c722:	2300      	movs	r3, #0
}
 800c724:	0018      	movs	r0, r3
 800c726:	46bd      	mov	sp, r7
 800c728:	b003      	add	sp, #12
 800c72a:	bd90      	pop	{r4, r7, pc}
 800c72c:	0000d304 	.word	0x0000d304
 800c730:	00030d40 	.word	0x00030d40

0800c734 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	021b      	lsls	r3, r3, #8
 800c742:	b21a      	sxth	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3301      	adds	r3, #1
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	b21b      	sxth	r3, r3
 800c74c:	4313      	orrs	r3, r2
 800c74e:	b21b      	sxth	r3, r3
 800c750:	b29b      	uxth	r3, r3
}
 800c752:	0018      	movs	r0, r3
 800c754:	46bd      	mov	sp, r7
 800c756:	b002      	add	sp, #8
 800c758:	bd80      	pop	{r7, pc}

0800c75a <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	061a      	lsls	r2, r3, #24
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3301      	adds	r3, #1
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	041b      	lsls	r3, r3, #16
 800c770:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3302      	adds	r3, #2
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800c77a:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	3203      	adds	r2, #3
 800c780:	7812      	ldrb	r2, [r2, #0]
 800c782:	4313      	orrs	r3, r2
}
 800c784:	0018      	movs	r0, r3
 800c786:	46bd      	mov	sp, r7
 800c788:	b002      	add	sp, #8
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	0018      	movs	r0, r3
 800c798:	f7ff ffcc 	bl	800c734 <sensirion_common_bytes_to_uint16_t>
 800c79c:	0003      	movs	r3, r0
 800c79e:	b21b      	sxth	r3, r3
}
 800c7a0:	0018      	movs	r0, r3
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	b002      	add	sp, #8
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	1dbb      	adds	r3, r7, #6
 800c7b4:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800c7b6:	2316      	movs	r3, #22
 800c7b8:	18fb      	adds	r3, r7, r3
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	801a      	strh	r2, [r3, #0]
 800c7be:	e00f      	b.n	800c7e0 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800c7c0:	2016      	movs	r0, #22
 800c7c2:	183b      	adds	r3, r7, r0
 800c7c4:	881b      	ldrh	r3, [r3, #0]
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	18d2      	adds	r2, r2, r3
 800c7ca:	183b      	adds	r3, r7, r0
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	68b9      	ldr	r1, [r7, #8]
 800c7d0:	18cb      	adds	r3, r1, r3
 800c7d2:	7812      	ldrb	r2, [r2, #0]
 800c7d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800c7d6:	183b      	adds	r3, r7, r0
 800c7d8:	881a      	ldrh	r2, [r3, #0]
 800c7da:	183b      	adds	r3, r7, r0
 800c7dc:	3201      	adds	r2, #1
 800c7de:	801a      	strh	r2, [r3, #0]
 800c7e0:	2316      	movs	r3, #22
 800c7e2:	18fa      	adds	r2, r7, r3
 800c7e4:	1dbb      	adds	r3, r7, #6
 800c7e6:	8812      	ldrh	r2, [r2, #0]
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d3e8      	bcc.n	800c7c0 <sensirion_common_copy_bytes+0x18>
    }
}
 800c7ee:	46c0      	nop			@ (mov r8, r8)
 800c7f0:	46c0      	nop			@ (mov r8, r8)
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	b006      	add	sp, #24
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d113      	bne.n	800c83e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	22fe      	movs	r2, #254	@ 0xfe
 800c81a:	0592      	lsls	r2, r2, #22
 800c81c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	4a1a      	ldr	r2, [pc, #104]	@ (800c88c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800c822:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4a1a      	ldr	r2, [pc, #104]	@ (800c890 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800c828:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	4a19      	ldr	r2, [pc, #100]	@ (800c894 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800c82e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4a19      	ldr	r2, [pc, #100]	@ (800c898 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800c834:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	4a18      	ldr	r2, [pc, #96]	@ (800c89c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800c83a:	61da      	str	r2, [r3, #28]
 800c83c:	e011      	b.n	800c862 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	4a17      	ldr	r2, [pc, #92]	@ (800c8a0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800c842:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	4a17      	ldr	r2, [pc, #92]	@ (800c8a4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800c848:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	4a16      	ldr	r2, [pc, #88]	@ (800c8a8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800c84e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	4a16      	ldr	r2, [pc, #88]	@ (800c8ac <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800c854:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	4a15      	ldr	r2, [pc, #84]	@ (800c8b0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800c85a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	4a15      	ldr	r2, [pc, #84]	@ (800c8b4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800c860:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	4a14      	ldr	r2, [pc, #80]	@ (800c8b8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800c866:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	4a14      	ldr	r2, [pc, #80]	@ (800c8bc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800c86c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	4a12      	ldr	r2, [pc, #72]	@ (800c8bc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800c872:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	4a12      	ldr	r2, [pc, #72]	@ (800c8c0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800c878:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	0018      	movs	r0, r3
 800c87e:	f000 f833 	bl	800c8e8 <GasIndexAlgorithm_reset>
}
 800c882:	46c0      	nop			@ (mov r8, r8)
 800c884:	46bd      	mov	sp, r7
 800c886:	b004      	add	sp, #16
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	46c0      	nop			@ (mov r8, r8)
 800c88c:	00002710 	.word	0x00002710
 800c890:	44340000 	.word	0x44340000
 800c894:	46859800 	.word	0x46859800
 800c898:	46a05000 	.word	0x46a05000
 800c89c:	41f00000 	.word	0x41f00000
 800c8a0:	42c80000 	.word	0x42c80000
 800c8a4:	00004e20 	.word	0x00004e20
 800c8a8:	43340000 	.word	0x43340000
 800c8ac:	4528c000 	.word	0x4528c000
 800c8b0:	45a32000 	.word	0x45a32000
 800c8b4:	43aa0000 	.word	0x43aa0000
 800c8b8:	43660000 	.word	0x43660000
 800c8bc:	41400000 	.word	0x41400000
 800c8c0:	42480000 	.word	0x42480000

0800c8c4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800c8ce:	4a05      	ldr	r2, [pc, #20]	@ (800c8e4 <GasIndexAlgorithm_init+0x20>)
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	0018      	movs	r0, r3
 800c8d6:	f7ff ff8f 	bl	800c7f8 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800c8da:	46c0      	nop			@ (mov r8, r8)
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	b002      	add	sp, #8
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	46c0      	nop			@ (mov r8, r8)
 800c8e4:	44610000 	.word	0x44610000

0800c8e8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	0018      	movs	r0, r3
 800c906:	f000 f805 	bl	800c914 <GasIndexAlgorithm__init_instances>
}
 800c90a:	46c0      	nop			@ (mov r8, r8)
 800c90c:	46bd      	mov	sp, r7
 800c90e:	b002      	add	sp, #8
 800c910:	bd80      	pop	{r7, pc}
	...

0800c914 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800c914:	b590      	push	{r4, r7, lr}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	0018      	movs	r0, r3
 800c920:	f000 f8e8 	bl	800caf4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	0018      	movs	r0, r3
 800c928:	f000 f9a6 	bl	800cc78 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800c92c:	1c04      	adds	r4, r0, #0
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	0018      	movs	r0, r3
 800c932:	f000 f9ab 	bl	800cc8c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800c936:	1c02      	adds	r2, r0, #0
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	1c21      	adds	r1, r4, #0
 800c93c:	0018      	movs	r0, r3
 800c93e:	f000 fc3b 	bl	800d1b8 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d107      	bne.n	800c95a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800c94a:	23fe      	movs	r3, #254	@ 0xfe
 800c94c:	059b      	lsls	r3, r3, #22
 800c94e:	4a0a      	ldr	r2, [pc, #40]	@ (800c978 <GasIndexAlgorithm__init_instances+0x64>)
 800c950:	490a      	ldr	r1, [pc, #40]	@ (800c97c <GasIndexAlgorithm__init_instances+0x68>)
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fc86 	bl	800d264 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800c958:	e005      	b.n	800c966 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800c95a:	4b09      	ldr	r3, [pc, #36]	@ (800c980 <GasIndexAlgorithm__init_instances+0x6c>)
 800c95c:	4a09      	ldr	r2, [pc, #36]	@ (800c984 <GasIndexAlgorithm__init_instances+0x70>)
 800c95e:	490a      	ldr	r1, [pc, #40]	@ (800c988 <GasIndexAlgorithm__init_instances+0x74>)
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fc7f 	bl	800d264 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	0018      	movs	r0, r3
 800c96a:	f000 fd35 	bl	800d3d8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800c96e:	46c0      	nop			@ (mov r8, r8)
 800c970:	46bd      	mov	sp, r7
 800c972:	b003      	add	sp, #12
 800c974:	bd90      	pop	{r4, r7, pc}
 800c976:	46c0      	nop			@ (mov r8, r8)
 800c978:	bc257a78 	.word	0xbc257a78
 800c97c:	44198000 	.word	0x44198000
 800c980:	42c80000 	.word	0x42c80000
 800c984:	bbd4fdf4 	.word	0xbbd4fdf4
 800c988:	43550000 	.word	0x43550000

0800c98c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800c98c:	b590      	push	{r4, r7, lr}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c99c:	4952      	ldr	r1, [pc, #328]	@ (800cae8 <GasIndexAlgorithm_process+0x15c>)
 800c99e:	1c18      	adds	r0, r3, #0
 800c9a0:	f7f3 fdd0 	bl	8000544 <__aeabi_fcmple>
 800c9a4:	1e03      	subs	r3, r0, #0
 800c9a6:	d00c      	beq.n	800c9c2 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	1c19      	adds	r1, r3, #0
 800c9b2:	1c10      	adds	r0, r2, #0
 800c9b4:	f7f3 ff84 	bl	80008c0 <__aeabi_fadd>
 800c9b8:	1c03      	adds	r3, r0, #0
 800c9ba:	1c1a      	adds	r2, r3, #0
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	631a      	str	r2, [r3, #48]	@ 0x30
 800c9c0:	e080      	b.n	800cac4 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd25      	ble.n	800ca14 <GasIndexAlgorithm_process+0x88>
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	4a48      	ldr	r2, [pc, #288]	@ (800caec <GasIndexAlgorithm_process+0x160>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	dc21      	bgt.n	800ca14 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	dc04      	bgt.n	800c9e4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	60bb      	str	r3, [r7, #8]
 800c9e2:	e00d      	b.n	800ca00 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	4a41      	ldr	r2, [pc, #260]	@ (800caf0 <GasIndexAlgorithm_process+0x164>)
 800c9ea:	4694      	mov	ip, r2
 800c9ec:	4463      	add	r3, ip
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	dd05      	ble.n	800ca00 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	4a3d      	ldr	r2, [pc, #244]	@ (800caf0 <GasIndexAlgorithm_process+0x164>)
 800c9fa:	4694      	mov	ip, r2
 800c9fc:	4463      	add	r3, ip
 800c9fe:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	0018      	movs	r0, r3
 800ca0a:	f7f4 fde1 	bl	80015d0 <__aeabi_i2f>
 800ca0e:	1c02      	adds	r2, r0, #0
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d005      	beq.n	800ca28 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	0018      	movs	r0, r3
 800ca20:	f000 f945 	bl	800ccae <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800ca24:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800ca26:	d014      	beq.n	800ca52 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	1c11      	adds	r1, r2, #0
 800ca30:	0018      	movs	r0, r3
 800ca32:	f000 fbd1 	bl	800d1d8 <GasIndexAlgorithm__mox_model__process>
 800ca36:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	1c11      	adds	r1, r2, #0
 800ca44:	0018      	movs	r0, r3
 800ca46:	f000 fc25 	bl	800d294 <GasIndexAlgorithm__sigmoid_scaled__process>
 800ca4a:	1c02      	adds	r2, r0, #0
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ca50:	e003      	b.n	800ca5a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	689a      	ldr	r2, [r3, #8]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	1c11      	adds	r1, r2, #0
 800ca62:	0018      	movs	r0, r3
 800ca64:	f000 fcec 	bl	800d440 <GasIndexAlgorithm__adaptive_lowpass__process>
 800ca68:	1c02      	adds	r2, r0, #0
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca72:	21fc      	movs	r1, #252	@ 0xfc
 800ca74:	0589      	lsls	r1, r1, #22
 800ca76:	1c18      	adds	r0, r3, #0
 800ca78:	f7f3 fd5a 	bl	8000530 <__aeabi_fcmplt>
 800ca7c:	1e03      	subs	r3, r0, #0
 800ca7e:	d003      	beq.n	800ca88 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	22fc      	movs	r2, #252	@ 0xfc
 800ca84:	0592      	lsls	r2, r2, #22
 800ca86:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	1c18      	adds	r0, r3, #0
 800ca90:	f7f3 fd62 	bl	8000558 <__aeabi_fcmpgt>
 800ca94:	1e03      	subs	r3, r0, #0
 800ca96:	d015      	beq.n	800cac4 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	1c11      	adds	r1, r2, #0
 800caa0:	0018      	movs	r0, r3
 800caa2:	f000 fa4f 	bl	800cf44 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	0018      	movs	r0, r3
 800caaa:	f000 f8e5 	bl	800cc78 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800caae:	1c04      	adds	r4, r0, #0
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	0018      	movs	r0, r3
 800cab4:	f000 f8ea 	bl	800cc8c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800cab8:	1c02      	adds	r2, r0, #0
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	1c21      	adds	r1, r4, #0
 800cabe:	0018      	movs	r0, r3
 800cac0:	f000 fb7a 	bl	800d1b8 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac8:	21fc      	movs	r1, #252	@ 0xfc
 800caca:	0589      	lsls	r1, r1, #22
 800cacc:	1c18      	adds	r0, r3, #0
 800cace:	f7f3 fef7 	bl	80008c0 <__aeabi_fadd>
 800cad2:	1c03      	adds	r3, r0, #0
 800cad4:	1c18      	adds	r0, r3, #0
 800cad6:	f7f4 fd5b 	bl	8001590 <__aeabi_f2iz>
 800cada:	0002      	movs	r2, r0
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	601a      	str	r2, [r3, #0]
    return;
 800cae0:	46c0      	nop			@ (mov r8, r8)
}
 800cae2:	46bd      	mov	sp, r7
 800cae4:	b005      	add	sp, #20
 800cae6:	bd90      	pop	{r4, r7, pc}
 800cae8:	42340000 	.word	0x42340000
 800caec:	0000fde7 	.word	0x0000fde7
 800caf0:	00007fff 	.word	0x00007fff

0800caf4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800caf4:	b5b0      	push	{r4, r5, r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	223c      	movs	r2, #60	@ 0x3c
 800cb00:	2100      	movs	r1, #0
 800cb02:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	4952      	ldr	r1, [pc, #328]	@ (800cc68 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800cb1e:	1c18      	adds	r0, r3, #0
 800cb20:	f7f4 f858 	bl	8000bd4 <__aeabi_fdiv>
 800cb24:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800cb26:	2188      	movs	r1, #136	@ 0x88
 800cb28:	05c9      	lsls	r1, r1, #23
 800cb2a:	1c18      	adds	r0, r3, #0
 800cb2c:	f7f4 fa38 	bl	8000fa0 <__aeabi_fmul>
 800cb30:	1c03      	adds	r3, r0, #0
 800cb32:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	494a      	ldr	r1, [pc, #296]	@ (800cc68 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800cb3e:	1c18      	adds	r0, r3, #0
 800cb40:	f7f4 f848 	bl	8000bd4 <__aeabi_fdiv>
 800cb44:	1c03      	adds	r3, r0, #0
 800cb46:	1c19      	adds	r1, r3, #0
 800cb48:	1c20      	adds	r0, r4, #0
 800cb4a:	f7f3 feb9 	bl	80008c0 <__aeabi_fadd>
 800cb4e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800cb50:	1c19      	adds	r1, r3, #0
 800cb52:	1c28      	adds	r0, r5, #0
 800cb54:	f7f4 f83e 	bl	8000bd4 <__aeabi_fdiv>
 800cb58:	1c03      	adds	r3, r0, #0
 800cb5a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	4940      	ldr	r1, [pc, #256]	@ (800cc68 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800cb66:	1c18      	adds	r0, r3, #0
 800cb68:	f7f4 f834 	bl	8000bd4 <__aeabi_fdiv>
 800cb6c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800cb6e:	2185      	movs	r1, #133	@ 0x85
 800cb70:	05c9      	lsls	r1, r1, #23
 800cb72:	1c18      	adds	r0, r3, #0
 800cb74:	f7f4 fa14 	bl	8000fa0 <__aeabi_fmul>
 800cb78:	1c03      	adds	r3, r0, #0
 800cb7a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	4938      	ldr	r1, [pc, #224]	@ (800cc68 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800cb86:	1c18      	adds	r0, r3, #0
 800cb88:	f7f4 f824 	bl	8000bd4 <__aeabi_fdiv>
 800cb8c:	1c03      	adds	r3, r0, #0
 800cb8e:	1c19      	adds	r1, r3, #0
 800cb90:	1c20      	adds	r0, r4, #0
 800cb92:	f7f3 fe95 	bl	80008c0 <__aeabi_fadd>
 800cb96:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800cb98:	1c19      	adds	r1, r3, #0
 800cb9a:	1c28      	adds	r0, r5, #0
 800cb9c:	f7f4 f81a 	bl	8000bd4 <__aeabi_fdiv>
 800cba0:	1c03      	adds	r3, r0, #0
 800cba2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d118      	bne.n	800cbe2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800cbb4:	2188      	movs	r1, #136	@ 0x88
 800cbb6:	05c9      	lsls	r1, r1, #23
 800cbb8:	1c18      	adds	r0, r3, #0
 800cbba:	f7f4 f9f1 	bl	8000fa0 <__aeabi_fmul>
 800cbbe:	1c03      	adds	r3, r0, #0
 800cbc0:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800cbc6:	4929      	ldr	r1, [pc, #164]	@ (800cc6c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800cbc8:	1c18      	adds	r0, r3, #0
 800cbca:	f7f3 fe79 	bl	80008c0 <__aeabi_fadd>
 800cbce:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800cbd0:	1c19      	adds	r1, r3, #0
 800cbd2:	1c20      	adds	r0, r4, #0
 800cbd4:	f7f3 fffe 	bl	8000bd4 <__aeabi_fdiv>
 800cbd8:	1c03      	adds	r3, r0, #0
 800cbda:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	655a      	str	r2, [r3, #84]	@ 0x54
 800cbe0:	e017      	b.n	800cc12 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800cbe6:	2188      	movs	r1, #136	@ 0x88
 800cbe8:	05c9      	lsls	r1, r1, #23
 800cbea:	1c18      	adds	r0, r3, #0
 800cbec:	f7f4 f9d8 	bl	8000fa0 <__aeabi_fmul>
 800cbf0:	1c03      	adds	r3, r0, #0
 800cbf2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800cbf8:	491d      	ldr	r1, [pc, #116]	@ (800cc70 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800cbfa:	1c18      	adds	r0, r3, #0
 800cbfc:	f7f3 fe60 	bl	80008c0 <__aeabi_fadd>
 800cc00:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800cc02:	1c19      	adds	r1, r3, #0
 800cc04:	1c20      	adds	r0, r4, #0
 800cc06:	f7f3 ffe5 	bl	8000bd4 <__aeabi_fdiv>
 800cc0a:	1c03      	adds	r3, r0, #0
 800cc0c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800cc16:	2185      	movs	r1, #133	@ 0x85
 800cc18:	05c9      	lsls	r1, r1, #23
 800cc1a:	1c18      	adds	r0, r3, #0
 800cc1c:	f7f4 f9c0 	bl	8000fa0 <__aeabi_fmul>
 800cc20:	1c03      	adds	r3, r0, #0
 800cc22:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	4912      	ldr	r1, [pc, #72]	@ (800cc74 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800cc2a:	1c18      	adds	r0, r3, #0
 800cc2c:	f7f3 fe48 	bl	80008c0 <__aeabi_fadd>
 800cc30:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800cc32:	1c19      	adds	r1, r3, #0
 800cc34:	1c20      	adds	r0, r4, #0
 800cc36:	f7f3 ffcd 	bl	8000bd4 <__aeabi_fdiv>
 800cc3a:	1c03      	adds	r3, r0, #0
 800cc3c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800cc60:	46c0      	nop			@ (mov r8, r8)
 800cc62:	46bd      	mov	sp, r7
 800cc64:	b002      	add	sp, #8
 800cc66:	bdb0      	pop	{r4, r5, r7, pc}
 800cc68:	45610000 	.word	0x45610000
 800cc6c:	44960000 	.word	0x44960000
 800cc70:	41a00000 	.word	0x41a00000
 800cc74:	451c4000 	.word	0x451c4000

0800cc78 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800cc84:	1c18      	adds	r0, r3, #0
 800cc86:	46bd      	mov	sp, r7
 800cc88:	b002      	add	sp, #8
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800cc9c:	1c19      	adds	r1, r3, #0
 800cc9e:	1c10      	adds	r0, r2, #0
 800cca0:	f7f3 fe0e 	bl	80008c0 <__aeabi_fadd>
 800cca4:	1c03      	adds	r3, r0, #0
}
 800cca6:	1c18      	adds	r0, r3, #0
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	b002      	add	sp, #8
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b082      	sub	sp, #8
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	223c      	movs	r2, #60	@ 0x3c
 800ccba:	5c9b      	ldrb	r3, [r3, r2]
}
 800ccbc:	0018      	movs	r0, r3
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	b002      	add	sp, #8
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800ccc4:	b5b0      	push	{r4, r5, r7, lr}
 800ccc6:	b08c      	sub	sp, #48	@ 0x30
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800ccd0:	1c19      	adds	r1, r3, #0
 800ccd2:	4895      	ldr	r0, [pc, #596]	@ (800cf28 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800ccd4:	f7f4 faa2 	bl	800121c <__aeabi_fsub>
 800ccd8:	1c03      	adds	r3, r0, #0
 800ccda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cce0:	1c19      	adds	r1, r3, #0
 800cce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cce4:	f7f3 fc38 	bl	8000558 <__aeabi_fcmpgt>
 800cce8:	1e03      	subs	r3, r0, #0
 800ccea:	d00b      	beq.n	800cd04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ccf4:	1c19      	adds	r1, r3, #0
 800ccf6:	1c10      	adds	r0, r2, #0
 800ccf8:	f7f3 fde2 	bl	80008c0 <__aeabi_fadd>
 800ccfc:	1c03      	adds	r3, r0, #0
 800ccfe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd08:	1c19      	adds	r1, r3, #0
 800cd0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd0c:	f7f3 fc24 	bl	8000558 <__aeabi_fcmpgt>
 800cd10:	1e03      	subs	r3, r0, #0
 800cd12:	d00b      	beq.n	800cd2c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800cd1c:	1c19      	adds	r1, r3, #0
 800cd1e:	1c10      	adds	r0, r2, #0
 800cd20:	f7f3 fdce 	bl	80008c0 <__aeabi_fadd>
 800cd24:	1c03      	adds	r3, r0, #0
 800cd26:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6959      	ldr	r1, [r3, #20]
 800cd30:	4a7e      	ldr	r2, [pc, #504]	@ (800cf2c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	0018      	movs	r0, r3
 800cd36:	f000 f9f1 	bl	800d11c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	1c11      	adds	r1, r2, #0
 800cd42:	0018      	movs	r0, r3
 800cd44:	f000 f9fa 	bl	800d13c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cd48:	1c03      	adds	r3, r0, #0
 800cd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800cd58:	1c19      	adds	r1, r3, #0
 800cd5a:	1c10      	adds	r0, r2, #0
 800cd5c:	f7f4 fa5e 	bl	800121c <__aeabi_fsub>
 800cd60:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800cd62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd64:	1c18      	adds	r0, r3, #0
 800cd66:	f7f4 f91b 	bl	8000fa0 <__aeabi_fmul>
 800cd6a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800cd6c:	1c19      	adds	r1, r3, #0
 800cd6e:	1c20      	adds	r0, r4, #0
 800cd70:	f7f3 fda6 	bl	80008c0 <__aeabi_fadd>
 800cd74:	1c03      	adds	r3, r0, #0
 800cd76:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800cd80:	1c19      	adds	r1, r3, #0
 800cd82:	486b      	ldr	r0, [pc, #428]	@ (800cf30 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800cd84:	f7f4 fa4a 	bl	800121c <__aeabi_fsub>
 800cd88:	1c03      	adds	r3, r0, #0
 800cd8a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	1c11      	adds	r1, r2, #0
 800cd94:	0018      	movs	r0, r3
 800cd96:	f000 f9d1 	bl	800d13c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cd9a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800cd9c:	1c19      	adds	r1, r3, #0
 800cd9e:	1c28      	adds	r0, r5, #0
 800cda0:	f7f4 f8fe 	bl	8000fa0 <__aeabi_fmul>
 800cda4:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800cda6:	1c19      	adds	r1, r3, #0
 800cda8:	1c20      	adds	r0, r4, #0
 800cdaa:	f7f3 fd89 	bl	80008c0 <__aeabi_fadd>
 800cdae:	1c03      	adds	r3, r0, #0
 800cdb0:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cdb2:	4a60      	ldr	r2, [pc, #384]	@ (800cf34 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800cdb4:	6a39      	ldr	r1, [r7, #32]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	0018      	movs	r0, r3
 800cdba:	f000 f9af 	bl	800d11c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	1c11      	adds	r1, r2, #0
 800cdc6:	0018      	movs	r0, r3
 800cdc8:	f000 f9b8 	bl	800d13c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cdcc:	1c03      	adds	r3, r0, #0
 800cdce:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800cdd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdd2:	69f8      	ldr	r0, [r7, #28]
 800cdd4:	f7f4 f8e4 	bl	8000fa0 <__aeabi_fmul>
 800cdd8:	1c03      	adds	r3, r0, #0
 800cdda:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6999      	ldr	r1, [r3, #24]
 800cde4:	4a51      	ldr	r2, [pc, #324]	@ (800cf2c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	0018      	movs	r0, r3
 800cdea:	f000 f997 	bl	800d11c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	1c11      	adds	r1, r2, #0
 800cdf6:	0018      	movs	r0, r3
 800cdf8:	f000 f9a0 	bl	800d13c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cdfc:	1c03      	adds	r3, r0, #0
 800cdfe:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ce0c:	1c19      	adds	r1, r3, #0
 800ce0e:	1c10      	adds	r0, r2, #0
 800ce10:	f7f4 fa04 	bl	800121c <__aeabi_fsub>
 800ce14:	1c03      	adds	r3, r0, #0
 800ce16:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800ce18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce1a:	69b8      	ldr	r0, [r7, #24]
 800ce1c:	f7f4 f9fe 	bl	800121c <__aeabi_fsub>
 800ce20:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ce22:	1c19      	adds	r1, r3, #0
 800ce24:	1c28      	adds	r0, r5, #0
 800ce26:	f7f4 f8bb 	bl	8000fa0 <__aeabi_fmul>
 800ce2a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800ce2c:	1c19      	adds	r1, r3, #0
 800ce2e:	1c20      	adds	r0, r4, #0
 800ce30:	f7f3 fd46 	bl	80008c0 <__aeabi_fadd>
 800ce34:	1c03      	adds	r3, r0, #0
 800ce36:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ce40:	1c19      	adds	r1, r3, #0
 800ce42:	483b      	ldr	r0, [pc, #236]	@ (800cf30 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ce44:	f7f4 f9ea 	bl	800121c <__aeabi_fsub>
 800ce48:	1c03      	adds	r3, r0, #0
 800ce4a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	1c11      	adds	r1, r2, #0
 800ce54:	0018      	movs	r0, r3
 800ce56:	f000 f971 	bl	800d13c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ce5a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ce5c:	1c19      	adds	r1, r3, #0
 800ce5e:	1c28      	adds	r0, r5, #0
 800ce60:	f7f4 f89e 	bl	8000fa0 <__aeabi_fmul>
 800ce64:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800ce66:	1c19      	adds	r1, r3, #0
 800ce68:	1c20      	adds	r0, r4, #0
 800ce6a:	f7f3 fd29 	bl	80008c0 <__aeabi_fadd>
 800ce6e:	1c03      	adds	r3, r0, #0
 800ce70:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ce72:	4a30      	ldr	r2, [pc, #192]	@ (800cf34 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ce74:	6939      	ldr	r1, [r7, #16]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	0018      	movs	r0, r3
 800ce7a:	f000 f94f 	bl	800d11c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	1c11      	adds	r1, r2, #0
 800ce86:	0018      	movs	r0, r3
 800ce88:	f000 f958 	bl	800d13c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ce8c:	1c03      	adds	r3, r0, #0
 800ce8e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ce90:	6979      	ldr	r1, [r7, #20]
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f7f4 f884 	bl	8000fa0 <__aeabi_fmul>
 800ce98:	1c03      	adds	r3, r0, #0
 800ce9a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	4923      	ldr	r1, [pc, #140]	@ (800cf38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ceaa:	1c18      	adds	r0, r3, #0
 800ceac:	f7f3 fe92 	bl	8000bd4 <__aeabi_fdiv>
 800ceb0:	1c03      	adds	r3, r0, #0
 800ceb2:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ceb4:	69f9      	ldr	r1, [r7, #28]
 800ceb6:	20fe      	movs	r0, #254	@ 0xfe
 800ceb8:	0580      	lsls	r0, r0, #22
 800ceba:	f7f4 f9af 	bl	800121c <__aeabi_fsub>
 800cebe:	1c03      	adds	r3, r0, #0
 800cec0:	491e      	ldr	r1, [pc, #120]	@ (800cf3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800cec2:	1c18      	adds	r0, r3, #0
 800cec4:	f7f4 f86c 	bl	8000fa0 <__aeabi_fmul>
 800cec8:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ceca:	491d      	ldr	r1, [pc, #116]	@ (800cf40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800cecc:	1c18      	adds	r0, r3, #0
 800cece:	f7f4 f9a5 	bl	800121c <__aeabi_fsub>
 800ced2:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ced4:	1c19      	adds	r1, r3, #0
 800ced6:	1c28      	adds	r0, r5, #0
 800ced8:	f7f4 f862 	bl	8000fa0 <__aeabi_fmul>
 800cedc:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800cede:	1c19      	adds	r1, r3, #0
 800cee0:	1c20      	adds	r0, r4, #0
 800cee2:	f7f3 fced 	bl	80008c0 <__aeabi_fadd>
 800cee6:	1c03      	adds	r3, r0, #0
 800cee8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cef2:	2100      	movs	r1, #0
 800cef4:	1c18      	adds	r0, r3, #0
 800cef6:	f7f3 fb1b 	bl	8000530 <__aeabi_fcmplt>
 800cefa:	1e03      	subs	r3, r0, #0
 800cefc:	d002      	beq.n	800cf04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800cf0c:	1c19      	adds	r1, r3, #0
 800cf0e:	1c10      	adds	r0, r2, #0
 800cf10:	f7f3 fb22 	bl	8000558 <__aeabi_fcmpgt>
 800cf14:	1e03      	subs	r3, r0, #0
 800cf16:	d100      	bne.n	800cf1a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800cf18:	e002      	b.n	800cf20 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800cf20:	46c0      	nop			@ (mov r8, r8)
 800cf22:	46bd      	mov	sp, r7
 800cf24:	b00c      	add	sp, #48	@ 0x30
 800cf26:	bdb0      	pop	{r4, r5, r7, pc}
 800cf28:	46fffe00 	.word	0x46fffe00
 800cf2c:	3c23d70a 	.word	0x3c23d70a
 800cf30:	43ff0000 	.word	0x43ff0000
 800cf34:	3db851ec 	.word	0x3db851ec
 800cf38:	42700000 	.word	0x42700000
 800cf3c:	3fa66666 	.word	0x3fa66666
 800cf40:	3e99999a 	.word	0x3e99999a

0800cf44 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800cf44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	223c      	movs	r2, #60	@ 0x3c
 800cf52:	5c9b      	ldrb	r3, [r3, r2]
 800cf54:	2201      	movs	r2, #1
 800cf56:	4053      	eors	r3, r2
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00a      	beq.n	800cf74 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	223c      	movs	r2, #60	@ 0x3c
 800cf62:	2101      	movs	r1, #1
 800cf64:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800cf72:	e0c8      	b.n	800d106 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf78:	4965      	ldr	r1, [pc, #404]	@ (800d110 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800cf7a:	1c18      	adds	r0, r3, #0
 800cf7c:	f7f3 faf6 	bl	800056c <__aeabi_fcmpge>
 800cf80:	1e03      	subs	r3, r0, #0
 800cf82:	d107      	bne.n	800cf94 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800cf88:	4962      	ldr	r1, [pc, #392]	@ (800d114 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800cf8a:	1c18      	adds	r0, r3, #0
 800cf8c:	f7f3 fada 	bl	8000544 <__aeabi_fcmple>
 800cf90:	1e03      	subs	r3, r0, #0
 800cf92:	d00e      	beq.n	800cfb2 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800cf9c:	1c19      	adds	r1, r3, #0
 800cf9e:	1c10      	adds	r0, r2, #0
 800cfa0:	f7f3 fc8e 	bl	80008c0 <__aeabi_fadd>
 800cfa4:	1c03      	adds	r3, r0, #0
 800cfa6:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfb6:	1c19      	adds	r1, r3, #0
 800cfb8:	6838      	ldr	r0, [r7, #0]
 800cfba:	f7f4 f92f 	bl	800121c <__aeabi_fsub>
 800cfbe:	1c03      	adds	r3, r0, #0
 800cfc0:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f7ff fe7d 	bl	800ccc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfce:	1c19      	adds	r1, r3, #0
 800cfd0:	6838      	ldr	r0, [r7, #0]
 800cfd2:	f7f4 f923 	bl	800121c <__aeabi_fsub>
 800cfd6:	1c03      	adds	r3, r0, #0
 800cfd8:	2185      	movs	r1, #133	@ 0x85
 800cfda:	05c9      	lsls	r1, r1, #23
 800cfdc:	1c18      	adds	r0, r3, #0
 800cfde:	f7f3 fdf9 	bl	8000bd4 <__aeabi_fdiv>
 800cfe2:	1c03      	adds	r3, r0, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7f3 faa1 	bl	8000530 <__aeabi_fcmplt>
 800cfee:	1e03      	subs	r3, r0, #0
 800cff0:	d008      	beq.n	800d004 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cff6:	68f9      	ldr	r1, [r7, #12]
 800cff8:	1c18      	adds	r0, r3, #0
 800cffa:	f7f4 f90f 	bl	800121c <__aeabi_fsub>
 800cffe:	1c03      	adds	r3, r0, #0
 800d000:	617b      	str	r3, [r7, #20]
 800d002:	e007      	b.n	800d014 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d008:	1c19      	adds	r1, r3, #0
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f7f3 fc58 	bl	80008c0 <__aeabi_fadd>
 800d010:	1c03      	adds	r3, r0, #0
 800d012:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800d014:	23fe      	movs	r3, #254	@ 0xfe
 800d016:	059b      	lsls	r3, r3, #22
 800d018:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800d01a:	493f      	ldr	r1, [pc, #252]	@ (800d118 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800d01c:	6978      	ldr	r0, [r7, #20]
 800d01e:	f7f3 fa9b 	bl	8000558 <__aeabi_fcmpgt>
 800d022:	1e03      	subs	r3, r0, #0
 800d024:	d010      	beq.n	800d048 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800d026:	493c      	ldr	r1, [pc, #240]	@ (800d118 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800d028:	6978      	ldr	r0, [r7, #20]
 800d02a:	f7f3 fdd3 	bl	8000bd4 <__aeabi_fdiv>
 800d02e:	1c03      	adds	r3, r0, #0
 800d030:	1c1c      	adds	r4, r3, #0
 800d032:	4939      	ldr	r1, [pc, #228]	@ (800d118 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800d034:	6978      	ldr	r0, [r7, #20]
 800d036:	f7f3 fdcd 	bl	8000bd4 <__aeabi_fdiv>
 800d03a:	1c03      	adds	r3, r0, #0
 800d03c:	1c19      	adds	r1, r3, #0
 800d03e:	1c20      	adds	r0, r4, #0
 800d040:	f7f3 ffae 	bl	8000fa0 <__aeabi_fmul>
 800d044:	1c03      	adds	r3, r0, #0
 800d046:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800d04c:	1c19      	adds	r1, r3, #0
 800d04e:	2085      	movs	r0, #133	@ 0x85
 800d050:	05c0      	lsls	r0, r0, #23
 800d052:	f7f4 f8e3 	bl	800121c <__aeabi_fsub>
 800d056:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800d058:	6939      	ldr	r1, [r7, #16]
 800d05a:	1c18      	adds	r0, r3, #0
 800d05c:	f7f3 ffa0 	bl	8000fa0 <__aeabi_fmul>
 800d060:	1c03      	adds	r3, r0, #0
 800d062:	1c18      	adds	r0, r3, #0
 800d064:	f018 fb04 	bl	8025670 <sqrtf>
 800d068:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800d072:	2185      	movs	r1, #133	@ 0x85
 800d074:	05c9      	lsls	r1, r1, #23
 800d076:	6938      	ldr	r0, [r7, #16]
 800d078:	f7f3 ff92 	bl	8000fa0 <__aeabi_fmul>
 800d07c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800d07e:	1c19      	adds	r1, r3, #0
 800d080:	1c28      	adds	r0, r5, #0
 800d082:	f7f3 fda7 	bl	8000bd4 <__aeabi_fdiv>
 800d086:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800d088:	1c19      	adds	r1, r3, #0
 800d08a:	1c20      	adds	r0, r4, #0
 800d08c:	f7f3 ff88 	bl	8000fa0 <__aeabi_fmul>
 800d090:	1c03      	adds	r3, r0, #0
 800d092:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d098:	68f9      	ldr	r1, [r7, #12]
 800d09a:	1c18      	adds	r0, r3, #0
 800d09c:	f7f3 ff80 	bl	8000fa0 <__aeabi_fmul>
 800d0a0:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800d0a2:	6939      	ldr	r1, [r7, #16]
 800d0a4:	1c18      	adds	r0, r3, #0
 800d0a6:	f7f3 fd95 	bl	8000bd4 <__aeabi_fdiv>
 800d0aa:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800d0ac:	68f9      	ldr	r1, [r7, #12]
 800d0ae:	1c18      	adds	r0, r3, #0
 800d0b0:	f7f3 ff76 	bl	8000fa0 <__aeabi_fmul>
 800d0b4:	1c03      	adds	r3, r0, #0
             sqrtf(
 800d0b6:	1c19      	adds	r1, r3, #0
 800d0b8:	1c20      	adds	r0, r4, #0
 800d0ba:	f7f3 fc01 	bl	80008c0 <__aeabi_fadd>
 800d0be:	1c03      	adds	r3, r0, #0
 800d0c0:	1c18      	adds	r0, r3, #0
 800d0c2:	f018 fad5 	bl	8025670 <sqrtf>
 800d0c6:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800d0c8:	1c19      	adds	r1, r3, #0
 800d0ca:	1c30      	adds	r0, r6, #0
 800d0cc:	f7f3 ff68 	bl	8000fa0 <__aeabi_fmul>
 800d0d0:	1c03      	adds	r3, r0, #0
 800d0d2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0e0:	68f9      	ldr	r1, [r7, #12]
 800d0e2:	1c18      	adds	r0, r3, #0
 800d0e4:	f7f3 ff5c 	bl	8000fa0 <__aeabi_fmul>
 800d0e8:	1c03      	adds	r3, r0, #0
 800d0ea:	2182      	movs	r1, #130	@ 0x82
 800d0ec:	05c9      	lsls	r1, r1, #23
 800d0ee:	1c18      	adds	r0, r3, #0
 800d0f0:	f7f3 fd70 	bl	8000bd4 <__aeabi_fdiv>
 800d0f4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800d0f6:	1c19      	adds	r1, r3, #0
 800d0f8:	1c20      	adds	r0, r4, #0
 800d0fa:	f7f3 fbe1 	bl	80008c0 <__aeabi_fadd>
 800d0fe:	1c03      	adds	r3, r0, #0
 800d100:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800d106:	46c0      	nop			@ (mov r8, r8)
 800d108:	46bd      	mov	sp, r7
 800d10a:	b007      	add	sp, #28
 800d10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d10e:	46c0      	nop			@ (mov r8, r8)
 800d110:	42c80000 	.word	0x42c80000
 800d114:	c2c80000 	.word	0xc2c80000
 800d118:	44b40000 	.word	0x44b40000

0800d11c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d134:	46c0      	nop			@ (mov r8, r8)
 800d136:	46bd      	mov	sp, r7
 800d138:	b004      	add	sp, #16
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800d13c:	b590      	push	{r4, r7, lr}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d14e:	1c19      	adds	r1, r3, #0
 800d150:	6838      	ldr	r0, [r7, #0]
 800d152:	f7f4 f863 	bl	800121c <__aeabi_fsub>
 800d156:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800d158:	1c19      	adds	r1, r3, #0
 800d15a:	1c20      	adds	r0, r4, #0
 800d15c:	f7f3 ff20 	bl	8000fa0 <__aeabi_fmul>
 800d160:	1c03      	adds	r3, r0, #0
 800d162:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800d164:	4912      	ldr	r1, [pc, #72]	@ (800d1b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f7f3 f9e2 	bl	8000530 <__aeabi_fcmplt>
 800d16c:	1e03      	subs	r3, r0, #0
 800d16e:	d002      	beq.n	800d176 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800d170:	23fe      	movs	r3, #254	@ 0xfe
 800d172:	059b      	lsls	r3, r3, #22
 800d174:	e018      	b.n	800d1a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800d176:	490f      	ldr	r1, [pc, #60]	@ (800d1b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7f3 f9ed 	bl	8000558 <__aeabi_fcmpgt>
 800d17e:	1e03      	subs	r3, r0, #0
 800d180:	d001      	beq.n	800d186 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800d182:	2300      	movs	r3, #0
 800d184:	e010      	b.n	800d1a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	1c18      	adds	r0, r3, #0
 800d18a:	f018 fa49 	bl	8025620 <expf>
 800d18e:	1c03      	adds	r3, r0, #0
 800d190:	21fe      	movs	r1, #254	@ 0xfe
 800d192:	0589      	lsls	r1, r1, #22
 800d194:	1c18      	adds	r0, r3, #0
 800d196:	f7f3 fb93 	bl	80008c0 <__aeabi_fadd>
 800d19a:	1c03      	adds	r3, r0, #0
 800d19c:	1c19      	adds	r1, r3, #0
 800d19e:	20fe      	movs	r0, #254	@ 0xfe
 800d1a0:	0580      	lsls	r0, r0, #22
 800d1a2:	f7f3 fd17 	bl	8000bd4 <__aeabi_fdiv>
 800d1a6:	1c03      	adds	r3, r0, #0
    }
}
 800d1a8:	1c18      	adds	r0, r3, #0
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	b005      	add	sp, #20
 800d1ae:	bd90      	pop	{r4, r7, pc}
 800d1b0:	c2480000 	.word	0xc2480000
 800d1b4:	42480000 	.word	0x42480000

0800d1b8 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d1d0:	46c0      	nop			@ (mov r8, r8)
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	b004      	add	sp, #16
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800d1d8:	b590      	push	{r4, r7, lr}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d114      	bne.n	800d214 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d1ee:	1c19      	adds	r1, r3, #0
 800d1f0:	6838      	ldr	r0, [r7, #0]
 800d1f2:	f7f4 f813 	bl	800121c <__aeabi_fsub>
 800d1f6:	1c03      	adds	r3, r0, #0
 800d1f8:	4918      	ldr	r1, [pc, #96]	@ (800d25c <GasIndexAlgorithm__mox_model__process+0x84>)
 800d1fa:	1c18      	adds	r0, r3, #0
 800d1fc:	f7f3 fcea 	bl	8000bd4 <__aeabi_fdiv>
 800d200:	1c03      	adds	r3, r0, #0
 800d202:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800d208:	1c19      	adds	r1, r3, #0
 800d20a:	1c10      	adds	r0, r2, #0
 800d20c:	f7f3 fec8 	bl	8000fa0 <__aeabi_fmul>
 800d210:	1c03      	adds	r3, r0, #0
 800d212:	e01f      	b.n	800d254 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d218:	1c19      	adds	r1, r3, #0
 800d21a:	6838      	ldr	r0, [r7, #0]
 800d21c:	f7f3 fffe 	bl	800121c <__aeabi_fsub>
 800d220:	1c03      	adds	r3, r0, #0
 800d222:	1c1a      	adds	r2, r3, #0
 800d224:	2380      	movs	r3, #128	@ 0x80
 800d226:	061b      	lsls	r3, r3, #24
 800d228:	4053      	eors	r3, r2
 800d22a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d230:	490b      	ldr	r1, [pc, #44]	@ (800d260 <GasIndexAlgorithm__mox_model__process+0x88>)
 800d232:	1c18      	adds	r0, r3, #0
 800d234:	f7f3 fb44 	bl	80008c0 <__aeabi_fadd>
 800d238:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d23a:	1c19      	adds	r1, r3, #0
 800d23c:	1c20      	adds	r0, r4, #0
 800d23e:	f7f3 fcc9 	bl	8000bd4 <__aeabi_fdiv>
 800d242:	1c03      	adds	r3, r0, #0
 800d244:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800d24a:	1c19      	adds	r1, r3, #0
 800d24c:	1c10      	adds	r0, r2, #0
 800d24e:	f7f3 fea7 	bl	8000fa0 <__aeabi_fmul>
 800d252:	1c03      	adds	r3, r0, #0
    }
}
 800d254:	1c18      	adds	r0, r3, #0
 800d256:	46bd      	mov	sp, r7
 800d258:	b003      	add	sp, #12
 800d25a:	bd90      	pop	{r4, r7, pc}
 800d25c:	44fa0000 	.word	0x44fa0000
 800d260:	435c0000 	.word	0x435c0000

0800d264 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2180      	movs	r1, #128	@ 0x80
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2184      	movs	r1, #132	@ 0x84
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2188      	movs	r1, #136	@ 0x88
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	505a      	str	r2, [r3, r1]
}
 800d28a:	46c0      	nop			@ (mov r8, r8)
 800d28c:	46bd      	mov	sp, r7
 800d28e:	b004      	add	sp, #16
 800d290:	bd80      	pop	{r7, pc}
	...

0800d294 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800d294:	b590      	push	{r4, r7, lr}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2280      	movs	r2, #128	@ 0x80
 800d2a2:	589c      	ldr	r4, [r3, r2]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2284      	movs	r2, #132	@ 0x84
 800d2a8:	589b      	ldr	r3, [r3, r2]
 800d2aa:	1c19      	adds	r1, r3, #0
 800d2ac:	6838      	ldr	r0, [r7, #0]
 800d2ae:	f7f3 ffb5 	bl	800121c <__aeabi_fsub>
 800d2b2:	1c03      	adds	r3, r0, #0
 800d2b4:	1c19      	adds	r1, r3, #0
 800d2b6:	1c20      	adds	r0, r4, #0
 800d2b8:	f7f3 fe72 	bl	8000fa0 <__aeabi_fmul>
 800d2bc:	1c03      	adds	r3, r0, #0
 800d2be:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800d2c0:	4940      	ldr	r1, [pc, #256]	@ (800d3c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800d2c2:	68b8      	ldr	r0, [r7, #8]
 800d2c4:	f7f3 f934 	bl	8000530 <__aeabi_fcmplt>
 800d2c8:	1e03      	subs	r3, r0, #0
 800d2ca:	d001      	beq.n	800d2d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800d2cc:	4b3e      	ldr	r3, [pc, #248]	@ (800d3c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d2ce:	e075      	b.n	800d3bc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800d2d0:	493e      	ldr	r1, [pc, #248]	@ (800d3cc <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800d2d2:	68b8      	ldr	r0, [r7, #8]
 800d2d4:	f7f3 f940 	bl	8000558 <__aeabi_fcmpgt>
 800d2d8:	1e03      	subs	r3, r0, #0
 800d2da:	d001      	beq.n	800d2e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	e06d      	b.n	800d3bc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	6838      	ldr	r0, [r7, #0]
 800d2e4:	f7f3 f942 	bl	800056c <__aeabi_fcmpge>
 800d2e8:	1e03      	subs	r3, r0, #0
 800d2ea:	d047      	beq.n	800d37c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2288      	movs	r2, #136	@ 0x88
 800d2f0:	589b      	ldr	r3, [r3, r2]
 800d2f2:	21fe      	movs	r1, #254	@ 0xfe
 800d2f4:	0589      	lsls	r1, r1, #22
 800d2f6:	1c18      	adds	r0, r3, #0
 800d2f8:	f7f3 f914 	bl	8000524 <__aeabi_fcmpeq>
 800d2fc:	1e03      	subs	r3, r0, #0
 800d2fe:	d00e      	beq.n	800d31e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	1c19      	adds	r1, r3, #0
 800d306:	20fe      	movs	r0, #254	@ 0xfe
 800d308:	0580      	lsls	r0, r0, #22
 800d30a:	f7f3 ff87 	bl	800121c <__aeabi_fsub>
 800d30e:	1c03      	adds	r3, r0, #0
 800d310:	492f      	ldr	r1, [pc, #188]	@ (800d3d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800d312:	1c18      	adds	r0, r3, #0
 800d314:	f7f3 fe44 	bl	8000fa0 <__aeabi_fmul>
 800d318:	1c03      	adds	r3, r0, #0
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	e012      	b.n	800d344 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	492c      	ldr	r1, [pc, #176]	@ (800d3d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800d324:	1c18      	adds	r0, r3, #0
 800d326:	f7f3 fe3b 	bl	8000fa0 <__aeabi_fmul>
 800d32a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800d32c:	1c19      	adds	r1, r3, #0
 800d32e:	4826      	ldr	r0, [pc, #152]	@ (800d3c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d330:	f7f3 ff74 	bl	800121c <__aeabi_fsub>
 800d334:	1c03      	adds	r3, r0, #0
 800d336:	2181      	movs	r1, #129	@ 0x81
 800d338:	05c9      	lsls	r1, r1, #23
 800d33a:	1c18      	adds	r0, r3, #0
 800d33c:	f7f3 fc4a 	bl	8000bd4 <__aeabi_fdiv>
 800d340:	1c03      	adds	r3, r0, #0
 800d342:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800d344:	4920      	ldr	r1, [pc, #128]	@ (800d3c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f7f3 faba 	bl	80008c0 <__aeabi_fadd>
 800d34c:	1c03      	adds	r3, r0, #0
 800d34e:	1c1c      	adds	r4, r3, #0
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	1c18      	adds	r0, r3, #0
 800d354:	f018 f964 	bl	8025620 <expf>
 800d358:	1c03      	adds	r3, r0, #0
 800d35a:	21fe      	movs	r1, #254	@ 0xfe
 800d35c:	0589      	lsls	r1, r1, #22
 800d35e:	1c18      	adds	r0, r3, #0
 800d360:	f7f3 faae 	bl	80008c0 <__aeabi_fadd>
 800d364:	1c03      	adds	r3, r0, #0
 800d366:	1c19      	adds	r1, r3, #0
 800d368:	1c20      	adds	r0, r4, #0
 800d36a:	f7f3 fc33 	bl	8000bd4 <__aeabi_fdiv>
 800d36e:	1c03      	adds	r3, r0, #0
 800d370:	68f9      	ldr	r1, [r7, #12]
 800d372:	1c18      	adds	r0, r3, #0
 800d374:	f7f3 ff52 	bl	800121c <__aeabi_fsub>
 800d378:	1c03      	adds	r3, r0, #0
 800d37a:	e01f      	b.n	800d3bc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2188      	movs	r1, #136	@ 0x88
 800d384:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800d386:	1c19      	adds	r1, r3, #0
 800d388:	1c10      	adds	r0, r2, #0
 800d38a:	f7f3 fc23 	bl	8000bd4 <__aeabi_fdiv>
 800d38e:	1c03      	adds	r3, r0, #0
 800d390:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	1c18      	adds	r0, r3, #0
 800d396:	f018 f943 	bl	8025620 <expf>
 800d39a:	1c03      	adds	r3, r0, #0
 800d39c:	21fe      	movs	r1, #254	@ 0xfe
 800d39e:	0589      	lsls	r1, r1, #22
 800d3a0:	1c18      	adds	r0, r3, #0
 800d3a2:	f7f3 fa8d 	bl	80008c0 <__aeabi_fadd>
 800d3a6:	1c03      	adds	r3, r0, #0
 800d3a8:	1c19      	adds	r1, r3, #0
 800d3aa:	4807      	ldr	r0, [pc, #28]	@ (800d3c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d3ac:	f7f3 fc12 	bl	8000bd4 <__aeabi_fdiv>
 800d3b0:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800d3b2:	1c19      	adds	r1, r3, #0
 800d3b4:	1c20      	adds	r0, r4, #0
 800d3b6:	f7f3 fdf3 	bl	8000fa0 <__aeabi_fmul>
 800d3ba:	1c03      	adds	r3, r0, #0
        }
    }
}
 800d3bc:	1c18      	adds	r0, r3, #0
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	b005      	add	sp, #20
 800d3c2:	bd90      	pop	{r4, r7, pc}
 800d3c4:	c2480000 	.word	0xc2480000
 800d3c8:	43fa0000 	.word	0x43fa0000
 800d3cc:	42480000 	.word	0x42480000
 800d3d0:	3f8041ab 	.word	0x3f8041ab
 800d3d4:	40a00000 	.word	0x40a00000

0800d3d8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800d3d8:	b590      	push	{r4, r7, lr}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	4913      	ldr	r1, [pc, #76]	@ (800d438 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800d3ea:	1c18      	adds	r0, r3, #0
 800d3ec:	f7f3 fa68 	bl	80008c0 <__aeabi_fadd>
 800d3f0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800d3f2:	1c19      	adds	r1, r3, #0
 800d3f4:	1c20      	adds	r0, r4, #0
 800d3f6:	f7f3 fbed 	bl	8000bd4 <__aeabi_fdiv>
 800d3fa:	1c03      	adds	r3, r0, #0
 800d3fc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	228c      	movs	r2, #140	@ 0x8c
 800d402:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	490b      	ldr	r1, [pc, #44]	@ (800d43c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800d40e:	1c18      	adds	r0, r3, #0
 800d410:	f7f3 fa56 	bl	80008c0 <__aeabi_fadd>
 800d414:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800d416:	1c19      	adds	r1, r3, #0
 800d418:	1c20      	adds	r0, r4, #0
 800d41a:	f7f3 fbdb 	bl	8000bd4 <__aeabi_fdiv>
 800d41e:	1c03      	adds	r3, r0, #0
 800d420:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2290      	movs	r2, #144	@ 0x90
 800d426:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2294      	movs	r2, #148	@ 0x94
 800d42c:	2100      	movs	r1, #0
 800d42e:	5499      	strb	r1, [r3, r2]
}
 800d430:	46c0      	nop			@ (mov r8, r8)
 800d432:	46bd      	mov	sp, r7
 800d434:	b003      	add	sp, #12
 800d436:	bd90      	pop	{r4, r7, pc}
 800d438:	41a00000 	.word	0x41a00000
 800d43c:	43fa0000 	.word	0x43fa0000

0800d440 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800d440:	b590      	push	{r4, r7, lr}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2294      	movs	r2, #148	@ 0x94
 800d44e:	5c9b      	ldrb	r3, [r3, r2]
 800d450:	2201      	movs	r2, #1
 800d452:	4053      	eors	r3, r2
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00f      	beq.n	800d47a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2198      	movs	r1, #152	@ 0x98
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	219c      	movs	r1, #156	@ 0x9c
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	21a0      	movs	r1, #160	@ 0xa0
 800d46e:	683a      	ldr	r2, [r7, #0]
 800d470:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2294      	movs	r2, #148	@ 0x94
 800d476:	2101      	movs	r1, #1
 800d478:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	228c      	movs	r2, #140	@ 0x8c
 800d47e:	589b      	ldr	r3, [r3, r2]
 800d480:	1c19      	adds	r1, r3, #0
 800d482:	20fe      	movs	r0, #254	@ 0xfe
 800d484:	0580      	lsls	r0, r0, #22
 800d486:	f7f3 fec9 	bl	800121c <__aeabi_fsub>
 800d48a:	1c03      	adds	r3, r0, #0
 800d48c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2298      	movs	r2, #152	@ 0x98
 800d492:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800d494:	1c19      	adds	r1, r3, #0
 800d496:	f7f3 fd83 	bl	8000fa0 <__aeabi_fmul>
 800d49a:	1c03      	adds	r3, r0, #0
 800d49c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	228c      	movs	r2, #140	@ 0x8c
 800d4a2:	589b      	ldr	r3, [r3, r2]
 800d4a4:	6839      	ldr	r1, [r7, #0]
 800d4a6:	1c18      	adds	r0, r3, #0
 800d4a8:	f7f3 fd7a 	bl	8000fa0 <__aeabi_fmul>
 800d4ac:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800d4ae:	1c19      	adds	r1, r3, #0
 800d4b0:	1c20      	adds	r0, r4, #0
 800d4b2:	f7f3 fa05 	bl	80008c0 <__aeabi_fadd>
 800d4b6:	1c03      	adds	r3, r0, #0
 800d4b8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2298      	movs	r2, #152	@ 0x98
 800d4be:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2290      	movs	r2, #144	@ 0x90
 800d4c4:	589b      	ldr	r3, [r3, r2]
 800d4c6:	1c19      	adds	r1, r3, #0
 800d4c8:	20fe      	movs	r0, #254	@ 0xfe
 800d4ca:	0580      	lsls	r0, r0, #22
 800d4cc:	f7f3 fea6 	bl	800121c <__aeabi_fsub>
 800d4d0:	1c03      	adds	r3, r0, #0
 800d4d2:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	229c      	movs	r2, #156	@ 0x9c
 800d4d8:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800d4da:	1c19      	adds	r1, r3, #0
 800d4dc:	f7f3 fd60 	bl	8000fa0 <__aeabi_fmul>
 800d4e0:	1c03      	adds	r3, r0, #0
 800d4e2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2290      	movs	r2, #144	@ 0x90
 800d4e8:	589b      	ldr	r3, [r3, r2]
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	1c18      	adds	r0, r3, #0
 800d4ee:	f7f3 fd57 	bl	8000fa0 <__aeabi_fmul>
 800d4f2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800d4f4:	1c19      	adds	r1, r3, #0
 800d4f6:	1c20      	adds	r0, r4, #0
 800d4f8:	f7f3 f9e2 	bl	80008c0 <__aeabi_fadd>
 800d4fc:	1c03      	adds	r3, r0, #0
 800d4fe:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	229c      	movs	r2, #156	@ 0x9c
 800d504:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2298      	movs	r2, #152	@ 0x98
 800d50a:	589a      	ldr	r2, [r3, r2]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	219c      	movs	r1, #156	@ 0x9c
 800d510:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800d512:	1c19      	adds	r1, r3, #0
 800d514:	1c10      	adds	r0, r2, #0
 800d516:	f7f3 fe81 	bl	800121c <__aeabi_fsub>
 800d51a:	1c03      	adds	r3, r0, #0
 800d51c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800d51e:	2100      	movs	r1, #0
 800d520:	6978      	ldr	r0, [r7, #20]
 800d522:	f7f3 f805 	bl	8000530 <__aeabi_fcmplt>
 800d526:	1e03      	subs	r3, r0, #0
 800d528:	d004      	beq.n	800d534 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2280      	movs	r2, #128	@ 0x80
 800d52e:	0612      	lsls	r2, r2, #24
 800d530:	4053      	eors	r3, r2
 800d532:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800d534:	4923      	ldr	r1, [pc, #140]	@ (800d5c4 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800d536:	6978      	ldr	r0, [r7, #20]
 800d538:	f7f3 fd32 	bl	8000fa0 <__aeabi_fmul>
 800d53c:	1c03      	adds	r3, r0, #0
 800d53e:	1c18      	adds	r0, r3, #0
 800d540:	f018 f86e 	bl	8025620 <expf>
 800d544:	1c03      	adds	r3, r0, #0
 800d546:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800d548:	491f      	ldr	r1, [pc, #124]	@ (800d5c8 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800d54a:	6938      	ldr	r0, [r7, #16]
 800d54c:	f7f3 fd28 	bl	8000fa0 <__aeabi_fmul>
 800d550:	1c03      	adds	r3, r0, #0
 800d552:	491e      	ldr	r1, [pc, #120]	@ (800d5cc <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800d554:	1c18      	adds	r0, r3, #0
 800d556:	f7f3 f9b3 	bl	80008c0 <__aeabi_fadd>
 800d55a:	1c03      	adds	r3, r0, #0
 800d55c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	685c      	ldr	r4, [r3, #4]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	68f9      	ldr	r1, [r7, #12]
 800d568:	1c18      	adds	r0, r3, #0
 800d56a:	f7f3 f9a9 	bl	80008c0 <__aeabi_fadd>
 800d56e:	1c03      	adds	r3, r0, #0
 800d570:	1c19      	adds	r1, r3, #0
 800d572:	1c20      	adds	r0, r4, #0
 800d574:	f7f3 fb2e 	bl	8000bd4 <__aeabi_fdiv>
 800d578:	1c03      	adds	r3, r0, #0
 800d57a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800d57c:	68b9      	ldr	r1, [r7, #8]
 800d57e:	20fe      	movs	r0, #254	@ 0xfe
 800d580:	0580      	lsls	r0, r0, #22
 800d582:	f7f3 fe4b 	bl	800121c <__aeabi_fsub>
 800d586:	1c03      	adds	r3, r0, #0
 800d588:	1c18      	adds	r0, r3, #0
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	22a0      	movs	r2, #160	@ 0xa0
 800d58e:	589b      	ldr	r3, [r3, r2]
 800d590:	1c19      	adds	r1, r3, #0
 800d592:	f7f3 fd05 	bl	8000fa0 <__aeabi_fmul>
 800d596:	1c03      	adds	r3, r0, #0
 800d598:	1c1c      	adds	r4, r3, #0
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	68b8      	ldr	r0, [r7, #8]
 800d59e:	f7f3 fcff 	bl	8000fa0 <__aeabi_fmul>
 800d5a2:	1c03      	adds	r3, r0, #0
 800d5a4:	1c19      	adds	r1, r3, #0
 800d5a6:	1c20      	adds	r0, r4, #0
 800d5a8:	f7f3 f98a 	bl	80008c0 <__aeabi_fadd>
 800d5ac:	1c03      	adds	r3, r0, #0
 800d5ae:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	22a0      	movs	r2, #160	@ 0xa0
 800d5b4:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	22a0      	movs	r2, #160	@ 0xa0
 800d5ba:	589b      	ldr	r3, [r3, r2]
}
 800d5bc:	1c18      	adds	r0, r3, #0
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	b007      	add	sp, #28
 800d5c2:	bd90      	pop	{r4, r7, pc}
 800d5c4:	be4ccccd 	.word	0xbe4ccccd
 800d5c8:	43f00000 	.word	0x43f00000
 800d5cc:	41a00000 	.word	0x41a00000

0800d5d0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	000a      	movs	r2, r1
 800d5da:	1cbb      	adds	r3, r7, #2
 800d5dc:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800d5de:	230d      	movs	r3, #13
 800d5e0:	18fb      	adds	r3, r7, r3
 800d5e2:	22ff      	movs	r2, #255	@ 0xff
 800d5e4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800d5e6:	230e      	movs	r3, #14
 800d5e8:	18fb      	adds	r3, r7, r3
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	801a      	strh	r2, [r3, #0]
 800d5ee:	e037      	b.n	800d660 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800d5f0:	230e      	movs	r3, #14
 800d5f2:	18fb      	adds	r3, r7, r3
 800d5f4:	881b      	ldrh	r3, [r3, #0]
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	18d3      	adds	r3, r2, r3
 800d5fa:	7819      	ldrb	r1, [r3, #0]
 800d5fc:	220d      	movs	r2, #13
 800d5fe:	18bb      	adds	r3, r7, r2
 800d600:	18ba      	adds	r2, r7, r2
 800d602:	7812      	ldrb	r2, [r2, #0]
 800d604:	404a      	eors	r2, r1
 800d606:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800d608:	230c      	movs	r3, #12
 800d60a:	18fb      	adds	r3, r7, r3
 800d60c:	2208      	movs	r2, #8
 800d60e:	701a      	strb	r2, [r3, #0]
 800d610:	e01b      	b.n	800d64a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800d612:	210d      	movs	r1, #13
 800d614:	187b      	adds	r3, r7, r1
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	b25b      	sxtb	r3, r3
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	da09      	bge.n	800d632 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800d61e:	187b      	adds	r3, r7, r1
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	005b      	lsls	r3, r3, #1
 800d624:	b25b      	sxtb	r3, r3
 800d626:	2231      	movs	r2, #49	@ 0x31
 800d628:	4053      	eors	r3, r2
 800d62a:	b25a      	sxtb	r2, r3
 800d62c:	187b      	adds	r3, r7, r1
 800d62e:	701a      	strb	r2, [r3, #0]
 800d630:	e005      	b.n	800d63e <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800d632:	230d      	movs	r3, #13
 800d634:	18fa      	adds	r2, r7, r3
 800d636:	18fb      	adds	r3, r7, r3
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	18db      	adds	r3, r3, r3
 800d63c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800d63e:	220c      	movs	r2, #12
 800d640:	18bb      	adds	r3, r7, r2
 800d642:	18ba      	adds	r2, r7, r2
 800d644:	7812      	ldrb	r2, [r2, #0]
 800d646:	3a01      	subs	r2, #1
 800d648:	701a      	strb	r2, [r3, #0]
 800d64a:	230c      	movs	r3, #12
 800d64c:	18fb      	adds	r3, r7, r3
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1de      	bne.n	800d612 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800d654:	220e      	movs	r2, #14
 800d656:	18bb      	adds	r3, r7, r2
 800d658:	18ba      	adds	r2, r7, r2
 800d65a:	8812      	ldrh	r2, [r2, #0]
 800d65c:	3201      	adds	r2, #1
 800d65e:	801a      	strh	r2, [r3, #0]
 800d660:	230e      	movs	r3, #14
 800d662:	18fa      	adds	r2, r7, r3
 800d664:	1cbb      	adds	r3, r7, #2
 800d666:	8812      	ldrh	r2, [r2, #0]
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d3c0      	bcc.n	800d5f0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800d66e:	230d      	movs	r3, #13
 800d670:	18fb      	adds	r3, r7, r3
 800d672:	781b      	ldrb	r3, [r3, #0]
}
 800d674:	0018      	movs	r0, r3
 800d676:	46bd      	mov	sp, r7
 800d678:	b004      	add	sp, #16
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	0008      	movs	r0, r1
 800d686:	0011      	movs	r1, r2
 800d688:	1cbb      	adds	r3, r7, #2
 800d68a:	1c02      	adds	r2, r0, #0
 800d68c:	801a      	strh	r2, [r3, #0]
 800d68e:	1c7b      	adds	r3, r7, #1
 800d690:	1c0a      	adds	r2, r1, #0
 800d692:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800d694:	1cbb      	adds	r3, r7, #2
 800d696:	881a      	ldrh	r2, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	0011      	movs	r1, r2
 800d69c:	0018      	movs	r0, r3
 800d69e:	f7ff ff97 	bl	800d5d0 <sensirion_i2c_generate_crc>
 800d6a2:	0003      	movs	r3, r0
 800d6a4:	001a      	movs	r2, r3
 800d6a6:	1c7b      	adds	r3, r7, #1
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d001      	beq.n	800d6b2 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e000      	b.n	800d6b4 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	0018      	movs	r0, r3
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	b002      	add	sp, #8
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	0008      	movs	r0, r1
 800d6c6:	0011      	movs	r1, r2
 800d6c8:	1cbb      	adds	r3, r7, #2
 800d6ca:	1c02      	adds	r2, r0, #0
 800d6cc:	801a      	strh	r2, [r3, #0]
 800d6ce:	003b      	movs	r3, r7
 800d6d0:	1c0a      	adds	r2, r1, #0
 800d6d2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800d6d4:	003b      	movs	r3, r7
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	0a1b      	lsrs	r3, r3, #8
 800d6da:	b299      	uxth	r1, r3
 800d6dc:	1cbb      	adds	r3, r7, #2
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	1cba      	adds	r2, r7, #2
 800d6e2:	1c58      	adds	r0, r3, #1
 800d6e4:	8010      	strh	r0, [r2, #0]
 800d6e6:	001a      	movs	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	189b      	adds	r3, r3, r2
 800d6ec:	b2ca      	uxtb	r2, r1
 800d6ee:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800d6f0:	1cbb      	adds	r3, r7, #2
 800d6f2:	881b      	ldrh	r3, [r3, #0]
 800d6f4:	1cba      	adds	r2, r7, #2
 800d6f6:	1c59      	adds	r1, r3, #1
 800d6f8:	8011      	strh	r1, [r2, #0]
 800d6fa:	001a      	movs	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	189b      	adds	r3, r3, r2
 800d700:	003a      	movs	r2, r7
 800d702:	8812      	ldrh	r2, [r2, #0]
 800d704:	b2d2      	uxtb	r2, r2
 800d706:	701a      	strb	r2, [r3, #0]
    return offset;
 800d708:	1cbb      	adds	r3, r7, #2
 800d70a:	881b      	ldrh	r3, [r3, #0]
}
 800d70c:	0018      	movs	r0, r3
 800d70e:	46bd      	mov	sp, r7
 800d710:	b002      	add	sp, #8
 800d712:	bd80      	pop	{r7, pc}

0800d714 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800d714:	b590      	push	{r4, r7, lr}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	0008      	movs	r0, r1
 800d71e:	0011      	movs	r1, r2
 800d720:	1cbb      	adds	r3, r7, #2
 800d722:	1c02      	adds	r2, r0, #0
 800d724:	801a      	strh	r2, [r3, #0]
 800d726:	003b      	movs	r3, r7
 800d728:	1c0a      	adds	r2, r1, #0
 800d72a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800d72c:	003b      	movs	r3, r7
 800d72e:	881b      	ldrh	r3, [r3, #0]
 800d730:	0a1b      	lsrs	r3, r3, #8
 800d732:	b299      	uxth	r1, r3
 800d734:	1cbb      	adds	r3, r7, #2
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	1cba      	adds	r2, r7, #2
 800d73a:	1c58      	adds	r0, r3, #1
 800d73c:	8010      	strh	r0, [r2, #0]
 800d73e:	001a      	movs	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	189b      	adds	r3, r3, r2
 800d744:	b2ca      	uxtb	r2, r1
 800d746:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800d748:	1cbb      	adds	r3, r7, #2
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	1cba      	adds	r2, r7, #2
 800d74e:	1c59      	adds	r1, r3, #1
 800d750:	8011      	strh	r1, [r2, #0]
 800d752:	001a      	movs	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	189b      	adds	r3, r3, r2
 800d758:	003a      	movs	r2, r7
 800d75a:	8812      	ldrh	r2, [r2, #0]
 800d75c:	b2d2      	uxtb	r2, r2
 800d75e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800d760:	1cbb      	adds	r3, r7, #2
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	3b02      	subs	r3, #2
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800d76a:	1cbb      	adds	r3, r7, #2
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	18d4      	adds	r4, r2, r3
 800d772:	2102      	movs	r1, #2
 800d774:	f7ff ff2c 	bl	800d5d0 <sensirion_i2c_generate_crc>
 800d778:	0003      	movs	r3, r0
 800d77a:	7023      	strb	r3, [r4, #0]
    offset++;
 800d77c:	1cbb      	adds	r3, r7, #2
 800d77e:	881a      	ldrh	r2, [r3, #0]
 800d780:	1cbb      	adds	r3, r7, #2
 800d782:	3201      	adds	r2, #1
 800d784:	801a      	strh	r2, [r3, #0]

    return offset;
 800d786:	1cbb      	adds	r3, r7, #2
 800d788:	881b      	ldrh	r3, [r3, #0]
}
 800d78a:	0018      	movs	r0, r3
 800d78c:	46bd      	mov	sp, r7
 800d78e:	b003      	add	sp, #12
 800d790:	bd90      	pop	{r4, r7, pc}

0800d792 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	0008      	movs	r0, r1
 800d79c:	0011      	movs	r1, r2
 800d79e:	1cbb      	adds	r3, r7, #2
 800d7a0:	1c02      	adds	r2, r0, #0
 800d7a2:	801a      	strh	r2, [r3, #0]
 800d7a4:	003b      	movs	r3, r7
 800d7a6:	1c0a      	adds	r2, r1, #0
 800d7a8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800d7aa:	003b      	movs	r3, r7
 800d7ac:	881a      	ldrh	r2, [r3, #0]
 800d7ae:	1cbb      	adds	r3, r7, #2
 800d7b0:	8819      	ldrh	r1, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	0018      	movs	r0, r3
 800d7b6:	f7ff ffad 	bl	800d714 <sensirion_i2c_add_uint16_t_to_buffer>
 800d7ba:	0003      	movs	r3, r0
}
 800d7bc:	0018      	movs	r0, r3
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	b002      	add	sp, #8
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6039      	str	r1, [r7, #0]
 800d7cc:	0011      	movs	r1, r2
 800d7ce:	1dfb      	adds	r3, r7, #7
 800d7d0:	1c02      	adds	r2, r0, #0
 800d7d2:	701a      	strb	r2, [r3, #0]
 800d7d4:	1d3b      	adds	r3, r7, #4
 800d7d6:	1c0a      	adds	r2, r1, #0
 800d7d8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800d7da:	1d3b      	adds	r3, r7, #4
 800d7dc:	881a      	ldrh	r2, [r3, #0]
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	1dfb      	adds	r3, r7, #7
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	0018      	movs	r0, r3
 800d7e6:	f7fe f9d9 	bl	800bb9c <sensirion_i2c_hal_write>
 800d7ea:	0003      	movs	r3, r0
}
 800d7ec:	0018      	movs	r0, r3
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	b002      	add	sp, #8
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800d7f4:	b5b0      	push	{r4, r5, r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6039      	str	r1, [r7, #0]
 800d7fc:	0011      	movs	r1, r2
 800d7fe:	1dfb      	adds	r3, r7, #7
 800d800:	1c02      	adds	r2, r0, #0
 800d802:	701a      	strb	r2, [r3, #0]
 800d804:	1d3b      	adds	r3, r7, #4
 800d806:	1c0a      	adds	r2, r1, #0
 800d808:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800d80a:	1d3b      	adds	r3, r7, #4
 800d80c:	881b      	ldrh	r3, [r3, #0]
 800d80e:	085b      	lsrs	r3, r3, #1
 800d810:	b29b      	uxth	r3, r3
 800d812:	220a      	movs	r2, #10
 800d814:	18ba      	adds	r2, r7, r2
 800d816:	1c19      	adds	r1, r3, #0
 800d818:	1c0b      	adds	r3, r1, #0
 800d81a:	18db      	adds	r3, r3, r3
 800d81c:	185b      	adds	r3, r3, r1
 800d81e:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800d820:	1d3b      	adds	r3, r7, #4
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	2201      	movs	r2, #1
 800d826:	4013      	ands	r3, r2
 800d828:	b29b      	uxth	r3, r3
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800d82e:	2304      	movs	r3, #4
 800d830:	e06b      	b.n	800d90a <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800d832:	230a      	movs	r3, #10
 800d834:	18fb      	adds	r3, r7, r3
 800d836:	881a      	ldrh	r2, [r3, #0]
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	1dfb      	adds	r3, r7, #7
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	0018      	movs	r0, r3
 800d840:	f7fe f98c 	bl	800bb5c <sensirion_i2c_hal_read>
 800d844:	0003      	movs	r3, r0
 800d846:	001a      	movs	r2, r3
 800d848:	2108      	movs	r1, #8
 800d84a:	187b      	adds	r3, r7, r1
 800d84c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800d84e:	000a      	movs	r2, r1
 800d850:	18bb      	adds	r3, r7, r2
 800d852:	2100      	movs	r1, #0
 800d854:	5e5b      	ldrsh	r3, [r3, r1]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d003      	beq.n	800d862 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800d85a:	18bb      	adds	r3, r7, r2
 800d85c:	2200      	movs	r2, #0
 800d85e:	5e9b      	ldrsh	r3, [r3, r2]
 800d860:	e053      	b.n	800d90a <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800d862:	230e      	movs	r3, #14
 800d864:	18fb      	adds	r3, r7, r3
 800d866:	2200      	movs	r2, #0
 800d868:	801a      	strh	r2, [r3, #0]
 800d86a:	230c      	movs	r3, #12
 800d86c:	18fb      	adds	r3, r7, r3
 800d86e:	2200      	movs	r2, #0
 800d870:	801a      	strh	r2, [r3, #0]
 800d872:	e041      	b.n	800d8f8 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800d874:	210e      	movs	r1, #14
 800d876:	187b      	adds	r3, r7, r1
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800d87e:	187b      	adds	r3, r7, r1
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	3302      	adds	r3, #2
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	001a      	movs	r2, r3
 800d88c:	2102      	movs	r1, #2
 800d88e:	f7ff fef5 	bl	800d67c <sensirion_i2c_check_crc>
 800d892:	0003      	movs	r3, r0
 800d894:	001a      	movs	r2, r3
 800d896:	2108      	movs	r1, #8
 800d898:	187b      	adds	r3, r7, r1
 800d89a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800d89c:	000a      	movs	r2, r1
 800d89e:	18bb      	adds	r3, r7, r2
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	5e5b      	ldrsh	r3, [r3, r1]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800d8a8:	18bb      	adds	r3, r7, r2
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	5e9b      	ldrsh	r3, [r3, r2]
 800d8ae:	e02c      	b.n	800d90a <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800d8b0:	240e      	movs	r4, #14
 800d8b2:	193b      	adds	r3, r7, r4
 800d8b4:	881b      	ldrh	r3, [r3, #0]
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	18d2      	adds	r2, r2, r3
 800d8ba:	250c      	movs	r5, #12
 800d8bc:	197b      	adds	r3, r7, r5
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	1979      	adds	r1, r7, r5
 800d8c2:	1c58      	adds	r0, r3, #1
 800d8c4:	8008      	strh	r0, [r1, #0]
 800d8c6:	0019      	movs	r1, r3
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	185b      	adds	r3, r3, r1
 800d8cc:	7812      	ldrb	r2, [r2, #0]
 800d8ce:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800d8d0:	193b      	adds	r3, r7, r4
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	683a      	ldr	r2, [r7, #0]
 800d8d8:	18d2      	adds	r2, r2, r3
 800d8da:	197b      	adds	r3, r7, r5
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	1979      	adds	r1, r7, r5
 800d8e0:	1c58      	adds	r0, r3, #1
 800d8e2:	8008      	strh	r0, [r1, #0]
 800d8e4:	0019      	movs	r1, r3
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	185b      	adds	r3, r3, r1
 800d8ea:	7812      	ldrb	r2, [r2, #0]
 800d8ec:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800d8ee:	193b      	adds	r3, r7, r4
 800d8f0:	193a      	adds	r2, r7, r4
 800d8f2:	8812      	ldrh	r2, [r2, #0]
 800d8f4:	3203      	adds	r2, #3
 800d8f6:	801a      	strh	r2, [r3, #0]
 800d8f8:	230e      	movs	r3, #14
 800d8fa:	18fa      	adds	r2, r7, r3
 800d8fc:	230a      	movs	r3, #10
 800d8fe:	18fb      	adds	r3, r7, r3
 800d900:	8812      	ldrh	r2, [r2, #0]
 800d902:	881b      	ldrh	r3, [r3, #0]
 800d904:	429a      	cmp	r2, r3
 800d906:	d3b5      	bcc.n	800d874 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	0018      	movs	r0, r3
 800d90c:	46bd      	mov	sp, r7
 800d90e:	b004      	add	sp, #16
 800d910:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d914 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800d914:	b590      	push	{r4, r7, lr}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6039      	str	r1, [r7, #0]
 800d91c:	0011      	movs	r1, r2
 800d91e:	1dfb      	adds	r3, r7, #7
 800d920:	1c02      	adds	r2, r0, #0
 800d922:	701a      	strb	r2, [r3, #0]
 800d924:	1dbb      	adds	r3, r7, #6
 800d926:	1c0a      	adds	r2, r1, #0
 800d928:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800d92a:	4b08      	ldr	r3, [pc, #32]	@ (800d94c <ReadRegister+0x38>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d008      	beq.n	800d944 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800d932:	4b06      	ldr	r3, [pc, #24]	@ (800d94c <ReadRegister+0x38>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	1dba      	adds	r2, r7, #6
 800d938:	7814      	ldrb	r4, [r2, #0]
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	1dfa      	adds	r2, r7, #7
 800d93e:	7810      	ldrb	r0, [r2, #0]
 800d940:	0022      	movs	r2, r4
 800d942:	4798      	blx	r3
  }
}
 800d944:	46c0      	nop			@ (mov r8, r8)
 800d946:	46bd      	mov	sp, r7
 800d948:	b003      	add	sp, #12
 800d94a:	bd90      	pop	{r4, r7, pc}
 800d94c:	20000e6c 	.word	0x20000e6c

0800d950 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800d950:	b590      	push	{r4, r7, lr}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6039      	str	r1, [r7, #0]
 800d958:	0011      	movs	r1, r2
 800d95a:	1dfb      	adds	r3, r7, #7
 800d95c:	1c02      	adds	r2, r0, #0
 800d95e:	701a      	strb	r2, [r3, #0]
 800d960:	1dbb      	adds	r3, r7, #6
 800d962:	1c0a      	adds	r2, r1, #0
 800d964:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800d966:	4b08      	ldr	r3, [pc, #32]	@ (800d988 <WriteRegister+0x38>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d008      	beq.n	800d980 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800d96e:	4b06      	ldr	r3, [pc, #24]	@ (800d988 <WriteRegister+0x38>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	1dba      	adds	r2, r7, #6
 800d974:	7814      	ldrb	r4, [r2, #0]
 800d976:	6839      	ldr	r1, [r7, #0]
 800d978:	1dfa      	adds	r2, r7, #7
 800d97a:	7810      	ldrb	r0, [r2, #0]
 800d97c:	0022      	movs	r2, r4
 800d97e:	4798      	blx	r3
  }
}
 800d980:	46c0      	nop			@ (mov r8, r8)
 800d982:	46bd      	mov	sp, r7
 800d984:	b003      	add	sp, #12
 800d986:	bd90      	pop	{r4, r7, pc}
 800d988:	20000e70 	.word	0x20000e70

0800d98c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800d994:	f003 fb90 	bl	80110b8 <HAL_GetTick>
 800d998:	0002      	movs	r2, r0
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	18d2      	adds	r2, r2, r3
 800d99e:	4b03      	ldr	r3, [pc, #12]	@ (800d9ac <setSGP40TimeStamp+0x20>)
 800d9a0:	601a      	str	r2, [r3, #0]
}
 800d9a2:	46c0      	nop			@ (mov r8, r8)
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	b002      	add	sp, #8
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	46c0      	nop			@ (mov r8, r8)
 800d9ac:	20000e80 	.word	0x20000e80

0800d9b0 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800d9b4:	4b02      	ldr	r3, [pc, #8]	@ (800d9c0 <ResetSGP40samplecounter+0x10>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	701a      	strb	r2, [r3, #0]
}
 800d9ba:	46c0      	nop			@ (mov r8, r8)
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	20000e7e 	.word	0x20000e7e

0800d9c4 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800d9ce:	4b07      	ldr	r3, [pc, #28]	@ (800d9ec <SGP_Init+0x28>)
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800d9d4:	4b06      	ldr	r3, [pc, #24]	@ (800d9f0 <SGP_Init+0x2c>)
 800d9d6:	683a      	ldr	r2, [r7, #0]
 800d9d8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800d9da:	4b06      	ldr	r3, [pc, #24]	@ (800d9f4 <SGP_Init+0x30>)
 800d9dc:	2100      	movs	r1, #0
 800d9de:	0018      	movs	r0, r3
 800d9e0:	f7fe ff70 	bl	800c8c4 <GasIndexAlgorithm_init>
}
 800d9e4:	46c0      	nop			@ (mov r8, r8)
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	b002      	add	sp, #8
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20000e6c 	.word	0x20000e6c
 800d9f0:	20000e70 	.word	0x20000e70
 800d9f4:	20000e88 	.word	0x20000e88

0800d9f8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800d9fc:	4b07      	ldr	r3, [pc, #28]	@ (800da1c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d004      	beq.n	800da0e <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800da04:	4b06      	ldr	r3, [pc, #24]	@ (800da20 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800da06:	22fe      	movs	r2, #254	@ 0xfe
 800da08:	0592      	lsls	r2, r2, #22
 800da0a:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800da0c:	e002      	b.n	800da14 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800da0e:	4b04      	ldr	r3, [pc, #16]	@ (800da20 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800da10:	4a04      	ldr	r2, [pc, #16]	@ (800da24 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800da12:	605a      	str	r2, [r3, #4]
}
 800da14:	46c0      	nop			@ (mov r8, r8)
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	46c0      	nop			@ (mov r8, r8)
 800da1c:	20001dd5 	.word	0x20001dd5
 800da20:	20000e88 	.word	0x20000e88
 800da24:	44610000 	.word	0x44610000

0800da28 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800da2c:	4b13      	ldr	r3, [pc, #76]	@ (800da7c <SGP_StartMeasurement+0x54>)
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00d      	beq.n	800da50 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800da34:	4b12      	ldr	r3, [pc, #72]	@ (800da80 <SGP_StartMeasurement+0x58>)
 800da36:	2208      	movs	r2, #8
 800da38:	0019      	movs	r1, r3
 800da3a:	2059      	movs	r0, #89	@ 0x59
 800da3c:	f7ff ff88 	bl	800d950 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800da40:	f003 fb3a 	bl	80110b8 <HAL_GetTick>
 800da44:	0003      	movs	r3, r0
 800da46:	331e      	adds	r3, #30
 800da48:	001a      	movs	r2, r3
 800da4a:	4b0e      	ldr	r3, [pc, #56]	@ (800da84 <SGP_StartMeasurement+0x5c>)
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	e00c      	b.n	800da6a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800da50:	4b0d      	ldr	r3, [pc, #52]	@ (800da88 <SGP_StartMeasurement+0x60>)
 800da52:	2208      	movs	r2, #8
 800da54:	0019      	movs	r1, r3
 800da56:	2059      	movs	r0, #89	@ 0x59
 800da58:	f7ff ff7a 	bl	800d950 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800da5c:	f003 fb2c 	bl	80110b8 <HAL_GetTick>
 800da60:	0003      	movs	r3, r0
 800da62:	33aa      	adds	r3, #170	@ 0xaa
 800da64:	001a      	movs	r2, r3
 800da66:	4b09      	ldr	r3, [pc, #36]	@ (800da8c <SGP_StartMeasurement+0x64>)
 800da68:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800da6a:	4b09      	ldr	r3, [pc, #36]	@ (800da90 <SGP_StartMeasurement+0x68>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800da70:	4b08      	ldr	r3, [pc, #32]	@ (800da94 <SGP_StartMeasurement+0x6c>)
 800da72:	2200      	movs	r2, #0
 800da74:	701a      	strb	r2, [r3, #0]
}
 800da76:	46c0      	nop			@ (mov r8, r8)
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	20000f30 	.word	0x20000f30
 800da80:	200000b0 	.word	0x200000b0
 800da84:	200000c4 	.word	0x200000c4
 800da88:	200000a8 	.word	0x200000a8
 800da8c:	200000bc 	.word	0x200000bc
 800da90:	20000e84 	.word	0x20000e84
 800da94:	20000e85 	.word	0x20000e85

0800da98 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800da9c:	4b04      	ldr	r3, [pc, #16]	@ (800dab0 <SGP_HeatedUp+0x18>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	0018      	movs	r0, r3
 800daa2:	f002 fe67 	bl	8010774 <TimestampIsReached>
 800daa6:	0003      	movs	r3, r0
}
 800daa8:	0018      	movs	r0, r3
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	46c0      	nop			@ (mov r8, r8)
 800dab0:	200000bc 	.word	0x200000bc

0800dab4 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800dab8:	4b04      	ldr	r3, [pc, #16]	@ (800dacc <SGP_MeasurementReady+0x18>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	0018      	movs	r0, r3
 800dabe:	f002 fe59 	bl	8010774 <TimestampIsReached>
 800dac2:	0003      	movs	r3, r0
}
 800dac4:	0018      	movs	r0, r3
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	46c0      	nop			@ (mov r8, r8)
 800dacc:	200000c4 	.word	0x200000c4

0800dad0 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800dad0:	b580      	push	{r7, lr}
 800dad2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800dad4:	4b04      	ldr	r3, [pc, #16]	@ (800dae8 <SGP_MeasurementDone+0x18>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	0018      	movs	r0, r3
 800dada:	f002 fe4b 	bl	8010774 <TimestampIsReached>
 800dade:	0003      	movs	r3, r0
}
 800dae0:	0018      	movs	r0, r3
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	46c0      	nop			@ (mov r8, r8)
 800dae8:	200000c0 	.word	0x200000c0

0800daec <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800daec:	b580      	push	{r7, lr}
 800daee:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800daf0:	4b04      	ldr	r3, [pc, #16]	@ (800db04 <SGP_TurnHeaterOff+0x18>)
 800daf2:	2202      	movs	r2, #2
 800daf4:	0019      	movs	r1, r3
 800daf6:	2059      	movs	r0, #89	@ 0x59
 800daf8:	f7ff ff2a 	bl	800d950 <WriteRegister>
}
 800dafc:	46c0      	nop			@ (mov r8, r8)
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	46c0      	nop			@ (mov r8, r8)
 800db04:	200000a0 	.word	0x200000a0

0800db08 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800db08:	b590      	push	{r4, r7, lr}
 800db0a:	b087      	sub	sp, #28
 800db0c:	af02      	add	r7, sp, #8
 800db0e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800db10:	f7ff ffc2 	bl	800da98 <SGP_HeatedUp>
 800db14:	1e03      	subs	r3, r0, #0
 800db16:	d032      	beq.n	800db7e <SGP_GetMeasurementValues+0x76>
 800db18:	4b7f      	ldr	r3, [pc, #508]	@ (800dd18 <SGP_GetMeasurementValues+0x210>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2201      	movs	r2, #1
 800db1e:	4053      	eors	r3, r2
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d02b      	beq.n	800db7e <SGP_GetMeasurementValues+0x76>
 800db26:	4b7d      	ldr	r3, [pc, #500]	@ (800dd1c <SGP_GetMeasurementValues+0x214>)
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2201      	movs	r2, #1
 800db2c:	4053      	eors	r3, r2
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	2b00      	cmp	r3, #0
 800db32:	d024      	beq.n	800db7e <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800db34:	4b78      	ldr	r3, [pc, #480]	@ (800dd18 <SGP_GetMeasurementValues+0x210>)
 800db36:	2201      	movs	r2, #1
 800db38:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800db3a:	4b79      	ldr	r3, [pc, #484]	@ (800dd20 <SGP_GetMeasurementValues+0x218>)
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00d      	beq.n	800db5e <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800db42:	4b78      	ldr	r3, [pc, #480]	@ (800dd24 <SGP_GetMeasurementValues+0x21c>)
 800db44:	2208      	movs	r2, #8
 800db46:	0019      	movs	r1, r3
 800db48:	2059      	movs	r0, #89	@ 0x59
 800db4a:	f7ff ff01 	bl	800d950 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800db4e:	f003 fab3 	bl	80110b8 <HAL_GetTick>
 800db52:	0003      	movs	r3, r0
 800db54:	331e      	adds	r3, #30
 800db56:	001a      	movs	r2, r3
 800db58:	4b73      	ldr	r3, [pc, #460]	@ (800dd28 <SGP_GetMeasurementValues+0x220>)
 800db5a:	601a      	str	r2, [r3, #0]
 800db5c:	e00c      	b.n	800db78 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800db5e:	4b73      	ldr	r3, [pc, #460]	@ (800dd2c <SGP_GetMeasurementValues+0x224>)
 800db60:	2208      	movs	r2, #8
 800db62:	0019      	movs	r1, r3
 800db64:	2059      	movs	r0, #89	@ 0x59
 800db66:	f7ff fef3 	bl	800d950 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800db6a:	f003 faa5 	bl	80110b8 <HAL_GetTick>
 800db6e:	0003      	movs	r3, r0
 800db70:	331e      	adds	r3, #30
 800db72:	001a      	movs	r2, r3
 800db74:	4b6c      	ldr	r3, [pc, #432]	@ (800dd28 <SGP_GetMeasurementValues+0x220>)
 800db76:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800db78:	4b68      	ldr	r3, [pc, #416]	@ (800dd1c <SGP_GetMeasurementValues+0x214>)
 800db7a:	2201      	movs	r2, #1
 800db7c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800db7e:	4b66      	ldr	r3, [pc, #408]	@ (800dd18 <SGP_GetMeasurementValues+0x210>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d100      	bne.n	800db88 <SGP_GetMeasurementValues+0x80>
 800db86:	e0ab      	b.n	800dce0 <SGP_GetMeasurementValues+0x1d8>
 800db88:	f7ff ff94 	bl	800dab4 <SGP_MeasurementReady>
 800db8c:	1e03      	subs	r3, r0, #0
 800db8e:	d100      	bne.n	800db92 <SGP_GetMeasurementValues+0x8a>
 800db90:	e0a6      	b.n	800dce0 <SGP_GetMeasurementValues+0x1d8>
 800db92:	4b67      	ldr	r3, [pc, #412]	@ (800dd30 <SGP_GetMeasurementValues+0x228>)
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2201      	movs	r2, #1
 800db98:	4053      	eors	r3, r2
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d100      	bne.n	800dba2 <SGP_GetMeasurementValues+0x9a>
 800dba0:	e09e      	b.n	800dce0 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800dba2:	4b63      	ldr	r3, [pc, #396]	@ (800dd30 <SGP_GetMeasurementValues+0x228>)
 800dba4:	2201      	movs	r2, #1
 800dba6:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800dba8:	4b62      	ldr	r3, [pc, #392]	@ (800dd34 <SGP_GetMeasurementValues+0x22c>)
 800dbaa:	2203      	movs	r2, #3
 800dbac:	0019      	movs	r1, r3
 800dbae:	2059      	movs	r0, #89	@ 0x59
 800dbb0:	f7ff feb0 	bl	800d914 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800dbb4:	4b5f      	ldr	r3, [pc, #380]	@ (800dd34 <SGP_GetMeasurementValues+0x22c>)
 800dbb6:	2203      	movs	r2, #3
 800dbb8:	2103      	movs	r1, #3
 800dbba:	0018      	movs	r0, r3
 800dbbc:	f000 f918 	bl	800ddf0 <CheckCRC>
 800dbc0:	0003      	movs	r3, r0
 800dbc2:	001a      	movs	r2, r3
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	4053      	eors	r3, r2
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d02a      	beq.n	800dc24 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800dbce:	4a5a      	ldr	r2, [pc, #360]	@ (800dd38 <SGP_GetMeasurementValues+0x230>)
 800dbd0:	4b5a      	ldr	r3, [pc, #360]	@ (800dd3c <SGP_GetMeasurementValues+0x234>)
 800dbd2:	0019      	movs	r1, r3
 800dbd4:	2001      	movs	r0, #1
 800dbd6:	f002 fe23 	bl	8010820 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800dbda:	4a59      	ldr	r2, [pc, #356]	@ (800dd40 <SGP_GetMeasurementValues+0x238>)
 800dbdc:	4b59      	ldr	r3, [pc, #356]	@ (800dd44 <SGP_GetMeasurementValues+0x23c>)
 800dbde:	0019      	movs	r1, r3
 800dbe0:	2002      	movs	r0, #2
 800dbe2:	f002 fe1d 	bl	8010820 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800dbe6:	230f      	movs	r3, #15
 800dbe8:	18fb      	adds	r3, r7, r3
 800dbea:	2200      	movs	r2, #0
 800dbec:	701a      	strb	r2, [r3, #0]
 800dbee:	e012      	b.n	800dc16 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800dbf0:	240f      	movs	r4, #15
 800dbf2:	193b      	adds	r3, r7, r4
 800dbf4:	7818      	ldrb	r0, [r3, #0]
 800dbf6:	193b      	adds	r3, r7, r4
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	4a4e      	ldr	r2, [pc, #312]	@ (800dd34 <SGP_GetMeasurementValues+0x22c>)
 800dbfc:	5cd3      	ldrb	r3, [r2, r3]
 800dbfe:	4a52      	ldr	r2, [pc, #328]	@ (800dd48 <SGP_GetMeasurementValues+0x240>)
 800dc00:	4952      	ldr	r1, [pc, #328]	@ (800dd4c <SGP_GetMeasurementValues+0x244>)
 800dc02:	9300      	str	r3, [sp, #0]
 800dc04:	0003      	movs	r3, r0
 800dc06:	2003      	movs	r0, #3
 800dc08:	f002 fe0a 	bl	8010820 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800dc0c:	193b      	adds	r3, r7, r4
 800dc0e:	781a      	ldrb	r2, [r3, #0]
 800dc10:	193b      	adds	r3, r7, r4
 800dc12:	3201      	adds	r2, #1
 800dc14:	701a      	strb	r2, [r3, #0]
 800dc16:	230f      	movs	r3, #15
 800dc18:	18fb      	adds	r3, r7, r3
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d9e7      	bls.n	800dbf0 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800dc20:	2300      	movs	r3, #0
 800dc22:	e075      	b.n	800dd10 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800dc24:	f003 fa48 	bl	80110b8 <HAL_GetTick>
 800dc28:	0003      	movs	r3, r0
 800dc2a:	22fa      	movs	r2, #250	@ 0xfa
 800dc2c:	0092      	lsls	r2, r2, #2
 800dc2e:	189a      	adds	r2, r3, r2
 800dc30:	4b47      	ldr	r3, [pc, #284]	@ (800dd50 <SGP_GetMeasurementValues+0x248>)
 800dc32:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800dc34:	f7ff ff5a 	bl	800daec <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800dc38:	4b46      	ldr	r3, [pc, #280]	@ (800dd54 <SGP_GetMeasurementValues+0x24c>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	4b44      	ldr	r3, [pc, #272]	@ (800dd54 <SGP_GetMeasurementValues+0x24c>)
 800dc42:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800dc44:	4b43      	ldr	r3, [pc, #268]	@ (800dd54 <SGP_GetMeasurementValues+0x24c>)
 800dc46:	781a      	ldrb	r2, [r3, #0]
 800dc48:	4b43      	ldr	r3, [pc, #268]	@ (800dd58 <SGP_GetMeasurementValues+0x250>)
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d347      	bcc.n	800dce0 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800dc50:	4b38      	ldr	r3, [pc, #224]	@ (800dd34 <SGP_GetMeasurementValues+0x22c>)
 800dc52:	785b      	ldrb	r3, [r3, #1]
 800dc54:	021b      	lsls	r3, r3, #8
 800dc56:	b21a      	sxth	r2, r3
 800dc58:	4b36      	ldr	r3, [pc, #216]	@ (800dd34 <SGP_GetMeasurementValues+0x22c>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	b21b      	sxth	r3, r3
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	b21a      	sxth	r2, r3
 800dc62:	240c      	movs	r4, #12
 800dc64:	193b      	adds	r3, r7, r4
 800dc66:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800dc6c:	193b      	adds	r3, r7, r4
 800dc6e:	8819      	ldrh	r1, [r3, #0]
 800dc70:	2308      	movs	r3, #8
 800dc72:	18fa      	adds	r2, r7, r3
 800dc74:	4b39      	ldr	r3, [pc, #228]	@ (800dd5c <SGP_GetMeasurementValues+0x254>)
 800dc76:	0018      	movs	r0, r3
 800dc78:	f7fe fe88 	bl	800c98c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800dc82:	4b37      	ldr	r3, [pc, #220]	@ (800dd60 <SGP_GetMeasurementValues+0x258>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	3301      	adds	r3, #1
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	4b35      	ldr	r3, [pc, #212]	@ (800dd60 <SGP_GetMeasurementValues+0x258>)
 800dc8c:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800dc8e:	4b34      	ldr	r3, [pc, #208]	@ (800dd60 <SGP_GetMeasurementValues+0x258>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d10d      	bne.n	800dcb2 <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800dc96:	193b      	adds	r3, r7, r4
 800dc98:	881b      	ldrh	r3, [r3, #0]
 800dc9a:	4a32      	ldr	r2, [pc, #200]	@ (800dd64 <SGP_GetMeasurementValues+0x25c>)
 800dc9c:	492b      	ldr	r1, [pc, #172]	@ (800dd4c <SGP_GetMeasurementValues+0x244>)
 800dc9e:	2003      	movs	r0, #3
 800dca0:	f002 fdbe 	bl	8010820 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	4a30      	ldr	r2, [pc, #192]	@ (800dd68 <SGP_GetMeasurementValues+0x260>)
 800dca8:	4928      	ldr	r1, [pc, #160]	@ (800dd4c <SGP_GetMeasurementValues+0x244>)
 800dcaa:	2003      	movs	r0, #3
 800dcac:	f002 fdb8 	bl	8010820 <CreateLine>
 800dcb0:	e006      	b.n	800dcc0 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800dcb2:	4b2b      	ldr	r3, [pc, #172]	@ (800dd60 <SGP_GetMeasurementValues+0x258>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b0b      	cmp	r3, #11
 800dcb8:	d102      	bne.n	800dcc0 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800dcba:	4b29      	ldr	r3, [pc, #164]	@ (800dd60 <SGP_GetMeasurementValues+0x258>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	0018      	movs	r0, r3
 800dcc6:	f001 fd5b 	bl	800f780 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800dcca:	4b22      	ldr	r3, [pc, #136]	@ (800dd54 <SGP_GetMeasurementValues+0x24c>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800dcd0:	4b13      	ldr	r3, [pc, #76]	@ (800dd20 <SGP_GetMeasurementValues+0x218>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800dcd6:	4b11      	ldr	r3, [pc, #68]	@ (800dd1c <SGP_GetMeasurementValues+0x214>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	701a      	strb	r2, [r3, #0]
      return true;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e017      	b.n	800dd10 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800dce0:	f7ff fef6 	bl	800dad0 <SGP_MeasurementDone>
 800dce4:	1e03      	subs	r3, r0, #0
 800dce6:	d012      	beq.n	800dd0e <SGP_GetMeasurementValues+0x206>
 800dce8:	4b0b      	ldr	r3, [pc, #44]	@ (800dd18 <SGP_GetMeasurementValues+0x210>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00e      	beq.n	800dd0e <SGP_GetMeasurementValues+0x206>
 800dcf0:	4b0f      	ldr	r3, [pc, #60]	@ (800dd30 <SGP_GetMeasurementValues+0x228>)
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00a      	beq.n	800dd0e <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800dcf8:	4a1c      	ldr	r2, [pc, #112]	@ (800dd6c <SGP_GetMeasurementValues+0x264>)
 800dcfa:	4b14      	ldr	r3, [pc, #80]	@ (800dd4c <SGP_GetMeasurementValues+0x244>)
 800dcfc:	0019      	movs	r1, r3
 800dcfe:	2003      	movs	r0, #3
 800dd00:	f002 fd8e 	bl	8010820 <CreateLine>
    SGP_StartMeasurement();
 800dd04:	f7ff fe90 	bl	800da28 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800dd08:	4b04      	ldr	r3, [pc, #16]	@ (800dd1c <SGP_GetMeasurementValues+0x214>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	0018      	movs	r0, r3
 800dd12:	46bd      	mov	sp, r7
 800dd14:	b005      	add	sp, #20
 800dd16:	bd90      	pop	{r4, r7, pc}
 800dd18:	20000e84 	.word	0x20000e84
 800dd1c:	20000f31 	.word	0x20000f31
 800dd20:	20000f30 	.word	0x20000f30
 800dd24:	200000b0 	.word	0x200000b0
 800dd28:	200000c4 	.word	0x200000c4
 800dd2c:	200000a8 	.word	0x200000a8
 800dd30:	20000e85 	.word	0x20000e85
 800dd34:	20000e74 	.word	0x20000e74
 800dd38:	080284fc 	.word	0x080284fc
 800dd3c:	08028524 	.word	0x08028524
 800dd40:	08028528 	.word	0x08028528
 800dd44:	08028548 	.word	0x08028548
 800dd48:	0802854c 	.word	0x0802854c
 800dd4c:	0802856c 	.word	0x0802856c
 800dd50:	200000c0 	.word	0x200000c0
 800dd54:	20000e7d 	.word	0x20000e7d
 800dd58:	200000ba 	.word	0x200000ba
 800dd5c:	20000e88 	.word	0x20000e88
 800dd60:	20000e7e 	.word	0x20000e7e
 800dd64:	08028570 	.word	0x08028570
 800dd68:	0802858c 	.word	0x0802858c
 800dd6c:	080285a8 	.word	0x080285a8

0800dd70 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800dd76:	4b1a      	ldr	r3, [pc, #104]	@ (800dde0 <SGP_DeviceConnected+0x70>)
 800dd78:	2202      	movs	r2, #2
 800dd7a:	0019      	movs	r1, r3
 800dd7c:	2059      	movs	r0, #89	@ 0x59
 800dd7e:	f7ff fde7 	bl	800d950 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800dd82:	2001      	movs	r0, #1
 800dd84:	f003 f9a2 	bl	80110cc <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800dd88:	4b16      	ldr	r3, [pc, #88]	@ (800dde4 <SGP_DeviceConnected+0x74>)
 800dd8a:	2209      	movs	r2, #9
 800dd8c:	0019      	movs	r1, r3
 800dd8e:	2059      	movs	r0, #89	@ 0x59
 800dd90:	f7ff fdc0 	bl	800d914 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800dd94:	1dfb      	adds	r3, r7, #7
 800dd96:	2200      	movs	r2, #0
 800dd98:	701a      	strb	r2, [r3, #0]
 800dd9a:	e011      	b.n	800ddc0 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800dd9c:	1dfb      	adds	r3, r7, #7
 800dd9e:	7818      	ldrb	r0, [r3, #0]
 800dda0:	1dfb      	adds	r3, r7, #7
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	4a0f      	ldr	r2, [pc, #60]	@ (800dde4 <SGP_DeviceConnected+0x74>)
 800dda6:	5cd3      	ldrb	r3, [r2, r3]
 800dda8:	4a0f      	ldr	r2, [pc, #60]	@ (800dde8 <SGP_DeviceConnected+0x78>)
 800ddaa:	4910      	ldr	r1, [pc, #64]	@ (800ddec <SGP_DeviceConnected+0x7c>)
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	0003      	movs	r3, r0
 800ddb0:	2002      	movs	r0, #2
 800ddb2:	f002 fd35 	bl	8010820 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800ddb6:	1dfb      	adds	r3, r7, #7
 800ddb8:	781a      	ldrb	r2, [r3, #0]
 800ddba:	1dfb      	adds	r3, r7, #7
 800ddbc:	3201      	adds	r2, #1
 800ddbe:	701a      	strb	r2, [r3, #0]
 800ddc0:	1dfb      	adds	r3, r7, #7
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	2b08      	cmp	r3, #8
 800ddc6:	d9e9      	bls.n	800dd9c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800ddc8:	4b06      	ldr	r3, [pc, #24]	@ (800dde4 <SGP_DeviceConnected+0x74>)
 800ddca:	2203      	movs	r2, #3
 800ddcc:	2109      	movs	r1, #9
 800ddce:	0018      	movs	r0, r3
 800ddd0:	f000 f80e 	bl	800ddf0 <CheckCRC>
 800ddd4:	0003      	movs	r3, r0
}
 800ddd6:	0018      	movs	r0, r3
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	b002      	add	sp, #8
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	46c0      	nop			@ (mov r8, r8)
 800dde0:	200000a4 	.word	0x200000a4
 800dde4:	20000e74 	.word	0x20000e74
 800dde8:	080285c8 	.word	0x080285c8
 800ddec:	08028548 	.word	0x08028548

0800ddf0 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800ddf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddf2:	b08f      	sub	sp, #60	@ 0x3c
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6278      	str	r0, [r7, #36]	@ 0x24
 800ddf8:	0008      	movs	r0, r1
 800ddfa:	0011      	movs	r1, r2
 800ddfc:	2323      	movs	r3, #35	@ 0x23
 800ddfe:	18fb      	adds	r3, r7, r3
 800de00:	1c02      	adds	r2, r0, #0
 800de02:	701a      	strb	r2, [r3, #0]
 800de04:	2322      	movs	r3, #34	@ 0x22
 800de06:	18fb      	adds	r3, r7, r3
 800de08:	1c0a      	adds	r2, r1, #0
 800de0a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800de0c:	2317      	movs	r3, #23
 800de0e:	2220      	movs	r2, #32
 800de10:	189b      	adds	r3, r3, r2
 800de12:	19db      	adds	r3, r3, r7
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]
 800de18:	e09f      	b.n	800df5a <CheckCRC+0x16a>
 800de1a:	466b      	mov	r3, sp
 800de1c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800de1e:	2322      	movs	r3, #34	@ 0x22
 800de20:	18fb      	adds	r3, r7, r3
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	001a      	movs	r2, r3
 800de26:	3a01      	subs	r2, #1
 800de28:	633a      	str	r2, [r7, #48]	@ 0x30
 800de2a:	60bb      	str	r3, [r7, #8]
 800de2c:	2200      	movs	r2, #0
 800de2e:	60fa      	str	r2, [r7, #12]
 800de30:	68b8      	ldr	r0, [r7, #8]
 800de32:	68f9      	ldr	r1, [r7, #12]
 800de34:	0002      	movs	r2, r0
 800de36:	0f52      	lsrs	r2, r2, #29
 800de38:	000c      	movs	r4, r1
 800de3a:	00e4      	lsls	r4, r4, #3
 800de3c:	61fc      	str	r4, [r7, #28]
 800de3e:	69fc      	ldr	r4, [r7, #28]
 800de40:	4314      	orrs	r4, r2
 800de42:	61fc      	str	r4, [r7, #28]
 800de44:	0002      	movs	r2, r0
 800de46:	00d2      	lsls	r2, r2, #3
 800de48:	61ba      	str	r2, [r7, #24]
 800de4a:	603b      	str	r3, [r7, #0]
 800de4c:	2200      	movs	r2, #0
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	6838      	ldr	r0, [r7, #0]
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	0002      	movs	r2, r0
 800de56:	0f52      	lsrs	r2, r2, #29
 800de58:	000c      	movs	r4, r1
 800de5a:	00e4      	lsls	r4, r4, #3
 800de5c:	617c      	str	r4, [r7, #20]
 800de5e:	697c      	ldr	r4, [r7, #20]
 800de60:	4314      	orrs	r4, r2
 800de62:	617c      	str	r4, [r7, #20]
 800de64:	0002      	movs	r2, r0
 800de66:	00d2      	lsls	r2, r2, #3
 800de68:	613a      	str	r2, [r7, #16]
 800de6a:	3307      	adds	r3, #7
 800de6c:	08db      	lsrs	r3, r3, #3
 800de6e:	00db      	lsls	r3, r3, #3
 800de70:	466a      	mov	r2, sp
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	469d      	mov	sp, r3
 800de76:	466b      	mov	r3, sp
 800de78:	3300      	adds	r3, #0
 800de7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800de7c:	2316      	movs	r3, #22
 800de7e:	2220      	movs	r2, #32
 800de80:	189b      	adds	r3, r3, r2
 800de82:	19db      	adds	r3, r3, r7
 800de84:	2200      	movs	r2, #0
 800de86:	701a      	strb	r2, [r3, #0]
 800de88:	e01e      	b.n	800dec8 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800de8a:	2317      	movs	r3, #23
 800de8c:	2220      	movs	r2, #32
 800de8e:	189b      	adds	r3, r3, r2
 800de90:	19db      	adds	r3, r3, r7
 800de92:	781a      	ldrb	r2, [r3, #0]
 800de94:	2116      	movs	r1, #22
 800de96:	2320      	movs	r3, #32
 800de98:	18cb      	adds	r3, r1, r3
 800de9a:	19db      	adds	r3, r3, r7
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	18d3      	adds	r3, r2, r3
 800dea0:	001a      	movs	r2, r3
 800dea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea4:	189a      	adds	r2, r3, r2
 800dea6:	0008      	movs	r0, r1
 800dea8:	2320      	movs	r3, #32
 800deaa:	18cb      	adds	r3, r1, r3
 800deac:	19db      	adds	r3, r3, r7
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	7811      	ldrb	r1, [r2, #0]
 800deb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800deb4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800deb6:	2320      	movs	r3, #32
 800deb8:	18c3      	adds	r3, r0, r3
 800deba:	19db      	adds	r3, r3, r7
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	2320      	movs	r3, #32
 800dec0:	18c3      	adds	r3, r0, r3
 800dec2:	19db      	adds	r3, r3, r7
 800dec4:	3201      	adds	r2, #1
 800dec6:	701a      	strb	r2, [r3, #0]
 800dec8:	2316      	movs	r3, #22
 800deca:	2220      	movs	r2, #32
 800decc:	189b      	adds	r3, r3, r2
 800dece:	19da      	adds	r2, r3, r7
 800ded0:	2322      	movs	r3, #34	@ 0x22
 800ded2:	18fb      	adds	r3, r7, r3
 800ded4:	7812      	ldrb	r2, [r2, #0]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d3d6      	bcc.n	800de8a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800dedc:	2417      	movs	r4, #23
 800dede:	2320      	movs	r3, #32
 800dee0:	18e3      	adds	r3, r4, r3
 800dee2:	19db      	adds	r3, r3, r7
 800dee4:	781a      	ldrb	r2, [r3, #0]
 800dee6:	2322      	movs	r3, #34	@ 0x22
 800dee8:	18fb      	adds	r3, r7, r3
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	18d3      	adds	r3, r2, r3
 800deee:	3b01      	subs	r3, #1
 800def0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800def2:	18d2      	adds	r2, r2, r3
 800def4:	250b      	movs	r5, #11
 800def6:	2320      	movs	r3, #32
 800def8:	18eb      	adds	r3, r5, r3
 800defa:	19db      	adds	r3, r3, r7
 800defc:	7812      	ldrb	r2, [r2, #0]
 800defe:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800df00:	2322      	movs	r3, #34	@ 0x22
 800df02:	18fb      	adds	r3, r7, r3
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	3b01      	subs	r3, #1
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0c:	0011      	movs	r1, r2
 800df0e:	0018      	movs	r0, r3
 800df10:	f000 f838 	bl	800df84 <CalculateCRC>
 800df14:	0003      	movs	r3, r0
 800df16:	001a      	movs	r2, r3
 800df18:	2320      	movs	r3, #32
 800df1a:	18eb      	adds	r3, r5, r3
 800df1c:	19db      	adds	r3, r3, r7
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	4293      	cmp	r3, r2
 800df22:	d00c      	beq.n	800df3e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800df24:	2320      	movs	r3, #32
 800df26:	18e3      	adds	r3, r4, r3
 800df28:	19db      	adds	r3, r3, r7
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	3301      	adds	r3, #1
 800df2e:	4a13      	ldr	r2, [pc, #76]	@ (800df7c <CheckCRC+0x18c>)
 800df30:	4913      	ldr	r1, [pc, #76]	@ (800df80 <CheckCRC+0x190>)
 800df32:	2001      	movs	r0, #1
 800df34:	f002 fc74 	bl	8010820 <CreateLine>
      return false;
 800df38:	2300      	movs	r3, #0
 800df3a:	46b5      	mov	sp, r6
 800df3c:	e019      	b.n	800df72 <CheckCRC+0x182>
 800df3e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800df40:	2217      	movs	r2, #23
 800df42:	2320      	movs	r3, #32
 800df44:	18d3      	adds	r3, r2, r3
 800df46:	19db      	adds	r3, r3, r7
 800df48:	2120      	movs	r1, #32
 800df4a:	1852      	adds	r2, r2, r1
 800df4c:	19d1      	adds	r1, r2, r7
 800df4e:	2222      	movs	r2, #34	@ 0x22
 800df50:	18ba      	adds	r2, r7, r2
 800df52:	7809      	ldrb	r1, [r1, #0]
 800df54:	7812      	ldrb	r2, [r2, #0]
 800df56:	188a      	adds	r2, r1, r2
 800df58:	701a      	strb	r2, [r3, #0]
 800df5a:	2317      	movs	r3, #23
 800df5c:	2220      	movs	r2, #32
 800df5e:	189b      	adds	r3, r3, r2
 800df60:	19da      	adds	r2, r3, r7
 800df62:	2323      	movs	r3, #35	@ 0x23
 800df64:	18fb      	adds	r3, r7, r3
 800df66:	7812      	ldrb	r2, [r2, #0]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d200      	bcs.n	800df70 <CheckCRC+0x180>
 800df6e:	e754      	b.n	800de1a <CheckCRC+0x2a>
    }
  }
  return true;
 800df70:	2301      	movs	r3, #1
}
 800df72:	0018      	movs	r0, r3
 800df74:	46bd      	mov	sp, r7
 800df76:	b00f      	add	sp, #60	@ 0x3c
 800df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7a:	46c0      	nop			@ (mov r8, r8)
 800df7c:	080285e8 	.word	0x080285e8
 800df80:	08028524 	.word	0x08028524

0800df84 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	000a      	movs	r2, r1
 800df8e:	1cfb      	adds	r3, r7, #3
 800df90:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800df92:	230f      	movs	r3, #15
 800df94:	18fb      	adds	r3, r7, r3
 800df96:	22ff      	movs	r2, #255	@ 0xff
 800df98:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800df9a:	230e      	movs	r3, #14
 800df9c:	18fb      	adds	r3, r7, r3
 800df9e:	2200      	movs	r2, #0
 800dfa0:	701a      	strb	r2, [r3, #0]
 800dfa2:	e037      	b.n	800e014 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800dfa4:	230e      	movs	r3, #14
 800dfa6:	18fb      	adds	r3, r7, r3
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	18d3      	adds	r3, r2, r3
 800dfae:	7819      	ldrb	r1, [r3, #0]
 800dfb0:	220f      	movs	r2, #15
 800dfb2:	18bb      	adds	r3, r7, r2
 800dfb4:	18ba      	adds	r2, r7, r2
 800dfb6:	7812      	ldrb	r2, [r2, #0]
 800dfb8:	404a      	eors	r2, r1
 800dfba:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800dfbc:	230d      	movs	r3, #13
 800dfbe:	18fb      	adds	r3, r7, r3
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	701a      	strb	r2, [r3, #0]
 800dfc4:	e01b      	b.n	800dffe <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800dfc6:	210f      	movs	r1, #15
 800dfc8:	187b      	adds	r3, r7, r1
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	b25b      	sxtb	r3, r3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	da09      	bge.n	800dfe6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800dfd2:	187b      	adds	r3, r7, r1
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	005b      	lsls	r3, r3, #1
 800dfd8:	b25b      	sxtb	r3, r3
 800dfda:	2231      	movs	r2, #49	@ 0x31
 800dfdc:	4053      	eors	r3, r2
 800dfde:	b25a      	sxtb	r2, r3
 800dfe0:	187b      	adds	r3, r7, r1
 800dfe2:	701a      	strb	r2, [r3, #0]
 800dfe4:	e005      	b.n	800dff2 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800dfe6:	230f      	movs	r3, #15
 800dfe8:	18fa      	adds	r2, r7, r3
 800dfea:	18fb      	adds	r3, r7, r3
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	18db      	adds	r3, r3, r3
 800dff0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800dff2:	210d      	movs	r1, #13
 800dff4:	187b      	adds	r3, r7, r1
 800dff6:	781a      	ldrb	r2, [r3, #0]
 800dff8:	187b      	adds	r3, r7, r1
 800dffa:	3201      	adds	r2, #1
 800dffc:	701a      	strb	r2, [r3, #0]
 800dffe:	230d      	movs	r3, #13
 800e000:	18fb      	adds	r3, r7, r3
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	2b07      	cmp	r3, #7
 800e006:	d9de      	bls.n	800dfc6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e008:	210e      	movs	r1, #14
 800e00a:	187b      	adds	r3, r7, r1
 800e00c:	781a      	ldrb	r2, [r3, #0]
 800e00e:	187b      	adds	r3, r7, r1
 800e010:	3201      	adds	r2, #1
 800e012:	701a      	strb	r2, [r3, #0]
 800e014:	230e      	movs	r3, #14
 800e016:	18fa      	adds	r2, r7, r3
 800e018:	1cfb      	adds	r3, r7, #3
 800e01a:	7812      	ldrb	r2, [r2, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d3c0      	bcc.n	800dfa4 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800e022:	230f      	movs	r3, #15
 800e024:	18fb      	adds	r3, r7, r3
 800e026:	781b      	ldrb	r3, [r3, #0]
}
 800e028:	0018      	movs	r0, r3
 800e02a:	46bd      	mov	sp, r7
 800e02c:	b004      	add	sp, #16
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4936      	ldr	r1, [pc, #216]	@ (800e118 <SGP_SetHT+0xe8>)
 800e040:	1c18      	adds	r0, r3, #0
 800e042:	f7f2 fc3d 	bl	80008c0 <__aeabi_fadd>
 800e046:	1c03      	adds	r3, r0, #0
 800e048:	4934      	ldr	r1, [pc, #208]	@ (800e11c <SGP_SetHT+0xec>)
 800e04a:	1c18      	adds	r0, r3, #0
 800e04c:	f7f2 fdc2 	bl	8000bd4 <__aeabi_fdiv>
 800e050:	1c03      	adds	r3, r0, #0
 800e052:	4933      	ldr	r1, [pc, #204]	@ (800e120 <SGP_SetHT+0xf0>)
 800e054:	1c18      	adds	r0, r3, #0
 800e056:	f7f2 ffa3 	bl	8000fa0 <__aeabi_fmul>
 800e05a:	1c03      	adds	r3, r0, #0
 800e05c:	1c18      	adds	r0, r3, #0
 800e05e:	f7f2 fadd 	bl	800061c <__aeabi_f2uiz>
 800e062:	0003      	movs	r3, r0
 800e064:	b29a      	uxth	r2, r3
 800e066:	4b2f      	ldr	r3, [pc, #188]	@ (800e124 <SGP_SetHT+0xf4>)
 800e068:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	492e      	ldr	r1, [pc, #184]	@ (800e128 <SGP_SetHT+0xf8>)
 800e070:	1c18      	adds	r0, r3, #0
 800e072:	f7f2 fdaf 	bl	8000bd4 <__aeabi_fdiv>
 800e076:	1c03      	adds	r3, r0, #0
 800e078:	4929      	ldr	r1, [pc, #164]	@ (800e120 <SGP_SetHT+0xf0>)
 800e07a:	1c18      	adds	r0, r3, #0
 800e07c:	f7f2 ff90 	bl	8000fa0 <__aeabi_fmul>
 800e080:	1c03      	adds	r3, r0, #0
 800e082:	1c18      	adds	r0, r3, #0
 800e084:	f7f2 faca 	bl	800061c <__aeabi_f2uiz>
 800e088:	0003      	movs	r3, r0
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	4b27      	ldr	r3, [pc, #156]	@ (800e12c <SGP_SetHT+0xfc>)
 800e08e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800e090:	4b26      	ldr	r3, [pc, #152]	@ (800e12c <SGP_SetHT+0xfc>)
 800e092:	881b      	ldrh	r3, [r3, #0]
 800e094:	0a1b      	lsrs	r3, r3, #8
 800e096:	b29b      	uxth	r3, r3
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	4b25      	ldr	r3, [pc, #148]	@ (800e130 <SGP_SetHT+0x100>)
 800e09c:	709a      	strb	r2, [r3, #2]
 800e09e:	4b24      	ldr	r3, [pc, #144]	@ (800e130 <SGP_SetHT+0x100>)
 800e0a0:	789a      	ldrb	r2, [r3, #2]
 800e0a2:	210c      	movs	r1, #12
 800e0a4:	187b      	adds	r3, r7, r1
 800e0a6:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800e0a8:	4b20      	ldr	r3, [pc, #128]	@ (800e12c <SGP_SetHT+0xfc>)
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	4b20      	ldr	r3, [pc, #128]	@ (800e130 <SGP_SetHT+0x100>)
 800e0b0:	70da      	strb	r2, [r3, #3]
 800e0b2:	4b1f      	ldr	r3, [pc, #124]	@ (800e130 <SGP_SetHT+0x100>)
 800e0b4:	78da      	ldrb	r2, [r3, #3]
 800e0b6:	187b      	adds	r3, r7, r1
 800e0b8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800e0ba:	187b      	adds	r3, r7, r1
 800e0bc:	2102      	movs	r1, #2
 800e0be:	0018      	movs	r0, r3
 800e0c0:	f7ff ff60 	bl	800df84 <CalculateCRC>
 800e0c4:	0003      	movs	r3, r0
 800e0c6:	001a      	movs	r2, r3
 800e0c8:	4b19      	ldr	r3, [pc, #100]	@ (800e130 <SGP_SetHT+0x100>)
 800e0ca:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800e0cc:	4b15      	ldr	r3, [pc, #84]	@ (800e124 <SGP_SetHT+0xf4>)
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	0a1b      	lsrs	r3, r3, #8
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	4b16      	ldr	r3, [pc, #88]	@ (800e130 <SGP_SetHT+0x100>)
 800e0d8:	715a      	strb	r2, [r3, #5]
 800e0da:	4b15      	ldr	r3, [pc, #84]	@ (800e130 <SGP_SetHT+0x100>)
 800e0dc:	795a      	ldrb	r2, [r3, #5]
 800e0de:	2108      	movs	r1, #8
 800e0e0:	187b      	adds	r3, r7, r1
 800e0e2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800e0e4:	4b0f      	ldr	r3, [pc, #60]	@ (800e124 <SGP_SetHT+0xf4>)
 800e0e6:	881b      	ldrh	r3, [r3, #0]
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	4b11      	ldr	r3, [pc, #68]	@ (800e130 <SGP_SetHT+0x100>)
 800e0ec:	719a      	strb	r2, [r3, #6]
 800e0ee:	4b10      	ldr	r3, [pc, #64]	@ (800e130 <SGP_SetHT+0x100>)
 800e0f0:	799a      	ldrb	r2, [r3, #6]
 800e0f2:	187b      	adds	r3, r7, r1
 800e0f4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800e0f6:	187b      	adds	r3, r7, r1
 800e0f8:	2102      	movs	r1, #2
 800e0fa:	0018      	movs	r0, r3
 800e0fc:	f7ff ff42 	bl	800df84 <CalculateCRC>
 800e100:	0003      	movs	r3, r0
 800e102:	001a      	movs	r2, r3
 800e104:	4b0a      	ldr	r3, [pc, #40]	@ (800e130 <SGP_SetHT+0x100>)
 800e106:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800e108:	4b0a      	ldr	r3, [pc, #40]	@ (800e134 <SGP_SetHT+0x104>)
 800e10a:	2201      	movs	r2, #1
 800e10c:	701a      	strb	r2, [r3, #0]
}
 800e10e:	46c0      	nop			@ (mov r8, r8)
 800e110:	46bd      	mov	sp, r7
 800e112:	b004      	add	sp, #16
 800e114:	bd80      	pop	{r7, pc}
 800e116:	46c0      	nop			@ (mov r8, r8)
 800e118:	42340000 	.word	0x42340000
 800e11c:	432f0000 	.word	0x432f0000
 800e120:	477fff00 	.word	0x477fff00
 800e124:	20000f2e 	.word	0x20000f2e
 800e128:	42c80000 	.word	0x42c80000
 800e12c:	20000f2c 	.word	0x20000f2c
 800e130:	200000b0 	.word	0x200000b0
 800e134:	20000f30 	.word	0x20000f30

0800e138 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800e138:	b580      	push	{r7, lr}
 800e13a:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800e13c:	4a09      	ldr	r2, [pc, #36]	@ (800e164 <SGP_SoftReset+0x2c>)
 800e13e:	4b0a      	ldr	r3, [pc, #40]	@ (800e168 <SGP_SoftReset+0x30>)
 800e140:	0019      	movs	r1, r3
 800e142:	2003      	movs	r0, #3
 800e144:	f002 fb6c 	bl	8010820 <CreateLine>
  SGP_TurnHeaterOff();
 800e148:	f7ff fcd0 	bl	800daec <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800e14c:	200a      	movs	r0, #10
 800e14e:	f002 ffbd 	bl	80110cc <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800e152:	4b06      	ldr	r3, [pc, #24]	@ (800e16c <SGP_SoftReset+0x34>)
 800e154:	2202      	movs	r2, #2
 800e156:	0019      	movs	r1, r3
 800e158:	2059      	movs	r0, #89	@ 0x59
 800e15a:	f7ff fbf9 	bl	800d950 <WriteRegister>
}
 800e15e:	46c0      	nop			@ (mov r8, r8)
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	08028690 	.word	0x08028690
 800e168:	0802856c 	.word	0x0802856c
 800e16c:	200000b8 	.word	0x200000b8

0800e170 <ResetVOCresult>:

void ResetVOCresult(void) {
 800e170:	b580      	push	{r7, lr}
 800e172:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800e174:	4b02      	ldr	r3, [pc, #8]	@ (800e180 <ResetVOCresult+0x10>)
 800e176:	2200      	movs	r2, #0
 800e178:	601a      	str	r2, [r3, #0]
}
 800e17a:	46c0      	nop			@ (mov r8, r8)
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	20000f34 	.word	0x20000f34

0800e184 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800e184:	b580      	push	{r7, lr}
 800e186:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800e188:	4b42      	ldr	r3, [pc, #264]	@ (800e294 <SGP_Upkeep+0x110>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b07      	cmp	r3, #7
 800e18e:	d869      	bhi.n	800e264 <SGP_Upkeep+0xe0>
 800e190:	009a      	lsls	r2, r3, #2
 800e192:	4b41      	ldr	r3, [pc, #260]	@ (800e298 <SGP_Upkeep+0x114>)
 800e194:	18d3      	adds	r3, r2, r3
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800e19a:	4a40      	ldr	r2, [pc, #256]	@ (800e29c <SGP_Upkeep+0x118>)
 800e19c:	4b40      	ldr	r3, [pc, #256]	@ (800e2a0 <SGP_Upkeep+0x11c>)
 800e19e:	0019      	movs	r1, r3
 800e1a0:	2003      	movs	r0, #3
 800e1a2:	f002 fb3d 	bl	8010820 <CreateLine>
    break;
 800e1a6:	e070      	b.n	800e28a <SGP_Upkeep+0x106>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800e1a8:	f7ff ffe2 	bl	800e170 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800e1ac:	4b39      	ldr	r3, [pc, #228]	@ (800e294 <SGP_Upkeep+0x110>)
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	701a      	strb	r2, [r3, #0]
    break;
 800e1b2:	e06a      	b.n	800e28a <SGP_Upkeep+0x106>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800e1b4:	f7fc fcac 	bl	800ab10 <getSensorLock>
 800e1b8:	1e03      	subs	r3, r0, #0
 800e1ba:	d15f      	bne.n	800e27c <SGP_Upkeep+0xf8>
      break;
    }
    setSensorLock(SGP40);
 800e1bc:	2002      	movs	r0, #2
 800e1be:	f7fc fc97 	bl	800aaf0 <setSensorLock>
    SetMeasurementIndicator();
 800e1c2:	f001 f977 	bl	800f4b4 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 800e1c6:	f7ff fc2f 	bl	800da28 <SGP_StartMeasurement>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800e1ca:	4b32      	ldr	r3, [pc, #200]	@ (800e294 <SGP_Upkeep+0x110>)
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	701a      	strb	r2, [r3, #0]
    break;
 800e1d0:	e05b      	b.n	800e28a <SGP_Upkeep+0x106>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800e1d2:	4b34      	ldr	r3, [pc, #208]	@ (800e2a4 <SGP_Upkeep+0x120>)
 800e1d4:	0018      	movs	r0, r3
 800e1d6:	f7ff fc97 	bl	800db08 <SGP_GetMeasurementValues>
 800e1da:	1e03      	subs	r3, r0, #0
 800e1dc:	d050      	beq.n	800e280 <SGP_Upkeep+0xfc>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800e1de:	4b2d      	ldr	r3, [pc, #180]	@ (800e294 <SGP_Upkeep+0x110>)
 800e1e0:	2203      	movs	r2, #3
 800e1e2:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	f7fc fc83 	bl	800aaf0 <setSensorLock>
    }
    break;
 800e1ea:	e049      	b.n	800e280 <SGP_Upkeep+0xfc>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800e1ec:	4b2d      	ldr	r3, [pc, #180]	@ (800e2a4 <SGP_Upkeep+0x120>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	0018      	movs	r0, r3
 800e1f4:	f7f5 faea 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800e1f8:	4b26      	ldr	r3, [pc, #152]	@ (800e294 <SGP_Upkeep+0x110>)
 800e1fa:	2206      	movs	r2, #6
 800e1fc:	701a      	strb	r2, [r3, #0]
    break;
 800e1fe:	e044      	b.n	800e28a <SGP_Upkeep+0x106>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800e200:	4b24      	ldr	r3, [pc, #144]	@ (800e294 <SGP_Upkeep+0x110>)
 800e202:	2207      	movs	r2, #7
 800e204:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800e206:	4b28      	ldr	r3, [pc, #160]	@ (800e2a8 <SGP_Upkeep+0x124>)
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d112      	bne.n	800e234 <SGP_Upkeep+0xb0>
 800e20e:	4b27      	ldr	r3, [pc, #156]	@ (800e2ac <SGP_Upkeep+0x128>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	2201      	movs	r2, #1
 800e214:	4053      	eors	r3, r2
 800e216:	b2db      	uxtb	r3, r3
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00b      	beq.n	800e234 <SGP_Upkeep+0xb0>
      // During startup take 12 samples
      if (sgpinitdone) {
 800e21c:	4b24      	ldr	r3, [pc, #144]	@ (800e2b0 <SGP_Upkeep+0x12c>)
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d004      	beq.n	800e22e <SGP_Upkeep+0xaa>
        SGP_SoftReset();
 800e224:	f7ff ff88 	bl	800e138 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800e228:	2000      	movs	r0, #0
 800e22a:	f7fc f935 	bl	800a498 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800e22e:	4b20      	ldr	r3, [pc, #128]	@ (800e2b0 <SGP_Upkeep+0x12c>)
 800e230:	2201      	movs	r2, #1
 800e232:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800e234:	f002 ff40 	bl	80110b8 <HAL_GetTick>
 800e238:	0003      	movs	r3, r0
 800e23a:	22c8      	movs	r2, #200	@ 0xc8
 800e23c:	0092      	lsls	r2, r2, #2
 800e23e:	189a      	adds	r2, r3, r2
 800e240:	4b1c      	ldr	r3, [pc, #112]	@ (800e2b4 <SGP_Upkeep+0x130>)
 800e242:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800e244:	f001 f94e 	bl	800f4e4 <ResetMeasurementIndicator>
  break;
 800e248:	e01f      	b.n	800e28a <SGP_Upkeep+0x106>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800e24a:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b4 <SGP_Upkeep+0x130>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	0018      	movs	r0, r3
 800e250:	f002 fa90 	bl	8010774 <TimestampIsReached>
 800e254:	1e03      	subs	r3, r0, #0
 800e256:	d015      	beq.n	800e284 <SGP_Upkeep+0x100>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800e258:	f7ff fbce 	bl	800d9f8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800e25c:	4b0d      	ldr	r3, [pc, #52]	@ (800e294 <SGP_Upkeep+0x110>)
 800e25e:	2200      	movs	r2, #0
 800e260:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e262:	e00f      	b.n	800e284 <SGP_Upkeep+0x100>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800e264:	4b0b      	ldr	r3, [pc, #44]	@ (800e294 <SGP_Upkeep+0x110>)
 800e266:	2200      	movs	r2, #0
 800e268:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 800e26a:	f7fc fc51 	bl	800ab10 <getSensorLock>
 800e26e:	0003      	movs	r3, r0
 800e270:	2b02      	cmp	r3, #2
 800e272:	d109      	bne.n	800e288 <SGP_Upkeep+0x104>
      setSensorLock(FREE);
 800e274:	2000      	movs	r0, #0
 800e276:	f7fc fc3b 	bl	800aaf0 <setSensorLock>
    }
    break;
 800e27a:	e005      	b.n	800e288 <SGP_Upkeep+0x104>
      break;
 800e27c:	46c0      	nop			@ (mov r8, r8)
 800e27e:	e004      	b.n	800e28a <SGP_Upkeep+0x106>
    break;
 800e280:	46c0      	nop			@ (mov r8, r8)
 800e282:	e002      	b.n	800e28a <SGP_Upkeep+0x106>
    break;
 800e284:	46c0      	nop			@ (mov r8, r8)
 800e286:	e000      	b.n	800e28a <SGP_Upkeep+0x106>
    break;
 800e288:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800e28a:	4b02      	ldr	r3, [pc, #8]	@ (800e294 <SGP_Upkeep+0x110>)
 800e28c:	781b      	ldrb	r3, [r3, #0]
}
 800e28e:	0018      	movs	r0, r3
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	20000f38 	.word	0x20000f38
 800e298:	08028e54 	.word	0x08028e54
 800e29c:	080286a8 	.word	0x080286a8
 800e2a0:	0802856c 	.word	0x0802856c
 800e2a4:	20000f34 	.word	0x20000f34
 800e2a8:	20000e7e 	.word	0x20000e7e
 800e2ac:	20001dd5 	.word	0x20001dd5
 800e2b0:	20000e68 	.word	0x20000e68
 800e2b4:	20000e80 	.word	0x20000e80

0800e2b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	0002      	movs	r2, r0
 800e2c0:	1dfb      	adds	r3, r7, #7
 800e2c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e2c4:	1dfb      	adds	r3, r7, #7
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2ca:	d809      	bhi.n	800e2e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e2cc:	1dfb      	adds	r3, r7, #7
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	001a      	movs	r2, r3
 800e2d2:	231f      	movs	r3, #31
 800e2d4:	401a      	ands	r2, r3
 800e2d6:	4b04      	ldr	r3, [pc, #16]	@ (800e2e8 <__NVIC_EnableIRQ+0x30>)
 800e2d8:	2101      	movs	r1, #1
 800e2da:	4091      	lsls	r1, r2
 800e2dc:	000a      	movs	r2, r1
 800e2de:	601a      	str	r2, [r3, #0]
  }
}
 800e2e0:	46c0      	nop			@ (mov r8, r8)
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	b002      	add	sp, #8
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	e000e100 	.word	0xe000e100

0800e2ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	0002      	movs	r2, r0
 800e2f4:	1dfb      	adds	r3, r7, #7
 800e2f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e2f8:	1dfb      	adds	r3, r7, #7
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2fe:	d810      	bhi.n	800e322 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e300:	1dfb      	adds	r3, r7, #7
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	001a      	movs	r2, r3
 800e306:	231f      	movs	r3, #31
 800e308:	4013      	ands	r3, r2
 800e30a:	4908      	ldr	r1, [pc, #32]	@ (800e32c <__NVIC_DisableIRQ+0x40>)
 800e30c:	2201      	movs	r2, #1
 800e30e:	409a      	lsls	r2, r3
 800e310:	0013      	movs	r3, r2
 800e312:	2280      	movs	r2, #128	@ 0x80
 800e314:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e316:	f3bf 8f4f 	dsb	sy
}
 800e31a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800e31c:	f3bf 8f6f 	isb	sy
}
 800e320:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800e322:	46c0      	nop			@ (mov r8, r8)
 800e324:	46bd      	mov	sp, r7
 800e326:	b002      	add	sp, #8
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	46c0      	nop			@ (mov r8, r8)
 800e32c:	e000e100 	.word	0xe000e100

0800e330 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800e330:	b5b0      	push	{r4, r5, r7, lr}
 800e332:	b088      	sub	sp, #32
 800e334:	af02      	add	r7, sp, #8
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	0008      	movs	r0, r1
 800e33a:	0011      	movs	r1, r2
 800e33c:	1cfb      	adds	r3, r7, #3
 800e33e:	1c02      	adds	r2, r0, #0
 800e340:	701a      	strb	r2, [r3, #0]
 800e342:	1cbb      	adds	r3, r7, #2
 800e344:	1c0a      	adds	r2, r1, #0
 800e346:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800e348:	4b5b      	ldr	r3, [pc, #364]	@ (800e4b8 <getSoundData+0x188>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	2201      	movs	r2, #1
 800e350:	4053      	eors	r3, r2
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2b00      	cmp	r3, #0
 800e356:	d107      	bne.n	800e368 <getSoundData+0x38>
 800e358:	4b58      	ldr	r3, [pc, #352]	@ (800e4bc <getSoundData+0x18c>)
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	2201      	movs	r2, #1
 800e360:	4053      	eors	r3, r2
 800e362:	b2db      	uxtb	r3, r3
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <getSoundData+0x3c>
    {
        return false;
 800e368:	2300      	movs	r3, #0
 800e36a:	e0a0      	b.n	800e4ae <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800e36c:	4b54      	ldr	r3, [pc, #336]	@ (800e4c0 <getSoundData+0x190>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	b2db      	uxtb	r3, r3
 800e372:	2b00      	cmp	r3, #0
 800e374:	d005      	beq.n	800e382 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800e376:	4b53      	ldr	r3, [pc, #332]	@ (800e4c4 <getSoundData+0x194>)
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	b25b      	sxtb	r3, r3
 800e37c:	0018      	movs	r0, r3
 800e37e:	f7ff ffb5 	bl	800e2ec <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800e382:	f3bf 8f4f 	dsb	sy
}
 800e386:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800e388:	f3bf 8f6f 	isb	sy
}
 800e38c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800e38e:	1cfb      	adds	r3, r7, #3
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d04c      	beq.n	800e430 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800e396:	4b4c      	ldr	r3, [pc, #304]	@ (800e4c8 <getSoundData+0x198>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d11b      	bne.n	800e3d6 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	617b      	str	r3, [r7, #20]
 800e3ae:	e00e      	b.n	800e3ce <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	18d3      	adds	r3, r2, r3
 800e3b6:	3302      	adds	r3, #2
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	18d3      	adds	r3, r2, r3
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	617b      	str	r3, [r7, #20]
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	2b05      	cmp	r3, #5
 800e3d2:	d9ed      	bls.n	800e3b0 <getSoundData+0x80>
 800e3d4:	e02c      	b.n	800e430 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	1c59      	adds	r1, r3, #1
 800e3dc:	4b3b      	ldr	r3, [pc, #236]	@ (800e4cc <getSoundData+0x19c>)
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	4b3b      	ldr	r3, [pc, #236]	@ (800e4d0 <getSoundData+0x1a0>)
 800e3e2:	681c      	ldr	r4, [r3, #0]
 800e3e4:	4b38      	ldr	r3, [pc, #224]	@ (800e4c8 <getSoundData+0x198>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	0023      	movs	r3, r4
 800e3ec:	f000 fde8 	bl	800efc0 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	613b      	str	r3, [r7, #16]
 800e3f4:	e019      	b.n	800e42a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	18d3      	adds	r3, r2, r3
 800e3fc:	1c98      	adds	r0, r3, #2
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	3308      	adds	r3, #8
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800e406:	4b33      	ldr	r3, [pc, #204]	@ (800e4d4 <getSoundData+0x1a4>)
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	0092      	lsls	r2, r2, #2
 800e40c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800e40e:	4b32      	ldr	r3, [pc, #200]	@ (800e4d8 <getSoundData+0x1a8>)
 800e410:	693a      	ldr	r2, [r7, #16]
 800e412:	0092      	lsls	r2, r2, #2
 800e414:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800e416:	4b2c      	ldr	r3, [pc, #176]	@ (800e4c8 <getSoundData+0x198>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	0013      	movs	r3, r2
 800e41e:	0022      	movs	r2, r4
 800e420:	f000 fdce 	bl	800efc0 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	3301      	adds	r3, #1
 800e428:	613b      	str	r3, [r7, #16]
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	2b05      	cmp	r3, #5
 800e42e:	d9e2      	bls.n	800e3f6 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800e430:	1cbb      	adds	r3, r7, #2
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d028      	beq.n	800e48a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800e438:	240e      	movs	r4, #14
 800e43a:	193b      	adds	r3, r7, r4
 800e43c:	2200      	movs	r2, #0
 800e43e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800e440:	250d      	movs	r5, #13
 800e442:	197b      	adds	r3, r7, r5
 800e444:	2200      	movs	r2, #0
 800e446:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800e448:	4b24      	ldr	r3, [pc, #144]	@ (800e4dc <getSoundData+0x1ac>)
 800e44a:	6818      	ldr	r0, [r3, #0]
 800e44c:	4924      	ldr	r1, [pc, #144]	@ (800e4e0 <getSoundData+0x1b0>)
 800e44e:	197b      	adds	r3, r7, r5
 800e450:	193a      	adds	r2, r7, r4
 800e452:	f000 fe59 	bl	800f108 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800e456:	193b      	adds	r3, r7, r4
 800e458:	881a      	ldrh	r2, [r3, #0]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	21ff      	movs	r1, #255	@ 0xff
 800e45e:	4011      	ands	r1, r2
 800e460:	000c      	movs	r4, r1
 800e462:	7b99      	ldrb	r1, [r3, #14]
 800e464:	2000      	movs	r0, #0
 800e466:	4001      	ands	r1, r0
 800e468:	1c08      	adds	r0, r1, #0
 800e46a:	1c21      	adds	r1, r4, #0
 800e46c:	4301      	orrs	r1, r0
 800e46e:	7399      	strb	r1, [r3, #14]
 800e470:	0a12      	lsrs	r2, r2, #8
 800e472:	b290      	uxth	r0, r2
 800e474:	7bda      	ldrb	r2, [r3, #15]
 800e476:	2100      	movs	r1, #0
 800e478:	400a      	ands	r2, r1
 800e47a:	1c11      	adds	r1, r2, #0
 800e47c:	1c02      	adds	r2, r0, #0
 800e47e:	430a      	orrs	r2, r1
 800e480:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800e482:	197b      	adds	r3, r7, r5
 800e484:	781a      	ldrb	r2, [r3, #0]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800e48a:	f000 f86f 	bl	800e56c <micSettlingComplete>
 800e48e:	0003      	movs	r3, r0
 800e490:	001a      	movs	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800e496:	4b0a      	ldr	r3, [pc, #40]	@ (800e4c0 <getSoundData+0x190>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d005      	beq.n	800e4ac <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800e4a0:	4b08      	ldr	r3, [pc, #32]	@ (800e4c4 <getSoundData+0x194>)
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	b25b      	sxtb	r3, r3
 800e4a6:	0018      	movs	r0, r3
 800e4a8:	f7ff ff06 	bl	800e2b8 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800e4ac:	2301      	movs	r3, #1
}
 800e4ae:	0018      	movs	r0, r3
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	b006      	add	sp, #24
 800e4b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e4b6:	46c0      	nop			@ (mov r8, r8)
 800e4b8:	20000f3a 	.word	0x20000f3a
 800e4bc:	20000f3d 	.word	0x20000f3d
 800e4c0:	20000f3c 	.word	0x20000f3c
 800e4c4:	2000198c 	.word	0x2000198c
 800e4c8:	200019c8 	.word	0x200019c8
 800e4cc:	20001990 	.word	0x20001990
 800e4d0:	20001994 	.word	0x20001994
 800e4d4:	20001998 	.word	0x20001998
 800e4d8:	200019b0 	.word	0x200019b0
 800e4dc:	20000f44 	.word	0x20000f44
 800e4e0:	3b5c7333 	.word	0x3b5c7333

0800e4e4 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
 800e4f0:	001a      	movs	r2, r3
 800e4f2:	1cfb      	adds	r3, r7, #3
 800e4f4:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800e4f6:	4b09      	ldr	r3, [pc, #36]	@ (800e51c <soundInit+0x38>)
 800e4f8:	68ba      	ldr	r2, [r7, #8]
 800e4fa:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800e4fc:	4b08      	ldr	r3, [pc, #32]	@ (800e520 <soundInit+0x3c>)
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800e502:	4b08      	ldr	r3, [pc, #32]	@ (800e524 <soundInit+0x40>)
 800e504:	68fa      	ldr	r2, [r7, #12]
 800e506:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800e508:	4b07      	ldr	r3, [pc, #28]	@ (800e528 <soundInit+0x44>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	569a      	ldrsb	r2, [r3, r2]
 800e50e:	4b06      	ldr	r3, [pc, #24]	@ (800e528 <soundInit+0x44>)
 800e510:	701a      	strb	r2, [r3, #0]

    return true;
 800e512:	2301      	movs	r3, #1
}
 800e514:	0018      	movs	r0, r3
 800e516:	46bd      	mov	sp, r7
 800e518:	b004      	add	sp, #16
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20001984 	.word	0x20001984
 800e520:	20001980 	.word	0x20001980
 800e524:	20001988 	.word	0x20001988
 800e528:	2000198c 	.word	0x2000198c

0800e52c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800e530:	4b02      	ldr	r3, [pc, #8]	@ (800e53c <clearMaximumAmplitude+0x10>)
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
}
 800e536:	46c0      	nop			@ (mov r8, r8)
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	20000f44 	.word	0x20000f44

0800e540 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800e544:	4b08      	ldr	r3, [pc, #32]	@ (800e568 <startMicSettlingPeriod+0x28>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2200      	movs	r2, #0
 800e54c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800e54e:	4b06      	ldr	r3, [pc, #24]	@ (800e568 <startMicSettlingPeriod+0x28>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	0018      	movs	r0, r3
 800e554:	f00a fe0c 	bl	8019170 <HAL_TIM_Base_Start>
 800e558:	1e03      	subs	r3, r0, #0
 800e55a:	d001      	beq.n	800e560 <startMicSettlingPeriod+0x20>
    {
        return false;
 800e55c:	2300      	movs	r3, #0
 800e55e:	e000      	b.n	800e562 <startMicSettlingPeriod+0x22>
    }
    return true;
 800e560:	2301      	movs	r3, #1
}
 800e562:	0018      	movs	r0, r3
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	20001980 	.word	0x20001980

0800e56c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800e572:	4b0e      	ldr	r3, [pc, #56]	@ (800e5ac <micSettlingComplete+0x40>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	691b      	ldr	r3, [r3, #16]
 800e57a:	2201      	movs	r2, #1
 800e57c:	401a      	ands	r2, r3
 800e57e:	1dfb      	adds	r3, r7, #7
 800e580:	3a01      	subs	r2, #1
 800e582:	4251      	negs	r1, r2
 800e584:	414a      	adcs	r2, r1
 800e586:	701a      	strb	r2, [r3, #0]
    if (complete)
 800e588:	1dfb      	adds	r3, r7, #7
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d007      	beq.n	800e5a0 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800e590:	4b06      	ldr	r3, [pc, #24]	@ (800e5ac <micSettlingComplete+0x40>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	0018      	movs	r0, r3
 800e596:	f00a fe35 	bl	8019204 <HAL_TIM_Base_Stop>
      DataReady = true;
 800e59a:	4b05      	ldr	r3, [pc, #20]	@ (800e5b0 <micSettlingComplete+0x44>)
 800e59c:	2201      	movs	r2, #1
 800e59e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800e5a0:	1dfb      	adds	r3, r7, #7
 800e5a2:	781b      	ldrb	r3, [r3, #0]
}
 800e5a4:	0018      	movs	r0, r3
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	b002      	add	sp, #8
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	20001980 	.word	0x20001980
 800e5b0:	20000f39 	.word	0x20000f39

0800e5b4 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	0002      	movs	r2, r0
 800e5bc:	1dfb      	adds	r3, r7, #7
 800e5be:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800e5c0:	4b29      	ldr	r3, [pc, #164]	@ (800e668 <enableMicrophone+0xb4>)
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	1dfa      	adds	r2, r7, #7
 800e5c8:	7812      	ldrb	r2, [r2, #0]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d101      	bne.n	800e5d2 <enableMicrophone+0x1e>
    {
        return true;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e045      	b.n	800e65e <enableMicrophone+0xaa>
    }
    if (bEnable)
 800e5d2:	1dfb      	adds	r3, r7, #7
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d025      	beq.n	800e626 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800e5da:	f7ff ffb1 	bl	800e540 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800e5de:	4b23      	ldr	r3, [pc, #140]	@ (800e66c <enableMicrophone+0xb8>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2280      	movs	r2, #128	@ 0x80
 800e5e4:	0092      	lsls	r2, r2, #2
 800e5e6:	4922      	ldr	r1, [pc, #136]	@ (800e670 <enableMicrophone+0xbc>)
 800e5e8:	0018      	movs	r0, r3
 800e5ea:	f007 f82b 	bl	8015644 <HAL_I2S_Receive_DMA>
 800e5ee:	1e03      	subs	r3, r0, #0
 800e5f0:	d001      	beq.n	800e5f6 <enableMicrophone+0x42>
        {
            return false;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	e033      	b.n	800e65e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800e5f6:	f7ff ff99 	bl	800e52c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800e5fa:	4b1e      	ldr	r3, [pc, #120]	@ (800e674 <enableMicrophone+0xc0>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800e600:	4b1d      	ldr	r3, [pc, #116]	@ (800e678 <enableMicrophone+0xc4>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	b25b      	sxtb	r3, r3
 800e606:	0018      	movs	r0, r3
 800e608:	f7ff fe56 	bl	800e2b8 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800e60c:	4b1b      	ldr	r3, [pc, #108]	@ (800e67c <enableMicrophone+0xc8>)
 800e60e:	2201      	movs	r2, #1
 800e610:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800e612:	4b15      	ldr	r3, [pc, #84]	@ (800e668 <enableMicrophone+0xb4>)
 800e614:	2201      	movs	r2, #1
 800e616:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800e618:	4b19      	ldr	r3, [pc, #100]	@ (800e680 <enableMicrophone+0xcc>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800e61e:	4b19      	ldr	r3, [pc, #100]	@ (800e684 <enableMicrophone+0xd0>)
 800e620:	2200      	movs	r2, #0
 800e622:	701a      	strb	r2, [r3, #0]
 800e624:	e01a      	b.n	800e65c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800e626:	4b14      	ldr	r3, [pc, #80]	@ (800e678 <enableMicrophone+0xc4>)
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	b25b      	sxtb	r3, r3
 800e62c:	0018      	movs	r0, r3
 800e62e:	f7ff fe5d 	bl	800e2ec <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800e632:	4b12      	ldr	r3, [pc, #72]	@ (800e67c <enableMicrophone+0xc8>)
 800e634:	2200      	movs	r2, #0
 800e636:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800e638:	4b11      	ldr	r3, [pc, #68]	@ (800e680 <enableMicrophone+0xcc>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800e63e:	4b11      	ldr	r3, [pc, #68]	@ (800e684 <enableMicrophone+0xd0>)
 800e640:	2200      	movs	r2, #0
 800e642:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800e644:	4b09      	ldr	r3, [pc, #36]	@ (800e66c <enableMicrophone+0xb8>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	0018      	movs	r0, r3
 800e64a:	f007 f8bd 	bl	80157c8 <HAL_I2S_DMAStop>
 800e64e:	1e03      	subs	r3, r0, #0
 800e650:	d001      	beq.n	800e656 <enableMicrophone+0xa2>
        {
            return false;
 800e652:	2300      	movs	r3, #0
 800e654:	e003      	b.n	800e65e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800e656:	4b04      	ldr	r3, [pc, #16]	@ (800e668 <enableMicrophone+0xb4>)
 800e658:	2200      	movs	r2, #0
 800e65a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800e65c:	2301      	movs	r3, #1
}
 800e65e:	0018      	movs	r0, r3
 800e660:	46bd      	mov	sp, r7
 800e662:	b002      	add	sp, #8
 800e664:	bd80      	pop	{r7, pc}
 800e666:	46c0      	nop			@ (mov r8, r8)
 800e668:	20000f3a 	.word	0x20000f3a
 800e66c:	20001984 	.word	0x20001984
 800e670:	20000f80 	.word	0x20000f80
 800e674:	20000f40 	.word	0x20000f40
 800e678:	2000198c 	.word	0x2000198c
 800e67c:	20000f3c 	.word	0x20000f3c
 800e680:	20000f3b 	.word	0x20000f3b
 800e684:	20000f3d 	.word	0x20000f3d

0800e688 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800e68c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6c0 <startSPLcalculation+0x38>)
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	b2db      	uxtb	r3, r3
 800e692:	2201      	movs	r2, #1
 800e694:	4053      	eors	r3, r2
 800e696:	b2db      	uxtb	r3, r3
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d001      	beq.n	800e6a0 <startSPLcalculation+0x18>
    {
        return false;
 800e69c:	2300      	movs	r3, #0
 800e69e:	e00c      	b.n	800e6ba <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800e6a0:	4b08      	ldr	r3, [pc, #32]	@ (800e6c4 <startSPLcalculation+0x3c>)
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <startSPLcalculation+0x26>
    {
        return true;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e005      	b.n	800e6ba <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800e6ae:	f000 fb63 	bl	800ed78 <resetSPLstate>
    SPLcalcEnabled = true;
 800e6b2:	4b04      	ldr	r3, [pc, #16]	@ (800e6c4 <startSPLcalculation+0x3c>)
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	701a      	strb	r2, [r3, #0]
    return true;
 800e6b8:	2301      	movs	r3, #1
}
 800e6ba:	0018      	movs	r0, r3
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	20000f3a 	.word	0x20000f3a
 800e6c4:	20000f3b 	.word	0x20000f3b

0800e6c8 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e6d0:	4b05      	ldr	r3, [pc, #20]	@ (800e6e8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d102      	bne.n	800e6e0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800e6da:	2000      	movs	r0, #0
 800e6dc:	f000 f81a 	bl	800e714 <processHalfDMAbuffer>
  }
}
 800e6e0:	46c0      	nop			@ (mov r8, r8)
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	b002      	add	sp, #8
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	20001984 	.word	0x20001984

0800e6ec <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e6f4:	4b06      	ldr	r3, [pc, #24]	@ (800e710 <HAL_I2S_RxCpltCallback+0x24>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d104      	bne.n	800e708 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800e6fe:	2380      	movs	r3, #128	@ 0x80
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	0018      	movs	r0, r3
 800e704:	f000 f806 	bl	800e714 <processHalfDMAbuffer>
  }
}
 800e708:	46c0      	nop			@ (mov r8, r8)
 800e70a:	46bd      	mov	sp, r7
 800e70c:	b002      	add	sp, #8
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20001984 	.word	0x20001984

0800e714 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	005a      	lsls	r2, r3, #1
 800e720:	4b15      	ldr	r3, [pc, #84]	@ (800e778 <processHalfDMAbuffer+0x64>)
 800e722:	18d3      	adds	r3, r2, r3
 800e724:	4a15      	ldr	r2, [pc, #84]	@ (800e77c <processHalfDMAbuffer+0x68>)
 800e726:	2180      	movs	r1, #128	@ 0x80
 800e728:	0089      	lsls	r1, r1, #2
 800e72a:	0018      	movs	r0, r3
 800e72c:	f000 fd35 	bl	800f19a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800e730:	4b13      	ldr	r3, [pc, #76]	@ (800e780 <processHalfDMAbuffer+0x6c>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	425a      	negs	r2, r3
 800e736:	4153      	adcs	r3, r2
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	4b11      	ldr	r3, [pc, #68]	@ (800e780 <processHalfDMAbuffer+0x6c>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2109      	movs	r1, #9
 800e740:	4299      	cmp	r1, r3
 800e742:	419b      	sbcs	r3, r3
 800e744:	425b      	negs	r3, r3
 800e746:	b2db      	uxtb	r3, r3
 800e748:	480c      	ldr	r0, [pc, #48]	@ (800e77c <processHalfDMAbuffer+0x68>)
 800e74a:	2180      	movs	r1, #128	@ 0x80
 800e74c:	f000 fb46 	bl	800eddc <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800e750:	4b0b      	ldr	r3, [pc, #44]	@ (800e780 <processHalfDMAbuffer+0x6c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b09      	cmp	r3, #9
 800e756:	d804      	bhi.n	800e762 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800e758:	4b09      	ldr	r3, [pc, #36]	@ (800e780 <processHalfDMAbuffer+0x6c>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	4b08      	ldr	r3, [pc, #32]	@ (800e780 <processHalfDMAbuffer+0x6c>)
 800e760:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800e762:	4b08      	ldr	r3, [pc, #32]	@ (800e784 <processHalfDMAbuffer+0x70>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d001      	beq.n	800e770 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800e76c:	f000 f826 	bl	800e7bc <calculateSPLQ31>
    }
}
 800e770:	46c0      	nop			@ (mov r8, r8)
 800e772:	46bd      	mov	sp, r7
 800e774:	b002      	add	sp, #8
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20000f80 	.word	0x20000f80
 800e77c:	20001780 	.word	0x20001780
 800e780:	20000f40 	.word	0x20000f40
 800e784:	20000f3b 	.word	0x20000f3b

0800e788 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e790:	4b07      	ldr	r3, [pc, #28]	@ (800e7b0 <HAL_I2S_ErrorCallback+0x28>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	429a      	cmp	r2, r3
 800e798:	d106      	bne.n	800e7a8 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800e79a:	4a06      	ldr	r2, [pc, #24]	@ (800e7b4 <HAL_I2S_ErrorCallback+0x2c>)
 800e79c:	239e      	movs	r3, #158	@ 0x9e
 800e79e:	0059      	lsls	r1, r3, #1
 800e7a0:	4b05      	ldr	r3, [pc, #20]	@ (800e7b8 <HAL_I2S_ErrorCallback+0x30>)
 800e7a2:	0018      	movs	r0, r3
 800e7a4:	f002 f8f4 	bl	8010990 <errorHandler>
  }
}
 800e7a8:	46c0      	nop			@ (mov r8, r8)
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	b002      	add	sp, #8
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	20001984 	.word	0x20001984
 800e7b4:	080286d0 	.word	0x080286d0
 800e7b8:	08028f44 	.word	0x08028f44

0800e7bc <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800e7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7be:	b0b3      	sub	sp, #204	@ 0xcc
 800e7c0:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800e7c2:	4ae2      	ldr	r2, [pc, #904]	@ (800eb4c <calculateSPLQ31+0x390>)
 800e7c4:	2338      	movs	r3, #56	@ 0x38
 800e7c6:	2030      	movs	r0, #48	@ 0x30
 800e7c8:	181b      	adds	r3, r3, r0
 800e7ca:	19d9      	adds	r1, r3, r7
 800e7cc:	2334      	movs	r3, #52	@ 0x34
 800e7ce:	181b      	adds	r3, r3, r0
 800e7d0:	19d8      	adds	r0, r3, r7
 800e7d2:	2380      	movs	r3, #128	@ 0x80
 800e7d4:	f000 fc36 	bl	800f044 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800e7d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	da00      	bge.n	800e7e0 <calculateSPLQ31+0x24>
 800e7de:	3301      	adds	r3, #1
 800e7e0:	105b      	asrs	r3, r3, #1
 800e7e2:	001a      	movs	r2, r3
 800e7e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	da00      	bge.n	800e7ec <calculateSPLQ31+0x30>
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	105b      	asrs	r3, r3, #1
 800e7ee:	18d3      	adds	r3, r2, r3
 800e7f0:	2188      	movs	r1, #136	@ 0x88
 800e7f2:	187a      	adds	r2, r7, r1
 800e7f4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800e7f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e7f8:	187b      	adds	r3, r7, r1
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	3304      	adds	r3, #4
 800e800:	2284      	movs	r2, #132	@ 0x84
 800e802:	18b9      	adds	r1, r7, r2
 800e804:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800e806:	18bb      	adds	r3, r7, r2
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4ad1      	ldr	r2, [pc, #836]	@ (800eb50 <calculateSPLQ31+0x394>)
 800e80c:	0019      	movs	r1, r3
 800e80e:	0010      	movs	r0, r2
 800e810:	f000 fc58 	bl	800f0c4 <getPo2factor>
 800e814:	0003      	movs	r3, r0
 800e816:	2280      	movs	r2, #128	@ 0x80
 800e818:	18ba      	adds	r2, r7, r2
 800e81a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	2284      	movs	r2, #132	@ 0x84
 800e820:	2130      	movs	r1, #48	@ 0x30
 800e822:	1852      	adds	r2, r2, r1
 800e824:	19d2      	adds	r2, r2, r7
 800e826:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800e828:	2300      	movs	r3, #0
 800e82a:	2280      	movs	r2, #128	@ 0x80
 800e82c:	1852      	adds	r2, r2, r1
 800e82e:	19d2      	adds	r2, r2, r7
 800e830:	6013      	str	r3, [r2, #0]
 800e832:	e032      	b.n	800e89a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800e834:	4ac5      	ldr	r2, [pc, #788]	@ (800eb4c <calculateSPLQ31+0x390>)
 800e836:	2680      	movs	r6, #128	@ 0x80
 800e838:	2330      	movs	r3, #48	@ 0x30
 800e83a:	18f1      	adds	r1, r6, r3
 800e83c:	19cb      	adds	r3, r1, r7
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	589a      	ldr	r2, [r3, r2]
 800e844:	2188      	movs	r1, #136	@ 0x88
 800e846:	1879      	adds	r1, r7, r1
 800e848:	680b      	ldr	r3, [r1, #0]
 800e84a:	1ad2      	subs	r2, r2, r3
 800e84c:	2180      	movs	r1, #128	@ 0x80
 800e84e:	1879      	adds	r1, r7, r1
 800e850:	680b      	ldr	r3, [r1, #0]
 800e852:	409a      	lsls	r2, r3
 800e854:	0011      	movs	r1, r2
 800e856:	4abf      	ldr	r2, [pc, #764]	@ (800eb54 <calculateSPLQ31+0x398>)
 800e858:	2084      	movs	r0, #132	@ 0x84
 800e85a:	2330      	movs	r3, #48	@ 0x30
 800e85c:	18c3      	adds	r3, r0, r3
 800e85e:	19db      	adds	r3, r3, r7
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800e866:	2230      	movs	r2, #48	@ 0x30
 800e868:	1883      	adds	r3, r0, r2
 800e86a:	19db      	adds	r3, r3, r7
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3301      	adds	r3, #1
 800e870:	49b8      	ldr	r1, [pc, #736]	@ (800eb54 <calculateSPLQ31+0x398>)
 800e872:	009a      	lsls	r2, r3, #2
 800e874:	2300      	movs	r3, #0
 800e876:	5053      	str	r3, [r2, r1]
        count += 2;
 800e878:	2230      	movs	r2, #48	@ 0x30
 800e87a:	1883      	adds	r3, r0, r2
 800e87c:	19db      	adds	r3, r3, r7
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	3302      	adds	r3, #2
 800e882:	0011      	movs	r1, r2
 800e884:	1882      	adds	r2, r0, r2
 800e886:	19d2      	adds	r2, r2, r7
 800e888:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800e88a:	000a      	movs	r2, r1
 800e88c:	18b3      	adds	r3, r6, r2
 800e88e:	19db      	adds	r3, r3, r7
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	3301      	adds	r3, #1
 800e894:	18b2      	adds	r2, r6, r2
 800e896:	19d2      	adds	r2, r2, r7
 800e898:	6013      	str	r3, [r2, #0]
 800e89a:	2380      	movs	r3, #128	@ 0x80
 800e89c:	2630      	movs	r6, #48	@ 0x30
 800e89e:	199b      	adds	r3, r3, r6
 800e8a0:	19db      	adds	r3, r3, r7
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800e8a6:	d9c5      	bls.n	800e834 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800e8a8:	4bab      	ldr	r3, [pc, #684]	@ (800eb58 <calculateSPLQ31+0x39c>)
 800e8aa:	6818      	ldr	r0, [r3, #0]
 800e8ac:	49a9      	ldr	r1, [pc, #676]	@ (800eb54 <calculateSPLQ31+0x398>)
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f011 fd23 	bl	80202fc <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800e8b6:	4aa9      	ldr	r2, [pc, #676]	@ (800eb5c <calculateSPLQ31+0x3a0>)
 800e8b8:	2338      	movs	r3, #56	@ 0x38
 800e8ba:	199b      	adds	r3, r3, r6
 800e8bc:	19d9      	adds	r1, r3, r7
 800e8be:	2334      	movs	r3, #52	@ 0x34
 800e8c0:	199b      	adds	r3, r3, r6
 800e8c2:	19d8      	adds	r0, r3, r7
 800e8c4:	237e      	movs	r3, #126	@ 0x7e
 800e8c6:	f000 fbbd 	bl	800f044 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800e8ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e8cc:	2380      	movs	r3, #128	@ 0x80
 800e8ce:	061b      	lsls	r3, r3, #24
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d101      	bne.n	800e8d8 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800e8d4:	4b9e      	ldr	r3, [pc, #632]	@ (800eb50 <calculateSPLQ31+0x394>)
 800e8d6:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800e8d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e8da:	2380      	movs	r3, #128	@ 0x80
 800e8dc:	061b      	lsls	r3, r3, #24
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d101      	bne.n	800e8e6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800e8e2:	4b9b      	ldr	r3, [pc, #620]	@ (800eb50 <calculateSPLQ31+0x394>)
 800e8e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800e8e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8e8:	17da      	asrs	r2, r3, #31
 800e8ea:	189b      	adds	r3, r3, r2
 800e8ec:	4053      	eors	r3, r2
 800e8ee:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800e8f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8f2:	17da      	asrs	r2, r3, #31
 800e8f4:	189b      	adds	r3, r3, r2
 800e8f6:	4053      	eors	r3, r2
 800e8f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800e8fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e8fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8fe:	429a      	cmp	r2, r3
 800e900:	dd01      	ble.n	800e906 <calculateSPLQ31+0x14a>
    {
        max = min;
 800e902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e904:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800e906:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e908:	3304      	adds	r3, #4
 800e90a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800e90c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e90e:	4a90      	ldr	r2, [pc, #576]	@ (800eb50 <calculateSPLQ31+0x394>)
 800e910:	0019      	movs	r1, r3
 800e912:	0010      	movs	r0, r2
 800e914:	f000 fbd6 	bl	800f0c4 <getPo2factor>
 800e918:	0003      	movs	r3, r0
 800e91a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800e91c:	2302      	movs	r3, #2
 800e91e:	22ac      	movs	r2, #172	@ 0xac
 800e920:	18ba      	adds	r2, r7, r2
 800e922:	6013      	str	r3, [r2, #0]
 800e924:	e012      	b.n	800e94c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800e926:	4a8b      	ldr	r2, [pc, #556]	@ (800eb54 <calculateSPLQ31+0x398>)
 800e928:	20ac      	movs	r0, #172	@ 0xac
 800e92a:	183b      	adds	r3, r7, r0
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	589a      	ldr	r2, [r3, r2]
 800e932:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e934:	409a      	lsls	r2, r3
 800e936:	0011      	movs	r1, r2
 800e938:	4a86      	ldr	r2, [pc, #536]	@ (800eb54 <calculateSPLQ31+0x398>)
 800e93a:	183b      	adds	r3, r7, r0
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800e942:	183b      	adds	r3, r7, r0
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	3301      	adds	r3, #1
 800e948:	183a      	adds	r2, r7, r0
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	23ac      	movs	r3, #172	@ 0xac
 800e94e:	18fb      	adds	r3, r7, r3
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b7f      	cmp	r3, #127	@ 0x7f
 800e954:	d9e7      	bls.n	800e926 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800e956:	4b7d      	ldr	r3, [pc, #500]	@ (800eb4c <calculateSPLQ31+0x390>)
 800e958:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800e95a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800e95c:	4b7d      	ldr	r3, [pc, #500]	@ (800eb54 <calculateSPLQ31+0x398>)
 800e95e:	2240      	movs	r2, #64	@ 0x40
 800e960:	0018      	movs	r0, r3
 800e962:	f012 fa75 	bl	8020e50 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800e966:	2330      	movs	r3, #48	@ 0x30
 800e968:	18fb      	adds	r3, r7, r3
 800e96a:	0018      	movs	r0, r3
 800e96c:	2330      	movs	r3, #48	@ 0x30
 800e96e:	001a      	movs	r2, r3
 800e970:	2100      	movs	r1, #0
 800e972:	f014 f8b3 	bl	8022adc <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800e976:	2200      	movs	r2, #0
 800e978:	2300      	movs	r3, #0
 800e97a:	21a0      	movs	r1, #160	@ 0xa0
 800e97c:	1879      	adds	r1, r7, r1
 800e97e:	600a      	str	r2, [r1, #0]
 800e980:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800e982:	2301      	movs	r3, #1
 800e984:	229c      	movs	r2, #156	@ 0x9c
 800e986:	18ba      	adds	r2, r7, r2
 800e988:	6013      	str	r3, [r2, #0]
 800e98a:	e05b      	b.n	800ea44 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800e98c:	269c      	movs	r6, #156	@ 0x9c
 800e98e:	19bb      	adds	r3, r7, r6
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	009a      	lsls	r2, r3, #2
 800e994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e996:	189b      	adds	r3, r3, r2
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	613b      	str	r3, [r7, #16]
 800e99c:	17db      	asrs	r3, r3, #31
 800e99e:	617b      	str	r3, [r7, #20]
 800e9a0:	4b6f      	ldr	r3, [pc, #444]	@ (800eb60 <calculateSPLQ31+0x3a4>)
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	19bb      	adds	r3, r7, r6
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	18d3      	adds	r3, r2, r3
 800e9ac:	881b      	ldrh	r3, [r3, #0]
 800e9ae:	60bb      	str	r3, [r7, #8]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	60fb      	str	r3, [r7, #12]
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6938      	ldr	r0, [r7, #16]
 800e9ba:	6979      	ldr	r1, [r7, #20]
 800e9bc:	f7f1 fe00 	bl	80005c0 <__aeabi_lmul>
 800e9c0:	0002      	movs	r2, r0
 800e9c2:	000b      	movs	r3, r1
 800e9c4:	0010      	movs	r0, r2
 800e9c6:	0019      	movs	r1, r3
 800e9c8:	23a0      	movs	r3, #160	@ 0xa0
 800e9ca:	18fa      	adds	r2, r7, r3
 800e9cc:	6853      	ldr	r3, [r2, #4]
 800e9ce:	6812      	ldr	r2, [r2, #0]
 800e9d0:	1812      	adds	r2, r2, r0
 800e9d2:	414b      	adcs	r3, r1
 800e9d4:	21a0      	movs	r1, #160	@ 0xa0
 800e9d6:	1879      	adds	r1, r7, r1
 800e9d8:	600a      	str	r2, [r1, #0]
 800e9da:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800e9dc:	4b61      	ldr	r3, [pc, #388]	@ (800eb64 <calculateSPLQ31+0x3a8>)
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	19bb      	adds	r3, r7, r6
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	18d3      	adds	r3, r2, r3
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	2b06      	cmp	r3, #6
 800e9ea:	d025      	beq.n	800ea38 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800e9ec:	4b5d      	ldr	r3, [pc, #372]	@ (800eb64 <calculateSPLQ31+0x3a8>)
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	19bb      	adds	r3, r7, r6
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	18d3      	adds	r3, r2, r3
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	2230      	movs	r2, #48	@ 0x30
 800e9fa:	18ba      	adds	r2, r7, r2
 800e9fc:	00db      	lsls	r3, r3, #3
 800e9fe:	18d3      	adds	r3, r2, r3
 800ea00:	6818      	ldr	r0, [r3, #0]
 800ea02:	6859      	ldr	r1, [r3, #4]
 800ea04:	19bb      	adds	r3, r7, r6
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	009a      	lsls	r2, r3, #2
 800ea0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea0c:	189b      	adds	r3, r3, r2
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	603b      	str	r3, [r7, #0]
 800ea12:	17db      	asrs	r3, r3, #31
 800ea14:	607b      	str	r3, [r7, #4]
 800ea16:	4b53      	ldr	r3, [pc, #332]	@ (800eb64 <calculateSPLQ31+0x3a8>)
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	19be      	adds	r6, r7, r6
 800ea1c:	6833      	ldr	r3, [r6, #0]
 800ea1e:	18d3      	adds	r3, r2, r3
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	001e      	movs	r6, r3
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	1880      	adds	r0, r0, r2
 800ea2a:	4159      	adcs	r1, r3
 800ea2c:	2330      	movs	r3, #48	@ 0x30
 800ea2e:	18fa      	adds	r2, r7, r3
 800ea30:	00f3      	lsls	r3, r6, #3
 800ea32:	18d3      	adds	r3, r2, r3
 800ea34:	6018      	str	r0, [r3, #0]
 800ea36:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800ea38:	229c      	movs	r2, #156	@ 0x9c
 800ea3a:	18bb      	adds	r3, r7, r2
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	18ba      	adds	r2, r7, r2
 800ea42:	6013      	str	r3, [r2, #0]
 800ea44:	239c      	movs	r3, #156	@ 0x9c
 800ea46:	18fb      	adds	r3, r7, r3
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b3f      	cmp	r3, #63	@ 0x3f
 800ea4c:	d99e      	bls.n	800e98c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800ea4e:	2380      	movs	r3, #128	@ 0x80
 800ea50:	18fb      	adds	r3, r7, r3
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	005b      	lsls	r3, r3, #1
 800ea56:	001a      	movs	r2, r3
 800ea58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea5a:	005b      	lsls	r3, r3, #1
 800ea5c:	18d3      	adds	r3, r2, r3
 800ea5e:	3b22      	subs	r3, #34	@ 0x22
 800ea60:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800ea62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ea64:	17da      	asrs	r2, r3, #31
 800ea66:	189b      	adds	r3, r3, r2
 800ea68:	4053      	eors	r3, r2
 800ea6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800ea6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	da62      	bge.n	800eb38 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800ea72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea74:	3b20      	subs	r3, #32
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	db05      	blt.n	800ea86 <calculateSPLQ31+0x2ca>
 800ea7a:	22a0      	movs	r2, #160	@ 0xa0
 800ea7c:	18ba      	adds	r2, r7, r2
 800ea7e:	6812      	ldr	r2, [r2, #0]
 800ea80:	409a      	lsls	r2, r3
 800ea82:	627a      	str	r2, [r7, #36]	@ 0x24
 800ea84:	e010      	b.n	800eaa8 <calculateSPLQ31+0x2ec>
 800ea86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea88:	2220      	movs	r2, #32
 800ea8a:	1ad3      	subs	r3, r2, r3
 800ea8c:	22a0      	movs	r2, #160	@ 0xa0
 800ea8e:	18ba      	adds	r2, r7, r2
 800ea90:	6812      	ldr	r2, [r2, #0]
 800ea92:	40da      	lsrs	r2, r3
 800ea94:	0013      	movs	r3, r2
 800ea96:	22a4      	movs	r2, #164	@ 0xa4
 800ea98:	18ba      	adds	r2, r7, r2
 800ea9a:	6811      	ldr	r1, [r2, #0]
 800ea9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ea9e:	4091      	lsls	r1, r2
 800eaa0:	6279      	str	r1, [r7, #36]	@ 0x24
 800eaa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaa4:	431a      	orrs	r2, r3
 800eaa6:	627a      	str	r2, [r7, #36]	@ 0x24
 800eaa8:	21a0      	movs	r1, #160	@ 0xa0
 800eaaa:	187b      	adds	r3, r7, r1
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eab0:	409a      	lsls	r2, r3
 800eab2:	623a      	str	r2, [r7, #32]
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800eab8:	187a      	adds	r2, r7, r1
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800eabe:	2300      	movs	r3, #0
 800eac0:	2298      	movs	r2, #152	@ 0x98
 800eac2:	18ba      	adds	r2, r7, r2
 800eac4:	6013      	str	r3, [r2, #0]
 800eac6:	e031      	b.n	800eb2c <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800eac8:	2330      	movs	r3, #48	@ 0x30
 800eaca:	18fa      	adds	r2, r7, r3
 800eacc:	2398      	movs	r3, #152	@ 0x98
 800eace:	18fb      	adds	r3, r7, r3
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	00db      	lsls	r3, r3, #3
 800ead4:	18d3      	adds	r3, r2, r3
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eadc:	3920      	subs	r1, #32
 800eade:	2900      	cmp	r1, #0
 800eae0:	db03      	blt.n	800eaea <calculateSPLQ31+0x32e>
 800eae2:	0010      	movs	r0, r2
 800eae4:	4088      	lsls	r0, r1
 800eae6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800eae8:	e00c      	b.n	800eb04 <calculateSPLQ31+0x348>
 800eaea:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eaec:	2020      	movs	r0, #32
 800eaee:	1a41      	subs	r1, r0, r1
 800eaf0:	0010      	movs	r0, r2
 800eaf2:	40c8      	lsrs	r0, r1
 800eaf4:	0001      	movs	r1, r0
 800eaf6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eaf8:	001c      	movs	r4, r3
 800eafa:	4084      	lsls	r4, r0
 800eafc:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800eafe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb00:	4308      	orrs	r0, r1
 800eb02:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800eb04:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eb06:	0013      	movs	r3, r2
 800eb08:	408b      	lsls	r3, r1
 800eb0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb0c:	2330      	movs	r3, #48	@ 0x30
 800eb0e:	18fa      	adds	r2, r7, r3
 800eb10:	2098      	movs	r0, #152	@ 0x98
 800eb12:	183b      	adds	r3, r7, r0
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	00db      	lsls	r3, r3, #3
 800eb18:	18d3      	adds	r3, r2, r3
 800eb1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb1e:	6019      	str	r1, [r3, #0]
 800eb20:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800eb22:	183b      	adds	r3, r7, r0
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3301      	adds	r3, #1
 800eb28:	183a      	adds	r2, r7, r0
 800eb2a:	6013      	str	r3, [r2, #0]
 800eb2c:	2398      	movs	r3, #152	@ 0x98
 800eb2e:	18fb      	adds	r3, r7, r3
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2b05      	cmp	r3, #5
 800eb34:	d9c8      	bls.n	800eac8 <calculateSPLQ31+0x30c>
 800eb36:	e06b      	b.n	800ec10 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800eb38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb3a:	3b20      	subs	r3, #32
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	db13      	blt.n	800eb68 <calculateSPLQ31+0x3ac>
 800eb40:	22a4      	movs	r2, #164	@ 0xa4
 800eb42:	18ba      	adds	r2, r7, r2
 800eb44:	6812      	ldr	r2, [r2, #0]
 800eb46:	40da      	lsrs	r2, r3
 800eb48:	61ba      	str	r2, [r7, #24]
 800eb4a:	e01e      	b.n	800eb8a <calculateSPLQ31+0x3ce>
 800eb4c:	20001780 	.word	0x20001780
 800eb50:	7fffffff 	.word	0x7fffffff
 800eb54:	200019cc 	.word	0x200019cc
 800eb58:	200000c8 	.word	0x200000c8
 800eb5c:	200019d4 	.word	0x200019d4
 800eb60:	200000cc 	.word	0x200000cc
 800eb64:	200000d8 	.word	0x200000d8
 800eb68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb6a:	2220      	movs	r2, #32
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	22a4      	movs	r2, #164	@ 0xa4
 800eb70:	18ba      	adds	r2, r7, r2
 800eb72:	6812      	ldr	r2, [r2, #0]
 800eb74:	409a      	lsls	r2, r3
 800eb76:	0013      	movs	r3, r2
 800eb78:	22a0      	movs	r2, #160	@ 0xa0
 800eb7a:	18ba      	adds	r2, r7, r2
 800eb7c:	6811      	ldr	r1, [r2, #0]
 800eb7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eb80:	40d1      	lsrs	r1, r2
 800eb82:	61b9      	str	r1, [r7, #24]
 800eb84:	69ba      	ldr	r2, [r7, #24]
 800eb86:	431a      	orrs	r2, r3
 800eb88:	61ba      	str	r2, [r7, #24]
 800eb8a:	23a4      	movs	r3, #164	@ 0xa4
 800eb8c:	18fb      	adds	r3, r7, r3
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb92:	40da      	lsrs	r2, r3
 800eb94:	61fa      	str	r2, [r7, #28]
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	21a0      	movs	r1, #160	@ 0xa0
 800eb9c:	1879      	adds	r1, r7, r1
 800eb9e:	600a      	str	r2, [r1, #0]
 800eba0:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800eba2:	2300      	movs	r3, #0
 800eba4:	2294      	movs	r2, #148	@ 0x94
 800eba6:	18ba      	adds	r2, r7, r2
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	e02c      	b.n	800ec06 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ebac:	2330      	movs	r3, #48	@ 0x30
 800ebae:	18fa      	adds	r2, r7, r3
 800ebb0:	2394      	movs	r3, #148	@ 0x94
 800ebb2:	18fb      	adds	r3, r7, r3
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	00db      	lsls	r3, r3, #3
 800ebb8:	18d3      	adds	r3, r2, r3
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ebc0:	3920      	subs	r1, #32
 800ebc2:	2900      	cmp	r1, #0
 800ebc4:	db03      	blt.n	800ebce <calculateSPLQ31+0x412>
 800ebc6:	0018      	movs	r0, r3
 800ebc8:	40c8      	lsrs	r0, r1
 800ebca:	0004      	movs	r4, r0
 800ebcc:	e00a      	b.n	800ebe4 <calculateSPLQ31+0x428>
 800ebce:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ebd0:	2020      	movs	r0, #32
 800ebd2:	1a41      	subs	r1, r0, r1
 800ebd4:	0018      	movs	r0, r3
 800ebd6:	4088      	lsls	r0, r1
 800ebd8:	0001      	movs	r1, r0
 800ebda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ebdc:	0016      	movs	r6, r2
 800ebde:	40c6      	lsrs	r6, r0
 800ebe0:	0034      	movs	r4, r6
 800ebe2:	430c      	orrs	r4, r1
 800ebe4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ebe6:	40cb      	lsrs	r3, r1
 800ebe8:	001d      	movs	r5, r3
 800ebea:	2330      	movs	r3, #48	@ 0x30
 800ebec:	18fa      	adds	r2, r7, r3
 800ebee:	2194      	movs	r1, #148	@ 0x94
 800ebf0:	187b      	adds	r3, r7, r1
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	00db      	lsls	r3, r3, #3
 800ebf6:	18d3      	adds	r3, r2, r3
 800ebf8:	601c      	str	r4, [r3, #0]
 800ebfa:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ebfc:	187b      	adds	r3, r7, r1
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3301      	adds	r3, #1
 800ec02:	187a      	adds	r2, r7, r1
 800ec04:	6013      	str	r3, [r2, #0]
 800ec06:	2394      	movs	r3, #148	@ 0x94
 800ec08:	18fb      	adds	r3, r7, r3
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2b05      	cmp	r3, #5
 800ec0e:	d9cd      	bls.n	800ebac <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ec10:	230f      	movs	r3, #15
 800ec12:	425d      	negs	r5, r3
 800ec14:	2305      	movs	r3, #5
 800ec16:	425e      	negs	r6, r3
 800ec18:	4b4a      	ldr	r3, [pc, #296]	@ (800ed44 <calculateSPLQ31+0x588>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	4b4a      	ldr	r3, [pc, #296]	@ (800ed48 <calculateSPLQ31+0x58c>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	21a0      	movs	r1, #160	@ 0xa0
 800ec26:	1879      	adds	r1, r7, r1
 800ec28:	6808      	ldr	r0, [r1, #0]
 800ec2a:	6849      	ldr	r1, [r1, #4]
 800ec2c:	4c47      	ldr	r4, [pc, #284]	@ (800ed4c <calculateSPLQ31+0x590>)
 800ec2e:	9403      	str	r4, [sp, #12]
 800ec30:	4c47      	ldr	r4, [pc, #284]	@ (800ed50 <calculateSPLQ31+0x594>)
 800ec32:	9402      	str	r4, [sp, #8]
 800ec34:	9301      	str	r3, [sp, #4]
 800ec36:	9200      	str	r2, [sp, #0]
 800ec38:	0033      	movs	r3, r6
 800ec3a:	002a      	movs	r2, r5
 800ec3c:	f000 fa86 	bl	800f14c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ec40:	2300      	movs	r3, #0
 800ec42:	2290      	movs	r2, #144	@ 0x90
 800ec44:	18ba      	adds	r2, r7, r2
 800ec46:	6013      	str	r3, [r2, #0]
 800ec48:	e026      	b.n	800ec98 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800ec4a:	2330      	movs	r3, #48	@ 0x30
 800ec4c:	18fa      	adds	r2, r7, r3
 800ec4e:	2490      	movs	r4, #144	@ 0x90
 800ec50:	193b      	adds	r3, r7, r4
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	18d3      	adds	r3, r2, r3
 800ec58:	6818      	ldr	r0, [r3, #0]
 800ec5a:	6859      	ldr	r1, [r3, #4]
 800ec5c:	230f      	movs	r3, #15
 800ec5e:	425d      	negs	r5, r3
 800ec60:	2305      	movs	r3, #5
 800ec62:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800ec64:	193b      	adds	r3, r7, r4
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	009a      	lsls	r2, r3, #2
 800ec6a:	4b3a      	ldr	r3, [pc, #232]	@ (800ed54 <calculateSPLQ31+0x598>)
 800ec6c:	18d3      	adds	r3, r2, r3
 800ec6e:	193a      	adds	r2, r7, r4
 800ec70:	6812      	ldr	r2, [r2, #0]
 800ec72:	0094      	lsls	r4, r2, #2
 800ec74:	4a38      	ldr	r2, [pc, #224]	@ (800ed58 <calculateSPLQ31+0x59c>)
 800ec76:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800ec78:	9203      	str	r2, [sp, #12]
 800ec7a:	9302      	str	r3, [sp, #8]
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	2300      	movs	r3, #0
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	0033      	movs	r3, r6
 800ec86:	002a      	movs	r2, r5
 800ec88:	f000 fa60 	bl	800f14c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ec8c:	2490      	movs	r4, #144	@ 0x90
 800ec8e:	193b      	adds	r3, r7, r4
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	3301      	adds	r3, #1
 800ec94:	193a      	adds	r2, r7, r4
 800ec96:	6013      	str	r3, [r2, #0]
 800ec98:	2390      	movs	r3, #144	@ 0x90
 800ec9a:	18fb      	adds	r3, r7, r3
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2b05      	cmp	r3, #5
 800eca0:	d9d3      	bls.n	800ec4a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800eca2:	4b2b      	ldr	r3, [pc, #172]	@ (800ed50 <calculateSPLQ31+0x594>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	4b2d      	ldr	r3, [pc, #180]	@ (800ed5c <calculateSPLQ31+0x5a0>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	18d2      	adds	r2, r2, r3
 800ecac:	4b2b      	ldr	r3, [pc, #172]	@ (800ed5c <calculateSPLQ31+0x5a0>)
 800ecae:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800ecb0:	4b26      	ldr	r3, [pc, #152]	@ (800ed4c <calculateSPLQ31+0x590>)
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	4b2a      	ldr	r3, [pc, #168]	@ (800ed60 <calculateSPLQ31+0x5a4>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	18d2      	adds	r2, r2, r3
 800ecba:	4b29      	ldr	r3, [pc, #164]	@ (800ed60 <calculateSPLQ31+0x5a4>)
 800ecbc:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	228c      	movs	r2, #140	@ 0x8c
 800ecc2:	18ba      	adds	r2, r7, r2
 800ecc4:	6013      	str	r3, [r2, #0]
 800ecc6:	e025      	b.n	800ed14 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800ecc8:	4b22      	ldr	r3, [pc, #136]	@ (800ed54 <calculateSPLQ31+0x598>)
 800ecca:	208c      	movs	r0, #140	@ 0x8c
 800eccc:	183a      	adds	r2, r7, r0
 800ecce:	6812      	ldr	r2, [r2, #0]
 800ecd0:	0092      	lsls	r2, r2, #2
 800ecd2:	58d2      	ldr	r2, [r2, r3]
 800ecd4:	4b23      	ldr	r3, [pc, #140]	@ (800ed64 <calculateSPLQ31+0x5a8>)
 800ecd6:	1839      	adds	r1, r7, r0
 800ecd8:	6809      	ldr	r1, [r1, #0]
 800ecda:	0089      	lsls	r1, r1, #2
 800ecdc:	58cb      	ldr	r3, [r1, r3]
 800ecde:	18d1      	adds	r1, r2, r3
 800ece0:	4b20      	ldr	r3, [pc, #128]	@ (800ed64 <calculateSPLQ31+0x5a8>)
 800ece2:	183a      	adds	r2, r7, r0
 800ece4:	6812      	ldr	r2, [r2, #0]
 800ece6:	0092      	lsls	r2, r2, #2
 800ece8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800ecea:	4b1b      	ldr	r3, [pc, #108]	@ (800ed58 <calculateSPLQ31+0x59c>)
 800ecec:	183a      	adds	r2, r7, r0
 800ecee:	6812      	ldr	r2, [r2, #0]
 800ecf0:	0092      	lsls	r2, r2, #2
 800ecf2:	58d2      	ldr	r2, [r2, r3]
 800ecf4:	4b1c      	ldr	r3, [pc, #112]	@ (800ed68 <calculateSPLQ31+0x5ac>)
 800ecf6:	1839      	adds	r1, r7, r0
 800ecf8:	6809      	ldr	r1, [r1, #0]
 800ecfa:	0089      	lsls	r1, r1, #2
 800ecfc:	58cb      	ldr	r3, [r1, r3]
 800ecfe:	18d1      	adds	r1, r2, r3
 800ed00:	4b19      	ldr	r3, [pc, #100]	@ (800ed68 <calculateSPLQ31+0x5ac>)
 800ed02:	183a      	adds	r2, r7, r0
 800ed04:	6812      	ldr	r2, [r2, #0]
 800ed06:	0092      	lsls	r2, r2, #2
 800ed08:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ed0a:	183b      	adds	r3, r7, r0
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	183a      	adds	r2, r7, r0
 800ed12:	6013      	str	r3, [r2, #0]
 800ed14:	238c      	movs	r3, #140	@ 0x8c
 800ed16:	18fb      	adds	r3, r7, r3
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b05      	cmp	r3, #5
 800ed1c:	d9d4      	bls.n	800ecc8 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800ed1e:	4b13      	ldr	r3, [pc, #76]	@ (800ed6c <calculateSPLQ31+0x5b0>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	1c5a      	adds	r2, r3, #1
 800ed24:	4b11      	ldr	r3, [pc, #68]	@ (800ed6c <calculateSPLQ31+0x5b0>)
 800ed26:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800ed28:	4b10      	ldr	r3, [pc, #64]	@ (800ed6c <calculateSPLQ31+0x5b0>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b0f      	cmp	r3, #15
 800ed2e:	d905      	bls.n	800ed3c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800ed30:	4b0f      	ldr	r3, [pc, #60]	@ (800ed70 <calculateSPLQ31+0x5b4>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ed36:	4b0f      	ldr	r3, [pc, #60]	@ (800ed74 <calculateSPLQ31+0x5b8>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	701a      	strb	r2, [r3, #0]
    }
}
 800ed3c:	46c0      	nop			@ (mov r8, r8)
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	b02f      	add	sp, #188	@ 0xbc
 800ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed44:	200000d0 	.word	0x200000d0
 800ed48:	200000d4 	.word	0x200000d4
 800ed4c:	20000f4c 	.word	0x20000f4c
 800ed50:	20000f48 	.word	0x20000f48
 800ed54:	20000f50 	.word	0x20000f50
 800ed58:	20000f68 	.word	0x20000f68
 800ed5c:	20001990 	.word	0x20001990
 800ed60:	20001994 	.word	0x20001994
 800ed64:	20001998 	.word	0x20001998
 800ed68:	200019b0 	.word	0x200019b0
 800ed6c:	200019c8 	.word	0x200019c8
 800ed70:	20000f3d 	.word	0x20000f3d
 800ed74:	20000f3b 	.word	0x20000f3b

0800ed78 <resetSPLstate>:

static void resetSPLstate(void)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800ed7e:	4b11      	ldr	r3, [pc, #68]	@ (800edc4 <resetSPLstate+0x4c>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800ed84:	4b10      	ldr	r3, [pc, #64]	@ (800edc8 <resetSPLstate+0x50>)
 800ed86:	2200      	movs	r2, #0
 800ed88:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800ed8a:	4b10      	ldr	r3, [pc, #64]	@ (800edcc <resetSPLstate+0x54>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ed90:	2300      	movs	r3, #0
 800ed92:	607b      	str	r3, [r7, #4]
 800ed94:	e00c      	b.n	800edb0 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800ed96:	4b0e      	ldr	r3, [pc, #56]	@ (800edd0 <resetSPLstate+0x58>)
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	0092      	lsls	r2, r2, #2
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800eda0:	4b0c      	ldr	r3, [pc, #48]	@ (800edd4 <resetSPLstate+0x5c>)
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	0092      	lsls	r2, r2, #2
 800eda6:	2100      	movs	r1, #0
 800eda8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	3301      	adds	r3, #1
 800edae:	607b      	str	r3, [r7, #4]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b05      	cmp	r3, #5
 800edb4:	d9ef      	bls.n	800ed96 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800edb6:	4b08      	ldr	r3, [pc, #32]	@ (800edd8 <resetSPLstate+0x60>)
 800edb8:	2200      	movs	r2, #0
 800edba:	701a      	strb	r2, [r3, #0]
}
 800edbc:	46c0      	nop			@ (mov r8, r8)
 800edbe:	46bd      	mov	sp, r7
 800edc0:	b002      	add	sp, #8
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	20001990 	.word	0x20001990
 800edc8:	20001994 	.word	0x20001994
 800edcc:	200019c8 	.word	0x200019c8
 800edd0:	20001998 	.word	0x20001998
 800edd4:	200019b0 	.word	0x200019b0
 800edd8:	20000f3d 	.word	0x20000f3d

0800eddc <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800eddc:	b5b0      	push	{r4, r5, r7, lr}
 800edde:	b090      	sub	sp, #64	@ 0x40
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	0019      	movs	r1, r3
 800ede8:	1dfb      	adds	r3, r7, #7
 800edea:	701a      	strb	r2, [r3, #0]
 800edec:	1dbb      	adds	r3, r7, #6
 800edee:	1c0a      	adds	r2, r1, #0
 800edf0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800edf2:	1dfb      	adds	r3, r7, #7
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d005      	beq.n	800ee06 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800edfa:	4b3b      	ldr	r3, [pc, #236]	@ (800eee8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800edfc:	2200      	movs	r2, #0
 800edfe:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800ee00:	4b3a      	ldr	r3, [pc, #232]	@ (800eeec <getFilteredMaxAmplitudeQ31+0x110>)
 800ee02:	2200      	movs	r2, #0
 800ee04:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800ee06:	2300      	movs	r3, #0
 800ee08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800ee0e:	2305      	movs	r3, #5
 800ee10:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800ee12:	2300      	movs	r3, #0
 800ee14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee16:	e040      	b.n	800ee9a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800ee18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	68fa      	ldr	r2, [r7, #12]
 800ee1e:	18d3      	adds	r3, r2, r3
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee24:	409a      	lsls	r2, r3
 800ee26:	0013      	movs	r3, r2
 800ee28:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800ee2a:	4b30      	ldr	r3, [pc, #192]	@ (800eeec <getFilteredMaxAmplitudeQ31+0x110>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	425a      	negs	r2, r3
 800ee30:	4b2e      	ldr	r3, [pc, #184]	@ (800eeec <getFilteredMaxAmplitudeQ31+0x110>)
 800ee32:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800ee34:	2418      	movs	r4, #24
 800ee36:	193a      	adds	r2, r7, r4
 800ee38:	492c      	ldr	r1, [pc, #176]	@ (800eeec <getFilteredMaxAmplitudeQ31+0x110>)
 800ee3a:	231c      	movs	r3, #28
 800ee3c:	18f8      	adds	r0, r7, r3
 800ee3e:	2301      	movs	r3, #1
 800ee40:	f012 f85e 	bl	8020f00 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800ee44:	2514      	movs	r5, #20
 800ee46:	197a      	adds	r2, r7, r5
 800ee48:	1939      	adds	r1, r7, r4
 800ee4a:	4829      	ldr	r0, [pc, #164]	@ (800eef0 <getFilteredMaxAmplitudeQ31+0x114>)
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	f012 f825 	bl	8020e9c <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800ee52:	2410      	movs	r4, #16
 800ee54:	193a      	adds	r2, r7, r4
 800ee56:	4924      	ldr	r1, [pc, #144]	@ (800eee8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ee58:	4826      	ldr	r0, [pc, #152]	@ (800eef4 <getFilteredMaxAmplitudeQ31+0x118>)
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	f012 f81e 	bl	8020e9c <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800ee60:	4a21      	ldr	r2, [pc, #132]	@ (800eee8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ee62:	1939      	adds	r1, r7, r4
 800ee64:	1978      	adds	r0, r7, r5
 800ee66:	2301      	movs	r3, #1
 800ee68:	f012 f84a 	bl	8020f00 <arm_add_q31>

        lastData = fx;
 800ee6c:	69fa      	ldr	r2, [r7, #28]
 800ee6e:	4b1f      	ldr	r3, [pc, #124]	@ (800eeec <getFilteredMaxAmplitudeQ31+0x110>)
 800ee70:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800ee72:	4b1d      	ldr	r3, [pc, #116]	@ (800eee8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	da03      	bge.n	800ee84 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800ee7c:	4b1a      	ldr	r3, [pc, #104]	@ (800eee8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee82:	e007      	b.n	800ee94 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800ee84:	4b18      	ldr	r3, [pc, #96]	@ (800eee8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	dd02      	ble.n	800ee94 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800ee8e:	4b16      	ldr	r3, [pc, #88]	@ (800eee8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800ee94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee96:	3301      	adds	r3, #1
 800ee98:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d3ba      	bcc.n	800ee18 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800eea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea4:	17da      	asrs	r2, r3, #31
 800eea6:	189b      	adds	r3, r3, r2
 800eea8:	4053      	eors	r3, r2
 800eeaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800eeac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eeae:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800eeb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eeb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d200      	bcs.n	800eeba <getFilteredMaxAmplitudeQ31+0xde>
 800eeb8:	0013      	movs	r3, r2
 800eeba:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800eebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec0:	40da      	lsrs	r2, r3
 800eec2:	0013      	movs	r3, r2
 800eec4:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800eec6:	1dbb      	adds	r3, r7, #6
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d007      	beq.n	800eede <getFilteredMaxAmplitudeQ31+0x102>
 800eece:	4b0a      	ldr	r3, [pc, #40]	@ (800eef8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	6a3a      	ldr	r2, [r7, #32]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d902      	bls.n	800eede <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800eed8:	4b07      	ldr	r3, [pc, #28]	@ (800eef8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800eeda:	6a3a      	ldr	r2, [r7, #32]
 800eedc:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800eede:	6a3b      	ldr	r3, [r7, #32]
}
 800eee0:	0018      	movs	r0, r3
 800eee2:	46bd      	mov	sp, r7
 800eee4:	b010      	add	sp, #64	@ 0x40
 800eee6:	bdb0      	pop	{r4, r5, r7, pc}
 800eee8:	20001dcc 	.word	0x20001dcc
 800eeec:	20001dd0 	.word	0x20001dd0
 800eef0:	08028f3c 	.word	0x08028f3c
 800eef4:	08028f40 	.word	0x08028f40
 800eef8:	20000f44 	.word	0x20000f44

0800eefc <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800ef08:	4913      	ldr	r1, [pc, #76]	@ (800ef58 <floatToIntAndFrac2dp+0x5c>)
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f7f2 f848 	bl	8000fa0 <__aeabi_fmul>
 800ef10:	1c03      	adds	r3, r0, #0
 800ef12:	1c18      	adds	r0, r3, #0
 800ef14:	f016 fc4a 	bl	80257ac <roundf>
 800ef18:	1c03      	adds	r3, r0, #0
 800ef1a:	1c18      	adds	r0, r3, #0
 800ef1c:	f7f1 fb7e 	bl	800061c <__aeabi_f2uiz>
 800ef20:	0003      	movs	r3, r0
 800ef22:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2164      	movs	r1, #100	@ 0x64
 800ef28:	0018      	movs	r0, r3
 800ef2a:	f7f1 f93b 	bl	80001a4 <__udivsi3>
 800ef2e:	0003      	movs	r3, r0
 800ef30:	001a      	movs	r2, r3
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	b2da      	uxtb	r2, r3
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2164      	movs	r1, #100	@ 0x64
 800ef42:	434b      	muls	r3, r1
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	1ad3      	subs	r3, r2, r3
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	701a      	strb	r2, [r3, #0]
}
 800ef4e:	46c0      	nop			@ (mov r8, r8)
 800ef50:	46bd      	mov	sp, r7
 800ef52:	b006      	add	sp, #24
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	46c0      	nop			@ (mov r8, r8)
 800ef58:	42c80000 	.word	0x42c80000

0800ef5c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b086      	sub	sp, #24
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ef68:	4914      	ldr	r1, [pc, #80]	@ (800efbc <floatToIntAndFrac1dp+0x60>)
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f7f2 f818 	bl	8000fa0 <__aeabi_fmul>
 800ef70:	1c03      	adds	r3, r0, #0
 800ef72:	1c18      	adds	r0, r3, #0
 800ef74:	f016 fc1a 	bl	80257ac <roundf>
 800ef78:	1c03      	adds	r3, r0, #0
 800ef7a:	1c18      	adds	r0, r3, #0
 800ef7c:	f7f1 fb4e 	bl	800061c <__aeabi_f2uiz>
 800ef80:	0003      	movs	r3, r0
 800ef82:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	210a      	movs	r1, #10
 800ef88:	0018      	movs	r0, r3
 800ef8a:	f7f1 f90b 	bl	80001a4 <__udivsi3>
 800ef8e:	0003      	movs	r3, r0
 800ef90:	001a      	movs	r2, r3
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	1c19      	adds	r1, r3, #0
 800efa2:	0089      	lsls	r1, r1, #2
 800efa4:	18cb      	adds	r3, r1, r3
 800efa6:	18db      	adds	r3, r3, r3
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	b2da      	uxtb	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	701a      	strb	r2, [r3, #0]
}
 800efb2:	46c0      	nop			@ (mov r8, r8)
 800efb4:	46bd      	mov	sp, r7
 800efb6:	b006      	add	sp, #24
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	46c0      	nop			@ (mov r8, r8)
 800efbc:	41200000 	.word	0x41200000

0800efc0 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800efc0:	b590      	push	{r4, r7, lr}
 800efc2:	b087      	sub	sp, #28
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
 800efcc:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7f2 fafe 	bl	80015d0 <__aeabi_i2f>
 800efd4:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800efd6:	6838      	ldr	r0, [r7, #0]
 800efd8:	f7f2 fafa 	bl	80015d0 <__aeabi_i2f>
 800efdc:	1c03      	adds	r3, r0, #0
 800efde:	4918      	ldr	r1, [pc, #96]	@ (800f040 <sumToIntAverage+0x80>)
 800efe0:	1c18      	adds	r0, r3, #0
 800efe2:	f7f1 fdf7 	bl	8000bd4 <__aeabi_fdiv>
 800efe6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800efe8:	1c19      	adds	r1, r3, #0
 800efea:	1c20      	adds	r0, r4, #0
 800efec:	f7f1 fc68 	bl	80008c0 <__aeabi_fadd>
 800eff0:	1c03      	adds	r3, r0, #0
 800eff2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800eff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eff6:	f7f2 fb37 	bl	8001668 <__aeabi_ui2f>
 800effa:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800effc:	1c19      	adds	r1, r3, #0
 800effe:	1c20      	adds	r0, r4, #0
 800f000:	f7f1 fde8 	bl	8000bd4 <__aeabi_fdiv>
 800f004:	1c03      	adds	r3, r0, #0
 800f006:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800f008:	2300      	movs	r3, #0
 800f00a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	2310      	movs	r3, #16
 800f010:	18f9      	adds	r1, r7, r3
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	1c18      	adds	r0, r3, #0
 800f016:	f7ff ffa1 	bl	800ef5c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	2bff      	cmp	r3, #255	@ 0xff
 800f01e:	d906      	bls.n	800f02e <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	22ff      	movs	r2, #255	@ 0xff
 800f024:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	2209      	movs	r2, #9
 800f02a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800f02c:	e003      	b.n	800f036 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	b2da      	uxtb	r2, r3
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	701a      	strb	r2, [r3, #0]
}
 800f036:	46c0      	nop			@ (mov r8, r8)
 800f038:	46bd      	mov	sp, r7
 800f03a:	b007      	add	sp, #28
 800f03c:	bd90      	pop	{r4, r7, pc}
 800f03e:	46c0      	nop			@ (mov r8, r8)
 800f040:	41200000 	.word	0x41200000

0800f044 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2280      	movs	r2, #128	@ 0x80
 800f056:	0612      	lsls	r2, r2, #24
 800f058:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	4a18      	ldr	r2, [pc, #96]	@ (800f0c0 <findMinMax+0x7c>)
 800f05e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800f060:	2300      	movs	r3, #0
 800f062:	617b      	str	r3, [r7, #20]
 800f064:	e022      	b.n	800f0ac <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	18d3      	adds	r3, r2, r3
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	429a      	cmp	r2, r3
 800f076:	da06      	bge.n	800f086 <findMinMax+0x42>
        {
            min[0] = array[i];
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	18d3      	adds	r3, r2, r3
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	009b      	lsls	r3, r3, #2
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	18d3      	adds	r3, r2, r3
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	429a      	cmp	r2, r3
 800f096:	dd06      	ble.n	800f0a6 <findMinMax+0x62>
        {
            max[0] = array[i];
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	18d3      	adds	r3, r2, r3
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	617b      	str	r3, [r7, #20]
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d3d8      	bcc.n	800f066 <findMinMax+0x22>
        }
    }
}
 800f0b4:	46c0      	nop			@ (mov r8, r8)
 800f0b6:	46c0      	nop			@ (mov r8, r8)
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	b006      	add	sp, #24
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	46c0      	nop			@ (mov r8, r8)
 800f0c0:	7fffffff 	.word	0x7fffffff

0800f0c4 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d302      	bcc.n	800f0e0 <getPo2factor+0x1c>
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d107      	bne.n	800f0f0 <getPo2factor+0x2c>
    {
        return 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e00d      	b.n	800f100 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	085b      	lsrs	r3, r3, #1
 800f0e8:	607b      	str	r3, [r7, #4]
        bitShift++;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d2f5      	bcs.n	800f0e4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
}
 800f100:	0018      	movs	r0, r3
 800f102:	46bd      	mov	sp, r7
 800f104:	b004      	add	sp, #16
 800f106:	bd80      	pop	{r7, pc}

0800f108 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b086      	sub	sp, #24
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f7f2 faa6 	bl	8001668 <__aeabi_ui2f>
 800f11c:	1c03      	adds	r3, r0, #0
 800f11e:	1c19      	adds	r1, r3, #0
 800f120:	68b8      	ldr	r0, [r7, #8]
 800f122:	f7f1 ff3d 	bl	8000fa0 <__aeabi_fmul>
 800f126:	1c03      	adds	r3, r0, #0
 800f128:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800f12e:	683a      	ldr	r2, [r7, #0]
 800f130:	2310      	movs	r3, #16
 800f132:	18f9      	adds	r1, r7, r3
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	1c18      	adds	r0, r3, #0
 800f138:	f7ff fee0 	bl	800eefc <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	b29a      	uxth	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	801a      	strh	r2, [r3, #0]
}
 800f144:	46c0      	nop			@ (mov r8, r8)
 800f146:	46bd      	mov	sp, r7
 800f148:	b006      	add	sp, #24
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	60b8      	str	r0, [r7, #8]
 800f154:	60f9      	str	r1, [r7, #12]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800f15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15c:	6a3a      	ldr	r2, [r7, #32]
 800f15e:	68b8      	ldr	r0, [r7, #8]
 800f160:	68f9      	ldr	r1, [r7, #12]
 800f162:	f7fa f8d3 	bl	800930c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	18d2      	adds	r2, r2, r3
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	18d2      	adds	r2, r2, r3
 800f172:	6a3b      	ldr	r3, [r7, #32]
 800f174:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800f176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	18d2      	adds	r2, r2, r3
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	18d2      	adds	r2, r2, r3
 800f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f184:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800f186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f188:	6a3b      	ldr	r3, [r7, #32]
 800f18a:	0011      	movs	r1, r2
 800f18c:	0018      	movs	r0, r3
 800f18e:	f7fa f94d 	bl	800942c <correctIntFracNumber>
}
 800f192:	46c0      	nop			@ (mov r8, r8)
 800f194:	46bd      	mov	sp, r7
 800f196:	b004      	add	sp, #16
 800f198:	bd80      	pop	{r7, pc}

0800f19a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b086      	sub	sp, #24
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	60f8      	str	r0, [r7, #12]
 800f1a2:	60b9      	str	r1, [r7, #8]
 800f1a4:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	613b      	str	r3, [r7, #16]
 800f1ae:	e019      	b.n	800f1e4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	005b      	lsls	r3, r3, #1
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	18d3      	adds	r3, r2, r3
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800f1bc:	693a      	ldr	r2, [r7, #16]
 800f1be:	3201      	adds	r2, #1
 800f1c0:	0052      	lsls	r2, r2, #1
 800f1c2:	68f9      	ldr	r1, [r7, #12]
 800f1c4:	188a      	adds	r2, r1, r2
 800f1c6:	8812      	ldrh	r2, [r2, #0]
 800f1c8:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f1ca:	0019      	movs	r1, r3
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800f1d4:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f1d6:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	3304      	adds	r3, #4
 800f1e2:	613b      	str	r3, [r7, #16]
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d3e1      	bcc.n	800f1b0 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800f1ec:	46c0      	nop			@ (mov r8, r8)
 800f1ee:	46c0      	nop			@ (mov r8, r8)
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	b006      	add	sp, #24
 800f1f4:	bd80      	pop	{r7, pc}
	...

0800f1f8 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
  init = false;
 800f1fc:	4b02      	ldr	r3, [pc, #8]	@ (800f208 <InitDone+0x10>)
 800f1fe:	2200      	movs	r2, #0
 800f200:	701a      	strb	r2, [r3, #0]
}
 800f202:	46c0      	nop			@ (mov r8, r8)
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	200000dc 	.word	0x200000dc

0800f20c <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800f212:	f7f7 fe4b 	bl	8006eac <ReadBatteryVoltage>
 800f216:	1c02      	adds	r2, r0, #0
 800f218:	4b25      	ldr	r3, [pc, #148]	@ (800f2b0 <batteryChargeCheck+0xa4>)
 800f21a:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800f21c:	4b24      	ldr	r3, [pc, #144]	@ (800f2b0 <batteryChargeCheck+0xa4>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4924      	ldr	r1, [pc, #144]	@ (800f2b4 <batteryChargeCheck+0xa8>)
 800f222:	1c18      	adds	r0, r3, #0
 800f224:	f7f1 f984 	bl	8000530 <__aeabi_fcmplt>
 800f228:	1e03      	subs	r3, r0, #0
 800f22a:	d002      	beq.n	800f232 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800f22c:	1dfb      	adds	r3, r7, #7
 800f22e:	2200      	movs	r2, #0
 800f230:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800f232:	4b1f      	ldr	r3, [pc, #124]	@ (800f2b0 <batteryChargeCheck+0xa4>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	491f      	ldr	r1, [pc, #124]	@ (800f2b4 <batteryChargeCheck+0xa8>)
 800f238:	1c18      	adds	r0, r3, #0
 800f23a:	f7f1 f997 	bl	800056c <__aeabi_fcmpge>
 800f23e:	1e03      	subs	r3, r0, #0
 800f240:	d00d      	beq.n	800f25e <batteryChargeCheck+0x52>
 800f242:	4b1b      	ldr	r3, [pc, #108]	@ (800f2b0 <batteryChargeCheck+0xa4>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	1c18      	adds	r0, r3, #0
 800f248:	f7f4 f90c 	bl	8003464 <__aeabi_f2d>
 800f24c:	4a1a      	ldr	r2, [pc, #104]	@ (800f2b8 <batteryChargeCheck+0xac>)
 800f24e:	4b1b      	ldr	r3, [pc, #108]	@ (800f2bc <batteryChargeCheck+0xb0>)
 800f250:	f7f1 f934 	bl	80004bc <__aeabi_dcmplt>
 800f254:	1e03      	subs	r3, r0, #0
 800f256:	d002      	beq.n	800f25e <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800f258:	1dfb      	adds	r3, r7, #7
 800f25a:	2201      	movs	r2, #1
 800f25c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800f25e:	4b14      	ldr	r3, [pc, #80]	@ (800f2b0 <batteryChargeCheck+0xa4>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	1c18      	adds	r0, r3, #0
 800f264:	f7f4 f8fe 	bl	8003464 <__aeabi_f2d>
 800f268:	4a13      	ldr	r2, [pc, #76]	@ (800f2b8 <batteryChargeCheck+0xac>)
 800f26a:	4b14      	ldr	r3, [pc, #80]	@ (800f2bc <batteryChargeCheck+0xb0>)
 800f26c:	f7f1 f944 	bl	80004f8 <__aeabi_dcmpge>
 800f270:	1e03      	subs	r3, r0, #0
 800f272:	d00b      	beq.n	800f28c <batteryChargeCheck+0x80>
 800f274:	4b0e      	ldr	r3, [pc, #56]	@ (800f2b0 <batteryChargeCheck+0xa4>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2181      	movs	r1, #129	@ 0x81
 800f27a:	05c9      	lsls	r1, r1, #23
 800f27c:	1c18      	adds	r0, r3, #0
 800f27e:	f7f1 f957 	bl	8000530 <__aeabi_fcmplt>
 800f282:	1e03      	subs	r3, r0, #0
 800f284:	d002      	beq.n	800f28c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800f286:	1dfb      	adds	r3, r7, #7
 800f288:	2202      	movs	r2, #2
 800f28a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800f28c:	4b08      	ldr	r3, [pc, #32]	@ (800f2b0 <batteryChargeCheck+0xa4>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2181      	movs	r1, #129	@ 0x81
 800f292:	05c9      	lsls	r1, r1, #23
 800f294:	1c18      	adds	r0, r3, #0
 800f296:	f7f1 f969 	bl	800056c <__aeabi_fcmpge>
 800f29a:	1e03      	subs	r3, r0, #0
 800f29c:	d002      	beq.n	800f2a4 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800f29e:	1dfb      	adds	r3, r7, #7
 800f2a0:	2203      	movs	r2, #3
 800f2a2:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800f2a4:	1dfb      	adds	r3, r7, #7
 800f2a6:	781b      	ldrb	r3, [r3, #0]
}
 800f2a8:	0018      	movs	r0, r3
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	b002      	add	sp, #8
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	20001de4 	.word	0x20001de4
 800f2b4:	40600000 	.word	0x40600000
 800f2b8:	9999999a 	.word	0x9999999a
 800f2bc:	400d9999 	.word	0x400d9999

0800f2c0 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800f2c0:	b5b0      	push	{r4, r5, r7, lr}
 800f2c2:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800f2c4:	f7f7 fe54 	bl	8006f70 <ReadSolarVoltage>
 800f2c8:	0003      	movs	r3, r0
 800f2ca:	001a      	movs	r2, r3
 800f2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800f338 <Calculate_LED_ON+0x78>)
 800f2ce:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800f2d0:	4b19      	ldr	r3, [pc, #100]	@ (800f338 <Calculate_LED_ON+0x78>)
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	4a19      	ldr	r2, [pc, #100]	@ (800f33c <Calculate_LED_ON+0x7c>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d802      	bhi.n	800f2e0 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800f2da:	4b17      	ldr	r3, [pc, #92]	@ (800f338 <Calculate_LED_ON+0x78>)
 800f2dc:	4a18      	ldr	r2, [pc, #96]	@ (800f340 <Calculate_LED_ON+0x80>)
 800f2de:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800f2e0:	4b15      	ldr	r3, [pc, #84]	@ (800f338 <Calculate_LED_ON+0x78>)
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	4a17      	ldr	r2, [pc, #92]	@ (800f344 <Calculate_LED_ON+0x84>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d902      	bls.n	800f2f0 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800f2ea:	4b13      	ldr	r3, [pc, #76]	@ (800f338 <Calculate_LED_ON+0x78>)
 800f2ec:	4a15      	ldr	r2, [pc, #84]	@ (800f344 <Calculate_LED_ON+0x84>)
 800f2ee:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800f2f0:	4b11      	ldr	r3, [pc, #68]	@ (800f338 <Calculate_LED_ON+0x78>)
 800f2f2:	881b      	ldrh	r3, [r3, #0]
 800f2f4:	0018      	movs	r0, r3
 800f2f6:	f7f4 f863 	bl	80033c0 <__aeabi_i2d>
 800f2fa:	0004      	movs	r4, r0
 800f2fc:	000d      	movs	r5, r1
 800f2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f338 <Calculate_LED_ON+0x78>)
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	001a      	movs	r2, r3
 800f304:	4b10      	ldr	r3, [pc, #64]	@ (800f348 <Calculate_LED_ON+0x88>)
 800f306:	1a9b      	subs	r3, r3, r2
 800f308:	0018      	movs	r0, r3
 800f30a:	f7f4 f859 	bl	80033c0 <__aeabi_i2d>
 800f30e:	2200      	movs	r2, #0
 800f310:	4b0e      	ldr	r3, [pc, #56]	@ (800f34c <Calculate_LED_ON+0x8c>)
 800f312:	f7f3 f993 	bl	800263c <__aeabi_dmul>
 800f316:	0002      	movs	r2, r0
 800f318:	000b      	movs	r3, r1
 800f31a:	0020      	movs	r0, r4
 800f31c:	0029      	movs	r1, r5
 800f31e:	f7f2 f9e5 	bl	80016ec <__aeabi_dadd>
 800f322:	0002      	movs	r2, r0
 800f324:	000b      	movs	r3, r1
 800f326:	0010      	movs	r0, r2
 800f328:	0019      	movs	r1, r3
 800f32a:	f7f1 f98f 	bl	800064c <__aeabi_d2uiz>
 800f32e:	0003      	movs	r3, r0
 800f330:	b29b      	uxth	r3, r3
}
 800f332:	0018      	movs	r0, r3
 800f334:	46bd      	mov	sp, r7
 800f336:	bdb0      	pop	{r4, r5, r7, pc}
 800f338:	20001de8 	.word	0x20001de8
 800f33c:	00000b53 	.word	0x00000b53
 800f340:	00000b54 	.word	0x00000b54
 800f344:	0000125c 	.word	0x0000125c
 800f348:	00000dee 	.word	0x00000dee
 800f34c:	3ff80000 	.word	0x3ff80000

0800f350 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800f350:	b590      	push	{r4, r7, lr}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	0004      	movs	r4, r0
 800f358:	0008      	movs	r0, r1
 800f35a:	0011      	movs	r1, r2
 800f35c:	1dbb      	adds	r3, r7, #6
 800f35e:	1c22      	adds	r2, r4, #0
 800f360:	801a      	strh	r2, [r3, #0]
 800f362:	1d3b      	adds	r3, r7, #4
 800f364:	1c02      	adds	r2, r0, #0
 800f366:	801a      	strh	r2, [r3, #0]
 800f368:	1cbb      	adds	r3, r7, #2
 800f36a:	1c0a      	adds	r2, r1, #0
 800f36c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800f36e:	4b0f      	ldr	r3, [pc, #60]	@ (800f3ac <SetStatusLED+0x5c>)
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d107      	bne.n	800f386 <SetStatusLED+0x36>
 800f376:	4b0e      	ldr	r3, [pc, #56]	@ (800f3b0 <SetStatusLED+0x60>)
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d103      	bne.n	800f386 <SetStatusLED+0x36>
 800f37e:	4b0d      	ldr	r3, [pc, #52]	@ (800f3b4 <SetStatusLED+0x64>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00e      	beq.n	800f3a4 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800f386:	2380      	movs	r3, #128	@ 0x80
 800f388:	05db      	lsls	r3, r3, #23
 800f38a:	1dba      	adds	r2, r7, #6
 800f38c:	8812      	ldrh	r2, [r2, #0]
 800f38e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800f390:	2380      	movs	r3, #128	@ 0x80
 800f392:	05db      	lsls	r3, r3, #23
 800f394:	1d3a      	adds	r2, r7, #4
 800f396:	8812      	ldrh	r2, [r2, #0]
 800f398:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800f39a:	2380      	movs	r3, #128	@ 0x80
 800f39c:	05db      	lsls	r3, r3, #23
 800f39e:	1cba      	adds	r2, r7, #2
 800f3a0:	8812      	ldrh	r2, [r2, #0]
 800f3a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f3a4:	46c0      	nop			@ (mov r8, r8)
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	b003      	add	sp, #12
 800f3aa:	bd90      	pop	{r4, r7, pc}
 800f3ac:	20001dd5 	.word	0x20001dd5
 800f3b0:	200000dc 	.word	0x200000dc
 800f3b4:	20001dd6 	.word	0x20001dd6

0800f3b8 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800f3b8:	b590      	push	{r4, r7, lr}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	0004      	movs	r4, r0
 800f3c0:	0008      	movs	r0, r1
 800f3c2:	0011      	movs	r1, r2
 800f3c4:	1dfb      	adds	r3, r7, #7
 800f3c6:	1c22      	adds	r2, r4, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	1dbb      	adds	r3, r7, #6
 800f3cc:	1c02      	adds	r2, r0, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
 800f3d0:	1d7b      	adds	r3, r7, #5
 800f3d2:	1c0a      	adds	r2, r1, #0
 800f3d4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800f3d6:	4b19      	ldr	r3, [pc, #100]	@ (800f43c <SetDBLED+0x84>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d107      	bne.n	800f3ee <SetDBLED+0x36>
 800f3de:	4b18      	ldr	r3, [pc, #96]	@ (800f440 <SetDBLED+0x88>)
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d103      	bne.n	800f3ee <SetDBLED+0x36>
 800f3e6:	4b17      	ldr	r3, [pc, #92]	@ (800f444 <SetDBLED+0x8c>)
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d022      	beq.n	800f434 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800f3ee:	1dfb      	adds	r3, r7, #7
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	4053      	eors	r3, r2
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	001a      	movs	r2, r3
 800f3fa:	4b13      	ldr	r3, [pc, #76]	@ (800f448 <SetDBLED+0x90>)
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	0018      	movs	r0, r3
 800f400:	f003 f8eb 	bl	80125da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800f404:	1dbb      	adds	r3, r7, #6
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	2201      	movs	r2, #1
 800f40a:	4053      	eors	r3, r2
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	001a      	movs	r2, r3
 800f410:	2380      	movs	r3, #128	@ 0x80
 800f412:	005b      	lsls	r3, r3, #1
 800f414:	480c      	ldr	r0, [pc, #48]	@ (800f448 <SetDBLED+0x90>)
 800f416:	0019      	movs	r1, r3
 800f418:	f003 f8df 	bl	80125da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800f41c:	1d7b      	adds	r3, r7, #5
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	2201      	movs	r2, #1
 800f422:	4053      	eors	r3, r2
 800f424:	b2db      	uxtb	r3, r3
 800f426:	001a      	movs	r2, r3
 800f428:	2380      	movs	r3, #128	@ 0x80
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	4806      	ldr	r0, [pc, #24]	@ (800f448 <SetDBLED+0x90>)
 800f42e:	0019      	movs	r1, r3
 800f430:	f003 f8d3 	bl	80125da <HAL_GPIO_WritePin>
  }
}
 800f434:	46c0      	nop			@ (mov r8, r8)
 800f436:	46bd      	mov	sp, r7
 800f438:	b003      	add	sp, #12
 800f43a:	bd90      	pop	{r4, r7, pc}
 800f43c:	20001dd5 	.word	0x20001dd5
 800f440:	200000dc 	.word	0x200000dc
 800f444:	20001dd6 	.word	0x20001dd6
 800f448:	50000400 	.word	0x50000400

0800f44c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800f44c:	b590      	push	{r4, r7, lr}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	0004      	movs	r4, r0
 800f454:	0008      	movs	r0, r1
 800f456:	0011      	movs	r1, r2
 800f458:	1dbb      	adds	r3, r7, #6
 800f45a:	1c22      	adds	r2, r4, #0
 800f45c:	801a      	strh	r2, [r3, #0]
 800f45e:	1d3b      	adds	r3, r7, #4
 800f460:	1c02      	adds	r2, r0, #0
 800f462:	801a      	strh	r2, [r3, #0]
 800f464:	1cbb      	adds	r3, r7, #2
 800f466:	1c0a      	adds	r2, r1, #0
 800f468:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800f46a:	4b0e      	ldr	r3, [pc, #56]	@ (800f4a4 <SetVocLED+0x58>)
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d107      	bne.n	800f482 <SetVocLED+0x36>
 800f472:	4b0d      	ldr	r3, [pc, #52]	@ (800f4a8 <SetVocLED+0x5c>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d103      	bne.n	800f482 <SetVocLED+0x36>
 800f47a:	4b0c      	ldr	r3, [pc, #48]	@ (800f4ac <SetVocLED+0x60>)
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00b      	beq.n	800f49a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800f482:	4b0b      	ldr	r3, [pc, #44]	@ (800f4b0 <SetVocLED+0x64>)
 800f484:	1dba      	adds	r2, r7, #6
 800f486:	8812      	ldrh	r2, [r2, #0]
 800f488:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800f48a:	4b09      	ldr	r3, [pc, #36]	@ (800f4b0 <SetVocLED+0x64>)
 800f48c:	1d3a      	adds	r2, r7, #4
 800f48e:	8812      	ldrh	r2, [r2, #0]
 800f490:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800f492:	4b07      	ldr	r3, [pc, #28]	@ (800f4b0 <SetVocLED+0x64>)
 800f494:	1cba      	adds	r2, r7, #2
 800f496:	8812      	ldrh	r2, [r2, #0]
 800f498:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f49a:	46c0      	nop			@ (mov r8, r8)
 800f49c:	46bd      	mov	sp, r7
 800f49e:	b003      	add	sp, #12
 800f4a0:	bd90      	pop	{r4, r7, pc}
 800f4a2:	46c0      	nop			@ (mov r8, r8)
 800f4a4:	20001dd5 	.word	0x20001dd5
 800f4a8:	200000dc 	.word	0x200000dc
 800f4ac:	20001dd6 	.word	0x20001dd6
 800f4b0:	40000400 	.word	0x40000400

0800f4b4 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f4b8:	4b08      	ldr	r3, [pc, #32]	@ (800f4dc <SetMeasurementIndicator+0x28>)
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d103      	bne.n	800f4c8 <SetMeasurementIndicator+0x14>
 800f4c0:	4b07      	ldr	r3, [pc, #28]	@ (800f4e0 <SetMeasurementIndicator+0x2c>)
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d006      	beq.n	800f4d6 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800f4c8:	f7ff fefa 	bl	800f2c0 <Calculate_LED_ON>
 800f4cc:	0003      	movs	r3, r0
 800f4ce:	001a      	movs	r2, r3
 800f4d0:	2380      	movs	r3, #128	@ 0x80
 800f4d2:	05db      	lsls	r3, r3, #23
 800f4d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f4d6:	46c0      	nop			@ (mov r8, r8)
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	20001dd5 	.word	0x20001dd5
 800f4e0:	20001dd6 	.word	0x20001dd6

0800f4e4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f4e8:	4b07      	ldr	r3, [pc, #28]	@ (800f508 <ResetMeasurementIndicator+0x24>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d103      	bne.n	800f4f8 <ResetMeasurementIndicator+0x14>
 800f4f0:	4b06      	ldr	r3, [pc, #24]	@ (800f50c <ResetMeasurementIndicator+0x28>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d004      	beq.n	800f502 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800f4f8:	2380      	movs	r3, #128	@ 0x80
 800f4fa:	05db      	lsls	r3, r3, #23
 800f4fc:	22fa      	movs	r2, #250	@ 0xfa
 800f4fe:	0112      	lsls	r2, r2, #4
 800f500:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f502:	46c0      	nop			@ (mov r8, r8)
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	20001dd5 	.word	0x20001dd5
 800f50c:	20001dd6 	.word	0x20001dd6

0800f510 <SetMICIndicator>:
void SetMICIndicator(){
 800f510:	b580      	push	{r7, lr}
 800f512:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f514:	4b19      	ldr	r3, [pc, #100]	@ (800f57c <SetMICIndicator+0x6c>)
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d103      	bne.n	800f524 <SetMICIndicator+0x14>
 800f51c:	4b18      	ldr	r3, [pc, #96]	@ (800f580 <SetMICIndicator+0x70>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d007      	beq.n	800f534 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800f524:	f7ff fecc 	bl	800f2c0 <Calculate_LED_ON>
 800f528:	0003      	movs	r3, r0
 800f52a:	001a      	movs	r2, r3
 800f52c:	2380      	movs	r3, #128	@ 0x80
 800f52e:	05db      	lsls	r3, r3, #23
 800f530:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800f532:	e01f      	b.n	800f574 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800f534:	4b13      	ldr	r3, [pc, #76]	@ (800f584 <SetMICIndicator+0x74>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	1c18      	adds	r0, r3, #0
 800f53a:	f7f3 ff93 	bl	8003464 <__aeabi_f2d>
 800f53e:	4a12      	ldr	r2, [pc, #72]	@ (800f588 <SetMICIndicator+0x78>)
 800f540:	4b12      	ldr	r3, [pc, #72]	@ (800f58c <SetMICIndicator+0x7c>)
 800f542:	f7f0 ffcf 	bl	80004e4 <__aeabi_dcmpgt>
 800f546:	1e03      	subs	r3, r0, #0
 800f548:	d00a      	beq.n	800f560 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800f54a:	f7ff feb9 	bl	800f2c0 <Calculate_LED_ON>
 800f54e:	0003      	movs	r3, r0
 800f550:	001a      	movs	r2, r3
 800f552:	2380      	movs	r3, #128	@ 0x80
 800f554:	05db      	lsls	r3, r3, #23
 800f556:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800f558:	4b0d      	ldr	r3, [pc, #52]	@ (800f590 <SetMICIndicator+0x80>)
 800f55a:	2202      	movs	r2, #2
 800f55c:	701a      	strb	r2, [r3, #0]
}
 800f55e:	e009      	b.n	800f574 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800f560:	f7ff feae 	bl	800f2c0 <Calculate_LED_ON>
 800f564:	0003      	movs	r3, r0
 800f566:	001a      	movs	r2, r3
 800f568:	2380      	movs	r3, #128	@ 0x80
 800f56a:	05db      	lsls	r3, r3, #23
 800f56c:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800f56e:	4b08      	ldr	r3, [pc, #32]	@ (800f590 <SetMICIndicator+0x80>)
 800f570:	2201      	movs	r2, #1
 800f572:	701a      	strb	r2, [r3, #0]
}
 800f574:	46c0      	nop			@ (mov r8, r8)
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	46c0      	nop			@ (mov r8, r8)
 800f57c:	20001dd5 	.word	0x20001dd5
 800f580:	20001dd6 	.word	0x20001dd6
 800f584:	20001de4 	.word	0x20001de4
 800f588:	9999999a 	.word	0x9999999a
 800f58c:	400d9999 	.word	0x400d9999
 800f590:	20001dd8 	.word	0x20001dd8

0800f594 <ResetMICIndicator>:
void ResetMICIndicator(){
 800f594:	b580      	push	{r7, lr}
 800f596:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f598:	4b0f      	ldr	r3, [pc, #60]	@ (800f5d8 <ResetMICIndicator+0x44>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d103      	bne.n	800f5a8 <ResetMICIndicator+0x14>
 800f5a0:	4b0e      	ldr	r3, [pc, #56]	@ (800f5dc <ResetMICIndicator+0x48>)
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d005      	beq.n	800f5b4 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800f5a8:	2380      	movs	r3, #128	@ 0x80
 800f5aa:	05db      	lsls	r3, r3, #23
 800f5ac:	22fa      	movs	r2, #250	@ 0xfa
 800f5ae:	0112      	lsls	r2, r2, #4
 800f5b0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800f5b2:	e00e      	b.n	800f5d2 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800f5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f5e0 <ResetMICIndicator+0x4c>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	2b02      	cmp	r3, #2
 800f5ba:	d105      	bne.n	800f5c8 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800f5bc:	2380      	movs	r3, #128	@ 0x80
 800f5be:	05db      	lsls	r3, r3, #23
 800f5c0:	22fa      	movs	r2, #250	@ 0xfa
 800f5c2:	0112      	lsls	r2, r2, #4
 800f5c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800f5c6:	e004      	b.n	800f5d2 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800f5c8:	2380      	movs	r3, #128	@ 0x80
 800f5ca:	05db      	lsls	r3, r3, #23
 800f5cc:	22fa      	movs	r2, #250	@ 0xfa
 800f5ce:	0112      	lsls	r2, r2, #4
 800f5d0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800f5d2:	46c0      	nop			@ (mov r8, r8)
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	20001dd5 	.word	0x20001dd5
 800f5dc:	20001dd6 	.word	0x20001dd6
 800f5e0:	20001dd8 	.word	0x20001dd8

0800f5e4 <SetESPIndicator>:
void SetESPIndicator(){
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f5e8:	4b08      	ldr	r3, [pc, #32]	@ (800f60c <SetESPIndicator+0x28>)
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d103      	bne.n	800f5f8 <SetESPIndicator+0x14>
 800f5f0:	4b07      	ldr	r3, [pc, #28]	@ (800f610 <SetESPIndicator+0x2c>)
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d006      	beq.n	800f606 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800f5f8:	f7ff fe62 	bl	800f2c0 <Calculate_LED_ON>
 800f5fc:	0003      	movs	r3, r0
 800f5fe:	001a      	movs	r2, r3
 800f600:	2380      	movs	r3, #128	@ 0x80
 800f602:	05db      	lsls	r3, r3, #23
 800f604:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f606:	46c0      	nop			@ (mov r8, r8)
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	20001dd5 	.word	0x20001dd5
 800f610:	20001dd6 	.word	0x20001dd6

0800f614 <ResetESPIndicator>:
void ResetESPIndicator(){
 800f614:	b580      	push	{r7, lr}
 800f616:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f618:	4b07      	ldr	r3, [pc, #28]	@ (800f638 <ResetESPIndicator+0x24>)
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d103      	bne.n	800f628 <ResetESPIndicator+0x14>
 800f620:	4b06      	ldr	r3, [pc, #24]	@ (800f63c <ResetESPIndicator+0x28>)
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d004      	beq.n	800f632 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800f628:	2380      	movs	r3, #128	@ 0x80
 800f62a:	05db      	lsls	r3, r3, #23
 800f62c:	22fa      	movs	r2, #250	@ 0xfa
 800f62e:	0112      	lsls	r2, r2, #4
 800f630:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f632:	46c0      	nop			@ (mov r8, r8)
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	20001dd5 	.word	0x20001dd5
 800f63c:	20001dd6 	.word	0x20001dd6

0800f640 <SetPMIndicator>:

void SetPMIndicator() {
 800f640:	b580      	push	{r7, lr}
 800f642:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f644:	4b0f      	ldr	r3, [pc, #60]	@ (800f684 <SetPMIndicator+0x44>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d103      	bne.n	800f654 <SetPMIndicator+0x14>
 800f64c:	4b0e      	ldr	r3, [pc, #56]	@ (800f688 <SetPMIndicator+0x48>)
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d014      	beq.n	800f67e <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800f654:	f7ff fe34 	bl	800f2c0 <Calculate_LED_ON>
 800f658:	0003      	movs	r3, r0
 800f65a:	001a      	movs	r2, r3
 800f65c:	2380      	movs	r3, #128	@ 0x80
 800f65e:	05db      	lsls	r3, r3, #23
 800f660:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800f662:	f7ff fe2d 	bl	800f2c0 <Calculate_LED_ON>
 800f666:	0003      	movs	r3, r0
 800f668:	001a      	movs	r2, r3
 800f66a:	2380      	movs	r3, #128	@ 0x80
 800f66c:	05db      	lsls	r3, r3, #23
 800f66e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800f670:	f7ff fe26 	bl	800f2c0 <Calculate_LED_ON>
 800f674:	0003      	movs	r3, r0
 800f676:	001a      	movs	r2, r3
 800f678:	2380      	movs	r3, #128	@ 0x80
 800f67a:	05db      	lsls	r3, r3, #23
 800f67c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f67e:	46c0      	nop			@ (mov r8, r8)
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	20001dd5 	.word	0x20001dd5
 800f688:	20001dd6 	.word	0x20001dd6

0800f68c <ResetPMIndicator>:

void ResetPMIndicator() {
 800f68c:	b580      	push	{r7, lr}
 800f68e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f690:	4b0c      	ldr	r3, [pc, #48]	@ (800f6c4 <ResetPMIndicator+0x38>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d103      	bne.n	800f6a0 <ResetPMIndicator+0x14>
 800f698:	4b0b      	ldr	r3, [pc, #44]	@ (800f6c8 <ResetPMIndicator+0x3c>)
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00e      	beq.n	800f6be <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800f6a0:	2380      	movs	r3, #128	@ 0x80
 800f6a2:	05db      	lsls	r3, r3, #23
 800f6a4:	22fa      	movs	r2, #250	@ 0xfa
 800f6a6:	0112      	lsls	r2, r2, #4
 800f6a8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800f6aa:	2380      	movs	r3, #128	@ 0x80
 800f6ac:	05db      	lsls	r3, r3, #23
 800f6ae:	22fa      	movs	r2, #250	@ 0xfa
 800f6b0:	0112      	lsls	r2, r2, #4
 800f6b2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800f6b4:	2380      	movs	r3, #128	@ 0x80
 800f6b6:	05db      	lsls	r3, r3, #23
 800f6b8:	22fa      	movs	r2, #250	@ 0xfa
 800f6ba:	0112      	lsls	r2, r2, #4
 800f6bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f6be:	46c0      	nop			@ (mov r8, r8)
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	20001dd5 	.word	0x20001dd5
 800f6c8:	20001dd6 	.word	0x20001dd6

0800f6cc <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800f6d0:	23fa      	movs	r3, #250	@ 0xfa
 800f6d2:	011a      	lsls	r2, r3, #4
 800f6d4:	23fa      	movs	r3, #250	@ 0xfa
 800f6d6:	0119      	lsls	r1, r3, #4
 800f6d8:	23fa      	movs	r3, #250	@ 0xfa
 800f6da:	011b      	lsls	r3, r3, #4
 800f6dc:	0018      	movs	r0, r3
 800f6de:	f7ff fe37 	bl	800f350 <SetStatusLED>
  SetDBLED(false,false,false);
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	f7ff fe66 	bl	800f3b8 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800f6ec:	23fa      	movs	r3, #250	@ 0xfa
 800f6ee:	011a      	lsls	r2, r3, #4
 800f6f0:	23fa      	movs	r3, #250	@ 0xfa
 800f6f2:	0119      	lsls	r1, r3, #4
 800f6f4:	23fa      	movs	r3, #250	@ 0xfa
 800f6f6:	011b      	lsls	r3, r3, #4
 800f6f8:	0018      	movs	r0, r3
 800f6fa:	f7ff fea7 	bl	800f44c <SetVocLED>
return;
 800f6fe:	46c0      	nop			@ (mov r8, r8)
}
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <SetAllREDLED>:

void SetAllREDLED() {
 800f704:	b580      	push	{r7, lr}
 800f706:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 800f708:	2380      	movs	r3, #128	@ 0x80
 800f70a:	05db      	lsls	r3, r3, #23
 800f70c:	4a19      	ldr	r2, [pc, #100]	@ (800f774 <SetAllREDLED+0x70>)
 800f70e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 800f710:	2380      	movs	r3, #128	@ 0x80
 800f712:	05db      	lsls	r3, r3, #23
 800f714:	22fa      	movs	r2, #250	@ 0xfa
 800f716:	0112      	lsls	r2, r2, #4
 800f718:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 800f71a:	2380      	movs	r3, #128	@ 0x80
 800f71c:	05db      	lsls	r3, r3, #23
 800f71e:	22fa      	movs	r2, #250	@ 0xfa
 800f720:	0112      	lsls	r2, r2, #4
 800f722:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 800f724:	4b14      	ldr	r3, [pc, #80]	@ (800f778 <SetAllREDLED+0x74>)
 800f726:	4a13      	ldr	r2, [pc, #76]	@ (800f774 <SetAllREDLED+0x70>)
 800f728:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 800f72a:	4b13      	ldr	r3, [pc, #76]	@ (800f778 <SetAllREDLED+0x74>)
 800f72c:	22fa      	movs	r2, #250	@ 0xfa
 800f72e:	0112      	lsls	r2, r2, #4
 800f730:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 800f732:	4b11      	ldr	r3, [pc, #68]	@ (800f778 <SetAllREDLED+0x74>)
 800f734:	22fa      	movs	r2, #250	@ 0xfa
 800f736:	0112      	lsls	r2, r2, #4
 800f738:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 800f73a:	4b10      	ldr	r3, [pc, #64]	@ (800f77c <SetAllREDLED+0x78>)
 800f73c:	2200      	movs	r2, #0
 800f73e:	2101      	movs	r1, #1
 800f740:	0018      	movs	r0, r3
 800f742:	f002 ff4a 	bl	80125da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 800f746:	2380      	movs	r3, #128	@ 0x80
 800f748:	005b      	lsls	r3, r3, #1
 800f74a:	480c      	ldr	r0, [pc, #48]	@ (800f77c <SetAllREDLED+0x78>)
 800f74c:	2201      	movs	r2, #1
 800f74e:	0019      	movs	r1, r3
 800f750:	f002 ff43 	bl	80125da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 800f754:	2380      	movs	r3, #128	@ 0x80
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4808      	ldr	r0, [pc, #32]	@ (800f77c <SetAllREDLED+0x78>)
 800f75a:	2201      	movs	r2, #1
 800f75c:	0019      	movs	r1, r3
 800f75e:	f002 ff3c 	bl	80125da <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800f762:	23fa      	movs	r3, #250	@ 0xfa
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	0018      	movs	r0, r3
 800f768:	f001 fcb0 	bl	80110cc <HAL_Delay>
}
 800f76c:	46c0      	nop			@ (mov r8, r8)
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	46c0      	nop			@ (mov r8, r8)
 800f774:	00000bb8 	.word	0x00000bb8
 800f778:	40000400 	.word	0x40000400
 800f77c:	50000400 	.word	0x50000400

0800f780 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800f780:	b5b0      	push	{r4, r5, r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	0002      	movs	r2, r0
 800f788:	1dbb      	adds	r3, r7, #6
 800f78a:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800f78c:	1dbb      	adds	r3, r7, #6
 800f78e:	881b      	ldrh	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d05a      	beq.n	800f84a <SetVOCindicator+0xca>
 800f794:	1dbb      	adds	r3, r7, #6
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	2b64      	cmp	r3, #100	@ 0x64
 800f79a:	d856      	bhi.n	800f84a <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800f79c:	1dbb      	adds	r3, r7, #6
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	0018      	movs	r0, r3
 800f7a2:	f7f3 fe0d 	bl	80033c0 <__aeabi_i2d>
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	4b5f      	ldr	r3, [pc, #380]	@ (800f928 <SetVOCindicator+0x1a8>)
 800f7aa:	f7f2 fb03 	bl	8001db4 <__aeabi_ddiv>
 800f7ae:	0002      	movs	r2, r0
 800f7b0:	000b      	movs	r3, r1
 800f7b2:	2000      	movs	r0, #0
 800f7b4:	495d      	ldr	r1, [pc, #372]	@ (800f92c <SetVOCindicator+0x1ac>)
 800f7b6:	f7f3 fa09 	bl	8002bcc <__aeabi_dsub>
 800f7ba:	0002      	movs	r2, r0
 800f7bc:	000b      	movs	r3, r1
 800f7be:	0014      	movs	r4, r2
 800f7c0:	001d      	movs	r5, r3
 800f7c2:	4b5b      	ldr	r3, [pc, #364]	@ (800f930 <SetVOCindicator+0x1b0>)
 800f7c4:	881b      	ldrh	r3, [r3, #0]
 800f7c6:	0018      	movs	r0, r3
 800f7c8:	f7f3 fdfa 	bl	80033c0 <__aeabi_i2d>
 800f7cc:	0002      	movs	r2, r0
 800f7ce:	000b      	movs	r3, r1
 800f7d0:	0020      	movs	r0, r4
 800f7d2:	0029      	movs	r1, r5
 800f7d4:	f7f2 ff32 	bl	800263c <__aeabi_dmul>
 800f7d8:	0002      	movs	r2, r0
 800f7da:	000b      	movs	r3, r1
 800f7dc:	0010      	movs	r0, r2
 800f7de:	0019      	movs	r1, r3
 800f7e0:	f7f0 ff34 	bl	800064c <__aeabi_d2uiz>
 800f7e4:	0003      	movs	r3, r0
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	4b52      	ldr	r3, [pc, #328]	@ (800f934 <SetVOCindicator+0x1b4>)
 800f7ea:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800f7ec:	1dbb      	adds	r3, r7, #6
 800f7ee:	881b      	ldrh	r3, [r3, #0]
 800f7f0:	0018      	movs	r0, r3
 800f7f2:	f7f3 fde5 	bl	80033c0 <__aeabi_i2d>
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	4b4b      	ldr	r3, [pc, #300]	@ (800f928 <SetVOCindicator+0x1a8>)
 800f7fa:	f7f2 fadb 	bl	8001db4 <__aeabi_ddiv>
 800f7fe:	0002      	movs	r2, r0
 800f800:	000b      	movs	r3, r1
 800f802:	0014      	movs	r4, r2
 800f804:	001d      	movs	r5, r3
 800f806:	4b4a      	ldr	r3, [pc, #296]	@ (800f930 <SetVOCindicator+0x1b0>)
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	0018      	movs	r0, r3
 800f80c:	f7f3 fdd8 	bl	80033c0 <__aeabi_i2d>
 800f810:	0002      	movs	r2, r0
 800f812:	000b      	movs	r3, r1
 800f814:	0020      	movs	r0, r4
 800f816:	0029      	movs	r1, r5
 800f818:	f7f2 ff10 	bl	800263c <__aeabi_dmul>
 800f81c:	0002      	movs	r2, r0
 800f81e:	000b      	movs	r3, r1
 800f820:	0010      	movs	r0, r2
 800f822:	0019      	movs	r1, r3
 800f824:	f7f0 ff12 	bl	800064c <__aeabi_d2uiz>
 800f828:	0003      	movs	r3, r0
 800f82a:	b29a      	uxth	r2, r3
 800f82c:	4b42      	ldr	r3, [pc, #264]	@ (800f938 <SetVOCindicator+0x1b8>)
 800f82e:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800f830:	4b3f      	ldr	r3, [pc, #252]	@ (800f930 <SetVOCindicator+0x1b0>)
 800f832:	881a      	ldrh	r2, [r3, #0]
 800f834:	4b41      	ldr	r3, [pc, #260]	@ (800f93c <SetVOCindicator+0x1bc>)
 800f836:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800f838:	4b40      	ldr	r3, [pc, #256]	@ (800f93c <SetVOCindicator+0x1bc>)
 800f83a:	8818      	ldrh	r0, [r3, #0]
 800f83c:	4b3d      	ldr	r3, [pc, #244]	@ (800f934 <SetVOCindicator+0x1b4>)
 800f83e:	8819      	ldrh	r1, [r3, #0]
 800f840:	4b3d      	ldr	r3, [pc, #244]	@ (800f938 <SetVOCindicator+0x1b8>)
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	001a      	movs	r2, r3
 800f846:	f7ff fe01 	bl	800f44c <SetVocLED>
  }
  if(VOCi > 100){
 800f84a:	1dbb      	adds	r3, r7, #6
 800f84c:	881b      	ldrh	r3, [r3, #0]
 800f84e:	2b64      	cmp	r3, #100	@ 0x64
 800f850:	d966      	bls.n	800f920 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800f852:	1dbb      	adds	r3, r7, #6
 800f854:	881b      	ldrh	r3, [r3, #0]
 800f856:	0018      	movs	r0, r3
 800f858:	f7f3 fdb2 	bl	80033c0 <__aeabi_i2d>
 800f85c:	2200      	movs	r2, #0
 800f85e:	4b32      	ldr	r3, [pc, #200]	@ (800f928 <SetVOCindicator+0x1a8>)
 800f860:	f7f3 f9b4 	bl	8002bcc <__aeabi_dsub>
 800f864:	0002      	movs	r2, r0
 800f866:	000b      	movs	r3, r1
 800f868:	0010      	movs	r0, r2
 800f86a:	0019      	movs	r1, r3
 800f86c:	2200      	movs	r2, #0
 800f86e:	4b34      	ldr	r3, [pc, #208]	@ (800f940 <SetVOCindicator+0x1c0>)
 800f870:	f7f2 faa0 	bl	8001db4 <__aeabi_ddiv>
 800f874:	0002      	movs	r2, r0
 800f876:	000b      	movs	r3, r1
 800f878:	0014      	movs	r4, r2
 800f87a:	001d      	movs	r5, r3
 800f87c:	4b2c      	ldr	r3, [pc, #176]	@ (800f930 <SetVOCindicator+0x1b0>)
 800f87e:	881b      	ldrh	r3, [r3, #0]
 800f880:	0018      	movs	r0, r3
 800f882:	f7f3 fd9d 	bl	80033c0 <__aeabi_i2d>
 800f886:	0002      	movs	r2, r0
 800f888:	000b      	movs	r3, r1
 800f88a:	0020      	movs	r0, r4
 800f88c:	0029      	movs	r1, r5
 800f88e:	f7f2 fed5 	bl	800263c <__aeabi_dmul>
 800f892:	0002      	movs	r2, r0
 800f894:	000b      	movs	r3, r1
 800f896:	0010      	movs	r0, r2
 800f898:	0019      	movs	r1, r3
 800f89a:	f7f0 fed7 	bl	800064c <__aeabi_d2uiz>
 800f89e:	0003      	movs	r3, r0
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	4b24      	ldr	r3, [pc, #144]	@ (800f934 <SetVOCindicator+0x1b4>)
 800f8a4:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800f8a6:	1dbb      	adds	r3, r7, #6
 800f8a8:	881b      	ldrh	r3, [r3, #0]
 800f8aa:	0018      	movs	r0, r3
 800f8ac:	f7f3 fd88 	bl	80033c0 <__aeabi_i2d>
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f928 <SetVOCindicator+0x1a8>)
 800f8b4:	f7f3 f98a 	bl	8002bcc <__aeabi_dsub>
 800f8b8:	0002      	movs	r2, r0
 800f8ba:	000b      	movs	r3, r1
 800f8bc:	0010      	movs	r0, r2
 800f8be:	0019      	movs	r1, r3
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	4b1f      	ldr	r3, [pc, #124]	@ (800f940 <SetVOCindicator+0x1c0>)
 800f8c4:	f7f2 fa76 	bl	8001db4 <__aeabi_ddiv>
 800f8c8:	0002      	movs	r2, r0
 800f8ca:	000b      	movs	r3, r1
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	4917      	ldr	r1, [pc, #92]	@ (800f92c <SetVOCindicator+0x1ac>)
 800f8d0:	f7f3 f97c 	bl	8002bcc <__aeabi_dsub>
 800f8d4:	0002      	movs	r2, r0
 800f8d6:	000b      	movs	r3, r1
 800f8d8:	0014      	movs	r4, r2
 800f8da:	001d      	movs	r5, r3
 800f8dc:	4b14      	ldr	r3, [pc, #80]	@ (800f930 <SetVOCindicator+0x1b0>)
 800f8de:	881b      	ldrh	r3, [r3, #0]
 800f8e0:	0018      	movs	r0, r3
 800f8e2:	f7f3 fd6d 	bl	80033c0 <__aeabi_i2d>
 800f8e6:	0002      	movs	r2, r0
 800f8e8:	000b      	movs	r3, r1
 800f8ea:	0020      	movs	r0, r4
 800f8ec:	0029      	movs	r1, r5
 800f8ee:	f7f2 fea5 	bl	800263c <__aeabi_dmul>
 800f8f2:	0002      	movs	r2, r0
 800f8f4:	000b      	movs	r3, r1
 800f8f6:	0010      	movs	r0, r2
 800f8f8:	0019      	movs	r1, r3
 800f8fa:	f7f0 fea7 	bl	800064c <__aeabi_d2uiz>
 800f8fe:	0003      	movs	r3, r0
 800f900:	b29a      	uxth	r2, r3
 800f902:	4b0e      	ldr	r3, [pc, #56]	@ (800f93c <SetVOCindicator+0x1bc>)
 800f904:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800f906:	4b0a      	ldr	r3, [pc, #40]	@ (800f930 <SetVOCindicator+0x1b0>)
 800f908:	881a      	ldrh	r2, [r3, #0]
 800f90a:	4b0b      	ldr	r3, [pc, #44]	@ (800f938 <SetVOCindicator+0x1b8>)
 800f90c:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800f90e:	4b0b      	ldr	r3, [pc, #44]	@ (800f93c <SetVOCindicator+0x1bc>)
 800f910:	8818      	ldrh	r0, [r3, #0]
 800f912:	4b08      	ldr	r3, [pc, #32]	@ (800f934 <SetVOCindicator+0x1b4>)
 800f914:	8819      	ldrh	r1, [r3, #0]
 800f916:	4b08      	ldr	r3, [pc, #32]	@ (800f938 <SetVOCindicator+0x1b8>)
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	001a      	movs	r2, r3
 800f91c:	f7ff fd96 	bl	800f44c <SetVocLED>
  }

}
 800f920:	46c0      	nop			@ (mov r8, r8)
 800f922:	46bd      	mov	sp, r7
 800f924:	b002      	add	sp, #8
 800f926:	bdb0      	pop	{r4, r5, r7, pc}
 800f928:	40590000 	.word	0x40590000
 800f92c:	3ff00000 	.word	0x3ff00000
 800f930:	200000de 	.word	0x200000de
 800f934:	20001dea 	.word	0x20001dea
 800f938:	20001dec 	.word	0x20001dec
 800f93c:	20001dee 	.word	0x20001dee
 800f940:	40790000 	.word	0x40790000

0800f944 <powerCheck>:

Battery_Status powerCheck(){
 800f944:	b590      	push	{r4, r7, lr}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800f94a:	f7f7 fb65 	bl	8007018 <Check_USB_PowerOn>
 800f94e:	0003      	movs	r3, r0
 800f950:	001a      	movs	r2, r3
 800f952:	2301      	movs	r3, #1
 800f954:	4053      	eors	r3, r2
 800f956:	b2db      	uxtb	r3, r3
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d005      	beq.n	800f968 <powerCheck+0x24>
    status = batteryChargeCheck();
 800f95c:	1dfc      	adds	r4, r7, #7
 800f95e:	f7ff fc55 	bl	800f20c <batteryChargeCheck>
 800f962:	0003      	movs	r3, r0
 800f964:	7023      	strb	r3, [r4, #0]
 800f966:	e002      	b.n	800f96e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800f968:	1dfb      	adds	r3, r7, #7
 800f96a:	2204      	movs	r2, #4
 800f96c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800f96e:	1dfb      	adds	r3, r7, #7
 800f970:	781b      	ldrb	r3, [r3, #0]
}
 800f972:	0018      	movs	r0, r3
 800f974:	46bd      	mov	sp, r7
 800f976:	b003      	add	sp, #12
 800f978:	bd90      	pop	{r4, r7, pc}
	...

0800f97c <powerDisplay>:

void powerDisplay(Battery_Status status){
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
 800f982:	0002      	movs	r2, r0
 800f984:	1dfb      	adds	r3, r7, #7
 800f986:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800f988:	1dfb      	adds	r3, r7, #7
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	2b04      	cmp	r3, #4
 800f98e:	d105      	bne.n	800f99c <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800f990:	4a18      	ldr	r2, [pc, #96]	@ (800f9f4 <powerDisplay+0x78>)
 800f992:	4b19      	ldr	r3, [pc, #100]	@ (800f9f8 <powerDisplay+0x7c>)
 800f994:	0019      	movs	r1, r3
 800f996:	2003      	movs	r0, #3
 800f998:	f000 ff42 	bl	8010820 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800f99c:	1dfb      	adds	r3, r7, #7
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b03      	cmp	r3, #3
 800f9a2:	d105      	bne.n	800f9b0 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800f9a4:	4a15      	ldr	r2, [pc, #84]	@ (800f9fc <powerDisplay+0x80>)
 800f9a6:	4b14      	ldr	r3, [pc, #80]	@ (800f9f8 <powerDisplay+0x7c>)
 800f9a8:	0019      	movs	r1, r3
 800f9aa:	2003      	movs	r0, #3
 800f9ac:	f000 ff38 	bl	8010820 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800f9b0:	1dfb      	adds	r3, r7, #7
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d105      	bne.n	800f9c4 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800f9b8:	4a11      	ldr	r2, [pc, #68]	@ (800fa00 <powerDisplay+0x84>)
 800f9ba:	4b0f      	ldr	r3, [pc, #60]	@ (800f9f8 <powerDisplay+0x7c>)
 800f9bc:	0019      	movs	r1, r3
 800f9be:	2003      	movs	r0, #3
 800f9c0:	f000 ff2e 	bl	8010820 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800f9c4:	1dfb      	adds	r3, r7, #7
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d105      	bne.n	800f9d8 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800f9cc:	4a0d      	ldr	r2, [pc, #52]	@ (800fa04 <powerDisplay+0x88>)
 800f9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f9f8 <powerDisplay+0x7c>)
 800f9d0:	0019      	movs	r1, r3
 800f9d2:	2003      	movs	r0, #3
 800f9d4:	f000 ff24 	bl	8010820 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800f9d8:	1dfb      	adds	r3, r7, #7
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d105      	bne.n	800f9ec <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800f9e0:	4a09      	ldr	r2, [pc, #36]	@ (800fa08 <powerDisplay+0x8c>)
 800f9e2:	4b05      	ldr	r3, [pc, #20]	@ (800f9f8 <powerDisplay+0x7c>)
 800f9e4:	0019      	movs	r1, r3
 800f9e6:	2003      	movs	r0, #3
 800f9e8:	f000 ff1a 	bl	8010820 <CreateLine>
  }
}
 800f9ec:	46c0      	nop			@ (mov r8, r8)
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	b002      	add	sp, #8
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	080286f0 	.word	0x080286f0
 800f9f8:	08028714 	.word	0x08028714
 800f9fc:	08028718 	.word	0x08028718
 800fa00:	08028730 	.word	0x08028730
 800fa04:	08028750 	.word	0x08028750
 800fa08:	08028768 	.word	0x08028768

0800fa0c <configCheck>:

void configCheck(){
 800fa0c:	b590      	push	{r4, r7, lr}
 800fa0e:	b083      	sub	sp, #12
 800fa10:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800fa12:	f7f7 fb10 	bl	8007036 <BootButton_Pressed>
 800fa16:	1e03      	subs	r3, r0, #0
 800fa18:	d007      	beq.n	800fa2a <configCheck+0x1e>
 800fa1a:	f7f7 fb1d 	bl	8007058 <UserButton_Pressed>
 800fa1e:	1e03      	subs	r3, r0, #0
 800fa20:	d003      	beq.n	800fa2a <configCheck+0x1e>
    configSet = true;
 800fa22:	4bb2      	ldr	r3, [pc, #712]	@ (800fcec <configCheck+0x2e0>)
 800fa24:	2201      	movs	r2, #1
 800fa26:	701a      	strb	r2, [r3, #0]
 800fa28:	e00a      	b.n	800fa40 <configCheck+0x34>
  }
  else{
    configSet = false;
 800fa2a:	4bb0      	ldr	r3, [pc, #704]	@ (800fcec <configCheck+0x2e0>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800fa30:	f001 fb42 	bl	80110b8 <HAL_GetTick>
 800fa34:	0003      	movs	r3, r0
 800fa36:	22fa      	movs	r2, #250	@ 0xfa
 800fa38:	00d2      	lsls	r2, r2, #3
 800fa3a:	189a      	adds	r2, r3, r2
 800fa3c:	4bac      	ldr	r3, [pc, #688]	@ (800fcf0 <configCheck+0x2e4>)
 800fa3e:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800fa40:	4baa      	ldr	r3, [pc, #680]	@ (800fcec <configCheck+0x2e0>)
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d00d      	beq.n	800fa64 <configCheck+0x58>
 800fa48:	4ba9      	ldr	r3, [pc, #676]	@ (800fcf0 <configCheck+0x2e4>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	0018      	movs	r0, r3
 800fa4e:	f000 fe91 	bl	8010774 <TimestampIsReached>
 800fa52:	1e03      	subs	r3, r0, #0
 800fa54:	d006      	beq.n	800fa64 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800fa56:	f7f3 ff8f 	bl	8003978 <SetConfigMode>
    SetDBLED(true, true, true);
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	2101      	movs	r1, #1
 800fa5e:	2001      	movs	r0, #1
 800fa60:	f7ff fcaa 	bl	800f3b8 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800fa64:	f7f7 fae7 	bl	8007036 <BootButton_Pressed>
 800fa68:	0003      	movs	r3, r0
 800fa6a:	001a      	movs	r2, r3
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	4053      	eors	r3, r2
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d054      	beq.n	800fb20 <configCheck+0x114>
 800fa76:	f7f7 faef 	bl	8007058 <UserButton_Pressed>
 800fa7a:	1e03      	subs	r3, r0, #0
 800fa7c:	d050      	beq.n	800fb20 <configCheck+0x114>
 800fa7e:	4b9d      	ldr	r3, [pc, #628]	@ (800fcf4 <configCheck+0x2e8>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	2201      	movs	r2, #1
 800fa84:	4053      	eors	r3, r2
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d049      	beq.n	800fb20 <configCheck+0x114>
 800fa8c:	f7f3 ff94 	bl	80039b8 <GetReconfigMode>
 800fa90:	0003      	movs	r3, r0
 800fa92:	001a      	movs	r2, r3
 800fa94:	2301      	movs	r3, #1
 800fa96:	4053      	eors	r3, r2
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d040      	beq.n	800fb20 <configCheck+0x114>
    SetLEDsOff();
 800fa9e:	f7ff fe15 	bl	800f6cc <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800faa2:	4a95      	ldr	r2, [pc, #596]	@ (800fcf8 <configCheck+0x2ec>)
 800faa4:	4994      	ldr	r1, [pc, #592]	@ (800fcf8 <configCheck+0x2ec>)
 800faa6:	4b94      	ldr	r3, [pc, #592]	@ (800fcf8 <configCheck+0x2ec>)
 800faa8:	0018      	movs	r0, r3
 800faaa:	f7ff fccf 	bl	800f44c <SetVocLED>
    HAL_Delay(1500);
 800faae:	4b93      	ldr	r3, [pc, #588]	@ (800fcfc <configCheck+0x2f0>)
 800fab0:	0018      	movs	r0, r3
 800fab2:	f001 fb0b 	bl	80110cc <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800fab6:	23fa      	movs	r3, #250	@ 0xfa
 800fab8:	011a      	lsls	r2, r3, #4
 800faba:	23fa      	movs	r3, #250	@ 0xfa
 800fabc:	0119      	lsls	r1, r3, #4
 800fabe:	23fa      	movs	r3, #250	@ 0xfa
 800fac0:	011b      	lsls	r3, r3, #4
 800fac2:	0018      	movs	r0, r3
 800fac4:	f7ff fcc2 	bl	800f44c <SetVocLED>
    userToggle = !userToggle;
 800fac8:	4b8d      	ldr	r3, [pc, #564]	@ (800fd00 <configCheck+0x2f4>)
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	1e5a      	subs	r2, r3, #1
 800face:	4193      	sbcs	r3, r2
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2201      	movs	r2, #1
 800fad4:	4053      	eors	r3, r2
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	1c1a      	adds	r2, r3, #0
 800fada:	2301      	movs	r3, #1
 800fadc:	4013      	ands	r3, r2
 800fade:	b2da      	uxtb	r2, r3
 800fae0:	4b87      	ldr	r3, [pc, #540]	@ (800fd00 <configCheck+0x2f4>)
 800fae2:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800fae4:	4b86      	ldr	r3, [pc, #536]	@ (800fd00 <configCheck+0x2f4>)
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d001      	beq.n	800faf0 <configCheck+0xe4>
      EnabledConnectedDevices();
 800faec:	f7fa ffa4 	bl	800aa38 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800faf0:	4b83      	ldr	r3, [pc, #524]	@ (800fd00 <configCheck+0x2f4>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d001      	beq.n	800fafc <configCheck+0xf0>
 800faf8:	4b82      	ldr	r3, [pc, #520]	@ (800fd04 <configCheck+0x2f8>)
 800fafa:	e000      	b.n	800fafe <configCheck+0xf2>
 800fafc:	4b82      	ldr	r3, [pc, #520]	@ (800fd08 <configCheck+0x2fc>)
 800fafe:	4a83      	ldr	r2, [pc, #524]	@ (800fd0c <configCheck+0x300>)
 800fb00:	4983      	ldr	r1, [pc, #524]	@ (800fd10 <configCheck+0x304>)
 800fb02:	2003      	movs	r0, #3
 800fb04:	f000 fe8c 	bl	8010820 <CreateLine>
    userbuttonHeld = true;
 800fb08:	4b7a      	ldr	r3, [pc, #488]	@ (800fcf4 <configCheck+0x2e8>)
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800fb0e:	f001 fad3 	bl	80110b8 <HAL_GetTick>
 800fb12:	0003      	movs	r3, r0
 800fb14:	22fa      	movs	r2, #250	@ 0xfa
 800fb16:	00d2      	lsls	r2, r2, #3
 800fb18:	189a      	adds	r2, r3, r2
 800fb1a:	4b7e      	ldr	r3, [pc, #504]	@ (800fd14 <configCheck+0x308>)
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	e002      	b.n	800fb26 <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800fb20:	4b74      	ldr	r3, [pc, #464]	@ (800fcf4 <configCheck+0x2e8>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800fb26:	f7f7 fa86 	bl	8007036 <BootButton_Pressed>
 800fb2a:	0003      	movs	r3, r0
 800fb2c:	001a      	movs	r2, r3
 800fb2e:	2301      	movs	r3, #1
 800fb30:	4053      	eors	r3, r2
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d100      	bne.n	800fb3a <configCheck+0x12e>
 800fb38:	e0a4      	b.n	800fc84 <configCheck+0x278>
 800fb3a:	4b6e      	ldr	r3, [pc, #440]	@ (800fcf4 <configCheck+0x2e8>)
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d100      	bne.n	800fb44 <configCheck+0x138>
 800fb42:	e09f      	b.n	800fc84 <configCheck+0x278>
 800fb44:	4b73      	ldr	r3, [pc, #460]	@ (800fd14 <configCheck+0x308>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	0018      	movs	r0, r3
 800fb4a:	f000 fe13 	bl	8010774 <TimestampIsReached>
 800fb4e:	1e03      	subs	r3, r0, #0
 800fb50:	d100      	bne.n	800fb54 <configCheck+0x148>
 800fb52:	e097      	b.n	800fc84 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fb54:	f7fa fc44 	bl	800a3e0 <GetPMSensorPresence>
 800fb58:	1e03      	subs	r3, r0, #0
 800fb5a:	d100      	bne.n	800fb5e <configCheck+0x152>
 800fb5c:	e082      	b.n	800fc64 <configCheck+0x258>
 800fb5e:	4b6e      	ldr	r3, [pc, #440]	@ (800fd18 <configCheck+0x30c>)
 800fb60:	791b      	ldrb	r3, [r3, #4]
 800fb62:	2b34      	cmp	r3, #52	@ 0x34
 800fb64:	d004      	beq.n	800fb70 <configCheck+0x164>
 800fb66:	4b6c      	ldr	r3, [pc, #432]	@ (800fd18 <configCheck+0x30c>)
 800fb68:	791b      	ldrb	r3, [r3, #4]
 800fb6a:	2b35      	cmp	r3, #53	@ 0x35
 800fb6c:	d000      	beq.n	800fb70 <configCheck+0x164>
 800fb6e:	e079      	b.n	800fc64 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800fb70:	4b6a      	ldr	r3, [pc, #424]	@ (800fd1c <configCheck+0x310>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	1e5a      	subs	r2, r3, #1
 800fb76:	4193      	sbcs	r3, r2
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	4053      	eors	r3, r2
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	1c1a      	adds	r2, r3, #0
 800fb82:	2301      	movs	r3, #1
 800fb84:	4013      	ands	r3, r2
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	4b64      	ldr	r3, [pc, #400]	@ (800fd1c <configCheck+0x310>)
 800fb8a:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800fb8c:	4b63      	ldr	r3, [pc, #396]	@ (800fd1c <configCheck+0x310>)
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d005      	beq.n	800fba0 <configCheck+0x194>
 800fb94:	1dbc      	adds	r4, r7, #6
 800fb96:	f7ff fb93 	bl	800f2c0 <Calculate_LED_ON>
 800fb9a:	0003      	movs	r3, r0
 800fb9c:	8023      	strh	r3, [r4, #0]
 800fb9e:	e003      	b.n	800fba8 <configCheck+0x19c>
        else color = 4000;
 800fba0:	1dbb      	adds	r3, r7, #6
 800fba2:	22fa      	movs	r2, #250	@ 0xfa
 800fba4:	0112      	lsls	r2, r2, #4
 800fba6:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800fba8:	4b5c      	ldr	r3, [pc, #368]	@ (800fd1c <configCheck+0x310>)
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d001      	beq.n	800fbb4 <configCheck+0x1a8>
 800fbb0:	4b5b      	ldr	r3, [pc, #364]	@ (800fd20 <configCheck+0x314>)
 800fbb2:	e000      	b.n	800fbb6 <configCheck+0x1aa>
 800fbb4:	4b5b      	ldr	r3, [pc, #364]	@ (800fd24 <configCheck+0x318>)
 800fbb6:	4a5c      	ldr	r2, [pc, #368]	@ (800fd28 <configCheck+0x31c>)
 800fbb8:	495c      	ldr	r1, [pc, #368]	@ (800fd2c <configCheck+0x320>)
 800fbba:	2002      	movs	r0, #2
 800fbbc:	f000 fe30 	bl	8010820 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800fbc0:	1d7b      	adds	r3, r7, #5
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	701a      	strb	r2, [r3, #0]
 800fbc6:	e028      	b.n	800fc1a <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800fbc8:	f7ff fb7a 	bl	800f2c0 <Calculate_LED_ON>
 800fbcc:	0003      	movs	r3, r0
 800fbce:	001a      	movs	r2, r3
 800fbd0:	4b57      	ldr	r3, [pc, #348]	@ (800fd30 <configCheck+0x324>)
 800fbd2:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800fbd4:	4b56      	ldr	r3, [pc, #344]	@ (800fd30 <configCheck+0x324>)
 800fbd6:	1dba      	adds	r2, r7, #6
 800fbd8:	8812      	ldrh	r2, [r2, #0]
 800fbda:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800fbdc:	4b54      	ldr	r3, [pc, #336]	@ (800fd30 <configCheck+0x324>)
 800fbde:	1dba      	adds	r2, r7, #6
 800fbe0:	8812      	ldrh	r2, [r2, #0]
 800fbe2:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800fbe4:	23c8      	movs	r3, #200	@ 0xc8
 800fbe6:	005b      	lsls	r3, r3, #1
 800fbe8:	0018      	movs	r0, r3
 800fbea:	f001 fa6f 	bl	80110cc <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800fbee:	4b50      	ldr	r3, [pc, #320]	@ (800fd30 <configCheck+0x324>)
 800fbf0:	22fa      	movs	r2, #250	@ 0xfa
 800fbf2:	0112      	lsls	r2, r2, #4
 800fbf4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800fbf6:	4b4e      	ldr	r3, [pc, #312]	@ (800fd30 <configCheck+0x324>)
 800fbf8:	22fa      	movs	r2, #250	@ 0xfa
 800fbfa:	0112      	lsls	r2, r2, #4
 800fbfc:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800fbfe:	4b4c      	ldr	r3, [pc, #304]	@ (800fd30 <configCheck+0x324>)
 800fc00:	22fa      	movs	r2, #250	@ 0xfa
 800fc02:	0112      	lsls	r2, r2, #4
 800fc04:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800fc06:	23c8      	movs	r3, #200	@ 0xc8
 800fc08:	005b      	lsls	r3, r3, #1
 800fc0a:	0018      	movs	r0, r3
 800fc0c:	f001 fa5e 	bl	80110cc <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800fc10:	1d7b      	adds	r3, r7, #5
 800fc12:	781a      	ldrb	r2, [r3, #0]
 800fc14:	1d7b      	adds	r3, r7, #5
 800fc16:	3201      	adds	r2, #1
 800fc18:	701a      	strb	r2, [r3, #0]
 800fc1a:	1d7b      	adds	r3, r7, #5
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d9d2      	bls.n	800fbc8 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800fc22:	4b37      	ldr	r3, [pc, #220]	@ (800fd00 <configCheck+0x2f4>)
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	1e5a      	subs	r2, r3, #1
 800fc28:	4193      	sbcs	r3, r2
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	4053      	eors	r3, r2
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	1c1a      	adds	r2, r3, #0
 800fc34:	2301      	movs	r3, #1
 800fc36:	4013      	ands	r3, r2
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	4b31      	ldr	r3, [pc, #196]	@ (800fd00 <configCheck+0x2f4>)
 800fc3c:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800fc3e:	4b30      	ldr	r3, [pc, #192]	@ (800fd00 <configCheck+0x2f4>)
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <configCheck+0x23e>
 800fc46:	4b36      	ldr	r3, [pc, #216]	@ (800fd20 <configCheck+0x314>)
 800fc48:	e000      	b.n	800fc4c <configCheck+0x240>
 800fc4a:	4b36      	ldr	r3, [pc, #216]	@ (800fd24 <configCheck+0x318>)
 800fc4c:	4a39      	ldr	r2, [pc, #228]	@ (800fd34 <configCheck+0x328>)
 800fc4e:	4937      	ldr	r1, [pc, #220]	@ (800fd2c <configCheck+0x320>)
 800fc50:	2002      	movs	r0, #2
 800fc52:	f000 fde5 	bl	8010820 <CreateLine>
      if (usbPluggedIn) {
 800fc56:	4b38      	ldr	r3, [pc, #224]	@ (800fd38 <configCheck+0x32c>)
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d009      	beq.n	800fc72 <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800fc5e:	f7fc f84b 	bl	800bcf8 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fc62:	e006      	b.n	800fc72 <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800fc64:	4a35      	ldr	r2, [pc, #212]	@ (800fd3c <configCheck+0x330>)
 800fc66:	4b31      	ldr	r3, [pc, #196]	@ (800fd2c <configCheck+0x320>)
 800fc68:	0019      	movs	r1, r3
 800fc6a:	2002      	movs	r0, #2
 800fc6c:	f000 fdd8 	bl	8010820 <CreateLine>
 800fc70:	e000      	b.n	800fc74 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fc72:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800fc74:	46c0      	nop			@ (mov r8, r8)
 800fc76:	f7f7 f9ef 	bl	8007058 <UserButton_Pressed>
 800fc7a:	1e03      	subs	r3, r0, #0
 800fc7c:	d1fb      	bne.n	800fc76 <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800fc7e:	4b1d      	ldr	r3, [pc, #116]	@ (800fcf4 <configCheck+0x2e8>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800fc84:	f7f7 f9d7 	bl	8007036 <BootButton_Pressed>
 800fc88:	0003      	movs	r3, r0
 800fc8a:	001a      	movs	r2, r3
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	4053      	eors	r3, r2
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00b      	beq.n	800fcae <configCheck+0x2a2>
 800fc96:	f7f7 f9df 	bl	8007058 <UserButton_Pressed>
 800fc9a:	0003      	movs	r3, r0
 800fc9c:	001a      	movs	r2, r3
 800fc9e:	2301      	movs	r3, #1
 800fca0:	4053      	eors	r3, r2
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d002      	beq.n	800fcae <configCheck+0x2a2>
    userbuttonHeld = false;
 800fca8:	4b12      	ldr	r3, [pc, #72]	@ (800fcf4 <configCheck+0x2e8>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800fcae:	f7f7 f9b3 	bl	8007018 <Check_USB_PowerOn>
 800fcb2:	1e03      	subs	r3, r0, #0
 800fcb4:	d003      	beq.n	800fcbe <configCheck+0x2b2>
    usbPluggedIn = true;
 800fcb6:	4b20      	ldr	r3, [pc, #128]	@ (800fd38 <configCheck+0x32c>)
 800fcb8:	2201      	movs	r2, #1
 800fcba:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800fcbc:	e012      	b.n	800fce4 <configCheck+0x2d8>
    if(!userToggle && !init){
 800fcbe:	4b10      	ldr	r3, [pc, #64]	@ (800fd00 <configCheck+0x2f4>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	4053      	eors	r3, r2
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d008      	beq.n	800fcde <configCheck+0x2d2>
 800fccc:	4b1c      	ldr	r3, [pc, #112]	@ (800fd40 <configCheck+0x334>)
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	4053      	eors	r3, r2
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d001      	beq.n	800fcde <configCheck+0x2d2>
      SetLEDsOff();
 800fcda:	f7ff fcf7 	bl	800f6cc <SetLEDsOff>
    usbPluggedIn = false;
 800fcde:	4b16      	ldr	r3, [pc, #88]	@ (800fd38 <configCheck+0x32c>)
 800fce0:	2200      	movs	r2, #0
 800fce2:	701a      	strb	r2, [r3, #0]
}
 800fce4:	46c0      	nop			@ (mov r8, r8)
 800fce6:	46bd      	mov	sp, r7
 800fce8:	b003      	add	sp, #12
 800fcea:	bd90      	pop	{r4, r7, pc}
 800fcec:	20001dd4 	.word	0x20001dd4
 800fcf0:	20001ddc 	.word	0x20001ddc
 800fcf4:	20001dd7 	.word	0x20001dd7
 800fcf8:	00000bb8 	.word	0x00000bb8
 800fcfc:	000005dc 	.word	0x000005dc
 800fd00:	20001dd6 	.word	0x20001dd6
 800fd04:	0802878c 	.word	0x0802878c
 800fd08:	08028790 	.word	0x08028790
 800fd0c:	08028794 	.word	0x08028794
 800fd10:	08028714 	.word	0x08028714
 800fd14:	20001de0 	.word	0x20001de0
 800fd18:	20000e48 	.word	0x20000e48
 800fd1c:	20000e46 	.word	0x20000e46
 800fd20:	080287b4 	.word	0x080287b4
 800fd24:	080287bc 	.word	0x080287bc
 800fd28:	080287c8 	.word	0x080287c8
 800fd2c:	080287e8 	.word	0x080287e8
 800fd30:	40000400 	.word	0x40000400
 800fd34:	080287ec 	.word	0x080287ec
 800fd38:	20001dd5 	.word	0x20001dd5
 800fd3c:	08028804 	.word	0x08028804
 800fd40:	200000dc 	.word	0x200000dc

0800fd44 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800fd44:	b590      	push	{r4, r7, lr}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800fd4a:	1dfc      	adds	r4, r7, #7
 800fd4c:	f7ff fdfa 	bl	800f944 <powerCheck>
 800fd50:	0003      	movs	r3, r0
 800fd52:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800fd54:	1dfb      	adds	r3, r7, #7
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	0018      	movs	r0, r3
 800fd5a:	f7ff fe0f 	bl	800f97c <powerDisplay>
  return status;
 800fd5e:	1dfb      	adds	r3, r7, #7
 800fd60:	781b      	ldrb	r3, [r3, #0]
}
 800fd62:	0018      	movs	r0, r3
 800fd64:	46bd      	mov	sp, r7
 800fd66:	b003      	add	sp, #12
 800fd68:	bd90      	pop	{r4, r7, pc}
	...

0800fd6c <setuserToggle>:

void setuserToggle(void) {
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800fd70:	f7ff fde8 	bl	800f944 <powerCheck>
 800fd74:	0003      	movs	r3, r0
 800fd76:	2b04      	cmp	r3, #4
 800fd78:	d004      	beq.n	800fd84 <setuserToggle+0x18>
    userToggle = true;
 800fd7a:	4b04      	ldr	r3, [pc, #16]	@ (800fd8c <setuserToggle+0x20>)
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800fd80:	f7fa fe5a 	bl	800aa38 <EnabledConnectedDevices>
  }
}
 800fd84:	46c0      	nop			@ (mov r8, r8)
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	46c0      	nop			@ (mov r8, r8)
 800fd8c:	20001dd6 	.word	0x20001dd6

0800fd90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fd94:	4b07      	ldr	r3, [pc, #28]	@ (800fdb4 <HAL_MspInit+0x24>)
 800fd96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd98:	4b06      	ldr	r3, [pc, #24]	@ (800fdb4 <HAL_MspInit+0x24>)
 800fd9a:	2101      	movs	r1, #1
 800fd9c:	430a      	orrs	r2, r1
 800fd9e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800fda0:	4b04      	ldr	r3, [pc, #16]	@ (800fdb4 <HAL_MspInit+0x24>)
 800fda2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fda4:	4b03      	ldr	r3, [pc, #12]	@ (800fdb4 <HAL_MspInit+0x24>)
 800fda6:	2180      	movs	r1, #128	@ 0x80
 800fda8:	0549      	lsls	r1, r1, #21
 800fdaa:	430a      	orrs	r2, r1
 800fdac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fdae:	46c0      	nop			@ (mov r8, r8)
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	40021000 	.word	0x40021000

0800fdb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800fdbc:	46c0      	nop			@ (mov r8, r8)
 800fdbe:	e7fd      	b.n	800fdbc <NMI_Handler+0x4>

0800fdc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fdc4:	46c0      	nop			@ (mov r8, r8)
 800fdc6:	e7fd      	b.n	800fdc4 <HardFault_Handler+0x4>

0800fdc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800fdcc:	46c0      	nop			@ (mov r8, r8)
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800fdd6:	46c0      	nop			@ (mov r8, r8)
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fde0:	f001 f958 	bl	8011094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800fde4:	46c0      	nop			@ (mov r8, r8)
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
	...

0800fdec <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800fdf0:	4b03      	ldr	r3, [pc, #12]	@ (800fe00 <RTC_IRQHandler+0x14>)
 800fdf2:	0018      	movs	r0, r3
 800fdf4:	f009 f916 	bl	8019024 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800fdf8:	46c0      	nop			@ (mov r8, r8)
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	46c0      	nop			@ (mov r8, r8)
 800fe00:	20000e20 	.word	0x20000e20

0800fe04 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800fe08:	2380      	movs	r3, #128	@ 0x80
 800fe0a:	021b      	lsls	r3, r3, #8
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	f002 fc01 	bl	8012614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800fe12:	46c0      	nop			@ (mov r8, r8)
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800fe1c:	4b05      	ldr	r3, [pc, #20]	@ (800fe34 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800fe1e:	0018      	movs	r0, r3
 800fe20:	f001 ff89 	bl	8011d36 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800fe24:	4b04      	ldr	r3, [pc, #16]	@ (800fe38 <DMA1_Channel2_3_IRQHandler+0x20>)
 800fe26:	0018      	movs	r0, r3
 800fe28:	f001 ff85 	bl	8011d36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800fe2c:	46c0      	nop			@ (mov r8, r8)
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	46c0      	nop			@ (mov r8, r8)
 800fe34:	20000cb8 	.word	0x20000cb8
 800fe38:	20000c70 	.word	0x20000c70

0800fe3c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800fe40:	4b07      	ldr	r3, [pc, #28]	@ (800fe60 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800fe42:	0018      	movs	r0, r3
 800fe44:	f001 ff77 	bl	8011d36 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800fe48:	4b06      	ldr	r3, [pc, #24]	@ (800fe64 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800fe4a:	0018      	movs	r0, r3
 800fe4c:	f001 ff73 	bl	8011d36 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800fe50:	4b05      	ldr	r3, [pc, #20]	@ (800fe68 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800fe52:	0018      	movs	r0, r3
 800fe54:	f001 ff6f 	bl	8011d36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800fe58:	46c0      	nop			@ (mov r8, r8)
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	46c0      	nop			@ (mov r8, r8)
 800fe60:	20000d3c 	.word	0x20000d3c
 800fe64:	200020dc 	.word	0x200020dc
 800fe68:	20002124 	.word	0x20002124

0800fe6c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800fe70:	4b03      	ldr	r3, [pc, #12]	@ (800fe80 <USART4_5_IRQHandler+0x14>)
 800fe72:	0018      	movs	r0, r3
 800fe74:	f009 ffd0 	bl	8019e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800fe78:	46c0      	nop			@ (mov r8, r8)
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	46c0      	nop			@ (mov r8, r8)
 800fe80:	20002024 	.word	0x20002024

0800fe84 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800fe88:	4b09      	ldr	r3, [pc, #36]	@ (800feb0 <I2C1_IRQHandler+0x2c>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	699a      	ldr	r2, [r3, #24]
 800fe8e:	23e0      	movs	r3, #224	@ 0xe0
 800fe90:	00db      	lsls	r3, r3, #3
 800fe92:	4013      	ands	r3, r2
 800fe94:	d004      	beq.n	800fea0 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800fe96:	4b06      	ldr	r3, [pc, #24]	@ (800feb0 <I2C1_IRQHandler+0x2c>)
 800fe98:	0018      	movs	r0, r3
 800fe9a:	f003 fad9 	bl	8013450 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800fe9e:	e003      	b.n	800fea8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800fea0:	4b03      	ldr	r3, [pc, #12]	@ (800feb0 <I2C1_IRQHandler+0x2c>)
 800fea2:	0018      	movs	r0, r3
 800fea4:	f003 faba 	bl	801341c <HAL_I2C_EV_IRQHandler>
}
 800fea8:	46c0      	nop			@ (mov r8, r8)
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	46c0      	nop			@ (mov r8, r8)
 800feb0:	20000bc8 	.word	0x20000bc8

0800feb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800feb8:	4b03      	ldr	r3, [pc, #12]	@ (800fec8 <USART1_IRQHandler+0x14>)
 800feba:	0018      	movs	r0, r3
 800febc:	f009 ffac 	bl	8019e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800fec0:	46c0      	nop			@ (mov r8, r8)
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	46c0      	nop			@ (mov r8, r8)
 800fec8:	20001f6c 	.word	0x20001f6c

0800fecc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800fed0:	4b03      	ldr	r3, [pc, #12]	@ (800fee0 <USB_IRQHandler+0x14>)
 800fed2:	0018      	movs	r0, r3
 800fed4:	f005 fefc 	bl	8015cd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800fed8:	46c0      	nop			@ (mov r8, r8)
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	46c0      	nop			@ (mov r8, r8)
 800fee0:	20002f38 	.word	0x20002f38

0800fee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	af00      	add	r7, sp, #0
  return 1;
 800fee8:	2301      	movs	r3, #1
}
 800feea:	0018      	movs	r0, r3
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <_kill>:

int _kill(int pid, int sig)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800fefa:	f012 fe93 	bl	8022c24 <__errno>
 800fefe:	0003      	movs	r3, r0
 800ff00:	2216      	movs	r2, #22
 800ff02:	601a      	str	r2, [r3, #0]
  return -1;
 800ff04:	2301      	movs	r3, #1
 800ff06:	425b      	negs	r3, r3
}
 800ff08:	0018      	movs	r0, r3
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	b002      	add	sp, #8
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <_exit>:

void _exit (int status)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ff18:	2301      	movs	r3, #1
 800ff1a:	425a      	negs	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	0011      	movs	r1, r2
 800ff20:	0018      	movs	r0, r3
 800ff22:	f7ff ffe5 	bl	800fef0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ff26:	46c0      	nop			@ (mov r8, r8)
 800ff28:	e7fd      	b.n	800ff26 <_exit+0x16>

0800ff2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b086      	sub	sp, #24
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	60f8      	str	r0, [r7, #12]
 800ff32:	60b9      	str	r1, [r7, #8]
 800ff34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ff36:	2300      	movs	r3, #0
 800ff38:	617b      	str	r3, [r7, #20]
 800ff3a:	e00a      	b.n	800ff52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ff3c:	e000      	b.n	800ff40 <_read+0x16>
 800ff3e:	bf00      	nop
 800ff40:	0001      	movs	r1, r0
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	1c5a      	adds	r2, r3, #1
 800ff46:	60ba      	str	r2, [r7, #8]
 800ff48:	b2ca      	uxtb	r2, r1
 800ff4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	617b      	str	r3, [r7, #20]
 800ff52:	697a      	ldr	r2, [r7, #20]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	dbf0      	blt.n	800ff3c <_read+0x12>
  }

  return len;
 800ff5a:	687b      	ldr	r3, [r7, #4]
}
 800ff5c:	0018      	movs	r0, r3
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	b006      	add	sp, #24
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <_close>:
  }
  return len;
}

int _close(int file)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	425b      	negs	r3, r3
}
 800ff70:	0018      	movs	r0, r3
 800ff72:	46bd      	mov	sp, r7
 800ff74:	b002      	add	sp, #8
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	2280      	movs	r2, #128	@ 0x80
 800ff86:	0192      	lsls	r2, r2, #6
 800ff88:	605a      	str	r2, [r3, #4]
  return 0;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	0018      	movs	r0, r3
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	b002      	add	sp, #8
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <_isatty>:

int _isatty(int file)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ff9c:	2301      	movs	r3, #1
}
 800ff9e:	0018      	movs	r0, r3
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	b002      	add	sp, #8
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b084      	sub	sp, #16
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	60f8      	str	r0, [r7, #12]
 800ffae:	60b9      	str	r1, [r7, #8]
 800ffb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	0018      	movs	r0, r3
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	b004      	add	sp, #16
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ffc4:	4a14      	ldr	r2, [pc, #80]	@ (8010018 <_sbrk+0x5c>)
 800ffc6:	4b15      	ldr	r3, [pc, #84]	@ (801001c <_sbrk+0x60>)
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ffd0:	4b13      	ldr	r3, [pc, #76]	@ (8010020 <_sbrk+0x64>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d102      	bne.n	800ffde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ffd8:	4b11      	ldr	r3, [pc, #68]	@ (8010020 <_sbrk+0x64>)
 800ffda:	4a12      	ldr	r2, [pc, #72]	@ (8010024 <_sbrk+0x68>)
 800ffdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ffde:	4b10      	ldr	r3, [pc, #64]	@ (8010020 <_sbrk+0x64>)
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	18d3      	adds	r3, r2, r3
 800ffe6:	693a      	ldr	r2, [r7, #16]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d207      	bcs.n	800fffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ffec:	f012 fe1a 	bl	8022c24 <__errno>
 800fff0:	0003      	movs	r3, r0
 800fff2:	220c      	movs	r2, #12
 800fff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800fff6:	2301      	movs	r3, #1
 800fff8:	425b      	negs	r3, r3
 800fffa:	e009      	b.n	8010010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800fffc:	4b08      	ldr	r3, [pc, #32]	@ (8010020 <_sbrk+0x64>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010002:	4b07      	ldr	r3, [pc, #28]	@ (8010020 <_sbrk+0x64>)
 8010004:	681a      	ldr	r2, [r3, #0]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	18d2      	adds	r2, r2, r3
 801000a:	4b05      	ldr	r3, [pc, #20]	@ (8010020 <_sbrk+0x64>)
 801000c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 801000e:	68fb      	ldr	r3, [r7, #12]
}
 8010010:	0018      	movs	r0, r3
 8010012:	46bd      	mov	sp, r7
 8010014:	b006      	add	sp, #24
 8010016:	bd80      	pop	{r7, pc}
 8010018:	20005000 	.word	0x20005000
 801001c:	00000400 	.word	0x00000400
 8010020:	20001df0 	.word	0x20001df0
 8010024:	20003598 	.word	0x20003598

08010028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801002c:	46c0      	nop			@ (mov r8, r8)
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
	...

08010034 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801003a:	2310      	movs	r3, #16
 801003c:	18fb      	adds	r3, r7, r3
 801003e:	0018      	movs	r0, r3
 8010040:	2308      	movs	r3, #8
 8010042:	001a      	movs	r2, r3
 8010044:	2100      	movs	r1, #0
 8010046:	f012 fd49 	bl	8022adc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801004a:	003b      	movs	r3, r7
 801004c:	0018      	movs	r0, r3
 801004e:	2310      	movs	r3, #16
 8010050:	001a      	movs	r2, r3
 8010052:	2100      	movs	r1, #0
 8010054:	f012 fd42 	bl	8022adc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8010058:	4b2e      	ldr	r3, [pc, #184]	@ (8010114 <MX_TIM2_Init+0xe0>)
 801005a:	2280      	movs	r2, #128	@ 0x80
 801005c:	05d2      	lsls	r2, r2, #23
 801005e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8010060:	4b2c      	ldr	r3, [pc, #176]	@ (8010114 <MX_TIM2_Init+0xe0>)
 8010062:	2200      	movs	r2, #0
 8010064:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010066:	4b2b      	ldr	r3, [pc, #172]	@ (8010114 <MX_TIM2_Init+0xe0>)
 8010068:	2200      	movs	r2, #0
 801006a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 801006c:	4b29      	ldr	r3, [pc, #164]	@ (8010114 <MX_TIM2_Init+0xe0>)
 801006e:	4a2a      	ldr	r2, [pc, #168]	@ (8010118 <MX_TIM2_Init+0xe4>)
 8010070:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010072:	4b28      	ldr	r3, [pc, #160]	@ (8010114 <MX_TIM2_Init+0xe0>)
 8010074:	2200      	movs	r2, #0
 8010076:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010078:	4b26      	ldr	r3, [pc, #152]	@ (8010114 <MX_TIM2_Init+0xe0>)
 801007a:	2200      	movs	r2, #0
 801007c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801007e:	4b25      	ldr	r3, [pc, #148]	@ (8010114 <MX_TIM2_Init+0xe0>)
 8010080:	0018      	movs	r0, r3
 8010082:	f009 f8dd 	bl	8019240 <HAL_TIM_PWM_Init>
 8010086:	1e03      	subs	r3, r0, #0
 8010088:	d001      	beq.n	801008e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 801008a:	f7fa f963 	bl	800a354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801008e:	2110      	movs	r1, #16
 8010090:	187b      	adds	r3, r7, r1
 8010092:	2200      	movs	r2, #0
 8010094:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010096:	187b      	adds	r3, r7, r1
 8010098:	2200      	movs	r2, #0
 801009a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801009c:	187a      	adds	r2, r7, r1
 801009e:	4b1d      	ldr	r3, [pc, #116]	@ (8010114 <MX_TIM2_Init+0xe0>)
 80100a0:	0011      	movs	r1, r2
 80100a2:	0018      	movs	r0, r3
 80100a4:	f009 fbea 	bl	801987c <HAL_TIMEx_MasterConfigSynchronization>
 80100a8:	1e03      	subs	r3, r0, #0
 80100aa:	d001      	beq.n	80100b0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80100ac:	f7fa f952 	bl	800a354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80100b0:	003b      	movs	r3, r7
 80100b2:	2260      	movs	r2, #96	@ 0x60
 80100b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80100b6:	003b      	movs	r3, r7
 80100b8:	2200      	movs	r2, #0
 80100ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80100bc:	003b      	movs	r3, r7
 80100be:	2200      	movs	r2, #0
 80100c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80100c2:	003b      	movs	r3, r7
 80100c4:	2200      	movs	r2, #0
 80100c6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80100c8:	0039      	movs	r1, r7
 80100ca:	4b12      	ldr	r3, [pc, #72]	@ (8010114 <MX_TIM2_Init+0xe0>)
 80100cc:	2200      	movs	r2, #0
 80100ce:	0018      	movs	r0, r3
 80100d0:	f009 f988 	bl	80193e4 <HAL_TIM_PWM_ConfigChannel>
 80100d4:	1e03      	subs	r3, r0, #0
 80100d6:	d001      	beq.n	80100dc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80100d8:	f7fa f93c 	bl	800a354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80100dc:	0039      	movs	r1, r7
 80100de:	4b0d      	ldr	r3, [pc, #52]	@ (8010114 <MX_TIM2_Init+0xe0>)
 80100e0:	2208      	movs	r2, #8
 80100e2:	0018      	movs	r0, r3
 80100e4:	f009 f97e 	bl	80193e4 <HAL_TIM_PWM_ConfigChannel>
 80100e8:	1e03      	subs	r3, r0, #0
 80100ea:	d001      	beq.n	80100f0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80100ec:	f7fa f932 	bl	800a354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80100f0:	0039      	movs	r1, r7
 80100f2:	4b08      	ldr	r3, [pc, #32]	@ (8010114 <MX_TIM2_Init+0xe0>)
 80100f4:	220c      	movs	r2, #12
 80100f6:	0018      	movs	r0, r3
 80100f8:	f009 f974 	bl	80193e4 <HAL_TIM_PWM_ConfigChannel>
 80100fc:	1e03      	subs	r3, r0, #0
 80100fe:	d001      	beq.n	8010104 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8010100:	f7fa f928 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8010104:	4b03      	ldr	r3, [pc, #12]	@ (8010114 <MX_TIM2_Init+0xe0>)
 8010106:	0018      	movs	r0, r3
 8010108:	f000 f8fe 	bl	8010308 <HAL_TIM_MspPostInit>

}
 801010c:	46c0      	nop			@ (mov r8, r8)
 801010e:	46bd      	mov	sp, r7
 8010110:	b006      	add	sp, #24
 8010112:	bd80      	pop	{r7, pc}
 8010114:	20001df4 	.word	0x20001df4
 8010118:	0000ffff 	.word	0x0000ffff

0801011c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010122:	2310      	movs	r3, #16
 8010124:	18fb      	adds	r3, r7, r3
 8010126:	0018      	movs	r0, r3
 8010128:	2308      	movs	r3, #8
 801012a:	001a      	movs	r2, r3
 801012c:	2100      	movs	r1, #0
 801012e:	f012 fcd5 	bl	8022adc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010132:	003b      	movs	r3, r7
 8010134:	0018      	movs	r0, r3
 8010136:	2310      	movs	r3, #16
 8010138:	001a      	movs	r2, r3
 801013a:	2100      	movs	r1, #0
 801013c:	f012 fcce 	bl	8022adc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8010140:	4b32      	ldr	r3, [pc, #200]	@ (801020c <MX_TIM3_Init+0xf0>)
 8010142:	4a33      	ldr	r2, [pc, #204]	@ (8010210 <MX_TIM3_Init+0xf4>)
 8010144:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8010146:	4b31      	ldr	r3, [pc, #196]	@ (801020c <MX_TIM3_Init+0xf0>)
 8010148:	2200      	movs	r2, #0
 801014a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801014c:	4b2f      	ldr	r3, [pc, #188]	@ (801020c <MX_TIM3_Init+0xf0>)
 801014e:	2200      	movs	r2, #0
 8010150:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8010152:	4b2e      	ldr	r3, [pc, #184]	@ (801020c <MX_TIM3_Init+0xf0>)
 8010154:	4a2f      	ldr	r2, [pc, #188]	@ (8010214 <MX_TIM3_Init+0xf8>)
 8010156:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010158:	4b2c      	ldr	r3, [pc, #176]	@ (801020c <MX_TIM3_Init+0xf0>)
 801015a:	2200      	movs	r2, #0
 801015c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801015e:	4b2b      	ldr	r3, [pc, #172]	@ (801020c <MX_TIM3_Init+0xf0>)
 8010160:	2200      	movs	r2, #0
 8010162:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8010164:	4b29      	ldr	r3, [pc, #164]	@ (801020c <MX_TIM3_Init+0xf0>)
 8010166:	0018      	movs	r0, r3
 8010168:	f009 f86a 	bl	8019240 <HAL_TIM_PWM_Init>
 801016c:	1e03      	subs	r3, r0, #0
 801016e:	d001      	beq.n	8010174 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8010170:	f7fa f8f0 	bl	800a354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010174:	2110      	movs	r1, #16
 8010176:	187b      	adds	r3, r7, r1
 8010178:	2200      	movs	r2, #0
 801017a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801017c:	187b      	adds	r3, r7, r1
 801017e:	2200      	movs	r2, #0
 8010180:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8010182:	187a      	adds	r2, r7, r1
 8010184:	4b21      	ldr	r3, [pc, #132]	@ (801020c <MX_TIM3_Init+0xf0>)
 8010186:	0011      	movs	r1, r2
 8010188:	0018      	movs	r0, r3
 801018a:	f009 fb77 	bl	801987c <HAL_TIMEx_MasterConfigSynchronization>
 801018e:	1e03      	subs	r3, r0, #0
 8010190:	d001      	beq.n	8010196 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8010192:	f7fa f8df 	bl	800a354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010196:	003b      	movs	r3, r7
 8010198:	2260      	movs	r2, #96	@ 0x60
 801019a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 801019c:	003b      	movs	r3, r7
 801019e:	2200      	movs	r2, #0
 80101a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80101a2:	003b      	movs	r3, r7
 80101a4:	2200      	movs	r2, #0
 80101a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80101a8:	003b      	movs	r3, r7
 80101aa:	2200      	movs	r2, #0
 80101ac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80101ae:	0039      	movs	r1, r7
 80101b0:	4b16      	ldr	r3, [pc, #88]	@ (801020c <MX_TIM3_Init+0xf0>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	0018      	movs	r0, r3
 80101b6:	f009 f915 	bl	80193e4 <HAL_TIM_PWM_ConfigChannel>
 80101ba:	1e03      	subs	r3, r0, #0
 80101bc:	d001      	beq.n	80101c2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80101be:	f7fa f8c9 	bl	800a354 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80101c2:	4b12      	ldr	r3, [pc, #72]	@ (801020c <MX_TIM3_Init+0xf0>)
 80101c4:	2104      	movs	r1, #4
 80101c6:	0018      	movs	r0, r3
 80101c8:	f009 fbb6 	bl	8019938 <HAL_TIMEx_RemapConfig>
 80101cc:	1e03      	subs	r3, r0, #0
 80101ce:	d001      	beq.n	80101d4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80101d0:	f7fa f8c0 	bl	800a354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80101d4:	0039      	movs	r1, r7
 80101d6:	4b0d      	ldr	r3, [pc, #52]	@ (801020c <MX_TIM3_Init+0xf0>)
 80101d8:	2204      	movs	r2, #4
 80101da:	0018      	movs	r0, r3
 80101dc:	f009 f902 	bl	80193e4 <HAL_TIM_PWM_ConfigChannel>
 80101e0:	1e03      	subs	r3, r0, #0
 80101e2:	d001      	beq.n	80101e8 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80101e4:	f7fa f8b6 	bl	800a354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80101e8:	0039      	movs	r1, r7
 80101ea:	4b08      	ldr	r3, [pc, #32]	@ (801020c <MX_TIM3_Init+0xf0>)
 80101ec:	2208      	movs	r2, #8
 80101ee:	0018      	movs	r0, r3
 80101f0:	f009 f8f8 	bl	80193e4 <HAL_TIM_PWM_ConfigChannel>
 80101f4:	1e03      	subs	r3, r0, #0
 80101f6:	d001      	beq.n	80101fc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80101f8:	f7fa f8ac 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80101fc:	4b03      	ldr	r3, [pc, #12]	@ (801020c <MX_TIM3_Init+0xf0>)
 80101fe:	0018      	movs	r0, r3
 8010200:	f000 f882 	bl	8010308 <HAL_TIM_MspPostInit>

}
 8010204:	46c0      	nop			@ (mov r8, r8)
 8010206:	46bd      	mov	sp, r7
 8010208:	b006      	add	sp, #24
 801020a:	bd80      	pop	{r7, pc}
 801020c:	20001e34 	.word	0x20001e34
 8010210:	40000400 	.word	0x40000400
 8010214:	0000ffff 	.word	0x0000ffff

08010218 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801021e:	003b      	movs	r3, r7
 8010220:	0018      	movs	r0, r3
 8010222:	2308      	movs	r3, #8
 8010224:	001a      	movs	r2, r3
 8010226:	2100      	movs	r1, #0
 8010228:	f012 fc58 	bl	8022adc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801022c:	4b15      	ldr	r3, [pc, #84]	@ (8010284 <MX_TIM6_Init+0x6c>)
 801022e:	4a16      	ldr	r2, [pc, #88]	@ (8010288 <MX_TIM6_Init+0x70>)
 8010230:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8010232:	4b14      	ldr	r3, [pc, #80]	@ (8010284 <MX_TIM6_Init+0x6c>)
 8010234:	220a      	movs	r2, #10
 8010236:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010238:	4b12      	ldr	r3, [pc, #72]	@ (8010284 <MX_TIM6_Init+0x6c>)
 801023a:	2200      	movs	r2, #0
 801023c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801023e:	4b11      	ldr	r3, [pc, #68]	@ (8010284 <MX_TIM6_Init+0x6c>)
 8010240:	4a12      	ldr	r2, [pc, #72]	@ (801028c <MX_TIM6_Init+0x74>)
 8010242:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010244:	4b0f      	ldr	r3, [pc, #60]	@ (8010284 <MX_TIM6_Init+0x6c>)
 8010246:	2200      	movs	r2, #0
 8010248:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801024a:	4b0e      	ldr	r3, [pc, #56]	@ (8010284 <MX_TIM6_Init+0x6c>)
 801024c:	0018      	movs	r0, r3
 801024e:	f008 ff4f 	bl	80190f0 <HAL_TIM_Base_Init>
 8010252:	1e03      	subs	r3, r0, #0
 8010254:	d001      	beq.n	801025a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8010256:	f7fa f87d 	bl	800a354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801025a:	003b      	movs	r3, r7
 801025c:	2200      	movs	r2, #0
 801025e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010260:	003b      	movs	r3, r7
 8010262:	2200      	movs	r2, #0
 8010264:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8010266:	003a      	movs	r2, r7
 8010268:	4b06      	ldr	r3, [pc, #24]	@ (8010284 <MX_TIM6_Init+0x6c>)
 801026a:	0011      	movs	r1, r2
 801026c:	0018      	movs	r0, r3
 801026e:	f009 fb05 	bl	801987c <HAL_TIMEx_MasterConfigSynchronization>
 8010272:	1e03      	subs	r3, r0, #0
 8010274:	d001      	beq.n	801027a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8010276:	f7fa f86d 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801027a:	46c0      	nop			@ (mov r8, r8)
 801027c:	46bd      	mov	sp, r7
 801027e:	b002      	add	sp, #8
 8010280:	bd80      	pop	{r7, pc}
 8010282:	46c0      	nop			@ (mov r8, r8)
 8010284:	20001e74 	.word	0x20001e74
 8010288:	40001000 	.word	0x40001000
 801028c:	0000ffff 	.word	0x0000ffff

08010290 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	2380      	movs	r3, #128	@ 0x80
 801029e:	05db      	lsls	r3, r3, #23
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d106      	bne.n	80102b2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80102a4:	4b0a      	ldr	r3, [pc, #40]	@ (80102d0 <HAL_TIM_PWM_MspInit+0x40>)
 80102a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102a8:	4b09      	ldr	r3, [pc, #36]	@ (80102d0 <HAL_TIM_PWM_MspInit+0x40>)
 80102aa:	2101      	movs	r1, #1
 80102ac:	430a      	orrs	r2, r1
 80102ae:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80102b0:	e00a      	b.n	80102c8 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	4a07      	ldr	r2, [pc, #28]	@ (80102d4 <HAL_TIM_PWM_MspInit+0x44>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d105      	bne.n	80102c8 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80102bc:	4b04      	ldr	r3, [pc, #16]	@ (80102d0 <HAL_TIM_PWM_MspInit+0x40>)
 80102be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102c0:	4b03      	ldr	r3, [pc, #12]	@ (80102d0 <HAL_TIM_PWM_MspInit+0x40>)
 80102c2:	2102      	movs	r1, #2
 80102c4:	430a      	orrs	r2, r1
 80102c6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80102c8:	46c0      	nop			@ (mov r8, r8)
 80102ca:	46bd      	mov	sp, r7
 80102cc:	b002      	add	sp, #8
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	40021000 	.word	0x40021000
 80102d4:	40000400 	.word	0x40000400

080102d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4a06      	ldr	r2, [pc, #24]	@ (8010300 <HAL_TIM_Base_MspInit+0x28>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d105      	bne.n	80102f6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80102ea:	4b06      	ldr	r3, [pc, #24]	@ (8010304 <HAL_TIM_Base_MspInit+0x2c>)
 80102ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102ee:	4b05      	ldr	r3, [pc, #20]	@ (8010304 <HAL_TIM_Base_MspInit+0x2c>)
 80102f0:	2110      	movs	r1, #16
 80102f2:	430a      	orrs	r2, r1
 80102f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80102f6:	46c0      	nop			@ (mov r8, r8)
 80102f8:	46bd      	mov	sp, r7
 80102fa:	b002      	add	sp, #8
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	46c0      	nop			@ (mov r8, r8)
 8010300:	40001000 	.word	0x40001000
 8010304:	40021000 	.word	0x40021000

08010308 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010308:	b590      	push	{r4, r7, lr}
 801030a:	b08b      	sub	sp, #44	@ 0x2c
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010310:	2414      	movs	r4, #20
 8010312:	193b      	adds	r3, r7, r4
 8010314:	0018      	movs	r0, r3
 8010316:	2314      	movs	r3, #20
 8010318:	001a      	movs	r2, r3
 801031a:	2100      	movs	r1, #0
 801031c:	f012 fbde 	bl	8022adc <memset>
  if(timHandle->Instance==TIM2)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	2380      	movs	r3, #128	@ 0x80
 8010326:	05db      	lsls	r3, r3, #23
 8010328:	429a      	cmp	r2, r3
 801032a:	d123      	bne.n	8010374 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801032c:	4b27      	ldr	r3, [pc, #156]	@ (80103cc <HAL_TIM_MspPostInit+0xc4>)
 801032e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010330:	4b26      	ldr	r3, [pc, #152]	@ (80103cc <HAL_TIM_MspPostInit+0xc4>)
 8010332:	2101      	movs	r1, #1
 8010334:	430a      	orrs	r2, r1
 8010336:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010338:	4b24      	ldr	r3, [pc, #144]	@ (80103cc <HAL_TIM_MspPostInit+0xc4>)
 801033a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801033c:	2201      	movs	r2, #1
 801033e:	4013      	ands	r3, r2
 8010340:	613b      	str	r3, [r7, #16]
 8010342:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8010344:	0021      	movs	r1, r4
 8010346:	187b      	adds	r3, r7, r1
 8010348:	220d      	movs	r2, #13
 801034a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801034c:	187b      	adds	r3, r7, r1
 801034e:	2202      	movs	r2, #2
 8010350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010352:	187b      	adds	r3, r7, r1
 8010354:	2200      	movs	r2, #0
 8010356:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010358:	187b      	adds	r3, r7, r1
 801035a:	2200      	movs	r2, #0
 801035c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801035e:	187b      	adds	r3, r7, r1
 8010360:	2202      	movs	r2, #2
 8010362:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010364:	187a      	adds	r2, r7, r1
 8010366:	23a0      	movs	r3, #160	@ 0xa0
 8010368:	05db      	lsls	r3, r3, #23
 801036a:	0011      	movs	r1, r2
 801036c:	0018      	movs	r0, r3
 801036e:	f001 ff99 	bl	80122a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8010372:	e027      	b.n	80103c4 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a15      	ldr	r2, [pc, #84]	@ (80103d0 <HAL_TIM_MspPostInit+0xc8>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d122      	bne.n	80103c4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801037e:	4b13      	ldr	r3, [pc, #76]	@ (80103cc <HAL_TIM_MspPostInit+0xc4>)
 8010380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010382:	4b12      	ldr	r3, [pc, #72]	@ (80103cc <HAL_TIM_MspPostInit+0xc4>)
 8010384:	2104      	movs	r1, #4
 8010386:	430a      	orrs	r2, r1
 8010388:	62da      	str	r2, [r3, #44]	@ 0x2c
 801038a:	4b10      	ldr	r3, [pc, #64]	@ (80103cc <HAL_TIM_MspPostInit+0xc4>)
 801038c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801038e:	2204      	movs	r2, #4
 8010390:	4013      	ands	r3, r2
 8010392:	60fb      	str	r3, [r7, #12]
 8010394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8010396:	2114      	movs	r1, #20
 8010398:	187b      	adds	r3, r7, r1
 801039a:	22e0      	movs	r2, #224	@ 0xe0
 801039c:	0052      	lsls	r2, r2, #1
 801039e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103a0:	187b      	adds	r3, r7, r1
 80103a2:	2202      	movs	r2, #2
 80103a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103a6:	187b      	adds	r3, r7, r1
 80103a8:	2200      	movs	r2, #0
 80103aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103ac:	187b      	adds	r3, r7, r1
 80103ae:	2200      	movs	r2, #0
 80103b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80103b2:	187b      	adds	r3, r7, r1
 80103b4:	2202      	movs	r2, #2
 80103b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80103b8:	187b      	adds	r3, r7, r1
 80103ba:	4a06      	ldr	r2, [pc, #24]	@ (80103d4 <HAL_TIM_MspPostInit+0xcc>)
 80103bc:	0019      	movs	r1, r3
 80103be:	0010      	movs	r0, r2
 80103c0:	f001 ff70 	bl	80122a4 <HAL_GPIO_Init>
}
 80103c4:	46c0      	nop			@ (mov r8, r8)
 80103c6:	46bd      	mov	sp, r7
 80103c8:	b00b      	add	sp, #44	@ 0x2c
 80103ca:	bd90      	pop	{r4, r7, pc}
 80103cc:	40021000 	.word	0x40021000
 80103d0:	40000400 	.word	0x40000400
 80103d4:	50000800 	.word	0x50000800

080103d8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80103dc:	4b17      	ldr	r3, [pc, #92]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 80103de:	4a18      	ldr	r2, [pc, #96]	@ (8010440 <MX_LPUART1_UART_Init+0x68>)
 80103e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80103e2:	4b16      	ldr	r3, [pc, #88]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 80103e4:	22e1      	movs	r2, #225	@ 0xe1
 80103e6:	0252      	lsls	r2, r2, #9
 80103e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80103ea:	4b14      	ldr	r3, [pc, #80]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 80103ec:	2200      	movs	r2, #0
 80103ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80103f0:	4b12      	ldr	r3, [pc, #72]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80103f6:	4b11      	ldr	r3, [pc, #68]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80103fc:	4b0f      	ldr	r3, [pc, #60]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 80103fe:	220c      	movs	r2, #12
 8010400:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010402:	4b0e      	ldr	r3, [pc, #56]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 8010404:	2200      	movs	r2, #0
 8010406:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010408:	4b0c      	ldr	r3, [pc, #48]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 801040a:	2200      	movs	r2, #0
 801040c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 801040e:	4b0b      	ldr	r3, [pc, #44]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 8010410:	2218      	movs	r2, #24
 8010412:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8010414:	4b09      	ldr	r3, [pc, #36]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 8010416:	2280      	movs	r2, #128	@ 0x80
 8010418:	0212      	lsls	r2, r2, #8
 801041a:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 801041c:	4b07      	ldr	r3, [pc, #28]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 801041e:	2280      	movs	r2, #128	@ 0x80
 8010420:	0152      	lsls	r2, r2, #5
 8010422:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8010424:	4b05      	ldr	r3, [pc, #20]	@ (801043c <MX_LPUART1_UART_Init+0x64>)
 8010426:	0018      	movs	r0, r3
 8010428:	f009 faa4 	bl	8019974 <HAL_UART_Init>
 801042c:	1e03      	subs	r3, r0, #0
 801042e:	d001      	beq.n	8010434 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8010430:	f7f9 ff90 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8010434:	46c0      	nop			@ (mov r8, r8)
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	46c0      	nop			@ (mov r8, r8)
 801043c:	20001eb4 	.word	0x20001eb4
 8010440:	40004800 	.word	0x40004800

08010444 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010448:	4b14      	ldr	r3, [pc, #80]	@ (801049c <MX_USART1_UART_Init+0x58>)
 801044a:	4a15      	ldr	r2, [pc, #84]	@ (80104a0 <MX_USART1_UART_Init+0x5c>)
 801044c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801044e:	4b13      	ldr	r3, [pc, #76]	@ (801049c <MX_USART1_UART_Init+0x58>)
 8010450:	22e1      	movs	r2, #225	@ 0xe1
 8010452:	0252      	lsls	r2, r2, #9
 8010454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010456:	4b11      	ldr	r3, [pc, #68]	@ (801049c <MX_USART1_UART_Init+0x58>)
 8010458:	2200      	movs	r2, #0
 801045a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801045c:	4b0f      	ldr	r3, [pc, #60]	@ (801049c <MX_USART1_UART_Init+0x58>)
 801045e:	2200      	movs	r2, #0
 8010460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010462:	4b0e      	ldr	r3, [pc, #56]	@ (801049c <MX_USART1_UART_Init+0x58>)
 8010464:	2200      	movs	r2, #0
 8010466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010468:	4b0c      	ldr	r3, [pc, #48]	@ (801049c <MX_USART1_UART_Init+0x58>)
 801046a:	220c      	movs	r2, #12
 801046c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801046e:	4b0b      	ldr	r3, [pc, #44]	@ (801049c <MX_USART1_UART_Init+0x58>)
 8010470:	2200      	movs	r2, #0
 8010472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010474:	4b09      	ldr	r3, [pc, #36]	@ (801049c <MX_USART1_UART_Init+0x58>)
 8010476:	2200      	movs	r2, #0
 8010478:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801047a:	4b08      	ldr	r3, [pc, #32]	@ (801049c <MX_USART1_UART_Init+0x58>)
 801047c:	2200      	movs	r2, #0
 801047e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010480:	4b06      	ldr	r3, [pc, #24]	@ (801049c <MX_USART1_UART_Init+0x58>)
 8010482:	2200      	movs	r2, #0
 8010484:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010486:	4b05      	ldr	r3, [pc, #20]	@ (801049c <MX_USART1_UART_Init+0x58>)
 8010488:	0018      	movs	r0, r3
 801048a:	f009 fa73 	bl	8019974 <HAL_UART_Init>
 801048e:	1e03      	subs	r3, r0, #0
 8010490:	d001      	beq.n	8010496 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8010492:	f7f9 ff5f 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8010496:	46c0      	nop			@ (mov r8, r8)
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	20001f6c 	.word	0x20001f6c
 80104a0:	40013800 	.word	0x40013800

080104a4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80104a8:	4b14      	ldr	r3, [pc, #80]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104aa:	4a15      	ldr	r2, [pc, #84]	@ (8010500 <MX_USART4_UART_Init+0x5c>)
 80104ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80104ae:	4b13      	ldr	r3, [pc, #76]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104b0:	22e1      	movs	r2, #225	@ 0xe1
 80104b2:	0252      	lsls	r2, r2, #9
 80104b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80104b6:	4b11      	ldr	r3, [pc, #68]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104b8:	2200      	movs	r2, #0
 80104ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80104bc:	4b0f      	ldr	r3, [pc, #60]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104be:	2200      	movs	r2, #0
 80104c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80104c2:	4b0e      	ldr	r3, [pc, #56]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104c4:	2200      	movs	r2, #0
 80104c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80104c8:	4b0c      	ldr	r3, [pc, #48]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104ca:	220c      	movs	r2, #12
 80104cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80104ce:	4b0b      	ldr	r3, [pc, #44]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104d0:	2200      	movs	r2, #0
 80104d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80104d4:	4b09      	ldr	r3, [pc, #36]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80104da:	4b08      	ldr	r3, [pc, #32]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104dc:	2200      	movs	r2, #0
 80104de:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80104e0:	4b06      	ldr	r3, [pc, #24]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80104e6:	4b05      	ldr	r3, [pc, #20]	@ (80104fc <MX_USART4_UART_Init+0x58>)
 80104e8:	0018      	movs	r0, r3
 80104ea:	f009 fa43 	bl	8019974 <HAL_UART_Init>
 80104ee:	1e03      	subs	r3, r0, #0
 80104f0:	d001      	beq.n	80104f6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80104f2:	f7f9 ff2f 	bl	800a354 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80104f6:	46c0      	nop			@ (mov r8, r8)
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	20002024 	.word	0x20002024
 8010500:	40004c00 	.word	0x40004c00

08010504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010504:	b590      	push	{r4, r7, lr}
 8010506:	b08d      	sub	sp, #52	@ 0x34
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801050c:	241c      	movs	r4, #28
 801050e:	193b      	adds	r3, r7, r4
 8010510:	0018      	movs	r0, r3
 8010512:	2314      	movs	r3, #20
 8010514:	001a      	movs	r2, r3
 8010516:	2100      	movs	r1, #0
 8010518:	f012 fae0 	bl	8022adc <memset>
  if(uartHandle->Instance==LPUART1)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a8b      	ldr	r2, [pc, #556]	@ (8010750 <HAL_UART_MspInit+0x24c>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d129      	bne.n	801057a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8010526:	4b8b      	ldr	r3, [pc, #556]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801052a:	4b8a      	ldr	r3, [pc, #552]	@ (8010754 <HAL_UART_MspInit+0x250>)
 801052c:	2180      	movs	r1, #128	@ 0x80
 801052e:	02c9      	lsls	r1, r1, #11
 8010530:	430a      	orrs	r2, r1
 8010532:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010534:	4b87      	ldr	r3, [pc, #540]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010538:	4b86      	ldr	r3, [pc, #536]	@ (8010754 <HAL_UART_MspInit+0x250>)
 801053a:	2104      	movs	r1, #4
 801053c:	430a      	orrs	r2, r1
 801053e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010540:	4b84      	ldr	r3, [pc, #528]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010544:	2204      	movs	r2, #4
 8010546:	4013      	ands	r3, r2
 8010548:	61bb      	str	r3, [r7, #24]
 801054a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801054c:	0021      	movs	r1, r4
 801054e:	187b      	adds	r3, r7, r1
 8010550:	2203      	movs	r2, #3
 8010552:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010554:	187b      	adds	r3, r7, r1
 8010556:	2202      	movs	r2, #2
 8010558:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801055a:	187b      	adds	r3, r7, r1
 801055c:	2200      	movs	r2, #0
 801055e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010560:	187b      	adds	r3, r7, r1
 8010562:	2203      	movs	r2, #3
 8010564:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8010566:	187b      	adds	r3, r7, r1
 8010568:	2206      	movs	r2, #6
 801056a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801056c:	187b      	adds	r3, r7, r1
 801056e:	4a7a      	ldr	r2, [pc, #488]	@ (8010758 <HAL_UART_MspInit+0x254>)
 8010570:	0019      	movs	r1, r3
 8010572:	0010      	movs	r0, r2
 8010574:	f001 fe96 	bl	80122a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8010578:	e0e5      	b.n	8010746 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4a77      	ldr	r2, [pc, #476]	@ (801075c <HAL_UART_MspInit+0x258>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d133      	bne.n	80105ec <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8010584:	4b73      	ldr	r3, [pc, #460]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010588:	4b72      	ldr	r3, [pc, #456]	@ (8010754 <HAL_UART_MspInit+0x250>)
 801058a:	2180      	movs	r1, #128	@ 0x80
 801058c:	01c9      	lsls	r1, r1, #7
 801058e:	430a      	orrs	r2, r1
 8010590:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010592:	4b70      	ldr	r3, [pc, #448]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010596:	4b6f      	ldr	r3, [pc, #444]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010598:	2101      	movs	r1, #1
 801059a:	430a      	orrs	r2, r1
 801059c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801059e:	4b6d      	ldr	r3, [pc, #436]	@ (8010754 <HAL_UART_MspInit+0x250>)
 80105a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105a2:	2201      	movs	r2, #1
 80105a4:	4013      	ands	r3, r2
 80105a6:	617b      	str	r3, [r7, #20]
 80105a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80105aa:	211c      	movs	r1, #28
 80105ac:	187b      	adds	r3, r7, r1
 80105ae:	22c0      	movs	r2, #192	@ 0xc0
 80105b0:	00d2      	lsls	r2, r2, #3
 80105b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105b4:	187b      	adds	r3, r7, r1
 80105b6:	2202      	movs	r2, #2
 80105b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105ba:	187b      	adds	r3, r7, r1
 80105bc:	2200      	movs	r2, #0
 80105be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105c0:	187b      	adds	r3, r7, r1
 80105c2:	2203      	movs	r2, #3
 80105c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80105c6:	187b      	adds	r3, r7, r1
 80105c8:	2204      	movs	r2, #4
 80105ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105cc:	187a      	adds	r2, r7, r1
 80105ce:	23a0      	movs	r3, #160	@ 0xa0
 80105d0:	05db      	lsls	r3, r3, #23
 80105d2:	0011      	movs	r1, r2
 80105d4:	0018      	movs	r0, r3
 80105d6:	f001 fe65 	bl	80122a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80105da:	2200      	movs	r2, #0
 80105dc:	2100      	movs	r1, #0
 80105de:	201b      	movs	r0, #27
 80105e0:	f001 fa0e 	bl	8011a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80105e4:	201b      	movs	r0, #27
 80105e6:	f001 fa20 	bl	8011a2a <HAL_NVIC_EnableIRQ>
}
 80105ea:	e0ac      	b.n	8010746 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	4a5b      	ldr	r2, [pc, #364]	@ (8010760 <HAL_UART_MspInit+0x25c>)
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d000      	beq.n	80105f8 <HAL_UART_MspInit+0xf4>
 80105f6:	e0a6      	b.n	8010746 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 80105f8:	4b56      	ldr	r3, [pc, #344]	@ (8010754 <HAL_UART_MspInit+0x250>)
 80105fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105fc:	4b55      	ldr	r3, [pc, #340]	@ (8010754 <HAL_UART_MspInit+0x250>)
 80105fe:	2180      	movs	r1, #128	@ 0x80
 8010600:	0309      	lsls	r1, r1, #12
 8010602:	430a      	orrs	r2, r1
 8010604:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010606:	4b53      	ldr	r3, [pc, #332]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801060a:	4b52      	ldr	r3, [pc, #328]	@ (8010754 <HAL_UART_MspInit+0x250>)
 801060c:	2101      	movs	r1, #1
 801060e:	430a      	orrs	r2, r1
 8010610:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010612:	4b50      	ldr	r3, [pc, #320]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010616:	2201      	movs	r2, #1
 8010618:	4013      	ands	r3, r2
 801061a:	613b      	str	r3, [r7, #16]
 801061c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801061e:	4b4d      	ldr	r3, [pc, #308]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010622:	4b4c      	ldr	r3, [pc, #304]	@ (8010754 <HAL_UART_MspInit+0x250>)
 8010624:	2104      	movs	r1, #4
 8010626:	430a      	orrs	r2, r1
 8010628:	62da      	str	r2, [r3, #44]	@ 0x2c
 801062a:	4b4a      	ldr	r3, [pc, #296]	@ (8010754 <HAL_UART_MspInit+0x250>)
 801062c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801062e:	2204      	movs	r2, #4
 8010630:	4013      	ands	r3, r2
 8010632:	60fb      	str	r3, [r7, #12]
 8010634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010636:	241c      	movs	r4, #28
 8010638:	193b      	adds	r3, r7, r4
 801063a:	2202      	movs	r2, #2
 801063c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801063e:	193b      	adds	r3, r7, r4
 8010640:	2202      	movs	r2, #2
 8010642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010644:	193b      	adds	r3, r7, r4
 8010646:	2200      	movs	r2, #0
 8010648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801064a:	193b      	adds	r3, r7, r4
 801064c:	2203      	movs	r2, #3
 801064e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8010650:	193b      	adds	r3, r7, r4
 8010652:	2206      	movs	r2, #6
 8010654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010656:	193a      	adds	r2, r7, r4
 8010658:	23a0      	movs	r3, #160	@ 0xa0
 801065a:	05db      	lsls	r3, r3, #23
 801065c:	0011      	movs	r1, r2
 801065e:	0018      	movs	r0, r3
 8010660:	f001 fe20 	bl	80122a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8010664:	0021      	movs	r1, r4
 8010666:	187b      	adds	r3, r7, r1
 8010668:	2280      	movs	r2, #128	@ 0x80
 801066a:	00d2      	lsls	r2, r2, #3
 801066c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801066e:	187b      	adds	r3, r7, r1
 8010670:	2202      	movs	r2, #2
 8010672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010674:	187b      	adds	r3, r7, r1
 8010676:	2200      	movs	r2, #0
 8010678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801067a:	187b      	adds	r3, r7, r1
 801067c:	2203      	movs	r2, #3
 801067e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8010680:	187b      	adds	r3, r7, r1
 8010682:	2206      	movs	r2, #6
 8010684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010686:	187b      	adds	r3, r7, r1
 8010688:	4a33      	ldr	r2, [pc, #204]	@ (8010758 <HAL_UART_MspInit+0x254>)
 801068a:	0019      	movs	r1, r3
 801068c:	0010      	movs	r0, r2
 801068e:	f001 fe09 	bl	80122a4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8010692:	4b34      	ldr	r3, [pc, #208]	@ (8010764 <HAL_UART_MspInit+0x260>)
 8010694:	4a34      	ldr	r2, [pc, #208]	@ (8010768 <HAL_UART_MspInit+0x264>)
 8010696:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8010698:	4b32      	ldr	r3, [pc, #200]	@ (8010764 <HAL_UART_MspInit+0x260>)
 801069a:	220c      	movs	r2, #12
 801069c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801069e:	4b31      	ldr	r3, [pc, #196]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106a0:	2200      	movs	r2, #0
 80106a2:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80106a4:	4b2f      	ldr	r3, [pc, #188]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106a6:	2200      	movs	r2, #0
 80106a8:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80106aa:	4b2e      	ldr	r3, [pc, #184]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106ac:	2280      	movs	r2, #128	@ 0x80
 80106ae:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80106b0:	4b2c      	ldr	r3, [pc, #176]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80106b6:	4b2b      	ldr	r3, [pc, #172]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80106bc:	4b29      	ldr	r3, [pc, #164]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106be:	2220      	movs	r2, #32
 80106c0:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80106c2:	4b28      	ldr	r3, [pc, #160]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106c4:	2200      	movs	r2, #0
 80106c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80106c8:	4b26      	ldr	r3, [pc, #152]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106ca:	0018      	movs	r0, r3
 80106cc:	f001 f9ce 	bl	8011a6c <HAL_DMA_Init>
 80106d0:	1e03      	subs	r3, r0, #0
 80106d2:	d001      	beq.n	80106d8 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80106d4:	f7f9 fe3e 	bl	800a354 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4a22      	ldr	r2, [pc, #136]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80106de:	4b21      	ldr	r3, [pc, #132]	@ (8010764 <HAL_UART_MspInit+0x260>)
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80106e4:	4b21      	ldr	r3, [pc, #132]	@ (801076c <HAL_UART_MspInit+0x268>)
 80106e6:	4a22      	ldr	r2, [pc, #136]	@ (8010770 <HAL_UART_MspInit+0x26c>)
 80106e8:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 80106ea:	4b20      	ldr	r3, [pc, #128]	@ (801076c <HAL_UART_MspInit+0x268>)
 80106ec:	220c      	movs	r2, #12
 80106ee:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80106f0:	4b1e      	ldr	r3, [pc, #120]	@ (801076c <HAL_UART_MspInit+0x268>)
 80106f2:	2210      	movs	r2, #16
 80106f4:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80106f6:	4b1d      	ldr	r3, [pc, #116]	@ (801076c <HAL_UART_MspInit+0x268>)
 80106f8:	2200      	movs	r2, #0
 80106fa:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80106fc:	4b1b      	ldr	r3, [pc, #108]	@ (801076c <HAL_UART_MspInit+0x268>)
 80106fe:	2280      	movs	r2, #128	@ 0x80
 8010700:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010702:	4b1a      	ldr	r3, [pc, #104]	@ (801076c <HAL_UART_MspInit+0x268>)
 8010704:	2200      	movs	r2, #0
 8010706:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010708:	4b18      	ldr	r3, [pc, #96]	@ (801076c <HAL_UART_MspInit+0x268>)
 801070a:	2200      	movs	r2, #0
 801070c:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 801070e:	4b17      	ldr	r3, [pc, #92]	@ (801076c <HAL_UART_MspInit+0x268>)
 8010710:	2200      	movs	r2, #0
 8010712:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8010714:	4b15      	ldr	r3, [pc, #84]	@ (801076c <HAL_UART_MspInit+0x268>)
 8010716:	2200      	movs	r2, #0
 8010718:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 801071a:	4b14      	ldr	r3, [pc, #80]	@ (801076c <HAL_UART_MspInit+0x268>)
 801071c:	0018      	movs	r0, r3
 801071e:	f001 f9a5 	bl	8011a6c <HAL_DMA_Init>
 8010722:	1e03      	subs	r3, r0, #0
 8010724:	d001      	beq.n	801072a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8010726:	f7f9 fe15 	bl	800a354 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	4a0f      	ldr	r2, [pc, #60]	@ (801076c <HAL_UART_MspInit+0x268>)
 801072e:	671a      	str	r2, [r3, #112]	@ 0x70
 8010730:	4b0e      	ldr	r3, [pc, #56]	@ (801076c <HAL_UART_MspInit+0x268>)
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8010736:	2200      	movs	r2, #0
 8010738:	2100      	movs	r1, #0
 801073a:	200e      	movs	r0, #14
 801073c:	f001 f960 	bl	8011a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8010740:	200e      	movs	r0, #14
 8010742:	f001 f972 	bl	8011a2a <HAL_NVIC_EnableIRQ>
}
 8010746:	46c0      	nop			@ (mov r8, r8)
 8010748:	46bd      	mov	sp, r7
 801074a:	b00d      	add	sp, #52	@ 0x34
 801074c:	bd90      	pop	{r4, r7, pc}
 801074e:	46c0      	nop			@ (mov r8, r8)
 8010750:	40004800 	.word	0x40004800
 8010754:	40021000 	.word	0x40021000
 8010758:	50000800 	.word	0x50000800
 801075c:	40013800 	.word	0x40013800
 8010760:	40004c00 	.word	0x40004c00
 8010764:	200020dc 	.word	0x200020dc
 8010768:	4002006c 	.word	0x4002006c
 801076c:	20002124 	.word	0x20002124
 8010770:	40020080 	.word	0x40020080

08010774 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 801077c:	f000 fc9c 	bl	80110b8 <HAL_GetTick>
 8010780:	0003      	movs	r3, r0
 8010782:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8010784:	4b1c      	ldr	r3, [pc, #112]	@ (80107f8 <TimestampIsReached+0x84>)
 8010786:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8010788:	697a      	ldr	r2, [r7, #20]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	429a      	cmp	r2, r3
 801078e:	d307      	bcc.n	80107a0 <TimestampIsReached+0x2c>
 8010790:	697a      	ldr	r2, [r7, #20]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	693a      	ldr	r2, [r7, #16]
 8010798:	429a      	cmp	r2, r3
 801079a:	d901      	bls.n	80107a0 <TimestampIsReached+0x2c>
 801079c:	2201      	movs	r2, #1
 801079e:	e000      	b.n	80107a2 <TimestampIsReached+0x2e>
 80107a0:	2200      	movs	r2, #0
 80107a2:	230f      	movs	r3, #15
 80107a4:	18fb      	adds	r3, r7, r3
 80107a6:	701a      	strb	r2, [r3, #0]
 80107a8:	781a      	ldrb	r2, [r3, #0]
 80107aa:	2101      	movs	r1, #1
 80107ac:	400a      	ands	r2, r1
 80107ae:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80107b0:	697a      	ldr	r2, [r7, #20]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d207      	bcs.n	80107c8 <TimestampIsReached+0x54>
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	1ad3      	subs	r3, r2, r3
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d201      	bcs.n	80107c8 <TimestampIsReached+0x54>
 80107c4:	2201      	movs	r2, #1
 80107c6:	e000      	b.n	80107ca <TimestampIsReached+0x56>
 80107c8:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 80107ca:	200e      	movs	r0, #14
 80107cc:	183b      	adds	r3, r7, r0
 80107ce:	701a      	strb	r2, [r3, #0]
 80107d0:	781a      	ldrb	r2, [r3, #0]
 80107d2:	2101      	movs	r1, #1
 80107d4:	400a      	ands	r2, r1
 80107d6:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80107d8:	230f      	movs	r3, #15
 80107da:	18fb      	adds	r3, r7, r3
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d103      	bne.n	80107ea <TimestampIsReached+0x76>
 80107e2:	183b      	adds	r3, r7, r0
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d001      	beq.n	80107ee <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 80107ea:	2301      	movs	r3, #1
 80107ec:	e000      	b.n	80107f0 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80107ee:	2300      	movs	r3, #0
}
 80107f0:	0018      	movs	r0, r3
 80107f2:	46bd      	mov	sp, r7
 80107f4:	b006      	add	sp, #24
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	7fffffff 	.word	0x7fffffff

080107fc <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8010804:	f000 fc58 	bl	80110b8 <HAL_GetTick>
 8010808:	0002      	movs	r2, r0
 801080a:	4904      	ldr	r1, [pc, #16]	@ (801081c <AddTimestamp+0x20>)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	0018      	movs	r0, r3
 8010810:	f011 fffe 	bl	8022810 <siprintf>
}
 8010814:	46c0      	nop			@ (mov r8, r8)
 8010816:	46bd      	mov	sp, r7
 8010818:	b002      	add	sp, #8
 801081a:	bd80      	pop	{r7, pc}
 801081c:	08028838 	.word	0x08028838

08010820 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8010820:	b40c      	push	{r2, r3}
 8010822:	b5b0      	push	{r4, r5, r7, lr}
 8010824:	b0a4      	sub	sp, #144	@ 0x90
 8010826:	af00      	add	r7, sp, #0
 8010828:	0002      	movs	r2, r0
 801082a:	6039      	str	r1, [r7, #0]
 801082c:	1dfb      	adds	r3, r7, #7
 801082e:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8010830:	4b23      	ldr	r3, [pc, #140]	@ (80108c0 <CreateLine+0xa0>)
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	1dfa      	adds	r2, r7, #7
 8010836:	7812      	ldrb	r2, [r2, #0]
 8010838:	429a      	cmp	r2, r3
 801083a:	d839      	bhi.n	80108b0 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 801083c:	683a      	ldr	r2, [r7, #0]
 801083e:	4921      	ldr	r1, [pc, #132]	@ (80108c4 <CreateLine+0xa4>)
 8010840:	240c      	movs	r4, #12
 8010842:	193b      	adds	r3, r7, r4
 8010844:	0018      	movs	r0, r3
 8010846:	f011 ffe3 	bl	8022810 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 801084a:	4b1d      	ldr	r3, [pc, #116]	@ (80108c0 <CreateLine+0xa0>)
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	2b01      	cmp	r3, #1
 8010850:	d909      	bls.n	8010866 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8010852:	193b      	adds	r3, r7, r4
 8010854:	0018      	movs	r0, r3
 8010856:	f7ef fc89 	bl	800016c <strlen>
 801085a:	0002      	movs	r2, r0
 801085c:	193b      	adds	r3, r7, r4
 801085e:	189b      	adds	r3, r3, r2
 8010860:	0018      	movs	r0, r3
 8010862:	f7ff ffcb 	bl	80107fc <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8010866:	240c      	movs	r4, #12
 8010868:	193b      	adds	r3, r7, r4
 801086a:	0018      	movs	r0, r3
 801086c:	f7ef fc7e 	bl	800016c <strlen>
 8010870:	0003      	movs	r3, r0
 8010872:	218c      	movs	r1, #140	@ 0x8c
 8010874:	187a      	adds	r2, r7, r1
 8010876:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8010878:	239c      	movs	r3, #156	@ 0x9c
 801087a:	2508      	movs	r5, #8
 801087c:	195b      	adds	r3, r3, r5
 801087e:	19db      	adds	r3, r3, r7
 8010880:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8010882:	193a      	adds	r2, r7, r4
 8010884:	187b      	adds	r3, r7, r1
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	18d0      	adds	r0, r2, r3
 801088a:	187b      	adds	r3, r7, r1
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2280      	movs	r2, #128	@ 0x80
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	0019      	movs	r1, r3
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2298      	movs	r2, #152	@ 0x98
 8010898:	1952      	adds	r2, r2, r5
 801089a:	19d2      	adds	r2, r2, r7
 801089c:	6812      	ldr	r2, [r2, #0]
 801089e:	f012 f84f 	bl	8022940 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80108a2:	193a      	adds	r2, r7, r4
 80108a4:	4b08      	ldr	r3, [pc, #32]	@ (80108c8 <CreateLine+0xa8>)
 80108a6:	0011      	movs	r1, r2
 80108a8:	0018      	movs	r0, r3
 80108aa:	f011 ff41 	bl	8022730 <iprintf>
 80108ae:	e000      	b.n	80108b2 <CreateLine+0x92>
    return;
 80108b0:	46c0      	nop			@ (mov r8, r8)
}
 80108b2:	46bd      	mov	sp, r7
 80108b4:	b024      	add	sp, #144	@ 0x90
 80108b6:	bcb0      	pop	{r4, r5, r7}
 80108b8:	bc08      	pop	{r3}
 80108ba:	b002      	add	sp, #8
 80108bc:	4718      	bx	r3
 80108be:	46c0      	nop			@ (mov r8, r8)
 80108c0:	200000e4 	.word	0x200000e4
 80108c4:	08028844 	.word	0x08028844
 80108c8:	08028848 	.word	0x08028848

080108cc <_write>:

int _write(int fd, void *buf, size_t count) {
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	b29a      	uxth	r2, r3
 80108dc:	68b9      	ldr	r1, [r7, #8]
 80108de:	4804      	ldr	r0, [pc, #16]	@ (80108f0 <_write+0x24>)
 80108e0:	2364      	movs	r3, #100	@ 0x64
 80108e2:	f009 f8ad 	bl	8019a40 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 80108e6:	687b      	ldr	r3, [r7, #4]
}
 80108e8:	0018      	movs	r0, r3
 80108ea:	46bd      	mov	sp, r7
 80108ec:	b004      	add	sp, #16
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	20001f6c 	.word	0x20001f6c

080108f4 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	0002      	movs	r2, r0
 80108fc:	1dfb      	adds	r3, r7, #7
 80108fe:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8010900:	4b03      	ldr	r3, [pc, #12]	@ (8010910 <SetVerboseLevel+0x1c>)
 8010902:	1dfa      	adds	r2, r7, #7
 8010904:	7812      	ldrb	r2, [r2, #0]
 8010906:	701a      	strb	r2, [r3, #0]
}
 8010908:	46c0      	nop			@ (mov r8, r8)
 801090a:	46bd      	mov	sp, r7
 801090c:	b002      	add	sp, #8
 801090e:	bd80      	pop	{r7, pc}
 8010910:	200000e4 	.word	0x200000e4

08010914 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8010918:	4b02      	ldr	r3, [pc, #8]	@ (8010924 <GetVerboseLevel+0x10>)
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	0018      	movs	r0, r3
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	46c0      	nop			@ (mov r8, r8)
 8010924:	200000e4 	.word	0x200000e4

08010928 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 801092e:	4a0f      	ldr	r2, [pc, #60]	@ (801096c <BinaryReleaseInfo+0x44>)
 8010930:	4b0f      	ldr	r3, [pc, #60]	@ (8010970 <BinaryReleaseInfo+0x48>)
 8010932:	0019      	movs	r1, r3
 8010934:	2002      	movs	r0, #2
 8010936:	f7ff ff73 	bl	8010820 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 801093a:	480e      	ldr	r0, [pc, #56]	@ (8010974 <BinaryReleaseInfo+0x4c>)
 801093c:	4a0e      	ldr	r2, [pc, #56]	@ (8010978 <BinaryReleaseInfo+0x50>)
 801093e:	490c      	ldr	r1, [pc, #48]	@ (8010970 <BinaryReleaseInfo+0x48>)
 8010940:	4b0e      	ldr	r3, [pc, #56]	@ (801097c <BinaryReleaseInfo+0x54>)
 8010942:	9300      	str	r3, [sp, #0]
 8010944:	0003      	movs	r3, r0
 8010946:	2002      	movs	r0, #2
 8010948:	f7ff ff6a 	bl	8010820 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 801094c:	4b0c      	ldr	r3, [pc, #48]	@ (8010980 <BinaryReleaseInfo+0x58>)
 801094e:	4a0d      	ldr	r2, [pc, #52]	@ (8010984 <BinaryReleaseInfo+0x5c>)
 8010950:	4907      	ldr	r1, [pc, #28]	@ (8010970 <BinaryReleaseInfo+0x48>)
 8010952:	2002      	movs	r0, #2
 8010954:	f7ff ff64 	bl	8010820 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8010958:	4b0b      	ldr	r3, [pc, #44]	@ (8010988 <BinaryReleaseInfo+0x60>)
 801095a:	4a0c      	ldr	r2, [pc, #48]	@ (801098c <BinaryReleaseInfo+0x64>)
 801095c:	4904      	ldr	r1, [pc, #16]	@ (8010970 <BinaryReleaseInfo+0x48>)
 801095e:	2002      	movs	r0, #2
 8010960:	f7ff ff5e 	bl	8010820 <CreateLine>
}
 8010964:	46c0      	nop			@ (mov r8, r8)
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	46c0      	nop			@ (mov r8, r8)
 801096c:	08028850 	.word	0x08028850
 8010970:	0802887c 	.word	0x0802887c
 8010974:	08028880 	.word	0x08028880
 8010978:	0802888c 	.word	0x0802888c
 801097c:	080288a0 	.word	0x080288a0
 8010980:	080288ac 	.word	0x080288ac
 8010984:	080288b8 	.word	0x080288b8
 8010988:	080288c0 	.word	0x080288c0
 801098c:	080288c8 	.word	0x080288c8

08010990 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	68ba      	ldr	r2, [r7, #8]
 80109a0:	68f9      	ldr	r1, [r7, #12]
 80109a2:	4803      	ldr	r0, [pc, #12]	@ (80109b0 <errorHandler+0x20>)
 80109a4:	f011 fec4 	bl	8022730 <iprintf>
//    while (true)
//    {
//    }
}
 80109a8:	46c0      	nop			@ (mov r8, r8)
 80109aa:	46bd      	mov	sp, r7
 80109ac:	b004      	add	sp, #16
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	080288e0 	.word	0x080288e0

080109b4 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80109b4:	b590      	push	{r4, r7, lr}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6039      	str	r1, [r7, #0]
 80109bc:	0011      	movs	r1, r2
 80109be:	1dfb      	adds	r3, r7, #7
 80109c0:	1c02      	adds	r2, r0, #0
 80109c2:	701a      	strb	r2, [r3, #0]
 80109c4:	1dbb      	adds	r3, r7, #6
 80109c6:	1c0a      	adds	r2, r1, #0
 80109c8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80109ca:	4b0a      	ldr	r3, [pc, #40]	@ (80109f4 <ReadRegister+0x40>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00a      	beq.n	80109e8 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 80109d2:	4b08      	ldr	r3, [pc, #32]	@ (80109f4 <ReadRegister+0x40>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	1dba      	adds	r2, r7, #6
 80109d8:	7814      	ldrb	r4, [r2, #0]
 80109da:	6839      	ldr	r1, [r7, #0]
 80109dc:	1dfa      	adds	r2, r7, #7
 80109de:	7810      	ldrb	r0, [r2, #0]
 80109e0:	0022      	movs	r2, r4
 80109e2:	4798      	blx	r3
 80109e4:	0003      	movs	r3, r0
 80109e6:	e000      	b.n	80109ea <ReadRegister+0x36>
	}
	return false;
 80109e8:	2300      	movs	r3, #0
}
 80109ea:	0018      	movs	r0, r3
 80109ec:	46bd      	mov	sp, r7
 80109ee:	b003      	add	sp, #12
 80109f0:	bd90      	pop	{r4, r7, pc}
 80109f2:	46c0      	nop			@ (mov r8, r8)
 80109f4:	20002174 	.word	0x20002174

080109f8 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80109f8:	b590      	push	{r4, r7, lr}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6039      	str	r1, [r7, #0]
 8010a00:	0011      	movs	r1, r2
 8010a02:	1dfb      	adds	r3, r7, #7
 8010a04:	1c02      	adds	r2, r0, #0
 8010a06:	701a      	strb	r2, [r3, #0]
 8010a08:	1dbb      	adds	r3, r7, #6
 8010a0a:	1c0a      	adds	r2, r1, #0
 8010a0c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8010a38 <WriteRegister+0x40>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00a      	beq.n	8010a2c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8010a16:	4b08      	ldr	r3, [pc, #32]	@ (8010a38 <WriteRegister+0x40>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	1dba      	adds	r2, r7, #6
 8010a1c:	7814      	ldrb	r4, [r2, #0]
 8010a1e:	6839      	ldr	r1, [r7, #0]
 8010a20:	1dfa      	adds	r2, r7, #7
 8010a22:	7810      	ldrb	r0, [r2, #0]
 8010a24:	0022      	movs	r2, r4
 8010a26:	4798      	blx	r3
 8010a28:	0003      	movs	r3, r0
 8010a2a:	e000      	b.n	8010a2e <WriteRegister+0x36>
  }
  return false;
 8010a2c:	2300      	movs	r3, #0
}
 8010a2e:	0018      	movs	r0, r3
 8010a30:	46bd      	mov	sp, r7
 8010a32:	b003      	add	sp, #12
 8010a34:	bd90      	pop	{r4, r7, pc}
 8010a36:	46c0      	nop			@ (mov r8, r8)
 8010a38:	20002178 	.word	0x20002178

08010a3c <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	000a      	movs	r2, r1
 8010a46:	1cfb      	adds	r3, r7, #3
 8010a48:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8010a4a:	230f      	movs	r3, #15
 8010a4c:	18fb      	adds	r3, r7, r3
 8010a4e:	22ff      	movs	r2, #255	@ 0xff
 8010a50:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8010a52:	230e      	movs	r3, #14
 8010a54:	18fb      	adds	r3, r7, r3
 8010a56:	2200      	movs	r2, #0
 8010a58:	701a      	strb	r2, [r3, #0]
 8010a5a:	e037      	b.n	8010acc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8010a5c:	230e      	movs	r3, #14
 8010a5e:	18fb      	adds	r3, r7, r3
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	18d3      	adds	r3, r2, r3
 8010a66:	7819      	ldrb	r1, [r3, #0]
 8010a68:	220f      	movs	r2, #15
 8010a6a:	18bb      	adds	r3, r7, r2
 8010a6c:	18ba      	adds	r2, r7, r2
 8010a6e:	7812      	ldrb	r2, [r2, #0]
 8010a70:	404a      	eors	r2, r1
 8010a72:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010a74:	230d      	movs	r3, #13
 8010a76:	18fb      	adds	r3, r7, r3
 8010a78:	2200      	movs	r2, #0
 8010a7a:	701a      	strb	r2, [r3, #0]
 8010a7c:	e01b      	b.n	8010ab6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8010a7e:	210f      	movs	r1, #15
 8010a80:	187b      	adds	r3, r7, r1
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	b25b      	sxtb	r3, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	da09      	bge.n	8010a9e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8010a8a:	187b      	adds	r3, r7, r1
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	b25b      	sxtb	r3, r3
 8010a92:	2231      	movs	r2, #49	@ 0x31
 8010a94:	4053      	eors	r3, r2
 8010a96:	b25a      	sxtb	r2, r3
 8010a98:	187b      	adds	r3, r7, r1
 8010a9a:	701a      	strb	r2, [r3, #0]
 8010a9c:	e005      	b.n	8010aaa <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8010a9e:	230f      	movs	r3, #15
 8010aa0:	18fa      	adds	r2, r7, r3
 8010aa2:	18fb      	adds	r3, r7, r3
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	18db      	adds	r3, r3, r3
 8010aa8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8010aaa:	210d      	movs	r1, #13
 8010aac:	187b      	adds	r3, r7, r1
 8010aae:	781a      	ldrb	r2, [r3, #0]
 8010ab0:	187b      	adds	r3, r7, r1
 8010ab2:	3201      	adds	r2, #1
 8010ab4:	701a      	strb	r2, [r3, #0]
 8010ab6:	230d      	movs	r3, #13
 8010ab8:	18fb      	adds	r3, r7, r3
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	2b07      	cmp	r3, #7
 8010abe:	d9de      	bls.n	8010a7e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8010ac0:	210e      	movs	r1, #14
 8010ac2:	187b      	adds	r3, r7, r1
 8010ac4:	781a      	ldrb	r2, [r3, #0]
 8010ac6:	187b      	adds	r3, r7, r1
 8010ac8:	3201      	adds	r2, #1
 8010aca:	701a      	strb	r2, [r3, #0]
 8010acc:	230e      	movs	r3, #14
 8010ace:	18fa      	adds	r2, r7, r3
 8010ad0:	1cfb      	adds	r3, r7, #3
 8010ad2:	7812      	ldrb	r2, [r2, #0]
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d3c0      	bcc.n	8010a5c <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8010ada:	230f      	movs	r3, #15
 8010adc:	18fb      	adds	r3, r7, r3
 8010ade:	781b      	ldrb	r3, [r3, #0]
}
 8010ae0:	0018      	movs	r0, r3
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	b004      	add	sp, #16
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8010af2:	4b0a      	ldr	r3, [pc, #40]	@ (8010b1c <HIDS_Init+0x34>)
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8010af8:	4b09      	ldr	r3, [pc, #36]	@ (8010b20 <HIDS_Init+0x38>)
 8010afa:	683a      	ldr	r2, [r7, #0]
 8010afc:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8010afe:	4b09      	ldr	r3, [pc, #36]	@ (8010b24 <HIDS_Init+0x3c>)
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	0018      	movs	r0, r3
 8010b04:	f000 f840 	bl	8010b88 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8010b08:	4b07      	ldr	r3, [pc, #28]	@ (8010b28 <HIDS_Init+0x40>)
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	0018      	movs	r0, r3
 8010b0e:	f000 f82b 	bl	8010b68 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8010b12:	46c0      	nop			@ (mov r8, r8)
 8010b14:	46bd      	mov	sp, r7
 8010b16:	b002      	add	sp, #8
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	46c0      	nop			@ (mov r8, r8)
 8010b1c:	20002174 	.word	0x20002174
 8010b20:	20002178 	.word	0x20002178
 8010b24:	200000e6 	.word	0x200000e6
 8010b28:	200000e5 	.word	0x200000e5

08010b2c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8010b30:	f000 fac2 	bl	80110b8 <HAL_GetTick>
 8010b34:	0002      	movs	r2, r0
 8010b36:	4b08      	ldr	r3, [pc, #32]	@ (8010b58 <HIDS_StartMeasurement+0x2c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	18d2      	adds	r2, r2, r3
 8010b3c:	4b07      	ldr	r3, [pc, #28]	@ (8010b5c <HIDS_StartMeasurement+0x30>)
 8010b3e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8010b40:	4b07      	ldr	r3, [pc, #28]	@ (8010b60 <HIDS_StartMeasurement+0x34>)
 8010b42:	2201      	movs	r2, #1
 8010b44:	0019      	movs	r1, r3
 8010b46:	2044      	movs	r0, #68	@ 0x44
 8010b48:	f7ff ff56 	bl	80109f8 <WriteRegister>
  MeasurementDone = false;
 8010b4c:	4b05      	ldr	r3, [pc, #20]	@ (8010b64 <HIDS_StartMeasurement+0x38>)
 8010b4e:	2200      	movs	r2, #0
 8010b50:	701a      	strb	r2, [r3, #0]
}
 8010b52:	46c0      	nop			@ (mov r8, r8)
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	200000ec 	.word	0x200000ec
 8010b5c:	200000e8 	.word	0x200000e8
 8010b60:	200000e6 	.word	0x200000e6
 8010b64:	2000218a 	.word	0x2000218a

08010b68 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	0002      	movs	r2, r0
 8010b70:	1dfb      	adds	r3, r7, #7
 8010b72:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8010b74:	4b03      	ldr	r3, [pc, #12]	@ (8010b84 <HIDS_SetHeaterMode+0x1c>)
 8010b76:	1dfa      	adds	r2, r7, #7
 8010b78:	7812      	ldrb	r2, [r2, #0]
 8010b7a:	701a      	strb	r2, [r3, #0]
}
 8010b7c:	46c0      	nop			@ (mov r8, r8)
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	b002      	add	sp, #8
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	200000e5 	.word	0x200000e5

08010b88 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	0002      	movs	r2, r0
 8010b90:	1dfb      	adds	r3, r7, #7
 8010b92:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8010b94:	4b03      	ldr	r3, [pc, #12]	@ (8010ba4 <HIDS_SetMeasurementMode+0x1c>)
 8010b96:	1dfa      	adds	r2, r7, #7
 8010b98:	7812      	ldrb	r2, [r2, #0]
 8010b9a:	701a      	strb	r2, [r3, #0]
}
 8010b9c:	46c0      	nop			@ (mov r8, r8)
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	b002      	add	sp, #8
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	200000e6 	.word	0x200000e6

08010ba8 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8010bb0:	f000 fa82 	bl	80110b8 <HAL_GetTick>
 8010bb4:	0002      	movs	r2, r0
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	18d2      	adds	r2, r2, r3
 8010bba:	4b03      	ldr	r3, [pc, #12]	@ (8010bc8 <setHIDSTimeStamp+0x20>)
 8010bbc:	601a      	str	r2, [r3, #0]
}
 8010bbe:	46c0      	nop			@ (mov r8, r8)
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	b002      	add	sp, #8
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	46c0      	nop			@ (mov r8, r8)
 8010bc8:	2000218c 	.word	0x2000218c

08010bcc <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8010bcc:	b590      	push	{r4, r7, lr}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	781a      	ldrb	r2, [r3, #0]
 8010bd8:	210c      	movs	r1, #12
 8010bda:	187b      	adds	r3, r7, r1
 8010bdc:	701a      	strb	r2, [r3, #0]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	785a      	ldrb	r2, [r3, #1]
 8010be2:	187b      	adds	r3, r7, r1
 8010be4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8010be6:	240f      	movs	r4, #15
 8010be8:	193b      	adds	r3, r7, r4
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	7892      	ldrb	r2, [r2, #2]
 8010bee:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8010bf0:	187b      	adds	r3, r7, r1
 8010bf2:	2102      	movs	r1, #2
 8010bf4:	0018      	movs	r0, r3
 8010bf6:	f7ff ff21 	bl	8010a3c <CalculateCRC>
 8010bfa:	0003      	movs	r3, r0
 8010bfc:	001a      	movs	r2, r3
 8010bfe:	193b      	adds	r3, r7, r4
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d007      	beq.n	8010c16 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8010c06:	4a1a      	ldr	r2, [pc, #104]	@ (8010c70 <CheckCRC+0xa4>)
 8010c08:	4b1a      	ldr	r3, [pc, #104]	@ (8010c74 <CheckCRC+0xa8>)
 8010c0a:	0019      	movs	r1, r3
 8010c0c:	2001      	movs	r0, #1
 8010c0e:	f7ff fe07 	bl	8010820 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8010c12:	2300      	movs	r3, #0
 8010c14:	e027      	b.n	8010c66 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	78da      	ldrb	r2, [r3, #3]
 8010c1a:	2108      	movs	r1, #8
 8010c1c:	187b      	adds	r3, r7, r1
 8010c1e:	701a      	strb	r2, [r3, #0]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	791a      	ldrb	r2, [r3, #4]
 8010c24:	187b      	adds	r3, r7, r1
 8010c26:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8010c28:	240e      	movs	r4, #14
 8010c2a:	193b      	adds	r3, r7, r4
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	7952      	ldrb	r2, [r2, #5]
 8010c30:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8010c32:	187b      	adds	r3, r7, r1
 8010c34:	2102      	movs	r1, #2
 8010c36:	0018      	movs	r0, r3
 8010c38:	f7ff ff00 	bl	8010a3c <CalculateCRC>
 8010c3c:	0003      	movs	r3, r0
 8010c3e:	001a      	movs	r2, r3
 8010c40:	193b      	adds	r3, r7, r4
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d00d      	beq.n	8010c64 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8010c48:	4a0b      	ldr	r2, [pc, #44]	@ (8010c78 <CheckCRC+0xac>)
 8010c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8010c74 <CheckCRC+0xa8>)
 8010c4c:	0019      	movs	r1, r3
 8010c4e:	2001      	movs	r0, #1
 8010c50:	f7ff fde6 	bl	8010820 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8010c54:	4a09      	ldr	r2, [pc, #36]	@ (8010c7c <CheckCRC+0xb0>)
 8010c56:	4b0a      	ldr	r3, [pc, #40]	@ (8010c80 <CheckCRC+0xb4>)
 8010c58:	217d      	movs	r1, #125	@ 0x7d
 8010c5a:	0018      	movs	r0, r3
 8010c5c:	f7ff fe98 	bl	8010990 <errorHandler>
		return false;
 8010c60:	2300      	movs	r3, #0
 8010c62:	e000      	b.n	8010c66 <CheckCRC+0x9a>
	}
	return true;
 8010c64:	2301      	movs	r3, #1
}
 8010c66:	0018      	movs	r0, r3
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	b005      	add	sp, #20
 8010c6c:	bd90      	pop	{r4, r7, pc}
 8010c6e:	46c0      	nop			@ (mov r8, r8)
 8010c70:	0802892c 	.word	0x0802892c
 8010c74:	08028954 	.word	0x08028954
 8010c78:	08028958 	.word	0x08028958
 8010c7c:	08028984 	.word	0x08028984
 8010c80:	08028f9c 	.word	0x08028f9c

08010c84 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8010c8a:	1dbb      	adds	r3, r7, #6
 8010c8c:	2289      	movs	r2, #137	@ 0x89
 8010c8e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8010c90:	1dbb      	adds	r3, r7, #6
 8010c92:	2201      	movs	r2, #1
 8010c94:	0019      	movs	r1, r3
 8010c96:	2044      	movs	r0, #68	@ 0x44
 8010c98:	f7ff feae 	bl	80109f8 <WriteRegister>
	HAL_Delay(30);
 8010c9c:	201e      	movs	r0, #30
 8010c9e:	f000 fa15 	bl	80110cc <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8010ca2:	4b14      	ldr	r3, [pc, #80]	@ (8010cf4 <HIDS_DeviceConnected+0x70>)
 8010ca4:	2206      	movs	r2, #6
 8010ca6:	0019      	movs	r1, r3
 8010ca8:	2044      	movs	r0, #68	@ 0x44
 8010caa:	f7ff fe83 	bl	80109b4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8010cae:	1dfb      	adds	r3, r7, #7
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	701a      	strb	r2, [r3, #0]
 8010cb4:	e011      	b.n	8010cda <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8010cb6:	1dfb      	adds	r3, r7, #7
 8010cb8:	7818      	ldrb	r0, [r3, #0]
 8010cba:	1dfb      	adds	r3, r7, #7
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8010cf4 <HIDS_DeviceConnected+0x70>)
 8010cc0:	5cd3      	ldrb	r3, [r2, r3]
 8010cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8010cf8 <HIDS_DeviceConnected+0x74>)
 8010cc4:	490d      	ldr	r1, [pc, #52]	@ (8010cfc <HIDS_DeviceConnected+0x78>)
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	0003      	movs	r3, r0
 8010cca:	2002      	movs	r0, #2
 8010ccc:	f7ff fda8 	bl	8010820 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8010cd0:	1dfb      	adds	r3, r7, #7
 8010cd2:	781a      	ldrb	r2, [r3, #0]
 8010cd4:	1dfb      	adds	r3, r7, #7
 8010cd6:	3201      	adds	r2, #1
 8010cd8:	701a      	strb	r2, [r3, #0]
 8010cda:	1dfb      	adds	r3, r7, #7
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	2b05      	cmp	r3, #5
 8010ce0:	d9e9      	bls.n	8010cb6 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8010ce2:	4b04      	ldr	r3, [pc, #16]	@ (8010cf4 <HIDS_DeviceConnected+0x70>)
 8010ce4:	0018      	movs	r0, r3
 8010ce6:	f7ff ff71 	bl	8010bcc <CheckCRC>
 8010cea:	0003      	movs	r3, r0
}
 8010cec:	0018      	movs	r0, r3
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	b002      	add	sp, #8
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	2000217c 	.word	0x2000217c
 8010cf8:	0802899c 	.word	0x0802899c
 8010cfc:	08028928 	.word	0x08028928

08010d00 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8010d00:	b580      	push	{r7, lr}
 8010d02:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8010d04:	4b04      	ldr	r3, [pc, #16]	@ (8010d18 <HIDS_MeasurementReady+0x18>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	0018      	movs	r0, r3
 8010d0a:	f7ff fd33 	bl	8010774 <TimestampIsReached>
 8010d0e:	0003      	movs	r3, r0
}
 8010d10:	0018      	movs	r0, r3
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	46c0      	nop			@ (mov r8, r8)
 8010d18:	200000e8 	.word	0x200000e8

08010d1c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8010d26:	4b41      	ldr	r3, [pc, #260]	@ (8010e2c <HIDS_GetMeasurementValues+0x110>)
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d001      	beq.n	8010d32 <HIDS_GetMeasurementValues+0x16>
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e077      	b.n	8010e22 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8010d32:	f7ff ffe5 	bl	8010d00 <HIDS_MeasurementReady>
 8010d36:	0003      	movs	r3, r0
 8010d38:	001a      	movs	r2, r3
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	4053      	eors	r3, r2
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d001      	beq.n	8010d48 <HIDS_GetMeasurementValues+0x2c>
 8010d44:	2300      	movs	r3, #0
 8010d46:	e06c      	b.n	8010e22 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8010d48:	4b39      	ldr	r3, [pc, #228]	@ (8010e30 <HIDS_GetMeasurementValues+0x114>)
 8010d4a:	2206      	movs	r2, #6
 8010d4c:	0019      	movs	r1, r3
 8010d4e:	2044      	movs	r0, #68	@ 0x44
 8010d50:	f7ff fe30 	bl	80109b4 <ReadRegister>
 8010d54:	0003      	movs	r3, r0
 8010d56:	001a      	movs	r2, r3
 8010d58:	2301      	movs	r3, #1
 8010d5a:	4053      	eors	r3, r2
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d005      	beq.n	8010d6e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8010d62:	4a34      	ldr	r2, [pc, #208]	@ (8010e34 <HIDS_GetMeasurementValues+0x118>)
 8010d64:	4b34      	ldr	r3, [pc, #208]	@ (8010e38 <HIDS_GetMeasurementValues+0x11c>)
 8010d66:	0019      	movs	r1, r3
 8010d68:	2001      	movs	r0, #1
 8010d6a:	f7ff fd59 	bl	8010820 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8010d6e:	4b30      	ldr	r3, [pc, #192]	@ (8010e30 <HIDS_GetMeasurementValues+0x114>)
 8010d70:	0018      	movs	r0, r3
 8010d72:	f7ff ff2b 	bl	8010bcc <CheckCRC>
 8010d76:	0003      	movs	r3, r0
 8010d78:	001a      	movs	r2, r3
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	4053      	eors	r3, r2
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d001      	beq.n	8010d88 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8010d84:	2300      	movs	r3, #0
 8010d86:	e04c      	b.n	8010e22 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8010d88:	4b29      	ldr	r3, [pc, #164]	@ (8010e30 <HIDS_GetMeasurementValues+0x114>)
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	021b      	lsls	r3, r3, #8
 8010d8e:	4a28      	ldr	r2, [pc, #160]	@ (8010e30 <HIDS_GetMeasurementValues+0x114>)
 8010d90:	7852      	ldrb	r2, [r2, #1]
 8010d92:	4313      	orrs	r3, r2
 8010d94:	22af      	movs	r2, #175	@ 0xaf
 8010d96:	4353      	muls	r3, r2
 8010d98:	0018      	movs	r0, r3
 8010d9a:	f7f2 fb11 	bl	80033c0 <__aeabi_i2d>
 8010d9e:	2200      	movs	r2, #0
 8010da0:	4b26      	ldr	r3, [pc, #152]	@ (8010e3c <HIDS_GetMeasurementValues+0x120>)
 8010da2:	f7f1 f807 	bl	8001db4 <__aeabi_ddiv>
 8010da6:	0002      	movs	r2, r0
 8010da8:	000b      	movs	r3, r1
 8010daa:	0010      	movs	r0, r2
 8010dac:	0019      	movs	r1, r3
 8010dae:	f7f2 fba1 	bl	80034f4 <__aeabi_d2f>
 8010db2:	1c03      	adds	r3, r0, #0
 8010db4:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8010db6:	4922      	ldr	r1, [pc, #136]	@ (8010e40 <HIDS_GetMeasurementValues+0x124>)
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f7f0 fa2f 	bl	800121c <__aeabi_fsub>
 8010dbe:	1c03      	adds	r3, r0, #0
 8010dc0:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8010dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8010e30 <HIDS_GetMeasurementValues+0x114>)
 8010dc4:	78db      	ldrb	r3, [r3, #3]
 8010dc6:	021b      	lsls	r3, r3, #8
 8010dc8:	4a19      	ldr	r2, [pc, #100]	@ (8010e30 <HIDS_GetMeasurementValues+0x114>)
 8010dca:	7912      	ldrb	r2, [r2, #4]
 8010dcc:	431a      	orrs	r2, r3
 8010dce:	0013      	movs	r3, r2
 8010dd0:	015b      	lsls	r3, r3, #5
 8010dd2:	1a9b      	subs	r3, r3, r2
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	189b      	adds	r3, r3, r2
 8010dd8:	0018      	movs	r0, r3
 8010dda:	f7f2 faf1 	bl	80033c0 <__aeabi_i2d>
 8010dde:	2200      	movs	r2, #0
 8010de0:	4b16      	ldr	r3, [pc, #88]	@ (8010e3c <HIDS_GetMeasurementValues+0x120>)
 8010de2:	f7f0 ffe7 	bl	8001db4 <__aeabi_ddiv>
 8010de6:	0002      	movs	r2, r0
 8010de8:	000b      	movs	r3, r1
 8010dea:	0010      	movs	r0, r2
 8010dec:	0019      	movs	r1, r3
 8010dee:	f7f2 fb81 	bl	80034f4 <__aeabi_d2f>
 8010df2:	1c03      	adds	r3, r0, #0
 8010df4:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8010df6:	4913      	ldr	r1, [pc, #76]	@ (8010e44 <HIDS_GetMeasurementValues+0x128>)
 8010df8:	68b8      	ldr	r0, [r7, #8]
 8010dfa:	f7f0 fa0f 	bl	800121c <__aeabi_fsub>
 8010dfe:	1c03      	adds	r3, r0, #0
 8010e00:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	68fa      	ldr	r2, [r7, #12]
 8010e06:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	0011      	movs	r1, r2
 8010e14:	0018      	movs	r0, r3
 8010e16:	f7fd f90b 	bl	800e030 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8010e1a:	4b04      	ldr	r3, [pc, #16]	@ (8010e2c <HIDS_GetMeasurementValues+0x110>)
 8010e1c:	2201      	movs	r2, #1
 8010e1e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8010e20:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8010e22:	0018      	movs	r0, r3
 8010e24:	46bd      	mov	sp, r7
 8010e26:	b004      	add	sp, #16
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	46c0      	nop			@ (mov r8, r8)
 8010e2c:	2000218a 	.word	0x2000218a
 8010e30:	20002184 	.word	0x20002184
 8010e34:	080289bc 	.word	0x080289bc
 8010e38:	08028954 	.word	0x08028954
 8010e3c:	40efffe0 	.word	0x40efffe0
 8010e40:	42340000 	.word	0x42340000
 8010e44:	40c00000 	.word	0x40c00000

08010e48 <ResetHIDSresults>:

void ResetHIDSresults() {
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	af00      	add	r7, sp, #0
  humid = 0.0;
 8010e4c:	4b04      	ldr	r3, [pc, #16]	@ (8010e60 <ResetHIDSresults+0x18>)
 8010e4e:	2200      	movs	r2, #0
 8010e50:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8010e52:	4b04      	ldr	r3, [pc, #16]	@ (8010e64 <ResetHIDSresults+0x1c>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	601a      	str	r2, [r3, #0]
}
 8010e58:	46c0      	nop			@ (mov r8, r8)
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	46c0      	nop			@ (mov r8, r8)
 8010e60:	2000216c 	.word	0x2000216c
 8010e64:	20002170 	.word	0x20002170

08010e68 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8010e68:	b5b0      	push	{r4, r5, r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8010e6e:	4b40      	ldr	r3, [pc, #256]	@ (8010f70 <HIDS_Upkeep+0x108>)
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	2b06      	cmp	r3, #6
 8010e74:	d900      	bls.n	8010e78 <HIDS_Upkeep+0x10>
 8010e76:	e06e      	b.n	8010f56 <HIDS_Upkeep+0xee>
 8010e78:	009a      	lsls	r2, r3, #2
 8010e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8010f74 <HIDS_Upkeep+0x10c>)
 8010e7c:	18d3      	adds	r3, r2, r3
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8010e82:	4a3d      	ldr	r2, [pc, #244]	@ (8010f78 <HIDS_Upkeep+0x110>)
 8010e84:	4b3d      	ldr	r3, [pc, #244]	@ (8010f7c <HIDS_Upkeep+0x114>)
 8010e86:	0019      	movs	r1, r3
 8010e88:	2003      	movs	r0, #3
 8010e8a:	f7ff fcc9 	bl	8010820 <CreateLine>
      break;
 8010e8e:	e069      	b.n	8010f64 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8010e90:	f7ff ffda 	bl	8010e48 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8010e94:	4b36      	ldr	r3, [pc, #216]	@ (8010f70 <HIDS_Upkeep+0x108>)
 8010e96:	2201      	movs	r2, #1
 8010e98:	701a      	strb	r2, [r3, #0]
      break;
 8010e9a:	e063      	b.n	8010f64 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 8010e9c:	f7fe fb0a 	bl	800f4b4 <SetMeasurementIndicator>
      setSensorLock(HIDS);
 8010ea0:	2001      	movs	r0, #1
 8010ea2:	f7f9 fe25 	bl	800aaf0 <setSensorLock>
      HIDS_StartMeasurement();
 8010ea6:	f7ff fe41 	bl	8010b2c <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8010eaa:	4b31      	ldr	r3, [pc, #196]	@ (8010f70 <HIDS_Upkeep+0x108>)
 8010eac:	2202      	movs	r2, #2
 8010eae:	701a      	strb	r2, [r3, #0]
      break;
 8010eb0:	e058      	b.n	8010f64 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8010eb2:	4a33      	ldr	r2, [pc, #204]	@ (8010f80 <HIDS_Upkeep+0x118>)
 8010eb4:	4b33      	ldr	r3, [pc, #204]	@ (8010f84 <HIDS_Upkeep+0x11c>)
 8010eb6:	0011      	movs	r1, r2
 8010eb8:	0018      	movs	r0, r3
 8010eba:	f7ff ff2f 	bl	8010d1c <HIDS_GetMeasurementValues>
 8010ebe:	1e03      	subs	r3, r0, #0
 8010ec0:	d04d      	beq.n	8010f5e <HIDS_Upkeep+0xf6>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8010ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8010f70 <HIDS_Upkeep+0x108>)
 8010ec4:	2203      	movs	r2, #3
 8010ec6:	701a      	strb	r2, [r3, #0]
        setSensorLock(FREE);
 8010ec8:	2000      	movs	r0, #0
 8010eca:	f7f9 fe11 	bl	800aaf0 <setSensorLock>
      }
      break;
 8010ece:	e046      	b.n	8010f5e <HIDS_Upkeep+0xf6>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8010ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8010f84 <HIDS_Upkeep+0x11c>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	1c18      	adds	r0, r3, #0
 8010ed6:	f7f2 fac5 	bl	8003464 <__aeabi_f2d>
 8010eda:	0004      	movs	r4, r0
 8010edc:	000d      	movs	r5, r1
 8010ede:	4b28      	ldr	r3, [pc, #160]	@ (8010f80 <HIDS_Upkeep+0x118>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	1c18      	adds	r0, r3, #0
 8010ee4:	f7f2 fabe 	bl	8003464 <__aeabi_f2d>
 8010ee8:	0002      	movs	r2, r0
 8010eea:	000b      	movs	r3, r1
 8010eec:	4826      	ldr	r0, [pc, #152]	@ (8010f88 <HIDS_Upkeep+0x120>)
 8010eee:	4923      	ldr	r1, [pc, #140]	@ (8010f7c <HIDS_Upkeep+0x114>)
 8010ef0:	9202      	str	r2, [sp, #8]
 8010ef2:	9303      	str	r3, [sp, #12]
 8010ef4:	9400      	str	r4, [sp, #0]
 8010ef6:	9501      	str	r5, [sp, #4]
 8010ef8:	0002      	movs	r2, r0
 8010efa:	2003      	movs	r0, #3
 8010efc:	f7ff fc90 	bl	8010820 <CreateLine>
      setHIDS(temp, humid);
 8010f00:	4b1f      	ldr	r3, [pc, #124]	@ (8010f80 <HIDS_Upkeep+0x118>)
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	4b1f      	ldr	r3, [pc, #124]	@ (8010f84 <HIDS_Upkeep+0x11c>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	1c19      	adds	r1, r3, #0
 8010f0a:	1c10      	adds	r0, r2, #0
 8010f0c:	f7f2 fc4c 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 8010f10:	f7fe fae8 	bl	800f4e4 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8010f14:	f000 f8d0 	bl	80110b8 <HAL_GetTick>
 8010f18:	0004      	movs	r4, r0
 8010f1a:	f7f6 f87d 	bl	8007018 <Check_USB_PowerOn>
 8010f1e:	1e03      	subs	r3, r0, #0
 8010f20:	d103      	bne.n	8010f2a <HIDS_Upkeep+0xc2>
 8010f22:	4b1a      	ldr	r3, [pc, #104]	@ (8010f8c <HIDS_Upkeep+0x124>)
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d001      	beq.n	8010f2e <HIDS_Upkeep+0xc6>
 8010f2a:	4b19      	ldr	r3, [pc, #100]	@ (8010f90 <HIDS_Upkeep+0x128>)
 8010f2c:	e001      	b.n	8010f32 <HIDS_Upkeep+0xca>
 8010f2e:	23fa      	movs	r3, #250	@ 0xfa
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	191a      	adds	r2, r3, r4
 8010f34:	4b17      	ldr	r3, [pc, #92]	@ (8010f94 <HIDS_Upkeep+0x12c>)
 8010f36:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 8010f38:	4b0d      	ldr	r3, [pc, #52]	@ (8010f70 <HIDS_Upkeep+0x108>)
 8010f3a:	2206      	movs	r2, #6
 8010f3c:	701a      	strb	r2, [r3, #0]
      break;
 8010f3e:	e011      	b.n	8010f64 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8010f40:	4b14      	ldr	r3, [pc, #80]	@ (8010f94 <HIDS_Upkeep+0x12c>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	0018      	movs	r0, r3
 8010f46:	f7ff fc15 	bl	8010774 <TimestampIsReached>
 8010f4a:	1e03      	subs	r3, r0, #0
 8010f4c:	d009      	beq.n	8010f62 <HIDS_Upkeep+0xfa>
        HIDSState = HIDS_STATE_INIT;
 8010f4e:	4b08      	ldr	r3, [pc, #32]	@ (8010f70 <HIDS_Upkeep+0x108>)
 8010f50:	2200      	movs	r2, #0
 8010f52:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010f54:	e005      	b.n	8010f62 <HIDS_Upkeep+0xfa>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8010f56:	4b06      	ldr	r3, [pc, #24]	@ (8010f70 <HIDS_Upkeep+0x108>)
 8010f58:	2200      	movs	r2, #0
 8010f5a:	701a      	strb	r2, [r3, #0]
      break;
 8010f5c:	e002      	b.n	8010f64 <HIDS_Upkeep+0xfc>
      break;
 8010f5e:	46c0      	nop			@ (mov r8, r8)
 8010f60:	e000      	b.n	8010f64 <HIDS_Upkeep+0xfc>
      break;
 8010f62:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8010f64:	4b02      	ldr	r3, [pc, #8]	@ (8010f70 <HIDS_Upkeep+0x108>)
 8010f66:	781b      	ldrb	r3, [r3, #0]
}
 8010f68:	0018      	movs	r0, r3
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8010f6e:	46c0      	nop			@ (mov r8, r8)
 8010f70:	20002190 	.word	0x20002190
 8010f74:	08028f80 	.word	0x08028f80
 8010f78:	080289f0 	.word	0x080289f0
 8010f7c:	08028a24 	.word	0x08028a24
 8010f80:	20002170 	.word	0x20002170
 8010f84:	2000216c 	.word	0x2000216c
 8010f88:	08028a28 	.word	0x08028a28
 8010f8c:	20001dd6 	.word	0x20001dd6
 8010f90:	00002710 	.word	0x00002710
 8010f94:	2000218c 	.word	0x2000218c

08010f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8010f98:	480d      	ldr	r0, [pc, #52]	@ (8010fd0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8010f9a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8010f9c:	f7ff f844 	bl	8010028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010fa0:	480c      	ldr	r0, [pc, #48]	@ (8010fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8010fa2:	490d      	ldr	r1, [pc, #52]	@ (8010fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8010fdc <LoopForever+0xe>)
  movs r3, #0
 8010fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010fa8:	e002      	b.n	8010fb0 <LoopCopyDataInit>

08010faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010fae:	3304      	adds	r3, #4

08010fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010fb4:	d3f9      	bcc.n	8010faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8010fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8010fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8010fe4 <LoopForever+0x16>)
  movs r3, #0
 8010fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010fbc:	e001      	b.n	8010fc2 <LoopFillZerobss>

08010fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010fc0:	3204      	adds	r2, #4

08010fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010fc4:	d3fb      	bcc.n	8010fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010fc6:	f011 fe33 	bl	8022c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010fca:	f7f8 fe75 	bl	8009cb8 <main>

08010fce <LoopForever>:

LoopForever:
    b LoopForever
 8010fce:	e7fe      	b.n	8010fce <LoopForever>
   ldr   r0, =_estack
 8010fd0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8010fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010fd8:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 8010fdc:	08029920 	.word	0x08029920
  ldr r2, =_sbss
 8010fe0:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 8010fe4:	20003598 	.word	0x20003598

08010fe8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010fe8:	e7fe      	b.n	8010fe8 <ADC1_COMP_IRQHandler>
	...

08010fec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8010ff2:	1dfb      	adds	r3, r7, #7
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8010ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8011028 <HAL_Init+0x3c>)
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8011028 <HAL_Init+0x3c>)
 8010ffe:	2140      	movs	r1, #64	@ 0x40
 8011000:	430a      	orrs	r2, r1
 8011002:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011004:	2003      	movs	r0, #3
 8011006:	f000 f811 	bl	801102c <HAL_InitTick>
 801100a:	1e03      	subs	r3, r0, #0
 801100c:	d003      	beq.n	8011016 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 801100e:	1dfb      	adds	r3, r7, #7
 8011010:	2201      	movs	r2, #1
 8011012:	701a      	strb	r2, [r3, #0]
 8011014:	e001      	b.n	801101a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011016:	f7fe febb 	bl	800fd90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801101a:	1dfb      	adds	r3, r7, #7
 801101c:	781b      	ldrb	r3, [r3, #0]
}
 801101e:	0018      	movs	r0, r3
 8011020:	46bd      	mov	sp, r7
 8011022:	b002      	add	sp, #8
 8011024:	bd80      	pop	{r7, pc}
 8011026:	46c0      	nop			@ (mov r8, r8)
 8011028:	40022000 	.word	0x40022000

0801102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801102c:	b590      	push	{r4, r7, lr}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011034:	4b14      	ldr	r3, [pc, #80]	@ (8011088 <HAL_InitTick+0x5c>)
 8011036:	681c      	ldr	r4, [r3, #0]
 8011038:	4b14      	ldr	r3, [pc, #80]	@ (801108c <HAL_InitTick+0x60>)
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	0019      	movs	r1, r3
 801103e:	23fa      	movs	r3, #250	@ 0xfa
 8011040:	0098      	lsls	r0, r3, #2
 8011042:	f7ef f8af 	bl	80001a4 <__udivsi3>
 8011046:	0003      	movs	r3, r0
 8011048:	0019      	movs	r1, r3
 801104a:	0020      	movs	r0, r4
 801104c:	f7ef f8aa 	bl	80001a4 <__udivsi3>
 8011050:	0003      	movs	r3, r0
 8011052:	0018      	movs	r0, r3
 8011054:	f000 fcfd 	bl	8011a52 <HAL_SYSTICK_Config>
 8011058:	1e03      	subs	r3, r0, #0
 801105a:	d001      	beq.n	8011060 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 801105c:	2301      	movs	r3, #1
 801105e:	e00f      	b.n	8011080 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b03      	cmp	r3, #3
 8011064:	d80b      	bhi.n	801107e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011066:	6879      	ldr	r1, [r7, #4]
 8011068:	2301      	movs	r3, #1
 801106a:	425b      	negs	r3, r3
 801106c:	2200      	movs	r2, #0
 801106e:	0018      	movs	r0, r3
 8011070:	f000 fcc6 	bl	8011a00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011074:	4b06      	ldr	r3, [pc, #24]	@ (8011090 <HAL_InitTick+0x64>)
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801107a:	2300      	movs	r3, #0
 801107c:	e000      	b.n	8011080 <HAL_InitTick+0x54>
    return HAL_ERROR;
 801107e:	2301      	movs	r3, #1
}
 8011080:	0018      	movs	r0, r3
 8011082:	46bd      	mov	sp, r7
 8011084:	b003      	add	sp, #12
 8011086:	bd90      	pop	{r4, r7, pc}
 8011088:	200000e0 	.word	0x200000e0
 801108c:	200000f4 	.word	0x200000f4
 8011090:	200000f0 	.word	0x200000f0

08011094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011098:	4b05      	ldr	r3, [pc, #20]	@ (80110b0 <HAL_IncTick+0x1c>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	001a      	movs	r2, r3
 801109e:	4b05      	ldr	r3, [pc, #20]	@ (80110b4 <HAL_IncTick+0x20>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	18d2      	adds	r2, r2, r3
 80110a4:	4b03      	ldr	r3, [pc, #12]	@ (80110b4 <HAL_IncTick+0x20>)
 80110a6:	601a      	str	r2, [r3, #0]
}
 80110a8:	46c0      	nop			@ (mov r8, r8)
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	46c0      	nop			@ (mov r8, r8)
 80110b0:	200000f4 	.word	0x200000f4
 80110b4:	20002194 	.word	0x20002194

080110b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	af00      	add	r7, sp, #0
  return uwTick;
 80110bc:	4b02      	ldr	r3, [pc, #8]	@ (80110c8 <HAL_GetTick+0x10>)
 80110be:	681b      	ldr	r3, [r3, #0]
}
 80110c0:	0018      	movs	r0, r3
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	46c0      	nop			@ (mov r8, r8)
 80110c8:	20002194 	.word	0x20002194

080110cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b084      	sub	sp, #16
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80110d4:	f7ff fff0 	bl	80110b8 <HAL_GetTick>
 80110d8:	0003      	movs	r3, r0
 80110da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	3301      	adds	r3, #1
 80110e4:	d005      	beq.n	80110f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80110e6:	4b0a      	ldr	r3, [pc, #40]	@ (8011110 <HAL_Delay+0x44>)
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	001a      	movs	r2, r3
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	189b      	adds	r3, r3, r2
 80110f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80110f2:	46c0      	nop			@ (mov r8, r8)
 80110f4:	f7ff ffe0 	bl	80110b8 <HAL_GetTick>
 80110f8:	0002      	movs	r2, r0
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	1ad3      	subs	r3, r2, r3
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	429a      	cmp	r2, r3
 8011102:	d8f7      	bhi.n	80110f4 <HAL_Delay+0x28>
  {
  }
}
 8011104:	46c0      	nop			@ (mov r8, r8)
 8011106:	46c0      	nop			@ (mov r8, r8)
 8011108:	46bd      	mov	sp, r7
 801110a:	b004      	add	sp, #16
 801110c:	bd80      	pop	{r7, pc}
 801110e:	46c0      	nop			@ (mov r8, r8)
 8011110:	200000f4 	.word	0x200000f4

08011114 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8011118:	4b04      	ldr	r3, [pc, #16]	@ (801112c <HAL_SuspendTick+0x18>)
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	4b03      	ldr	r3, [pc, #12]	@ (801112c <HAL_SuspendTick+0x18>)
 801111e:	2102      	movs	r1, #2
 8011120:	438a      	bics	r2, r1
 8011122:	601a      	str	r2, [r3, #0]
}
 8011124:	46c0      	nop			@ (mov r8, r8)
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	46c0      	nop			@ (mov r8, r8)
 801112c:	e000e010 	.word	0xe000e010

08011130 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8011134:	4b04      	ldr	r3, [pc, #16]	@ (8011148 <HAL_ResumeTick+0x18>)
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	4b03      	ldr	r3, [pc, #12]	@ (8011148 <HAL_ResumeTick+0x18>)
 801113a:	2102      	movs	r1, #2
 801113c:	430a      	orrs	r2, r1
 801113e:	601a      	str	r2, [r3, #0]
}
 8011140:	46c0      	nop			@ (mov r8, r8)
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	46c0      	nop			@ (mov r8, r8)
 8011148:	e000e010 	.word	0xe000e010

0801114c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8011150:	4b02      	ldr	r3, [pc, #8]	@ (801115c <HAL_GetUIDw0+0x10>)
 8011152:	681b      	ldr	r3, [r3, #0]
}
 8011154:	0018      	movs	r0, r3
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	46c0      	nop			@ (mov r8, r8)
 801115c:	1ff80050 	.word	0x1ff80050

08011160 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8011164:	4b02      	ldr	r3, [pc, #8]	@ (8011170 <HAL_GetUIDw1+0x10>)
 8011166:	681b      	ldr	r3, [r3, #0]
}
 8011168:	0018      	movs	r0, r3
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	46c0      	nop			@ (mov r8, r8)
 8011170:	1ff80054 	.word	0x1ff80054

08011174 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8011178:	4b02      	ldr	r3, [pc, #8]	@ (8011184 <HAL_GetUIDw2+0x10>)
 801117a:	681b      	ldr	r3, [r3, #0]
}
 801117c:	0018      	movs	r0, r3
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	46c0      	nop			@ (mov r8, r8)
 8011184:	1ff80064 	.word	0x1ff80064

08011188 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d101      	bne.n	801119a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8011196:	2301      	movs	r3, #1
 8011198:	e159      	b.n	801144e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10a      	bne.n	80111b8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2250      	movs	r2, #80	@ 0x50
 80111ac:	2100      	movs	r1, #0
 80111ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	0018      	movs	r0, r3
 80111b4:	f7f6 fdce 	bl	8007d54 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80111bc:	2210      	movs	r2, #16
 80111be:	4013      	ands	r3, r2
 80111c0:	2b10      	cmp	r3, #16
 80111c2:	d005      	beq.n	80111d0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	689b      	ldr	r3, [r3, #8]
 80111ca:	2204      	movs	r2, #4
 80111cc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80111ce:	d00b      	beq.n	80111e8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80111d4:	2210      	movs	r2, #16
 80111d6:	431a      	orrs	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2250      	movs	r2, #80	@ 0x50
 80111e0:	2100      	movs	r1, #0
 80111e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	e132      	b.n	801144e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80111ec:	4a9a      	ldr	r2, [pc, #616]	@ (8011458 <HAL_ADC_Init+0x2d0>)
 80111ee:	4013      	ands	r3, r2
 80111f0:	2202      	movs	r2, #2
 80111f2:	431a      	orrs	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	2203      	movs	r2, #3
 8011200:	4013      	ands	r3, r2
 8011202:	2b01      	cmp	r3, #1
 8011204:	d108      	bne.n	8011218 <HAL_ADC_Init+0x90>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2201      	movs	r2, #1
 801120e:	4013      	ands	r3, r2
 8011210:	2b01      	cmp	r3, #1
 8011212:	d101      	bne.n	8011218 <HAL_ADC_Init+0x90>
 8011214:	2301      	movs	r3, #1
 8011216:	e000      	b.n	801121a <HAL_ADC_Init+0x92>
 8011218:	2300      	movs	r3, #0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d149      	bne.n	80112b2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	685a      	ldr	r2, [r3, #4]
 8011222:	23c0      	movs	r3, #192	@ 0xc0
 8011224:	061b      	lsls	r3, r3, #24
 8011226:	429a      	cmp	r2, r3
 8011228:	d00b      	beq.n	8011242 <HAL_ADC_Init+0xba>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	685a      	ldr	r2, [r3, #4]
 801122e:	2380      	movs	r3, #128	@ 0x80
 8011230:	05db      	lsls	r3, r3, #23
 8011232:	429a      	cmp	r2, r3
 8011234:	d005      	beq.n	8011242 <HAL_ADC_Init+0xba>
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	685a      	ldr	r2, [r3, #4]
 801123a:	2380      	movs	r3, #128	@ 0x80
 801123c:	061b      	lsls	r3, r3, #24
 801123e:	429a      	cmp	r2, r3
 8011240:	d111      	bne.n	8011266 <HAL_ADC_Init+0xde>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	691a      	ldr	r2, [r3, #16]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	0092      	lsls	r2, r2, #2
 801124e:	0892      	lsrs	r2, r2, #2
 8011250:	611a      	str	r2, [r3, #16]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	6919      	ldr	r1, [r3, #16]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	685a      	ldr	r2, [r3, #4]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	430a      	orrs	r2, r1
 8011262:	611a      	str	r2, [r3, #16]
 8011264:	e014      	b.n	8011290 <HAL_ADC_Init+0x108>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	691a      	ldr	r2, [r3, #16]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	0092      	lsls	r2, r2, #2
 8011272:	0892      	lsrs	r2, r2, #2
 8011274:	611a      	str	r2, [r3, #16]
 8011276:	4b79      	ldr	r3, [pc, #484]	@ (801145c <HAL_ADC_Init+0x2d4>)
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	4b78      	ldr	r3, [pc, #480]	@ (801145c <HAL_ADC_Init+0x2d4>)
 801127c:	4978      	ldr	r1, [pc, #480]	@ (8011460 <HAL_ADC_Init+0x2d8>)
 801127e:	400a      	ands	r2, r1
 8011280:	601a      	str	r2, [r3, #0]
 8011282:	4b76      	ldr	r3, [pc, #472]	@ (801145c <HAL_ADC_Init+0x2d4>)
 8011284:	6819      	ldr	r1, [r3, #0]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	685a      	ldr	r2, [r3, #4]
 801128a:	4b74      	ldr	r3, [pc, #464]	@ (801145c <HAL_ADC_Init+0x2d4>)
 801128c:	430a      	orrs	r2, r1
 801128e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	68da      	ldr	r2, [r3, #12]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2118      	movs	r1, #24
 801129c:	438a      	bics	r2, r1
 801129e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	68d9      	ldr	r1, [r3, #12]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	689a      	ldr	r2, [r3, #8]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	430a      	orrs	r2, r1
 80112b0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80112b2:	4b6a      	ldr	r3, [pc, #424]	@ (801145c <HAL_ADC_Init+0x2d4>)
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	4b69      	ldr	r3, [pc, #420]	@ (801145c <HAL_ADC_Init+0x2d4>)
 80112b8:	496a      	ldr	r1, [pc, #424]	@ (8011464 <HAL_ADC_Init+0x2dc>)
 80112ba:	400a      	ands	r2, r1
 80112bc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80112be:	4b67      	ldr	r3, [pc, #412]	@ (801145c <HAL_ADC_Init+0x2d4>)
 80112c0:	6819      	ldr	r1, [r3, #0]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112c6:	065a      	lsls	r2, r3, #25
 80112c8:	4b64      	ldr	r3, [pc, #400]	@ (801145c <HAL_ADC_Init+0x2d4>)
 80112ca:	430a      	orrs	r2, r1
 80112cc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	689a      	ldr	r2, [r3, #8]
 80112d4:	2380      	movs	r3, #128	@ 0x80
 80112d6:	055b      	lsls	r3, r3, #21
 80112d8:	4013      	ands	r3, r2
 80112da:	d108      	bne.n	80112ee <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	689a      	ldr	r2, [r3, #8]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2180      	movs	r1, #128	@ 0x80
 80112e8:	0549      	lsls	r1, r1, #21
 80112ea:	430a      	orrs	r2, r1
 80112ec:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	68da      	ldr	r2, [r3, #12]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	495b      	ldr	r1, [pc, #364]	@ (8011468 <HAL_ADC_Init+0x2e0>)
 80112fa:	400a      	ands	r2, r1
 80112fc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	68d9      	ldr	r1, [r3, #12]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	691b      	ldr	r3, [r3, #16]
 801130c:	2b02      	cmp	r3, #2
 801130e:	d101      	bne.n	8011314 <HAL_ADC_Init+0x18c>
 8011310:	2304      	movs	r3, #4
 8011312:	e000      	b.n	8011316 <HAL_ADC_Init+0x18e>
 8011314:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8011316:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2020      	movs	r0, #32
 801131c:	5c1b      	ldrb	r3, [r3, r0]
 801131e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8011320:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	202c      	movs	r0, #44	@ 0x2c
 8011326:	5c1b      	ldrb	r3, [r3, r0]
 8011328:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801132a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8011330:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	699b      	ldr	r3, [r3, #24]
 8011336:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8011338:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	69db      	ldr	r3, [r3, #28]
 801133e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8011340:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	430a      	orrs	r2, r1
 8011348:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801134e:	23c2      	movs	r3, #194	@ 0xc2
 8011350:	33ff      	adds	r3, #255	@ 0xff
 8011352:	429a      	cmp	r2, r3
 8011354:	d00b      	beq.n	801136e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	68d9      	ldr	r1, [r3, #12]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8011364:	431a      	orrs	r2, r3
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	430a      	orrs	r2, r1
 801136c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2221      	movs	r2, #33	@ 0x21
 8011372:	5c9b      	ldrb	r3, [r3, r2]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d11a      	bne.n	80113ae <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2220      	movs	r2, #32
 801137c:	5c9b      	ldrb	r3, [r3, r2]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d109      	bne.n	8011396 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	68da      	ldr	r2, [r3, #12]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2180      	movs	r1, #128	@ 0x80
 801138e:	0249      	lsls	r1, r1, #9
 8011390:	430a      	orrs	r2, r1
 8011392:	60da      	str	r2, [r3, #12]
 8011394:	e00b      	b.n	80113ae <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801139a:	2220      	movs	r2, #32
 801139c:	431a      	orrs	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113a6:	2201      	movs	r2, #1
 80113a8:	431a      	orrs	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d11f      	bne.n	80113f6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	691a      	ldr	r2, [r3, #16]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	492a      	ldr	r1, [pc, #168]	@ (801146c <HAL_ADC_Init+0x2e4>)
 80113c2:	400a      	ands	r2, r1
 80113c4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	6919      	ldr	r1, [r3, #16]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80113d4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80113da:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	430a      	orrs	r2, r1
 80113e2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	691a      	ldr	r2, [r3, #16]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2101      	movs	r1, #1
 80113f0:	430a      	orrs	r2, r1
 80113f2:	611a      	str	r2, [r3, #16]
 80113f4:	e00e      	b.n	8011414 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	691b      	ldr	r3, [r3, #16]
 80113fc:	2201      	movs	r2, #1
 80113fe:	4013      	ands	r3, r2
 8011400:	2b01      	cmp	r3, #1
 8011402:	d107      	bne.n	8011414 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	691a      	ldr	r2, [r3, #16]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2101      	movs	r1, #1
 8011410:	438a      	bics	r2, r1
 8011412:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	695a      	ldr	r2, [r3, #20]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	2107      	movs	r1, #7
 8011420:	438a      	bics	r2, r1
 8011422:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6959      	ldr	r1, [r3, #20]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	430a      	orrs	r2, r1
 8011434:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011440:	2203      	movs	r2, #3
 8011442:	4393      	bics	r3, r2
 8011444:	2201      	movs	r2, #1
 8011446:	431a      	orrs	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 801144c:	2300      	movs	r3, #0
}
 801144e:	0018      	movs	r0, r3
 8011450:	46bd      	mov	sp, r7
 8011452:	b002      	add	sp, #8
 8011454:	bd80      	pop	{r7, pc}
 8011456:	46c0      	nop			@ (mov r8, r8)
 8011458:	fffffefd 	.word	0xfffffefd
 801145c:	40012708 	.word	0x40012708
 8011460:	ffc3ffff 	.word	0xffc3ffff
 8011464:	fdffffff 	.word	0xfdffffff
 8011468:	fffe0219 	.word	0xfffe0219
 801146c:	fffffc03 	.word	0xfffffc03

08011470 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8011470:	b590      	push	{r4, r7, lr}
 8011472:	b085      	sub	sp, #20
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011478:	230f      	movs	r3, #15
 801147a:	18fb      	adds	r3, r7, r3
 801147c:	2200      	movs	r2, #0
 801147e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	2204      	movs	r2, #4
 8011488:	4013      	ands	r3, r2
 801148a:	d138      	bne.n	80114fe <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2250      	movs	r2, #80	@ 0x50
 8011490:	5c9b      	ldrb	r3, [r3, r2]
 8011492:	2b01      	cmp	r3, #1
 8011494:	d101      	bne.n	801149a <HAL_ADC_Start+0x2a>
 8011496:	2302      	movs	r3, #2
 8011498:	e038      	b.n	801150c <HAL_ADC_Start+0x9c>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2250      	movs	r2, #80	@ 0x50
 801149e:	2101      	movs	r1, #1
 80114a0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	69db      	ldr	r3, [r3, #28]
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d007      	beq.n	80114ba <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80114aa:	230f      	movs	r3, #15
 80114ac:	18fc      	adds	r4, r7, r3
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	0018      	movs	r0, r3
 80114b2:	f000 f95f 	bl	8011774 <ADC_Enable>
 80114b6:	0003      	movs	r3, r0
 80114b8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80114ba:	230f      	movs	r3, #15
 80114bc:	18fb      	adds	r3, r7, r3
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d120      	bne.n	8011506 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114c8:	4a12      	ldr	r2, [pc, #72]	@ (8011514 <HAL_ADC_Start+0xa4>)
 80114ca:	4013      	ands	r3, r2
 80114cc:	2280      	movs	r2, #128	@ 0x80
 80114ce:	0052      	lsls	r2, r2, #1
 80114d0:	431a      	orrs	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2200      	movs	r2, #0
 80114da:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2250      	movs	r2, #80	@ 0x50
 80114e0:	2100      	movs	r1, #0
 80114e2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	221c      	movs	r2, #28
 80114ea:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	689a      	ldr	r2, [r3, #8]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	2104      	movs	r1, #4
 80114f8:	430a      	orrs	r2, r1
 80114fa:	609a      	str	r2, [r3, #8]
 80114fc:	e003      	b.n	8011506 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80114fe:	230f      	movs	r3, #15
 8011500:	18fb      	adds	r3, r7, r3
 8011502:	2202      	movs	r2, #2
 8011504:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8011506:	230f      	movs	r3, #15
 8011508:	18fb      	adds	r3, r7, r3
 801150a:	781b      	ldrb	r3, [r3, #0]
}
 801150c:	0018      	movs	r0, r3
 801150e:	46bd      	mov	sp, r7
 8011510:	b005      	add	sp, #20
 8011512:	bd90      	pop	{r4, r7, pc}
 8011514:	fffff0fe 	.word	0xfffff0fe

08011518 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8011522:	2300      	movs	r3, #0
 8011524:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8011526:	2300      	movs	r3, #0
 8011528:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	695b      	ldr	r3, [r3, #20]
 801152e:	2b08      	cmp	r3, #8
 8011530:	d102      	bne.n	8011538 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8011532:	2308      	movs	r3, #8
 8011534:	60fb      	str	r3, [r7, #12]
 8011536:	e014      	b.n	8011562 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	2201      	movs	r2, #1
 8011540:	4013      	ands	r3, r2
 8011542:	2b01      	cmp	r3, #1
 8011544:	d10b      	bne.n	801155e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801154a:	2220      	movs	r2, #32
 801154c:	431a      	orrs	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2250      	movs	r2, #80	@ 0x50
 8011556:	2100      	movs	r1, #0
 8011558:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 801155a:	2301      	movs	r3, #1
 801155c:	e072      	b.n	8011644 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 801155e:	230c      	movs	r3, #12
 8011560:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8011562:	f7ff fda9 	bl	80110b8 <HAL_GetTick>
 8011566:	0003      	movs	r3, r0
 8011568:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 801156a:	e01f      	b.n	80115ac <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	3301      	adds	r3, #1
 8011570:	d01c      	beq.n	80115ac <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d007      	beq.n	8011588 <HAL_ADC_PollForConversion+0x70>
 8011578:	f7ff fd9e 	bl	80110b8 <HAL_GetTick>
 801157c:	0002      	movs	r2, r0
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	683a      	ldr	r2, [r7, #0]
 8011584:	429a      	cmp	r2, r3
 8011586:	d211      	bcs.n	80115ac <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	4013      	ands	r3, r2
 8011592:	d10b      	bne.n	80115ac <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011598:	2204      	movs	r2, #4
 801159a:	431a      	orrs	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2250      	movs	r2, #80	@ 0x50
 80115a4:	2100      	movs	r1, #0
 80115a6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80115a8:	2303      	movs	r3, #3
 80115aa:	e04b      	b.n	8011644 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	4013      	ands	r3, r2
 80115b6:	d0d9      	beq.n	801156c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115bc:	2280      	movs	r2, #128	@ 0x80
 80115be:	0092      	lsls	r2, r2, #2
 80115c0:	431a      	orrs	r2, r3
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	68da      	ldr	r2, [r3, #12]
 80115cc:	23c0      	movs	r3, #192	@ 0xc0
 80115ce:	011b      	lsls	r3, r3, #4
 80115d0:	4013      	ands	r3, r2
 80115d2:	d12e      	bne.n	8011632 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2220      	movs	r2, #32
 80115d8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d129      	bne.n	8011632 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2208      	movs	r2, #8
 80115e6:	4013      	ands	r3, r2
 80115e8:	2b08      	cmp	r3, #8
 80115ea:	d122      	bne.n	8011632 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	689b      	ldr	r3, [r3, #8]
 80115f2:	2204      	movs	r2, #4
 80115f4:	4013      	ands	r3, r2
 80115f6:	d110      	bne.n	801161a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	685a      	ldr	r2, [r3, #4]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	210c      	movs	r1, #12
 8011604:	438a      	bics	r2, r1
 8011606:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801160c:	4a0f      	ldr	r2, [pc, #60]	@ (801164c <HAL_ADC_PollForConversion+0x134>)
 801160e:	4013      	ands	r3, r2
 8011610:	2201      	movs	r2, #1
 8011612:	431a      	orrs	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	655a      	str	r2, [r3, #84]	@ 0x54
 8011618:	e00b      	b.n	8011632 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801161e:	2220      	movs	r2, #32
 8011620:	431a      	orrs	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801162a:	2201      	movs	r2, #1
 801162c:	431a      	orrs	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	699b      	ldr	r3, [r3, #24]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d103      	bne.n	8011642 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	220c      	movs	r2, #12
 8011640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011642:	2300      	movs	r3, #0
}
 8011644:	0018      	movs	r0, r3
 8011646:	46bd      	mov	sp, r7
 8011648:	b004      	add	sp, #16
 801164a:	bd80      	pop	{r7, pc}
 801164c:	fffffefe 	.word	0xfffffefe

08011650 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 801165e:	0018      	movs	r0, r3
 8011660:	46bd      	mov	sp, r7
 8011662:	b002      	add	sp, #8
 8011664:	bd80      	pop	{r7, pc}
	...

08011668 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2250      	movs	r2, #80	@ 0x50
 8011676:	5c9b      	ldrb	r3, [r3, r2]
 8011678:	2b01      	cmp	r3, #1
 801167a:	d101      	bne.n	8011680 <HAL_ADC_ConfigChannel+0x18>
 801167c:	2302      	movs	r3, #2
 801167e:	e06c      	b.n	801175a <HAL_ADC_ConfigChannel+0xf2>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2250      	movs	r2, #80	@ 0x50
 8011684:	2101      	movs	r1, #1
 8011686:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	2204      	movs	r2, #4
 8011690:	4013      	ands	r3, r2
 8011692:	d00b      	beq.n	80116ac <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011698:	2220      	movs	r2, #32
 801169a:	431a      	orrs	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2250      	movs	r2, #80	@ 0x50
 80116a4:	2100      	movs	r1, #0
 80116a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80116a8:	2301      	movs	r3, #1
 80116aa:	e056      	b.n	801175a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	4a2c      	ldr	r2, [pc, #176]	@ (8011764 <HAL_ADC_ConfigChannel+0xfc>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d028      	beq.n	8011708 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	035b      	lsls	r3, r3, #13
 80116c2:	0b5a      	lsrs	r2, r3, #13
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	430a      	orrs	r2, r1
 80116ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	2380      	movs	r3, #128	@ 0x80
 80116d2:	02db      	lsls	r3, r3, #11
 80116d4:	4013      	ands	r3, r2
 80116d6:	d009      	beq.n	80116ec <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80116d8:	4b23      	ldr	r3, [pc, #140]	@ (8011768 <HAL_ADC_ConfigChannel+0x100>)
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	4b22      	ldr	r3, [pc, #136]	@ (8011768 <HAL_ADC_ConfigChannel+0x100>)
 80116de:	2180      	movs	r1, #128	@ 0x80
 80116e0:	0409      	lsls	r1, r1, #16
 80116e2:	430a      	orrs	r2, r1
 80116e4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80116e6:	200a      	movs	r0, #10
 80116e8:	f000 f8ac 	bl	8011844 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	2380      	movs	r3, #128	@ 0x80
 80116f2:	029b      	lsls	r3, r3, #10
 80116f4:	4013      	ands	r3, r2
 80116f6:	d02b      	beq.n	8011750 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80116f8:	4b1b      	ldr	r3, [pc, #108]	@ (8011768 <HAL_ADC_ConfigChannel+0x100>)
 80116fa:	681a      	ldr	r2, [r3, #0]
 80116fc:	4b1a      	ldr	r3, [pc, #104]	@ (8011768 <HAL_ADC_ConfigChannel+0x100>)
 80116fe:	2180      	movs	r1, #128	@ 0x80
 8011700:	03c9      	lsls	r1, r1, #15
 8011702:	430a      	orrs	r2, r1
 8011704:	601a      	str	r2, [r3, #0]
 8011706:	e023      	b.n	8011750 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	035b      	lsls	r3, r3, #13
 8011714:	0b5b      	lsrs	r3, r3, #13
 8011716:	43d9      	mvns	r1, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	400a      	ands	r2, r1
 801171e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	2380      	movs	r3, #128	@ 0x80
 8011726:	02db      	lsls	r3, r3, #11
 8011728:	4013      	ands	r3, r2
 801172a:	d005      	beq.n	8011738 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 801172c:	4b0e      	ldr	r3, [pc, #56]	@ (8011768 <HAL_ADC_ConfigChannel+0x100>)
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	4b0d      	ldr	r3, [pc, #52]	@ (8011768 <HAL_ADC_ConfigChannel+0x100>)
 8011732:	490e      	ldr	r1, [pc, #56]	@ (801176c <HAL_ADC_ConfigChannel+0x104>)
 8011734:	400a      	ands	r2, r1
 8011736:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	2380      	movs	r3, #128	@ 0x80
 801173e:	029b      	lsls	r3, r3, #10
 8011740:	4013      	ands	r3, r2
 8011742:	d005      	beq.n	8011750 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8011744:	4b08      	ldr	r3, [pc, #32]	@ (8011768 <HAL_ADC_ConfigChannel+0x100>)
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	4b07      	ldr	r3, [pc, #28]	@ (8011768 <HAL_ADC_ConfigChannel+0x100>)
 801174a:	4909      	ldr	r1, [pc, #36]	@ (8011770 <HAL_ADC_ConfigChannel+0x108>)
 801174c:	400a      	ands	r2, r1
 801174e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2250      	movs	r2, #80	@ 0x50
 8011754:	2100      	movs	r1, #0
 8011756:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8011758:	2300      	movs	r3, #0
}
 801175a:	0018      	movs	r0, r3
 801175c:	46bd      	mov	sp, r7
 801175e:	b002      	add	sp, #8
 8011760:	bd80      	pop	{r7, pc}
 8011762:	46c0      	nop			@ (mov r8, r8)
 8011764:	00001001 	.word	0x00001001
 8011768:	40012708 	.word	0x40012708
 801176c:	ff7fffff 	.word	0xff7fffff
 8011770:	ffbfffff 	.word	0xffbfffff

08011774 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801177c:	2300      	movs	r3, #0
 801177e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	689b      	ldr	r3, [r3, #8]
 8011786:	2203      	movs	r2, #3
 8011788:	4013      	ands	r3, r2
 801178a:	2b01      	cmp	r3, #1
 801178c:	d108      	bne.n	80117a0 <ADC_Enable+0x2c>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2201      	movs	r2, #1
 8011796:	4013      	ands	r3, r2
 8011798:	2b01      	cmp	r3, #1
 801179a:	d101      	bne.n	80117a0 <ADC_Enable+0x2c>
 801179c:	2301      	movs	r3, #1
 801179e:	e000      	b.n	80117a2 <ADC_Enable+0x2e>
 80117a0:	2300      	movs	r3, #0
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d146      	bne.n	8011834 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	689b      	ldr	r3, [r3, #8]
 80117ac:	4a24      	ldr	r2, [pc, #144]	@ (8011840 <ADC_Enable+0xcc>)
 80117ae:	4013      	ands	r3, r2
 80117b0:	d00d      	beq.n	80117ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80117b6:	2210      	movs	r2, #16
 80117b8:	431a      	orrs	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80117c2:	2201      	movs	r2, #1
 80117c4:	431a      	orrs	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80117ca:	2301      	movs	r3, #1
 80117cc:	e033      	b.n	8011836 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	689a      	ldr	r2, [r3, #8]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2101      	movs	r1, #1
 80117da:	430a      	orrs	r2, r1
 80117dc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80117de:	2001      	movs	r0, #1
 80117e0:	f000 f830 	bl	8011844 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80117e4:	f7ff fc68 	bl	80110b8 <HAL_GetTick>
 80117e8:	0003      	movs	r3, r0
 80117ea:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80117ec:	e01b      	b.n	8011826 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80117ee:	f7ff fc63 	bl	80110b8 <HAL_GetTick>
 80117f2:	0002      	movs	r2, r0
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	2b0a      	cmp	r3, #10
 80117fa:	d914      	bls.n	8011826 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	2201      	movs	r2, #1
 8011804:	4013      	ands	r3, r2
 8011806:	2b01      	cmp	r3, #1
 8011808:	d00d      	beq.n	8011826 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801180e:	2210      	movs	r2, #16
 8011810:	431a      	orrs	r2, r3
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801181a:	2201      	movs	r2, #1
 801181c:	431a      	orrs	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8011822:	2301      	movs	r3, #1
 8011824:	e007      	b.n	8011836 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	2201      	movs	r2, #1
 801182e:	4013      	ands	r3, r2
 8011830:	2b01      	cmp	r3, #1
 8011832:	d1dc      	bne.n	80117ee <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8011834:	2300      	movs	r3, #0
}
 8011836:	0018      	movs	r0, r3
 8011838:	46bd      	mov	sp, r7
 801183a:	b004      	add	sp, #16
 801183c:	bd80      	pop	{r7, pc}
 801183e:	46c0      	nop			@ (mov r8, r8)
 8011840:	80000017 	.word	0x80000017

08011844 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 801184c:	4b0b      	ldr	r3, [pc, #44]	@ (801187c <ADC_DelayMicroSecond+0x38>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	490b      	ldr	r1, [pc, #44]	@ (8011880 <ADC_DelayMicroSecond+0x3c>)
 8011852:	0018      	movs	r0, r3
 8011854:	f7ee fca6 	bl	80001a4 <__udivsi3>
 8011858:	0003      	movs	r3, r0
 801185a:	001a      	movs	r2, r3
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	4353      	muls	r3, r2
 8011860:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8011862:	e002      	b.n	801186a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	3b01      	subs	r3, #1
 8011868:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d1f9      	bne.n	8011864 <ADC_DelayMicroSecond+0x20>
  }
}
 8011870:	46c0      	nop			@ (mov r8, r8)
 8011872:	46c0      	nop			@ (mov r8, r8)
 8011874:	46bd      	mov	sp, r7
 8011876:	b004      	add	sp, #16
 8011878:	bd80      	pop	{r7, pc}
 801187a:	46c0      	nop			@ (mov r8, r8)
 801187c:	200000e0 	.word	0x200000e0
 8011880:	000f4240 	.word	0x000f4240

08011884 <__NVIC_EnableIRQ>:
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
 801188a:	0002      	movs	r2, r0
 801188c:	1dfb      	adds	r3, r7, #7
 801188e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011890:	1dfb      	adds	r3, r7, #7
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	2b7f      	cmp	r3, #127	@ 0x7f
 8011896:	d809      	bhi.n	80118ac <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011898:	1dfb      	adds	r3, r7, #7
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	001a      	movs	r2, r3
 801189e:	231f      	movs	r3, #31
 80118a0:	401a      	ands	r2, r3
 80118a2:	4b04      	ldr	r3, [pc, #16]	@ (80118b4 <__NVIC_EnableIRQ+0x30>)
 80118a4:	2101      	movs	r1, #1
 80118a6:	4091      	lsls	r1, r2
 80118a8:	000a      	movs	r2, r1
 80118aa:	601a      	str	r2, [r3, #0]
}
 80118ac:	46c0      	nop			@ (mov r8, r8)
 80118ae:	46bd      	mov	sp, r7
 80118b0:	b002      	add	sp, #8
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	e000e100 	.word	0xe000e100

080118b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80118b8:	b590      	push	{r4, r7, lr}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	0002      	movs	r2, r0
 80118c0:	6039      	str	r1, [r7, #0]
 80118c2:	1dfb      	adds	r3, r7, #7
 80118c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80118c6:	1dfb      	adds	r3, r7, #7
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80118cc:	d828      	bhi.n	8011920 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80118ce:	4a2f      	ldr	r2, [pc, #188]	@ (801198c <__NVIC_SetPriority+0xd4>)
 80118d0:	1dfb      	adds	r3, r7, #7
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	b25b      	sxtb	r3, r3
 80118d6:	089b      	lsrs	r3, r3, #2
 80118d8:	33c0      	adds	r3, #192	@ 0xc0
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	589b      	ldr	r3, [r3, r2]
 80118de:	1dfa      	adds	r2, r7, #7
 80118e0:	7812      	ldrb	r2, [r2, #0]
 80118e2:	0011      	movs	r1, r2
 80118e4:	2203      	movs	r2, #3
 80118e6:	400a      	ands	r2, r1
 80118e8:	00d2      	lsls	r2, r2, #3
 80118ea:	21ff      	movs	r1, #255	@ 0xff
 80118ec:	4091      	lsls	r1, r2
 80118ee:	000a      	movs	r2, r1
 80118f0:	43d2      	mvns	r2, r2
 80118f2:	401a      	ands	r2, r3
 80118f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	019b      	lsls	r3, r3, #6
 80118fa:	22ff      	movs	r2, #255	@ 0xff
 80118fc:	401a      	ands	r2, r3
 80118fe:	1dfb      	adds	r3, r7, #7
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	0018      	movs	r0, r3
 8011904:	2303      	movs	r3, #3
 8011906:	4003      	ands	r3, r0
 8011908:	00db      	lsls	r3, r3, #3
 801190a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801190c:	481f      	ldr	r0, [pc, #124]	@ (801198c <__NVIC_SetPriority+0xd4>)
 801190e:	1dfb      	adds	r3, r7, #7
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	b25b      	sxtb	r3, r3
 8011914:	089b      	lsrs	r3, r3, #2
 8011916:	430a      	orrs	r2, r1
 8011918:	33c0      	adds	r3, #192	@ 0xc0
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801191e:	e031      	b.n	8011984 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011920:	4a1b      	ldr	r2, [pc, #108]	@ (8011990 <__NVIC_SetPriority+0xd8>)
 8011922:	1dfb      	adds	r3, r7, #7
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	0019      	movs	r1, r3
 8011928:	230f      	movs	r3, #15
 801192a:	400b      	ands	r3, r1
 801192c:	3b08      	subs	r3, #8
 801192e:	089b      	lsrs	r3, r3, #2
 8011930:	3306      	adds	r3, #6
 8011932:	009b      	lsls	r3, r3, #2
 8011934:	18d3      	adds	r3, r2, r3
 8011936:	3304      	adds	r3, #4
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	1dfa      	adds	r2, r7, #7
 801193c:	7812      	ldrb	r2, [r2, #0]
 801193e:	0011      	movs	r1, r2
 8011940:	2203      	movs	r2, #3
 8011942:	400a      	ands	r2, r1
 8011944:	00d2      	lsls	r2, r2, #3
 8011946:	21ff      	movs	r1, #255	@ 0xff
 8011948:	4091      	lsls	r1, r2
 801194a:	000a      	movs	r2, r1
 801194c:	43d2      	mvns	r2, r2
 801194e:	401a      	ands	r2, r3
 8011950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	019b      	lsls	r3, r3, #6
 8011956:	22ff      	movs	r2, #255	@ 0xff
 8011958:	401a      	ands	r2, r3
 801195a:	1dfb      	adds	r3, r7, #7
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	0018      	movs	r0, r3
 8011960:	2303      	movs	r3, #3
 8011962:	4003      	ands	r3, r0
 8011964:	00db      	lsls	r3, r3, #3
 8011966:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011968:	4809      	ldr	r0, [pc, #36]	@ (8011990 <__NVIC_SetPriority+0xd8>)
 801196a:	1dfb      	adds	r3, r7, #7
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	001c      	movs	r4, r3
 8011970:	230f      	movs	r3, #15
 8011972:	4023      	ands	r3, r4
 8011974:	3b08      	subs	r3, #8
 8011976:	089b      	lsrs	r3, r3, #2
 8011978:	430a      	orrs	r2, r1
 801197a:	3306      	adds	r3, #6
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	18c3      	adds	r3, r0, r3
 8011980:	3304      	adds	r3, #4
 8011982:	601a      	str	r2, [r3, #0]
}
 8011984:	46c0      	nop			@ (mov r8, r8)
 8011986:	46bd      	mov	sp, r7
 8011988:	b003      	add	sp, #12
 801198a:	bd90      	pop	{r4, r7, pc}
 801198c:	e000e100 	.word	0xe000e100
 8011990:	e000ed00 	.word	0xe000ed00

08011994 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011998:	f3bf 8f4f 	dsb	sy
}
 801199c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801199e:	4b04      	ldr	r3, [pc, #16]	@ (80119b0 <__NVIC_SystemReset+0x1c>)
 80119a0:	4a04      	ldr	r2, [pc, #16]	@ (80119b4 <__NVIC_SystemReset+0x20>)
 80119a2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80119a4:	f3bf 8f4f 	dsb	sy
}
 80119a8:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80119aa:	46c0      	nop			@ (mov r8, r8)
 80119ac:	e7fd      	b.n	80119aa <__NVIC_SystemReset+0x16>
 80119ae:	46c0      	nop			@ (mov r8, r8)
 80119b0:	e000ed00 	.word	0xe000ed00
 80119b4:	05fa0004 	.word	0x05fa0004

080119b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	1e5a      	subs	r2, r3, #1
 80119c4:	2380      	movs	r3, #128	@ 0x80
 80119c6:	045b      	lsls	r3, r3, #17
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d301      	bcc.n	80119d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80119cc:	2301      	movs	r3, #1
 80119ce:	e010      	b.n	80119f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80119d0:	4b0a      	ldr	r3, [pc, #40]	@ (80119fc <SysTick_Config+0x44>)
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	3a01      	subs	r2, #1
 80119d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80119d8:	2301      	movs	r3, #1
 80119da:	425b      	negs	r3, r3
 80119dc:	2103      	movs	r1, #3
 80119de:	0018      	movs	r0, r3
 80119e0:	f7ff ff6a 	bl	80118b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80119e4:	4b05      	ldr	r3, [pc, #20]	@ (80119fc <SysTick_Config+0x44>)
 80119e6:	2200      	movs	r2, #0
 80119e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80119ea:	4b04      	ldr	r3, [pc, #16]	@ (80119fc <SysTick_Config+0x44>)
 80119ec:	2207      	movs	r2, #7
 80119ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80119f0:	2300      	movs	r3, #0
}
 80119f2:	0018      	movs	r0, r3
 80119f4:	46bd      	mov	sp, r7
 80119f6:	b002      	add	sp, #8
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	46c0      	nop			@ (mov r8, r8)
 80119fc:	e000e010 	.word	0xe000e010

08011a00 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60b9      	str	r1, [r7, #8]
 8011a08:	607a      	str	r2, [r7, #4]
 8011a0a:	210f      	movs	r1, #15
 8011a0c:	187b      	adds	r3, r7, r1
 8011a0e:	1c02      	adds	r2, r0, #0
 8011a10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	187b      	adds	r3, r7, r1
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	b25b      	sxtb	r3, r3
 8011a1a:	0011      	movs	r1, r2
 8011a1c:	0018      	movs	r0, r3
 8011a1e:	f7ff ff4b 	bl	80118b8 <__NVIC_SetPriority>
}
 8011a22:	46c0      	nop			@ (mov r8, r8)
 8011a24:	46bd      	mov	sp, r7
 8011a26:	b004      	add	sp, #16
 8011a28:	bd80      	pop	{r7, pc}

08011a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011a2a:	b580      	push	{r7, lr}
 8011a2c:	b082      	sub	sp, #8
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	0002      	movs	r2, r0
 8011a32:	1dfb      	adds	r3, r7, #7
 8011a34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011a36:	1dfb      	adds	r3, r7, #7
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	b25b      	sxtb	r3, r3
 8011a3c:	0018      	movs	r0, r3
 8011a3e:	f7ff ff21 	bl	8011884 <__NVIC_EnableIRQ>
}
 8011a42:	46c0      	nop			@ (mov r8, r8)
 8011a44:	46bd      	mov	sp, r7
 8011a46:	b002      	add	sp, #8
 8011a48:	bd80      	pop	{r7, pc}

08011a4a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8011a4a:	b580      	push	{r7, lr}
 8011a4c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8011a4e:	f7ff ffa1 	bl	8011994 <__NVIC_SystemReset>

08011a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b082      	sub	sp, #8
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	0018      	movs	r0, r3
 8011a5e:	f7ff ffab 	bl	80119b8 <SysTick_Config>
 8011a62:	0003      	movs	r3, r0
}
 8011a64:	0018      	movs	r0, r3
 8011a66:	46bd      	mov	sp, r7
 8011a68:	b002      	add	sp, #8
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d101      	bne.n	8011a7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e061      	b.n	8011b42 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a32      	ldr	r2, [pc, #200]	@ (8011b4c <HAL_DMA_Init+0xe0>)
 8011a84:	4694      	mov	ip, r2
 8011a86:	4463      	add	r3, ip
 8011a88:	2114      	movs	r1, #20
 8011a8a:	0018      	movs	r0, r3
 8011a8c:	f7ee fb8a 	bl	80001a4 <__udivsi3>
 8011a90:	0003      	movs	r3, r0
 8011a92:	009a      	lsls	r2, r3, #2
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8011b50 <HAL_DMA_Init+0xe4>)
 8011a9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2225      	movs	r2, #37	@ 0x25
 8011aa2:	2102      	movs	r1, #2
 8011aa4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	4a28      	ldr	r2, [pc, #160]	@ (8011b54 <HAL_DMA_Init+0xe8>)
 8011ab2:	4013      	ands	r3, r2
 8011ab4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8011abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	691b      	ldr	r3, [r3, #16]
 8011ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	699b      	ldr	r3, [r3, #24]
 8011ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6a1b      	ldr	r3, [r3, #32]
 8011adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8011ade:	68fa      	ldr	r2, [r7, #12]
 8011ae0:	4313      	orrs	r3, r2
 8011ae2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	68fa      	ldr	r2, [r7, #12]
 8011aea:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	689a      	ldr	r2, [r3, #8]
 8011af0:	2380      	movs	r3, #128	@ 0x80
 8011af2:	01db      	lsls	r3, r3, #7
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d018      	beq.n	8011b2a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8011af8:	4b17      	ldr	r3, [pc, #92]	@ (8011b58 <HAL_DMA_Init+0xec>)
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b00:	211c      	movs	r1, #28
 8011b02:	400b      	ands	r3, r1
 8011b04:	210f      	movs	r1, #15
 8011b06:	4099      	lsls	r1, r3
 8011b08:	000b      	movs	r3, r1
 8011b0a:	43d9      	mvns	r1, r3
 8011b0c:	4b12      	ldr	r3, [pc, #72]	@ (8011b58 <HAL_DMA_Init+0xec>)
 8011b0e:	400a      	ands	r2, r1
 8011b10:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8011b12:	4b11      	ldr	r3, [pc, #68]	@ (8011b58 <HAL_DMA_Init+0xec>)
 8011b14:	6819      	ldr	r1, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	685a      	ldr	r2, [r3, #4]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b1e:	201c      	movs	r0, #28
 8011b20:	4003      	ands	r3, r0
 8011b22:	409a      	lsls	r2, r3
 8011b24:	4b0c      	ldr	r3, [pc, #48]	@ (8011b58 <HAL_DMA_Init+0xec>)
 8011b26:	430a      	orrs	r2, r1
 8011b28:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2225      	movs	r2, #37	@ 0x25
 8011b34:	2101      	movs	r1, #1
 8011b36:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2224      	movs	r2, #36	@ 0x24
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	0018      	movs	r0, r3
 8011b44:	46bd      	mov	sp, r7
 8011b46:	b004      	add	sp, #16
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	46c0      	nop			@ (mov r8, r8)
 8011b4c:	bffdfff8 	.word	0xbffdfff8
 8011b50:	40020000 	.word	0x40020000
 8011b54:	ffff800f 	.word	0xffff800f
 8011b58:	400200a8 	.word	0x400200a8

08011b5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b086      	sub	sp, #24
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	607a      	str	r2, [r7, #4]
 8011b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011b6a:	2317      	movs	r3, #23
 8011b6c:	18fb      	adds	r3, r7, r3
 8011b6e:	2200      	movs	r2, #0
 8011b70:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2224      	movs	r2, #36	@ 0x24
 8011b76:	5c9b      	ldrb	r3, [r3, r2]
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d101      	bne.n	8011b80 <HAL_DMA_Start_IT+0x24>
 8011b7c:	2302      	movs	r3, #2
 8011b7e:	e04f      	b.n	8011c20 <HAL_DMA_Start_IT+0xc4>
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2224      	movs	r2, #36	@ 0x24
 8011b84:	2101      	movs	r1, #1
 8011b86:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2225      	movs	r2, #37	@ 0x25
 8011b8c:	5c9b      	ldrb	r3, [r3, r2]
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	d13a      	bne.n	8011c0a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2225      	movs	r2, #37	@ 0x25
 8011b98:	2102      	movs	r1, #2
 8011b9a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2101      	movs	r1, #1
 8011bae:	438a      	bics	r2, r1
 8011bb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	68b9      	ldr	r1, [r7, #8]
 8011bb8:	68f8      	ldr	r0, [r7, #12]
 8011bba:	f000 f976 	bl	8011eaa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d008      	beq.n	8011bd8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	681a      	ldr	r2, [r3, #0]
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	210e      	movs	r1, #14
 8011bd2:	430a      	orrs	r2, r1
 8011bd4:	601a      	str	r2, [r3, #0]
 8011bd6:	e00f      	b.n	8011bf8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2104      	movs	r1, #4
 8011be4:	438a      	bics	r2, r1
 8011be6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	210a      	movs	r1, #10
 8011bf4:	430a      	orrs	r2, r1
 8011bf6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2101      	movs	r1, #1
 8011c04:	430a      	orrs	r2, r1
 8011c06:	601a      	str	r2, [r3, #0]
 8011c08:	e007      	b.n	8011c1a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	2224      	movs	r2, #36	@ 0x24
 8011c0e:	2100      	movs	r1, #0
 8011c10:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8011c12:	2317      	movs	r3, #23
 8011c14:	18fb      	adds	r3, r7, r3
 8011c16:	2202      	movs	r2, #2
 8011c18:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8011c1a:	2317      	movs	r3, #23
 8011c1c:	18fb      	adds	r3, r7, r3
 8011c1e:	781b      	ldrb	r3, [r3, #0]
}
 8011c20:	0018      	movs	r0, r3
 8011c22:	46bd      	mov	sp, r7
 8011c24:	b006      	add	sp, #24
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011c30:	230f      	movs	r3, #15
 8011c32:	18fb      	adds	r3, r7, r3
 8011c34:	2200      	movs	r2, #0
 8011c36:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2225      	movs	r2, #37	@ 0x25
 8011c3c:	5c9b      	ldrb	r3, [r3, r2]
 8011c3e:	b2db      	uxtb	r3, r3
 8011c40:	2b02      	cmp	r3, #2
 8011c42:	d008      	beq.n	8011c56 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2204      	movs	r2, #4
 8011c48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2224      	movs	r2, #36	@ 0x24
 8011c4e:	2100      	movs	r1, #0
 8011c50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8011c52:	2301      	movs	r3, #1
 8011c54:	e024      	b.n	8011ca0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	210e      	movs	r1, #14
 8011c62:	438a      	bics	r2, r1
 8011c64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	681a      	ldr	r2, [r3, #0]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2101      	movs	r1, #1
 8011c72:	438a      	bics	r2, r1
 8011c74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c7a:	221c      	movs	r2, #28
 8011c7c:	401a      	ands	r2, r3
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c82:	2101      	movs	r1, #1
 8011c84:	4091      	lsls	r1, r2
 8011c86:	000a      	movs	r2, r1
 8011c88:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2225      	movs	r2, #37	@ 0x25
 8011c8e:	2101      	movs	r1, #1
 8011c90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2224      	movs	r2, #36	@ 0x24
 8011c96:	2100      	movs	r1, #0
 8011c98:	5499      	strb	r1, [r3, r2]

    return status;
 8011c9a:	230f      	movs	r3, #15
 8011c9c:	18fb      	adds	r3, r7, r3
 8011c9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ca0:	0018      	movs	r0, r3
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	b004      	add	sp, #16
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b084      	sub	sp, #16
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011cb0:	210f      	movs	r1, #15
 8011cb2:	187b      	adds	r3, r7, r1
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2225      	movs	r2, #37	@ 0x25
 8011cbc:	5c9b      	ldrb	r3, [r3, r2]
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	d006      	beq.n	8011cd2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2204      	movs	r2, #4
 8011cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8011cca:	187b      	adds	r3, r7, r1
 8011ccc:	2201      	movs	r2, #1
 8011cce:	701a      	strb	r2, [r3, #0]
 8011cd0:	e02a      	b.n	8011d28 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	681a      	ldr	r2, [r3, #0]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	210e      	movs	r1, #14
 8011cde:	438a      	bics	r2, r1
 8011ce0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2101      	movs	r1, #1
 8011cee:	438a      	bics	r2, r1
 8011cf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cf6:	221c      	movs	r2, #28
 8011cf8:	401a      	ands	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011cfe:	2101      	movs	r1, #1
 8011d00:	4091      	lsls	r1, r2
 8011d02:	000a      	movs	r2, r1
 8011d04:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2225      	movs	r2, #37	@ 0x25
 8011d0a:	2101      	movs	r1, #1
 8011d0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2224      	movs	r2, #36	@ 0x24
 8011d12:	2100      	movs	r1, #0
 8011d14:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d004      	beq.n	8011d28 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	0010      	movs	r0, r2
 8011d26:	4798      	blx	r3
    }
  }
  return status;
 8011d28:	230f      	movs	r3, #15
 8011d2a:	18fb      	adds	r3, r7, r3
 8011d2c:	781b      	ldrb	r3, [r3, #0]
}
 8011d2e:	0018      	movs	r0, r3
 8011d30:	46bd      	mov	sp, r7
 8011d32:	b004      	add	sp, #16
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011d36:	b580      	push	{r7, lr}
 8011d38:	b084      	sub	sp, #16
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d52:	221c      	movs	r2, #28
 8011d54:	4013      	ands	r3, r2
 8011d56:	2204      	movs	r2, #4
 8011d58:	409a      	lsls	r2, r3
 8011d5a:	0013      	movs	r3, r2
 8011d5c:	68fa      	ldr	r2, [r7, #12]
 8011d5e:	4013      	ands	r3, r2
 8011d60:	d026      	beq.n	8011db0 <HAL_DMA_IRQHandler+0x7a>
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	2204      	movs	r2, #4
 8011d66:	4013      	ands	r3, r2
 8011d68:	d022      	beq.n	8011db0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2220      	movs	r2, #32
 8011d72:	4013      	ands	r3, r2
 8011d74:	d107      	bne.n	8011d86 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2104      	movs	r1, #4
 8011d82:	438a      	bics	r2, r1
 8011d84:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d8a:	221c      	movs	r2, #28
 8011d8c:	401a      	ands	r2, r3
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d92:	2104      	movs	r1, #4
 8011d94:	4091      	lsls	r1, r2
 8011d96:	000a      	movs	r2, r1
 8011d98:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d100      	bne.n	8011da4 <HAL_DMA_IRQHandler+0x6e>
 8011da2:	e071      	b.n	8011e88 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011da8:	687a      	ldr	r2, [r7, #4]
 8011daa:	0010      	movs	r0, r2
 8011dac:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8011dae:	e06b      	b.n	8011e88 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011db4:	221c      	movs	r2, #28
 8011db6:	4013      	ands	r3, r2
 8011db8:	2202      	movs	r2, #2
 8011dba:	409a      	lsls	r2, r3
 8011dbc:	0013      	movs	r3, r2
 8011dbe:	68fa      	ldr	r2, [r7, #12]
 8011dc0:	4013      	ands	r3, r2
 8011dc2:	d02d      	beq.n	8011e20 <HAL_DMA_IRQHandler+0xea>
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	2202      	movs	r2, #2
 8011dc8:	4013      	ands	r3, r2
 8011dca:	d029      	beq.n	8011e20 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2220      	movs	r2, #32
 8011dd4:	4013      	ands	r3, r2
 8011dd6:	d10b      	bne.n	8011df0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	210a      	movs	r1, #10
 8011de4:	438a      	bics	r2, r1
 8011de6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2225      	movs	r2, #37	@ 0x25
 8011dec:	2101      	movs	r1, #1
 8011dee:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011df4:	221c      	movs	r2, #28
 8011df6:	401a      	ands	r2, r3
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011dfc:	2102      	movs	r1, #2
 8011dfe:	4091      	lsls	r1, r2
 8011e00:	000a      	movs	r2, r1
 8011e02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2224      	movs	r2, #36	@ 0x24
 8011e08:	2100      	movs	r1, #0
 8011e0a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d039      	beq.n	8011e88 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	0010      	movs	r0, r2
 8011e1c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8011e1e:	e033      	b.n	8011e88 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e24:	221c      	movs	r2, #28
 8011e26:	4013      	ands	r3, r2
 8011e28:	2208      	movs	r2, #8
 8011e2a:	409a      	lsls	r2, r3
 8011e2c:	0013      	movs	r3, r2
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	4013      	ands	r3, r2
 8011e32:	d02a      	beq.n	8011e8a <HAL_DMA_IRQHandler+0x154>
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	2208      	movs	r2, #8
 8011e38:	4013      	ands	r3, r2
 8011e3a:	d026      	beq.n	8011e8a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	210e      	movs	r1, #14
 8011e48:	438a      	bics	r2, r1
 8011e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e50:	221c      	movs	r2, #28
 8011e52:	401a      	ands	r2, r3
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e58:	2101      	movs	r1, #1
 8011e5a:	4091      	lsls	r1, r2
 8011e5c:	000a      	movs	r2, r1
 8011e5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2201      	movs	r2, #1
 8011e64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2225      	movs	r2, #37	@ 0x25
 8011e6a:	2101      	movs	r1, #1
 8011e6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2224      	movs	r2, #36	@ 0x24
 8011e72:	2100      	movs	r1, #0
 8011e74:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d005      	beq.n	8011e8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	0010      	movs	r0, r2
 8011e86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8011e88:	46c0      	nop			@ (mov r8, r8)
 8011e8a:	46c0      	nop			@ (mov r8, r8)
}
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	b004      	add	sp, #16
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8011e92:	b580      	push	{r7, lr}
 8011e94:	b082      	sub	sp, #8
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2225      	movs	r2, #37	@ 0x25
 8011e9e:	5c9b      	ldrb	r3, [r3, r2]
 8011ea0:	b2db      	uxtb	r3, r3
}
 8011ea2:	0018      	movs	r0, r3
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	b002      	add	sp, #8
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b084      	sub	sp, #16
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	60f8      	str	r0, [r7, #12]
 8011eb2:	60b9      	str	r1, [r7, #8]
 8011eb4:	607a      	str	r2, [r7, #4]
 8011eb6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ebc:	221c      	movs	r2, #28
 8011ebe:	401a      	ands	r2, r3
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	4091      	lsls	r1, r2
 8011ec8:	000a      	movs	r2, r1
 8011eca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	683a      	ldr	r2, [r7, #0]
 8011ed2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	689b      	ldr	r3, [r3, #8]
 8011ed8:	2b10      	cmp	r3, #16
 8011eda:	d108      	bne.n	8011eee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	68ba      	ldr	r2, [r7, #8]
 8011eea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8011eec:	e007      	b.n	8011efe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	68ba      	ldr	r2, [r7, #8]
 8011ef4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	60da      	str	r2, [r3, #12]
}
 8011efe:	46c0      	nop			@ (mov r8, r8)
 8011f00:	46bd      	mov	sp, r7
 8011f02:	b004      	add	sp, #16
 8011f04:	bd80      	pop	{r7, pc}
	...

08011f08 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8011f10:	f7ff f8d2 	bl	80110b8 <HAL_GetTick>
 8011f14:	0003      	movs	r3, r0
 8011f16:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011f18:	e00f      	b.n	8011f3a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	d00c      	beq.n	8011f3a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d007      	beq.n	8011f36 <FLASH_WaitForLastOperation+0x2e>
 8011f26:	f7ff f8c7 	bl	80110b8 <HAL_GetTick>
 8011f2a:	0002      	movs	r2, r0
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d201      	bcs.n	8011f3a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8011f36:	2303      	movs	r3, #3
 8011f38:	e052      	b.n	8011fe0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011f3c:	699b      	ldr	r3, [r3, #24]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	4013      	ands	r3, r2
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d0e9      	beq.n	8011f1a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011f46:	4b28      	ldr	r3, [pc, #160]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011f48:	699b      	ldr	r3, [r3, #24]
 8011f4a:	2202      	movs	r2, #2
 8011f4c:	4013      	ands	r3, r2
 8011f4e:	2b02      	cmp	r3, #2
 8011f50:	d102      	bne.n	8011f58 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011f52:	4b25      	ldr	r3, [pc, #148]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011f54:	2202      	movs	r2, #2
 8011f56:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8011f58:	4b23      	ldr	r3, [pc, #140]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011f5a:	699a      	ldr	r2, [r3, #24]
 8011f5c:	2380      	movs	r3, #128	@ 0x80
 8011f5e:	005b      	lsls	r3, r3, #1
 8011f60:	401a      	ands	r2, r3
 8011f62:	2380      	movs	r3, #128	@ 0x80
 8011f64:	005b      	lsls	r3, r3, #1
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d035      	beq.n	8011fd6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8011f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011f6c:	699a      	ldr	r2, [r3, #24]
 8011f6e:	2380      	movs	r3, #128	@ 0x80
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8011f74:	2380      	movs	r3, #128	@ 0x80
 8011f76:	009b      	lsls	r3, r3, #2
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d02c      	beq.n	8011fd6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8011f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011f7e:	699a      	ldr	r2, [r3, #24]
 8011f80:	2380      	movs	r3, #128	@ 0x80
 8011f82:	00db      	lsls	r3, r3, #3
 8011f84:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8011f86:	2380      	movs	r3, #128	@ 0x80
 8011f88:	00db      	lsls	r3, r3, #3
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d023      	beq.n	8011fd6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8011f8e:	4b16      	ldr	r3, [pc, #88]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011f90:	699a      	ldr	r2, [r3, #24]
 8011f92:	2380      	movs	r3, #128	@ 0x80
 8011f94:	011b      	lsls	r3, r3, #4
 8011f96:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8011f98:	2380      	movs	r3, #128	@ 0x80
 8011f9a:	011b      	lsls	r3, r3, #4
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d01a      	beq.n	8011fd6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8011fa0:	4b11      	ldr	r3, [pc, #68]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011fa2:	699a      	ldr	r2, [r3, #24]
 8011fa4:	2380      	movs	r3, #128	@ 0x80
 8011fa6:	019b      	lsls	r3, r3, #6
 8011fa8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8011faa:	2380      	movs	r3, #128	@ 0x80
 8011fac:	019b      	lsls	r3, r3, #6
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d011      	beq.n	8011fd6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8011fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011fb4:	699a      	ldr	r2, [r3, #24]
 8011fb6:	2380      	movs	r3, #128	@ 0x80
 8011fb8:	029b      	lsls	r3, r3, #10
 8011fba:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8011fbc:	2380      	movs	r3, #128	@ 0x80
 8011fbe:	029b      	lsls	r3, r3, #10
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d008      	beq.n	8011fd6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8011fc4:	4b08      	ldr	r3, [pc, #32]	@ (8011fe8 <FLASH_WaitForLastOperation+0xe0>)
 8011fc6:	699a      	ldr	r2, [r3, #24]
 8011fc8:	2380      	movs	r3, #128	@ 0x80
 8011fca:	025b      	lsls	r3, r3, #9
 8011fcc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8011fce:	2380      	movs	r3, #128	@ 0x80
 8011fd0:	025b      	lsls	r3, r3, #9
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d103      	bne.n	8011fde <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8011fd6:	f000 f809 	bl	8011fec <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e000      	b.n	8011fe0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8011fde:	2300      	movs	r3, #0
}
 8011fe0:	0018      	movs	r0, r3
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	b004      	add	sp, #16
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	40022000 	.word	0x40022000

08011fec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011ff6:	4b49      	ldr	r3, [pc, #292]	@ (801211c <FLASH_SetErrorCode+0x130>)
 8011ff8:	699a      	ldr	r2, [r3, #24]
 8011ffa:	2380      	movs	r3, #128	@ 0x80
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	401a      	ands	r2, r3
 8012000:	2380      	movs	r3, #128	@ 0x80
 8012002:	005b      	lsls	r3, r3, #1
 8012004:	429a      	cmp	r2, r3
 8012006:	d10a      	bne.n	801201e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012008:	4b45      	ldr	r3, [pc, #276]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 801200a:	695b      	ldr	r3, [r3, #20]
 801200c:	2202      	movs	r2, #2
 801200e:	431a      	orrs	r2, r3
 8012010:	4b43      	ldr	r3, [pc, #268]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 8012012:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2280      	movs	r2, #128	@ 0x80
 8012018:	0052      	lsls	r2, r2, #1
 801201a:	4313      	orrs	r3, r2
 801201c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 801201e:	4b3f      	ldr	r3, [pc, #252]	@ (801211c <FLASH_SetErrorCode+0x130>)
 8012020:	699a      	ldr	r2, [r3, #24]
 8012022:	2380      	movs	r3, #128	@ 0x80
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	401a      	ands	r2, r3
 8012028:	2380      	movs	r3, #128	@ 0x80
 801202a:	009b      	lsls	r3, r3, #2
 801202c:	429a      	cmp	r2, r3
 801202e:	d10a      	bne.n	8012046 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8012030:	4b3b      	ldr	r3, [pc, #236]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 8012032:	695b      	ldr	r3, [r3, #20]
 8012034:	2201      	movs	r2, #1
 8012036:	431a      	orrs	r2, r3
 8012038:	4b39      	ldr	r3, [pc, #228]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 801203a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2280      	movs	r2, #128	@ 0x80
 8012040:	0092      	lsls	r2, r2, #2
 8012042:	4313      	orrs	r3, r2
 8012044:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8012046:	4b35      	ldr	r3, [pc, #212]	@ (801211c <FLASH_SetErrorCode+0x130>)
 8012048:	699a      	ldr	r2, [r3, #24]
 801204a:	2380      	movs	r3, #128	@ 0x80
 801204c:	00db      	lsls	r3, r3, #3
 801204e:	401a      	ands	r2, r3
 8012050:	2380      	movs	r3, #128	@ 0x80
 8012052:	00db      	lsls	r3, r3, #3
 8012054:	429a      	cmp	r2, r3
 8012056:	d10a      	bne.n	801206e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8012058:	4b31      	ldr	r3, [pc, #196]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 801205a:	695b      	ldr	r3, [r3, #20]
 801205c:	2208      	movs	r2, #8
 801205e:	431a      	orrs	r2, r3
 8012060:	4b2f      	ldr	r3, [pc, #188]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 8012062:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2280      	movs	r2, #128	@ 0x80
 8012068:	00d2      	lsls	r2, r2, #3
 801206a:	4313      	orrs	r3, r2
 801206c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 801206e:	4b2b      	ldr	r3, [pc, #172]	@ (801211c <FLASH_SetErrorCode+0x130>)
 8012070:	699a      	ldr	r2, [r3, #24]
 8012072:	2380      	movs	r3, #128	@ 0x80
 8012074:	011b      	lsls	r3, r3, #4
 8012076:	401a      	ands	r2, r3
 8012078:	2380      	movs	r3, #128	@ 0x80
 801207a:	011b      	lsls	r3, r3, #4
 801207c:	429a      	cmp	r2, r3
 801207e:	d10a      	bne.n	8012096 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8012080:	4b27      	ldr	r3, [pc, #156]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 8012082:	695b      	ldr	r3, [r3, #20]
 8012084:	2204      	movs	r2, #4
 8012086:	431a      	orrs	r2, r3
 8012088:	4b25      	ldr	r3, [pc, #148]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 801208a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2280      	movs	r2, #128	@ 0x80
 8012090:	0112      	lsls	r2, r2, #4
 8012092:	4313      	orrs	r3, r2
 8012094:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8012096:	4b21      	ldr	r3, [pc, #132]	@ (801211c <FLASH_SetErrorCode+0x130>)
 8012098:	699a      	ldr	r2, [r3, #24]
 801209a:	2380      	movs	r3, #128	@ 0x80
 801209c:	019b      	lsls	r3, r3, #6
 801209e:	401a      	ands	r2, r3
 80120a0:	2380      	movs	r3, #128	@ 0x80
 80120a2:	019b      	lsls	r3, r3, #6
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d10a      	bne.n	80120be <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80120a8:	4b1d      	ldr	r3, [pc, #116]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 80120aa:	695b      	ldr	r3, [r3, #20]
 80120ac:	2210      	movs	r2, #16
 80120ae:	431a      	orrs	r2, r3
 80120b0:	4b1b      	ldr	r3, [pc, #108]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 80120b2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2280      	movs	r2, #128	@ 0x80
 80120b8:	0192      	lsls	r2, r2, #6
 80120ba:	4313      	orrs	r3, r2
 80120bc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80120be:	4b17      	ldr	r3, [pc, #92]	@ (801211c <FLASH_SetErrorCode+0x130>)
 80120c0:	699a      	ldr	r2, [r3, #24]
 80120c2:	2380      	movs	r3, #128	@ 0x80
 80120c4:	029b      	lsls	r3, r3, #10
 80120c6:	401a      	ands	r2, r3
 80120c8:	2380      	movs	r3, #128	@ 0x80
 80120ca:	029b      	lsls	r3, r3, #10
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d109      	bne.n	80120e4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80120d0:	4b13      	ldr	r3, [pc, #76]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 80120d2:	695b      	ldr	r3, [r3, #20]
 80120d4:	2220      	movs	r2, #32
 80120d6:	431a      	orrs	r2, r3
 80120d8:	4b11      	ldr	r3, [pc, #68]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 80120da:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2220      	movs	r2, #32
 80120e0:	4313      	orrs	r3, r2
 80120e2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80120e4:	4b0d      	ldr	r3, [pc, #52]	@ (801211c <FLASH_SetErrorCode+0x130>)
 80120e6:	699a      	ldr	r2, [r3, #24]
 80120e8:	2380      	movs	r3, #128	@ 0x80
 80120ea:	025b      	lsls	r3, r3, #9
 80120ec:	401a      	ands	r2, r3
 80120ee:	2380      	movs	r3, #128	@ 0x80
 80120f0:	025b      	lsls	r3, r3, #9
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d10a      	bne.n	801210c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80120f6:	4b0a      	ldr	r3, [pc, #40]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 80120f8:	695b      	ldr	r3, [r3, #20]
 80120fa:	2240      	movs	r2, #64	@ 0x40
 80120fc:	431a      	orrs	r2, r3
 80120fe:	4b08      	ldr	r3, [pc, #32]	@ (8012120 <FLASH_SetErrorCode+0x134>)
 8012100:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2280      	movs	r2, #128	@ 0x80
 8012106:	0252      	lsls	r2, r2, #9
 8012108:	4313      	orrs	r3, r2
 801210a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 801210c:	4b03      	ldr	r3, [pc, #12]	@ (801211c <FLASH_SetErrorCode+0x130>)
 801210e:	687a      	ldr	r2, [r7, #4]
 8012110:	619a      	str	r2, [r3, #24]
}  
 8012112:	46c0      	nop			@ (mov r8, r8)
 8012114:	46bd      	mov	sp, r7
 8012116:	b002      	add	sp, #8
 8012118:	bd80      	pop	{r7, pc}
 801211a:	46c0      	nop			@ (mov r8, r8)
 801211c:	40022000 	.word	0x40022000
 8012120:	20002198 	.word	0x20002198

08012124 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b084      	sub	sp, #16
 8012128:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801212a:	4b12      	ldr	r3, [pc, #72]	@ (8012174 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	2201      	movs	r2, #1
 8012130:	4013      	ands	r3, r2
 8012132:	d019      	beq.n	8012168 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012134:	f3ef 8310 	mrs	r3, PRIMASK
 8012138:	607b      	str	r3, [r7, #4]
  return(result);
 801213a:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 801213c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801213e:	b672      	cpsid	i
}
 8012140:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8012142:	4b0c      	ldr	r3, [pc, #48]	@ (8012174 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8012144:	4a0c      	ldr	r2, [pc, #48]	@ (8012178 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8012146:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8012148:	4b0a      	ldr	r3, [pc, #40]	@ (8012174 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801214a:	4a0c      	ldr	r2, [pc, #48]	@ (801217c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 801214c:	60da      	str	r2, [r3, #12]
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	f383 8810 	msr	PRIMASK, r3
}
 8012158:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801215a:	4b06      	ldr	r3, [pc, #24]	@ (8012174 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	2201      	movs	r2, #1
 8012160:	4013      	ands	r3, r2
 8012162:	d001      	beq.n	8012168 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8012164:	2301      	movs	r3, #1
 8012166:	e000      	b.n	801216a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8012168:	2300      	movs	r3, #0
}
 801216a:	0018      	movs	r0, r3
 801216c:	46bd      	mov	sp, r7
 801216e:	b004      	add	sp, #16
 8012170:	bd80      	pop	{r7, pc}
 8012172:	46c0      	nop			@ (mov r8, r8)
 8012174:	40022000 	.word	0x40022000
 8012178:	89abcdef 	.word	0x89abcdef
 801217c:	02030405 	.word	0x02030405

08012180 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8012184:	4b04      	ldr	r3, [pc, #16]	@ (8012198 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8012186:	685a      	ldr	r2, [r3, #4]
 8012188:	4b03      	ldr	r3, [pc, #12]	@ (8012198 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801218a:	2101      	movs	r1, #1
 801218c:	430a      	orrs	r2, r1
 801218e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8012190:	2300      	movs	r3, #0
}
 8012192:	0018      	movs	r0, r3
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	40022000 	.word	0x40022000

0801219c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 801219c:	b5b0      	push	{r4, r5, r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80121a4:	250f      	movs	r5, #15
 80121a6:	197b      	adds	r3, r7, r5
 80121a8:	2200      	movs	r2, #0
 80121aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80121ac:	197c      	adds	r4, r7, r5
 80121ae:	4b0f      	ldr	r3, [pc, #60]	@ (80121ec <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80121b0:	0018      	movs	r0, r3
 80121b2:	f7ff fea9 	bl	8011f08 <FLASH_WaitForLastOperation>
 80121b6:	0003      	movs	r3, r0
 80121b8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80121ba:	0029      	movs	r1, r5
 80121bc:	187b      	adds	r3, r7, r1
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d10c      	bne.n	80121de <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80121c4:	4b0a      	ldr	r3, [pc, #40]	@ (80121f0 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80121c6:	2200      	movs	r2, #0
 80121c8:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80121d0:	187c      	adds	r4, r7, r1
 80121d2:	4b06      	ldr	r3, [pc, #24]	@ (80121ec <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80121d4:	0018      	movs	r0, r3
 80121d6:	f7ff fe97 	bl	8011f08 <FLASH_WaitForLastOperation>
 80121da:	0003      	movs	r3, r0
 80121dc:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80121de:	230f      	movs	r3, #15
 80121e0:	18fb      	adds	r3, r7, r3
 80121e2:	781b      	ldrb	r3, [r3, #0]
}  
 80121e4:	0018      	movs	r0, r3
 80121e6:	46bd      	mov	sp, r7
 80121e8:	b004      	add	sp, #16
 80121ea:	bdb0      	pop	{r4, r5, r7, pc}
 80121ec:	0000c350 	.word	0x0000c350
 80121f0:	20002198 	.word	0x20002198

080121f4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80121f4:	b5b0      	push	{r4, r5, r7, lr}
 80121f6:	b086      	sub	sp, #24
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	60f8      	str	r0, [r7, #12]
 80121fc:	60b9      	str	r1, [r7, #8]
 80121fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012200:	2317      	movs	r3, #23
 8012202:	18fb      	adds	r3, r7, r3
 8012204:	2201      	movs	r2, #1
 8012206:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012208:	4b24      	ldr	r3, [pc, #144]	@ (801229c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801220a:	7c1b      	ldrb	r3, [r3, #16]
 801220c:	2b01      	cmp	r3, #1
 801220e:	d101      	bne.n	8012214 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8012210:	2302      	movs	r3, #2
 8012212:	e03e      	b.n	8012292 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8012214:	4b21      	ldr	r3, [pc, #132]	@ (801229c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8012216:	2201      	movs	r2, #1
 8012218:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801221a:	2517      	movs	r5, #23
 801221c:	197c      	adds	r4, r7, r5
 801221e:	4b20      	ldr	r3, [pc, #128]	@ (80122a0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8012220:	0018      	movs	r0, r3
 8012222:	f7ff fe71 	bl	8011f08 <FLASH_WaitForLastOperation>
 8012226:	0003      	movs	r3, r0
 8012228:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801222a:	197b      	adds	r3, r7, r5
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d129      	bne.n	8012286 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012232:	4b1a      	ldr	r3, [pc, #104]	@ (801229c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8012234:	2200      	movs	r2, #0
 8012236:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2b02      	cmp	r3, #2
 801223c:	d103      	bne.n	8012246 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	601a      	str	r2, [r3, #0]
 8012244:	e013      	b.n	801226e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	2b01      	cmp	r3, #1
 801224a:	d104      	bne.n	8012256 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	b292      	uxth	r2, r2
 8012252:	801a      	strh	r2, [r3, #0]
 8012254:	e00b      	b.n	801226e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d104      	bne.n	8012266 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	b2d2      	uxtb	r2, r2
 8012262:	701a      	strb	r2, [r3, #0]
 8012264:	e003      	b.n	801226e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8012266:	2317      	movs	r3, #23
 8012268:	18fb      	adds	r3, r7, r3
 801226a:	2201      	movs	r2, #1
 801226c:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 801226e:	2217      	movs	r2, #23
 8012270:	18bb      	adds	r3, r7, r2
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d106      	bne.n	8012286 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012278:	18bc      	adds	r4, r7, r2
 801227a:	4b09      	ldr	r3, [pc, #36]	@ (80122a0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 801227c:	0018      	movs	r0, r3
 801227e:	f7ff fe43 	bl	8011f08 <FLASH_WaitForLastOperation>
 8012282:	0003      	movs	r3, r0
 8012284:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012286:	4b05      	ldr	r3, [pc, #20]	@ (801229c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8012288:	2200      	movs	r2, #0
 801228a:	741a      	strb	r2, [r3, #16]

  return status;
 801228c:	2317      	movs	r3, #23
 801228e:	18fb      	adds	r3, r7, r3
 8012290:	781b      	ldrb	r3, [r3, #0]
}
 8012292:	0018      	movs	r0, r3
 8012294:	46bd      	mov	sp, r7
 8012296:	b006      	add	sp, #24
 8012298:	bdb0      	pop	{r4, r5, r7, pc}
 801229a:	46c0      	nop			@ (mov r8, r8)
 801229c:	20002198 	.word	0x20002198
 80122a0:	0000c350 	.word	0x0000c350

080122a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80122ae:	2300      	movs	r3, #0
 80122b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80122b2:	2300      	movs	r3, #0
 80122b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80122b6:	2300      	movs	r3, #0
 80122b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80122ba:	e155      	b.n	8012568 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	2101      	movs	r1, #1
 80122c2:	697a      	ldr	r2, [r7, #20]
 80122c4:	4091      	lsls	r1, r2
 80122c6:	000a      	movs	r2, r1
 80122c8:	4013      	ands	r3, r2
 80122ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d100      	bne.n	80122d4 <HAL_GPIO_Init+0x30>
 80122d2:	e146      	b.n	8012562 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	2203      	movs	r2, #3
 80122da:	4013      	ands	r3, r2
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d005      	beq.n	80122ec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	2203      	movs	r2, #3
 80122e6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80122e8:	2b02      	cmp	r3, #2
 80122ea:	d130      	bne.n	801234e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	689b      	ldr	r3, [r3, #8]
 80122f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	2203      	movs	r2, #3
 80122f8:	409a      	lsls	r2, r3
 80122fa:	0013      	movs	r3, r2
 80122fc:	43da      	mvns	r2, r3
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	4013      	ands	r3, r2
 8012302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	68da      	ldr	r2, [r3, #12]
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	005b      	lsls	r3, r3, #1
 801230c:	409a      	lsls	r2, r3
 801230e:	0013      	movs	r3, r2
 8012310:	693a      	ldr	r2, [r7, #16]
 8012312:	4313      	orrs	r3, r2
 8012314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	693a      	ldr	r2, [r7, #16]
 801231a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012322:	2201      	movs	r2, #1
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	409a      	lsls	r2, r3
 8012328:	0013      	movs	r3, r2
 801232a:	43da      	mvns	r2, r3
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	4013      	ands	r3, r2
 8012330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	091b      	lsrs	r3, r3, #4
 8012338:	2201      	movs	r2, #1
 801233a:	401a      	ands	r2, r3
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	409a      	lsls	r2, r3
 8012340:	0013      	movs	r3, r2
 8012342:	693a      	ldr	r2, [r7, #16]
 8012344:	4313      	orrs	r3, r2
 8012346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	693a      	ldr	r2, [r7, #16]
 801234c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	2203      	movs	r2, #3
 8012354:	4013      	ands	r3, r2
 8012356:	2b03      	cmp	r3, #3
 8012358:	d017      	beq.n	801238a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	005b      	lsls	r3, r3, #1
 8012364:	2203      	movs	r2, #3
 8012366:	409a      	lsls	r2, r3
 8012368:	0013      	movs	r3, r2
 801236a:	43da      	mvns	r2, r3
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	4013      	ands	r3, r2
 8012370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	689a      	ldr	r2, [r3, #8]
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	005b      	lsls	r3, r3, #1
 801237a:	409a      	lsls	r2, r3
 801237c:	0013      	movs	r3, r2
 801237e:	693a      	ldr	r2, [r7, #16]
 8012380:	4313      	orrs	r3, r2
 8012382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	693a      	ldr	r2, [r7, #16]
 8012388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	2203      	movs	r2, #3
 8012390:	4013      	ands	r3, r2
 8012392:	2b02      	cmp	r3, #2
 8012394:	d123      	bne.n	80123de <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	08da      	lsrs	r2, r3, #3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	3208      	adds	r2, #8
 801239e:	0092      	lsls	r2, r2, #2
 80123a0:	58d3      	ldr	r3, [r2, r3]
 80123a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	2207      	movs	r2, #7
 80123a8:	4013      	ands	r3, r2
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	220f      	movs	r2, #15
 80123ae:	409a      	lsls	r2, r3
 80123b0:	0013      	movs	r3, r2
 80123b2:	43da      	mvns	r2, r3
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	4013      	ands	r3, r2
 80123b8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	691a      	ldr	r2, [r3, #16]
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	2107      	movs	r1, #7
 80123c2:	400b      	ands	r3, r1
 80123c4:	009b      	lsls	r3, r3, #2
 80123c6:	409a      	lsls	r2, r3
 80123c8:	0013      	movs	r3, r2
 80123ca:	693a      	ldr	r2, [r7, #16]
 80123cc:	4313      	orrs	r3, r2
 80123ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	08da      	lsrs	r2, r3, #3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	3208      	adds	r2, #8
 80123d8:	0092      	lsls	r2, r2, #2
 80123da:	6939      	ldr	r1, [r7, #16]
 80123dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	005b      	lsls	r3, r3, #1
 80123e8:	2203      	movs	r2, #3
 80123ea:	409a      	lsls	r2, r3
 80123ec:	0013      	movs	r3, r2
 80123ee:	43da      	mvns	r2, r3
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	4013      	ands	r3, r2
 80123f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	2203      	movs	r2, #3
 80123fc:	401a      	ands	r2, r3
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	005b      	lsls	r3, r3, #1
 8012402:	409a      	lsls	r2, r3
 8012404:	0013      	movs	r3, r2
 8012406:	693a      	ldr	r2, [r7, #16]
 8012408:	4313      	orrs	r3, r2
 801240a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	693a      	ldr	r2, [r7, #16]
 8012410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	23c0      	movs	r3, #192	@ 0xc0
 8012418:	029b      	lsls	r3, r3, #10
 801241a:	4013      	ands	r3, r2
 801241c:	d100      	bne.n	8012420 <HAL_GPIO_Init+0x17c>
 801241e:	e0a0      	b.n	8012562 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012420:	4b57      	ldr	r3, [pc, #348]	@ (8012580 <HAL_GPIO_Init+0x2dc>)
 8012422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012424:	4b56      	ldr	r3, [pc, #344]	@ (8012580 <HAL_GPIO_Init+0x2dc>)
 8012426:	2101      	movs	r1, #1
 8012428:	430a      	orrs	r2, r1
 801242a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 801242c:	4a55      	ldr	r2, [pc, #340]	@ (8012584 <HAL_GPIO_Init+0x2e0>)
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	089b      	lsrs	r3, r3, #2
 8012432:	3302      	adds	r3, #2
 8012434:	009b      	lsls	r3, r3, #2
 8012436:	589b      	ldr	r3, [r3, r2]
 8012438:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	2203      	movs	r2, #3
 801243e:	4013      	ands	r3, r2
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	220f      	movs	r2, #15
 8012444:	409a      	lsls	r2, r3
 8012446:	0013      	movs	r3, r2
 8012448:	43da      	mvns	r2, r3
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	4013      	ands	r3, r2
 801244e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	23a0      	movs	r3, #160	@ 0xa0
 8012454:	05db      	lsls	r3, r3, #23
 8012456:	429a      	cmp	r2, r3
 8012458:	d01f      	beq.n	801249a <HAL_GPIO_Init+0x1f6>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	4a4a      	ldr	r2, [pc, #296]	@ (8012588 <HAL_GPIO_Init+0x2e4>)
 801245e:	4293      	cmp	r3, r2
 8012460:	d019      	beq.n	8012496 <HAL_GPIO_Init+0x1f2>
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	4a49      	ldr	r2, [pc, #292]	@ (801258c <HAL_GPIO_Init+0x2e8>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d013      	beq.n	8012492 <HAL_GPIO_Init+0x1ee>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	4a48      	ldr	r2, [pc, #288]	@ (8012590 <HAL_GPIO_Init+0x2ec>)
 801246e:	4293      	cmp	r3, r2
 8012470:	d00d      	beq.n	801248e <HAL_GPIO_Init+0x1ea>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	4a47      	ldr	r2, [pc, #284]	@ (8012594 <HAL_GPIO_Init+0x2f0>)
 8012476:	4293      	cmp	r3, r2
 8012478:	d007      	beq.n	801248a <HAL_GPIO_Init+0x1e6>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	4a46      	ldr	r2, [pc, #280]	@ (8012598 <HAL_GPIO_Init+0x2f4>)
 801247e:	4293      	cmp	r3, r2
 8012480:	d101      	bne.n	8012486 <HAL_GPIO_Init+0x1e2>
 8012482:	2305      	movs	r3, #5
 8012484:	e00a      	b.n	801249c <HAL_GPIO_Init+0x1f8>
 8012486:	2306      	movs	r3, #6
 8012488:	e008      	b.n	801249c <HAL_GPIO_Init+0x1f8>
 801248a:	2304      	movs	r3, #4
 801248c:	e006      	b.n	801249c <HAL_GPIO_Init+0x1f8>
 801248e:	2303      	movs	r3, #3
 8012490:	e004      	b.n	801249c <HAL_GPIO_Init+0x1f8>
 8012492:	2302      	movs	r3, #2
 8012494:	e002      	b.n	801249c <HAL_GPIO_Init+0x1f8>
 8012496:	2301      	movs	r3, #1
 8012498:	e000      	b.n	801249c <HAL_GPIO_Init+0x1f8>
 801249a:	2300      	movs	r3, #0
 801249c:	697a      	ldr	r2, [r7, #20]
 801249e:	2103      	movs	r1, #3
 80124a0:	400a      	ands	r2, r1
 80124a2:	0092      	lsls	r2, r2, #2
 80124a4:	4093      	lsls	r3, r2
 80124a6:	693a      	ldr	r2, [r7, #16]
 80124a8:	4313      	orrs	r3, r2
 80124aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80124ac:	4935      	ldr	r1, [pc, #212]	@ (8012584 <HAL_GPIO_Init+0x2e0>)
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	089b      	lsrs	r3, r3, #2
 80124b2:	3302      	adds	r3, #2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	693a      	ldr	r2, [r7, #16]
 80124b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80124ba:	4b38      	ldr	r3, [pc, #224]	@ (801259c <HAL_GPIO_Init+0x2f8>)
 80124bc:	689b      	ldr	r3, [r3, #8]
 80124be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	43da      	mvns	r2, r3
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	4013      	ands	r3, r2
 80124c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	685a      	ldr	r2, [r3, #4]
 80124ce:	2380      	movs	r3, #128	@ 0x80
 80124d0:	035b      	lsls	r3, r3, #13
 80124d2:	4013      	ands	r3, r2
 80124d4:	d003      	beq.n	80124de <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80124d6:	693a      	ldr	r2, [r7, #16]
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	4313      	orrs	r3, r2
 80124dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80124de:	4b2f      	ldr	r3, [pc, #188]	@ (801259c <HAL_GPIO_Init+0x2f8>)
 80124e0:	693a      	ldr	r2, [r7, #16]
 80124e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80124e4:	4b2d      	ldr	r3, [pc, #180]	@ (801259c <HAL_GPIO_Init+0x2f8>)
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	43da      	mvns	r2, r3
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	4013      	ands	r3, r2
 80124f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	685a      	ldr	r2, [r3, #4]
 80124f8:	2380      	movs	r3, #128	@ 0x80
 80124fa:	039b      	lsls	r3, r3, #14
 80124fc:	4013      	ands	r3, r2
 80124fe:	d003      	beq.n	8012508 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8012500:	693a      	ldr	r2, [r7, #16]
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	4313      	orrs	r3, r2
 8012506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8012508:	4b24      	ldr	r3, [pc, #144]	@ (801259c <HAL_GPIO_Init+0x2f8>)
 801250a:	693a      	ldr	r2, [r7, #16]
 801250c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801250e:	4b23      	ldr	r3, [pc, #140]	@ (801259c <HAL_GPIO_Init+0x2f8>)
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	43da      	mvns	r2, r3
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	4013      	ands	r3, r2
 801251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	685a      	ldr	r2, [r3, #4]
 8012522:	2380      	movs	r3, #128	@ 0x80
 8012524:	029b      	lsls	r3, r3, #10
 8012526:	4013      	ands	r3, r2
 8012528:	d003      	beq.n	8012532 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 801252a:	693a      	ldr	r2, [r7, #16]
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	4313      	orrs	r3, r2
 8012530:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8012532:	4b1a      	ldr	r3, [pc, #104]	@ (801259c <HAL_GPIO_Init+0x2f8>)
 8012534:	693a      	ldr	r2, [r7, #16]
 8012536:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012538:	4b18      	ldr	r3, [pc, #96]	@ (801259c <HAL_GPIO_Init+0x2f8>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	43da      	mvns	r2, r3
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	4013      	ands	r3, r2
 8012546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	685a      	ldr	r2, [r3, #4]
 801254c:	2380      	movs	r3, #128	@ 0x80
 801254e:	025b      	lsls	r3, r3, #9
 8012550:	4013      	ands	r3, r2
 8012552:	d003      	beq.n	801255c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8012554:	693a      	ldr	r2, [r7, #16]
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	4313      	orrs	r3, r2
 801255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 801255c:	4b0f      	ldr	r3, [pc, #60]	@ (801259c <HAL_GPIO_Init+0x2f8>)
 801255e:	693a      	ldr	r2, [r7, #16]
 8012560:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	3301      	adds	r3, #1
 8012566:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	40da      	lsrs	r2, r3
 8012570:	1e13      	subs	r3, r2, #0
 8012572:	d000      	beq.n	8012576 <HAL_GPIO_Init+0x2d2>
 8012574:	e6a2      	b.n	80122bc <HAL_GPIO_Init+0x18>
  }
}
 8012576:	46c0      	nop			@ (mov r8, r8)
 8012578:	46c0      	nop			@ (mov r8, r8)
 801257a:	46bd      	mov	sp, r7
 801257c:	b006      	add	sp, #24
 801257e:	bd80      	pop	{r7, pc}
 8012580:	40021000 	.word	0x40021000
 8012584:	40010000 	.word	0x40010000
 8012588:	50000400 	.word	0x50000400
 801258c:	50000800 	.word	0x50000800
 8012590:	50000c00 	.word	0x50000c00
 8012594:	50001000 	.word	0x50001000
 8012598:	50001c00 	.word	0x50001c00
 801259c:	40010400 	.word	0x40010400

080125a0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	000a      	movs	r2, r1
 80125aa:	1cbb      	adds	r3, r7, #2
 80125ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	691b      	ldr	r3, [r3, #16]
 80125b2:	1cba      	adds	r2, r7, #2
 80125b4:	8812      	ldrh	r2, [r2, #0]
 80125b6:	4013      	ands	r3, r2
 80125b8:	d004      	beq.n	80125c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80125ba:	230f      	movs	r3, #15
 80125bc:	18fb      	adds	r3, r7, r3
 80125be:	2201      	movs	r2, #1
 80125c0:	701a      	strb	r2, [r3, #0]
 80125c2:	e003      	b.n	80125cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80125c4:	230f      	movs	r3, #15
 80125c6:	18fb      	adds	r3, r7, r3
 80125c8:	2200      	movs	r2, #0
 80125ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80125cc:	230f      	movs	r3, #15
 80125ce:	18fb      	adds	r3, r7, r3
 80125d0:	781b      	ldrb	r3, [r3, #0]
}
 80125d2:	0018      	movs	r0, r3
 80125d4:	46bd      	mov	sp, r7
 80125d6:	b004      	add	sp, #16
 80125d8:	bd80      	pop	{r7, pc}

080125da <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	0008      	movs	r0, r1
 80125e4:	0011      	movs	r1, r2
 80125e6:	1cbb      	adds	r3, r7, #2
 80125e8:	1c02      	adds	r2, r0, #0
 80125ea:	801a      	strh	r2, [r3, #0]
 80125ec:	1c7b      	adds	r3, r7, #1
 80125ee:	1c0a      	adds	r2, r1, #0
 80125f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80125f2:	1c7b      	adds	r3, r7, #1
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d004      	beq.n	8012604 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80125fa:	1cbb      	adds	r3, r7, #2
 80125fc:	881a      	ldrh	r2, [r3, #0]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8012602:	e003      	b.n	801260c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8012604:	1cbb      	adds	r3, r7, #2
 8012606:	881a      	ldrh	r2, [r3, #0]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801260c:	46c0      	nop			@ (mov r8, r8)
 801260e:	46bd      	mov	sp, r7
 8012610:	b002      	add	sp, #8
 8012612:	bd80      	pop	{r7, pc}

08012614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b082      	sub	sp, #8
 8012618:	af00      	add	r7, sp, #0
 801261a:	0002      	movs	r2, r0
 801261c:	1dbb      	adds	r3, r7, #6
 801261e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8012620:	4b09      	ldr	r3, [pc, #36]	@ (8012648 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8012622:	695b      	ldr	r3, [r3, #20]
 8012624:	1dba      	adds	r2, r7, #6
 8012626:	8812      	ldrh	r2, [r2, #0]
 8012628:	4013      	ands	r3, r2
 801262a:	d008      	beq.n	801263e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801262c:	4b06      	ldr	r3, [pc, #24]	@ (8012648 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801262e:	1dba      	adds	r2, r7, #6
 8012630:	8812      	ldrh	r2, [r2, #0]
 8012632:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012634:	1dbb      	adds	r3, r7, #6
 8012636:	881b      	ldrh	r3, [r3, #0]
 8012638:	0018      	movs	r0, r3
 801263a:	f7f7 fe6d 	bl	800a318 <HAL_GPIO_EXTI_Callback>
  }
}
 801263e:	46c0      	nop			@ (mov r8, r8)
 8012640:	46bd      	mov	sp, r7
 8012642:	b002      	add	sp, #8
 8012644:	bd80      	pop	{r7, pc}
 8012646:	46c0      	nop			@ (mov r8, r8)
 8012648:	40010400 	.word	0x40010400

0801264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801265a:	2301      	movs	r3, #1
 801265c:	e082      	b.n	8012764 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2241      	movs	r2, #65	@ 0x41
 8012662:	5c9b      	ldrb	r3, [r3, r2]
 8012664:	b2db      	uxtb	r3, r3
 8012666:	2b00      	cmp	r3, #0
 8012668:	d107      	bne.n	801267a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2240      	movs	r2, #64	@ 0x40
 801266e:	2100      	movs	r1, #0
 8012670:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	0018      	movs	r0, r3
 8012676:	f7f7 f945 	bl	8009904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2241      	movs	r2, #65	@ 0x41
 801267e:	2124      	movs	r1, #36	@ 0x24
 8012680:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2101      	movs	r1, #1
 801268e:	438a      	bics	r2, r1
 8012690:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	685a      	ldr	r2, [r3, #4]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	4934      	ldr	r1, [pc, #208]	@ (801276c <HAL_I2C_Init+0x120>)
 801269c:	400a      	ands	r2, r1
 801269e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	689a      	ldr	r2, [r3, #8]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	4931      	ldr	r1, [pc, #196]	@ (8012770 <HAL_I2C_Init+0x124>)
 80126ac:	400a      	ands	r2, r1
 80126ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d108      	bne.n	80126ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	689a      	ldr	r2, [r3, #8]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2180      	movs	r1, #128	@ 0x80
 80126c2:	0209      	lsls	r1, r1, #8
 80126c4:	430a      	orrs	r2, r1
 80126c6:	609a      	str	r2, [r3, #8]
 80126c8:	e007      	b.n	80126da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	689a      	ldr	r2, [r3, #8]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2184      	movs	r1, #132	@ 0x84
 80126d4:	0209      	lsls	r1, r1, #8
 80126d6:	430a      	orrs	r2, r1
 80126d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	2b02      	cmp	r3, #2
 80126e0:	d104      	bne.n	80126ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2280      	movs	r2, #128	@ 0x80
 80126e8:	0112      	lsls	r2, r2, #4
 80126ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	491f      	ldr	r1, [pc, #124]	@ (8012774 <HAL_I2C_Init+0x128>)
 80126f8:	430a      	orrs	r2, r1
 80126fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	68da      	ldr	r2, [r3, #12]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	491a      	ldr	r1, [pc, #104]	@ (8012770 <HAL_I2C_Init+0x124>)
 8012708:	400a      	ands	r2, r1
 801270a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	691a      	ldr	r2, [r3, #16]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	695b      	ldr	r3, [r3, #20]
 8012714:	431a      	orrs	r2, r3
 8012716:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	699b      	ldr	r3, [r3, #24]
 801271c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	430a      	orrs	r2, r1
 8012724:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	69d9      	ldr	r1, [r3, #28]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6a1a      	ldr	r2, [r3, #32]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	430a      	orrs	r2, r1
 8012734:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	681a      	ldr	r2, [r3, #0]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2101      	movs	r1, #1
 8012742:	430a      	orrs	r2, r1
 8012744:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2200      	movs	r2, #0
 801274a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2241      	movs	r2, #65	@ 0x41
 8012750:	2120      	movs	r1, #32
 8012752:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2200      	movs	r2, #0
 8012758:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2242      	movs	r2, #66	@ 0x42
 801275e:	2100      	movs	r1, #0
 8012760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012762:	2300      	movs	r3, #0
}
 8012764:	0018      	movs	r0, r3
 8012766:	46bd      	mov	sp, r7
 8012768:	b002      	add	sp, #8
 801276a:	bd80      	pop	{r7, pc}
 801276c:	f0ffffff 	.word	0xf0ffffff
 8012770:	ffff7fff 	.word	0xffff7fff
 8012774:	02008000 	.word	0x02008000

08012778 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8012778:	b590      	push	{r4, r7, lr}
 801277a:	b089      	sub	sp, #36	@ 0x24
 801277c:	af02      	add	r7, sp, #8
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	0008      	movs	r0, r1
 8012782:	607a      	str	r2, [r7, #4]
 8012784:	0019      	movs	r1, r3
 8012786:	230a      	movs	r3, #10
 8012788:	18fb      	adds	r3, r7, r3
 801278a:	1c02      	adds	r2, r0, #0
 801278c:	801a      	strh	r2, [r3, #0]
 801278e:	2308      	movs	r3, #8
 8012790:	18fb      	adds	r3, r7, r3
 8012792:	1c0a      	adds	r2, r1, #0
 8012794:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2241      	movs	r2, #65	@ 0x41
 801279a:	5c9b      	ldrb	r3, [r3, r2]
 801279c:	b2db      	uxtb	r3, r3
 801279e:	2b20      	cmp	r3, #32
 80127a0:	d000      	beq.n	80127a4 <HAL_I2C_Master_Transmit+0x2c>
 80127a2:	e0e7      	b.n	8012974 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2240      	movs	r2, #64	@ 0x40
 80127a8:	5c9b      	ldrb	r3, [r3, r2]
 80127aa:	2b01      	cmp	r3, #1
 80127ac:	d101      	bne.n	80127b2 <HAL_I2C_Master_Transmit+0x3a>
 80127ae:	2302      	movs	r3, #2
 80127b0:	e0e1      	b.n	8012976 <HAL_I2C_Master_Transmit+0x1fe>
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2240      	movs	r2, #64	@ 0x40
 80127b6:	2101      	movs	r1, #1
 80127b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80127ba:	f7fe fc7d 	bl	80110b8 <HAL_GetTick>
 80127be:	0003      	movs	r3, r0
 80127c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80127c2:	2380      	movs	r3, #128	@ 0x80
 80127c4:	0219      	lsls	r1, r3, #8
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	9300      	str	r3, [sp, #0]
 80127cc:	2319      	movs	r3, #25
 80127ce:	2201      	movs	r2, #1
 80127d0:	f002 fa30 	bl	8014c34 <I2C_WaitOnFlagUntilTimeout>
 80127d4:	1e03      	subs	r3, r0, #0
 80127d6:	d001      	beq.n	80127dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80127d8:	2301      	movs	r3, #1
 80127da:	e0cc      	b.n	8012976 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2241      	movs	r2, #65	@ 0x41
 80127e0:	2121      	movs	r1, #33	@ 0x21
 80127e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2242      	movs	r2, #66	@ 0x42
 80127e8:	2110      	movs	r1, #16
 80127ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2200      	movs	r2, #0
 80127f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	2208      	movs	r2, #8
 80127fc:	18ba      	adds	r2, r7, r2
 80127fe:	8812      	ldrh	r2, [r2, #0]
 8012800:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2200      	movs	r2, #0
 8012806:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801280c:	b29b      	uxth	r3, r3
 801280e:	2bff      	cmp	r3, #255	@ 0xff
 8012810:	d911      	bls.n	8012836 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	22ff      	movs	r2, #255	@ 0xff
 8012816:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801281c:	b2da      	uxtb	r2, r3
 801281e:	2380      	movs	r3, #128	@ 0x80
 8012820:	045c      	lsls	r4, r3, #17
 8012822:	230a      	movs	r3, #10
 8012824:	18fb      	adds	r3, r7, r3
 8012826:	8819      	ldrh	r1, [r3, #0]
 8012828:	68f8      	ldr	r0, [r7, #12]
 801282a:	4b55      	ldr	r3, [pc, #340]	@ (8012980 <HAL_I2C_Master_Transmit+0x208>)
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	0023      	movs	r3, r4
 8012830:	f002 fc52 	bl	80150d8 <I2C_TransferConfig>
 8012834:	e075      	b.n	8012922 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801283a:	b29a      	uxth	r2, r3
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012844:	b2da      	uxtb	r2, r3
 8012846:	2380      	movs	r3, #128	@ 0x80
 8012848:	049c      	lsls	r4, r3, #18
 801284a:	230a      	movs	r3, #10
 801284c:	18fb      	adds	r3, r7, r3
 801284e:	8819      	ldrh	r1, [r3, #0]
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	4b4b      	ldr	r3, [pc, #300]	@ (8012980 <HAL_I2C_Master_Transmit+0x208>)
 8012854:	9300      	str	r3, [sp, #0]
 8012856:	0023      	movs	r3, r4
 8012858:	f002 fc3e 	bl	80150d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801285c:	e061      	b.n	8012922 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801285e:	697a      	ldr	r2, [r7, #20]
 8012860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	0018      	movs	r0, r3
 8012866:	f002 fa33 	bl	8014cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 801286a:	1e03      	subs	r3, r0, #0
 801286c:	d001      	beq.n	8012872 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801286e:	2301      	movs	r3, #1
 8012870:	e081      	b.n	8012976 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012876:	781a      	ldrb	r2, [r3, #0]
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012882:	1c5a      	adds	r2, r3, #1
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801288c:	b29b      	uxth	r3, r3
 801288e:	3b01      	subs	r3, #1
 8012890:	b29a      	uxth	r2, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801289a:	3b01      	subs	r3, #1
 801289c:	b29a      	uxth	r2, r3
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d03a      	beq.n	8012922 <HAL_I2C_Master_Transmit+0x1aa>
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d136      	bne.n	8012922 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80128b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	0013      	movs	r3, r2
 80128be:	2200      	movs	r2, #0
 80128c0:	2180      	movs	r1, #128	@ 0x80
 80128c2:	f002 f9b7 	bl	8014c34 <I2C_WaitOnFlagUntilTimeout>
 80128c6:	1e03      	subs	r3, r0, #0
 80128c8:	d001      	beq.n	80128ce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80128ca:	2301      	movs	r3, #1
 80128cc:	e053      	b.n	8012976 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	2bff      	cmp	r3, #255	@ 0xff
 80128d6:	d911      	bls.n	80128fc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	22ff      	movs	r2, #255	@ 0xff
 80128dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128e2:	b2da      	uxtb	r2, r3
 80128e4:	2380      	movs	r3, #128	@ 0x80
 80128e6:	045c      	lsls	r4, r3, #17
 80128e8:	230a      	movs	r3, #10
 80128ea:	18fb      	adds	r3, r7, r3
 80128ec:	8819      	ldrh	r1, [r3, #0]
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	2300      	movs	r3, #0
 80128f2:	9300      	str	r3, [sp, #0]
 80128f4:	0023      	movs	r3, r4
 80128f6:	f002 fbef 	bl	80150d8 <I2C_TransferConfig>
 80128fa:	e012      	b.n	8012922 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012900:	b29a      	uxth	r2, r3
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801290a:	b2da      	uxtb	r2, r3
 801290c:	2380      	movs	r3, #128	@ 0x80
 801290e:	049c      	lsls	r4, r3, #18
 8012910:	230a      	movs	r3, #10
 8012912:	18fb      	adds	r3, r7, r3
 8012914:	8819      	ldrh	r1, [r3, #0]
 8012916:	68f8      	ldr	r0, [r7, #12]
 8012918:	2300      	movs	r3, #0
 801291a:	9300      	str	r3, [sp, #0]
 801291c:	0023      	movs	r3, r4
 801291e:	f002 fbdb 	bl	80150d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012926:	b29b      	uxth	r3, r3
 8012928:	2b00      	cmp	r3, #0
 801292a:	d198      	bne.n	801285e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801292c:	697a      	ldr	r2, [r7, #20]
 801292e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	0018      	movs	r0, r3
 8012934:	f002 fa12 	bl	8014d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8012938:	1e03      	subs	r3, r0, #0
 801293a:	d001      	beq.n	8012940 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 801293c:	2301      	movs	r3, #1
 801293e:	e01a      	b.n	8012976 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2220      	movs	r2, #32
 8012946:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	685a      	ldr	r2, [r3, #4]
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	490c      	ldr	r1, [pc, #48]	@ (8012984 <HAL_I2C_Master_Transmit+0x20c>)
 8012954:	400a      	ands	r2, r1
 8012956:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	2241      	movs	r2, #65	@ 0x41
 801295c:	2120      	movs	r1, #32
 801295e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2242      	movs	r2, #66	@ 0x42
 8012964:	2100      	movs	r1, #0
 8012966:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	2240      	movs	r2, #64	@ 0x40
 801296c:	2100      	movs	r1, #0
 801296e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012970:	2300      	movs	r3, #0
 8012972:	e000      	b.n	8012976 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8012974:	2302      	movs	r3, #2
  }
}
 8012976:	0018      	movs	r0, r3
 8012978:	46bd      	mov	sp, r7
 801297a:	b007      	add	sp, #28
 801297c:	bd90      	pop	{r4, r7, pc}
 801297e:	46c0      	nop			@ (mov r8, r8)
 8012980:	80002000 	.word	0x80002000
 8012984:	fe00e800 	.word	0xfe00e800

08012988 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8012988:	b590      	push	{r4, r7, lr}
 801298a:	b089      	sub	sp, #36	@ 0x24
 801298c:	af02      	add	r7, sp, #8
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	0008      	movs	r0, r1
 8012992:	607a      	str	r2, [r7, #4]
 8012994:	0019      	movs	r1, r3
 8012996:	230a      	movs	r3, #10
 8012998:	18fb      	adds	r3, r7, r3
 801299a:	1c02      	adds	r2, r0, #0
 801299c:	801a      	strh	r2, [r3, #0]
 801299e:	2308      	movs	r3, #8
 80129a0:	18fb      	adds	r3, r7, r3
 80129a2:	1c0a      	adds	r2, r1, #0
 80129a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2241      	movs	r2, #65	@ 0x41
 80129aa:	5c9b      	ldrb	r3, [r3, r2]
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	2b20      	cmp	r3, #32
 80129b0:	d000      	beq.n	80129b4 <HAL_I2C_Master_Receive+0x2c>
 80129b2:	e0e8      	b.n	8012b86 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2240      	movs	r2, #64	@ 0x40
 80129b8:	5c9b      	ldrb	r3, [r3, r2]
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d101      	bne.n	80129c2 <HAL_I2C_Master_Receive+0x3a>
 80129be:	2302      	movs	r3, #2
 80129c0:	e0e2      	b.n	8012b88 <HAL_I2C_Master_Receive+0x200>
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	2240      	movs	r2, #64	@ 0x40
 80129c6:	2101      	movs	r1, #1
 80129c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80129ca:	f7fe fb75 	bl	80110b8 <HAL_GetTick>
 80129ce:	0003      	movs	r3, r0
 80129d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80129d2:	2380      	movs	r3, #128	@ 0x80
 80129d4:	0219      	lsls	r1, r3, #8
 80129d6:	68f8      	ldr	r0, [r7, #12]
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	9300      	str	r3, [sp, #0]
 80129dc:	2319      	movs	r3, #25
 80129de:	2201      	movs	r2, #1
 80129e0:	f002 f928 	bl	8014c34 <I2C_WaitOnFlagUntilTimeout>
 80129e4:	1e03      	subs	r3, r0, #0
 80129e6:	d001      	beq.n	80129ec <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80129e8:	2301      	movs	r3, #1
 80129ea:	e0cd      	b.n	8012b88 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2241      	movs	r2, #65	@ 0x41
 80129f0:	2122      	movs	r1, #34	@ 0x22
 80129f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	2242      	movs	r2, #66	@ 0x42
 80129f8:	2110      	movs	r1, #16
 80129fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	2200      	movs	r2, #0
 8012a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	2208      	movs	r2, #8
 8012a0c:	18ba      	adds	r2, r7, r2
 8012a0e:	8812      	ldrh	r2, [r2, #0]
 8012a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2200      	movs	r2, #0
 8012a16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	2bff      	cmp	r3, #255	@ 0xff
 8012a20:	d911      	bls.n	8012a46 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	22ff      	movs	r2, #255	@ 0xff
 8012a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a2c:	b2da      	uxtb	r2, r3
 8012a2e:	2380      	movs	r3, #128	@ 0x80
 8012a30:	045c      	lsls	r4, r3, #17
 8012a32:	230a      	movs	r3, #10
 8012a34:	18fb      	adds	r3, r7, r3
 8012a36:	8819      	ldrh	r1, [r3, #0]
 8012a38:	68f8      	ldr	r0, [r7, #12]
 8012a3a:	4b55      	ldr	r3, [pc, #340]	@ (8012b90 <HAL_I2C_Master_Receive+0x208>)
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	0023      	movs	r3, r4
 8012a40:	f002 fb4a 	bl	80150d8 <I2C_TransferConfig>
 8012a44:	e076      	b.n	8012b34 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a54:	b2da      	uxtb	r2, r3
 8012a56:	2380      	movs	r3, #128	@ 0x80
 8012a58:	049c      	lsls	r4, r3, #18
 8012a5a:	230a      	movs	r3, #10
 8012a5c:	18fb      	adds	r3, r7, r3
 8012a5e:	8819      	ldrh	r1, [r3, #0]
 8012a60:	68f8      	ldr	r0, [r7, #12]
 8012a62:	4b4b      	ldr	r3, [pc, #300]	@ (8012b90 <HAL_I2C_Master_Receive+0x208>)
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	0023      	movs	r3, r4
 8012a68:	f002 fb36 	bl	80150d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8012a6c:	e062      	b.n	8012b34 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012a6e:	697a      	ldr	r2, [r7, #20]
 8012a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	0018      	movs	r0, r3
 8012a76:	f002 f9b5 	bl	8014de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012a7a:	1e03      	subs	r3, r0, #0
 8012a7c:	d001      	beq.n	8012a82 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8012a7e:	2301      	movs	r3, #1
 8012a80:	e082      	b.n	8012b88 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a8c:	b2d2      	uxtb	r2, r2
 8012a8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a94:	1c5a      	adds	r2, r3, #1
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a9e:	3b01      	subs	r3, #1
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	3b01      	subs	r3, #1
 8012aae:	b29a      	uxth	r2, r3
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d03a      	beq.n	8012b34 <HAL_I2C_Master_Receive+0x1ac>
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d136      	bne.n	8012b34 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012ac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ac8:	68f8      	ldr	r0, [r7, #12]
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	9300      	str	r3, [sp, #0]
 8012ace:	0013      	movs	r3, r2
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	2180      	movs	r1, #128	@ 0x80
 8012ad4:	f002 f8ae 	bl	8014c34 <I2C_WaitOnFlagUntilTimeout>
 8012ad8:	1e03      	subs	r3, r0, #0
 8012ada:	d001      	beq.n	8012ae0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8012adc:	2301      	movs	r3, #1
 8012ade:	e053      	b.n	8012b88 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	2bff      	cmp	r3, #255	@ 0xff
 8012ae8:	d911      	bls.n	8012b0e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	22ff      	movs	r2, #255	@ 0xff
 8012aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012af4:	b2da      	uxtb	r2, r3
 8012af6:	2380      	movs	r3, #128	@ 0x80
 8012af8:	045c      	lsls	r4, r3, #17
 8012afa:	230a      	movs	r3, #10
 8012afc:	18fb      	adds	r3, r7, r3
 8012afe:	8819      	ldrh	r1, [r3, #0]
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	2300      	movs	r3, #0
 8012b04:	9300      	str	r3, [sp, #0]
 8012b06:	0023      	movs	r3, r4
 8012b08:	f002 fae6 	bl	80150d8 <I2C_TransferConfig>
 8012b0c:	e012      	b.n	8012b34 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012b1c:	b2da      	uxtb	r2, r3
 8012b1e:	2380      	movs	r3, #128	@ 0x80
 8012b20:	049c      	lsls	r4, r3, #18
 8012b22:	230a      	movs	r3, #10
 8012b24:	18fb      	adds	r3, r7, r3
 8012b26:	8819      	ldrh	r1, [r3, #0]
 8012b28:	68f8      	ldr	r0, [r7, #12]
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	9300      	str	r3, [sp, #0]
 8012b2e:	0023      	movs	r3, r4
 8012b30:	f002 fad2 	bl	80150d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d197      	bne.n	8012a6e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012b3e:	697a      	ldr	r2, [r7, #20]
 8012b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	0018      	movs	r0, r3
 8012b46:	f002 f909 	bl	8014d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8012b4a:	1e03      	subs	r3, r0, #0
 8012b4c:	d001      	beq.n	8012b52 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8012b4e:	2301      	movs	r3, #1
 8012b50:	e01a      	b.n	8012b88 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2220      	movs	r2, #32
 8012b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	685a      	ldr	r2, [r3, #4]
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	490b      	ldr	r1, [pc, #44]	@ (8012b94 <HAL_I2C_Master_Receive+0x20c>)
 8012b66:	400a      	ands	r2, r1
 8012b68:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	2241      	movs	r2, #65	@ 0x41
 8012b6e:	2120      	movs	r1, #32
 8012b70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2242      	movs	r2, #66	@ 0x42
 8012b76:	2100      	movs	r1, #0
 8012b78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2240      	movs	r2, #64	@ 0x40
 8012b7e:	2100      	movs	r1, #0
 8012b80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	e000      	b.n	8012b88 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8012b86:	2302      	movs	r3, #2
  }
}
 8012b88:	0018      	movs	r0, r3
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	b007      	add	sp, #28
 8012b8e:	bd90      	pop	{r4, r7, pc}
 8012b90:	80002400 	.word	0x80002400
 8012b94:	fe00e800 	.word	0xfe00e800

08012b98 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8012b98:	b5b0      	push	{r4, r5, r7, lr}
 8012b9a:	b088      	sub	sp, #32
 8012b9c:	af02      	add	r7, sp, #8
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	0008      	movs	r0, r1
 8012ba2:	607a      	str	r2, [r7, #4]
 8012ba4:	0019      	movs	r1, r3
 8012ba6:	230a      	movs	r3, #10
 8012ba8:	18fb      	adds	r3, r7, r3
 8012baa:	1c02      	adds	r2, r0, #0
 8012bac:	801a      	strh	r2, [r3, #0]
 8012bae:	2308      	movs	r3, #8
 8012bb0:	18fb      	adds	r3, r7, r3
 8012bb2:	1c0a      	adds	r2, r1, #0
 8012bb4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	2241      	movs	r2, #65	@ 0x41
 8012bba:	5c9b      	ldrb	r3, [r3, r2]
 8012bbc:	b2db      	uxtb	r3, r3
 8012bbe:	2b20      	cmp	r3, #32
 8012bc0:	d000      	beq.n	8012bc4 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8012bc2:	e0dd      	b.n	8012d80 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	699a      	ldr	r2, [r3, #24]
 8012bca:	2380      	movs	r3, #128	@ 0x80
 8012bcc:	021b      	lsls	r3, r3, #8
 8012bce:	401a      	ands	r2, r3
 8012bd0:	2380      	movs	r3, #128	@ 0x80
 8012bd2:	021b      	lsls	r3, r3, #8
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d101      	bne.n	8012bdc <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8012bd8:	2302      	movs	r3, #2
 8012bda:	e0d2      	b.n	8012d82 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2240      	movs	r2, #64	@ 0x40
 8012be0:	5c9b      	ldrb	r3, [r3, r2]
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d101      	bne.n	8012bea <HAL_I2C_Master_Transmit_DMA+0x52>
 8012be6:	2302      	movs	r3, #2
 8012be8:	e0cb      	b.n	8012d82 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	2240      	movs	r2, #64	@ 0x40
 8012bee:	2101      	movs	r1, #1
 8012bf0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	2241      	movs	r2, #65	@ 0x41
 8012bf6:	2121      	movs	r1, #33	@ 0x21
 8012bf8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2242      	movs	r2, #66	@ 0x42
 8012bfe:	2110      	movs	r1, #16
 8012c00:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2200      	movs	r2, #0
 8012c06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2208      	movs	r2, #8
 8012c12:	18ba      	adds	r2, r7, r2
 8012c14:	8812      	ldrh	r2, [r2, #0]
 8012c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8012d8c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8012c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	4a5b      	ldr	r2, [pc, #364]	@ (8012d90 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8012c22:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	2bff      	cmp	r3, #255	@ 0xff
 8012c2c:	d906      	bls.n	8012c3c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	22ff      	movs	r2, #255	@ 0xff
 8012c32:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012c34:	2380      	movs	r3, #128	@ 0x80
 8012c36:	045b      	lsls	r3, r3, #17
 8012c38:	617b      	str	r3, [r7, #20]
 8012c3a:	e007      	b.n	8012c4c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012c46:	2380      	movs	r3, #128	@ 0x80
 8012c48:	049b      	lsls	r3, r3, #18
 8012c4a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d100      	bne.n	8012c56 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8012c54:	e078      	b.n	8012d48 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d023      	beq.n	8012ca6 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c62:	4a4c      	ldr	r2, [pc, #304]	@ (8012d94 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8012c64:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8012d98 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8012c6c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c72:	2200      	movs	r2, #0
 8012c74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012c82:	6879      	ldr	r1, [r7, #4]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	3328      	adds	r3, #40	@ 0x28
 8012c8a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8012c90:	2513      	movs	r5, #19
 8012c92:	197c      	adds	r4, r7, r5
 8012c94:	f7fe ff62 	bl	8011b5c <HAL_DMA_Start_IT>
 8012c98:	0003      	movs	r3, r0
 8012c9a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8012c9c:	197b      	adds	r3, r7, r5
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d13d      	bne.n	8012d20 <HAL_I2C_Master_Transmit_DMA+0x188>
 8012ca4:	e013      	b.n	8012cce <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2241      	movs	r2, #65	@ 0x41
 8012caa:	2120      	movs	r1, #32
 8012cac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	2242      	movs	r2, #66	@ 0x42
 8012cb2:	2100      	movs	r1, #0
 8012cb4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cba:	2280      	movs	r2, #128	@ 0x80
 8012cbc:	431a      	orrs	r2, r3
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	2240      	movs	r2, #64	@ 0x40
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e059      	b.n	8012d82 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012cd2:	b2da      	uxtb	r2, r3
 8012cd4:	697c      	ldr	r4, [r7, #20]
 8012cd6:	230a      	movs	r3, #10
 8012cd8:	18fb      	adds	r3, r7, r3
 8012cda:	8819      	ldrh	r1, [r3, #0]
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	4b2f      	ldr	r3, [pc, #188]	@ (8012d9c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8012ce0:	9300      	str	r3, [sp, #0]
 8012ce2:	0023      	movs	r3, r4
 8012ce4:	f002 f9f8 	bl	80150d8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cec:	b29a      	uxth	r2, r3
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012cf2:	1ad3      	subs	r3, r2, r3
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	2240      	movs	r2, #64	@ 0x40
 8012cfe:	2100      	movs	r1, #0
 8012d00:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	2110      	movs	r1, #16
 8012d06:	0018      	movs	r0, r3
 8012d08:	f002 fa20 	bl	801514c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2180      	movs	r1, #128	@ 0x80
 8012d18:	01c9      	lsls	r1, r1, #7
 8012d1a:	430a      	orrs	r2, r1
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	e02d      	b.n	8012d7c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2241      	movs	r2, #65	@ 0x41
 8012d24:	2120      	movs	r1, #32
 8012d26:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2242      	movs	r2, #66	@ 0x42
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d34:	2210      	movs	r2, #16
 8012d36:	431a      	orrs	r2, r3
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2240      	movs	r2, #64	@ 0x40
 8012d40:	2100      	movs	r1, #0
 8012d42:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012d44:	2301      	movs	r3, #1
 8012d46:	e01c      	b.n	8012d82 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	4a15      	ldr	r2, [pc, #84]	@ (8012da0 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8012d4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d52:	b2da      	uxtb	r2, r3
 8012d54:	2380      	movs	r3, #128	@ 0x80
 8012d56:	049c      	lsls	r4, r3, #18
 8012d58:	230a      	movs	r3, #10
 8012d5a:	18fb      	adds	r3, r7, r3
 8012d5c:	8819      	ldrh	r1, [r3, #0]
 8012d5e:	68f8      	ldr	r0, [r7, #12]
 8012d60:	4b0e      	ldr	r3, [pc, #56]	@ (8012d9c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	0023      	movs	r3, r4
 8012d66:	f002 f9b7 	bl	80150d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	2240      	movs	r2, #64	@ 0x40
 8012d6e:	2100      	movs	r1, #0
 8012d70:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2101      	movs	r1, #1
 8012d76:	0018      	movs	r0, r3
 8012d78:	f002 f9e8 	bl	801514c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	e000      	b.n	8012d82 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012d80:	2302      	movs	r3, #2
  }
}
 8012d82:	0018      	movs	r0, r3
 8012d84:	46bd      	mov	sp, r7
 8012d86:	b006      	add	sp, #24
 8012d88:	bdb0      	pop	{r4, r5, r7, pc}
 8012d8a:	46c0      	nop			@ (mov r8, r8)
 8012d8c:	ffff0000 	.word	0xffff0000
 8012d90:	08013a09 	.word	0x08013a09
 8012d94:	08014a85 	.word	0x08014a85
 8012d98:	08014bc5 	.word	0x08014bc5
 8012d9c:	80002000 	.word	0x80002000
 8012da0:	080135b5 	.word	0x080135b5

08012da4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8012da4:	b5b0      	push	{r4, r5, r7, lr}
 8012da6:	b088      	sub	sp, #32
 8012da8:	af02      	add	r7, sp, #8
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	0008      	movs	r0, r1
 8012dae:	607a      	str	r2, [r7, #4]
 8012db0:	0019      	movs	r1, r3
 8012db2:	230a      	movs	r3, #10
 8012db4:	18fb      	adds	r3, r7, r3
 8012db6:	1c02      	adds	r2, r0, #0
 8012db8:	801a      	strh	r2, [r3, #0]
 8012dba:	2308      	movs	r3, #8
 8012dbc:	18fb      	adds	r3, r7, r3
 8012dbe:	1c0a      	adds	r2, r1, #0
 8012dc0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2241      	movs	r2, #65	@ 0x41
 8012dc6:	5c9b      	ldrb	r3, [r3, r2]
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	2b20      	cmp	r3, #32
 8012dcc:	d000      	beq.n	8012dd0 <HAL_I2C_Master_Receive_DMA+0x2c>
 8012dce:	e0dd      	b.n	8012f8c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	699a      	ldr	r2, [r3, #24]
 8012dd6:	2380      	movs	r3, #128	@ 0x80
 8012dd8:	021b      	lsls	r3, r3, #8
 8012dda:	401a      	ands	r2, r3
 8012ddc:	2380      	movs	r3, #128	@ 0x80
 8012dde:	021b      	lsls	r3, r3, #8
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d101      	bne.n	8012de8 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8012de4:	2302      	movs	r3, #2
 8012de6:	e0d2      	b.n	8012f8e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2240      	movs	r2, #64	@ 0x40
 8012dec:	5c9b      	ldrb	r3, [r3, r2]
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	d101      	bne.n	8012df6 <HAL_I2C_Master_Receive_DMA+0x52>
 8012df2:	2302      	movs	r3, #2
 8012df4:	e0cb      	b.n	8012f8e <HAL_I2C_Master_Receive_DMA+0x1ea>
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2240      	movs	r2, #64	@ 0x40
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	2241      	movs	r2, #65	@ 0x41
 8012e02:	2122      	movs	r1, #34	@ 0x22
 8012e04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2242      	movs	r2, #66	@ 0x42
 8012e0a:	2110      	movs	r1, #16
 8012e0c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	2200      	movs	r2, #0
 8012e12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2208      	movs	r2, #8
 8012e1e:	18ba      	adds	r2, r7, r2
 8012e20:	8812      	ldrh	r2, [r2, #0]
 8012e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	4a5c      	ldr	r2, [pc, #368]	@ (8012f98 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8012e28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	4a5b      	ldr	r2, [pc, #364]	@ (8012f9c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8012e2e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	2bff      	cmp	r3, #255	@ 0xff
 8012e38:	d906      	bls.n	8012e48 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	22ff      	movs	r2, #255	@ 0xff
 8012e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012e40:	2380      	movs	r3, #128	@ 0x80
 8012e42:	045b      	lsls	r3, r3, #17
 8012e44:	617b      	str	r3, [r7, #20]
 8012e46:	e007      	b.n	8012e58 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012e52:	2380      	movs	r3, #128	@ 0x80
 8012e54:	049b      	lsls	r3, r3, #18
 8012e56:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d100      	bne.n	8012e62 <HAL_I2C_Master_Receive_DMA+0xbe>
 8012e60:	e078      	b.n	8012f54 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d023      	beq.n	8012eb2 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8012fa0 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8012e70:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e76:	4a4b      	ldr	r2, [pc, #300]	@ (8012fa4 <HAL_I2C_Master_Receive_DMA+0x200>)
 8012e78:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e7e:	2200      	movs	r2, #0
 8012e80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e86:	2200      	movs	r2, #0
 8012e88:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	3324      	adds	r3, #36	@ 0x24
 8012e94:	0019      	movs	r1, r3
 8012e96:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8012e9c:	2513      	movs	r5, #19
 8012e9e:	197c      	adds	r4, r7, r5
 8012ea0:	f7fe fe5c 	bl	8011b5c <HAL_DMA_Start_IT>
 8012ea4:	0003      	movs	r3, r0
 8012ea6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8012ea8:	197b      	adds	r3, r7, r5
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d13d      	bne.n	8012f2c <HAL_I2C_Master_Receive_DMA+0x188>
 8012eb0:	e013      	b.n	8012eda <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	2241      	movs	r2, #65	@ 0x41
 8012eb6:	2120      	movs	r1, #32
 8012eb8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2242      	movs	r2, #66	@ 0x42
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ec6:	2280      	movs	r2, #128	@ 0x80
 8012ec8:	431a      	orrs	r2, r3
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2240      	movs	r2, #64	@ 0x40
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e059      	b.n	8012f8e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	697c      	ldr	r4, [r7, #20]
 8012ee2:	230a      	movs	r3, #10
 8012ee4:	18fb      	adds	r3, r7, r3
 8012ee6:	8819      	ldrh	r1, [r3, #0]
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	4b2f      	ldr	r3, [pc, #188]	@ (8012fa8 <HAL_I2C_Master_Receive_DMA+0x204>)
 8012eec:	9300      	str	r3, [sp, #0]
 8012eee:	0023      	movs	r3, r4
 8012ef0:	f002 f8f2 	bl	80150d8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ef8:	b29a      	uxth	r2, r3
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2240      	movs	r2, #64	@ 0x40
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2110      	movs	r1, #16
 8012f12:	0018      	movs	r0, r3
 8012f14:	f002 f91a 	bl	801514c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	2180      	movs	r1, #128	@ 0x80
 8012f24:	0209      	lsls	r1, r1, #8
 8012f26:	430a      	orrs	r2, r1
 8012f28:	601a      	str	r2, [r3, #0]
 8012f2a:	e02d      	b.n	8012f88 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2241      	movs	r2, #65	@ 0x41
 8012f30:	2120      	movs	r1, #32
 8012f32:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2242      	movs	r2, #66	@ 0x42
 8012f38:	2100      	movs	r1, #0
 8012f3a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f40:	2210      	movs	r2, #16
 8012f42:	431a      	orrs	r2, r3
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	2240      	movs	r2, #64	@ 0x40
 8012f4c:	2100      	movs	r1, #0
 8012f4e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012f50:	2301      	movs	r3, #1
 8012f52:	e01c      	b.n	8012f8e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	4a15      	ldr	r2, [pc, #84]	@ (8012fac <HAL_I2C_Master_Receive_DMA+0x208>)
 8012f58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f5e:	b2da      	uxtb	r2, r3
 8012f60:	2380      	movs	r3, #128	@ 0x80
 8012f62:	049c      	lsls	r4, r3, #18
 8012f64:	230a      	movs	r3, #10
 8012f66:	18fb      	adds	r3, r7, r3
 8012f68:	8819      	ldrh	r1, [r3, #0]
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8012fa8 <HAL_I2C_Master_Receive_DMA+0x204>)
 8012f6e:	9300      	str	r3, [sp, #0]
 8012f70:	0023      	movs	r3, r4
 8012f72:	f002 f8b1 	bl	80150d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2240      	movs	r2, #64	@ 0x40
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2101      	movs	r1, #1
 8012f82:	0018      	movs	r0, r3
 8012f84:	f002 f8e2 	bl	801514c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	e000      	b.n	8012f8e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012f8c:	2302      	movs	r3, #2
  }
}
 8012f8e:	0018      	movs	r0, r3
 8012f90:	46bd      	mov	sp, r7
 8012f92:	b006      	add	sp, #24
 8012f94:	bdb0      	pop	{r4, r5, r7, pc}
 8012f96:	46c0      	nop			@ (mov r8, r8)
 8012f98:	ffff0000 	.word	0xffff0000
 8012f9c:	08013a09 	.word	0x08013a09
 8012fa0:	08014b25 	.word	0x08014b25
 8012fa4:	08014bc5 	.word	0x08014bc5
 8012fa8:	80002400 	.word	0x80002400
 8012fac:	080135b5 	.word	0x080135b5

08012fb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012fb0:	b590      	push	{r4, r7, lr}
 8012fb2:	b089      	sub	sp, #36	@ 0x24
 8012fb4:	af02      	add	r7, sp, #8
 8012fb6:	60f8      	str	r0, [r7, #12]
 8012fb8:	000c      	movs	r4, r1
 8012fba:	0010      	movs	r0, r2
 8012fbc:	0019      	movs	r1, r3
 8012fbe:	230a      	movs	r3, #10
 8012fc0:	18fb      	adds	r3, r7, r3
 8012fc2:	1c22      	adds	r2, r4, #0
 8012fc4:	801a      	strh	r2, [r3, #0]
 8012fc6:	2308      	movs	r3, #8
 8012fc8:	18fb      	adds	r3, r7, r3
 8012fca:	1c02      	adds	r2, r0, #0
 8012fcc:	801a      	strh	r2, [r3, #0]
 8012fce:	1dbb      	adds	r3, r7, #6
 8012fd0:	1c0a      	adds	r2, r1, #0
 8012fd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2241      	movs	r2, #65	@ 0x41
 8012fd8:	5c9b      	ldrb	r3, [r3, r2]
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	2b20      	cmp	r3, #32
 8012fde:	d000      	beq.n	8012fe2 <HAL_I2C_Mem_Read+0x32>
 8012fe0:	e110      	b.n	8013204 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8012fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d004      	beq.n	8012ff2 <HAL_I2C_Mem_Read+0x42>
 8012fe8:	232c      	movs	r3, #44	@ 0x2c
 8012fea:	18fb      	adds	r3, r7, r3
 8012fec:	881b      	ldrh	r3, [r3, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d105      	bne.n	8012ffe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2280      	movs	r2, #128	@ 0x80
 8012ff6:	0092      	lsls	r2, r2, #2
 8012ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e103      	b.n	8013206 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	2240      	movs	r2, #64	@ 0x40
 8013002:	5c9b      	ldrb	r3, [r3, r2]
 8013004:	2b01      	cmp	r3, #1
 8013006:	d101      	bne.n	801300c <HAL_I2C_Mem_Read+0x5c>
 8013008:	2302      	movs	r3, #2
 801300a:	e0fc      	b.n	8013206 <HAL_I2C_Mem_Read+0x256>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2240      	movs	r2, #64	@ 0x40
 8013010:	2101      	movs	r1, #1
 8013012:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013014:	f7fe f850 	bl	80110b8 <HAL_GetTick>
 8013018:	0003      	movs	r3, r0
 801301a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801301c:	2380      	movs	r3, #128	@ 0x80
 801301e:	0219      	lsls	r1, r3, #8
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	9300      	str	r3, [sp, #0]
 8013026:	2319      	movs	r3, #25
 8013028:	2201      	movs	r2, #1
 801302a:	f001 fe03 	bl	8014c34 <I2C_WaitOnFlagUntilTimeout>
 801302e:	1e03      	subs	r3, r0, #0
 8013030:	d001      	beq.n	8013036 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8013032:	2301      	movs	r3, #1
 8013034:	e0e7      	b.n	8013206 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2241      	movs	r2, #65	@ 0x41
 801303a:	2122      	movs	r1, #34	@ 0x22
 801303c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2242      	movs	r2, #66	@ 0x42
 8013042:	2140      	movs	r1, #64	@ 0x40
 8013044:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	2200      	movs	r2, #0
 801304a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	222c      	movs	r2, #44	@ 0x2c
 8013056:	18ba      	adds	r2, r7, r2
 8013058:	8812      	ldrh	r2, [r2, #0]
 801305a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2200      	movs	r2, #0
 8013060:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8013062:	1dbb      	adds	r3, r7, #6
 8013064:	881c      	ldrh	r4, [r3, #0]
 8013066:	2308      	movs	r3, #8
 8013068:	18fb      	adds	r3, r7, r3
 801306a:	881a      	ldrh	r2, [r3, #0]
 801306c:	230a      	movs	r3, #10
 801306e:	18fb      	adds	r3, r7, r3
 8013070:	8819      	ldrh	r1, [r3, #0]
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	9301      	str	r3, [sp, #4]
 8013078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801307a:	9300      	str	r3, [sp, #0]
 801307c:	0023      	movs	r3, r4
 801307e:	f000 ffc1 	bl	8014004 <I2C_RequestMemoryRead>
 8013082:	1e03      	subs	r3, r0, #0
 8013084:	d005      	beq.n	8013092 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	2240      	movs	r2, #64	@ 0x40
 801308a:	2100      	movs	r1, #0
 801308c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801308e:	2301      	movs	r3, #1
 8013090:	e0b9      	b.n	8013206 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013096:	b29b      	uxth	r3, r3
 8013098:	2bff      	cmp	r3, #255	@ 0xff
 801309a:	d911      	bls.n	80130c0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	22ff      	movs	r2, #255	@ 0xff
 80130a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130a6:	b2da      	uxtb	r2, r3
 80130a8:	2380      	movs	r3, #128	@ 0x80
 80130aa:	045c      	lsls	r4, r3, #17
 80130ac:	230a      	movs	r3, #10
 80130ae:	18fb      	adds	r3, r7, r3
 80130b0:	8819      	ldrh	r1, [r3, #0]
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	4b56      	ldr	r3, [pc, #344]	@ (8013210 <HAL_I2C_Mem_Read+0x260>)
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	0023      	movs	r3, r4
 80130ba:	f002 f80d 	bl	80150d8 <I2C_TransferConfig>
 80130be:	e012      	b.n	80130e6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130c4:	b29a      	uxth	r2, r3
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130ce:	b2da      	uxtb	r2, r3
 80130d0:	2380      	movs	r3, #128	@ 0x80
 80130d2:	049c      	lsls	r4, r3, #18
 80130d4:	230a      	movs	r3, #10
 80130d6:	18fb      	adds	r3, r7, r3
 80130d8:	8819      	ldrh	r1, [r3, #0]
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	4b4c      	ldr	r3, [pc, #304]	@ (8013210 <HAL_I2C_Mem_Read+0x260>)
 80130de:	9300      	str	r3, [sp, #0]
 80130e0:	0023      	movs	r3, r4
 80130e2:	f001 fff9 	bl	80150d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80130e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80130e8:	68f8      	ldr	r0, [r7, #12]
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	9300      	str	r3, [sp, #0]
 80130ee:	0013      	movs	r3, r2
 80130f0:	2200      	movs	r2, #0
 80130f2:	2104      	movs	r1, #4
 80130f4:	f001 fd9e 	bl	8014c34 <I2C_WaitOnFlagUntilTimeout>
 80130f8:	1e03      	subs	r3, r0, #0
 80130fa:	d001      	beq.n	8013100 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80130fc:	2301      	movs	r3, #1
 80130fe:	e082      	b.n	8013206 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801310a:	b2d2      	uxtb	r2, r2
 801310c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013112:	1c5a      	adds	r2, r3, #1
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801311c:	3b01      	subs	r3, #1
 801311e:	b29a      	uxth	r2, r3
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013128:	b29b      	uxth	r3, r3
 801312a:	3b01      	subs	r3, #1
 801312c:	b29a      	uxth	r2, r3
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013136:	b29b      	uxth	r3, r3
 8013138:	2b00      	cmp	r3, #0
 801313a:	d03a      	beq.n	80131b2 <HAL_I2C_Mem_Read+0x202>
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013140:	2b00      	cmp	r3, #0
 8013142:	d136      	bne.n	80131b2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013146:	68f8      	ldr	r0, [r7, #12]
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	0013      	movs	r3, r2
 801314e:	2200      	movs	r2, #0
 8013150:	2180      	movs	r1, #128	@ 0x80
 8013152:	f001 fd6f 	bl	8014c34 <I2C_WaitOnFlagUntilTimeout>
 8013156:	1e03      	subs	r3, r0, #0
 8013158:	d001      	beq.n	801315e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 801315a:	2301      	movs	r3, #1
 801315c:	e053      	b.n	8013206 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013162:	b29b      	uxth	r3, r3
 8013164:	2bff      	cmp	r3, #255	@ 0xff
 8013166:	d911      	bls.n	801318c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	22ff      	movs	r2, #255	@ 0xff
 801316c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013172:	b2da      	uxtb	r2, r3
 8013174:	2380      	movs	r3, #128	@ 0x80
 8013176:	045c      	lsls	r4, r3, #17
 8013178:	230a      	movs	r3, #10
 801317a:	18fb      	adds	r3, r7, r3
 801317c:	8819      	ldrh	r1, [r3, #0]
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	2300      	movs	r3, #0
 8013182:	9300      	str	r3, [sp, #0]
 8013184:	0023      	movs	r3, r4
 8013186:	f001 ffa7 	bl	80150d8 <I2C_TransferConfig>
 801318a:	e012      	b.n	80131b2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013190:	b29a      	uxth	r2, r3
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801319a:	b2da      	uxtb	r2, r3
 801319c:	2380      	movs	r3, #128	@ 0x80
 801319e:	049c      	lsls	r4, r3, #18
 80131a0:	230a      	movs	r3, #10
 80131a2:	18fb      	adds	r3, r7, r3
 80131a4:	8819      	ldrh	r1, [r3, #0]
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	2300      	movs	r3, #0
 80131aa:	9300      	str	r3, [sp, #0]
 80131ac:	0023      	movs	r3, r4
 80131ae:	f001 ff93 	bl	80150d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d194      	bne.n	80130e6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80131bc:	697a      	ldr	r2, [r7, #20]
 80131be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	0018      	movs	r0, r3
 80131c4:	f001 fdca 	bl	8014d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80131c8:	1e03      	subs	r3, r0, #0
 80131ca:	d001      	beq.n	80131d0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80131cc:	2301      	movs	r3, #1
 80131ce:	e01a      	b.n	8013206 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2220      	movs	r2, #32
 80131d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	685a      	ldr	r2, [r3, #4]
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	490c      	ldr	r1, [pc, #48]	@ (8013214 <HAL_I2C_Mem_Read+0x264>)
 80131e4:	400a      	ands	r2, r1
 80131e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2241      	movs	r2, #65	@ 0x41
 80131ec:	2120      	movs	r1, #32
 80131ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2242      	movs	r2, #66	@ 0x42
 80131f4:	2100      	movs	r1, #0
 80131f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2240      	movs	r2, #64	@ 0x40
 80131fc:	2100      	movs	r1, #0
 80131fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013200:	2300      	movs	r3, #0
 8013202:	e000      	b.n	8013206 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8013204:	2302      	movs	r3, #2
  }
}
 8013206:	0018      	movs	r0, r3
 8013208:	46bd      	mov	sp, r7
 801320a:	b007      	add	sp, #28
 801320c:	bd90      	pop	{r4, r7, pc}
 801320e:	46c0      	nop			@ (mov r8, r8)
 8013210:	80002400 	.word	0x80002400
 8013214:	fe00e800 	.word	0xfe00e800

08013218 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8013218:	b5b0      	push	{r4, r5, r7, lr}
 801321a:	b088      	sub	sp, #32
 801321c:	af02      	add	r7, sp, #8
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	000c      	movs	r4, r1
 8013222:	0010      	movs	r0, r2
 8013224:	0019      	movs	r1, r3
 8013226:	230a      	movs	r3, #10
 8013228:	18fb      	adds	r3, r7, r3
 801322a:	1c22      	adds	r2, r4, #0
 801322c:	801a      	strh	r2, [r3, #0]
 801322e:	2308      	movs	r3, #8
 8013230:	18fb      	adds	r3, r7, r3
 8013232:	1c02      	adds	r2, r0, #0
 8013234:	801a      	strh	r2, [r3, #0]
 8013236:	1dbb      	adds	r3, r7, #6
 8013238:	1c0a      	adds	r2, r1, #0
 801323a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	2241      	movs	r2, #65	@ 0x41
 8013240:	5c9b      	ldrb	r3, [r3, r2]
 8013242:	b2db      	uxtb	r3, r3
 8013244:	2b20      	cmp	r3, #32
 8013246:	d000      	beq.n	801324a <HAL_I2C_Mem_Write_DMA+0x32>
 8013248:	e0d8      	b.n	80133fc <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 801324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801324c:	2b00      	cmp	r3, #0
 801324e:	d004      	beq.n	801325a <HAL_I2C_Mem_Write_DMA+0x42>
 8013250:	232c      	movs	r3, #44	@ 0x2c
 8013252:	18fb      	adds	r3, r7, r3
 8013254:	881b      	ldrh	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d105      	bne.n	8013266 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2280      	movs	r2, #128	@ 0x80
 801325e:	0092      	lsls	r2, r2, #2
 8013260:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8013262:	2301      	movs	r3, #1
 8013264:	e0cb      	b.n	80133fe <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	699a      	ldr	r2, [r3, #24]
 801326c:	2380      	movs	r3, #128	@ 0x80
 801326e:	021b      	lsls	r3, r3, #8
 8013270:	401a      	ands	r2, r3
 8013272:	2380      	movs	r3, #128	@ 0x80
 8013274:	021b      	lsls	r3, r3, #8
 8013276:	429a      	cmp	r2, r3
 8013278:	d101      	bne.n	801327e <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 801327a:	2302      	movs	r3, #2
 801327c:	e0bf      	b.n	80133fe <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2240      	movs	r2, #64	@ 0x40
 8013282:	5c9b      	ldrb	r3, [r3, r2]
 8013284:	2b01      	cmp	r3, #1
 8013286:	d101      	bne.n	801328c <HAL_I2C_Mem_Write_DMA+0x74>
 8013288:	2302      	movs	r3, #2
 801328a:	e0b8      	b.n	80133fe <HAL_I2C_Mem_Write_DMA+0x1e6>
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	2240      	movs	r2, #64	@ 0x40
 8013290:	2101      	movs	r1, #1
 8013292:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2241      	movs	r2, #65	@ 0x41
 8013298:	2121      	movs	r1, #33	@ 0x21
 801329a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2242      	movs	r2, #66	@ 0x42
 80132a0:	2140      	movs	r1, #64	@ 0x40
 80132a2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2200      	movs	r2, #0
 80132a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80132ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	222c      	movs	r2, #44	@ 0x2c
 80132b4:	18ba      	adds	r2, r7, r2
 80132b6:	8812      	ldrh	r2, [r2, #0]
 80132b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	4a52      	ldr	r2, [pc, #328]	@ (8013408 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 80132be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	4a52      	ldr	r2, [pc, #328]	@ (801340c <HAL_I2C_Mem_Write_DMA+0x1f4>)
 80132c4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80132c6:	230a      	movs	r3, #10
 80132c8:	18fb      	adds	r3, r7, r3
 80132ca:	881a      	ldrh	r2, [r3, #0]
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132d4:	b29b      	uxth	r3, r3
 80132d6:	2bff      	cmp	r3, #255	@ 0xff
 80132d8:	d903      	bls.n	80132e2 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	22ff      	movs	r2, #255	@ 0xff
 80132de:	851a      	strh	r2, [r3, #40]	@ 0x28
 80132e0:	e004      	b.n	80132ec <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80132ec:	1dbb      	adds	r3, r7, #6
 80132ee:	881b      	ldrh	r3, [r3, #0]
 80132f0:	2b01      	cmp	r3, #1
 80132f2:	d10b      	bne.n	801330c <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80132f4:	2308      	movs	r3, #8
 80132f6:	18fb      	adds	r3, r7, r3
 80132f8:	881b      	ldrh	r3, [r3, #0]
 80132fa:	b2da      	uxtb	r2, r3
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2201      	movs	r2, #1
 8013306:	4252      	negs	r2, r2
 8013308:	651a      	str	r2, [r3, #80]	@ 0x50
 801330a:	e00e      	b.n	801332a <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801330c:	2108      	movs	r1, #8
 801330e:	187b      	adds	r3, r7, r1
 8013310:	881b      	ldrh	r3, [r3, #0]
 8013312:	0a1b      	lsrs	r3, r3, #8
 8013314:	b29b      	uxth	r3, r3
 8013316:	b2da      	uxtb	r2, r3
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 801331e:	187b      	adds	r3, r7, r1
 8013320:	881b      	ldrh	r3, [r3, #0]
 8013322:	b2db      	uxtb	r3, r3
 8013324:	001a      	movs	r2, r3
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801332e:	2b00      	cmp	r3, #0
 8013330:	d023      	beq.n	801337a <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013336:	4a36      	ldr	r2, [pc, #216]	@ (8013410 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8013338:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801333e:	4a35      	ldr	r2, [pc, #212]	@ (8013414 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8013340:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013346:	2200      	movs	r2, #0
 8013348:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801334e:	2200      	movs	r2, #0
 8013350:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	3328      	adds	r3, #40	@ 0x28
 801335e:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013364:	2517      	movs	r5, #23
 8013366:	197c      	adds	r4, r7, r5
 8013368:	f7fe fbf8 	bl	8011b5c <HAL_DMA_Start_IT>
 801336c:	0003      	movs	r3, r0
 801336e:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8013370:	197b      	adds	r3, r7, r5
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d12d      	bne.n	80133d4 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8013378:	e013      	b.n	80133a2 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2241      	movs	r2, #65	@ 0x41
 801337e:	2120      	movs	r1, #32
 8013380:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2242      	movs	r2, #66	@ 0x42
 8013386:	2100      	movs	r1, #0
 8013388:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801338e:	2280      	movs	r2, #128	@ 0x80
 8013390:	431a      	orrs	r2, r3
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2240      	movs	r2, #64	@ 0x40
 801339a:	2100      	movs	r1, #0
 801339c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801339e:	2301      	movs	r3, #1
 80133a0:	e02d      	b.n	80133fe <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80133a2:	1dbb      	adds	r3, r7, #6
 80133a4:	881b      	ldrh	r3, [r3, #0]
 80133a6:	b2da      	uxtb	r2, r3
 80133a8:	2380      	movs	r3, #128	@ 0x80
 80133aa:	045c      	lsls	r4, r3, #17
 80133ac:	230a      	movs	r3, #10
 80133ae:	18fb      	adds	r3, r7, r3
 80133b0:	8819      	ldrh	r1, [r3, #0]
 80133b2:	68f8      	ldr	r0, [r7, #12]
 80133b4:	4b18      	ldr	r3, [pc, #96]	@ (8013418 <HAL_I2C_Mem_Write_DMA+0x200>)
 80133b6:	9300      	str	r3, [sp, #0]
 80133b8:	0023      	movs	r3, r4
 80133ba:	f001 fe8d 	bl	80150d8 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2240      	movs	r2, #64	@ 0x40
 80133c2:	2100      	movs	r1, #0
 80133c4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2101      	movs	r1, #1
 80133ca:	0018      	movs	r0, r3
 80133cc:	f001 febe 	bl	801514c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80133d0:	2300      	movs	r3, #0
 80133d2:	e014      	b.n	80133fe <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2241      	movs	r2, #65	@ 0x41
 80133d8:	2120      	movs	r1, #32
 80133da:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	2242      	movs	r2, #66	@ 0x42
 80133e0:	2100      	movs	r1, #0
 80133e2:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133e8:	2210      	movs	r2, #16
 80133ea:	431a      	orrs	r2, r3
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2240      	movs	r2, #64	@ 0x40
 80133f4:	2100      	movs	r1, #0
 80133f6:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80133f8:	2301      	movs	r3, #1
 80133fa:	e000      	b.n	80133fe <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80133fc:	2302      	movs	r3, #2
  }
}
 80133fe:	0018      	movs	r0, r3
 8013400:	46bd      	mov	sp, r7
 8013402:	b006      	add	sp, #24
 8013404:	bdb0      	pop	{r4, r5, r7, pc}
 8013406:	46c0      	nop			@ (mov r8, r8)
 8013408:	ffff0000 	.word	0xffff0000
 801340c:	08013c01 	.word	0x08013c01
 8013410:	08014a85 	.word	0x08014a85
 8013414:	08014bc5 	.word	0x08014bc5
 8013418:	80002000 	.word	0x80002000

0801341c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	699b      	ldr	r3, [r3, #24]
 801342a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013438:	2b00      	cmp	r3, #0
 801343a:	d005      	beq.n	8013448 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013440:	68ba      	ldr	r2, [r7, #8]
 8013442:	68f9      	ldr	r1, [r7, #12]
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	4798      	blx	r3
  }
}
 8013448:	46c0      	nop			@ (mov r8, r8)
 801344a:	46bd      	mov	sp, r7
 801344c:	b004      	add	sp, #16
 801344e:	bd80      	pop	{r7, pc}

08013450 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	699b      	ldr	r3, [r3, #24]
 801345e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013468:	697a      	ldr	r2, [r7, #20]
 801346a:	2380      	movs	r3, #128	@ 0x80
 801346c:	005b      	lsls	r3, r3, #1
 801346e:	4013      	ands	r3, r2
 8013470:	d00e      	beq.n	8013490 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	2280      	movs	r2, #128	@ 0x80
 8013476:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013478:	d00a      	beq.n	8013490 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801347e:	2201      	movs	r2, #1
 8013480:	431a      	orrs	r2, r3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2280      	movs	r2, #128	@ 0x80
 801348c:	0052      	lsls	r2, r2, #1
 801348e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013490:	697a      	ldr	r2, [r7, #20]
 8013492:	2380      	movs	r3, #128	@ 0x80
 8013494:	00db      	lsls	r3, r3, #3
 8013496:	4013      	ands	r3, r2
 8013498:	d00e      	beq.n	80134b8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	2280      	movs	r2, #128	@ 0x80
 801349e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80134a0:	d00a      	beq.n	80134b8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134a6:	2208      	movs	r2, #8
 80134a8:	431a      	orrs	r2, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2280      	movs	r2, #128	@ 0x80
 80134b4:	00d2      	lsls	r2, r2, #3
 80134b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80134b8:	697a      	ldr	r2, [r7, #20]
 80134ba:	2380      	movs	r3, #128	@ 0x80
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	4013      	ands	r3, r2
 80134c0:	d00e      	beq.n	80134e0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	2280      	movs	r2, #128	@ 0x80
 80134c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80134c8:	d00a      	beq.n	80134e0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134ce:	2202      	movs	r2, #2
 80134d0:	431a      	orrs	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	2280      	movs	r2, #128	@ 0x80
 80134dc:	0092      	lsls	r2, r2, #2
 80134de:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134e4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	220b      	movs	r2, #11
 80134ea:	4013      	ands	r3, r2
 80134ec:	d005      	beq.n	80134fa <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80134ee:	68fa      	ldr	r2, [r7, #12]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	0011      	movs	r1, r2
 80134f4:	0018      	movs	r0, r3
 80134f6:	f001 f977 	bl	80147e8 <I2C_ITError>
  }
}
 80134fa:	46c0      	nop			@ (mov r8, r8)
 80134fc:	46bd      	mov	sp, r7
 80134fe:	b006      	add	sp, #24
 8013500:	bd80      	pop	{r7, pc}

08013502 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013502:	b580      	push	{r7, lr}
 8013504:	b082      	sub	sp, #8
 8013506:	af00      	add	r7, sp, #0
 8013508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801350a:	46c0      	nop			@ (mov r8, r8)
 801350c:	46bd      	mov	sp, r7
 801350e:	b002      	add	sp, #8
 8013510:	bd80      	pop	{r7, pc}

08013512 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013512:	b580      	push	{r7, lr}
 8013514:	b082      	sub	sp, #8
 8013516:	af00      	add	r7, sp, #0
 8013518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801351a:	46c0      	nop			@ (mov r8, r8)
 801351c:	46bd      	mov	sp, r7
 801351e:	b002      	add	sp, #8
 8013520:	bd80      	pop	{r7, pc}

08013522 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b082      	sub	sp, #8
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801352a:	46c0      	nop			@ (mov r8, r8)
 801352c:	46bd      	mov	sp, r7
 801352e:	b002      	add	sp, #8
 8013530:	bd80      	pop	{r7, pc}

08013532 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013532:	b580      	push	{r7, lr}
 8013534:	b082      	sub	sp, #8
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801353a:	46c0      	nop			@ (mov r8, r8)
 801353c:	46bd      	mov	sp, r7
 801353e:	b002      	add	sp, #8
 8013540:	bd80      	pop	{r7, pc}

08013542 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8013542:	b580      	push	{r7, lr}
 8013544:	b082      	sub	sp, #8
 8013546:	af00      	add	r7, sp, #0
 8013548:	6078      	str	r0, [r7, #4]
 801354a:	0008      	movs	r0, r1
 801354c:	0011      	movs	r1, r2
 801354e:	1cfb      	adds	r3, r7, #3
 8013550:	1c02      	adds	r2, r0, #0
 8013552:	701a      	strb	r2, [r3, #0]
 8013554:	003b      	movs	r3, r7
 8013556:	1c0a      	adds	r2, r1, #0
 8013558:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801355a:	46c0      	nop			@ (mov r8, r8)
 801355c:	46bd      	mov	sp, r7
 801355e:	b002      	add	sp, #8
 8013560:	bd80      	pop	{r7, pc}

08013562 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	b082      	sub	sp, #8
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 801356a:	46c0      	nop			@ (mov r8, r8)
 801356c:	46bd      	mov	sp, r7
 801356e:	b002      	add	sp, #8
 8013570:	bd80      	pop	{r7, pc}

08013572 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013572:	b580      	push	{r7, lr}
 8013574:	b082      	sub	sp, #8
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801357a:	46c0      	nop			@ (mov r8, r8)
 801357c:	46bd      	mov	sp, r7
 801357e:	b002      	add	sp, #8
 8013580:	bd80      	pop	{r7, pc}

08013582 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013582:	b580      	push	{r7, lr}
 8013584:	b082      	sub	sp, #8
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801358a:	46c0      	nop			@ (mov r8, r8)
 801358c:	46bd      	mov	sp, r7
 801358e:	b002      	add	sp, #8
 8013590:	bd80      	pop	{r7, pc}

08013592 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8013592:	b580      	push	{r7, lr}
 8013594:	b082      	sub	sp, #8
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801359a:	46c0      	nop			@ (mov r8, r8)
 801359c:	46bd      	mov	sp, r7
 801359e:	b002      	add	sp, #8
 80135a0:	bd80      	pop	{r7, pc}

080135a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80135a2:	b580      	push	{r7, lr}
 80135a4:	b082      	sub	sp, #8
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80135aa:	46c0      	nop			@ (mov r8, r8)
 80135ac:	46bd      	mov	sp, r7
 80135ae:	b002      	add	sp, #8
 80135b0:	bd80      	pop	{r7, pc}
	...

080135b4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80135b4:	b590      	push	{r4, r7, lr}
 80135b6:	b089      	sub	sp, #36	@ 0x24
 80135b8:	af02      	add	r7, sp, #8
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	2240      	movs	r2, #64	@ 0x40
 80135c8:	5c9b      	ldrb	r3, [r3, r2]
 80135ca:	2b01      	cmp	r3, #1
 80135cc:	d101      	bne.n	80135d2 <I2C_Master_ISR_IT+0x1e>
 80135ce:	2302      	movs	r3, #2
 80135d0:	e113      	b.n	80137fa <I2C_Master_ISR_IT+0x246>
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2240      	movs	r2, #64	@ 0x40
 80135d6:	2101      	movs	r1, #1
 80135d8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	2210      	movs	r2, #16
 80135de:	4013      	ands	r3, r2
 80135e0:	d012      	beq.n	8013608 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2210      	movs	r2, #16
 80135e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80135e8:	d00e      	beq.n	8013608 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2210      	movs	r2, #16
 80135f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135f6:	2204      	movs	r2, #4
 80135f8:	431a      	orrs	r2, r3
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	0018      	movs	r0, r3
 8013602:	f001 fa1c 	bl	8014a3e <I2C_Flush_TXDR>
 8013606:	e0e5      	b.n	80137d4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	2204      	movs	r2, #4
 801360c:	4013      	ands	r3, r2
 801360e:	d021      	beq.n	8013654 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2204      	movs	r2, #4
 8013614:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013616:	d01d      	beq.n	8013654 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	2204      	movs	r2, #4
 801361c:	4393      	bics	r3, r2
 801361e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801362a:	b2d2      	uxtb	r2, r2
 801362c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013632:	1c5a      	adds	r2, r3, #1
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801363c:	3b01      	subs	r3, #1
 801363e:	b29a      	uxth	r2, r3
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013648:	b29b      	uxth	r3, r3
 801364a:	3b01      	subs	r3, #1
 801364c:	b29a      	uxth	r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013652:	e0bf      	b.n	80137d4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	2202      	movs	r2, #2
 8013658:	4013      	ands	r3, r2
 801365a:	d01c      	beq.n	8013696 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2202      	movs	r2, #2
 8013660:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013662:	d018      	beq.n	8013696 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013668:	781a      	ldrb	r2, [r3, #0]
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013674:	1c5a      	adds	r2, r3, #1
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801367e:	3b01      	subs	r3, #1
 8013680:	b29a      	uxth	r2, r3
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801368a:	b29b      	uxth	r3, r3
 801368c:	3b01      	subs	r3, #1
 801368e:	b29a      	uxth	r2, r3
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013694:	e09e      	b.n	80137d4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	2280      	movs	r2, #128	@ 0x80
 801369a:	4013      	ands	r3, r2
 801369c:	d100      	bne.n	80136a0 <I2C_Master_ISR_IT+0xec>
 801369e:	e069      	b.n	8013774 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2240      	movs	r2, #64	@ 0x40
 80136a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80136a6:	d065      	beq.n	8013774 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d04a      	beq.n	8013748 <I2C_Master_ISR_IT+0x194>
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d146      	bne.n	8013748 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	2112      	movs	r1, #18
 80136c4:	187b      	adds	r3, r7, r1
 80136c6:	0592      	lsls	r2, r2, #22
 80136c8:	0d92      	lsrs	r2, r2, #22
 80136ca:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	2bff      	cmp	r3, #255	@ 0xff
 80136d4:	d910      	bls.n	80136f8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	22ff      	movs	r2, #255	@ 0xff
 80136da:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136e0:	b2da      	uxtb	r2, r3
 80136e2:	2380      	movs	r3, #128	@ 0x80
 80136e4:	045c      	lsls	r4, r3, #17
 80136e6:	187b      	adds	r3, r7, r1
 80136e8:	8819      	ldrh	r1, [r3, #0]
 80136ea:	68f8      	ldr	r0, [r7, #12]
 80136ec:	2300      	movs	r3, #0
 80136ee:	9300      	str	r3, [sp, #0]
 80136f0:	0023      	movs	r3, r4
 80136f2:	f001 fcf1 	bl	80150d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80136f6:	e03c      	b.n	8013772 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136fc:	b29a      	uxth	r2, r3
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013706:	4a3f      	ldr	r2, [pc, #252]	@ (8013804 <I2C_Master_ISR_IT+0x250>)
 8013708:	4293      	cmp	r3, r2
 801370a:	d00e      	beq.n	801372a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013710:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013716:	2312      	movs	r3, #18
 8013718:	18fb      	adds	r3, r7, r3
 801371a:	8819      	ldrh	r1, [r3, #0]
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	2300      	movs	r3, #0
 8013720:	9300      	str	r3, [sp, #0]
 8013722:	0023      	movs	r3, r4
 8013724:	f001 fcd8 	bl	80150d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013728:	e023      	b.n	8013772 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801372e:	b2da      	uxtb	r2, r3
 8013730:	2380      	movs	r3, #128	@ 0x80
 8013732:	049c      	lsls	r4, r3, #18
 8013734:	2312      	movs	r3, #18
 8013736:	18fb      	adds	r3, r7, r3
 8013738:	8819      	ldrh	r1, [r3, #0]
 801373a:	68f8      	ldr	r0, [r7, #12]
 801373c:	2300      	movs	r3, #0
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	0023      	movs	r3, r4
 8013742:	f001 fcc9 	bl	80150d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013746:	e014      	b.n	8013772 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	685a      	ldr	r2, [r3, #4]
 801374e:	2380      	movs	r3, #128	@ 0x80
 8013750:	049b      	lsls	r3, r3, #18
 8013752:	401a      	ands	r2, r3
 8013754:	2380      	movs	r3, #128	@ 0x80
 8013756:	049b      	lsls	r3, r3, #18
 8013758:	429a      	cmp	r2, r3
 801375a:	d004      	beq.n	8013766 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	0018      	movs	r0, r3
 8013760:	f000 fd56 	bl	8014210 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013764:	e036      	b.n	80137d4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2140      	movs	r1, #64	@ 0x40
 801376a:	0018      	movs	r0, r3
 801376c:	f001 f83c 	bl	80147e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013770:	e030      	b.n	80137d4 <I2C_Master_ISR_IT+0x220>
 8013772:	e02f      	b.n	80137d4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	2240      	movs	r2, #64	@ 0x40
 8013778:	4013      	ands	r3, r2
 801377a:	d02b      	beq.n	80137d4 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2240      	movs	r2, #64	@ 0x40
 8013780:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8013782:	d027      	beq.n	80137d4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013788:	b29b      	uxth	r3, r3
 801378a:	2b00      	cmp	r3, #0
 801378c:	d11d      	bne.n	80137ca <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	685a      	ldr	r2, [r3, #4]
 8013794:	2380      	movs	r3, #128	@ 0x80
 8013796:	049b      	lsls	r3, r3, #18
 8013798:	401a      	ands	r2, r3
 801379a:	2380      	movs	r3, #128	@ 0x80
 801379c:	049b      	lsls	r3, r3, #18
 801379e:	429a      	cmp	r2, r3
 80137a0:	d018      	beq.n	80137d4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137a6:	4a17      	ldr	r2, [pc, #92]	@ (8013804 <I2C_Master_ISR_IT+0x250>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d109      	bne.n	80137c0 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	685a      	ldr	r2, [r3, #4]
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	2180      	movs	r1, #128	@ 0x80
 80137b8:	01c9      	lsls	r1, r1, #7
 80137ba:	430a      	orrs	r2, r1
 80137bc:	605a      	str	r2, [r3, #4]
 80137be:	e009      	b.n	80137d4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	0018      	movs	r0, r3
 80137c4:	f000 fd24 	bl	8014210 <I2C_ITMasterSeqCplt>
 80137c8:	e004      	b.n	80137d4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	2140      	movs	r1, #64	@ 0x40
 80137ce:	0018      	movs	r0, r3
 80137d0:	f001 f80a 	bl	80147e8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	2220      	movs	r2, #32
 80137d8:	4013      	ands	r3, r2
 80137da:	d009      	beq.n	80137f0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2220      	movs	r2, #32
 80137e0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80137e2:	d005      	beq.n	80137f0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80137e4:	697a      	ldr	r2, [r7, #20]
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	0011      	movs	r1, r2
 80137ea:	0018      	movs	r0, r3
 80137ec:	f000 fdb6 	bl	801435c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	2240      	movs	r2, #64	@ 0x40
 80137f4:	2100      	movs	r1, #0
 80137f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80137f8:	2300      	movs	r3, #0
}
 80137fa:	0018      	movs	r0, r3
 80137fc:	46bd      	mov	sp, r7
 80137fe:	b007      	add	sp, #28
 8013800:	bd90      	pop	{r4, r7, pc}
 8013802:	46c0      	nop			@ (mov r8, r8)
 8013804:	ffff0000 	.word	0xffff0000

08013808 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b086      	sub	sp, #24
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013818:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2240      	movs	r2, #64	@ 0x40
 8013822:	5c9b      	ldrb	r3, [r3, r2]
 8013824:	2b01      	cmp	r3, #1
 8013826:	d101      	bne.n	801382c <I2C_Slave_ISR_IT+0x24>
 8013828:	2302      	movs	r3, #2
 801382a:	e0e6      	b.n	80139fa <I2C_Slave_ISR_IT+0x1f2>
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	2240      	movs	r2, #64	@ 0x40
 8013830:	2101      	movs	r1, #1
 8013832:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	2220      	movs	r2, #32
 8013838:	4013      	ands	r3, r2
 801383a:	d009      	beq.n	8013850 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2220      	movs	r2, #32
 8013840:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013842:	d005      	beq.n	8013850 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8013844:	693a      	ldr	r2, [r7, #16]
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	0011      	movs	r1, r2
 801384a:	0018      	movs	r0, r3
 801384c:	f000 fe54 	bl	80144f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	2210      	movs	r2, #16
 8013854:	4013      	ands	r3, r2
 8013856:	d052      	beq.n	80138fe <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2210      	movs	r2, #16
 801385c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801385e:	d04e      	beq.n	80138fe <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013864:	b29b      	uxth	r3, r3
 8013866:	2b00      	cmp	r3, #0
 8013868:	d12d      	bne.n	80138c6 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	2241      	movs	r2, #65	@ 0x41
 801386e:	5c9b      	ldrb	r3, [r3, r2]
 8013870:	b2db      	uxtb	r3, r3
 8013872:	2b28      	cmp	r3, #40	@ 0x28
 8013874:	d10b      	bne.n	801388e <I2C_Slave_ISR_IT+0x86>
 8013876:	697a      	ldr	r2, [r7, #20]
 8013878:	2380      	movs	r3, #128	@ 0x80
 801387a:	049b      	lsls	r3, r3, #18
 801387c:	429a      	cmp	r2, r3
 801387e:	d106      	bne.n	801388e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8013880:	693a      	ldr	r2, [r7, #16]
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	0011      	movs	r1, r2
 8013886:	0018      	movs	r0, r3
 8013888:	f000 ff56 	bl	8014738 <I2C_ITListenCplt>
 801388c:	e036      	b.n	80138fc <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2241      	movs	r2, #65	@ 0x41
 8013892:	5c9b      	ldrb	r3, [r3, r2]
 8013894:	b2db      	uxtb	r3, r3
 8013896:	2b29      	cmp	r3, #41	@ 0x29
 8013898:	d110      	bne.n	80138bc <I2C_Slave_ISR_IT+0xb4>
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	4a59      	ldr	r2, [pc, #356]	@ (8013a04 <I2C_Slave_ISR_IT+0x1fc>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d00c      	beq.n	80138bc <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2210      	movs	r2, #16
 80138a8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	0018      	movs	r0, r3
 80138ae:	f001 f8c6 	bl	8014a3e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	0018      	movs	r0, r3
 80138b6:	f000 fced 	bl	8014294 <I2C_ITSlaveSeqCplt>
 80138ba:	e01f      	b.n	80138fc <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2210      	movs	r2, #16
 80138c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80138c4:	e091      	b.n	80139ea <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2210      	movs	r2, #16
 80138cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138d2:	2204      	movs	r2, #4
 80138d4:	431a      	orrs	r2, r3
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d005      	beq.n	80138ec <I2C_Slave_ISR_IT+0xe4>
 80138e0:	697a      	ldr	r2, [r7, #20]
 80138e2:	2380      	movs	r3, #128	@ 0x80
 80138e4:	045b      	lsls	r3, r3, #17
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d000      	beq.n	80138ec <I2C_Slave_ISR_IT+0xe4>
 80138ea:	e07e      	b.n	80139ea <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	0011      	movs	r1, r2
 80138f4:	0018      	movs	r0, r3
 80138f6:	f000 ff77 	bl	80147e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80138fa:	e076      	b.n	80139ea <I2C_Slave_ISR_IT+0x1e2>
 80138fc:	e075      	b.n	80139ea <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	2204      	movs	r2, #4
 8013902:	4013      	ands	r3, r2
 8013904:	d02f      	beq.n	8013966 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2204      	movs	r2, #4
 801390a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801390c:	d02b      	beq.n	8013966 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013912:	b29b      	uxth	r3, r3
 8013914:	2b00      	cmp	r3, #0
 8013916:	d018      	beq.n	801394a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013922:	b2d2      	uxtb	r2, r2
 8013924:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801392a:	1c5a      	adds	r2, r3, #1
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013934:	3b01      	subs	r3, #1
 8013936:	b29a      	uxth	r2, r3
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013940:	b29b      	uxth	r3, r3
 8013942:	3b01      	subs	r3, #1
 8013944:	b29a      	uxth	r2, r3
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801394e:	b29b      	uxth	r3, r3
 8013950:	2b00      	cmp	r3, #0
 8013952:	d14c      	bne.n	80139ee <I2C_Slave_ISR_IT+0x1e6>
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	4a2b      	ldr	r2, [pc, #172]	@ (8013a04 <I2C_Slave_ISR_IT+0x1fc>)
 8013958:	4293      	cmp	r3, r2
 801395a:	d048      	beq.n	80139ee <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	0018      	movs	r0, r3
 8013960:	f000 fc98 	bl	8014294 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8013964:	e043      	b.n	80139ee <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	2208      	movs	r2, #8
 801396a:	4013      	ands	r3, r2
 801396c:	d00a      	beq.n	8013984 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2208      	movs	r2, #8
 8013972:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013974:	d006      	beq.n	8013984 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8013976:	693a      	ldr	r2, [r7, #16]
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	0011      	movs	r1, r2
 801397c:	0018      	movs	r0, r3
 801397e:	f000 fba3 	bl	80140c8 <I2C_ITAddrCplt>
 8013982:	e035      	b.n	80139f0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	2202      	movs	r2, #2
 8013988:	4013      	ands	r3, r2
 801398a:	d031      	beq.n	80139f0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2202      	movs	r2, #2
 8013990:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013992:	d02d      	beq.n	80139f0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013998:	b29b      	uxth	r3, r3
 801399a:	2b00      	cmp	r3, #0
 801399c:	d018      	beq.n	80139d0 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139a2:	781a      	ldrb	r2, [r3, #0]
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	3b01      	subs	r3, #1
 80139bc:	b29a      	uxth	r2, r3
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80139c6:	3b01      	subs	r3, #1
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80139ce:	e00f      	b.n	80139f0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80139d0:	697a      	ldr	r2, [r7, #20]
 80139d2:	2380      	movs	r3, #128	@ 0x80
 80139d4:	045b      	lsls	r3, r3, #17
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d002      	beq.n	80139e0 <I2C_Slave_ISR_IT+0x1d8>
 80139da:	697b      	ldr	r3, [r7, #20]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d107      	bne.n	80139f0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	0018      	movs	r0, r3
 80139e4:	f000 fc56 	bl	8014294 <I2C_ITSlaveSeqCplt>
 80139e8:	e002      	b.n	80139f0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80139ea:	46c0      	nop			@ (mov r8, r8)
 80139ec:	e000      	b.n	80139f0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80139ee:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	2240      	movs	r2, #64	@ 0x40
 80139f4:	2100      	movs	r1, #0
 80139f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80139f8:	2300      	movs	r3, #0
}
 80139fa:	0018      	movs	r0, r3
 80139fc:	46bd      	mov	sp, r7
 80139fe:	b006      	add	sp, #24
 8013a00:	bd80      	pop	{r7, pc}
 8013a02:	46c0      	nop			@ (mov r8, r8)
 8013a04:	ffff0000 	.word	0xffff0000

08013a08 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8013a08:	b590      	push	{r4, r7, lr}
 8013a0a:	b089      	sub	sp, #36	@ 0x24
 8013a0c:	af02      	add	r7, sp, #8
 8013a0e:	60f8      	str	r0, [r7, #12]
 8013a10:	60b9      	str	r1, [r7, #8]
 8013a12:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2240      	movs	r2, #64	@ 0x40
 8013a18:	5c9b      	ldrb	r3, [r3, r2]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d101      	bne.n	8013a22 <I2C_Master_ISR_DMA+0x1a>
 8013a1e:	2302      	movs	r3, #2
 8013a20:	e0e7      	b.n	8013bf2 <I2C_Master_ISR_DMA+0x1ea>
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2240      	movs	r2, #64	@ 0x40
 8013a26:	2101      	movs	r1, #1
 8013a28:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013a2a:	68bb      	ldr	r3, [r7, #8]
 8013a2c:	2210      	movs	r2, #16
 8013a2e:	4013      	ands	r3, r2
 8013a30:	d017      	beq.n	8013a62 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2210      	movs	r2, #16
 8013a36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013a38:	d013      	beq.n	8013a62 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2210      	movs	r2, #16
 8013a40:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a46:	2204      	movs	r2, #4
 8013a48:	431a      	orrs	r2, r3
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2120      	movs	r1, #32
 8013a52:	0018      	movs	r0, r3
 8013a54:	f001 fb7a 	bl	801514c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	0018      	movs	r0, r3
 8013a5c:	f000 ffef 	bl	8014a3e <I2C_Flush_TXDR>
 8013a60:	e0c2      	b.n	8013be8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	2280      	movs	r2, #128	@ 0x80
 8013a66:	4013      	ands	r3, r2
 8013a68:	d100      	bne.n	8013a6c <I2C_Master_ISR_DMA+0x64>
 8013a6a:	e07c      	b.n	8013b66 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2240      	movs	r2, #64	@ 0x40
 8013a70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013a72:	d100      	bne.n	8013a76 <I2C_Master_ISR_DMA+0x6e>
 8013a74:	e077      	b.n	8013b66 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	681a      	ldr	r2, [r3, #0]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2140      	movs	r1, #64	@ 0x40
 8013a82:	438a      	bics	r2, r1
 8013a84:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d055      	beq.n	8013b3c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	2312      	movs	r3, #18
 8013a9a:	18fb      	adds	r3, r7, r3
 8013a9c:	0592      	lsls	r2, r2, #22
 8013a9e:	0d92      	lsrs	r2, r2, #22
 8013aa0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	2bff      	cmp	r3, #255	@ 0xff
 8013aaa:	d906      	bls.n	8013aba <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	22ff      	movs	r2, #255	@ 0xff
 8013ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8013ab2:	2380      	movs	r3, #128	@ 0x80
 8013ab4:	045b      	lsls	r3, r3, #17
 8013ab6:	617b      	str	r3, [r7, #20]
 8013ab8:	e010      	b.n	8013adc <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ac8:	4a4c      	ldr	r2, [pc, #304]	@ (8013bfc <I2C_Master_ISR_DMA+0x1f4>)
 8013aca:	4293      	cmp	r3, r2
 8013acc:	d003      	beq.n	8013ad6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ad2:	617b      	str	r3, [r7, #20]
 8013ad4:	e002      	b.n	8013adc <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8013ad6:	2380      	movs	r3, #128	@ 0x80
 8013ad8:	049b      	lsls	r3, r3, #18
 8013ada:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ae0:	b2da      	uxtb	r2, r3
 8013ae2:	697c      	ldr	r4, [r7, #20]
 8013ae4:	2312      	movs	r3, #18
 8013ae6:	18fb      	adds	r3, r7, r3
 8013ae8:	8819      	ldrh	r1, [r3, #0]
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	2300      	movs	r3, #0
 8013aee:	9300      	str	r3, [sp, #0]
 8013af0:	0023      	movs	r3, r4
 8013af2:	f001 faf1 	bl	80150d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2241      	movs	r2, #65	@ 0x41
 8013b0c:	5c9b      	ldrb	r3, [r3, r2]
 8013b0e:	b2db      	uxtb	r3, r3
 8013b10:	2b22      	cmp	r3, #34	@ 0x22
 8013b12:	d109      	bne.n	8013b28 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2180      	movs	r1, #128	@ 0x80
 8013b20:	0209      	lsls	r1, r1, #8
 8013b22:	430a      	orrs	r2, r1
 8013b24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013b26:	e05f      	b.n	8013be8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	2180      	movs	r1, #128	@ 0x80
 8013b34:	01c9      	lsls	r1, r1, #7
 8013b36:	430a      	orrs	r2, r1
 8013b38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013b3a:	e055      	b.n	8013be8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	685a      	ldr	r2, [r3, #4]
 8013b42:	2380      	movs	r3, #128	@ 0x80
 8013b44:	049b      	lsls	r3, r3, #18
 8013b46:	401a      	ands	r2, r3
 8013b48:	2380      	movs	r3, #128	@ 0x80
 8013b4a:	049b      	lsls	r3, r3, #18
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d004      	beq.n	8013b5a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	0018      	movs	r0, r3
 8013b54:	f000 fb5c 	bl	8014210 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8013b58:	e046      	b.n	8013be8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	2140      	movs	r1, #64	@ 0x40
 8013b5e:	0018      	movs	r0, r3
 8013b60:	f000 fe42 	bl	80147e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8013b64:	e040      	b.n	8013be8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	2240      	movs	r2, #64	@ 0x40
 8013b6a:	4013      	ands	r3, r2
 8013b6c:	d02c      	beq.n	8013bc8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2240      	movs	r2, #64	@ 0x40
 8013b72:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013b74:	d028      	beq.n	8013bc8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d11d      	bne.n	8013bbc <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	685a      	ldr	r2, [r3, #4]
 8013b86:	2380      	movs	r3, #128	@ 0x80
 8013b88:	049b      	lsls	r3, r3, #18
 8013b8a:	401a      	ands	r2, r3
 8013b8c:	2380      	movs	r3, #128	@ 0x80
 8013b8e:	049b      	lsls	r3, r3, #18
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d028      	beq.n	8013be6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b98:	4a18      	ldr	r2, [pc, #96]	@ (8013bfc <I2C_Master_ISR_DMA+0x1f4>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d109      	bne.n	8013bb2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	685a      	ldr	r2, [r3, #4]
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2180      	movs	r1, #128	@ 0x80
 8013baa:	01c9      	lsls	r1, r1, #7
 8013bac:	430a      	orrs	r2, r1
 8013bae:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8013bb0:	e019      	b.n	8013be6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	0018      	movs	r0, r3
 8013bb6:	f000 fb2b 	bl	8014210 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8013bba:	e014      	b.n	8013be6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2140      	movs	r1, #64	@ 0x40
 8013bc0:	0018      	movs	r0, r3
 8013bc2:	f000 fe11 	bl	80147e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8013bc6:	e00e      	b.n	8013be6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	2220      	movs	r2, #32
 8013bcc:	4013      	ands	r3, r2
 8013bce:	d00b      	beq.n	8013be8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2220      	movs	r2, #32
 8013bd4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013bd6:	d007      	beq.n	8013be8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8013bd8:	68ba      	ldr	r2, [r7, #8]
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	0011      	movs	r1, r2
 8013bde:	0018      	movs	r0, r3
 8013be0:	f000 fbbc 	bl	801435c <I2C_ITMasterCplt>
 8013be4:	e000      	b.n	8013be8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8013be6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2240      	movs	r2, #64	@ 0x40
 8013bec:	2100      	movs	r1, #0
 8013bee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013bf0:	2300      	movs	r3, #0
}
 8013bf2:	0018      	movs	r0, r3
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	b007      	add	sp, #28
 8013bf8:	bd90      	pop	{r4, r7, pc}
 8013bfa:	46c0      	nop			@ (mov r8, r8)
 8013bfc:	ffff0000 	.word	0xffff0000

08013c00 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8013c00:	b590      	push	{r4, r7, lr}
 8013c02:	b089      	sub	sp, #36	@ 0x24
 8013c04:	af02      	add	r7, sp, #8
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8013c0c:	4b88      	ldr	r3, [pc, #544]	@ (8013e30 <I2C_Mem_ISR_DMA+0x230>)
 8013c0e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2240      	movs	r2, #64	@ 0x40
 8013c14:	5c9b      	ldrb	r3, [r3, r2]
 8013c16:	2b01      	cmp	r3, #1
 8013c18:	d101      	bne.n	8013c1e <I2C_Mem_ISR_DMA+0x1e>
 8013c1a:	2302      	movs	r3, #2
 8013c1c:	e104      	b.n	8013e28 <I2C_Mem_ISR_DMA+0x228>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2240      	movs	r2, #64	@ 0x40
 8013c22:	2101      	movs	r1, #1
 8013c24:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	2210      	movs	r2, #16
 8013c2a:	4013      	ands	r3, r2
 8013c2c:	d017      	beq.n	8013c5e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2210      	movs	r2, #16
 8013c32:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013c34:	d013      	beq.n	8013c5e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2210      	movs	r2, #16
 8013c3c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c42:	2204      	movs	r2, #4
 8013c44:	431a      	orrs	r2, r3
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	2120      	movs	r1, #32
 8013c4e:	0018      	movs	r0, r3
 8013c50:	f001 fa7c 	bl	801514c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	0018      	movs	r0, r3
 8013c58:	f000 fef1 	bl	8014a3e <I2C_Flush_TXDR>
 8013c5c:	e0df      	b.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	2202      	movs	r2, #2
 8013c62:	4013      	ands	r3, r2
 8013c64:	d00d      	beq.n	8013c82 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2202      	movs	r2, #2
 8013c6a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013c6c:	d009      	beq.n	8013c82 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	68fa      	ldr	r2, [r7, #12]
 8013c74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013c76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	4252      	negs	r2, r2
 8013c7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8013c80:	e0cd      	b.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	2280      	movs	r2, #128	@ 0x80
 8013c86:	4013      	ands	r3, r2
 8013c88:	d05e      	beq.n	8013d48 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2240      	movs	r2, #64	@ 0x40
 8013c8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013c90:	d05a      	beq.n	8013d48 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	2110      	movs	r1, #16
 8013c96:	0018      	movs	r0, r3
 8013c98:	f001 fa58 	bl	801514c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d04a      	beq.n	8013d3c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	2bff      	cmp	r3, #255	@ 0xff
 8013cae:	d910      	bls.n	8013cd2 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	22ff      	movs	r2, #255	@ 0xff
 8013cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013cba:	b299      	uxth	r1, r3
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cc0:	b2da      	uxtb	r2, r3
 8013cc2:	2380      	movs	r3, #128	@ 0x80
 8013cc4:	045b      	lsls	r3, r3, #17
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	2400      	movs	r4, #0
 8013cca:	9400      	str	r4, [sp, #0]
 8013ccc:	f001 fa04 	bl	80150d8 <I2C_TransferConfig>
 8013cd0:	e011      	b.n	8013cf6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ce0:	b299      	uxth	r1, r3
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ce6:	b2da      	uxtb	r2, r3
 8013ce8:	2380      	movs	r3, #128	@ 0x80
 8013cea:	049b      	lsls	r3, r3, #18
 8013cec:	68f8      	ldr	r0, [r7, #12]
 8013cee:	2400      	movs	r4, #0
 8013cf0:	9400      	str	r4, [sp, #0]
 8013cf2:	f001 f9f1 	bl	80150d8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	b29a      	uxth	r2, r3
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2241      	movs	r2, #65	@ 0x41
 8013d0c:	5c9b      	ldrb	r3, [r3, r2]
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	2b22      	cmp	r3, #34	@ 0x22
 8013d12:	d109      	bne.n	8013d28 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2180      	movs	r1, #128	@ 0x80
 8013d20:	0209      	lsls	r1, r1, #8
 8013d22:	430a      	orrs	r2, r1
 8013d24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013d26:	e07a      	b.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2180      	movs	r1, #128	@ 0x80
 8013d34:	01c9      	lsls	r1, r1, #7
 8013d36:	430a      	orrs	r2, r1
 8013d38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013d3a:	e070      	b.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2140      	movs	r1, #64	@ 0x40
 8013d40:	0018      	movs	r0, r3
 8013d42:	f000 fd51 	bl	80147e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8013d46:	e06a      	b.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	2240      	movs	r2, #64	@ 0x40
 8013d4c:	4013      	ands	r3, r2
 8013d4e:	d058      	beq.n	8013e02 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2240      	movs	r2, #64	@ 0x40
 8013d54:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013d56:	d054      	beq.n	8013e02 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2241      	movs	r2, #65	@ 0x41
 8013d5c:	5c9b      	ldrb	r3, [r3, r2]
 8013d5e:	b2db      	uxtb	r3, r3
 8013d60:	2b22      	cmp	r3, #34	@ 0x22
 8013d62:	d101      	bne.n	8013d68 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8013d64:	4b33      	ldr	r3, [pc, #204]	@ (8013e34 <I2C_Mem_ISR_DMA+0x234>)
 8013d66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	2bff      	cmp	r3, #255	@ 0xff
 8013d70:	d911      	bls.n	8013d96 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	22ff      	movs	r2, #255	@ 0xff
 8013d76:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d7c:	b299      	uxth	r1, r3
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d82:	b2da      	uxtb	r2, r3
 8013d84:	2380      	movs	r3, #128	@ 0x80
 8013d86:	045c      	lsls	r4, r3, #17
 8013d88:	68f8      	ldr	r0, [r7, #12]
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	9300      	str	r3, [sp, #0]
 8013d8e:	0023      	movs	r3, r4
 8013d90:	f001 f9a2 	bl	80150d8 <I2C_TransferConfig>
 8013d94:	e012      	b.n	8013dbc <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013da4:	b299      	uxth	r1, r3
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	2380      	movs	r3, #128	@ 0x80
 8013dae:	049c      	lsls	r4, r3, #18
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	9300      	str	r3, [sp, #0]
 8013db6:	0023      	movs	r3, r4
 8013db8:	f001 f98e 	bl	80150d8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013dc6:	1ad3      	subs	r3, r2, r3
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2241      	movs	r2, #65	@ 0x41
 8013dd2:	5c9b      	ldrb	r3, [r3, r2]
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	2b22      	cmp	r3, #34	@ 0x22
 8013dd8:	d109      	bne.n	8013dee <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	681a      	ldr	r2, [r3, #0]
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2180      	movs	r1, #128	@ 0x80
 8013de6:	0209      	lsls	r1, r1, #8
 8013de8:	430a      	orrs	r2, r1
 8013dea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013dec:	e017      	b.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	2180      	movs	r1, #128	@ 0x80
 8013dfa:	01c9      	lsls	r1, r1, #7
 8013dfc:	430a      	orrs	r2, r1
 8013dfe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013e00:	e00d      	b.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	2220      	movs	r2, #32
 8013e06:	4013      	ands	r3, r2
 8013e08:	d009      	beq.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2220      	movs	r2, #32
 8013e0e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013e10:	d005      	beq.n	8013e1e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8013e12:	68ba      	ldr	r2, [r7, #8]
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	0011      	movs	r1, r2
 8013e18:	0018      	movs	r0, r3
 8013e1a:	f000 fa9f 	bl	801435c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2240      	movs	r2, #64	@ 0x40
 8013e22:	2100      	movs	r1, #0
 8013e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013e26:	2300      	movs	r3, #0
}
 8013e28:	0018      	movs	r0, r3
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	b007      	add	sp, #28
 8013e2e:	bd90      	pop	{r4, r7, pc}
 8013e30:	80002000 	.word	0x80002000
 8013e34:	80002400 	.word	0x80002400

08013e38 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b088      	sub	sp, #32
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	60b9      	str	r1, [r7, #8]
 8013e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e48:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	2240      	movs	r2, #64	@ 0x40
 8013e52:	5c9b      	ldrb	r3, [r3, r2]
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d101      	bne.n	8013e5c <I2C_Slave_ISR_DMA+0x24>
 8013e58:	2302      	movs	r3, #2
 8013e5a:	e0cd      	b.n	8013ff8 <I2C_Slave_ISR_DMA+0x1c0>
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	2240      	movs	r2, #64	@ 0x40
 8013e60:	2101      	movs	r1, #1
 8013e62:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	2220      	movs	r2, #32
 8013e68:	4013      	ands	r3, r2
 8013e6a:	d009      	beq.n	8013e80 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2220      	movs	r2, #32
 8013e70:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013e72:	d005      	beq.n	8013e80 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8013e74:	68ba      	ldr	r2, [r7, #8]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	0011      	movs	r1, r2
 8013e7a:	0018      	movs	r0, r3
 8013e7c:	f000 fb3c 	bl	80144f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	2210      	movs	r2, #16
 8013e84:	4013      	ands	r3, r2
 8013e86:	d100      	bne.n	8013e8a <I2C_Slave_ISR_DMA+0x52>
 8013e88:	e0a3      	b.n	8013fd2 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2210      	movs	r2, #16
 8013e8e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013e90:	d100      	bne.n	8013e94 <I2C_Slave_ISR_DMA+0x5c>
 8013e92:	e09e      	b.n	8013fd2 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	2380      	movs	r3, #128	@ 0x80
 8013e98:	01db      	lsls	r3, r3, #7
 8013e9a:	4013      	ands	r3, r2
 8013e9c:	d105      	bne.n	8013eaa <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8013e9e:	687a      	ldr	r2, [r7, #4]
 8013ea0:	2380      	movs	r3, #128	@ 0x80
 8013ea2:	021b      	lsls	r3, r3, #8
 8013ea4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013ea6:	d100      	bne.n	8013eaa <I2C_Slave_ISR_DMA+0x72>
 8013ea8:	e08c      	b.n	8013fc4 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d00c      	beq.n	8013ecc <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	2380      	movs	r3, #128	@ 0x80
 8013eb6:	021b      	lsls	r3, r3, #8
 8013eb8:	4013      	ands	r3, r2
 8013eba:	d007      	beq.n	8013ecc <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	685b      	ldr	r3, [r3, #4]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d101      	bne.n	8013ecc <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8013ec8:	2301      	movs	r3, #1
 8013eca:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d00c      	beq.n	8013eee <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8013ed4:	687a      	ldr	r2, [r7, #4]
 8013ed6:	2380      	movs	r3, #128	@ 0x80
 8013ed8:	01db      	lsls	r3, r3, #7
 8013eda:	4013      	ands	r3, r2
 8013edc:	d007      	beq.n	8013eee <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d101      	bne.n	8013eee <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8013eea:	2301      	movs	r3, #1
 8013eec:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8013eee:	69fb      	ldr	r3, [r7, #28]
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	d12d      	bne.n	8013f50 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2241      	movs	r2, #65	@ 0x41
 8013ef8:	5c9b      	ldrb	r3, [r3, r2]
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	2b28      	cmp	r3, #40	@ 0x28
 8013efe:	d10b      	bne.n	8013f18 <I2C_Slave_ISR_DMA+0xe0>
 8013f00:	69ba      	ldr	r2, [r7, #24]
 8013f02:	2380      	movs	r3, #128	@ 0x80
 8013f04:	049b      	lsls	r3, r3, #18
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d106      	bne.n	8013f18 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8013f0a:	68ba      	ldr	r2, [r7, #8]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	0011      	movs	r1, r2
 8013f10:	0018      	movs	r0, r3
 8013f12:	f000 fc11 	bl	8014738 <I2C_ITListenCplt>
 8013f16:	e054      	b.n	8013fc2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	2241      	movs	r2, #65	@ 0x41
 8013f1c:	5c9b      	ldrb	r3, [r3, r2]
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	2b29      	cmp	r3, #41	@ 0x29
 8013f22:	d110      	bne.n	8013f46 <I2C_Slave_ISR_DMA+0x10e>
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	4a36      	ldr	r2, [pc, #216]	@ (8014000 <I2C_Slave_ISR_DMA+0x1c8>)
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	d00c      	beq.n	8013f46 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2210      	movs	r2, #16
 8013f32:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	0018      	movs	r0, r3
 8013f38:	f000 fd81 	bl	8014a3e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	0018      	movs	r0, r3
 8013f40:	f000 f9a8 	bl	8014294 <I2C_ITSlaveSeqCplt>
 8013f44:	e03d      	b.n	8013fc2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	2210      	movs	r2, #16
 8013f4c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8013f4e:	e03e      	b.n	8013fce <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	2210      	movs	r2, #16
 8013f56:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f5c:	2204      	movs	r2, #4
 8013f5e:	431a      	orrs	r2, r3
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8013f64:	2317      	movs	r3, #23
 8013f66:	18fb      	adds	r3, r7, r3
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	2141      	movs	r1, #65	@ 0x41
 8013f6c:	5c52      	ldrb	r2, [r2, r1]
 8013f6e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d004      	beq.n	8013f80 <I2C_Slave_ISR_DMA+0x148>
 8013f76:	69ba      	ldr	r2, [r7, #24]
 8013f78:	2380      	movs	r3, #128	@ 0x80
 8013f7a:	045b      	lsls	r3, r3, #17
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d126      	bne.n	8013fce <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8013f80:	2217      	movs	r2, #23
 8013f82:	18bb      	adds	r3, r7, r2
 8013f84:	781b      	ldrb	r3, [r3, #0]
 8013f86:	2b21      	cmp	r3, #33	@ 0x21
 8013f88:	d003      	beq.n	8013f92 <I2C_Slave_ISR_DMA+0x15a>
 8013f8a:	18bb      	adds	r3, r7, r2
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	2b29      	cmp	r3, #41	@ 0x29
 8013f90:	d103      	bne.n	8013f9a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2221      	movs	r2, #33	@ 0x21
 8013f96:	631a      	str	r2, [r3, #48]	@ 0x30
 8013f98:	e00b      	b.n	8013fb2 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8013f9a:	2217      	movs	r2, #23
 8013f9c:	18bb      	adds	r3, r7, r2
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	2b22      	cmp	r3, #34	@ 0x22
 8013fa2:	d003      	beq.n	8013fac <I2C_Slave_ISR_DMA+0x174>
 8013fa4:	18bb      	adds	r3, r7, r2
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013faa:	d102      	bne.n	8013fb2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	2222      	movs	r2, #34	@ 0x22
 8013fb0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	0011      	movs	r1, r2
 8013fba:	0018      	movs	r0, r3
 8013fbc:	f000 fc14 	bl	80147e8 <I2C_ITError>
      if (treatdmanack == 1U)
 8013fc0:	e005      	b.n	8013fce <I2C_Slave_ISR_DMA+0x196>
 8013fc2:	e004      	b.n	8013fce <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	2210      	movs	r2, #16
 8013fca:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013fcc:	e00f      	b.n	8013fee <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8013fce:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013fd0:	e00d      	b.n	8013fee <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	2208      	movs	r2, #8
 8013fd6:	4013      	ands	r3, r2
 8013fd8:	d009      	beq.n	8013fee <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2208      	movs	r2, #8
 8013fde:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013fe0:	d005      	beq.n	8013fee <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8013fe2:	68ba      	ldr	r2, [r7, #8]
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	0011      	movs	r1, r2
 8013fe8:	0018      	movs	r0, r3
 8013fea:	f000 f86d 	bl	80140c8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	2240      	movs	r2, #64	@ 0x40
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013ff6:	2300      	movs	r3, #0
}
 8013ff8:	0018      	movs	r0, r3
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	b008      	add	sp, #32
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	ffff0000 	.word	0xffff0000

08014004 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8014004:	b5b0      	push	{r4, r5, r7, lr}
 8014006:	b086      	sub	sp, #24
 8014008:	af02      	add	r7, sp, #8
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	000c      	movs	r4, r1
 801400e:	0010      	movs	r0, r2
 8014010:	0019      	movs	r1, r3
 8014012:	250a      	movs	r5, #10
 8014014:	197b      	adds	r3, r7, r5
 8014016:	1c22      	adds	r2, r4, #0
 8014018:	801a      	strh	r2, [r3, #0]
 801401a:	2308      	movs	r3, #8
 801401c:	18fb      	adds	r3, r7, r3
 801401e:	1c02      	adds	r2, r0, #0
 8014020:	801a      	strh	r2, [r3, #0]
 8014022:	1dbb      	adds	r3, r7, #6
 8014024:	1c0a      	adds	r2, r1, #0
 8014026:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8014028:	1dbb      	adds	r3, r7, #6
 801402a:	881b      	ldrh	r3, [r3, #0]
 801402c:	b2da      	uxtb	r2, r3
 801402e:	197b      	adds	r3, r7, r5
 8014030:	8819      	ldrh	r1, [r3, #0]
 8014032:	68f8      	ldr	r0, [r7, #12]
 8014034:	4b23      	ldr	r3, [pc, #140]	@ (80140c4 <I2C_RequestMemoryRead+0xc0>)
 8014036:	9300      	str	r3, [sp, #0]
 8014038:	2300      	movs	r3, #0
 801403a:	f001 f84d 	bl	80150d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014040:	6a39      	ldr	r1, [r7, #32]
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	0018      	movs	r0, r3
 8014046:	f000 fe43 	bl	8014cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 801404a:	1e03      	subs	r3, r0, #0
 801404c:	d001      	beq.n	8014052 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 801404e:	2301      	movs	r3, #1
 8014050:	e033      	b.n	80140ba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014052:	1dbb      	adds	r3, r7, #6
 8014054:	881b      	ldrh	r3, [r3, #0]
 8014056:	2b01      	cmp	r3, #1
 8014058:	d107      	bne.n	801406a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801405a:	2308      	movs	r3, #8
 801405c:	18fb      	adds	r3, r7, r3
 801405e:	881b      	ldrh	r3, [r3, #0]
 8014060:	b2da      	uxtb	r2, r3
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	629a      	str	r2, [r3, #40]	@ 0x28
 8014068:	e019      	b.n	801409e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801406a:	2308      	movs	r3, #8
 801406c:	18fb      	adds	r3, r7, r3
 801406e:	881b      	ldrh	r3, [r3, #0]
 8014070:	0a1b      	lsrs	r3, r3, #8
 8014072:	b29b      	uxth	r3, r3
 8014074:	b2da      	uxtb	r2, r3
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801407c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801407e:	6a39      	ldr	r1, [r7, #32]
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	0018      	movs	r0, r3
 8014084:	f000 fe24 	bl	8014cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8014088:	1e03      	subs	r3, r0, #0
 801408a:	d001      	beq.n	8014090 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 801408c:	2301      	movs	r3, #1
 801408e:	e014      	b.n	80140ba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014090:	2308      	movs	r3, #8
 8014092:	18fb      	adds	r3, r7, r3
 8014094:	881b      	ldrh	r3, [r3, #0]
 8014096:	b2da      	uxtb	r2, r3
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801409e:	6a3a      	ldr	r2, [r7, #32]
 80140a0:	68f8      	ldr	r0, [r7, #12]
 80140a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	0013      	movs	r3, r2
 80140a8:	2200      	movs	r2, #0
 80140aa:	2140      	movs	r1, #64	@ 0x40
 80140ac:	f000 fdc2 	bl	8014c34 <I2C_WaitOnFlagUntilTimeout>
 80140b0:	1e03      	subs	r3, r0, #0
 80140b2:	d001      	beq.n	80140b8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80140b4:	2301      	movs	r3, #1
 80140b6:	e000      	b.n	80140ba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80140b8:	2300      	movs	r3, #0
}
 80140ba:	0018      	movs	r0, r3
 80140bc:	46bd      	mov	sp, r7
 80140be:	b004      	add	sp, #16
 80140c0:	bdb0      	pop	{r4, r5, r7, pc}
 80140c2:	46c0      	nop			@ (mov r8, r8)
 80140c4:	80002000 	.word	0x80002000

080140c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80140c8:	b5b0      	push	{r4, r5, r7, lr}
 80140ca:	b084      	sub	sp, #16
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2241      	movs	r2, #65	@ 0x41
 80140d6:	5c9b      	ldrb	r3, [r3, r2]
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	001a      	movs	r2, r3
 80140dc:	2328      	movs	r3, #40	@ 0x28
 80140de:	4013      	ands	r3, r2
 80140e0:	2b28      	cmp	r3, #40	@ 0x28
 80140e2:	d000      	beq.n	80140e6 <I2C_ITAddrCplt+0x1e>
 80140e4:	e088      	b.n	80141f8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	699b      	ldr	r3, [r3, #24]
 80140ec:	0c1b      	lsrs	r3, r3, #16
 80140ee:	b2da      	uxtb	r2, r3
 80140f0:	250f      	movs	r5, #15
 80140f2:	197b      	adds	r3, r7, r5
 80140f4:	2101      	movs	r1, #1
 80140f6:	400a      	ands	r2, r1
 80140f8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	699b      	ldr	r3, [r3, #24]
 8014100:	0c1b      	lsrs	r3, r3, #16
 8014102:	b29a      	uxth	r2, r3
 8014104:	200c      	movs	r0, #12
 8014106:	183b      	adds	r3, r7, r0
 8014108:	21fe      	movs	r1, #254	@ 0xfe
 801410a:	400a      	ands	r2, r1
 801410c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	689b      	ldr	r3, [r3, #8]
 8014114:	b29a      	uxth	r2, r3
 8014116:	240a      	movs	r4, #10
 8014118:	193b      	adds	r3, r7, r4
 801411a:	0592      	lsls	r2, r2, #22
 801411c:	0d92      	lsrs	r2, r2, #22
 801411e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	68db      	ldr	r3, [r3, #12]
 8014126:	b29a      	uxth	r2, r3
 8014128:	2308      	movs	r3, #8
 801412a:	18fb      	adds	r3, r7, r3
 801412c:	21fe      	movs	r1, #254	@ 0xfe
 801412e:	400a      	ands	r2, r1
 8014130:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	68db      	ldr	r3, [r3, #12]
 8014136:	2b02      	cmp	r3, #2
 8014138:	d148      	bne.n	80141cc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 801413a:	0021      	movs	r1, r4
 801413c:	187b      	adds	r3, r7, r1
 801413e:	881b      	ldrh	r3, [r3, #0]
 8014140:	09db      	lsrs	r3, r3, #7
 8014142:	b29a      	uxth	r2, r3
 8014144:	183b      	adds	r3, r7, r0
 8014146:	881b      	ldrh	r3, [r3, #0]
 8014148:	4053      	eors	r3, r2
 801414a:	b29b      	uxth	r3, r3
 801414c:	001a      	movs	r2, r3
 801414e:	2306      	movs	r3, #6
 8014150:	4013      	ands	r3, r2
 8014152:	d120      	bne.n	8014196 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8014154:	183b      	adds	r3, r7, r0
 8014156:	187a      	adds	r2, r7, r1
 8014158:	8812      	ldrh	r2, [r2, #0]
 801415a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014160:	1c5a      	adds	r2, r3, #1
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801416a:	2b02      	cmp	r3, #2
 801416c:	d14c      	bne.n	8014208 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2200      	movs	r2, #0
 8014172:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	2208      	movs	r2, #8
 801417a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2240      	movs	r2, #64	@ 0x40
 8014180:	2100      	movs	r1, #0
 8014182:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014184:	183b      	adds	r3, r7, r0
 8014186:	881a      	ldrh	r2, [r3, #0]
 8014188:	197b      	adds	r3, r7, r5
 801418a:	7819      	ldrb	r1, [r3, #0]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	0018      	movs	r0, r3
 8014190:	f7ff f9d7 	bl	8013542 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8014194:	e038      	b.n	8014208 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8014196:	240c      	movs	r4, #12
 8014198:	193b      	adds	r3, r7, r4
 801419a:	2208      	movs	r2, #8
 801419c:	18ba      	adds	r2, r7, r2
 801419e:	8812      	ldrh	r2, [r2, #0]
 80141a0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80141a2:	2380      	movs	r3, #128	@ 0x80
 80141a4:	021a      	lsls	r2, r3, #8
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	0011      	movs	r1, r2
 80141aa:	0018      	movs	r0, r3
 80141ac:	f001 f85c 	bl	8015268 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2240      	movs	r2, #64	@ 0x40
 80141b4:	2100      	movs	r1, #0
 80141b6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80141b8:	193b      	adds	r3, r7, r4
 80141ba:	881a      	ldrh	r2, [r3, #0]
 80141bc:	230f      	movs	r3, #15
 80141be:	18fb      	adds	r3, r7, r3
 80141c0:	7819      	ldrb	r1, [r3, #0]
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	0018      	movs	r0, r3
 80141c6:	f7ff f9bc 	bl	8013542 <HAL_I2C_AddrCallback>
}
 80141ca:	e01d      	b.n	8014208 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80141cc:	2380      	movs	r3, #128	@ 0x80
 80141ce:	021a      	lsls	r2, r3, #8
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	0011      	movs	r1, r2
 80141d4:	0018      	movs	r0, r3
 80141d6:	f001 f847 	bl	8015268 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2240      	movs	r2, #64	@ 0x40
 80141de:	2100      	movs	r1, #0
 80141e0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80141e2:	230c      	movs	r3, #12
 80141e4:	18fb      	adds	r3, r7, r3
 80141e6:	881a      	ldrh	r2, [r3, #0]
 80141e8:	230f      	movs	r3, #15
 80141ea:	18fb      	adds	r3, r7, r3
 80141ec:	7819      	ldrb	r1, [r3, #0]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	0018      	movs	r0, r3
 80141f2:	f7ff f9a6 	bl	8013542 <HAL_I2C_AddrCallback>
}
 80141f6:	e007      	b.n	8014208 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	2208      	movs	r2, #8
 80141fe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	2240      	movs	r2, #64	@ 0x40
 8014204:	2100      	movs	r1, #0
 8014206:	5499      	strb	r1, [r3, r2]
}
 8014208:	46c0      	nop			@ (mov r8, r8)
 801420a:	46bd      	mov	sp, r7
 801420c:	b004      	add	sp, #16
 801420e:	bdb0      	pop	{r4, r5, r7, pc}

08014210 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2242      	movs	r2, #66	@ 0x42
 801421c:	2100      	movs	r1, #0
 801421e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2241      	movs	r2, #65	@ 0x41
 8014224:	5c9b      	ldrb	r3, [r3, r2]
 8014226:	b2db      	uxtb	r3, r3
 8014228:	2b21      	cmp	r3, #33	@ 0x21
 801422a:	d117      	bne.n	801425c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	2241      	movs	r2, #65	@ 0x41
 8014230:	2120      	movs	r1, #32
 8014232:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2211      	movs	r2, #17
 8014238:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2200      	movs	r2, #0
 801423e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2101      	movs	r1, #1
 8014244:	0018      	movs	r0, r3
 8014246:	f001 f80f 	bl	8015268 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2240      	movs	r2, #64	@ 0x40
 801424e:	2100      	movs	r1, #0
 8014250:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	0018      	movs	r0, r3
 8014256:	f7ff f954 	bl	8013502 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801425a:	e016      	b.n	801428a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2241      	movs	r2, #65	@ 0x41
 8014260:	2120      	movs	r1, #32
 8014262:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2212      	movs	r2, #18
 8014268:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2200      	movs	r2, #0
 801426e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2102      	movs	r1, #2
 8014274:	0018      	movs	r0, r3
 8014276:	f000 fff7 	bl	8015268 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	2240      	movs	r2, #64	@ 0x40
 801427e:	2100      	movs	r1, #0
 8014280:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	0018      	movs	r0, r3
 8014286:	f7ff f944 	bl	8013512 <HAL_I2C_MasterRxCpltCallback>
}
 801428a:	46c0      	nop			@ (mov r8, r8)
 801428c:	46bd      	mov	sp, r7
 801428e:	b002      	add	sp, #8
 8014290:	bd80      	pop	{r7, pc}
	...

08014294 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2242      	movs	r2, #66	@ 0x42
 80142a8:	2100      	movs	r1, #0
 80142aa:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80142ac:	68fa      	ldr	r2, [r7, #12]
 80142ae:	2380      	movs	r3, #128	@ 0x80
 80142b0:	01db      	lsls	r3, r3, #7
 80142b2:	4013      	ands	r3, r2
 80142b4:	d008      	beq.n	80142c8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	681a      	ldr	r2, [r3, #0]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4924      	ldr	r1, [pc, #144]	@ (8014354 <I2C_ITSlaveSeqCplt+0xc0>)
 80142c2:	400a      	ands	r2, r1
 80142c4:	601a      	str	r2, [r3, #0]
 80142c6:	e00c      	b.n	80142e2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80142c8:	68fa      	ldr	r2, [r7, #12]
 80142ca:	2380      	movs	r3, #128	@ 0x80
 80142cc:	021b      	lsls	r3, r3, #8
 80142ce:	4013      	ands	r3, r2
 80142d0:	d007      	beq.n	80142e2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	681a      	ldr	r2, [r3, #0]
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	491e      	ldr	r1, [pc, #120]	@ (8014358 <I2C_ITSlaveSeqCplt+0xc4>)
 80142de:	400a      	ands	r2, r1
 80142e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2241      	movs	r2, #65	@ 0x41
 80142e6:	5c9b      	ldrb	r3, [r3, r2]
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	2b29      	cmp	r3, #41	@ 0x29
 80142ec:	d114      	bne.n	8014318 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2241      	movs	r2, #65	@ 0x41
 80142f2:	2128      	movs	r1, #40	@ 0x28
 80142f4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2221      	movs	r2, #33	@ 0x21
 80142fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2101      	movs	r1, #1
 8014300:	0018      	movs	r0, r3
 8014302:	f000 ffb1 	bl	8015268 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2240      	movs	r2, #64	@ 0x40
 801430a:	2100      	movs	r1, #0
 801430c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	0018      	movs	r0, r3
 8014312:	f7ff f906 	bl	8013522 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014316:	e019      	b.n	801434c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2241      	movs	r2, #65	@ 0x41
 801431c:	5c9b      	ldrb	r3, [r3, r2]
 801431e:	b2db      	uxtb	r3, r3
 8014320:	2b2a      	cmp	r3, #42	@ 0x2a
 8014322:	d113      	bne.n	801434c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2241      	movs	r2, #65	@ 0x41
 8014328:	2128      	movs	r1, #40	@ 0x28
 801432a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2222      	movs	r2, #34	@ 0x22
 8014330:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2102      	movs	r1, #2
 8014336:	0018      	movs	r0, r3
 8014338:	f000 ff96 	bl	8015268 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2240      	movs	r2, #64	@ 0x40
 8014340:	2100      	movs	r1, #0
 8014342:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	0018      	movs	r0, r3
 8014348:	f7ff f8f3 	bl	8013532 <HAL_I2C_SlaveRxCpltCallback>
}
 801434c:	46c0      	nop			@ (mov r8, r8)
 801434e:	46bd      	mov	sp, r7
 8014350:	b004      	add	sp, #16
 8014352:	bd80      	pop	{r7, pc}
 8014354:	ffffbfff 	.word	0xffffbfff
 8014358:	ffff7fff 	.word	0xffff7fff

0801435c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b086      	sub	sp, #24
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	2220      	movs	r2, #32
 8014370:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2241      	movs	r2, #65	@ 0x41
 8014376:	5c9b      	ldrb	r3, [r3, r2]
 8014378:	b2db      	uxtb	r3, r3
 801437a:	2b21      	cmp	r3, #33	@ 0x21
 801437c:	d108      	bne.n	8014390 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2101      	movs	r1, #1
 8014382:	0018      	movs	r0, r3
 8014384:	f000 ff70 	bl	8015268 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2211      	movs	r2, #17
 801438c:	631a      	str	r2, [r3, #48]	@ 0x30
 801438e:	e00d      	b.n	80143ac <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2241      	movs	r2, #65	@ 0x41
 8014394:	5c9b      	ldrb	r3, [r3, r2]
 8014396:	b2db      	uxtb	r3, r3
 8014398:	2b22      	cmp	r3, #34	@ 0x22
 801439a:	d107      	bne.n	80143ac <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2102      	movs	r1, #2
 80143a0:	0018      	movs	r0, r3
 80143a2:	f000 ff61 	bl	8015268 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2212      	movs	r2, #18
 80143aa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	685a      	ldr	r2, [r3, #4]
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	494e      	ldr	r1, [pc, #312]	@ (80144f0 <I2C_ITMasterCplt+0x194>)
 80143b8:	400a      	ands	r2, r1
 80143ba:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2200      	movs	r2, #0
 80143c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	4a4b      	ldr	r2, [pc, #300]	@ (80144f4 <I2C_ITMasterCplt+0x198>)
 80143c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	2210      	movs	r2, #16
 80143cc:	4013      	ands	r3, r2
 80143ce:	d009      	beq.n	80143e4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	2210      	movs	r2, #16
 80143d6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143dc:	2204      	movs	r2, #4
 80143de:	431a      	orrs	r2, r3
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2241      	movs	r2, #65	@ 0x41
 80143e8:	5c9b      	ldrb	r3, [r3, r2]
 80143ea:	b2db      	uxtb	r3, r3
 80143ec:	2b60      	cmp	r3, #96	@ 0x60
 80143ee:	d109      	bne.n	8014404 <I2C_ITMasterCplt+0xa8>
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	2204      	movs	r2, #4
 80143f4:	4013      	ands	r3, r2
 80143f6:	d005      	beq.n	8014404 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8014402:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	0018      	movs	r0, r3
 8014408:	f000 fb19 	bl	8014a3e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014410:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	2241      	movs	r2, #65	@ 0x41
 8014416:	5c9b      	ldrb	r3, [r3, r2]
 8014418:	b2db      	uxtb	r3, r3
 801441a:	2b60      	cmp	r3, #96	@ 0x60
 801441c:	d002      	beq.n	8014424 <I2C_ITMasterCplt+0xc8>
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d007      	beq.n	8014434 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	0011      	movs	r1, r2
 801442c:	0018      	movs	r0, r3
 801442e:	f000 f9db 	bl	80147e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014432:	e058      	b.n	80144e6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2241      	movs	r2, #65	@ 0x41
 8014438:	5c9b      	ldrb	r3, [r3, r2]
 801443a:	b2db      	uxtb	r3, r3
 801443c:	2b21      	cmp	r3, #33	@ 0x21
 801443e:	d126      	bne.n	801448e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2241      	movs	r2, #65	@ 0x41
 8014444:	2120      	movs	r1, #32
 8014446:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2200      	movs	r2, #0
 801444c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2242      	movs	r2, #66	@ 0x42
 8014452:	5c9b      	ldrb	r3, [r3, r2]
 8014454:	b2db      	uxtb	r3, r3
 8014456:	2b40      	cmp	r3, #64	@ 0x40
 8014458:	d10c      	bne.n	8014474 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2242      	movs	r2, #66	@ 0x42
 801445e:	2100      	movs	r1, #0
 8014460:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2240      	movs	r2, #64	@ 0x40
 8014466:	2100      	movs	r1, #0
 8014468:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	0018      	movs	r0, r3
 801446e:	f7ff f880 	bl	8013572 <HAL_I2C_MemTxCpltCallback>
}
 8014472:	e038      	b.n	80144e6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2242      	movs	r2, #66	@ 0x42
 8014478:	2100      	movs	r1, #0
 801447a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2240      	movs	r2, #64	@ 0x40
 8014480:	2100      	movs	r1, #0
 8014482:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	0018      	movs	r0, r3
 8014488:	f7ff f83b 	bl	8013502 <HAL_I2C_MasterTxCpltCallback>
}
 801448c:	e02b      	b.n	80144e6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2241      	movs	r2, #65	@ 0x41
 8014492:	5c9b      	ldrb	r3, [r3, r2]
 8014494:	b2db      	uxtb	r3, r3
 8014496:	2b22      	cmp	r3, #34	@ 0x22
 8014498:	d125      	bne.n	80144e6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2241      	movs	r2, #65	@ 0x41
 801449e:	2120      	movs	r1, #32
 80144a0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2242      	movs	r2, #66	@ 0x42
 80144ac:	5c9b      	ldrb	r3, [r3, r2]
 80144ae:	b2db      	uxtb	r3, r3
 80144b0:	2b40      	cmp	r3, #64	@ 0x40
 80144b2:	d10c      	bne.n	80144ce <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2242      	movs	r2, #66	@ 0x42
 80144b8:	2100      	movs	r1, #0
 80144ba:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2240      	movs	r2, #64	@ 0x40
 80144c0:	2100      	movs	r1, #0
 80144c2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	0018      	movs	r0, r3
 80144c8:	f7ff f85b 	bl	8013582 <HAL_I2C_MemRxCpltCallback>
}
 80144cc:	e00b      	b.n	80144e6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2242      	movs	r2, #66	@ 0x42
 80144d2:	2100      	movs	r1, #0
 80144d4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2240      	movs	r2, #64	@ 0x40
 80144da:	2100      	movs	r1, #0
 80144dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	0018      	movs	r0, r3
 80144e2:	f7ff f816 	bl	8013512 <HAL_I2C_MasterRxCpltCallback>
}
 80144e6:	46c0      	nop			@ (mov r8, r8)
 80144e8:	46bd      	mov	sp, r7
 80144ea:	b006      	add	sp, #24
 80144ec:	bd80      	pop	{r7, pc}
 80144ee:	46c0      	nop			@ (mov r8, r8)
 80144f0:	fe00e800 	.word	0xfe00e800
 80144f4:	ffff0000 	.word	0xffff0000

080144f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b086      	sub	sp, #24
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801450e:	200f      	movs	r0, #15
 8014510:	183b      	adds	r3, r7, r0
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	2141      	movs	r1, #65	@ 0x41
 8014516:	5c52      	ldrb	r2, [r2, r1]
 8014518:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	2220      	movs	r2, #32
 8014520:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014522:	183b      	adds	r3, r7, r0
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	2b21      	cmp	r3, #33	@ 0x21
 8014528:	d003      	beq.n	8014532 <I2C_ITSlaveCplt+0x3a>
 801452a:	183b      	adds	r3, r7, r0
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	2b29      	cmp	r3, #41	@ 0x29
 8014530:	d109      	bne.n	8014546 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8014532:	4a7b      	ldr	r2, [pc, #492]	@ (8014720 <I2C_ITSlaveCplt+0x228>)
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	0011      	movs	r1, r2
 8014538:	0018      	movs	r0, r3
 801453a:	f000 fe95 	bl	8015268 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2221      	movs	r2, #33	@ 0x21
 8014542:	631a      	str	r2, [r3, #48]	@ 0x30
 8014544:	e011      	b.n	801456a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014546:	220f      	movs	r2, #15
 8014548:	18bb      	adds	r3, r7, r2
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	2b22      	cmp	r3, #34	@ 0x22
 801454e:	d003      	beq.n	8014558 <I2C_ITSlaveCplt+0x60>
 8014550:	18bb      	adds	r3, r7, r2
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	2b2a      	cmp	r3, #42	@ 0x2a
 8014556:	d108      	bne.n	801456a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8014558:	4a72      	ldr	r2, [pc, #456]	@ (8014724 <I2C_ITSlaveCplt+0x22c>)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	0011      	movs	r1, r2
 801455e:	0018      	movs	r0, r3
 8014560:	f000 fe82 	bl	8015268 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2222      	movs	r2, #34	@ 0x22
 8014568:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	685a      	ldr	r2, [r3, #4]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2180      	movs	r1, #128	@ 0x80
 8014576:	0209      	lsls	r1, r1, #8
 8014578:	430a      	orrs	r2, r1
 801457a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	685a      	ldr	r2, [r3, #4]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	4968      	ldr	r1, [pc, #416]	@ (8014728 <I2C_ITSlaveCplt+0x230>)
 8014588:	400a      	ands	r2, r1
 801458a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	0018      	movs	r0, r3
 8014590:	f000 fa55 	bl	8014a3e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8014594:	693a      	ldr	r2, [r7, #16]
 8014596:	2380      	movs	r3, #128	@ 0x80
 8014598:	01db      	lsls	r3, r3, #7
 801459a:	4013      	ands	r3, r2
 801459c:	d013      	beq.n	80145c6 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	681a      	ldr	r2, [r3, #0]
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	4960      	ldr	r1, [pc, #384]	@ (801472c <I2C_ITSlaveCplt+0x234>)
 80145aa:	400a      	ands	r2, r1
 80145ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d01f      	beq.n	80145f6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	b29a      	uxth	r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80145c4:	e017      	b.n	80145f6 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80145c6:	693a      	ldr	r2, [r7, #16]
 80145c8:	2380      	movs	r3, #128	@ 0x80
 80145ca:	021b      	lsls	r3, r3, #8
 80145cc:	4013      	ands	r3, r2
 80145ce:	d012      	beq.n	80145f6 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	4955      	ldr	r1, [pc, #340]	@ (8014730 <I2C_ITSlaveCplt+0x238>)
 80145dc:	400a      	ands	r2, r1
 80145de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d006      	beq.n	80145f6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	b29a      	uxth	r2, r3
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	2204      	movs	r2, #4
 80145fa:	4013      	ands	r3, r2
 80145fc:	d020      	beq.n	8014640 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	2204      	movs	r2, #4
 8014602:	4393      	bics	r3, r2
 8014604:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014610:	b2d2      	uxtb	r2, r2
 8014612:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014618:	1c5a      	adds	r2, r3, #1
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014622:	2b00      	cmp	r3, #0
 8014624:	d00c      	beq.n	8014640 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801462a:	3b01      	subs	r3, #1
 801462c:	b29a      	uxth	r2, r3
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014636:	b29b      	uxth	r3, r3
 8014638:	3b01      	subs	r3, #1
 801463a:	b29a      	uxth	r2, r3
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014644:	b29b      	uxth	r3, r3
 8014646:	2b00      	cmp	r3, #0
 8014648:	d005      	beq.n	8014656 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801464e:	2204      	movs	r2, #4
 8014650:	431a      	orrs	r2, r3
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2242      	movs	r2, #66	@ 0x42
 801465a:	2100      	movs	r1, #0
 801465c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2200      	movs	r2, #0
 8014662:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014668:	2b00      	cmp	r3, #0
 801466a:	d013      	beq.n	8014694 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	0011      	movs	r1, r2
 8014674:	0018      	movs	r0, r3
 8014676:	f000 f8b7 	bl	80147e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2241      	movs	r2, #65	@ 0x41
 801467e:	5c9b      	ldrb	r3, [r3, r2]
 8014680:	b2db      	uxtb	r3, r3
 8014682:	2b28      	cmp	r3, #40	@ 0x28
 8014684:	d147      	bne.n	8014716 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8014686:	697a      	ldr	r2, [r7, #20]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	0011      	movs	r1, r2
 801468c:	0018      	movs	r0, r3
 801468e:	f000 f853 	bl	8014738 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014692:	e040      	b.n	8014716 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014698:	4a26      	ldr	r2, [pc, #152]	@ (8014734 <I2C_ITSlaveCplt+0x23c>)
 801469a:	4293      	cmp	r3, r2
 801469c:	d016      	beq.n	80146cc <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	0018      	movs	r0, r3
 80146a2:	f7ff fdf7 	bl	8014294 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	4a22      	ldr	r2, [pc, #136]	@ (8014734 <I2C_ITSlaveCplt+0x23c>)
 80146aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2241      	movs	r2, #65	@ 0x41
 80146b0:	2120      	movs	r1, #32
 80146b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2200      	movs	r2, #0
 80146b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2240      	movs	r2, #64	@ 0x40
 80146be:	2100      	movs	r1, #0
 80146c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	0018      	movs	r0, r3
 80146c6:	f7fe ff4c 	bl	8013562 <HAL_I2C_ListenCpltCallback>
}
 80146ca:	e024      	b.n	8014716 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2241      	movs	r2, #65	@ 0x41
 80146d0:	5c9b      	ldrb	r3, [r3, r2]
 80146d2:	b2db      	uxtb	r3, r3
 80146d4:	2b22      	cmp	r3, #34	@ 0x22
 80146d6:	d10f      	bne.n	80146f8 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2241      	movs	r2, #65	@ 0x41
 80146dc:	2120      	movs	r1, #32
 80146de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2200      	movs	r2, #0
 80146e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2240      	movs	r2, #64	@ 0x40
 80146ea:	2100      	movs	r1, #0
 80146ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	0018      	movs	r0, r3
 80146f2:	f7fe ff1e 	bl	8013532 <HAL_I2C_SlaveRxCpltCallback>
}
 80146f6:	e00e      	b.n	8014716 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2241      	movs	r2, #65	@ 0x41
 80146fc:	2120      	movs	r1, #32
 80146fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2200      	movs	r2, #0
 8014704:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	2240      	movs	r2, #64	@ 0x40
 801470a:	2100      	movs	r1, #0
 801470c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	0018      	movs	r0, r3
 8014712:	f7fe ff06 	bl	8013522 <HAL_I2C_SlaveTxCpltCallback>
}
 8014716:	46c0      	nop			@ (mov r8, r8)
 8014718:	46bd      	mov	sp, r7
 801471a:	b006      	add	sp, #24
 801471c:	bd80      	pop	{r7, pc}
 801471e:	46c0      	nop			@ (mov r8, r8)
 8014720:	00008001 	.word	0x00008001
 8014724:	00008002 	.word	0x00008002
 8014728:	fe00e800 	.word	0xfe00e800
 801472c:	ffffbfff 	.word	0xffffbfff
 8014730:	ffff7fff 	.word	0xffff7fff
 8014734:	ffff0000 	.word	0xffff0000

08014738 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	4a26      	ldr	r2, [pc, #152]	@ (80147e0 <I2C_ITListenCplt+0xa8>)
 8014746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2200      	movs	r2, #0
 801474c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2241      	movs	r2, #65	@ 0x41
 8014752:	2120      	movs	r1, #32
 8014754:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2242      	movs	r2, #66	@ 0x42
 801475a:	2100      	movs	r1, #0
 801475c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2200      	movs	r2, #0
 8014762:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	2204      	movs	r2, #4
 8014768:	4013      	ands	r3, r2
 801476a:	d022      	beq.n	80147b2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014776:	b2d2      	uxtb	r2, r2
 8014778:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801477e:	1c5a      	adds	r2, r3, #1
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014788:	2b00      	cmp	r3, #0
 801478a:	d012      	beq.n	80147b2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014790:	3b01      	subs	r3, #1
 8014792:	b29a      	uxth	r2, r3
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801479c:	b29b      	uxth	r3, r3
 801479e:	3b01      	subs	r3, #1
 80147a0:	b29a      	uxth	r2, r3
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147aa:	2204      	movs	r2, #4
 80147ac:	431a      	orrs	r2, r3
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80147b2:	4a0c      	ldr	r2, [pc, #48]	@ (80147e4 <I2C_ITListenCplt+0xac>)
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	0011      	movs	r1, r2
 80147b8:	0018      	movs	r0, r3
 80147ba:	f000 fd55 	bl	8015268 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	2210      	movs	r2, #16
 80147c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2240      	movs	r2, #64	@ 0x40
 80147ca:	2100      	movs	r1, #0
 80147cc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	0018      	movs	r0, r3
 80147d2:	f7fe fec6 	bl	8013562 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80147d6:	46c0      	nop			@ (mov r8, r8)
 80147d8:	46bd      	mov	sp, r7
 80147da:	b002      	add	sp, #8
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	46c0      	nop			@ (mov r8, r8)
 80147e0:	ffff0000 	.word	0xffff0000
 80147e4:	00008003 	.word	0x00008003

080147e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b084      	sub	sp, #16
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80147f2:	200f      	movs	r0, #15
 80147f4:	183b      	adds	r3, r7, r0
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	2141      	movs	r1, #65	@ 0x41
 80147fa:	5c52      	ldrb	r2, [r2, r1]
 80147fc:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2242      	movs	r2, #66	@ 0x42
 8014802:	2100      	movs	r1, #0
 8014804:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	4a72      	ldr	r2, [pc, #456]	@ (80149d4 <I2C_ITError+0x1ec>)
 801480a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2200      	movs	r2, #0
 8014810:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	431a      	orrs	r2, r3
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801481e:	183b      	adds	r3, r7, r0
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	2b28      	cmp	r3, #40	@ 0x28
 8014824:	d007      	beq.n	8014836 <I2C_ITError+0x4e>
 8014826:	183b      	adds	r3, r7, r0
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	2b29      	cmp	r3, #41	@ 0x29
 801482c:	d003      	beq.n	8014836 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801482e:	183b      	adds	r3, r7, r0
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	2b2a      	cmp	r3, #42	@ 0x2a
 8014834:	d10c      	bne.n	8014850 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2103      	movs	r1, #3
 801483a:	0018      	movs	r0, r3
 801483c:	f000 fd14 	bl	8015268 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2241      	movs	r2, #65	@ 0x41
 8014844:	2128      	movs	r1, #40	@ 0x28
 8014846:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	4a63      	ldr	r2, [pc, #396]	@ (80149d8 <I2C_ITError+0x1f0>)
 801484c:	635a      	str	r2, [r3, #52]	@ 0x34
 801484e:	e032      	b.n	80148b6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014850:	4a62      	ldr	r2, [pc, #392]	@ (80149dc <I2C_ITError+0x1f4>)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	0011      	movs	r1, r2
 8014856:	0018      	movs	r0, r3
 8014858:	f000 fd06 	bl	8015268 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	0018      	movs	r0, r3
 8014860:	f000 f8ed 	bl	8014a3e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2241      	movs	r2, #65	@ 0x41
 8014868:	5c9b      	ldrb	r3, [r3, r2]
 801486a:	b2db      	uxtb	r3, r3
 801486c:	2b60      	cmp	r3, #96	@ 0x60
 801486e:	d01f      	beq.n	80148b0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2241      	movs	r2, #65	@ 0x41
 8014874:	2120      	movs	r1, #32
 8014876:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	699b      	ldr	r3, [r3, #24]
 801487e:	2220      	movs	r2, #32
 8014880:	4013      	ands	r3, r2
 8014882:	2b20      	cmp	r3, #32
 8014884:	d114      	bne.n	80148b0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	699b      	ldr	r3, [r3, #24]
 801488c:	2210      	movs	r2, #16
 801488e:	4013      	ands	r3, r2
 8014890:	2b10      	cmp	r3, #16
 8014892:	d109      	bne.n	80148a8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2210      	movs	r2, #16
 801489a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148a0:	2204      	movs	r2, #4
 80148a2:	431a      	orrs	r2, r3
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	2220      	movs	r2, #32
 80148ae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2200      	movs	r2, #0
 80148b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d03b      	beq.n	801493c <I2C_ITError+0x154>
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	2b11      	cmp	r3, #17
 80148c8:	d002      	beq.n	80148d0 <I2C_ITError+0xe8>
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	2b21      	cmp	r3, #33	@ 0x21
 80148ce:	d135      	bne.n	801493c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	2380      	movs	r3, #128	@ 0x80
 80148d8:	01db      	lsls	r3, r3, #7
 80148da:	401a      	ands	r2, r3
 80148dc:	2380      	movs	r3, #128	@ 0x80
 80148de:	01db      	lsls	r3, r3, #7
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d107      	bne.n	80148f4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	681a      	ldr	r2, [r3, #0]
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	493c      	ldr	r1, [pc, #240]	@ (80149e0 <I2C_ITError+0x1f8>)
 80148f0:	400a      	ands	r2, r1
 80148f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148f8:	0018      	movs	r0, r3
 80148fa:	f7fd faca 	bl	8011e92 <HAL_DMA_GetState>
 80148fe:	0003      	movs	r3, r0
 8014900:	2b01      	cmp	r3, #1
 8014902:	d016      	beq.n	8014932 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014908:	4a36      	ldr	r2, [pc, #216]	@ (80149e4 <I2C_ITError+0x1fc>)
 801490a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2240      	movs	r2, #64	@ 0x40
 8014910:	2100      	movs	r1, #0
 8014912:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014918:	0018      	movs	r0, r3
 801491a:	f7fd f9c5 	bl	8011ca8 <HAL_DMA_Abort_IT>
 801491e:	1e03      	subs	r3, r0, #0
 8014920:	d051      	beq.n	80149c6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801492c:	0018      	movs	r0, r3
 801492e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014930:	e049      	b.n	80149c6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	0018      	movs	r0, r3
 8014936:	f000 f859 	bl	80149ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801493a:	e044      	b.n	80149c6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014940:	2b00      	cmp	r3, #0
 8014942:	d03b      	beq.n	80149bc <I2C_ITError+0x1d4>
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	2b12      	cmp	r3, #18
 8014948:	d002      	beq.n	8014950 <I2C_ITError+0x168>
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	2b22      	cmp	r3, #34	@ 0x22
 801494e:	d135      	bne.n	80149bc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	2380      	movs	r3, #128	@ 0x80
 8014958:	021b      	lsls	r3, r3, #8
 801495a:	401a      	ands	r2, r3
 801495c:	2380      	movs	r3, #128	@ 0x80
 801495e:	021b      	lsls	r3, r3, #8
 8014960:	429a      	cmp	r2, r3
 8014962:	d107      	bne.n	8014974 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	491e      	ldr	r1, [pc, #120]	@ (80149e8 <I2C_ITError+0x200>)
 8014970:	400a      	ands	r2, r1
 8014972:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014978:	0018      	movs	r0, r3
 801497a:	f7fd fa8a 	bl	8011e92 <HAL_DMA_GetState>
 801497e:	0003      	movs	r3, r0
 8014980:	2b01      	cmp	r3, #1
 8014982:	d016      	beq.n	80149b2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014988:	4a16      	ldr	r2, [pc, #88]	@ (80149e4 <I2C_ITError+0x1fc>)
 801498a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2240      	movs	r2, #64	@ 0x40
 8014990:	2100      	movs	r1, #0
 8014992:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014998:	0018      	movs	r0, r3
 801499a:	f7fd f985 	bl	8011ca8 <HAL_DMA_Abort_IT>
 801499e:	1e03      	subs	r3, r0, #0
 80149a0:	d013      	beq.n	80149ca <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149ac:	0018      	movs	r0, r3
 80149ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80149b0:	e00b      	b.n	80149ca <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	0018      	movs	r0, r3
 80149b6:	f000 f819 	bl	80149ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80149ba:	e006      	b.n	80149ca <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	0018      	movs	r0, r3
 80149c0:	f000 f814 	bl	80149ec <I2C_TreatErrorCallback>
  }
}
 80149c4:	e002      	b.n	80149cc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80149c6:	46c0      	nop			@ (mov r8, r8)
 80149c8:	e000      	b.n	80149cc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80149ca:	46c0      	nop			@ (mov r8, r8)
}
 80149cc:	46c0      	nop			@ (mov r8, r8)
 80149ce:	46bd      	mov	sp, r7
 80149d0:	b004      	add	sp, #16
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	ffff0000 	.word	0xffff0000
 80149d8:	08013809 	.word	0x08013809
 80149dc:	00008003 	.word	0x00008003
 80149e0:	ffffbfff 	.word	0xffffbfff
 80149e4:	08014bf7 	.word	0x08014bf7
 80149e8:	ffff7fff 	.word	0xffff7fff

080149ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2241      	movs	r2, #65	@ 0x41
 80149f8:	5c9b      	ldrb	r3, [r3, r2]
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	2b60      	cmp	r3, #96	@ 0x60
 80149fe:	d10f      	bne.n	8014a20 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2241      	movs	r2, #65	@ 0x41
 8014a04:	2120      	movs	r1, #32
 8014a06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	2240      	movs	r2, #64	@ 0x40
 8014a12:	2100      	movs	r1, #0
 8014a14:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	0018      	movs	r0, r3
 8014a1a:	f7fe fdc2 	bl	80135a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014a1e:	e00a      	b.n	8014a36 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2200      	movs	r2, #0
 8014a24:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2240      	movs	r2, #64	@ 0x40
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	0018      	movs	r0, r3
 8014a32:	f7fe fdae 	bl	8013592 <HAL_I2C_ErrorCallback>
}
 8014a36:	46c0      	nop			@ (mov r8, r8)
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	b002      	add	sp, #8
 8014a3c:	bd80      	pop	{r7, pc}

08014a3e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8014a3e:	b580      	push	{r7, lr}
 8014a40:	b082      	sub	sp, #8
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	699b      	ldr	r3, [r3, #24]
 8014a4c:	2202      	movs	r2, #2
 8014a4e:	4013      	ands	r3, r2
 8014a50:	2b02      	cmp	r3, #2
 8014a52:	d103      	bne.n	8014a5c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	699b      	ldr	r3, [r3, #24]
 8014a62:	2201      	movs	r2, #1
 8014a64:	4013      	ands	r3, r2
 8014a66:	2b01      	cmp	r3, #1
 8014a68:	d007      	beq.n	8014a7a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	699a      	ldr	r2, [r3, #24]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	2101      	movs	r1, #1
 8014a76:	430a      	orrs	r2, r1
 8014a78:	619a      	str	r2, [r3, #24]
  }
}
 8014a7a:	46c0      	nop			@ (mov r8, r8)
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	b002      	add	sp, #8
 8014a80:	bd80      	pop	{r7, pc}
	...

08014a84 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b084      	sub	sp, #16
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a90:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	681a      	ldr	r2, [r3, #0]
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	4920      	ldr	r1, [pc, #128]	@ (8014b20 <I2C_DMAMasterTransmitCplt+0x9c>)
 8014a9e:	400a      	ands	r2, r1
 8014aa0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d105      	bne.n	8014ab8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2120      	movs	r1, #32
 8014ab0:	0018      	movs	r0, r3
 8014ab2:	f000 fb4b 	bl	801514c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8014ab6:	e02e      	b.n	8014b16 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014abc:	68fa      	ldr	r2, [r7, #12]
 8014abe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014ac0:	189a      	adds	r2, r3, r2
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	2bff      	cmp	r3, #255	@ 0xff
 8014ace:	d903      	bls.n	8014ad8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	22ff      	movs	r2, #255	@ 0xff
 8014ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014ad6:	e004      	b.n	8014ae2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014adc:	b29a      	uxth	r2, r3
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aea:	0019      	movs	r1, r3
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	3328      	adds	r3, #40	@ 0x28
 8014af2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8014af8:	f7fd f830 	bl	8011b5c <HAL_DMA_Start_IT>
 8014afc:	1e03      	subs	r3, r0, #0
 8014afe:	d005      	beq.n	8014b0c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2110      	movs	r1, #16
 8014b04:	0018      	movs	r0, r3
 8014b06:	f7ff fe6f 	bl	80147e8 <I2C_ITError>
}
 8014b0a:	e004      	b.n	8014b16 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2140      	movs	r1, #64	@ 0x40
 8014b10:	0018      	movs	r0, r3
 8014b12:	f000 fb1b 	bl	801514c <I2C_Enable_IRQ>
}
 8014b16:	46c0      	nop			@ (mov r8, r8)
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	b004      	add	sp, #16
 8014b1c:	bd80      	pop	{r7, pc}
 8014b1e:	46c0      	nop			@ (mov r8, r8)
 8014b20:	ffffbfff 	.word	0xffffbfff

08014b24 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b30:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	681a      	ldr	r2, [r3, #0]
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	4920      	ldr	r1, [pc, #128]	@ (8014bc0 <I2C_DMAMasterReceiveCplt+0x9c>)
 8014b3e:	400a      	ands	r2, r1
 8014b40:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d105      	bne.n	8014b58 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2120      	movs	r1, #32
 8014b50:	0018      	movs	r0, r3
 8014b52:	f000 fafb 	bl	801514c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8014b56:	e02e      	b.n	8014bb6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b5c:	68fa      	ldr	r2, [r7, #12]
 8014b5e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014b60:	189a      	adds	r2, r3, r2
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	2bff      	cmp	r3, #255	@ 0xff
 8014b6e:	d903      	bls.n	8014b78 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	22ff      	movs	r2, #255	@ 0xff
 8014b74:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014b76:	e004      	b.n	8014b82 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	3324      	adds	r3, #36	@ 0x24
 8014b8c:	0019      	movs	r1, r3
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b92:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8014b98:	f7fc ffe0 	bl	8011b5c <HAL_DMA_Start_IT>
 8014b9c:	1e03      	subs	r3, r0, #0
 8014b9e:	d005      	beq.n	8014bac <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	2110      	movs	r1, #16
 8014ba4:	0018      	movs	r0, r3
 8014ba6:	f7ff fe1f 	bl	80147e8 <I2C_ITError>
}
 8014baa:	e004      	b.n	8014bb6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2140      	movs	r1, #64	@ 0x40
 8014bb0:	0018      	movs	r0, r3
 8014bb2:	f000 facb 	bl	801514c <I2C_Enable_IRQ>
}
 8014bb6:	46c0      	nop			@ (mov r8, r8)
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	b004      	add	sp, #16
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	46c0      	nop			@ (mov r8, r8)
 8014bc0:	ffff7fff 	.word	0xffff7fff

08014bc4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bd0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	685a      	ldr	r2, [r3, #4]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2180      	movs	r1, #128	@ 0x80
 8014bde:	0209      	lsls	r1, r1, #8
 8014be0:	430a      	orrs	r2, r1
 8014be2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	2110      	movs	r1, #16
 8014be8:	0018      	movs	r0, r3
 8014bea:	f7ff fdfd 	bl	80147e8 <I2C_ITError>
}
 8014bee:	46c0      	nop			@ (mov r8, r8)
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	b004      	add	sp, #16
 8014bf4:	bd80      	pop	{r7, pc}

08014bf6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8014bf6:	b580      	push	{r7, lr}
 8014bf8:	b084      	sub	sp, #16
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d003      	beq.n	8014c14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c10:	2200      	movs	r2, #0
 8014c12:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d003      	beq.n	8014c24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c20:	2200      	movs	r2, #0
 8014c22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	0018      	movs	r0, r3
 8014c28:	f7ff fee0 	bl	80149ec <I2C_TreatErrorCallback>
}
 8014c2c:	46c0      	nop			@ (mov r8, r8)
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	b004      	add	sp, #16
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	603b      	str	r3, [r7, #0]
 8014c40:	1dfb      	adds	r3, r7, #7
 8014c42:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014c44:	e030      	b.n	8014ca8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	d02d      	beq.n	8014ca8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014c4c:	f7fc fa34 	bl	80110b8 <HAL_GetTick>
 8014c50:	0002      	movs	r2, r0
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	1ad3      	subs	r3, r2, r3
 8014c56:	683a      	ldr	r2, [r7, #0]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d302      	bcc.n	8014c62 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d122      	bne.n	8014ca8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	699b      	ldr	r3, [r3, #24]
 8014c68:	68ba      	ldr	r2, [r7, #8]
 8014c6a:	4013      	ands	r3, r2
 8014c6c:	68ba      	ldr	r2, [r7, #8]
 8014c6e:	1ad3      	subs	r3, r2, r3
 8014c70:	425a      	negs	r2, r3
 8014c72:	4153      	adcs	r3, r2
 8014c74:	b2db      	uxtb	r3, r3
 8014c76:	001a      	movs	r2, r3
 8014c78:	1dfb      	adds	r3, r7, #7
 8014c7a:	781b      	ldrb	r3, [r3, #0]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d113      	bne.n	8014ca8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c84:	2220      	movs	r2, #32
 8014c86:	431a      	orrs	r2, r3
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	2241      	movs	r2, #65	@ 0x41
 8014c90:	2120      	movs	r1, #32
 8014c92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2242      	movs	r2, #66	@ 0x42
 8014c98:	2100      	movs	r1, #0
 8014c9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2240      	movs	r2, #64	@ 0x40
 8014ca0:	2100      	movs	r1, #0
 8014ca2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	e00f      	b.n	8014cc8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	699b      	ldr	r3, [r3, #24]
 8014cae:	68ba      	ldr	r2, [r7, #8]
 8014cb0:	4013      	ands	r3, r2
 8014cb2:	68ba      	ldr	r2, [r7, #8]
 8014cb4:	1ad3      	subs	r3, r2, r3
 8014cb6:	425a      	negs	r2, r3
 8014cb8:	4153      	adcs	r3, r2
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	001a      	movs	r2, r3
 8014cbe:	1dfb      	adds	r3, r7, #7
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d0bf      	beq.n	8014c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014cc6:	2300      	movs	r3, #0
}
 8014cc8:	0018      	movs	r0, r3
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	b004      	add	sp, #16
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b084      	sub	sp, #16
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	60b9      	str	r1, [r7, #8]
 8014cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014cdc:	e032      	b.n	8014d44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014cde:	687a      	ldr	r2, [r7, #4]
 8014ce0:	68b9      	ldr	r1, [r7, #8]
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	0018      	movs	r0, r3
 8014ce6:	f000 f8ff 	bl	8014ee8 <I2C_IsErrorOccurred>
 8014cea:	1e03      	subs	r3, r0, #0
 8014cec:	d001      	beq.n	8014cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014cee:	2301      	movs	r3, #1
 8014cf0:	e030      	b.n	8014d54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	d025      	beq.n	8014d44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014cf8:	f7fc f9de 	bl	80110b8 <HAL_GetTick>
 8014cfc:	0002      	movs	r2, r0
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	1ad3      	subs	r3, r2, r3
 8014d02:	68ba      	ldr	r2, [r7, #8]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d302      	bcc.n	8014d0e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d11a      	bne.n	8014d44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	699b      	ldr	r3, [r3, #24]
 8014d14:	2202      	movs	r2, #2
 8014d16:	4013      	ands	r3, r2
 8014d18:	2b02      	cmp	r3, #2
 8014d1a:	d013      	beq.n	8014d44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d20:	2220      	movs	r2, #32
 8014d22:	431a      	orrs	r2, r3
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2241      	movs	r2, #65	@ 0x41
 8014d2c:	2120      	movs	r1, #32
 8014d2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2242      	movs	r2, #66	@ 0x42
 8014d34:	2100      	movs	r1, #0
 8014d36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2240      	movs	r2, #64	@ 0x40
 8014d3c:	2100      	movs	r1, #0
 8014d3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8014d40:	2301      	movs	r3, #1
 8014d42:	e007      	b.n	8014d54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	699b      	ldr	r3, [r3, #24]
 8014d4a:	2202      	movs	r2, #2
 8014d4c:	4013      	ands	r3, r2
 8014d4e:	2b02      	cmp	r3, #2
 8014d50:	d1c5      	bne.n	8014cde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8014d52:	2300      	movs	r3, #0
}
 8014d54:	0018      	movs	r0, r3
 8014d56:	46bd      	mov	sp, r7
 8014d58:	b004      	add	sp, #16
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014d68:	e02f      	b.n	8014dca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014d6a:	687a      	ldr	r2, [r7, #4]
 8014d6c:	68b9      	ldr	r1, [r7, #8]
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	0018      	movs	r0, r3
 8014d72:	f000 f8b9 	bl	8014ee8 <I2C_IsErrorOccurred>
 8014d76:	1e03      	subs	r3, r0, #0
 8014d78:	d001      	beq.n	8014d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	e02d      	b.n	8014dda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d7e:	f7fc f99b 	bl	80110b8 <HAL_GetTick>
 8014d82:	0002      	movs	r2, r0
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	1ad3      	subs	r3, r2, r3
 8014d88:	68ba      	ldr	r2, [r7, #8]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d302      	bcc.n	8014d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d11a      	bne.n	8014dca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	699b      	ldr	r3, [r3, #24]
 8014d9a:	2220      	movs	r2, #32
 8014d9c:	4013      	ands	r3, r2
 8014d9e:	2b20      	cmp	r3, #32
 8014da0:	d013      	beq.n	8014dca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014da6:	2220      	movs	r2, #32
 8014da8:	431a      	orrs	r2, r3
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2241      	movs	r2, #65	@ 0x41
 8014db2:	2120      	movs	r1, #32
 8014db4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	2242      	movs	r2, #66	@ 0x42
 8014dba:	2100      	movs	r1, #0
 8014dbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2240      	movs	r2, #64	@ 0x40
 8014dc2:	2100      	movs	r1, #0
 8014dc4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	e007      	b.n	8014dda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	699b      	ldr	r3, [r3, #24]
 8014dd0:	2220      	movs	r2, #32
 8014dd2:	4013      	ands	r3, r2
 8014dd4:	2b20      	cmp	r3, #32
 8014dd6:	d1c8      	bne.n	8014d6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014dd8:	2300      	movs	r3, #0
}
 8014dda:	0018      	movs	r0, r3
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	b004      	add	sp, #16
 8014de0:	bd80      	pop	{r7, pc}
	...

08014de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	60f8      	str	r0, [r7, #12]
 8014dec:	60b9      	str	r1, [r7, #8]
 8014dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014df0:	e06b      	b.n	8014eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	68b9      	ldr	r1, [r7, #8]
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	0018      	movs	r0, r3
 8014dfa:	f000 f875 	bl	8014ee8 <I2C_IsErrorOccurred>
 8014dfe:	1e03      	subs	r3, r0, #0
 8014e00:	d001      	beq.n	8014e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014e02:	2301      	movs	r3, #1
 8014e04:	e069      	b.n	8014eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	699b      	ldr	r3, [r3, #24]
 8014e0c:	2220      	movs	r2, #32
 8014e0e:	4013      	ands	r3, r2
 8014e10:	2b20      	cmp	r3, #32
 8014e12:	d138      	bne.n	8014e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	699b      	ldr	r3, [r3, #24]
 8014e1a:	2204      	movs	r2, #4
 8014e1c:	4013      	ands	r3, r2
 8014e1e:	2b04      	cmp	r3, #4
 8014e20:	d105      	bne.n	8014e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d001      	beq.n	8014e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	e055      	b.n	8014eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	699b      	ldr	r3, [r3, #24]
 8014e34:	2210      	movs	r2, #16
 8014e36:	4013      	ands	r3, r2
 8014e38:	2b10      	cmp	r3, #16
 8014e3a:	d107      	bne.n	8014e4c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2210      	movs	r2, #16
 8014e42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	2204      	movs	r2, #4
 8014e48:	645a      	str	r2, [r3, #68]	@ 0x44
 8014e4a:	e002      	b.n	8014e52 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2220      	movs	r2, #32
 8014e58:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	685a      	ldr	r2, [r3, #4]
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	491f      	ldr	r1, [pc, #124]	@ (8014ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8014e66:	400a      	ands	r2, r1
 8014e68:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2241      	movs	r2, #65	@ 0x41
 8014e6e:	2120      	movs	r1, #32
 8014e70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2242      	movs	r2, #66	@ 0x42
 8014e76:	2100      	movs	r1, #0
 8014e78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2240      	movs	r2, #64	@ 0x40
 8014e7e:	2100      	movs	r1, #0
 8014e80:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014e82:	2301      	movs	r3, #1
 8014e84:	e029      	b.n	8014eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014e86:	f7fc f917 	bl	80110b8 <HAL_GetTick>
 8014e8a:	0002      	movs	r2, r0
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	1ad3      	subs	r3, r2, r3
 8014e90:	68ba      	ldr	r2, [r7, #8]
 8014e92:	429a      	cmp	r2, r3
 8014e94:	d302      	bcc.n	8014e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d116      	bne.n	8014eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	699b      	ldr	r3, [r3, #24]
 8014ea2:	2204      	movs	r2, #4
 8014ea4:	4013      	ands	r3, r2
 8014ea6:	2b04      	cmp	r3, #4
 8014ea8:	d00f      	beq.n	8014eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eae:	2220      	movs	r2, #32
 8014eb0:	431a      	orrs	r2, r3
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2241      	movs	r2, #65	@ 0x41
 8014eba:	2120      	movs	r1, #32
 8014ebc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	2240      	movs	r2, #64	@ 0x40
 8014ec2:	2100      	movs	r1, #0
 8014ec4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	e007      	b.n	8014eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	699b      	ldr	r3, [r3, #24]
 8014ed0:	2204      	movs	r2, #4
 8014ed2:	4013      	ands	r3, r2
 8014ed4:	2b04      	cmp	r3, #4
 8014ed6:	d18c      	bne.n	8014df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	0018      	movs	r0, r3
 8014edc:	46bd      	mov	sp, r7
 8014ede:	b004      	add	sp, #16
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	46c0      	nop			@ (mov r8, r8)
 8014ee4:	fe00e800 	.word	0xfe00e800

08014ee8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b08a      	sub	sp, #40	@ 0x28
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014ef4:	2327      	movs	r3, #39	@ 0x27
 8014ef6:	18fb      	adds	r3, r7, r3
 8014ef8:	2200      	movs	r2, #0
 8014efa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	699b      	ldr	r3, [r3, #24]
 8014f02:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8014f04:	2300      	movs	r3, #0
 8014f06:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	2210      	movs	r2, #16
 8014f10:	4013      	ands	r3, r2
 8014f12:	d100      	bne.n	8014f16 <I2C_IsErrorOccurred+0x2e>
 8014f14:	e079      	b.n	801500a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	2210      	movs	r2, #16
 8014f1c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014f1e:	e057      	b.n	8014fd0 <I2C_IsErrorOccurred+0xe8>
 8014f20:	2227      	movs	r2, #39	@ 0x27
 8014f22:	18bb      	adds	r3, r7, r2
 8014f24:	18ba      	adds	r2, r7, r2
 8014f26:	7812      	ldrb	r2, [r2, #0]
 8014f28:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	d04f      	beq.n	8014fd0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8014f30:	f7fc f8c2 	bl	80110b8 <HAL_GetTick>
 8014f34:	0002      	movs	r2, r0
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	1ad3      	subs	r3, r2, r3
 8014f3a:	68ba      	ldr	r2, [r7, #8]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d302      	bcc.n	8014f46 <I2C_IsErrorOccurred+0x5e>
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d144      	bne.n	8014fd0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	685a      	ldr	r2, [r3, #4]
 8014f4c:	2380      	movs	r3, #128	@ 0x80
 8014f4e:	01db      	lsls	r3, r3, #7
 8014f50:	4013      	ands	r3, r2
 8014f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8014f54:	2013      	movs	r0, #19
 8014f56:	183b      	adds	r3, r7, r0
 8014f58:	68fa      	ldr	r2, [r7, #12]
 8014f5a:	2142      	movs	r1, #66	@ 0x42
 8014f5c:	5c52      	ldrb	r2, [r2, r1]
 8014f5e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	699a      	ldr	r2, [r3, #24]
 8014f66:	2380      	movs	r3, #128	@ 0x80
 8014f68:	021b      	lsls	r3, r3, #8
 8014f6a:	401a      	ands	r2, r3
 8014f6c:	2380      	movs	r3, #128	@ 0x80
 8014f6e:	021b      	lsls	r3, r3, #8
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d126      	bne.n	8014fc2 <I2C_IsErrorOccurred+0xda>
 8014f74:	697a      	ldr	r2, [r7, #20]
 8014f76:	2380      	movs	r3, #128	@ 0x80
 8014f78:	01db      	lsls	r3, r3, #7
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	d021      	beq.n	8014fc2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8014f7e:	183b      	adds	r3, r7, r0
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	2b20      	cmp	r3, #32
 8014f84:	d01d      	beq.n	8014fc2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	685a      	ldr	r2, [r3, #4]
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2180      	movs	r1, #128	@ 0x80
 8014f92:	01c9      	lsls	r1, r1, #7
 8014f94:	430a      	orrs	r2, r1
 8014f96:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8014f98:	f7fc f88e 	bl	80110b8 <HAL_GetTick>
 8014f9c:	0003      	movs	r3, r0
 8014f9e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014fa0:	e00f      	b.n	8014fc2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8014fa2:	f7fc f889 	bl	80110b8 <HAL_GetTick>
 8014fa6:	0002      	movs	r2, r0
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	1ad3      	subs	r3, r2, r3
 8014fac:	2b19      	cmp	r3, #25
 8014fae:	d908      	bls.n	8014fc2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8014fb0:	6a3b      	ldr	r3, [r7, #32]
 8014fb2:	2220      	movs	r2, #32
 8014fb4:	4313      	orrs	r3, r2
 8014fb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8014fb8:	2327      	movs	r3, #39	@ 0x27
 8014fba:	18fb      	adds	r3, r7, r3
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	701a      	strb	r2, [r3, #0]

              break;
 8014fc0:	e006      	b.n	8014fd0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	699b      	ldr	r3, [r3, #24]
 8014fc8:	2220      	movs	r2, #32
 8014fca:	4013      	ands	r3, r2
 8014fcc:	2b20      	cmp	r3, #32
 8014fce:	d1e8      	bne.n	8014fa2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	699b      	ldr	r3, [r3, #24]
 8014fd6:	2220      	movs	r2, #32
 8014fd8:	4013      	ands	r3, r2
 8014fda:	2b20      	cmp	r3, #32
 8014fdc:	d004      	beq.n	8014fe8 <I2C_IsErrorOccurred+0x100>
 8014fde:	2327      	movs	r3, #39	@ 0x27
 8014fe0:	18fb      	adds	r3, r7, r3
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d09b      	beq.n	8014f20 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8014fe8:	2327      	movs	r3, #39	@ 0x27
 8014fea:	18fb      	adds	r3, r7, r3
 8014fec:	781b      	ldrb	r3, [r3, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d103      	bne.n	8014ffa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	2220      	movs	r2, #32
 8014ff8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8014ffa:	6a3b      	ldr	r3, [r7, #32]
 8014ffc:	2204      	movs	r2, #4
 8014ffe:	4313      	orrs	r3, r2
 8015000:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8015002:	2327      	movs	r3, #39	@ 0x27
 8015004:	18fb      	adds	r3, r7, r3
 8015006:	2201      	movs	r2, #1
 8015008:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	699b      	ldr	r3, [r3, #24]
 8015010:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8015012:	69ba      	ldr	r2, [r7, #24]
 8015014:	2380      	movs	r3, #128	@ 0x80
 8015016:	005b      	lsls	r3, r3, #1
 8015018:	4013      	ands	r3, r2
 801501a:	d00c      	beq.n	8015036 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801501c:	6a3b      	ldr	r3, [r7, #32]
 801501e:	2201      	movs	r2, #1
 8015020:	4313      	orrs	r3, r2
 8015022:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2280      	movs	r2, #128	@ 0x80
 801502a:	0052      	lsls	r2, r2, #1
 801502c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801502e:	2327      	movs	r3, #39	@ 0x27
 8015030:	18fb      	adds	r3, r7, r3
 8015032:	2201      	movs	r2, #1
 8015034:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8015036:	69ba      	ldr	r2, [r7, #24]
 8015038:	2380      	movs	r3, #128	@ 0x80
 801503a:	00db      	lsls	r3, r3, #3
 801503c:	4013      	ands	r3, r2
 801503e:	d00c      	beq.n	801505a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8015040:	6a3b      	ldr	r3, [r7, #32]
 8015042:	2208      	movs	r2, #8
 8015044:	4313      	orrs	r3, r2
 8015046:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2280      	movs	r2, #128	@ 0x80
 801504e:	00d2      	lsls	r2, r2, #3
 8015050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8015052:	2327      	movs	r3, #39	@ 0x27
 8015054:	18fb      	adds	r3, r7, r3
 8015056:	2201      	movs	r2, #1
 8015058:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801505a:	69ba      	ldr	r2, [r7, #24]
 801505c:	2380      	movs	r3, #128	@ 0x80
 801505e:	009b      	lsls	r3, r3, #2
 8015060:	4013      	ands	r3, r2
 8015062:	d00c      	beq.n	801507e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	2202      	movs	r2, #2
 8015068:	4313      	orrs	r3, r2
 801506a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	2280      	movs	r2, #128	@ 0x80
 8015072:	0092      	lsls	r2, r2, #2
 8015074:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8015076:	2327      	movs	r3, #39	@ 0x27
 8015078:	18fb      	adds	r3, r7, r3
 801507a:	2201      	movs	r2, #1
 801507c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 801507e:	2327      	movs	r3, #39	@ 0x27
 8015080:	18fb      	adds	r3, r7, r3
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d01d      	beq.n	80150c4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	0018      	movs	r0, r3
 801508c:	f7ff fcd7 	bl	8014a3e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	685a      	ldr	r2, [r3, #4]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	490e      	ldr	r1, [pc, #56]	@ (80150d4 <I2C_IsErrorOccurred+0x1ec>)
 801509c:	400a      	ands	r2, r1
 801509e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80150a4:	6a3b      	ldr	r3, [r7, #32]
 80150a6:	431a      	orrs	r2, r3
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	2241      	movs	r2, #65	@ 0x41
 80150b0:	2120      	movs	r1, #32
 80150b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	2242      	movs	r2, #66	@ 0x42
 80150b8:	2100      	movs	r1, #0
 80150ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2240      	movs	r2, #64	@ 0x40
 80150c0:	2100      	movs	r1, #0
 80150c2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80150c4:	2327      	movs	r3, #39	@ 0x27
 80150c6:	18fb      	adds	r3, r7, r3
 80150c8:	781b      	ldrb	r3, [r3, #0]
}
 80150ca:	0018      	movs	r0, r3
 80150cc:	46bd      	mov	sp, r7
 80150ce:	b00a      	add	sp, #40	@ 0x28
 80150d0:	bd80      	pop	{r7, pc}
 80150d2:	46c0      	nop			@ (mov r8, r8)
 80150d4:	fe00e800 	.word	0xfe00e800

080150d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80150d8:	b590      	push	{r4, r7, lr}
 80150da:	b087      	sub	sp, #28
 80150dc:	af00      	add	r7, sp, #0
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	0008      	movs	r0, r1
 80150e2:	0011      	movs	r1, r2
 80150e4:	607b      	str	r3, [r7, #4]
 80150e6:	240a      	movs	r4, #10
 80150e8:	193b      	adds	r3, r7, r4
 80150ea:	1c02      	adds	r2, r0, #0
 80150ec:	801a      	strh	r2, [r3, #0]
 80150ee:	2009      	movs	r0, #9
 80150f0:	183b      	adds	r3, r7, r0
 80150f2:	1c0a      	adds	r2, r1, #0
 80150f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80150f6:	193b      	adds	r3, r7, r4
 80150f8:	881b      	ldrh	r3, [r3, #0]
 80150fa:	059b      	lsls	r3, r3, #22
 80150fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80150fe:	183b      	adds	r3, r7, r0
 8015100:	781b      	ldrb	r3, [r3, #0]
 8015102:	0419      	lsls	r1, r3, #16
 8015104:	23ff      	movs	r3, #255	@ 0xff
 8015106:	041b      	lsls	r3, r3, #16
 8015108:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801510a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015112:	4313      	orrs	r3, r2
 8015114:	005b      	lsls	r3, r3, #1
 8015116:	085b      	lsrs	r3, r3, #1
 8015118:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	685b      	ldr	r3, [r3, #4]
 8015120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015122:	0d51      	lsrs	r1, r2, #21
 8015124:	2280      	movs	r2, #128	@ 0x80
 8015126:	00d2      	lsls	r2, r2, #3
 8015128:	400a      	ands	r2, r1
 801512a:	4907      	ldr	r1, [pc, #28]	@ (8015148 <I2C_TransferConfig+0x70>)
 801512c:	430a      	orrs	r2, r1
 801512e:	43d2      	mvns	r2, r2
 8015130:	401a      	ands	r2, r3
 8015132:	0011      	movs	r1, r2
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	697a      	ldr	r2, [r7, #20]
 801513a:	430a      	orrs	r2, r1
 801513c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801513e:	46c0      	nop			@ (mov r8, r8)
 8015140:	46bd      	mov	sp, r7
 8015142:	b007      	add	sp, #28
 8015144:	bd90      	pop	{r4, r7, pc}
 8015146:	46c0      	nop			@ (mov r8, r8)
 8015148:	03ff63ff 	.word	0x03ff63ff

0801514c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
 8015154:	000a      	movs	r2, r1
 8015156:	1cbb      	adds	r3, r7, #2
 8015158:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801515a:	2300      	movs	r3, #0
 801515c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015162:	4b3e      	ldr	r3, [pc, #248]	@ (801525c <I2C_Enable_IRQ+0x110>)
 8015164:	429a      	cmp	r2, r3
 8015166:	d035      	beq.n	80151d4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801516c:	4b3c      	ldr	r3, [pc, #240]	@ (8015260 <I2C_Enable_IRQ+0x114>)
 801516e:	429a      	cmp	r2, r3
 8015170:	d030      	beq.n	80151d4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015176:	4b3b      	ldr	r3, [pc, #236]	@ (8015264 <I2C_Enable_IRQ+0x118>)
 8015178:	429a      	cmp	r2, r3
 801517a:	d02b      	beq.n	80151d4 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801517c:	1cbb      	adds	r3, r7, #2
 801517e:	2200      	movs	r2, #0
 8015180:	5e9b      	ldrsh	r3, [r3, r2]
 8015182:	2b00      	cmp	r3, #0
 8015184:	da03      	bge.n	801518e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	22b8      	movs	r2, #184	@ 0xb8
 801518a:	4313      	orrs	r3, r2
 801518c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801518e:	1cbb      	adds	r3, r7, #2
 8015190:	881b      	ldrh	r3, [r3, #0]
 8015192:	2201      	movs	r2, #1
 8015194:	4013      	ands	r3, r2
 8015196:	d003      	beq.n	80151a0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	22f2      	movs	r2, #242	@ 0xf2
 801519c:	4313      	orrs	r3, r2
 801519e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80151a0:	1cbb      	adds	r3, r7, #2
 80151a2:	881b      	ldrh	r3, [r3, #0]
 80151a4:	2202      	movs	r2, #2
 80151a6:	4013      	ands	r3, r2
 80151a8:	d003      	beq.n	80151b2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	22f4      	movs	r2, #244	@ 0xf4
 80151ae:	4313      	orrs	r3, r2
 80151b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80151b2:	1cbb      	adds	r3, r7, #2
 80151b4:	881b      	ldrh	r3, [r3, #0]
 80151b6:	2b10      	cmp	r3, #16
 80151b8:	d103      	bne.n	80151c2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	2290      	movs	r2, #144	@ 0x90
 80151be:	4313      	orrs	r3, r2
 80151c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80151c2:	1cbb      	adds	r3, r7, #2
 80151c4:	881b      	ldrh	r3, [r3, #0]
 80151c6:	2b20      	cmp	r3, #32
 80151c8:	d13c      	bne.n	8015244 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	2220      	movs	r2, #32
 80151ce:	4313      	orrs	r3, r2
 80151d0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80151d2:	e037      	b.n	8015244 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80151d4:	1cbb      	adds	r3, r7, #2
 80151d6:	2200      	movs	r2, #0
 80151d8:	5e9b      	ldrsh	r3, [r3, r2]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	da03      	bge.n	80151e6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	22b8      	movs	r2, #184	@ 0xb8
 80151e2:	4313      	orrs	r3, r2
 80151e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80151e6:	1cbb      	adds	r3, r7, #2
 80151e8:	881b      	ldrh	r3, [r3, #0]
 80151ea:	2201      	movs	r2, #1
 80151ec:	4013      	ands	r3, r2
 80151ee:	d003      	beq.n	80151f8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	22f2      	movs	r2, #242	@ 0xf2
 80151f4:	4313      	orrs	r3, r2
 80151f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80151f8:	1cbb      	adds	r3, r7, #2
 80151fa:	881b      	ldrh	r3, [r3, #0]
 80151fc:	2202      	movs	r2, #2
 80151fe:	4013      	ands	r3, r2
 8015200:	d003      	beq.n	801520a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	22f4      	movs	r2, #244	@ 0xf4
 8015206:	4313      	orrs	r3, r2
 8015208:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801520a:	1cbb      	adds	r3, r7, #2
 801520c:	881b      	ldrh	r3, [r3, #0]
 801520e:	2b10      	cmp	r3, #16
 8015210:	d103      	bne.n	801521a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	2290      	movs	r2, #144	@ 0x90
 8015216:	4313      	orrs	r3, r2
 8015218:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801521a:	1cbb      	adds	r3, r7, #2
 801521c:	881b      	ldrh	r3, [r3, #0]
 801521e:	2b20      	cmp	r3, #32
 8015220:	d103      	bne.n	801522a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2260      	movs	r2, #96	@ 0x60
 8015226:	4313      	orrs	r3, r2
 8015228:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801522e:	4b0d      	ldr	r3, [pc, #52]	@ (8015264 <I2C_Enable_IRQ+0x118>)
 8015230:	429a      	cmp	r2, r3
 8015232:	d007      	beq.n	8015244 <I2C_Enable_IRQ+0xf8>
 8015234:	1cbb      	adds	r3, r7, #2
 8015236:	881b      	ldrh	r3, [r3, #0]
 8015238:	2b40      	cmp	r3, #64	@ 0x40
 801523a:	d103      	bne.n	8015244 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	2240      	movs	r2, #64	@ 0x40
 8015240:	4313      	orrs	r3, r2
 8015242:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	6819      	ldr	r1, [r3, #0]
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	68fa      	ldr	r2, [r7, #12]
 8015250:	430a      	orrs	r2, r1
 8015252:	601a      	str	r2, [r3, #0]
}
 8015254:	46c0      	nop			@ (mov r8, r8)
 8015256:	46bd      	mov	sp, r7
 8015258:	b004      	add	sp, #16
 801525a:	bd80      	pop	{r7, pc}
 801525c:	08013a09 	.word	0x08013a09
 8015260:	08013e39 	.word	0x08013e39
 8015264:	08013c01 	.word	0x08013c01

08015268 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b084      	sub	sp, #16
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	000a      	movs	r2, r1
 8015272:	1cbb      	adds	r3, r7, #2
 8015274:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8015276:	2300      	movs	r3, #0
 8015278:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801527a:	1cbb      	adds	r3, r7, #2
 801527c:	881b      	ldrh	r3, [r3, #0]
 801527e:	2201      	movs	r2, #1
 8015280:	4013      	ands	r3, r2
 8015282:	d010      	beq.n	80152a6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	2242      	movs	r2, #66	@ 0x42
 8015288:	4313      	orrs	r3, r2
 801528a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2241      	movs	r2, #65	@ 0x41
 8015290:	5c9b      	ldrb	r3, [r3, r2]
 8015292:	b2db      	uxtb	r3, r3
 8015294:	001a      	movs	r2, r3
 8015296:	2328      	movs	r3, #40	@ 0x28
 8015298:	4013      	ands	r3, r2
 801529a:	2b28      	cmp	r3, #40	@ 0x28
 801529c:	d003      	beq.n	80152a6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	22b0      	movs	r2, #176	@ 0xb0
 80152a2:	4313      	orrs	r3, r2
 80152a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80152a6:	1cbb      	adds	r3, r7, #2
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	2202      	movs	r2, #2
 80152ac:	4013      	ands	r3, r2
 80152ae:	d010      	beq.n	80152d2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2244      	movs	r2, #68	@ 0x44
 80152b4:	4313      	orrs	r3, r2
 80152b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2241      	movs	r2, #65	@ 0x41
 80152bc:	5c9b      	ldrb	r3, [r3, r2]
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	001a      	movs	r2, r3
 80152c2:	2328      	movs	r3, #40	@ 0x28
 80152c4:	4013      	ands	r3, r2
 80152c6:	2b28      	cmp	r3, #40	@ 0x28
 80152c8:	d003      	beq.n	80152d2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	22b0      	movs	r2, #176	@ 0xb0
 80152ce:	4313      	orrs	r3, r2
 80152d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80152d2:	1cbb      	adds	r3, r7, #2
 80152d4:	2200      	movs	r2, #0
 80152d6:	5e9b      	ldrsh	r3, [r3, r2]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	da03      	bge.n	80152e4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	22b8      	movs	r2, #184	@ 0xb8
 80152e0:	4313      	orrs	r3, r2
 80152e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80152e4:	1cbb      	adds	r3, r7, #2
 80152e6:	881b      	ldrh	r3, [r3, #0]
 80152e8:	2b10      	cmp	r3, #16
 80152ea:	d103      	bne.n	80152f4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	2290      	movs	r2, #144	@ 0x90
 80152f0:	4313      	orrs	r3, r2
 80152f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80152f4:	1cbb      	adds	r3, r7, #2
 80152f6:	881b      	ldrh	r3, [r3, #0]
 80152f8:	2b20      	cmp	r3, #32
 80152fa:	d103      	bne.n	8015304 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	2220      	movs	r2, #32
 8015300:	4313      	orrs	r3, r2
 8015302:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8015304:	1cbb      	adds	r3, r7, #2
 8015306:	881b      	ldrh	r3, [r3, #0]
 8015308:	2b40      	cmp	r3, #64	@ 0x40
 801530a:	d103      	bne.n	8015314 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2240      	movs	r2, #64	@ 0x40
 8015310:	4313      	orrs	r3, r2
 8015312:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	681a      	ldr	r2, [r3, #0]
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	43d9      	mvns	r1, r3
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	400a      	ands	r2, r1
 8015324:	601a      	str	r2, [r3, #0]
}
 8015326:	46c0      	nop			@ (mov r8, r8)
 8015328:	46bd      	mov	sp, r7
 801532a:	b004      	add	sp, #16
 801532c:	bd80      	pop	{r7, pc}
	...

08015330 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2241      	movs	r2, #65	@ 0x41
 801533e:	5c9b      	ldrb	r3, [r3, r2]
 8015340:	b2db      	uxtb	r3, r3
 8015342:	2b20      	cmp	r3, #32
 8015344:	d138      	bne.n	80153b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2240      	movs	r2, #64	@ 0x40
 801534a:	5c9b      	ldrb	r3, [r3, r2]
 801534c:	2b01      	cmp	r3, #1
 801534e:	d101      	bne.n	8015354 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8015350:	2302      	movs	r3, #2
 8015352:	e032      	b.n	80153ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2240      	movs	r2, #64	@ 0x40
 8015358:	2101      	movs	r1, #1
 801535a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2241      	movs	r2, #65	@ 0x41
 8015360:	2124      	movs	r1, #36	@ 0x24
 8015362:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	681a      	ldr	r2, [r3, #0]
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2101      	movs	r1, #1
 8015370:	438a      	bics	r2, r1
 8015372:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	4911      	ldr	r1, [pc, #68]	@ (80153c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8015380:	400a      	ands	r2, r1
 8015382:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	6819      	ldr	r1, [r3, #0]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	683a      	ldr	r2, [r7, #0]
 8015390:	430a      	orrs	r2, r1
 8015392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	681a      	ldr	r2, [r3, #0]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2101      	movs	r1, #1
 80153a0:	430a      	orrs	r2, r1
 80153a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2241      	movs	r2, #65	@ 0x41
 80153a8:	2120      	movs	r1, #32
 80153aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2240      	movs	r2, #64	@ 0x40
 80153b0:	2100      	movs	r1, #0
 80153b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80153b4:	2300      	movs	r3, #0
 80153b6:	e000      	b.n	80153ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80153b8:	2302      	movs	r3, #2
  }
}
 80153ba:	0018      	movs	r0, r3
 80153bc:	46bd      	mov	sp, r7
 80153be:	b002      	add	sp, #8
 80153c0:	bd80      	pop	{r7, pc}
 80153c2:	46c0      	nop			@ (mov r8, r8)
 80153c4:	ffffefff 	.word	0xffffefff

080153c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b084      	sub	sp, #16
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
 80153d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2241      	movs	r2, #65	@ 0x41
 80153d6:	5c9b      	ldrb	r3, [r3, r2]
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	2b20      	cmp	r3, #32
 80153dc:	d139      	bne.n	8015452 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2240      	movs	r2, #64	@ 0x40
 80153e2:	5c9b      	ldrb	r3, [r3, r2]
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	d101      	bne.n	80153ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80153e8:	2302      	movs	r3, #2
 80153ea:	e033      	b.n	8015454 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2240      	movs	r2, #64	@ 0x40
 80153f0:	2101      	movs	r1, #1
 80153f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2241      	movs	r2, #65	@ 0x41
 80153f8:	2124      	movs	r1, #36	@ 0x24
 80153fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	2101      	movs	r1, #1
 8015408:	438a      	bics	r2, r1
 801540a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	4a11      	ldr	r2, [pc, #68]	@ (801545c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8015418:	4013      	ands	r3, r2
 801541a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	021b      	lsls	r3, r3, #8
 8015420:	68fa      	ldr	r2, [r7, #12]
 8015422:	4313      	orrs	r3, r2
 8015424:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	68fa      	ldr	r2, [r7, #12]
 801542c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	2101      	movs	r1, #1
 801543a:	430a      	orrs	r2, r1
 801543c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2241      	movs	r2, #65	@ 0x41
 8015442:	2120      	movs	r1, #32
 8015444:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2240      	movs	r2, #64	@ 0x40
 801544a:	2100      	movs	r1, #0
 801544c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801544e:	2300      	movs	r3, #0
 8015450:	e000      	b.n	8015454 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8015452:	2302      	movs	r3, #2
  }
}
 8015454:	0018      	movs	r0, r3
 8015456:	46bd      	mov	sp, r7
 8015458:	b004      	add	sp, #16
 801545a:	bd80      	pop	{r7, pc}
 801545c:	fffff0ff 	.word	0xfffff0ff

08015460 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b088      	sub	sp, #32
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d101      	bne.n	8015472 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801546e:	2301      	movs	r3, #1
 8015470:	e0e1      	b.n	8015636 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2235      	movs	r2, #53	@ 0x35
 8015476:	5c9b      	ldrb	r3, [r3, r2]
 8015478:	b2db      	uxtb	r3, r3
 801547a:	2b00      	cmp	r3, #0
 801547c:	d107      	bne.n	801548e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2234      	movs	r2, #52	@ 0x34
 8015482:	2100      	movs	r1, #0
 8015484:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	0018      	movs	r0, r3
 801548a:	f7f4 fb3d 	bl	8009b08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2235      	movs	r2, #53	@ 0x35
 8015492:	2102      	movs	r1, #2
 8015494:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	69da      	ldr	r2, [r3, #28]
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	4967      	ldr	r1, [pc, #412]	@ (8015640 <HAL_I2S_Init+0x1e0>)
 80154a2:	400a      	ands	r2, r1
 80154a4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	2202      	movs	r2, #2
 80154ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	695b      	ldr	r3, [r3, #20]
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	d073      	beq.n	801559e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d102      	bne.n	80154c4 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80154be:	2310      	movs	r3, #16
 80154c0:	617b      	str	r3, [r7, #20]
 80154c2:	e001      	b.n	80154c8 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80154c4:	2320      	movs	r3, #32
 80154c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	689b      	ldr	r3, [r3, #8]
 80154cc:	2b20      	cmp	r3, #32
 80154ce:	d802      	bhi.n	80154d6 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	005b      	lsls	r3, r3, #1
 80154d4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80154d6:	f002 fed3 	bl	8018280 <HAL_RCC_GetSysClockFreq>
 80154da:	0003      	movs	r3, r0
 80154dc:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	691a      	ldr	r2, [r3, #16]
 80154e2:	2380      	movs	r3, #128	@ 0x80
 80154e4:	009b      	lsls	r3, r3, #2
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d131      	bne.n	801554e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d016      	beq.n	8015520 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	009b      	lsls	r3, r3, #2
 80154f6:	0019      	movs	r1, r3
 80154f8:	68f8      	ldr	r0, [r7, #12]
 80154fa:	f7ea fe53 	bl	80001a4 <__udivsi3>
 80154fe:	0003      	movs	r3, r0
 8015500:	001a      	movs	r2, r3
 8015502:	0013      	movs	r3, r2
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	189b      	adds	r3, r3, r2
 8015508:	005b      	lsls	r3, r3, #1
 801550a:	001a      	movs	r2, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	695b      	ldr	r3, [r3, #20]
 8015510:	0019      	movs	r1, r3
 8015512:	0010      	movs	r0, r2
 8015514:	f7ea fe46 	bl	80001a4 <__udivsi3>
 8015518:	0003      	movs	r3, r0
 801551a:	3305      	adds	r3, #5
 801551c:	613b      	str	r3, [r7, #16]
 801551e:	e02a      	b.n	8015576 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	0019      	movs	r1, r3
 8015526:	68f8      	ldr	r0, [r7, #12]
 8015528:	f7ea fe3c 	bl	80001a4 <__udivsi3>
 801552c:	0003      	movs	r3, r0
 801552e:	001a      	movs	r2, r3
 8015530:	0013      	movs	r3, r2
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	189b      	adds	r3, r3, r2
 8015536:	005b      	lsls	r3, r3, #1
 8015538:	001a      	movs	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	695b      	ldr	r3, [r3, #20]
 801553e:	0019      	movs	r1, r3
 8015540:	0010      	movs	r0, r2
 8015542:	f7ea fe2f 	bl	80001a4 <__udivsi3>
 8015546:	0003      	movs	r3, r0
 8015548:	3305      	adds	r3, #5
 801554a:	613b      	str	r3, [r7, #16]
 801554c:	e013      	b.n	8015576 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801554e:	6979      	ldr	r1, [r7, #20]
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f7ea fe27 	bl	80001a4 <__udivsi3>
 8015556:	0003      	movs	r3, r0
 8015558:	001a      	movs	r2, r3
 801555a:	0013      	movs	r3, r2
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	189b      	adds	r3, r3, r2
 8015560:	005b      	lsls	r3, r3, #1
 8015562:	001a      	movs	r2, r3
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	695b      	ldr	r3, [r3, #20]
 8015568:	0019      	movs	r1, r3
 801556a:	0010      	movs	r0, r2
 801556c:	f7ea fe1a 	bl	80001a4 <__udivsi3>
 8015570:	0003      	movs	r3, r0
 8015572:	3305      	adds	r3, #5
 8015574:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8015576:	693b      	ldr	r3, [r7, #16]
 8015578:	210a      	movs	r1, #10
 801557a:	0018      	movs	r0, r3
 801557c:	f7ea fe12 	bl	80001a4 <__udivsi3>
 8015580:	0003      	movs	r3, r0
 8015582:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	2201      	movs	r2, #1
 8015588:	4013      	ands	r3, r2
 801558a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 801558c:	693a      	ldr	r2, [r7, #16]
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	1ad3      	subs	r3, r2, r3
 8015592:	085b      	lsrs	r3, r3, #1
 8015594:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	021b      	lsls	r3, r3, #8
 801559a:	61bb      	str	r3, [r7, #24]
 801559c:	e003      	b.n	80155a6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801559e:	2302      	movs	r3, #2
 80155a0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80155a2:	2300      	movs	r3, #0
 80155a4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80155a6:	69fb      	ldr	r3, [r7, #28]
 80155a8:	2b01      	cmp	r3, #1
 80155aa:	d902      	bls.n	80155b2 <HAL_I2S_Init+0x152>
 80155ac:	69fb      	ldr	r3, [r7, #28]
 80155ae:	2bff      	cmp	r3, #255	@ 0xff
 80155b0:	d907      	bls.n	80155c2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155b6:	2210      	movs	r2, #16
 80155b8:	431a      	orrs	r2, r3
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80155be:	2301      	movs	r3, #1
 80155c0:	e039      	b.n	8015636 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	691a      	ldr	r2, [r3, #16]
 80155c6:	69bb      	ldr	r3, [r7, #24]
 80155c8:	431a      	orrs	r2, r3
 80155ca:	0011      	movs	r1, r2
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	69fa      	ldr	r2, [r7, #28]
 80155d2:	430a      	orrs	r2, r1
 80155d4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	69db      	ldr	r3, [r3, #28]
 80155dc:	4a18      	ldr	r2, [pc, #96]	@ (8015640 <HAL_I2S_Init+0x1e0>)
 80155de:	401a      	ands	r2, r3
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6859      	ldr	r1, [r3, #4]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	689b      	ldr	r3, [r3, #8]
 80155e8:	4319      	orrs	r1, r3
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	4319      	orrs	r1, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	699b      	ldr	r3, [r3, #24]
 80155f4:	430b      	orrs	r3, r1
 80155f6:	431a      	orrs	r2, r3
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	2180      	movs	r1, #128	@ 0x80
 80155fe:	0109      	lsls	r1, r1, #4
 8015600:	430a      	orrs	r2, r1
 8015602:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	689b      	ldr	r3, [r3, #8]
 8015608:	2b30      	cmp	r3, #48	@ 0x30
 801560a:	d003      	beq.n	8015614 <HAL_I2S_Init+0x1b4>
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	689b      	ldr	r3, [r3, #8]
 8015610:	2bb0      	cmp	r3, #176	@ 0xb0
 8015612:	d108      	bne.n	8015626 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	69da      	ldr	r2, [r3, #28]
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	2180      	movs	r1, #128	@ 0x80
 8015620:	0149      	lsls	r1, r1, #5
 8015622:	430a      	orrs	r2, r1
 8015624:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2200      	movs	r2, #0
 801562a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2235      	movs	r2, #53	@ 0x35
 8015630:	2101      	movs	r1, #1
 8015632:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015634:	2300      	movs	r3, #0
}
 8015636:	0018      	movs	r0, r3
 8015638:	46bd      	mov	sp, r7
 801563a:	b008      	add	sp, #32
 801563c:	bd80      	pop	{r7, pc}
 801563e:	46c0      	nop			@ (mov r8, r8)
 8015640:	fffff040 	.word	0xfffff040

08015644 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b086      	sub	sp, #24
 8015648:	af00      	add	r7, sp, #0
 801564a:	60f8      	str	r0, [r7, #12]
 801564c:	60b9      	str	r1, [r7, #8]
 801564e:	1dbb      	adds	r3, r7, #6
 8015650:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d003      	beq.n	8015660 <HAL_I2S_Receive_DMA+0x1c>
 8015658:	1dbb      	adds	r3, r7, #6
 801565a:	881b      	ldrh	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d101      	bne.n	8015664 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8015660:	2301      	movs	r3, #1
 8015662:	e0a6      	b.n	80157b2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	2234      	movs	r2, #52	@ 0x34
 8015668:	5c9b      	ldrb	r3, [r3, r2]
 801566a:	b2db      	uxtb	r3, r3
 801566c:	2b01      	cmp	r3, #1
 801566e:	d101      	bne.n	8015674 <HAL_I2S_Receive_DMA+0x30>
 8015670:	2302      	movs	r3, #2
 8015672:	e09e      	b.n	80157b2 <HAL_I2S_Receive_DMA+0x16e>
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2234      	movs	r2, #52	@ 0x34
 8015678:	2101      	movs	r1, #1
 801567a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2235      	movs	r2, #53	@ 0x35
 8015680:	5c9b      	ldrb	r3, [r3, r2]
 8015682:	b2db      	uxtb	r3, r3
 8015684:	2b01      	cmp	r3, #1
 8015686:	d005      	beq.n	8015694 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	2234      	movs	r2, #52	@ 0x34
 801568c:	2100      	movs	r1, #0
 801568e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8015690:	2302      	movs	r3, #2
 8015692:	e08e      	b.n	80157b2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	2235      	movs	r2, #53	@ 0x35
 8015698:	2104      	movs	r1, #4
 801569a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	2200      	movs	r2, #0
 80156a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	68ba      	ldr	r2, [r7, #8]
 80156a6:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	69db      	ldr	r3, [r3, #28]
 80156ae:	2207      	movs	r2, #7
 80156b0:	4013      	ands	r3, r2
 80156b2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80156b4:	697b      	ldr	r3, [r7, #20]
 80156b6:	2b03      	cmp	r3, #3
 80156b8:	d002      	beq.n	80156c0 <HAL_I2S_Receive_DMA+0x7c>
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	2b05      	cmp	r3, #5
 80156be:	d10c      	bne.n	80156da <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80156c0:	1dbb      	adds	r3, r7, #6
 80156c2:	881b      	ldrh	r3, [r3, #0]
 80156c4:	18db      	adds	r3, r3, r3
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80156cc:	1dbb      	adds	r3, r7, #6
 80156ce:	881b      	ldrh	r3, [r3, #0]
 80156d0:	18db      	adds	r3, r3, r3
 80156d2:	b29a      	uxth	r2, r3
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80156d8:	e007      	b.n	80156ea <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	1dba      	adds	r2, r7, #6
 80156de:	8812      	ldrh	r2, [r2, #0]
 80156e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	1dba      	adds	r2, r7, #6
 80156e6:	8812      	ldrh	r2, [r2, #0]
 80156e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80156ee:	4a33      	ldr	r2, [pc, #204]	@ (80157bc <HAL_I2S_Receive_DMA+0x178>)
 80156f0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80156f6:	4a32      	ldr	r2, [pc, #200]	@ (80157c0 <HAL_I2S_Receive_DMA+0x17c>)
 80156f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80156fe:	4a31      	ldr	r2, [pc, #196]	@ (80157c4 <HAL_I2S_Receive_DMA+0x180>)
 8015700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	69da      	ldr	r2, [r3, #28]
 8015708:	23c0      	movs	r3, #192	@ 0xc0
 801570a:	009b      	lsls	r3, r3, #2
 801570c:	401a      	ands	r2, r3
 801570e:	23c0      	movs	r3, #192	@ 0xc0
 8015710:	009b      	lsls	r3, r3, #2
 8015712:	429a      	cmp	r2, r3
 8015714:	d10a      	bne.n	801572c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8015716:	2300      	movs	r3, #0
 8015718:	613b      	str	r3, [r7, #16]
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	613b      	str	r3, [r7, #16]
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	689b      	ldr	r3, [r3, #8]
 8015728:	613b      	str	r3, [r7, #16]
 801572a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	330c      	adds	r3, #12
 8015736:	0019      	movs	r1, r3
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801573c:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015742:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8015744:	f7fc fa0a 	bl	8011b5c <HAL_DMA_Start_IT>
 8015748:	1e03      	subs	r3, r0, #0
 801574a:	d00f      	beq.n	801576c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015750:	2208      	movs	r2, #8
 8015752:	431a      	orrs	r2, r3
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	2235      	movs	r2, #53	@ 0x35
 801575c:	2101      	movs	r1, #1
 801575e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2234      	movs	r2, #52	@ 0x34
 8015764:	2100      	movs	r1, #0
 8015766:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8015768:	2301      	movs	r3, #1
 801576a:	e022      	b.n	80157b2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	69da      	ldr	r2, [r3, #28]
 8015772:	2380      	movs	r3, #128	@ 0x80
 8015774:	00db      	lsls	r3, r3, #3
 8015776:	4013      	ands	r3, r2
 8015778:	d108      	bne.n	801578c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	69da      	ldr	r2, [r3, #28]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	2180      	movs	r1, #128	@ 0x80
 8015786:	00c9      	lsls	r1, r1, #3
 8015788:	430a      	orrs	r2, r1
 801578a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	2201      	movs	r2, #1
 8015794:	4013      	ands	r3, r2
 8015796:	d107      	bne.n	80157a8 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	685a      	ldr	r2, [r3, #4]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	2101      	movs	r1, #1
 80157a4:	430a      	orrs	r2, r1
 80157a6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	2234      	movs	r2, #52	@ 0x34
 80157ac:	2100      	movs	r1, #0
 80157ae:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80157b0:	2300      	movs	r3, #0
}
 80157b2:	0018      	movs	r0, r3
 80157b4:	46bd      	mov	sp, r7
 80157b6:	b006      	add	sp, #24
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	46c0      	nop			@ (mov r8, r8)
 80157bc:	080159a5 	.word	0x080159a5
 80157c0:	08015961 	.word	0x08015961
 80157c4:	080159c3 	.word	0x080159c3

080157c8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b086      	sub	sp, #24
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80157d0:	2317      	movs	r3, #23
 80157d2:	18fb      	adds	r3, r7, r3
 80157d4:	2200      	movs	r2, #0
 80157d6:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	685a      	ldr	r2, [r3, #4]
 80157dc:	2380      	movs	r3, #128	@ 0x80
 80157de:	009b      	lsls	r3, r3, #2
 80157e0:	429a      	cmp	r2, r3
 80157e2:	d003      	beq.n	80157ec <HAL_I2S_DMAStop+0x24>
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d158      	bne.n	801589e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d010      	beq.n	8015816 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157f8:	0018      	movs	r0, r3
 80157fa:	f7fc fa15 	bl	8011c28 <HAL_DMA_Abort>
 80157fe:	1e03      	subs	r3, r0, #0
 8015800:	d009      	beq.n	8015816 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015806:	2208      	movs	r2, #8
 8015808:	431a      	orrs	r2, r3
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801580e:	2317      	movs	r3, #23
 8015810:	18fb      	adds	r3, r7, r3
 8015812:	2201      	movs	r2, #1
 8015814:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	2364      	movs	r3, #100	@ 0x64
 801581a:	2201      	movs	r2, #1
 801581c:	2102      	movs	r1, #2
 801581e:	f000 f8f7 	bl	8015a10 <I2S_WaitFlagStateUntilTimeout>
 8015822:	1e03      	subs	r3, r0, #0
 8015824:	d00d      	beq.n	8015842 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801582a:	2201      	movs	r2, #1
 801582c:	431a      	orrs	r2, r3
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2235      	movs	r2, #53	@ 0x35
 8015836:	2101      	movs	r1, #1
 8015838:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801583a:	2317      	movs	r3, #23
 801583c:	18fb      	adds	r3, r7, r3
 801583e:	2201      	movs	r2, #1
 8015840:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	2364      	movs	r3, #100	@ 0x64
 8015846:	2200      	movs	r2, #0
 8015848:	2180      	movs	r1, #128	@ 0x80
 801584a:	f000 f8e1 	bl	8015a10 <I2S_WaitFlagStateUntilTimeout>
 801584e:	1e03      	subs	r3, r0, #0
 8015850:	d00d      	beq.n	801586e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015856:	2201      	movs	r2, #1
 8015858:	431a      	orrs	r2, r3
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2235      	movs	r2, #53	@ 0x35
 8015862:	2101      	movs	r1, #1
 8015864:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8015866:	2317      	movs	r3, #23
 8015868:	18fb      	adds	r3, r7, r3
 801586a:	2201      	movs	r2, #1
 801586c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	69da      	ldr	r2, [r3, #28]
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	4938      	ldr	r1, [pc, #224]	@ (801595c <HAL_I2S_DMAStop+0x194>)
 801587a:	400a      	ands	r2, r1
 801587c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801587e:	2300      	movs	r3, #0
 8015880:	613b      	str	r3, [r7, #16]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	689b      	ldr	r3, [r3, #8]
 8015888:	613b      	str	r3, [r7, #16]
 801588a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	685a      	ldr	r2, [r3, #4]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	2102      	movs	r1, #2
 8015898:	438a      	bics	r2, r1
 801589a:	605a      	str	r2, [r3, #4]
 801589c:	e053      	b.n	8015946 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	685a      	ldr	r2, [r3, #4]
 80158a2:	23c0      	movs	r3, #192	@ 0xc0
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d005      	beq.n	80158b6 <HAL_I2S_DMAStop+0xee>
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	685a      	ldr	r2, [r3, #4]
 80158ae:	2380      	movs	r3, #128	@ 0x80
 80158b0:	005b      	lsls	r3, r3, #1
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d147      	bne.n	8015946 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d010      	beq.n	80158e0 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158c2:	0018      	movs	r0, r3
 80158c4:	f7fc f9b0 	bl	8011c28 <HAL_DMA_Abort>
 80158c8:	1e03      	subs	r3, r0, #0
 80158ca:	d009      	beq.n	80158e0 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158d0:	2208      	movs	r2, #8
 80158d2:	431a      	orrs	r2, r3
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80158d8:	2317      	movs	r3, #23
 80158da:	18fb      	adds	r3, r7, r3
 80158dc:	2201      	movs	r2, #1
 80158de:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	69da      	ldr	r2, [r3, #28]
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	491c      	ldr	r1, [pc, #112]	@ (801595c <HAL_I2S_DMAStop+0x194>)
 80158ec:	400a      	ands	r2, r1
 80158ee:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80158f0:	2300      	movs	r3, #0
 80158f2:	60fb      	str	r3, [r7, #12]
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	68db      	ldr	r3, [r3, #12]
 80158fa:	60fb      	str	r3, [r7, #12]
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	689b      	ldr	r3, [r3, #8]
 8015902:	60fb      	str	r3, [r7, #12]
 8015904:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	685a      	ldr	r2, [r3, #4]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	2101      	movs	r1, #1
 8015912:	438a      	bics	r2, r1
 8015914:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	685a      	ldr	r2, [r3, #4]
 801591a:	2380      	movs	r3, #128	@ 0x80
 801591c:	005b      	lsls	r3, r3, #1
 801591e:	429a      	cmp	r2, r3
 8015920:	d10e      	bne.n	8015940 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015926:	2240      	movs	r2, #64	@ 0x40
 8015928:	431a      	orrs	r2, r3
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	2235      	movs	r2, #53	@ 0x35
 8015932:	2101      	movs	r1, #1
 8015934:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8015936:	2317      	movs	r3, #23
 8015938:	18fb      	adds	r3, r7, r3
 801593a:	2201      	movs	r2, #1
 801593c:	701a      	strb	r2, [r3, #0]
 801593e:	e002      	b.n	8015946 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2235      	movs	r2, #53	@ 0x35
 801594a:	2101      	movs	r1, #1
 801594c:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801594e:	2317      	movs	r3, #23
 8015950:	18fb      	adds	r3, r7, r3
 8015952:	781b      	ldrb	r3, [r3, #0]
}
 8015954:	0018      	movs	r0, r3
 8015956:	46bd      	mov	sp, r7
 8015958:	b006      	add	sp, #24
 801595a:	bd80      	pop	{r7, pc}
 801595c:	fffffbff 	.word	0xfffffbff

08015960 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801596c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	69db      	ldr	r3, [r3, #28]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d10e      	bne.n	8015994 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	685a      	ldr	r2, [r3, #4]
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2101      	movs	r1, #1
 8015982:	438a      	bics	r2, r1
 8015984:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2200      	movs	r2, #0
 801598a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2235      	movs	r2, #53	@ 0x35
 8015990:	2101      	movs	r1, #1
 8015992:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	0018      	movs	r0, r3
 8015998:	f7f8 fea8 	bl	800e6ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801599c:	46c0      	nop			@ (mov r8, r8)
 801599e:	46bd      	mov	sp, r7
 80159a0:	b004      	add	sp, #16
 80159a2:	bd80      	pop	{r7, pc}

080159a4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b084      	sub	sp, #16
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159b0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	0018      	movs	r0, r3
 80159b6:	f7f8 fe87 	bl	800e6c8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80159ba:	46c0      	nop			@ (mov r8, r8)
 80159bc:	46bd      	mov	sp, r7
 80159be:	b004      	add	sp, #16
 80159c0:	bd80      	pop	{r7, pc}

080159c2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80159c2:	b580      	push	{r7, lr}
 80159c4:	b084      	sub	sp, #16
 80159c6:	af00      	add	r7, sp, #0
 80159c8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159ce:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	685a      	ldr	r2, [r3, #4]
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	2103      	movs	r1, #3
 80159dc:	438a      	bics	r2, r1
 80159de:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2200      	movs	r2, #0
 80159e4:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2200      	movs	r2, #0
 80159ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	2235      	movs	r2, #53	@ 0x35
 80159f0:	2101      	movs	r1, #1
 80159f2:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80159f8:	2208      	movs	r2, #8
 80159fa:	431a      	orrs	r2, r3
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	0018      	movs	r0, r3
 8015a04:	f7f8 fec0 	bl	800e788 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8015a08:	46c0      	nop			@ (mov r8, r8)
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	b004      	add	sp, #16
 8015a0e:	bd80      	pop	{r7, pc}

08015a10 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b086      	sub	sp, #24
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	60f8      	str	r0, [r7, #12]
 8015a18:	60b9      	str	r1, [r7, #8]
 8015a1a:	603b      	str	r3, [r7, #0]
 8015a1c:	1dfb      	adds	r3, r7, #7
 8015a1e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8015a20:	f7fb fb4a 	bl	80110b8 <HAL_GetTick>
 8015a24:	0003      	movs	r3, r0
 8015a26:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8015a28:	e017      	b.n	8015a5a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	d014      	beq.n	8015a5a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8015a30:	f7fb fb42 	bl	80110b8 <HAL_GetTick>
 8015a34:	0002      	movs	r2, r0
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	1ad3      	subs	r3, r2, r3
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	d902      	bls.n	8015a46 <I2S_WaitFlagStateUntilTimeout+0x36>
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d109      	bne.n	8015a5a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2235      	movs	r2, #53	@ 0x35
 8015a4a:	2101      	movs	r1, #1
 8015a4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	2234      	movs	r2, #52	@ 0x34
 8015a52:	2100      	movs	r1, #0
 8015a54:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015a56:	2303      	movs	r3, #3
 8015a58:	e00f      	b.n	8015a7a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	689b      	ldr	r3, [r3, #8]
 8015a60:	68ba      	ldr	r2, [r7, #8]
 8015a62:	4013      	ands	r3, r2
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	1ad3      	subs	r3, r2, r3
 8015a68:	425a      	negs	r2, r3
 8015a6a:	4153      	adcs	r3, r2
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	001a      	movs	r2, r3
 8015a70:	1dfb      	adds	r3, r7, #7
 8015a72:	781b      	ldrb	r3, [r3, #0]
 8015a74:	429a      	cmp	r2, r3
 8015a76:	d1d8      	bne.n	8015a2a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8015a78:	2300      	movs	r3, #0
}
 8015a7a:	0018      	movs	r0, r3
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	b006      	add	sp, #24
 8015a80:	bd80      	pop	{r7, pc}
	...

08015a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8015a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a86:	b08b      	sub	sp, #44	@ 0x2c
 8015a88:	af06      	add	r7, sp, #24
 8015a8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d101      	bne.n	8015a96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8015a92:	2301      	movs	r3, #1
 8015a94:	e0f0      	b.n	8015c78 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	4a79      	ldr	r2, [pc, #484]	@ (8015c80 <HAL_PCD_Init+0x1fc>)
 8015a9a:	5c9b      	ldrb	r3, [r3, r2]
 8015a9c:	b2db      	uxtb	r3, r3
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d108      	bne.n	8015ab4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	23aa      	movs	r3, #170	@ 0xaa
 8015aa6:	009b      	lsls	r3, r3, #2
 8015aa8:	2100      	movs	r1, #0
 8015aaa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	0018      	movs	r0, r3
 8015ab0:	f009 ff4a 	bl	801f948 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	4a72      	ldr	r2, [pc, #456]	@ (8015c80 <HAL_PCD_Init+0x1fc>)
 8015ab8:	2103      	movs	r1, #3
 8015aba:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	0018      	movs	r0, r3
 8015ac2:	f005 fefd 	bl	801b8c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015ac6:	230f      	movs	r3, #15
 8015ac8:	18fb      	adds	r3, r7, r3
 8015aca:	2200      	movs	r2, #0
 8015acc:	701a      	strb	r2, [r3, #0]
 8015ace:	e049      	b.n	8015b64 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8015ad0:	200f      	movs	r0, #15
 8015ad2:	183b      	adds	r3, r7, r0
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	6879      	ldr	r1, [r7, #4]
 8015ad8:	1c5a      	adds	r2, r3, #1
 8015ada:	0013      	movs	r3, r2
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	189b      	adds	r3, r3, r2
 8015ae0:	00db      	lsls	r3, r3, #3
 8015ae2:	18cb      	adds	r3, r1, r3
 8015ae4:	3301      	adds	r3, #1
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8015aea:	183b      	adds	r3, r7, r0
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	6879      	ldr	r1, [r7, #4]
 8015af0:	1c5a      	adds	r2, r3, #1
 8015af2:	0013      	movs	r3, r2
 8015af4:	009b      	lsls	r3, r3, #2
 8015af6:	189b      	adds	r3, r3, r2
 8015af8:	00db      	lsls	r3, r3, #3
 8015afa:	183a      	adds	r2, r7, r0
 8015afc:	7812      	ldrb	r2, [r2, #0]
 8015afe:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8015b00:	183b      	adds	r3, r7, r0
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	6879      	ldr	r1, [r7, #4]
 8015b06:	1c5a      	adds	r2, r3, #1
 8015b08:	0013      	movs	r3, r2
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	189b      	adds	r3, r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	18cb      	adds	r3, r1, r3
 8015b12:	3303      	adds	r3, #3
 8015b14:	2200      	movs	r2, #0
 8015b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8015b18:	183b      	adds	r3, r7, r0
 8015b1a:	781a      	ldrb	r2, [r3, #0]
 8015b1c:	6879      	ldr	r1, [r7, #4]
 8015b1e:	0013      	movs	r3, r2
 8015b20:	009b      	lsls	r3, r3, #2
 8015b22:	189b      	adds	r3, r3, r2
 8015b24:	00db      	lsls	r3, r3, #3
 8015b26:	18cb      	adds	r3, r1, r3
 8015b28:	3338      	adds	r3, #56	@ 0x38
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8015b2e:	183b      	adds	r3, r7, r0
 8015b30:	781a      	ldrb	r2, [r3, #0]
 8015b32:	6879      	ldr	r1, [r7, #4]
 8015b34:	0013      	movs	r3, r2
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	189b      	adds	r3, r3, r2
 8015b3a:	00db      	lsls	r3, r3, #3
 8015b3c:	18cb      	adds	r3, r1, r3
 8015b3e:	333c      	adds	r3, #60	@ 0x3c
 8015b40:	2200      	movs	r2, #0
 8015b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8015b44:	183b      	adds	r3, r7, r0
 8015b46:	781a      	ldrb	r2, [r3, #0]
 8015b48:	6879      	ldr	r1, [r7, #4]
 8015b4a:	0013      	movs	r3, r2
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	189b      	adds	r3, r3, r2
 8015b50:	00db      	lsls	r3, r3, #3
 8015b52:	18cb      	adds	r3, r1, r3
 8015b54:	3340      	adds	r3, #64	@ 0x40
 8015b56:	2200      	movs	r2, #0
 8015b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015b5a:	183b      	adds	r3, r7, r0
 8015b5c:	781a      	ldrb	r2, [r3, #0]
 8015b5e:	183b      	adds	r3, r7, r0
 8015b60:	3201      	adds	r2, #1
 8015b62:	701a      	strb	r2, [r3, #0]
 8015b64:	210f      	movs	r1, #15
 8015b66:	187b      	adds	r3, r7, r1
 8015b68:	781a      	ldrb	r2, [r3, #0]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d3ae      	bcc.n	8015ad0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015b72:	187b      	adds	r3, r7, r1
 8015b74:	2200      	movs	r2, #0
 8015b76:	701a      	strb	r2, [r3, #0]
 8015b78:	e056      	b.n	8015c28 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8015b7a:	240f      	movs	r4, #15
 8015b7c:	193b      	adds	r3, r7, r4
 8015b7e:	781a      	ldrb	r2, [r3, #0]
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	236a      	movs	r3, #106	@ 0x6a
 8015b84:	33ff      	adds	r3, #255	@ 0xff
 8015b86:	0019      	movs	r1, r3
 8015b88:	0013      	movs	r3, r2
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	189b      	adds	r3, r3, r2
 8015b8e:	00db      	lsls	r3, r3, #3
 8015b90:	18c3      	adds	r3, r0, r3
 8015b92:	185b      	adds	r3, r3, r1
 8015b94:	2200      	movs	r2, #0
 8015b96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8015b98:	193b      	adds	r3, r7, r4
 8015b9a:	781a      	ldrb	r2, [r3, #0]
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	23b4      	movs	r3, #180	@ 0xb4
 8015ba0:	0059      	lsls	r1, r3, #1
 8015ba2:	0013      	movs	r3, r2
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	189b      	adds	r3, r3, r2
 8015ba8:	00db      	lsls	r3, r3, #3
 8015baa:	18c3      	adds	r3, r0, r3
 8015bac:	185b      	adds	r3, r3, r1
 8015bae:	193a      	adds	r2, r7, r4
 8015bb0:	7812      	ldrb	r2, [r2, #0]
 8015bb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8015bb4:	193b      	adds	r3, r7, r4
 8015bb6:	781a      	ldrb	r2, [r3, #0]
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	236c      	movs	r3, #108	@ 0x6c
 8015bbc:	33ff      	adds	r3, #255	@ 0xff
 8015bbe:	0019      	movs	r1, r3
 8015bc0:	0013      	movs	r3, r2
 8015bc2:	009b      	lsls	r3, r3, #2
 8015bc4:	189b      	adds	r3, r3, r2
 8015bc6:	00db      	lsls	r3, r3, #3
 8015bc8:	18c3      	adds	r3, r0, r3
 8015bca:	185b      	adds	r3, r3, r1
 8015bcc:	2200      	movs	r2, #0
 8015bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8015bd0:	193b      	adds	r3, r7, r4
 8015bd2:	781a      	ldrb	r2, [r3, #0]
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	23bc      	movs	r3, #188	@ 0xbc
 8015bd8:	0059      	lsls	r1, r3, #1
 8015bda:	0013      	movs	r3, r2
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	189b      	adds	r3, r3, r2
 8015be0:	00db      	lsls	r3, r3, #3
 8015be2:	18c3      	adds	r3, r0, r3
 8015be4:	185b      	adds	r3, r3, r1
 8015be6:	2200      	movs	r2, #0
 8015be8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8015bea:	193b      	adds	r3, r7, r4
 8015bec:	781a      	ldrb	r2, [r3, #0]
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	23be      	movs	r3, #190	@ 0xbe
 8015bf2:	0059      	lsls	r1, r3, #1
 8015bf4:	0013      	movs	r3, r2
 8015bf6:	009b      	lsls	r3, r3, #2
 8015bf8:	189b      	adds	r3, r3, r2
 8015bfa:	00db      	lsls	r3, r3, #3
 8015bfc:	18c3      	adds	r3, r0, r3
 8015bfe:	185b      	adds	r3, r3, r1
 8015c00:	2200      	movs	r2, #0
 8015c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8015c04:	193b      	adds	r3, r7, r4
 8015c06:	781a      	ldrb	r2, [r3, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	23c0      	movs	r3, #192	@ 0xc0
 8015c0c:	0059      	lsls	r1, r3, #1
 8015c0e:	0013      	movs	r3, r2
 8015c10:	009b      	lsls	r3, r3, #2
 8015c12:	189b      	adds	r3, r3, r2
 8015c14:	00db      	lsls	r3, r3, #3
 8015c16:	18c3      	adds	r3, r0, r3
 8015c18:	185b      	adds	r3, r3, r1
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015c1e:	193b      	adds	r3, r7, r4
 8015c20:	781a      	ldrb	r2, [r3, #0]
 8015c22:	193b      	adds	r3, r7, r4
 8015c24:	3201      	adds	r2, #1
 8015c26:	701a      	strb	r2, [r3, #0]
 8015c28:	230f      	movs	r3, #15
 8015c2a:	18fb      	adds	r3, r7, r3
 8015c2c:	781a      	ldrb	r2, [r3, #0]
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d3a1      	bcc.n	8015b7a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6818      	ldr	r0, [r3, #0]
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	466a      	mov	r2, sp
 8015c3e:	0011      	movs	r1, r2
 8015c40:	001a      	movs	r2, r3
 8015c42:	3210      	adds	r2, #16
 8015c44:	ca70      	ldmia	r2!, {r4, r5, r6}
 8015c46:	c170      	stmia	r1!, {r4, r5, r6}
 8015c48:	ca30      	ldmia	r2!, {r4, r5}
 8015c4a:	c130      	stmia	r1!, {r4, r5}
 8015c4c:	6859      	ldr	r1, [r3, #4]
 8015c4e:	689a      	ldr	r2, [r3, #8]
 8015c50:	68db      	ldr	r3, [r3, #12]
 8015c52:	f005 fe4f 	bl	801b8f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	2224      	movs	r2, #36	@ 0x24
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	4a07      	ldr	r2, [pc, #28]	@ (8015c80 <HAL_PCD_Init+0x1fc>)
 8015c62:	2101      	movs	r1, #1
 8015c64:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	69db      	ldr	r3, [r3, #28]
 8015c6a:	2b01      	cmp	r3, #1
 8015c6c:	d103      	bne.n	8015c76 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	0018      	movs	r0, r3
 8015c72:	f001 fd23 	bl	80176bc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8015c76:	2300      	movs	r3, #0
}
 8015c78:	0018      	movs	r0, r3
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	b005      	add	sp, #20
 8015c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c80:	000002a9 	.word	0x000002a9

08015c84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b082      	sub	sp, #8
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8015c8c:	687a      	ldr	r2, [r7, #4]
 8015c8e:	23aa      	movs	r3, #170	@ 0xaa
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	5cd3      	ldrb	r3, [r2, r3]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d101      	bne.n	8015c9c <HAL_PCD_Start+0x18>
 8015c98:	2302      	movs	r3, #2
 8015c9a:	e014      	b.n	8015cc6 <HAL_PCD_Start+0x42>
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	23aa      	movs	r3, #170	@ 0xaa
 8015ca0:	009b      	lsls	r3, r3, #2
 8015ca2:	2101      	movs	r1, #1
 8015ca4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	0018      	movs	r0, r3
 8015cac:	f005 fdf2 	bl	801b894 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	0018      	movs	r0, r3
 8015cb6:	f007 fdf5 	bl	801d8a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	23aa      	movs	r3, #170	@ 0xaa
 8015cbe:	009b      	lsls	r3, r3, #2
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8015cc4:	2300      	movs	r3, #0
}
 8015cc6:	0018      	movs	r0, r3
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	b002      	add	sp, #8
 8015ccc:	bd80      	pop	{r7, pc}
	...

08015cd0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b084      	sub	sp, #16
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	0018      	movs	r0, r3
 8015cde:	f007 fdf7 	bl	801d8d0 <USB_ReadInterrupts>
 8015ce2:	0003      	movs	r3, r0
 8015ce4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8015ce6:	68fa      	ldr	r2, [r7, #12]
 8015ce8:	2380      	movs	r3, #128	@ 0x80
 8015cea:	021b      	lsls	r3, r3, #8
 8015cec:	4013      	ands	r3, r2
 8015cee:	d004      	beq.n	8015cfa <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	0018      	movs	r0, r3
 8015cf4:	f000 fb62 	bl	80163bc <PCD_EP_ISR_Handler>

    return;
 8015cf8:	e11d      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8015cfa:	68fa      	ldr	r2, [r7, #12]
 8015cfc:	2380      	movs	r3, #128	@ 0x80
 8015cfe:	00db      	lsls	r3, r3, #3
 8015d00:	4013      	ands	r3, r2
 8015d02:	d015      	beq.n	8015d30 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	2244      	movs	r2, #68	@ 0x44
 8015d0a:	5a9b      	ldrh	r3, [r3, r2]
 8015d0c:	b29a      	uxth	r2, r3
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	498a      	ldr	r1, [pc, #552]	@ (8015f3c <HAL_PCD_IRQHandler+0x26c>)
 8015d14:	400a      	ands	r2, r1
 8015d16:	b291      	uxth	r1, r2
 8015d18:	2244      	movs	r2, #68	@ 0x44
 8015d1a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	0018      	movs	r0, r3
 8015d20:	f009 fe95 	bl	801fa4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	2100      	movs	r1, #0
 8015d28:	0018      	movs	r0, r3
 8015d2a:	f000 f915 	bl	8015f58 <HAL_PCD_SetAddress>

    return;
 8015d2e:	e102      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8015d30:	68fa      	ldr	r2, [r7, #12]
 8015d32:	2380      	movs	r3, #128	@ 0x80
 8015d34:	01db      	lsls	r3, r3, #7
 8015d36:	4013      	ands	r3, r2
 8015d38:	d00c      	beq.n	8015d54 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	2244      	movs	r2, #68	@ 0x44
 8015d40:	5a9b      	ldrh	r3, [r3, r2]
 8015d42:	b29a      	uxth	r2, r3
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	497d      	ldr	r1, [pc, #500]	@ (8015f40 <HAL_PCD_IRQHandler+0x270>)
 8015d4a:	400a      	ands	r2, r1
 8015d4c:	b291      	uxth	r1, r2
 8015d4e:	2244      	movs	r2, #68	@ 0x44
 8015d50:	5299      	strh	r1, [r3, r2]

    return;
 8015d52:	e0f0      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8015d54:	68fa      	ldr	r2, [r7, #12]
 8015d56:	2380      	movs	r3, #128	@ 0x80
 8015d58:	019b      	lsls	r3, r3, #6
 8015d5a:	4013      	ands	r3, r2
 8015d5c:	d00c      	beq.n	8015d78 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	2244      	movs	r2, #68	@ 0x44
 8015d64:	5a9b      	ldrh	r3, [r3, r2]
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	4975      	ldr	r1, [pc, #468]	@ (8015f44 <HAL_PCD_IRQHandler+0x274>)
 8015d6e:	400a      	ands	r2, r1
 8015d70:	b291      	uxth	r1, r2
 8015d72:	2244      	movs	r2, #68	@ 0x44
 8015d74:	5299      	strh	r1, [r3, r2]

    return;
 8015d76:	e0de      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8015d78:	68fa      	ldr	r2, [r7, #12]
 8015d7a:	2380      	movs	r3, #128	@ 0x80
 8015d7c:	015b      	lsls	r3, r3, #5
 8015d7e:	4013      	ands	r3, r2
 8015d80:	d038      	beq.n	8015df4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	2240      	movs	r2, #64	@ 0x40
 8015d88:	5a9b      	ldrh	r3, [r3, r2]
 8015d8a:	b29a      	uxth	r2, r3
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2104      	movs	r1, #4
 8015d92:	438a      	bics	r2, r1
 8015d94:	b291      	uxth	r1, r2
 8015d96:	2240      	movs	r2, #64	@ 0x40
 8015d98:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	2240      	movs	r2, #64	@ 0x40
 8015da0:	5a9b      	ldrh	r3, [r3, r2]
 8015da2:	b29a      	uxth	r2, r3
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	2108      	movs	r1, #8
 8015daa:	438a      	bics	r2, r1
 8015dac:	b291      	uxth	r1, r2
 8015dae:	2240      	movs	r2, #64	@ 0x40
 8015db0:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8015db2:	687a      	ldr	r2, [r7, #4]
 8015db4:	23b8      	movs	r3, #184	@ 0xb8
 8015db6:	009b      	lsls	r3, r3, #2
 8015db8:	5cd3      	ldrb	r3, [r2, r3]
 8015dba:	2b01      	cmp	r3, #1
 8015dbc:	d109      	bne.n	8015dd2 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8015dbe:	687a      	ldr	r2, [r7, #4]
 8015dc0:	23b8      	movs	r3, #184	@ 0xb8
 8015dc2:	009b      	lsls	r3, r3, #2
 8015dc4:	2100      	movs	r1, #0
 8015dc6:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	2100      	movs	r1, #0
 8015dcc:	0018      	movs	r0, r3
 8015dce:	f001 fc9f 	bl	8017710 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	0018      	movs	r0, r3
 8015dd6:	f009 fe7b 	bl	801fad0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	2244      	movs	r2, #68	@ 0x44
 8015de0:	5a9b      	ldrh	r3, [r3, r2]
 8015de2:	b29a      	uxth	r2, r3
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	4957      	ldr	r1, [pc, #348]	@ (8015f48 <HAL_PCD_IRQHandler+0x278>)
 8015dea:	400a      	ands	r2, r1
 8015dec:	b291      	uxth	r1, r2
 8015dee:	2244      	movs	r2, #68	@ 0x44
 8015df0:	5299      	strh	r1, [r3, r2]

    return;
 8015df2:	e0a0      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8015df4:	68fa      	ldr	r2, [r7, #12]
 8015df6:	2380      	movs	r3, #128	@ 0x80
 8015df8:	011b      	lsls	r3, r3, #4
 8015dfa:	4013      	ands	r3, r2
 8015dfc:	d028      	beq.n	8015e50 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2240      	movs	r2, #64	@ 0x40
 8015e04:	5a9b      	ldrh	r3, [r3, r2]
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	2108      	movs	r1, #8
 8015e0e:	430a      	orrs	r2, r1
 8015e10:	b291      	uxth	r1, r2
 8015e12:	2240      	movs	r2, #64	@ 0x40
 8015e14:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2244      	movs	r2, #68	@ 0x44
 8015e1c:	5a9b      	ldrh	r3, [r3, r2]
 8015e1e:	b29a      	uxth	r2, r3
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	4949      	ldr	r1, [pc, #292]	@ (8015f4c <HAL_PCD_IRQHandler+0x27c>)
 8015e26:	400a      	ands	r2, r1
 8015e28:	b291      	uxth	r1, r2
 8015e2a:	2244      	movs	r2, #68	@ 0x44
 8015e2c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	2240      	movs	r2, #64	@ 0x40
 8015e34:	5a9b      	ldrh	r3, [r3, r2]
 8015e36:	b29a      	uxth	r2, r3
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	2104      	movs	r1, #4
 8015e3e:	430a      	orrs	r2, r1
 8015e40:	b291      	uxth	r1, r2
 8015e42:	2240      	movs	r2, #64	@ 0x40
 8015e44:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	0018      	movs	r0, r3
 8015e4a:	f009 fe25 	bl	801fa98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8015e4e:	e072      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	2280      	movs	r2, #128	@ 0x80
 8015e54:	4013      	ands	r3, r2
 8015e56:	d046      	beq.n	8015ee6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2244      	movs	r2, #68	@ 0x44
 8015e5e:	5a9b      	ldrh	r3, [r3, r2]
 8015e60:	b29a      	uxth	r2, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2180      	movs	r1, #128	@ 0x80
 8015e68:	438a      	bics	r2, r1
 8015e6a:	b291      	uxth	r1, r2
 8015e6c:	2244      	movs	r2, #68	@ 0x44
 8015e6e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8015e70:	687a      	ldr	r2, [r7, #4]
 8015e72:	23b8      	movs	r3, #184	@ 0xb8
 8015e74:	009b      	lsls	r3, r3, #2
 8015e76:	5cd3      	ldrb	r3, [r2, r3]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d12f      	bne.n	8015edc <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	2240      	movs	r2, #64	@ 0x40
 8015e82:	5a9b      	ldrh	r3, [r3, r2]
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	2104      	movs	r1, #4
 8015e8c:	430a      	orrs	r2, r1
 8015e8e:	b291      	uxth	r1, r2
 8015e90:	2240      	movs	r2, #64	@ 0x40
 8015e92:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2240      	movs	r2, #64	@ 0x40
 8015e9a:	5a9b      	ldrh	r3, [r3, r2]
 8015e9c:	b29a      	uxth	r2, r3
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2108      	movs	r1, #8
 8015ea4:	430a      	orrs	r2, r1
 8015ea6:	b291      	uxth	r1, r2
 8015ea8:	2240      	movs	r2, #64	@ 0x40
 8015eaa:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	23b8      	movs	r3, #184	@ 0xb8
 8015eb0:	009b      	lsls	r3, r3, #2
 8015eb2:	2101      	movs	r1, #1
 8015eb4:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	2254      	movs	r2, #84	@ 0x54
 8015ebc:	5a9b      	ldrh	r3, [r3, r2]
 8015ebe:	b29b      	uxth	r3, r3
 8015ec0:	089b      	lsrs	r3, r3, #2
 8015ec2:	223c      	movs	r2, #60	@ 0x3c
 8015ec4:	4013      	ands	r3, r2
 8015ec6:	0019      	movs	r1, r3
 8015ec8:	687a      	ldr	r2, [r7, #4]
 8015eca:	23b9      	movs	r3, #185	@ 0xb9
 8015ecc:	009b      	lsls	r3, r3, #2
 8015ece:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2101      	movs	r1, #1
 8015ed4:	0018      	movs	r0, r3
 8015ed6:	f001 fc1b 	bl	8017710 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8015eda:	e02c      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	0018      	movs	r0, r3
 8015ee0:	f009 fdda 	bl	801fa98 <HAL_PCD_SuspendCallback>
    return;
 8015ee4:	e027      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8015ee6:	68fa      	ldr	r2, [r7, #12]
 8015ee8:	2380      	movs	r3, #128	@ 0x80
 8015eea:	009b      	lsls	r3, r3, #2
 8015eec:	4013      	ands	r3, r2
 8015eee:	d010      	beq.n	8015f12 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2244      	movs	r2, #68	@ 0x44
 8015ef6:	5a9b      	ldrh	r3, [r3, r2]
 8015ef8:	b29a      	uxth	r2, r3
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	4914      	ldr	r1, [pc, #80]	@ (8015f50 <HAL_PCD_IRQHandler+0x280>)
 8015f00:	400a      	ands	r2, r1
 8015f02:	b291      	uxth	r1, r2
 8015f04:	2244      	movs	r2, #68	@ 0x44
 8015f06:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	0018      	movs	r0, r3
 8015f0c:	f009 fd90 	bl	801fa30 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8015f10:	e011      	b.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8015f12:	68fa      	ldr	r2, [r7, #12]
 8015f14:	2380      	movs	r3, #128	@ 0x80
 8015f16:	005b      	lsls	r3, r3, #1
 8015f18:	4013      	ands	r3, r2
 8015f1a:	d00c      	beq.n	8015f36 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	2244      	movs	r2, #68	@ 0x44
 8015f22:	5a9b      	ldrh	r3, [r3, r2]
 8015f24:	b29a      	uxth	r2, r3
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	490a      	ldr	r1, [pc, #40]	@ (8015f54 <HAL_PCD_IRQHandler+0x284>)
 8015f2c:	400a      	ands	r2, r1
 8015f2e:	b291      	uxth	r1, r2
 8015f30:	2244      	movs	r2, #68	@ 0x44
 8015f32:	5299      	strh	r1, [r3, r2]

    return;
 8015f34:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015f36:	46bd      	mov	sp, r7
 8015f38:	b004      	add	sp, #16
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	fffffbff 	.word	0xfffffbff
 8015f40:	ffffbfff 	.word	0xffffbfff
 8015f44:	ffffdfff 	.word	0xffffdfff
 8015f48:	ffffefff 	.word	0xffffefff
 8015f4c:	fffff7ff 	.word	0xfffff7ff
 8015f50:	fffffdff 	.word	0xfffffdff
 8015f54:	fffffeff 	.word	0xfffffeff

08015f58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	000a      	movs	r2, r1
 8015f62:	1cfb      	adds	r3, r7, #3
 8015f64:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	23aa      	movs	r3, #170	@ 0xaa
 8015f6a:	009b      	lsls	r3, r3, #2
 8015f6c:	5cd3      	ldrb	r3, [r2, r3]
 8015f6e:	2b01      	cmp	r3, #1
 8015f70:	d101      	bne.n	8015f76 <HAL_PCD_SetAddress+0x1e>
 8015f72:	2302      	movs	r3, #2
 8015f74:	e017      	b.n	8015fa6 <HAL_PCD_SetAddress+0x4e>
 8015f76:	687a      	ldr	r2, [r7, #4]
 8015f78:	23aa      	movs	r3, #170	@ 0xaa
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	2101      	movs	r1, #1
 8015f7e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	1cfa      	adds	r2, r7, #3
 8015f84:	2124      	movs	r1, #36	@ 0x24
 8015f86:	7812      	ldrb	r2, [r2, #0]
 8015f88:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	1cfb      	adds	r3, r7, #3
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	0019      	movs	r1, r3
 8015f94:	0010      	movs	r0, r2
 8015f96:	f007 fc71 	bl	801d87c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	23aa      	movs	r3, #170	@ 0xaa
 8015f9e:	009b      	lsls	r3, r3, #2
 8015fa0:	2100      	movs	r1, #0
 8015fa2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8015fa4:	2300      	movs	r3, #0
}
 8015fa6:	0018      	movs	r0, r3
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	b002      	add	sp, #8
 8015fac:	bd80      	pop	{r7, pc}

08015fae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8015fae:	b590      	push	{r4, r7, lr}
 8015fb0:	b085      	sub	sp, #20
 8015fb2:	af00      	add	r7, sp, #0
 8015fb4:	6078      	str	r0, [r7, #4]
 8015fb6:	000c      	movs	r4, r1
 8015fb8:	0010      	movs	r0, r2
 8015fba:	0019      	movs	r1, r3
 8015fbc:	1cfb      	adds	r3, r7, #3
 8015fbe:	1c22      	adds	r2, r4, #0
 8015fc0:	701a      	strb	r2, [r3, #0]
 8015fc2:	003b      	movs	r3, r7
 8015fc4:	1c02      	adds	r2, r0, #0
 8015fc6:	801a      	strh	r2, [r3, #0]
 8015fc8:	1cbb      	adds	r3, r7, #2
 8015fca:	1c0a      	adds	r2, r1, #0
 8015fcc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8015fce:	230b      	movs	r3, #11
 8015fd0:	18fb      	adds	r3, r7, r3
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8015fd6:	1cfb      	adds	r3, r7, #3
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	b25b      	sxtb	r3, r3
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	da0f      	bge.n	8016000 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015fe0:	1cfb      	adds	r3, r7, #3
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	2207      	movs	r2, #7
 8015fe6:	4013      	ands	r3, r2
 8015fe8:	1c5a      	adds	r2, r3, #1
 8015fea:	0013      	movs	r3, r2
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	189b      	adds	r3, r3, r2
 8015ff0:	00db      	lsls	r3, r3, #3
 8015ff2:	687a      	ldr	r2, [r7, #4]
 8015ff4:	18d3      	adds	r3, r2, r3
 8015ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	705a      	strb	r2, [r3, #1]
 8015ffe:	e00f      	b.n	8016020 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016000:	1cfb      	adds	r3, r7, #3
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	2207      	movs	r2, #7
 8016006:	401a      	ands	r2, r3
 8016008:	0013      	movs	r3, r2
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	189b      	adds	r3, r3, r2
 801600e:	00db      	lsls	r3, r3, #3
 8016010:	3369      	adds	r3, #105	@ 0x69
 8016012:	33ff      	adds	r3, #255	@ 0xff
 8016014:	687a      	ldr	r2, [r7, #4]
 8016016:	18d3      	adds	r3, r2, r3
 8016018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	2200      	movs	r2, #0
 801601e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8016020:	1cfb      	adds	r3, r7, #3
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	2207      	movs	r2, #7
 8016026:	4013      	ands	r3, r2
 8016028:	b2da      	uxtb	r2, r3
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801602e:	003b      	movs	r3, r7
 8016030:	881a      	ldrh	r2, [r3, #0]
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	1cba      	adds	r2, r7, #2
 801603a:	7812      	ldrb	r2, [r2, #0]
 801603c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801603e:	1cbb      	adds	r3, r7, #2
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	2b02      	cmp	r3, #2
 8016044:	d102      	bne.n	801604c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2200      	movs	r2, #0
 801604a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801604c:	687a      	ldr	r2, [r7, #4]
 801604e:	23aa      	movs	r3, #170	@ 0xaa
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	5cd3      	ldrb	r3, [r2, r3]
 8016054:	2b01      	cmp	r3, #1
 8016056:	d101      	bne.n	801605c <HAL_PCD_EP_Open+0xae>
 8016058:	2302      	movs	r3, #2
 801605a:	e013      	b.n	8016084 <HAL_PCD_EP_Open+0xd6>
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	23aa      	movs	r3, #170	@ 0xaa
 8016060:	009b      	lsls	r3, r3, #2
 8016062:	2101      	movs	r1, #1
 8016064:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	0011      	movs	r1, r2
 801606e:	0018      	movs	r0, r3
 8016070:	f005 fc68 	bl	801b944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8016074:	687a      	ldr	r2, [r7, #4]
 8016076:	23aa      	movs	r3, #170	@ 0xaa
 8016078:	009b      	lsls	r3, r3, #2
 801607a:	2100      	movs	r1, #0
 801607c:	54d1      	strb	r1, [r2, r3]

  return ret;
 801607e:	230b      	movs	r3, #11
 8016080:	18fb      	adds	r3, r7, r3
 8016082:	781b      	ldrb	r3, [r3, #0]
}
 8016084:	0018      	movs	r0, r3
 8016086:	46bd      	mov	sp, r7
 8016088:	b005      	add	sp, #20
 801608a:	bd90      	pop	{r4, r7, pc}

0801608c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	000a      	movs	r2, r1
 8016096:	1cfb      	adds	r3, r7, #3
 8016098:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801609a:	1cfb      	adds	r3, r7, #3
 801609c:	781b      	ldrb	r3, [r3, #0]
 801609e:	b25b      	sxtb	r3, r3
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	da0f      	bge.n	80160c4 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80160a4:	1cfb      	adds	r3, r7, #3
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	2207      	movs	r2, #7
 80160aa:	4013      	ands	r3, r2
 80160ac:	1c5a      	adds	r2, r3, #1
 80160ae:	0013      	movs	r3, r2
 80160b0:	009b      	lsls	r3, r3, #2
 80160b2:	189b      	adds	r3, r3, r2
 80160b4:	00db      	lsls	r3, r3, #3
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	18d3      	adds	r3, r2, r3
 80160ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	2201      	movs	r2, #1
 80160c0:	705a      	strb	r2, [r3, #1]
 80160c2:	e00f      	b.n	80160e4 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80160c4:	1cfb      	adds	r3, r7, #3
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	2207      	movs	r2, #7
 80160ca:	401a      	ands	r2, r3
 80160cc:	0013      	movs	r3, r2
 80160ce:	009b      	lsls	r3, r3, #2
 80160d0:	189b      	adds	r3, r3, r2
 80160d2:	00db      	lsls	r3, r3, #3
 80160d4:	3369      	adds	r3, #105	@ 0x69
 80160d6:	33ff      	adds	r3, #255	@ 0xff
 80160d8:	687a      	ldr	r2, [r7, #4]
 80160da:	18d3      	adds	r3, r2, r3
 80160dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	2200      	movs	r2, #0
 80160e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80160e4:	1cfb      	adds	r3, r7, #3
 80160e6:	781b      	ldrb	r3, [r3, #0]
 80160e8:	2207      	movs	r2, #7
 80160ea:	4013      	ands	r3, r2
 80160ec:	b2da      	uxtb	r2, r3
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80160f2:	687a      	ldr	r2, [r7, #4]
 80160f4:	23aa      	movs	r3, #170	@ 0xaa
 80160f6:	009b      	lsls	r3, r3, #2
 80160f8:	5cd3      	ldrb	r3, [r2, r3]
 80160fa:	2b01      	cmp	r3, #1
 80160fc:	d101      	bne.n	8016102 <HAL_PCD_EP_Close+0x76>
 80160fe:	2302      	movs	r3, #2
 8016100:	e011      	b.n	8016126 <HAL_PCD_EP_Close+0x9a>
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	23aa      	movs	r3, #170	@ 0xaa
 8016106:	009b      	lsls	r3, r3, #2
 8016108:	2101      	movs	r1, #1
 801610a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	68fa      	ldr	r2, [r7, #12]
 8016112:	0011      	movs	r1, r2
 8016114:	0018      	movs	r0, r3
 8016116:	f005 ffb7 	bl	801c088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801611a:	687a      	ldr	r2, [r7, #4]
 801611c:	23aa      	movs	r3, #170	@ 0xaa
 801611e:	009b      	lsls	r3, r3, #2
 8016120:	2100      	movs	r1, #0
 8016122:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8016124:	2300      	movs	r3, #0
}
 8016126:	0018      	movs	r0, r3
 8016128:	46bd      	mov	sp, r7
 801612a:	b004      	add	sp, #16
 801612c:	bd80      	pop	{r7, pc}

0801612e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801612e:	b580      	push	{r7, lr}
 8016130:	b086      	sub	sp, #24
 8016132:	af00      	add	r7, sp, #0
 8016134:	60f8      	str	r0, [r7, #12]
 8016136:	607a      	str	r2, [r7, #4]
 8016138:	603b      	str	r3, [r7, #0]
 801613a:	200b      	movs	r0, #11
 801613c:	183b      	adds	r3, r7, r0
 801613e:	1c0a      	adds	r2, r1, #0
 8016140:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016142:	0001      	movs	r1, r0
 8016144:	187b      	adds	r3, r7, r1
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	2207      	movs	r2, #7
 801614a:	401a      	ands	r2, r3
 801614c:	0013      	movs	r3, r2
 801614e:	009b      	lsls	r3, r3, #2
 8016150:	189b      	adds	r3, r3, r2
 8016152:	00db      	lsls	r3, r3, #3
 8016154:	3369      	adds	r3, #105	@ 0x69
 8016156:	33ff      	adds	r3, #255	@ 0xff
 8016158:	68fa      	ldr	r2, [r7, #12]
 801615a:	18d3      	adds	r3, r2, r3
 801615c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	687a      	ldr	r2, [r7, #4]
 8016162:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	683a      	ldr	r2, [r7, #0]
 8016168:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	2200      	movs	r2, #0
 801616e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8016170:	697b      	ldr	r3, [r7, #20]
 8016172:	2200      	movs	r2, #0
 8016174:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016176:	187b      	adds	r3, r7, r1
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	2207      	movs	r2, #7
 801617c:	4013      	ands	r3, r2
 801617e:	b2da      	uxtb	r2, r3
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	697a      	ldr	r2, [r7, #20]
 801618a:	0011      	movs	r1, r2
 801618c:	0018      	movs	r0, r3
 801618e:	f006 f93b 	bl	801c408 <USB_EPStartXfer>

  return HAL_OK;
 8016192:	2300      	movs	r3, #0
}
 8016194:	0018      	movs	r0, r3
 8016196:	46bd      	mov	sp, r7
 8016198:	b006      	add	sp, #24
 801619a:	bd80      	pop	{r7, pc}

0801619c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b082      	sub	sp, #8
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	000a      	movs	r2, r1
 80161a6:	1cfb      	adds	r3, r7, #3
 80161a8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80161aa:	1cfb      	adds	r3, r7, #3
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	2207      	movs	r2, #7
 80161b0:	401a      	ands	r2, r3
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	23c2      	movs	r3, #194	@ 0xc2
 80161b6:	0059      	lsls	r1, r3, #1
 80161b8:	0013      	movs	r3, r2
 80161ba:	009b      	lsls	r3, r3, #2
 80161bc:	189b      	adds	r3, r3, r2
 80161be:	00db      	lsls	r3, r3, #3
 80161c0:	18c3      	adds	r3, r0, r3
 80161c2:	185b      	adds	r3, r3, r1
 80161c4:	681b      	ldr	r3, [r3, #0]
}
 80161c6:	0018      	movs	r0, r3
 80161c8:	46bd      	mov	sp, r7
 80161ca:	b002      	add	sp, #8
 80161cc:	bd80      	pop	{r7, pc}

080161ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80161ce:	b580      	push	{r7, lr}
 80161d0:	b086      	sub	sp, #24
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	60f8      	str	r0, [r7, #12]
 80161d6:	607a      	str	r2, [r7, #4]
 80161d8:	603b      	str	r3, [r7, #0]
 80161da:	200b      	movs	r0, #11
 80161dc:	183b      	adds	r3, r7, r0
 80161de:	1c0a      	adds	r2, r1, #0
 80161e0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80161e2:	183b      	adds	r3, r7, r0
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	2207      	movs	r2, #7
 80161e8:	4013      	ands	r3, r2
 80161ea:	1c5a      	adds	r2, r3, #1
 80161ec:	0013      	movs	r3, r2
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	189b      	adds	r3, r3, r2
 80161f2:	00db      	lsls	r3, r3, #3
 80161f4:	68fa      	ldr	r2, [r7, #12]
 80161f6:	18d3      	adds	r3, r2, r3
 80161f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	687a      	ldr	r2, [r7, #4]
 80161fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	683a      	ldr	r2, [r7, #0]
 8016204:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8016206:	697b      	ldr	r3, [r7, #20]
 8016208:	2224      	movs	r2, #36	@ 0x24
 801620a:	2101      	movs	r1, #1
 801620c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	683a      	ldr	r2, [r7, #0]
 8016212:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	2200      	movs	r2, #0
 8016218:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801621a:	697b      	ldr	r3, [r7, #20]
 801621c:	2201      	movs	r2, #1
 801621e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016220:	183b      	adds	r3, r7, r0
 8016222:	781b      	ldrb	r3, [r3, #0]
 8016224:	2207      	movs	r2, #7
 8016226:	4013      	ands	r3, r2
 8016228:	b2da      	uxtb	r2, r3
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	697a      	ldr	r2, [r7, #20]
 8016234:	0011      	movs	r1, r2
 8016236:	0018      	movs	r0, r3
 8016238:	f006 f8e6 	bl	801c408 <USB_EPStartXfer>

  return HAL_OK;
 801623c:	2300      	movs	r3, #0
}
 801623e:	0018      	movs	r0, r3
 8016240:	46bd      	mov	sp, r7
 8016242:	b006      	add	sp, #24
 8016244:	bd80      	pop	{r7, pc}

08016246 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016246:	b580      	push	{r7, lr}
 8016248:	b084      	sub	sp, #16
 801624a:	af00      	add	r7, sp, #0
 801624c:	6078      	str	r0, [r7, #4]
 801624e:	000a      	movs	r2, r1
 8016250:	1cfb      	adds	r3, r7, #3
 8016252:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8016254:	1cfb      	adds	r3, r7, #3
 8016256:	781b      	ldrb	r3, [r3, #0]
 8016258:	2207      	movs	r2, #7
 801625a:	401a      	ands	r2, r3
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	685b      	ldr	r3, [r3, #4]
 8016260:	429a      	cmp	r2, r3
 8016262:	d901      	bls.n	8016268 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8016264:	2301      	movs	r3, #1
 8016266:	e046      	b.n	80162f6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8016268:	1cfb      	adds	r3, r7, #3
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	b25b      	sxtb	r3, r3
 801626e:	2b00      	cmp	r3, #0
 8016270:	da0f      	bge.n	8016292 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016272:	1cfb      	adds	r3, r7, #3
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	2207      	movs	r2, #7
 8016278:	4013      	ands	r3, r2
 801627a:	1c5a      	adds	r2, r3, #1
 801627c:	0013      	movs	r3, r2
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	189b      	adds	r3, r3, r2
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	18d3      	adds	r3, r2, r3
 8016288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2201      	movs	r2, #1
 801628e:	705a      	strb	r2, [r3, #1]
 8016290:	e00d      	b.n	80162ae <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8016292:	1cfb      	adds	r3, r7, #3
 8016294:	781a      	ldrb	r2, [r3, #0]
 8016296:	0013      	movs	r3, r2
 8016298:	009b      	lsls	r3, r3, #2
 801629a:	189b      	adds	r3, r3, r2
 801629c:	00db      	lsls	r3, r3, #3
 801629e:	3369      	adds	r3, #105	@ 0x69
 80162a0:	33ff      	adds	r3, #255	@ 0xff
 80162a2:	687a      	ldr	r2, [r7, #4]
 80162a4:	18d3      	adds	r3, r2, r3
 80162a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	2200      	movs	r2, #0
 80162ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	2201      	movs	r2, #1
 80162b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80162b4:	1cfb      	adds	r3, r7, #3
 80162b6:	781b      	ldrb	r3, [r3, #0]
 80162b8:	2207      	movs	r2, #7
 80162ba:	4013      	ands	r3, r2
 80162bc:	b2da      	uxtb	r2, r3
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	23aa      	movs	r3, #170	@ 0xaa
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	5cd3      	ldrb	r3, [r2, r3]
 80162ca:	2b01      	cmp	r3, #1
 80162cc:	d101      	bne.n	80162d2 <HAL_PCD_EP_SetStall+0x8c>
 80162ce:	2302      	movs	r3, #2
 80162d0:	e011      	b.n	80162f6 <HAL_PCD_EP_SetStall+0xb0>
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	23aa      	movs	r3, #170	@ 0xaa
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	2101      	movs	r1, #1
 80162da:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	68fa      	ldr	r2, [r7, #12]
 80162e2:	0011      	movs	r1, r2
 80162e4:	0018      	movs	r0, r3
 80162e6:	f007 f9c7 	bl	801d678 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80162ea:	687a      	ldr	r2, [r7, #4]
 80162ec:	23aa      	movs	r3, #170	@ 0xaa
 80162ee:	009b      	lsls	r3, r3, #2
 80162f0:	2100      	movs	r1, #0
 80162f2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80162f4:	2300      	movs	r3, #0
}
 80162f6:	0018      	movs	r0, r3
 80162f8:	46bd      	mov	sp, r7
 80162fa:	b004      	add	sp, #16
 80162fc:	bd80      	pop	{r7, pc}

080162fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80162fe:	b580      	push	{r7, lr}
 8016300:	b084      	sub	sp, #16
 8016302:	af00      	add	r7, sp, #0
 8016304:	6078      	str	r0, [r7, #4]
 8016306:	000a      	movs	r2, r1
 8016308:	1cfb      	adds	r3, r7, #3
 801630a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801630c:	1cfb      	adds	r3, r7, #3
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	220f      	movs	r2, #15
 8016312:	401a      	ands	r2, r3
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	429a      	cmp	r2, r3
 801631a:	d901      	bls.n	8016320 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 801631c:	2301      	movs	r3, #1
 801631e:	e048      	b.n	80163b2 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8016320:	1cfb      	adds	r3, r7, #3
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	b25b      	sxtb	r3, r3
 8016326:	2b00      	cmp	r3, #0
 8016328:	da0f      	bge.n	801634a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801632a:	1cfb      	adds	r3, r7, #3
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	2207      	movs	r2, #7
 8016330:	4013      	ands	r3, r2
 8016332:	1c5a      	adds	r2, r3, #1
 8016334:	0013      	movs	r3, r2
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	189b      	adds	r3, r3, r2
 801633a:	00db      	lsls	r3, r3, #3
 801633c:	687a      	ldr	r2, [r7, #4]
 801633e:	18d3      	adds	r3, r2, r3
 8016340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	2201      	movs	r2, #1
 8016346:	705a      	strb	r2, [r3, #1]
 8016348:	e00f      	b.n	801636a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801634a:	1cfb      	adds	r3, r7, #3
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	2207      	movs	r2, #7
 8016350:	401a      	ands	r2, r3
 8016352:	0013      	movs	r3, r2
 8016354:	009b      	lsls	r3, r3, #2
 8016356:	189b      	adds	r3, r3, r2
 8016358:	00db      	lsls	r3, r3, #3
 801635a:	3369      	adds	r3, #105	@ 0x69
 801635c:	33ff      	adds	r3, #255	@ 0xff
 801635e:	687a      	ldr	r2, [r7, #4]
 8016360:	18d3      	adds	r3, r2, r3
 8016362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	2200      	movs	r2, #0
 8016368:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2200      	movs	r2, #0
 801636e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016370:	1cfb      	adds	r3, r7, #3
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	2207      	movs	r2, #7
 8016376:	4013      	ands	r3, r2
 8016378:	b2da      	uxtb	r2, r3
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	23aa      	movs	r3, #170	@ 0xaa
 8016382:	009b      	lsls	r3, r3, #2
 8016384:	5cd3      	ldrb	r3, [r2, r3]
 8016386:	2b01      	cmp	r3, #1
 8016388:	d101      	bne.n	801638e <HAL_PCD_EP_ClrStall+0x90>
 801638a:	2302      	movs	r3, #2
 801638c:	e011      	b.n	80163b2 <HAL_PCD_EP_ClrStall+0xb4>
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	23aa      	movs	r3, #170	@ 0xaa
 8016392:	009b      	lsls	r3, r3, #2
 8016394:	2101      	movs	r1, #1
 8016396:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	68fa      	ldr	r2, [r7, #12]
 801639e:	0011      	movs	r1, r2
 80163a0:	0018      	movs	r0, r3
 80163a2:	f007 f9b9 	bl	801d718 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80163a6:	687a      	ldr	r2, [r7, #4]
 80163a8:	23aa      	movs	r3, #170	@ 0xaa
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	2100      	movs	r1, #0
 80163ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80163b0:	2300      	movs	r3, #0
}
 80163b2:	0018      	movs	r0, r3
 80163b4:	46bd      	mov	sp, r7
 80163b6:	b004      	add	sp, #16
 80163b8:	bd80      	pop	{r7, pc}
	...

080163bc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80163bc:	b5b0      	push	{r4, r5, r7, lr}
 80163be:	b096      	sub	sp, #88	@ 0x58
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80163c4:	f000 fbec 	bl	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681a      	ldr	r2, [r3, #0]
 80163cc:	204e      	movs	r0, #78	@ 0x4e
 80163ce:	183b      	adds	r3, r7, r0
 80163d0:	2144      	movs	r1, #68	@ 0x44
 80163d2:	5a52      	ldrh	r2, [r2, r1]
 80163d4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80163d6:	183b      	adds	r3, r7, r0
 80163d8:	881b      	ldrh	r3, [r3, #0]
 80163da:	b2da      	uxtb	r2, r3
 80163dc:	244d      	movs	r4, #77	@ 0x4d
 80163de:	193b      	adds	r3, r7, r4
 80163e0:	210f      	movs	r1, #15
 80163e2:	400a      	ands	r2, r1
 80163e4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80163e6:	193b      	adds	r3, r7, r4
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d000      	beq.n	80163f0 <PCD_EP_ISR_Handler+0x34>
 80163ee:	e18f      	b.n	8016710 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80163f0:	183b      	adds	r3, r7, r0
 80163f2:	881b      	ldrh	r3, [r3, #0]
 80163f4:	2210      	movs	r2, #16
 80163f6:	4013      	ands	r3, r2
 80163f8:	d155      	bne.n	80164a6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	881b      	ldrh	r3, [r3, #0]
 8016400:	b29a      	uxth	r2, r3
 8016402:	200e      	movs	r0, #14
 8016404:	183b      	adds	r3, r7, r0
 8016406:	49bb      	ldr	r1, [pc, #748]	@ (80166f4 <PCD_EP_ISR_Handler+0x338>)
 8016408:	400a      	ands	r2, r1
 801640a:	801a      	strh	r2, [r3, #0]
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	183a      	adds	r2, r7, r0
 8016412:	8812      	ldrh	r2, [r2, #0]
 8016414:	49b8      	ldr	r1, [pc, #736]	@ (80166f8 <PCD_EP_ISR_Handler+0x33c>)
 8016416:	430a      	orrs	r2, r1
 8016418:	b292      	uxth	r2, r2
 801641a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	3328      	adds	r3, #40	@ 0x28
 8016420:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	2250      	movs	r2, #80	@ 0x50
 8016428:	5a9b      	ldrh	r3, [r3, r2]
 801642a:	b29b      	uxth	r3, r3
 801642c:	001a      	movs	r2, r3
 801642e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	00db      	lsls	r3, r3, #3
 8016434:	18d2      	adds	r2, r2, r3
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	18d3      	adds	r3, r2, r3
 801643c:	4aaf      	ldr	r2, [pc, #700]	@ (80166fc <PCD_EP_ISR_Handler+0x340>)
 801643e:	4694      	mov	ip, r2
 8016440:	4463      	add	r3, ip
 8016442:	881b      	ldrh	r3, [r3, #0]
 8016444:	059b      	lsls	r3, r3, #22
 8016446:	0d9a      	lsrs	r2, r3, #22
 8016448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801644a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 801644c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801644e:	695a      	ldr	r2, [r3, #20]
 8016450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016452:	69db      	ldr	r3, [r3, #28]
 8016454:	18d2      	adds	r2, r2, r3
 8016456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016458:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	2100      	movs	r1, #0
 801645e:	0018      	movs	r0, r3
 8016460:	f009 fac8 	bl	801f9f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2224      	movs	r2, #36	@ 0x24
 8016468:	5c9b      	ldrb	r3, [r3, r2]
 801646a:	b2db      	uxtb	r3, r3
 801646c:	2b00      	cmp	r3, #0
 801646e:	d101      	bne.n	8016474 <PCD_EP_ISR_Handler+0xb8>
 8016470:	f000 fb96 	bl	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
 8016474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016476:	699b      	ldr	r3, [r3, #24]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d001      	beq.n	8016480 <PCD_EP_ISR_Handler+0xc4>
 801647c:	f000 fb90 	bl	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2224      	movs	r2, #36	@ 0x24
 8016484:	5c9b      	ldrb	r3, [r3, r2]
 8016486:	b2db      	uxtb	r3, r3
 8016488:	2280      	movs	r2, #128	@ 0x80
 801648a:	4252      	negs	r2, r2
 801648c:	4313      	orrs	r3, r2
 801648e:	b2da      	uxtb	r2, r3
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	0011      	movs	r1, r2
 8016496:	224c      	movs	r2, #76	@ 0x4c
 8016498:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2224      	movs	r2, #36	@ 0x24
 801649e:	2100      	movs	r1, #0
 80164a0:	5499      	strb	r1, [r3, r2]
 80164a2:	f000 fb7d 	bl	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	3369      	adds	r3, #105	@ 0x69
 80164aa:	33ff      	adds	r3, #255	@ 0xff
 80164ac:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681a      	ldr	r2, [r3, #0]
 80164b2:	214a      	movs	r1, #74	@ 0x4a
 80164b4:	187b      	adds	r3, r7, r1
 80164b6:	8812      	ldrh	r2, [r2, #0]
 80164b8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80164ba:	187b      	adds	r3, r7, r1
 80164bc:	881a      	ldrh	r2, [r3, #0]
 80164be:	2380      	movs	r3, #128	@ 0x80
 80164c0:	011b      	lsls	r3, r3, #4
 80164c2:	4013      	ands	r3, r2
 80164c4:	d037      	beq.n	8016536 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	2250      	movs	r2, #80	@ 0x50
 80164cc:	5a9b      	ldrh	r3, [r3, r2]
 80164ce:	b29b      	uxth	r3, r3
 80164d0:	001a      	movs	r2, r3
 80164d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164d4:	781b      	ldrb	r3, [r3, #0]
 80164d6:	00db      	lsls	r3, r3, #3
 80164d8:	18d2      	adds	r2, r2, r3
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	18d3      	adds	r3, r2, r3
 80164e0:	4a87      	ldr	r2, [pc, #540]	@ (8016700 <PCD_EP_ISR_Handler+0x344>)
 80164e2:	4694      	mov	ip, r2
 80164e4:	4463      	add	r3, ip
 80164e6:	881b      	ldrh	r3, [r3, #0]
 80164e8:	059b      	lsls	r3, r3, #22
 80164ea:	0d9a      	lsrs	r2, r3, #22
 80164ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6818      	ldr	r0, [r3, #0]
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	22ac      	movs	r2, #172	@ 0xac
 80164f8:	0092      	lsls	r2, r2, #2
 80164fa:	1899      	adds	r1, r3, r2
 80164fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8016500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016502:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8016504:	b29b      	uxth	r3, r3
 8016506:	f007 fa3a 	bl	801d97e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	881b      	ldrh	r3, [r3, #0]
 8016510:	b29a      	uxth	r2, r3
 8016512:	2010      	movs	r0, #16
 8016514:	183b      	adds	r3, r7, r0
 8016516:	497b      	ldr	r1, [pc, #492]	@ (8016704 <PCD_EP_ISR_Handler+0x348>)
 8016518:	400a      	ands	r2, r1
 801651a:	801a      	strh	r2, [r3, #0]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	183a      	adds	r2, r7, r0
 8016522:	8812      	ldrh	r2, [r2, #0]
 8016524:	2180      	movs	r1, #128	@ 0x80
 8016526:	430a      	orrs	r2, r1
 8016528:	b292      	uxth	r2, r2
 801652a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	0018      	movs	r0, r3
 8016530:	f009 fa2a 	bl	801f988 <HAL_PCD_SetupStageCallback>
 8016534:	e334      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8016536:	234a      	movs	r3, #74	@ 0x4a
 8016538:	18fb      	adds	r3, r7, r3
 801653a:	2200      	movs	r2, #0
 801653c:	5e9b      	ldrsh	r3, [r3, r2]
 801653e:	2b00      	cmp	r3, #0
 8016540:	db00      	blt.n	8016544 <PCD_EP_ISR_Handler+0x188>
 8016542:	e32d      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	881b      	ldrh	r3, [r3, #0]
 801654a:	b29a      	uxth	r2, r3
 801654c:	201e      	movs	r0, #30
 801654e:	183b      	adds	r3, r7, r0
 8016550:	496c      	ldr	r1, [pc, #432]	@ (8016704 <PCD_EP_ISR_Handler+0x348>)
 8016552:	400a      	ands	r2, r1
 8016554:	801a      	strh	r2, [r3, #0]
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	183a      	adds	r2, r7, r0
 801655c:	8812      	ldrh	r2, [r2, #0]
 801655e:	2180      	movs	r1, #128	@ 0x80
 8016560:	430a      	orrs	r2, r1
 8016562:	b292      	uxth	r2, r2
 8016564:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	2250      	movs	r2, #80	@ 0x50
 801656c:	5a9b      	ldrh	r3, [r3, r2]
 801656e:	b29b      	uxth	r3, r3
 8016570:	001a      	movs	r2, r3
 8016572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016574:	781b      	ldrb	r3, [r3, #0]
 8016576:	00db      	lsls	r3, r3, #3
 8016578:	18d2      	adds	r2, r2, r3
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	18d3      	adds	r3, r2, r3
 8016580:	4a5f      	ldr	r2, [pc, #380]	@ (8016700 <PCD_EP_ISR_Handler+0x344>)
 8016582:	4694      	mov	ip, r2
 8016584:	4463      	add	r3, ip
 8016586:	881b      	ldrh	r3, [r3, #0]
 8016588:	059b      	lsls	r3, r3, #22
 801658a:	0d9a      	lsrs	r2, r3, #22
 801658c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801658e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8016590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016592:	69db      	ldr	r3, [r3, #28]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d01a      	beq.n	80165ce <PCD_EP_ISR_Handler+0x212>
 8016598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801659a:	695b      	ldr	r3, [r3, #20]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d016      	beq.n	80165ce <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6818      	ldr	r0, [r3, #0]
 80165a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165a6:	6959      	ldr	r1, [r3, #20]
 80165a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80165ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80165b0:	b29b      	uxth	r3, r3
 80165b2:	f007 f9e4 	bl	801d97e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80165b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165b8:	695a      	ldr	r2, [r3, #20]
 80165ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165bc:	69db      	ldr	r3, [r3, #28]
 80165be:	18d2      	adds	r2, r2, r3
 80165c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2100      	movs	r1, #0
 80165c8:	0018      	movs	r0, r3
 80165ca:	f009 f9f2 	bl	801f9b2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	214a      	movs	r1, #74	@ 0x4a
 80165d4:	187b      	adds	r3, r7, r1
 80165d6:	8812      	ldrh	r2, [r2, #0]
 80165d8:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80165da:	187b      	adds	r3, r7, r1
 80165dc:	881a      	ldrh	r2, [r3, #0]
 80165de:	2380      	movs	r3, #128	@ 0x80
 80165e0:	011b      	lsls	r3, r3, #4
 80165e2:	4013      	ands	r3, r2
 80165e4:	d000      	beq.n	80165e8 <PCD_EP_ISR_Handler+0x22c>
 80165e6:	e2db      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
 80165e8:	187b      	adds	r3, r7, r1
 80165ea:	881a      	ldrh	r2, [r3, #0]
 80165ec:	23c0      	movs	r3, #192	@ 0xc0
 80165ee:	019b      	lsls	r3, r3, #6
 80165f0:	401a      	ands	r2, r3
 80165f2:	23c0      	movs	r3, #192	@ 0xc0
 80165f4:	019b      	lsls	r3, r3, #6
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d100      	bne.n	80165fc <PCD_EP_ISR_Handler+0x240>
 80165fa:	e2d1      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	61bb      	str	r3, [r7, #24]
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	2250      	movs	r2, #80	@ 0x50
 8016608:	5a9b      	ldrh	r3, [r3, r2]
 801660a:	b29b      	uxth	r3, r3
 801660c:	001a      	movs	r2, r3
 801660e:	69bb      	ldr	r3, [r7, #24]
 8016610:	189b      	adds	r3, r3, r2
 8016612:	61bb      	str	r3, [r7, #24]
 8016614:	69bb      	ldr	r3, [r7, #24]
 8016616:	4a3a      	ldr	r2, [pc, #232]	@ (8016700 <PCD_EP_ISR_Handler+0x344>)
 8016618:	4694      	mov	ip, r2
 801661a:	4463      	add	r3, ip
 801661c:	617b      	str	r3, [r7, #20]
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	881b      	ldrh	r3, [r3, #0]
 8016622:	b29b      	uxth	r3, r3
 8016624:	059b      	lsls	r3, r3, #22
 8016626:	0d9b      	lsrs	r3, r3, #22
 8016628:	b29a      	uxth	r2, r3
 801662a:	697b      	ldr	r3, [r7, #20]
 801662c:	801a      	strh	r2, [r3, #0]
 801662e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016630:	691b      	ldr	r3, [r3, #16]
 8016632:	2b3e      	cmp	r3, #62	@ 0x3e
 8016634:	d91a      	bls.n	801666c <PCD_EP_ISR_Handler+0x2b0>
 8016636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016638:	691b      	ldr	r3, [r3, #16]
 801663a:	095b      	lsrs	r3, r3, #5
 801663c:	647b      	str	r3, [r7, #68]	@ 0x44
 801663e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016640:	691b      	ldr	r3, [r3, #16]
 8016642:	221f      	movs	r2, #31
 8016644:	4013      	ands	r3, r2
 8016646:	d102      	bne.n	801664e <PCD_EP_ISR_Handler+0x292>
 8016648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801664a:	3b01      	subs	r3, #1
 801664c:	647b      	str	r3, [r7, #68]	@ 0x44
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	881b      	ldrh	r3, [r3, #0]
 8016652:	b29a      	uxth	r2, r3
 8016654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016656:	b29b      	uxth	r3, r3
 8016658:	029b      	lsls	r3, r3, #10
 801665a:	b29b      	uxth	r3, r3
 801665c:	4313      	orrs	r3, r2
 801665e:	b29b      	uxth	r3, r3
 8016660:	4a25      	ldr	r2, [pc, #148]	@ (80166f8 <PCD_EP_ISR_Handler+0x33c>)
 8016662:	4313      	orrs	r3, r2
 8016664:	b29a      	uxth	r2, r3
 8016666:	697b      	ldr	r3, [r7, #20]
 8016668:	801a      	strh	r2, [r3, #0]
 801666a:	e023      	b.n	80166b4 <PCD_EP_ISR_Handler+0x2f8>
 801666c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801666e:	691b      	ldr	r3, [r3, #16]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d108      	bne.n	8016686 <PCD_EP_ISR_Handler+0x2ca>
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	881b      	ldrh	r3, [r3, #0]
 8016678:	b29b      	uxth	r3, r3
 801667a:	4a1f      	ldr	r2, [pc, #124]	@ (80166f8 <PCD_EP_ISR_Handler+0x33c>)
 801667c:	4313      	orrs	r3, r2
 801667e:	b29a      	uxth	r2, r3
 8016680:	697b      	ldr	r3, [r7, #20]
 8016682:	801a      	strh	r2, [r3, #0]
 8016684:	e016      	b.n	80166b4 <PCD_EP_ISR_Handler+0x2f8>
 8016686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016688:	691b      	ldr	r3, [r3, #16]
 801668a:	085b      	lsrs	r3, r3, #1
 801668c:	647b      	str	r3, [r7, #68]	@ 0x44
 801668e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016690:	691b      	ldr	r3, [r3, #16]
 8016692:	2201      	movs	r2, #1
 8016694:	4013      	ands	r3, r2
 8016696:	d002      	beq.n	801669e <PCD_EP_ISR_Handler+0x2e2>
 8016698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801669a:	3301      	adds	r3, #1
 801669c:	647b      	str	r3, [r7, #68]	@ 0x44
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	881b      	ldrh	r3, [r3, #0]
 80166a2:	b29a      	uxth	r2, r3
 80166a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	029b      	lsls	r3, r3, #10
 80166aa:	b29b      	uxth	r3, r3
 80166ac:	4313      	orrs	r3, r2
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	881b      	ldrh	r3, [r3, #0]
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	2012      	movs	r0, #18
 80166be:	183b      	adds	r3, r7, r0
 80166c0:	4911      	ldr	r1, [pc, #68]	@ (8016708 <PCD_EP_ISR_Handler+0x34c>)
 80166c2:	400a      	ands	r2, r1
 80166c4:	801a      	strh	r2, [r3, #0]
 80166c6:	183b      	adds	r3, r7, r0
 80166c8:	183a      	adds	r2, r7, r0
 80166ca:	8812      	ldrh	r2, [r2, #0]
 80166cc:	2180      	movs	r1, #128	@ 0x80
 80166ce:	0149      	lsls	r1, r1, #5
 80166d0:	404a      	eors	r2, r1
 80166d2:	801a      	strh	r2, [r3, #0]
 80166d4:	183b      	adds	r3, r7, r0
 80166d6:	183a      	adds	r2, r7, r0
 80166d8:	8812      	ldrh	r2, [r2, #0]
 80166da:	2180      	movs	r1, #128	@ 0x80
 80166dc:	0189      	lsls	r1, r1, #6
 80166de:	404a      	eors	r2, r1
 80166e0:	801a      	strh	r2, [r3, #0]
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	183a      	adds	r2, r7, r0
 80166e8:	8812      	ldrh	r2, [r2, #0]
 80166ea:	4908      	ldr	r1, [pc, #32]	@ (801670c <PCD_EP_ISR_Handler+0x350>)
 80166ec:	430a      	orrs	r2, r1
 80166ee:	b292      	uxth	r2, r2
 80166f0:	801a      	strh	r2, [r3, #0]
 80166f2:	e255      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
 80166f4:	ffff8f0f 	.word	0xffff8f0f
 80166f8:	ffff8000 	.word	0xffff8000
 80166fc:	00000402 	.word	0x00000402
 8016700:	00000406 	.word	0x00000406
 8016704:	00000f8f 	.word	0x00000f8f
 8016708:	ffffbf8f 	.word	0xffffbf8f
 801670c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	001a      	movs	r2, r3
 8016716:	204d      	movs	r0, #77	@ 0x4d
 8016718:	183b      	adds	r3, r7, r0
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	009b      	lsls	r3, r3, #2
 801671e:	18d2      	adds	r2, r2, r3
 8016720:	214a      	movs	r1, #74	@ 0x4a
 8016722:	187b      	adds	r3, r7, r1
 8016724:	8812      	ldrh	r2, [r2, #0]
 8016726:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8016728:	187b      	adds	r3, r7, r1
 801672a:	2200      	movs	r2, #0
 801672c:	5e9b      	ldrsh	r3, [r3, r2]
 801672e:	2b00      	cmp	r3, #0
 8016730:	db00      	blt.n	8016734 <PCD_EP_ISR_Handler+0x378>
 8016732:	e0fa      	b.n	801692a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	001a      	movs	r2, r3
 801673a:	183b      	adds	r3, r7, r0
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	009b      	lsls	r3, r3, #2
 8016740:	18d3      	adds	r3, r2, r3
 8016742:	881b      	ldrh	r3, [r3, #0]
 8016744:	b29a      	uxth	r2, r3
 8016746:	2448      	movs	r4, #72	@ 0x48
 8016748:	193b      	adds	r3, r7, r4
 801674a:	49d1      	ldr	r1, [pc, #836]	@ (8016a90 <PCD_EP_ISR_Handler+0x6d4>)
 801674c:	400a      	ands	r2, r1
 801674e:	801a      	strh	r2, [r3, #0]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	001a      	movs	r2, r3
 8016756:	183b      	adds	r3, r7, r0
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	009b      	lsls	r3, r3, #2
 801675c:	18d3      	adds	r3, r2, r3
 801675e:	193a      	adds	r2, r7, r4
 8016760:	8812      	ldrh	r2, [r2, #0]
 8016762:	2180      	movs	r1, #128	@ 0x80
 8016764:	430a      	orrs	r2, r1
 8016766:	b292      	uxth	r2, r2
 8016768:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801676a:	183b      	adds	r3, r7, r0
 801676c:	781a      	ldrb	r2, [r3, #0]
 801676e:	0013      	movs	r3, r2
 8016770:	009b      	lsls	r3, r3, #2
 8016772:	189b      	adds	r3, r3, r2
 8016774:	00db      	lsls	r3, r3, #3
 8016776:	3369      	adds	r3, #105	@ 0x69
 8016778:	33ff      	adds	r3, #255	@ 0xff
 801677a:	687a      	ldr	r2, [r7, #4]
 801677c:	18d3      	adds	r3, r2, r3
 801677e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8016780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016782:	7b1b      	ldrb	r3, [r3, #12]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d125      	bne.n	80167d4 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	2250      	movs	r2, #80	@ 0x50
 801678e:	5a9b      	ldrh	r3, [r3, r2]
 8016790:	b29b      	uxth	r3, r3
 8016792:	001a      	movs	r2, r3
 8016794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016796:	781b      	ldrb	r3, [r3, #0]
 8016798:	00db      	lsls	r3, r3, #3
 801679a:	18d2      	adds	r2, r2, r3
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	18d3      	adds	r3, r2, r3
 80167a2:	4abc      	ldr	r2, [pc, #752]	@ (8016a94 <PCD_EP_ISR_Handler+0x6d8>)
 80167a4:	4694      	mov	ip, r2
 80167a6:	4463      	add	r3, ip
 80167a8:	881a      	ldrh	r2, [r3, #0]
 80167aa:	2450      	movs	r4, #80	@ 0x50
 80167ac:	193b      	adds	r3, r7, r4
 80167ae:	0592      	lsls	r2, r2, #22
 80167b0:	0d92      	lsrs	r2, r2, #22
 80167b2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80167b4:	193b      	adds	r3, r7, r4
 80167b6:	881b      	ldrh	r3, [r3, #0]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d100      	bne.n	80167be <PCD_EP_ISR_Handler+0x402>
 80167bc:	e08d      	b.n	80168da <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	6818      	ldr	r0, [r3, #0]
 80167c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167c4:	6959      	ldr	r1, [r3, #20]
 80167c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167c8:	88da      	ldrh	r2, [r3, #6]
 80167ca:	193b      	adds	r3, r7, r4
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	f007 f8d6 	bl	801d97e <USB_ReadPMA>
 80167d2:	e082      	b.n	80168da <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80167d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167d6:	78db      	ldrb	r3, [r3, #3]
 80167d8:	2b02      	cmp	r3, #2
 80167da:	d10c      	bne.n	80167f6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80167dc:	2350      	movs	r3, #80	@ 0x50
 80167de:	18fc      	adds	r4, r7, r3
 80167e0:	234a      	movs	r3, #74	@ 0x4a
 80167e2:	18fb      	adds	r3, r7, r3
 80167e4:	881a      	ldrh	r2, [r3, #0]
 80167e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	0018      	movs	r0, r3
 80167ec:	f000 f9ec 	bl	8016bc8 <HAL_PCD_EP_DB_Receive>
 80167f0:	0003      	movs	r3, r0
 80167f2:	8023      	strh	r3, [r4, #0]
 80167f4:	e071      	b.n	80168da <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	001a      	movs	r2, r3
 80167fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	009b      	lsls	r3, r3, #2
 8016802:	18d3      	adds	r3, r2, r3
 8016804:	881b      	ldrh	r3, [r3, #0]
 8016806:	b29a      	uxth	r2, r3
 8016808:	2052      	movs	r0, #82	@ 0x52
 801680a:	183b      	adds	r3, r7, r0
 801680c:	49a2      	ldr	r1, [pc, #648]	@ (8016a98 <PCD_EP_ISR_Handler+0x6dc>)
 801680e:	400a      	ands	r2, r1
 8016810:	801a      	strh	r2, [r3, #0]
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	001a      	movs	r2, r3
 8016818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	009b      	lsls	r3, r3, #2
 801681e:	18d3      	adds	r3, r2, r3
 8016820:	183a      	adds	r2, r7, r0
 8016822:	8812      	ldrh	r2, [r2, #0]
 8016824:	499d      	ldr	r1, [pc, #628]	@ (8016a9c <PCD_EP_ISR_Handler+0x6e0>)
 8016826:	430a      	orrs	r2, r1
 8016828:	b292      	uxth	r2, r2
 801682a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	001a      	movs	r2, r3
 8016832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	009b      	lsls	r3, r3, #2
 8016838:	18d3      	adds	r3, r2, r3
 801683a:	881b      	ldrh	r3, [r3, #0]
 801683c:	b29b      	uxth	r3, r3
 801683e:	001a      	movs	r2, r3
 8016840:	2380      	movs	r3, #128	@ 0x80
 8016842:	01db      	lsls	r3, r3, #7
 8016844:	4013      	ands	r3, r2
 8016846:	d024      	beq.n	8016892 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	2250      	movs	r2, #80	@ 0x50
 801684e:	5a9b      	ldrh	r3, [r3, r2]
 8016850:	b29b      	uxth	r3, r3
 8016852:	001a      	movs	r2, r3
 8016854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	00db      	lsls	r3, r3, #3
 801685a:	18d2      	adds	r2, r2, r3
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	18d3      	adds	r3, r2, r3
 8016862:	4a8f      	ldr	r2, [pc, #572]	@ (8016aa0 <PCD_EP_ISR_Handler+0x6e4>)
 8016864:	4694      	mov	ip, r2
 8016866:	4463      	add	r3, ip
 8016868:	881a      	ldrh	r2, [r3, #0]
 801686a:	2450      	movs	r4, #80	@ 0x50
 801686c:	193b      	adds	r3, r7, r4
 801686e:	0592      	lsls	r2, r2, #22
 8016870:	0d92      	lsrs	r2, r2, #22
 8016872:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8016874:	193b      	adds	r3, r7, r4
 8016876:	881b      	ldrh	r3, [r3, #0]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d02e      	beq.n	80168da <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6818      	ldr	r0, [r3, #0]
 8016880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016882:	6959      	ldr	r1, [r3, #20]
 8016884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016886:	891a      	ldrh	r2, [r3, #8]
 8016888:	193b      	adds	r3, r7, r4
 801688a:	881b      	ldrh	r3, [r3, #0]
 801688c:	f007 f877 	bl	801d97e <USB_ReadPMA>
 8016890:	e023      	b.n	80168da <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	2250      	movs	r2, #80	@ 0x50
 8016898:	5a9b      	ldrh	r3, [r3, r2]
 801689a:	b29b      	uxth	r3, r3
 801689c:	001a      	movs	r2, r3
 801689e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	18d2      	adds	r2, r2, r3
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	18d3      	adds	r3, r2, r3
 80168ac:	4a79      	ldr	r2, [pc, #484]	@ (8016a94 <PCD_EP_ISR_Handler+0x6d8>)
 80168ae:	4694      	mov	ip, r2
 80168b0:	4463      	add	r3, ip
 80168b2:	881a      	ldrh	r2, [r3, #0]
 80168b4:	2450      	movs	r4, #80	@ 0x50
 80168b6:	193b      	adds	r3, r7, r4
 80168b8:	0592      	lsls	r2, r2, #22
 80168ba:	0d92      	lsrs	r2, r2, #22
 80168bc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80168be:	193b      	adds	r3, r7, r4
 80168c0:	881b      	ldrh	r3, [r3, #0]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d009      	beq.n	80168da <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	6818      	ldr	r0, [r3, #0]
 80168ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168cc:	6959      	ldr	r1, [r3, #20]
 80168ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168d0:	895a      	ldrh	r2, [r3, #10]
 80168d2:	193b      	adds	r3, r7, r4
 80168d4:	881b      	ldrh	r3, [r3, #0]
 80168d6:	f007 f852 	bl	801d97e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80168da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168dc:	69da      	ldr	r2, [r3, #28]
 80168de:	2150      	movs	r1, #80	@ 0x50
 80168e0:	187b      	adds	r3, r7, r1
 80168e2:	881b      	ldrh	r3, [r3, #0]
 80168e4:	18d2      	adds	r2, r2, r3
 80168e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80168ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168ec:	695a      	ldr	r2, [r3, #20]
 80168ee:	187b      	adds	r3, r7, r1
 80168f0:	881b      	ldrh	r3, [r3, #0]
 80168f2:	18d2      	adds	r2, r2, r3
 80168f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168f6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80168f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168fa:	699b      	ldr	r3, [r3, #24]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d005      	beq.n	801690c <PCD_EP_ISR_Handler+0x550>
 8016900:	187b      	adds	r3, r7, r1
 8016902:	881a      	ldrh	r2, [r3, #0]
 8016904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016906:	691b      	ldr	r3, [r3, #16]
 8016908:	429a      	cmp	r2, r3
 801690a:	d207      	bcs.n	801691c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801690c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801690e:	781a      	ldrb	r2, [r3, #0]
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	0011      	movs	r1, r2
 8016914:	0018      	movs	r0, r3
 8016916:	f009 f84c 	bl	801f9b2 <HAL_PCD_DataOutStageCallback>
 801691a:	e006      	b.n	801692a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016922:	0011      	movs	r1, r2
 8016924:	0018      	movs	r0, r3
 8016926:	f005 fd6f 	bl	801c408 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801692a:	244a      	movs	r4, #74	@ 0x4a
 801692c:	193b      	adds	r3, r7, r4
 801692e:	881b      	ldrh	r3, [r3, #0]
 8016930:	2280      	movs	r2, #128	@ 0x80
 8016932:	4013      	ands	r3, r2
 8016934:	d100      	bne.n	8016938 <PCD_EP_ISR_Handler+0x57c>
 8016936:	e133      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8016938:	204d      	movs	r0, #77	@ 0x4d
 801693a:	183b      	adds	r3, r7, r0
 801693c:	781b      	ldrb	r3, [r3, #0]
 801693e:	1c5a      	adds	r2, r3, #1
 8016940:	0013      	movs	r3, r2
 8016942:	009b      	lsls	r3, r3, #2
 8016944:	189b      	adds	r3, r3, r2
 8016946:	00db      	lsls	r3, r3, #3
 8016948:	687a      	ldr	r2, [r7, #4]
 801694a:	18d3      	adds	r3, r2, r3
 801694c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	001a      	movs	r2, r3
 8016954:	183b      	adds	r3, r7, r0
 8016956:	781b      	ldrb	r3, [r3, #0]
 8016958:	009b      	lsls	r3, r3, #2
 801695a:	18d3      	adds	r3, r2, r3
 801695c:	881b      	ldrh	r3, [r3, #0]
 801695e:	b29a      	uxth	r2, r3
 8016960:	2542      	movs	r5, #66	@ 0x42
 8016962:	197b      	adds	r3, r7, r5
 8016964:	494f      	ldr	r1, [pc, #316]	@ (8016aa4 <PCD_EP_ISR_Handler+0x6e8>)
 8016966:	400a      	ands	r2, r1
 8016968:	801a      	strh	r2, [r3, #0]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	001a      	movs	r2, r3
 8016970:	183b      	adds	r3, r7, r0
 8016972:	781b      	ldrb	r3, [r3, #0]
 8016974:	009b      	lsls	r3, r3, #2
 8016976:	18d3      	adds	r3, r2, r3
 8016978:	197a      	adds	r2, r7, r5
 801697a:	8812      	ldrh	r2, [r2, #0]
 801697c:	494a      	ldr	r1, [pc, #296]	@ (8016aa8 <PCD_EP_ISR_Handler+0x6ec>)
 801697e:	430a      	orrs	r2, r1
 8016980:	b292      	uxth	r2, r2
 8016982:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8016984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016986:	78db      	ldrb	r3, [r3, #3]
 8016988:	2b01      	cmp	r3, #1
 801698a:	d000      	beq.n	801698e <PCD_EP_ISR_Handler+0x5d2>
 801698c:	e0af      	b.n	8016aee <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801698e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016990:	2200      	movs	r2, #0
 8016992:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8016994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016996:	7b1b      	ldrb	r3, [r3, #12]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d100      	bne.n	801699e <PCD_EP_ISR_Handler+0x5e2>
 801699c:	e09f      	b.n	8016ade <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801699e:	193b      	adds	r3, r7, r4
 80169a0:	881b      	ldrh	r3, [r3, #0]
 80169a2:	2240      	movs	r2, #64	@ 0x40
 80169a4:	4013      	ands	r3, r2
 80169a6:	d046      	beq.n	8016a36 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80169a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169aa:	785b      	ldrb	r3, [r3, #1]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d125      	bne.n	80169fc <PCD_EP_ISR_Handler+0x640>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	2250      	movs	r2, #80	@ 0x50
 80169bc:	5a9b      	ldrh	r3, [r3, r2]
 80169be:	b29b      	uxth	r3, r3
 80169c0:	001a      	movs	r2, r3
 80169c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169c4:	189b      	adds	r3, r3, r2
 80169c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80169c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169ca:	781b      	ldrb	r3, [r3, #0]
 80169cc:	00da      	lsls	r2, r3, #3
 80169ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169d0:	18d3      	adds	r3, r2, r3
 80169d2:	4a33      	ldr	r2, [pc, #204]	@ (8016aa0 <PCD_EP_ISR_Handler+0x6e4>)
 80169d4:	4694      	mov	ip, r2
 80169d6:	4463      	add	r3, ip
 80169d8:	623b      	str	r3, [r7, #32]
 80169da:	6a3b      	ldr	r3, [r7, #32]
 80169dc:	881b      	ldrh	r3, [r3, #0]
 80169de:	b29b      	uxth	r3, r3
 80169e0:	059b      	lsls	r3, r3, #22
 80169e2:	0d9b      	lsrs	r3, r3, #22
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	6a3b      	ldr	r3, [r7, #32]
 80169e8:	801a      	strh	r2, [r3, #0]
 80169ea:	6a3b      	ldr	r3, [r7, #32]
 80169ec:	881b      	ldrh	r3, [r3, #0]
 80169ee:	b29b      	uxth	r3, r3
 80169f0:	4a2d      	ldr	r2, [pc, #180]	@ (8016aa8 <PCD_EP_ISR_Handler+0x6ec>)
 80169f2:	4313      	orrs	r3, r2
 80169f4:	b29a      	uxth	r2, r3
 80169f6:	6a3b      	ldr	r3, [r7, #32]
 80169f8:	801a      	strh	r2, [r3, #0]
 80169fa:	e070      	b.n	8016ade <PCD_EP_ISR_Handler+0x722>
 80169fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169fe:	785b      	ldrb	r3, [r3, #1]
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d16c      	bne.n	8016ade <PCD_EP_ISR_Handler+0x722>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2250      	movs	r2, #80	@ 0x50
 8016a10:	5a9b      	ldrh	r3, [r3, r2]
 8016a12:	b29b      	uxth	r3, r3
 8016a14:	001a      	movs	r2, r3
 8016a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a18:	189b      	adds	r3, r3, r2
 8016a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a1e:	781b      	ldrb	r3, [r3, #0]
 8016a20:	00da      	lsls	r2, r3, #3
 8016a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a24:	18d3      	adds	r3, r2, r3
 8016a26:	4a1e      	ldr	r2, [pc, #120]	@ (8016aa0 <PCD_EP_ISR_Handler+0x6e4>)
 8016a28:	4694      	mov	ip, r2
 8016a2a:	4463      	add	r3, ip
 8016a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a30:	2200      	movs	r2, #0
 8016a32:	801a      	strh	r2, [r3, #0]
 8016a34:	e053      	b.n	8016ade <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a3e:	785b      	ldrb	r3, [r3, #1]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d133      	bne.n	8016aac <PCD_EP_ISR_Handler+0x6f0>
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	2250      	movs	r2, #80	@ 0x50
 8016a50:	5a9b      	ldrh	r3, [r3, r2]
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	001a      	movs	r2, r3
 8016a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a58:	189b      	adds	r3, r3, r2
 8016a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	00da      	lsls	r2, r3, #3
 8016a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a64:	18d3      	adds	r3, r2, r3
 8016a66:	4a0b      	ldr	r2, [pc, #44]	@ (8016a94 <PCD_EP_ISR_Handler+0x6d8>)
 8016a68:	4694      	mov	ip, r2
 8016a6a:	4463      	add	r3, ip
 8016a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8016a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a70:	881b      	ldrh	r3, [r3, #0]
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	059b      	lsls	r3, r3, #22
 8016a76:	0d9b      	lsrs	r3, r3, #22
 8016a78:	b29a      	uxth	r2, r3
 8016a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a7c:	801a      	strh	r2, [r3, #0]
 8016a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a80:	881b      	ldrh	r3, [r3, #0]
 8016a82:	b29b      	uxth	r3, r3
 8016a84:	4a08      	ldr	r2, [pc, #32]	@ (8016aa8 <PCD_EP_ISR_Handler+0x6ec>)
 8016a86:	4313      	orrs	r3, r2
 8016a88:	b29a      	uxth	r2, r3
 8016a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a8c:	801a      	strh	r2, [r3, #0]
 8016a8e:	e026      	b.n	8016ade <PCD_EP_ISR_Handler+0x722>
 8016a90:	00000f8f 	.word	0x00000f8f
 8016a94:	00000406 	.word	0x00000406
 8016a98:	ffff8f8f 	.word	0xffff8f8f
 8016a9c:	ffff80c0 	.word	0xffff80c0
 8016aa0:	00000402 	.word	0x00000402
 8016aa4:	ffff8f0f 	.word	0xffff8f0f
 8016aa8:	ffff8000 	.word	0xffff8000
 8016aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016aae:	785b      	ldrb	r3, [r3, #1]
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d114      	bne.n	8016ade <PCD_EP_ISR_Handler+0x722>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2250      	movs	r2, #80	@ 0x50
 8016aba:	5a9b      	ldrh	r3, [r3, r2]
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	001a      	movs	r2, r3
 8016ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ac2:	189b      	adds	r3, r3, r2
 8016ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ac8:	781b      	ldrb	r3, [r3, #0]
 8016aca:	00da      	lsls	r2, r3, #3
 8016acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ace:	18d3      	adds	r3, r2, r3
 8016ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8016bc0 <PCD_EP_ISR_Handler+0x804>)
 8016ad2:	4694      	mov	ip, r2
 8016ad4:	4463      	add	r3, ip
 8016ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ada:	2200      	movs	r2, #0
 8016adc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8016ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ae0:	781a      	ldrb	r2, [r3, #0]
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	0011      	movs	r1, r2
 8016ae6:	0018      	movs	r0, r3
 8016ae8:	f008 ff84 	bl	801f9f4 <HAL_PCD_DataInStageCallback>
 8016aec:	e058      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8016aee:	234a      	movs	r3, #74	@ 0x4a
 8016af0:	18fb      	adds	r3, r7, r3
 8016af2:	881a      	ldrh	r2, [r3, #0]
 8016af4:	2380      	movs	r3, #128	@ 0x80
 8016af6:	005b      	lsls	r3, r3, #1
 8016af8:	4013      	ands	r3, r2
 8016afa:	d149      	bne.n	8016b90 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	2250      	movs	r2, #80	@ 0x50
 8016b02:	5a9b      	ldrh	r3, [r3, r2]
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	001a      	movs	r2, r3
 8016b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	18d2      	adds	r2, r2, r3
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	18d3      	adds	r3, r2, r3
 8016b16:	4a2b      	ldr	r2, [pc, #172]	@ (8016bc4 <PCD_EP_ISR_Handler+0x808>)
 8016b18:	4694      	mov	ip, r2
 8016b1a:	4463      	add	r3, ip
 8016b1c:	881a      	ldrh	r2, [r3, #0]
 8016b1e:	2140      	movs	r1, #64	@ 0x40
 8016b20:	187b      	adds	r3, r7, r1
 8016b22:	0592      	lsls	r2, r2, #22
 8016b24:	0d92      	lsrs	r2, r2, #22
 8016b26:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8016b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b2a:	699a      	ldr	r2, [r3, #24]
 8016b2c:	187b      	adds	r3, r7, r1
 8016b2e:	881b      	ldrh	r3, [r3, #0]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d907      	bls.n	8016b44 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8016b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b36:	699a      	ldr	r2, [r3, #24]
 8016b38:	187b      	adds	r3, r7, r1
 8016b3a:	881b      	ldrh	r3, [r3, #0]
 8016b3c:	1ad2      	subs	r2, r2, r3
 8016b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b40:	619a      	str	r2, [r3, #24]
 8016b42:	e002      	b.n	8016b4a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8016b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b46:	2200      	movs	r2, #0
 8016b48:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8016b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b4c:	699b      	ldr	r3, [r3, #24]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d107      	bne.n	8016b62 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8016b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b54:	781a      	ldrb	r2, [r3, #0]
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	0011      	movs	r1, r2
 8016b5a:	0018      	movs	r0, r3
 8016b5c:	f008 ff4a 	bl	801f9f4 <HAL_PCD_DataInStageCallback>
 8016b60:	e01e      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8016b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b64:	695a      	ldr	r2, [r3, #20]
 8016b66:	2140      	movs	r1, #64	@ 0x40
 8016b68:	187b      	adds	r3, r7, r1
 8016b6a:	881b      	ldrh	r3, [r3, #0]
 8016b6c:	18d2      	adds	r2, r2, r3
 8016b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b70:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8016b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b74:	69da      	ldr	r2, [r3, #28]
 8016b76:	187b      	adds	r3, r7, r1
 8016b78:	881b      	ldrh	r3, [r3, #0]
 8016b7a:	18d2      	adds	r2, r2, r3
 8016b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b7e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016b86:	0011      	movs	r1, r2
 8016b88:	0018      	movs	r0, r3
 8016b8a:	f005 fc3d 	bl	801c408 <USB_EPStartXfer>
 8016b8e:	e007      	b.n	8016ba0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8016b90:	234a      	movs	r3, #74	@ 0x4a
 8016b92:	18fb      	adds	r3, r7, r3
 8016b94:	881a      	ldrh	r2, [r3, #0]
 8016b96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	0018      	movs	r0, r3
 8016b9c:	f000 f930 	bl	8016e00 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	2244      	movs	r2, #68	@ 0x44
 8016ba6:	5a9b      	ldrh	r3, [r3, r2]
 8016ba8:	b29b      	uxth	r3, r3
 8016baa:	b21b      	sxth	r3, r3
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	da01      	bge.n	8016bb4 <PCD_EP_ISR_Handler+0x7f8>
 8016bb0:	f7ff fc0a 	bl	80163c8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8016bb4:	2300      	movs	r3, #0
}
 8016bb6:	0018      	movs	r0, r3
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	b016      	add	sp, #88	@ 0x58
 8016bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8016bbe:	46c0      	nop			@ (mov r8, r8)
 8016bc0:	00000406 	.word	0x00000406
 8016bc4:	00000402 	.word	0x00000402

08016bc8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8016bc8:	b590      	push	{r4, r7, lr}
 8016bca:	b089      	sub	sp, #36	@ 0x24
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	1dbb      	adds	r3, r7, #6
 8016bd4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016bd6:	1dbb      	adds	r3, r7, #6
 8016bd8:	881a      	ldrh	r2, [r3, #0]
 8016bda:	2380      	movs	r3, #128	@ 0x80
 8016bdc:	01db      	lsls	r3, r3, #7
 8016bde:	4013      	ands	r3, r2
 8016be0:	d100      	bne.n	8016be4 <HAL_PCD_EP_DB_Receive+0x1c>
 8016be2:	e07d      	b.n	8016ce0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	2250      	movs	r2, #80	@ 0x50
 8016bea:	5a9b      	ldrh	r3, [r3, r2]
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	001a      	movs	r2, r3
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	781b      	ldrb	r3, [r3, #0]
 8016bf4:	00db      	lsls	r3, r3, #3
 8016bf6:	18d2      	adds	r2, r2, r3
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	18d3      	adds	r3, r2, r3
 8016bfe:	4a7a      	ldr	r2, [pc, #488]	@ (8016de8 <HAL_PCD_EP_DB_Receive+0x220>)
 8016c00:	4694      	mov	ip, r2
 8016c02:	4463      	add	r3, ip
 8016c04:	881a      	ldrh	r2, [r3, #0]
 8016c06:	211a      	movs	r1, #26
 8016c08:	187b      	adds	r3, r7, r1
 8016c0a:	0592      	lsls	r2, r2, #22
 8016c0c:	0d92      	lsrs	r2, r2, #22
 8016c0e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	699a      	ldr	r2, [r3, #24]
 8016c14:	187b      	adds	r3, r7, r1
 8016c16:	881b      	ldrh	r3, [r3, #0]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d307      	bcc.n	8016c2c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8016c1c:	68bb      	ldr	r3, [r7, #8]
 8016c1e:	699a      	ldr	r2, [r3, #24]
 8016c20:	187b      	adds	r3, r7, r1
 8016c22:	881b      	ldrh	r3, [r3, #0]
 8016c24:	1ad2      	subs	r2, r2, r3
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	619a      	str	r2, [r3, #24]
 8016c2a:	e002      	b.n	8016c32 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	2200      	movs	r2, #0
 8016c30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	699b      	ldr	r3, [r3, #24]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d121      	bne.n	8016c7e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	001a      	movs	r2, r3
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	781b      	ldrb	r3, [r3, #0]
 8016c44:	009b      	lsls	r3, r3, #2
 8016c46:	18d3      	adds	r3, r2, r3
 8016c48:	881b      	ldrh	r3, [r3, #0]
 8016c4a:	b29a      	uxth	r2, r3
 8016c4c:	2018      	movs	r0, #24
 8016c4e:	183b      	adds	r3, r7, r0
 8016c50:	4966      	ldr	r1, [pc, #408]	@ (8016dec <HAL_PCD_EP_DB_Receive+0x224>)
 8016c52:	400a      	ands	r2, r1
 8016c54:	801a      	strh	r2, [r3, #0]
 8016c56:	183b      	adds	r3, r7, r0
 8016c58:	183a      	adds	r2, r7, r0
 8016c5a:	8812      	ldrh	r2, [r2, #0]
 8016c5c:	2180      	movs	r1, #128	@ 0x80
 8016c5e:	0189      	lsls	r1, r1, #6
 8016c60:	404a      	eors	r2, r1
 8016c62:	801a      	strh	r2, [r3, #0]
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	001a      	movs	r2, r3
 8016c6a:	68bb      	ldr	r3, [r7, #8]
 8016c6c:	781b      	ldrb	r3, [r3, #0]
 8016c6e:	009b      	lsls	r3, r3, #2
 8016c70:	18d3      	adds	r3, r2, r3
 8016c72:	183a      	adds	r2, r7, r0
 8016c74:	8812      	ldrh	r2, [r2, #0]
 8016c76:	495e      	ldr	r1, [pc, #376]	@ (8016df0 <HAL_PCD_EP_DB_Receive+0x228>)
 8016c78:	430a      	orrs	r2, r1
 8016c7a:	b292      	uxth	r2, r2
 8016c7c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8016c7e:	1dbb      	adds	r3, r7, #6
 8016c80:	881b      	ldrh	r3, [r3, #0]
 8016c82:	2240      	movs	r2, #64	@ 0x40
 8016c84:	4013      	ands	r3, r2
 8016c86:	d01a      	beq.n	8016cbe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	001a      	movs	r2, r3
 8016c8e:	68bb      	ldr	r3, [r7, #8]
 8016c90:	781b      	ldrb	r3, [r3, #0]
 8016c92:	009b      	lsls	r3, r3, #2
 8016c94:	18d3      	adds	r3, r2, r3
 8016c96:	881b      	ldrh	r3, [r3, #0]
 8016c98:	b29a      	uxth	r2, r3
 8016c9a:	2016      	movs	r0, #22
 8016c9c:	183b      	adds	r3, r7, r0
 8016c9e:	4955      	ldr	r1, [pc, #340]	@ (8016df4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8016ca0:	400a      	ands	r2, r1
 8016ca2:	801a      	strh	r2, [r3, #0]
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	001a      	movs	r2, r3
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	781b      	ldrb	r3, [r3, #0]
 8016cae:	009b      	lsls	r3, r3, #2
 8016cb0:	18d3      	adds	r3, r2, r3
 8016cb2:	183a      	adds	r2, r7, r0
 8016cb4:	8812      	ldrh	r2, [r2, #0]
 8016cb6:	4950      	ldr	r1, [pc, #320]	@ (8016df8 <HAL_PCD_EP_DB_Receive+0x230>)
 8016cb8:	430a      	orrs	r2, r1
 8016cba:	b292      	uxth	r2, r2
 8016cbc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8016cbe:	241a      	movs	r4, #26
 8016cc0:	193b      	adds	r3, r7, r4
 8016cc2:	881b      	ldrh	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d100      	bne.n	8016cca <HAL_PCD_EP_DB_Receive+0x102>
 8016cc8:	e086      	b.n	8016dd8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	6818      	ldr	r0, [r3, #0]
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	6959      	ldr	r1, [r3, #20]
 8016cd2:	68bb      	ldr	r3, [r7, #8]
 8016cd4:	891a      	ldrh	r2, [r3, #8]
 8016cd6:	193b      	adds	r3, r7, r4
 8016cd8:	881b      	ldrh	r3, [r3, #0]
 8016cda:	f006 fe50 	bl	801d97e <USB_ReadPMA>
 8016cde:	e07b      	b.n	8016dd8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	2250      	movs	r2, #80	@ 0x50
 8016ce6:	5a9b      	ldrh	r3, [r3, r2]
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	001a      	movs	r2, r3
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	00db      	lsls	r3, r3, #3
 8016cf2:	18d2      	adds	r2, r2, r3
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	18d3      	adds	r3, r2, r3
 8016cfa:	4a40      	ldr	r2, [pc, #256]	@ (8016dfc <HAL_PCD_EP_DB_Receive+0x234>)
 8016cfc:	4694      	mov	ip, r2
 8016cfe:	4463      	add	r3, ip
 8016d00:	881a      	ldrh	r2, [r3, #0]
 8016d02:	211a      	movs	r1, #26
 8016d04:	187b      	adds	r3, r7, r1
 8016d06:	0592      	lsls	r2, r2, #22
 8016d08:	0d92      	lsrs	r2, r2, #22
 8016d0a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	699a      	ldr	r2, [r3, #24]
 8016d10:	187b      	adds	r3, r7, r1
 8016d12:	881b      	ldrh	r3, [r3, #0]
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d307      	bcc.n	8016d28 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	699a      	ldr	r2, [r3, #24]
 8016d1c:	187b      	adds	r3, r7, r1
 8016d1e:	881b      	ldrh	r3, [r3, #0]
 8016d20:	1ad2      	subs	r2, r2, r3
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	619a      	str	r2, [r3, #24]
 8016d26:	e002      	b.n	8016d2e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	699b      	ldr	r3, [r3, #24]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d121      	bne.n	8016d7a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	001a      	movs	r2, r3
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	781b      	ldrb	r3, [r3, #0]
 8016d40:	009b      	lsls	r3, r3, #2
 8016d42:	18d3      	adds	r3, r2, r3
 8016d44:	881b      	ldrh	r3, [r3, #0]
 8016d46:	b29a      	uxth	r2, r3
 8016d48:	201e      	movs	r0, #30
 8016d4a:	183b      	adds	r3, r7, r0
 8016d4c:	4927      	ldr	r1, [pc, #156]	@ (8016dec <HAL_PCD_EP_DB_Receive+0x224>)
 8016d4e:	400a      	ands	r2, r1
 8016d50:	801a      	strh	r2, [r3, #0]
 8016d52:	183b      	adds	r3, r7, r0
 8016d54:	183a      	adds	r2, r7, r0
 8016d56:	8812      	ldrh	r2, [r2, #0]
 8016d58:	2180      	movs	r1, #128	@ 0x80
 8016d5a:	0189      	lsls	r1, r1, #6
 8016d5c:	404a      	eors	r2, r1
 8016d5e:	801a      	strh	r2, [r3, #0]
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	001a      	movs	r2, r3
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	009b      	lsls	r3, r3, #2
 8016d6c:	18d3      	adds	r3, r2, r3
 8016d6e:	183a      	adds	r2, r7, r0
 8016d70:	8812      	ldrh	r2, [r2, #0]
 8016d72:	491f      	ldr	r1, [pc, #124]	@ (8016df0 <HAL_PCD_EP_DB_Receive+0x228>)
 8016d74:	430a      	orrs	r2, r1
 8016d76:	b292      	uxth	r2, r2
 8016d78:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8016d7a:	1dbb      	adds	r3, r7, #6
 8016d7c:	881b      	ldrh	r3, [r3, #0]
 8016d7e:	2240      	movs	r2, #64	@ 0x40
 8016d80:	4013      	ands	r3, r2
 8016d82:	d11a      	bne.n	8016dba <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	001a      	movs	r2, r3
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	18d3      	adds	r3, r2, r3
 8016d92:	881b      	ldrh	r3, [r3, #0]
 8016d94:	b29a      	uxth	r2, r3
 8016d96:	201c      	movs	r0, #28
 8016d98:	183b      	adds	r3, r7, r0
 8016d9a:	4916      	ldr	r1, [pc, #88]	@ (8016df4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8016d9c:	400a      	ands	r2, r1
 8016d9e:	801a      	strh	r2, [r3, #0]
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	001a      	movs	r2, r3
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	781b      	ldrb	r3, [r3, #0]
 8016daa:	009b      	lsls	r3, r3, #2
 8016dac:	18d3      	adds	r3, r2, r3
 8016dae:	183a      	adds	r2, r7, r0
 8016db0:	8812      	ldrh	r2, [r2, #0]
 8016db2:	4911      	ldr	r1, [pc, #68]	@ (8016df8 <HAL_PCD_EP_DB_Receive+0x230>)
 8016db4:	430a      	orrs	r2, r1
 8016db6:	b292      	uxth	r2, r2
 8016db8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8016dba:	241a      	movs	r4, #26
 8016dbc:	193b      	adds	r3, r7, r4
 8016dbe:	881b      	ldrh	r3, [r3, #0]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d009      	beq.n	8016dd8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	6818      	ldr	r0, [r3, #0]
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	6959      	ldr	r1, [r3, #20]
 8016dcc:	68bb      	ldr	r3, [r7, #8]
 8016dce:	895a      	ldrh	r2, [r3, #10]
 8016dd0:	193b      	adds	r3, r7, r4
 8016dd2:	881b      	ldrh	r3, [r3, #0]
 8016dd4:	f006 fdd3 	bl	801d97e <USB_ReadPMA>
    }
  }

  return count;
 8016dd8:	231a      	movs	r3, #26
 8016dda:	18fb      	adds	r3, r7, r3
 8016ddc:	881b      	ldrh	r3, [r3, #0]
}
 8016dde:	0018      	movs	r0, r3
 8016de0:	46bd      	mov	sp, r7
 8016de2:	b009      	add	sp, #36	@ 0x24
 8016de4:	bd90      	pop	{r4, r7, pc}
 8016de6:	46c0      	nop			@ (mov r8, r8)
 8016de8:	00000402 	.word	0x00000402
 8016dec:	ffffbf8f 	.word	0xffffbf8f
 8016df0:	ffff8080 	.word	0xffff8080
 8016df4:	ffff8f8f 	.word	0xffff8f8f
 8016df8:	ffff80c0 	.word	0xffff80c0
 8016dfc:	00000406 	.word	0x00000406

08016e00 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b0a4      	sub	sp, #144	@ 0x90
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	60b9      	str	r1, [r7, #8]
 8016e0a:	1dbb      	adds	r3, r7, #6
 8016e0c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8016e0e:	1dbb      	adds	r3, r7, #6
 8016e10:	881b      	ldrh	r3, [r3, #0]
 8016e12:	2240      	movs	r2, #64	@ 0x40
 8016e14:	4013      	ands	r3, r2
 8016e16:	d100      	bne.n	8016e1a <HAL_PCD_EP_DB_Transmit+0x1a>
 8016e18:	e1e4      	b.n	80171e4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	2250      	movs	r2, #80	@ 0x50
 8016e20:	5a9b      	ldrh	r3, [r3, r2]
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	001a      	movs	r2, r3
 8016e26:	68bb      	ldr	r3, [r7, #8]
 8016e28:	781b      	ldrb	r3, [r3, #0]
 8016e2a:	00db      	lsls	r3, r3, #3
 8016e2c:	18d2      	adds	r2, r2, r3
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	18d3      	adds	r3, r2, r3
 8016e34:	4ad0      	ldr	r2, [pc, #832]	@ (8017178 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016e36:	4694      	mov	ip, r2
 8016e38:	4463      	add	r3, ip
 8016e3a:	881a      	ldrh	r2, [r3, #0]
 8016e3c:	2186      	movs	r1, #134	@ 0x86
 8016e3e:	187b      	adds	r3, r7, r1
 8016e40:	0592      	lsls	r2, r2, #22
 8016e42:	0d92      	lsrs	r2, r2, #22
 8016e44:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	699a      	ldr	r2, [r3, #24]
 8016e4a:	187b      	adds	r3, r7, r1
 8016e4c:	881b      	ldrh	r3, [r3, #0]
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d907      	bls.n	8016e62 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8016e52:	68bb      	ldr	r3, [r7, #8]
 8016e54:	699a      	ldr	r2, [r3, #24]
 8016e56:	187b      	adds	r3, r7, r1
 8016e58:	881b      	ldrh	r3, [r3, #0]
 8016e5a:	1ad2      	subs	r2, r2, r3
 8016e5c:	68bb      	ldr	r3, [r7, #8]
 8016e5e:	619a      	str	r2, [r3, #24]
 8016e60:	e002      	b.n	8016e68 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8016e62:	68bb      	ldr	r3, [r7, #8]
 8016e64:	2200      	movs	r2, #0
 8016e66:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	699b      	ldr	r3, [r3, #24]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d000      	beq.n	8016e72 <HAL_PCD_EP_DB_Transmit+0x72>
 8016e70:	e0b5      	b.n	8016fde <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	785b      	ldrb	r3, [r3, #1]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d125      	bne.n	8016ec6 <HAL_PCD_EP_DB_Transmit+0xc6>
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	2250      	movs	r2, #80	@ 0x50
 8016e86:	5a9b      	ldrh	r3, [r3, r2]
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	001a      	movs	r2, r3
 8016e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e8e:	189b      	adds	r3, r3, r2
 8016e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016e92:	68bb      	ldr	r3, [r7, #8]
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	00da      	lsls	r2, r3, #3
 8016e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e9a:	18d3      	adds	r3, r2, r3
 8016e9c:	4ab6      	ldr	r2, [pc, #728]	@ (8017178 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016e9e:	4694      	mov	ip, r2
 8016ea0:	4463      	add	r3, ip
 8016ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ea6:	881b      	ldrh	r3, [r3, #0]
 8016ea8:	b29b      	uxth	r3, r3
 8016eaa:	059b      	lsls	r3, r3, #22
 8016eac:	0d9b      	lsrs	r3, r3, #22
 8016eae:	b29a      	uxth	r2, r3
 8016eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb2:	801a      	strh	r2, [r3, #0]
 8016eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb6:	881b      	ldrh	r3, [r3, #0]
 8016eb8:	b29b      	uxth	r3, r3
 8016eba:	4ab0      	ldr	r2, [pc, #704]	@ (801717c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8016ebc:	4313      	orrs	r3, r2
 8016ebe:	b29a      	uxth	r2, r3
 8016ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ec2:	801a      	strh	r2, [r3, #0]
 8016ec4:	e01b      	b.n	8016efe <HAL_PCD_EP_DB_Transmit+0xfe>
 8016ec6:	68bb      	ldr	r3, [r7, #8]
 8016ec8:	785b      	ldrb	r3, [r3, #1]
 8016eca:	2b01      	cmp	r3, #1
 8016ecc:	d117      	bne.n	8016efe <HAL_PCD_EP_DB_Transmit+0xfe>
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2250      	movs	r2, #80	@ 0x50
 8016eda:	5a9b      	ldrh	r3, [r3, r2]
 8016edc:	b29b      	uxth	r3, r3
 8016ede:	001a      	movs	r2, r3
 8016ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ee2:	189b      	adds	r3, r3, r2
 8016ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ee6:	68bb      	ldr	r3, [r7, #8]
 8016ee8:	781b      	ldrb	r3, [r3, #0]
 8016eea:	00da      	lsls	r2, r3, #3
 8016eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eee:	18d3      	adds	r3, r2, r3
 8016ef0:	4aa1      	ldr	r2, [pc, #644]	@ (8017178 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016ef2:	4694      	mov	ip, r2
 8016ef4:	4463      	add	r3, ip
 8016ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8016ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016efa:	2200      	movs	r2, #0
 8016efc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	785b      	ldrb	r3, [r3, #1]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d125      	bne.n	8016f58 <HAL_PCD_EP_DB_Transmit+0x158>
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	61fb      	str	r3, [r7, #28]
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2250      	movs	r2, #80	@ 0x50
 8016f18:	5a9b      	ldrh	r3, [r3, r2]
 8016f1a:	b29b      	uxth	r3, r3
 8016f1c:	001a      	movs	r2, r3
 8016f1e:	69fb      	ldr	r3, [r7, #28]
 8016f20:	189b      	adds	r3, r3, r2
 8016f22:	61fb      	str	r3, [r7, #28]
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	781b      	ldrb	r3, [r3, #0]
 8016f28:	00da      	lsls	r2, r3, #3
 8016f2a:	69fb      	ldr	r3, [r7, #28]
 8016f2c:	18d3      	adds	r3, r2, r3
 8016f2e:	4a94      	ldr	r2, [pc, #592]	@ (8017180 <HAL_PCD_EP_DB_Transmit+0x380>)
 8016f30:	4694      	mov	ip, r2
 8016f32:	4463      	add	r3, ip
 8016f34:	61bb      	str	r3, [r7, #24]
 8016f36:	69bb      	ldr	r3, [r7, #24]
 8016f38:	881b      	ldrh	r3, [r3, #0]
 8016f3a:	b29b      	uxth	r3, r3
 8016f3c:	059b      	lsls	r3, r3, #22
 8016f3e:	0d9b      	lsrs	r3, r3, #22
 8016f40:	b29a      	uxth	r2, r3
 8016f42:	69bb      	ldr	r3, [r7, #24]
 8016f44:	801a      	strh	r2, [r3, #0]
 8016f46:	69bb      	ldr	r3, [r7, #24]
 8016f48:	881b      	ldrh	r3, [r3, #0]
 8016f4a:	b29b      	uxth	r3, r3
 8016f4c:	4a8b      	ldr	r2, [pc, #556]	@ (801717c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8016f4e:	4313      	orrs	r3, r2
 8016f50:	b29a      	uxth	r2, r3
 8016f52:	69bb      	ldr	r3, [r7, #24]
 8016f54:	801a      	strh	r2, [r3, #0]
 8016f56:	e018      	b.n	8016f8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	785b      	ldrb	r3, [r3, #1]
 8016f5c:	2b01      	cmp	r3, #1
 8016f5e:	d114      	bne.n	8016f8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	2250      	movs	r2, #80	@ 0x50
 8016f66:	5a9b      	ldrh	r3, [r3, r2]
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	001a      	movs	r2, r3
 8016f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f6e:	189b      	adds	r3, r3, r2
 8016f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	00da      	lsls	r2, r3, #3
 8016f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f7a:	18d3      	adds	r3, r2, r3
 8016f7c:	4a80      	ldr	r2, [pc, #512]	@ (8017180 <HAL_PCD_EP_DB_Transmit+0x380>)
 8016f7e:	4694      	mov	ip, r2
 8016f80:	4463      	add	r3, ip
 8016f82:	623b      	str	r3, [r7, #32]
 8016f84:	6a3b      	ldr	r3, [r7, #32]
 8016f86:	2200      	movs	r2, #0
 8016f88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	781a      	ldrb	r2, [r3, #0]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	0011      	movs	r1, r2
 8016f92:	0018      	movs	r0, r3
 8016f94:	f008 fd2e 	bl	801f9f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016f98:	1dbb      	adds	r3, r7, #6
 8016f9a:	881a      	ldrh	r2, [r3, #0]
 8016f9c:	2380      	movs	r3, #128	@ 0x80
 8016f9e:	01db      	lsls	r3, r3, #7
 8016fa0:	4013      	ands	r3, r2
 8016fa2:	d100      	bne.n	8016fa6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8016fa4:	e309      	b.n	80175ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	001a      	movs	r2, r3
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	009b      	lsls	r3, r3, #2
 8016fb2:	18d3      	adds	r3, r2, r3
 8016fb4:	881b      	ldrh	r3, [r3, #0]
 8016fb6:	b29a      	uxth	r2, r3
 8016fb8:	2016      	movs	r0, #22
 8016fba:	183b      	adds	r3, r7, r0
 8016fbc:	4971      	ldr	r1, [pc, #452]	@ (8017184 <HAL_PCD_EP_DB_Transmit+0x384>)
 8016fbe:	400a      	ands	r2, r1
 8016fc0:	801a      	strh	r2, [r3, #0]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	001a      	movs	r2, r3
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	781b      	ldrb	r3, [r3, #0]
 8016fcc:	009b      	lsls	r3, r3, #2
 8016fce:	18d3      	adds	r3, r2, r3
 8016fd0:	183a      	adds	r2, r7, r0
 8016fd2:	8812      	ldrh	r2, [r2, #0]
 8016fd4:	496c      	ldr	r1, [pc, #432]	@ (8017188 <HAL_PCD_EP_DB_Transmit+0x388>)
 8016fd6:	430a      	orrs	r2, r1
 8016fd8:	b292      	uxth	r2, r2
 8016fda:	801a      	strh	r2, [r3, #0]
 8016fdc:	e2ed      	b.n	80175ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016fde:	1dbb      	adds	r3, r7, #6
 8016fe0:	881a      	ldrh	r2, [r3, #0]
 8016fe2:	2380      	movs	r3, #128	@ 0x80
 8016fe4:	01db      	lsls	r3, r3, #7
 8016fe6:	4013      	ands	r3, r2
 8016fe8:	d01a      	beq.n	8017020 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	001a      	movs	r2, r3
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	781b      	ldrb	r3, [r3, #0]
 8016ff4:	009b      	lsls	r3, r3, #2
 8016ff6:	18d3      	adds	r3, r2, r3
 8016ff8:	881b      	ldrh	r3, [r3, #0]
 8016ffa:	b29a      	uxth	r2, r3
 8016ffc:	208a      	movs	r0, #138	@ 0x8a
 8016ffe:	183b      	adds	r3, r7, r0
 8017000:	4960      	ldr	r1, [pc, #384]	@ (8017184 <HAL_PCD_EP_DB_Transmit+0x384>)
 8017002:	400a      	ands	r2, r1
 8017004:	801a      	strh	r2, [r3, #0]
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	001a      	movs	r2, r3
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	781b      	ldrb	r3, [r3, #0]
 8017010:	009b      	lsls	r3, r3, #2
 8017012:	18d3      	adds	r3, r2, r3
 8017014:	183a      	adds	r2, r7, r0
 8017016:	8812      	ldrh	r2, [r2, #0]
 8017018:	495b      	ldr	r1, [pc, #364]	@ (8017188 <HAL_PCD_EP_DB_Transmit+0x388>)
 801701a:	430a      	orrs	r2, r1
 801701c:	b292      	uxth	r2, r2
 801701e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	2224      	movs	r2, #36	@ 0x24
 8017024:	5c9b      	ldrb	r3, [r3, r2]
 8017026:	2b01      	cmp	r3, #1
 8017028:	d000      	beq.n	801702c <HAL_PCD_EP_DB_Transmit+0x22c>
 801702a:	e2c6      	b.n	80175ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	695a      	ldr	r2, [r3, #20]
 8017030:	2186      	movs	r1, #134	@ 0x86
 8017032:	187b      	adds	r3, r7, r1
 8017034:	881b      	ldrh	r3, [r3, #0]
 8017036:	18d2      	adds	r2, r2, r3
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	69da      	ldr	r2, [r3, #28]
 8017040:	187b      	adds	r3, r7, r1
 8017042:	881b      	ldrh	r3, [r3, #0]
 8017044:	18d2      	adds	r2, r2, r3
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	6a1a      	ldr	r2, [r3, #32]
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	691b      	ldr	r3, [r3, #16]
 8017052:	429a      	cmp	r2, r3
 8017054:	d30c      	bcc.n	8017070 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	691b      	ldr	r3, [r3, #16]
 801705a:	218c      	movs	r1, #140	@ 0x8c
 801705c:	187a      	adds	r2, r7, r1
 801705e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8017060:	68bb      	ldr	r3, [r7, #8]
 8017062:	6a1a      	ldr	r2, [r3, #32]
 8017064:	187b      	adds	r3, r7, r1
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	1ad2      	subs	r2, r2, r3
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	621a      	str	r2, [r3, #32]
 801706e:	e01a      	b.n	80170a6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	6a1b      	ldr	r3, [r3, #32]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d10a      	bne.n	801708e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8017078:	2386      	movs	r3, #134	@ 0x86
 801707a:	18fb      	adds	r3, r7, r3
 801707c:	881b      	ldrh	r3, [r3, #0]
 801707e:	228c      	movs	r2, #140	@ 0x8c
 8017080:	18ba      	adds	r2, r7, r2
 8017082:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	2224      	movs	r2, #36	@ 0x24
 8017088:	2100      	movs	r1, #0
 801708a:	5499      	strb	r1, [r3, r2]
 801708c:	e00b      	b.n	80170a6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	2224      	movs	r2, #36	@ 0x24
 8017092:	2100      	movs	r1, #0
 8017094:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	6a1b      	ldr	r3, [r3, #32]
 801709a:	228c      	movs	r2, #140	@ 0x8c
 801709c:	18ba      	adds	r2, r7, r2
 801709e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80170a0:	68bb      	ldr	r3, [r7, #8]
 80170a2:	2200      	movs	r2, #0
 80170a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80170a6:	68bb      	ldr	r3, [r7, #8]
 80170a8:	785b      	ldrb	r3, [r3, #1]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d000      	beq.n	80170b0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80170ae:	e06d      	b.n	801718c <HAL_PCD_EP_DB_Transmit+0x38c>
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	2250      	movs	r2, #80	@ 0x50
 80170bc:	5a9b      	ldrh	r3, [r3, r2]
 80170be:	b29b      	uxth	r3, r3
 80170c0:	001a      	movs	r2, r3
 80170c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170c4:	189b      	adds	r3, r3, r2
 80170c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	781b      	ldrb	r3, [r3, #0]
 80170cc:	00da      	lsls	r2, r3, #3
 80170ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170d0:	18d3      	adds	r3, r2, r3
 80170d2:	4a29      	ldr	r2, [pc, #164]	@ (8017178 <HAL_PCD_EP_DB_Transmit+0x378>)
 80170d4:	4694      	mov	ip, r2
 80170d6:	4463      	add	r3, ip
 80170d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80170da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170dc:	881b      	ldrh	r3, [r3, #0]
 80170de:	b29b      	uxth	r3, r3
 80170e0:	059b      	lsls	r3, r3, #22
 80170e2:	0d9b      	lsrs	r3, r3, #22
 80170e4:	b29a      	uxth	r2, r3
 80170e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170e8:	801a      	strh	r2, [r3, #0]
 80170ea:	228c      	movs	r2, #140	@ 0x8c
 80170ec:	18bb      	adds	r3, r7, r2
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80170f2:	d91a      	bls.n	801712a <HAL_PCD_EP_DB_Transmit+0x32a>
 80170f4:	18bb      	adds	r3, r7, r2
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	095b      	lsrs	r3, r3, #5
 80170fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80170fc:	18bb      	adds	r3, r7, r2
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	221f      	movs	r2, #31
 8017102:	4013      	ands	r3, r2
 8017104:	d102      	bne.n	801710c <HAL_PCD_EP_DB_Transmit+0x30c>
 8017106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017108:	3b01      	subs	r3, #1
 801710a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801710c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	b29a      	uxth	r2, r3
 8017112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017114:	b29b      	uxth	r3, r3
 8017116:	029b      	lsls	r3, r3, #10
 8017118:	b29b      	uxth	r3, r3
 801711a:	4313      	orrs	r3, r2
 801711c:	b29b      	uxth	r3, r3
 801711e:	4a17      	ldr	r2, [pc, #92]	@ (801717c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017120:	4313      	orrs	r3, r2
 8017122:	b29a      	uxth	r2, r3
 8017124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017126:	801a      	strh	r2, [r3, #0]
 8017128:	e04f      	b.n	80171ca <HAL_PCD_EP_DB_Transmit+0x3ca>
 801712a:	238c      	movs	r3, #140	@ 0x8c
 801712c:	18fb      	adds	r3, r7, r3
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d108      	bne.n	8017146 <HAL_PCD_EP_DB_Transmit+0x346>
 8017134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017136:	881b      	ldrh	r3, [r3, #0]
 8017138:	b29b      	uxth	r3, r3
 801713a:	4a10      	ldr	r2, [pc, #64]	@ (801717c <HAL_PCD_EP_DB_Transmit+0x37c>)
 801713c:	4313      	orrs	r3, r2
 801713e:	b29a      	uxth	r2, r3
 8017140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017142:	801a      	strh	r2, [r3, #0]
 8017144:	e041      	b.n	80171ca <HAL_PCD_EP_DB_Transmit+0x3ca>
 8017146:	228c      	movs	r2, #140	@ 0x8c
 8017148:	18bb      	adds	r3, r7, r2
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	085b      	lsrs	r3, r3, #1
 801714e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017150:	18bb      	adds	r3, r7, r2
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	2201      	movs	r2, #1
 8017156:	4013      	ands	r3, r2
 8017158:	d002      	beq.n	8017160 <HAL_PCD_EP_DB_Transmit+0x360>
 801715a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801715c:	3301      	adds	r3, #1
 801715e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017162:	881b      	ldrh	r3, [r3, #0]
 8017164:	b29a      	uxth	r2, r3
 8017166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017168:	b29b      	uxth	r3, r3
 801716a:	029b      	lsls	r3, r3, #10
 801716c:	b29b      	uxth	r3, r3
 801716e:	4313      	orrs	r3, r2
 8017170:	b29a      	uxth	r2, r3
 8017172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017174:	801a      	strh	r2, [r3, #0]
 8017176:	e028      	b.n	80171ca <HAL_PCD_EP_DB_Transmit+0x3ca>
 8017178:	00000402 	.word	0x00000402
 801717c:	ffff8000 	.word	0xffff8000
 8017180:	00000406 	.word	0x00000406
 8017184:	ffff8f8f 	.word	0xffff8f8f
 8017188:	ffffc080 	.word	0xffffc080
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	785b      	ldrb	r3, [r3, #1]
 8017190:	2b01      	cmp	r3, #1
 8017192:	d11a      	bne.n	80171ca <HAL_PCD_EP_DB_Transmit+0x3ca>
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	647b      	str	r3, [r7, #68]	@ 0x44
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	2250      	movs	r2, #80	@ 0x50
 80171a0:	5a9b      	ldrh	r3, [r3, r2]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	001a      	movs	r2, r3
 80171a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171a8:	189b      	adds	r3, r3, r2
 80171aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	00da      	lsls	r2, r3, #3
 80171b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171b4:	18d3      	adds	r3, r2, r3
 80171b6:	4adb      	ldr	r2, [pc, #876]	@ (8017524 <HAL_PCD_EP_DB_Transmit+0x724>)
 80171b8:	4694      	mov	ip, r2
 80171ba:	4463      	add	r3, ip
 80171bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80171be:	238c      	movs	r3, #140	@ 0x8c
 80171c0:	18fb      	adds	r3, r7, r3
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	b29a      	uxth	r2, r3
 80171c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80171c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	6818      	ldr	r0, [r3, #0]
 80171ce:	68bb      	ldr	r3, [r7, #8]
 80171d0:	6959      	ldr	r1, [r3, #20]
 80171d2:	68bb      	ldr	r3, [r7, #8]
 80171d4:	891a      	ldrh	r2, [r3, #8]
 80171d6:	238c      	movs	r3, #140	@ 0x8c
 80171d8:	18fb      	adds	r3, r7, r3
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	b29b      	uxth	r3, r3
 80171de:	f006 fb85 	bl	801d8ec <USB_WritePMA>
 80171e2:	e1ea      	b.n	80175ba <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	2250      	movs	r2, #80	@ 0x50
 80171ea:	5a9b      	ldrh	r3, [r3, r2]
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	001a      	movs	r2, r3
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	00db      	lsls	r3, r3, #3
 80171f6:	18d2      	adds	r2, r2, r3
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	18d3      	adds	r3, r2, r3
 80171fe:	4aca      	ldr	r2, [pc, #808]	@ (8017528 <HAL_PCD_EP_DB_Transmit+0x728>)
 8017200:	4694      	mov	ip, r2
 8017202:	4463      	add	r3, ip
 8017204:	881a      	ldrh	r2, [r3, #0]
 8017206:	2186      	movs	r1, #134	@ 0x86
 8017208:	187b      	adds	r3, r7, r1
 801720a:	0592      	lsls	r2, r2, #22
 801720c:	0d92      	lsrs	r2, r2, #22
 801720e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	699a      	ldr	r2, [r3, #24]
 8017214:	187b      	adds	r3, r7, r1
 8017216:	881b      	ldrh	r3, [r3, #0]
 8017218:	429a      	cmp	r2, r3
 801721a:	d307      	bcc.n	801722c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801721c:	68bb      	ldr	r3, [r7, #8]
 801721e:	699a      	ldr	r2, [r3, #24]
 8017220:	187b      	adds	r3, r7, r1
 8017222:	881b      	ldrh	r3, [r3, #0]
 8017224:	1ad2      	subs	r2, r2, r3
 8017226:	68bb      	ldr	r3, [r7, #8]
 8017228:	619a      	str	r2, [r3, #24]
 801722a:	e002      	b.n	8017232 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	2200      	movs	r2, #0
 8017230:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8017232:	68bb      	ldr	r3, [r7, #8]
 8017234:	699b      	ldr	r3, [r3, #24]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d000      	beq.n	801723c <HAL_PCD_EP_DB_Transmit+0x43c>
 801723a:	e0bb      	b.n	80173b4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801723c:	68bb      	ldr	r3, [r7, #8]
 801723e:	785b      	ldrb	r3, [r3, #1]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d125      	bne.n	8017290 <HAL_PCD_EP_DB_Transmit+0x490>
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	2250      	movs	r2, #80	@ 0x50
 8017250:	5a9b      	ldrh	r3, [r3, r2]
 8017252:	b29b      	uxth	r3, r3
 8017254:	001a      	movs	r2, r3
 8017256:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017258:	189b      	adds	r3, r3, r2
 801725a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	00da      	lsls	r2, r3, #3
 8017262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017264:	18d3      	adds	r3, r2, r3
 8017266:	4aaf      	ldr	r2, [pc, #700]	@ (8017524 <HAL_PCD_EP_DB_Transmit+0x724>)
 8017268:	4694      	mov	ip, r2
 801726a:	4463      	add	r3, ip
 801726c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801726e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017270:	881b      	ldrh	r3, [r3, #0]
 8017272:	b29b      	uxth	r3, r3
 8017274:	059b      	lsls	r3, r3, #22
 8017276:	0d9b      	lsrs	r3, r3, #22
 8017278:	b29a      	uxth	r2, r3
 801727a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801727c:	801a      	strh	r2, [r3, #0]
 801727e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017280:	881b      	ldrh	r3, [r3, #0]
 8017282:	b29b      	uxth	r3, r3
 8017284:	4aa9      	ldr	r2, [pc, #676]	@ (801752c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017286:	4313      	orrs	r3, r2
 8017288:	b29a      	uxth	r2, r3
 801728a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801728c:	801a      	strh	r2, [r3, #0]
 801728e:	e01b      	b.n	80172c8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8017290:	68bb      	ldr	r3, [r7, #8]
 8017292:	785b      	ldrb	r3, [r3, #1]
 8017294:	2b01      	cmp	r3, #1
 8017296:	d117      	bne.n	80172c8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	667b      	str	r3, [r7, #100]	@ 0x64
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	2250      	movs	r2, #80	@ 0x50
 80172a4:	5a9b      	ldrh	r3, [r3, r2]
 80172a6:	b29b      	uxth	r3, r3
 80172a8:	001a      	movs	r2, r3
 80172aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80172ac:	189b      	adds	r3, r3, r2
 80172ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	781b      	ldrb	r3, [r3, #0]
 80172b4:	00da      	lsls	r2, r3, #3
 80172b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80172b8:	18d3      	adds	r3, r2, r3
 80172ba:	4a9a      	ldr	r2, [pc, #616]	@ (8017524 <HAL_PCD_EP_DB_Transmit+0x724>)
 80172bc:	4694      	mov	ip, r2
 80172be:	4463      	add	r3, ip
 80172c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80172c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80172c4:	2200      	movs	r2, #0
 80172c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	785b      	ldrb	r3, [r3, #1]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d12b      	bne.n	801732e <HAL_PCD_EP_DB_Transmit+0x52e>
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	2250      	movs	r2, #80	@ 0x50
 80172e2:	5a9b      	ldrh	r3, [r3, r2]
 80172e4:	b29b      	uxth	r3, r3
 80172e6:	001a      	movs	r2, r3
 80172e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80172ea:	189b      	adds	r3, r3, r2
 80172ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	781b      	ldrb	r3, [r3, #0]
 80172f2:	00da      	lsls	r2, r3, #3
 80172f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80172f6:	18d3      	adds	r3, r2, r3
 80172f8:	4a8b      	ldr	r2, [pc, #556]	@ (8017528 <HAL_PCD_EP_DB_Transmit+0x728>)
 80172fa:	4694      	mov	ip, r2
 80172fc:	4463      	add	r3, ip
 80172fe:	2180      	movs	r1, #128	@ 0x80
 8017300:	187a      	adds	r2, r7, r1
 8017302:	6013      	str	r3, [r2, #0]
 8017304:	187b      	adds	r3, r7, r1
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	881b      	ldrh	r3, [r3, #0]
 801730a:	b29b      	uxth	r3, r3
 801730c:	059b      	lsls	r3, r3, #22
 801730e:	0d9b      	lsrs	r3, r3, #22
 8017310:	b29a      	uxth	r2, r3
 8017312:	187b      	adds	r3, r7, r1
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	801a      	strh	r2, [r3, #0]
 8017318:	187b      	adds	r3, r7, r1
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	881b      	ldrh	r3, [r3, #0]
 801731e:	b29b      	uxth	r3, r3
 8017320:	4a82      	ldr	r2, [pc, #520]	@ (801752c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017322:	4313      	orrs	r3, r2
 8017324:	b29a      	uxth	r2, r3
 8017326:	187b      	adds	r3, r7, r1
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	801a      	strh	r2, [r3, #0]
 801732c:	e018      	b.n	8017360 <HAL_PCD_EP_DB_Transmit+0x560>
 801732e:	68bb      	ldr	r3, [r7, #8]
 8017330:	785b      	ldrb	r3, [r3, #1]
 8017332:	2b01      	cmp	r3, #1
 8017334:	d114      	bne.n	8017360 <HAL_PCD_EP_DB_Transmit+0x560>
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	2250      	movs	r2, #80	@ 0x50
 801733c:	5a9b      	ldrh	r3, [r3, r2]
 801733e:	b29b      	uxth	r3, r3
 8017340:	001a      	movs	r2, r3
 8017342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017344:	189b      	adds	r3, r3, r2
 8017346:	677b      	str	r3, [r7, #116]	@ 0x74
 8017348:	68bb      	ldr	r3, [r7, #8]
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	00da      	lsls	r2, r3, #3
 801734e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017350:	18d3      	adds	r3, r2, r3
 8017352:	4a75      	ldr	r2, [pc, #468]	@ (8017528 <HAL_PCD_EP_DB_Transmit+0x728>)
 8017354:	4694      	mov	ip, r2
 8017356:	4463      	add	r3, ip
 8017358:	673b      	str	r3, [r7, #112]	@ 0x70
 801735a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801735c:	2200      	movs	r2, #0
 801735e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	781a      	ldrb	r2, [r3, #0]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	0011      	movs	r1, r2
 8017368:	0018      	movs	r0, r3
 801736a:	f008 fb43 	bl	801f9f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801736e:	1dbb      	adds	r3, r7, #6
 8017370:	881a      	ldrh	r2, [r3, #0]
 8017372:	2380      	movs	r3, #128	@ 0x80
 8017374:	01db      	lsls	r3, r3, #7
 8017376:	4013      	ands	r3, r2
 8017378:	d000      	beq.n	801737c <HAL_PCD_EP_DB_Transmit+0x57c>
 801737a:	e11e      	b.n	80175ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	001a      	movs	r2, r3
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	009b      	lsls	r3, r3, #2
 8017388:	18d3      	adds	r3, r2, r3
 801738a:	881b      	ldrh	r3, [r3, #0]
 801738c:	b29a      	uxth	r2, r3
 801738e:	2088      	movs	r0, #136	@ 0x88
 8017390:	183b      	adds	r3, r7, r0
 8017392:	4967      	ldr	r1, [pc, #412]	@ (8017530 <HAL_PCD_EP_DB_Transmit+0x730>)
 8017394:	400a      	ands	r2, r1
 8017396:	801a      	strh	r2, [r3, #0]
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	001a      	movs	r2, r3
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	009b      	lsls	r3, r3, #2
 80173a4:	18d3      	adds	r3, r2, r3
 80173a6:	183a      	adds	r2, r7, r0
 80173a8:	8812      	ldrh	r2, [r2, #0]
 80173aa:	4962      	ldr	r1, [pc, #392]	@ (8017534 <HAL_PCD_EP_DB_Transmit+0x734>)
 80173ac:	430a      	orrs	r2, r1
 80173ae:	b292      	uxth	r2, r2
 80173b0:	801a      	strh	r2, [r3, #0]
 80173b2:	e102      	b.n	80175ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80173b4:	1dbb      	adds	r3, r7, #6
 80173b6:	881a      	ldrh	r2, [r3, #0]
 80173b8:	2380      	movs	r3, #128	@ 0x80
 80173ba:	01db      	lsls	r3, r3, #7
 80173bc:	4013      	ands	r3, r2
 80173be:	d11a      	bne.n	80173f6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	001a      	movs	r2, r3
 80173c6:	68bb      	ldr	r3, [r7, #8]
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	009b      	lsls	r3, r3, #2
 80173cc:	18d3      	adds	r3, r2, r3
 80173ce:	881b      	ldrh	r3, [r3, #0]
 80173d0:	b29a      	uxth	r2, r3
 80173d2:	204e      	movs	r0, #78	@ 0x4e
 80173d4:	183b      	adds	r3, r7, r0
 80173d6:	4956      	ldr	r1, [pc, #344]	@ (8017530 <HAL_PCD_EP_DB_Transmit+0x730>)
 80173d8:	400a      	ands	r2, r1
 80173da:	801a      	strh	r2, [r3, #0]
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	001a      	movs	r2, r3
 80173e2:	68bb      	ldr	r3, [r7, #8]
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	009b      	lsls	r3, r3, #2
 80173e8:	18d3      	adds	r3, r2, r3
 80173ea:	183a      	adds	r2, r7, r0
 80173ec:	8812      	ldrh	r2, [r2, #0]
 80173ee:	4951      	ldr	r1, [pc, #324]	@ (8017534 <HAL_PCD_EP_DB_Transmit+0x734>)
 80173f0:	430a      	orrs	r2, r1
 80173f2:	b292      	uxth	r2, r2
 80173f4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	2224      	movs	r2, #36	@ 0x24
 80173fa:	5c9b      	ldrb	r3, [r3, r2]
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	d000      	beq.n	8017402 <HAL_PCD_EP_DB_Transmit+0x602>
 8017400:	e0db      	b.n	80175ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	695a      	ldr	r2, [r3, #20]
 8017406:	2186      	movs	r1, #134	@ 0x86
 8017408:	187b      	adds	r3, r7, r1
 801740a:	881b      	ldrh	r3, [r3, #0]
 801740c:	18d2      	adds	r2, r2, r3
 801740e:	68bb      	ldr	r3, [r7, #8]
 8017410:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	69da      	ldr	r2, [r3, #28]
 8017416:	187b      	adds	r3, r7, r1
 8017418:	881b      	ldrh	r3, [r3, #0]
 801741a:	18d2      	adds	r2, r2, r3
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	6a1a      	ldr	r2, [r3, #32]
 8017424:	68bb      	ldr	r3, [r7, #8]
 8017426:	691b      	ldr	r3, [r3, #16]
 8017428:	429a      	cmp	r2, r3
 801742a:	d30c      	bcc.n	8017446 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	691b      	ldr	r3, [r3, #16]
 8017430:	218c      	movs	r1, #140	@ 0x8c
 8017432:	187a      	adds	r2, r7, r1
 8017434:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8017436:	68bb      	ldr	r3, [r7, #8]
 8017438:	6a1a      	ldr	r2, [r3, #32]
 801743a:	187b      	adds	r3, r7, r1
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	1ad2      	subs	r2, r2, r3
 8017440:	68bb      	ldr	r3, [r7, #8]
 8017442:	621a      	str	r2, [r3, #32]
 8017444:	e01a      	b.n	801747c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8017446:	68bb      	ldr	r3, [r7, #8]
 8017448:	6a1b      	ldr	r3, [r3, #32]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d10a      	bne.n	8017464 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801744e:	2386      	movs	r3, #134	@ 0x86
 8017450:	18fb      	adds	r3, r7, r3
 8017452:	881b      	ldrh	r3, [r3, #0]
 8017454:	228c      	movs	r2, #140	@ 0x8c
 8017456:	18ba      	adds	r2, r7, r2
 8017458:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	2224      	movs	r2, #36	@ 0x24
 801745e:	2100      	movs	r1, #0
 8017460:	5499      	strb	r1, [r3, r2]
 8017462:	e00b      	b.n	801747c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8017464:	68bb      	ldr	r3, [r7, #8]
 8017466:	6a1b      	ldr	r3, [r3, #32]
 8017468:	228c      	movs	r2, #140	@ 0x8c
 801746a:	18ba      	adds	r2, r7, r2
 801746c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	2200      	movs	r2, #0
 8017472:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	2224      	movs	r2, #36	@ 0x24
 8017478:	2100      	movs	r1, #0
 801747a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	657b      	str	r3, [r7, #84]	@ 0x54
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	785b      	ldrb	r3, [r3, #1]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d000      	beq.n	801748c <HAL_PCD_EP_DB_Transmit+0x68c>
 801748a:	e06e      	b.n	801756a <HAL_PCD_EP_DB_Transmit+0x76a>
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	2250      	movs	r2, #80	@ 0x50
 8017498:	5a9b      	ldrh	r3, [r3, r2]
 801749a:	b29b      	uxth	r3, r3
 801749c:	001a      	movs	r2, r3
 801749e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80174a0:	189b      	adds	r3, r3, r2
 80174a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	00da      	lsls	r2, r3, #3
 80174aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80174ac:	18d3      	adds	r3, r2, r3
 80174ae:	4a1e      	ldr	r2, [pc, #120]	@ (8017528 <HAL_PCD_EP_DB_Transmit+0x728>)
 80174b0:	4694      	mov	ip, r2
 80174b2:	4463      	add	r3, ip
 80174b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80174b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80174b8:	881b      	ldrh	r3, [r3, #0]
 80174ba:	b29b      	uxth	r3, r3
 80174bc:	059b      	lsls	r3, r3, #22
 80174be:	0d9b      	lsrs	r3, r3, #22
 80174c0:	b29a      	uxth	r2, r3
 80174c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80174c4:	801a      	strh	r2, [r3, #0]
 80174c6:	228c      	movs	r2, #140	@ 0x8c
 80174c8:	18bb      	adds	r3, r7, r2
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80174ce:	d91a      	bls.n	8017506 <HAL_PCD_EP_DB_Transmit+0x706>
 80174d0:	18bb      	adds	r3, r7, r2
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	095b      	lsrs	r3, r3, #5
 80174d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80174d8:	18bb      	adds	r3, r7, r2
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	221f      	movs	r2, #31
 80174de:	4013      	ands	r3, r2
 80174e0:	d102      	bne.n	80174e8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80174e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80174e4:	3b01      	subs	r3, #1
 80174e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80174e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80174ea:	881b      	ldrh	r3, [r3, #0]
 80174ec:	b29a      	uxth	r2, r3
 80174ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80174f0:	b29b      	uxth	r3, r3
 80174f2:	029b      	lsls	r3, r3, #10
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	4313      	orrs	r3, r2
 80174f8:	b29b      	uxth	r3, r3
 80174fa:	4a0c      	ldr	r2, [pc, #48]	@ (801752c <HAL_PCD_EP_DB_Transmit+0x72c>)
 80174fc:	4313      	orrs	r3, r2
 80174fe:	b29a      	uxth	r2, r3
 8017500:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017502:	801a      	strh	r2, [r3, #0]
 8017504:	e04d      	b.n	80175a2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8017506:	238c      	movs	r3, #140	@ 0x8c
 8017508:	18fb      	adds	r3, r7, r3
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d113      	bne.n	8017538 <HAL_PCD_EP_DB_Transmit+0x738>
 8017510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017512:	881b      	ldrh	r3, [r3, #0]
 8017514:	b29b      	uxth	r3, r3
 8017516:	4a05      	ldr	r2, [pc, #20]	@ (801752c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017518:	4313      	orrs	r3, r2
 801751a:	b29a      	uxth	r2, r3
 801751c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801751e:	801a      	strh	r2, [r3, #0]
 8017520:	e03f      	b.n	80175a2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8017522:	46c0      	nop			@ (mov r8, r8)
 8017524:	00000402 	.word	0x00000402
 8017528:	00000406 	.word	0x00000406
 801752c:	ffff8000 	.word	0xffff8000
 8017530:	ffff8f8f 	.word	0xffff8f8f
 8017534:	ffffc080 	.word	0xffffc080
 8017538:	228c      	movs	r2, #140	@ 0x8c
 801753a:	18bb      	adds	r3, r7, r2
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	085b      	lsrs	r3, r3, #1
 8017540:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017542:	18bb      	adds	r3, r7, r2
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	2201      	movs	r2, #1
 8017548:	4013      	ands	r3, r2
 801754a:	d002      	beq.n	8017552 <HAL_PCD_EP_DB_Transmit+0x752>
 801754c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801754e:	3301      	adds	r3, #1
 8017550:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017554:	881b      	ldrh	r3, [r3, #0]
 8017556:	b29a      	uxth	r2, r3
 8017558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801755a:	b29b      	uxth	r3, r3
 801755c:	029b      	lsls	r3, r3, #10
 801755e:	b29b      	uxth	r3, r3
 8017560:	4313      	orrs	r3, r2
 8017562:	b29a      	uxth	r2, r3
 8017564:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017566:	801a      	strh	r2, [r3, #0]
 8017568:	e01b      	b.n	80175a2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	785b      	ldrb	r3, [r3, #1]
 801756e:	2b01      	cmp	r3, #1
 8017570:	d117      	bne.n	80175a2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	2250      	movs	r2, #80	@ 0x50
 8017578:	5a9b      	ldrh	r3, [r3, r2]
 801757a:	b29b      	uxth	r3, r3
 801757c:	001a      	movs	r2, r3
 801757e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017580:	189b      	adds	r3, r3, r2
 8017582:	657b      	str	r3, [r7, #84]	@ 0x54
 8017584:	68bb      	ldr	r3, [r7, #8]
 8017586:	781b      	ldrb	r3, [r3, #0]
 8017588:	00da      	lsls	r2, r3, #3
 801758a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801758c:	18d3      	adds	r3, r2, r3
 801758e:	4a21      	ldr	r2, [pc, #132]	@ (8017614 <HAL_PCD_EP_DB_Transmit+0x814>)
 8017590:	4694      	mov	ip, r2
 8017592:	4463      	add	r3, ip
 8017594:	653b      	str	r3, [r7, #80]	@ 0x50
 8017596:	238c      	movs	r3, #140	@ 0x8c
 8017598:	18fb      	adds	r3, r7, r3
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	b29a      	uxth	r2, r3
 801759e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80175a0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	6818      	ldr	r0, [r3, #0]
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	6959      	ldr	r1, [r3, #20]
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	895a      	ldrh	r2, [r3, #10]
 80175ae:	238c      	movs	r3, #140	@ 0x8c
 80175b0:	18fb      	adds	r3, r7, r3
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	b29b      	uxth	r3, r3
 80175b6:	f006 f999 	bl	801d8ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	001a      	movs	r2, r3
 80175c0:	68bb      	ldr	r3, [r7, #8]
 80175c2:	781b      	ldrb	r3, [r3, #0]
 80175c4:	009b      	lsls	r3, r3, #2
 80175c6:	18d3      	adds	r3, r2, r3
 80175c8:	881b      	ldrh	r3, [r3, #0]
 80175ca:	b29a      	uxth	r2, r3
 80175cc:	2014      	movs	r0, #20
 80175ce:	183b      	adds	r3, r7, r0
 80175d0:	4911      	ldr	r1, [pc, #68]	@ (8017618 <HAL_PCD_EP_DB_Transmit+0x818>)
 80175d2:	400a      	ands	r2, r1
 80175d4:	801a      	strh	r2, [r3, #0]
 80175d6:	183b      	adds	r3, r7, r0
 80175d8:	183a      	adds	r2, r7, r0
 80175da:	8812      	ldrh	r2, [r2, #0]
 80175dc:	2110      	movs	r1, #16
 80175de:	404a      	eors	r2, r1
 80175e0:	801a      	strh	r2, [r3, #0]
 80175e2:	183b      	adds	r3, r7, r0
 80175e4:	183a      	adds	r2, r7, r0
 80175e6:	8812      	ldrh	r2, [r2, #0]
 80175e8:	2120      	movs	r1, #32
 80175ea:	404a      	eors	r2, r1
 80175ec:	801a      	strh	r2, [r3, #0]
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	001a      	movs	r2, r3
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	781b      	ldrb	r3, [r3, #0]
 80175f8:	009b      	lsls	r3, r3, #2
 80175fa:	18d3      	adds	r3, r2, r3
 80175fc:	183a      	adds	r2, r7, r0
 80175fe:	8812      	ldrh	r2, [r2, #0]
 8017600:	4906      	ldr	r1, [pc, #24]	@ (801761c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8017602:	430a      	orrs	r2, r1
 8017604:	b292      	uxth	r2, r2
 8017606:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8017608:	2300      	movs	r3, #0
}
 801760a:	0018      	movs	r0, r3
 801760c:	46bd      	mov	sp, r7
 801760e:	b024      	add	sp, #144	@ 0x90
 8017610:	bd80      	pop	{r7, pc}
 8017612:	46c0      	nop			@ (mov r8, r8)
 8017614:	00000406 	.word	0x00000406
 8017618:	ffff8fbf 	.word	0xffff8fbf
 801761c:	ffff8080 	.word	0xffff8080

08017620 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8017620:	b590      	push	{r4, r7, lr}
 8017622:	b087      	sub	sp, #28
 8017624:	af00      	add	r7, sp, #0
 8017626:	60f8      	str	r0, [r7, #12]
 8017628:	0008      	movs	r0, r1
 801762a:	0011      	movs	r1, r2
 801762c:	607b      	str	r3, [r7, #4]
 801762e:	240a      	movs	r4, #10
 8017630:	193b      	adds	r3, r7, r4
 8017632:	1c02      	adds	r2, r0, #0
 8017634:	801a      	strh	r2, [r3, #0]
 8017636:	2308      	movs	r3, #8
 8017638:	18fb      	adds	r3, r7, r3
 801763a:	1c0a      	adds	r2, r1, #0
 801763c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801763e:	0021      	movs	r1, r4
 8017640:	187b      	adds	r3, r7, r1
 8017642:	881b      	ldrh	r3, [r3, #0]
 8017644:	2280      	movs	r2, #128	@ 0x80
 8017646:	4013      	ands	r3, r2
 8017648:	b29b      	uxth	r3, r3
 801764a:	2b00      	cmp	r3, #0
 801764c:	d00c      	beq.n	8017668 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801764e:	187b      	adds	r3, r7, r1
 8017650:	881b      	ldrh	r3, [r3, #0]
 8017652:	2207      	movs	r2, #7
 8017654:	4013      	ands	r3, r2
 8017656:	1c5a      	adds	r2, r3, #1
 8017658:	0013      	movs	r3, r2
 801765a:	009b      	lsls	r3, r3, #2
 801765c:	189b      	adds	r3, r3, r2
 801765e:	00db      	lsls	r3, r3, #3
 8017660:	68fa      	ldr	r2, [r7, #12]
 8017662:	18d3      	adds	r3, r2, r3
 8017664:	617b      	str	r3, [r7, #20]
 8017666:	e00b      	b.n	8017680 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8017668:	230a      	movs	r3, #10
 801766a:	18fb      	adds	r3, r7, r3
 801766c:	881a      	ldrh	r2, [r3, #0]
 801766e:	0013      	movs	r3, r2
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	189b      	adds	r3, r3, r2
 8017674:	00db      	lsls	r3, r3, #3
 8017676:	3369      	adds	r3, #105	@ 0x69
 8017678:	33ff      	adds	r3, #255	@ 0xff
 801767a:	68fa      	ldr	r2, [r7, #12]
 801767c:	18d3      	adds	r3, r2, r3
 801767e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8017680:	2308      	movs	r3, #8
 8017682:	18fb      	adds	r3, r7, r3
 8017684:	881b      	ldrh	r3, [r3, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d107      	bne.n	801769a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801768a:	697b      	ldr	r3, [r7, #20]
 801768c:	2200      	movs	r2, #0
 801768e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	b29a      	uxth	r2, r3
 8017694:	697b      	ldr	r3, [r7, #20]
 8017696:	80da      	strh	r2, [r3, #6]
 8017698:	e00b      	b.n	80176b2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	2201      	movs	r2, #1
 801769e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	b29a      	uxth	r2, r3
 80176a4:	697b      	ldr	r3, [r7, #20]
 80176a6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	0c1b      	lsrs	r3, r3, #16
 80176ac:	b29a      	uxth	r2, r3
 80176ae:	697b      	ldr	r3, [r7, #20]
 80176b0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80176b2:	2300      	movs	r3, #0
}
 80176b4:	0018      	movs	r0, r3
 80176b6:	46bd      	mov	sp, r7
 80176b8:	b007      	add	sp, #28
 80176ba:	bd90      	pop	{r4, r7, pc}

080176bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b084      	sub	sp, #16
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80176ca:	687a      	ldr	r2, [r7, #4]
 80176cc:	23ba      	movs	r3, #186	@ 0xba
 80176ce:	009b      	lsls	r3, r3, #2
 80176d0:	2101      	movs	r1, #1
 80176d2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80176d4:	687a      	ldr	r2, [r7, #4]
 80176d6:	23b8      	movs	r3, #184	@ 0xb8
 80176d8:	009b      	lsls	r3, r3, #2
 80176da:	2100      	movs	r1, #0
 80176dc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	2254      	movs	r2, #84	@ 0x54
 80176e2:	5a9b      	ldrh	r3, [r3, r2]
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	2201      	movs	r2, #1
 80176e8:	4313      	orrs	r3, r2
 80176ea:	b299      	uxth	r1, r3
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2254      	movs	r2, #84	@ 0x54
 80176f0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	2254      	movs	r2, #84	@ 0x54
 80176f6:	5a9b      	ldrh	r3, [r3, r2]
 80176f8:	b29b      	uxth	r3, r3
 80176fa:	2202      	movs	r2, #2
 80176fc:	4313      	orrs	r3, r2
 80176fe:	b299      	uxth	r1, r3
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	2254      	movs	r2, #84	@ 0x54
 8017704:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017706:	2300      	movs	r3, #0
}
 8017708:	0018      	movs	r0, r3
 801770a:	46bd      	mov	sp, r7
 801770c:	b004      	add	sp, #16
 801770e:	bd80      	pop	{r7, pc}

08017710 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b082      	sub	sp, #8
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	000a      	movs	r2, r1
 801771a:	1cfb      	adds	r3, r7, #3
 801771c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801771e:	46c0      	nop			@ (mov r8, r8)
 8017720:	46bd      	mov	sp, r7
 8017722:	b002      	add	sp, #8
 8017724:	bd80      	pop	{r7, pc}
	...

08017728 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801772c:	4b04      	ldr	r3, [pc, #16]	@ (8017740 <HAL_PWR_EnableBkUpAccess+0x18>)
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	4b03      	ldr	r3, [pc, #12]	@ (8017740 <HAL_PWR_EnableBkUpAccess+0x18>)
 8017732:	2180      	movs	r1, #128	@ 0x80
 8017734:	0049      	lsls	r1, r1, #1
 8017736:	430a      	orrs	r2, r1
 8017738:	601a      	str	r2, [r3, #0]
}
 801773a:	46c0      	nop			@ (mov r8, r8)
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}
 8017740:	40007000 	.word	0x40007000

08017744 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8017748:	4b04      	ldr	r3, [pc, #16]	@ (801775c <HAL_PWR_DisableBkUpAccess+0x18>)
 801774a:	681a      	ldr	r2, [r3, #0]
 801774c:	4b03      	ldr	r3, [pc, #12]	@ (801775c <HAL_PWR_DisableBkUpAccess+0x18>)
 801774e:	4904      	ldr	r1, [pc, #16]	@ (8017760 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8017750:	400a      	ands	r2, r1
 8017752:	601a      	str	r2, [r3, #0]
}
 8017754:	46c0      	nop			@ (mov r8, r8)
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}
 801775a:	46c0      	nop			@ (mov r8, r8)
 801775c:	40007000 	.word	0x40007000
 8017760:	fffffeff 	.word	0xfffffeff

08017764 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b086      	sub	sp, #24
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
 801776c:	000a      	movs	r2, r1
 801776e:	1cfb      	adds	r3, r7, #3
 8017770:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8017772:	2300      	movs	r3, #0
 8017774:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8017776:	4b25      	ldr	r3, [pc, #148]	@ (801780c <HAL_PWR_EnterSTOPMode+0xa8>)
 8017778:	681a      	ldr	r2, [r3, #0]
 801777a:	2380      	movs	r3, #128	@ 0x80
 801777c:	009b      	lsls	r3, r3, #2
 801777e:	4013      	ands	r3, r2
 8017780:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8017782:	4b23      	ldr	r3, [pc, #140]	@ (8017810 <HAL_PWR_EnterSTOPMode+0xac>)
 8017784:	6a1b      	ldr	r3, [r3, #32]
 8017786:	2201      	movs	r2, #1
 8017788:	4013      	ands	r3, r2
 801778a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d008      	beq.n	80177a4 <HAL_PWR_EnterSTOPMode+0x40>
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d005      	beq.n	80177a4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8017798:	4b1c      	ldr	r3, [pc, #112]	@ (801780c <HAL_PWR_EnterSTOPMode+0xa8>)
 801779a:	681a      	ldr	r2, [r3, #0]
 801779c:	4b1b      	ldr	r3, [pc, #108]	@ (801780c <HAL_PWR_EnterSTOPMode+0xa8>)
 801779e:	491d      	ldr	r1, [pc, #116]	@ (8017814 <HAL_PWR_EnterSTOPMode+0xb0>)
 80177a0:	400a      	ands	r2, r1
 80177a2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80177a4:	4b19      	ldr	r3, [pc, #100]	@ (801780c <HAL_PWR_EnterSTOPMode+0xa8>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80177aa:	697b      	ldr	r3, [r7, #20]
 80177ac:	2203      	movs	r2, #3
 80177ae:	4393      	bics	r3, r2
 80177b0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80177b2:	697a      	ldr	r2, [r7, #20]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	4313      	orrs	r3, r2
 80177b8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80177ba:	4b14      	ldr	r3, [pc, #80]	@ (801780c <HAL_PWR_EnterSTOPMode+0xa8>)
 80177bc:	697a      	ldr	r2, [r7, #20]
 80177be:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80177c0:	4b15      	ldr	r3, [pc, #84]	@ (8017818 <HAL_PWR_EnterSTOPMode+0xb4>)
 80177c2:	691a      	ldr	r2, [r3, #16]
 80177c4:	4b14      	ldr	r3, [pc, #80]	@ (8017818 <HAL_PWR_EnterSTOPMode+0xb4>)
 80177c6:	2104      	movs	r1, #4
 80177c8:	430a      	orrs	r2, r1
 80177ca:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80177cc:	1cfb      	adds	r3, r7, #3
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	2b01      	cmp	r3, #1
 80177d2:	d101      	bne.n	80177d8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80177d4:	bf30      	wfi
 80177d6:	e002      	b.n	80177de <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80177d8:	bf40      	sev
    __WFE();
 80177da:	bf20      	wfe
    __WFE();
 80177dc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80177de:	4b0e      	ldr	r3, [pc, #56]	@ (8017818 <HAL_PWR_EnterSTOPMode+0xb4>)
 80177e0:	691a      	ldr	r2, [r3, #16]
 80177e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017818 <HAL_PWR_EnterSTOPMode+0xb4>)
 80177e4:	2104      	movs	r1, #4
 80177e6:	438a      	bics	r2, r1
 80177e8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80177ea:	693b      	ldr	r3, [r7, #16]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d009      	beq.n	8017804 <HAL_PWR_EnterSTOPMode+0xa0>
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d006      	beq.n	8017804 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80177f6:	4b05      	ldr	r3, [pc, #20]	@ (801780c <HAL_PWR_EnterSTOPMode+0xa8>)
 80177f8:	681a      	ldr	r2, [r3, #0]
 80177fa:	4b04      	ldr	r3, [pc, #16]	@ (801780c <HAL_PWR_EnterSTOPMode+0xa8>)
 80177fc:	2180      	movs	r1, #128	@ 0x80
 80177fe:	0089      	lsls	r1, r1, #2
 8017800:	430a      	orrs	r2, r1
 8017802:	601a      	str	r2, [r3, #0]
  }
}
 8017804:	46c0      	nop			@ (mov r8, r8)
 8017806:	46bd      	mov	sp, r7
 8017808:	b006      	add	sp, #24
 801780a:	bd80      	pop	{r7, pc}
 801780c:	40007000 	.word	0x40007000
 8017810:	40010000 	.word	0x40010000
 8017814:	fffffdff 	.word	0xfffffdff
 8017818:	e000ed00 	.word	0xe000ed00

0801781c <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8017820:	4b07      	ldr	r3, [pc, #28]	@ (8017840 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	4b06      	ldr	r3, [pc, #24]	@ (8017840 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8017826:	2102      	movs	r1, #2
 8017828:	430a      	orrs	r2, r1
 801782a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801782c:	4b05      	ldr	r3, [pc, #20]	@ (8017844 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801782e:	691a      	ldr	r2, [r3, #16]
 8017830:	4b04      	ldr	r3, [pc, #16]	@ (8017844 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8017832:	2104      	movs	r1, #4
 8017834:	430a      	orrs	r2, r1
 8017836:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8017838:	bf30      	wfi
}
 801783a:	46c0      	nop			@ (mov r8, r8)
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	40007000 	.word	0x40007000
 8017844:	e000ed00 	.word	0xe000ed00

08017848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017848:	b5b0      	push	{r4, r5, r7, lr}
 801784a:	b08a      	sub	sp, #40	@ 0x28
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d102      	bne.n	801785c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8017856:	2301      	movs	r3, #1
 8017858:	f000 fbbf 	bl	8017fda <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801785c:	4bc9      	ldr	r3, [pc, #804]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 801785e:	68db      	ldr	r3, [r3, #12]
 8017860:	220c      	movs	r2, #12
 8017862:	4013      	ands	r3, r2
 8017864:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017866:	4bc7      	ldr	r3, [pc, #796]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017868:	68da      	ldr	r2, [r3, #12]
 801786a:	2380      	movs	r3, #128	@ 0x80
 801786c:	025b      	lsls	r3, r3, #9
 801786e:	4013      	ands	r3, r2
 8017870:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	2201      	movs	r2, #1
 8017878:	4013      	ands	r3, r2
 801787a:	d100      	bne.n	801787e <HAL_RCC_OscConfig+0x36>
 801787c:	e07e      	b.n	801797c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801787e:	69fb      	ldr	r3, [r7, #28]
 8017880:	2b08      	cmp	r3, #8
 8017882:	d007      	beq.n	8017894 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8017884:	69fb      	ldr	r3, [r7, #28]
 8017886:	2b0c      	cmp	r3, #12
 8017888:	d112      	bne.n	80178b0 <HAL_RCC_OscConfig+0x68>
 801788a:	69ba      	ldr	r2, [r7, #24]
 801788c:	2380      	movs	r3, #128	@ 0x80
 801788e:	025b      	lsls	r3, r3, #9
 8017890:	429a      	cmp	r2, r3
 8017892:	d10d      	bne.n	80178b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017894:	4bbb      	ldr	r3, [pc, #748]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017896:	681a      	ldr	r2, [r3, #0]
 8017898:	2380      	movs	r3, #128	@ 0x80
 801789a:	029b      	lsls	r3, r3, #10
 801789c:	4013      	ands	r3, r2
 801789e:	d100      	bne.n	80178a2 <HAL_RCC_OscConfig+0x5a>
 80178a0:	e06b      	b.n	801797a <HAL_RCC_OscConfig+0x132>
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d167      	bne.n	801797a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80178aa:	2301      	movs	r3, #1
 80178ac:	f000 fb95 	bl	8017fda <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	685a      	ldr	r2, [r3, #4]
 80178b4:	2380      	movs	r3, #128	@ 0x80
 80178b6:	025b      	lsls	r3, r3, #9
 80178b8:	429a      	cmp	r2, r3
 80178ba:	d107      	bne.n	80178cc <HAL_RCC_OscConfig+0x84>
 80178bc:	4bb1      	ldr	r3, [pc, #708]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80178be:	681a      	ldr	r2, [r3, #0]
 80178c0:	4bb0      	ldr	r3, [pc, #704]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80178c2:	2180      	movs	r1, #128	@ 0x80
 80178c4:	0249      	lsls	r1, r1, #9
 80178c6:	430a      	orrs	r2, r1
 80178c8:	601a      	str	r2, [r3, #0]
 80178ca:	e027      	b.n	801791c <HAL_RCC_OscConfig+0xd4>
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	685a      	ldr	r2, [r3, #4]
 80178d0:	23a0      	movs	r3, #160	@ 0xa0
 80178d2:	02db      	lsls	r3, r3, #11
 80178d4:	429a      	cmp	r2, r3
 80178d6:	d10e      	bne.n	80178f6 <HAL_RCC_OscConfig+0xae>
 80178d8:	4baa      	ldr	r3, [pc, #680]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80178da:	681a      	ldr	r2, [r3, #0]
 80178dc:	4ba9      	ldr	r3, [pc, #676]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80178de:	2180      	movs	r1, #128	@ 0x80
 80178e0:	02c9      	lsls	r1, r1, #11
 80178e2:	430a      	orrs	r2, r1
 80178e4:	601a      	str	r2, [r3, #0]
 80178e6:	4ba7      	ldr	r3, [pc, #668]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80178e8:	681a      	ldr	r2, [r3, #0]
 80178ea:	4ba6      	ldr	r3, [pc, #664]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80178ec:	2180      	movs	r1, #128	@ 0x80
 80178ee:	0249      	lsls	r1, r1, #9
 80178f0:	430a      	orrs	r2, r1
 80178f2:	601a      	str	r2, [r3, #0]
 80178f4:	e012      	b.n	801791c <HAL_RCC_OscConfig+0xd4>
 80178f6:	4ba3      	ldr	r3, [pc, #652]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80178f8:	681a      	ldr	r2, [r3, #0]
 80178fa:	4ba2      	ldr	r3, [pc, #648]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80178fc:	49a2      	ldr	r1, [pc, #648]	@ (8017b88 <HAL_RCC_OscConfig+0x340>)
 80178fe:	400a      	ands	r2, r1
 8017900:	601a      	str	r2, [r3, #0]
 8017902:	4ba0      	ldr	r3, [pc, #640]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017904:	681a      	ldr	r2, [r3, #0]
 8017906:	2380      	movs	r3, #128	@ 0x80
 8017908:	025b      	lsls	r3, r3, #9
 801790a:	4013      	ands	r3, r2
 801790c:	60fb      	str	r3, [r7, #12]
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	4b9c      	ldr	r3, [pc, #624]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017912:	681a      	ldr	r2, [r3, #0]
 8017914:	4b9b      	ldr	r3, [pc, #620]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017916:	499d      	ldr	r1, [pc, #628]	@ (8017b8c <HAL_RCC_OscConfig+0x344>)
 8017918:	400a      	ands	r2, r1
 801791a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d015      	beq.n	8017950 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017924:	f7f9 fbc8 	bl	80110b8 <HAL_GetTick>
 8017928:	0003      	movs	r3, r0
 801792a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801792c:	e009      	b.n	8017942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801792e:	f7f9 fbc3 	bl	80110b8 <HAL_GetTick>
 8017932:	0002      	movs	r2, r0
 8017934:	697b      	ldr	r3, [r7, #20]
 8017936:	1ad3      	subs	r3, r2, r3
 8017938:	2b64      	cmp	r3, #100	@ 0x64
 801793a:	d902      	bls.n	8017942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801793c:	2303      	movs	r3, #3
 801793e:	f000 fb4c 	bl	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8017942:	4b90      	ldr	r3, [pc, #576]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017944:	681a      	ldr	r2, [r3, #0]
 8017946:	2380      	movs	r3, #128	@ 0x80
 8017948:	029b      	lsls	r3, r3, #10
 801794a:	4013      	ands	r3, r2
 801794c:	d0ef      	beq.n	801792e <HAL_RCC_OscConfig+0xe6>
 801794e:	e015      	b.n	801797c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017950:	f7f9 fbb2 	bl	80110b8 <HAL_GetTick>
 8017954:	0003      	movs	r3, r0
 8017956:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8017958:	e008      	b.n	801796c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801795a:	f7f9 fbad 	bl	80110b8 <HAL_GetTick>
 801795e:	0002      	movs	r2, r0
 8017960:	697b      	ldr	r3, [r7, #20]
 8017962:	1ad3      	subs	r3, r2, r3
 8017964:	2b64      	cmp	r3, #100	@ 0x64
 8017966:	d901      	bls.n	801796c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8017968:	2303      	movs	r3, #3
 801796a:	e336      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801796c:	4b85      	ldr	r3, [pc, #532]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 801796e:	681a      	ldr	r2, [r3, #0]
 8017970:	2380      	movs	r3, #128	@ 0x80
 8017972:	029b      	lsls	r3, r3, #10
 8017974:	4013      	ands	r3, r2
 8017976:	d1f0      	bne.n	801795a <HAL_RCC_OscConfig+0x112>
 8017978:	e000      	b.n	801797c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801797a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	2202      	movs	r2, #2
 8017982:	4013      	ands	r3, r2
 8017984:	d100      	bne.n	8017988 <HAL_RCC_OscConfig+0x140>
 8017986:	e099      	b.n	8017abc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	68db      	ldr	r3, [r3, #12]
 801798c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017990:	2220      	movs	r2, #32
 8017992:	4013      	ands	r3, r2
 8017994:	d009      	beq.n	80179aa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8017996:	4b7b      	ldr	r3, [pc, #492]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017998:	681a      	ldr	r2, [r3, #0]
 801799a:	4b7a      	ldr	r3, [pc, #488]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 801799c:	2120      	movs	r1, #32
 801799e:	430a      	orrs	r2, r1
 80179a0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80179a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179a4:	2220      	movs	r2, #32
 80179a6:	4393      	bics	r3, r2
 80179a8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80179aa:	69fb      	ldr	r3, [r7, #28]
 80179ac:	2b04      	cmp	r3, #4
 80179ae:	d005      	beq.n	80179bc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80179b0:	69fb      	ldr	r3, [r7, #28]
 80179b2:	2b0c      	cmp	r3, #12
 80179b4:	d13e      	bne.n	8017a34 <HAL_RCC_OscConfig+0x1ec>
 80179b6:	69bb      	ldr	r3, [r7, #24]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d13b      	bne.n	8017a34 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80179bc:	4b71      	ldr	r3, [pc, #452]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	2204      	movs	r2, #4
 80179c2:	4013      	ands	r3, r2
 80179c4:	d004      	beq.n	80179d0 <HAL_RCC_OscConfig+0x188>
 80179c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d101      	bne.n	80179d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80179cc:	2301      	movs	r3, #1
 80179ce:	e304      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80179d0:	4b6c      	ldr	r3, [pc, #432]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80179d2:	685b      	ldr	r3, [r3, #4]
 80179d4:	4a6e      	ldr	r2, [pc, #440]	@ (8017b90 <HAL_RCC_OscConfig+0x348>)
 80179d6:	4013      	ands	r3, r2
 80179d8:	0019      	movs	r1, r3
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	691b      	ldr	r3, [r3, #16]
 80179de:	021a      	lsls	r2, r3, #8
 80179e0:	4b68      	ldr	r3, [pc, #416]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80179e2:	430a      	orrs	r2, r1
 80179e4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80179e6:	4b67      	ldr	r3, [pc, #412]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	2209      	movs	r2, #9
 80179ec:	4393      	bics	r3, r2
 80179ee:	0019      	movs	r1, r3
 80179f0:	4b64      	ldr	r3, [pc, #400]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 80179f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179f4:	430a      	orrs	r2, r1
 80179f6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80179f8:	f000 fc42 	bl	8018280 <HAL_RCC_GetSysClockFreq>
 80179fc:	0001      	movs	r1, r0
 80179fe:	4b61      	ldr	r3, [pc, #388]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017a00:	68db      	ldr	r3, [r3, #12]
 8017a02:	091b      	lsrs	r3, r3, #4
 8017a04:	220f      	movs	r2, #15
 8017a06:	4013      	ands	r3, r2
 8017a08:	4a62      	ldr	r2, [pc, #392]	@ (8017b94 <HAL_RCC_OscConfig+0x34c>)
 8017a0a:	5cd3      	ldrb	r3, [r2, r3]
 8017a0c:	000a      	movs	r2, r1
 8017a0e:	40da      	lsrs	r2, r3
 8017a10:	4b61      	ldr	r3, [pc, #388]	@ (8017b98 <HAL_RCC_OscConfig+0x350>)
 8017a12:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8017a14:	4b61      	ldr	r3, [pc, #388]	@ (8017b9c <HAL_RCC_OscConfig+0x354>)
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	2513      	movs	r5, #19
 8017a1a:	197c      	adds	r4, r7, r5
 8017a1c:	0018      	movs	r0, r3
 8017a1e:	f7f9 fb05 	bl	801102c <HAL_InitTick>
 8017a22:	0003      	movs	r3, r0
 8017a24:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8017a26:	197b      	adds	r3, r7, r5
 8017a28:	781b      	ldrb	r3, [r3, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d046      	beq.n	8017abc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8017a2e:	197b      	adds	r3, r7, r5
 8017a30:	781b      	ldrb	r3, [r3, #0]
 8017a32:	e2d2      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8017a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d027      	beq.n	8017a8a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8017a3a:	4b52      	ldr	r3, [pc, #328]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	2209      	movs	r2, #9
 8017a40:	4393      	bics	r3, r2
 8017a42:	0019      	movs	r1, r3
 8017a44:	4b4f      	ldr	r3, [pc, #316]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a48:	430a      	orrs	r2, r1
 8017a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017a4c:	f7f9 fb34 	bl	80110b8 <HAL_GetTick>
 8017a50:	0003      	movs	r3, r0
 8017a52:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017a54:	e008      	b.n	8017a68 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017a56:	f7f9 fb2f 	bl	80110b8 <HAL_GetTick>
 8017a5a:	0002      	movs	r2, r0
 8017a5c:	697b      	ldr	r3, [r7, #20]
 8017a5e:	1ad3      	subs	r3, r2, r3
 8017a60:	2b02      	cmp	r3, #2
 8017a62:	d901      	bls.n	8017a68 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8017a64:	2303      	movs	r3, #3
 8017a66:	e2b8      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017a68:	4b46      	ldr	r3, [pc, #280]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	2204      	movs	r2, #4
 8017a6e:	4013      	ands	r3, r2
 8017a70:	d0f1      	beq.n	8017a56 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017a72:	4b44      	ldr	r3, [pc, #272]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017a74:	685b      	ldr	r3, [r3, #4]
 8017a76:	4a46      	ldr	r2, [pc, #280]	@ (8017b90 <HAL_RCC_OscConfig+0x348>)
 8017a78:	4013      	ands	r3, r2
 8017a7a:	0019      	movs	r1, r3
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	691b      	ldr	r3, [r3, #16]
 8017a80:	021a      	lsls	r2, r3, #8
 8017a82:	4b40      	ldr	r3, [pc, #256]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017a84:	430a      	orrs	r2, r1
 8017a86:	605a      	str	r2, [r3, #4]
 8017a88:	e018      	b.n	8017abc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017a8c:	681a      	ldr	r2, [r3, #0]
 8017a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017a90:	2101      	movs	r1, #1
 8017a92:	438a      	bics	r2, r1
 8017a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017a96:	f7f9 fb0f 	bl	80110b8 <HAL_GetTick>
 8017a9a:	0003      	movs	r3, r0
 8017a9c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8017a9e:	e008      	b.n	8017ab2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017aa0:	f7f9 fb0a 	bl	80110b8 <HAL_GetTick>
 8017aa4:	0002      	movs	r2, r0
 8017aa6:	697b      	ldr	r3, [r7, #20]
 8017aa8:	1ad3      	subs	r3, r2, r3
 8017aaa:	2b02      	cmp	r3, #2
 8017aac:	d901      	bls.n	8017ab2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8017aae:	2303      	movs	r3, #3
 8017ab0:	e293      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8017ab2:	4b34      	ldr	r3, [pc, #208]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	2204      	movs	r2, #4
 8017ab8:	4013      	ands	r3, r2
 8017aba:	d1f1      	bne.n	8017aa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2210      	movs	r2, #16
 8017ac2:	4013      	ands	r3, r2
 8017ac4:	d100      	bne.n	8017ac8 <HAL_RCC_OscConfig+0x280>
 8017ac6:	e0a2      	b.n	8017c0e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8017ac8:	69fb      	ldr	r3, [r7, #28]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d140      	bne.n	8017b50 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8017ace:	4b2d      	ldr	r3, [pc, #180]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017ad0:	681a      	ldr	r2, [r3, #0]
 8017ad2:	2380      	movs	r3, #128	@ 0x80
 8017ad4:	009b      	lsls	r3, r3, #2
 8017ad6:	4013      	ands	r3, r2
 8017ad8:	d005      	beq.n	8017ae6 <HAL_RCC_OscConfig+0x29e>
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	69db      	ldr	r3, [r3, #28]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d101      	bne.n	8017ae6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8017ae2:	2301      	movs	r3, #1
 8017ae4:	e279      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017ae6:	4b27      	ldr	r3, [pc, #156]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017ae8:	685b      	ldr	r3, [r3, #4]
 8017aea:	4a2d      	ldr	r2, [pc, #180]	@ (8017ba0 <HAL_RCC_OscConfig+0x358>)
 8017aec:	4013      	ands	r3, r2
 8017aee:	0019      	movs	r1, r3
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017af4:	4b23      	ldr	r3, [pc, #140]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017af6:	430a      	orrs	r2, r1
 8017af8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017afa:	4b22      	ldr	r3, [pc, #136]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017afc:	685b      	ldr	r3, [r3, #4]
 8017afe:	021b      	lsls	r3, r3, #8
 8017b00:	0a19      	lsrs	r1, r3, #8
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	6a1b      	ldr	r3, [r3, #32]
 8017b06:	061a      	lsls	r2, r3, #24
 8017b08:	4b1e      	ldr	r3, [pc, #120]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017b0a:	430a      	orrs	r2, r1
 8017b0c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b12:	0b5b      	lsrs	r3, r3, #13
 8017b14:	3301      	adds	r3, #1
 8017b16:	2280      	movs	r2, #128	@ 0x80
 8017b18:	0212      	lsls	r2, r2, #8
 8017b1a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8017b1c:	4b19      	ldr	r3, [pc, #100]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017b1e:	68db      	ldr	r3, [r3, #12]
 8017b20:	091b      	lsrs	r3, r3, #4
 8017b22:	210f      	movs	r1, #15
 8017b24:	400b      	ands	r3, r1
 8017b26:	491b      	ldr	r1, [pc, #108]	@ (8017b94 <HAL_RCC_OscConfig+0x34c>)
 8017b28:	5ccb      	ldrb	r3, [r1, r3]
 8017b2a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8017b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8017b98 <HAL_RCC_OscConfig+0x350>)
 8017b2e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8017b30:	4b1a      	ldr	r3, [pc, #104]	@ (8017b9c <HAL_RCC_OscConfig+0x354>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	2513      	movs	r5, #19
 8017b36:	197c      	adds	r4, r7, r5
 8017b38:	0018      	movs	r0, r3
 8017b3a:	f7f9 fa77 	bl	801102c <HAL_InitTick>
 8017b3e:	0003      	movs	r3, r0
 8017b40:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8017b42:	197b      	adds	r3, r7, r5
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d061      	beq.n	8017c0e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8017b4a:	197b      	adds	r3, r7, r5
 8017b4c:	781b      	ldrb	r3, [r3, #0]
 8017b4e:	e244      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	69db      	ldr	r3, [r3, #28]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d040      	beq.n	8017bda <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017b58:	4b0a      	ldr	r3, [pc, #40]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017b5a:	681a      	ldr	r2, [r3, #0]
 8017b5c:	4b09      	ldr	r3, [pc, #36]	@ (8017b84 <HAL_RCC_OscConfig+0x33c>)
 8017b5e:	2180      	movs	r1, #128	@ 0x80
 8017b60:	0049      	lsls	r1, r1, #1
 8017b62:	430a      	orrs	r2, r1
 8017b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017b66:	f7f9 faa7 	bl	80110b8 <HAL_GetTick>
 8017b6a:	0003      	movs	r3, r0
 8017b6c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017b6e:	e019      	b.n	8017ba4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017b70:	f7f9 faa2 	bl	80110b8 <HAL_GetTick>
 8017b74:	0002      	movs	r2, r0
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	1ad3      	subs	r3, r2, r3
 8017b7a:	2b02      	cmp	r3, #2
 8017b7c:	d912      	bls.n	8017ba4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8017b7e:	2303      	movs	r3, #3
 8017b80:	e22b      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
 8017b82:	46c0      	nop			@ (mov r8, r8)
 8017b84:	40021000 	.word	0x40021000
 8017b88:	fffeffff 	.word	0xfffeffff
 8017b8c:	fffbffff 	.word	0xfffbffff
 8017b90:	ffffe0ff 	.word	0xffffe0ff
 8017b94:	08028f5c 	.word	0x08028f5c
 8017b98:	200000e0 	.word	0x200000e0
 8017b9c:	200000f0 	.word	0x200000f0
 8017ba0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017ba4:	4bca      	ldr	r3, [pc, #808]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017ba6:	681a      	ldr	r2, [r3, #0]
 8017ba8:	2380      	movs	r3, #128	@ 0x80
 8017baa:	009b      	lsls	r3, r3, #2
 8017bac:	4013      	ands	r3, r2
 8017bae:	d0df      	beq.n	8017b70 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017bb0:	4bc7      	ldr	r3, [pc, #796]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017bb2:	685b      	ldr	r3, [r3, #4]
 8017bb4:	4ac7      	ldr	r2, [pc, #796]	@ (8017ed4 <HAL_RCC_OscConfig+0x68c>)
 8017bb6:	4013      	ands	r3, r2
 8017bb8:	0019      	movs	r1, r3
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017bbe:	4bc4      	ldr	r3, [pc, #784]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017bc0:	430a      	orrs	r2, r1
 8017bc2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017bc4:	4bc2      	ldr	r3, [pc, #776]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017bc6:	685b      	ldr	r3, [r3, #4]
 8017bc8:	021b      	lsls	r3, r3, #8
 8017bca:	0a19      	lsrs	r1, r3, #8
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6a1b      	ldr	r3, [r3, #32]
 8017bd0:	061a      	lsls	r2, r3, #24
 8017bd2:	4bbf      	ldr	r3, [pc, #764]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017bd4:	430a      	orrs	r2, r1
 8017bd6:	605a      	str	r2, [r3, #4]
 8017bd8:	e019      	b.n	8017c0e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017bda:	4bbd      	ldr	r3, [pc, #756]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017bdc:	681a      	ldr	r2, [r3, #0]
 8017bde:	4bbc      	ldr	r3, [pc, #752]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017be0:	49bd      	ldr	r1, [pc, #756]	@ (8017ed8 <HAL_RCC_OscConfig+0x690>)
 8017be2:	400a      	ands	r2, r1
 8017be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017be6:	f7f9 fa67 	bl	80110b8 <HAL_GetTick>
 8017bea:	0003      	movs	r3, r0
 8017bec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8017bee:	e008      	b.n	8017c02 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017bf0:	f7f9 fa62 	bl	80110b8 <HAL_GetTick>
 8017bf4:	0002      	movs	r2, r0
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	1ad3      	subs	r3, r2, r3
 8017bfa:	2b02      	cmp	r3, #2
 8017bfc:	d901      	bls.n	8017c02 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8017bfe:	2303      	movs	r3, #3
 8017c00:	e1eb      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8017c02:	4bb3      	ldr	r3, [pc, #716]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017c04:	681a      	ldr	r2, [r3, #0]
 8017c06:	2380      	movs	r3, #128	@ 0x80
 8017c08:	009b      	lsls	r3, r3, #2
 8017c0a:	4013      	ands	r3, r2
 8017c0c:	d1f0      	bne.n	8017bf0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	2208      	movs	r2, #8
 8017c14:	4013      	ands	r3, r2
 8017c16:	d036      	beq.n	8017c86 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	695b      	ldr	r3, [r3, #20]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d019      	beq.n	8017c54 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017c20:	4bab      	ldr	r3, [pc, #684]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017c22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c24:	4baa      	ldr	r3, [pc, #680]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017c26:	2101      	movs	r1, #1
 8017c28:	430a      	orrs	r2, r1
 8017c2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017c2c:	f7f9 fa44 	bl	80110b8 <HAL_GetTick>
 8017c30:	0003      	movs	r3, r0
 8017c32:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017c34:	e008      	b.n	8017c48 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017c36:	f7f9 fa3f 	bl	80110b8 <HAL_GetTick>
 8017c3a:	0002      	movs	r2, r0
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	1ad3      	subs	r3, r2, r3
 8017c40:	2b02      	cmp	r3, #2
 8017c42:	d901      	bls.n	8017c48 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8017c44:	2303      	movs	r3, #3
 8017c46:	e1c8      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017c48:	4ba1      	ldr	r3, [pc, #644]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c4c:	2202      	movs	r2, #2
 8017c4e:	4013      	ands	r3, r2
 8017c50:	d0f1      	beq.n	8017c36 <HAL_RCC_OscConfig+0x3ee>
 8017c52:	e018      	b.n	8017c86 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017c54:	4b9e      	ldr	r3, [pc, #632]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017c56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c58:	4b9d      	ldr	r3, [pc, #628]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017c5a:	2101      	movs	r1, #1
 8017c5c:	438a      	bics	r2, r1
 8017c5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017c60:	f7f9 fa2a 	bl	80110b8 <HAL_GetTick>
 8017c64:	0003      	movs	r3, r0
 8017c66:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017c68:	e008      	b.n	8017c7c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017c6a:	f7f9 fa25 	bl	80110b8 <HAL_GetTick>
 8017c6e:	0002      	movs	r2, r0
 8017c70:	697b      	ldr	r3, [r7, #20]
 8017c72:	1ad3      	subs	r3, r2, r3
 8017c74:	2b02      	cmp	r3, #2
 8017c76:	d901      	bls.n	8017c7c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8017c78:	2303      	movs	r3, #3
 8017c7a:	e1ae      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017c7c:	4b94      	ldr	r3, [pc, #592]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c80:	2202      	movs	r2, #2
 8017c82:	4013      	ands	r3, r2
 8017c84:	d1f1      	bne.n	8017c6a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	2204      	movs	r2, #4
 8017c8c:	4013      	ands	r3, r2
 8017c8e:	d100      	bne.n	8017c92 <HAL_RCC_OscConfig+0x44a>
 8017c90:	e0ae      	b.n	8017df0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017c92:	2023      	movs	r0, #35	@ 0x23
 8017c94:	183b      	adds	r3, r7, r0
 8017c96:	2200      	movs	r2, #0
 8017c98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017c9a:	4b8d      	ldr	r3, [pc, #564]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017c9e:	2380      	movs	r3, #128	@ 0x80
 8017ca0:	055b      	lsls	r3, r3, #21
 8017ca2:	4013      	ands	r3, r2
 8017ca4:	d109      	bne.n	8017cba <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017caa:	4b89      	ldr	r3, [pc, #548]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017cac:	2180      	movs	r1, #128	@ 0x80
 8017cae:	0549      	lsls	r1, r1, #21
 8017cb0:	430a      	orrs	r2, r1
 8017cb2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8017cb4:	183b      	adds	r3, r7, r0
 8017cb6:	2201      	movs	r2, #1
 8017cb8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017cba:	4b88      	ldr	r3, [pc, #544]	@ (8017edc <HAL_RCC_OscConfig+0x694>)
 8017cbc:	681a      	ldr	r2, [r3, #0]
 8017cbe:	2380      	movs	r3, #128	@ 0x80
 8017cc0:	005b      	lsls	r3, r3, #1
 8017cc2:	4013      	ands	r3, r2
 8017cc4:	d11a      	bne.n	8017cfc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017cc6:	4b85      	ldr	r3, [pc, #532]	@ (8017edc <HAL_RCC_OscConfig+0x694>)
 8017cc8:	681a      	ldr	r2, [r3, #0]
 8017cca:	4b84      	ldr	r3, [pc, #528]	@ (8017edc <HAL_RCC_OscConfig+0x694>)
 8017ccc:	2180      	movs	r1, #128	@ 0x80
 8017cce:	0049      	lsls	r1, r1, #1
 8017cd0:	430a      	orrs	r2, r1
 8017cd2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017cd4:	f7f9 f9f0 	bl	80110b8 <HAL_GetTick>
 8017cd8:	0003      	movs	r3, r0
 8017cda:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017cdc:	e008      	b.n	8017cf0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017cde:	f7f9 f9eb 	bl	80110b8 <HAL_GetTick>
 8017ce2:	0002      	movs	r2, r0
 8017ce4:	697b      	ldr	r3, [r7, #20]
 8017ce6:	1ad3      	subs	r3, r2, r3
 8017ce8:	2b64      	cmp	r3, #100	@ 0x64
 8017cea:	d901      	bls.n	8017cf0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8017cec:	2303      	movs	r3, #3
 8017cee:	e174      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017cf0:	4b7a      	ldr	r3, [pc, #488]	@ (8017edc <HAL_RCC_OscConfig+0x694>)
 8017cf2:	681a      	ldr	r2, [r3, #0]
 8017cf4:	2380      	movs	r3, #128	@ 0x80
 8017cf6:	005b      	lsls	r3, r3, #1
 8017cf8:	4013      	ands	r3, r2
 8017cfa:	d0f0      	beq.n	8017cde <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	689a      	ldr	r2, [r3, #8]
 8017d00:	2380      	movs	r3, #128	@ 0x80
 8017d02:	005b      	lsls	r3, r3, #1
 8017d04:	429a      	cmp	r2, r3
 8017d06:	d107      	bne.n	8017d18 <HAL_RCC_OscConfig+0x4d0>
 8017d08:	4b71      	ldr	r3, [pc, #452]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d0c:	4b70      	ldr	r3, [pc, #448]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d0e:	2180      	movs	r1, #128	@ 0x80
 8017d10:	0049      	lsls	r1, r1, #1
 8017d12:	430a      	orrs	r2, r1
 8017d14:	651a      	str	r2, [r3, #80]	@ 0x50
 8017d16:	e031      	b.n	8017d7c <HAL_RCC_OscConfig+0x534>
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	689b      	ldr	r3, [r3, #8]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d10c      	bne.n	8017d3a <HAL_RCC_OscConfig+0x4f2>
 8017d20:	4b6b      	ldr	r3, [pc, #428]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d24:	4b6a      	ldr	r3, [pc, #424]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d26:	496c      	ldr	r1, [pc, #432]	@ (8017ed8 <HAL_RCC_OscConfig+0x690>)
 8017d28:	400a      	ands	r2, r1
 8017d2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8017d2c:	4b68      	ldr	r3, [pc, #416]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d30:	4b67      	ldr	r3, [pc, #412]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d32:	496b      	ldr	r1, [pc, #428]	@ (8017ee0 <HAL_RCC_OscConfig+0x698>)
 8017d34:	400a      	ands	r2, r1
 8017d36:	651a      	str	r2, [r3, #80]	@ 0x50
 8017d38:	e020      	b.n	8017d7c <HAL_RCC_OscConfig+0x534>
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	689a      	ldr	r2, [r3, #8]
 8017d3e:	23a0      	movs	r3, #160	@ 0xa0
 8017d40:	00db      	lsls	r3, r3, #3
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d10e      	bne.n	8017d64 <HAL_RCC_OscConfig+0x51c>
 8017d46:	4b62      	ldr	r3, [pc, #392]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d4a:	4b61      	ldr	r3, [pc, #388]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d4c:	2180      	movs	r1, #128	@ 0x80
 8017d4e:	00c9      	lsls	r1, r1, #3
 8017d50:	430a      	orrs	r2, r1
 8017d52:	651a      	str	r2, [r3, #80]	@ 0x50
 8017d54:	4b5e      	ldr	r3, [pc, #376]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d58:	4b5d      	ldr	r3, [pc, #372]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d5a:	2180      	movs	r1, #128	@ 0x80
 8017d5c:	0049      	lsls	r1, r1, #1
 8017d5e:	430a      	orrs	r2, r1
 8017d60:	651a      	str	r2, [r3, #80]	@ 0x50
 8017d62:	e00b      	b.n	8017d7c <HAL_RCC_OscConfig+0x534>
 8017d64:	4b5a      	ldr	r3, [pc, #360]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d68:	4b59      	ldr	r3, [pc, #356]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d6a:	495b      	ldr	r1, [pc, #364]	@ (8017ed8 <HAL_RCC_OscConfig+0x690>)
 8017d6c:	400a      	ands	r2, r1
 8017d6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8017d70:	4b57      	ldr	r3, [pc, #348]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d74:	4b56      	ldr	r3, [pc, #344]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017d76:	495a      	ldr	r1, [pc, #360]	@ (8017ee0 <HAL_RCC_OscConfig+0x698>)
 8017d78:	400a      	ands	r2, r1
 8017d7a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	689b      	ldr	r3, [r3, #8]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d015      	beq.n	8017db0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017d84:	f7f9 f998 	bl	80110b8 <HAL_GetTick>
 8017d88:	0003      	movs	r3, r0
 8017d8a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017d8c:	e009      	b.n	8017da2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017d8e:	f7f9 f993 	bl	80110b8 <HAL_GetTick>
 8017d92:	0002      	movs	r2, r0
 8017d94:	697b      	ldr	r3, [r7, #20]
 8017d96:	1ad3      	subs	r3, r2, r3
 8017d98:	4a52      	ldr	r2, [pc, #328]	@ (8017ee4 <HAL_RCC_OscConfig+0x69c>)
 8017d9a:	4293      	cmp	r3, r2
 8017d9c:	d901      	bls.n	8017da2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8017d9e:	2303      	movs	r3, #3
 8017da0:	e11b      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017da2:	4b4b      	ldr	r3, [pc, #300]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017da4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017da6:	2380      	movs	r3, #128	@ 0x80
 8017da8:	009b      	lsls	r3, r3, #2
 8017daa:	4013      	ands	r3, r2
 8017dac:	d0ef      	beq.n	8017d8e <HAL_RCC_OscConfig+0x546>
 8017dae:	e014      	b.n	8017dda <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017db0:	f7f9 f982 	bl	80110b8 <HAL_GetTick>
 8017db4:	0003      	movs	r3, r0
 8017db6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017db8:	e009      	b.n	8017dce <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017dba:	f7f9 f97d 	bl	80110b8 <HAL_GetTick>
 8017dbe:	0002      	movs	r2, r0
 8017dc0:	697b      	ldr	r3, [r7, #20]
 8017dc2:	1ad3      	subs	r3, r2, r3
 8017dc4:	4a47      	ldr	r2, [pc, #284]	@ (8017ee4 <HAL_RCC_OscConfig+0x69c>)
 8017dc6:	4293      	cmp	r3, r2
 8017dc8:	d901      	bls.n	8017dce <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8017dca:	2303      	movs	r3, #3
 8017dcc:	e105      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017dce:	4b40      	ldr	r3, [pc, #256]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017dd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017dd2:	2380      	movs	r3, #128	@ 0x80
 8017dd4:	009b      	lsls	r3, r3, #2
 8017dd6:	4013      	ands	r3, r2
 8017dd8:	d1ef      	bne.n	8017dba <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8017dda:	2323      	movs	r3, #35	@ 0x23
 8017ddc:	18fb      	adds	r3, r7, r3
 8017dde:	781b      	ldrb	r3, [r3, #0]
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d105      	bne.n	8017df0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017de4:	4b3a      	ldr	r3, [pc, #232]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017de8:	4b39      	ldr	r3, [pc, #228]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017dea:	493f      	ldr	r1, [pc, #252]	@ (8017ee8 <HAL_RCC_OscConfig+0x6a0>)
 8017dec:	400a      	ands	r2, r1
 8017dee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2220      	movs	r2, #32
 8017df6:	4013      	ands	r3, r2
 8017df8:	d049      	beq.n	8017e8e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	699b      	ldr	r3, [r3, #24]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d026      	beq.n	8017e50 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8017e02:	4b33      	ldr	r3, [pc, #204]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017e04:	689a      	ldr	r2, [r3, #8]
 8017e06:	4b32      	ldr	r3, [pc, #200]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017e08:	2101      	movs	r1, #1
 8017e0a:	430a      	orrs	r2, r1
 8017e0c:	609a      	str	r2, [r3, #8]
 8017e0e:	4b30      	ldr	r3, [pc, #192]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017e12:	4b2f      	ldr	r3, [pc, #188]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017e14:	2101      	movs	r1, #1
 8017e16:	430a      	orrs	r2, r1
 8017e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8017e1a:	4b34      	ldr	r3, [pc, #208]	@ (8017eec <HAL_RCC_OscConfig+0x6a4>)
 8017e1c:	6a1a      	ldr	r2, [r3, #32]
 8017e1e:	4b33      	ldr	r3, [pc, #204]	@ (8017eec <HAL_RCC_OscConfig+0x6a4>)
 8017e20:	2180      	movs	r1, #128	@ 0x80
 8017e22:	0189      	lsls	r1, r1, #6
 8017e24:	430a      	orrs	r2, r1
 8017e26:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017e28:	f7f9 f946 	bl	80110b8 <HAL_GetTick>
 8017e2c:	0003      	movs	r3, r0
 8017e2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017e30:	e008      	b.n	8017e44 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017e32:	f7f9 f941 	bl	80110b8 <HAL_GetTick>
 8017e36:	0002      	movs	r2, r0
 8017e38:	697b      	ldr	r3, [r7, #20]
 8017e3a:	1ad3      	subs	r3, r2, r3
 8017e3c:	2b02      	cmp	r3, #2
 8017e3e:	d901      	bls.n	8017e44 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8017e40:	2303      	movs	r3, #3
 8017e42:	e0ca      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017e44:	4b22      	ldr	r3, [pc, #136]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017e46:	689b      	ldr	r3, [r3, #8]
 8017e48:	2202      	movs	r2, #2
 8017e4a:	4013      	ands	r3, r2
 8017e4c:	d0f1      	beq.n	8017e32 <HAL_RCC_OscConfig+0x5ea>
 8017e4e:	e01e      	b.n	8017e8e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8017e50:	4b1f      	ldr	r3, [pc, #124]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017e52:	689a      	ldr	r2, [r3, #8]
 8017e54:	4b1e      	ldr	r3, [pc, #120]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017e56:	2101      	movs	r1, #1
 8017e58:	438a      	bics	r2, r1
 8017e5a:	609a      	str	r2, [r3, #8]
 8017e5c:	4b23      	ldr	r3, [pc, #140]	@ (8017eec <HAL_RCC_OscConfig+0x6a4>)
 8017e5e:	6a1a      	ldr	r2, [r3, #32]
 8017e60:	4b22      	ldr	r3, [pc, #136]	@ (8017eec <HAL_RCC_OscConfig+0x6a4>)
 8017e62:	4923      	ldr	r1, [pc, #140]	@ (8017ef0 <HAL_RCC_OscConfig+0x6a8>)
 8017e64:	400a      	ands	r2, r1
 8017e66:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017e68:	f7f9 f926 	bl	80110b8 <HAL_GetTick>
 8017e6c:	0003      	movs	r3, r0
 8017e6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017e70:	e008      	b.n	8017e84 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017e72:	f7f9 f921 	bl	80110b8 <HAL_GetTick>
 8017e76:	0002      	movs	r2, r0
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	1ad3      	subs	r3, r2, r3
 8017e7c:	2b02      	cmp	r3, #2
 8017e7e:	d901      	bls.n	8017e84 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8017e80:	2303      	movs	r3, #3
 8017e82:	e0aa      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017e84:	4b12      	ldr	r3, [pc, #72]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017e86:	689b      	ldr	r3, [r3, #8]
 8017e88:	2202      	movs	r2, #2
 8017e8a:	4013      	ands	r3, r2
 8017e8c:	d1f1      	bne.n	8017e72 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d100      	bne.n	8017e98 <HAL_RCC_OscConfig+0x650>
 8017e96:	e09f      	b.n	8017fd8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017e98:	69fb      	ldr	r3, [r7, #28]
 8017e9a:	2b0c      	cmp	r3, #12
 8017e9c:	d100      	bne.n	8017ea0 <HAL_RCC_OscConfig+0x658>
 8017e9e:	e078      	b.n	8017f92 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ea4:	2b02      	cmp	r3, #2
 8017ea6:	d159      	bne.n	8017f5c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017ea8:	4b09      	ldr	r3, [pc, #36]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017eaa:	681a      	ldr	r2, [r3, #0]
 8017eac:	4b08      	ldr	r3, [pc, #32]	@ (8017ed0 <HAL_RCC_OscConfig+0x688>)
 8017eae:	4911      	ldr	r1, [pc, #68]	@ (8017ef4 <HAL_RCC_OscConfig+0x6ac>)
 8017eb0:	400a      	ands	r2, r1
 8017eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017eb4:	f7f9 f900 	bl	80110b8 <HAL_GetTick>
 8017eb8:	0003      	movs	r3, r0
 8017eba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017ebc:	e01c      	b.n	8017ef8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017ebe:	f7f9 f8fb 	bl	80110b8 <HAL_GetTick>
 8017ec2:	0002      	movs	r2, r0
 8017ec4:	697b      	ldr	r3, [r7, #20]
 8017ec6:	1ad3      	subs	r3, r2, r3
 8017ec8:	2b02      	cmp	r3, #2
 8017eca:	d915      	bls.n	8017ef8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8017ecc:	2303      	movs	r3, #3
 8017ece:	e084      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
 8017ed0:	40021000 	.word	0x40021000
 8017ed4:	ffff1fff 	.word	0xffff1fff
 8017ed8:	fffffeff 	.word	0xfffffeff
 8017edc:	40007000 	.word	0x40007000
 8017ee0:	fffffbff 	.word	0xfffffbff
 8017ee4:	00001388 	.word	0x00001388
 8017ee8:	efffffff 	.word	0xefffffff
 8017eec:	40010000 	.word	0x40010000
 8017ef0:	ffffdfff 	.word	0xffffdfff
 8017ef4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017efa:	681a      	ldr	r2, [r3, #0]
 8017efc:	2380      	movs	r3, #128	@ 0x80
 8017efe:	049b      	lsls	r3, r3, #18
 8017f00:	4013      	ands	r3, r2
 8017f02:	d1dc      	bne.n	8017ebe <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017f04:	4b37      	ldr	r3, [pc, #220]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017f06:	68db      	ldr	r3, [r3, #12]
 8017f08:	4a37      	ldr	r2, [pc, #220]	@ (8017fe8 <HAL_RCC_OscConfig+0x7a0>)
 8017f0a:	4013      	ands	r3, r2
 8017f0c:	0019      	movs	r1, r3
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f16:	431a      	orrs	r2, r3
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017f1c:	431a      	orrs	r2, r3
 8017f1e:	4b31      	ldr	r3, [pc, #196]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017f20:	430a      	orrs	r2, r1
 8017f22:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017f24:	4b2f      	ldr	r3, [pc, #188]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017f26:	681a      	ldr	r2, [r3, #0]
 8017f28:	4b2e      	ldr	r3, [pc, #184]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017f2a:	2180      	movs	r1, #128	@ 0x80
 8017f2c:	0449      	lsls	r1, r1, #17
 8017f2e:	430a      	orrs	r2, r1
 8017f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017f32:	f7f9 f8c1 	bl	80110b8 <HAL_GetTick>
 8017f36:	0003      	movs	r3, r0
 8017f38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8017f3a:	e008      	b.n	8017f4e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017f3c:	f7f9 f8bc 	bl	80110b8 <HAL_GetTick>
 8017f40:	0002      	movs	r2, r0
 8017f42:	697b      	ldr	r3, [r7, #20]
 8017f44:	1ad3      	subs	r3, r2, r3
 8017f46:	2b02      	cmp	r3, #2
 8017f48:	d901      	bls.n	8017f4e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8017f4a:	2303      	movs	r3, #3
 8017f4c:	e045      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8017f4e:	4b25      	ldr	r3, [pc, #148]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017f50:	681a      	ldr	r2, [r3, #0]
 8017f52:	2380      	movs	r3, #128	@ 0x80
 8017f54:	049b      	lsls	r3, r3, #18
 8017f56:	4013      	ands	r3, r2
 8017f58:	d0f0      	beq.n	8017f3c <HAL_RCC_OscConfig+0x6f4>
 8017f5a:	e03d      	b.n	8017fd8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017f5c:	4b21      	ldr	r3, [pc, #132]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017f5e:	681a      	ldr	r2, [r3, #0]
 8017f60:	4b20      	ldr	r3, [pc, #128]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017f62:	4922      	ldr	r1, [pc, #136]	@ (8017fec <HAL_RCC_OscConfig+0x7a4>)
 8017f64:	400a      	ands	r2, r1
 8017f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017f68:	f7f9 f8a6 	bl	80110b8 <HAL_GetTick>
 8017f6c:	0003      	movs	r3, r0
 8017f6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017f70:	e008      	b.n	8017f84 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017f72:	f7f9 f8a1 	bl	80110b8 <HAL_GetTick>
 8017f76:	0002      	movs	r2, r0
 8017f78:	697b      	ldr	r3, [r7, #20]
 8017f7a:	1ad3      	subs	r3, r2, r3
 8017f7c:	2b02      	cmp	r3, #2
 8017f7e:	d901      	bls.n	8017f84 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8017f80:	2303      	movs	r3, #3
 8017f82:	e02a      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017f84:	4b17      	ldr	r3, [pc, #92]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017f86:	681a      	ldr	r2, [r3, #0]
 8017f88:	2380      	movs	r3, #128	@ 0x80
 8017f8a:	049b      	lsls	r3, r3, #18
 8017f8c:	4013      	ands	r3, r2
 8017f8e:	d1f0      	bne.n	8017f72 <HAL_RCC_OscConfig+0x72a>
 8017f90:	e022      	b.n	8017fd8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f96:	2b01      	cmp	r3, #1
 8017f98:	d101      	bne.n	8017f9e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	e01d      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8017f9e:	4b11      	ldr	r3, [pc, #68]	@ (8017fe4 <HAL_RCC_OscConfig+0x79c>)
 8017fa0:	68db      	ldr	r3, [r3, #12]
 8017fa2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017fa4:	69ba      	ldr	r2, [r7, #24]
 8017fa6:	2380      	movs	r3, #128	@ 0x80
 8017fa8:	025b      	lsls	r3, r3, #9
 8017faa:	401a      	ands	r2, r3
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d10f      	bne.n	8017fd4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017fb4:	69ba      	ldr	r2, [r7, #24]
 8017fb6:	23f0      	movs	r3, #240	@ 0xf0
 8017fb8:	039b      	lsls	r3, r3, #14
 8017fba:	401a      	ands	r2, r3
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d107      	bne.n	8017fd4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8017fc4:	69ba      	ldr	r2, [r7, #24]
 8017fc6:	23c0      	movs	r3, #192	@ 0xc0
 8017fc8:	041b      	lsls	r3, r3, #16
 8017fca:	401a      	ands	r2, r3
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d001      	beq.n	8017fd8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	e000      	b.n	8017fda <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8017fd8:	2300      	movs	r3, #0
}
 8017fda:	0018      	movs	r0, r3
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	b00a      	add	sp, #40	@ 0x28
 8017fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8017fe2:	46c0      	nop			@ (mov r8, r8)
 8017fe4:	40021000 	.word	0x40021000
 8017fe8:	ff02ffff 	.word	0xff02ffff
 8017fec:	feffffff 	.word	0xfeffffff

08017ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017ff0:	b5b0      	push	{r4, r5, r7, lr}
 8017ff2:	b084      	sub	sp, #16
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
 8017ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d101      	bne.n	8018004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018000:	2301      	movs	r3, #1
 8018002:	e128      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018004:	4b96      	ldr	r3, [pc, #600]	@ (8018260 <HAL_RCC_ClockConfig+0x270>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	2201      	movs	r2, #1
 801800a:	4013      	ands	r3, r2
 801800c:	683a      	ldr	r2, [r7, #0]
 801800e:	429a      	cmp	r2, r3
 8018010:	d91e      	bls.n	8018050 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018012:	4b93      	ldr	r3, [pc, #588]	@ (8018260 <HAL_RCC_ClockConfig+0x270>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	2201      	movs	r2, #1
 8018018:	4393      	bics	r3, r2
 801801a:	0019      	movs	r1, r3
 801801c:	4b90      	ldr	r3, [pc, #576]	@ (8018260 <HAL_RCC_ClockConfig+0x270>)
 801801e:	683a      	ldr	r2, [r7, #0]
 8018020:	430a      	orrs	r2, r1
 8018022:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8018024:	f7f9 f848 	bl	80110b8 <HAL_GetTick>
 8018028:	0003      	movs	r3, r0
 801802a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801802c:	e009      	b.n	8018042 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801802e:	f7f9 f843 	bl	80110b8 <HAL_GetTick>
 8018032:	0002      	movs	r2, r0
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	1ad3      	subs	r3, r2, r3
 8018038:	4a8a      	ldr	r2, [pc, #552]	@ (8018264 <HAL_RCC_ClockConfig+0x274>)
 801803a:	4293      	cmp	r3, r2
 801803c:	d901      	bls.n	8018042 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801803e:	2303      	movs	r3, #3
 8018040:	e109      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018042:	4b87      	ldr	r3, [pc, #540]	@ (8018260 <HAL_RCC_ClockConfig+0x270>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	2201      	movs	r2, #1
 8018048:	4013      	ands	r3, r2
 801804a:	683a      	ldr	r2, [r7, #0]
 801804c:	429a      	cmp	r2, r3
 801804e:	d1ee      	bne.n	801802e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	2202      	movs	r2, #2
 8018056:	4013      	ands	r3, r2
 8018058:	d009      	beq.n	801806e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801805a:	4b83      	ldr	r3, [pc, #524]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 801805c:	68db      	ldr	r3, [r3, #12]
 801805e:	22f0      	movs	r2, #240	@ 0xf0
 8018060:	4393      	bics	r3, r2
 8018062:	0019      	movs	r1, r3
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	689a      	ldr	r2, [r3, #8]
 8018068:	4b7f      	ldr	r3, [pc, #508]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 801806a:	430a      	orrs	r2, r1
 801806c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	2201      	movs	r2, #1
 8018074:	4013      	ands	r3, r2
 8018076:	d100      	bne.n	801807a <HAL_RCC_ClockConfig+0x8a>
 8018078:	e089      	b.n	801818e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	2b02      	cmp	r3, #2
 8018080:	d107      	bne.n	8018092 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8018082:	4b79      	ldr	r3, [pc, #484]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 8018084:	681a      	ldr	r2, [r3, #0]
 8018086:	2380      	movs	r3, #128	@ 0x80
 8018088:	029b      	lsls	r3, r3, #10
 801808a:	4013      	ands	r3, r2
 801808c:	d120      	bne.n	80180d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801808e:	2301      	movs	r3, #1
 8018090:	e0e1      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	685b      	ldr	r3, [r3, #4]
 8018096:	2b03      	cmp	r3, #3
 8018098:	d107      	bne.n	80180aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801809a:	4b73      	ldr	r3, [pc, #460]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 801809c:	681a      	ldr	r2, [r3, #0]
 801809e:	2380      	movs	r3, #128	@ 0x80
 80180a0:	049b      	lsls	r3, r3, #18
 80180a2:	4013      	ands	r3, r2
 80180a4:	d114      	bne.n	80180d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80180a6:	2301      	movs	r3, #1
 80180a8:	e0d5      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	685b      	ldr	r3, [r3, #4]
 80180ae:	2b01      	cmp	r3, #1
 80180b0:	d106      	bne.n	80180c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80180b2:	4b6d      	ldr	r3, [pc, #436]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	2204      	movs	r2, #4
 80180b8:	4013      	ands	r3, r2
 80180ba:	d109      	bne.n	80180d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80180bc:	2301      	movs	r3, #1
 80180be:	e0ca      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80180c0:	4b69      	ldr	r3, [pc, #420]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	2380      	movs	r3, #128	@ 0x80
 80180c6:	009b      	lsls	r3, r3, #2
 80180c8:	4013      	ands	r3, r2
 80180ca:	d101      	bne.n	80180d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80180cc:	2301      	movs	r3, #1
 80180ce:	e0c2      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80180d0:	4b65      	ldr	r3, [pc, #404]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 80180d2:	68db      	ldr	r3, [r3, #12]
 80180d4:	2203      	movs	r2, #3
 80180d6:	4393      	bics	r3, r2
 80180d8:	0019      	movs	r1, r3
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	685a      	ldr	r2, [r3, #4]
 80180de:	4b62      	ldr	r3, [pc, #392]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 80180e0:	430a      	orrs	r2, r1
 80180e2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80180e4:	f7f8 ffe8 	bl	80110b8 <HAL_GetTick>
 80180e8:	0003      	movs	r3, r0
 80180ea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	685b      	ldr	r3, [r3, #4]
 80180f0:	2b02      	cmp	r3, #2
 80180f2:	d111      	bne.n	8018118 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80180f4:	e009      	b.n	801810a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80180f6:	f7f8 ffdf 	bl	80110b8 <HAL_GetTick>
 80180fa:	0002      	movs	r2, r0
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	1ad3      	subs	r3, r2, r3
 8018100:	4a58      	ldr	r2, [pc, #352]	@ (8018264 <HAL_RCC_ClockConfig+0x274>)
 8018102:	4293      	cmp	r3, r2
 8018104:	d901      	bls.n	801810a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8018106:	2303      	movs	r3, #3
 8018108:	e0a5      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801810a:	4b57      	ldr	r3, [pc, #348]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 801810c:	68db      	ldr	r3, [r3, #12]
 801810e:	220c      	movs	r2, #12
 8018110:	4013      	ands	r3, r2
 8018112:	2b08      	cmp	r3, #8
 8018114:	d1ef      	bne.n	80180f6 <HAL_RCC_ClockConfig+0x106>
 8018116:	e03a      	b.n	801818e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	2b03      	cmp	r3, #3
 801811e:	d111      	bne.n	8018144 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018120:	e009      	b.n	8018136 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018122:	f7f8 ffc9 	bl	80110b8 <HAL_GetTick>
 8018126:	0002      	movs	r2, r0
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	1ad3      	subs	r3, r2, r3
 801812c:	4a4d      	ldr	r2, [pc, #308]	@ (8018264 <HAL_RCC_ClockConfig+0x274>)
 801812e:	4293      	cmp	r3, r2
 8018130:	d901      	bls.n	8018136 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8018132:	2303      	movs	r3, #3
 8018134:	e08f      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018136:	4b4c      	ldr	r3, [pc, #304]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 8018138:	68db      	ldr	r3, [r3, #12]
 801813a:	220c      	movs	r2, #12
 801813c:	4013      	ands	r3, r2
 801813e:	2b0c      	cmp	r3, #12
 8018140:	d1ef      	bne.n	8018122 <HAL_RCC_ClockConfig+0x132>
 8018142:	e024      	b.n	801818e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	685b      	ldr	r3, [r3, #4]
 8018148:	2b01      	cmp	r3, #1
 801814a:	d11b      	bne.n	8018184 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801814c:	e009      	b.n	8018162 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801814e:	f7f8 ffb3 	bl	80110b8 <HAL_GetTick>
 8018152:	0002      	movs	r2, r0
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	1ad3      	subs	r3, r2, r3
 8018158:	4a42      	ldr	r2, [pc, #264]	@ (8018264 <HAL_RCC_ClockConfig+0x274>)
 801815a:	4293      	cmp	r3, r2
 801815c:	d901      	bls.n	8018162 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801815e:	2303      	movs	r3, #3
 8018160:	e079      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8018162:	4b41      	ldr	r3, [pc, #260]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 8018164:	68db      	ldr	r3, [r3, #12]
 8018166:	220c      	movs	r2, #12
 8018168:	4013      	ands	r3, r2
 801816a:	2b04      	cmp	r3, #4
 801816c:	d1ef      	bne.n	801814e <HAL_RCC_ClockConfig+0x15e>
 801816e:	e00e      	b.n	801818e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018170:	f7f8 ffa2 	bl	80110b8 <HAL_GetTick>
 8018174:	0002      	movs	r2, r0
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	1ad3      	subs	r3, r2, r3
 801817a:	4a3a      	ldr	r2, [pc, #232]	@ (8018264 <HAL_RCC_ClockConfig+0x274>)
 801817c:	4293      	cmp	r3, r2
 801817e:	d901      	bls.n	8018184 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8018180:	2303      	movs	r3, #3
 8018182:	e068      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8018184:	4b38      	ldr	r3, [pc, #224]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 8018186:	68db      	ldr	r3, [r3, #12]
 8018188:	220c      	movs	r2, #12
 801818a:	4013      	ands	r3, r2
 801818c:	d1f0      	bne.n	8018170 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801818e:	4b34      	ldr	r3, [pc, #208]	@ (8018260 <HAL_RCC_ClockConfig+0x270>)
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	2201      	movs	r2, #1
 8018194:	4013      	ands	r3, r2
 8018196:	683a      	ldr	r2, [r7, #0]
 8018198:	429a      	cmp	r2, r3
 801819a:	d21e      	bcs.n	80181da <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801819c:	4b30      	ldr	r3, [pc, #192]	@ (8018260 <HAL_RCC_ClockConfig+0x270>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	2201      	movs	r2, #1
 80181a2:	4393      	bics	r3, r2
 80181a4:	0019      	movs	r1, r3
 80181a6:	4b2e      	ldr	r3, [pc, #184]	@ (8018260 <HAL_RCC_ClockConfig+0x270>)
 80181a8:	683a      	ldr	r2, [r7, #0]
 80181aa:	430a      	orrs	r2, r1
 80181ac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80181ae:	f7f8 ff83 	bl	80110b8 <HAL_GetTick>
 80181b2:	0003      	movs	r3, r0
 80181b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80181b6:	e009      	b.n	80181cc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80181b8:	f7f8 ff7e 	bl	80110b8 <HAL_GetTick>
 80181bc:	0002      	movs	r2, r0
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	1ad3      	subs	r3, r2, r3
 80181c2:	4a28      	ldr	r2, [pc, #160]	@ (8018264 <HAL_RCC_ClockConfig+0x274>)
 80181c4:	4293      	cmp	r3, r2
 80181c6:	d901      	bls.n	80181cc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80181c8:	2303      	movs	r3, #3
 80181ca:	e044      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80181cc:	4b24      	ldr	r3, [pc, #144]	@ (8018260 <HAL_RCC_ClockConfig+0x270>)
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2201      	movs	r2, #1
 80181d2:	4013      	ands	r3, r2
 80181d4:	683a      	ldr	r2, [r7, #0]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d1ee      	bne.n	80181b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	2204      	movs	r2, #4
 80181e0:	4013      	ands	r3, r2
 80181e2:	d009      	beq.n	80181f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80181e4:	4b20      	ldr	r3, [pc, #128]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 80181e6:	68db      	ldr	r3, [r3, #12]
 80181e8:	4a20      	ldr	r2, [pc, #128]	@ (801826c <HAL_RCC_ClockConfig+0x27c>)
 80181ea:	4013      	ands	r3, r2
 80181ec:	0019      	movs	r1, r3
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	68da      	ldr	r2, [r3, #12]
 80181f2:	4b1d      	ldr	r3, [pc, #116]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 80181f4:	430a      	orrs	r2, r1
 80181f6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	2208      	movs	r2, #8
 80181fe:	4013      	ands	r3, r2
 8018200:	d00a      	beq.n	8018218 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8018202:	4b19      	ldr	r3, [pc, #100]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 8018204:	68db      	ldr	r3, [r3, #12]
 8018206:	4a1a      	ldr	r2, [pc, #104]	@ (8018270 <HAL_RCC_ClockConfig+0x280>)
 8018208:	4013      	ands	r3, r2
 801820a:	0019      	movs	r1, r3
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	691b      	ldr	r3, [r3, #16]
 8018210:	00da      	lsls	r2, r3, #3
 8018212:	4b15      	ldr	r3, [pc, #84]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 8018214:	430a      	orrs	r2, r1
 8018216:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8018218:	f000 f832 	bl	8018280 <HAL_RCC_GetSysClockFreq>
 801821c:	0001      	movs	r1, r0
 801821e:	4b12      	ldr	r3, [pc, #72]	@ (8018268 <HAL_RCC_ClockConfig+0x278>)
 8018220:	68db      	ldr	r3, [r3, #12]
 8018222:	091b      	lsrs	r3, r3, #4
 8018224:	220f      	movs	r2, #15
 8018226:	4013      	ands	r3, r2
 8018228:	4a12      	ldr	r2, [pc, #72]	@ (8018274 <HAL_RCC_ClockConfig+0x284>)
 801822a:	5cd3      	ldrb	r3, [r2, r3]
 801822c:	000a      	movs	r2, r1
 801822e:	40da      	lsrs	r2, r3
 8018230:	4b11      	ldr	r3, [pc, #68]	@ (8018278 <HAL_RCC_ClockConfig+0x288>)
 8018232:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8018234:	4b11      	ldr	r3, [pc, #68]	@ (801827c <HAL_RCC_ClockConfig+0x28c>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	250b      	movs	r5, #11
 801823a:	197c      	adds	r4, r7, r5
 801823c:	0018      	movs	r0, r3
 801823e:	f7f8 fef5 	bl	801102c <HAL_InitTick>
 8018242:	0003      	movs	r3, r0
 8018244:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8018246:	197b      	adds	r3, r7, r5
 8018248:	781b      	ldrb	r3, [r3, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d002      	beq.n	8018254 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801824e:	197b      	adds	r3, r7, r5
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	e000      	b.n	8018256 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8018254:	2300      	movs	r3, #0
}
 8018256:	0018      	movs	r0, r3
 8018258:	46bd      	mov	sp, r7
 801825a:	b004      	add	sp, #16
 801825c:	bdb0      	pop	{r4, r5, r7, pc}
 801825e:	46c0      	nop			@ (mov r8, r8)
 8018260:	40022000 	.word	0x40022000
 8018264:	00001388 	.word	0x00001388
 8018268:	40021000 	.word	0x40021000
 801826c:	fffff8ff 	.word	0xfffff8ff
 8018270:	ffffc7ff 	.word	0xffffc7ff
 8018274:	08028f5c 	.word	0x08028f5c
 8018278:	200000e0 	.word	0x200000e0
 801827c:	200000f0 	.word	0x200000f0

08018280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018280:	b5b0      	push	{r4, r5, r7, lr}
 8018282:	b08e      	sub	sp, #56	@ 0x38
 8018284:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8018286:	4b4c      	ldr	r3, [pc, #304]	@ (80183b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8018288:	68db      	ldr	r3, [r3, #12]
 801828a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801828c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801828e:	230c      	movs	r3, #12
 8018290:	4013      	ands	r3, r2
 8018292:	2b0c      	cmp	r3, #12
 8018294:	d014      	beq.n	80182c0 <HAL_RCC_GetSysClockFreq+0x40>
 8018296:	d900      	bls.n	801829a <HAL_RCC_GetSysClockFreq+0x1a>
 8018298:	e07b      	b.n	8018392 <HAL_RCC_GetSysClockFreq+0x112>
 801829a:	2b04      	cmp	r3, #4
 801829c:	d002      	beq.n	80182a4 <HAL_RCC_GetSysClockFreq+0x24>
 801829e:	2b08      	cmp	r3, #8
 80182a0:	d00b      	beq.n	80182ba <HAL_RCC_GetSysClockFreq+0x3a>
 80182a2:	e076      	b.n	8018392 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80182a4:	4b44      	ldr	r3, [pc, #272]	@ (80183b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	2210      	movs	r2, #16
 80182aa:	4013      	ands	r3, r2
 80182ac:	d002      	beq.n	80182b4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80182ae:	4b43      	ldr	r3, [pc, #268]	@ (80183bc <HAL_RCC_GetSysClockFreq+0x13c>)
 80182b0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80182b2:	e07c      	b.n	80183ae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80182b4:	4b42      	ldr	r3, [pc, #264]	@ (80183c0 <HAL_RCC_GetSysClockFreq+0x140>)
 80182b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80182b8:	e079      	b.n	80183ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80182ba:	4b42      	ldr	r3, [pc, #264]	@ (80183c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80182bc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80182be:	e076      	b.n	80183ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80182c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182c2:	0c9a      	lsrs	r2, r3, #18
 80182c4:	230f      	movs	r3, #15
 80182c6:	401a      	ands	r2, r3
 80182c8:	4b3f      	ldr	r3, [pc, #252]	@ (80183c8 <HAL_RCC_GetSysClockFreq+0x148>)
 80182ca:	5c9b      	ldrb	r3, [r3, r2]
 80182cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80182ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182d0:	0d9a      	lsrs	r2, r3, #22
 80182d2:	2303      	movs	r3, #3
 80182d4:	4013      	ands	r3, r2
 80182d6:	3301      	adds	r3, #1
 80182d8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80182da:	4b37      	ldr	r3, [pc, #220]	@ (80183b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80182dc:	68da      	ldr	r2, [r3, #12]
 80182de:	2380      	movs	r3, #128	@ 0x80
 80182e0:	025b      	lsls	r3, r3, #9
 80182e2:	4013      	ands	r3, r2
 80182e4:	d01a      	beq.n	801831c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80182e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182e8:	61bb      	str	r3, [r7, #24]
 80182ea:	2300      	movs	r3, #0
 80182ec:	61fb      	str	r3, [r7, #28]
 80182ee:	4a35      	ldr	r2, [pc, #212]	@ (80183c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80182f0:	2300      	movs	r3, #0
 80182f2:	69b8      	ldr	r0, [r7, #24]
 80182f4:	69f9      	ldr	r1, [r7, #28]
 80182f6:	f7e8 f963 	bl	80005c0 <__aeabi_lmul>
 80182fa:	0002      	movs	r2, r0
 80182fc:	000b      	movs	r3, r1
 80182fe:	0010      	movs	r0, r2
 8018300:	0019      	movs	r1, r3
 8018302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018304:	613b      	str	r3, [r7, #16]
 8018306:	2300      	movs	r3, #0
 8018308:	617b      	str	r3, [r7, #20]
 801830a:	693a      	ldr	r2, [r7, #16]
 801830c:	697b      	ldr	r3, [r7, #20]
 801830e:	f7e8 f937 	bl	8000580 <__aeabi_uldivmod>
 8018312:	0002      	movs	r2, r0
 8018314:	000b      	movs	r3, r1
 8018316:	0013      	movs	r3, r2
 8018318:	637b      	str	r3, [r7, #52]	@ 0x34
 801831a:	e037      	b.n	801838c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801831c:	4b26      	ldr	r3, [pc, #152]	@ (80183b8 <HAL_RCC_GetSysClockFreq+0x138>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	2210      	movs	r2, #16
 8018322:	4013      	ands	r3, r2
 8018324:	d01a      	beq.n	801835c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8018326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018328:	60bb      	str	r3, [r7, #8]
 801832a:	2300      	movs	r3, #0
 801832c:	60fb      	str	r3, [r7, #12]
 801832e:	4a23      	ldr	r2, [pc, #140]	@ (80183bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8018330:	2300      	movs	r3, #0
 8018332:	68b8      	ldr	r0, [r7, #8]
 8018334:	68f9      	ldr	r1, [r7, #12]
 8018336:	f7e8 f943 	bl	80005c0 <__aeabi_lmul>
 801833a:	0002      	movs	r2, r0
 801833c:	000b      	movs	r3, r1
 801833e:	0010      	movs	r0, r2
 8018340:	0019      	movs	r1, r3
 8018342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018344:	603b      	str	r3, [r7, #0]
 8018346:	2300      	movs	r3, #0
 8018348:	607b      	str	r3, [r7, #4]
 801834a:	683a      	ldr	r2, [r7, #0]
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	f7e8 f917 	bl	8000580 <__aeabi_uldivmod>
 8018352:	0002      	movs	r2, r0
 8018354:	000b      	movs	r3, r1
 8018356:	0013      	movs	r3, r2
 8018358:	637b      	str	r3, [r7, #52]	@ 0x34
 801835a:	e017      	b.n	801838c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801835e:	0018      	movs	r0, r3
 8018360:	2300      	movs	r3, #0
 8018362:	0019      	movs	r1, r3
 8018364:	4a16      	ldr	r2, [pc, #88]	@ (80183c0 <HAL_RCC_GetSysClockFreq+0x140>)
 8018366:	2300      	movs	r3, #0
 8018368:	f7e8 f92a 	bl	80005c0 <__aeabi_lmul>
 801836c:	0002      	movs	r2, r0
 801836e:	000b      	movs	r3, r1
 8018370:	0010      	movs	r0, r2
 8018372:	0019      	movs	r1, r3
 8018374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018376:	001c      	movs	r4, r3
 8018378:	2300      	movs	r3, #0
 801837a:	001d      	movs	r5, r3
 801837c:	0022      	movs	r2, r4
 801837e:	002b      	movs	r3, r5
 8018380:	f7e8 f8fe 	bl	8000580 <__aeabi_uldivmod>
 8018384:	0002      	movs	r2, r0
 8018386:	000b      	movs	r3, r1
 8018388:	0013      	movs	r3, r2
 801838a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801838e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8018390:	e00d      	b.n	80183ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8018392:	4b09      	ldr	r3, [pc, #36]	@ (80183b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8018394:	685b      	ldr	r3, [r3, #4]
 8018396:	0b5b      	lsrs	r3, r3, #13
 8018398:	2207      	movs	r2, #7
 801839a:	4013      	ands	r3, r2
 801839c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801839e:	6a3b      	ldr	r3, [r7, #32]
 80183a0:	3301      	adds	r3, #1
 80183a2:	2280      	movs	r2, #128	@ 0x80
 80183a4:	0212      	lsls	r2, r2, #8
 80183a6:	409a      	lsls	r2, r3
 80183a8:	0013      	movs	r3, r2
 80183aa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80183ac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80183ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80183b0:	0018      	movs	r0, r3
 80183b2:	46bd      	mov	sp, r7
 80183b4:	b00e      	add	sp, #56	@ 0x38
 80183b6:	bdb0      	pop	{r4, r5, r7, pc}
 80183b8:	40021000 	.word	0x40021000
 80183bc:	003d0900 	.word	0x003d0900
 80183c0:	00f42400 	.word	0x00f42400
 80183c4:	007a1200 	.word	0x007a1200
 80183c8:	08028f74 	.word	0x08028f74

080183cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80183d0:	4b02      	ldr	r3, [pc, #8]	@ (80183dc <HAL_RCC_GetHCLKFreq+0x10>)
 80183d2:	681b      	ldr	r3, [r3, #0]
}
 80183d4:	0018      	movs	r0, r3
 80183d6:	46bd      	mov	sp, r7
 80183d8:	bd80      	pop	{r7, pc}
 80183da:	46c0      	nop			@ (mov r8, r8)
 80183dc:	200000e0 	.word	0x200000e0

080183e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80183e4:	f7ff fff2 	bl	80183cc <HAL_RCC_GetHCLKFreq>
 80183e8:	0001      	movs	r1, r0
 80183ea:	4b06      	ldr	r3, [pc, #24]	@ (8018404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80183ec:	68db      	ldr	r3, [r3, #12]
 80183ee:	0a1b      	lsrs	r3, r3, #8
 80183f0:	2207      	movs	r2, #7
 80183f2:	4013      	ands	r3, r2
 80183f4:	4a04      	ldr	r2, [pc, #16]	@ (8018408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80183f6:	5cd3      	ldrb	r3, [r2, r3]
 80183f8:	40d9      	lsrs	r1, r3
 80183fa:	000b      	movs	r3, r1
}
 80183fc:	0018      	movs	r0, r3
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
 8018402:	46c0      	nop			@ (mov r8, r8)
 8018404:	40021000 	.word	0x40021000
 8018408:	08028f6c 	.word	0x08028f6c

0801840c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8018410:	f7ff ffdc 	bl	80183cc <HAL_RCC_GetHCLKFreq>
 8018414:	0001      	movs	r1, r0
 8018416:	4b06      	ldr	r3, [pc, #24]	@ (8018430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8018418:	68db      	ldr	r3, [r3, #12]
 801841a:	0adb      	lsrs	r3, r3, #11
 801841c:	2207      	movs	r2, #7
 801841e:	4013      	ands	r3, r2
 8018420:	4a04      	ldr	r2, [pc, #16]	@ (8018434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8018422:	5cd3      	ldrb	r3, [r2, r3]
 8018424:	40d9      	lsrs	r1, r3
 8018426:	000b      	movs	r3, r1
}
 8018428:	0018      	movs	r0, r3
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}
 801842e:	46c0      	nop			@ (mov r8, r8)
 8018430:	40021000 	.word	0x40021000
 8018434:	08028f6c 	.word	0x08028f6c

08018438 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b086      	sub	sp, #24
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8018440:	2017      	movs	r0, #23
 8018442:	183b      	adds	r3, r7, r0
 8018444:	2200      	movs	r2, #0
 8018446:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	2220      	movs	r2, #32
 801844e:	4013      	ands	r3, r2
 8018450:	d100      	bne.n	8018454 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8018452:	e0c7      	b.n	80185e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018454:	4b9b      	ldr	r3, [pc, #620]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018458:	2380      	movs	r3, #128	@ 0x80
 801845a:	055b      	lsls	r3, r3, #21
 801845c:	4013      	ands	r3, r2
 801845e:	d109      	bne.n	8018474 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018460:	4b98      	ldr	r3, [pc, #608]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018462:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018464:	4b97      	ldr	r3, [pc, #604]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018466:	2180      	movs	r1, #128	@ 0x80
 8018468:	0549      	lsls	r1, r1, #21
 801846a:	430a      	orrs	r2, r1
 801846c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801846e:	183b      	adds	r3, r7, r0
 8018470:	2201      	movs	r2, #1
 8018472:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018474:	4b94      	ldr	r3, [pc, #592]	@ (80186c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8018476:	681a      	ldr	r2, [r3, #0]
 8018478:	2380      	movs	r3, #128	@ 0x80
 801847a:	005b      	lsls	r3, r3, #1
 801847c:	4013      	ands	r3, r2
 801847e:	d11a      	bne.n	80184b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018480:	4b91      	ldr	r3, [pc, #580]	@ (80186c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8018482:	681a      	ldr	r2, [r3, #0]
 8018484:	4b90      	ldr	r3, [pc, #576]	@ (80186c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8018486:	2180      	movs	r1, #128	@ 0x80
 8018488:	0049      	lsls	r1, r1, #1
 801848a:	430a      	orrs	r2, r1
 801848c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801848e:	f7f8 fe13 	bl	80110b8 <HAL_GetTick>
 8018492:	0003      	movs	r3, r0
 8018494:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018496:	e008      	b.n	80184aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018498:	f7f8 fe0e 	bl	80110b8 <HAL_GetTick>
 801849c:	0002      	movs	r2, r0
 801849e:	693b      	ldr	r3, [r7, #16]
 80184a0:	1ad3      	subs	r3, r2, r3
 80184a2:	2b64      	cmp	r3, #100	@ 0x64
 80184a4:	d901      	bls.n	80184aa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80184a6:	2303      	movs	r3, #3
 80184a8:	e107      	b.n	80186ba <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80184aa:	4b87      	ldr	r3, [pc, #540]	@ (80186c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80184ac:	681a      	ldr	r2, [r3, #0]
 80184ae:	2380      	movs	r3, #128	@ 0x80
 80184b0:	005b      	lsls	r3, r3, #1
 80184b2:	4013      	ands	r3, r2
 80184b4:	d0f0      	beq.n	8018498 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80184b6:	4b83      	ldr	r3, [pc, #524]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184b8:	681a      	ldr	r2, [r3, #0]
 80184ba:	23c0      	movs	r3, #192	@ 0xc0
 80184bc:	039b      	lsls	r3, r3, #14
 80184be:	4013      	ands	r3, r2
 80184c0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	685a      	ldr	r2, [r3, #4]
 80184c6:	23c0      	movs	r3, #192	@ 0xc0
 80184c8:	039b      	lsls	r3, r3, #14
 80184ca:	4013      	ands	r3, r2
 80184cc:	68fa      	ldr	r2, [r7, #12]
 80184ce:	429a      	cmp	r2, r3
 80184d0:	d013      	beq.n	80184fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	685a      	ldr	r2, [r3, #4]
 80184d6:	23c0      	movs	r3, #192	@ 0xc0
 80184d8:	029b      	lsls	r3, r3, #10
 80184da:	401a      	ands	r2, r3
 80184dc:	23c0      	movs	r3, #192	@ 0xc0
 80184de:	029b      	lsls	r3, r3, #10
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d10a      	bne.n	80184fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80184e4:	4b77      	ldr	r3, [pc, #476]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	2380      	movs	r3, #128	@ 0x80
 80184ea:	029b      	lsls	r3, r3, #10
 80184ec:	401a      	ands	r2, r3
 80184ee:	2380      	movs	r3, #128	@ 0x80
 80184f0:	029b      	lsls	r3, r3, #10
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d101      	bne.n	80184fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80184f6:	2301      	movs	r3, #1
 80184f8:	e0df      	b.n	80186ba <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80184fa:	4b72      	ldr	r3, [pc, #456]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80184fe:	23c0      	movs	r3, #192	@ 0xc0
 8018500:	029b      	lsls	r3, r3, #10
 8018502:	4013      	ands	r3, r2
 8018504:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d03b      	beq.n	8018584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	685a      	ldr	r2, [r3, #4]
 8018510:	23c0      	movs	r3, #192	@ 0xc0
 8018512:	029b      	lsls	r3, r3, #10
 8018514:	4013      	ands	r3, r2
 8018516:	68fa      	ldr	r2, [r7, #12]
 8018518:	429a      	cmp	r2, r3
 801851a:	d033      	beq.n	8018584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	2220      	movs	r2, #32
 8018522:	4013      	ands	r3, r2
 8018524:	d02e      	beq.n	8018584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8018526:	4b67      	ldr	r3, [pc, #412]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801852a:	4a68      	ldr	r2, [pc, #416]	@ (80186cc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801852c:	4013      	ands	r3, r2
 801852e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8018530:	4b64      	ldr	r3, [pc, #400]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018534:	4b63      	ldr	r3, [pc, #396]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018536:	2180      	movs	r1, #128	@ 0x80
 8018538:	0309      	lsls	r1, r1, #12
 801853a:	430a      	orrs	r2, r1
 801853c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801853e:	4b61      	ldr	r3, [pc, #388]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018540:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018542:	4b60      	ldr	r3, [pc, #384]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018544:	4962      	ldr	r1, [pc, #392]	@ (80186d0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8018546:	400a      	ands	r2, r1
 8018548:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801854a:	4b5e      	ldr	r3, [pc, #376]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801854c:	68fa      	ldr	r2, [r7, #12]
 801854e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8018550:	68fa      	ldr	r2, [r7, #12]
 8018552:	2380      	movs	r3, #128	@ 0x80
 8018554:	005b      	lsls	r3, r3, #1
 8018556:	4013      	ands	r3, r2
 8018558:	d014      	beq.n	8018584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801855a:	f7f8 fdad 	bl	80110b8 <HAL_GetTick>
 801855e:	0003      	movs	r3, r0
 8018560:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018562:	e009      	b.n	8018578 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018564:	f7f8 fda8 	bl	80110b8 <HAL_GetTick>
 8018568:	0002      	movs	r2, r0
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	1ad3      	subs	r3, r2, r3
 801856e:	4a59      	ldr	r2, [pc, #356]	@ (80186d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8018570:	4293      	cmp	r3, r2
 8018572:	d901      	bls.n	8018578 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8018574:	2303      	movs	r3, #3
 8018576:	e0a0      	b.n	80186ba <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018578:	4b52      	ldr	r3, [pc, #328]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801857a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801857c:	2380      	movs	r3, #128	@ 0x80
 801857e:	009b      	lsls	r3, r3, #2
 8018580:	4013      	ands	r3, r2
 8018582:	d0ef      	beq.n	8018564 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	2220      	movs	r2, #32
 801858a:	4013      	ands	r3, r2
 801858c:	d01f      	beq.n	80185ce <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	685a      	ldr	r2, [r3, #4]
 8018592:	23c0      	movs	r3, #192	@ 0xc0
 8018594:	029b      	lsls	r3, r3, #10
 8018596:	401a      	ands	r2, r3
 8018598:	23c0      	movs	r3, #192	@ 0xc0
 801859a:	029b      	lsls	r3, r3, #10
 801859c:	429a      	cmp	r2, r3
 801859e:	d10c      	bne.n	80185ba <HAL_RCCEx_PeriphCLKConfig+0x182>
 80185a0:	4b48      	ldr	r3, [pc, #288]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	4a4c      	ldr	r2, [pc, #304]	@ (80186d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80185a6:	4013      	ands	r3, r2
 80185a8:	0019      	movs	r1, r3
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	685a      	ldr	r2, [r3, #4]
 80185ae:	23c0      	movs	r3, #192	@ 0xc0
 80185b0:	039b      	lsls	r3, r3, #14
 80185b2:	401a      	ands	r2, r3
 80185b4:	4b43      	ldr	r3, [pc, #268]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185b6:	430a      	orrs	r2, r1
 80185b8:	601a      	str	r2, [r3, #0]
 80185ba:	4b42      	ldr	r3, [pc, #264]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	685a      	ldr	r2, [r3, #4]
 80185c2:	23c0      	movs	r3, #192	@ 0xc0
 80185c4:	029b      	lsls	r3, r3, #10
 80185c6:	401a      	ands	r2, r3
 80185c8:	4b3e      	ldr	r3, [pc, #248]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185ca:	430a      	orrs	r2, r1
 80185cc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80185ce:	2317      	movs	r3, #23
 80185d0:	18fb      	adds	r3, r7, r3
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	2b01      	cmp	r3, #1
 80185d6:	d105      	bne.n	80185e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80185d8:	4b3a      	ldr	r3, [pc, #232]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80185dc:	4b39      	ldr	r3, [pc, #228]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185de:	493f      	ldr	r1, [pc, #252]	@ (80186dc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80185e0:	400a      	ands	r2, r1
 80185e2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	2201      	movs	r2, #1
 80185ea:	4013      	ands	r3, r2
 80185ec:	d009      	beq.n	8018602 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80185ee:	4b35      	ldr	r3, [pc, #212]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80185f2:	2203      	movs	r2, #3
 80185f4:	4393      	bics	r3, r2
 80185f6:	0019      	movs	r1, r3
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	689a      	ldr	r2, [r3, #8]
 80185fc:	4b31      	ldr	r3, [pc, #196]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185fe:	430a      	orrs	r2, r1
 8018600:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	2202      	movs	r2, #2
 8018608:	4013      	ands	r3, r2
 801860a:	d009      	beq.n	8018620 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801860c:	4b2d      	ldr	r3, [pc, #180]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801860e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018610:	220c      	movs	r2, #12
 8018612:	4393      	bics	r3, r2
 8018614:	0019      	movs	r1, r3
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	68da      	ldr	r2, [r3, #12]
 801861a:	4b2a      	ldr	r3, [pc, #168]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801861c:	430a      	orrs	r2, r1
 801861e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	2204      	movs	r2, #4
 8018626:	4013      	ands	r3, r2
 8018628:	d009      	beq.n	801863e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801862a:	4b26      	ldr	r3, [pc, #152]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801862c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801862e:	4a2c      	ldr	r2, [pc, #176]	@ (80186e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8018630:	4013      	ands	r3, r2
 8018632:	0019      	movs	r1, r3
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	691a      	ldr	r2, [r3, #16]
 8018638:	4b22      	ldr	r3, [pc, #136]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801863a:	430a      	orrs	r2, r1
 801863c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	2208      	movs	r2, #8
 8018644:	4013      	ands	r3, r2
 8018646:	d009      	beq.n	801865c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8018648:	4b1e      	ldr	r3, [pc, #120]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801864a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801864c:	4a25      	ldr	r2, [pc, #148]	@ (80186e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801864e:	4013      	ands	r3, r2
 8018650:	0019      	movs	r1, r3
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	695a      	ldr	r2, [r3, #20]
 8018656:	4b1b      	ldr	r3, [pc, #108]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018658:	430a      	orrs	r2, r1
 801865a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	681a      	ldr	r2, [r3, #0]
 8018660:	2380      	movs	r3, #128	@ 0x80
 8018662:	005b      	lsls	r3, r3, #1
 8018664:	4013      	ands	r3, r2
 8018666:	d009      	beq.n	801867c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018668:	4b16      	ldr	r3, [pc, #88]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801866a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801866c:	4a17      	ldr	r2, [pc, #92]	@ (80186cc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801866e:	4013      	ands	r3, r2
 8018670:	0019      	movs	r1, r3
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	699a      	ldr	r2, [r3, #24]
 8018676:	4b13      	ldr	r3, [pc, #76]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018678:	430a      	orrs	r2, r1
 801867a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	2240      	movs	r2, #64	@ 0x40
 8018682:	4013      	ands	r3, r2
 8018684:	d009      	beq.n	801869a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8018686:	4b0f      	ldr	r3, [pc, #60]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801868a:	4a17      	ldr	r2, [pc, #92]	@ (80186e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801868c:	4013      	ands	r3, r2
 801868e:	0019      	movs	r1, r3
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	6a1a      	ldr	r2, [r3, #32]
 8018694:	4b0b      	ldr	r3, [pc, #44]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018696:	430a      	orrs	r2, r1
 8018698:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	2280      	movs	r2, #128	@ 0x80
 80186a0:	4013      	ands	r3, r2
 80186a2:	d009      	beq.n	80186b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80186a4:	4b07      	ldr	r3, [pc, #28]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80186a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80186a8:	4a10      	ldr	r2, [pc, #64]	@ (80186ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80186aa:	4013      	ands	r3, r2
 80186ac:	0019      	movs	r1, r3
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	69da      	ldr	r2, [r3, #28]
 80186b2:	4b04      	ldr	r3, [pc, #16]	@ (80186c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80186b4:	430a      	orrs	r2, r1
 80186b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80186b8:	2300      	movs	r3, #0
}
 80186ba:	0018      	movs	r0, r3
 80186bc:	46bd      	mov	sp, r7
 80186be:	b006      	add	sp, #24
 80186c0:	bd80      	pop	{r7, pc}
 80186c2:	46c0      	nop			@ (mov r8, r8)
 80186c4:	40021000 	.word	0x40021000
 80186c8:	40007000 	.word	0x40007000
 80186cc:	fffcffff 	.word	0xfffcffff
 80186d0:	fff7ffff 	.word	0xfff7ffff
 80186d4:	00001388 	.word	0x00001388
 80186d8:	ffcfffff 	.word	0xffcfffff
 80186dc:	efffffff 	.word	0xefffffff
 80186e0:	fffff3ff 	.word	0xfffff3ff
 80186e4:	ffffcfff 	.word	0xffffcfff
 80186e8:	fbffffff 	.word	0xfbffffff
 80186ec:	fff3ffff 	.word	0xfff3ffff

080186f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80186f0:	b5b0      	push	{r4, r5, r7, lr}
 80186f2:	b084      	sub	sp, #16
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80186f8:	230f      	movs	r3, #15
 80186fa:	18fb      	adds	r3, r7, r3
 80186fc:	2201      	movs	r2, #1
 80186fe:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d101      	bne.n	801870a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8018706:	2301      	movs	r3, #1
 8018708:	e088      	b.n	801881c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	2221      	movs	r2, #33	@ 0x21
 801870e:	5c9b      	ldrb	r3, [r3, r2]
 8018710:	b2db      	uxtb	r3, r3
 8018712:	2b00      	cmp	r3, #0
 8018714:	d107      	bne.n	8018726 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	2220      	movs	r2, #32
 801871a:	2100      	movs	r1, #0
 801871c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	0018      	movs	r0, r3
 8018722:	f7f2 fd7f 	bl	800b224 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	2221      	movs	r2, #33	@ 0x21
 801872a:	2102      	movs	r1, #2
 801872c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	68db      	ldr	r3, [r3, #12]
 8018734:	2210      	movs	r2, #16
 8018736:	4013      	ands	r3, r2
 8018738:	2b10      	cmp	r3, #16
 801873a:	d05f      	beq.n	80187fc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	22ca      	movs	r2, #202	@ 0xca
 8018742:	625a      	str	r2, [r3, #36]	@ 0x24
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	2253      	movs	r2, #83	@ 0x53
 801874a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801874c:	250f      	movs	r5, #15
 801874e:	197c      	adds	r4, r7, r5
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	0018      	movs	r0, r3
 8018754:	f000 fa7c 	bl	8018c50 <RTC_EnterInitMode>
 8018758:	0003      	movs	r3, r0
 801875a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801875c:	0028      	movs	r0, r5
 801875e:	183b      	adds	r3, r7, r0
 8018760:	781b      	ldrb	r3, [r3, #0]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d12c      	bne.n	80187c0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	689a      	ldr	r2, [r3, #8]
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	492c      	ldr	r1, [pc, #176]	@ (8018824 <HAL_RTC_Init+0x134>)
 8018772:	400a      	ands	r2, r1
 8018774:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	6899      	ldr	r1, [r3, #8]
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	685a      	ldr	r2, [r3, #4]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	691b      	ldr	r3, [r3, #16]
 8018784:	431a      	orrs	r2, r3
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	699b      	ldr	r3, [r3, #24]
 801878a:	431a      	orrs	r2, r3
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	430a      	orrs	r2, r1
 8018792:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	687a      	ldr	r2, [r7, #4]
 801879a:	68d2      	ldr	r2, [r2, #12]
 801879c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	6919      	ldr	r1, [r3, #16]
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	689b      	ldr	r3, [r3, #8]
 80187a8:	041a      	lsls	r2, r3, #16
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	430a      	orrs	r2, r1
 80187b0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80187b2:	183c      	adds	r4, r7, r0
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	0018      	movs	r0, r3
 80187b8:	f000 fa8e 	bl	8018cd8 <RTC_ExitInitMode>
 80187bc:	0003      	movs	r3, r0
 80187be:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80187c0:	230f      	movs	r3, #15
 80187c2:	18fb      	adds	r3, r7, r3
 80187c4:	781b      	ldrb	r3, [r3, #0]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d113      	bne.n	80187f2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	2103      	movs	r1, #3
 80187d6:	438a      	bics	r2, r1
 80187d8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	69da      	ldr	r2, [r3, #28]
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	695b      	ldr	r3, [r3, #20]
 80187e8:	431a      	orrs	r2, r3
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	430a      	orrs	r2, r1
 80187f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	22ff      	movs	r2, #255	@ 0xff
 80187f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80187fa:	e003      	b.n	8018804 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80187fc:	230f      	movs	r3, #15
 80187fe:	18fb      	adds	r3, r7, r3
 8018800:	2200      	movs	r2, #0
 8018802:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8018804:	230f      	movs	r3, #15
 8018806:	18fb      	adds	r3, r7, r3
 8018808:	781b      	ldrb	r3, [r3, #0]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d103      	bne.n	8018816 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	2221      	movs	r2, #33	@ 0x21
 8018812:	2101      	movs	r1, #1
 8018814:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018816:	230f      	movs	r3, #15
 8018818:	18fb      	adds	r3, r7, r3
 801881a:	781b      	ldrb	r3, [r3, #0]
}
 801881c:	0018      	movs	r0, r3
 801881e:	46bd      	mov	sp, r7
 8018820:	b004      	add	sp, #16
 8018822:	bdb0      	pop	{r4, r5, r7, pc}
 8018824:	ff8fffbf 	.word	0xff8fffbf

08018828 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018828:	b5b0      	push	{r4, r5, r7, lr}
 801882a:	b086      	sub	sp, #24
 801882c:	af00      	add	r7, sp, #0
 801882e:	60f8      	str	r0, [r7, #12]
 8018830:	60b9      	str	r1, [r7, #8]
 8018832:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8018834:	2300      	movs	r3, #0
 8018836:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	2220      	movs	r2, #32
 801883c:	5c9b      	ldrb	r3, [r3, r2]
 801883e:	2b01      	cmp	r3, #1
 8018840:	d101      	bne.n	8018846 <HAL_RTC_SetTime+0x1e>
 8018842:	2302      	movs	r3, #2
 8018844:	e092      	b.n	801896c <HAL_RTC_SetTime+0x144>
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	2220      	movs	r2, #32
 801884a:	2101      	movs	r1, #1
 801884c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	2221      	movs	r2, #33	@ 0x21
 8018852:	2102      	movs	r1, #2
 8018854:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d125      	bne.n	80188a8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	689b      	ldr	r3, [r3, #8]
 8018862:	2240      	movs	r2, #64	@ 0x40
 8018864:	4013      	ands	r3, r2
 8018866:	d102      	bne.n	801886e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8018868:	68bb      	ldr	r3, [r7, #8]
 801886a:	2200      	movs	r2, #0
 801886c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801886e:	68bb      	ldr	r3, [r7, #8]
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	0018      	movs	r0, r3
 8018874:	f000 fa5a 	bl	8018d2c <RTC_ByteToBcd2>
 8018878:	0003      	movs	r3, r0
 801887a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	785b      	ldrb	r3, [r3, #1]
 8018880:	0018      	movs	r0, r3
 8018882:	f000 fa53 	bl	8018d2c <RTC_ByteToBcd2>
 8018886:	0003      	movs	r3, r0
 8018888:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801888a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801888c:	68bb      	ldr	r3, [r7, #8]
 801888e:	789b      	ldrb	r3, [r3, #2]
 8018890:	0018      	movs	r0, r3
 8018892:	f000 fa4b 	bl	8018d2c <RTC_ByteToBcd2>
 8018896:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018898:	0022      	movs	r2, r4
 801889a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801889c:	68bb      	ldr	r3, [r7, #8]
 801889e:	78db      	ldrb	r3, [r3, #3]
 80188a0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80188a2:	4313      	orrs	r3, r2
 80188a4:	617b      	str	r3, [r7, #20]
 80188a6:	e017      	b.n	80188d8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	689b      	ldr	r3, [r3, #8]
 80188ae:	2240      	movs	r2, #64	@ 0x40
 80188b0:	4013      	ands	r3, r2
 80188b2:	d102      	bne.n	80188ba <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	2200      	movs	r2, #0
 80188b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	781b      	ldrb	r3, [r3, #0]
 80188be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80188c0:	68bb      	ldr	r3, [r7, #8]
 80188c2:	785b      	ldrb	r3, [r3, #1]
 80188c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80188c6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80188c8:	68ba      	ldr	r2, [r7, #8]
 80188ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80188cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80188ce:	68bb      	ldr	r3, [r7, #8]
 80188d0:	78db      	ldrb	r3, [r3, #3]
 80188d2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80188d4:	4313      	orrs	r3, r2
 80188d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	22ca      	movs	r2, #202	@ 0xca
 80188de:	625a      	str	r2, [r3, #36]	@ 0x24
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2253      	movs	r2, #83	@ 0x53
 80188e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80188e8:	2513      	movs	r5, #19
 80188ea:	197c      	adds	r4, r7, r5
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	0018      	movs	r0, r3
 80188f0:	f000 f9ae 	bl	8018c50 <RTC_EnterInitMode>
 80188f4:	0003      	movs	r3, r0
 80188f6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80188f8:	0028      	movs	r0, r5
 80188fa:	183b      	adds	r3, r7, r0
 80188fc:	781b      	ldrb	r3, [r3, #0]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d120      	bne.n	8018944 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	697a      	ldr	r2, [r7, #20]
 8018908:	491a      	ldr	r1, [pc, #104]	@ (8018974 <HAL_RTC_SetTime+0x14c>)
 801890a:	400a      	ands	r2, r1
 801890c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	689a      	ldr	r2, [r3, #8]
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	4917      	ldr	r1, [pc, #92]	@ (8018978 <HAL_RTC_SetTime+0x150>)
 801891a:	400a      	ands	r2, r1
 801891c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	6899      	ldr	r1, [r3, #8]
 8018924:	68bb      	ldr	r3, [r7, #8]
 8018926:	68da      	ldr	r2, [r3, #12]
 8018928:	68bb      	ldr	r3, [r7, #8]
 801892a:	691b      	ldr	r3, [r3, #16]
 801892c:	431a      	orrs	r2, r3
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	430a      	orrs	r2, r1
 8018934:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018936:	183c      	adds	r4, r7, r0
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	0018      	movs	r0, r3
 801893c:	f000 f9cc 	bl	8018cd8 <RTC_ExitInitMode>
 8018940:	0003      	movs	r3, r0
 8018942:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8018944:	2313      	movs	r3, #19
 8018946:	18fb      	adds	r3, r7, r3
 8018948:	781b      	ldrb	r3, [r3, #0]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d103      	bne.n	8018956 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	2221      	movs	r2, #33	@ 0x21
 8018952:	2101      	movs	r1, #1
 8018954:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	22ff      	movs	r2, #255	@ 0xff
 801895c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	2220      	movs	r2, #32
 8018962:	2100      	movs	r1, #0
 8018964:	5499      	strb	r1, [r3, r2]

  return status;
 8018966:	2313      	movs	r3, #19
 8018968:	18fb      	adds	r3, r7, r3
 801896a:	781b      	ldrb	r3, [r3, #0]
}
 801896c:	0018      	movs	r0, r3
 801896e:	46bd      	mov	sp, r7
 8018970:	b006      	add	sp, #24
 8018972:	bdb0      	pop	{r4, r5, r7, pc}
 8018974:	007f7f7f 	.word	0x007f7f7f
 8018978:	fffbffff 	.word	0xfffbffff

0801897c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b086      	sub	sp, #24
 8018980:	af00      	add	r7, sp, #0
 8018982:	60f8      	str	r0, [r7, #12]
 8018984:	60b9      	str	r1, [r7, #8]
 8018986:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8018988:	2300      	movs	r3, #0
 801898a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018992:	68bb      	ldr	r3, [r7, #8]
 8018994:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	691b      	ldr	r3, [r3, #16]
 801899c:	045b      	lsls	r3, r3, #17
 801899e:	0c5a      	lsrs	r2, r3, #17
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	4a22      	ldr	r2, [pc, #136]	@ (8018a34 <HAL_RTC_GetTime+0xb8>)
 80189ac:	4013      	ands	r3, r2
 80189ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80189b0:	697b      	ldr	r3, [r7, #20]
 80189b2:	0c1b      	lsrs	r3, r3, #16
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	223f      	movs	r2, #63	@ 0x3f
 80189b8:	4013      	ands	r3, r2
 80189ba:	b2da      	uxtb	r2, r3
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80189c0:	697b      	ldr	r3, [r7, #20]
 80189c2:	0a1b      	lsrs	r3, r3, #8
 80189c4:	b2db      	uxtb	r3, r3
 80189c6:	227f      	movs	r2, #127	@ 0x7f
 80189c8:	4013      	ands	r3, r2
 80189ca:	b2da      	uxtb	r2, r3
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	227f      	movs	r2, #127	@ 0x7f
 80189d6:	4013      	ands	r3, r2
 80189d8:	b2da      	uxtb	r2, r3
 80189da:	68bb      	ldr	r3, [r7, #8]
 80189dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	0d9b      	lsrs	r3, r3, #22
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	2201      	movs	r2, #1
 80189e6:	4013      	ands	r3, r2
 80189e8:	b2da      	uxtb	r2, r3
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d11a      	bne.n	8018a2a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	781b      	ldrb	r3, [r3, #0]
 80189f8:	0018      	movs	r0, r3
 80189fa:	f000 f9b8 	bl	8018d6e <RTC_Bcd2ToByte>
 80189fe:	0003      	movs	r3, r0
 8018a00:	001a      	movs	r2, r3
 8018a02:	68bb      	ldr	r3, [r7, #8]
 8018a04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018a06:	68bb      	ldr	r3, [r7, #8]
 8018a08:	785b      	ldrb	r3, [r3, #1]
 8018a0a:	0018      	movs	r0, r3
 8018a0c:	f000 f9af 	bl	8018d6e <RTC_Bcd2ToByte>
 8018a10:	0003      	movs	r3, r0
 8018a12:	001a      	movs	r2, r3
 8018a14:	68bb      	ldr	r3, [r7, #8]
 8018a16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018a18:	68bb      	ldr	r3, [r7, #8]
 8018a1a:	789b      	ldrb	r3, [r3, #2]
 8018a1c:	0018      	movs	r0, r3
 8018a1e:	f000 f9a6 	bl	8018d6e <RTC_Bcd2ToByte>
 8018a22:	0003      	movs	r3, r0
 8018a24:	001a      	movs	r2, r3
 8018a26:	68bb      	ldr	r3, [r7, #8]
 8018a28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8018a2a:	2300      	movs	r3, #0
}
 8018a2c:	0018      	movs	r0, r3
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	b006      	add	sp, #24
 8018a32:	bd80      	pop	{r7, pc}
 8018a34:	007f7f7f 	.word	0x007f7f7f

08018a38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018a38:	b5b0      	push	{r4, r5, r7, lr}
 8018a3a:	b086      	sub	sp, #24
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	60f8      	str	r0, [r7, #12]
 8018a40:	60b9      	str	r1, [r7, #8]
 8018a42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8018a44:	2300      	movs	r3, #0
 8018a46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	2220      	movs	r2, #32
 8018a4c:	5c9b      	ldrb	r3, [r3, r2]
 8018a4e:	2b01      	cmp	r3, #1
 8018a50:	d101      	bne.n	8018a56 <HAL_RTC_SetDate+0x1e>
 8018a52:	2302      	movs	r3, #2
 8018a54:	e07e      	b.n	8018b54 <HAL_RTC_SetDate+0x11c>
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	2220      	movs	r2, #32
 8018a5a:	2101      	movs	r1, #1
 8018a5c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	2221      	movs	r2, #33	@ 0x21
 8018a62:	2102      	movs	r1, #2
 8018a64:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d10e      	bne.n	8018a8a <HAL_RTC_SetDate+0x52>
 8018a6c:	68bb      	ldr	r3, [r7, #8]
 8018a6e:	785b      	ldrb	r3, [r3, #1]
 8018a70:	001a      	movs	r2, r3
 8018a72:	2310      	movs	r3, #16
 8018a74:	4013      	ands	r3, r2
 8018a76:	d008      	beq.n	8018a8a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018a78:	68bb      	ldr	r3, [r7, #8]
 8018a7a:	785b      	ldrb	r3, [r3, #1]
 8018a7c:	2210      	movs	r2, #16
 8018a7e:	4393      	bics	r3, r2
 8018a80:	b2db      	uxtb	r3, r3
 8018a82:	330a      	adds	r3, #10
 8018a84:	b2da      	uxtb	r2, r3
 8018a86:	68bb      	ldr	r3, [r7, #8]
 8018a88:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d11c      	bne.n	8018aca <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	78db      	ldrb	r3, [r3, #3]
 8018a94:	0018      	movs	r0, r3
 8018a96:	f000 f949 	bl	8018d2c <RTC_ByteToBcd2>
 8018a9a:	0003      	movs	r3, r0
 8018a9c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018a9e:	68bb      	ldr	r3, [r7, #8]
 8018aa0:	785b      	ldrb	r3, [r3, #1]
 8018aa2:	0018      	movs	r0, r3
 8018aa4:	f000 f942 	bl	8018d2c <RTC_ByteToBcd2>
 8018aa8:	0003      	movs	r3, r0
 8018aaa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018aac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	789b      	ldrb	r3, [r3, #2]
 8018ab2:	0018      	movs	r0, r3
 8018ab4:	f000 f93a 	bl	8018d2c <RTC_ByteToBcd2>
 8018ab8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018aba:	0022      	movs	r2, r4
 8018abc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8018abe:	68bb      	ldr	r3, [r7, #8]
 8018ac0:	781b      	ldrb	r3, [r3, #0]
 8018ac2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018ac4:	4313      	orrs	r3, r2
 8018ac6:	617b      	str	r3, [r7, #20]
 8018ac8:	e00e      	b.n	8018ae8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018aca:	68bb      	ldr	r3, [r7, #8]
 8018acc:	78db      	ldrb	r3, [r3, #3]
 8018ace:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	785b      	ldrb	r3, [r3, #1]
 8018ad4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018ad6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8018ad8:	68ba      	ldr	r2, [r7, #8]
 8018ada:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8018adc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8018ade:	68bb      	ldr	r3, [r7, #8]
 8018ae0:	781b      	ldrb	r3, [r3, #0]
 8018ae2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018ae4:	4313      	orrs	r3, r2
 8018ae6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	22ca      	movs	r2, #202	@ 0xca
 8018aee:	625a      	str	r2, [r3, #36]	@ 0x24
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	2253      	movs	r2, #83	@ 0x53
 8018af6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8018af8:	2513      	movs	r5, #19
 8018afa:	197c      	adds	r4, r7, r5
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	0018      	movs	r0, r3
 8018b00:	f000 f8a6 	bl	8018c50 <RTC_EnterInitMode>
 8018b04:	0003      	movs	r3, r0
 8018b06:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8018b08:	0028      	movs	r0, r5
 8018b0a:	183b      	adds	r3, r7, r0
 8018b0c:	781b      	ldrb	r3, [r3, #0]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d10c      	bne.n	8018b2c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	697a      	ldr	r2, [r7, #20]
 8018b18:	4910      	ldr	r1, [pc, #64]	@ (8018b5c <HAL_RTC_SetDate+0x124>)
 8018b1a:	400a      	ands	r2, r1
 8018b1c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018b1e:	183c      	adds	r4, r7, r0
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	0018      	movs	r0, r3
 8018b24:	f000 f8d8 	bl	8018cd8 <RTC_ExitInitMode>
 8018b28:	0003      	movs	r3, r0
 8018b2a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8018b2c:	2313      	movs	r3, #19
 8018b2e:	18fb      	adds	r3, r7, r3
 8018b30:	781b      	ldrb	r3, [r3, #0]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d103      	bne.n	8018b3e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	2221      	movs	r2, #33	@ 0x21
 8018b3a:	2101      	movs	r1, #1
 8018b3c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	22ff      	movs	r2, #255	@ 0xff
 8018b44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	2220      	movs	r2, #32
 8018b4a:	2100      	movs	r1, #0
 8018b4c:	5499      	strb	r1, [r3, r2]

  return status;
 8018b4e:	2313      	movs	r3, #19
 8018b50:	18fb      	adds	r3, r7, r3
 8018b52:	781b      	ldrb	r3, [r3, #0]
}
 8018b54:	0018      	movs	r0, r3
 8018b56:	46bd      	mov	sp, r7
 8018b58:	b006      	add	sp, #24
 8018b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8018b5c:	00ffff3f 	.word	0x00ffff3f

08018b60 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b086      	sub	sp, #24
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	60f8      	str	r0, [r7, #12]
 8018b68:	60b9      	str	r1, [r7, #8]
 8018b6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	685b      	ldr	r3, [r3, #4]
 8018b76:	4a21      	ldr	r2, [pc, #132]	@ (8018bfc <HAL_RTC_GetDate+0x9c>)
 8018b78:	4013      	ands	r3, r2
 8018b7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018b7c:	697b      	ldr	r3, [r7, #20]
 8018b7e:	0c1b      	lsrs	r3, r3, #16
 8018b80:	b2da      	uxtb	r2, r3
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018b86:	697b      	ldr	r3, [r7, #20]
 8018b88:	0a1b      	lsrs	r3, r3, #8
 8018b8a:	b2db      	uxtb	r3, r3
 8018b8c:	221f      	movs	r2, #31
 8018b8e:	4013      	ands	r3, r2
 8018b90:	b2da      	uxtb	r2, r3
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8018b96:	697b      	ldr	r3, [r7, #20]
 8018b98:	b2db      	uxtb	r3, r3
 8018b9a:	223f      	movs	r2, #63	@ 0x3f
 8018b9c:	4013      	ands	r3, r2
 8018b9e:	b2da      	uxtb	r2, r3
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8018ba4:	697b      	ldr	r3, [r7, #20]
 8018ba6:	0b5b      	lsrs	r3, r3, #13
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	2207      	movs	r2, #7
 8018bac:	4013      	ands	r3, r2
 8018bae:	b2da      	uxtb	r2, r3
 8018bb0:	68bb      	ldr	r3, [r7, #8]
 8018bb2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d11a      	bne.n	8018bf0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8018bba:	68bb      	ldr	r3, [r7, #8]
 8018bbc:	78db      	ldrb	r3, [r3, #3]
 8018bbe:	0018      	movs	r0, r3
 8018bc0:	f000 f8d5 	bl	8018d6e <RTC_Bcd2ToByte>
 8018bc4:	0003      	movs	r3, r0
 8018bc6:	001a      	movs	r2, r3
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	785b      	ldrb	r3, [r3, #1]
 8018bd0:	0018      	movs	r0, r3
 8018bd2:	f000 f8cc 	bl	8018d6e <RTC_Bcd2ToByte>
 8018bd6:	0003      	movs	r3, r0
 8018bd8:	001a      	movs	r2, r3
 8018bda:	68bb      	ldr	r3, [r7, #8]
 8018bdc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	789b      	ldrb	r3, [r3, #2]
 8018be2:	0018      	movs	r0, r3
 8018be4:	f000 f8c3 	bl	8018d6e <RTC_Bcd2ToByte>
 8018be8:	0003      	movs	r3, r0
 8018bea:	001a      	movs	r2, r3
 8018bec:	68bb      	ldr	r3, [r7, #8]
 8018bee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8018bf0:	2300      	movs	r3, #0
}
 8018bf2:	0018      	movs	r0, r3
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	b006      	add	sp, #24
 8018bf8:	bd80      	pop	{r7, pc}
 8018bfa:	46c0      	nop			@ (mov r8, r8)
 8018bfc:	00ffff3f 	.word	0x00ffff3f

08018c00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b084      	sub	sp, #16
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4a0e      	ldr	r2, [pc, #56]	@ (8018c4c <HAL_RTC_WaitForSynchro+0x4c>)
 8018c12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018c14:	f7f8 fa50 	bl	80110b8 <HAL_GetTick>
 8018c18:	0003      	movs	r3, r0
 8018c1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018c1c:	e00a      	b.n	8018c34 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018c1e:	f7f8 fa4b 	bl	80110b8 <HAL_GetTick>
 8018c22:	0002      	movs	r2, r0
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	1ad2      	subs	r2, r2, r3
 8018c28:	23fa      	movs	r3, #250	@ 0xfa
 8018c2a:	009b      	lsls	r3, r3, #2
 8018c2c:	429a      	cmp	r2, r3
 8018c2e:	d901      	bls.n	8018c34 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8018c30:	2303      	movs	r3, #3
 8018c32:	e006      	b.n	8018c42 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	68db      	ldr	r3, [r3, #12]
 8018c3a:	2220      	movs	r2, #32
 8018c3c:	4013      	ands	r3, r2
 8018c3e:	d0ee      	beq.n	8018c1e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8018c40:	2300      	movs	r3, #0
}
 8018c42:	0018      	movs	r0, r3
 8018c44:	46bd      	mov	sp, r7
 8018c46:	b004      	add	sp, #16
 8018c48:	bd80      	pop	{r7, pc}
 8018c4a:	46c0      	nop			@ (mov r8, r8)
 8018c4c:	0001ff5f 	.word	0x0001ff5f

08018c50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b084      	sub	sp, #16
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8018c5c:	230f      	movs	r3, #15
 8018c5e:	18fb      	adds	r3, r7, r3
 8018c60:	2200      	movs	r2, #0
 8018c62:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	68db      	ldr	r3, [r3, #12]
 8018c6a:	2240      	movs	r2, #64	@ 0x40
 8018c6c:	4013      	ands	r3, r2
 8018c6e:	d12c      	bne.n	8018cca <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	68da      	ldr	r2, [r3, #12]
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	2180      	movs	r1, #128	@ 0x80
 8018c7c:	430a      	orrs	r2, r1
 8018c7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8018c80:	f7f8 fa1a 	bl	80110b8 <HAL_GetTick>
 8018c84:	0003      	movs	r3, r0
 8018c86:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8018c88:	e014      	b.n	8018cb4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018c8a:	f7f8 fa15 	bl	80110b8 <HAL_GetTick>
 8018c8e:	0002      	movs	r2, r0
 8018c90:	68bb      	ldr	r3, [r7, #8]
 8018c92:	1ad2      	subs	r2, r2, r3
 8018c94:	200f      	movs	r0, #15
 8018c96:	183b      	adds	r3, r7, r0
 8018c98:	1839      	adds	r1, r7, r0
 8018c9a:	7809      	ldrb	r1, [r1, #0]
 8018c9c:	7019      	strb	r1, [r3, #0]
 8018c9e:	23fa      	movs	r3, #250	@ 0xfa
 8018ca0:	009b      	lsls	r3, r3, #2
 8018ca2:	429a      	cmp	r2, r3
 8018ca4:	d906      	bls.n	8018cb4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	2221      	movs	r2, #33	@ 0x21
 8018caa:	2104      	movs	r1, #4
 8018cac:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8018cae:	183b      	adds	r3, r7, r0
 8018cb0:	2201      	movs	r2, #1
 8018cb2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	68db      	ldr	r3, [r3, #12]
 8018cba:	2240      	movs	r2, #64	@ 0x40
 8018cbc:	4013      	ands	r3, r2
 8018cbe:	d104      	bne.n	8018cca <RTC_EnterInitMode+0x7a>
 8018cc0:	230f      	movs	r3, #15
 8018cc2:	18fb      	adds	r3, r7, r3
 8018cc4:	781b      	ldrb	r3, [r3, #0]
 8018cc6:	2b01      	cmp	r3, #1
 8018cc8:	d1df      	bne.n	8018c8a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8018cca:	230f      	movs	r3, #15
 8018ccc:	18fb      	adds	r3, r7, r3
 8018cce:	781b      	ldrb	r3, [r3, #0]
}
 8018cd0:	0018      	movs	r0, r3
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	b004      	add	sp, #16
 8018cd6:	bd80      	pop	{r7, pc}

08018cd8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8018cd8:	b590      	push	{r4, r7, lr}
 8018cda:	b085      	sub	sp, #20
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018ce0:	240f      	movs	r4, #15
 8018ce2:	193b      	adds	r3, r7, r4
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	68da      	ldr	r2, [r3, #12]
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	2180      	movs	r1, #128	@ 0x80
 8018cf4:	438a      	bics	r2, r1
 8018cf6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	689b      	ldr	r3, [r3, #8]
 8018cfe:	2220      	movs	r2, #32
 8018d00:	4013      	ands	r3, r2
 8018d02:	d10c      	bne.n	8018d1e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	0018      	movs	r0, r3
 8018d08:	f7ff ff7a 	bl	8018c00 <HAL_RTC_WaitForSynchro>
 8018d0c:	1e03      	subs	r3, r0, #0
 8018d0e:	d006      	beq.n	8018d1e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2221      	movs	r2, #33	@ 0x21
 8018d14:	2104      	movs	r1, #4
 8018d16:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8018d18:	193b      	adds	r3, r7, r4
 8018d1a:	2201      	movs	r2, #1
 8018d1c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8018d1e:	230f      	movs	r3, #15
 8018d20:	18fb      	adds	r3, r7, r3
 8018d22:	781b      	ldrb	r3, [r3, #0]
}
 8018d24:	0018      	movs	r0, r3
 8018d26:	46bd      	mov	sp, r7
 8018d28:	b005      	add	sp, #20
 8018d2a:	bd90      	pop	{r4, r7, pc}

08018d2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b084      	sub	sp, #16
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	0002      	movs	r2, r0
 8018d34:	1dfb      	adds	r3, r7, #7
 8018d36:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8018d3c:	e007      	b.n	8018d4e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	3301      	adds	r3, #1
 8018d42:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8018d44:	1dfb      	adds	r3, r7, #7
 8018d46:	1dfa      	adds	r2, r7, #7
 8018d48:	7812      	ldrb	r2, [r2, #0]
 8018d4a:	3a0a      	subs	r2, #10
 8018d4c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8018d4e:	1dfb      	adds	r3, r7, #7
 8018d50:	781b      	ldrb	r3, [r3, #0]
 8018d52:	2b09      	cmp	r3, #9
 8018d54:	d8f3      	bhi.n	8018d3e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	b2db      	uxtb	r3, r3
 8018d5a:	011b      	lsls	r3, r3, #4
 8018d5c:	b2da      	uxtb	r2, r3
 8018d5e:	1dfb      	adds	r3, r7, #7
 8018d60:	781b      	ldrb	r3, [r3, #0]
 8018d62:	4313      	orrs	r3, r2
 8018d64:	b2db      	uxtb	r3, r3
}
 8018d66:	0018      	movs	r0, r3
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	b004      	add	sp, #16
 8018d6c:	bd80      	pop	{r7, pc}

08018d6e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8018d6e:	b580      	push	{r7, lr}
 8018d70:	b084      	sub	sp, #16
 8018d72:	af00      	add	r7, sp, #0
 8018d74:	0002      	movs	r2, r0
 8018d76:	1dfb      	adds	r3, r7, #7
 8018d78:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8018d7e:	1dfb      	adds	r3, r7, #7
 8018d80:	781b      	ldrb	r3, [r3, #0]
 8018d82:	091b      	lsrs	r3, r3, #4
 8018d84:	b2db      	uxtb	r3, r3
 8018d86:	001a      	movs	r2, r3
 8018d88:	0013      	movs	r3, r2
 8018d8a:	009b      	lsls	r3, r3, #2
 8018d8c:	189b      	adds	r3, r3, r2
 8018d8e:	005b      	lsls	r3, r3, #1
 8018d90:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	b2da      	uxtb	r2, r3
 8018d96:	1dfb      	adds	r3, r7, #7
 8018d98:	781b      	ldrb	r3, [r3, #0]
 8018d9a:	210f      	movs	r1, #15
 8018d9c:	400b      	ands	r3, r1
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	18d3      	adds	r3, r2, r3
 8018da2:	b2db      	uxtb	r3, r3
}
 8018da4:	0018      	movs	r0, r3
 8018da6:	46bd      	mov	sp, r7
 8018da8:	b004      	add	sp, #16
 8018daa:	bd80      	pop	{r7, pc}

08018dac <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b086      	sub	sp, #24
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	60f8      	str	r0, [r7, #12]
 8018db4:	60b9      	str	r1, [r7, #8]
 8018db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8018db8:	4b64      	ldr	r3, [pc, #400]	@ (8018f4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	22fa      	movs	r2, #250	@ 0xfa
 8018dbe:	01d1      	lsls	r1, r2, #7
 8018dc0:	0018      	movs	r0, r3
 8018dc2:	f7e7 f9ef 	bl	80001a4 <__udivsi3>
 8018dc6:	0003      	movs	r3, r0
 8018dc8:	001a      	movs	r2, r3
 8018dca:	0013      	movs	r3, r2
 8018dcc:	015b      	lsls	r3, r3, #5
 8018dce:	1a9b      	subs	r3, r3, r2
 8018dd0:	009b      	lsls	r3, r3, #2
 8018dd2:	189b      	adds	r3, r3, r2
 8018dd4:	00db      	lsls	r3, r3, #3
 8018dd6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	2220      	movs	r2, #32
 8018ddc:	5c9b      	ldrb	r3, [r3, r2]
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	d101      	bne.n	8018de6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8018de2:	2302      	movs	r3, #2
 8018de4:	e0ad      	b.n	8018f42 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	2220      	movs	r2, #32
 8018dea:	2101      	movs	r1, #1
 8018dec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	2221      	movs	r2, #33	@ 0x21
 8018df2:	2102      	movs	r1, #2
 8018df4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	22ca      	movs	r2, #202	@ 0xca
 8018dfc:	625a      	str	r2, [r3, #36]	@ 0x24
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	2253      	movs	r2, #83	@ 0x53
 8018e04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	689a      	ldr	r2, [r3, #8]
 8018e0c:	2380      	movs	r3, #128	@ 0x80
 8018e0e:	00db      	lsls	r3, r3, #3
 8018e10:	4013      	ands	r3, r2
 8018e12:	d019      	beq.n	8018e48 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8018e14:	697b      	ldr	r3, [r7, #20]
 8018e16:	3b01      	subs	r3, #1
 8018e18:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d10d      	bne.n	8018e3c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	22ff      	movs	r2, #255	@ 0xff
 8018e26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	2221      	movs	r2, #33	@ 0x21
 8018e2c:	2103      	movs	r1, #3
 8018e2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	2220      	movs	r2, #32
 8018e34:	2100      	movs	r1, #0
 8018e36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018e38:	2303      	movs	r3, #3
 8018e3a:	e082      	b.n	8018f42 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	68db      	ldr	r3, [r3, #12]
 8018e42:	2204      	movs	r2, #4
 8018e44:	4013      	ands	r3, r2
 8018e46:	d1e5      	bne.n	8018e14 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	689a      	ldr	r2, [r3, #8]
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	493f      	ldr	r1, [pc, #252]	@ (8018f50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8018e54:	400a      	ands	r2, r1
 8018e56:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	68db      	ldr	r3, [r3, #12]
 8018e5e:	22ff      	movs	r2, #255	@ 0xff
 8018e60:	401a      	ands	r2, r3
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	493b      	ldr	r1, [pc, #236]	@ (8018f54 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8018e68:	430a      	orrs	r2, r1
 8018e6a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8018e6c:	4b37      	ldr	r3, [pc, #220]	@ (8018f4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	22fa      	movs	r2, #250	@ 0xfa
 8018e72:	01d1      	lsls	r1, r2, #7
 8018e74:	0018      	movs	r0, r3
 8018e76:	f7e7 f995 	bl	80001a4 <__udivsi3>
 8018e7a:	0003      	movs	r3, r0
 8018e7c:	001a      	movs	r2, r3
 8018e7e:	0013      	movs	r3, r2
 8018e80:	015b      	lsls	r3, r3, #5
 8018e82:	1a9b      	subs	r3, r3, r2
 8018e84:	009b      	lsls	r3, r3, #2
 8018e86:	189b      	adds	r3, r3, r2
 8018e88:	00db      	lsls	r3, r3, #3
 8018e8a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	3b01      	subs	r3, #1
 8018e90:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d10d      	bne.n	8018eb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	22ff      	movs	r2, #255	@ 0xff
 8018e9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	2221      	movs	r2, #33	@ 0x21
 8018ea4:	2103      	movs	r1, #3
 8018ea6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	2220      	movs	r2, #32
 8018eac:	2100      	movs	r1, #0
 8018eae:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018eb0:	2303      	movs	r3, #3
 8018eb2:	e046      	b.n	8018f42 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	68db      	ldr	r3, [r3, #12]
 8018eba:	2204      	movs	r2, #4
 8018ebc:	4013      	ands	r3, r2
 8018ebe:	d0e5      	beq.n	8018e8c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	689a      	ldr	r2, [r3, #8]
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	2107      	movs	r1, #7
 8018ecc:	438a      	bics	r2, r1
 8018ece:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	6899      	ldr	r1, [r3, #8]
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	687a      	ldr	r2, [r7, #4]
 8018edc:	430a      	orrs	r2, r1
 8018ede:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	68ba      	ldr	r2, [r7, #8]
 8018ee6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8018ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8018f58 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018eea:	681a      	ldr	r2, [r3, #0]
 8018eec:	4b1a      	ldr	r3, [pc, #104]	@ (8018f58 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018eee:	2180      	movs	r1, #128	@ 0x80
 8018ef0:	0349      	lsls	r1, r1, #13
 8018ef2:	430a      	orrs	r2, r1
 8018ef4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8018ef6:	4b18      	ldr	r3, [pc, #96]	@ (8018f58 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018ef8:	689a      	ldr	r2, [r3, #8]
 8018efa:	4b17      	ldr	r3, [pc, #92]	@ (8018f58 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018efc:	2180      	movs	r1, #128	@ 0x80
 8018efe:	0349      	lsls	r1, r1, #13
 8018f00:	430a      	orrs	r2, r1
 8018f02:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	689a      	ldr	r2, [r3, #8]
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	2180      	movs	r1, #128	@ 0x80
 8018f10:	01c9      	lsls	r1, r1, #7
 8018f12:	430a      	orrs	r2, r1
 8018f14:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	689a      	ldr	r2, [r3, #8]
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	2180      	movs	r1, #128	@ 0x80
 8018f22:	00c9      	lsls	r1, r1, #3
 8018f24:	430a      	orrs	r2, r1
 8018f26:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	22ff      	movs	r2, #255	@ 0xff
 8018f2e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	2221      	movs	r2, #33	@ 0x21
 8018f34:	2101      	movs	r1, #1
 8018f36:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	2220      	movs	r2, #32
 8018f3c:	2100      	movs	r1, #0
 8018f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018f40:	2300      	movs	r3, #0
}
 8018f42:	0018      	movs	r0, r3
 8018f44:	46bd      	mov	sp, r7
 8018f46:	b006      	add	sp, #24
 8018f48:	bd80      	pop	{r7, pc}
 8018f4a:	46c0      	nop			@ (mov r8, r8)
 8018f4c:	200000e0 	.word	0x200000e0
 8018f50:	fffffbff 	.word	0xfffffbff
 8018f54:	fffffb7f 	.word	0xfffffb7f
 8018f58:	40010400 	.word	0x40010400

08018f5c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b084      	sub	sp, #16
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018f64:	2300      	movs	r3, #0
 8018f66:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2220      	movs	r2, #32
 8018f6c:	5c9b      	ldrb	r3, [r3, r2]
 8018f6e:	2b01      	cmp	r3, #1
 8018f70:	d101      	bne.n	8018f76 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8018f72:	2302      	movs	r3, #2
 8018f74:	e04e      	b.n	8019014 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	2220      	movs	r2, #32
 8018f7a:	2101      	movs	r1, #1
 8018f7c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	2221      	movs	r2, #33	@ 0x21
 8018f82:	2102      	movs	r1, #2
 8018f84:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	22ca      	movs	r2, #202	@ 0xca
 8018f8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	2253      	movs	r2, #83	@ 0x53
 8018f94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	689a      	ldr	r2, [r3, #8]
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	491e      	ldr	r1, [pc, #120]	@ (801901c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8018fa2:	400a      	ands	r2, r1
 8018fa4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	689a      	ldr	r2, [r3, #8]
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	491b      	ldr	r1, [pc, #108]	@ (8019020 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8018fb2:	400a      	ands	r2, r1
 8018fb4:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018fb6:	f7f8 f87f 	bl	80110b8 <HAL_GetTick>
 8018fba:	0003      	movs	r3, r0
 8018fbc:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8018fbe:	e016      	b.n	8018fee <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018fc0:	f7f8 f87a 	bl	80110b8 <HAL_GetTick>
 8018fc4:	0002      	movs	r2, r0
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	1ad2      	subs	r2, r2, r3
 8018fca:	23fa      	movs	r3, #250	@ 0xfa
 8018fcc:	009b      	lsls	r3, r3, #2
 8018fce:	429a      	cmp	r2, r3
 8018fd0:	d90d      	bls.n	8018fee <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	22ff      	movs	r2, #255	@ 0xff
 8018fd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	2221      	movs	r2, #33	@ 0x21
 8018fde:	2103      	movs	r1, #3
 8018fe0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	2220      	movs	r2, #32
 8018fe6:	2100      	movs	r1, #0
 8018fe8:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018fea:	2303      	movs	r3, #3
 8018fec:	e012      	b.n	8019014 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	68db      	ldr	r3, [r3, #12]
 8018ff4:	2204      	movs	r2, #4
 8018ff6:	4013      	ands	r3, r2
 8018ff8:	d0e2      	beq.n	8018fc0 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	22ff      	movs	r2, #255	@ 0xff
 8019000:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2221      	movs	r2, #33	@ 0x21
 8019006:	2101      	movs	r1, #1
 8019008:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	2220      	movs	r2, #32
 801900e:	2100      	movs	r1, #0
 8019010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019012:	2300      	movs	r3, #0
}
 8019014:	0018      	movs	r0, r3
 8019016:	46bd      	mov	sp, r7
 8019018:	b004      	add	sp, #16
 801901a:	bd80      	pop	{r7, pc}
 801901c:	fffffbff 	.word	0xfffffbff
 8019020:	ffffbfff 	.word	0xffffbfff

08019024 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801902c:	4b13      	ldr	r3, [pc, #76]	@ (801907c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801902e:	2280      	movs	r2, #128	@ 0x80
 8019030:	0352      	lsls	r2, r2, #13
 8019032:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	689a      	ldr	r2, [r3, #8]
 801903a:	2380      	movs	r3, #128	@ 0x80
 801903c:	01db      	lsls	r3, r3, #7
 801903e:	4013      	ands	r3, r2
 8019040:	d014      	beq.n	801906c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	68da      	ldr	r2, [r3, #12]
 8019048:	2380      	movs	r3, #128	@ 0x80
 801904a:	00db      	lsls	r3, r3, #3
 801904c:	4013      	ands	r3, r2
 801904e:	d00d      	beq.n	801906c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	68db      	ldr	r3, [r3, #12]
 8019056:	22ff      	movs	r2, #255	@ 0xff
 8019058:	401a      	ands	r2, r3
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	4908      	ldr	r1, [pc, #32]	@ (8019080 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8019060:	430a      	orrs	r2, r1
 8019062:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	0018      	movs	r0, r3
 8019068:	f000 f80c 	bl	8019084 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2221      	movs	r2, #33	@ 0x21
 8019070:	2101      	movs	r1, #1
 8019072:	5499      	strb	r1, [r3, r2]
}
 8019074:	46c0      	nop			@ (mov r8, r8)
 8019076:	46bd      	mov	sp, r7
 8019078:	b002      	add	sp, #8
 801907a:	bd80      	pop	{r7, pc}
 801907c:	40010400 	.word	0x40010400
 8019080:	fffffb7f 	.word	0xfffffb7f

08019084 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b082      	sub	sp, #8
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801908c:	46c0      	nop			@ (mov r8, r8)
 801908e:	46bd      	mov	sp, r7
 8019090:	b002      	add	sp, #8
 8019092:	bd80      	pop	{r7, pc}

08019094 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b086      	sub	sp, #24
 8019098:	af00      	add	r7, sp, #0
 801909a:	60f8      	str	r0, [r7, #12]
 801909c:	60b9      	str	r1, [r7, #8]
 801909e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80190a0:	2300      	movs	r3, #0
 80190a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	3350      	adds	r3, #80	@ 0x50
 80190aa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	009b      	lsls	r3, r3, #2
 80190b0:	697a      	ldr	r2, [r7, #20]
 80190b2:	18d3      	adds	r3, r2, r3
 80190b4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80190b6:	697b      	ldr	r3, [r7, #20]
 80190b8:	687a      	ldr	r2, [r7, #4]
 80190ba:	601a      	str	r2, [r3, #0]
}
 80190bc:	46c0      	nop			@ (mov r8, r8)
 80190be:	46bd      	mov	sp, r7
 80190c0:	b006      	add	sp, #24
 80190c2:	bd80      	pop	{r7, pc}

080190c4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	b084      	sub	sp, #16
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
 80190cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80190ce:	2300      	movs	r3, #0
 80190d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	3350      	adds	r3, #80	@ 0x50
 80190d8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	009b      	lsls	r3, r3, #2
 80190de:	68fa      	ldr	r2, [r7, #12]
 80190e0:	18d3      	adds	r3, r2, r3
 80190e2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	681b      	ldr	r3, [r3, #0]
}
 80190e8:	0018      	movs	r0, r3
 80190ea:	46bd      	mov	sp, r7
 80190ec:	b004      	add	sp, #16
 80190ee:	bd80      	pop	{r7, pc}

080190f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d101      	bne.n	8019102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80190fe:	2301      	movs	r3, #1
 8019100:	e032      	b.n	8019168 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	2239      	movs	r2, #57	@ 0x39
 8019106:	5c9b      	ldrb	r3, [r3, r2]
 8019108:	b2db      	uxtb	r3, r3
 801910a:	2b00      	cmp	r3, #0
 801910c:	d107      	bne.n	801911e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	2238      	movs	r2, #56	@ 0x38
 8019112:	2100      	movs	r1, #0
 8019114:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	0018      	movs	r0, r3
 801911a:	f7f7 f8dd 	bl	80102d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	2239      	movs	r2, #57	@ 0x39
 8019122:	2102      	movs	r1, #2
 8019124:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	681a      	ldr	r2, [r3, #0]
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	3304      	adds	r3, #4
 801912e:	0019      	movs	r1, r3
 8019130:	0010      	movs	r0, r2
 8019132:	f000 fa1d 	bl	8019570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	223e      	movs	r2, #62	@ 0x3e
 801913a:	2101      	movs	r1, #1
 801913c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	223a      	movs	r2, #58	@ 0x3a
 8019142:	2101      	movs	r1, #1
 8019144:	5499      	strb	r1, [r3, r2]
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	223b      	movs	r2, #59	@ 0x3b
 801914a:	2101      	movs	r1, #1
 801914c:	5499      	strb	r1, [r3, r2]
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	223c      	movs	r2, #60	@ 0x3c
 8019152:	2101      	movs	r1, #1
 8019154:	5499      	strb	r1, [r3, r2]
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	223d      	movs	r2, #61	@ 0x3d
 801915a:	2101      	movs	r1, #1
 801915c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	2239      	movs	r2, #57	@ 0x39
 8019162:	2101      	movs	r1, #1
 8019164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019166:	2300      	movs	r3, #0
}
 8019168:	0018      	movs	r0, r3
 801916a:	46bd      	mov	sp, r7
 801916c:	b002      	add	sp, #8
 801916e:	bd80      	pop	{r7, pc}

08019170 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8019170:	b580      	push	{r7, lr}
 8019172:	b084      	sub	sp, #16
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	2239      	movs	r2, #57	@ 0x39
 801917c:	5c9b      	ldrb	r3, [r3, r2]
 801917e:	b2db      	uxtb	r3, r3
 8019180:	2b01      	cmp	r3, #1
 8019182:	d001      	beq.n	8019188 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8019184:	2301      	movs	r3, #1
 8019186:	e033      	b.n	80191f0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	2239      	movs	r2, #57	@ 0x39
 801918c:	2102      	movs	r1, #2
 801918e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681a      	ldr	r2, [r3, #0]
 8019194:	2380      	movs	r3, #128	@ 0x80
 8019196:	05db      	lsls	r3, r3, #23
 8019198:	429a      	cmp	r2, r3
 801919a:	d00e      	beq.n	80191ba <HAL_TIM_Base_Start+0x4a>
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	4a15      	ldr	r2, [pc, #84]	@ (80191f8 <HAL_TIM_Base_Start+0x88>)
 80191a2:	4293      	cmp	r3, r2
 80191a4:	d009      	beq.n	80191ba <HAL_TIM_Base_Start+0x4a>
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	4a14      	ldr	r2, [pc, #80]	@ (80191fc <HAL_TIM_Base_Start+0x8c>)
 80191ac:	4293      	cmp	r3, r2
 80191ae:	d004      	beq.n	80191ba <HAL_TIM_Base_Start+0x4a>
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	4a12      	ldr	r2, [pc, #72]	@ (8019200 <HAL_TIM_Base_Start+0x90>)
 80191b6:	4293      	cmp	r3, r2
 80191b8:	d111      	bne.n	80191de <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	689b      	ldr	r3, [r3, #8]
 80191c0:	2207      	movs	r2, #7
 80191c2:	4013      	ands	r3, r2
 80191c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	2b06      	cmp	r3, #6
 80191ca:	d010      	beq.n	80191ee <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	681a      	ldr	r2, [r3, #0]
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	2101      	movs	r1, #1
 80191d8:	430a      	orrs	r2, r1
 80191da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80191dc:	e007      	b.n	80191ee <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	681a      	ldr	r2, [r3, #0]
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	2101      	movs	r1, #1
 80191ea:	430a      	orrs	r2, r1
 80191ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80191ee:	2300      	movs	r3, #0
}
 80191f0:	0018      	movs	r0, r3
 80191f2:	46bd      	mov	sp, r7
 80191f4:	b004      	add	sp, #16
 80191f6:	bd80      	pop	{r7, pc}
 80191f8:	40000400 	.word	0x40000400
 80191fc:	40010800 	.word	0x40010800
 8019200:	40011400 	.word	0x40011400

08019204 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b082      	sub	sp, #8
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	6a1b      	ldr	r3, [r3, #32]
 8019212:	4a0a      	ldr	r2, [pc, #40]	@ (801923c <HAL_TIM_Base_Stop+0x38>)
 8019214:	4013      	ands	r3, r2
 8019216:	d107      	bne.n	8019228 <HAL_TIM_Base_Stop+0x24>
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	681a      	ldr	r2, [r3, #0]
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	2101      	movs	r1, #1
 8019224:	438a      	bics	r2, r1
 8019226:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	2239      	movs	r2, #57	@ 0x39
 801922c:	2101      	movs	r1, #1
 801922e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8019230:	2300      	movs	r3, #0
}
 8019232:	0018      	movs	r0, r3
 8019234:	46bd      	mov	sp, r7
 8019236:	b002      	add	sp, #8
 8019238:	bd80      	pop	{r7, pc}
 801923a:	46c0      	nop			@ (mov r8, r8)
 801923c:	00001111 	.word	0x00001111

08019240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b082      	sub	sp, #8
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d101      	bne.n	8019252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801924e:	2301      	movs	r3, #1
 8019250:	e032      	b.n	80192b8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	2239      	movs	r2, #57	@ 0x39
 8019256:	5c9b      	ldrb	r3, [r3, r2]
 8019258:	b2db      	uxtb	r3, r3
 801925a:	2b00      	cmp	r3, #0
 801925c:	d107      	bne.n	801926e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2238      	movs	r2, #56	@ 0x38
 8019262:	2100      	movs	r1, #0
 8019264:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	0018      	movs	r0, r3
 801926a:	f7f7 f811 	bl	8010290 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	2239      	movs	r2, #57	@ 0x39
 8019272:	2102      	movs	r1, #2
 8019274:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	681a      	ldr	r2, [r3, #0]
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	3304      	adds	r3, #4
 801927e:	0019      	movs	r1, r3
 8019280:	0010      	movs	r0, r2
 8019282:	f000 f975 	bl	8019570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	223e      	movs	r2, #62	@ 0x3e
 801928a:	2101      	movs	r1, #1
 801928c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	223a      	movs	r2, #58	@ 0x3a
 8019292:	2101      	movs	r1, #1
 8019294:	5499      	strb	r1, [r3, r2]
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	223b      	movs	r2, #59	@ 0x3b
 801929a:	2101      	movs	r1, #1
 801929c:	5499      	strb	r1, [r3, r2]
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	223c      	movs	r2, #60	@ 0x3c
 80192a2:	2101      	movs	r1, #1
 80192a4:	5499      	strb	r1, [r3, r2]
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	223d      	movs	r2, #61	@ 0x3d
 80192aa:	2101      	movs	r1, #1
 80192ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	2239      	movs	r2, #57	@ 0x39
 80192b2:	2101      	movs	r1, #1
 80192b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80192b6:	2300      	movs	r3, #0
}
 80192b8:	0018      	movs	r0, r3
 80192ba:	46bd      	mov	sp, r7
 80192bc:	b002      	add	sp, #8
 80192be:	bd80      	pop	{r7, pc}

080192c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b084      	sub	sp, #16
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
 80192c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80192ca:	683b      	ldr	r3, [r7, #0]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d108      	bne.n	80192e2 <HAL_TIM_PWM_Start+0x22>
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	223a      	movs	r2, #58	@ 0x3a
 80192d4:	5c9b      	ldrb	r3, [r3, r2]
 80192d6:	b2db      	uxtb	r3, r3
 80192d8:	3b01      	subs	r3, #1
 80192da:	1e5a      	subs	r2, r3, #1
 80192dc:	4193      	sbcs	r3, r2
 80192de:	b2db      	uxtb	r3, r3
 80192e0:	e01f      	b.n	8019322 <HAL_TIM_PWM_Start+0x62>
 80192e2:	683b      	ldr	r3, [r7, #0]
 80192e4:	2b04      	cmp	r3, #4
 80192e6:	d108      	bne.n	80192fa <HAL_TIM_PWM_Start+0x3a>
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	223b      	movs	r2, #59	@ 0x3b
 80192ec:	5c9b      	ldrb	r3, [r3, r2]
 80192ee:	b2db      	uxtb	r3, r3
 80192f0:	3b01      	subs	r3, #1
 80192f2:	1e5a      	subs	r2, r3, #1
 80192f4:	4193      	sbcs	r3, r2
 80192f6:	b2db      	uxtb	r3, r3
 80192f8:	e013      	b.n	8019322 <HAL_TIM_PWM_Start+0x62>
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	2b08      	cmp	r3, #8
 80192fe:	d108      	bne.n	8019312 <HAL_TIM_PWM_Start+0x52>
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	223c      	movs	r2, #60	@ 0x3c
 8019304:	5c9b      	ldrb	r3, [r3, r2]
 8019306:	b2db      	uxtb	r3, r3
 8019308:	3b01      	subs	r3, #1
 801930a:	1e5a      	subs	r2, r3, #1
 801930c:	4193      	sbcs	r3, r2
 801930e:	b2db      	uxtb	r3, r3
 8019310:	e007      	b.n	8019322 <HAL_TIM_PWM_Start+0x62>
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	223d      	movs	r2, #61	@ 0x3d
 8019316:	5c9b      	ldrb	r3, [r3, r2]
 8019318:	b2db      	uxtb	r3, r3
 801931a:	3b01      	subs	r3, #1
 801931c:	1e5a      	subs	r2, r3, #1
 801931e:	4193      	sbcs	r3, r2
 8019320:	b2db      	uxtb	r3, r3
 8019322:	2b00      	cmp	r3, #0
 8019324:	d001      	beq.n	801932a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8019326:	2301      	movs	r3, #1
 8019328:	e052      	b.n	80193d0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d104      	bne.n	801933a <HAL_TIM_PWM_Start+0x7a>
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	223a      	movs	r2, #58	@ 0x3a
 8019334:	2102      	movs	r1, #2
 8019336:	5499      	strb	r1, [r3, r2]
 8019338:	e013      	b.n	8019362 <HAL_TIM_PWM_Start+0xa2>
 801933a:	683b      	ldr	r3, [r7, #0]
 801933c:	2b04      	cmp	r3, #4
 801933e:	d104      	bne.n	801934a <HAL_TIM_PWM_Start+0x8a>
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	223b      	movs	r2, #59	@ 0x3b
 8019344:	2102      	movs	r1, #2
 8019346:	5499      	strb	r1, [r3, r2]
 8019348:	e00b      	b.n	8019362 <HAL_TIM_PWM_Start+0xa2>
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	2b08      	cmp	r3, #8
 801934e:	d104      	bne.n	801935a <HAL_TIM_PWM_Start+0x9a>
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	223c      	movs	r2, #60	@ 0x3c
 8019354:	2102      	movs	r1, #2
 8019356:	5499      	strb	r1, [r3, r2]
 8019358:	e003      	b.n	8019362 <HAL_TIM_PWM_Start+0xa2>
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	223d      	movs	r2, #61	@ 0x3d
 801935e:	2102      	movs	r1, #2
 8019360:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	6839      	ldr	r1, [r7, #0]
 8019368:	2201      	movs	r2, #1
 801936a:	0018      	movs	r0, r3
 801936c:	f000 fa62 	bl	8019834 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681a      	ldr	r2, [r3, #0]
 8019374:	2380      	movs	r3, #128	@ 0x80
 8019376:	05db      	lsls	r3, r3, #23
 8019378:	429a      	cmp	r2, r3
 801937a:	d00e      	beq.n	801939a <HAL_TIM_PWM_Start+0xda>
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	4a15      	ldr	r2, [pc, #84]	@ (80193d8 <HAL_TIM_PWM_Start+0x118>)
 8019382:	4293      	cmp	r3, r2
 8019384:	d009      	beq.n	801939a <HAL_TIM_PWM_Start+0xda>
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	4a14      	ldr	r2, [pc, #80]	@ (80193dc <HAL_TIM_PWM_Start+0x11c>)
 801938c:	4293      	cmp	r3, r2
 801938e:	d004      	beq.n	801939a <HAL_TIM_PWM_Start+0xda>
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	4a12      	ldr	r2, [pc, #72]	@ (80193e0 <HAL_TIM_PWM_Start+0x120>)
 8019396:	4293      	cmp	r3, r2
 8019398:	d111      	bne.n	80193be <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	689b      	ldr	r3, [r3, #8]
 80193a0:	2207      	movs	r2, #7
 80193a2:	4013      	ands	r3, r2
 80193a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	2b06      	cmp	r3, #6
 80193aa:	d010      	beq.n	80193ce <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	681a      	ldr	r2, [r3, #0]
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	2101      	movs	r1, #1
 80193b8:	430a      	orrs	r2, r1
 80193ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80193bc:	e007      	b.n	80193ce <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	681a      	ldr	r2, [r3, #0]
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	2101      	movs	r1, #1
 80193ca:	430a      	orrs	r2, r1
 80193cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80193ce:	2300      	movs	r3, #0
}
 80193d0:	0018      	movs	r0, r3
 80193d2:	46bd      	mov	sp, r7
 80193d4:	b004      	add	sp, #16
 80193d6:	bd80      	pop	{r7, pc}
 80193d8:	40000400 	.word	0x40000400
 80193dc:	40010800 	.word	0x40010800
 80193e0:	40011400 	.word	0x40011400

080193e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b086      	sub	sp, #24
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	60f8      	str	r0, [r7, #12]
 80193ec:	60b9      	str	r1, [r7, #8]
 80193ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80193f0:	2317      	movs	r3, #23
 80193f2:	18fb      	adds	r3, r7, r3
 80193f4:	2200      	movs	r2, #0
 80193f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	2238      	movs	r2, #56	@ 0x38
 80193fc:	5c9b      	ldrb	r3, [r3, r2]
 80193fe:	2b01      	cmp	r3, #1
 8019400:	d101      	bne.n	8019406 <HAL_TIM_PWM_ConfigChannel+0x22>
 8019402:	2302      	movs	r3, #2
 8019404:	e0ad      	b.n	8019562 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	2238      	movs	r2, #56	@ 0x38
 801940a:	2101      	movs	r1, #1
 801940c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	2b0c      	cmp	r3, #12
 8019412:	d100      	bne.n	8019416 <HAL_TIM_PWM_ConfigChannel+0x32>
 8019414:	e076      	b.n	8019504 <HAL_TIM_PWM_ConfigChannel+0x120>
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	2b0c      	cmp	r3, #12
 801941a:	d900      	bls.n	801941e <HAL_TIM_PWM_ConfigChannel+0x3a>
 801941c:	e095      	b.n	801954a <HAL_TIM_PWM_ConfigChannel+0x166>
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	2b08      	cmp	r3, #8
 8019422:	d04e      	beq.n	80194c2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	2b08      	cmp	r3, #8
 8019428:	d900      	bls.n	801942c <HAL_TIM_PWM_ConfigChannel+0x48>
 801942a:	e08e      	b.n	801954a <HAL_TIM_PWM_ConfigChannel+0x166>
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d003      	beq.n	801943a <HAL_TIM_PWM_ConfigChannel+0x56>
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2b04      	cmp	r3, #4
 8019436:	d021      	beq.n	801947c <HAL_TIM_PWM_ConfigChannel+0x98>
 8019438:	e087      	b.n	801954a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	68ba      	ldr	r2, [r7, #8]
 8019440:	0011      	movs	r1, r2
 8019442:	0018      	movs	r0, r3
 8019444:	f000 f8f2 	bl	801962c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	699a      	ldr	r2, [r3, #24]
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	2108      	movs	r1, #8
 8019454:	430a      	orrs	r2, r1
 8019456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	699a      	ldr	r2, [r3, #24]
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	2104      	movs	r1, #4
 8019464:	438a      	bics	r2, r1
 8019466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	6999      	ldr	r1, [r3, #24]
 801946e:	68bb      	ldr	r3, [r7, #8]
 8019470:	68da      	ldr	r2, [r3, #12]
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	430a      	orrs	r2, r1
 8019478:	619a      	str	r2, [r3, #24]
      break;
 801947a:	e06b      	b.n	8019554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	68ba      	ldr	r2, [r7, #8]
 8019482:	0011      	movs	r1, r2
 8019484:	0018      	movs	r0, r3
 8019486:	f000 f90d 	bl	80196a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	699a      	ldr	r2, [r3, #24]
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	2180      	movs	r1, #128	@ 0x80
 8019496:	0109      	lsls	r1, r1, #4
 8019498:	430a      	orrs	r2, r1
 801949a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	699a      	ldr	r2, [r3, #24]
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	4931      	ldr	r1, [pc, #196]	@ (801956c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80194a8:	400a      	ands	r2, r1
 80194aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	6999      	ldr	r1, [r3, #24]
 80194b2:	68bb      	ldr	r3, [r7, #8]
 80194b4:	68db      	ldr	r3, [r3, #12]
 80194b6:	021a      	lsls	r2, r3, #8
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	430a      	orrs	r2, r1
 80194be:	619a      	str	r2, [r3, #24]
      break;
 80194c0:	e048      	b.n	8019554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	68ba      	ldr	r2, [r7, #8]
 80194c8:	0011      	movs	r1, r2
 80194ca:	0018      	movs	r0, r3
 80194cc:	f000 f92c 	bl	8019728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	69da      	ldr	r2, [r3, #28]
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	2108      	movs	r1, #8
 80194dc:	430a      	orrs	r2, r1
 80194de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	69da      	ldr	r2, [r3, #28]
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	2104      	movs	r1, #4
 80194ec:	438a      	bics	r2, r1
 80194ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	69d9      	ldr	r1, [r3, #28]
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	68da      	ldr	r2, [r3, #12]
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	430a      	orrs	r2, r1
 8019500:	61da      	str	r2, [r3, #28]
      break;
 8019502:	e027      	b.n	8019554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	68ba      	ldr	r2, [r7, #8]
 801950a:	0011      	movs	r1, r2
 801950c:	0018      	movs	r0, r3
 801950e:	f000 f94b 	bl	80197a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	69da      	ldr	r2, [r3, #28]
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	2180      	movs	r1, #128	@ 0x80
 801951e:	0109      	lsls	r1, r1, #4
 8019520:	430a      	orrs	r2, r1
 8019522:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	69da      	ldr	r2, [r3, #28]
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	490f      	ldr	r1, [pc, #60]	@ (801956c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8019530:	400a      	ands	r2, r1
 8019532:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	69d9      	ldr	r1, [r3, #28]
 801953a:	68bb      	ldr	r3, [r7, #8]
 801953c:	68db      	ldr	r3, [r3, #12]
 801953e:	021a      	lsls	r2, r3, #8
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	430a      	orrs	r2, r1
 8019546:	61da      	str	r2, [r3, #28]
      break;
 8019548:	e004      	b.n	8019554 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801954a:	2317      	movs	r3, #23
 801954c:	18fb      	adds	r3, r7, r3
 801954e:	2201      	movs	r2, #1
 8019550:	701a      	strb	r2, [r3, #0]
      break;
 8019552:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	2238      	movs	r2, #56	@ 0x38
 8019558:	2100      	movs	r1, #0
 801955a:	5499      	strb	r1, [r3, r2]

  return status;
 801955c:	2317      	movs	r3, #23
 801955e:	18fb      	adds	r3, r7, r3
 8019560:	781b      	ldrb	r3, [r3, #0]
}
 8019562:	0018      	movs	r0, r3
 8019564:	46bd      	mov	sp, r7
 8019566:	b006      	add	sp, #24
 8019568:	bd80      	pop	{r7, pc}
 801956a:	46c0      	nop			@ (mov r8, r8)
 801956c:	fffffbff 	.word	0xfffffbff

08019570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b084      	sub	sp, #16
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
 8019578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	2380      	movs	r3, #128	@ 0x80
 8019584:	05db      	lsls	r3, r3, #23
 8019586:	429a      	cmp	r2, r3
 8019588:	d00b      	beq.n	80195a2 <TIM_Base_SetConfig+0x32>
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	4a23      	ldr	r2, [pc, #140]	@ (801961c <TIM_Base_SetConfig+0xac>)
 801958e:	4293      	cmp	r3, r2
 8019590:	d007      	beq.n	80195a2 <TIM_Base_SetConfig+0x32>
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	4a22      	ldr	r2, [pc, #136]	@ (8019620 <TIM_Base_SetConfig+0xb0>)
 8019596:	4293      	cmp	r3, r2
 8019598:	d003      	beq.n	80195a2 <TIM_Base_SetConfig+0x32>
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	4a21      	ldr	r2, [pc, #132]	@ (8019624 <TIM_Base_SetConfig+0xb4>)
 801959e:	4293      	cmp	r3, r2
 80195a0:	d108      	bne.n	80195b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	2270      	movs	r2, #112	@ 0x70
 80195a6:	4393      	bics	r3, r2
 80195a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	685b      	ldr	r3, [r3, #4]
 80195ae:	68fa      	ldr	r2, [r7, #12]
 80195b0:	4313      	orrs	r3, r2
 80195b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80195b4:	687a      	ldr	r2, [r7, #4]
 80195b6:	2380      	movs	r3, #128	@ 0x80
 80195b8:	05db      	lsls	r3, r3, #23
 80195ba:	429a      	cmp	r2, r3
 80195bc:	d00b      	beq.n	80195d6 <TIM_Base_SetConfig+0x66>
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	4a16      	ldr	r2, [pc, #88]	@ (801961c <TIM_Base_SetConfig+0xac>)
 80195c2:	4293      	cmp	r3, r2
 80195c4:	d007      	beq.n	80195d6 <TIM_Base_SetConfig+0x66>
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	4a15      	ldr	r2, [pc, #84]	@ (8019620 <TIM_Base_SetConfig+0xb0>)
 80195ca:	4293      	cmp	r3, r2
 80195cc:	d003      	beq.n	80195d6 <TIM_Base_SetConfig+0x66>
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	4a14      	ldr	r2, [pc, #80]	@ (8019624 <TIM_Base_SetConfig+0xb4>)
 80195d2:	4293      	cmp	r3, r2
 80195d4:	d108      	bne.n	80195e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	4a13      	ldr	r2, [pc, #76]	@ (8019628 <TIM_Base_SetConfig+0xb8>)
 80195da:	4013      	ands	r3, r2
 80195dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80195de:	683b      	ldr	r3, [r7, #0]
 80195e0:	68db      	ldr	r3, [r3, #12]
 80195e2:	68fa      	ldr	r2, [r7, #12]
 80195e4:	4313      	orrs	r3, r2
 80195e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	2280      	movs	r2, #128	@ 0x80
 80195ec:	4393      	bics	r3, r2
 80195ee:	001a      	movs	r2, r3
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	691b      	ldr	r3, [r3, #16]
 80195f4:	4313      	orrs	r3, r2
 80195f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	68fa      	ldr	r2, [r7, #12]
 80195fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	689a      	ldr	r2, [r3, #8]
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019606:	683b      	ldr	r3, [r7, #0]
 8019608:	681a      	ldr	r2, [r3, #0]
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	2201      	movs	r2, #1
 8019612:	615a      	str	r2, [r3, #20]
}
 8019614:	46c0      	nop			@ (mov r8, r8)
 8019616:	46bd      	mov	sp, r7
 8019618:	b004      	add	sp, #16
 801961a:	bd80      	pop	{r7, pc}
 801961c:	40000400 	.word	0x40000400
 8019620:	40010800 	.word	0x40010800
 8019624:	40011400 	.word	0x40011400
 8019628:	fffffcff 	.word	0xfffffcff

0801962c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801962c:	b580      	push	{r7, lr}
 801962e:	b086      	sub	sp, #24
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	6a1b      	ldr	r3, [r3, #32]
 801963a:	2201      	movs	r2, #1
 801963c:	4393      	bics	r3, r2
 801963e:	001a      	movs	r2, r3
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	6a1b      	ldr	r3, [r3, #32]
 8019648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	685b      	ldr	r3, [r3, #4]
 801964e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	699b      	ldr	r3, [r3, #24]
 8019654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	2270      	movs	r2, #112	@ 0x70
 801965a:	4393      	bics	r3, r2
 801965c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	2203      	movs	r2, #3
 8019662:	4393      	bics	r3, r2
 8019664:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019666:	683b      	ldr	r3, [r7, #0]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	68fa      	ldr	r2, [r7, #12]
 801966c:	4313      	orrs	r3, r2
 801966e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8019670:	697b      	ldr	r3, [r7, #20]
 8019672:	2202      	movs	r2, #2
 8019674:	4393      	bics	r3, r2
 8019676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8019678:	683b      	ldr	r3, [r7, #0]
 801967a:	689b      	ldr	r3, [r3, #8]
 801967c:	697a      	ldr	r2, [r7, #20]
 801967e:	4313      	orrs	r3, r2
 8019680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	693a      	ldr	r2, [r7, #16]
 8019686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	68fa      	ldr	r2, [r7, #12]
 801968c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	685a      	ldr	r2, [r3, #4]
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	697a      	ldr	r2, [r7, #20]
 801969a:	621a      	str	r2, [r3, #32]
}
 801969c:	46c0      	nop			@ (mov r8, r8)
 801969e:	46bd      	mov	sp, r7
 80196a0:	b006      	add	sp, #24
 80196a2:	bd80      	pop	{r7, pc}

080196a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b086      	sub	sp, #24
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
 80196ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	6a1b      	ldr	r3, [r3, #32]
 80196b2:	2210      	movs	r2, #16
 80196b4:	4393      	bics	r3, r2
 80196b6:	001a      	movs	r2, r3
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	6a1b      	ldr	r3, [r3, #32]
 80196c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	685b      	ldr	r3, [r3, #4]
 80196c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	699b      	ldr	r3, [r3, #24]
 80196cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	4a13      	ldr	r2, [pc, #76]	@ (8019720 <TIM_OC2_SetConfig+0x7c>)
 80196d2:	4013      	ands	r3, r2
 80196d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	4a12      	ldr	r2, [pc, #72]	@ (8019724 <TIM_OC2_SetConfig+0x80>)
 80196da:	4013      	ands	r3, r2
 80196dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	021b      	lsls	r3, r3, #8
 80196e4:	68fa      	ldr	r2, [r7, #12]
 80196e6:	4313      	orrs	r3, r2
 80196e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80196ea:	697b      	ldr	r3, [r7, #20]
 80196ec:	2220      	movs	r2, #32
 80196ee:	4393      	bics	r3, r2
 80196f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80196f2:	683b      	ldr	r3, [r7, #0]
 80196f4:	689b      	ldr	r3, [r3, #8]
 80196f6:	011b      	lsls	r3, r3, #4
 80196f8:	697a      	ldr	r2, [r7, #20]
 80196fa:	4313      	orrs	r3, r2
 80196fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	693a      	ldr	r2, [r7, #16]
 8019702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	68fa      	ldr	r2, [r7, #12]
 8019708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	685a      	ldr	r2, [r3, #4]
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	697a      	ldr	r2, [r7, #20]
 8019716:	621a      	str	r2, [r3, #32]
}
 8019718:	46c0      	nop			@ (mov r8, r8)
 801971a:	46bd      	mov	sp, r7
 801971c:	b006      	add	sp, #24
 801971e:	bd80      	pop	{r7, pc}
 8019720:	ffff8fff 	.word	0xffff8fff
 8019724:	fffffcff 	.word	0xfffffcff

08019728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b086      	sub	sp, #24
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
 8019730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	6a1b      	ldr	r3, [r3, #32]
 8019736:	4a1a      	ldr	r2, [pc, #104]	@ (80197a0 <TIM_OC3_SetConfig+0x78>)
 8019738:	401a      	ands	r2, r3
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	6a1b      	ldr	r3, [r3, #32]
 8019742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	685b      	ldr	r3, [r3, #4]
 8019748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	69db      	ldr	r3, [r3, #28]
 801974e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	2270      	movs	r2, #112	@ 0x70
 8019754:	4393      	bics	r3, r2
 8019756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	2203      	movs	r2, #3
 801975c:	4393      	bics	r3, r2
 801975e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019760:	683b      	ldr	r3, [r7, #0]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	68fa      	ldr	r2, [r7, #12]
 8019766:	4313      	orrs	r3, r2
 8019768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801976a:	697b      	ldr	r3, [r7, #20]
 801976c:	4a0d      	ldr	r2, [pc, #52]	@ (80197a4 <TIM_OC3_SetConfig+0x7c>)
 801976e:	4013      	ands	r3, r2
 8019770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8019772:	683b      	ldr	r3, [r7, #0]
 8019774:	689b      	ldr	r3, [r3, #8]
 8019776:	021b      	lsls	r3, r3, #8
 8019778:	697a      	ldr	r2, [r7, #20]
 801977a:	4313      	orrs	r3, r2
 801977c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	693a      	ldr	r2, [r7, #16]
 8019782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	68fa      	ldr	r2, [r7, #12]
 8019788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	685a      	ldr	r2, [r3, #4]
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	697a      	ldr	r2, [r7, #20]
 8019796:	621a      	str	r2, [r3, #32]
}
 8019798:	46c0      	nop			@ (mov r8, r8)
 801979a:	46bd      	mov	sp, r7
 801979c:	b006      	add	sp, #24
 801979e:	bd80      	pop	{r7, pc}
 80197a0:	fffffeff 	.word	0xfffffeff
 80197a4:	fffffdff 	.word	0xfffffdff

080197a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b086      	sub	sp, #24
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
 80197b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	6a1b      	ldr	r3, [r3, #32]
 80197b6:	4a1b      	ldr	r2, [pc, #108]	@ (8019824 <TIM_OC4_SetConfig+0x7c>)
 80197b8:	401a      	ands	r2, r3
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	6a1b      	ldr	r3, [r3, #32]
 80197c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	685b      	ldr	r3, [r3, #4]
 80197c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	69db      	ldr	r3, [r3, #28]
 80197ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	4a15      	ldr	r2, [pc, #84]	@ (8019828 <TIM_OC4_SetConfig+0x80>)
 80197d4:	4013      	ands	r3, r2
 80197d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	4a14      	ldr	r2, [pc, #80]	@ (801982c <TIM_OC4_SetConfig+0x84>)
 80197dc:	4013      	ands	r3, r2
 80197de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	021b      	lsls	r3, r3, #8
 80197e6:	68fa      	ldr	r2, [r7, #12]
 80197e8:	4313      	orrs	r3, r2
 80197ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80197ec:	697b      	ldr	r3, [r7, #20]
 80197ee:	4a10      	ldr	r2, [pc, #64]	@ (8019830 <TIM_OC4_SetConfig+0x88>)
 80197f0:	4013      	ands	r3, r2
 80197f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80197f4:	683b      	ldr	r3, [r7, #0]
 80197f6:	689b      	ldr	r3, [r3, #8]
 80197f8:	031b      	lsls	r3, r3, #12
 80197fa:	697a      	ldr	r2, [r7, #20]
 80197fc:	4313      	orrs	r3, r2
 80197fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	693a      	ldr	r2, [r7, #16]
 8019804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	68fa      	ldr	r2, [r7, #12]
 801980a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	685a      	ldr	r2, [r3, #4]
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	697a      	ldr	r2, [r7, #20]
 8019818:	621a      	str	r2, [r3, #32]
}
 801981a:	46c0      	nop			@ (mov r8, r8)
 801981c:	46bd      	mov	sp, r7
 801981e:	b006      	add	sp, #24
 8019820:	bd80      	pop	{r7, pc}
 8019822:	46c0      	nop			@ (mov r8, r8)
 8019824:	ffffefff 	.word	0xffffefff
 8019828:	ffff8fff 	.word	0xffff8fff
 801982c:	fffffcff 	.word	0xfffffcff
 8019830:	ffffdfff 	.word	0xffffdfff

08019834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b086      	sub	sp, #24
 8019838:	af00      	add	r7, sp, #0
 801983a:	60f8      	str	r0, [r7, #12]
 801983c:	60b9      	str	r1, [r7, #8]
 801983e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	221f      	movs	r2, #31
 8019844:	4013      	ands	r3, r2
 8019846:	2201      	movs	r2, #1
 8019848:	409a      	lsls	r2, r3
 801984a:	0013      	movs	r3, r2
 801984c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	6a1b      	ldr	r3, [r3, #32]
 8019852:	697a      	ldr	r2, [r7, #20]
 8019854:	43d2      	mvns	r2, r2
 8019856:	401a      	ands	r2, r3
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	6a1a      	ldr	r2, [r3, #32]
 8019860:	68bb      	ldr	r3, [r7, #8]
 8019862:	211f      	movs	r1, #31
 8019864:	400b      	ands	r3, r1
 8019866:	6879      	ldr	r1, [r7, #4]
 8019868:	4099      	lsls	r1, r3
 801986a:	000b      	movs	r3, r1
 801986c:	431a      	orrs	r2, r3
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	621a      	str	r2, [r3, #32]
}
 8019872:	46c0      	nop			@ (mov r8, r8)
 8019874:	46bd      	mov	sp, r7
 8019876:	b006      	add	sp, #24
 8019878:	bd80      	pop	{r7, pc}
	...

0801987c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b084      	sub	sp, #16
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	2238      	movs	r2, #56	@ 0x38
 801988a:	5c9b      	ldrb	r3, [r3, r2]
 801988c:	2b01      	cmp	r3, #1
 801988e:	d101      	bne.n	8019894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8019890:	2302      	movs	r3, #2
 8019892:	e047      	b.n	8019924 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2238      	movs	r2, #56	@ 0x38
 8019898:	2101      	movs	r1, #1
 801989a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	2239      	movs	r2, #57	@ 0x39
 80198a0:	2102      	movs	r1, #2
 80198a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	685b      	ldr	r3, [r3, #4]
 80198aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	689b      	ldr	r3, [r3, #8]
 80198b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	2270      	movs	r2, #112	@ 0x70
 80198b8:	4393      	bics	r3, r2
 80198ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80198bc:	683b      	ldr	r3, [r7, #0]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	68fa      	ldr	r2, [r7, #12]
 80198c2:	4313      	orrs	r3, r2
 80198c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	68fa      	ldr	r2, [r7, #12]
 80198cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	681a      	ldr	r2, [r3, #0]
 80198d2:	2380      	movs	r3, #128	@ 0x80
 80198d4:	05db      	lsls	r3, r3, #23
 80198d6:	429a      	cmp	r2, r3
 80198d8:	d00e      	beq.n	80198f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	4a13      	ldr	r2, [pc, #76]	@ (801992c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80198e0:	4293      	cmp	r3, r2
 80198e2:	d009      	beq.n	80198f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	4a11      	ldr	r2, [pc, #68]	@ (8019930 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80198ea:	4293      	cmp	r3, r2
 80198ec:	d004      	beq.n	80198f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	4a10      	ldr	r2, [pc, #64]	@ (8019934 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80198f4:	4293      	cmp	r3, r2
 80198f6:	d10c      	bne.n	8019912 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	2280      	movs	r2, #128	@ 0x80
 80198fc:	4393      	bics	r3, r2
 80198fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8019900:	683b      	ldr	r3, [r7, #0]
 8019902:	685b      	ldr	r3, [r3, #4]
 8019904:	68ba      	ldr	r2, [r7, #8]
 8019906:	4313      	orrs	r3, r2
 8019908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	68ba      	ldr	r2, [r7, #8]
 8019910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	2239      	movs	r2, #57	@ 0x39
 8019916:	2101      	movs	r1, #1
 8019918:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	2238      	movs	r2, #56	@ 0x38
 801991e:	2100      	movs	r1, #0
 8019920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019922:	2300      	movs	r3, #0
}
 8019924:	0018      	movs	r0, r3
 8019926:	46bd      	mov	sp, r7
 8019928:	b004      	add	sp, #16
 801992a:	bd80      	pop	{r7, pc}
 801992c:	40000400 	.word	0x40000400
 8019930:	40010800 	.word	0x40010800
 8019934:	40011400 	.word	0x40011400

08019938 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8019938:	b580      	push	{r7, lr}
 801993a:	b082      	sub	sp, #8
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
 8019940:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2238      	movs	r2, #56	@ 0x38
 8019946:	5c9b      	ldrb	r3, [r3, r2]
 8019948:	2b01      	cmp	r3, #1
 801994a:	d101      	bne.n	8019950 <HAL_TIMEx_RemapConfig+0x18>
 801994c:	2302      	movs	r3, #2
 801994e:	e00c      	b.n	801996a <HAL_TIMEx_RemapConfig+0x32>
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	2238      	movs	r2, #56	@ 0x38
 8019954:	2101      	movs	r1, #1
 8019956:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	683a      	ldr	r2, [r7, #0]
 801995e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	2238      	movs	r2, #56	@ 0x38
 8019964:	2100      	movs	r1, #0
 8019966:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019968:	2300      	movs	r3, #0
}
 801996a:	0018      	movs	r0, r3
 801996c:	46bd      	mov	sp, r7
 801996e:	b002      	add	sp, #8
 8019970:	bd80      	pop	{r7, pc}
	...

08019974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019974:	b580      	push	{r7, lr}
 8019976:	b082      	sub	sp, #8
 8019978:	af00      	add	r7, sp, #0
 801997a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d101      	bne.n	8019986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019982:	2301      	movs	r3, #1
 8019984:	e053      	b.n	8019a2e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801998a:	2b00      	cmp	r3, #0
 801998c:	d116      	bne.n	80199bc <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	2278      	movs	r2, #120	@ 0x78
 8019992:	2100      	movs	r1, #0
 8019994:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	0018      	movs	r0, r3
 801999a:	f000 fd65 	bl	801a468 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	22b0      	movs	r2, #176	@ 0xb0
 80199a2:	589b      	ldr	r3, [r3, r2]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d103      	bne.n	80199b0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	21b0      	movs	r1, #176	@ 0xb0
 80199ac:	4a22      	ldr	r2, [pc, #136]	@ (8019a38 <HAL_UART_Init+0xc4>)
 80199ae:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	22b0      	movs	r2, #176	@ 0xb0
 80199b4:	589b      	ldr	r3, [r3, r2]
 80199b6:	687a      	ldr	r2, [r7, #4]
 80199b8:	0010      	movs	r0, r2
 80199ba:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	2224      	movs	r2, #36	@ 0x24
 80199c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	681a      	ldr	r2, [r3, #0]
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	2101      	movs	r1, #1
 80199ce:	438a      	bics	r2, r1
 80199d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	0018      	movs	r0, r3
 80199d6:	f000 fd8b 	bl	801a4f0 <UART_SetConfig>
 80199da:	0003      	movs	r3, r0
 80199dc:	2b01      	cmp	r3, #1
 80199de:	d101      	bne.n	80199e4 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80199e0:	2301      	movs	r3, #1
 80199e2:	e024      	b.n	8019a2e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d003      	beq.n	80199f4 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	0018      	movs	r0, r3
 80199f0:	f001 f81c 	bl	801aa2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	685a      	ldr	r2, [r3, #4]
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	490f      	ldr	r1, [pc, #60]	@ (8019a3c <HAL_UART_Init+0xc8>)
 8019a00:	400a      	ands	r2, r1
 8019a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	689a      	ldr	r2, [r3, #8]
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	212a      	movs	r1, #42	@ 0x2a
 8019a10:	438a      	bics	r2, r1
 8019a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	681a      	ldr	r2, [r3, #0]
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	2101      	movs	r1, #1
 8019a20:	430a      	orrs	r2, r1
 8019a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	0018      	movs	r0, r3
 8019a28:	f001 f8b4 	bl	801ab94 <UART_CheckIdleState>
 8019a2c:	0003      	movs	r3, r0
}
 8019a2e:	0018      	movs	r0, r3
 8019a30:	46bd      	mov	sp, r7
 8019a32:	b002      	add	sp, #8
 8019a34:	bd80      	pop	{r7, pc}
 8019a36:	46c0      	nop			@ (mov r8, r8)
 8019a38:	08010505 	.word	0x08010505
 8019a3c:	ffffb7ff 	.word	0xffffb7ff

08019a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b08a      	sub	sp, #40	@ 0x28
 8019a44:	af02      	add	r7, sp, #8
 8019a46:	60f8      	str	r0, [r7, #12]
 8019a48:	60b9      	str	r1, [r7, #8]
 8019a4a:	603b      	str	r3, [r7, #0]
 8019a4c:	1dbb      	adds	r3, r7, #6
 8019a4e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019a54:	2b20      	cmp	r3, #32
 8019a56:	d000      	beq.n	8019a5a <HAL_UART_Transmit+0x1a>
 8019a58:	e08c      	b.n	8019b74 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8019a5a:	68bb      	ldr	r3, [r7, #8]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d003      	beq.n	8019a68 <HAL_UART_Transmit+0x28>
 8019a60:	1dbb      	adds	r3, r7, #6
 8019a62:	881b      	ldrh	r3, [r3, #0]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d101      	bne.n	8019a6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8019a68:	2301      	movs	r3, #1
 8019a6a:	e084      	b.n	8019b76 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	689a      	ldr	r2, [r3, #8]
 8019a70:	2380      	movs	r3, #128	@ 0x80
 8019a72:	015b      	lsls	r3, r3, #5
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d109      	bne.n	8019a8c <HAL_UART_Transmit+0x4c>
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	691b      	ldr	r3, [r3, #16]
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d105      	bne.n	8019a8c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019a80:	68bb      	ldr	r3, [r7, #8]
 8019a82:	2201      	movs	r2, #1
 8019a84:	4013      	ands	r3, r2
 8019a86:	d001      	beq.n	8019a8c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8019a88:	2301      	movs	r3, #1
 8019a8a:	e074      	b.n	8019b76 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	2284      	movs	r2, #132	@ 0x84
 8019a90:	2100      	movs	r1, #0
 8019a92:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	2221      	movs	r2, #33	@ 0x21
 8019a98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019a9a:	f7f7 fb0d 	bl	80110b8 <HAL_GetTick>
 8019a9e:	0003      	movs	r3, r0
 8019aa0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	1dba      	adds	r2, r7, #6
 8019aa6:	2150      	movs	r1, #80	@ 0x50
 8019aa8:	8812      	ldrh	r2, [r2, #0]
 8019aaa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	1dba      	adds	r2, r7, #6
 8019ab0:	2152      	movs	r1, #82	@ 0x52
 8019ab2:	8812      	ldrh	r2, [r2, #0]
 8019ab4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	689a      	ldr	r2, [r3, #8]
 8019aba:	2380      	movs	r3, #128	@ 0x80
 8019abc:	015b      	lsls	r3, r3, #5
 8019abe:	429a      	cmp	r2, r3
 8019ac0:	d108      	bne.n	8019ad4 <HAL_UART_Transmit+0x94>
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	691b      	ldr	r3, [r3, #16]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d104      	bne.n	8019ad4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8019aca:	2300      	movs	r3, #0
 8019acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8019ace:	68bb      	ldr	r3, [r7, #8]
 8019ad0:	61bb      	str	r3, [r7, #24]
 8019ad2:	e003      	b.n	8019adc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8019ad4:	68bb      	ldr	r3, [r7, #8]
 8019ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8019ad8:	2300      	movs	r3, #0
 8019ada:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8019adc:	e02f      	b.n	8019b3e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8019ade:	697a      	ldr	r2, [r7, #20]
 8019ae0:	68f8      	ldr	r0, [r7, #12]
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	9300      	str	r3, [sp, #0]
 8019ae6:	0013      	movs	r3, r2
 8019ae8:	2200      	movs	r2, #0
 8019aea:	2180      	movs	r1, #128	@ 0x80
 8019aec:	f001 f8fa 	bl	801ace4 <UART_WaitOnFlagUntilTimeout>
 8019af0:	1e03      	subs	r3, r0, #0
 8019af2:	d004      	beq.n	8019afe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	2220      	movs	r2, #32
 8019af8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8019afa:	2303      	movs	r3, #3
 8019afc:	e03b      	b.n	8019b76 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8019afe:	69fb      	ldr	r3, [r7, #28]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d10b      	bne.n	8019b1c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019b04:	69bb      	ldr	r3, [r7, #24]
 8019b06:	881b      	ldrh	r3, [r3, #0]
 8019b08:	001a      	movs	r2, r3
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	05d2      	lsls	r2, r2, #23
 8019b10:	0dd2      	lsrs	r2, r2, #23
 8019b12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8019b14:	69bb      	ldr	r3, [r7, #24]
 8019b16:	3302      	adds	r3, #2
 8019b18:	61bb      	str	r3, [r7, #24]
 8019b1a:	e007      	b.n	8019b2c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019b1c:	69fb      	ldr	r3, [r7, #28]
 8019b1e:	781a      	ldrb	r2, [r3, #0]
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8019b26:	69fb      	ldr	r3, [r7, #28]
 8019b28:	3301      	adds	r3, #1
 8019b2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	2252      	movs	r2, #82	@ 0x52
 8019b30:	5a9b      	ldrh	r3, [r3, r2]
 8019b32:	b29b      	uxth	r3, r3
 8019b34:	3b01      	subs	r3, #1
 8019b36:	b299      	uxth	r1, r3
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	2252      	movs	r2, #82	@ 0x52
 8019b3c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	2252      	movs	r2, #82	@ 0x52
 8019b42:	5a9b      	ldrh	r3, [r3, r2]
 8019b44:	b29b      	uxth	r3, r3
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d1c9      	bne.n	8019ade <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019b4a:	697a      	ldr	r2, [r7, #20]
 8019b4c:	68f8      	ldr	r0, [r7, #12]
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	9300      	str	r3, [sp, #0]
 8019b52:	0013      	movs	r3, r2
 8019b54:	2200      	movs	r2, #0
 8019b56:	2140      	movs	r1, #64	@ 0x40
 8019b58:	f001 f8c4 	bl	801ace4 <UART_WaitOnFlagUntilTimeout>
 8019b5c:	1e03      	subs	r3, r0, #0
 8019b5e:	d004      	beq.n	8019b6a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	2220      	movs	r2, #32
 8019b64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8019b66:	2303      	movs	r3, #3
 8019b68:	e005      	b.n	8019b76 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	2220      	movs	r2, #32
 8019b6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8019b70:	2300      	movs	r3, #0
 8019b72:	e000      	b.n	8019b76 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8019b74:	2302      	movs	r3, #2
  }
}
 8019b76:	0018      	movs	r0, r3
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	b008      	add	sp, #32
 8019b7c:	bd80      	pop	{r7, pc}
	...

08019b80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b088      	sub	sp, #32
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	60f8      	str	r0, [r7, #12]
 8019b88:	60b9      	str	r1, [r7, #8]
 8019b8a:	1dbb      	adds	r3, r7, #6
 8019b8c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	2280      	movs	r2, #128	@ 0x80
 8019b92:	589b      	ldr	r3, [r3, r2]
 8019b94:	2b20      	cmp	r3, #32
 8019b96:	d14a      	bne.n	8019c2e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8019b98:	68bb      	ldr	r3, [r7, #8]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d003      	beq.n	8019ba6 <HAL_UART_Receive_IT+0x26>
 8019b9e:	1dbb      	adds	r3, r7, #6
 8019ba0:	881b      	ldrh	r3, [r3, #0]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d101      	bne.n	8019baa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8019ba6:	2301      	movs	r3, #1
 8019ba8:	e042      	b.n	8019c30 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	689a      	ldr	r2, [r3, #8]
 8019bae:	2380      	movs	r3, #128	@ 0x80
 8019bb0:	015b      	lsls	r3, r3, #5
 8019bb2:	429a      	cmp	r2, r3
 8019bb4:	d109      	bne.n	8019bca <HAL_UART_Receive_IT+0x4a>
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	691b      	ldr	r3, [r3, #16]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d105      	bne.n	8019bca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	2201      	movs	r2, #1
 8019bc2:	4013      	ands	r3, r2
 8019bc4:	d001      	beq.n	8019bca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	e032      	b.n	8019c30 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	2200      	movs	r2, #0
 8019bce:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	4a18      	ldr	r2, [pc, #96]	@ (8019c38 <HAL_UART_Receive_IT+0xb8>)
 8019bd6:	4293      	cmp	r3, r2
 8019bd8:	d020      	beq.n	8019c1c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	685a      	ldr	r2, [r3, #4]
 8019be0:	2380      	movs	r3, #128	@ 0x80
 8019be2:	041b      	lsls	r3, r3, #16
 8019be4:	4013      	ands	r3, r2
 8019be6:	d019      	beq.n	8019c1c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019be8:	f3ef 8310 	mrs	r3, PRIMASK
 8019bec:	613b      	str	r3, [r7, #16]
  return(result);
 8019bee:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019bf0:	61fb      	str	r3, [r7, #28]
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	f383 8810 	msr	PRIMASK, r3
}
 8019bfc:	46c0      	nop			@ (mov r8, r8)
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	681a      	ldr	r2, [r3, #0]
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	2180      	movs	r1, #128	@ 0x80
 8019c0a:	04c9      	lsls	r1, r1, #19
 8019c0c:	430a      	orrs	r2, r1
 8019c0e:	601a      	str	r2, [r3, #0]
 8019c10:	69fb      	ldr	r3, [r7, #28]
 8019c12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c14:	69bb      	ldr	r3, [r7, #24]
 8019c16:	f383 8810 	msr	PRIMASK, r3
}
 8019c1a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8019c1c:	1dbb      	adds	r3, r7, #6
 8019c1e:	881a      	ldrh	r2, [r3, #0]
 8019c20:	68b9      	ldr	r1, [r7, #8]
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	0018      	movs	r0, r3
 8019c26:	f001 f8c7 	bl	801adb8 <UART_Start_Receive_IT>
 8019c2a:	0003      	movs	r3, r0
 8019c2c:	e000      	b.n	8019c30 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8019c2e:	2302      	movs	r3, #2
  }
}
 8019c30:	0018      	movs	r0, r3
 8019c32:	46bd      	mov	sp, r7
 8019c34:	b008      	add	sp, #32
 8019c36:	bd80      	pop	{r7, pc}
 8019c38:	40004800 	.word	0x40004800

08019c3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b088      	sub	sp, #32
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	60f8      	str	r0, [r7, #12]
 8019c44:	60b9      	str	r1, [r7, #8]
 8019c46:	1dbb      	adds	r3, r7, #6
 8019c48:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019c4e:	2b20      	cmp	r3, #32
 8019c50:	d000      	beq.n	8019c54 <HAL_UART_Transmit_DMA+0x18>
 8019c52:	e077      	b.n	8019d44 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8019c54:	68bb      	ldr	r3, [r7, #8]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d003      	beq.n	8019c62 <HAL_UART_Transmit_DMA+0x26>
 8019c5a:	1dbb      	adds	r3, r7, #6
 8019c5c:	881b      	ldrh	r3, [r3, #0]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d101      	bne.n	8019c66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8019c62:	2301      	movs	r3, #1
 8019c64:	e06f      	b.n	8019d46 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	689a      	ldr	r2, [r3, #8]
 8019c6a:	2380      	movs	r3, #128	@ 0x80
 8019c6c:	015b      	lsls	r3, r3, #5
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d109      	bne.n	8019c86 <HAL_UART_Transmit_DMA+0x4a>
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	691b      	ldr	r3, [r3, #16]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d105      	bne.n	8019c86 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019c7a:	68bb      	ldr	r3, [r7, #8]
 8019c7c:	2201      	movs	r2, #1
 8019c7e:	4013      	ands	r3, r2
 8019c80:	d001      	beq.n	8019c86 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019c82:	2301      	movs	r3, #1
 8019c84:	e05f      	b.n	8019d46 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	68ba      	ldr	r2, [r7, #8]
 8019c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	1dba      	adds	r2, r7, #6
 8019c90:	2150      	movs	r1, #80	@ 0x50
 8019c92:	8812      	ldrh	r2, [r2, #0]
 8019c94:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	1dba      	adds	r2, r7, #6
 8019c9a:	2152      	movs	r1, #82	@ 0x52
 8019c9c:	8812      	ldrh	r2, [r2, #0]
 8019c9e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	2284      	movs	r2, #132	@ 0x84
 8019ca4:	2100      	movs	r1, #0
 8019ca6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	2221      	movs	r2, #33	@ 0x21
 8019cac:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d027      	beq.n	8019d06 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cba:	4a25      	ldr	r2, [pc, #148]	@ (8019d50 <HAL_UART_Transmit_DMA+0x114>)
 8019cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cc2:	4a24      	ldr	r2, [pc, #144]	@ (8019d54 <HAL_UART_Transmit_DMA+0x118>)
 8019cc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cca:	4a23      	ldr	r2, [pc, #140]	@ (8019d58 <HAL_UART_Transmit_DMA+0x11c>)
 8019ccc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019cde:	0019      	movs	r1, r3
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	3328      	adds	r3, #40	@ 0x28
 8019ce6:	001a      	movs	r2, r3
 8019ce8:	1dbb      	adds	r3, r7, #6
 8019cea:	881b      	ldrh	r3, [r3, #0]
 8019cec:	f7f7 ff36 	bl	8011b5c <HAL_DMA_Start_IT>
 8019cf0:	1e03      	subs	r3, r0, #0
 8019cf2:	d008      	beq.n	8019d06 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	2284      	movs	r2, #132	@ 0x84
 8019cf8:	2110      	movs	r1, #16
 8019cfa:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	2220      	movs	r2, #32
 8019d00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8019d02:	2301      	movs	r3, #1
 8019d04:	e01f      	b.n	8019d46 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	2240      	movs	r2, #64	@ 0x40
 8019d0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8019d12:	613b      	str	r3, [r7, #16]
  return(result);
 8019d14:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019d16:	61fb      	str	r3, [r7, #28]
 8019d18:	2301      	movs	r3, #1
 8019d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d1c:	697b      	ldr	r3, [r7, #20]
 8019d1e:	f383 8810 	msr	PRIMASK, r3
}
 8019d22:	46c0      	nop			@ (mov r8, r8)
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	689a      	ldr	r2, [r3, #8]
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	2180      	movs	r1, #128	@ 0x80
 8019d30:	430a      	orrs	r2, r1
 8019d32:	609a      	str	r2, [r3, #8]
 8019d34:	69fb      	ldr	r3, [r7, #28]
 8019d36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d38:	69bb      	ldr	r3, [r7, #24]
 8019d3a:	f383 8810 	msr	PRIMASK, r3
}
 8019d3e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8019d40:	2300      	movs	r3, #0
 8019d42:	e000      	b.n	8019d46 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8019d44:	2302      	movs	r3, #2
  }
}
 8019d46:	0018      	movs	r0, r3
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	b008      	add	sp, #32
 8019d4c:	bd80      	pop	{r7, pc}
 8019d4e:	46c0      	nop			@ (mov r8, r8)
 8019d50:	0801b19d 	.word	0x0801b19d
 8019d54:	0801b239 	.word	0x0801b239
 8019d58:	0801b3d9 	.word	0x0801b3d9

08019d5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b088      	sub	sp, #32
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	60f8      	str	r0, [r7, #12]
 8019d64:	60b9      	str	r1, [r7, #8]
 8019d66:	1dbb      	adds	r3, r7, #6
 8019d68:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	2280      	movs	r2, #128	@ 0x80
 8019d6e:	589b      	ldr	r3, [r3, r2]
 8019d70:	2b20      	cmp	r3, #32
 8019d72:	d14a      	bne.n	8019e0a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8019d74:	68bb      	ldr	r3, [r7, #8]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d003      	beq.n	8019d82 <HAL_UART_Receive_DMA+0x26>
 8019d7a:	1dbb      	adds	r3, r7, #6
 8019d7c:	881b      	ldrh	r3, [r3, #0]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d101      	bne.n	8019d86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8019d82:	2301      	movs	r3, #1
 8019d84:	e042      	b.n	8019e0c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	689a      	ldr	r2, [r3, #8]
 8019d8a:	2380      	movs	r3, #128	@ 0x80
 8019d8c:	015b      	lsls	r3, r3, #5
 8019d8e:	429a      	cmp	r2, r3
 8019d90:	d109      	bne.n	8019da6 <HAL_UART_Receive_DMA+0x4a>
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	691b      	ldr	r3, [r3, #16]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d105      	bne.n	8019da6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019d9a:	68bb      	ldr	r3, [r7, #8]
 8019d9c:	2201      	movs	r2, #1
 8019d9e:	4013      	ands	r3, r2
 8019da0:	d001      	beq.n	8019da6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019da2:	2301      	movs	r3, #1
 8019da4:	e032      	b.n	8019e0c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	2200      	movs	r2, #0
 8019daa:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	4a18      	ldr	r2, [pc, #96]	@ (8019e14 <HAL_UART_Receive_DMA+0xb8>)
 8019db2:	4293      	cmp	r3, r2
 8019db4:	d020      	beq.n	8019df8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	685a      	ldr	r2, [r3, #4]
 8019dbc:	2380      	movs	r3, #128	@ 0x80
 8019dbe:	041b      	lsls	r3, r3, #16
 8019dc0:	4013      	ands	r3, r2
 8019dc2:	d019      	beq.n	8019df8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8019dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8019dca:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019dcc:	61fb      	str	r3, [r7, #28]
 8019dce:	2301      	movs	r3, #1
 8019dd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019dd2:	697b      	ldr	r3, [r7, #20]
 8019dd4:	f383 8810 	msr	PRIMASK, r3
}
 8019dd8:	46c0      	nop			@ (mov r8, r8)
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	681a      	ldr	r2, [r3, #0]
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	2180      	movs	r1, #128	@ 0x80
 8019de6:	04c9      	lsls	r1, r1, #19
 8019de8:	430a      	orrs	r2, r1
 8019dea:	601a      	str	r2, [r3, #0]
 8019dec:	69fb      	ldr	r3, [r7, #28]
 8019dee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019df0:	69bb      	ldr	r3, [r7, #24]
 8019df2:	f383 8810 	msr	PRIMASK, r3
}
 8019df6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8019df8:	1dbb      	adds	r3, r7, #6
 8019dfa:	881a      	ldrh	r2, [r3, #0]
 8019dfc:	68b9      	ldr	r1, [r7, #8]
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	0018      	movs	r0, r3
 8019e02:	f001 f8a3 	bl	801af4c <UART_Start_Receive_DMA>
 8019e06:	0003      	movs	r3, r0
 8019e08:	e000      	b.n	8019e0c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8019e0a:	2302      	movs	r3, #2
  }
}
 8019e0c:	0018      	movs	r0, r3
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	b008      	add	sp, #32
 8019e12:	bd80      	pop	{r7, pc}
 8019e14:	40004800 	.word	0x40004800

08019e18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019e18:	b590      	push	{r4, r7, lr}
 8019e1a:	b0ab      	sub	sp, #172	@ 0xac
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	69db      	ldr	r3, [r3, #28]
 8019e26:	22a4      	movs	r2, #164	@ 0xa4
 8019e28:	18b9      	adds	r1, r7, r2
 8019e2a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	20a0      	movs	r0, #160	@ 0xa0
 8019e34:	1839      	adds	r1, r7, r0
 8019e36:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	689b      	ldr	r3, [r3, #8]
 8019e3e:	219c      	movs	r1, #156	@ 0x9c
 8019e40:	1879      	adds	r1, r7, r1
 8019e42:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019e44:	0011      	movs	r1, r2
 8019e46:	18bb      	adds	r3, r7, r2
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	4a9c      	ldr	r2, [pc, #624]	@ (801a0bc <HAL_UART_IRQHandler+0x2a4>)
 8019e4c:	4013      	ands	r3, r2
 8019e4e:	2298      	movs	r2, #152	@ 0x98
 8019e50:	18bc      	adds	r4, r7, r2
 8019e52:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8019e54:	18bb      	adds	r3, r7, r2
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d114      	bne.n	8019e86 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8019e5c:	187b      	adds	r3, r7, r1
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	2220      	movs	r2, #32
 8019e62:	4013      	ands	r3, r2
 8019e64:	d00f      	beq.n	8019e86 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019e66:	183b      	adds	r3, r7, r0
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	2220      	movs	r2, #32
 8019e6c:	4013      	ands	r3, r2
 8019e6e:	d00a      	beq.n	8019e86 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d100      	bne.n	8019e7a <HAL_UART_IRQHandler+0x62>
 8019e78:	e2aa      	b.n	801a3d0 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019e7e:	687a      	ldr	r2, [r7, #4]
 8019e80:	0010      	movs	r0, r2
 8019e82:	4798      	blx	r3
      }
      return;
 8019e84:	e2a4      	b.n	801a3d0 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8019e86:	2398      	movs	r3, #152	@ 0x98
 8019e88:	18fb      	adds	r3, r7, r3
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d100      	bne.n	8019e92 <HAL_UART_IRQHandler+0x7a>
 8019e90:	e11a      	b.n	801a0c8 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8019e92:	239c      	movs	r3, #156	@ 0x9c
 8019e94:	18fb      	adds	r3, r7, r3
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	2201      	movs	r2, #1
 8019e9a:	4013      	ands	r3, r2
 8019e9c:	d106      	bne.n	8019eac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8019e9e:	23a0      	movs	r3, #160	@ 0xa0
 8019ea0:	18fb      	adds	r3, r7, r3
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	4a86      	ldr	r2, [pc, #536]	@ (801a0c0 <HAL_UART_IRQHandler+0x2a8>)
 8019ea6:	4013      	ands	r3, r2
 8019ea8:	d100      	bne.n	8019eac <HAL_UART_IRQHandler+0x94>
 8019eaa:	e10d      	b.n	801a0c8 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019eac:	23a4      	movs	r3, #164	@ 0xa4
 8019eae:	18fb      	adds	r3, r7, r3
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	2201      	movs	r2, #1
 8019eb4:	4013      	ands	r3, r2
 8019eb6:	d012      	beq.n	8019ede <HAL_UART_IRQHandler+0xc6>
 8019eb8:	23a0      	movs	r3, #160	@ 0xa0
 8019eba:	18fb      	adds	r3, r7, r3
 8019ebc:	681a      	ldr	r2, [r3, #0]
 8019ebe:	2380      	movs	r3, #128	@ 0x80
 8019ec0:	005b      	lsls	r3, r3, #1
 8019ec2:	4013      	ands	r3, r2
 8019ec4:	d00b      	beq.n	8019ede <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	2201      	movs	r2, #1
 8019ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	2284      	movs	r2, #132	@ 0x84
 8019ed2:	589b      	ldr	r3, [r3, r2]
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	431a      	orrs	r2, r3
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	2184      	movs	r1, #132	@ 0x84
 8019edc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019ede:	23a4      	movs	r3, #164	@ 0xa4
 8019ee0:	18fb      	adds	r3, r7, r3
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	2202      	movs	r2, #2
 8019ee6:	4013      	ands	r3, r2
 8019ee8:	d011      	beq.n	8019f0e <HAL_UART_IRQHandler+0xf6>
 8019eea:	239c      	movs	r3, #156	@ 0x9c
 8019eec:	18fb      	adds	r3, r7, r3
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	2201      	movs	r2, #1
 8019ef2:	4013      	ands	r3, r2
 8019ef4:	d00b      	beq.n	8019f0e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	2202      	movs	r2, #2
 8019efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	2284      	movs	r2, #132	@ 0x84
 8019f02:	589b      	ldr	r3, [r3, r2]
 8019f04:	2204      	movs	r2, #4
 8019f06:	431a      	orrs	r2, r3
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	2184      	movs	r1, #132	@ 0x84
 8019f0c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019f0e:	23a4      	movs	r3, #164	@ 0xa4
 8019f10:	18fb      	adds	r3, r7, r3
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	2204      	movs	r2, #4
 8019f16:	4013      	ands	r3, r2
 8019f18:	d011      	beq.n	8019f3e <HAL_UART_IRQHandler+0x126>
 8019f1a:	239c      	movs	r3, #156	@ 0x9c
 8019f1c:	18fb      	adds	r3, r7, r3
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	2201      	movs	r2, #1
 8019f22:	4013      	ands	r3, r2
 8019f24:	d00b      	beq.n	8019f3e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2204      	movs	r2, #4
 8019f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	2284      	movs	r2, #132	@ 0x84
 8019f32:	589b      	ldr	r3, [r3, r2]
 8019f34:	2202      	movs	r2, #2
 8019f36:	431a      	orrs	r2, r3
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	2184      	movs	r1, #132	@ 0x84
 8019f3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8019f3e:	23a4      	movs	r3, #164	@ 0xa4
 8019f40:	18fb      	adds	r3, r7, r3
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	2208      	movs	r2, #8
 8019f46:	4013      	ands	r3, r2
 8019f48:	d017      	beq.n	8019f7a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8019f4a:	23a0      	movs	r3, #160	@ 0xa0
 8019f4c:	18fb      	adds	r3, r7, r3
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	2220      	movs	r2, #32
 8019f52:	4013      	ands	r3, r2
 8019f54:	d105      	bne.n	8019f62 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8019f56:	239c      	movs	r3, #156	@ 0x9c
 8019f58:	18fb      	adds	r3, r7, r3
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	2201      	movs	r2, #1
 8019f5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8019f60:	d00b      	beq.n	8019f7a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	2208      	movs	r2, #8
 8019f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	2284      	movs	r2, #132	@ 0x84
 8019f6e:	589b      	ldr	r3, [r3, r2]
 8019f70:	2208      	movs	r2, #8
 8019f72:	431a      	orrs	r2, r3
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	2184      	movs	r1, #132	@ 0x84
 8019f78:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8019f7a:	23a4      	movs	r3, #164	@ 0xa4
 8019f7c:	18fb      	adds	r3, r7, r3
 8019f7e:	681a      	ldr	r2, [r3, #0]
 8019f80:	2380      	movs	r3, #128	@ 0x80
 8019f82:	011b      	lsls	r3, r3, #4
 8019f84:	4013      	ands	r3, r2
 8019f86:	d013      	beq.n	8019fb0 <HAL_UART_IRQHandler+0x198>
 8019f88:	23a0      	movs	r3, #160	@ 0xa0
 8019f8a:	18fb      	adds	r3, r7, r3
 8019f8c:	681a      	ldr	r2, [r3, #0]
 8019f8e:	2380      	movs	r3, #128	@ 0x80
 8019f90:	04db      	lsls	r3, r3, #19
 8019f92:	4013      	ands	r3, r2
 8019f94:	d00c      	beq.n	8019fb0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	2280      	movs	r2, #128	@ 0x80
 8019f9c:	0112      	lsls	r2, r2, #4
 8019f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2284      	movs	r2, #132	@ 0x84
 8019fa4:	589b      	ldr	r3, [r3, r2]
 8019fa6:	2220      	movs	r2, #32
 8019fa8:	431a      	orrs	r2, r3
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	2184      	movs	r1, #132	@ 0x84
 8019fae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	2284      	movs	r2, #132	@ 0x84
 8019fb4:	589b      	ldr	r3, [r3, r2]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d100      	bne.n	8019fbc <HAL_UART_IRQHandler+0x1a4>
 8019fba:	e20b      	b.n	801a3d4 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8019fbc:	23a4      	movs	r3, #164	@ 0xa4
 8019fbe:	18fb      	adds	r3, r7, r3
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	2220      	movs	r2, #32
 8019fc4:	4013      	ands	r3, r2
 8019fc6:	d00e      	beq.n	8019fe6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019fc8:	23a0      	movs	r3, #160	@ 0xa0
 8019fca:	18fb      	adds	r3, r7, r3
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	2220      	movs	r2, #32
 8019fd0:	4013      	ands	r3, r2
 8019fd2:	d008      	beq.n	8019fe6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d004      	beq.n	8019fe6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019fe0:	687a      	ldr	r2, [r7, #4]
 8019fe2:	0010      	movs	r0, r2
 8019fe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	2284      	movs	r2, #132	@ 0x84
 8019fea:	589b      	ldr	r3, [r3, r2]
 8019fec:	2194      	movs	r1, #148	@ 0x94
 8019fee:	187a      	adds	r2, r7, r1
 8019ff0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	689b      	ldr	r3, [r3, #8]
 8019ff8:	2240      	movs	r2, #64	@ 0x40
 8019ffa:	4013      	ands	r3, r2
 8019ffc:	2b40      	cmp	r3, #64	@ 0x40
 8019ffe:	d004      	beq.n	801a00a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801a000:	187b      	adds	r3, r7, r1
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	2228      	movs	r2, #40	@ 0x28
 801a006:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a008:	d04b      	beq.n	801a0a2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	0018      	movs	r0, r3
 801a00e:	f001 f861 	bl	801b0d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	689b      	ldr	r3, [r3, #8]
 801a018:	2240      	movs	r2, #64	@ 0x40
 801a01a:	4013      	ands	r3, r2
 801a01c:	2b40      	cmp	r3, #64	@ 0x40
 801a01e:	d139      	bne.n	801a094 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a020:	f3ef 8310 	mrs	r3, PRIMASK
 801a024:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801a026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a028:	2090      	movs	r0, #144	@ 0x90
 801a02a:	183a      	adds	r2, r7, r0
 801a02c:	6013      	str	r3, [r2, #0]
 801a02e:	2301      	movs	r3, #1
 801a030:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a034:	f383 8810 	msr	PRIMASK, r3
}
 801a038:	46c0      	nop			@ (mov r8, r8)
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	689a      	ldr	r2, [r3, #8]
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	2140      	movs	r1, #64	@ 0x40
 801a046:	438a      	bics	r2, r1
 801a048:	609a      	str	r2, [r3, #8]
 801a04a:	183b      	adds	r3, r7, r0
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a052:	f383 8810 	msr	PRIMASK, r3
}
 801a056:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d012      	beq.n	801a086 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a064:	4a17      	ldr	r2, [pc, #92]	@ (801a0c4 <HAL_UART_IRQHandler+0x2ac>)
 801a066:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a06c:	0018      	movs	r0, r3
 801a06e:	f7f7 fe1b 	bl	8011ca8 <HAL_DMA_Abort_IT>
 801a072:	1e03      	subs	r3, r0, #0
 801a074:	d020      	beq.n	801a0b8 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a07a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a080:	0018      	movs	r0, r3
 801a082:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a084:	e018      	b.n	801a0b8 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	2298      	movs	r2, #152	@ 0x98
 801a08a:	589b      	ldr	r3, [r3, r2]
 801a08c:	687a      	ldr	r2, [r7, #4]
 801a08e:	0010      	movs	r0, r2
 801a090:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a092:	e011      	b.n	801a0b8 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2298      	movs	r2, #152	@ 0x98
 801a098:	589b      	ldr	r3, [r3, r2]
 801a09a:	687a      	ldr	r2, [r7, #4]
 801a09c:	0010      	movs	r0, r2
 801a09e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a0a0:	e00a      	b.n	801a0b8 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	2298      	movs	r2, #152	@ 0x98
 801a0a6:	589b      	ldr	r3, [r3, r2]
 801a0a8:	687a      	ldr	r2, [r7, #4]
 801a0aa:	0010      	movs	r0, r2
 801a0ac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	2284      	movs	r2, #132	@ 0x84
 801a0b2:	2100      	movs	r1, #0
 801a0b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801a0b6:	e18d      	b.n	801a3d4 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a0b8:	46c0      	nop			@ (mov r8, r8)
    return;
 801a0ba:	e18b      	b.n	801a3d4 <HAL_UART_IRQHandler+0x5bc>
 801a0bc:	0000080f 	.word	0x0000080f
 801a0c0:	04000120 	.word	0x04000120
 801a0c4:	0801b461 	.word	0x0801b461

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a0cc:	2b01      	cmp	r3, #1
 801a0ce:	d000      	beq.n	801a0d2 <HAL_UART_IRQHandler+0x2ba>
 801a0d0:	e13d      	b.n	801a34e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801a0d2:	23a4      	movs	r3, #164	@ 0xa4
 801a0d4:	18fb      	adds	r3, r7, r3
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	2210      	movs	r2, #16
 801a0da:	4013      	ands	r3, r2
 801a0dc:	d100      	bne.n	801a0e0 <HAL_UART_IRQHandler+0x2c8>
 801a0de:	e136      	b.n	801a34e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801a0e0:	23a0      	movs	r3, #160	@ 0xa0
 801a0e2:	18fb      	adds	r3, r7, r3
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	2210      	movs	r2, #16
 801a0e8:	4013      	ands	r3, r2
 801a0ea:	d100      	bne.n	801a0ee <HAL_UART_IRQHandler+0x2d6>
 801a0ec:	e12f      	b.n	801a34e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	2210      	movs	r2, #16
 801a0f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	689b      	ldr	r3, [r3, #8]
 801a0fc:	2240      	movs	r2, #64	@ 0x40
 801a0fe:	4013      	ands	r3, r2
 801a100:	2b40      	cmp	r3, #64	@ 0x40
 801a102:	d000      	beq.n	801a106 <HAL_UART_IRQHandler+0x2ee>
 801a104:	e0a2      	b.n	801a24c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	685a      	ldr	r2, [r3, #4]
 801a10e:	217e      	movs	r1, #126	@ 0x7e
 801a110:	187b      	adds	r3, r7, r1
 801a112:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801a114:	187b      	adds	r3, r7, r1
 801a116:	881b      	ldrh	r3, [r3, #0]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d100      	bne.n	801a11e <HAL_UART_IRQHandler+0x306>
 801a11c:	e15c      	b.n	801a3d8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2258      	movs	r2, #88	@ 0x58
 801a122:	5a9b      	ldrh	r3, [r3, r2]
 801a124:	187a      	adds	r2, r7, r1
 801a126:	8812      	ldrh	r2, [r2, #0]
 801a128:	429a      	cmp	r2, r3
 801a12a:	d300      	bcc.n	801a12e <HAL_UART_IRQHandler+0x316>
 801a12c:	e154      	b.n	801a3d8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	187a      	adds	r2, r7, r1
 801a132:	215a      	movs	r1, #90	@ 0x5a
 801a134:	8812      	ldrh	r2, [r2, #0]
 801a136:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2220      	movs	r2, #32
 801a142:	4013      	ands	r3, r2
 801a144:	d16f      	bne.n	801a226 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a146:	f3ef 8310 	mrs	r3, PRIMASK
 801a14a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801a14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a14e:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a150:	2301      	movs	r3, #1
 801a152:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a156:	f383 8810 	msr	PRIMASK, r3
}
 801a15a:	46c0      	nop			@ (mov r8, r8)
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	681a      	ldr	r2, [r3, #0]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	49a0      	ldr	r1, [pc, #640]	@ (801a3e8 <HAL_UART_IRQHandler+0x5d0>)
 801a168:	400a      	ands	r2, r1
 801a16a:	601a      	str	r2, [r3, #0]
 801a16c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a16e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a172:	f383 8810 	msr	PRIMASK, r3
}
 801a176:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a178:	f3ef 8310 	mrs	r3, PRIMASK
 801a17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801a17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a180:	677b      	str	r3, [r7, #116]	@ 0x74
 801a182:	2301      	movs	r3, #1
 801a184:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a188:	f383 8810 	msr	PRIMASK, r3
}
 801a18c:	46c0      	nop			@ (mov r8, r8)
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	689a      	ldr	r2, [r3, #8]
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	2101      	movs	r1, #1
 801a19a:	438a      	bics	r2, r1
 801a19c:	609a      	str	r2, [r3, #8]
 801a19e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a1a0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a1a4:	f383 8810 	msr	PRIMASK, r3
}
 801a1a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1aa:	f3ef 8310 	mrs	r3, PRIMASK
 801a1ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801a1b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a1b2:	673b      	str	r3, [r7, #112]	@ 0x70
 801a1b4:	2301      	movs	r3, #1
 801a1b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a1ba:	f383 8810 	msr	PRIMASK, r3
}
 801a1be:	46c0      	nop			@ (mov r8, r8)
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	689a      	ldr	r2, [r3, #8]
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	2140      	movs	r1, #64	@ 0x40
 801a1cc:	438a      	bics	r2, r1
 801a1ce:	609a      	str	r2, [r3, #8]
 801a1d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a1d2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1d6:	f383 8810 	msr	PRIMASK, r3
}
 801a1da:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	2280      	movs	r2, #128	@ 0x80
 801a1e0:	2120      	movs	r1, #32
 801a1e2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1ea:	f3ef 8310 	mrs	r3, PRIMASK
 801a1ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801a1f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a1f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a1fa:	f383 8810 	msr	PRIMASK, r3
}
 801a1fe:	46c0      	nop			@ (mov r8, r8)
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	681a      	ldr	r2, [r3, #0]
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	2110      	movs	r1, #16
 801a20c:	438a      	bics	r2, r1
 801a20e:	601a      	str	r2, [r3, #0]
 801a210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a212:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a214:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a216:	f383 8810 	msr	PRIMASK, r3
}
 801a21a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a220:	0018      	movs	r0, r3
 801a222:	f7f7 fd01 	bl	8011c28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	2202      	movs	r2, #2
 801a22a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	22ac      	movs	r2, #172	@ 0xac
 801a230:	589b      	ldr	r3, [r3, r2]
 801a232:	687a      	ldr	r2, [r7, #4]
 801a234:	2158      	movs	r1, #88	@ 0x58
 801a236:	5a51      	ldrh	r1, [r2, r1]
 801a238:	687a      	ldr	r2, [r7, #4]
 801a23a:	205a      	movs	r0, #90	@ 0x5a
 801a23c:	5a12      	ldrh	r2, [r2, r0]
 801a23e:	b292      	uxth	r2, r2
 801a240:	1a8a      	subs	r2, r1, r2
 801a242:	b291      	uxth	r1, r2
 801a244:	687a      	ldr	r2, [r7, #4]
 801a246:	0010      	movs	r0, r2
 801a248:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a24a:	e0c5      	b.n	801a3d8 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2258      	movs	r2, #88	@ 0x58
 801a250:	5a99      	ldrh	r1, [r3, r2]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	225a      	movs	r2, #90	@ 0x5a
 801a256:	5a9b      	ldrh	r3, [r3, r2]
 801a258:	b29a      	uxth	r2, r3
 801a25a:	208e      	movs	r0, #142	@ 0x8e
 801a25c:	183b      	adds	r3, r7, r0
 801a25e:	1a8a      	subs	r2, r1, r2
 801a260:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	225a      	movs	r2, #90	@ 0x5a
 801a266:	5a9b      	ldrh	r3, [r3, r2]
 801a268:	b29b      	uxth	r3, r3
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d100      	bne.n	801a270 <HAL_UART_IRQHandler+0x458>
 801a26e:	e0b5      	b.n	801a3dc <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801a270:	183b      	adds	r3, r7, r0
 801a272:	881b      	ldrh	r3, [r3, #0]
 801a274:	2b00      	cmp	r3, #0
 801a276:	d100      	bne.n	801a27a <HAL_UART_IRQHandler+0x462>
 801a278:	e0b0      	b.n	801a3dc <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a27a:	f3ef 8310 	mrs	r3, PRIMASK
 801a27e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a280:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a282:	2488      	movs	r4, #136	@ 0x88
 801a284:	193a      	adds	r2, r7, r4
 801a286:	6013      	str	r3, [r2, #0]
 801a288:	2301      	movs	r3, #1
 801a28a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a28c:	693b      	ldr	r3, [r7, #16]
 801a28e:	f383 8810 	msr	PRIMASK, r3
}
 801a292:	46c0      	nop			@ (mov r8, r8)
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	681a      	ldr	r2, [r3, #0]
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	4953      	ldr	r1, [pc, #332]	@ (801a3ec <HAL_UART_IRQHandler+0x5d4>)
 801a2a0:	400a      	ands	r2, r1
 801a2a2:	601a      	str	r2, [r3, #0]
 801a2a4:	193b      	adds	r3, r7, r4
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2aa:	697b      	ldr	r3, [r7, #20]
 801a2ac:	f383 8810 	msr	PRIMASK, r3
}
 801a2b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2b2:	f3ef 8310 	mrs	r3, PRIMASK
 801a2b6:	61bb      	str	r3, [r7, #24]
  return(result);
 801a2b8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a2ba:	2484      	movs	r4, #132	@ 0x84
 801a2bc:	193a      	adds	r2, r7, r4
 801a2be:	6013      	str	r3, [r2, #0]
 801a2c0:	2301      	movs	r3, #1
 801a2c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2c4:	69fb      	ldr	r3, [r7, #28]
 801a2c6:	f383 8810 	msr	PRIMASK, r3
}
 801a2ca:	46c0      	nop			@ (mov r8, r8)
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	689a      	ldr	r2, [r3, #8]
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2101      	movs	r1, #1
 801a2d8:	438a      	bics	r2, r1
 801a2da:	609a      	str	r2, [r3, #8]
 801a2dc:	193b      	adds	r3, r7, r4
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2e2:	6a3b      	ldr	r3, [r7, #32]
 801a2e4:	f383 8810 	msr	PRIMASK, r3
}
 801a2e8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	2280      	movs	r2, #128	@ 0x80
 801a2ee:	2120      	movs	r1, #32
 801a2f0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2fe:	f3ef 8310 	mrs	r3, PRIMASK
 801a302:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a306:	2480      	movs	r4, #128	@ 0x80
 801a308:	193a      	adds	r2, r7, r4
 801a30a:	6013      	str	r3, [r2, #0]
 801a30c:	2301      	movs	r3, #1
 801a30e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a312:	f383 8810 	msr	PRIMASK, r3
}
 801a316:	46c0      	nop			@ (mov r8, r8)
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	681a      	ldr	r2, [r3, #0]
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	2110      	movs	r1, #16
 801a324:	438a      	bics	r2, r1
 801a326:	601a      	str	r2, [r3, #0]
 801a328:	193b      	adds	r3, r7, r4
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a330:	f383 8810 	msr	PRIMASK, r3
}
 801a334:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	2202      	movs	r2, #2
 801a33a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	22ac      	movs	r2, #172	@ 0xac
 801a340:	589b      	ldr	r3, [r3, r2]
 801a342:	183a      	adds	r2, r7, r0
 801a344:	8811      	ldrh	r1, [r2, #0]
 801a346:	687a      	ldr	r2, [r7, #4]
 801a348:	0010      	movs	r0, r2
 801a34a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a34c:	e046      	b.n	801a3dc <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801a34e:	23a4      	movs	r3, #164	@ 0xa4
 801a350:	18fb      	adds	r3, r7, r3
 801a352:	681a      	ldr	r2, [r3, #0]
 801a354:	2380      	movs	r3, #128	@ 0x80
 801a356:	035b      	lsls	r3, r3, #13
 801a358:	4013      	ands	r3, r2
 801a35a:	d012      	beq.n	801a382 <HAL_UART_IRQHandler+0x56a>
 801a35c:	239c      	movs	r3, #156	@ 0x9c
 801a35e:	18fb      	adds	r3, r7, r3
 801a360:	681a      	ldr	r2, [r3, #0]
 801a362:	2380      	movs	r3, #128	@ 0x80
 801a364:	03db      	lsls	r3, r3, #15
 801a366:	4013      	ands	r3, r2
 801a368:	d00b      	beq.n	801a382 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	2280      	movs	r2, #128	@ 0x80
 801a370:	0352      	lsls	r2, r2, #13
 801a372:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	22a8      	movs	r2, #168	@ 0xa8
 801a378:	589b      	ldr	r3, [r3, r2]
 801a37a:	687a      	ldr	r2, [r7, #4]
 801a37c:	0010      	movs	r0, r2
 801a37e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a380:	e02f      	b.n	801a3e2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801a382:	23a4      	movs	r3, #164	@ 0xa4
 801a384:	18fb      	adds	r3, r7, r3
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	2280      	movs	r2, #128	@ 0x80
 801a38a:	4013      	ands	r3, r2
 801a38c:	d00f      	beq.n	801a3ae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801a38e:	23a0      	movs	r3, #160	@ 0xa0
 801a390:	18fb      	adds	r3, r7, r3
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	2280      	movs	r2, #128	@ 0x80
 801a396:	4013      	ands	r3, r2
 801a398:	d009      	beq.n	801a3ae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d01e      	beq.n	801a3e0 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3a6:	687a      	ldr	r2, [r7, #4]
 801a3a8:	0010      	movs	r0, r2
 801a3aa:	4798      	blx	r3
    }
    return;
 801a3ac:	e018      	b.n	801a3e0 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801a3ae:	23a4      	movs	r3, #164	@ 0xa4
 801a3b0:	18fb      	adds	r3, r7, r3
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	2240      	movs	r2, #64	@ 0x40
 801a3b6:	4013      	ands	r3, r2
 801a3b8:	d013      	beq.n	801a3e2 <HAL_UART_IRQHandler+0x5ca>
 801a3ba:	23a0      	movs	r3, #160	@ 0xa0
 801a3bc:	18fb      	adds	r3, r7, r3
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	2240      	movs	r2, #64	@ 0x40
 801a3c2:	4013      	ands	r3, r2
 801a3c4:	d00d      	beq.n	801a3e2 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	0018      	movs	r0, r3
 801a3ca:	f001 f862 	bl	801b492 <UART_EndTransmit_IT>
    return;
 801a3ce:	e008      	b.n	801a3e2 <HAL_UART_IRQHandler+0x5ca>
      return;
 801a3d0:	46c0      	nop			@ (mov r8, r8)
 801a3d2:	e006      	b.n	801a3e2 <HAL_UART_IRQHandler+0x5ca>
    return;
 801a3d4:	46c0      	nop			@ (mov r8, r8)
 801a3d6:	e004      	b.n	801a3e2 <HAL_UART_IRQHandler+0x5ca>
      return;
 801a3d8:	46c0      	nop			@ (mov r8, r8)
 801a3da:	e002      	b.n	801a3e2 <HAL_UART_IRQHandler+0x5ca>
      return;
 801a3dc:	46c0      	nop			@ (mov r8, r8)
 801a3de:	e000      	b.n	801a3e2 <HAL_UART_IRQHandler+0x5ca>
    return;
 801a3e0:	46c0      	nop			@ (mov r8, r8)
  }

}
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	b02b      	add	sp, #172	@ 0xac
 801a3e6:	bd90      	pop	{r4, r7, pc}
 801a3e8:	fffffeff 	.word	0xfffffeff
 801a3ec:	fffffedf 	.word	0xfffffedf

0801a3f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b082      	sub	sp, #8
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801a3f8:	46c0      	nop			@ (mov r8, r8)
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	b002      	add	sp, #8
 801a3fe:	bd80      	pop	{r7, pc}

0801a400 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b082      	sub	sp, #8
 801a404:	af00      	add	r7, sp, #0
 801a406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801a408:	46c0      	nop			@ (mov r8, r8)
 801a40a:	46bd      	mov	sp, r7
 801a40c:	b002      	add	sp, #8
 801a40e:	bd80      	pop	{r7, pc}

0801a410 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b082      	sub	sp, #8
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801a418:	46c0      	nop			@ (mov r8, r8)
 801a41a:	46bd      	mov	sp, r7
 801a41c:	b002      	add	sp, #8
 801a41e:	bd80      	pop	{r7, pc}

0801a420 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b082      	sub	sp, #8
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801a428:	46c0      	nop			@ (mov r8, r8)
 801a42a:	46bd      	mov	sp, r7
 801a42c:	b002      	add	sp, #8
 801a42e:	bd80      	pop	{r7, pc}

0801a430 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801a438:	46c0      	nop			@ (mov r8, r8)
 801a43a:	46bd      	mov	sp, r7
 801a43c:	b002      	add	sp, #8
 801a43e:	bd80      	pop	{r7, pc}

0801a440 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801a440:	b580      	push	{r7, lr}
 801a442:	b082      	sub	sp, #8
 801a444:	af00      	add	r7, sp, #0
 801a446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801a448:	46c0      	nop			@ (mov r8, r8)
 801a44a:	46bd      	mov	sp, r7
 801a44c:	b002      	add	sp, #8
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b082      	sub	sp, #8
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	000a      	movs	r2, r1
 801a45a:	1cbb      	adds	r3, r7, #2
 801a45c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a45e:	46c0      	nop			@ (mov r8, r8)
 801a460:	46bd      	mov	sp, r7
 801a462:	b002      	add	sp, #8
 801a464:	bd80      	pop	{r7, pc}
	...

0801a468 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b082      	sub	sp, #8
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	2188      	movs	r1, #136	@ 0x88
 801a474:	4a14      	ldr	r2, [pc, #80]	@ (801a4c8 <UART_InitCallbacksToDefault+0x60>)
 801a476:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	218c      	movs	r1, #140	@ 0x8c
 801a47c:	4a13      	ldr	r2, [pc, #76]	@ (801a4cc <UART_InitCallbacksToDefault+0x64>)
 801a47e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	2190      	movs	r1, #144	@ 0x90
 801a484:	4a12      	ldr	r2, [pc, #72]	@ (801a4d0 <UART_InitCallbacksToDefault+0x68>)
 801a486:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	2194      	movs	r1, #148	@ 0x94
 801a48c:	4a11      	ldr	r2, [pc, #68]	@ (801a4d4 <UART_InitCallbacksToDefault+0x6c>)
 801a48e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	2198      	movs	r1, #152	@ 0x98
 801a494:	4a10      	ldr	r2, [pc, #64]	@ (801a4d8 <UART_InitCallbacksToDefault+0x70>)
 801a496:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	219c      	movs	r1, #156	@ 0x9c
 801a49c:	4a0f      	ldr	r2, [pc, #60]	@ (801a4dc <UART_InitCallbacksToDefault+0x74>)
 801a49e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	21a0      	movs	r1, #160	@ 0xa0
 801a4a4:	4a0e      	ldr	r2, [pc, #56]	@ (801a4e0 <UART_InitCallbacksToDefault+0x78>)
 801a4a6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	21a4      	movs	r1, #164	@ 0xa4
 801a4ac:	4a0d      	ldr	r2, [pc, #52]	@ (801a4e4 <UART_InitCallbacksToDefault+0x7c>)
 801a4ae:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	21a8      	movs	r1, #168	@ 0xa8
 801a4b4:	4a0c      	ldr	r2, [pc, #48]	@ (801a4e8 <UART_InitCallbacksToDefault+0x80>)
 801a4b6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	21ac      	movs	r1, #172	@ 0xac
 801a4bc:	4a0b      	ldr	r2, [pc, #44]	@ (801a4ec <UART_InitCallbacksToDefault+0x84>)
 801a4be:	505a      	str	r2, [r3, r1]

}
 801a4c0:	46c0      	nop			@ (mov r8, r8)
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	b002      	add	sp, #8
 801a4c6:	bd80      	pop	{r7, pc}
 801a4c8:	0801a401 	.word	0x0801a401
 801a4cc:	0801a3f1 	.word	0x0801a3f1
 801a4d0:	0801a411 	.word	0x0801a411
 801a4d4:	0800a2e9 	.word	0x0800a2e9
 801a4d8:	08003c21 	.word	0x08003c21
 801a4dc:	0801a421 	.word	0x0801a421
 801a4e0:	0801a431 	.word	0x0801a431
 801a4e4:	0801a441 	.word	0x0801a441
 801a4e8:	0801b885 	.word	0x0801b885
 801a4ec:	0801a451 	.word	0x0801a451

0801a4f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a4f0:	b5b0      	push	{r4, r5, r7, lr}
 801a4f2:	b08e      	sub	sp, #56	@ 0x38
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a4f8:	231a      	movs	r3, #26
 801a4fa:	2218      	movs	r2, #24
 801a4fc:	189b      	adds	r3, r3, r2
 801a4fe:	19db      	adds	r3, r3, r7
 801a500:	2200      	movs	r2, #0
 801a502:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a504:	69fb      	ldr	r3, [r7, #28]
 801a506:	689a      	ldr	r2, [r3, #8]
 801a508:	69fb      	ldr	r3, [r7, #28]
 801a50a:	691b      	ldr	r3, [r3, #16]
 801a50c:	431a      	orrs	r2, r3
 801a50e:	69fb      	ldr	r3, [r7, #28]
 801a510:	695b      	ldr	r3, [r3, #20]
 801a512:	431a      	orrs	r2, r3
 801a514:	69fb      	ldr	r3, [r7, #28]
 801a516:	69db      	ldr	r3, [r3, #28]
 801a518:	4313      	orrs	r3, r2
 801a51a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a51c:	69fb      	ldr	r3, [r7, #28]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	4ac3      	ldr	r2, [pc, #780]	@ (801a830 <UART_SetConfig+0x340>)
 801a524:	4013      	ands	r3, r2
 801a526:	0019      	movs	r1, r3
 801a528:	69fb      	ldr	r3, [r7, #28]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a52e:	430a      	orrs	r2, r1
 801a530:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a532:	69fb      	ldr	r3, [r7, #28]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	685b      	ldr	r3, [r3, #4]
 801a538:	4abe      	ldr	r2, [pc, #760]	@ (801a834 <UART_SetConfig+0x344>)
 801a53a:	4013      	ands	r3, r2
 801a53c:	0019      	movs	r1, r3
 801a53e:	69fb      	ldr	r3, [r7, #28]
 801a540:	68da      	ldr	r2, [r3, #12]
 801a542:	69fb      	ldr	r3, [r7, #28]
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	430a      	orrs	r2, r1
 801a548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a54a:	69fb      	ldr	r3, [r7, #28]
 801a54c:	699b      	ldr	r3, [r3, #24]
 801a54e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a550:	69fb      	ldr	r3, [r7, #28]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	4ab8      	ldr	r2, [pc, #736]	@ (801a838 <UART_SetConfig+0x348>)
 801a556:	4293      	cmp	r3, r2
 801a558:	d004      	beq.n	801a564 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a55a:	69fb      	ldr	r3, [r7, #28]
 801a55c:	6a1b      	ldr	r3, [r3, #32]
 801a55e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a560:	4313      	orrs	r3, r2
 801a562:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a564:	69fb      	ldr	r3, [r7, #28]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	689b      	ldr	r3, [r3, #8]
 801a56a:	4ab4      	ldr	r2, [pc, #720]	@ (801a83c <UART_SetConfig+0x34c>)
 801a56c:	4013      	ands	r3, r2
 801a56e:	0019      	movs	r1, r3
 801a570:	69fb      	ldr	r3, [r7, #28]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a576:	430a      	orrs	r2, r1
 801a578:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a57a:	69fb      	ldr	r3, [r7, #28]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	4ab0      	ldr	r2, [pc, #704]	@ (801a840 <UART_SetConfig+0x350>)
 801a580:	4293      	cmp	r3, r2
 801a582:	d131      	bne.n	801a5e8 <UART_SetConfig+0xf8>
 801a584:	4baf      	ldr	r3, [pc, #700]	@ (801a844 <UART_SetConfig+0x354>)
 801a586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a588:	2203      	movs	r2, #3
 801a58a:	4013      	ands	r3, r2
 801a58c:	2b03      	cmp	r3, #3
 801a58e:	d01d      	beq.n	801a5cc <UART_SetConfig+0xdc>
 801a590:	d823      	bhi.n	801a5da <UART_SetConfig+0xea>
 801a592:	2b02      	cmp	r3, #2
 801a594:	d00c      	beq.n	801a5b0 <UART_SetConfig+0xc0>
 801a596:	d820      	bhi.n	801a5da <UART_SetConfig+0xea>
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d002      	beq.n	801a5a2 <UART_SetConfig+0xb2>
 801a59c:	2b01      	cmp	r3, #1
 801a59e:	d00e      	beq.n	801a5be <UART_SetConfig+0xce>
 801a5a0:	e01b      	b.n	801a5da <UART_SetConfig+0xea>
 801a5a2:	231b      	movs	r3, #27
 801a5a4:	2218      	movs	r2, #24
 801a5a6:	189b      	adds	r3, r3, r2
 801a5a8:	19db      	adds	r3, r3, r7
 801a5aa:	2201      	movs	r2, #1
 801a5ac:	701a      	strb	r2, [r3, #0]
 801a5ae:	e0b4      	b.n	801a71a <UART_SetConfig+0x22a>
 801a5b0:	231b      	movs	r3, #27
 801a5b2:	2218      	movs	r2, #24
 801a5b4:	189b      	adds	r3, r3, r2
 801a5b6:	19db      	adds	r3, r3, r7
 801a5b8:	2202      	movs	r2, #2
 801a5ba:	701a      	strb	r2, [r3, #0]
 801a5bc:	e0ad      	b.n	801a71a <UART_SetConfig+0x22a>
 801a5be:	231b      	movs	r3, #27
 801a5c0:	2218      	movs	r2, #24
 801a5c2:	189b      	adds	r3, r3, r2
 801a5c4:	19db      	adds	r3, r3, r7
 801a5c6:	2204      	movs	r2, #4
 801a5c8:	701a      	strb	r2, [r3, #0]
 801a5ca:	e0a6      	b.n	801a71a <UART_SetConfig+0x22a>
 801a5cc:	231b      	movs	r3, #27
 801a5ce:	2218      	movs	r2, #24
 801a5d0:	189b      	adds	r3, r3, r2
 801a5d2:	19db      	adds	r3, r3, r7
 801a5d4:	2208      	movs	r2, #8
 801a5d6:	701a      	strb	r2, [r3, #0]
 801a5d8:	e09f      	b.n	801a71a <UART_SetConfig+0x22a>
 801a5da:	231b      	movs	r3, #27
 801a5dc:	2218      	movs	r2, #24
 801a5de:	189b      	adds	r3, r3, r2
 801a5e0:	19db      	adds	r3, r3, r7
 801a5e2:	2210      	movs	r2, #16
 801a5e4:	701a      	strb	r2, [r3, #0]
 801a5e6:	e098      	b.n	801a71a <UART_SetConfig+0x22a>
 801a5e8:	69fb      	ldr	r3, [r7, #28]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	4a96      	ldr	r2, [pc, #600]	@ (801a848 <UART_SetConfig+0x358>)
 801a5ee:	4293      	cmp	r3, r2
 801a5f0:	d131      	bne.n	801a656 <UART_SetConfig+0x166>
 801a5f2:	4b94      	ldr	r3, [pc, #592]	@ (801a844 <UART_SetConfig+0x354>)
 801a5f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a5f6:	220c      	movs	r2, #12
 801a5f8:	4013      	ands	r3, r2
 801a5fa:	2b0c      	cmp	r3, #12
 801a5fc:	d01d      	beq.n	801a63a <UART_SetConfig+0x14a>
 801a5fe:	d823      	bhi.n	801a648 <UART_SetConfig+0x158>
 801a600:	2b08      	cmp	r3, #8
 801a602:	d00c      	beq.n	801a61e <UART_SetConfig+0x12e>
 801a604:	d820      	bhi.n	801a648 <UART_SetConfig+0x158>
 801a606:	2b00      	cmp	r3, #0
 801a608:	d002      	beq.n	801a610 <UART_SetConfig+0x120>
 801a60a:	2b04      	cmp	r3, #4
 801a60c:	d00e      	beq.n	801a62c <UART_SetConfig+0x13c>
 801a60e:	e01b      	b.n	801a648 <UART_SetConfig+0x158>
 801a610:	231b      	movs	r3, #27
 801a612:	2218      	movs	r2, #24
 801a614:	189b      	adds	r3, r3, r2
 801a616:	19db      	adds	r3, r3, r7
 801a618:	2200      	movs	r2, #0
 801a61a:	701a      	strb	r2, [r3, #0]
 801a61c:	e07d      	b.n	801a71a <UART_SetConfig+0x22a>
 801a61e:	231b      	movs	r3, #27
 801a620:	2218      	movs	r2, #24
 801a622:	189b      	adds	r3, r3, r2
 801a624:	19db      	adds	r3, r3, r7
 801a626:	2202      	movs	r2, #2
 801a628:	701a      	strb	r2, [r3, #0]
 801a62a:	e076      	b.n	801a71a <UART_SetConfig+0x22a>
 801a62c:	231b      	movs	r3, #27
 801a62e:	2218      	movs	r2, #24
 801a630:	189b      	adds	r3, r3, r2
 801a632:	19db      	adds	r3, r3, r7
 801a634:	2204      	movs	r2, #4
 801a636:	701a      	strb	r2, [r3, #0]
 801a638:	e06f      	b.n	801a71a <UART_SetConfig+0x22a>
 801a63a:	231b      	movs	r3, #27
 801a63c:	2218      	movs	r2, #24
 801a63e:	189b      	adds	r3, r3, r2
 801a640:	19db      	adds	r3, r3, r7
 801a642:	2208      	movs	r2, #8
 801a644:	701a      	strb	r2, [r3, #0]
 801a646:	e068      	b.n	801a71a <UART_SetConfig+0x22a>
 801a648:	231b      	movs	r3, #27
 801a64a:	2218      	movs	r2, #24
 801a64c:	189b      	adds	r3, r3, r2
 801a64e:	19db      	adds	r3, r3, r7
 801a650:	2210      	movs	r2, #16
 801a652:	701a      	strb	r2, [r3, #0]
 801a654:	e061      	b.n	801a71a <UART_SetConfig+0x22a>
 801a656:	69fb      	ldr	r3, [r7, #28]
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	4a7c      	ldr	r2, [pc, #496]	@ (801a84c <UART_SetConfig+0x35c>)
 801a65c:	4293      	cmp	r3, r2
 801a65e:	d106      	bne.n	801a66e <UART_SetConfig+0x17e>
 801a660:	231b      	movs	r3, #27
 801a662:	2218      	movs	r2, #24
 801a664:	189b      	adds	r3, r3, r2
 801a666:	19db      	adds	r3, r3, r7
 801a668:	2200      	movs	r2, #0
 801a66a:	701a      	strb	r2, [r3, #0]
 801a66c:	e055      	b.n	801a71a <UART_SetConfig+0x22a>
 801a66e:	69fb      	ldr	r3, [r7, #28]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	4a77      	ldr	r2, [pc, #476]	@ (801a850 <UART_SetConfig+0x360>)
 801a674:	4293      	cmp	r3, r2
 801a676:	d106      	bne.n	801a686 <UART_SetConfig+0x196>
 801a678:	231b      	movs	r3, #27
 801a67a:	2218      	movs	r2, #24
 801a67c:	189b      	adds	r3, r3, r2
 801a67e:	19db      	adds	r3, r3, r7
 801a680:	2200      	movs	r2, #0
 801a682:	701a      	strb	r2, [r3, #0]
 801a684:	e049      	b.n	801a71a <UART_SetConfig+0x22a>
 801a686:	69fb      	ldr	r3, [r7, #28]
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	4a6b      	ldr	r2, [pc, #428]	@ (801a838 <UART_SetConfig+0x348>)
 801a68c:	4293      	cmp	r3, r2
 801a68e:	d13e      	bne.n	801a70e <UART_SetConfig+0x21e>
 801a690:	4b6c      	ldr	r3, [pc, #432]	@ (801a844 <UART_SetConfig+0x354>)
 801a692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a694:	23c0      	movs	r3, #192	@ 0xc0
 801a696:	011b      	lsls	r3, r3, #4
 801a698:	4013      	ands	r3, r2
 801a69a:	22c0      	movs	r2, #192	@ 0xc0
 801a69c:	0112      	lsls	r2, r2, #4
 801a69e:	4293      	cmp	r3, r2
 801a6a0:	d027      	beq.n	801a6f2 <UART_SetConfig+0x202>
 801a6a2:	22c0      	movs	r2, #192	@ 0xc0
 801a6a4:	0112      	lsls	r2, r2, #4
 801a6a6:	4293      	cmp	r3, r2
 801a6a8:	d82a      	bhi.n	801a700 <UART_SetConfig+0x210>
 801a6aa:	2280      	movs	r2, #128	@ 0x80
 801a6ac:	0112      	lsls	r2, r2, #4
 801a6ae:	4293      	cmp	r3, r2
 801a6b0:	d011      	beq.n	801a6d6 <UART_SetConfig+0x1e6>
 801a6b2:	2280      	movs	r2, #128	@ 0x80
 801a6b4:	0112      	lsls	r2, r2, #4
 801a6b6:	4293      	cmp	r3, r2
 801a6b8:	d822      	bhi.n	801a700 <UART_SetConfig+0x210>
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d004      	beq.n	801a6c8 <UART_SetConfig+0x1d8>
 801a6be:	2280      	movs	r2, #128	@ 0x80
 801a6c0:	00d2      	lsls	r2, r2, #3
 801a6c2:	4293      	cmp	r3, r2
 801a6c4:	d00e      	beq.n	801a6e4 <UART_SetConfig+0x1f4>
 801a6c6:	e01b      	b.n	801a700 <UART_SetConfig+0x210>
 801a6c8:	231b      	movs	r3, #27
 801a6ca:	2218      	movs	r2, #24
 801a6cc:	189b      	adds	r3, r3, r2
 801a6ce:	19db      	adds	r3, r3, r7
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	701a      	strb	r2, [r3, #0]
 801a6d4:	e021      	b.n	801a71a <UART_SetConfig+0x22a>
 801a6d6:	231b      	movs	r3, #27
 801a6d8:	2218      	movs	r2, #24
 801a6da:	189b      	adds	r3, r3, r2
 801a6dc:	19db      	adds	r3, r3, r7
 801a6de:	2202      	movs	r2, #2
 801a6e0:	701a      	strb	r2, [r3, #0]
 801a6e2:	e01a      	b.n	801a71a <UART_SetConfig+0x22a>
 801a6e4:	231b      	movs	r3, #27
 801a6e6:	2218      	movs	r2, #24
 801a6e8:	189b      	adds	r3, r3, r2
 801a6ea:	19db      	adds	r3, r3, r7
 801a6ec:	2204      	movs	r2, #4
 801a6ee:	701a      	strb	r2, [r3, #0]
 801a6f0:	e013      	b.n	801a71a <UART_SetConfig+0x22a>
 801a6f2:	231b      	movs	r3, #27
 801a6f4:	2218      	movs	r2, #24
 801a6f6:	189b      	adds	r3, r3, r2
 801a6f8:	19db      	adds	r3, r3, r7
 801a6fa:	2208      	movs	r2, #8
 801a6fc:	701a      	strb	r2, [r3, #0]
 801a6fe:	e00c      	b.n	801a71a <UART_SetConfig+0x22a>
 801a700:	231b      	movs	r3, #27
 801a702:	2218      	movs	r2, #24
 801a704:	189b      	adds	r3, r3, r2
 801a706:	19db      	adds	r3, r3, r7
 801a708:	2210      	movs	r2, #16
 801a70a:	701a      	strb	r2, [r3, #0]
 801a70c:	e005      	b.n	801a71a <UART_SetConfig+0x22a>
 801a70e:	231b      	movs	r3, #27
 801a710:	2218      	movs	r2, #24
 801a712:	189b      	adds	r3, r3, r2
 801a714:	19db      	adds	r3, r3, r7
 801a716:	2210      	movs	r2, #16
 801a718:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a71a:	69fb      	ldr	r3, [r7, #28]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	4a46      	ldr	r2, [pc, #280]	@ (801a838 <UART_SetConfig+0x348>)
 801a720:	4293      	cmp	r3, r2
 801a722:	d000      	beq.n	801a726 <UART_SetConfig+0x236>
 801a724:	e09a      	b.n	801a85c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a726:	231b      	movs	r3, #27
 801a728:	2218      	movs	r2, #24
 801a72a:	189b      	adds	r3, r3, r2
 801a72c:	19db      	adds	r3, r3, r7
 801a72e:	781b      	ldrb	r3, [r3, #0]
 801a730:	2b08      	cmp	r3, #8
 801a732:	d01d      	beq.n	801a770 <UART_SetConfig+0x280>
 801a734:	dc20      	bgt.n	801a778 <UART_SetConfig+0x288>
 801a736:	2b04      	cmp	r3, #4
 801a738:	d015      	beq.n	801a766 <UART_SetConfig+0x276>
 801a73a:	dc1d      	bgt.n	801a778 <UART_SetConfig+0x288>
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d002      	beq.n	801a746 <UART_SetConfig+0x256>
 801a740:	2b02      	cmp	r3, #2
 801a742:	d005      	beq.n	801a750 <UART_SetConfig+0x260>
 801a744:	e018      	b.n	801a778 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a746:	f7fd fe4b 	bl	80183e0 <HAL_RCC_GetPCLK1Freq>
 801a74a:	0003      	movs	r3, r0
 801a74c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a74e:	e01c      	b.n	801a78a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a750:	4b3c      	ldr	r3, [pc, #240]	@ (801a844 <UART_SetConfig+0x354>)
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	2210      	movs	r2, #16
 801a756:	4013      	ands	r3, r2
 801a758:	d002      	beq.n	801a760 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a75a:	4b3e      	ldr	r3, [pc, #248]	@ (801a854 <UART_SetConfig+0x364>)
 801a75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a75e:	e014      	b.n	801a78a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801a760:	4b3d      	ldr	r3, [pc, #244]	@ (801a858 <UART_SetConfig+0x368>)
 801a762:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a764:	e011      	b.n	801a78a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a766:	f7fd fd8b 	bl	8018280 <HAL_RCC_GetSysClockFreq>
 801a76a:	0003      	movs	r3, r0
 801a76c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a76e:	e00c      	b.n	801a78a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a770:	2380      	movs	r3, #128	@ 0x80
 801a772:	021b      	lsls	r3, r3, #8
 801a774:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a776:	e008      	b.n	801a78a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801a778:	2300      	movs	r3, #0
 801a77a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a77c:	231a      	movs	r3, #26
 801a77e:	2218      	movs	r2, #24
 801a780:	189b      	adds	r3, r3, r2
 801a782:	19db      	adds	r3, r3, r7
 801a784:	2201      	movs	r2, #1
 801a786:	701a      	strb	r2, [r3, #0]
        break;
 801a788:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d100      	bne.n	801a792 <UART_SetConfig+0x2a2>
 801a790:	e133      	b.n	801a9fa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a792:	69fb      	ldr	r3, [r7, #28]
 801a794:	685a      	ldr	r2, [r3, #4]
 801a796:	0013      	movs	r3, r2
 801a798:	005b      	lsls	r3, r3, #1
 801a79a:	189b      	adds	r3, r3, r2
 801a79c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	d305      	bcc.n	801a7ae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801a7a2:	69fb      	ldr	r3, [r7, #28]
 801a7a4:	685b      	ldr	r3, [r3, #4]
 801a7a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a7a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7aa:	429a      	cmp	r2, r3
 801a7ac:	d906      	bls.n	801a7bc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801a7ae:	231a      	movs	r3, #26
 801a7b0:	2218      	movs	r2, #24
 801a7b2:	189b      	adds	r3, r3, r2
 801a7b4:	19db      	adds	r3, r3, r7
 801a7b6:	2201      	movs	r2, #1
 801a7b8:	701a      	strb	r2, [r3, #0]
 801a7ba:	e11e      	b.n	801a9fa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801a7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7be:	613b      	str	r3, [r7, #16]
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	617b      	str	r3, [r7, #20]
 801a7c4:	6939      	ldr	r1, [r7, #16]
 801a7c6:	697a      	ldr	r2, [r7, #20]
 801a7c8:	000b      	movs	r3, r1
 801a7ca:	0e1b      	lsrs	r3, r3, #24
 801a7cc:	0010      	movs	r0, r2
 801a7ce:	0205      	lsls	r5, r0, #8
 801a7d0:	431d      	orrs	r5, r3
 801a7d2:	000b      	movs	r3, r1
 801a7d4:	021c      	lsls	r4, r3, #8
 801a7d6:	69fb      	ldr	r3, [r7, #28]
 801a7d8:	685b      	ldr	r3, [r3, #4]
 801a7da:	085b      	lsrs	r3, r3, #1
 801a7dc:	60bb      	str	r3, [r7, #8]
 801a7de:	2300      	movs	r3, #0
 801a7e0:	60fb      	str	r3, [r7, #12]
 801a7e2:	68b8      	ldr	r0, [r7, #8]
 801a7e4:	68f9      	ldr	r1, [r7, #12]
 801a7e6:	1900      	adds	r0, r0, r4
 801a7e8:	4169      	adcs	r1, r5
 801a7ea:	69fb      	ldr	r3, [r7, #28]
 801a7ec:	685b      	ldr	r3, [r3, #4]
 801a7ee:	603b      	str	r3, [r7, #0]
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	607b      	str	r3, [r7, #4]
 801a7f4:	683a      	ldr	r2, [r7, #0]
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	f7e5 fec2 	bl	8000580 <__aeabi_uldivmod>
 801a7fc:	0002      	movs	r2, r0
 801a7fe:	000b      	movs	r3, r1
 801a800:	0013      	movs	r3, r2
 801a802:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a806:	23c0      	movs	r3, #192	@ 0xc0
 801a808:	009b      	lsls	r3, r3, #2
 801a80a:	429a      	cmp	r2, r3
 801a80c:	d309      	bcc.n	801a822 <UART_SetConfig+0x332>
 801a80e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a810:	2380      	movs	r3, #128	@ 0x80
 801a812:	035b      	lsls	r3, r3, #13
 801a814:	429a      	cmp	r2, r3
 801a816:	d204      	bcs.n	801a822 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801a818:	69fb      	ldr	r3, [r7, #28]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a81e:	60da      	str	r2, [r3, #12]
 801a820:	e0eb      	b.n	801a9fa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801a822:	231a      	movs	r3, #26
 801a824:	2218      	movs	r2, #24
 801a826:	189b      	adds	r3, r3, r2
 801a828:	19db      	adds	r3, r3, r7
 801a82a:	2201      	movs	r2, #1
 801a82c:	701a      	strb	r2, [r3, #0]
 801a82e:	e0e4      	b.n	801a9fa <UART_SetConfig+0x50a>
 801a830:	efff69f3 	.word	0xefff69f3
 801a834:	ffffcfff 	.word	0xffffcfff
 801a838:	40004800 	.word	0x40004800
 801a83c:	fffff4ff 	.word	0xfffff4ff
 801a840:	40013800 	.word	0x40013800
 801a844:	40021000 	.word	0x40021000
 801a848:	40004400 	.word	0x40004400
 801a84c:	40004c00 	.word	0x40004c00
 801a850:	40005000 	.word	0x40005000
 801a854:	003d0900 	.word	0x003d0900
 801a858:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a85c:	69fb      	ldr	r3, [r7, #28]
 801a85e:	69da      	ldr	r2, [r3, #28]
 801a860:	2380      	movs	r3, #128	@ 0x80
 801a862:	021b      	lsls	r3, r3, #8
 801a864:	429a      	cmp	r2, r3
 801a866:	d000      	beq.n	801a86a <UART_SetConfig+0x37a>
 801a868:	e070      	b.n	801a94c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801a86a:	231b      	movs	r3, #27
 801a86c:	2218      	movs	r2, #24
 801a86e:	189b      	adds	r3, r3, r2
 801a870:	19db      	adds	r3, r3, r7
 801a872:	781b      	ldrb	r3, [r3, #0]
 801a874:	2b08      	cmp	r3, #8
 801a876:	d822      	bhi.n	801a8be <UART_SetConfig+0x3ce>
 801a878:	009a      	lsls	r2, r3, #2
 801a87a:	4b67      	ldr	r3, [pc, #412]	@ (801aa18 <UART_SetConfig+0x528>)
 801a87c:	18d3      	adds	r3, r2, r3
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a882:	f7fd fdad 	bl	80183e0 <HAL_RCC_GetPCLK1Freq>
 801a886:	0003      	movs	r3, r0
 801a888:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a88a:	e021      	b.n	801a8d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a88c:	f7fd fdbe 	bl	801840c <HAL_RCC_GetPCLK2Freq>
 801a890:	0003      	movs	r3, r0
 801a892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a894:	e01c      	b.n	801a8d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a896:	4b61      	ldr	r3, [pc, #388]	@ (801aa1c <UART_SetConfig+0x52c>)
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	2210      	movs	r2, #16
 801a89c:	4013      	ands	r3, r2
 801a89e:	d002      	beq.n	801a8a6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a8a0:	4b5f      	ldr	r3, [pc, #380]	@ (801aa20 <UART_SetConfig+0x530>)
 801a8a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a8a4:	e014      	b.n	801a8d0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801a8a6:	4b5f      	ldr	r3, [pc, #380]	@ (801aa24 <UART_SetConfig+0x534>)
 801a8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8aa:	e011      	b.n	801a8d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a8ac:	f7fd fce8 	bl	8018280 <HAL_RCC_GetSysClockFreq>
 801a8b0:	0003      	movs	r3, r0
 801a8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8b4:	e00c      	b.n	801a8d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a8b6:	2380      	movs	r3, #128	@ 0x80
 801a8b8:	021b      	lsls	r3, r3, #8
 801a8ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8bc:	e008      	b.n	801a8d0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801a8be:	2300      	movs	r3, #0
 801a8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a8c2:	231a      	movs	r3, #26
 801a8c4:	2218      	movs	r2, #24
 801a8c6:	189b      	adds	r3, r3, r2
 801a8c8:	19db      	adds	r3, r3, r7
 801a8ca:	2201      	movs	r2, #1
 801a8cc:	701a      	strb	r2, [r3, #0]
        break;
 801a8ce:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d100      	bne.n	801a8d8 <UART_SetConfig+0x3e8>
 801a8d6:	e090      	b.n	801a9fa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8da:	005a      	lsls	r2, r3, #1
 801a8dc:	69fb      	ldr	r3, [r7, #28]
 801a8de:	685b      	ldr	r3, [r3, #4]
 801a8e0:	085b      	lsrs	r3, r3, #1
 801a8e2:	18d2      	adds	r2, r2, r3
 801a8e4:	69fb      	ldr	r3, [r7, #28]
 801a8e6:	685b      	ldr	r3, [r3, #4]
 801a8e8:	0019      	movs	r1, r3
 801a8ea:	0010      	movs	r0, r2
 801a8ec:	f7e5 fc5a 	bl	80001a4 <__udivsi3>
 801a8f0:	0003      	movs	r3, r0
 801a8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8f6:	2b0f      	cmp	r3, #15
 801a8f8:	d921      	bls.n	801a93e <UART_SetConfig+0x44e>
 801a8fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a8fc:	2380      	movs	r3, #128	@ 0x80
 801a8fe:	025b      	lsls	r3, r3, #9
 801a900:	429a      	cmp	r2, r3
 801a902:	d21c      	bcs.n	801a93e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a906:	b29a      	uxth	r2, r3
 801a908:	200e      	movs	r0, #14
 801a90a:	2418      	movs	r4, #24
 801a90c:	1903      	adds	r3, r0, r4
 801a90e:	19db      	adds	r3, r3, r7
 801a910:	210f      	movs	r1, #15
 801a912:	438a      	bics	r2, r1
 801a914:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a918:	085b      	lsrs	r3, r3, #1
 801a91a:	b29b      	uxth	r3, r3
 801a91c:	2207      	movs	r2, #7
 801a91e:	4013      	ands	r3, r2
 801a920:	b299      	uxth	r1, r3
 801a922:	1903      	adds	r3, r0, r4
 801a924:	19db      	adds	r3, r3, r7
 801a926:	1902      	adds	r2, r0, r4
 801a928:	19d2      	adds	r2, r2, r7
 801a92a:	8812      	ldrh	r2, [r2, #0]
 801a92c:	430a      	orrs	r2, r1
 801a92e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801a930:	69fb      	ldr	r3, [r7, #28]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	1902      	adds	r2, r0, r4
 801a936:	19d2      	adds	r2, r2, r7
 801a938:	8812      	ldrh	r2, [r2, #0]
 801a93a:	60da      	str	r2, [r3, #12]
 801a93c:	e05d      	b.n	801a9fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801a93e:	231a      	movs	r3, #26
 801a940:	2218      	movs	r2, #24
 801a942:	189b      	adds	r3, r3, r2
 801a944:	19db      	adds	r3, r3, r7
 801a946:	2201      	movs	r2, #1
 801a948:	701a      	strb	r2, [r3, #0]
 801a94a:	e056      	b.n	801a9fa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801a94c:	231b      	movs	r3, #27
 801a94e:	2218      	movs	r2, #24
 801a950:	189b      	adds	r3, r3, r2
 801a952:	19db      	adds	r3, r3, r7
 801a954:	781b      	ldrb	r3, [r3, #0]
 801a956:	2b08      	cmp	r3, #8
 801a958:	d822      	bhi.n	801a9a0 <UART_SetConfig+0x4b0>
 801a95a:	009a      	lsls	r2, r3, #2
 801a95c:	4b32      	ldr	r3, [pc, #200]	@ (801aa28 <UART_SetConfig+0x538>)
 801a95e:	18d3      	adds	r3, r2, r3
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a964:	f7fd fd3c 	bl	80183e0 <HAL_RCC_GetPCLK1Freq>
 801a968:	0003      	movs	r3, r0
 801a96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a96c:	e021      	b.n	801a9b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a96e:	f7fd fd4d 	bl	801840c <HAL_RCC_GetPCLK2Freq>
 801a972:	0003      	movs	r3, r0
 801a974:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a976:	e01c      	b.n	801a9b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a978:	4b28      	ldr	r3, [pc, #160]	@ (801aa1c <UART_SetConfig+0x52c>)
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	2210      	movs	r2, #16
 801a97e:	4013      	ands	r3, r2
 801a980:	d002      	beq.n	801a988 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a982:	4b27      	ldr	r3, [pc, #156]	@ (801aa20 <UART_SetConfig+0x530>)
 801a984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a986:	e014      	b.n	801a9b2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801a988:	4b26      	ldr	r3, [pc, #152]	@ (801aa24 <UART_SetConfig+0x534>)
 801a98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a98c:	e011      	b.n	801a9b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a98e:	f7fd fc77 	bl	8018280 <HAL_RCC_GetSysClockFreq>
 801a992:	0003      	movs	r3, r0
 801a994:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a996:	e00c      	b.n	801a9b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a998:	2380      	movs	r3, #128	@ 0x80
 801a99a:	021b      	lsls	r3, r3, #8
 801a99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a99e:	e008      	b.n	801a9b2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a9a4:	231a      	movs	r3, #26
 801a9a6:	2218      	movs	r2, #24
 801a9a8:	189b      	adds	r3, r3, r2
 801a9aa:	19db      	adds	r3, r3, r7
 801a9ac:	2201      	movs	r2, #1
 801a9ae:	701a      	strb	r2, [r3, #0]
        break;
 801a9b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801a9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d020      	beq.n	801a9fa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801a9b8:	69fb      	ldr	r3, [r7, #28]
 801a9ba:	685b      	ldr	r3, [r3, #4]
 801a9bc:	085a      	lsrs	r2, r3, #1
 801a9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9c0:	18d2      	adds	r2, r2, r3
 801a9c2:	69fb      	ldr	r3, [r7, #28]
 801a9c4:	685b      	ldr	r3, [r3, #4]
 801a9c6:	0019      	movs	r1, r3
 801a9c8:	0010      	movs	r0, r2
 801a9ca:	f7e5 fbeb 	bl	80001a4 <__udivsi3>
 801a9ce:	0003      	movs	r3, r0
 801a9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9d4:	2b0f      	cmp	r3, #15
 801a9d6:	d90a      	bls.n	801a9ee <UART_SetConfig+0x4fe>
 801a9d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a9da:	2380      	movs	r3, #128	@ 0x80
 801a9dc:	025b      	lsls	r3, r3, #9
 801a9de:	429a      	cmp	r2, r3
 801a9e0:	d205      	bcs.n	801a9ee <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9e4:	b29a      	uxth	r2, r3
 801a9e6:	69fb      	ldr	r3, [r7, #28]
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	60da      	str	r2, [r3, #12]
 801a9ec:	e005      	b.n	801a9fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801a9ee:	231a      	movs	r3, #26
 801a9f0:	2218      	movs	r2, #24
 801a9f2:	189b      	adds	r3, r3, r2
 801a9f4:	19db      	adds	r3, r3, r7
 801a9f6:	2201      	movs	r2, #1
 801a9f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a9fa:	69fb      	ldr	r3, [r7, #28]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801aa00:	69fb      	ldr	r3, [r7, #28]
 801aa02:	2200      	movs	r2, #0
 801aa04:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801aa06:	231a      	movs	r3, #26
 801aa08:	2218      	movs	r2, #24
 801aa0a:	189b      	adds	r3, r3, r2
 801aa0c:	19db      	adds	r3, r3, r7
 801aa0e:	781b      	ldrb	r3, [r3, #0]
}
 801aa10:	0018      	movs	r0, r3
 801aa12:	46bd      	mov	sp, r7
 801aa14:	b00e      	add	sp, #56	@ 0x38
 801aa16:	bdb0      	pop	{r4, r5, r7, pc}
 801aa18:	08028fa8 	.word	0x08028fa8
 801aa1c:	40021000 	.word	0x40021000
 801aa20:	003d0900 	.word	0x003d0900
 801aa24:	00f42400 	.word	0x00f42400
 801aa28:	08028fcc 	.word	0x08028fcc

0801aa2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801aa2c:	b580      	push	{r7, lr}
 801aa2e:	b082      	sub	sp, #8
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa38:	2201      	movs	r2, #1
 801aa3a:	4013      	ands	r3, r2
 801aa3c:	d00b      	beq.n	801aa56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	685b      	ldr	r3, [r3, #4]
 801aa44:	4a4a      	ldr	r2, [pc, #296]	@ (801ab70 <UART_AdvFeatureConfig+0x144>)
 801aa46:	4013      	ands	r3, r2
 801aa48:	0019      	movs	r1, r3
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	430a      	orrs	r2, r1
 801aa54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa5a:	2202      	movs	r2, #2
 801aa5c:	4013      	ands	r3, r2
 801aa5e:	d00b      	beq.n	801aa78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	685b      	ldr	r3, [r3, #4]
 801aa66:	4a43      	ldr	r2, [pc, #268]	@ (801ab74 <UART_AdvFeatureConfig+0x148>)
 801aa68:	4013      	ands	r3, r2
 801aa6a:	0019      	movs	r1, r3
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	430a      	orrs	r2, r1
 801aa76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa7c:	2204      	movs	r2, #4
 801aa7e:	4013      	ands	r3, r2
 801aa80:	d00b      	beq.n	801aa9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	685b      	ldr	r3, [r3, #4]
 801aa88:	4a3b      	ldr	r2, [pc, #236]	@ (801ab78 <UART_AdvFeatureConfig+0x14c>)
 801aa8a:	4013      	ands	r3, r2
 801aa8c:	0019      	movs	r1, r3
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	430a      	orrs	r2, r1
 801aa98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa9e:	2208      	movs	r2, #8
 801aaa0:	4013      	ands	r3, r2
 801aaa2:	d00b      	beq.n	801aabc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	685b      	ldr	r3, [r3, #4]
 801aaaa:	4a34      	ldr	r2, [pc, #208]	@ (801ab7c <UART_AdvFeatureConfig+0x150>)
 801aaac:	4013      	ands	r3, r2
 801aaae:	0019      	movs	r1, r3
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	430a      	orrs	r2, r1
 801aaba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aac0:	2210      	movs	r2, #16
 801aac2:	4013      	ands	r3, r2
 801aac4:	d00b      	beq.n	801aade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	689b      	ldr	r3, [r3, #8]
 801aacc:	4a2c      	ldr	r2, [pc, #176]	@ (801ab80 <UART_AdvFeatureConfig+0x154>)
 801aace:	4013      	ands	r3, r2
 801aad0:	0019      	movs	r1, r3
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	430a      	orrs	r2, r1
 801aadc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aae2:	2220      	movs	r2, #32
 801aae4:	4013      	ands	r3, r2
 801aae6:	d00b      	beq.n	801ab00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	689b      	ldr	r3, [r3, #8]
 801aaee:	4a25      	ldr	r2, [pc, #148]	@ (801ab84 <UART_AdvFeatureConfig+0x158>)
 801aaf0:	4013      	ands	r3, r2
 801aaf2:	0019      	movs	r1, r3
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	430a      	orrs	r2, r1
 801aafe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab04:	2240      	movs	r2, #64	@ 0x40
 801ab06:	4013      	ands	r3, r2
 801ab08:	d01d      	beq.n	801ab46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	685b      	ldr	r3, [r3, #4]
 801ab10:	4a1d      	ldr	r2, [pc, #116]	@ (801ab88 <UART_AdvFeatureConfig+0x15c>)
 801ab12:	4013      	ands	r3, r2
 801ab14:	0019      	movs	r1, r3
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	430a      	orrs	r2, r1
 801ab20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ab26:	2380      	movs	r3, #128	@ 0x80
 801ab28:	035b      	lsls	r3, r3, #13
 801ab2a:	429a      	cmp	r2, r3
 801ab2c:	d10b      	bne.n	801ab46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	685b      	ldr	r3, [r3, #4]
 801ab34:	4a15      	ldr	r2, [pc, #84]	@ (801ab8c <UART_AdvFeatureConfig+0x160>)
 801ab36:	4013      	ands	r3, r2
 801ab38:	0019      	movs	r1, r3
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	430a      	orrs	r2, r1
 801ab44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab4a:	2280      	movs	r2, #128	@ 0x80
 801ab4c:	4013      	ands	r3, r2
 801ab4e:	d00b      	beq.n	801ab68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	685b      	ldr	r3, [r3, #4]
 801ab56:	4a0e      	ldr	r2, [pc, #56]	@ (801ab90 <UART_AdvFeatureConfig+0x164>)
 801ab58:	4013      	ands	r3, r2
 801ab5a:	0019      	movs	r1, r3
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	430a      	orrs	r2, r1
 801ab66:	605a      	str	r2, [r3, #4]
  }
}
 801ab68:	46c0      	nop			@ (mov r8, r8)
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	b002      	add	sp, #8
 801ab6e:	bd80      	pop	{r7, pc}
 801ab70:	fffdffff 	.word	0xfffdffff
 801ab74:	fffeffff 	.word	0xfffeffff
 801ab78:	fffbffff 	.word	0xfffbffff
 801ab7c:	ffff7fff 	.word	0xffff7fff
 801ab80:	ffffefff 	.word	0xffffefff
 801ab84:	ffffdfff 	.word	0xffffdfff
 801ab88:	ffefffff 	.word	0xffefffff
 801ab8c:	ff9fffff 	.word	0xff9fffff
 801ab90:	fff7ffff 	.word	0xfff7ffff

0801ab94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b092      	sub	sp, #72	@ 0x48
 801ab98:	af02      	add	r7, sp, #8
 801ab9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	2284      	movs	r2, #132	@ 0x84
 801aba0:	2100      	movs	r1, #0
 801aba2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801aba4:	f7f6 fa88 	bl	80110b8 <HAL_GetTick>
 801aba8:	0003      	movs	r3, r0
 801abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	2208      	movs	r2, #8
 801abb4:	4013      	ands	r3, r2
 801abb6:	2b08      	cmp	r3, #8
 801abb8:	d12c      	bne.n	801ac14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801abba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abbc:	2280      	movs	r2, #128	@ 0x80
 801abbe:	0391      	lsls	r1, r2, #14
 801abc0:	6878      	ldr	r0, [r7, #4]
 801abc2:	4a46      	ldr	r2, [pc, #280]	@ (801acdc <UART_CheckIdleState+0x148>)
 801abc4:	9200      	str	r2, [sp, #0]
 801abc6:	2200      	movs	r2, #0
 801abc8:	f000 f88c 	bl	801ace4 <UART_WaitOnFlagUntilTimeout>
 801abcc:	1e03      	subs	r3, r0, #0
 801abce:	d021      	beq.n	801ac14 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801abd0:	f3ef 8310 	mrs	r3, PRIMASK
 801abd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801abd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 801abda:	2301      	movs	r3, #1
 801abdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abe0:	f383 8810 	msr	PRIMASK, r3
}
 801abe4:	46c0      	nop			@ (mov r8, r8)
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	681a      	ldr	r2, [r3, #0]
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	2180      	movs	r1, #128	@ 0x80
 801abf2:	438a      	bics	r2, r1
 801abf4:	601a      	str	r2, [r3, #0]
 801abf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abfc:	f383 8810 	msr	PRIMASK, r3
}
 801ac00:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	2220      	movs	r2, #32
 801ac06:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	2278      	movs	r2, #120	@ 0x78
 801ac0c:	2100      	movs	r1, #0
 801ac0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ac10:	2303      	movs	r3, #3
 801ac12:	e05f      	b.n	801acd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	2204      	movs	r2, #4
 801ac1c:	4013      	ands	r3, r2
 801ac1e:	2b04      	cmp	r3, #4
 801ac20:	d146      	bne.n	801acb0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ac22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ac24:	2280      	movs	r2, #128	@ 0x80
 801ac26:	03d1      	lsls	r1, r2, #15
 801ac28:	6878      	ldr	r0, [r7, #4]
 801ac2a:	4a2c      	ldr	r2, [pc, #176]	@ (801acdc <UART_CheckIdleState+0x148>)
 801ac2c:	9200      	str	r2, [sp, #0]
 801ac2e:	2200      	movs	r2, #0
 801ac30:	f000 f858 	bl	801ace4 <UART_WaitOnFlagUntilTimeout>
 801ac34:	1e03      	subs	r3, r0, #0
 801ac36:	d03b      	beq.n	801acb0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac38:	f3ef 8310 	mrs	r3, PRIMASK
 801ac3c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ac3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ac40:	637b      	str	r3, [r7, #52]	@ 0x34
 801ac42:	2301      	movs	r3, #1
 801ac44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac46:	693b      	ldr	r3, [r7, #16]
 801ac48:	f383 8810 	msr	PRIMASK, r3
}
 801ac4c:	46c0      	nop			@ (mov r8, r8)
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	681a      	ldr	r2, [r3, #0]
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	4921      	ldr	r1, [pc, #132]	@ (801ace0 <UART_CheckIdleState+0x14c>)
 801ac5a:	400a      	ands	r2, r1
 801ac5c:	601a      	str	r2, [r3, #0]
 801ac5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac62:	697b      	ldr	r3, [r7, #20]
 801ac64:	f383 8810 	msr	PRIMASK, r3
}
 801ac68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac6a:	f3ef 8310 	mrs	r3, PRIMASK
 801ac6e:	61bb      	str	r3, [r7, #24]
  return(result);
 801ac70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ac72:	633b      	str	r3, [r7, #48]	@ 0x30
 801ac74:	2301      	movs	r3, #1
 801ac76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac78:	69fb      	ldr	r3, [r7, #28]
 801ac7a:	f383 8810 	msr	PRIMASK, r3
}
 801ac7e:	46c0      	nop			@ (mov r8, r8)
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	689a      	ldr	r2, [r3, #8]
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	2101      	movs	r1, #1
 801ac8c:	438a      	bics	r2, r1
 801ac8e:	609a      	str	r2, [r3, #8]
 801ac90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac94:	6a3b      	ldr	r3, [r7, #32]
 801ac96:	f383 8810 	msr	PRIMASK, r3
}
 801ac9a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	2280      	movs	r2, #128	@ 0x80
 801aca0:	2120      	movs	r1, #32
 801aca2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	2278      	movs	r2, #120	@ 0x78
 801aca8:	2100      	movs	r1, #0
 801acaa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801acac:	2303      	movs	r3, #3
 801acae:	e011      	b.n	801acd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	2220      	movs	r2, #32
 801acb4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	2280      	movs	r2, #128	@ 0x80
 801acba:	2120      	movs	r1, #32
 801acbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	2200      	movs	r2, #0
 801acc2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	2200      	movs	r2, #0
 801acc8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	2278      	movs	r2, #120	@ 0x78
 801acce:	2100      	movs	r1, #0
 801acd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801acd2:	2300      	movs	r3, #0
}
 801acd4:	0018      	movs	r0, r3
 801acd6:	46bd      	mov	sp, r7
 801acd8:	b010      	add	sp, #64	@ 0x40
 801acda:	bd80      	pop	{r7, pc}
 801acdc:	01ffffff 	.word	0x01ffffff
 801ace0:	fffffedf 	.word	0xfffffedf

0801ace4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b084      	sub	sp, #16
 801ace8:	af00      	add	r7, sp, #0
 801acea:	60f8      	str	r0, [r7, #12]
 801acec:	60b9      	str	r1, [r7, #8]
 801acee:	603b      	str	r3, [r7, #0]
 801acf0:	1dfb      	adds	r3, r7, #7
 801acf2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801acf4:	e04b      	b.n	801ad8e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801acf6:	69bb      	ldr	r3, [r7, #24]
 801acf8:	3301      	adds	r3, #1
 801acfa:	d048      	beq.n	801ad8e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801acfc:	f7f6 f9dc 	bl	80110b8 <HAL_GetTick>
 801ad00:	0002      	movs	r2, r0
 801ad02:	683b      	ldr	r3, [r7, #0]
 801ad04:	1ad3      	subs	r3, r2, r3
 801ad06:	69ba      	ldr	r2, [r7, #24]
 801ad08:	429a      	cmp	r2, r3
 801ad0a:	d302      	bcc.n	801ad12 <UART_WaitOnFlagUntilTimeout+0x2e>
 801ad0c:	69bb      	ldr	r3, [r7, #24]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d101      	bne.n	801ad16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801ad12:	2303      	movs	r3, #3
 801ad14:	e04b      	b.n	801adae <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	2204      	movs	r2, #4
 801ad1e:	4013      	ands	r3, r2
 801ad20:	d035      	beq.n	801ad8e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	69db      	ldr	r3, [r3, #28]
 801ad28:	2208      	movs	r2, #8
 801ad2a:	4013      	ands	r3, r2
 801ad2c:	2b08      	cmp	r3, #8
 801ad2e:	d111      	bne.n	801ad54 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	2208      	movs	r2, #8
 801ad36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	0018      	movs	r0, r3
 801ad3c:	f000 f9ca 	bl	801b0d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	2284      	movs	r2, #132	@ 0x84
 801ad44:	2108      	movs	r1, #8
 801ad46:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	2278      	movs	r2, #120	@ 0x78
 801ad4c:	2100      	movs	r1, #0
 801ad4e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801ad50:	2301      	movs	r3, #1
 801ad52:	e02c      	b.n	801adae <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	69da      	ldr	r2, [r3, #28]
 801ad5a:	2380      	movs	r3, #128	@ 0x80
 801ad5c:	011b      	lsls	r3, r3, #4
 801ad5e:	401a      	ands	r2, r3
 801ad60:	2380      	movs	r3, #128	@ 0x80
 801ad62:	011b      	lsls	r3, r3, #4
 801ad64:	429a      	cmp	r2, r3
 801ad66:	d112      	bne.n	801ad8e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	2280      	movs	r2, #128	@ 0x80
 801ad6e:	0112      	lsls	r2, r2, #4
 801ad70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	0018      	movs	r0, r3
 801ad76:	f000 f9ad 	bl	801b0d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	2284      	movs	r2, #132	@ 0x84
 801ad7e:	2120      	movs	r1, #32
 801ad80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	2278      	movs	r2, #120	@ 0x78
 801ad86:	2100      	movs	r1, #0
 801ad88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801ad8a:	2303      	movs	r3, #3
 801ad8c:	e00f      	b.n	801adae <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	69db      	ldr	r3, [r3, #28]
 801ad94:	68ba      	ldr	r2, [r7, #8]
 801ad96:	4013      	ands	r3, r2
 801ad98:	68ba      	ldr	r2, [r7, #8]
 801ad9a:	1ad3      	subs	r3, r2, r3
 801ad9c:	425a      	negs	r2, r3
 801ad9e:	4153      	adcs	r3, r2
 801ada0:	b2db      	uxtb	r3, r3
 801ada2:	001a      	movs	r2, r3
 801ada4:	1dfb      	adds	r3, r7, #7
 801ada6:	781b      	ldrb	r3, [r3, #0]
 801ada8:	429a      	cmp	r2, r3
 801adaa:	d0a4      	beq.n	801acf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801adac:	2300      	movs	r3, #0
}
 801adae:	0018      	movs	r0, r3
 801adb0:	46bd      	mov	sp, r7
 801adb2:	b004      	add	sp, #16
 801adb4:	bd80      	pop	{r7, pc}
	...

0801adb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b090      	sub	sp, #64	@ 0x40
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	60f8      	str	r0, [r7, #12]
 801adc0:	60b9      	str	r1, [r7, #8]
 801adc2:	1dbb      	adds	r3, r7, #6
 801adc4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	68ba      	ldr	r2, [r7, #8]
 801adca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	1dba      	adds	r2, r7, #6
 801add0:	2158      	movs	r1, #88	@ 0x58
 801add2:	8812      	ldrh	r2, [r2, #0]
 801add4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	1dba      	adds	r2, r7, #6
 801adda:	215a      	movs	r1, #90	@ 0x5a
 801addc:	8812      	ldrh	r2, [r2, #0]
 801adde:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	2200      	movs	r2, #0
 801ade4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	689a      	ldr	r2, [r3, #8]
 801adea:	2380      	movs	r3, #128	@ 0x80
 801adec:	015b      	lsls	r3, r3, #5
 801adee:	429a      	cmp	r2, r3
 801adf0:	d10d      	bne.n	801ae0e <UART_Start_Receive_IT+0x56>
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	691b      	ldr	r3, [r3, #16]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d104      	bne.n	801ae04 <UART_Start_Receive_IT+0x4c>
 801adfa:	68fb      	ldr	r3, [r7, #12]
 801adfc:	225c      	movs	r2, #92	@ 0x5c
 801adfe:	4950      	ldr	r1, [pc, #320]	@ (801af40 <UART_Start_Receive_IT+0x188>)
 801ae00:	5299      	strh	r1, [r3, r2]
 801ae02:	e02e      	b.n	801ae62 <UART_Start_Receive_IT+0xaa>
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	225c      	movs	r2, #92	@ 0x5c
 801ae08:	21ff      	movs	r1, #255	@ 0xff
 801ae0a:	5299      	strh	r1, [r3, r2]
 801ae0c:	e029      	b.n	801ae62 <UART_Start_Receive_IT+0xaa>
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	689b      	ldr	r3, [r3, #8]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d10d      	bne.n	801ae32 <UART_Start_Receive_IT+0x7a>
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	691b      	ldr	r3, [r3, #16]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d104      	bne.n	801ae28 <UART_Start_Receive_IT+0x70>
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	225c      	movs	r2, #92	@ 0x5c
 801ae22:	21ff      	movs	r1, #255	@ 0xff
 801ae24:	5299      	strh	r1, [r3, r2]
 801ae26:	e01c      	b.n	801ae62 <UART_Start_Receive_IT+0xaa>
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	225c      	movs	r2, #92	@ 0x5c
 801ae2c:	217f      	movs	r1, #127	@ 0x7f
 801ae2e:	5299      	strh	r1, [r3, r2]
 801ae30:	e017      	b.n	801ae62 <UART_Start_Receive_IT+0xaa>
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	689a      	ldr	r2, [r3, #8]
 801ae36:	2380      	movs	r3, #128	@ 0x80
 801ae38:	055b      	lsls	r3, r3, #21
 801ae3a:	429a      	cmp	r2, r3
 801ae3c:	d10d      	bne.n	801ae5a <UART_Start_Receive_IT+0xa2>
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	691b      	ldr	r3, [r3, #16]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d104      	bne.n	801ae50 <UART_Start_Receive_IT+0x98>
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	225c      	movs	r2, #92	@ 0x5c
 801ae4a:	217f      	movs	r1, #127	@ 0x7f
 801ae4c:	5299      	strh	r1, [r3, r2]
 801ae4e:	e008      	b.n	801ae62 <UART_Start_Receive_IT+0xaa>
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	225c      	movs	r2, #92	@ 0x5c
 801ae54:	213f      	movs	r1, #63	@ 0x3f
 801ae56:	5299      	strh	r1, [r3, r2]
 801ae58:	e003      	b.n	801ae62 <UART_Start_Receive_IT+0xaa>
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	225c      	movs	r2, #92	@ 0x5c
 801ae5e:	2100      	movs	r1, #0
 801ae60:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	2284      	movs	r2, #132	@ 0x84
 801ae66:	2100      	movs	r1, #0
 801ae68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	2280      	movs	r2, #128	@ 0x80
 801ae6e:	2122      	movs	r1, #34	@ 0x22
 801ae70:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae72:	f3ef 8310 	mrs	r3, PRIMASK
 801ae76:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ae78:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ae7c:	2301      	movs	r3, #1
 801ae7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae82:	f383 8810 	msr	PRIMASK, r3
}
 801ae86:	46c0      	nop			@ (mov r8, r8)
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	689a      	ldr	r2, [r3, #8]
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	2101      	movs	r1, #1
 801ae94:	430a      	orrs	r2, r1
 801ae96:	609a      	str	r2, [r3, #8]
 801ae98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae9a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae9e:	f383 8810 	msr	PRIMASK, r3
}
 801aea2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	689a      	ldr	r2, [r3, #8]
 801aea8:	2380      	movs	r3, #128	@ 0x80
 801aeaa:	015b      	lsls	r3, r3, #5
 801aeac:	429a      	cmp	r2, r3
 801aeae:	d107      	bne.n	801aec0 <UART_Start_Receive_IT+0x108>
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	691b      	ldr	r3, [r3, #16]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d103      	bne.n	801aec0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	4a22      	ldr	r2, [pc, #136]	@ (801af44 <UART_Start_Receive_IT+0x18c>)
 801aebc:	669a      	str	r2, [r3, #104]	@ 0x68
 801aebe:	e002      	b.n	801aec6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	4a21      	ldr	r2, [pc, #132]	@ (801af48 <UART_Start_Receive_IT+0x190>)
 801aec4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	691b      	ldr	r3, [r3, #16]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d019      	beq.n	801af02 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aece:	f3ef 8310 	mrs	r3, PRIMASK
 801aed2:	61fb      	str	r3, [r7, #28]
  return(result);
 801aed4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801aed6:	637b      	str	r3, [r7, #52]	@ 0x34
 801aed8:	2301      	movs	r3, #1
 801aeda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aedc:	6a3b      	ldr	r3, [r7, #32]
 801aede:	f383 8810 	msr	PRIMASK, r3
}
 801aee2:	46c0      	nop			@ (mov r8, r8)
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	681a      	ldr	r2, [r3, #0]
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	2190      	movs	r1, #144	@ 0x90
 801aef0:	0049      	lsls	r1, r1, #1
 801aef2:	430a      	orrs	r2, r1
 801aef4:	601a      	str	r2, [r3, #0]
 801aef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aef8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aefc:	f383 8810 	msr	PRIMASK, r3
}
 801af00:	e018      	b.n	801af34 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af02:	f3ef 8310 	mrs	r3, PRIMASK
 801af06:	613b      	str	r3, [r7, #16]
  return(result);
 801af08:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801af0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801af0c:	2301      	movs	r3, #1
 801af0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af10:	697b      	ldr	r3, [r7, #20]
 801af12:	f383 8810 	msr	PRIMASK, r3
}
 801af16:	46c0      	nop			@ (mov r8, r8)
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	681a      	ldr	r2, [r3, #0]
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	2120      	movs	r1, #32
 801af24:	430a      	orrs	r2, r1
 801af26:	601a      	str	r2, [r3, #0]
 801af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af2c:	69bb      	ldr	r3, [r7, #24]
 801af2e:	f383 8810 	msr	PRIMASK, r3
}
 801af32:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801af34:	2300      	movs	r3, #0
}
 801af36:	0018      	movs	r0, r3
 801af38:	46bd      	mov	sp, r7
 801af3a:	b010      	add	sp, #64	@ 0x40
 801af3c:	bd80      	pop	{r7, pc}
 801af3e:	46c0      	nop			@ (mov r8, r8)
 801af40:	000001ff 	.word	0x000001ff
 801af44:	0801b6b9 	.word	0x0801b6b9
 801af48:	0801b4ed 	.word	0x0801b4ed

0801af4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b090      	sub	sp, #64	@ 0x40
 801af50:	af00      	add	r7, sp, #0
 801af52:	60f8      	str	r0, [r7, #12]
 801af54:	60b9      	str	r1, [r7, #8]
 801af56:	1dbb      	adds	r3, r7, #6
 801af58:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	68ba      	ldr	r2, [r7, #8]
 801af5e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	1dba      	adds	r2, r7, #6
 801af64:	2158      	movs	r1, #88	@ 0x58
 801af66:	8812      	ldrh	r2, [r2, #0]
 801af68:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	2284      	movs	r2, #132	@ 0x84
 801af6e:	2100      	movs	r1, #0
 801af70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	2280      	movs	r2, #128	@ 0x80
 801af76:	2122      	movs	r1, #34	@ 0x22
 801af78:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d028      	beq.n	801afd4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801af86:	4a3e      	ldr	r2, [pc, #248]	@ (801b080 <UART_Start_Receive_DMA+0x134>)
 801af88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801af8e:	4a3d      	ldr	r2, [pc, #244]	@ (801b084 <UART_Start_Receive_DMA+0x138>)
 801af90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801af96:	4a3c      	ldr	r2, [pc, #240]	@ (801b088 <UART_Start_Receive_DMA+0x13c>)
 801af98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801af9e:	2200      	movs	r2, #0
 801afa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	3324      	adds	r3, #36	@ 0x24
 801afac:	0019      	movs	r1, r3
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801afb2:	001a      	movs	r2, r3
 801afb4:	1dbb      	adds	r3, r7, #6
 801afb6:	881b      	ldrh	r3, [r3, #0]
 801afb8:	f7f6 fdd0 	bl	8011b5c <HAL_DMA_Start_IT>
 801afbc:	1e03      	subs	r3, r0, #0
 801afbe:	d009      	beq.n	801afd4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	2284      	movs	r2, #132	@ 0x84
 801afc4:	2110      	movs	r1, #16
 801afc6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	2280      	movs	r2, #128	@ 0x80
 801afcc:	2120      	movs	r1, #32
 801afce:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801afd0:	2301      	movs	r3, #1
 801afd2:	e050      	b.n	801b076 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	691b      	ldr	r3, [r3, #16]
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d019      	beq.n	801b010 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afdc:	f3ef 8310 	mrs	r3, PRIMASK
 801afe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801afe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801afe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801afe6:	2301      	movs	r3, #1
 801afe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afec:	f383 8810 	msr	PRIMASK, r3
}
 801aff0:	46c0      	nop			@ (mov r8, r8)
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	681a      	ldr	r2, [r3, #0]
 801aff8:	68fb      	ldr	r3, [r7, #12]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	2180      	movs	r1, #128	@ 0x80
 801affe:	0049      	lsls	r1, r1, #1
 801b000:	430a      	orrs	r2, r1
 801b002:	601a      	str	r2, [r3, #0]
 801b004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b006:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b00a:	f383 8810 	msr	PRIMASK, r3
}
 801b00e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b010:	f3ef 8310 	mrs	r3, PRIMASK
 801b014:	613b      	str	r3, [r7, #16]
  return(result);
 801b016:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b018:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b01a:	2301      	movs	r3, #1
 801b01c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b01e:	697b      	ldr	r3, [r7, #20]
 801b020:	f383 8810 	msr	PRIMASK, r3
}
 801b024:	46c0      	nop			@ (mov r8, r8)
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	689a      	ldr	r2, [r3, #8]
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	2101      	movs	r1, #1
 801b032:	430a      	orrs	r2, r1
 801b034:	609a      	str	r2, [r3, #8]
 801b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b038:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b03a:	69bb      	ldr	r3, [r7, #24]
 801b03c:	f383 8810 	msr	PRIMASK, r3
}
 801b040:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b042:	f3ef 8310 	mrs	r3, PRIMASK
 801b046:	61fb      	str	r3, [r7, #28]
  return(result);
 801b048:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b04a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b04c:	2301      	movs	r3, #1
 801b04e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b050:	6a3b      	ldr	r3, [r7, #32]
 801b052:	f383 8810 	msr	PRIMASK, r3
}
 801b056:	46c0      	nop			@ (mov r8, r8)
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	689a      	ldr	r2, [r3, #8]
 801b05e:	68fb      	ldr	r3, [r7, #12]
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	2140      	movs	r1, #64	@ 0x40
 801b064:	430a      	orrs	r2, r1
 801b066:	609a      	str	r2, [r3, #8]
 801b068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b06a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b06e:	f383 8810 	msr	PRIMASK, r3
}
 801b072:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801b074:	2300      	movs	r3, #0
}
 801b076:	0018      	movs	r0, r3
 801b078:	46bd      	mov	sp, r7
 801b07a:	b010      	add	sp, #64	@ 0x40
 801b07c:	bd80      	pop	{r7, pc}
 801b07e:	46c0      	nop			@ (mov r8, r8)
 801b080:	0801b25d 	.word	0x0801b25d
 801b084:	0801b391 	.word	0x0801b391
 801b088:	0801b3d9 	.word	0x0801b3d9

0801b08c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801b08c:	b580      	push	{r7, lr}
 801b08e:	b086      	sub	sp, #24
 801b090:	af00      	add	r7, sp, #0
 801b092:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b094:	f3ef 8310 	mrs	r3, PRIMASK
 801b098:	60bb      	str	r3, [r7, #8]
  return(result);
 801b09a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801b09c:	617b      	str	r3, [r7, #20]
 801b09e:	2301      	movs	r3, #1
 801b0a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	f383 8810 	msr	PRIMASK, r3
}
 801b0a8:	46c0      	nop			@ (mov r8, r8)
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	681a      	ldr	r2, [r3, #0]
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	21c0      	movs	r1, #192	@ 0xc0
 801b0b6:	438a      	bics	r2, r1
 801b0b8:	601a      	str	r2, [r3, #0]
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0be:	693b      	ldr	r3, [r7, #16]
 801b0c0:	f383 8810 	msr	PRIMASK, r3
}
 801b0c4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	2220      	movs	r2, #32
 801b0ca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801b0cc:	46c0      	nop			@ (mov r8, r8)
 801b0ce:	46bd      	mov	sp, r7
 801b0d0:	b006      	add	sp, #24
 801b0d2:	bd80      	pop	{r7, pc}

0801b0d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b0d4:	b580      	push	{r7, lr}
 801b0d6:	b08e      	sub	sp, #56	@ 0x38
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0dc:	f3ef 8310 	mrs	r3, PRIMASK
 801b0e0:	617b      	str	r3, [r7, #20]
  return(result);
 801b0e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b0e4:	637b      	str	r3, [r7, #52]	@ 0x34
 801b0e6:	2301      	movs	r3, #1
 801b0e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0ea:	69bb      	ldr	r3, [r7, #24]
 801b0ec:	f383 8810 	msr	PRIMASK, r3
}
 801b0f0:	46c0      	nop			@ (mov r8, r8)
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	681a      	ldr	r2, [r3, #0]
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	4926      	ldr	r1, [pc, #152]	@ (801b198 <UART_EndRxTransfer+0xc4>)
 801b0fe:	400a      	ands	r2, r1
 801b100:	601a      	str	r2, [r3, #0]
 801b102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b104:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b106:	69fb      	ldr	r3, [r7, #28]
 801b108:	f383 8810 	msr	PRIMASK, r3
}
 801b10c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b10e:	f3ef 8310 	mrs	r3, PRIMASK
 801b112:	623b      	str	r3, [r7, #32]
  return(result);
 801b114:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b116:	633b      	str	r3, [r7, #48]	@ 0x30
 801b118:	2301      	movs	r3, #1
 801b11a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b11e:	f383 8810 	msr	PRIMASK, r3
}
 801b122:	46c0      	nop			@ (mov r8, r8)
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	689a      	ldr	r2, [r3, #8]
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	2101      	movs	r1, #1
 801b130:	438a      	bics	r2, r1
 801b132:	609a      	str	r2, [r3, #8]
 801b134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b136:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b13a:	f383 8810 	msr	PRIMASK, r3
}
 801b13e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b144:	2b01      	cmp	r3, #1
 801b146:	d118      	bne.n	801b17a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b148:	f3ef 8310 	mrs	r3, PRIMASK
 801b14c:	60bb      	str	r3, [r7, #8]
  return(result);
 801b14e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b152:	2301      	movs	r3, #1
 801b154:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	f383 8810 	msr	PRIMASK, r3
}
 801b15c:	46c0      	nop			@ (mov r8, r8)
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	681a      	ldr	r2, [r3, #0]
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	2110      	movs	r1, #16
 801b16a:	438a      	bics	r2, r1
 801b16c:	601a      	str	r2, [r3, #0]
 801b16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b170:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b172:	693b      	ldr	r3, [r7, #16]
 801b174:	f383 8810 	msr	PRIMASK, r3
}
 801b178:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	2280      	movs	r2, #128	@ 0x80
 801b17e:	2120      	movs	r1, #32
 801b180:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	2200      	movs	r2, #0
 801b186:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	2200      	movs	r2, #0
 801b18c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b18e:	46c0      	nop			@ (mov r8, r8)
 801b190:	46bd      	mov	sp, r7
 801b192:	b00e      	add	sp, #56	@ 0x38
 801b194:	bd80      	pop	{r7, pc}
 801b196:	46c0      	nop			@ (mov r8, r8)
 801b198:	fffffedf 	.word	0xfffffedf

0801b19c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b08c      	sub	sp, #48	@ 0x30
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	2220      	movs	r2, #32
 801b1b2:	4013      	ands	r3, r2
 801b1b4:	d135      	bne.n	801b222 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801b1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1b8:	2252      	movs	r2, #82	@ 0x52
 801b1ba:	2100      	movs	r1, #0
 801b1bc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1be:	f3ef 8310 	mrs	r3, PRIMASK
 801b1c2:	60fb      	str	r3, [r7, #12]
  return(result);
 801b1c4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801b1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b1c8:	2301      	movs	r3, #1
 801b1ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1cc:	693b      	ldr	r3, [r7, #16]
 801b1ce:	f383 8810 	msr	PRIMASK, r3
}
 801b1d2:	46c0      	nop			@ (mov r8, r8)
 801b1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	689a      	ldr	r2, [r3, #8]
 801b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	2180      	movs	r1, #128	@ 0x80
 801b1e0:	438a      	bics	r2, r1
 801b1e2:	609a      	str	r2, [r3, #8]
 801b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1e8:	697b      	ldr	r3, [r7, #20]
 801b1ea:	f383 8810 	msr	PRIMASK, r3
}
 801b1ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1f0:	f3ef 8310 	mrs	r3, PRIMASK
 801b1f4:	61bb      	str	r3, [r7, #24]
  return(result);
 801b1f6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b1f8:	627b      	str	r3, [r7, #36]	@ 0x24
 801b1fa:	2301      	movs	r3, #1
 801b1fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1fe:	69fb      	ldr	r3, [r7, #28]
 801b200:	f383 8810 	msr	PRIMASK, r3
}
 801b204:	46c0      	nop			@ (mov r8, r8)
 801b206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	681a      	ldr	r2, [r3, #0]
 801b20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	2140      	movs	r1, #64	@ 0x40
 801b212:	430a      	orrs	r2, r1
 801b214:	601a      	str	r2, [r3, #0]
 801b216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b218:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b21a:	6a3b      	ldr	r3, [r7, #32]
 801b21c:	f383 8810 	msr	PRIMASK, r3
}
 801b220:	e006      	b.n	801b230 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801b222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b224:	228c      	movs	r2, #140	@ 0x8c
 801b226:	589b      	ldr	r3, [r3, r2]
 801b228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b22a:	0010      	movs	r0, r2
 801b22c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b22e:	46c0      	nop			@ (mov r8, r8)
 801b230:	46c0      	nop			@ (mov r8, r8)
 801b232:	46bd      	mov	sp, r7
 801b234:	b00c      	add	sp, #48	@ 0x30
 801b236:	bd80      	pop	{r7, pc}

0801b238 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b084      	sub	sp, #16
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b244:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	2288      	movs	r2, #136	@ 0x88
 801b24a:	589b      	ldr	r3, [r3, r2]
 801b24c:	68fa      	ldr	r2, [r7, #12]
 801b24e:	0010      	movs	r0, r2
 801b250:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b252:	46c0      	nop			@ (mov r8, r8)
 801b254:	46bd      	mov	sp, r7
 801b256:	b004      	add	sp, #16
 801b258:	bd80      	pop	{r7, pc}
	...

0801b25c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b094      	sub	sp, #80	@ 0x50
 801b260:	af00      	add	r7, sp, #0
 801b262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b268:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	2220      	movs	r2, #32
 801b272:	4013      	ands	r3, r2
 801b274:	d16f      	bne.n	801b356 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801b276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b278:	225a      	movs	r2, #90	@ 0x5a
 801b27a:	2100      	movs	r1, #0
 801b27c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b27e:	f3ef 8310 	mrs	r3, PRIMASK
 801b282:	61bb      	str	r3, [r7, #24]
  return(result);
 801b284:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b286:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b288:	2301      	movs	r3, #1
 801b28a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b28c:	69fb      	ldr	r3, [r7, #28]
 801b28e:	f383 8810 	msr	PRIMASK, r3
}
 801b292:	46c0      	nop			@ (mov r8, r8)
 801b294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	681a      	ldr	r2, [r3, #0]
 801b29a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	493b      	ldr	r1, [pc, #236]	@ (801b38c <UART_DMAReceiveCplt+0x130>)
 801b2a0:	400a      	ands	r2, r1
 801b2a2:	601a      	str	r2, [r3, #0]
 801b2a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2a8:	6a3b      	ldr	r3, [r7, #32]
 801b2aa:	f383 8810 	msr	PRIMASK, r3
}
 801b2ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2b0:	f3ef 8310 	mrs	r3, PRIMASK
 801b2b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b2b8:	647b      	str	r3, [r7, #68]	@ 0x44
 801b2ba:	2301      	movs	r3, #1
 801b2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2c0:	f383 8810 	msr	PRIMASK, r3
}
 801b2c4:	46c0      	nop			@ (mov r8, r8)
 801b2c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	689a      	ldr	r2, [r3, #8]
 801b2cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	2101      	movs	r1, #1
 801b2d2:	438a      	bics	r2, r1
 801b2d4:	609a      	str	r2, [r3, #8]
 801b2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2dc:	f383 8810 	msr	PRIMASK, r3
}
 801b2e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2e2:	f3ef 8310 	mrs	r3, PRIMASK
 801b2e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b2ea:	643b      	str	r3, [r7, #64]	@ 0x40
 801b2ec:	2301      	movs	r3, #1
 801b2ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2f2:	f383 8810 	msr	PRIMASK, r3
}
 801b2f6:	46c0      	nop			@ (mov r8, r8)
 801b2f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	689a      	ldr	r2, [r3, #8]
 801b2fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	2140      	movs	r1, #64	@ 0x40
 801b304:	438a      	bics	r2, r1
 801b306:	609a      	str	r2, [r3, #8]
 801b308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b30a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b30e:	f383 8810 	msr	PRIMASK, r3
}
 801b312:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801b314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b316:	2280      	movs	r2, #128	@ 0x80
 801b318:	2120      	movs	r1, #32
 801b31a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b31e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b320:	2b01      	cmp	r3, #1
 801b322:	d118      	bne.n	801b356 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b324:	f3ef 8310 	mrs	r3, PRIMASK
 801b328:	60fb      	str	r3, [r7, #12]
  return(result);
 801b32a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b32e:	2301      	movs	r3, #1
 801b330:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b332:	693b      	ldr	r3, [r7, #16]
 801b334:	f383 8810 	msr	PRIMASK, r3
}
 801b338:	46c0      	nop			@ (mov r8, r8)
 801b33a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	681a      	ldr	r2, [r3, #0]
 801b340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	2110      	movs	r1, #16
 801b346:	438a      	bics	r2, r1
 801b348:	601a      	str	r2, [r3, #0]
 801b34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b34c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b34e:	697b      	ldr	r3, [r7, #20]
 801b350:	f383 8810 	msr	PRIMASK, r3
}
 801b354:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b358:	2200      	movs	r2, #0
 801b35a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b35c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b35e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b360:	2b01      	cmp	r3, #1
 801b362:	d109      	bne.n	801b378 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801b364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b366:	22ac      	movs	r2, #172	@ 0xac
 801b368:	589b      	ldr	r3, [r3, r2]
 801b36a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b36c:	2158      	movs	r1, #88	@ 0x58
 801b36e:	5a51      	ldrh	r1, [r2, r1]
 801b370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b372:	0010      	movs	r0, r2
 801b374:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b376:	e005      	b.n	801b384 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801b378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b37a:	2294      	movs	r2, #148	@ 0x94
 801b37c:	589b      	ldr	r3, [r3, r2]
 801b37e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b380:	0010      	movs	r0, r2
 801b382:	4798      	blx	r3
}
 801b384:	46c0      	nop			@ (mov r8, r8)
 801b386:	46bd      	mov	sp, r7
 801b388:	b014      	add	sp, #80	@ 0x50
 801b38a:	bd80      	pop	{r7, pc}
 801b38c:	fffffeff 	.word	0xfffffeff

0801b390 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b084      	sub	sp, #16
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b39c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	2201      	movs	r2, #1
 801b3a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b3a8:	2b01      	cmp	r3, #1
 801b3aa:	d10b      	bne.n	801b3c4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	22ac      	movs	r2, #172	@ 0xac
 801b3b0:	589b      	ldr	r3, [r3, r2]
 801b3b2:	68fa      	ldr	r2, [r7, #12]
 801b3b4:	2158      	movs	r1, #88	@ 0x58
 801b3b6:	5a52      	ldrh	r2, [r2, r1]
 801b3b8:	0852      	lsrs	r2, r2, #1
 801b3ba:	b291      	uxth	r1, r2
 801b3bc:	68fa      	ldr	r2, [r7, #12]
 801b3be:	0010      	movs	r0, r2
 801b3c0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b3c2:	e005      	b.n	801b3d0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	2290      	movs	r2, #144	@ 0x90
 801b3c8:	589b      	ldr	r3, [r3, r2]
 801b3ca:	68fa      	ldr	r2, [r7, #12]
 801b3cc:	0010      	movs	r0, r2
 801b3ce:	4798      	blx	r3
}
 801b3d0:	46c0      	nop			@ (mov r8, r8)
 801b3d2:	46bd      	mov	sp, r7
 801b3d4:	b004      	add	sp, #16
 801b3d6:	bd80      	pop	{r7, pc}

0801b3d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b086      	sub	sp, #24
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801b3e6:	697b      	ldr	r3, [r7, #20]
 801b3e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b3ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801b3ec:	697b      	ldr	r3, [r7, #20]
 801b3ee:	2280      	movs	r2, #128	@ 0x80
 801b3f0:	589b      	ldr	r3, [r3, r2]
 801b3f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801b3f4:	697b      	ldr	r3, [r7, #20]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	689b      	ldr	r3, [r3, #8]
 801b3fa:	2280      	movs	r2, #128	@ 0x80
 801b3fc:	4013      	ands	r3, r2
 801b3fe:	2b80      	cmp	r3, #128	@ 0x80
 801b400:	d10a      	bne.n	801b418 <UART_DMAError+0x40>
 801b402:	693b      	ldr	r3, [r7, #16]
 801b404:	2b21      	cmp	r3, #33	@ 0x21
 801b406:	d107      	bne.n	801b418 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801b408:	697b      	ldr	r3, [r7, #20]
 801b40a:	2252      	movs	r2, #82	@ 0x52
 801b40c:	2100      	movs	r1, #0
 801b40e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801b410:	697b      	ldr	r3, [r7, #20]
 801b412:	0018      	movs	r0, r3
 801b414:	f7ff fe3a 	bl	801b08c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801b418:	697b      	ldr	r3, [r7, #20]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	689b      	ldr	r3, [r3, #8]
 801b41e:	2240      	movs	r2, #64	@ 0x40
 801b420:	4013      	ands	r3, r2
 801b422:	2b40      	cmp	r3, #64	@ 0x40
 801b424:	d10a      	bne.n	801b43c <UART_DMAError+0x64>
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	2b22      	cmp	r3, #34	@ 0x22
 801b42a:	d107      	bne.n	801b43c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801b42c:	697b      	ldr	r3, [r7, #20]
 801b42e:	225a      	movs	r2, #90	@ 0x5a
 801b430:	2100      	movs	r1, #0
 801b432:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801b434:	697b      	ldr	r3, [r7, #20]
 801b436:	0018      	movs	r0, r3
 801b438:	f7ff fe4c 	bl	801b0d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801b43c:	697b      	ldr	r3, [r7, #20]
 801b43e:	2284      	movs	r2, #132	@ 0x84
 801b440:	589b      	ldr	r3, [r3, r2]
 801b442:	2210      	movs	r2, #16
 801b444:	431a      	orrs	r2, r3
 801b446:	697b      	ldr	r3, [r7, #20]
 801b448:	2184      	movs	r1, #132	@ 0x84
 801b44a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b44c:	697b      	ldr	r3, [r7, #20]
 801b44e:	2298      	movs	r2, #152	@ 0x98
 801b450:	589b      	ldr	r3, [r3, r2]
 801b452:	697a      	ldr	r2, [r7, #20]
 801b454:	0010      	movs	r0, r2
 801b456:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b458:	46c0      	nop			@ (mov r8, r8)
 801b45a:	46bd      	mov	sp, r7
 801b45c:	b006      	add	sp, #24
 801b45e:	bd80      	pop	{r7, pc}

0801b460 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b084      	sub	sp, #16
 801b464:	af00      	add	r7, sp, #0
 801b466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b46c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	225a      	movs	r2, #90	@ 0x5a
 801b472:	2100      	movs	r1, #0
 801b474:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	2252      	movs	r2, #82	@ 0x52
 801b47a:	2100      	movs	r1, #0
 801b47c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	2298      	movs	r2, #152	@ 0x98
 801b482:	589b      	ldr	r3, [r3, r2]
 801b484:	68fa      	ldr	r2, [r7, #12]
 801b486:	0010      	movs	r0, r2
 801b488:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b48a:	46c0      	nop			@ (mov r8, r8)
 801b48c:	46bd      	mov	sp, r7
 801b48e:	b004      	add	sp, #16
 801b490:	bd80      	pop	{r7, pc}

0801b492 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b492:	b580      	push	{r7, lr}
 801b494:	b086      	sub	sp, #24
 801b496:	af00      	add	r7, sp, #0
 801b498:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b49a:	f3ef 8310 	mrs	r3, PRIMASK
 801b49e:	60bb      	str	r3, [r7, #8]
  return(result);
 801b4a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b4a2:	617b      	str	r3, [r7, #20]
 801b4a4:	2301      	movs	r3, #1
 801b4a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	f383 8810 	msr	PRIMASK, r3
}
 801b4ae:	46c0      	nop			@ (mov r8, r8)
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	681a      	ldr	r2, [r3, #0]
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	2140      	movs	r1, #64	@ 0x40
 801b4bc:	438a      	bics	r2, r1
 801b4be:	601a      	str	r2, [r3, #0]
 801b4c0:	697b      	ldr	r3, [r7, #20]
 801b4c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4c4:	693b      	ldr	r3, [r7, #16]
 801b4c6:	f383 8810 	msr	PRIMASK, r3
}
 801b4ca:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	2220      	movs	r2, #32
 801b4d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	228c      	movs	r2, #140	@ 0x8c
 801b4dc:	589b      	ldr	r3, [r3, r2]
 801b4de:	687a      	ldr	r2, [r7, #4]
 801b4e0:	0010      	movs	r0, r2
 801b4e2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b4e4:	46c0      	nop			@ (mov r8, r8)
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	b006      	add	sp, #24
 801b4ea:	bd80      	pop	{r7, pc}

0801b4ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b094      	sub	sp, #80	@ 0x50
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801b4f4:	204e      	movs	r0, #78	@ 0x4e
 801b4f6:	183b      	adds	r3, r7, r0
 801b4f8:	687a      	ldr	r2, [r7, #4]
 801b4fa:	215c      	movs	r1, #92	@ 0x5c
 801b4fc:	5a52      	ldrh	r2, [r2, r1]
 801b4fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	2280      	movs	r2, #128	@ 0x80
 801b504:	589b      	ldr	r3, [r3, r2]
 801b506:	2b22      	cmp	r3, #34	@ 0x22
 801b508:	d000      	beq.n	801b50c <UART_RxISR_8BIT+0x20>
 801b50a:	e0c2      	b.n	801b692 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b512:	214c      	movs	r1, #76	@ 0x4c
 801b514:	187b      	adds	r3, r7, r1
 801b516:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b518:	187b      	adds	r3, r7, r1
 801b51a:	881b      	ldrh	r3, [r3, #0]
 801b51c:	b2da      	uxtb	r2, r3
 801b51e:	183b      	adds	r3, r7, r0
 801b520:	881b      	ldrh	r3, [r3, #0]
 801b522:	b2d9      	uxtb	r1, r3
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b528:	400a      	ands	r2, r1
 801b52a:	b2d2      	uxtb	r2, r2
 801b52c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b532:	1c5a      	adds	r2, r3, #1
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	225a      	movs	r2, #90	@ 0x5a
 801b53c:	5a9b      	ldrh	r3, [r3, r2]
 801b53e:	b29b      	uxth	r3, r3
 801b540:	3b01      	subs	r3, #1
 801b542:	b299      	uxth	r1, r3
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	225a      	movs	r2, #90	@ 0x5a
 801b548:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	225a      	movs	r2, #90	@ 0x5a
 801b54e:	5a9b      	ldrh	r3, [r3, r2]
 801b550:	b29b      	uxth	r3, r3
 801b552:	2b00      	cmp	r3, #0
 801b554:	d000      	beq.n	801b558 <UART_RxISR_8BIT+0x6c>
 801b556:	e0a4      	b.n	801b6a2 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b558:	f3ef 8310 	mrs	r3, PRIMASK
 801b55c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b560:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b562:	2301      	movs	r3, #1
 801b564:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b568:	f383 8810 	msr	PRIMASK, r3
}
 801b56c:	46c0      	nop			@ (mov r8, r8)
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	681a      	ldr	r2, [r3, #0]
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	494c      	ldr	r1, [pc, #304]	@ (801b6ac <UART_RxISR_8BIT+0x1c0>)
 801b57a:	400a      	ands	r2, r1
 801b57c:	601a      	str	r2, [r3, #0]
 801b57e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b584:	f383 8810 	msr	PRIMASK, r3
}
 801b588:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b58a:	f3ef 8310 	mrs	r3, PRIMASK
 801b58e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b592:	647b      	str	r3, [r7, #68]	@ 0x44
 801b594:	2301      	movs	r3, #1
 801b596:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b59a:	f383 8810 	msr	PRIMASK, r3
}
 801b59e:	46c0      	nop			@ (mov r8, r8)
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	689a      	ldr	r2, [r3, #8]
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	2101      	movs	r1, #1
 801b5ac:	438a      	bics	r2, r1
 801b5ae:	609a      	str	r2, [r3, #8]
 801b5b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b5b6:	f383 8810 	msr	PRIMASK, r3
}
 801b5ba:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	2280      	movs	r2, #128	@ 0x80
 801b5c0:	2120      	movs	r1, #32
 801b5c2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	2200      	movs	r2, #0
 801b5c8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	2200      	movs	r2, #0
 801b5ce:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	4a36      	ldr	r2, [pc, #216]	@ (801b6b0 <UART_RxISR_8BIT+0x1c4>)
 801b5d6:	4293      	cmp	r3, r2
 801b5d8:	d01f      	beq.n	801b61a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	685a      	ldr	r2, [r3, #4]
 801b5e0:	2380      	movs	r3, #128	@ 0x80
 801b5e2:	041b      	lsls	r3, r3, #16
 801b5e4:	4013      	ands	r3, r2
 801b5e6:	d018      	beq.n	801b61a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5e8:	f3ef 8310 	mrs	r3, PRIMASK
 801b5ec:	61bb      	str	r3, [r7, #24]
  return(result);
 801b5ee:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b5f0:	643b      	str	r3, [r7, #64]	@ 0x40
 801b5f2:	2301      	movs	r3, #1
 801b5f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5f6:	69fb      	ldr	r3, [r7, #28]
 801b5f8:	f383 8810 	msr	PRIMASK, r3
}
 801b5fc:	46c0      	nop			@ (mov r8, r8)
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	681a      	ldr	r2, [r3, #0]
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	492a      	ldr	r1, [pc, #168]	@ (801b6b4 <UART_RxISR_8BIT+0x1c8>)
 801b60a:	400a      	ands	r2, r1
 801b60c:	601a      	str	r2, [r3, #0]
 801b60e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b610:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b612:	6a3b      	ldr	r3, [r7, #32]
 801b614:	f383 8810 	msr	PRIMASK, r3
}
 801b618:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b61e:	2b01      	cmp	r3, #1
 801b620:	d130      	bne.n	801b684 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	2200      	movs	r2, #0
 801b626:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b628:	f3ef 8310 	mrs	r3, PRIMASK
 801b62c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b62e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b632:	2301      	movs	r3, #1
 801b634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b636:	693b      	ldr	r3, [r7, #16]
 801b638:	f383 8810 	msr	PRIMASK, r3
}
 801b63c:	46c0      	nop			@ (mov r8, r8)
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	681a      	ldr	r2, [r3, #0]
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	2110      	movs	r1, #16
 801b64a:	438a      	bics	r2, r1
 801b64c:	601a      	str	r2, [r3, #0]
 801b64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b652:	697b      	ldr	r3, [r7, #20]
 801b654:	f383 8810 	msr	PRIMASK, r3
}
 801b658:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	69db      	ldr	r3, [r3, #28]
 801b660:	2210      	movs	r2, #16
 801b662:	4013      	ands	r3, r2
 801b664:	2b10      	cmp	r3, #16
 801b666:	d103      	bne.n	801b670 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	2210      	movs	r2, #16
 801b66e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	22ac      	movs	r2, #172	@ 0xac
 801b674:	589b      	ldr	r3, [r3, r2]
 801b676:	687a      	ldr	r2, [r7, #4]
 801b678:	2158      	movs	r1, #88	@ 0x58
 801b67a:	5a51      	ldrh	r1, [r2, r1]
 801b67c:	687a      	ldr	r2, [r7, #4]
 801b67e:	0010      	movs	r0, r2
 801b680:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b682:	e00e      	b.n	801b6a2 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	2294      	movs	r2, #148	@ 0x94
 801b688:	589b      	ldr	r3, [r3, r2]
 801b68a:	687a      	ldr	r2, [r7, #4]
 801b68c:	0010      	movs	r0, r2
 801b68e:	4798      	blx	r3
}
 801b690:	e007      	b.n	801b6a2 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	699a      	ldr	r2, [r3, #24]
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	2108      	movs	r1, #8
 801b69e:	430a      	orrs	r2, r1
 801b6a0:	619a      	str	r2, [r3, #24]
}
 801b6a2:	46c0      	nop			@ (mov r8, r8)
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	b014      	add	sp, #80	@ 0x50
 801b6a8:	bd80      	pop	{r7, pc}
 801b6aa:	46c0      	nop			@ (mov r8, r8)
 801b6ac:	fffffedf 	.word	0xfffffedf
 801b6b0:	40004800 	.word	0x40004800
 801b6b4:	fbffffff 	.word	0xfbffffff

0801b6b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801b6b8:	b580      	push	{r7, lr}
 801b6ba:	b094      	sub	sp, #80	@ 0x50
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801b6c0:	204e      	movs	r0, #78	@ 0x4e
 801b6c2:	183b      	adds	r3, r7, r0
 801b6c4:	687a      	ldr	r2, [r7, #4]
 801b6c6:	215c      	movs	r1, #92	@ 0x5c
 801b6c8:	5a52      	ldrh	r2, [r2, r1]
 801b6ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	2280      	movs	r2, #128	@ 0x80
 801b6d0:	589b      	ldr	r3, [r3, r2]
 801b6d2:	2b22      	cmp	r3, #34	@ 0x22
 801b6d4:	d000      	beq.n	801b6d8 <UART_RxISR_16BIT+0x20>
 801b6d6:	e0c2      	b.n	801b85e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b6de:	214c      	movs	r1, #76	@ 0x4c
 801b6e0:	187b      	adds	r3, r7, r1
 801b6e2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b6e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801b6ea:	187b      	adds	r3, r7, r1
 801b6ec:	183a      	adds	r2, r7, r0
 801b6ee:	881b      	ldrh	r3, [r3, #0]
 801b6f0:	8812      	ldrh	r2, [r2, #0]
 801b6f2:	4013      	ands	r3, r2
 801b6f4:	b29a      	uxth	r2, r3
 801b6f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b6f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b6fe:	1c9a      	adds	r2, r3, #2
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	225a      	movs	r2, #90	@ 0x5a
 801b708:	5a9b      	ldrh	r3, [r3, r2]
 801b70a:	b29b      	uxth	r3, r3
 801b70c:	3b01      	subs	r3, #1
 801b70e:	b299      	uxth	r1, r3
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	225a      	movs	r2, #90	@ 0x5a
 801b714:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	225a      	movs	r2, #90	@ 0x5a
 801b71a:	5a9b      	ldrh	r3, [r3, r2]
 801b71c:	b29b      	uxth	r3, r3
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d000      	beq.n	801b724 <UART_RxISR_16BIT+0x6c>
 801b722:	e0a4      	b.n	801b86e <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b724:	f3ef 8310 	mrs	r3, PRIMASK
 801b728:	623b      	str	r3, [r7, #32]
  return(result);
 801b72a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b72c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b72e:	2301      	movs	r3, #1
 801b730:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b734:	f383 8810 	msr	PRIMASK, r3
}
 801b738:	46c0      	nop			@ (mov r8, r8)
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	681a      	ldr	r2, [r3, #0]
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	494c      	ldr	r1, [pc, #304]	@ (801b878 <UART_RxISR_16BIT+0x1c0>)
 801b746:	400a      	ands	r2, r1
 801b748:	601a      	str	r2, [r3, #0]
 801b74a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b74c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b750:	f383 8810 	msr	PRIMASK, r3
}
 801b754:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b756:	f3ef 8310 	mrs	r3, PRIMASK
 801b75a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801b75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b75e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b760:	2301      	movs	r3, #1
 801b762:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b766:	f383 8810 	msr	PRIMASK, r3
}
 801b76a:	46c0      	nop			@ (mov r8, r8)
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	689a      	ldr	r2, [r3, #8]
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	2101      	movs	r1, #1
 801b778:	438a      	bics	r2, r1
 801b77a:	609a      	str	r2, [r3, #8]
 801b77c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b77e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b782:	f383 8810 	msr	PRIMASK, r3
}
 801b786:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	2280      	movs	r2, #128	@ 0x80
 801b78c:	2120      	movs	r1, #32
 801b78e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	2200      	movs	r2, #0
 801b794:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	2200      	movs	r2, #0
 801b79a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	4a36      	ldr	r2, [pc, #216]	@ (801b87c <UART_RxISR_16BIT+0x1c4>)
 801b7a2:	4293      	cmp	r3, r2
 801b7a4:	d01f      	beq.n	801b7e6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	685a      	ldr	r2, [r3, #4]
 801b7ac:	2380      	movs	r3, #128	@ 0x80
 801b7ae:	041b      	lsls	r3, r3, #16
 801b7b0:	4013      	ands	r3, r2
 801b7b2:	d018      	beq.n	801b7e6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b7b4:	f3ef 8310 	mrs	r3, PRIMASK
 801b7b8:	617b      	str	r3, [r7, #20]
  return(result);
 801b7ba:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b7be:	2301      	movs	r3, #1
 801b7c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7c2:	69bb      	ldr	r3, [r7, #24]
 801b7c4:	f383 8810 	msr	PRIMASK, r3
}
 801b7c8:	46c0      	nop			@ (mov r8, r8)
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	681a      	ldr	r2, [r3, #0]
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	492a      	ldr	r1, [pc, #168]	@ (801b880 <UART_RxISR_16BIT+0x1c8>)
 801b7d6:	400a      	ands	r2, r1
 801b7d8:	601a      	str	r2, [r3, #0]
 801b7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7de:	69fb      	ldr	r3, [r7, #28]
 801b7e0:	f383 8810 	msr	PRIMASK, r3
}
 801b7e4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b7ea:	2b01      	cmp	r3, #1
 801b7ec:	d130      	bne.n	801b850 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	2200      	movs	r2, #0
 801b7f2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b7f4:	f3ef 8310 	mrs	r3, PRIMASK
 801b7f8:	60bb      	str	r3, [r7, #8]
  return(result);
 801b7fa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b7fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b7fe:	2301      	movs	r3, #1
 801b800:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	f383 8810 	msr	PRIMASK, r3
}
 801b808:	46c0      	nop			@ (mov r8, r8)
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	681a      	ldr	r2, [r3, #0]
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	2110      	movs	r1, #16
 801b816:	438a      	bics	r2, r1
 801b818:	601a      	str	r2, [r3, #0]
 801b81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b81c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	f383 8810 	msr	PRIMASK, r3
}
 801b824:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	681b      	ldr	r3, [r3, #0]
 801b82a:	69db      	ldr	r3, [r3, #28]
 801b82c:	2210      	movs	r2, #16
 801b82e:	4013      	ands	r3, r2
 801b830:	2b10      	cmp	r3, #16
 801b832:	d103      	bne.n	801b83c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	2210      	movs	r2, #16
 801b83a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	22ac      	movs	r2, #172	@ 0xac
 801b840:	589b      	ldr	r3, [r3, r2]
 801b842:	687a      	ldr	r2, [r7, #4]
 801b844:	2158      	movs	r1, #88	@ 0x58
 801b846:	5a51      	ldrh	r1, [r2, r1]
 801b848:	687a      	ldr	r2, [r7, #4]
 801b84a:	0010      	movs	r0, r2
 801b84c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b84e:	e00e      	b.n	801b86e <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	2294      	movs	r2, #148	@ 0x94
 801b854:	589b      	ldr	r3, [r3, r2]
 801b856:	687a      	ldr	r2, [r7, #4]
 801b858:	0010      	movs	r0, r2
 801b85a:	4798      	blx	r3
}
 801b85c:	e007      	b.n	801b86e <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	699a      	ldr	r2, [r3, #24]
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	2108      	movs	r1, #8
 801b86a:	430a      	orrs	r2, r1
 801b86c:	619a      	str	r2, [r3, #24]
}
 801b86e:	46c0      	nop			@ (mov r8, r8)
 801b870:	46bd      	mov	sp, r7
 801b872:	b014      	add	sp, #80	@ 0x50
 801b874:	bd80      	pop	{r7, pc}
 801b876:	46c0      	nop			@ (mov r8, r8)
 801b878:	fffffedf 	.word	0xfffffedf
 801b87c:	40004800 	.word	0x40004800
 801b880:	fbffffff 	.word	0xfbffffff

0801b884 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b884:	b580      	push	{r7, lr}
 801b886:	b082      	sub	sp, #8
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b88c:	46c0      	nop			@ (mov r8, r8)
 801b88e:	46bd      	mov	sp, r7
 801b890:	b002      	add	sp, #8
 801b892:	bd80      	pop	{r7, pc}

0801b894 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b084      	sub	sp, #16
 801b898:	af00      	add	r7, sp, #0
 801b89a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	2244      	movs	r2, #68	@ 0x44
 801b8a0:	2100      	movs	r1, #0
 801b8a2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801b8a4:	4b05      	ldr	r3, [pc, #20]	@ (801b8bc <USB_EnableGlobalInt+0x28>)
 801b8a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801b8a8:	68fb      	ldr	r3, [r7, #12]
 801b8aa:	b299      	uxth	r1, r3
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	2240      	movs	r2, #64	@ 0x40
 801b8b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b8b2:	2300      	movs	r3, #0
}
 801b8b4:	0018      	movs	r0, r3
 801b8b6:	46bd      	mov	sp, r7
 801b8b8:	b004      	add	sp, #16
 801b8ba:	bd80      	pop	{r7, pc}
 801b8bc:	0000bf80 	.word	0x0000bf80

0801b8c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b084      	sub	sp, #16
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801b8c8:	4b09      	ldr	r3, [pc, #36]	@ (801b8f0 <USB_DisableGlobalInt+0x30>)
 801b8ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	2240      	movs	r2, #64	@ 0x40
 801b8d0:	5a9b      	ldrh	r3, [r3, r2]
 801b8d2:	b29b      	uxth	r3, r3
 801b8d4:	68fa      	ldr	r2, [r7, #12]
 801b8d6:	b292      	uxth	r2, r2
 801b8d8:	43d2      	mvns	r2, r2
 801b8da:	b292      	uxth	r2, r2
 801b8dc:	4013      	ands	r3, r2
 801b8de:	b299      	uxth	r1, r3
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	2240      	movs	r2, #64	@ 0x40
 801b8e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b8e6:	2300      	movs	r3, #0
}
 801b8e8:	0018      	movs	r0, r3
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	b004      	add	sp, #16
 801b8ee:	bd80      	pop	{r7, pc}
 801b8f0:	0000bf80 	.word	0x0000bf80

0801b8f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801b8f4:	b084      	sub	sp, #16
 801b8f6:	b590      	push	{r4, r7, lr}
 801b8f8:	b083      	sub	sp, #12
 801b8fa:	af00      	add	r7, sp, #0
 801b8fc:	6078      	str	r0, [r7, #4]
 801b8fe:	2004      	movs	r0, #4
 801b900:	2410      	movs	r4, #16
 801b902:	1900      	adds	r0, r0, r4
 801b904:	2408      	movs	r4, #8
 801b906:	46a4      	mov	ip, r4
 801b908:	44bc      	add	ip, r7
 801b90a:	4460      	add	r0, ip
 801b90c:	6001      	str	r1, [r0, #0]
 801b90e:	6042      	str	r2, [r0, #4]
 801b910:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	2240      	movs	r2, #64	@ 0x40
 801b916:	2101      	movs	r1, #1
 801b918:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	2240      	movs	r2, #64	@ 0x40
 801b91e:	2100      	movs	r1, #0
 801b920:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	2244      	movs	r2, #68	@ 0x44
 801b926:	2100      	movs	r1, #0
 801b928:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	2250      	movs	r2, #80	@ 0x50
 801b92e:	2100      	movs	r1, #0
 801b930:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b932:	2300      	movs	r3, #0
}
 801b934:	0018      	movs	r0, r3
 801b936:	46bd      	mov	sp, r7
 801b938:	b003      	add	sp, #12
 801b93a:	bc90      	pop	{r4, r7}
 801b93c:	bc08      	pop	{r3}
 801b93e:	b004      	add	sp, #16
 801b940:	4718      	bx	r3
	...

0801b944 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b09c      	sub	sp, #112	@ 0x70
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
 801b94c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801b94e:	236f      	movs	r3, #111	@ 0x6f
 801b950:	18fb      	adds	r3, r7, r3
 801b952:	2200      	movs	r2, #0
 801b954:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801b956:	687a      	ldr	r2, [r7, #4]
 801b958:	683b      	ldr	r3, [r7, #0]
 801b95a:	781b      	ldrb	r3, [r3, #0]
 801b95c:	009b      	lsls	r3, r3, #2
 801b95e:	18d3      	adds	r3, r2, r3
 801b960:	881b      	ldrh	r3, [r3, #0]
 801b962:	b29a      	uxth	r2, r3
 801b964:	236c      	movs	r3, #108	@ 0x6c
 801b966:	18fb      	adds	r3, r7, r3
 801b968:	49a3      	ldr	r1, [pc, #652]	@ (801bbf8 <USB_ActivateEndpoint+0x2b4>)
 801b96a:	400a      	ands	r2, r1
 801b96c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801b96e:	683b      	ldr	r3, [r7, #0]
 801b970:	78db      	ldrb	r3, [r3, #3]
 801b972:	2b03      	cmp	r3, #3
 801b974:	d017      	beq.n	801b9a6 <USB_ActivateEndpoint+0x62>
 801b976:	dc28      	bgt.n	801b9ca <USB_ActivateEndpoint+0x86>
 801b978:	2b02      	cmp	r3, #2
 801b97a:	d00e      	beq.n	801b99a <USB_ActivateEndpoint+0x56>
 801b97c:	dc25      	bgt.n	801b9ca <USB_ActivateEndpoint+0x86>
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d002      	beq.n	801b988 <USB_ActivateEndpoint+0x44>
 801b982:	2b01      	cmp	r3, #1
 801b984:	d018      	beq.n	801b9b8 <USB_ActivateEndpoint+0x74>
 801b986:	e020      	b.n	801b9ca <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801b988:	226c      	movs	r2, #108	@ 0x6c
 801b98a:	18bb      	adds	r3, r7, r2
 801b98c:	18ba      	adds	r2, r7, r2
 801b98e:	8812      	ldrh	r2, [r2, #0]
 801b990:	2180      	movs	r1, #128	@ 0x80
 801b992:	0089      	lsls	r1, r1, #2
 801b994:	430a      	orrs	r2, r1
 801b996:	801a      	strh	r2, [r3, #0]
      break;
 801b998:	e01c      	b.n	801b9d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801b99a:	226c      	movs	r2, #108	@ 0x6c
 801b99c:	18bb      	adds	r3, r7, r2
 801b99e:	18ba      	adds	r2, r7, r2
 801b9a0:	8812      	ldrh	r2, [r2, #0]
 801b9a2:	801a      	strh	r2, [r3, #0]
      break;
 801b9a4:	e016      	b.n	801b9d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801b9a6:	226c      	movs	r2, #108	@ 0x6c
 801b9a8:	18bb      	adds	r3, r7, r2
 801b9aa:	18ba      	adds	r2, r7, r2
 801b9ac:	8812      	ldrh	r2, [r2, #0]
 801b9ae:	21c0      	movs	r1, #192	@ 0xc0
 801b9b0:	00c9      	lsls	r1, r1, #3
 801b9b2:	430a      	orrs	r2, r1
 801b9b4:	801a      	strh	r2, [r3, #0]
      break;
 801b9b6:	e00d      	b.n	801b9d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801b9b8:	226c      	movs	r2, #108	@ 0x6c
 801b9ba:	18bb      	adds	r3, r7, r2
 801b9bc:	18ba      	adds	r2, r7, r2
 801b9be:	8812      	ldrh	r2, [r2, #0]
 801b9c0:	2180      	movs	r1, #128	@ 0x80
 801b9c2:	00c9      	lsls	r1, r1, #3
 801b9c4:	430a      	orrs	r2, r1
 801b9c6:	801a      	strh	r2, [r3, #0]
      break;
 801b9c8:	e004      	b.n	801b9d4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801b9ca:	236f      	movs	r3, #111	@ 0x6f
 801b9cc:	18fb      	adds	r3, r7, r3
 801b9ce:	2201      	movs	r2, #1
 801b9d0:	701a      	strb	r2, [r3, #0]
      break;
 801b9d2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801b9d4:	687a      	ldr	r2, [r7, #4]
 801b9d6:	683b      	ldr	r3, [r7, #0]
 801b9d8:	781b      	ldrb	r3, [r3, #0]
 801b9da:	009b      	lsls	r3, r3, #2
 801b9dc:	18d3      	adds	r3, r2, r3
 801b9de:	226c      	movs	r2, #108	@ 0x6c
 801b9e0:	18ba      	adds	r2, r7, r2
 801b9e2:	8812      	ldrh	r2, [r2, #0]
 801b9e4:	4985      	ldr	r1, [pc, #532]	@ (801bbfc <USB_ActivateEndpoint+0x2b8>)
 801b9e6:	430a      	orrs	r2, r1
 801b9e8:	b292      	uxth	r2, r2
 801b9ea:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801b9ec:	687a      	ldr	r2, [r7, #4]
 801b9ee:	683b      	ldr	r3, [r7, #0]
 801b9f0:	781b      	ldrb	r3, [r3, #0]
 801b9f2:	009b      	lsls	r3, r3, #2
 801b9f4:	18d3      	adds	r3, r2, r3
 801b9f6:	881b      	ldrh	r3, [r3, #0]
 801b9f8:	b29b      	uxth	r3, r3
 801b9fa:	b21b      	sxth	r3, r3
 801b9fc:	4a80      	ldr	r2, [pc, #512]	@ (801bc00 <USB_ActivateEndpoint+0x2bc>)
 801b9fe:	4013      	ands	r3, r2
 801ba00:	b21a      	sxth	r2, r3
 801ba02:	683b      	ldr	r3, [r7, #0]
 801ba04:	781b      	ldrb	r3, [r3, #0]
 801ba06:	b21b      	sxth	r3, r3
 801ba08:	4313      	orrs	r3, r2
 801ba0a:	b21a      	sxth	r2, r3
 801ba0c:	2166      	movs	r1, #102	@ 0x66
 801ba0e:	187b      	adds	r3, r7, r1
 801ba10:	801a      	strh	r2, [r3, #0]
 801ba12:	687a      	ldr	r2, [r7, #4]
 801ba14:	683b      	ldr	r3, [r7, #0]
 801ba16:	781b      	ldrb	r3, [r3, #0]
 801ba18:	009b      	lsls	r3, r3, #2
 801ba1a:	18d3      	adds	r3, r2, r3
 801ba1c:	187a      	adds	r2, r7, r1
 801ba1e:	8812      	ldrh	r2, [r2, #0]
 801ba20:	4976      	ldr	r1, [pc, #472]	@ (801bbfc <USB_ActivateEndpoint+0x2b8>)
 801ba22:	430a      	orrs	r2, r1
 801ba24:	b292      	uxth	r2, r2
 801ba26:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801ba28:	683b      	ldr	r3, [r7, #0]
 801ba2a:	7b1b      	ldrb	r3, [r3, #12]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d000      	beq.n	801ba32 <USB_ActivateEndpoint+0xee>
 801ba30:	e178      	b.n	801bd24 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801ba32:	683b      	ldr	r3, [r7, #0]
 801ba34:	785b      	ldrb	r3, [r3, #1]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d100      	bne.n	801ba3c <USB_ActivateEndpoint+0xf8>
 801ba3a:	e07a      	b.n	801bb32 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	61bb      	str	r3, [r7, #24]
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	2250      	movs	r2, #80	@ 0x50
 801ba44:	5a9b      	ldrh	r3, [r3, r2]
 801ba46:	b29b      	uxth	r3, r3
 801ba48:	001a      	movs	r2, r3
 801ba4a:	69bb      	ldr	r3, [r7, #24]
 801ba4c:	189b      	adds	r3, r3, r2
 801ba4e:	61bb      	str	r3, [r7, #24]
 801ba50:	683b      	ldr	r3, [r7, #0]
 801ba52:	781b      	ldrb	r3, [r3, #0]
 801ba54:	00da      	lsls	r2, r3, #3
 801ba56:	69bb      	ldr	r3, [r7, #24]
 801ba58:	18d3      	adds	r3, r2, r3
 801ba5a:	2280      	movs	r2, #128	@ 0x80
 801ba5c:	00d2      	lsls	r2, r2, #3
 801ba5e:	4694      	mov	ip, r2
 801ba60:	4463      	add	r3, ip
 801ba62:	617b      	str	r3, [r7, #20]
 801ba64:	683b      	ldr	r3, [r7, #0]
 801ba66:	88db      	ldrh	r3, [r3, #6]
 801ba68:	085b      	lsrs	r3, r3, #1
 801ba6a:	b29b      	uxth	r3, r3
 801ba6c:	18db      	adds	r3, r3, r3
 801ba6e:	b29a      	uxth	r2, r3
 801ba70:	697b      	ldr	r3, [r7, #20]
 801ba72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ba74:	687a      	ldr	r2, [r7, #4]
 801ba76:	683b      	ldr	r3, [r7, #0]
 801ba78:	781b      	ldrb	r3, [r3, #0]
 801ba7a:	009b      	lsls	r3, r3, #2
 801ba7c:	18d2      	adds	r2, r2, r3
 801ba7e:	2112      	movs	r1, #18
 801ba80:	187b      	adds	r3, r7, r1
 801ba82:	8812      	ldrh	r2, [r2, #0]
 801ba84:	801a      	strh	r2, [r3, #0]
 801ba86:	187b      	adds	r3, r7, r1
 801ba88:	881b      	ldrh	r3, [r3, #0]
 801ba8a:	2240      	movs	r2, #64	@ 0x40
 801ba8c:	4013      	ands	r3, r2
 801ba8e:	d016      	beq.n	801babe <USB_ActivateEndpoint+0x17a>
 801ba90:	687a      	ldr	r2, [r7, #4]
 801ba92:	683b      	ldr	r3, [r7, #0]
 801ba94:	781b      	ldrb	r3, [r3, #0]
 801ba96:	009b      	lsls	r3, r3, #2
 801ba98:	18d3      	adds	r3, r2, r3
 801ba9a:	881b      	ldrh	r3, [r3, #0]
 801ba9c:	b29a      	uxth	r2, r3
 801ba9e:	2010      	movs	r0, #16
 801baa0:	183b      	adds	r3, r7, r0
 801baa2:	4957      	ldr	r1, [pc, #348]	@ (801bc00 <USB_ActivateEndpoint+0x2bc>)
 801baa4:	400a      	ands	r2, r1
 801baa6:	801a      	strh	r2, [r3, #0]
 801baa8:	687a      	ldr	r2, [r7, #4]
 801baaa:	683b      	ldr	r3, [r7, #0]
 801baac:	781b      	ldrb	r3, [r3, #0]
 801baae:	009b      	lsls	r3, r3, #2
 801bab0:	18d3      	adds	r3, r2, r3
 801bab2:	183a      	adds	r2, r7, r0
 801bab4:	8812      	ldrh	r2, [r2, #0]
 801bab6:	4953      	ldr	r1, [pc, #332]	@ (801bc04 <USB_ActivateEndpoint+0x2c0>)
 801bab8:	430a      	orrs	r2, r1
 801baba:	b292      	uxth	r2, r2
 801babc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801babe:	683b      	ldr	r3, [r7, #0]
 801bac0:	78db      	ldrb	r3, [r3, #3]
 801bac2:	2b01      	cmp	r3, #1
 801bac4:	d01d      	beq.n	801bb02 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801bac6:	687a      	ldr	r2, [r7, #4]
 801bac8:	683b      	ldr	r3, [r7, #0]
 801baca:	781b      	ldrb	r3, [r3, #0]
 801bacc:	009b      	lsls	r3, r3, #2
 801bace:	18d3      	adds	r3, r2, r3
 801bad0:	881b      	ldrh	r3, [r3, #0]
 801bad2:	b29a      	uxth	r2, r3
 801bad4:	200c      	movs	r0, #12
 801bad6:	183b      	adds	r3, r7, r0
 801bad8:	494b      	ldr	r1, [pc, #300]	@ (801bc08 <USB_ActivateEndpoint+0x2c4>)
 801bada:	400a      	ands	r2, r1
 801badc:	801a      	strh	r2, [r3, #0]
 801bade:	183b      	adds	r3, r7, r0
 801bae0:	183a      	adds	r2, r7, r0
 801bae2:	8812      	ldrh	r2, [r2, #0]
 801bae4:	2120      	movs	r1, #32
 801bae6:	404a      	eors	r2, r1
 801bae8:	801a      	strh	r2, [r3, #0]
 801baea:	687a      	ldr	r2, [r7, #4]
 801baec:	683b      	ldr	r3, [r7, #0]
 801baee:	781b      	ldrb	r3, [r3, #0]
 801baf0:	009b      	lsls	r3, r3, #2
 801baf2:	18d3      	adds	r3, r2, r3
 801baf4:	183a      	adds	r2, r7, r0
 801baf6:	8812      	ldrh	r2, [r2, #0]
 801baf8:	4940      	ldr	r1, [pc, #256]	@ (801bbfc <USB_ActivateEndpoint+0x2b8>)
 801bafa:	430a      	orrs	r2, r1
 801bafc:	b292      	uxth	r2, r2
 801bafe:	801a      	strh	r2, [r3, #0]
 801bb00:	e2b4      	b.n	801c06c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801bb02:	687a      	ldr	r2, [r7, #4]
 801bb04:	683b      	ldr	r3, [r7, #0]
 801bb06:	781b      	ldrb	r3, [r3, #0]
 801bb08:	009b      	lsls	r3, r3, #2
 801bb0a:	18d3      	adds	r3, r2, r3
 801bb0c:	881b      	ldrh	r3, [r3, #0]
 801bb0e:	b29a      	uxth	r2, r3
 801bb10:	200e      	movs	r0, #14
 801bb12:	183b      	adds	r3, r7, r0
 801bb14:	493c      	ldr	r1, [pc, #240]	@ (801bc08 <USB_ActivateEndpoint+0x2c4>)
 801bb16:	400a      	ands	r2, r1
 801bb18:	801a      	strh	r2, [r3, #0]
 801bb1a:	687a      	ldr	r2, [r7, #4]
 801bb1c:	683b      	ldr	r3, [r7, #0]
 801bb1e:	781b      	ldrb	r3, [r3, #0]
 801bb20:	009b      	lsls	r3, r3, #2
 801bb22:	18d3      	adds	r3, r2, r3
 801bb24:	183a      	adds	r2, r7, r0
 801bb26:	8812      	ldrh	r2, [r2, #0]
 801bb28:	4934      	ldr	r1, [pc, #208]	@ (801bbfc <USB_ActivateEndpoint+0x2b8>)
 801bb2a:	430a      	orrs	r2, r1
 801bb2c:	b292      	uxth	r2, r2
 801bb2e:	801a      	strh	r2, [r3, #0]
 801bb30:	e29c      	b.n	801c06c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	633b      	str	r3, [r7, #48]	@ 0x30
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	2250      	movs	r2, #80	@ 0x50
 801bb3a:	5a9b      	ldrh	r3, [r3, r2]
 801bb3c:	b29b      	uxth	r3, r3
 801bb3e:	001a      	movs	r2, r3
 801bb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb42:	189b      	adds	r3, r3, r2
 801bb44:	633b      	str	r3, [r7, #48]	@ 0x30
 801bb46:	683b      	ldr	r3, [r7, #0]
 801bb48:	781b      	ldrb	r3, [r3, #0]
 801bb4a:	00da      	lsls	r2, r3, #3
 801bb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb4e:	18d3      	adds	r3, r2, r3
 801bb50:	4a2e      	ldr	r2, [pc, #184]	@ (801bc0c <USB_ActivateEndpoint+0x2c8>)
 801bb52:	4694      	mov	ip, r2
 801bb54:	4463      	add	r3, ip
 801bb56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bb58:	683b      	ldr	r3, [r7, #0]
 801bb5a:	88db      	ldrh	r3, [r3, #6]
 801bb5c:	085b      	lsrs	r3, r3, #1
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	18db      	adds	r3, r3, r3
 801bb62:	b29a      	uxth	r2, r3
 801bb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb66:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2250      	movs	r2, #80	@ 0x50
 801bb70:	5a9b      	ldrh	r3, [r3, r2]
 801bb72:	b29b      	uxth	r3, r3
 801bb74:	001a      	movs	r2, r3
 801bb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb78:	189b      	adds	r3, r3, r2
 801bb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bb7c:	683b      	ldr	r3, [r7, #0]
 801bb7e:	781b      	ldrb	r3, [r3, #0]
 801bb80:	00da      	lsls	r2, r3, #3
 801bb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb84:	18d3      	adds	r3, r2, r3
 801bb86:	4a22      	ldr	r2, [pc, #136]	@ (801bc10 <USB_ActivateEndpoint+0x2cc>)
 801bb88:	4694      	mov	ip, r2
 801bb8a:	4463      	add	r3, ip
 801bb8c:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb90:	881b      	ldrh	r3, [r3, #0]
 801bb92:	b29b      	uxth	r3, r3
 801bb94:	059b      	lsls	r3, r3, #22
 801bb96:	0d9b      	lsrs	r3, r3, #22
 801bb98:	b29a      	uxth	r2, r3
 801bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb9c:	801a      	strh	r2, [r3, #0]
 801bb9e:	683b      	ldr	r3, [r7, #0]
 801bba0:	691b      	ldr	r3, [r3, #16]
 801bba2:	2b3e      	cmp	r3, #62	@ 0x3e
 801bba4:	d91a      	bls.n	801bbdc <USB_ActivateEndpoint+0x298>
 801bba6:	683b      	ldr	r3, [r7, #0]
 801bba8:	691b      	ldr	r3, [r3, #16]
 801bbaa:	095b      	lsrs	r3, r3, #5
 801bbac:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bbae:	683b      	ldr	r3, [r7, #0]
 801bbb0:	691b      	ldr	r3, [r3, #16]
 801bbb2:	221f      	movs	r2, #31
 801bbb4:	4013      	ands	r3, r2
 801bbb6:	d102      	bne.n	801bbbe <USB_ActivateEndpoint+0x27a>
 801bbb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bbba:	3b01      	subs	r3, #1
 801bbbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc0:	881b      	ldrh	r3, [r3, #0]
 801bbc2:	b29a      	uxth	r2, r3
 801bbc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	029b      	lsls	r3, r3, #10
 801bbca:	b29b      	uxth	r3, r3
 801bbcc:	4313      	orrs	r3, r2
 801bbce:	b29b      	uxth	r3, r3
 801bbd0:	4a10      	ldr	r2, [pc, #64]	@ (801bc14 <USB_ActivateEndpoint+0x2d0>)
 801bbd2:	4313      	orrs	r3, r2
 801bbd4:	b29a      	uxth	r2, r3
 801bbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbd8:	801a      	strh	r2, [r3, #0]
 801bbda:	e034      	b.n	801bc46 <USB_ActivateEndpoint+0x302>
 801bbdc:	683b      	ldr	r3, [r7, #0]
 801bbde:	691b      	ldr	r3, [r3, #16]
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d119      	bne.n	801bc18 <USB_ActivateEndpoint+0x2d4>
 801bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbe6:	881b      	ldrh	r3, [r3, #0]
 801bbe8:	b29b      	uxth	r3, r3
 801bbea:	4a0a      	ldr	r2, [pc, #40]	@ (801bc14 <USB_ActivateEndpoint+0x2d0>)
 801bbec:	4313      	orrs	r3, r2
 801bbee:	b29a      	uxth	r2, r3
 801bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbf2:	801a      	strh	r2, [r3, #0]
 801bbf4:	e027      	b.n	801bc46 <USB_ActivateEndpoint+0x302>
 801bbf6:	46c0      	nop			@ (mov r8, r8)
 801bbf8:	ffff898f 	.word	0xffff898f
 801bbfc:	ffff8080 	.word	0xffff8080
 801bc00:	ffff8f8f 	.word	0xffff8f8f
 801bc04:	ffff80c0 	.word	0xffff80c0
 801bc08:	ffff8fbf 	.word	0xffff8fbf
 801bc0c:	00000404 	.word	0x00000404
 801bc10:	00000406 	.word	0x00000406
 801bc14:	ffff8000 	.word	0xffff8000
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	691b      	ldr	r3, [r3, #16]
 801bc1c:	085b      	lsrs	r3, r3, #1
 801bc1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bc20:	683b      	ldr	r3, [r7, #0]
 801bc22:	691b      	ldr	r3, [r3, #16]
 801bc24:	2201      	movs	r2, #1
 801bc26:	4013      	ands	r3, r2
 801bc28:	d002      	beq.n	801bc30 <USB_ActivateEndpoint+0x2ec>
 801bc2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bc2c:	3301      	adds	r3, #1
 801bc2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc32:	881b      	ldrh	r3, [r3, #0]
 801bc34:	b29a      	uxth	r2, r3
 801bc36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bc38:	b29b      	uxth	r3, r3
 801bc3a:	029b      	lsls	r3, r3, #10
 801bc3c:	b29b      	uxth	r3, r3
 801bc3e:	4313      	orrs	r3, r2
 801bc40:	b29a      	uxth	r2, r3
 801bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bc46:	687a      	ldr	r2, [r7, #4]
 801bc48:	683b      	ldr	r3, [r7, #0]
 801bc4a:	781b      	ldrb	r3, [r3, #0]
 801bc4c:	009b      	lsls	r3, r3, #2
 801bc4e:	18d2      	adds	r2, r2, r3
 801bc50:	2122      	movs	r1, #34	@ 0x22
 801bc52:	187b      	adds	r3, r7, r1
 801bc54:	8812      	ldrh	r2, [r2, #0]
 801bc56:	801a      	strh	r2, [r3, #0]
 801bc58:	187b      	adds	r3, r7, r1
 801bc5a:	881a      	ldrh	r2, [r3, #0]
 801bc5c:	2380      	movs	r3, #128	@ 0x80
 801bc5e:	01db      	lsls	r3, r3, #7
 801bc60:	4013      	ands	r3, r2
 801bc62:	d016      	beq.n	801bc92 <USB_ActivateEndpoint+0x34e>
 801bc64:	687a      	ldr	r2, [r7, #4]
 801bc66:	683b      	ldr	r3, [r7, #0]
 801bc68:	781b      	ldrb	r3, [r3, #0]
 801bc6a:	009b      	lsls	r3, r3, #2
 801bc6c:	18d3      	adds	r3, r2, r3
 801bc6e:	881b      	ldrh	r3, [r3, #0]
 801bc70:	b29a      	uxth	r2, r3
 801bc72:	2020      	movs	r0, #32
 801bc74:	183b      	adds	r3, r7, r0
 801bc76:	49dd      	ldr	r1, [pc, #884]	@ (801bfec <USB_ActivateEndpoint+0x6a8>)
 801bc78:	400a      	ands	r2, r1
 801bc7a:	801a      	strh	r2, [r3, #0]
 801bc7c:	687a      	ldr	r2, [r7, #4]
 801bc7e:	683b      	ldr	r3, [r7, #0]
 801bc80:	781b      	ldrb	r3, [r3, #0]
 801bc82:	009b      	lsls	r3, r3, #2
 801bc84:	18d3      	adds	r3, r2, r3
 801bc86:	183a      	adds	r2, r7, r0
 801bc88:	8812      	ldrh	r2, [r2, #0]
 801bc8a:	49d9      	ldr	r1, [pc, #868]	@ (801bff0 <USB_ActivateEndpoint+0x6ac>)
 801bc8c:	430a      	orrs	r2, r1
 801bc8e:	b292      	uxth	r2, r2
 801bc90:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801bc92:	683b      	ldr	r3, [r7, #0]
 801bc94:	781b      	ldrb	r3, [r3, #0]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d125      	bne.n	801bce6 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bc9a:	687a      	ldr	r2, [r7, #4]
 801bc9c:	683b      	ldr	r3, [r7, #0]
 801bc9e:	781b      	ldrb	r3, [r3, #0]
 801bca0:	009b      	lsls	r3, r3, #2
 801bca2:	18d3      	adds	r3, r2, r3
 801bca4:	881b      	ldrh	r3, [r3, #0]
 801bca6:	b29a      	uxth	r2, r3
 801bca8:	201c      	movs	r0, #28
 801bcaa:	183b      	adds	r3, r7, r0
 801bcac:	49d1      	ldr	r1, [pc, #836]	@ (801bff4 <USB_ActivateEndpoint+0x6b0>)
 801bcae:	400a      	ands	r2, r1
 801bcb0:	801a      	strh	r2, [r3, #0]
 801bcb2:	183b      	adds	r3, r7, r0
 801bcb4:	183a      	adds	r2, r7, r0
 801bcb6:	8812      	ldrh	r2, [r2, #0]
 801bcb8:	2180      	movs	r1, #128	@ 0x80
 801bcba:	0149      	lsls	r1, r1, #5
 801bcbc:	404a      	eors	r2, r1
 801bcbe:	801a      	strh	r2, [r3, #0]
 801bcc0:	183b      	adds	r3, r7, r0
 801bcc2:	183a      	adds	r2, r7, r0
 801bcc4:	8812      	ldrh	r2, [r2, #0]
 801bcc6:	2180      	movs	r1, #128	@ 0x80
 801bcc8:	0189      	lsls	r1, r1, #6
 801bcca:	404a      	eors	r2, r1
 801bccc:	801a      	strh	r2, [r3, #0]
 801bcce:	687a      	ldr	r2, [r7, #4]
 801bcd0:	683b      	ldr	r3, [r7, #0]
 801bcd2:	781b      	ldrb	r3, [r3, #0]
 801bcd4:	009b      	lsls	r3, r3, #2
 801bcd6:	18d3      	adds	r3, r2, r3
 801bcd8:	183a      	adds	r2, r7, r0
 801bcda:	8812      	ldrh	r2, [r2, #0]
 801bcdc:	49c6      	ldr	r1, [pc, #792]	@ (801bff8 <USB_ActivateEndpoint+0x6b4>)
 801bcde:	430a      	orrs	r2, r1
 801bce0:	b292      	uxth	r2, r2
 801bce2:	801a      	strh	r2, [r3, #0]
 801bce4:	e1c2      	b.n	801c06c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801bce6:	687a      	ldr	r2, [r7, #4]
 801bce8:	683b      	ldr	r3, [r7, #0]
 801bcea:	781b      	ldrb	r3, [r3, #0]
 801bcec:	009b      	lsls	r3, r3, #2
 801bcee:	18d3      	adds	r3, r2, r3
 801bcf0:	881b      	ldrh	r3, [r3, #0]
 801bcf2:	b29a      	uxth	r2, r3
 801bcf4:	201e      	movs	r0, #30
 801bcf6:	183b      	adds	r3, r7, r0
 801bcf8:	49be      	ldr	r1, [pc, #760]	@ (801bff4 <USB_ActivateEndpoint+0x6b0>)
 801bcfa:	400a      	ands	r2, r1
 801bcfc:	801a      	strh	r2, [r3, #0]
 801bcfe:	183b      	adds	r3, r7, r0
 801bd00:	183a      	adds	r2, r7, r0
 801bd02:	8812      	ldrh	r2, [r2, #0]
 801bd04:	2180      	movs	r1, #128	@ 0x80
 801bd06:	0189      	lsls	r1, r1, #6
 801bd08:	404a      	eors	r2, r1
 801bd0a:	801a      	strh	r2, [r3, #0]
 801bd0c:	687a      	ldr	r2, [r7, #4]
 801bd0e:	683b      	ldr	r3, [r7, #0]
 801bd10:	781b      	ldrb	r3, [r3, #0]
 801bd12:	009b      	lsls	r3, r3, #2
 801bd14:	18d3      	adds	r3, r2, r3
 801bd16:	183a      	adds	r2, r7, r0
 801bd18:	8812      	ldrh	r2, [r2, #0]
 801bd1a:	49b7      	ldr	r1, [pc, #732]	@ (801bff8 <USB_ActivateEndpoint+0x6b4>)
 801bd1c:	430a      	orrs	r2, r1
 801bd1e:	b292      	uxth	r2, r2
 801bd20:	801a      	strh	r2, [r3, #0]
 801bd22:	e1a3      	b.n	801c06c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801bd24:	683b      	ldr	r3, [r7, #0]
 801bd26:	78db      	ldrb	r3, [r3, #3]
 801bd28:	2b02      	cmp	r3, #2
 801bd2a:	d117      	bne.n	801bd5c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801bd2c:	687a      	ldr	r2, [r7, #4]
 801bd2e:	683b      	ldr	r3, [r7, #0]
 801bd30:	781b      	ldrb	r3, [r3, #0]
 801bd32:	009b      	lsls	r3, r3, #2
 801bd34:	18d3      	adds	r3, r2, r3
 801bd36:	881b      	ldrh	r3, [r3, #0]
 801bd38:	b29a      	uxth	r2, r3
 801bd3a:	2062      	movs	r0, #98	@ 0x62
 801bd3c:	183b      	adds	r3, r7, r0
 801bd3e:	49ab      	ldr	r1, [pc, #684]	@ (801bfec <USB_ActivateEndpoint+0x6a8>)
 801bd40:	400a      	ands	r2, r1
 801bd42:	801a      	strh	r2, [r3, #0]
 801bd44:	687a      	ldr	r2, [r7, #4]
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	781b      	ldrb	r3, [r3, #0]
 801bd4a:	009b      	lsls	r3, r3, #2
 801bd4c:	18d3      	adds	r3, r2, r3
 801bd4e:	183a      	adds	r2, r7, r0
 801bd50:	8812      	ldrh	r2, [r2, #0]
 801bd52:	49aa      	ldr	r1, [pc, #680]	@ (801bffc <USB_ActivateEndpoint+0x6b8>)
 801bd54:	430a      	orrs	r2, r1
 801bd56:	b292      	uxth	r2, r2
 801bd58:	801a      	strh	r2, [r3, #0]
 801bd5a:	e016      	b.n	801bd8a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801bd5c:	687a      	ldr	r2, [r7, #4]
 801bd5e:	683b      	ldr	r3, [r7, #0]
 801bd60:	781b      	ldrb	r3, [r3, #0]
 801bd62:	009b      	lsls	r3, r3, #2
 801bd64:	18d3      	adds	r3, r2, r3
 801bd66:	881b      	ldrh	r3, [r3, #0]
 801bd68:	b29a      	uxth	r2, r3
 801bd6a:	2064      	movs	r0, #100	@ 0x64
 801bd6c:	183b      	adds	r3, r7, r0
 801bd6e:	49a4      	ldr	r1, [pc, #656]	@ (801c000 <USB_ActivateEndpoint+0x6bc>)
 801bd70:	400a      	ands	r2, r1
 801bd72:	801a      	strh	r2, [r3, #0]
 801bd74:	687a      	ldr	r2, [r7, #4]
 801bd76:	683b      	ldr	r3, [r7, #0]
 801bd78:	781b      	ldrb	r3, [r3, #0]
 801bd7a:	009b      	lsls	r3, r3, #2
 801bd7c:	18d3      	adds	r3, r2, r3
 801bd7e:	183a      	adds	r2, r7, r0
 801bd80:	8812      	ldrh	r2, [r2, #0]
 801bd82:	499d      	ldr	r1, [pc, #628]	@ (801bff8 <USB_ActivateEndpoint+0x6b4>)
 801bd84:	430a      	orrs	r2, r1
 801bd86:	b292      	uxth	r2, r2
 801bd88:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	2250      	movs	r2, #80	@ 0x50
 801bd92:	5a9b      	ldrh	r3, [r3, r2]
 801bd94:	b29b      	uxth	r3, r3
 801bd96:	001a      	movs	r2, r3
 801bd98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bd9a:	189b      	adds	r3, r3, r2
 801bd9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801bd9e:	683b      	ldr	r3, [r7, #0]
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	00da      	lsls	r2, r3, #3
 801bda4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bda6:	18d3      	adds	r3, r2, r3
 801bda8:	2280      	movs	r2, #128	@ 0x80
 801bdaa:	00d2      	lsls	r2, r2, #3
 801bdac:	4694      	mov	ip, r2
 801bdae:	4463      	add	r3, ip
 801bdb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bdb2:	683b      	ldr	r3, [r7, #0]
 801bdb4:	891b      	ldrh	r3, [r3, #8]
 801bdb6:	085b      	lsrs	r3, r3, #1
 801bdb8:	b29b      	uxth	r3, r3
 801bdba:	18db      	adds	r3, r3, r3
 801bdbc:	b29a      	uxth	r2, r3
 801bdbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bdc0:	801a      	strh	r2, [r3, #0]
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	657b      	str	r3, [r7, #84]	@ 0x54
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	2250      	movs	r2, #80	@ 0x50
 801bdca:	5a9b      	ldrh	r3, [r3, r2]
 801bdcc:	b29b      	uxth	r3, r3
 801bdce:	001a      	movs	r2, r3
 801bdd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bdd2:	189b      	adds	r3, r3, r2
 801bdd4:	657b      	str	r3, [r7, #84]	@ 0x54
 801bdd6:	683b      	ldr	r3, [r7, #0]
 801bdd8:	781b      	ldrb	r3, [r3, #0]
 801bdda:	00da      	lsls	r2, r3, #3
 801bddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bdde:	18d3      	adds	r3, r2, r3
 801bde0:	4a88      	ldr	r2, [pc, #544]	@ (801c004 <USB_ActivateEndpoint+0x6c0>)
 801bde2:	4694      	mov	ip, r2
 801bde4:	4463      	add	r3, ip
 801bde6:	653b      	str	r3, [r7, #80]	@ 0x50
 801bde8:	683b      	ldr	r3, [r7, #0]
 801bdea:	895b      	ldrh	r3, [r3, #10]
 801bdec:	085b      	lsrs	r3, r3, #1
 801bdee:	b29b      	uxth	r3, r3
 801bdf0:	18db      	adds	r3, r3, r3
 801bdf2:	b29a      	uxth	r2, r3
 801bdf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bdf6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801bdf8:	683b      	ldr	r3, [r7, #0]
 801bdfa:	785b      	ldrb	r3, [r3, #1]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d000      	beq.n	801be02 <USB_ActivateEndpoint+0x4be>
 801be00:	e087      	b.n	801bf12 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801be02:	687a      	ldr	r2, [r7, #4]
 801be04:	683b      	ldr	r3, [r7, #0]
 801be06:	781b      	ldrb	r3, [r3, #0]
 801be08:	009b      	lsls	r3, r3, #2
 801be0a:	18d2      	adds	r2, r2, r3
 801be0c:	2140      	movs	r1, #64	@ 0x40
 801be0e:	187b      	adds	r3, r7, r1
 801be10:	8812      	ldrh	r2, [r2, #0]
 801be12:	801a      	strh	r2, [r3, #0]
 801be14:	187b      	adds	r3, r7, r1
 801be16:	881a      	ldrh	r2, [r3, #0]
 801be18:	2380      	movs	r3, #128	@ 0x80
 801be1a:	01db      	lsls	r3, r3, #7
 801be1c:	4013      	ands	r3, r2
 801be1e:	d016      	beq.n	801be4e <USB_ActivateEndpoint+0x50a>
 801be20:	687a      	ldr	r2, [r7, #4]
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	781b      	ldrb	r3, [r3, #0]
 801be26:	009b      	lsls	r3, r3, #2
 801be28:	18d3      	adds	r3, r2, r3
 801be2a:	881b      	ldrh	r3, [r3, #0]
 801be2c:	b29a      	uxth	r2, r3
 801be2e:	203e      	movs	r0, #62	@ 0x3e
 801be30:	183b      	adds	r3, r7, r0
 801be32:	496e      	ldr	r1, [pc, #440]	@ (801bfec <USB_ActivateEndpoint+0x6a8>)
 801be34:	400a      	ands	r2, r1
 801be36:	801a      	strh	r2, [r3, #0]
 801be38:	687a      	ldr	r2, [r7, #4]
 801be3a:	683b      	ldr	r3, [r7, #0]
 801be3c:	781b      	ldrb	r3, [r3, #0]
 801be3e:	009b      	lsls	r3, r3, #2
 801be40:	18d3      	adds	r3, r2, r3
 801be42:	183a      	adds	r2, r7, r0
 801be44:	8812      	ldrh	r2, [r2, #0]
 801be46:	496a      	ldr	r1, [pc, #424]	@ (801bff0 <USB_ActivateEndpoint+0x6ac>)
 801be48:	430a      	orrs	r2, r1
 801be4a:	b292      	uxth	r2, r2
 801be4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801be4e:	687a      	ldr	r2, [r7, #4]
 801be50:	683b      	ldr	r3, [r7, #0]
 801be52:	781b      	ldrb	r3, [r3, #0]
 801be54:	009b      	lsls	r3, r3, #2
 801be56:	18d2      	adds	r2, r2, r3
 801be58:	213c      	movs	r1, #60	@ 0x3c
 801be5a:	187b      	adds	r3, r7, r1
 801be5c:	8812      	ldrh	r2, [r2, #0]
 801be5e:	801a      	strh	r2, [r3, #0]
 801be60:	187b      	adds	r3, r7, r1
 801be62:	881b      	ldrh	r3, [r3, #0]
 801be64:	2240      	movs	r2, #64	@ 0x40
 801be66:	4013      	ands	r3, r2
 801be68:	d016      	beq.n	801be98 <USB_ActivateEndpoint+0x554>
 801be6a:	687a      	ldr	r2, [r7, #4]
 801be6c:	683b      	ldr	r3, [r7, #0]
 801be6e:	781b      	ldrb	r3, [r3, #0]
 801be70:	009b      	lsls	r3, r3, #2
 801be72:	18d3      	adds	r3, r2, r3
 801be74:	881b      	ldrh	r3, [r3, #0]
 801be76:	b29a      	uxth	r2, r3
 801be78:	203a      	movs	r0, #58	@ 0x3a
 801be7a:	183b      	adds	r3, r7, r0
 801be7c:	495b      	ldr	r1, [pc, #364]	@ (801bfec <USB_ActivateEndpoint+0x6a8>)
 801be7e:	400a      	ands	r2, r1
 801be80:	801a      	strh	r2, [r3, #0]
 801be82:	687a      	ldr	r2, [r7, #4]
 801be84:	683b      	ldr	r3, [r7, #0]
 801be86:	781b      	ldrb	r3, [r3, #0]
 801be88:	009b      	lsls	r3, r3, #2
 801be8a:	18d3      	adds	r3, r2, r3
 801be8c:	183a      	adds	r2, r7, r0
 801be8e:	8812      	ldrh	r2, [r2, #0]
 801be90:	495d      	ldr	r1, [pc, #372]	@ (801c008 <USB_ActivateEndpoint+0x6c4>)
 801be92:	430a      	orrs	r2, r1
 801be94:	b292      	uxth	r2, r2
 801be96:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801be98:	687a      	ldr	r2, [r7, #4]
 801be9a:	683b      	ldr	r3, [r7, #0]
 801be9c:	781b      	ldrb	r3, [r3, #0]
 801be9e:	009b      	lsls	r3, r3, #2
 801bea0:	18d3      	adds	r3, r2, r3
 801bea2:	881b      	ldrh	r3, [r3, #0]
 801bea4:	b29a      	uxth	r2, r3
 801bea6:	2038      	movs	r0, #56	@ 0x38
 801bea8:	183b      	adds	r3, r7, r0
 801beaa:	4952      	ldr	r1, [pc, #328]	@ (801bff4 <USB_ActivateEndpoint+0x6b0>)
 801beac:	400a      	ands	r2, r1
 801beae:	801a      	strh	r2, [r3, #0]
 801beb0:	183b      	adds	r3, r7, r0
 801beb2:	183a      	adds	r2, r7, r0
 801beb4:	8812      	ldrh	r2, [r2, #0]
 801beb6:	2180      	movs	r1, #128	@ 0x80
 801beb8:	0149      	lsls	r1, r1, #5
 801beba:	404a      	eors	r2, r1
 801bebc:	801a      	strh	r2, [r3, #0]
 801bebe:	183b      	adds	r3, r7, r0
 801bec0:	183a      	adds	r2, r7, r0
 801bec2:	8812      	ldrh	r2, [r2, #0]
 801bec4:	2180      	movs	r1, #128	@ 0x80
 801bec6:	0189      	lsls	r1, r1, #6
 801bec8:	404a      	eors	r2, r1
 801beca:	801a      	strh	r2, [r3, #0]
 801becc:	687a      	ldr	r2, [r7, #4]
 801bece:	683b      	ldr	r3, [r7, #0]
 801bed0:	781b      	ldrb	r3, [r3, #0]
 801bed2:	009b      	lsls	r3, r3, #2
 801bed4:	18d3      	adds	r3, r2, r3
 801bed6:	183a      	adds	r2, r7, r0
 801bed8:	8812      	ldrh	r2, [r2, #0]
 801beda:	4947      	ldr	r1, [pc, #284]	@ (801bff8 <USB_ActivateEndpoint+0x6b4>)
 801bedc:	430a      	orrs	r2, r1
 801bede:	b292      	uxth	r2, r2
 801bee0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801bee2:	687a      	ldr	r2, [r7, #4]
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	781b      	ldrb	r3, [r3, #0]
 801bee8:	009b      	lsls	r3, r3, #2
 801beea:	18d3      	adds	r3, r2, r3
 801beec:	881b      	ldrh	r3, [r3, #0]
 801beee:	b29a      	uxth	r2, r3
 801bef0:	2036      	movs	r0, #54	@ 0x36
 801bef2:	183b      	adds	r3, r7, r0
 801bef4:	4945      	ldr	r1, [pc, #276]	@ (801c00c <USB_ActivateEndpoint+0x6c8>)
 801bef6:	400a      	ands	r2, r1
 801bef8:	801a      	strh	r2, [r3, #0]
 801befa:	687a      	ldr	r2, [r7, #4]
 801befc:	683b      	ldr	r3, [r7, #0]
 801befe:	781b      	ldrb	r3, [r3, #0]
 801bf00:	009b      	lsls	r3, r3, #2
 801bf02:	18d3      	adds	r3, r2, r3
 801bf04:	183a      	adds	r2, r7, r0
 801bf06:	8812      	ldrh	r2, [r2, #0]
 801bf08:	493b      	ldr	r1, [pc, #236]	@ (801bff8 <USB_ActivateEndpoint+0x6b4>)
 801bf0a:	430a      	orrs	r2, r1
 801bf0c:	b292      	uxth	r2, r2
 801bf0e:	801a      	strh	r2, [r3, #0]
 801bf10:	e0ac      	b.n	801c06c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bf12:	687a      	ldr	r2, [r7, #4]
 801bf14:	683b      	ldr	r3, [r7, #0]
 801bf16:	781b      	ldrb	r3, [r3, #0]
 801bf18:	009b      	lsls	r3, r3, #2
 801bf1a:	18d2      	adds	r2, r2, r3
 801bf1c:	214e      	movs	r1, #78	@ 0x4e
 801bf1e:	187b      	adds	r3, r7, r1
 801bf20:	8812      	ldrh	r2, [r2, #0]
 801bf22:	801a      	strh	r2, [r3, #0]
 801bf24:	187b      	adds	r3, r7, r1
 801bf26:	881a      	ldrh	r2, [r3, #0]
 801bf28:	2380      	movs	r3, #128	@ 0x80
 801bf2a:	01db      	lsls	r3, r3, #7
 801bf2c:	4013      	ands	r3, r2
 801bf2e:	d016      	beq.n	801bf5e <USB_ActivateEndpoint+0x61a>
 801bf30:	687a      	ldr	r2, [r7, #4]
 801bf32:	683b      	ldr	r3, [r7, #0]
 801bf34:	781b      	ldrb	r3, [r3, #0]
 801bf36:	009b      	lsls	r3, r3, #2
 801bf38:	18d3      	adds	r3, r2, r3
 801bf3a:	881b      	ldrh	r3, [r3, #0]
 801bf3c:	b29a      	uxth	r2, r3
 801bf3e:	204c      	movs	r0, #76	@ 0x4c
 801bf40:	183b      	adds	r3, r7, r0
 801bf42:	492a      	ldr	r1, [pc, #168]	@ (801bfec <USB_ActivateEndpoint+0x6a8>)
 801bf44:	400a      	ands	r2, r1
 801bf46:	801a      	strh	r2, [r3, #0]
 801bf48:	687a      	ldr	r2, [r7, #4]
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	781b      	ldrb	r3, [r3, #0]
 801bf4e:	009b      	lsls	r3, r3, #2
 801bf50:	18d3      	adds	r3, r2, r3
 801bf52:	183a      	adds	r2, r7, r0
 801bf54:	8812      	ldrh	r2, [r2, #0]
 801bf56:	4926      	ldr	r1, [pc, #152]	@ (801bff0 <USB_ActivateEndpoint+0x6ac>)
 801bf58:	430a      	orrs	r2, r1
 801bf5a:	b292      	uxth	r2, r2
 801bf5c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bf5e:	687a      	ldr	r2, [r7, #4]
 801bf60:	683b      	ldr	r3, [r7, #0]
 801bf62:	781b      	ldrb	r3, [r3, #0]
 801bf64:	009b      	lsls	r3, r3, #2
 801bf66:	18d2      	adds	r2, r2, r3
 801bf68:	214a      	movs	r1, #74	@ 0x4a
 801bf6a:	187b      	adds	r3, r7, r1
 801bf6c:	8812      	ldrh	r2, [r2, #0]
 801bf6e:	801a      	strh	r2, [r3, #0]
 801bf70:	187b      	adds	r3, r7, r1
 801bf72:	881b      	ldrh	r3, [r3, #0]
 801bf74:	2240      	movs	r2, #64	@ 0x40
 801bf76:	4013      	ands	r3, r2
 801bf78:	d016      	beq.n	801bfa8 <USB_ActivateEndpoint+0x664>
 801bf7a:	687a      	ldr	r2, [r7, #4]
 801bf7c:	683b      	ldr	r3, [r7, #0]
 801bf7e:	781b      	ldrb	r3, [r3, #0]
 801bf80:	009b      	lsls	r3, r3, #2
 801bf82:	18d3      	adds	r3, r2, r3
 801bf84:	881b      	ldrh	r3, [r3, #0]
 801bf86:	b29a      	uxth	r2, r3
 801bf88:	2048      	movs	r0, #72	@ 0x48
 801bf8a:	183b      	adds	r3, r7, r0
 801bf8c:	4917      	ldr	r1, [pc, #92]	@ (801bfec <USB_ActivateEndpoint+0x6a8>)
 801bf8e:	400a      	ands	r2, r1
 801bf90:	801a      	strh	r2, [r3, #0]
 801bf92:	687a      	ldr	r2, [r7, #4]
 801bf94:	683b      	ldr	r3, [r7, #0]
 801bf96:	781b      	ldrb	r3, [r3, #0]
 801bf98:	009b      	lsls	r3, r3, #2
 801bf9a:	18d3      	adds	r3, r2, r3
 801bf9c:	183a      	adds	r2, r7, r0
 801bf9e:	8812      	ldrh	r2, [r2, #0]
 801bfa0:	4919      	ldr	r1, [pc, #100]	@ (801c008 <USB_ActivateEndpoint+0x6c4>)
 801bfa2:	430a      	orrs	r2, r1
 801bfa4:	b292      	uxth	r2, r2
 801bfa6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801bfa8:	683b      	ldr	r3, [r7, #0]
 801bfaa:	78db      	ldrb	r3, [r3, #3]
 801bfac:	2b01      	cmp	r3, #1
 801bfae:	d02f      	beq.n	801c010 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801bfb0:	687a      	ldr	r2, [r7, #4]
 801bfb2:	683b      	ldr	r3, [r7, #0]
 801bfb4:	781b      	ldrb	r3, [r3, #0]
 801bfb6:	009b      	lsls	r3, r3, #2
 801bfb8:	18d3      	adds	r3, r2, r3
 801bfba:	881b      	ldrh	r3, [r3, #0]
 801bfbc:	b29a      	uxth	r2, r3
 801bfbe:	2044      	movs	r0, #68	@ 0x44
 801bfc0:	183b      	adds	r3, r7, r0
 801bfc2:	4912      	ldr	r1, [pc, #72]	@ (801c00c <USB_ActivateEndpoint+0x6c8>)
 801bfc4:	400a      	ands	r2, r1
 801bfc6:	801a      	strh	r2, [r3, #0]
 801bfc8:	183b      	adds	r3, r7, r0
 801bfca:	183a      	adds	r2, r7, r0
 801bfcc:	8812      	ldrh	r2, [r2, #0]
 801bfce:	2120      	movs	r1, #32
 801bfd0:	404a      	eors	r2, r1
 801bfd2:	801a      	strh	r2, [r3, #0]
 801bfd4:	687a      	ldr	r2, [r7, #4]
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	781b      	ldrb	r3, [r3, #0]
 801bfda:	009b      	lsls	r3, r3, #2
 801bfdc:	18d3      	adds	r3, r2, r3
 801bfde:	183a      	adds	r2, r7, r0
 801bfe0:	8812      	ldrh	r2, [r2, #0]
 801bfe2:	4905      	ldr	r1, [pc, #20]	@ (801bff8 <USB_ActivateEndpoint+0x6b4>)
 801bfe4:	430a      	orrs	r2, r1
 801bfe6:	b292      	uxth	r2, r2
 801bfe8:	801a      	strh	r2, [r3, #0]
 801bfea:	e028      	b.n	801c03e <USB_ActivateEndpoint+0x6fa>
 801bfec:	ffff8f8f 	.word	0xffff8f8f
 801bff0:	ffffc080 	.word	0xffffc080
 801bff4:	ffffbf8f 	.word	0xffffbf8f
 801bff8:	ffff8080 	.word	0xffff8080
 801bffc:	ffff8180 	.word	0xffff8180
 801c000:	ffff8e8f 	.word	0xffff8e8f
 801c004:	00000404 	.word	0x00000404
 801c008:	ffff80c0 	.word	0xffff80c0
 801c00c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c010:	687a      	ldr	r2, [r7, #4]
 801c012:	683b      	ldr	r3, [r7, #0]
 801c014:	781b      	ldrb	r3, [r3, #0]
 801c016:	009b      	lsls	r3, r3, #2
 801c018:	18d3      	adds	r3, r2, r3
 801c01a:	881b      	ldrh	r3, [r3, #0]
 801c01c:	b29a      	uxth	r2, r3
 801c01e:	2046      	movs	r0, #70	@ 0x46
 801c020:	183b      	adds	r3, r7, r0
 801c022:	4916      	ldr	r1, [pc, #88]	@ (801c07c <USB_ActivateEndpoint+0x738>)
 801c024:	400a      	ands	r2, r1
 801c026:	801a      	strh	r2, [r3, #0]
 801c028:	687a      	ldr	r2, [r7, #4]
 801c02a:	683b      	ldr	r3, [r7, #0]
 801c02c:	781b      	ldrb	r3, [r3, #0]
 801c02e:	009b      	lsls	r3, r3, #2
 801c030:	18d3      	adds	r3, r2, r3
 801c032:	183a      	adds	r2, r7, r0
 801c034:	8812      	ldrh	r2, [r2, #0]
 801c036:	4912      	ldr	r1, [pc, #72]	@ (801c080 <USB_ActivateEndpoint+0x73c>)
 801c038:	430a      	orrs	r2, r1
 801c03a:	b292      	uxth	r2, r2
 801c03c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c03e:	687a      	ldr	r2, [r7, #4]
 801c040:	683b      	ldr	r3, [r7, #0]
 801c042:	781b      	ldrb	r3, [r3, #0]
 801c044:	009b      	lsls	r3, r3, #2
 801c046:	18d3      	adds	r3, r2, r3
 801c048:	881b      	ldrh	r3, [r3, #0]
 801c04a:	b29a      	uxth	r2, r3
 801c04c:	2042      	movs	r0, #66	@ 0x42
 801c04e:	183b      	adds	r3, r7, r0
 801c050:	490c      	ldr	r1, [pc, #48]	@ (801c084 <USB_ActivateEndpoint+0x740>)
 801c052:	400a      	ands	r2, r1
 801c054:	801a      	strh	r2, [r3, #0]
 801c056:	687a      	ldr	r2, [r7, #4]
 801c058:	683b      	ldr	r3, [r7, #0]
 801c05a:	781b      	ldrb	r3, [r3, #0]
 801c05c:	009b      	lsls	r3, r3, #2
 801c05e:	18d3      	adds	r3, r2, r3
 801c060:	183a      	adds	r2, r7, r0
 801c062:	8812      	ldrh	r2, [r2, #0]
 801c064:	4906      	ldr	r1, [pc, #24]	@ (801c080 <USB_ActivateEndpoint+0x73c>)
 801c066:	430a      	orrs	r2, r1
 801c068:	b292      	uxth	r2, r2
 801c06a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801c06c:	236f      	movs	r3, #111	@ 0x6f
 801c06e:	18fb      	adds	r3, r7, r3
 801c070:	781b      	ldrb	r3, [r3, #0]
}
 801c072:	0018      	movs	r0, r3
 801c074:	46bd      	mov	sp, r7
 801c076:	b01c      	add	sp, #112	@ 0x70
 801c078:	bd80      	pop	{r7, pc}
 801c07a:	46c0      	nop			@ (mov r8, r8)
 801c07c:	ffff8fbf 	.word	0xffff8fbf
 801c080:	ffff8080 	.word	0xffff8080
 801c084:	ffffbf8f 	.word	0xffffbf8f

0801c088 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c088:	b580      	push	{r7, lr}
 801c08a:	b08c      	sub	sp, #48	@ 0x30
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
 801c090:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801c092:	683b      	ldr	r3, [r7, #0]
 801c094:	7b1b      	ldrb	r3, [r3, #12]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d000      	beq.n	801c09c <USB_DeactivateEndpoint+0x14>
 801c09a:	e07e      	b.n	801c19a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801c09c:	683b      	ldr	r3, [r7, #0]
 801c09e:	785b      	ldrb	r3, [r3, #1]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d03c      	beq.n	801c11e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c0a4:	687a      	ldr	r2, [r7, #4]
 801c0a6:	683b      	ldr	r3, [r7, #0]
 801c0a8:	781b      	ldrb	r3, [r3, #0]
 801c0aa:	009b      	lsls	r3, r3, #2
 801c0ac:	18d2      	adds	r2, r2, r3
 801c0ae:	210c      	movs	r1, #12
 801c0b0:	187b      	adds	r3, r7, r1
 801c0b2:	8812      	ldrh	r2, [r2, #0]
 801c0b4:	801a      	strh	r2, [r3, #0]
 801c0b6:	187b      	adds	r3, r7, r1
 801c0b8:	881b      	ldrh	r3, [r3, #0]
 801c0ba:	2240      	movs	r2, #64	@ 0x40
 801c0bc:	4013      	ands	r3, r2
 801c0be:	d016      	beq.n	801c0ee <USB_DeactivateEndpoint+0x66>
 801c0c0:	687a      	ldr	r2, [r7, #4]
 801c0c2:	683b      	ldr	r3, [r7, #0]
 801c0c4:	781b      	ldrb	r3, [r3, #0]
 801c0c6:	009b      	lsls	r3, r3, #2
 801c0c8:	18d3      	adds	r3, r2, r3
 801c0ca:	881b      	ldrh	r3, [r3, #0]
 801c0cc:	b29a      	uxth	r2, r3
 801c0ce:	200a      	movs	r0, #10
 801c0d0:	183b      	adds	r3, r7, r0
 801c0d2:	49c7      	ldr	r1, [pc, #796]	@ (801c3f0 <USB_DeactivateEndpoint+0x368>)
 801c0d4:	400a      	ands	r2, r1
 801c0d6:	801a      	strh	r2, [r3, #0]
 801c0d8:	687a      	ldr	r2, [r7, #4]
 801c0da:	683b      	ldr	r3, [r7, #0]
 801c0dc:	781b      	ldrb	r3, [r3, #0]
 801c0de:	009b      	lsls	r3, r3, #2
 801c0e0:	18d3      	adds	r3, r2, r3
 801c0e2:	183a      	adds	r2, r7, r0
 801c0e4:	8812      	ldrh	r2, [r2, #0]
 801c0e6:	49c3      	ldr	r1, [pc, #780]	@ (801c3f4 <USB_DeactivateEndpoint+0x36c>)
 801c0e8:	430a      	orrs	r2, r1
 801c0ea:	b292      	uxth	r2, r2
 801c0ec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c0ee:	687a      	ldr	r2, [r7, #4]
 801c0f0:	683b      	ldr	r3, [r7, #0]
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	009b      	lsls	r3, r3, #2
 801c0f6:	18d3      	adds	r3, r2, r3
 801c0f8:	881b      	ldrh	r3, [r3, #0]
 801c0fa:	b29a      	uxth	r2, r3
 801c0fc:	2008      	movs	r0, #8
 801c0fe:	183b      	adds	r3, r7, r0
 801c100:	49bd      	ldr	r1, [pc, #756]	@ (801c3f8 <USB_DeactivateEndpoint+0x370>)
 801c102:	400a      	ands	r2, r1
 801c104:	801a      	strh	r2, [r3, #0]
 801c106:	687a      	ldr	r2, [r7, #4]
 801c108:	683b      	ldr	r3, [r7, #0]
 801c10a:	781b      	ldrb	r3, [r3, #0]
 801c10c:	009b      	lsls	r3, r3, #2
 801c10e:	18d3      	adds	r3, r2, r3
 801c110:	183a      	adds	r2, r7, r0
 801c112:	8812      	ldrh	r2, [r2, #0]
 801c114:	49b9      	ldr	r1, [pc, #740]	@ (801c3fc <USB_DeactivateEndpoint+0x374>)
 801c116:	430a      	orrs	r2, r1
 801c118:	b292      	uxth	r2, r2
 801c11a:	801a      	strh	r2, [r3, #0]
 801c11c:	e163      	b.n	801c3e6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c11e:	687a      	ldr	r2, [r7, #4]
 801c120:	683b      	ldr	r3, [r7, #0]
 801c122:	781b      	ldrb	r3, [r3, #0]
 801c124:	009b      	lsls	r3, r3, #2
 801c126:	18d2      	adds	r2, r2, r3
 801c128:	2112      	movs	r1, #18
 801c12a:	187b      	adds	r3, r7, r1
 801c12c:	8812      	ldrh	r2, [r2, #0]
 801c12e:	801a      	strh	r2, [r3, #0]
 801c130:	187b      	adds	r3, r7, r1
 801c132:	881a      	ldrh	r2, [r3, #0]
 801c134:	2380      	movs	r3, #128	@ 0x80
 801c136:	01db      	lsls	r3, r3, #7
 801c138:	4013      	ands	r3, r2
 801c13a:	d016      	beq.n	801c16a <USB_DeactivateEndpoint+0xe2>
 801c13c:	687a      	ldr	r2, [r7, #4]
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	781b      	ldrb	r3, [r3, #0]
 801c142:	009b      	lsls	r3, r3, #2
 801c144:	18d3      	adds	r3, r2, r3
 801c146:	881b      	ldrh	r3, [r3, #0]
 801c148:	b29a      	uxth	r2, r3
 801c14a:	2010      	movs	r0, #16
 801c14c:	183b      	adds	r3, r7, r0
 801c14e:	49a8      	ldr	r1, [pc, #672]	@ (801c3f0 <USB_DeactivateEndpoint+0x368>)
 801c150:	400a      	ands	r2, r1
 801c152:	801a      	strh	r2, [r3, #0]
 801c154:	687a      	ldr	r2, [r7, #4]
 801c156:	683b      	ldr	r3, [r7, #0]
 801c158:	781b      	ldrb	r3, [r3, #0]
 801c15a:	009b      	lsls	r3, r3, #2
 801c15c:	18d3      	adds	r3, r2, r3
 801c15e:	183a      	adds	r2, r7, r0
 801c160:	8812      	ldrh	r2, [r2, #0]
 801c162:	49a7      	ldr	r1, [pc, #668]	@ (801c400 <USB_DeactivateEndpoint+0x378>)
 801c164:	430a      	orrs	r2, r1
 801c166:	b292      	uxth	r2, r2
 801c168:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c16a:	687a      	ldr	r2, [r7, #4]
 801c16c:	683b      	ldr	r3, [r7, #0]
 801c16e:	781b      	ldrb	r3, [r3, #0]
 801c170:	009b      	lsls	r3, r3, #2
 801c172:	18d3      	adds	r3, r2, r3
 801c174:	881b      	ldrh	r3, [r3, #0]
 801c176:	b29a      	uxth	r2, r3
 801c178:	200e      	movs	r0, #14
 801c17a:	183b      	adds	r3, r7, r0
 801c17c:	49a1      	ldr	r1, [pc, #644]	@ (801c404 <USB_DeactivateEndpoint+0x37c>)
 801c17e:	400a      	ands	r2, r1
 801c180:	801a      	strh	r2, [r3, #0]
 801c182:	687a      	ldr	r2, [r7, #4]
 801c184:	683b      	ldr	r3, [r7, #0]
 801c186:	781b      	ldrb	r3, [r3, #0]
 801c188:	009b      	lsls	r3, r3, #2
 801c18a:	18d3      	adds	r3, r2, r3
 801c18c:	183a      	adds	r2, r7, r0
 801c18e:	8812      	ldrh	r2, [r2, #0]
 801c190:	499a      	ldr	r1, [pc, #616]	@ (801c3fc <USB_DeactivateEndpoint+0x374>)
 801c192:	430a      	orrs	r2, r1
 801c194:	b292      	uxth	r2, r2
 801c196:	801a      	strh	r2, [r3, #0]
 801c198:	e125      	b.n	801c3e6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801c19a:	683b      	ldr	r3, [r7, #0]
 801c19c:	785b      	ldrb	r3, [r3, #1]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d000      	beq.n	801c1a4 <USB_DeactivateEndpoint+0x11c>
 801c1a2:	e090      	b.n	801c2c6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c1a4:	687a      	ldr	r2, [r7, #4]
 801c1a6:	683b      	ldr	r3, [r7, #0]
 801c1a8:	781b      	ldrb	r3, [r3, #0]
 801c1aa:	009b      	lsls	r3, r3, #2
 801c1ac:	18d2      	adds	r2, r2, r3
 801c1ae:	2120      	movs	r1, #32
 801c1b0:	187b      	adds	r3, r7, r1
 801c1b2:	8812      	ldrh	r2, [r2, #0]
 801c1b4:	801a      	strh	r2, [r3, #0]
 801c1b6:	187b      	adds	r3, r7, r1
 801c1b8:	881a      	ldrh	r2, [r3, #0]
 801c1ba:	2380      	movs	r3, #128	@ 0x80
 801c1bc:	01db      	lsls	r3, r3, #7
 801c1be:	4013      	ands	r3, r2
 801c1c0:	d016      	beq.n	801c1f0 <USB_DeactivateEndpoint+0x168>
 801c1c2:	687a      	ldr	r2, [r7, #4]
 801c1c4:	683b      	ldr	r3, [r7, #0]
 801c1c6:	781b      	ldrb	r3, [r3, #0]
 801c1c8:	009b      	lsls	r3, r3, #2
 801c1ca:	18d3      	adds	r3, r2, r3
 801c1cc:	881b      	ldrh	r3, [r3, #0]
 801c1ce:	b29a      	uxth	r2, r3
 801c1d0:	201e      	movs	r0, #30
 801c1d2:	183b      	adds	r3, r7, r0
 801c1d4:	4986      	ldr	r1, [pc, #536]	@ (801c3f0 <USB_DeactivateEndpoint+0x368>)
 801c1d6:	400a      	ands	r2, r1
 801c1d8:	801a      	strh	r2, [r3, #0]
 801c1da:	687a      	ldr	r2, [r7, #4]
 801c1dc:	683b      	ldr	r3, [r7, #0]
 801c1de:	781b      	ldrb	r3, [r3, #0]
 801c1e0:	009b      	lsls	r3, r3, #2
 801c1e2:	18d3      	adds	r3, r2, r3
 801c1e4:	183a      	adds	r2, r7, r0
 801c1e6:	8812      	ldrh	r2, [r2, #0]
 801c1e8:	4985      	ldr	r1, [pc, #532]	@ (801c400 <USB_DeactivateEndpoint+0x378>)
 801c1ea:	430a      	orrs	r2, r1
 801c1ec:	b292      	uxth	r2, r2
 801c1ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c1f0:	687a      	ldr	r2, [r7, #4]
 801c1f2:	683b      	ldr	r3, [r7, #0]
 801c1f4:	781b      	ldrb	r3, [r3, #0]
 801c1f6:	009b      	lsls	r3, r3, #2
 801c1f8:	18d2      	adds	r2, r2, r3
 801c1fa:	211c      	movs	r1, #28
 801c1fc:	187b      	adds	r3, r7, r1
 801c1fe:	8812      	ldrh	r2, [r2, #0]
 801c200:	801a      	strh	r2, [r3, #0]
 801c202:	187b      	adds	r3, r7, r1
 801c204:	881b      	ldrh	r3, [r3, #0]
 801c206:	2240      	movs	r2, #64	@ 0x40
 801c208:	4013      	ands	r3, r2
 801c20a:	d016      	beq.n	801c23a <USB_DeactivateEndpoint+0x1b2>
 801c20c:	687a      	ldr	r2, [r7, #4]
 801c20e:	683b      	ldr	r3, [r7, #0]
 801c210:	781b      	ldrb	r3, [r3, #0]
 801c212:	009b      	lsls	r3, r3, #2
 801c214:	18d3      	adds	r3, r2, r3
 801c216:	881b      	ldrh	r3, [r3, #0]
 801c218:	b29a      	uxth	r2, r3
 801c21a:	201a      	movs	r0, #26
 801c21c:	183b      	adds	r3, r7, r0
 801c21e:	4974      	ldr	r1, [pc, #464]	@ (801c3f0 <USB_DeactivateEndpoint+0x368>)
 801c220:	400a      	ands	r2, r1
 801c222:	801a      	strh	r2, [r3, #0]
 801c224:	687a      	ldr	r2, [r7, #4]
 801c226:	683b      	ldr	r3, [r7, #0]
 801c228:	781b      	ldrb	r3, [r3, #0]
 801c22a:	009b      	lsls	r3, r3, #2
 801c22c:	18d3      	adds	r3, r2, r3
 801c22e:	183a      	adds	r2, r7, r0
 801c230:	8812      	ldrh	r2, [r2, #0]
 801c232:	4970      	ldr	r1, [pc, #448]	@ (801c3f4 <USB_DeactivateEndpoint+0x36c>)
 801c234:	430a      	orrs	r2, r1
 801c236:	b292      	uxth	r2, r2
 801c238:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801c23a:	687a      	ldr	r2, [r7, #4]
 801c23c:	683b      	ldr	r3, [r7, #0]
 801c23e:	781b      	ldrb	r3, [r3, #0]
 801c240:	009b      	lsls	r3, r3, #2
 801c242:	18d3      	adds	r3, r2, r3
 801c244:	881b      	ldrh	r3, [r3, #0]
 801c246:	b29a      	uxth	r2, r3
 801c248:	2018      	movs	r0, #24
 801c24a:	183b      	adds	r3, r7, r0
 801c24c:	4968      	ldr	r1, [pc, #416]	@ (801c3f0 <USB_DeactivateEndpoint+0x368>)
 801c24e:	400a      	ands	r2, r1
 801c250:	801a      	strh	r2, [r3, #0]
 801c252:	687a      	ldr	r2, [r7, #4]
 801c254:	683b      	ldr	r3, [r7, #0]
 801c256:	781b      	ldrb	r3, [r3, #0]
 801c258:	009b      	lsls	r3, r3, #2
 801c25a:	18d3      	adds	r3, r2, r3
 801c25c:	183a      	adds	r2, r7, r0
 801c25e:	8812      	ldrh	r2, [r2, #0]
 801c260:	4964      	ldr	r1, [pc, #400]	@ (801c3f4 <USB_DeactivateEndpoint+0x36c>)
 801c262:	430a      	orrs	r2, r1
 801c264:	b292      	uxth	r2, r2
 801c266:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c268:	687a      	ldr	r2, [r7, #4]
 801c26a:	683b      	ldr	r3, [r7, #0]
 801c26c:	781b      	ldrb	r3, [r3, #0]
 801c26e:	009b      	lsls	r3, r3, #2
 801c270:	18d3      	adds	r3, r2, r3
 801c272:	881b      	ldrh	r3, [r3, #0]
 801c274:	b29a      	uxth	r2, r3
 801c276:	2016      	movs	r0, #22
 801c278:	183b      	adds	r3, r7, r0
 801c27a:	4962      	ldr	r1, [pc, #392]	@ (801c404 <USB_DeactivateEndpoint+0x37c>)
 801c27c:	400a      	ands	r2, r1
 801c27e:	801a      	strh	r2, [r3, #0]
 801c280:	687a      	ldr	r2, [r7, #4]
 801c282:	683b      	ldr	r3, [r7, #0]
 801c284:	781b      	ldrb	r3, [r3, #0]
 801c286:	009b      	lsls	r3, r3, #2
 801c288:	18d3      	adds	r3, r2, r3
 801c28a:	183a      	adds	r2, r7, r0
 801c28c:	8812      	ldrh	r2, [r2, #0]
 801c28e:	495b      	ldr	r1, [pc, #364]	@ (801c3fc <USB_DeactivateEndpoint+0x374>)
 801c290:	430a      	orrs	r2, r1
 801c292:	b292      	uxth	r2, r2
 801c294:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c296:	687a      	ldr	r2, [r7, #4]
 801c298:	683b      	ldr	r3, [r7, #0]
 801c29a:	781b      	ldrb	r3, [r3, #0]
 801c29c:	009b      	lsls	r3, r3, #2
 801c29e:	18d3      	adds	r3, r2, r3
 801c2a0:	881b      	ldrh	r3, [r3, #0]
 801c2a2:	b29a      	uxth	r2, r3
 801c2a4:	2014      	movs	r0, #20
 801c2a6:	183b      	adds	r3, r7, r0
 801c2a8:	4953      	ldr	r1, [pc, #332]	@ (801c3f8 <USB_DeactivateEndpoint+0x370>)
 801c2aa:	400a      	ands	r2, r1
 801c2ac:	801a      	strh	r2, [r3, #0]
 801c2ae:	687a      	ldr	r2, [r7, #4]
 801c2b0:	683b      	ldr	r3, [r7, #0]
 801c2b2:	781b      	ldrb	r3, [r3, #0]
 801c2b4:	009b      	lsls	r3, r3, #2
 801c2b6:	18d3      	adds	r3, r2, r3
 801c2b8:	183a      	adds	r2, r7, r0
 801c2ba:	8812      	ldrh	r2, [r2, #0]
 801c2bc:	494f      	ldr	r1, [pc, #316]	@ (801c3fc <USB_DeactivateEndpoint+0x374>)
 801c2be:	430a      	orrs	r2, r1
 801c2c0:	b292      	uxth	r2, r2
 801c2c2:	801a      	strh	r2, [r3, #0]
 801c2c4:	e08f      	b.n	801c3e6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c2c6:	687a      	ldr	r2, [r7, #4]
 801c2c8:	683b      	ldr	r3, [r7, #0]
 801c2ca:	781b      	ldrb	r3, [r3, #0]
 801c2cc:	009b      	lsls	r3, r3, #2
 801c2ce:	18d2      	adds	r2, r2, r3
 801c2d0:	212e      	movs	r1, #46	@ 0x2e
 801c2d2:	187b      	adds	r3, r7, r1
 801c2d4:	8812      	ldrh	r2, [r2, #0]
 801c2d6:	801a      	strh	r2, [r3, #0]
 801c2d8:	187b      	adds	r3, r7, r1
 801c2da:	881a      	ldrh	r2, [r3, #0]
 801c2dc:	2380      	movs	r3, #128	@ 0x80
 801c2de:	01db      	lsls	r3, r3, #7
 801c2e0:	4013      	ands	r3, r2
 801c2e2:	d016      	beq.n	801c312 <USB_DeactivateEndpoint+0x28a>
 801c2e4:	687a      	ldr	r2, [r7, #4]
 801c2e6:	683b      	ldr	r3, [r7, #0]
 801c2e8:	781b      	ldrb	r3, [r3, #0]
 801c2ea:	009b      	lsls	r3, r3, #2
 801c2ec:	18d3      	adds	r3, r2, r3
 801c2ee:	881b      	ldrh	r3, [r3, #0]
 801c2f0:	b29a      	uxth	r2, r3
 801c2f2:	202c      	movs	r0, #44	@ 0x2c
 801c2f4:	183b      	adds	r3, r7, r0
 801c2f6:	493e      	ldr	r1, [pc, #248]	@ (801c3f0 <USB_DeactivateEndpoint+0x368>)
 801c2f8:	400a      	ands	r2, r1
 801c2fa:	801a      	strh	r2, [r3, #0]
 801c2fc:	687a      	ldr	r2, [r7, #4]
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	781b      	ldrb	r3, [r3, #0]
 801c302:	009b      	lsls	r3, r3, #2
 801c304:	18d3      	adds	r3, r2, r3
 801c306:	183a      	adds	r2, r7, r0
 801c308:	8812      	ldrh	r2, [r2, #0]
 801c30a:	493d      	ldr	r1, [pc, #244]	@ (801c400 <USB_DeactivateEndpoint+0x378>)
 801c30c:	430a      	orrs	r2, r1
 801c30e:	b292      	uxth	r2, r2
 801c310:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c312:	687a      	ldr	r2, [r7, #4]
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	781b      	ldrb	r3, [r3, #0]
 801c318:	009b      	lsls	r3, r3, #2
 801c31a:	18d2      	adds	r2, r2, r3
 801c31c:	212a      	movs	r1, #42	@ 0x2a
 801c31e:	187b      	adds	r3, r7, r1
 801c320:	8812      	ldrh	r2, [r2, #0]
 801c322:	801a      	strh	r2, [r3, #0]
 801c324:	187b      	adds	r3, r7, r1
 801c326:	881b      	ldrh	r3, [r3, #0]
 801c328:	2240      	movs	r2, #64	@ 0x40
 801c32a:	4013      	ands	r3, r2
 801c32c:	d016      	beq.n	801c35c <USB_DeactivateEndpoint+0x2d4>
 801c32e:	687a      	ldr	r2, [r7, #4]
 801c330:	683b      	ldr	r3, [r7, #0]
 801c332:	781b      	ldrb	r3, [r3, #0]
 801c334:	009b      	lsls	r3, r3, #2
 801c336:	18d3      	adds	r3, r2, r3
 801c338:	881b      	ldrh	r3, [r3, #0]
 801c33a:	b29a      	uxth	r2, r3
 801c33c:	2028      	movs	r0, #40	@ 0x28
 801c33e:	183b      	adds	r3, r7, r0
 801c340:	492b      	ldr	r1, [pc, #172]	@ (801c3f0 <USB_DeactivateEndpoint+0x368>)
 801c342:	400a      	ands	r2, r1
 801c344:	801a      	strh	r2, [r3, #0]
 801c346:	687a      	ldr	r2, [r7, #4]
 801c348:	683b      	ldr	r3, [r7, #0]
 801c34a:	781b      	ldrb	r3, [r3, #0]
 801c34c:	009b      	lsls	r3, r3, #2
 801c34e:	18d3      	adds	r3, r2, r3
 801c350:	183a      	adds	r2, r7, r0
 801c352:	8812      	ldrh	r2, [r2, #0]
 801c354:	4927      	ldr	r1, [pc, #156]	@ (801c3f4 <USB_DeactivateEndpoint+0x36c>)
 801c356:	430a      	orrs	r2, r1
 801c358:	b292      	uxth	r2, r2
 801c35a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801c35c:	687a      	ldr	r2, [r7, #4]
 801c35e:	683b      	ldr	r3, [r7, #0]
 801c360:	781b      	ldrb	r3, [r3, #0]
 801c362:	009b      	lsls	r3, r3, #2
 801c364:	18d3      	adds	r3, r2, r3
 801c366:	881b      	ldrh	r3, [r3, #0]
 801c368:	b29a      	uxth	r2, r3
 801c36a:	2026      	movs	r0, #38	@ 0x26
 801c36c:	183b      	adds	r3, r7, r0
 801c36e:	4920      	ldr	r1, [pc, #128]	@ (801c3f0 <USB_DeactivateEndpoint+0x368>)
 801c370:	400a      	ands	r2, r1
 801c372:	801a      	strh	r2, [r3, #0]
 801c374:	687a      	ldr	r2, [r7, #4]
 801c376:	683b      	ldr	r3, [r7, #0]
 801c378:	781b      	ldrb	r3, [r3, #0]
 801c37a:	009b      	lsls	r3, r3, #2
 801c37c:	18d3      	adds	r3, r2, r3
 801c37e:	183a      	adds	r2, r7, r0
 801c380:	8812      	ldrh	r2, [r2, #0]
 801c382:	491f      	ldr	r1, [pc, #124]	@ (801c400 <USB_DeactivateEndpoint+0x378>)
 801c384:	430a      	orrs	r2, r1
 801c386:	b292      	uxth	r2, r2
 801c388:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c38a:	687a      	ldr	r2, [r7, #4]
 801c38c:	683b      	ldr	r3, [r7, #0]
 801c38e:	781b      	ldrb	r3, [r3, #0]
 801c390:	009b      	lsls	r3, r3, #2
 801c392:	18d3      	adds	r3, r2, r3
 801c394:	881b      	ldrh	r3, [r3, #0]
 801c396:	b29a      	uxth	r2, r3
 801c398:	2024      	movs	r0, #36	@ 0x24
 801c39a:	183b      	adds	r3, r7, r0
 801c39c:	4916      	ldr	r1, [pc, #88]	@ (801c3f8 <USB_DeactivateEndpoint+0x370>)
 801c39e:	400a      	ands	r2, r1
 801c3a0:	801a      	strh	r2, [r3, #0]
 801c3a2:	687a      	ldr	r2, [r7, #4]
 801c3a4:	683b      	ldr	r3, [r7, #0]
 801c3a6:	781b      	ldrb	r3, [r3, #0]
 801c3a8:	009b      	lsls	r3, r3, #2
 801c3aa:	18d3      	adds	r3, r2, r3
 801c3ac:	183a      	adds	r2, r7, r0
 801c3ae:	8812      	ldrh	r2, [r2, #0]
 801c3b0:	4912      	ldr	r1, [pc, #72]	@ (801c3fc <USB_DeactivateEndpoint+0x374>)
 801c3b2:	430a      	orrs	r2, r1
 801c3b4:	b292      	uxth	r2, r2
 801c3b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c3b8:	687a      	ldr	r2, [r7, #4]
 801c3ba:	683b      	ldr	r3, [r7, #0]
 801c3bc:	781b      	ldrb	r3, [r3, #0]
 801c3be:	009b      	lsls	r3, r3, #2
 801c3c0:	18d3      	adds	r3, r2, r3
 801c3c2:	881b      	ldrh	r3, [r3, #0]
 801c3c4:	b29a      	uxth	r2, r3
 801c3c6:	2022      	movs	r0, #34	@ 0x22
 801c3c8:	183b      	adds	r3, r7, r0
 801c3ca:	490e      	ldr	r1, [pc, #56]	@ (801c404 <USB_DeactivateEndpoint+0x37c>)
 801c3cc:	400a      	ands	r2, r1
 801c3ce:	801a      	strh	r2, [r3, #0]
 801c3d0:	687a      	ldr	r2, [r7, #4]
 801c3d2:	683b      	ldr	r3, [r7, #0]
 801c3d4:	781b      	ldrb	r3, [r3, #0]
 801c3d6:	009b      	lsls	r3, r3, #2
 801c3d8:	18d3      	adds	r3, r2, r3
 801c3da:	183a      	adds	r2, r7, r0
 801c3dc:	8812      	ldrh	r2, [r2, #0]
 801c3de:	4907      	ldr	r1, [pc, #28]	@ (801c3fc <USB_DeactivateEndpoint+0x374>)
 801c3e0:	430a      	orrs	r2, r1
 801c3e2:	b292      	uxth	r2, r2
 801c3e4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801c3e6:	2300      	movs	r3, #0
}
 801c3e8:	0018      	movs	r0, r3
 801c3ea:	46bd      	mov	sp, r7
 801c3ec:	b00c      	add	sp, #48	@ 0x30
 801c3ee:	bd80      	pop	{r7, pc}
 801c3f0:	ffff8f8f 	.word	0xffff8f8f
 801c3f4:	ffff80c0 	.word	0xffff80c0
 801c3f8:	ffff8fbf 	.word	0xffff8fbf
 801c3fc:	ffff8080 	.word	0xffff8080
 801c400:	ffffc080 	.word	0xffffc080
 801c404:	ffffbf8f 	.word	0xffffbf8f

0801c408 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c408:	b590      	push	{r4, r7, lr}
 801c40a:	b0c3      	sub	sp, #268	@ 0x10c
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
 801c410:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801c412:	683b      	ldr	r3, [r7, #0]
 801c414:	785b      	ldrb	r3, [r3, #1]
 801c416:	2b01      	cmp	r3, #1
 801c418:	d001      	beq.n	801c41e <USB_EPStartXfer+0x16>
 801c41a:	f000 fd2d 	bl	801ce78 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801c41e:	683b      	ldr	r3, [r7, #0]
 801c420:	699a      	ldr	r2, [r3, #24]
 801c422:	683b      	ldr	r3, [r7, #0]
 801c424:	691b      	ldr	r3, [r3, #16]
 801c426:	429a      	cmp	r2, r3
 801c428:	d905      	bls.n	801c436 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801c42a:	683b      	ldr	r3, [r7, #0]
 801c42c:	691b      	ldr	r3, [r3, #16]
 801c42e:	1d7a      	adds	r2, r7, #5
 801c430:	32ff      	adds	r2, #255	@ 0xff
 801c432:	6013      	str	r3, [r2, #0]
 801c434:	e004      	b.n	801c440 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801c436:	683b      	ldr	r3, [r7, #0]
 801c438:	699b      	ldr	r3, [r3, #24]
 801c43a:	1d7a      	adds	r2, r7, #5
 801c43c:	32ff      	adds	r2, #255	@ 0xff
 801c43e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801c440:	683b      	ldr	r3, [r7, #0]
 801c442:	7b1b      	ldrb	r3, [r3, #12]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d125      	bne.n	801c494 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801c448:	683b      	ldr	r3, [r7, #0]
 801c44a:	6959      	ldr	r1, [r3, #20]
 801c44c:	683b      	ldr	r3, [r7, #0]
 801c44e:	88da      	ldrh	r2, [r3, #6]
 801c450:	1d7b      	adds	r3, r7, #5
 801c452:	33ff      	adds	r3, #255	@ 0xff
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	b29b      	uxth	r3, r3
 801c458:	6878      	ldr	r0, [r7, #4]
 801c45a:	f001 fa47 	bl	801d8ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	613b      	str	r3, [r7, #16]
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	2250      	movs	r2, #80	@ 0x50
 801c466:	5a9b      	ldrh	r3, [r3, r2]
 801c468:	b29b      	uxth	r3, r3
 801c46a:	001a      	movs	r2, r3
 801c46c:	693b      	ldr	r3, [r7, #16]
 801c46e:	189b      	adds	r3, r3, r2
 801c470:	613b      	str	r3, [r7, #16]
 801c472:	683b      	ldr	r3, [r7, #0]
 801c474:	781b      	ldrb	r3, [r3, #0]
 801c476:	00da      	lsls	r2, r3, #3
 801c478:	693b      	ldr	r3, [r7, #16]
 801c47a:	18d3      	adds	r3, r2, r3
 801c47c:	4ad7      	ldr	r2, [pc, #860]	@ (801c7dc <USB_EPStartXfer+0x3d4>)
 801c47e:	4694      	mov	ip, r2
 801c480:	4463      	add	r3, ip
 801c482:	60fb      	str	r3, [r7, #12]
 801c484:	1d7b      	adds	r3, r7, #5
 801c486:	33ff      	adds	r3, #255	@ 0xff
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	b29a      	uxth	r2, r3
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	801a      	strh	r2, [r3, #0]
 801c490:	f000 fccd 	bl	801ce2e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801c494:	683b      	ldr	r3, [r7, #0]
 801c496:	78db      	ldrb	r3, [r3, #3]
 801c498:	2b02      	cmp	r3, #2
 801c49a:	d000      	beq.n	801c49e <USB_EPStartXfer+0x96>
 801c49c:	e362      	b.n	801cb64 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801c49e:	683b      	ldr	r3, [r7, #0]
 801c4a0:	6a1a      	ldr	r2, [r3, #32]
 801c4a2:	683b      	ldr	r3, [r7, #0]
 801c4a4:	691b      	ldr	r3, [r3, #16]
 801c4a6:	429a      	cmp	r2, r3
 801c4a8:	d800      	bhi.n	801c4ac <USB_EPStartXfer+0xa4>
 801c4aa:	e309      	b.n	801cac0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801c4ac:	687a      	ldr	r2, [r7, #4]
 801c4ae:	683b      	ldr	r3, [r7, #0]
 801c4b0:	781b      	ldrb	r3, [r3, #0]
 801c4b2:	009b      	lsls	r3, r3, #2
 801c4b4:	18d3      	adds	r3, r2, r3
 801c4b6:	881b      	ldrh	r3, [r3, #0]
 801c4b8:	b29a      	uxth	r2, r3
 801c4ba:	2056      	movs	r0, #86	@ 0x56
 801c4bc:	183b      	adds	r3, r7, r0
 801c4be:	49c8      	ldr	r1, [pc, #800]	@ (801c7e0 <USB_EPStartXfer+0x3d8>)
 801c4c0:	400a      	ands	r2, r1
 801c4c2:	801a      	strh	r2, [r3, #0]
 801c4c4:	687a      	ldr	r2, [r7, #4]
 801c4c6:	683b      	ldr	r3, [r7, #0]
 801c4c8:	781b      	ldrb	r3, [r3, #0]
 801c4ca:	009b      	lsls	r3, r3, #2
 801c4cc:	18d3      	adds	r3, r2, r3
 801c4ce:	183a      	adds	r2, r7, r0
 801c4d0:	8812      	ldrh	r2, [r2, #0]
 801c4d2:	49c4      	ldr	r1, [pc, #784]	@ (801c7e4 <USB_EPStartXfer+0x3dc>)
 801c4d4:	430a      	orrs	r2, r1
 801c4d6:	b292      	uxth	r2, r2
 801c4d8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	6a1a      	ldr	r2, [r3, #32]
 801c4de:	1d7b      	adds	r3, r7, #5
 801c4e0:	33ff      	adds	r3, #255	@ 0xff
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	1ad2      	subs	r2, r2, r3
 801c4e6:	683b      	ldr	r3, [r7, #0]
 801c4e8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801c4ea:	687a      	ldr	r2, [r7, #4]
 801c4ec:	683b      	ldr	r3, [r7, #0]
 801c4ee:	781b      	ldrb	r3, [r3, #0]
 801c4f0:	009b      	lsls	r3, r3, #2
 801c4f2:	18d3      	adds	r3, r2, r3
 801c4f4:	881b      	ldrh	r3, [r3, #0]
 801c4f6:	b29b      	uxth	r3, r3
 801c4f8:	001a      	movs	r2, r3
 801c4fa:	2340      	movs	r3, #64	@ 0x40
 801c4fc:	4013      	ands	r3, r2
 801c4fe:	d100      	bne.n	801c502 <USB_EPStartXfer+0xfa>
 801c500:	e176      	b.n	801c7f0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	633b      	str	r3, [r7, #48]	@ 0x30
 801c506:	683b      	ldr	r3, [r7, #0]
 801c508:	785b      	ldrb	r3, [r3, #1]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d000      	beq.n	801c510 <USB_EPStartXfer+0x108>
 801c50e:	e074      	b.n	801c5fa <USB_EPStartXfer+0x1f2>
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2250      	movs	r2, #80	@ 0x50
 801c518:	5a9b      	ldrh	r3, [r3, r2]
 801c51a:	b29b      	uxth	r3, r3
 801c51c:	001a      	movs	r2, r3
 801c51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c520:	189b      	adds	r3, r3, r2
 801c522:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c524:	683b      	ldr	r3, [r7, #0]
 801c526:	781b      	ldrb	r3, [r3, #0]
 801c528:	00da      	lsls	r2, r3, #3
 801c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c52c:	18d3      	adds	r3, r2, r3
 801c52e:	4aae      	ldr	r2, [pc, #696]	@ (801c7e8 <USB_EPStartXfer+0x3e0>)
 801c530:	4694      	mov	ip, r2
 801c532:	4463      	add	r3, ip
 801c534:	627b      	str	r3, [r7, #36]	@ 0x24
 801c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c538:	881b      	ldrh	r3, [r3, #0]
 801c53a:	b29b      	uxth	r3, r3
 801c53c:	059b      	lsls	r3, r3, #22
 801c53e:	0d9b      	lsrs	r3, r3, #22
 801c540:	b29a      	uxth	r2, r3
 801c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c544:	801a      	strh	r2, [r3, #0]
 801c546:	1d7b      	adds	r3, r7, #5
 801c548:	33ff      	adds	r3, #255	@ 0xff
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	2b3e      	cmp	r3, #62	@ 0x3e
 801c54e:	d924      	bls.n	801c59a <USB_EPStartXfer+0x192>
 801c550:	1d7b      	adds	r3, r7, #5
 801c552:	33ff      	adds	r3, #255	@ 0xff
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	095b      	lsrs	r3, r3, #5
 801c558:	1c7a      	adds	r2, r7, #1
 801c55a:	32ff      	adds	r2, #255	@ 0xff
 801c55c:	6013      	str	r3, [r2, #0]
 801c55e:	1d7b      	adds	r3, r7, #5
 801c560:	33ff      	adds	r3, #255	@ 0xff
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	221f      	movs	r2, #31
 801c566:	4013      	ands	r3, r2
 801c568:	d106      	bne.n	801c578 <USB_EPStartXfer+0x170>
 801c56a:	1c7b      	adds	r3, r7, #1
 801c56c:	33ff      	adds	r3, #255	@ 0xff
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	3b01      	subs	r3, #1
 801c572:	1c7a      	adds	r2, r7, #1
 801c574:	32ff      	adds	r2, #255	@ 0xff
 801c576:	6013      	str	r3, [r2, #0]
 801c578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c57a:	881b      	ldrh	r3, [r3, #0]
 801c57c:	b29a      	uxth	r2, r3
 801c57e:	1c7b      	adds	r3, r7, #1
 801c580:	33ff      	adds	r3, #255	@ 0xff
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	b29b      	uxth	r3, r3
 801c586:	029b      	lsls	r3, r3, #10
 801c588:	b29b      	uxth	r3, r3
 801c58a:	4313      	orrs	r3, r2
 801c58c:	b29b      	uxth	r3, r3
 801c58e:	4a97      	ldr	r2, [pc, #604]	@ (801c7ec <USB_EPStartXfer+0x3e4>)
 801c590:	4313      	orrs	r3, r2
 801c592:	b29a      	uxth	r2, r3
 801c594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c596:	801a      	strh	r2, [r3, #0]
 801c598:	e04a      	b.n	801c630 <USB_EPStartXfer+0x228>
 801c59a:	1d7b      	adds	r3, r7, #5
 801c59c:	33ff      	adds	r3, #255	@ 0xff
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d108      	bne.n	801c5b6 <USB_EPStartXfer+0x1ae>
 801c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5a6:	881b      	ldrh	r3, [r3, #0]
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	4a90      	ldr	r2, [pc, #576]	@ (801c7ec <USB_EPStartXfer+0x3e4>)
 801c5ac:	4313      	orrs	r3, r2
 801c5ae:	b29a      	uxth	r2, r3
 801c5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5b2:	801a      	strh	r2, [r3, #0]
 801c5b4:	e03c      	b.n	801c630 <USB_EPStartXfer+0x228>
 801c5b6:	1d7b      	adds	r3, r7, #5
 801c5b8:	33ff      	adds	r3, #255	@ 0xff
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	085b      	lsrs	r3, r3, #1
 801c5be:	1c7a      	adds	r2, r7, #1
 801c5c0:	32ff      	adds	r2, #255	@ 0xff
 801c5c2:	6013      	str	r3, [r2, #0]
 801c5c4:	1d7b      	adds	r3, r7, #5
 801c5c6:	33ff      	adds	r3, #255	@ 0xff
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	2201      	movs	r2, #1
 801c5cc:	4013      	ands	r3, r2
 801c5ce:	d006      	beq.n	801c5de <USB_EPStartXfer+0x1d6>
 801c5d0:	1c7b      	adds	r3, r7, #1
 801c5d2:	33ff      	adds	r3, #255	@ 0xff
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	3301      	adds	r3, #1
 801c5d8:	1c7a      	adds	r2, r7, #1
 801c5da:	32ff      	adds	r2, #255	@ 0xff
 801c5dc:	6013      	str	r3, [r2, #0]
 801c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5e0:	881b      	ldrh	r3, [r3, #0]
 801c5e2:	b29a      	uxth	r2, r3
 801c5e4:	1c7b      	adds	r3, r7, #1
 801c5e6:	33ff      	adds	r3, #255	@ 0xff
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	b29b      	uxth	r3, r3
 801c5ec:	029b      	lsls	r3, r3, #10
 801c5ee:	b29b      	uxth	r3, r3
 801c5f0:	4313      	orrs	r3, r2
 801c5f2:	b29a      	uxth	r2, r3
 801c5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5f6:	801a      	strh	r2, [r3, #0]
 801c5f8:	e01a      	b.n	801c630 <USB_EPStartXfer+0x228>
 801c5fa:	683b      	ldr	r3, [r7, #0]
 801c5fc:	785b      	ldrb	r3, [r3, #1]
 801c5fe:	2b01      	cmp	r3, #1
 801c600:	d116      	bne.n	801c630 <USB_EPStartXfer+0x228>
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	2250      	movs	r2, #80	@ 0x50
 801c606:	5a9b      	ldrh	r3, [r3, r2]
 801c608:	b29b      	uxth	r3, r3
 801c60a:	001a      	movs	r2, r3
 801c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c60e:	189b      	adds	r3, r3, r2
 801c610:	633b      	str	r3, [r7, #48]	@ 0x30
 801c612:	683b      	ldr	r3, [r7, #0]
 801c614:	781b      	ldrb	r3, [r3, #0]
 801c616:	00da      	lsls	r2, r3, #3
 801c618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c61a:	18d3      	adds	r3, r2, r3
 801c61c:	4a72      	ldr	r2, [pc, #456]	@ (801c7e8 <USB_EPStartXfer+0x3e0>)
 801c61e:	4694      	mov	ip, r2
 801c620:	4463      	add	r3, ip
 801c622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c624:	1d7b      	adds	r3, r7, #5
 801c626:	33ff      	adds	r3, #255	@ 0xff
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	b29a      	uxth	r2, r3
 801c62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c62e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801c630:	2076      	movs	r0, #118	@ 0x76
 801c632:	183b      	adds	r3, r7, r0
 801c634:	683a      	ldr	r2, [r7, #0]
 801c636:	8952      	ldrh	r2, [r2, #10]
 801c638:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c63a:	683b      	ldr	r3, [r7, #0]
 801c63c:	6959      	ldr	r1, [r3, #20]
 801c63e:	1d7b      	adds	r3, r7, #5
 801c640:	33ff      	adds	r3, #255	@ 0xff
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	b29c      	uxth	r4, r3
 801c646:	183b      	adds	r3, r7, r0
 801c648:	881a      	ldrh	r2, [r3, #0]
 801c64a:	6878      	ldr	r0, [r7, #4]
 801c64c:	0023      	movs	r3, r4
 801c64e:	f001 f94d 	bl	801d8ec <USB_WritePMA>
            ep->xfer_buff += len;
 801c652:	683b      	ldr	r3, [r7, #0]
 801c654:	695a      	ldr	r2, [r3, #20]
 801c656:	1d7b      	adds	r3, r7, #5
 801c658:	33ff      	adds	r3, #255	@ 0xff
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	18d2      	adds	r2, r2, r3
 801c65e:	683b      	ldr	r3, [r7, #0]
 801c660:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801c662:	683b      	ldr	r3, [r7, #0]
 801c664:	6a1a      	ldr	r2, [r3, #32]
 801c666:	683b      	ldr	r3, [r7, #0]
 801c668:	691b      	ldr	r3, [r3, #16]
 801c66a:	429a      	cmp	r2, r3
 801c66c:	d908      	bls.n	801c680 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801c66e:	683b      	ldr	r3, [r7, #0]
 801c670:	6a1a      	ldr	r2, [r3, #32]
 801c672:	1d7b      	adds	r3, r7, #5
 801c674:	33ff      	adds	r3, #255	@ 0xff
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	1ad2      	subs	r2, r2, r3
 801c67a:	683b      	ldr	r3, [r7, #0]
 801c67c:	621a      	str	r2, [r3, #32]
 801c67e:	e007      	b.n	801c690 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801c680:	683b      	ldr	r3, [r7, #0]
 801c682:	6a1b      	ldr	r3, [r3, #32]
 801c684:	1d7a      	adds	r2, r7, #5
 801c686:	32ff      	adds	r2, #255	@ 0xff
 801c688:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801c68a:	683b      	ldr	r3, [r7, #0]
 801c68c:	2200      	movs	r2, #0
 801c68e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c690:	683b      	ldr	r3, [r7, #0]
 801c692:	785b      	ldrb	r3, [r3, #1]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d000      	beq.n	801c69a <USB_EPStartXfer+0x292>
 801c698:	e070      	b.n	801c77c <USB_EPStartXfer+0x374>
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	61bb      	str	r3, [r7, #24]
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	2250      	movs	r2, #80	@ 0x50
 801c6a2:	5a9b      	ldrh	r3, [r3, r2]
 801c6a4:	b29b      	uxth	r3, r3
 801c6a6:	001a      	movs	r2, r3
 801c6a8:	69bb      	ldr	r3, [r7, #24]
 801c6aa:	189b      	adds	r3, r3, r2
 801c6ac:	61bb      	str	r3, [r7, #24]
 801c6ae:	683b      	ldr	r3, [r7, #0]
 801c6b0:	781b      	ldrb	r3, [r3, #0]
 801c6b2:	00da      	lsls	r2, r3, #3
 801c6b4:	69bb      	ldr	r3, [r7, #24]
 801c6b6:	18d3      	adds	r3, r2, r3
 801c6b8:	4a48      	ldr	r2, [pc, #288]	@ (801c7dc <USB_EPStartXfer+0x3d4>)
 801c6ba:	4694      	mov	ip, r2
 801c6bc:	4463      	add	r3, ip
 801c6be:	617b      	str	r3, [r7, #20]
 801c6c0:	697b      	ldr	r3, [r7, #20]
 801c6c2:	881b      	ldrh	r3, [r3, #0]
 801c6c4:	b29b      	uxth	r3, r3
 801c6c6:	059b      	lsls	r3, r3, #22
 801c6c8:	0d9b      	lsrs	r3, r3, #22
 801c6ca:	b29a      	uxth	r2, r3
 801c6cc:	697b      	ldr	r3, [r7, #20]
 801c6ce:	801a      	strh	r2, [r3, #0]
 801c6d0:	1d7b      	adds	r3, r7, #5
 801c6d2:	33ff      	adds	r3, #255	@ 0xff
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	2b3e      	cmp	r3, #62	@ 0x3e
 801c6d8:	d922      	bls.n	801c720 <USB_EPStartXfer+0x318>
 801c6da:	1d7b      	adds	r3, r7, #5
 801c6dc:	33ff      	adds	r3, #255	@ 0xff
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	095b      	lsrs	r3, r3, #5
 801c6e2:	21fc      	movs	r1, #252	@ 0xfc
 801c6e4:	187a      	adds	r2, r7, r1
 801c6e6:	6013      	str	r3, [r2, #0]
 801c6e8:	1d7b      	adds	r3, r7, #5
 801c6ea:	33ff      	adds	r3, #255	@ 0xff
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	221f      	movs	r2, #31
 801c6f0:	4013      	ands	r3, r2
 801c6f2:	d104      	bne.n	801c6fe <USB_EPStartXfer+0x2f6>
 801c6f4:	187b      	adds	r3, r7, r1
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	3b01      	subs	r3, #1
 801c6fa:	187a      	adds	r2, r7, r1
 801c6fc:	6013      	str	r3, [r2, #0]
 801c6fe:	697b      	ldr	r3, [r7, #20]
 801c700:	881b      	ldrh	r3, [r3, #0]
 801c702:	b29a      	uxth	r2, r3
 801c704:	23fc      	movs	r3, #252	@ 0xfc
 801c706:	18fb      	adds	r3, r7, r3
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	b29b      	uxth	r3, r3
 801c70c:	029b      	lsls	r3, r3, #10
 801c70e:	b29b      	uxth	r3, r3
 801c710:	4313      	orrs	r3, r2
 801c712:	b29b      	uxth	r3, r3
 801c714:	4a35      	ldr	r2, [pc, #212]	@ (801c7ec <USB_EPStartXfer+0x3e4>)
 801c716:	4313      	orrs	r3, r2
 801c718:	b29a      	uxth	r2, r3
 801c71a:	697b      	ldr	r3, [r7, #20]
 801c71c:	801a      	strh	r2, [r3, #0]
 801c71e:	e04a      	b.n	801c7b6 <USB_EPStartXfer+0x3ae>
 801c720:	1d7b      	adds	r3, r7, #5
 801c722:	33ff      	adds	r3, #255	@ 0xff
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d108      	bne.n	801c73c <USB_EPStartXfer+0x334>
 801c72a:	697b      	ldr	r3, [r7, #20]
 801c72c:	881b      	ldrh	r3, [r3, #0]
 801c72e:	b29b      	uxth	r3, r3
 801c730:	4a2e      	ldr	r2, [pc, #184]	@ (801c7ec <USB_EPStartXfer+0x3e4>)
 801c732:	4313      	orrs	r3, r2
 801c734:	b29a      	uxth	r2, r3
 801c736:	697b      	ldr	r3, [r7, #20]
 801c738:	801a      	strh	r2, [r3, #0]
 801c73a:	e03c      	b.n	801c7b6 <USB_EPStartXfer+0x3ae>
 801c73c:	1d7b      	adds	r3, r7, #5
 801c73e:	33ff      	adds	r3, #255	@ 0xff
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	085b      	lsrs	r3, r3, #1
 801c744:	21fc      	movs	r1, #252	@ 0xfc
 801c746:	187a      	adds	r2, r7, r1
 801c748:	6013      	str	r3, [r2, #0]
 801c74a:	1d7b      	adds	r3, r7, #5
 801c74c:	33ff      	adds	r3, #255	@ 0xff
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	2201      	movs	r2, #1
 801c752:	4013      	ands	r3, r2
 801c754:	d004      	beq.n	801c760 <USB_EPStartXfer+0x358>
 801c756:	187b      	adds	r3, r7, r1
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	3301      	adds	r3, #1
 801c75c:	187a      	adds	r2, r7, r1
 801c75e:	6013      	str	r3, [r2, #0]
 801c760:	697b      	ldr	r3, [r7, #20]
 801c762:	881b      	ldrh	r3, [r3, #0]
 801c764:	b29a      	uxth	r2, r3
 801c766:	23fc      	movs	r3, #252	@ 0xfc
 801c768:	18fb      	adds	r3, r7, r3
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	b29b      	uxth	r3, r3
 801c76e:	029b      	lsls	r3, r3, #10
 801c770:	b29b      	uxth	r3, r3
 801c772:	4313      	orrs	r3, r2
 801c774:	b29a      	uxth	r2, r3
 801c776:	697b      	ldr	r3, [r7, #20]
 801c778:	801a      	strh	r2, [r3, #0]
 801c77a:	e01c      	b.n	801c7b6 <USB_EPStartXfer+0x3ae>
 801c77c:	683b      	ldr	r3, [r7, #0]
 801c77e:	785b      	ldrb	r3, [r3, #1]
 801c780:	2b01      	cmp	r3, #1
 801c782:	d118      	bne.n	801c7b6 <USB_EPStartXfer+0x3ae>
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	623b      	str	r3, [r7, #32]
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	2250      	movs	r2, #80	@ 0x50
 801c78c:	5a9b      	ldrh	r3, [r3, r2]
 801c78e:	b29b      	uxth	r3, r3
 801c790:	001a      	movs	r2, r3
 801c792:	6a3b      	ldr	r3, [r7, #32]
 801c794:	189b      	adds	r3, r3, r2
 801c796:	623b      	str	r3, [r7, #32]
 801c798:	683b      	ldr	r3, [r7, #0]
 801c79a:	781b      	ldrb	r3, [r3, #0]
 801c79c:	00da      	lsls	r2, r3, #3
 801c79e:	6a3b      	ldr	r3, [r7, #32]
 801c7a0:	18d3      	adds	r3, r2, r3
 801c7a2:	4a0e      	ldr	r2, [pc, #56]	@ (801c7dc <USB_EPStartXfer+0x3d4>)
 801c7a4:	4694      	mov	ip, r2
 801c7a6:	4463      	add	r3, ip
 801c7a8:	61fb      	str	r3, [r7, #28]
 801c7aa:	1d7b      	adds	r3, r7, #5
 801c7ac:	33ff      	adds	r3, #255	@ 0xff
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	b29a      	uxth	r2, r3
 801c7b2:	69fb      	ldr	r3, [r7, #28]
 801c7b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801c7b6:	2076      	movs	r0, #118	@ 0x76
 801c7b8:	183b      	adds	r3, r7, r0
 801c7ba:	683a      	ldr	r2, [r7, #0]
 801c7bc:	8912      	ldrh	r2, [r2, #8]
 801c7be:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c7c0:	683b      	ldr	r3, [r7, #0]
 801c7c2:	6959      	ldr	r1, [r3, #20]
 801c7c4:	1d7b      	adds	r3, r7, #5
 801c7c6:	33ff      	adds	r3, #255	@ 0xff
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	b29c      	uxth	r4, r3
 801c7cc:	183b      	adds	r3, r7, r0
 801c7ce:	881a      	ldrh	r2, [r3, #0]
 801c7d0:	6878      	ldr	r0, [r7, #4]
 801c7d2:	0023      	movs	r3, r4
 801c7d4:	f001 f88a 	bl	801d8ec <USB_WritePMA>
 801c7d8:	e329      	b.n	801ce2e <USB_EPStartXfer+0xa26>
 801c7da:	46c0      	nop			@ (mov r8, r8)
 801c7dc:	00000402 	.word	0x00000402
 801c7e0:	ffff8f8f 	.word	0xffff8f8f
 801c7e4:	ffff8180 	.word	0xffff8180
 801c7e8:	00000406 	.word	0x00000406
 801c7ec:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c7f0:	683b      	ldr	r3, [r7, #0]
 801c7f2:	785b      	ldrb	r3, [r3, #1]
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d000      	beq.n	801c7fa <USB_EPStartXfer+0x3f2>
 801c7f8:	e070      	b.n	801c8dc <USB_EPStartXfer+0x4d4>
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	2250      	movs	r2, #80	@ 0x50
 801c802:	5a9b      	ldrh	r3, [r3, r2]
 801c804:	b29b      	uxth	r3, r3
 801c806:	001a      	movs	r2, r3
 801c808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c80a:	189b      	adds	r3, r3, r2
 801c80c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c80e:	683b      	ldr	r3, [r7, #0]
 801c810:	781b      	ldrb	r3, [r3, #0]
 801c812:	00da      	lsls	r2, r3, #3
 801c814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c816:	18d3      	adds	r3, r2, r3
 801c818:	4acd      	ldr	r2, [pc, #820]	@ (801cb50 <USB_EPStartXfer+0x748>)
 801c81a:	4694      	mov	ip, r2
 801c81c:	4463      	add	r3, ip
 801c81e:	647b      	str	r3, [r7, #68]	@ 0x44
 801c820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c822:	881b      	ldrh	r3, [r3, #0]
 801c824:	b29b      	uxth	r3, r3
 801c826:	059b      	lsls	r3, r3, #22
 801c828:	0d9b      	lsrs	r3, r3, #22
 801c82a:	b29a      	uxth	r2, r3
 801c82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c82e:	801a      	strh	r2, [r3, #0]
 801c830:	1d7b      	adds	r3, r7, #5
 801c832:	33ff      	adds	r3, #255	@ 0xff
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	2b3e      	cmp	r3, #62	@ 0x3e
 801c838:	d922      	bls.n	801c880 <USB_EPStartXfer+0x478>
 801c83a:	1d7b      	adds	r3, r7, #5
 801c83c:	33ff      	adds	r3, #255	@ 0xff
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	095b      	lsrs	r3, r3, #5
 801c842:	21f8      	movs	r1, #248	@ 0xf8
 801c844:	187a      	adds	r2, r7, r1
 801c846:	6013      	str	r3, [r2, #0]
 801c848:	1d7b      	adds	r3, r7, #5
 801c84a:	33ff      	adds	r3, #255	@ 0xff
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	221f      	movs	r2, #31
 801c850:	4013      	ands	r3, r2
 801c852:	d104      	bne.n	801c85e <USB_EPStartXfer+0x456>
 801c854:	187b      	adds	r3, r7, r1
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	3b01      	subs	r3, #1
 801c85a:	187a      	adds	r2, r7, r1
 801c85c:	6013      	str	r3, [r2, #0]
 801c85e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c860:	881b      	ldrh	r3, [r3, #0]
 801c862:	b29a      	uxth	r2, r3
 801c864:	23f8      	movs	r3, #248	@ 0xf8
 801c866:	18fb      	adds	r3, r7, r3
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	b29b      	uxth	r3, r3
 801c86c:	029b      	lsls	r3, r3, #10
 801c86e:	b29b      	uxth	r3, r3
 801c870:	4313      	orrs	r3, r2
 801c872:	b29b      	uxth	r3, r3
 801c874:	4ab7      	ldr	r2, [pc, #732]	@ (801cb54 <USB_EPStartXfer+0x74c>)
 801c876:	4313      	orrs	r3, r2
 801c878:	b29a      	uxth	r2, r3
 801c87a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c87c:	801a      	strh	r2, [r3, #0]
 801c87e:	e04a      	b.n	801c916 <USB_EPStartXfer+0x50e>
 801c880:	1d7b      	adds	r3, r7, #5
 801c882:	33ff      	adds	r3, #255	@ 0xff
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d108      	bne.n	801c89c <USB_EPStartXfer+0x494>
 801c88a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c88c:	881b      	ldrh	r3, [r3, #0]
 801c88e:	b29b      	uxth	r3, r3
 801c890:	4ab0      	ldr	r2, [pc, #704]	@ (801cb54 <USB_EPStartXfer+0x74c>)
 801c892:	4313      	orrs	r3, r2
 801c894:	b29a      	uxth	r2, r3
 801c896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c898:	801a      	strh	r2, [r3, #0]
 801c89a:	e03c      	b.n	801c916 <USB_EPStartXfer+0x50e>
 801c89c:	1d7b      	adds	r3, r7, #5
 801c89e:	33ff      	adds	r3, #255	@ 0xff
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	085b      	lsrs	r3, r3, #1
 801c8a4:	21f8      	movs	r1, #248	@ 0xf8
 801c8a6:	187a      	adds	r2, r7, r1
 801c8a8:	6013      	str	r3, [r2, #0]
 801c8aa:	1d7b      	adds	r3, r7, #5
 801c8ac:	33ff      	adds	r3, #255	@ 0xff
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	2201      	movs	r2, #1
 801c8b2:	4013      	ands	r3, r2
 801c8b4:	d004      	beq.n	801c8c0 <USB_EPStartXfer+0x4b8>
 801c8b6:	187b      	adds	r3, r7, r1
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	3301      	adds	r3, #1
 801c8bc:	187a      	adds	r2, r7, r1
 801c8be:	6013      	str	r3, [r2, #0]
 801c8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c8c2:	881b      	ldrh	r3, [r3, #0]
 801c8c4:	b29a      	uxth	r2, r3
 801c8c6:	23f8      	movs	r3, #248	@ 0xf8
 801c8c8:	18fb      	adds	r3, r7, r3
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	b29b      	uxth	r3, r3
 801c8ce:	029b      	lsls	r3, r3, #10
 801c8d0:	b29b      	uxth	r3, r3
 801c8d2:	4313      	orrs	r3, r2
 801c8d4:	b29a      	uxth	r2, r3
 801c8d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c8d8:	801a      	strh	r2, [r3, #0]
 801c8da:	e01c      	b.n	801c916 <USB_EPStartXfer+0x50e>
 801c8dc:	683b      	ldr	r3, [r7, #0]
 801c8de:	785b      	ldrb	r3, [r3, #1]
 801c8e0:	2b01      	cmp	r3, #1
 801c8e2:	d118      	bne.n	801c916 <USB_EPStartXfer+0x50e>
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	653b      	str	r3, [r7, #80]	@ 0x50
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	2250      	movs	r2, #80	@ 0x50
 801c8ec:	5a9b      	ldrh	r3, [r3, r2]
 801c8ee:	b29b      	uxth	r3, r3
 801c8f0:	001a      	movs	r2, r3
 801c8f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c8f4:	189b      	adds	r3, r3, r2
 801c8f6:	653b      	str	r3, [r7, #80]	@ 0x50
 801c8f8:	683b      	ldr	r3, [r7, #0]
 801c8fa:	781b      	ldrb	r3, [r3, #0]
 801c8fc:	00da      	lsls	r2, r3, #3
 801c8fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c900:	18d3      	adds	r3, r2, r3
 801c902:	4a93      	ldr	r2, [pc, #588]	@ (801cb50 <USB_EPStartXfer+0x748>)
 801c904:	4694      	mov	ip, r2
 801c906:	4463      	add	r3, ip
 801c908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c90a:	1d7b      	adds	r3, r7, #5
 801c90c:	33ff      	adds	r3, #255	@ 0xff
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	b29a      	uxth	r2, r3
 801c912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c914:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801c916:	2076      	movs	r0, #118	@ 0x76
 801c918:	183b      	adds	r3, r7, r0
 801c91a:	683a      	ldr	r2, [r7, #0]
 801c91c:	8912      	ldrh	r2, [r2, #8]
 801c91e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	6959      	ldr	r1, [r3, #20]
 801c924:	1d7b      	adds	r3, r7, #5
 801c926:	33ff      	adds	r3, #255	@ 0xff
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	b29c      	uxth	r4, r3
 801c92c:	183b      	adds	r3, r7, r0
 801c92e:	881a      	ldrh	r2, [r3, #0]
 801c930:	6878      	ldr	r0, [r7, #4]
 801c932:	0023      	movs	r3, r4
 801c934:	f000 ffda 	bl	801d8ec <USB_WritePMA>
            ep->xfer_buff += len;
 801c938:	683b      	ldr	r3, [r7, #0]
 801c93a:	695a      	ldr	r2, [r3, #20]
 801c93c:	1d7b      	adds	r3, r7, #5
 801c93e:	33ff      	adds	r3, #255	@ 0xff
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	18d2      	adds	r2, r2, r3
 801c944:	683b      	ldr	r3, [r7, #0]
 801c946:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801c948:	683b      	ldr	r3, [r7, #0]
 801c94a:	6a1a      	ldr	r2, [r3, #32]
 801c94c:	683b      	ldr	r3, [r7, #0]
 801c94e:	691b      	ldr	r3, [r3, #16]
 801c950:	429a      	cmp	r2, r3
 801c952:	d908      	bls.n	801c966 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801c954:	683b      	ldr	r3, [r7, #0]
 801c956:	6a1a      	ldr	r2, [r3, #32]
 801c958:	1d7b      	adds	r3, r7, #5
 801c95a:	33ff      	adds	r3, #255	@ 0xff
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	1ad2      	subs	r2, r2, r3
 801c960:	683b      	ldr	r3, [r7, #0]
 801c962:	621a      	str	r2, [r3, #32]
 801c964:	e007      	b.n	801c976 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801c966:	683b      	ldr	r3, [r7, #0]
 801c968:	6a1b      	ldr	r3, [r3, #32]
 801c96a:	1d7a      	adds	r2, r7, #5
 801c96c:	32ff      	adds	r2, #255	@ 0xff
 801c96e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801c970:	683b      	ldr	r3, [r7, #0]
 801c972:	2200      	movs	r2, #0
 801c974:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	643b      	str	r3, [r7, #64]	@ 0x40
 801c97a:	683b      	ldr	r3, [r7, #0]
 801c97c:	785b      	ldrb	r3, [r3, #1]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d000      	beq.n	801c984 <USB_EPStartXfer+0x57c>
 801c982:	e070      	b.n	801ca66 <USB_EPStartXfer+0x65e>
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	2250      	movs	r2, #80	@ 0x50
 801c98c:	5a9b      	ldrh	r3, [r3, r2]
 801c98e:	b29b      	uxth	r3, r3
 801c990:	001a      	movs	r2, r3
 801c992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c994:	189b      	adds	r3, r3, r2
 801c996:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	781b      	ldrb	r3, [r3, #0]
 801c99c:	00da      	lsls	r2, r3, #3
 801c99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9a0:	18d3      	adds	r3, r2, r3
 801c9a2:	4a6d      	ldr	r2, [pc, #436]	@ (801cb58 <USB_EPStartXfer+0x750>)
 801c9a4:	4694      	mov	ip, r2
 801c9a6:	4463      	add	r3, ip
 801c9a8:	637b      	str	r3, [r7, #52]	@ 0x34
 801c9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9ac:	881b      	ldrh	r3, [r3, #0]
 801c9ae:	b29b      	uxth	r3, r3
 801c9b0:	059b      	lsls	r3, r3, #22
 801c9b2:	0d9b      	lsrs	r3, r3, #22
 801c9b4:	b29a      	uxth	r2, r3
 801c9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9b8:	801a      	strh	r2, [r3, #0]
 801c9ba:	1d7b      	adds	r3, r7, #5
 801c9bc:	33ff      	adds	r3, #255	@ 0xff
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	2b3e      	cmp	r3, #62	@ 0x3e
 801c9c2:	d922      	bls.n	801ca0a <USB_EPStartXfer+0x602>
 801c9c4:	1d7b      	adds	r3, r7, #5
 801c9c6:	33ff      	adds	r3, #255	@ 0xff
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	095b      	lsrs	r3, r3, #5
 801c9cc:	21f4      	movs	r1, #244	@ 0xf4
 801c9ce:	187a      	adds	r2, r7, r1
 801c9d0:	6013      	str	r3, [r2, #0]
 801c9d2:	1d7b      	adds	r3, r7, #5
 801c9d4:	33ff      	adds	r3, #255	@ 0xff
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	221f      	movs	r2, #31
 801c9da:	4013      	ands	r3, r2
 801c9dc:	d104      	bne.n	801c9e8 <USB_EPStartXfer+0x5e0>
 801c9de:	187b      	adds	r3, r7, r1
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	3b01      	subs	r3, #1
 801c9e4:	187a      	adds	r2, r7, r1
 801c9e6:	6013      	str	r3, [r2, #0]
 801c9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9ea:	881b      	ldrh	r3, [r3, #0]
 801c9ec:	b29a      	uxth	r2, r3
 801c9ee:	23f4      	movs	r3, #244	@ 0xf4
 801c9f0:	18fb      	adds	r3, r7, r3
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	b29b      	uxth	r3, r3
 801c9f6:	029b      	lsls	r3, r3, #10
 801c9f8:	b29b      	uxth	r3, r3
 801c9fa:	4313      	orrs	r3, r2
 801c9fc:	b29b      	uxth	r3, r3
 801c9fe:	4a55      	ldr	r2, [pc, #340]	@ (801cb54 <USB_EPStartXfer+0x74c>)
 801ca00:	4313      	orrs	r3, r2
 801ca02:	b29a      	uxth	r2, r3
 801ca04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca06:	801a      	strh	r2, [r3, #0]
 801ca08:	e048      	b.n	801ca9c <USB_EPStartXfer+0x694>
 801ca0a:	1d7b      	adds	r3, r7, #5
 801ca0c:	33ff      	adds	r3, #255	@ 0xff
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d108      	bne.n	801ca26 <USB_EPStartXfer+0x61e>
 801ca14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca16:	881b      	ldrh	r3, [r3, #0]
 801ca18:	b29b      	uxth	r3, r3
 801ca1a:	4a4e      	ldr	r2, [pc, #312]	@ (801cb54 <USB_EPStartXfer+0x74c>)
 801ca1c:	4313      	orrs	r3, r2
 801ca1e:	b29a      	uxth	r2, r3
 801ca20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca22:	801a      	strh	r2, [r3, #0]
 801ca24:	e03a      	b.n	801ca9c <USB_EPStartXfer+0x694>
 801ca26:	1d7b      	adds	r3, r7, #5
 801ca28:	33ff      	adds	r3, #255	@ 0xff
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	085b      	lsrs	r3, r3, #1
 801ca2e:	21f4      	movs	r1, #244	@ 0xf4
 801ca30:	187a      	adds	r2, r7, r1
 801ca32:	6013      	str	r3, [r2, #0]
 801ca34:	1d7b      	adds	r3, r7, #5
 801ca36:	33ff      	adds	r3, #255	@ 0xff
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	2201      	movs	r2, #1
 801ca3c:	4013      	ands	r3, r2
 801ca3e:	d004      	beq.n	801ca4a <USB_EPStartXfer+0x642>
 801ca40:	187b      	adds	r3, r7, r1
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	3301      	adds	r3, #1
 801ca46:	187a      	adds	r2, r7, r1
 801ca48:	6013      	str	r3, [r2, #0]
 801ca4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca4c:	881b      	ldrh	r3, [r3, #0]
 801ca4e:	b29a      	uxth	r2, r3
 801ca50:	23f4      	movs	r3, #244	@ 0xf4
 801ca52:	18fb      	adds	r3, r7, r3
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	b29b      	uxth	r3, r3
 801ca58:	029b      	lsls	r3, r3, #10
 801ca5a:	b29b      	uxth	r3, r3
 801ca5c:	4313      	orrs	r3, r2
 801ca5e:	b29a      	uxth	r2, r3
 801ca60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca62:	801a      	strh	r2, [r3, #0]
 801ca64:	e01a      	b.n	801ca9c <USB_EPStartXfer+0x694>
 801ca66:	683b      	ldr	r3, [r7, #0]
 801ca68:	785b      	ldrb	r3, [r3, #1]
 801ca6a:	2b01      	cmp	r3, #1
 801ca6c:	d116      	bne.n	801ca9c <USB_EPStartXfer+0x694>
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	2250      	movs	r2, #80	@ 0x50
 801ca72:	5a9b      	ldrh	r3, [r3, r2]
 801ca74:	b29b      	uxth	r3, r3
 801ca76:	001a      	movs	r2, r3
 801ca78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ca7a:	189b      	adds	r3, r3, r2
 801ca7c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ca7e:	683b      	ldr	r3, [r7, #0]
 801ca80:	781b      	ldrb	r3, [r3, #0]
 801ca82:	00da      	lsls	r2, r3, #3
 801ca84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ca86:	18d3      	adds	r3, r2, r3
 801ca88:	4a33      	ldr	r2, [pc, #204]	@ (801cb58 <USB_EPStartXfer+0x750>)
 801ca8a:	4694      	mov	ip, r2
 801ca8c:	4463      	add	r3, ip
 801ca8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ca90:	1d7b      	adds	r3, r7, #5
 801ca92:	33ff      	adds	r3, #255	@ 0xff
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	b29a      	uxth	r2, r3
 801ca98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ca9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801ca9c:	2076      	movs	r0, #118	@ 0x76
 801ca9e:	183b      	adds	r3, r7, r0
 801caa0:	683a      	ldr	r2, [r7, #0]
 801caa2:	8952      	ldrh	r2, [r2, #10]
 801caa4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801caa6:	683b      	ldr	r3, [r7, #0]
 801caa8:	6959      	ldr	r1, [r3, #20]
 801caaa:	1d7b      	adds	r3, r7, #5
 801caac:	33ff      	adds	r3, #255	@ 0xff
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	b29c      	uxth	r4, r3
 801cab2:	183b      	adds	r3, r7, r0
 801cab4:	881a      	ldrh	r2, [r3, #0]
 801cab6:	6878      	ldr	r0, [r7, #4]
 801cab8:	0023      	movs	r3, r4
 801caba:	f000 ff17 	bl	801d8ec <USB_WritePMA>
 801cabe:	e1b6      	b.n	801ce2e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801cac0:	683b      	ldr	r3, [r7, #0]
 801cac2:	6a1b      	ldr	r3, [r3, #32]
 801cac4:	1d7a      	adds	r2, r7, #5
 801cac6:	32ff      	adds	r2, #255	@ 0xff
 801cac8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801caca:	687a      	ldr	r2, [r7, #4]
 801cacc:	683b      	ldr	r3, [r7, #0]
 801cace:	781b      	ldrb	r3, [r3, #0]
 801cad0:	009b      	lsls	r3, r3, #2
 801cad2:	18d3      	adds	r3, r2, r3
 801cad4:	881b      	ldrh	r3, [r3, #0]
 801cad6:	b29a      	uxth	r2, r3
 801cad8:	2062      	movs	r0, #98	@ 0x62
 801cada:	183b      	adds	r3, r7, r0
 801cadc:	491f      	ldr	r1, [pc, #124]	@ (801cb5c <USB_EPStartXfer+0x754>)
 801cade:	400a      	ands	r2, r1
 801cae0:	801a      	strh	r2, [r3, #0]
 801cae2:	687a      	ldr	r2, [r7, #4]
 801cae4:	683b      	ldr	r3, [r7, #0]
 801cae6:	781b      	ldrb	r3, [r3, #0]
 801cae8:	009b      	lsls	r3, r3, #2
 801caea:	18d3      	adds	r3, r2, r3
 801caec:	183a      	adds	r2, r7, r0
 801caee:	8812      	ldrh	r2, [r2, #0]
 801caf0:	491b      	ldr	r1, [pc, #108]	@ (801cb60 <USB_EPStartXfer+0x758>)
 801caf2:	430a      	orrs	r2, r1
 801caf4:	b292      	uxth	r2, r2
 801caf6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	2250      	movs	r2, #80	@ 0x50
 801cb00:	5a9b      	ldrh	r3, [r3, r2]
 801cb02:	b29b      	uxth	r3, r3
 801cb04:	001a      	movs	r2, r3
 801cb06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cb08:	189b      	adds	r3, r3, r2
 801cb0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cb0c:	683b      	ldr	r3, [r7, #0]
 801cb0e:	781b      	ldrb	r3, [r3, #0]
 801cb10:	00da      	lsls	r2, r3, #3
 801cb12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cb14:	18d3      	adds	r3, r2, r3
 801cb16:	4a0e      	ldr	r2, [pc, #56]	@ (801cb50 <USB_EPStartXfer+0x748>)
 801cb18:	4694      	mov	ip, r2
 801cb1a:	4463      	add	r3, ip
 801cb1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cb1e:	1d7b      	adds	r3, r7, #5
 801cb20:	33ff      	adds	r3, #255	@ 0xff
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	b29a      	uxth	r2, r3
 801cb26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cb28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801cb2a:	2076      	movs	r0, #118	@ 0x76
 801cb2c:	183b      	adds	r3, r7, r0
 801cb2e:	683a      	ldr	r2, [r7, #0]
 801cb30:	8912      	ldrh	r2, [r2, #8]
 801cb32:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801cb34:	683b      	ldr	r3, [r7, #0]
 801cb36:	6959      	ldr	r1, [r3, #20]
 801cb38:	1d7b      	adds	r3, r7, #5
 801cb3a:	33ff      	adds	r3, #255	@ 0xff
 801cb3c:	681b      	ldr	r3, [r3, #0]
 801cb3e:	b29c      	uxth	r4, r3
 801cb40:	183b      	adds	r3, r7, r0
 801cb42:	881a      	ldrh	r2, [r3, #0]
 801cb44:	6878      	ldr	r0, [r7, #4]
 801cb46:	0023      	movs	r3, r4
 801cb48:	f000 fed0 	bl	801d8ec <USB_WritePMA>
 801cb4c:	e16f      	b.n	801ce2e <USB_EPStartXfer+0xa26>
 801cb4e:	46c0      	nop			@ (mov r8, r8)
 801cb50:	00000402 	.word	0x00000402
 801cb54:	ffff8000 	.word	0xffff8000
 801cb58:	00000406 	.word	0x00000406
 801cb5c:	ffff8e8f 	.word	0xffff8e8f
 801cb60:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801cb64:	683b      	ldr	r3, [r7, #0]
 801cb66:	6a1a      	ldr	r2, [r3, #32]
 801cb68:	1d7b      	adds	r3, r7, #5
 801cb6a:	33ff      	adds	r3, #255	@ 0xff
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	1ad2      	subs	r2, r2, r3
 801cb70:	683b      	ldr	r3, [r7, #0]
 801cb72:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801cb74:	687a      	ldr	r2, [r7, #4]
 801cb76:	683b      	ldr	r3, [r7, #0]
 801cb78:	781b      	ldrb	r3, [r3, #0]
 801cb7a:	009b      	lsls	r3, r3, #2
 801cb7c:	18d3      	adds	r3, r2, r3
 801cb7e:	881b      	ldrh	r3, [r3, #0]
 801cb80:	b29b      	uxth	r3, r3
 801cb82:	001a      	movs	r2, r3
 801cb84:	2340      	movs	r3, #64	@ 0x40
 801cb86:	4013      	ands	r3, r2
 801cb88:	d100      	bne.n	801cb8c <USB_EPStartXfer+0x784>
 801cb8a:	e0a4      	b.n	801ccd6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	673b      	str	r3, [r7, #112]	@ 0x70
 801cb90:	683b      	ldr	r3, [r7, #0]
 801cb92:	785b      	ldrb	r3, [r3, #1]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d000      	beq.n	801cb9a <USB_EPStartXfer+0x792>
 801cb98:	e070      	b.n	801cc7c <USB_EPStartXfer+0x874>
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	2250      	movs	r2, #80	@ 0x50
 801cba2:	5a9b      	ldrh	r3, [r3, r2]
 801cba4:	b29b      	uxth	r3, r3
 801cba6:	001a      	movs	r2, r3
 801cba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbaa:	189b      	adds	r3, r3, r2
 801cbac:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cbae:	683b      	ldr	r3, [r7, #0]
 801cbb0:	781b      	ldrb	r3, [r3, #0]
 801cbb2:	00da      	lsls	r2, r3, #3
 801cbb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbb6:	18d3      	adds	r3, r2, r3
 801cbb8:	4abc      	ldr	r2, [pc, #752]	@ (801ceac <USB_EPStartXfer+0xaa4>)
 801cbba:	4694      	mov	ip, r2
 801cbbc:	4463      	add	r3, ip
 801cbbe:	667b      	str	r3, [r7, #100]	@ 0x64
 801cbc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cbc2:	881b      	ldrh	r3, [r3, #0]
 801cbc4:	b29b      	uxth	r3, r3
 801cbc6:	059b      	lsls	r3, r3, #22
 801cbc8:	0d9b      	lsrs	r3, r3, #22
 801cbca:	b29a      	uxth	r2, r3
 801cbcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cbce:	801a      	strh	r2, [r3, #0]
 801cbd0:	1d7b      	adds	r3, r7, #5
 801cbd2:	33ff      	adds	r3, #255	@ 0xff
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	2b3e      	cmp	r3, #62	@ 0x3e
 801cbd8:	d922      	bls.n	801cc20 <USB_EPStartXfer+0x818>
 801cbda:	1d7b      	adds	r3, r7, #5
 801cbdc:	33ff      	adds	r3, #255	@ 0xff
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	095b      	lsrs	r3, r3, #5
 801cbe2:	21f0      	movs	r1, #240	@ 0xf0
 801cbe4:	187a      	adds	r2, r7, r1
 801cbe6:	6013      	str	r3, [r2, #0]
 801cbe8:	1d7b      	adds	r3, r7, #5
 801cbea:	33ff      	adds	r3, #255	@ 0xff
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	221f      	movs	r2, #31
 801cbf0:	4013      	ands	r3, r2
 801cbf2:	d104      	bne.n	801cbfe <USB_EPStartXfer+0x7f6>
 801cbf4:	187b      	adds	r3, r7, r1
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	3b01      	subs	r3, #1
 801cbfa:	187a      	adds	r2, r7, r1
 801cbfc:	6013      	str	r3, [r2, #0]
 801cbfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cc00:	881b      	ldrh	r3, [r3, #0]
 801cc02:	b29a      	uxth	r2, r3
 801cc04:	23f0      	movs	r3, #240	@ 0xf0
 801cc06:	18fb      	adds	r3, r7, r3
 801cc08:	681b      	ldr	r3, [r3, #0]
 801cc0a:	b29b      	uxth	r3, r3
 801cc0c:	029b      	lsls	r3, r3, #10
 801cc0e:	b29b      	uxth	r3, r3
 801cc10:	4313      	orrs	r3, r2
 801cc12:	b29b      	uxth	r3, r3
 801cc14:	4aa6      	ldr	r2, [pc, #664]	@ (801ceb0 <USB_EPStartXfer+0xaa8>)
 801cc16:	4313      	orrs	r3, r2
 801cc18:	b29a      	uxth	r2, r3
 801cc1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cc1c:	801a      	strh	r2, [r3, #0]
 801cc1e:	e048      	b.n	801ccb2 <USB_EPStartXfer+0x8aa>
 801cc20:	1d7b      	adds	r3, r7, #5
 801cc22:	33ff      	adds	r3, #255	@ 0xff
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d108      	bne.n	801cc3c <USB_EPStartXfer+0x834>
 801cc2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cc2c:	881b      	ldrh	r3, [r3, #0]
 801cc2e:	b29b      	uxth	r3, r3
 801cc30:	4a9f      	ldr	r2, [pc, #636]	@ (801ceb0 <USB_EPStartXfer+0xaa8>)
 801cc32:	4313      	orrs	r3, r2
 801cc34:	b29a      	uxth	r2, r3
 801cc36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cc38:	801a      	strh	r2, [r3, #0]
 801cc3a:	e03a      	b.n	801ccb2 <USB_EPStartXfer+0x8aa>
 801cc3c:	1d7b      	adds	r3, r7, #5
 801cc3e:	33ff      	adds	r3, #255	@ 0xff
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	085b      	lsrs	r3, r3, #1
 801cc44:	21f0      	movs	r1, #240	@ 0xf0
 801cc46:	187a      	adds	r2, r7, r1
 801cc48:	6013      	str	r3, [r2, #0]
 801cc4a:	1d7b      	adds	r3, r7, #5
 801cc4c:	33ff      	adds	r3, #255	@ 0xff
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	2201      	movs	r2, #1
 801cc52:	4013      	ands	r3, r2
 801cc54:	d004      	beq.n	801cc60 <USB_EPStartXfer+0x858>
 801cc56:	187b      	adds	r3, r7, r1
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	3301      	adds	r3, #1
 801cc5c:	187a      	adds	r2, r7, r1
 801cc5e:	6013      	str	r3, [r2, #0]
 801cc60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cc62:	881b      	ldrh	r3, [r3, #0]
 801cc64:	b29a      	uxth	r2, r3
 801cc66:	23f0      	movs	r3, #240	@ 0xf0
 801cc68:	18fb      	adds	r3, r7, r3
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	b29b      	uxth	r3, r3
 801cc6e:	029b      	lsls	r3, r3, #10
 801cc70:	b29b      	uxth	r3, r3
 801cc72:	4313      	orrs	r3, r2
 801cc74:	b29a      	uxth	r2, r3
 801cc76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cc78:	801a      	strh	r2, [r3, #0]
 801cc7a:	e01a      	b.n	801ccb2 <USB_EPStartXfer+0x8aa>
 801cc7c:	683b      	ldr	r3, [r7, #0]
 801cc7e:	785b      	ldrb	r3, [r3, #1]
 801cc80:	2b01      	cmp	r3, #1
 801cc82:	d116      	bne.n	801ccb2 <USB_EPStartXfer+0x8aa>
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	2250      	movs	r2, #80	@ 0x50
 801cc88:	5a9b      	ldrh	r3, [r3, r2]
 801cc8a:	b29b      	uxth	r3, r3
 801cc8c:	001a      	movs	r2, r3
 801cc8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cc90:	189b      	adds	r3, r3, r2
 801cc92:	673b      	str	r3, [r7, #112]	@ 0x70
 801cc94:	683b      	ldr	r3, [r7, #0]
 801cc96:	781b      	ldrb	r3, [r3, #0]
 801cc98:	00da      	lsls	r2, r3, #3
 801cc9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cc9c:	18d3      	adds	r3, r2, r3
 801cc9e:	4a83      	ldr	r2, [pc, #524]	@ (801ceac <USB_EPStartXfer+0xaa4>)
 801cca0:	4694      	mov	ip, r2
 801cca2:	4463      	add	r3, ip
 801cca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801cca6:	1d7b      	adds	r3, r7, #5
 801cca8:	33ff      	adds	r3, #255	@ 0xff
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	b29a      	uxth	r2, r3
 801ccae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ccb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801ccb2:	2076      	movs	r0, #118	@ 0x76
 801ccb4:	183b      	adds	r3, r7, r0
 801ccb6:	683a      	ldr	r2, [r7, #0]
 801ccb8:	8952      	ldrh	r2, [r2, #10]
 801ccba:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ccbc:	683b      	ldr	r3, [r7, #0]
 801ccbe:	6959      	ldr	r1, [r3, #20]
 801ccc0:	1d7b      	adds	r3, r7, #5
 801ccc2:	33ff      	adds	r3, #255	@ 0xff
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	b29c      	uxth	r4, r3
 801ccc8:	183b      	adds	r3, r7, r0
 801ccca:	881a      	ldrh	r2, [r3, #0]
 801cccc:	6878      	ldr	r0, [r7, #4]
 801ccce:	0023      	movs	r3, r4
 801ccd0:	f000 fe0c 	bl	801d8ec <USB_WritePMA>
 801ccd4:	e0ab      	b.n	801ce2e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801ccd6:	683b      	ldr	r3, [r7, #0]
 801ccd8:	785b      	ldrb	r3, [r3, #1]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d000      	beq.n	801cce0 <USB_EPStartXfer+0x8d8>
 801ccde:	e070      	b.n	801cdc2 <USB_EPStartXfer+0x9ba>
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	2250      	movs	r2, #80	@ 0x50
 801cce8:	5a9b      	ldrh	r3, [r3, r2]
 801ccea:	b29b      	uxth	r3, r3
 801ccec:	001a      	movs	r2, r3
 801ccee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ccf0:	189b      	adds	r3, r3, r2
 801ccf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ccf4:	683b      	ldr	r3, [r7, #0]
 801ccf6:	781b      	ldrb	r3, [r3, #0]
 801ccf8:	00da      	lsls	r2, r3, #3
 801ccfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ccfc:	18d3      	adds	r3, r2, r3
 801ccfe:	4a6d      	ldr	r2, [pc, #436]	@ (801ceb4 <USB_EPStartXfer+0xaac>)
 801cd00:	4694      	mov	ip, r2
 801cd02:	4463      	add	r3, ip
 801cd04:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cd06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cd08:	881b      	ldrh	r3, [r3, #0]
 801cd0a:	b29b      	uxth	r3, r3
 801cd0c:	059b      	lsls	r3, r3, #22
 801cd0e:	0d9b      	lsrs	r3, r3, #22
 801cd10:	b29a      	uxth	r2, r3
 801cd12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cd14:	801a      	strh	r2, [r3, #0]
 801cd16:	1d7b      	adds	r3, r7, #5
 801cd18:	33ff      	adds	r3, #255	@ 0xff
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	2b3e      	cmp	r3, #62	@ 0x3e
 801cd1e:	d922      	bls.n	801cd66 <USB_EPStartXfer+0x95e>
 801cd20:	1d7b      	adds	r3, r7, #5
 801cd22:	33ff      	adds	r3, #255	@ 0xff
 801cd24:	681b      	ldr	r3, [r3, #0]
 801cd26:	095b      	lsrs	r3, r3, #5
 801cd28:	21ec      	movs	r1, #236	@ 0xec
 801cd2a:	187a      	adds	r2, r7, r1
 801cd2c:	6013      	str	r3, [r2, #0]
 801cd2e:	1d7b      	adds	r3, r7, #5
 801cd30:	33ff      	adds	r3, #255	@ 0xff
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	221f      	movs	r2, #31
 801cd36:	4013      	ands	r3, r2
 801cd38:	d104      	bne.n	801cd44 <USB_EPStartXfer+0x93c>
 801cd3a:	187b      	adds	r3, r7, r1
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	3b01      	subs	r3, #1
 801cd40:	187a      	adds	r2, r7, r1
 801cd42:	6013      	str	r3, [r2, #0]
 801cd44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cd46:	881b      	ldrh	r3, [r3, #0]
 801cd48:	b29a      	uxth	r2, r3
 801cd4a:	23ec      	movs	r3, #236	@ 0xec
 801cd4c:	18fb      	adds	r3, r7, r3
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	b29b      	uxth	r3, r3
 801cd52:	029b      	lsls	r3, r3, #10
 801cd54:	b29b      	uxth	r3, r3
 801cd56:	4313      	orrs	r3, r2
 801cd58:	b29b      	uxth	r3, r3
 801cd5a:	4a55      	ldr	r2, [pc, #340]	@ (801ceb0 <USB_EPStartXfer+0xaa8>)
 801cd5c:	4313      	orrs	r3, r2
 801cd5e:	b29a      	uxth	r2, r3
 801cd60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cd62:	801a      	strh	r2, [r3, #0]
 801cd64:	e052      	b.n	801ce0c <USB_EPStartXfer+0xa04>
 801cd66:	1d7b      	adds	r3, r7, #5
 801cd68:	33ff      	adds	r3, #255	@ 0xff
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d108      	bne.n	801cd82 <USB_EPStartXfer+0x97a>
 801cd70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cd72:	881b      	ldrh	r3, [r3, #0]
 801cd74:	b29b      	uxth	r3, r3
 801cd76:	4a4e      	ldr	r2, [pc, #312]	@ (801ceb0 <USB_EPStartXfer+0xaa8>)
 801cd78:	4313      	orrs	r3, r2
 801cd7a:	b29a      	uxth	r2, r3
 801cd7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cd7e:	801a      	strh	r2, [r3, #0]
 801cd80:	e044      	b.n	801ce0c <USB_EPStartXfer+0xa04>
 801cd82:	1d7b      	adds	r3, r7, #5
 801cd84:	33ff      	adds	r3, #255	@ 0xff
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	085b      	lsrs	r3, r3, #1
 801cd8a:	21ec      	movs	r1, #236	@ 0xec
 801cd8c:	187a      	adds	r2, r7, r1
 801cd8e:	6013      	str	r3, [r2, #0]
 801cd90:	1d7b      	adds	r3, r7, #5
 801cd92:	33ff      	adds	r3, #255	@ 0xff
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	2201      	movs	r2, #1
 801cd98:	4013      	ands	r3, r2
 801cd9a:	d004      	beq.n	801cda6 <USB_EPStartXfer+0x99e>
 801cd9c:	187b      	adds	r3, r7, r1
 801cd9e:	681b      	ldr	r3, [r3, #0]
 801cda0:	3301      	adds	r3, #1
 801cda2:	187a      	adds	r2, r7, r1
 801cda4:	6013      	str	r3, [r2, #0]
 801cda6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cda8:	881b      	ldrh	r3, [r3, #0]
 801cdaa:	b29a      	uxth	r2, r3
 801cdac:	23ec      	movs	r3, #236	@ 0xec
 801cdae:	18fb      	adds	r3, r7, r3
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	b29b      	uxth	r3, r3
 801cdb4:	029b      	lsls	r3, r3, #10
 801cdb6:	b29b      	uxth	r3, r3
 801cdb8:	4313      	orrs	r3, r2
 801cdba:	b29a      	uxth	r2, r3
 801cdbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cdbe:	801a      	strh	r2, [r3, #0]
 801cdc0:	e024      	b.n	801ce0c <USB_EPStartXfer+0xa04>
 801cdc2:	683b      	ldr	r3, [r7, #0]
 801cdc4:	785b      	ldrb	r3, [r3, #1]
 801cdc6:	2b01      	cmp	r3, #1
 801cdc8:	d120      	bne.n	801ce0c <USB_EPStartXfer+0xa04>
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	2184      	movs	r1, #132	@ 0x84
 801cdce:	187a      	adds	r2, r7, r1
 801cdd0:	6013      	str	r3, [r2, #0]
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	2250      	movs	r2, #80	@ 0x50
 801cdd6:	5a9b      	ldrh	r3, [r3, r2]
 801cdd8:	b29b      	uxth	r3, r3
 801cdda:	001a      	movs	r2, r3
 801cddc:	187b      	adds	r3, r7, r1
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	189b      	adds	r3, r3, r2
 801cde2:	187a      	adds	r2, r7, r1
 801cde4:	6013      	str	r3, [r2, #0]
 801cde6:	683b      	ldr	r3, [r7, #0]
 801cde8:	781b      	ldrb	r3, [r3, #0]
 801cdea:	00da      	lsls	r2, r3, #3
 801cdec:	187b      	adds	r3, r7, r1
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	18d3      	adds	r3, r2, r3
 801cdf2:	4a30      	ldr	r2, [pc, #192]	@ (801ceb4 <USB_EPStartXfer+0xaac>)
 801cdf4:	4694      	mov	ip, r2
 801cdf6:	4463      	add	r3, ip
 801cdf8:	2180      	movs	r1, #128	@ 0x80
 801cdfa:	187a      	adds	r2, r7, r1
 801cdfc:	6013      	str	r3, [r2, #0]
 801cdfe:	1d7b      	adds	r3, r7, #5
 801ce00:	33ff      	adds	r3, #255	@ 0xff
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	b29a      	uxth	r2, r3
 801ce06:	187b      	adds	r3, r7, r1
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801ce0c:	2076      	movs	r0, #118	@ 0x76
 801ce0e:	183b      	adds	r3, r7, r0
 801ce10:	683a      	ldr	r2, [r7, #0]
 801ce12:	8912      	ldrh	r2, [r2, #8]
 801ce14:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ce16:	683b      	ldr	r3, [r7, #0]
 801ce18:	6959      	ldr	r1, [r3, #20]
 801ce1a:	1d7b      	adds	r3, r7, #5
 801ce1c:	33ff      	adds	r3, #255	@ 0xff
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	b29c      	uxth	r4, r3
 801ce22:	183b      	adds	r3, r7, r0
 801ce24:	881a      	ldrh	r2, [r3, #0]
 801ce26:	6878      	ldr	r0, [r7, #4]
 801ce28:	0023      	movs	r3, r4
 801ce2a:	f000 fd5f 	bl	801d8ec <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801ce2e:	687a      	ldr	r2, [r7, #4]
 801ce30:	683b      	ldr	r3, [r7, #0]
 801ce32:	781b      	ldrb	r3, [r3, #0]
 801ce34:	009b      	lsls	r3, r3, #2
 801ce36:	18d3      	adds	r3, r2, r3
 801ce38:	881b      	ldrh	r3, [r3, #0]
 801ce3a:	b29a      	uxth	r2, r3
 801ce3c:	200a      	movs	r0, #10
 801ce3e:	183b      	adds	r3, r7, r0
 801ce40:	491d      	ldr	r1, [pc, #116]	@ (801ceb8 <USB_EPStartXfer+0xab0>)
 801ce42:	400a      	ands	r2, r1
 801ce44:	801a      	strh	r2, [r3, #0]
 801ce46:	183b      	adds	r3, r7, r0
 801ce48:	183a      	adds	r2, r7, r0
 801ce4a:	8812      	ldrh	r2, [r2, #0]
 801ce4c:	2110      	movs	r1, #16
 801ce4e:	404a      	eors	r2, r1
 801ce50:	801a      	strh	r2, [r3, #0]
 801ce52:	183b      	adds	r3, r7, r0
 801ce54:	183a      	adds	r2, r7, r0
 801ce56:	8812      	ldrh	r2, [r2, #0]
 801ce58:	2120      	movs	r1, #32
 801ce5a:	404a      	eors	r2, r1
 801ce5c:	801a      	strh	r2, [r3, #0]
 801ce5e:	687a      	ldr	r2, [r7, #4]
 801ce60:	683b      	ldr	r3, [r7, #0]
 801ce62:	781b      	ldrb	r3, [r3, #0]
 801ce64:	009b      	lsls	r3, r3, #2
 801ce66:	18d3      	adds	r3, r2, r3
 801ce68:	183a      	adds	r2, r7, r0
 801ce6a:	8812      	ldrh	r2, [r2, #0]
 801ce6c:	4913      	ldr	r1, [pc, #76]	@ (801cebc <USB_EPStartXfer+0xab4>)
 801ce6e:	430a      	orrs	r2, r1
 801ce70:	b292      	uxth	r2, r2
 801ce72:	801a      	strh	r2, [r3, #0]
 801ce74:	f000 fbf4 	bl	801d660 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801ce78:	683b      	ldr	r3, [r7, #0]
 801ce7a:	7b1b      	ldrb	r3, [r3, #12]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d000      	beq.n	801ce82 <USB_EPStartXfer+0xa7a>
 801ce80:	e0a9      	b.n	801cfd6 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801ce82:	683b      	ldr	r3, [r7, #0]
 801ce84:	699a      	ldr	r2, [r3, #24]
 801ce86:	683b      	ldr	r3, [r7, #0]
 801ce88:	691b      	ldr	r3, [r3, #16]
 801ce8a:	429a      	cmp	r2, r3
 801ce8c:	d918      	bls.n	801cec0 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801ce8e:	683b      	ldr	r3, [r7, #0]
 801ce90:	691b      	ldr	r3, [r3, #16]
 801ce92:	1d7a      	adds	r2, r7, #5
 801ce94:	32ff      	adds	r2, #255	@ 0xff
 801ce96:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801ce98:	683b      	ldr	r3, [r7, #0]
 801ce9a:	699a      	ldr	r2, [r3, #24]
 801ce9c:	1d7b      	adds	r3, r7, #5
 801ce9e:	33ff      	adds	r3, #255	@ 0xff
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	1ad2      	subs	r2, r2, r3
 801cea4:	683b      	ldr	r3, [r7, #0]
 801cea6:	619a      	str	r2, [r3, #24]
 801cea8:	e012      	b.n	801ced0 <USB_EPStartXfer+0xac8>
 801ceaa:	46c0      	nop			@ (mov r8, r8)
 801ceac:	00000406 	.word	0x00000406
 801ceb0:	ffff8000 	.word	0xffff8000
 801ceb4:	00000402 	.word	0x00000402
 801ceb8:	ffff8fbf 	.word	0xffff8fbf
 801cebc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801cec0:	683b      	ldr	r3, [r7, #0]
 801cec2:	699b      	ldr	r3, [r3, #24]
 801cec4:	1d7a      	adds	r2, r7, #5
 801cec6:	32ff      	adds	r2, #255	@ 0xff
 801cec8:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801ceca:	683b      	ldr	r3, [r7, #0]
 801cecc:	2200      	movs	r2, #0
 801cece:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	2190      	movs	r1, #144	@ 0x90
 801ced4:	187a      	adds	r2, r7, r1
 801ced6:	6013      	str	r3, [r2, #0]
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	2250      	movs	r2, #80	@ 0x50
 801cedc:	5a9b      	ldrh	r3, [r3, r2]
 801cede:	b29b      	uxth	r3, r3
 801cee0:	001a      	movs	r2, r3
 801cee2:	187b      	adds	r3, r7, r1
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	189b      	adds	r3, r3, r2
 801cee8:	187a      	adds	r2, r7, r1
 801ceea:	6013      	str	r3, [r2, #0]
 801ceec:	683b      	ldr	r3, [r7, #0]
 801ceee:	781b      	ldrb	r3, [r3, #0]
 801cef0:	00da      	lsls	r2, r3, #3
 801cef2:	187b      	adds	r3, r7, r1
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	18d3      	adds	r3, r2, r3
 801cef8:	4acf      	ldr	r2, [pc, #828]	@ (801d238 <USB_EPStartXfer+0xe30>)
 801cefa:	4694      	mov	ip, r2
 801cefc:	4463      	add	r3, ip
 801cefe:	218c      	movs	r1, #140	@ 0x8c
 801cf00:	187a      	adds	r2, r7, r1
 801cf02:	6013      	str	r3, [r2, #0]
 801cf04:	187b      	adds	r3, r7, r1
 801cf06:	681b      	ldr	r3, [r3, #0]
 801cf08:	881b      	ldrh	r3, [r3, #0]
 801cf0a:	b29b      	uxth	r3, r3
 801cf0c:	059b      	lsls	r3, r3, #22
 801cf0e:	0d9b      	lsrs	r3, r3, #22
 801cf10:	b29a      	uxth	r2, r3
 801cf12:	187b      	adds	r3, r7, r1
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	801a      	strh	r2, [r3, #0]
 801cf18:	1d7b      	adds	r3, r7, #5
 801cf1a:	33ff      	adds	r3, #255	@ 0xff
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	2b3e      	cmp	r3, #62	@ 0x3e
 801cf20:	d925      	bls.n	801cf6e <USB_EPStartXfer+0xb66>
 801cf22:	1d7b      	adds	r3, r7, #5
 801cf24:	33ff      	adds	r3, #255	@ 0xff
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	095b      	lsrs	r3, r3, #5
 801cf2a:	21e8      	movs	r1, #232	@ 0xe8
 801cf2c:	187a      	adds	r2, r7, r1
 801cf2e:	6013      	str	r3, [r2, #0]
 801cf30:	1d7b      	adds	r3, r7, #5
 801cf32:	33ff      	adds	r3, #255	@ 0xff
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	221f      	movs	r2, #31
 801cf38:	4013      	ands	r3, r2
 801cf3a:	d104      	bne.n	801cf46 <USB_EPStartXfer+0xb3e>
 801cf3c:	187b      	adds	r3, r7, r1
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	3b01      	subs	r3, #1
 801cf42:	187a      	adds	r2, r7, r1
 801cf44:	6013      	str	r3, [r2, #0]
 801cf46:	218c      	movs	r1, #140	@ 0x8c
 801cf48:	187b      	adds	r3, r7, r1
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	881b      	ldrh	r3, [r3, #0]
 801cf4e:	b29a      	uxth	r2, r3
 801cf50:	23e8      	movs	r3, #232	@ 0xe8
 801cf52:	18fb      	adds	r3, r7, r3
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	b29b      	uxth	r3, r3
 801cf58:	029b      	lsls	r3, r3, #10
 801cf5a:	b29b      	uxth	r3, r3
 801cf5c:	4313      	orrs	r3, r2
 801cf5e:	b29b      	uxth	r3, r3
 801cf60:	4ab6      	ldr	r2, [pc, #728]	@ (801d23c <USB_EPStartXfer+0xe34>)
 801cf62:	4313      	orrs	r3, r2
 801cf64:	b29a      	uxth	r2, r3
 801cf66:	187b      	adds	r3, r7, r1
 801cf68:	681b      	ldr	r3, [r3, #0]
 801cf6a:	801a      	strh	r2, [r3, #0]
 801cf6c:	e353      	b.n	801d616 <USB_EPStartXfer+0x120e>
 801cf6e:	1d7b      	adds	r3, r7, #5
 801cf70:	33ff      	adds	r3, #255	@ 0xff
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d10b      	bne.n	801cf90 <USB_EPStartXfer+0xb88>
 801cf78:	218c      	movs	r1, #140	@ 0x8c
 801cf7a:	187b      	adds	r3, r7, r1
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	881b      	ldrh	r3, [r3, #0]
 801cf80:	b29b      	uxth	r3, r3
 801cf82:	4aae      	ldr	r2, [pc, #696]	@ (801d23c <USB_EPStartXfer+0xe34>)
 801cf84:	4313      	orrs	r3, r2
 801cf86:	b29a      	uxth	r2, r3
 801cf88:	187b      	adds	r3, r7, r1
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	801a      	strh	r2, [r3, #0]
 801cf8e:	e342      	b.n	801d616 <USB_EPStartXfer+0x120e>
 801cf90:	1d7b      	adds	r3, r7, #5
 801cf92:	33ff      	adds	r3, #255	@ 0xff
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	085b      	lsrs	r3, r3, #1
 801cf98:	21e8      	movs	r1, #232	@ 0xe8
 801cf9a:	187a      	adds	r2, r7, r1
 801cf9c:	6013      	str	r3, [r2, #0]
 801cf9e:	1d7b      	adds	r3, r7, #5
 801cfa0:	33ff      	adds	r3, #255	@ 0xff
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	2201      	movs	r2, #1
 801cfa6:	4013      	ands	r3, r2
 801cfa8:	d004      	beq.n	801cfb4 <USB_EPStartXfer+0xbac>
 801cfaa:	187b      	adds	r3, r7, r1
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	3301      	adds	r3, #1
 801cfb0:	187a      	adds	r2, r7, r1
 801cfb2:	6013      	str	r3, [r2, #0]
 801cfb4:	218c      	movs	r1, #140	@ 0x8c
 801cfb6:	187b      	adds	r3, r7, r1
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	881b      	ldrh	r3, [r3, #0]
 801cfbc:	b29a      	uxth	r2, r3
 801cfbe:	23e8      	movs	r3, #232	@ 0xe8
 801cfc0:	18fb      	adds	r3, r7, r3
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	b29b      	uxth	r3, r3
 801cfc6:	029b      	lsls	r3, r3, #10
 801cfc8:	b29b      	uxth	r3, r3
 801cfca:	4313      	orrs	r3, r2
 801cfcc:	b29a      	uxth	r2, r3
 801cfce:	187b      	adds	r3, r7, r1
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	801a      	strh	r2, [r3, #0]
 801cfd4:	e31f      	b.n	801d616 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801cfd6:	683b      	ldr	r3, [r7, #0]
 801cfd8:	78db      	ldrb	r3, [r3, #3]
 801cfda:	2b02      	cmp	r3, #2
 801cfdc:	d000      	beq.n	801cfe0 <USB_EPStartXfer+0xbd8>
 801cfde:	e191      	b.n	801d304 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801cfe0:	683b      	ldr	r3, [r7, #0]
 801cfe2:	785b      	ldrb	r3, [r3, #1]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d000      	beq.n	801cfea <USB_EPStartXfer+0xbe2>
 801cfe8:	e07c      	b.n	801d0e4 <USB_EPStartXfer+0xcdc>
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	21ac      	movs	r1, #172	@ 0xac
 801cfee:	187a      	adds	r2, r7, r1
 801cff0:	6013      	str	r3, [r2, #0]
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	2250      	movs	r2, #80	@ 0x50
 801cff6:	5a9b      	ldrh	r3, [r3, r2]
 801cff8:	b29b      	uxth	r3, r3
 801cffa:	001a      	movs	r2, r3
 801cffc:	187b      	adds	r3, r7, r1
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	189b      	adds	r3, r3, r2
 801d002:	187a      	adds	r2, r7, r1
 801d004:	6013      	str	r3, [r2, #0]
 801d006:	683b      	ldr	r3, [r7, #0]
 801d008:	781b      	ldrb	r3, [r3, #0]
 801d00a:	00da      	lsls	r2, r3, #3
 801d00c:	187b      	adds	r3, r7, r1
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	18d3      	adds	r3, r2, r3
 801d012:	4a8b      	ldr	r2, [pc, #556]	@ (801d240 <USB_EPStartXfer+0xe38>)
 801d014:	4694      	mov	ip, r2
 801d016:	4463      	add	r3, ip
 801d018:	21a8      	movs	r1, #168	@ 0xa8
 801d01a:	187a      	adds	r2, r7, r1
 801d01c:	6013      	str	r3, [r2, #0]
 801d01e:	187b      	adds	r3, r7, r1
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	881b      	ldrh	r3, [r3, #0]
 801d024:	b29b      	uxth	r3, r3
 801d026:	059b      	lsls	r3, r3, #22
 801d028:	0d9b      	lsrs	r3, r3, #22
 801d02a:	b29a      	uxth	r2, r3
 801d02c:	187b      	adds	r3, r7, r1
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	801a      	strh	r2, [r3, #0]
 801d032:	683b      	ldr	r3, [r7, #0]
 801d034:	691b      	ldr	r3, [r3, #16]
 801d036:	2b3e      	cmp	r3, #62	@ 0x3e
 801d038:	d923      	bls.n	801d082 <USB_EPStartXfer+0xc7a>
 801d03a:	683b      	ldr	r3, [r7, #0]
 801d03c:	691b      	ldr	r3, [r3, #16]
 801d03e:	095b      	lsrs	r3, r3, #5
 801d040:	21e4      	movs	r1, #228	@ 0xe4
 801d042:	187a      	adds	r2, r7, r1
 801d044:	6013      	str	r3, [r2, #0]
 801d046:	683b      	ldr	r3, [r7, #0]
 801d048:	691b      	ldr	r3, [r3, #16]
 801d04a:	221f      	movs	r2, #31
 801d04c:	4013      	ands	r3, r2
 801d04e:	d104      	bne.n	801d05a <USB_EPStartXfer+0xc52>
 801d050:	187b      	adds	r3, r7, r1
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	3b01      	subs	r3, #1
 801d056:	187a      	adds	r2, r7, r1
 801d058:	6013      	str	r3, [r2, #0]
 801d05a:	21a8      	movs	r1, #168	@ 0xa8
 801d05c:	187b      	adds	r3, r7, r1
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	881b      	ldrh	r3, [r3, #0]
 801d062:	b29a      	uxth	r2, r3
 801d064:	23e4      	movs	r3, #228	@ 0xe4
 801d066:	18fb      	adds	r3, r7, r3
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	b29b      	uxth	r3, r3
 801d06c:	029b      	lsls	r3, r3, #10
 801d06e:	b29b      	uxth	r3, r3
 801d070:	4313      	orrs	r3, r2
 801d072:	b29b      	uxth	r3, r3
 801d074:	4a71      	ldr	r2, [pc, #452]	@ (801d23c <USB_EPStartXfer+0xe34>)
 801d076:	4313      	orrs	r3, r2
 801d078:	b29a      	uxth	r2, r3
 801d07a:	187b      	adds	r3, r7, r1
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	801a      	strh	r2, [r3, #0]
 801d080:	e054      	b.n	801d12c <USB_EPStartXfer+0xd24>
 801d082:	683b      	ldr	r3, [r7, #0]
 801d084:	691b      	ldr	r3, [r3, #16]
 801d086:	2b00      	cmp	r3, #0
 801d088:	d10b      	bne.n	801d0a2 <USB_EPStartXfer+0xc9a>
 801d08a:	21a8      	movs	r1, #168	@ 0xa8
 801d08c:	187b      	adds	r3, r7, r1
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	881b      	ldrh	r3, [r3, #0]
 801d092:	b29b      	uxth	r3, r3
 801d094:	4a69      	ldr	r2, [pc, #420]	@ (801d23c <USB_EPStartXfer+0xe34>)
 801d096:	4313      	orrs	r3, r2
 801d098:	b29a      	uxth	r2, r3
 801d09a:	187b      	adds	r3, r7, r1
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	801a      	strh	r2, [r3, #0]
 801d0a0:	e044      	b.n	801d12c <USB_EPStartXfer+0xd24>
 801d0a2:	683b      	ldr	r3, [r7, #0]
 801d0a4:	691b      	ldr	r3, [r3, #16]
 801d0a6:	085b      	lsrs	r3, r3, #1
 801d0a8:	21e4      	movs	r1, #228	@ 0xe4
 801d0aa:	187a      	adds	r2, r7, r1
 801d0ac:	6013      	str	r3, [r2, #0]
 801d0ae:	683b      	ldr	r3, [r7, #0]
 801d0b0:	691b      	ldr	r3, [r3, #16]
 801d0b2:	2201      	movs	r2, #1
 801d0b4:	4013      	ands	r3, r2
 801d0b6:	d004      	beq.n	801d0c2 <USB_EPStartXfer+0xcba>
 801d0b8:	187b      	adds	r3, r7, r1
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	3301      	adds	r3, #1
 801d0be:	187a      	adds	r2, r7, r1
 801d0c0:	6013      	str	r3, [r2, #0]
 801d0c2:	21a8      	movs	r1, #168	@ 0xa8
 801d0c4:	187b      	adds	r3, r7, r1
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	881b      	ldrh	r3, [r3, #0]
 801d0ca:	b29a      	uxth	r2, r3
 801d0cc:	23e4      	movs	r3, #228	@ 0xe4
 801d0ce:	18fb      	adds	r3, r7, r3
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	b29b      	uxth	r3, r3
 801d0d4:	029b      	lsls	r3, r3, #10
 801d0d6:	b29b      	uxth	r3, r3
 801d0d8:	4313      	orrs	r3, r2
 801d0da:	b29a      	uxth	r2, r3
 801d0dc:	187b      	adds	r3, r7, r1
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	801a      	strh	r2, [r3, #0]
 801d0e2:	e023      	b.n	801d12c <USB_EPStartXfer+0xd24>
 801d0e4:	683b      	ldr	r3, [r7, #0]
 801d0e6:	785b      	ldrb	r3, [r3, #1]
 801d0e8:	2b01      	cmp	r3, #1
 801d0ea:	d11f      	bne.n	801d12c <USB_EPStartXfer+0xd24>
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	21b4      	movs	r1, #180	@ 0xb4
 801d0f0:	187a      	adds	r2, r7, r1
 801d0f2:	6013      	str	r3, [r2, #0]
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	2250      	movs	r2, #80	@ 0x50
 801d0f8:	5a9b      	ldrh	r3, [r3, r2]
 801d0fa:	b29b      	uxth	r3, r3
 801d0fc:	001a      	movs	r2, r3
 801d0fe:	187b      	adds	r3, r7, r1
 801d100:	681b      	ldr	r3, [r3, #0]
 801d102:	189b      	adds	r3, r3, r2
 801d104:	187a      	adds	r2, r7, r1
 801d106:	6013      	str	r3, [r2, #0]
 801d108:	683b      	ldr	r3, [r7, #0]
 801d10a:	781b      	ldrb	r3, [r3, #0]
 801d10c:	00da      	lsls	r2, r3, #3
 801d10e:	187b      	adds	r3, r7, r1
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	18d3      	adds	r3, r2, r3
 801d114:	4a4a      	ldr	r2, [pc, #296]	@ (801d240 <USB_EPStartXfer+0xe38>)
 801d116:	4694      	mov	ip, r2
 801d118:	4463      	add	r3, ip
 801d11a:	21b0      	movs	r1, #176	@ 0xb0
 801d11c:	187a      	adds	r2, r7, r1
 801d11e:	6013      	str	r3, [r2, #0]
 801d120:	683b      	ldr	r3, [r7, #0]
 801d122:	691b      	ldr	r3, [r3, #16]
 801d124:	b29a      	uxth	r2, r3
 801d126:	187b      	adds	r3, r7, r1
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	801a      	strh	r2, [r3, #0]
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	22a4      	movs	r2, #164	@ 0xa4
 801d130:	18ba      	adds	r2, r7, r2
 801d132:	6013      	str	r3, [r2, #0]
 801d134:	683b      	ldr	r3, [r7, #0]
 801d136:	785b      	ldrb	r3, [r3, #1]
 801d138:	2b00      	cmp	r3, #0
 801d13a:	d000      	beq.n	801d13e <USB_EPStartXfer+0xd36>
 801d13c:	e082      	b.n	801d244 <USB_EPStartXfer+0xe3c>
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	219c      	movs	r1, #156	@ 0x9c
 801d142:	187a      	adds	r2, r7, r1
 801d144:	6013      	str	r3, [r2, #0]
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	2250      	movs	r2, #80	@ 0x50
 801d14a:	5a9b      	ldrh	r3, [r3, r2]
 801d14c:	b29b      	uxth	r3, r3
 801d14e:	001a      	movs	r2, r3
 801d150:	187b      	adds	r3, r7, r1
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	189b      	adds	r3, r3, r2
 801d156:	187a      	adds	r2, r7, r1
 801d158:	6013      	str	r3, [r2, #0]
 801d15a:	683b      	ldr	r3, [r7, #0]
 801d15c:	781b      	ldrb	r3, [r3, #0]
 801d15e:	00da      	lsls	r2, r3, #3
 801d160:	187b      	adds	r3, r7, r1
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	18d3      	adds	r3, r2, r3
 801d166:	4a34      	ldr	r2, [pc, #208]	@ (801d238 <USB_EPStartXfer+0xe30>)
 801d168:	4694      	mov	ip, r2
 801d16a:	4463      	add	r3, ip
 801d16c:	2198      	movs	r1, #152	@ 0x98
 801d16e:	187a      	adds	r2, r7, r1
 801d170:	6013      	str	r3, [r2, #0]
 801d172:	187b      	adds	r3, r7, r1
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	881b      	ldrh	r3, [r3, #0]
 801d178:	b29b      	uxth	r3, r3
 801d17a:	059b      	lsls	r3, r3, #22
 801d17c:	0d9b      	lsrs	r3, r3, #22
 801d17e:	b29a      	uxth	r2, r3
 801d180:	187b      	adds	r3, r7, r1
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	801a      	strh	r2, [r3, #0]
 801d186:	683b      	ldr	r3, [r7, #0]
 801d188:	691b      	ldr	r3, [r3, #16]
 801d18a:	2b3e      	cmp	r3, #62	@ 0x3e
 801d18c:	d923      	bls.n	801d1d6 <USB_EPStartXfer+0xdce>
 801d18e:	683b      	ldr	r3, [r7, #0]
 801d190:	691b      	ldr	r3, [r3, #16]
 801d192:	095b      	lsrs	r3, r3, #5
 801d194:	21e0      	movs	r1, #224	@ 0xe0
 801d196:	187a      	adds	r2, r7, r1
 801d198:	6013      	str	r3, [r2, #0]
 801d19a:	683b      	ldr	r3, [r7, #0]
 801d19c:	691b      	ldr	r3, [r3, #16]
 801d19e:	221f      	movs	r2, #31
 801d1a0:	4013      	ands	r3, r2
 801d1a2:	d104      	bne.n	801d1ae <USB_EPStartXfer+0xda6>
 801d1a4:	187b      	adds	r3, r7, r1
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	3b01      	subs	r3, #1
 801d1aa:	187a      	adds	r2, r7, r1
 801d1ac:	6013      	str	r3, [r2, #0]
 801d1ae:	2198      	movs	r1, #152	@ 0x98
 801d1b0:	187b      	adds	r3, r7, r1
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	881b      	ldrh	r3, [r3, #0]
 801d1b6:	b29a      	uxth	r2, r3
 801d1b8:	23e0      	movs	r3, #224	@ 0xe0
 801d1ba:	18fb      	adds	r3, r7, r3
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	b29b      	uxth	r3, r3
 801d1c0:	029b      	lsls	r3, r3, #10
 801d1c2:	b29b      	uxth	r3, r3
 801d1c4:	4313      	orrs	r3, r2
 801d1c6:	b29b      	uxth	r3, r3
 801d1c8:	4a1c      	ldr	r2, [pc, #112]	@ (801d23c <USB_EPStartXfer+0xe34>)
 801d1ca:	4313      	orrs	r3, r2
 801d1cc:	b29a      	uxth	r2, r3
 801d1ce:	187b      	adds	r3, r7, r1
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	801a      	strh	r2, [r3, #0]
 801d1d4:	e057      	b.n	801d286 <USB_EPStartXfer+0xe7e>
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	691b      	ldr	r3, [r3, #16]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d10b      	bne.n	801d1f6 <USB_EPStartXfer+0xdee>
 801d1de:	2198      	movs	r1, #152	@ 0x98
 801d1e0:	187b      	adds	r3, r7, r1
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	881b      	ldrh	r3, [r3, #0]
 801d1e6:	b29b      	uxth	r3, r3
 801d1e8:	4a14      	ldr	r2, [pc, #80]	@ (801d23c <USB_EPStartXfer+0xe34>)
 801d1ea:	4313      	orrs	r3, r2
 801d1ec:	b29a      	uxth	r2, r3
 801d1ee:	187b      	adds	r3, r7, r1
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	801a      	strh	r2, [r3, #0]
 801d1f4:	e047      	b.n	801d286 <USB_EPStartXfer+0xe7e>
 801d1f6:	683b      	ldr	r3, [r7, #0]
 801d1f8:	691b      	ldr	r3, [r3, #16]
 801d1fa:	085b      	lsrs	r3, r3, #1
 801d1fc:	21e0      	movs	r1, #224	@ 0xe0
 801d1fe:	187a      	adds	r2, r7, r1
 801d200:	6013      	str	r3, [r2, #0]
 801d202:	683b      	ldr	r3, [r7, #0]
 801d204:	691b      	ldr	r3, [r3, #16]
 801d206:	2201      	movs	r2, #1
 801d208:	4013      	ands	r3, r2
 801d20a:	d004      	beq.n	801d216 <USB_EPStartXfer+0xe0e>
 801d20c:	187b      	adds	r3, r7, r1
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	3301      	adds	r3, #1
 801d212:	187a      	adds	r2, r7, r1
 801d214:	6013      	str	r3, [r2, #0]
 801d216:	2198      	movs	r1, #152	@ 0x98
 801d218:	187b      	adds	r3, r7, r1
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	881b      	ldrh	r3, [r3, #0]
 801d21e:	b29a      	uxth	r2, r3
 801d220:	23e0      	movs	r3, #224	@ 0xe0
 801d222:	18fb      	adds	r3, r7, r3
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	b29b      	uxth	r3, r3
 801d228:	029b      	lsls	r3, r3, #10
 801d22a:	b29b      	uxth	r3, r3
 801d22c:	4313      	orrs	r3, r2
 801d22e:	b29a      	uxth	r2, r3
 801d230:	187b      	adds	r3, r7, r1
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	801a      	strh	r2, [r3, #0]
 801d236:	e026      	b.n	801d286 <USB_EPStartXfer+0xe7e>
 801d238:	00000406 	.word	0x00000406
 801d23c:	ffff8000 	.word	0xffff8000
 801d240:	00000402 	.word	0x00000402
 801d244:	683b      	ldr	r3, [r7, #0]
 801d246:	785b      	ldrb	r3, [r3, #1]
 801d248:	2b01      	cmp	r3, #1
 801d24a:	d11c      	bne.n	801d286 <USB_EPStartXfer+0xe7e>
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	2250      	movs	r2, #80	@ 0x50
 801d250:	5a9b      	ldrh	r3, [r3, r2]
 801d252:	b29b      	uxth	r3, r3
 801d254:	001a      	movs	r2, r3
 801d256:	21a4      	movs	r1, #164	@ 0xa4
 801d258:	187b      	adds	r3, r7, r1
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	189b      	adds	r3, r3, r2
 801d25e:	187a      	adds	r2, r7, r1
 801d260:	6013      	str	r3, [r2, #0]
 801d262:	683b      	ldr	r3, [r7, #0]
 801d264:	781b      	ldrb	r3, [r3, #0]
 801d266:	00da      	lsls	r2, r3, #3
 801d268:	187b      	adds	r3, r7, r1
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	18d3      	adds	r3, r2, r3
 801d26e:	4ad2      	ldr	r2, [pc, #840]	@ (801d5b8 <USB_EPStartXfer+0x11b0>)
 801d270:	4694      	mov	ip, r2
 801d272:	4463      	add	r3, ip
 801d274:	21a0      	movs	r1, #160	@ 0xa0
 801d276:	187a      	adds	r2, r7, r1
 801d278:	6013      	str	r3, [r2, #0]
 801d27a:	683b      	ldr	r3, [r7, #0]
 801d27c:	691b      	ldr	r3, [r3, #16]
 801d27e:	b29a      	uxth	r2, r3
 801d280:	187b      	adds	r3, r7, r1
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801d286:	683b      	ldr	r3, [r7, #0]
 801d288:	69db      	ldr	r3, [r3, #28]
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d100      	bne.n	801d290 <USB_EPStartXfer+0xe88>
 801d28e:	e1c2      	b.n	801d616 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801d290:	687a      	ldr	r2, [r7, #4]
 801d292:	683b      	ldr	r3, [r7, #0]
 801d294:	781b      	ldrb	r3, [r3, #0]
 801d296:	009b      	lsls	r3, r3, #2
 801d298:	18d2      	adds	r2, r2, r3
 801d29a:	2196      	movs	r1, #150	@ 0x96
 801d29c:	187b      	adds	r3, r7, r1
 801d29e:	8812      	ldrh	r2, [r2, #0]
 801d2a0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801d2a2:	187b      	adds	r3, r7, r1
 801d2a4:	881a      	ldrh	r2, [r3, #0]
 801d2a6:	2380      	movs	r3, #128	@ 0x80
 801d2a8:	01db      	lsls	r3, r3, #7
 801d2aa:	4013      	ands	r3, r2
 801d2ac:	d004      	beq.n	801d2b8 <USB_EPStartXfer+0xeb0>
 801d2ae:	187b      	adds	r3, r7, r1
 801d2b0:	881b      	ldrh	r3, [r3, #0]
 801d2b2:	2240      	movs	r2, #64	@ 0x40
 801d2b4:	4013      	ands	r3, r2
 801d2b6:	d10d      	bne.n	801d2d4 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801d2b8:	2196      	movs	r1, #150	@ 0x96
 801d2ba:	187b      	adds	r3, r7, r1
 801d2bc:	881a      	ldrh	r2, [r3, #0]
 801d2be:	2380      	movs	r3, #128	@ 0x80
 801d2c0:	01db      	lsls	r3, r3, #7
 801d2c2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801d2c4:	d000      	beq.n	801d2c8 <USB_EPStartXfer+0xec0>
 801d2c6:	e1a6      	b.n	801d616 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801d2c8:	187b      	adds	r3, r7, r1
 801d2ca:	881b      	ldrh	r3, [r3, #0]
 801d2cc:	2240      	movs	r2, #64	@ 0x40
 801d2ce:	4013      	ands	r3, r2
 801d2d0:	d000      	beq.n	801d2d4 <USB_EPStartXfer+0xecc>
 801d2d2:	e1a0      	b.n	801d616 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801d2d4:	687a      	ldr	r2, [r7, #4]
 801d2d6:	683b      	ldr	r3, [r7, #0]
 801d2d8:	781b      	ldrb	r3, [r3, #0]
 801d2da:	009b      	lsls	r3, r3, #2
 801d2dc:	18d3      	adds	r3, r2, r3
 801d2de:	881b      	ldrh	r3, [r3, #0]
 801d2e0:	b29a      	uxth	r2, r3
 801d2e2:	2094      	movs	r0, #148	@ 0x94
 801d2e4:	183b      	adds	r3, r7, r0
 801d2e6:	49b5      	ldr	r1, [pc, #724]	@ (801d5bc <USB_EPStartXfer+0x11b4>)
 801d2e8:	400a      	ands	r2, r1
 801d2ea:	801a      	strh	r2, [r3, #0]
 801d2ec:	687a      	ldr	r2, [r7, #4]
 801d2ee:	683b      	ldr	r3, [r7, #0]
 801d2f0:	781b      	ldrb	r3, [r3, #0]
 801d2f2:	009b      	lsls	r3, r3, #2
 801d2f4:	18d3      	adds	r3, r2, r3
 801d2f6:	183a      	adds	r2, r7, r0
 801d2f8:	8812      	ldrh	r2, [r2, #0]
 801d2fa:	49b1      	ldr	r1, [pc, #708]	@ (801d5c0 <USB_EPStartXfer+0x11b8>)
 801d2fc:	430a      	orrs	r2, r1
 801d2fe:	b292      	uxth	r2, r2
 801d300:	801a      	strh	r2, [r3, #0]
 801d302:	e188      	b.n	801d616 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801d304:	683b      	ldr	r3, [r7, #0]
 801d306:	78db      	ldrb	r3, [r3, #3]
 801d308:	2b01      	cmp	r3, #1
 801d30a:	d000      	beq.n	801d30e <USB_EPStartXfer+0xf06>
 801d30c:	e181      	b.n	801d612 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	699a      	ldr	r2, [r3, #24]
 801d312:	683b      	ldr	r3, [r7, #0]
 801d314:	691b      	ldr	r3, [r3, #16]
 801d316:	429a      	cmp	r2, r3
 801d318:	d90d      	bls.n	801d336 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801d31a:	683b      	ldr	r3, [r7, #0]
 801d31c:	691b      	ldr	r3, [r3, #16]
 801d31e:	1d7a      	adds	r2, r7, #5
 801d320:	32ff      	adds	r2, #255	@ 0xff
 801d322:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801d324:	683b      	ldr	r3, [r7, #0]
 801d326:	699a      	ldr	r2, [r3, #24]
 801d328:	1d7b      	adds	r3, r7, #5
 801d32a:	33ff      	adds	r3, #255	@ 0xff
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	1ad2      	subs	r2, r2, r3
 801d330:	683b      	ldr	r3, [r7, #0]
 801d332:	619a      	str	r2, [r3, #24]
 801d334:	e007      	b.n	801d346 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801d336:	683b      	ldr	r3, [r7, #0]
 801d338:	699b      	ldr	r3, [r3, #24]
 801d33a:	1d7a      	adds	r2, r7, #5
 801d33c:	32ff      	adds	r2, #255	@ 0xff
 801d33e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801d340:	683b      	ldr	r3, [r7, #0]
 801d342:	2200      	movs	r2, #0
 801d344:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801d346:	683b      	ldr	r3, [r7, #0]
 801d348:	785b      	ldrb	r3, [r3, #1]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d000      	beq.n	801d350 <USB_EPStartXfer+0xf48>
 801d34e:	e082      	b.n	801d456 <USB_EPStartXfer+0x104e>
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	21cc      	movs	r1, #204	@ 0xcc
 801d354:	187a      	adds	r2, r7, r1
 801d356:	6013      	str	r3, [r2, #0]
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	2250      	movs	r2, #80	@ 0x50
 801d35c:	5a9b      	ldrh	r3, [r3, r2]
 801d35e:	b29b      	uxth	r3, r3
 801d360:	001a      	movs	r2, r3
 801d362:	187b      	adds	r3, r7, r1
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	189b      	adds	r3, r3, r2
 801d368:	187a      	adds	r2, r7, r1
 801d36a:	6013      	str	r3, [r2, #0]
 801d36c:	683b      	ldr	r3, [r7, #0]
 801d36e:	781b      	ldrb	r3, [r3, #0]
 801d370:	00da      	lsls	r2, r3, #3
 801d372:	187b      	adds	r3, r7, r1
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	18d3      	adds	r3, r2, r3
 801d378:	4a92      	ldr	r2, [pc, #584]	@ (801d5c4 <USB_EPStartXfer+0x11bc>)
 801d37a:	4694      	mov	ip, r2
 801d37c:	4463      	add	r3, ip
 801d37e:	21c8      	movs	r1, #200	@ 0xc8
 801d380:	187a      	adds	r2, r7, r1
 801d382:	6013      	str	r3, [r2, #0]
 801d384:	187b      	adds	r3, r7, r1
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	881b      	ldrh	r3, [r3, #0]
 801d38a:	b29b      	uxth	r3, r3
 801d38c:	059b      	lsls	r3, r3, #22
 801d38e:	0d9b      	lsrs	r3, r3, #22
 801d390:	b29a      	uxth	r2, r3
 801d392:	187b      	adds	r3, r7, r1
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	801a      	strh	r2, [r3, #0]
 801d398:	1d7b      	adds	r3, r7, #5
 801d39a:	33ff      	adds	r3, #255	@ 0xff
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	2b3e      	cmp	r3, #62	@ 0x3e
 801d3a0:	d925      	bls.n	801d3ee <USB_EPStartXfer+0xfe6>
 801d3a2:	1d7b      	adds	r3, r7, #5
 801d3a4:	33ff      	adds	r3, #255	@ 0xff
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	095b      	lsrs	r3, r3, #5
 801d3aa:	21dc      	movs	r1, #220	@ 0xdc
 801d3ac:	187a      	adds	r2, r7, r1
 801d3ae:	6013      	str	r3, [r2, #0]
 801d3b0:	1d7b      	adds	r3, r7, #5
 801d3b2:	33ff      	adds	r3, #255	@ 0xff
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	221f      	movs	r2, #31
 801d3b8:	4013      	ands	r3, r2
 801d3ba:	d104      	bne.n	801d3c6 <USB_EPStartXfer+0xfbe>
 801d3bc:	187b      	adds	r3, r7, r1
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	3b01      	subs	r3, #1
 801d3c2:	187a      	adds	r2, r7, r1
 801d3c4:	6013      	str	r3, [r2, #0]
 801d3c6:	21c8      	movs	r1, #200	@ 0xc8
 801d3c8:	187b      	adds	r3, r7, r1
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	881b      	ldrh	r3, [r3, #0]
 801d3ce:	b29a      	uxth	r2, r3
 801d3d0:	23dc      	movs	r3, #220	@ 0xdc
 801d3d2:	18fb      	adds	r3, r7, r3
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	b29b      	uxth	r3, r3
 801d3d8:	029b      	lsls	r3, r3, #10
 801d3da:	b29b      	uxth	r3, r3
 801d3dc:	4313      	orrs	r3, r2
 801d3de:	b29b      	uxth	r3, r3
 801d3e0:	4a79      	ldr	r2, [pc, #484]	@ (801d5c8 <USB_EPStartXfer+0x11c0>)
 801d3e2:	4313      	orrs	r3, r2
 801d3e4:	b29a      	uxth	r2, r3
 801d3e6:	187b      	adds	r3, r7, r1
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	801a      	strh	r2, [r3, #0]
 801d3ec:	e058      	b.n	801d4a0 <USB_EPStartXfer+0x1098>
 801d3ee:	1d7b      	adds	r3, r7, #5
 801d3f0:	33ff      	adds	r3, #255	@ 0xff
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d10b      	bne.n	801d410 <USB_EPStartXfer+0x1008>
 801d3f8:	21c8      	movs	r1, #200	@ 0xc8
 801d3fa:	187b      	adds	r3, r7, r1
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	881b      	ldrh	r3, [r3, #0]
 801d400:	b29b      	uxth	r3, r3
 801d402:	4a71      	ldr	r2, [pc, #452]	@ (801d5c8 <USB_EPStartXfer+0x11c0>)
 801d404:	4313      	orrs	r3, r2
 801d406:	b29a      	uxth	r2, r3
 801d408:	187b      	adds	r3, r7, r1
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	801a      	strh	r2, [r3, #0]
 801d40e:	e047      	b.n	801d4a0 <USB_EPStartXfer+0x1098>
 801d410:	1d7b      	adds	r3, r7, #5
 801d412:	33ff      	adds	r3, #255	@ 0xff
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	085b      	lsrs	r3, r3, #1
 801d418:	21dc      	movs	r1, #220	@ 0xdc
 801d41a:	187a      	adds	r2, r7, r1
 801d41c:	6013      	str	r3, [r2, #0]
 801d41e:	1d7b      	adds	r3, r7, #5
 801d420:	33ff      	adds	r3, #255	@ 0xff
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	2201      	movs	r2, #1
 801d426:	4013      	ands	r3, r2
 801d428:	d004      	beq.n	801d434 <USB_EPStartXfer+0x102c>
 801d42a:	187b      	adds	r3, r7, r1
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	3301      	adds	r3, #1
 801d430:	187a      	adds	r2, r7, r1
 801d432:	6013      	str	r3, [r2, #0]
 801d434:	21c8      	movs	r1, #200	@ 0xc8
 801d436:	187b      	adds	r3, r7, r1
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	881b      	ldrh	r3, [r3, #0]
 801d43c:	b29a      	uxth	r2, r3
 801d43e:	23dc      	movs	r3, #220	@ 0xdc
 801d440:	18fb      	adds	r3, r7, r3
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	b29b      	uxth	r3, r3
 801d446:	029b      	lsls	r3, r3, #10
 801d448:	b29b      	uxth	r3, r3
 801d44a:	4313      	orrs	r3, r2
 801d44c:	b29a      	uxth	r2, r3
 801d44e:	187b      	adds	r3, r7, r1
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	801a      	strh	r2, [r3, #0]
 801d454:	e024      	b.n	801d4a0 <USB_EPStartXfer+0x1098>
 801d456:	683b      	ldr	r3, [r7, #0]
 801d458:	785b      	ldrb	r3, [r3, #1]
 801d45a:	2b01      	cmp	r3, #1
 801d45c:	d120      	bne.n	801d4a0 <USB_EPStartXfer+0x1098>
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	21d4      	movs	r1, #212	@ 0xd4
 801d462:	187a      	adds	r2, r7, r1
 801d464:	6013      	str	r3, [r2, #0]
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	2250      	movs	r2, #80	@ 0x50
 801d46a:	5a9b      	ldrh	r3, [r3, r2]
 801d46c:	b29b      	uxth	r3, r3
 801d46e:	001a      	movs	r2, r3
 801d470:	187b      	adds	r3, r7, r1
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	189b      	adds	r3, r3, r2
 801d476:	187a      	adds	r2, r7, r1
 801d478:	6013      	str	r3, [r2, #0]
 801d47a:	683b      	ldr	r3, [r7, #0]
 801d47c:	781b      	ldrb	r3, [r3, #0]
 801d47e:	00da      	lsls	r2, r3, #3
 801d480:	187b      	adds	r3, r7, r1
 801d482:	681b      	ldr	r3, [r3, #0]
 801d484:	18d3      	adds	r3, r2, r3
 801d486:	4a4f      	ldr	r2, [pc, #316]	@ (801d5c4 <USB_EPStartXfer+0x11bc>)
 801d488:	4694      	mov	ip, r2
 801d48a:	4463      	add	r3, ip
 801d48c:	21d0      	movs	r1, #208	@ 0xd0
 801d48e:	187a      	adds	r2, r7, r1
 801d490:	6013      	str	r3, [r2, #0]
 801d492:	1d7b      	adds	r3, r7, #5
 801d494:	33ff      	adds	r3, #255	@ 0xff
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	b29a      	uxth	r2, r3
 801d49a:	187b      	adds	r3, r7, r1
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	801a      	strh	r2, [r3, #0]
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	22c4      	movs	r2, #196	@ 0xc4
 801d4a4:	18ba      	adds	r2, r7, r2
 801d4a6:	6013      	str	r3, [r2, #0]
 801d4a8:	683b      	ldr	r3, [r7, #0]
 801d4aa:	785b      	ldrb	r3, [r3, #1]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d000      	beq.n	801d4b2 <USB_EPStartXfer+0x10aa>
 801d4b0:	e08c      	b.n	801d5cc <USB_EPStartXfer+0x11c4>
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	21bc      	movs	r1, #188	@ 0xbc
 801d4b6:	187a      	adds	r2, r7, r1
 801d4b8:	6013      	str	r3, [r2, #0]
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	2250      	movs	r2, #80	@ 0x50
 801d4be:	5a9b      	ldrh	r3, [r3, r2]
 801d4c0:	b29b      	uxth	r3, r3
 801d4c2:	001a      	movs	r2, r3
 801d4c4:	187b      	adds	r3, r7, r1
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	189b      	adds	r3, r3, r2
 801d4ca:	187a      	adds	r2, r7, r1
 801d4cc:	6013      	str	r3, [r2, #0]
 801d4ce:	683b      	ldr	r3, [r7, #0]
 801d4d0:	781b      	ldrb	r3, [r3, #0]
 801d4d2:	00da      	lsls	r2, r3, #3
 801d4d4:	187b      	adds	r3, r7, r1
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	18d3      	adds	r3, r2, r3
 801d4da:	4a37      	ldr	r2, [pc, #220]	@ (801d5b8 <USB_EPStartXfer+0x11b0>)
 801d4dc:	4694      	mov	ip, r2
 801d4de:	4463      	add	r3, ip
 801d4e0:	21b8      	movs	r1, #184	@ 0xb8
 801d4e2:	187a      	adds	r2, r7, r1
 801d4e4:	6013      	str	r3, [r2, #0]
 801d4e6:	187b      	adds	r3, r7, r1
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	881b      	ldrh	r3, [r3, #0]
 801d4ec:	b29b      	uxth	r3, r3
 801d4ee:	059b      	lsls	r3, r3, #22
 801d4f0:	0d9b      	lsrs	r3, r3, #22
 801d4f2:	b29a      	uxth	r2, r3
 801d4f4:	187b      	adds	r3, r7, r1
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	801a      	strh	r2, [r3, #0]
 801d4fa:	1d7b      	adds	r3, r7, #5
 801d4fc:	33ff      	adds	r3, #255	@ 0xff
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	2b3e      	cmp	r3, #62	@ 0x3e
 801d502:	d925      	bls.n	801d550 <USB_EPStartXfer+0x1148>
 801d504:	1d7b      	adds	r3, r7, #5
 801d506:	33ff      	adds	r3, #255	@ 0xff
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	095b      	lsrs	r3, r3, #5
 801d50c:	21d8      	movs	r1, #216	@ 0xd8
 801d50e:	187a      	adds	r2, r7, r1
 801d510:	6013      	str	r3, [r2, #0]
 801d512:	1d7b      	adds	r3, r7, #5
 801d514:	33ff      	adds	r3, #255	@ 0xff
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	221f      	movs	r2, #31
 801d51a:	4013      	ands	r3, r2
 801d51c:	d104      	bne.n	801d528 <USB_EPStartXfer+0x1120>
 801d51e:	187b      	adds	r3, r7, r1
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	3b01      	subs	r3, #1
 801d524:	187a      	adds	r2, r7, r1
 801d526:	6013      	str	r3, [r2, #0]
 801d528:	21b8      	movs	r1, #184	@ 0xb8
 801d52a:	187b      	adds	r3, r7, r1
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	881b      	ldrh	r3, [r3, #0]
 801d530:	b29a      	uxth	r2, r3
 801d532:	23d8      	movs	r3, #216	@ 0xd8
 801d534:	18fb      	adds	r3, r7, r3
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	b29b      	uxth	r3, r3
 801d53a:	029b      	lsls	r3, r3, #10
 801d53c:	b29b      	uxth	r3, r3
 801d53e:	4313      	orrs	r3, r2
 801d540:	b29b      	uxth	r3, r3
 801d542:	4a21      	ldr	r2, [pc, #132]	@ (801d5c8 <USB_EPStartXfer+0x11c0>)
 801d544:	4313      	orrs	r3, r2
 801d546:	b29a      	uxth	r2, r3
 801d548:	187b      	adds	r3, r7, r1
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	801a      	strh	r2, [r3, #0]
 801d54e:	e062      	b.n	801d616 <USB_EPStartXfer+0x120e>
 801d550:	1d7b      	adds	r3, r7, #5
 801d552:	33ff      	adds	r3, #255	@ 0xff
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	2b00      	cmp	r3, #0
 801d558:	d10b      	bne.n	801d572 <USB_EPStartXfer+0x116a>
 801d55a:	21b8      	movs	r1, #184	@ 0xb8
 801d55c:	187b      	adds	r3, r7, r1
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	881b      	ldrh	r3, [r3, #0]
 801d562:	b29b      	uxth	r3, r3
 801d564:	4a18      	ldr	r2, [pc, #96]	@ (801d5c8 <USB_EPStartXfer+0x11c0>)
 801d566:	4313      	orrs	r3, r2
 801d568:	b29a      	uxth	r2, r3
 801d56a:	187b      	adds	r3, r7, r1
 801d56c:	681b      	ldr	r3, [r3, #0]
 801d56e:	801a      	strh	r2, [r3, #0]
 801d570:	e051      	b.n	801d616 <USB_EPStartXfer+0x120e>
 801d572:	1d7b      	adds	r3, r7, #5
 801d574:	33ff      	adds	r3, #255	@ 0xff
 801d576:	681b      	ldr	r3, [r3, #0]
 801d578:	085b      	lsrs	r3, r3, #1
 801d57a:	21d8      	movs	r1, #216	@ 0xd8
 801d57c:	187a      	adds	r2, r7, r1
 801d57e:	6013      	str	r3, [r2, #0]
 801d580:	1d7b      	adds	r3, r7, #5
 801d582:	33ff      	adds	r3, #255	@ 0xff
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	2201      	movs	r2, #1
 801d588:	4013      	ands	r3, r2
 801d58a:	d004      	beq.n	801d596 <USB_EPStartXfer+0x118e>
 801d58c:	187b      	adds	r3, r7, r1
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	3301      	adds	r3, #1
 801d592:	187a      	adds	r2, r7, r1
 801d594:	6013      	str	r3, [r2, #0]
 801d596:	21b8      	movs	r1, #184	@ 0xb8
 801d598:	187b      	adds	r3, r7, r1
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	881b      	ldrh	r3, [r3, #0]
 801d59e:	b29a      	uxth	r2, r3
 801d5a0:	23d8      	movs	r3, #216	@ 0xd8
 801d5a2:	18fb      	adds	r3, r7, r3
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	b29b      	uxth	r3, r3
 801d5a8:	029b      	lsls	r3, r3, #10
 801d5aa:	b29b      	uxth	r3, r3
 801d5ac:	4313      	orrs	r3, r2
 801d5ae:	b29a      	uxth	r2, r3
 801d5b0:	187b      	adds	r3, r7, r1
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	801a      	strh	r2, [r3, #0]
 801d5b6:	e02e      	b.n	801d616 <USB_EPStartXfer+0x120e>
 801d5b8:	00000406 	.word	0x00000406
 801d5bc:	ffff8f8f 	.word	0xffff8f8f
 801d5c0:	ffff80c0 	.word	0xffff80c0
 801d5c4:	00000402 	.word	0x00000402
 801d5c8:	ffff8000 	.word	0xffff8000
 801d5cc:	683b      	ldr	r3, [r7, #0]
 801d5ce:	785b      	ldrb	r3, [r3, #1]
 801d5d0:	2b01      	cmp	r3, #1
 801d5d2:	d120      	bne.n	801d616 <USB_EPStartXfer+0x120e>
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	2250      	movs	r2, #80	@ 0x50
 801d5d8:	5a9b      	ldrh	r3, [r3, r2]
 801d5da:	b29b      	uxth	r3, r3
 801d5dc:	001a      	movs	r2, r3
 801d5de:	21c4      	movs	r1, #196	@ 0xc4
 801d5e0:	187b      	adds	r3, r7, r1
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	189b      	adds	r3, r3, r2
 801d5e6:	187a      	adds	r2, r7, r1
 801d5e8:	6013      	str	r3, [r2, #0]
 801d5ea:	683b      	ldr	r3, [r7, #0]
 801d5ec:	781b      	ldrb	r3, [r3, #0]
 801d5ee:	00da      	lsls	r2, r3, #3
 801d5f0:	187b      	adds	r3, r7, r1
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	18d3      	adds	r3, r2, r3
 801d5f6:	4a1d      	ldr	r2, [pc, #116]	@ (801d66c <USB_EPStartXfer+0x1264>)
 801d5f8:	4694      	mov	ip, r2
 801d5fa:	4463      	add	r3, ip
 801d5fc:	21c0      	movs	r1, #192	@ 0xc0
 801d5fe:	187a      	adds	r2, r7, r1
 801d600:	6013      	str	r3, [r2, #0]
 801d602:	1d7b      	adds	r3, r7, #5
 801d604:	33ff      	adds	r3, #255	@ 0xff
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	b29a      	uxth	r2, r3
 801d60a:	187b      	adds	r3, r7, r1
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	801a      	strh	r2, [r3, #0]
 801d610:	e001      	b.n	801d616 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801d612:	2301      	movs	r3, #1
 801d614:	e025      	b.n	801d662 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801d616:	687a      	ldr	r2, [r7, #4]
 801d618:	683b      	ldr	r3, [r7, #0]
 801d61a:	781b      	ldrb	r3, [r3, #0]
 801d61c:	009b      	lsls	r3, r3, #2
 801d61e:	18d3      	adds	r3, r2, r3
 801d620:	881b      	ldrh	r3, [r3, #0]
 801d622:	b29a      	uxth	r2, r3
 801d624:	208a      	movs	r0, #138	@ 0x8a
 801d626:	183b      	adds	r3, r7, r0
 801d628:	4911      	ldr	r1, [pc, #68]	@ (801d670 <USB_EPStartXfer+0x1268>)
 801d62a:	400a      	ands	r2, r1
 801d62c:	801a      	strh	r2, [r3, #0]
 801d62e:	183b      	adds	r3, r7, r0
 801d630:	183a      	adds	r2, r7, r0
 801d632:	8812      	ldrh	r2, [r2, #0]
 801d634:	2180      	movs	r1, #128	@ 0x80
 801d636:	0149      	lsls	r1, r1, #5
 801d638:	404a      	eors	r2, r1
 801d63a:	801a      	strh	r2, [r3, #0]
 801d63c:	183b      	adds	r3, r7, r0
 801d63e:	183a      	adds	r2, r7, r0
 801d640:	8812      	ldrh	r2, [r2, #0]
 801d642:	2180      	movs	r1, #128	@ 0x80
 801d644:	0189      	lsls	r1, r1, #6
 801d646:	404a      	eors	r2, r1
 801d648:	801a      	strh	r2, [r3, #0]
 801d64a:	687a      	ldr	r2, [r7, #4]
 801d64c:	683b      	ldr	r3, [r7, #0]
 801d64e:	781b      	ldrb	r3, [r3, #0]
 801d650:	009b      	lsls	r3, r3, #2
 801d652:	18d3      	adds	r3, r2, r3
 801d654:	183a      	adds	r2, r7, r0
 801d656:	8812      	ldrh	r2, [r2, #0]
 801d658:	4906      	ldr	r1, [pc, #24]	@ (801d674 <USB_EPStartXfer+0x126c>)
 801d65a:	430a      	orrs	r2, r1
 801d65c:	b292      	uxth	r2, r2
 801d65e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801d660:	2300      	movs	r3, #0
}
 801d662:	0018      	movs	r0, r3
 801d664:	46bd      	mov	sp, r7
 801d666:	b043      	add	sp, #268	@ 0x10c
 801d668:	bd90      	pop	{r4, r7, pc}
 801d66a:	46c0      	nop			@ (mov r8, r8)
 801d66c:	00000406 	.word	0x00000406
 801d670:	ffffbf8f 	.word	0xffffbf8f
 801d674:	ffff8080 	.word	0xffff8080

0801d678 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d678:	b580      	push	{r7, lr}
 801d67a:	b084      	sub	sp, #16
 801d67c:	af00      	add	r7, sp, #0
 801d67e:	6078      	str	r0, [r7, #4]
 801d680:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801d682:	683b      	ldr	r3, [r7, #0]
 801d684:	785b      	ldrb	r3, [r3, #1]
 801d686:	2b00      	cmp	r3, #0
 801d688:	d01d      	beq.n	801d6c6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801d68a:	687a      	ldr	r2, [r7, #4]
 801d68c:	683b      	ldr	r3, [r7, #0]
 801d68e:	781b      	ldrb	r3, [r3, #0]
 801d690:	009b      	lsls	r3, r3, #2
 801d692:	18d3      	adds	r3, r2, r3
 801d694:	881b      	ldrh	r3, [r3, #0]
 801d696:	b29a      	uxth	r2, r3
 801d698:	200c      	movs	r0, #12
 801d69a:	183b      	adds	r3, r7, r0
 801d69c:	491b      	ldr	r1, [pc, #108]	@ (801d70c <USB_EPSetStall+0x94>)
 801d69e:	400a      	ands	r2, r1
 801d6a0:	801a      	strh	r2, [r3, #0]
 801d6a2:	183b      	adds	r3, r7, r0
 801d6a4:	183a      	adds	r2, r7, r0
 801d6a6:	8812      	ldrh	r2, [r2, #0]
 801d6a8:	2110      	movs	r1, #16
 801d6aa:	404a      	eors	r2, r1
 801d6ac:	801a      	strh	r2, [r3, #0]
 801d6ae:	687a      	ldr	r2, [r7, #4]
 801d6b0:	683b      	ldr	r3, [r7, #0]
 801d6b2:	781b      	ldrb	r3, [r3, #0]
 801d6b4:	009b      	lsls	r3, r3, #2
 801d6b6:	18d3      	adds	r3, r2, r3
 801d6b8:	183a      	adds	r2, r7, r0
 801d6ba:	8812      	ldrh	r2, [r2, #0]
 801d6bc:	4914      	ldr	r1, [pc, #80]	@ (801d710 <USB_EPSetStall+0x98>)
 801d6be:	430a      	orrs	r2, r1
 801d6c0:	b292      	uxth	r2, r2
 801d6c2:	801a      	strh	r2, [r3, #0]
 801d6c4:	e01d      	b.n	801d702 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801d6c6:	687a      	ldr	r2, [r7, #4]
 801d6c8:	683b      	ldr	r3, [r7, #0]
 801d6ca:	781b      	ldrb	r3, [r3, #0]
 801d6cc:	009b      	lsls	r3, r3, #2
 801d6ce:	18d3      	adds	r3, r2, r3
 801d6d0:	881b      	ldrh	r3, [r3, #0]
 801d6d2:	b29a      	uxth	r2, r3
 801d6d4:	200e      	movs	r0, #14
 801d6d6:	183b      	adds	r3, r7, r0
 801d6d8:	490e      	ldr	r1, [pc, #56]	@ (801d714 <USB_EPSetStall+0x9c>)
 801d6da:	400a      	ands	r2, r1
 801d6dc:	801a      	strh	r2, [r3, #0]
 801d6de:	183b      	adds	r3, r7, r0
 801d6e0:	183a      	adds	r2, r7, r0
 801d6e2:	8812      	ldrh	r2, [r2, #0]
 801d6e4:	2180      	movs	r1, #128	@ 0x80
 801d6e6:	0149      	lsls	r1, r1, #5
 801d6e8:	404a      	eors	r2, r1
 801d6ea:	801a      	strh	r2, [r3, #0]
 801d6ec:	687a      	ldr	r2, [r7, #4]
 801d6ee:	683b      	ldr	r3, [r7, #0]
 801d6f0:	781b      	ldrb	r3, [r3, #0]
 801d6f2:	009b      	lsls	r3, r3, #2
 801d6f4:	18d3      	adds	r3, r2, r3
 801d6f6:	183a      	adds	r2, r7, r0
 801d6f8:	8812      	ldrh	r2, [r2, #0]
 801d6fa:	4905      	ldr	r1, [pc, #20]	@ (801d710 <USB_EPSetStall+0x98>)
 801d6fc:	430a      	orrs	r2, r1
 801d6fe:	b292      	uxth	r2, r2
 801d700:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801d702:	2300      	movs	r3, #0
}
 801d704:	0018      	movs	r0, r3
 801d706:	46bd      	mov	sp, r7
 801d708:	b004      	add	sp, #16
 801d70a:	bd80      	pop	{r7, pc}
 801d70c:	ffff8fbf 	.word	0xffff8fbf
 801d710:	ffff8080 	.word	0xffff8080
 801d714:	ffffbf8f 	.word	0xffffbf8f

0801d718 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d718:	b580      	push	{r7, lr}
 801d71a:	b086      	sub	sp, #24
 801d71c:	af00      	add	r7, sp, #0
 801d71e:	6078      	str	r0, [r7, #4]
 801d720:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801d722:	683b      	ldr	r3, [r7, #0]
 801d724:	7b1b      	ldrb	r3, [r3, #12]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d000      	beq.n	801d72c <USB_EPClearStall+0x14>
 801d72a:	e095      	b.n	801d858 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801d72c:	683b      	ldr	r3, [r7, #0]
 801d72e:	785b      	ldrb	r3, [r3, #1]
 801d730:	2b00      	cmp	r3, #0
 801d732:	d046      	beq.n	801d7c2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d734:	687a      	ldr	r2, [r7, #4]
 801d736:	683b      	ldr	r3, [r7, #0]
 801d738:	781b      	ldrb	r3, [r3, #0]
 801d73a:	009b      	lsls	r3, r3, #2
 801d73c:	18d2      	adds	r2, r2, r3
 801d73e:	2110      	movs	r1, #16
 801d740:	187b      	adds	r3, r7, r1
 801d742:	8812      	ldrh	r2, [r2, #0]
 801d744:	801a      	strh	r2, [r3, #0]
 801d746:	187b      	adds	r3, r7, r1
 801d748:	881b      	ldrh	r3, [r3, #0]
 801d74a:	2240      	movs	r2, #64	@ 0x40
 801d74c:	4013      	ands	r3, r2
 801d74e:	d016      	beq.n	801d77e <USB_EPClearStall+0x66>
 801d750:	687a      	ldr	r2, [r7, #4]
 801d752:	683b      	ldr	r3, [r7, #0]
 801d754:	781b      	ldrb	r3, [r3, #0]
 801d756:	009b      	lsls	r3, r3, #2
 801d758:	18d3      	adds	r3, r2, r3
 801d75a:	881b      	ldrh	r3, [r3, #0]
 801d75c:	b29a      	uxth	r2, r3
 801d75e:	200e      	movs	r0, #14
 801d760:	183b      	adds	r3, r7, r0
 801d762:	4940      	ldr	r1, [pc, #256]	@ (801d864 <USB_EPClearStall+0x14c>)
 801d764:	400a      	ands	r2, r1
 801d766:	801a      	strh	r2, [r3, #0]
 801d768:	687a      	ldr	r2, [r7, #4]
 801d76a:	683b      	ldr	r3, [r7, #0]
 801d76c:	781b      	ldrb	r3, [r3, #0]
 801d76e:	009b      	lsls	r3, r3, #2
 801d770:	18d3      	adds	r3, r2, r3
 801d772:	183a      	adds	r2, r7, r0
 801d774:	8812      	ldrh	r2, [r2, #0]
 801d776:	493c      	ldr	r1, [pc, #240]	@ (801d868 <USB_EPClearStall+0x150>)
 801d778:	430a      	orrs	r2, r1
 801d77a:	b292      	uxth	r2, r2
 801d77c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801d77e:	683b      	ldr	r3, [r7, #0]
 801d780:	78db      	ldrb	r3, [r3, #3]
 801d782:	2b01      	cmp	r3, #1
 801d784:	d068      	beq.n	801d858 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801d786:	687a      	ldr	r2, [r7, #4]
 801d788:	683b      	ldr	r3, [r7, #0]
 801d78a:	781b      	ldrb	r3, [r3, #0]
 801d78c:	009b      	lsls	r3, r3, #2
 801d78e:	18d3      	adds	r3, r2, r3
 801d790:	881b      	ldrh	r3, [r3, #0]
 801d792:	b29a      	uxth	r2, r3
 801d794:	200c      	movs	r0, #12
 801d796:	183b      	adds	r3, r7, r0
 801d798:	4934      	ldr	r1, [pc, #208]	@ (801d86c <USB_EPClearStall+0x154>)
 801d79a:	400a      	ands	r2, r1
 801d79c:	801a      	strh	r2, [r3, #0]
 801d79e:	183b      	adds	r3, r7, r0
 801d7a0:	183a      	adds	r2, r7, r0
 801d7a2:	8812      	ldrh	r2, [r2, #0]
 801d7a4:	2120      	movs	r1, #32
 801d7a6:	404a      	eors	r2, r1
 801d7a8:	801a      	strh	r2, [r3, #0]
 801d7aa:	687a      	ldr	r2, [r7, #4]
 801d7ac:	683b      	ldr	r3, [r7, #0]
 801d7ae:	781b      	ldrb	r3, [r3, #0]
 801d7b0:	009b      	lsls	r3, r3, #2
 801d7b2:	18d3      	adds	r3, r2, r3
 801d7b4:	183a      	adds	r2, r7, r0
 801d7b6:	8812      	ldrh	r2, [r2, #0]
 801d7b8:	492d      	ldr	r1, [pc, #180]	@ (801d870 <USB_EPClearStall+0x158>)
 801d7ba:	430a      	orrs	r2, r1
 801d7bc:	b292      	uxth	r2, r2
 801d7be:	801a      	strh	r2, [r3, #0]
 801d7c0:	e04a      	b.n	801d858 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d7c2:	687a      	ldr	r2, [r7, #4]
 801d7c4:	683b      	ldr	r3, [r7, #0]
 801d7c6:	781b      	ldrb	r3, [r3, #0]
 801d7c8:	009b      	lsls	r3, r3, #2
 801d7ca:	18d2      	adds	r2, r2, r3
 801d7cc:	2116      	movs	r1, #22
 801d7ce:	187b      	adds	r3, r7, r1
 801d7d0:	8812      	ldrh	r2, [r2, #0]
 801d7d2:	801a      	strh	r2, [r3, #0]
 801d7d4:	187b      	adds	r3, r7, r1
 801d7d6:	881a      	ldrh	r2, [r3, #0]
 801d7d8:	2380      	movs	r3, #128	@ 0x80
 801d7da:	01db      	lsls	r3, r3, #7
 801d7dc:	4013      	ands	r3, r2
 801d7de:	d016      	beq.n	801d80e <USB_EPClearStall+0xf6>
 801d7e0:	687a      	ldr	r2, [r7, #4]
 801d7e2:	683b      	ldr	r3, [r7, #0]
 801d7e4:	781b      	ldrb	r3, [r3, #0]
 801d7e6:	009b      	lsls	r3, r3, #2
 801d7e8:	18d3      	adds	r3, r2, r3
 801d7ea:	881b      	ldrh	r3, [r3, #0]
 801d7ec:	b29a      	uxth	r2, r3
 801d7ee:	2014      	movs	r0, #20
 801d7f0:	183b      	adds	r3, r7, r0
 801d7f2:	491c      	ldr	r1, [pc, #112]	@ (801d864 <USB_EPClearStall+0x14c>)
 801d7f4:	400a      	ands	r2, r1
 801d7f6:	801a      	strh	r2, [r3, #0]
 801d7f8:	687a      	ldr	r2, [r7, #4]
 801d7fa:	683b      	ldr	r3, [r7, #0]
 801d7fc:	781b      	ldrb	r3, [r3, #0]
 801d7fe:	009b      	lsls	r3, r3, #2
 801d800:	18d3      	adds	r3, r2, r3
 801d802:	183a      	adds	r2, r7, r0
 801d804:	8812      	ldrh	r2, [r2, #0]
 801d806:	491b      	ldr	r1, [pc, #108]	@ (801d874 <USB_EPClearStall+0x15c>)
 801d808:	430a      	orrs	r2, r1
 801d80a:	b292      	uxth	r2, r2
 801d80c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801d80e:	687a      	ldr	r2, [r7, #4]
 801d810:	683b      	ldr	r3, [r7, #0]
 801d812:	781b      	ldrb	r3, [r3, #0]
 801d814:	009b      	lsls	r3, r3, #2
 801d816:	18d3      	adds	r3, r2, r3
 801d818:	881b      	ldrh	r3, [r3, #0]
 801d81a:	b29a      	uxth	r2, r3
 801d81c:	2012      	movs	r0, #18
 801d81e:	183b      	adds	r3, r7, r0
 801d820:	4915      	ldr	r1, [pc, #84]	@ (801d878 <USB_EPClearStall+0x160>)
 801d822:	400a      	ands	r2, r1
 801d824:	801a      	strh	r2, [r3, #0]
 801d826:	183b      	adds	r3, r7, r0
 801d828:	183a      	adds	r2, r7, r0
 801d82a:	8812      	ldrh	r2, [r2, #0]
 801d82c:	2180      	movs	r1, #128	@ 0x80
 801d82e:	0149      	lsls	r1, r1, #5
 801d830:	404a      	eors	r2, r1
 801d832:	801a      	strh	r2, [r3, #0]
 801d834:	183b      	adds	r3, r7, r0
 801d836:	183a      	adds	r2, r7, r0
 801d838:	8812      	ldrh	r2, [r2, #0]
 801d83a:	2180      	movs	r1, #128	@ 0x80
 801d83c:	0189      	lsls	r1, r1, #6
 801d83e:	404a      	eors	r2, r1
 801d840:	801a      	strh	r2, [r3, #0]
 801d842:	687a      	ldr	r2, [r7, #4]
 801d844:	683b      	ldr	r3, [r7, #0]
 801d846:	781b      	ldrb	r3, [r3, #0]
 801d848:	009b      	lsls	r3, r3, #2
 801d84a:	18d3      	adds	r3, r2, r3
 801d84c:	183a      	adds	r2, r7, r0
 801d84e:	8812      	ldrh	r2, [r2, #0]
 801d850:	4907      	ldr	r1, [pc, #28]	@ (801d870 <USB_EPClearStall+0x158>)
 801d852:	430a      	orrs	r2, r1
 801d854:	b292      	uxth	r2, r2
 801d856:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801d858:	2300      	movs	r3, #0
}
 801d85a:	0018      	movs	r0, r3
 801d85c:	46bd      	mov	sp, r7
 801d85e:	b006      	add	sp, #24
 801d860:	bd80      	pop	{r7, pc}
 801d862:	46c0      	nop			@ (mov r8, r8)
 801d864:	ffff8f8f 	.word	0xffff8f8f
 801d868:	ffff80c0 	.word	0xffff80c0
 801d86c:	ffff8fbf 	.word	0xffff8fbf
 801d870:	ffff8080 	.word	0xffff8080
 801d874:	ffffc080 	.word	0xffffc080
 801d878:	ffffbf8f 	.word	0xffffbf8f

0801d87c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b082      	sub	sp, #8
 801d880:	af00      	add	r7, sp, #0
 801d882:	6078      	str	r0, [r7, #4]
 801d884:	000a      	movs	r2, r1
 801d886:	1cfb      	adds	r3, r7, #3
 801d888:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801d88a:	1cfb      	adds	r3, r7, #3
 801d88c:	781b      	ldrb	r3, [r3, #0]
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d103      	bne.n	801d89a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	224c      	movs	r2, #76	@ 0x4c
 801d896:	2180      	movs	r1, #128	@ 0x80
 801d898:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801d89a:	2300      	movs	r3, #0
}
 801d89c:	0018      	movs	r0, r3
 801d89e:	46bd      	mov	sp, r7
 801d8a0:	b002      	add	sp, #8
 801d8a2:	bd80      	pop	{r7, pc}

0801d8a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801d8a4:	b580      	push	{r7, lr}
 801d8a6:	b082      	sub	sp, #8
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	2258      	movs	r2, #88	@ 0x58
 801d8b0:	5a9b      	ldrh	r3, [r3, r2]
 801d8b2:	b29b      	uxth	r3, r3
 801d8b4:	4a05      	ldr	r2, [pc, #20]	@ (801d8cc <USB_DevConnect+0x28>)
 801d8b6:	4313      	orrs	r3, r2
 801d8b8:	b299      	uxth	r1, r3
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	2258      	movs	r2, #88	@ 0x58
 801d8be:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801d8c0:	2300      	movs	r3, #0
}
 801d8c2:	0018      	movs	r0, r3
 801d8c4:	46bd      	mov	sp, r7
 801d8c6:	b002      	add	sp, #8
 801d8c8:	bd80      	pop	{r7, pc}
 801d8ca:	46c0      	nop			@ (mov r8, r8)
 801d8cc:	ffff8000 	.word	0xffff8000

0801d8d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801d8d0:	b580      	push	{r7, lr}
 801d8d2:	b084      	sub	sp, #16
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	2244      	movs	r2, #68	@ 0x44
 801d8dc:	5a9b      	ldrh	r3, [r3, r2]
 801d8de:	b29b      	uxth	r3, r3
 801d8e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801d8e2:	68fb      	ldr	r3, [r7, #12]
}
 801d8e4:	0018      	movs	r0, r3
 801d8e6:	46bd      	mov	sp, r7
 801d8e8:	b004      	add	sp, #16
 801d8ea:	bd80      	pop	{r7, pc}

0801d8ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801d8ec:	b580      	push	{r7, lr}
 801d8ee:	b08a      	sub	sp, #40	@ 0x28
 801d8f0:	af00      	add	r7, sp, #0
 801d8f2:	60f8      	str	r0, [r7, #12]
 801d8f4:	60b9      	str	r1, [r7, #8]
 801d8f6:	0019      	movs	r1, r3
 801d8f8:	1dbb      	adds	r3, r7, #6
 801d8fa:	801a      	strh	r2, [r3, #0]
 801d8fc:	1d3b      	adds	r3, r7, #4
 801d8fe:	1c0a      	adds	r2, r1, #0
 801d900:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801d902:	1d3b      	adds	r3, r7, #4
 801d904:	881b      	ldrh	r3, [r3, #0]
 801d906:	3301      	adds	r3, #1
 801d908:	085b      	lsrs	r3, r3, #1
 801d90a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801d910:	68bb      	ldr	r3, [r7, #8]
 801d912:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801d914:	1dbb      	adds	r3, r7, #6
 801d916:	881a      	ldrh	r2, [r3, #0]
 801d918:	697b      	ldr	r3, [r7, #20]
 801d91a:	18d3      	adds	r3, r2, r3
 801d91c:	2280      	movs	r2, #128	@ 0x80
 801d91e:	00d2      	lsls	r2, r2, #3
 801d920:	4694      	mov	ip, r2
 801d922:	4463      	add	r3, ip
 801d924:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801d926:	69bb      	ldr	r3, [r7, #24]
 801d928:	627b      	str	r3, [r7, #36]	@ 0x24
 801d92a:	e020      	b.n	801d96e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801d92c:	69fb      	ldr	r3, [r7, #28]
 801d92e:	781a      	ldrb	r2, [r3, #0]
 801d930:	2112      	movs	r1, #18
 801d932:	187b      	adds	r3, r7, r1
 801d934:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801d936:	69fb      	ldr	r3, [r7, #28]
 801d938:	3301      	adds	r3, #1
 801d93a:	781b      	ldrb	r3, [r3, #0]
 801d93c:	021b      	lsls	r3, r3, #8
 801d93e:	b21a      	sxth	r2, r3
 801d940:	187b      	adds	r3, r7, r1
 801d942:	2000      	movs	r0, #0
 801d944:	5e1b      	ldrsh	r3, [r3, r0]
 801d946:	4313      	orrs	r3, r2
 801d948:	b21a      	sxth	r2, r3
 801d94a:	187b      	adds	r3, r7, r1
 801d94c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801d94e:	6a3b      	ldr	r3, [r7, #32]
 801d950:	187a      	adds	r2, r7, r1
 801d952:	8812      	ldrh	r2, [r2, #0]
 801d954:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801d956:	6a3b      	ldr	r3, [r7, #32]
 801d958:	3302      	adds	r3, #2
 801d95a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801d95c:	69fb      	ldr	r3, [r7, #28]
 801d95e:	3301      	adds	r3, #1
 801d960:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801d962:	69fb      	ldr	r3, [r7, #28]
 801d964:	3301      	adds	r3, #1
 801d966:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801d968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d96a:	3b01      	subs	r3, #1
 801d96c:	627b      	str	r3, [r7, #36]	@ 0x24
 801d96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d970:	2b00      	cmp	r3, #0
 801d972:	d1db      	bne.n	801d92c <USB_WritePMA+0x40>
  }
}
 801d974:	46c0      	nop			@ (mov r8, r8)
 801d976:	46c0      	nop			@ (mov r8, r8)
 801d978:	46bd      	mov	sp, r7
 801d97a:	b00a      	add	sp, #40	@ 0x28
 801d97c:	bd80      	pop	{r7, pc}

0801d97e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801d97e:	b580      	push	{r7, lr}
 801d980:	b08a      	sub	sp, #40	@ 0x28
 801d982:	af00      	add	r7, sp, #0
 801d984:	60f8      	str	r0, [r7, #12]
 801d986:	60b9      	str	r1, [r7, #8]
 801d988:	0019      	movs	r1, r3
 801d98a:	1dbb      	adds	r3, r7, #6
 801d98c:	801a      	strh	r2, [r3, #0]
 801d98e:	1d3b      	adds	r3, r7, #4
 801d990:	1c0a      	adds	r2, r1, #0
 801d992:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801d994:	1d3b      	adds	r3, r7, #4
 801d996:	881b      	ldrh	r3, [r3, #0]
 801d998:	085b      	lsrs	r3, r3, #1
 801d99a:	b29b      	uxth	r3, r3
 801d99c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801d9a2:	68bb      	ldr	r3, [r7, #8]
 801d9a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801d9a6:	1dbb      	adds	r3, r7, #6
 801d9a8:	881a      	ldrh	r2, [r3, #0]
 801d9aa:	697b      	ldr	r3, [r7, #20]
 801d9ac:	18d3      	adds	r3, r2, r3
 801d9ae:	2280      	movs	r2, #128	@ 0x80
 801d9b0:	00d2      	lsls	r2, r2, #3
 801d9b2:	4694      	mov	ip, r2
 801d9b4:	4463      	add	r3, ip
 801d9b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801d9b8:	69bb      	ldr	r3, [r7, #24]
 801d9ba:	627b      	str	r3, [r7, #36]	@ 0x24
 801d9bc:	e018      	b.n	801d9f0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801d9be:	6a3b      	ldr	r3, [r7, #32]
 801d9c0:	881b      	ldrh	r3, [r3, #0]
 801d9c2:	b29b      	uxth	r3, r3
 801d9c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801d9c6:	6a3b      	ldr	r3, [r7, #32]
 801d9c8:	3302      	adds	r3, #2
 801d9ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801d9cc:	693b      	ldr	r3, [r7, #16]
 801d9ce:	b2da      	uxtb	r2, r3
 801d9d0:	69fb      	ldr	r3, [r7, #28]
 801d9d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801d9d4:	69fb      	ldr	r3, [r7, #28]
 801d9d6:	3301      	adds	r3, #1
 801d9d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801d9da:	693b      	ldr	r3, [r7, #16]
 801d9dc:	0a1b      	lsrs	r3, r3, #8
 801d9de:	b2da      	uxtb	r2, r3
 801d9e0:	69fb      	ldr	r3, [r7, #28]
 801d9e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801d9e4:	69fb      	ldr	r3, [r7, #28]
 801d9e6:	3301      	adds	r3, #1
 801d9e8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801d9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9ec:	3b01      	subs	r3, #1
 801d9ee:	627b      	str	r3, [r7, #36]	@ 0x24
 801d9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d1e3      	bne.n	801d9be <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801d9f6:	1d3b      	adds	r3, r7, #4
 801d9f8:	881b      	ldrh	r3, [r3, #0]
 801d9fa:	2201      	movs	r2, #1
 801d9fc:	4013      	ands	r3, r2
 801d9fe:	b29b      	uxth	r3, r3
 801da00:	2b00      	cmp	r3, #0
 801da02:	d007      	beq.n	801da14 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801da04:	6a3b      	ldr	r3, [r7, #32]
 801da06:	881b      	ldrh	r3, [r3, #0]
 801da08:	b29b      	uxth	r3, r3
 801da0a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801da0c:	693b      	ldr	r3, [r7, #16]
 801da0e:	b2da      	uxtb	r2, r3
 801da10:	69fb      	ldr	r3, [r7, #28]
 801da12:	701a      	strb	r2, [r3, #0]
  }
}
 801da14:	46c0      	nop			@ (mov r8, r8)
 801da16:	46bd      	mov	sp, r7
 801da18:	b00a      	add	sp, #40	@ 0x28
 801da1a:	bd80      	pop	{r7, pc}

0801da1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801da1c:	b580      	push	{r7, lr}
 801da1e:	b084      	sub	sp, #16
 801da20:	af00      	add	r7, sp, #0
 801da22:	6078      	str	r0, [r7, #4]
 801da24:	000a      	movs	r2, r1
 801da26:	1cfb      	adds	r3, r7, #3
 801da28:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801da2a:	230f      	movs	r3, #15
 801da2c:	18fb      	adds	r3, r7, r3
 801da2e:	2200      	movs	r2, #0
 801da30:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	7c1b      	ldrb	r3, [r3, #16]
 801da36:	2b00      	cmp	r3, #0
 801da38:	d116      	bne.n	801da68 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801da3a:	2380      	movs	r3, #128	@ 0x80
 801da3c:	009b      	lsls	r3, r3, #2
 801da3e:	6878      	ldr	r0, [r7, #4]
 801da40:	2202      	movs	r2, #2
 801da42:	2181      	movs	r1, #129	@ 0x81
 801da44:	f002 f8eb 	bl	801fc1e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	2201      	movs	r2, #1
 801da4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801da4e:	2380      	movs	r3, #128	@ 0x80
 801da50:	009b      	lsls	r3, r3, #2
 801da52:	6878      	ldr	r0, [r7, #4]
 801da54:	2202      	movs	r2, #2
 801da56:	2101      	movs	r1, #1
 801da58:	f002 f8e1 	bl	801fc1e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801da5c:	687a      	ldr	r2, [r7, #4]
 801da5e:	23b6      	movs	r3, #182	@ 0xb6
 801da60:	005b      	lsls	r3, r3, #1
 801da62:	2101      	movs	r1, #1
 801da64:	50d1      	str	r1, [r2, r3]
 801da66:	e013      	b.n	801da90 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801da68:	6878      	ldr	r0, [r7, #4]
 801da6a:	2340      	movs	r3, #64	@ 0x40
 801da6c:	2202      	movs	r2, #2
 801da6e:	2181      	movs	r1, #129	@ 0x81
 801da70:	f002 f8d5 	bl	801fc1e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	2201      	movs	r2, #1
 801da78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801da7a:	6878      	ldr	r0, [r7, #4]
 801da7c:	2340      	movs	r3, #64	@ 0x40
 801da7e:	2202      	movs	r2, #2
 801da80:	2101      	movs	r1, #1
 801da82:	f002 f8cc 	bl	801fc1e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801da86:	687a      	ldr	r2, [r7, #4]
 801da88:	23b6      	movs	r3, #182	@ 0xb6
 801da8a:	005b      	lsls	r3, r3, #1
 801da8c:	2101      	movs	r1, #1
 801da8e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801da90:	6878      	ldr	r0, [r7, #4]
 801da92:	2308      	movs	r3, #8
 801da94:	2203      	movs	r2, #3
 801da96:	2182      	movs	r1, #130	@ 0x82
 801da98:	f002 f8c1 	bl	801fc1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	2201      	movs	r2, #1
 801daa0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801daa2:	2387      	movs	r3, #135	@ 0x87
 801daa4:	009b      	lsls	r3, r3, #2
 801daa6:	0018      	movs	r0, r3
 801daa8:	f002 fa52 	bl	801ff50 <USBD_static_malloc>
 801daac:	0001      	movs	r1, r0
 801daae:	687a      	ldr	r2, [r7, #4]
 801dab0:	23ae      	movs	r3, #174	@ 0xae
 801dab2:	009b      	lsls	r3, r3, #2
 801dab4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801dab6:	687a      	ldr	r2, [r7, #4]
 801dab8:	23ae      	movs	r3, #174	@ 0xae
 801daba:	009b      	lsls	r3, r3, #2
 801dabc:	58d3      	ldr	r3, [r2, r3]
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d104      	bne.n	801dacc <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801dac2:	230f      	movs	r3, #15
 801dac4:	18fb      	adds	r3, r7, r3
 801dac6:	2201      	movs	r2, #1
 801dac8:	701a      	strb	r2, [r3, #0]
 801daca:	e02c      	b.n	801db26 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dacc:	687a      	ldr	r2, [r7, #4]
 801dace:	23ae      	movs	r3, #174	@ 0xae
 801dad0:	009b      	lsls	r3, r3, #2
 801dad2:	58d3      	ldr	r3, [r2, r3]
 801dad4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801dad6:	687a      	ldr	r2, [r7, #4]
 801dad8:	23af      	movs	r3, #175	@ 0xaf
 801dada:	009b      	lsls	r3, r3, #2
 801dadc:	58d3      	ldr	r3, [r2, r3]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801dae2:	68ba      	ldr	r2, [r7, #8]
 801dae4:	2385      	movs	r3, #133	@ 0x85
 801dae6:	009b      	lsls	r3, r3, #2
 801dae8:	2100      	movs	r1, #0
 801daea:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801daec:	68ba      	ldr	r2, [r7, #8]
 801daee:	2386      	movs	r3, #134	@ 0x86
 801daf0:	009b      	lsls	r3, r3, #2
 801daf2:	2100      	movs	r1, #0
 801daf4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	7c1b      	ldrb	r3, [r3, #16]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d10a      	bne.n	801db14 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801dafe:	68ba      	ldr	r2, [r7, #8]
 801db00:	2381      	movs	r3, #129	@ 0x81
 801db02:	009b      	lsls	r3, r3, #2
 801db04:	58d2      	ldr	r2, [r2, r3]
 801db06:	2380      	movs	r3, #128	@ 0x80
 801db08:	009b      	lsls	r3, r3, #2
 801db0a:	6878      	ldr	r0, [r7, #4]
 801db0c:	2101      	movs	r1, #1
 801db0e:	f002 f9d1 	bl	801feb4 <USBD_LL_PrepareReceive>
 801db12:	e008      	b.n	801db26 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801db14:	68ba      	ldr	r2, [r7, #8]
 801db16:	2381      	movs	r3, #129	@ 0x81
 801db18:	009b      	lsls	r3, r3, #2
 801db1a:	58d2      	ldr	r2, [r2, r3]
 801db1c:	6878      	ldr	r0, [r7, #4]
 801db1e:	2340      	movs	r3, #64	@ 0x40
 801db20:	2101      	movs	r1, #1
 801db22:	f002 f9c7 	bl	801feb4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801db26:	230f      	movs	r3, #15
 801db28:	18fb      	adds	r3, r7, r3
 801db2a:	781b      	ldrb	r3, [r3, #0]
}
 801db2c:	0018      	movs	r0, r3
 801db2e:	46bd      	mov	sp, r7
 801db30:	b004      	add	sp, #16
 801db32:	bd80      	pop	{r7, pc}

0801db34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801db34:	b580      	push	{r7, lr}
 801db36:	b084      	sub	sp, #16
 801db38:	af00      	add	r7, sp, #0
 801db3a:	6078      	str	r0, [r7, #4]
 801db3c:	000a      	movs	r2, r1
 801db3e:	1cfb      	adds	r3, r7, #3
 801db40:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801db42:	230f      	movs	r3, #15
 801db44:	18fb      	adds	r3, r7, r3
 801db46:	2200      	movs	r2, #0
 801db48:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	2181      	movs	r1, #129	@ 0x81
 801db4e:	0018      	movs	r0, r3
 801db50:	f002 f89c 	bl	801fc8c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	2200      	movs	r2, #0
 801db58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	2101      	movs	r1, #1
 801db5e:	0018      	movs	r0, r3
 801db60:	f002 f894 	bl	801fc8c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801db64:	687a      	ldr	r2, [r7, #4]
 801db66:	23b6      	movs	r3, #182	@ 0xb6
 801db68:	005b      	lsls	r3, r3, #1
 801db6a:	2100      	movs	r1, #0
 801db6c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	2182      	movs	r1, #130	@ 0x82
 801db72:	0018      	movs	r0, r3
 801db74:	f002 f88a 	bl	801fc8c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	2200      	movs	r2, #0
 801db7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801db7e:	687a      	ldr	r2, [r7, #4]
 801db80:	23ae      	movs	r3, #174	@ 0xae
 801db82:	009b      	lsls	r3, r3, #2
 801db84:	58d3      	ldr	r3, [r2, r3]
 801db86:	2b00      	cmp	r3, #0
 801db88:	d011      	beq.n	801dbae <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801db8a:	687a      	ldr	r2, [r7, #4]
 801db8c:	23af      	movs	r3, #175	@ 0xaf
 801db8e:	009b      	lsls	r3, r3, #2
 801db90:	58d3      	ldr	r3, [r2, r3]
 801db92:	685b      	ldr	r3, [r3, #4]
 801db94:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801db96:	687a      	ldr	r2, [r7, #4]
 801db98:	23ae      	movs	r3, #174	@ 0xae
 801db9a:	009b      	lsls	r3, r3, #2
 801db9c:	58d3      	ldr	r3, [r2, r3]
 801db9e:	0018      	movs	r0, r3
 801dba0:	f002 f9e2 	bl	801ff68 <USBD_static_free>
    pdev->pClassData = NULL;
 801dba4:	687a      	ldr	r2, [r7, #4]
 801dba6:	23ae      	movs	r3, #174	@ 0xae
 801dba8:	009b      	lsls	r3, r3, #2
 801dbaa:	2100      	movs	r1, #0
 801dbac:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801dbae:	230f      	movs	r3, #15
 801dbb0:	18fb      	adds	r3, r7, r3
 801dbb2:	781b      	ldrb	r3, [r3, #0]
}
 801dbb4:	0018      	movs	r0, r3
 801dbb6:	46bd      	mov	sp, r7
 801dbb8:	b004      	add	sp, #16
 801dbba:	bd80      	pop	{r7, pc}

0801dbbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801dbbc:	b580      	push	{r7, lr}
 801dbbe:	b086      	sub	sp, #24
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
 801dbc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dbc6:	687a      	ldr	r2, [r7, #4]
 801dbc8:	23ae      	movs	r3, #174	@ 0xae
 801dbca:	009b      	lsls	r3, r3, #2
 801dbcc:	58d3      	ldr	r3, [r2, r3]
 801dbce:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801dbd0:	230f      	movs	r3, #15
 801dbd2:	18fb      	adds	r3, r7, r3
 801dbd4:	2200      	movs	r2, #0
 801dbd6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801dbd8:	230c      	movs	r3, #12
 801dbda:	18fb      	adds	r3, r7, r3
 801dbdc:	2200      	movs	r2, #0
 801dbde:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801dbe0:	2317      	movs	r3, #23
 801dbe2:	18fb      	adds	r3, r7, r3
 801dbe4:	2200      	movs	r2, #0
 801dbe6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801dbe8:	683b      	ldr	r3, [r7, #0]
 801dbea:	781b      	ldrb	r3, [r3, #0]
 801dbec:	001a      	movs	r2, r3
 801dbee:	2360      	movs	r3, #96	@ 0x60
 801dbf0:	4013      	ands	r3, r2
 801dbf2:	d03d      	beq.n	801dc70 <USBD_CDC_Setup+0xb4>
 801dbf4:	2b20      	cmp	r3, #32
 801dbf6:	d000      	beq.n	801dbfa <USBD_CDC_Setup+0x3e>
 801dbf8:	e094      	b.n	801dd24 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801dbfa:	683b      	ldr	r3, [r7, #0]
 801dbfc:	88db      	ldrh	r3, [r3, #6]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d02b      	beq.n	801dc5a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801dc02:	683b      	ldr	r3, [r7, #0]
 801dc04:	781b      	ldrb	r3, [r3, #0]
 801dc06:	b25b      	sxtb	r3, r3
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	da12      	bge.n	801dc32 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801dc0c:	687a      	ldr	r2, [r7, #4]
 801dc0e:	23af      	movs	r3, #175	@ 0xaf
 801dc10:	009b      	lsls	r3, r3, #2
 801dc12:	58d3      	ldr	r3, [r2, r3]
 801dc14:	689b      	ldr	r3, [r3, #8]
 801dc16:	683a      	ldr	r2, [r7, #0]
 801dc18:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801dc1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801dc1c:	683a      	ldr	r2, [r7, #0]
 801dc1e:	88d2      	ldrh	r2, [r2, #6]
 801dc20:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801dc22:	6939      	ldr	r1, [r7, #16]
 801dc24:	683b      	ldr	r3, [r7, #0]
 801dc26:	88da      	ldrh	r2, [r3, #6]
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	0018      	movs	r0, r3
 801dc2c:	f001 fbaf 	bl	801f38e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801dc30:	e083      	b.n	801dd3a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801dc32:	683b      	ldr	r3, [r7, #0]
 801dc34:	7859      	ldrb	r1, [r3, #1]
 801dc36:	693a      	ldr	r2, [r7, #16]
 801dc38:	2380      	movs	r3, #128	@ 0x80
 801dc3a:	009b      	lsls	r3, r3, #2
 801dc3c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801dc3e:	683b      	ldr	r3, [r7, #0]
 801dc40:	88db      	ldrh	r3, [r3, #6]
 801dc42:	b2d9      	uxtb	r1, r3
 801dc44:	693b      	ldr	r3, [r7, #16]
 801dc46:	4a40      	ldr	r2, [pc, #256]	@ (801dd48 <USBD_CDC_Setup+0x18c>)
 801dc48:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801dc4a:	6939      	ldr	r1, [r7, #16]
 801dc4c:	683b      	ldr	r3, [r7, #0]
 801dc4e:	88da      	ldrh	r2, [r3, #6]
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	0018      	movs	r0, r3
 801dc54:	f001 fbce 	bl	801f3f4 <USBD_CtlPrepareRx>
      break;
 801dc58:	e06f      	b.n	801dd3a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801dc5a:	687a      	ldr	r2, [r7, #4]
 801dc5c:	23af      	movs	r3, #175	@ 0xaf
 801dc5e:	009b      	lsls	r3, r3, #2
 801dc60:	58d3      	ldr	r3, [r2, r3]
 801dc62:	689b      	ldr	r3, [r3, #8]
 801dc64:	683a      	ldr	r2, [r7, #0]
 801dc66:	7850      	ldrb	r0, [r2, #1]
 801dc68:	6839      	ldr	r1, [r7, #0]
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	4798      	blx	r3
      break;
 801dc6e:	e064      	b.n	801dd3a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801dc70:	683b      	ldr	r3, [r7, #0]
 801dc72:	785b      	ldrb	r3, [r3, #1]
 801dc74:	2b0b      	cmp	r3, #11
 801dc76:	d037      	beq.n	801dce8 <USBD_CDC_Setup+0x12c>
 801dc78:	dc47      	bgt.n	801dd0a <USBD_CDC_Setup+0x14e>
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d002      	beq.n	801dc84 <USBD_CDC_Setup+0xc8>
 801dc7e:	2b0a      	cmp	r3, #10
 801dc80:	d019      	beq.n	801dcb6 <USBD_CDC_Setup+0xfa>
 801dc82:	e042      	b.n	801dd0a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dc84:	687a      	ldr	r2, [r7, #4]
 801dc86:	23a7      	movs	r3, #167	@ 0xa7
 801dc88:	009b      	lsls	r3, r3, #2
 801dc8a:	5cd3      	ldrb	r3, [r2, r3]
 801dc8c:	2b03      	cmp	r3, #3
 801dc8e:	d107      	bne.n	801dca0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801dc90:	230c      	movs	r3, #12
 801dc92:	18f9      	adds	r1, r7, r3
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	2202      	movs	r2, #2
 801dc98:	0018      	movs	r0, r3
 801dc9a:	f001 fb78 	bl	801f38e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801dc9e:	e040      	b.n	801dd22 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801dca0:	683a      	ldr	r2, [r7, #0]
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	0011      	movs	r1, r2
 801dca6:	0018      	movs	r0, r3
 801dca8:	f001 faf3 	bl	801f292 <USBD_CtlError>
            ret = USBD_FAIL;
 801dcac:	2317      	movs	r3, #23
 801dcae:	18fb      	adds	r3, r7, r3
 801dcb0:	2202      	movs	r2, #2
 801dcb2:	701a      	strb	r2, [r3, #0]
          break;
 801dcb4:	e035      	b.n	801dd22 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dcb6:	687a      	ldr	r2, [r7, #4]
 801dcb8:	23a7      	movs	r3, #167	@ 0xa7
 801dcba:	009b      	lsls	r3, r3, #2
 801dcbc:	5cd3      	ldrb	r3, [r2, r3]
 801dcbe:	2b03      	cmp	r3, #3
 801dcc0:	d107      	bne.n	801dcd2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801dcc2:	230f      	movs	r3, #15
 801dcc4:	18f9      	adds	r1, r7, r3
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	2201      	movs	r2, #1
 801dcca:	0018      	movs	r0, r3
 801dccc:	f001 fb5f 	bl	801f38e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801dcd0:	e027      	b.n	801dd22 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801dcd2:	683a      	ldr	r2, [r7, #0]
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	0011      	movs	r1, r2
 801dcd8:	0018      	movs	r0, r3
 801dcda:	f001 fada 	bl	801f292 <USBD_CtlError>
            ret = USBD_FAIL;
 801dcde:	2317      	movs	r3, #23
 801dce0:	18fb      	adds	r3, r7, r3
 801dce2:	2202      	movs	r2, #2
 801dce4:	701a      	strb	r2, [r3, #0]
          break;
 801dce6:	e01c      	b.n	801dd22 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801dce8:	687a      	ldr	r2, [r7, #4]
 801dcea:	23a7      	movs	r3, #167	@ 0xa7
 801dcec:	009b      	lsls	r3, r3, #2
 801dcee:	5cd3      	ldrb	r3, [r2, r3]
 801dcf0:	2b03      	cmp	r3, #3
 801dcf2:	d015      	beq.n	801dd20 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801dcf4:	683a      	ldr	r2, [r7, #0]
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	0011      	movs	r1, r2
 801dcfa:	0018      	movs	r0, r3
 801dcfc:	f001 fac9 	bl	801f292 <USBD_CtlError>
            ret = USBD_FAIL;
 801dd00:	2317      	movs	r3, #23
 801dd02:	18fb      	adds	r3, r7, r3
 801dd04:	2202      	movs	r2, #2
 801dd06:	701a      	strb	r2, [r3, #0]
          }
          break;
 801dd08:	e00a      	b.n	801dd20 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801dd0a:	683a      	ldr	r2, [r7, #0]
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	0011      	movs	r1, r2
 801dd10:	0018      	movs	r0, r3
 801dd12:	f001 fabe 	bl	801f292 <USBD_CtlError>
          ret = USBD_FAIL;
 801dd16:	2317      	movs	r3, #23
 801dd18:	18fb      	adds	r3, r7, r3
 801dd1a:	2202      	movs	r2, #2
 801dd1c:	701a      	strb	r2, [r3, #0]
          break;
 801dd1e:	e000      	b.n	801dd22 <USBD_CDC_Setup+0x166>
          break;
 801dd20:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801dd22:	e00a      	b.n	801dd3a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801dd24:	683a      	ldr	r2, [r7, #0]
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	0011      	movs	r1, r2
 801dd2a:	0018      	movs	r0, r3
 801dd2c:	f001 fab1 	bl	801f292 <USBD_CtlError>
      ret = USBD_FAIL;
 801dd30:	2317      	movs	r3, #23
 801dd32:	18fb      	adds	r3, r7, r3
 801dd34:	2202      	movs	r2, #2
 801dd36:	701a      	strb	r2, [r3, #0]
      break;
 801dd38:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801dd3a:	2317      	movs	r3, #23
 801dd3c:	18fb      	adds	r3, r7, r3
 801dd3e:	781b      	ldrb	r3, [r3, #0]
}
 801dd40:	0018      	movs	r0, r3
 801dd42:	46bd      	mov	sp, r7
 801dd44:	b006      	add	sp, #24
 801dd46:	bd80      	pop	{r7, pc}
 801dd48:	00000201 	.word	0x00000201

0801dd4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801dd4c:	b580      	push	{r7, lr}
 801dd4e:	b084      	sub	sp, #16
 801dd50:	af00      	add	r7, sp, #0
 801dd52:	6078      	str	r0, [r7, #4]
 801dd54:	000a      	movs	r2, r1
 801dd56:	1cfb      	adds	r3, r7, #3
 801dd58:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801dd5a:	687a      	ldr	r2, [r7, #4]
 801dd5c:	23ae      	movs	r3, #174	@ 0xae
 801dd5e:	009b      	lsls	r3, r3, #2
 801dd60:	58d3      	ldr	r3, [r2, r3]
 801dd62:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801dd64:	687a      	ldr	r2, [r7, #4]
 801dd66:	23b0      	movs	r3, #176	@ 0xb0
 801dd68:	009b      	lsls	r3, r3, #2
 801dd6a:	58d3      	ldr	r3, [r2, r3]
 801dd6c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801dd6e:	687a      	ldr	r2, [r7, #4]
 801dd70:	23ae      	movs	r3, #174	@ 0xae
 801dd72:	009b      	lsls	r3, r3, #2
 801dd74:	58d3      	ldr	r3, [r2, r3]
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d03e      	beq.n	801ddf8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801dd7a:	1cfb      	adds	r3, r7, #3
 801dd7c:	781a      	ldrb	r2, [r3, #0]
 801dd7e:	6879      	ldr	r1, [r7, #4]
 801dd80:	0013      	movs	r3, r2
 801dd82:	009b      	lsls	r3, r3, #2
 801dd84:	189b      	adds	r3, r3, r2
 801dd86:	009b      	lsls	r3, r3, #2
 801dd88:	18cb      	adds	r3, r1, r3
 801dd8a:	331c      	adds	r3, #28
 801dd8c:	681b      	ldr	r3, [r3, #0]
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d02b      	beq.n	801ddea <USBD_CDC_DataIn+0x9e>
 801dd92:	1cfb      	adds	r3, r7, #3
 801dd94:	781a      	ldrb	r2, [r3, #0]
 801dd96:	6879      	ldr	r1, [r7, #4]
 801dd98:	0013      	movs	r3, r2
 801dd9a:	009b      	lsls	r3, r3, #2
 801dd9c:	189b      	adds	r3, r3, r2
 801dd9e:	009b      	lsls	r3, r3, #2
 801dda0:	18cb      	adds	r3, r1, r3
 801dda2:	331c      	adds	r3, #28
 801dda4:	6818      	ldr	r0, [r3, #0]
 801dda6:	1cfb      	adds	r3, r7, #3
 801dda8:	781a      	ldrb	r2, [r3, #0]
 801ddaa:	68b9      	ldr	r1, [r7, #8]
 801ddac:	0013      	movs	r3, r2
 801ddae:	009b      	lsls	r3, r3, #2
 801ddb0:	189b      	adds	r3, r3, r2
 801ddb2:	00db      	lsls	r3, r3, #3
 801ddb4:	18cb      	adds	r3, r1, r3
 801ddb6:	3338      	adds	r3, #56	@ 0x38
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	0019      	movs	r1, r3
 801ddbc:	f7e2 fa78 	bl	80002b0 <__aeabi_uidivmod>
 801ddc0:	1e0b      	subs	r3, r1, #0
 801ddc2:	d112      	bne.n	801ddea <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801ddc4:	1cfb      	adds	r3, r7, #3
 801ddc6:	781a      	ldrb	r2, [r3, #0]
 801ddc8:	6879      	ldr	r1, [r7, #4]
 801ddca:	0013      	movs	r3, r2
 801ddcc:	009b      	lsls	r3, r3, #2
 801ddce:	189b      	adds	r3, r3, r2
 801ddd0:	009b      	lsls	r3, r3, #2
 801ddd2:	18cb      	adds	r3, r1, r3
 801ddd4:	331c      	adds	r3, #28
 801ddd6:	2200      	movs	r2, #0
 801ddd8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ddda:	1cfb      	adds	r3, r7, #3
 801dddc:	7819      	ldrb	r1, [r3, #0]
 801ddde:	6878      	ldr	r0, [r7, #4]
 801dde0:	2300      	movs	r3, #0
 801dde2:	2200      	movs	r2, #0
 801dde4:	f002 f82f 	bl	801fe46 <USBD_LL_Transmit>
 801dde8:	e004      	b.n	801ddf4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801ddea:	68fa      	ldr	r2, [r7, #12]
 801ddec:	2385      	movs	r3, #133	@ 0x85
 801ddee:	009b      	lsls	r3, r3, #2
 801ddf0:	2100      	movs	r1, #0
 801ddf2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801ddf4:	2300      	movs	r3, #0
 801ddf6:	e000      	b.n	801ddfa <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801ddf8:	2302      	movs	r3, #2
  }
}
 801ddfa:	0018      	movs	r0, r3
 801ddfc:	46bd      	mov	sp, r7
 801ddfe:	b004      	add	sp, #16
 801de00:	bd80      	pop	{r7, pc}

0801de02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801de02:	b580      	push	{r7, lr}
 801de04:	b084      	sub	sp, #16
 801de06:	af00      	add	r7, sp, #0
 801de08:	6078      	str	r0, [r7, #4]
 801de0a:	000a      	movs	r2, r1
 801de0c:	1cfb      	adds	r3, r7, #3
 801de0e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801de10:	687a      	ldr	r2, [r7, #4]
 801de12:	23ae      	movs	r3, #174	@ 0xae
 801de14:	009b      	lsls	r3, r3, #2
 801de16:	58d3      	ldr	r3, [r2, r3]
 801de18:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801de1a:	1cfb      	adds	r3, r7, #3
 801de1c:	781a      	ldrb	r2, [r3, #0]
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	0011      	movs	r1, r2
 801de22:	0018      	movs	r0, r3
 801de24:	f002 f87d 	bl	801ff22 <USBD_LL_GetRxDataSize>
 801de28:	0001      	movs	r1, r0
 801de2a:	68fa      	ldr	r2, [r7, #12]
 801de2c:	2383      	movs	r3, #131	@ 0x83
 801de2e:	009b      	lsls	r3, r3, #2
 801de30:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801de32:	687a      	ldr	r2, [r7, #4]
 801de34:	23ae      	movs	r3, #174	@ 0xae
 801de36:	009b      	lsls	r3, r3, #2
 801de38:	58d3      	ldr	r3, [r2, r3]
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	d011      	beq.n	801de62 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801de3e:	687a      	ldr	r2, [r7, #4]
 801de40:	23af      	movs	r3, #175	@ 0xaf
 801de42:	009b      	lsls	r3, r3, #2
 801de44:	58d3      	ldr	r3, [r2, r3]
 801de46:	68da      	ldr	r2, [r3, #12]
 801de48:	68f9      	ldr	r1, [r7, #12]
 801de4a:	2381      	movs	r3, #129	@ 0x81
 801de4c:	009b      	lsls	r3, r3, #2
 801de4e:	58c8      	ldr	r0, [r1, r3]
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	2183      	movs	r1, #131	@ 0x83
 801de54:	0089      	lsls	r1, r1, #2
 801de56:	468c      	mov	ip, r1
 801de58:	4463      	add	r3, ip
 801de5a:	0019      	movs	r1, r3
 801de5c:	4790      	blx	r2

    return USBD_OK;
 801de5e:	2300      	movs	r3, #0
 801de60:	e000      	b.n	801de64 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801de62:	2302      	movs	r3, #2
  }
}
 801de64:	0018      	movs	r0, r3
 801de66:	46bd      	mov	sp, r7
 801de68:	b004      	add	sp, #16
 801de6a:	bd80      	pop	{r7, pc}

0801de6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801de6c:	b590      	push	{r4, r7, lr}
 801de6e:	b085      	sub	sp, #20
 801de70:	af00      	add	r7, sp, #0
 801de72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801de74:	687a      	ldr	r2, [r7, #4]
 801de76:	23ae      	movs	r3, #174	@ 0xae
 801de78:	009b      	lsls	r3, r3, #2
 801de7a:	58d3      	ldr	r3, [r2, r3]
 801de7c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801de7e:	687a      	ldr	r2, [r7, #4]
 801de80:	23af      	movs	r3, #175	@ 0xaf
 801de82:	009b      	lsls	r3, r3, #2
 801de84:	58d3      	ldr	r3, [r2, r3]
 801de86:	2b00      	cmp	r3, #0
 801de88:	d018      	beq.n	801debc <USBD_CDC_EP0_RxReady+0x50>
 801de8a:	68fa      	ldr	r2, [r7, #12]
 801de8c:	2380      	movs	r3, #128	@ 0x80
 801de8e:	009b      	lsls	r3, r3, #2
 801de90:	5cd3      	ldrb	r3, [r2, r3]
 801de92:	2bff      	cmp	r3, #255	@ 0xff
 801de94:	d012      	beq.n	801debc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801de96:	687a      	ldr	r2, [r7, #4]
 801de98:	23af      	movs	r3, #175	@ 0xaf
 801de9a:	009b      	lsls	r3, r3, #2
 801de9c:	58d3      	ldr	r3, [r2, r3]
 801de9e:	689b      	ldr	r3, [r3, #8]
 801dea0:	68f9      	ldr	r1, [r7, #12]
 801dea2:	2280      	movs	r2, #128	@ 0x80
 801dea4:	0092      	lsls	r2, r2, #2
 801dea6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801dea8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801deaa:	68fa      	ldr	r2, [r7, #12]
 801deac:	4c06      	ldr	r4, [pc, #24]	@ (801dec8 <USBD_CDC_EP0_RxReady+0x5c>)
 801deae:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801deb0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801deb2:	68fa      	ldr	r2, [r7, #12]
 801deb4:	2380      	movs	r3, #128	@ 0x80
 801deb6:	009b      	lsls	r3, r3, #2
 801deb8:	21ff      	movs	r1, #255	@ 0xff
 801deba:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801debc:	2300      	movs	r3, #0
}
 801debe:	0018      	movs	r0, r3
 801dec0:	46bd      	mov	sp, r7
 801dec2:	b005      	add	sp, #20
 801dec4:	bd90      	pop	{r4, r7, pc}
 801dec6:	46c0      	nop			@ (mov r8, r8)
 801dec8:	00000201 	.word	0x00000201

0801decc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801decc:	b580      	push	{r7, lr}
 801dece:	b082      	sub	sp, #8
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	2243      	movs	r2, #67	@ 0x43
 801ded8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801deda:	4b02      	ldr	r3, [pc, #8]	@ (801dee4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801dedc:	0018      	movs	r0, r3
 801dede:	46bd      	mov	sp, r7
 801dee0:	b002      	add	sp, #8
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	20000180 	.word	0x20000180

0801dee8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b082      	sub	sp, #8
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	2243      	movs	r2, #67	@ 0x43
 801def4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801def6:	4b02      	ldr	r3, [pc, #8]	@ (801df00 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801def8:	0018      	movs	r0, r3
 801defa:	46bd      	mov	sp, r7
 801defc:	b002      	add	sp, #8
 801defe:	bd80      	pop	{r7, pc}
 801df00:	2000013c 	.word	0x2000013c

0801df04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801df04:	b580      	push	{r7, lr}
 801df06:	b082      	sub	sp, #8
 801df08:	af00      	add	r7, sp, #0
 801df0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	2243      	movs	r2, #67	@ 0x43
 801df10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801df12:	4b02      	ldr	r3, [pc, #8]	@ (801df1c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801df14:	0018      	movs	r0, r3
 801df16:	46bd      	mov	sp, r7
 801df18:	b002      	add	sp, #8
 801df1a:	bd80      	pop	{r7, pc}
 801df1c:	200001c4 	.word	0x200001c4

0801df20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801df20:	b580      	push	{r7, lr}
 801df22:	b082      	sub	sp, #8
 801df24:	af00      	add	r7, sp, #0
 801df26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	220a      	movs	r2, #10
 801df2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801df2e:	4b02      	ldr	r3, [pc, #8]	@ (801df38 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801df30:	0018      	movs	r0, r3
 801df32:	46bd      	mov	sp, r7
 801df34:	b002      	add	sp, #8
 801df36:	bd80      	pop	{r7, pc}
 801df38:	200000f8 	.word	0x200000f8

0801df3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801df3c:	b580      	push	{r7, lr}
 801df3e:	b084      	sub	sp, #16
 801df40:	af00      	add	r7, sp, #0
 801df42:	6078      	str	r0, [r7, #4]
 801df44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801df46:	200f      	movs	r0, #15
 801df48:	183b      	adds	r3, r7, r0
 801df4a:	2202      	movs	r2, #2
 801df4c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801df4e:	683b      	ldr	r3, [r7, #0]
 801df50:	2b00      	cmp	r3, #0
 801df52:	d007      	beq.n	801df64 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801df54:	687a      	ldr	r2, [r7, #4]
 801df56:	23af      	movs	r3, #175	@ 0xaf
 801df58:	009b      	lsls	r3, r3, #2
 801df5a:	6839      	ldr	r1, [r7, #0]
 801df5c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801df5e:	183b      	adds	r3, r7, r0
 801df60:	2200      	movs	r2, #0
 801df62:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801df64:	230f      	movs	r3, #15
 801df66:	18fb      	adds	r3, r7, r3
 801df68:	781b      	ldrb	r3, [r3, #0]
}
 801df6a:	0018      	movs	r0, r3
 801df6c:	46bd      	mov	sp, r7
 801df6e:	b004      	add	sp, #16
 801df70:	bd80      	pop	{r7, pc}

0801df72 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801df72:	b580      	push	{r7, lr}
 801df74:	b086      	sub	sp, #24
 801df76:	af00      	add	r7, sp, #0
 801df78:	60f8      	str	r0, [r7, #12]
 801df7a:	60b9      	str	r1, [r7, #8]
 801df7c:	1dbb      	adds	r3, r7, #6
 801df7e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801df80:	68fa      	ldr	r2, [r7, #12]
 801df82:	23ae      	movs	r3, #174	@ 0xae
 801df84:	009b      	lsls	r3, r3, #2
 801df86:	58d3      	ldr	r3, [r2, r3]
 801df88:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801df8a:	697a      	ldr	r2, [r7, #20]
 801df8c:	2382      	movs	r3, #130	@ 0x82
 801df8e:	009b      	lsls	r3, r3, #2
 801df90:	68b9      	ldr	r1, [r7, #8]
 801df92:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801df94:	1dbb      	adds	r3, r7, #6
 801df96:	8819      	ldrh	r1, [r3, #0]
 801df98:	697a      	ldr	r2, [r7, #20]
 801df9a:	2384      	movs	r3, #132	@ 0x84
 801df9c:	009b      	lsls	r3, r3, #2
 801df9e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801dfa0:	2300      	movs	r3, #0
}
 801dfa2:	0018      	movs	r0, r3
 801dfa4:	46bd      	mov	sp, r7
 801dfa6:	b006      	add	sp, #24
 801dfa8:	bd80      	pop	{r7, pc}

0801dfaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801dfaa:	b580      	push	{r7, lr}
 801dfac:	b084      	sub	sp, #16
 801dfae:	af00      	add	r7, sp, #0
 801dfb0:	6078      	str	r0, [r7, #4]
 801dfb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dfb4:	687a      	ldr	r2, [r7, #4]
 801dfb6:	23ae      	movs	r3, #174	@ 0xae
 801dfb8:	009b      	lsls	r3, r3, #2
 801dfba:	58d3      	ldr	r3, [r2, r3]
 801dfbc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801dfbe:	68fa      	ldr	r2, [r7, #12]
 801dfc0:	2381      	movs	r3, #129	@ 0x81
 801dfc2:	009b      	lsls	r3, r3, #2
 801dfc4:	6839      	ldr	r1, [r7, #0]
 801dfc6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801dfc8:	2300      	movs	r3, #0
}
 801dfca:	0018      	movs	r0, r3
 801dfcc:	46bd      	mov	sp, r7
 801dfce:	b004      	add	sp, #16
 801dfd0:	bd80      	pop	{r7, pc}

0801dfd2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801dfd2:	b580      	push	{r7, lr}
 801dfd4:	b084      	sub	sp, #16
 801dfd6:	af00      	add	r7, sp, #0
 801dfd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dfda:	687a      	ldr	r2, [r7, #4]
 801dfdc:	23ae      	movs	r3, #174	@ 0xae
 801dfde:	009b      	lsls	r3, r3, #2
 801dfe0:	58d3      	ldr	r3, [r2, r3]
 801dfe2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801dfe4:	687a      	ldr	r2, [r7, #4]
 801dfe6:	23ae      	movs	r3, #174	@ 0xae
 801dfe8:	009b      	lsls	r3, r3, #2
 801dfea:	58d3      	ldr	r3, [r2, r3]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d022      	beq.n	801e036 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801dff0:	68fa      	ldr	r2, [r7, #12]
 801dff2:	2385      	movs	r3, #133	@ 0x85
 801dff4:	009b      	lsls	r3, r3, #2
 801dff6:	58d3      	ldr	r3, [r2, r3]
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	d11a      	bne.n	801e032 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801dffc:	68fa      	ldr	r2, [r7, #12]
 801dffe:	2385      	movs	r3, #133	@ 0x85
 801e000:	009b      	lsls	r3, r3, #2
 801e002:	2101      	movs	r1, #1
 801e004:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801e006:	68fa      	ldr	r2, [r7, #12]
 801e008:	2384      	movs	r3, #132	@ 0x84
 801e00a:	009b      	lsls	r3, r3, #2
 801e00c:	58d2      	ldr	r2, [r2, r3]
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801e012:	68fa      	ldr	r2, [r7, #12]
 801e014:	2382      	movs	r3, #130	@ 0x82
 801e016:	009b      	lsls	r3, r3, #2
 801e018:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801e01a:	68fa      	ldr	r2, [r7, #12]
 801e01c:	2384      	movs	r3, #132	@ 0x84
 801e01e:	009b      	lsls	r3, r3, #2
 801e020:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801e022:	b29b      	uxth	r3, r3
 801e024:	6878      	ldr	r0, [r7, #4]
 801e026:	000a      	movs	r2, r1
 801e028:	2181      	movs	r1, #129	@ 0x81
 801e02a:	f001 ff0c 	bl	801fe46 <USBD_LL_Transmit>

      return USBD_OK;
 801e02e:	2300      	movs	r3, #0
 801e030:	e002      	b.n	801e038 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801e032:	2301      	movs	r3, #1
 801e034:	e000      	b.n	801e038 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801e036:	2302      	movs	r3, #2
  }
}
 801e038:	0018      	movs	r0, r3
 801e03a:	46bd      	mov	sp, r7
 801e03c:	b004      	add	sp, #16
 801e03e:	bd80      	pop	{r7, pc}

0801e040 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801e040:	b580      	push	{r7, lr}
 801e042:	b084      	sub	sp, #16
 801e044:	af00      	add	r7, sp, #0
 801e046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801e048:	687a      	ldr	r2, [r7, #4]
 801e04a:	23ae      	movs	r3, #174	@ 0xae
 801e04c:	009b      	lsls	r3, r3, #2
 801e04e:	58d3      	ldr	r3, [r2, r3]
 801e050:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801e052:	687a      	ldr	r2, [r7, #4]
 801e054:	23ae      	movs	r3, #174	@ 0xae
 801e056:	009b      	lsls	r3, r3, #2
 801e058:	58d3      	ldr	r3, [r2, r3]
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d019      	beq.n	801e092 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	7c1b      	ldrb	r3, [r3, #16]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d10a      	bne.n	801e07c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801e066:	68fa      	ldr	r2, [r7, #12]
 801e068:	2381      	movs	r3, #129	@ 0x81
 801e06a:	009b      	lsls	r3, r3, #2
 801e06c:	58d2      	ldr	r2, [r2, r3]
 801e06e:	2380      	movs	r3, #128	@ 0x80
 801e070:	009b      	lsls	r3, r3, #2
 801e072:	6878      	ldr	r0, [r7, #4]
 801e074:	2101      	movs	r1, #1
 801e076:	f001 ff1d 	bl	801feb4 <USBD_LL_PrepareReceive>
 801e07a:	e008      	b.n	801e08e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801e07c:	68fa      	ldr	r2, [r7, #12]
 801e07e:	2381      	movs	r3, #129	@ 0x81
 801e080:	009b      	lsls	r3, r3, #2
 801e082:	58d2      	ldr	r2, [r2, r3]
 801e084:	6878      	ldr	r0, [r7, #4]
 801e086:	2340      	movs	r3, #64	@ 0x40
 801e088:	2101      	movs	r1, #1
 801e08a:	f001 ff13 	bl	801feb4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801e08e:	2300      	movs	r3, #0
 801e090:	e000      	b.n	801e094 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801e092:	2302      	movs	r3, #2
  }
}
 801e094:	0018      	movs	r0, r3
 801e096:	46bd      	mov	sp, r7
 801e098:	b004      	add	sp, #16
 801e09a:	bd80      	pop	{r7, pc}

0801e09c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b084      	sub	sp, #16
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	60f8      	str	r0, [r7, #12]
 801e0a4:	60b9      	str	r1, [r7, #8]
 801e0a6:	1dfb      	adds	r3, r7, #7
 801e0a8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801e0aa:	68fb      	ldr	r3, [r7, #12]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d101      	bne.n	801e0b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801e0b0:	2302      	movs	r3, #2
 801e0b2:	e020      	b.n	801e0f6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801e0b4:	68fa      	ldr	r2, [r7, #12]
 801e0b6:	23ad      	movs	r3, #173	@ 0xad
 801e0b8:	009b      	lsls	r3, r3, #2
 801e0ba:	58d3      	ldr	r3, [r2, r3]
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	d004      	beq.n	801e0ca <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801e0c0:	68fa      	ldr	r2, [r7, #12]
 801e0c2:	23ad      	movs	r3, #173	@ 0xad
 801e0c4:	009b      	lsls	r3, r3, #2
 801e0c6:	2100      	movs	r1, #0
 801e0c8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801e0ca:	68bb      	ldr	r3, [r7, #8]
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d004      	beq.n	801e0da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801e0d0:	68fa      	ldr	r2, [r7, #12]
 801e0d2:	23ac      	movs	r3, #172	@ 0xac
 801e0d4:	009b      	lsls	r3, r3, #2
 801e0d6:	68b9      	ldr	r1, [r7, #8]
 801e0d8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e0da:	68fa      	ldr	r2, [r7, #12]
 801e0dc:	23a7      	movs	r3, #167	@ 0xa7
 801e0de:	009b      	lsls	r3, r3, #2
 801e0e0:	2101      	movs	r1, #1
 801e0e2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801e0e4:	68fb      	ldr	r3, [r7, #12]
 801e0e6:	1dfa      	adds	r2, r7, #7
 801e0e8:	7812      	ldrb	r2, [r2, #0]
 801e0ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	0018      	movs	r0, r3
 801e0f0:	f001 fd0c 	bl	801fb0c <USBD_LL_Init>

  return USBD_OK;
 801e0f4:	2300      	movs	r3, #0
}
 801e0f6:	0018      	movs	r0, r3
 801e0f8:	46bd      	mov	sp, r7
 801e0fa:	b004      	add	sp, #16
 801e0fc:	bd80      	pop	{r7, pc}

0801e0fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801e0fe:	b580      	push	{r7, lr}
 801e100:	b084      	sub	sp, #16
 801e102:	af00      	add	r7, sp, #0
 801e104:	6078      	str	r0, [r7, #4]
 801e106:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801e108:	200f      	movs	r0, #15
 801e10a:	183b      	adds	r3, r7, r0
 801e10c:	2200      	movs	r2, #0
 801e10e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801e110:	683b      	ldr	r3, [r7, #0]
 801e112:	2b00      	cmp	r3, #0
 801e114:	d008      	beq.n	801e128 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801e116:	687a      	ldr	r2, [r7, #4]
 801e118:	23ad      	movs	r3, #173	@ 0xad
 801e11a:	009b      	lsls	r3, r3, #2
 801e11c:	6839      	ldr	r1, [r7, #0]
 801e11e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801e120:	183b      	adds	r3, r7, r0
 801e122:	2200      	movs	r2, #0
 801e124:	701a      	strb	r2, [r3, #0]
 801e126:	e003      	b.n	801e130 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801e128:	230f      	movs	r3, #15
 801e12a:	18fb      	adds	r3, r7, r3
 801e12c:	2202      	movs	r2, #2
 801e12e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801e130:	230f      	movs	r3, #15
 801e132:	18fb      	adds	r3, r7, r3
 801e134:	781b      	ldrb	r3, [r3, #0]
}
 801e136:	0018      	movs	r0, r3
 801e138:	46bd      	mov	sp, r7
 801e13a:	b004      	add	sp, #16
 801e13c:	bd80      	pop	{r7, pc}

0801e13e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801e13e:	b580      	push	{r7, lr}
 801e140:	b082      	sub	sp, #8
 801e142:	af00      	add	r7, sp, #0
 801e144:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	0018      	movs	r0, r3
 801e14a:	f001 fd43 	bl	801fbd4 <USBD_LL_Start>

  return USBD_OK;
 801e14e:	2300      	movs	r3, #0
}
 801e150:	0018      	movs	r0, r3
 801e152:	46bd      	mov	sp, r7
 801e154:	b002      	add	sp, #8
 801e156:	bd80      	pop	{r7, pc}

0801e158 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801e158:	b580      	push	{r7, lr}
 801e15a:	b082      	sub	sp, #8
 801e15c:	af00      	add	r7, sp, #0
 801e15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801e160:	2300      	movs	r3, #0
}
 801e162:	0018      	movs	r0, r3
 801e164:	46bd      	mov	sp, r7
 801e166:	b002      	add	sp, #8
 801e168:	bd80      	pop	{r7, pc}

0801e16a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801e16a:	b590      	push	{r4, r7, lr}
 801e16c:	b085      	sub	sp, #20
 801e16e:	af00      	add	r7, sp, #0
 801e170:	6078      	str	r0, [r7, #4]
 801e172:	000a      	movs	r2, r1
 801e174:	1cfb      	adds	r3, r7, #3
 801e176:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801e178:	240f      	movs	r4, #15
 801e17a:	193b      	adds	r3, r7, r4
 801e17c:	2202      	movs	r2, #2
 801e17e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801e180:	687a      	ldr	r2, [r7, #4]
 801e182:	23ad      	movs	r3, #173	@ 0xad
 801e184:	009b      	lsls	r3, r3, #2
 801e186:	58d3      	ldr	r3, [r2, r3]
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d00e      	beq.n	801e1aa <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801e18c:	687a      	ldr	r2, [r7, #4]
 801e18e:	23ad      	movs	r3, #173	@ 0xad
 801e190:	009b      	lsls	r3, r3, #2
 801e192:	58d3      	ldr	r3, [r2, r3]
 801e194:	681b      	ldr	r3, [r3, #0]
 801e196:	1cfa      	adds	r2, r7, #3
 801e198:	7811      	ldrb	r1, [r2, #0]
 801e19a:	687a      	ldr	r2, [r7, #4]
 801e19c:	0010      	movs	r0, r2
 801e19e:	4798      	blx	r3
 801e1a0:	1e03      	subs	r3, r0, #0
 801e1a2:	d102      	bne.n	801e1aa <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801e1a4:	193b      	adds	r3, r7, r4
 801e1a6:	2200      	movs	r2, #0
 801e1a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801e1aa:	230f      	movs	r3, #15
 801e1ac:	18fb      	adds	r3, r7, r3
 801e1ae:	781b      	ldrb	r3, [r3, #0]
}
 801e1b0:	0018      	movs	r0, r3
 801e1b2:	46bd      	mov	sp, r7
 801e1b4:	b005      	add	sp, #20
 801e1b6:	bd90      	pop	{r4, r7, pc}

0801e1b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801e1b8:	b580      	push	{r7, lr}
 801e1ba:	b082      	sub	sp, #8
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]
 801e1c0:	000a      	movs	r2, r1
 801e1c2:	1cfb      	adds	r3, r7, #3
 801e1c4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801e1c6:	687a      	ldr	r2, [r7, #4]
 801e1c8:	23ad      	movs	r3, #173	@ 0xad
 801e1ca:	009b      	lsls	r3, r3, #2
 801e1cc:	58d3      	ldr	r3, [r2, r3]
 801e1ce:	685b      	ldr	r3, [r3, #4]
 801e1d0:	1cfa      	adds	r2, r7, #3
 801e1d2:	7811      	ldrb	r1, [r2, #0]
 801e1d4:	687a      	ldr	r2, [r7, #4]
 801e1d6:	0010      	movs	r0, r2
 801e1d8:	4798      	blx	r3

  return USBD_OK;
 801e1da:	2300      	movs	r3, #0
}
 801e1dc:	0018      	movs	r0, r3
 801e1de:	46bd      	mov	sp, r7
 801e1e0:	b002      	add	sp, #8
 801e1e2:	bd80      	pop	{r7, pc}

0801e1e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801e1e4:	b580      	push	{r7, lr}
 801e1e6:	b082      	sub	sp, #8
 801e1e8:	af00      	add	r7, sp, #0
 801e1ea:	6078      	str	r0, [r7, #4]
 801e1ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	22aa      	movs	r2, #170	@ 0xaa
 801e1f2:	0092      	lsls	r2, r2, #2
 801e1f4:	4694      	mov	ip, r2
 801e1f6:	4463      	add	r3, ip
 801e1f8:	683a      	ldr	r2, [r7, #0]
 801e1fa:	0011      	movs	r1, r2
 801e1fc:	0018      	movs	r0, r3
 801e1fe:	f001 f810 	bl	801f222 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801e202:	687a      	ldr	r2, [r7, #4]
 801e204:	23a5      	movs	r3, #165	@ 0xa5
 801e206:	009b      	lsls	r3, r3, #2
 801e208:	2101      	movs	r1, #1
 801e20a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	4a23      	ldr	r2, [pc, #140]	@ (801e29c <USBD_LL_SetupStage+0xb8>)
 801e210:	5a9b      	ldrh	r3, [r3, r2]
 801e212:	0019      	movs	r1, r3
 801e214:	687a      	ldr	r2, [r7, #4]
 801e216:	23a6      	movs	r3, #166	@ 0xa6
 801e218:	009b      	lsls	r3, r3, #2
 801e21a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801e21c:	687a      	ldr	r2, [r7, #4]
 801e21e:	23aa      	movs	r3, #170	@ 0xaa
 801e220:	009b      	lsls	r3, r3, #2
 801e222:	5cd3      	ldrb	r3, [r2, r3]
 801e224:	001a      	movs	r2, r3
 801e226:	231f      	movs	r3, #31
 801e228:	4013      	ands	r3, r2
 801e22a:	2b02      	cmp	r3, #2
 801e22c:	d019      	beq.n	801e262 <USBD_LL_SetupStage+0x7e>
 801e22e:	d822      	bhi.n	801e276 <USBD_LL_SetupStage+0x92>
 801e230:	2b00      	cmp	r3, #0
 801e232:	d002      	beq.n	801e23a <USBD_LL_SetupStage+0x56>
 801e234:	2b01      	cmp	r3, #1
 801e236:	d00a      	beq.n	801e24e <USBD_LL_SetupStage+0x6a>
 801e238:	e01d      	b.n	801e276 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	22aa      	movs	r2, #170	@ 0xaa
 801e23e:	0092      	lsls	r2, r2, #2
 801e240:	189a      	adds	r2, r3, r2
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	0011      	movs	r1, r2
 801e246:	0018      	movs	r0, r3
 801e248:	f000 fa10 	bl	801e66c <USBD_StdDevReq>
      break;
 801e24c:	e020      	b.n	801e290 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	22aa      	movs	r2, #170	@ 0xaa
 801e252:	0092      	lsls	r2, r2, #2
 801e254:	189a      	adds	r2, r3, r2
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	0011      	movs	r1, r2
 801e25a:	0018      	movs	r0, r3
 801e25c:	f000 fa78 	bl	801e750 <USBD_StdItfReq>
      break;
 801e260:	e016      	b.n	801e290 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	22aa      	movs	r2, #170	@ 0xaa
 801e266:	0092      	lsls	r2, r2, #2
 801e268:	189a      	adds	r2, r3, r2
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	0011      	movs	r1, r2
 801e26e:	0018      	movs	r0, r3
 801e270:	f000 fac5 	bl	801e7fe <USBD_StdEPReq>
      break;
 801e274:	e00c      	b.n	801e290 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801e276:	687a      	ldr	r2, [r7, #4]
 801e278:	23aa      	movs	r3, #170	@ 0xaa
 801e27a:	009b      	lsls	r3, r3, #2
 801e27c:	5cd3      	ldrb	r3, [r2, r3]
 801e27e:	227f      	movs	r2, #127	@ 0x7f
 801e280:	4393      	bics	r3, r2
 801e282:	b2da      	uxtb	r2, r3
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	0011      	movs	r1, r2
 801e288:	0018      	movs	r0, r3
 801e28a:	f001 fd2a 	bl	801fce2 <USBD_LL_StallEP>
      break;
 801e28e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801e290:	2300      	movs	r3, #0
}
 801e292:	0018      	movs	r0, r3
 801e294:	46bd      	mov	sp, r7
 801e296:	b002      	add	sp, #8
 801e298:	bd80      	pop	{r7, pc}
 801e29a:	46c0      	nop			@ (mov r8, r8)
 801e29c:	000002ae 	.word	0x000002ae

0801e2a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b086      	sub	sp, #24
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	60f8      	str	r0, [r7, #12]
 801e2a8:	607a      	str	r2, [r7, #4]
 801e2aa:	200b      	movs	r0, #11
 801e2ac:	183b      	adds	r3, r7, r0
 801e2ae:	1c0a      	adds	r2, r1, #0
 801e2b0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e2b2:	183b      	adds	r3, r7, r0
 801e2b4:	781b      	ldrb	r3, [r3, #0]
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d154      	bne.n	801e364 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	3355      	adds	r3, #85	@ 0x55
 801e2be:	33ff      	adds	r3, #255	@ 0xff
 801e2c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801e2c2:	68fa      	ldr	r2, [r7, #12]
 801e2c4:	23a5      	movs	r3, #165	@ 0xa5
 801e2c6:	009b      	lsls	r3, r3, #2
 801e2c8:	58d3      	ldr	r3, [r2, r3]
 801e2ca:	2b03      	cmp	r3, #3
 801e2cc:	d139      	bne.n	801e342 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801e2ce:	697b      	ldr	r3, [r7, #20]
 801e2d0:	68da      	ldr	r2, [r3, #12]
 801e2d2:	697b      	ldr	r3, [r7, #20]
 801e2d4:	691b      	ldr	r3, [r3, #16]
 801e2d6:	429a      	cmp	r2, r3
 801e2d8:	d919      	bls.n	801e30e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801e2da:	697b      	ldr	r3, [r7, #20]
 801e2dc:	68da      	ldr	r2, [r3, #12]
 801e2de:	697b      	ldr	r3, [r7, #20]
 801e2e0:	691b      	ldr	r3, [r3, #16]
 801e2e2:	1ad2      	subs	r2, r2, r3
 801e2e4:	697b      	ldr	r3, [r7, #20]
 801e2e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e2e8:	697b      	ldr	r3, [r7, #20]
 801e2ea:	68da      	ldr	r2, [r3, #12]
 801e2ec:	697b      	ldr	r3, [r7, #20]
 801e2ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801e2f0:	429a      	cmp	r2, r3
 801e2f2:	d203      	bcs.n	801e2fc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e2f4:	697b      	ldr	r3, [r7, #20]
 801e2f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801e2f8:	b29b      	uxth	r3, r3
 801e2fa:	e002      	b.n	801e302 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e2fc:	697b      	ldr	r3, [r7, #20]
 801e2fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801e300:	b29b      	uxth	r3, r3
 801e302:	6879      	ldr	r1, [r7, #4]
 801e304:	68f8      	ldr	r0, [r7, #12]
 801e306:	001a      	movs	r2, r3
 801e308:	f001 f898 	bl	801f43c <USBD_CtlContinueRx>
 801e30c:	e045      	b.n	801e39a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e30e:	68fa      	ldr	r2, [r7, #12]
 801e310:	23ad      	movs	r3, #173	@ 0xad
 801e312:	009b      	lsls	r3, r3, #2
 801e314:	58d3      	ldr	r3, [r2, r3]
 801e316:	691b      	ldr	r3, [r3, #16]
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d00d      	beq.n	801e338 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e31c:	68fa      	ldr	r2, [r7, #12]
 801e31e:	23a7      	movs	r3, #167	@ 0xa7
 801e320:	009b      	lsls	r3, r3, #2
 801e322:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e324:	2b03      	cmp	r3, #3
 801e326:	d107      	bne.n	801e338 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801e328:	68fa      	ldr	r2, [r7, #12]
 801e32a:	23ad      	movs	r3, #173	@ 0xad
 801e32c:	009b      	lsls	r3, r3, #2
 801e32e:	58d3      	ldr	r3, [r2, r3]
 801e330:	691b      	ldr	r3, [r3, #16]
 801e332:	68fa      	ldr	r2, [r7, #12]
 801e334:	0010      	movs	r0, r2
 801e336:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	0018      	movs	r0, r3
 801e33c:	f001 f891 	bl	801f462 <USBD_CtlSendStatus>
 801e340:	e02b      	b.n	801e39a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801e342:	68fa      	ldr	r2, [r7, #12]
 801e344:	23a5      	movs	r3, #165	@ 0xa5
 801e346:	009b      	lsls	r3, r3, #2
 801e348:	58d3      	ldr	r3, [r2, r3]
 801e34a:	2b05      	cmp	r3, #5
 801e34c:	d125      	bne.n	801e39a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801e34e:	68fa      	ldr	r2, [r7, #12]
 801e350:	23a5      	movs	r3, #165	@ 0xa5
 801e352:	009b      	lsls	r3, r3, #2
 801e354:	2100      	movs	r1, #0
 801e356:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	2100      	movs	r1, #0
 801e35c:	0018      	movs	r0, r3
 801e35e:	f001 fcc0 	bl	801fce2 <USBD_LL_StallEP>
 801e362:	e01a      	b.n	801e39a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801e364:	68fa      	ldr	r2, [r7, #12]
 801e366:	23ad      	movs	r3, #173	@ 0xad
 801e368:	009b      	lsls	r3, r3, #2
 801e36a:	58d3      	ldr	r3, [r2, r3]
 801e36c:	699b      	ldr	r3, [r3, #24]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d011      	beq.n	801e396 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e372:	68fa      	ldr	r2, [r7, #12]
 801e374:	23a7      	movs	r3, #167	@ 0xa7
 801e376:	009b      	lsls	r3, r3, #2
 801e378:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801e37a:	2b03      	cmp	r3, #3
 801e37c:	d10b      	bne.n	801e396 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801e37e:	68fa      	ldr	r2, [r7, #12]
 801e380:	23ad      	movs	r3, #173	@ 0xad
 801e382:	009b      	lsls	r3, r3, #2
 801e384:	58d3      	ldr	r3, [r2, r3]
 801e386:	699b      	ldr	r3, [r3, #24]
 801e388:	220b      	movs	r2, #11
 801e38a:	18ba      	adds	r2, r7, r2
 801e38c:	7811      	ldrb	r1, [r2, #0]
 801e38e:	68fa      	ldr	r2, [r7, #12]
 801e390:	0010      	movs	r0, r2
 801e392:	4798      	blx	r3
 801e394:	e001      	b.n	801e39a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801e396:	2302      	movs	r3, #2
 801e398:	e000      	b.n	801e39c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801e39a:	2300      	movs	r3, #0
}
 801e39c:	0018      	movs	r0, r3
 801e39e:	46bd      	mov	sp, r7
 801e3a0:	b006      	add	sp, #24
 801e3a2:	bd80      	pop	{r7, pc}

0801e3a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801e3a4:	b580      	push	{r7, lr}
 801e3a6:	b086      	sub	sp, #24
 801e3a8:	af00      	add	r7, sp, #0
 801e3aa:	60f8      	str	r0, [r7, #12]
 801e3ac:	607a      	str	r2, [r7, #4]
 801e3ae:	200b      	movs	r0, #11
 801e3b0:	183b      	adds	r3, r7, r0
 801e3b2:	1c0a      	adds	r2, r1, #0
 801e3b4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e3b6:	183b      	adds	r3, r7, r0
 801e3b8:	781b      	ldrb	r3, [r3, #0]
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	d000      	beq.n	801e3c0 <USBD_LL_DataInStage+0x1c>
 801e3be:	e08e      	b.n	801e4de <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801e3c0:	68fb      	ldr	r3, [r7, #12]
 801e3c2:	3314      	adds	r3, #20
 801e3c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801e3c6:	68fa      	ldr	r2, [r7, #12]
 801e3c8:	23a5      	movs	r3, #165	@ 0xa5
 801e3ca:	009b      	lsls	r3, r3, #2
 801e3cc:	58d3      	ldr	r3, [r2, r3]
 801e3ce:	2b02      	cmp	r3, #2
 801e3d0:	d164      	bne.n	801e49c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801e3d2:	697b      	ldr	r3, [r7, #20]
 801e3d4:	68da      	ldr	r2, [r3, #12]
 801e3d6:	697b      	ldr	r3, [r7, #20]
 801e3d8:	691b      	ldr	r3, [r3, #16]
 801e3da:	429a      	cmp	r2, r3
 801e3dc:	d915      	bls.n	801e40a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801e3de:	697b      	ldr	r3, [r7, #20]
 801e3e0:	68da      	ldr	r2, [r3, #12]
 801e3e2:	697b      	ldr	r3, [r7, #20]
 801e3e4:	691b      	ldr	r3, [r3, #16]
 801e3e6:	1ad2      	subs	r2, r2, r3
 801e3e8:	697b      	ldr	r3, [r7, #20]
 801e3ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801e3ec:	697b      	ldr	r3, [r7, #20]
 801e3ee:	68db      	ldr	r3, [r3, #12]
 801e3f0:	b29a      	uxth	r2, r3
 801e3f2:	6879      	ldr	r1, [r7, #4]
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	0018      	movs	r0, r3
 801e3f8:	f000 ffe9 	bl	801f3ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e3fc:	68f8      	ldr	r0, [r7, #12]
 801e3fe:	2300      	movs	r3, #0
 801e400:	2200      	movs	r2, #0
 801e402:	2100      	movs	r1, #0
 801e404:	f001 fd56 	bl	801feb4 <USBD_LL_PrepareReceive>
 801e408:	e059      	b.n	801e4be <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e40a:	697b      	ldr	r3, [r7, #20]
 801e40c:	689a      	ldr	r2, [r3, #8]
 801e40e:	697b      	ldr	r3, [r7, #20]
 801e410:	691b      	ldr	r3, [r3, #16]
 801e412:	0019      	movs	r1, r3
 801e414:	0010      	movs	r0, r2
 801e416:	f7e1 ff4b 	bl	80002b0 <__aeabi_uidivmod>
 801e41a:	1e0b      	subs	r3, r1, #0
 801e41c:	d11f      	bne.n	801e45e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801e41e:	697b      	ldr	r3, [r7, #20]
 801e420:	689a      	ldr	r2, [r3, #8]
 801e422:	697b      	ldr	r3, [r7, #20]
 801e424:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e426:	429a      	cmp	r2, r3
 801e428:	d319      	bcc.n	801e45e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801e42a:	697b      	ldr	r3, [r7, #20]
 801e42c:	689a      	ldr	r2, [r3, #8]
 801e42e:	68f9      	ldr	r1, [r7, #12]
 801e430:	23a6      	movs	r3, #166	@ 0xa6
 801e432:	009b      	lsls	r3, r3, #2
 801e434:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801e436:	429a      	cmp	r2, r3
 801e438:	d211      	bcs.n	801e45e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	2200      	movs	r2, #0
 801e43e:	2100      	movs	r1, #0
 801e440:	0018      	movs	r0, r3
 801e442:	f000 ffc4 	bl	801f3ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801e446:	68fa      	ldr	r2, [r7, #12]
 801e448:	23a6      	movs	r3, #166	@ 0xa6
 801e44a:	009b      	lsls	r3, r3, #2
 801e44c:	2100      	movs	r1, #0
 801e44e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e450:	68f8      	ldr	r0, [r7, #12]
 801e452:	2300      	movs	r3, #0
 801e454:	2200      	movs	r2, #0
 801e456:	2100      	movs	r1, #0
 801e458:	f001 fd2c 	bl	801feb4 <USBD_LL_PrepareReceive>
 801e45c:	e02f      	b.n	801e4be <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e45e:	68fa      	ldr	r2, [r7, #12]
 801e460:	23ad      	movs	r3, #173	@ 0xad
 801e462:	009b      	lsls	r3, r3, #2
 801e464:	58d3      	ldr	r3, [r2, r3]
 801e466:	68db      	ldr	r3, [r3, #12]
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d00d      	beq.n	801e488 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e46c:	68fa      	ldr	r2, [r7, #12]
 801e46e:	23a7      	movs	r3, #167	@ 0xa7
 801e470:	009b      	lsls	r3, r3, #2
 801e472:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e474:	2b03      	cmp	r3, #3
 801e476:	d107      	bne.n	801e488 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801e478:	68fa      	ldr	r2, [r7, #12]
 801e47a:	23ad      	movs	r3, #173	@ 0xad
 801e47c:	009b      	lsls	r3, r3, #2
 801e47e:	58d3      	ldr	r3, [r2, r3]
 801e480:	68db      	ldr	r3, [r3, #12]
 801e482:	68fa      	ldr	r2, [r7, #12]
 801e484:	0010      	movs	r0, r2
 801e486:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801e488:	68fb      	ldr	r3, [r7, #12]
 801e48a:	2180      	movs	r1, #128	@ 0x80
 801e48c:	0018      	movs	r0, r3
 801e48e:	f001 fc28 	bl	801fce2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	0018      	movs	r0, r3
 801e496:	f000 fff8 	bl	801f48a <USBD_CtlReceiveStatus>
 801e49a:	e010      	b.n	801e4be <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e49c:	68fa      	ldr	r2, [r7, #12]
 801e49e:	23a5      	movs	r3, #165	@ 0xa5
 801e4a0:	009b      	lsls	r3, r3, #2
 801e4a2:	58d3      	ldr	r3, [r2, r3]
 801e4a4:	2b04      	cmp	r3, #4
 801e4a6:	d005      	beq.n	801e4b4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801e4a8:	68fa      	ldr	r2, [r7, #12]
 801e4aa:	23a5      	movs	r3, #165	@ 0xa5
 801e4ac:	009b      	lsls	r3, r3, #2
 801e4ae:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d104      	bne.n	801e4be <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	2180      	movs	r1, #128	@ 0x80
 801e4b8:	0018      	movs	r0, r3
 801e4ba:	f001 fc12 	bl	801fce2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801e4be:	68fa      	ldr	r2, [r7, #12]
 801e4c0:	23a8      	movs	r3, #168	@ 0xa8
 801e4c2:	009b      	lsls	r3, r3, #2
 801e4c4:	5cd3      	ldrb	r3, [r2, r3]
 801e4c6:	2b01      	cmp	r3, #1
 801e4c8:	d124      	bne.n	801e514 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801e4ca:	68fb      	ldr	r3, [r7, #12]
 801e4cc:	0018      	movs	r0, r3
 801e4ce:	f7ff fe43 	bl	801e158 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801e4d2:	68fa      	ldr	r2, [r7, #12]
 801e4d4:	23a8      	movs	r3, #168	@ 0xa8
 801e4d6:	009b      	lsls	r3, r3, #2
 801e4d8:	2100      	movs	r1, #0
 801e4da:	54d1      	strb	r1, [r2, r3]
 801e4dc:	e01a      	b.n	801e514 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801e4de:	68fa      	ldr	r2, [r7, #12]
 801e4e0:	23ad      	movs	r3, #173	@ 0xad
 801e4e2:	009b      	lsls	r3, r3, #2
 801e4e4:	58d3      	ldr	r3, [r2, r3]
 801e4e6:	695b      	ldr	r3, [r3, #20]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d011      	beq.n	801e510 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e4ec:	68fa      	ldr	r2, [r7, #12]
 801e4ee:	23a7      	movs	r3, #167	@ 0xa7
 801e4f0:	009b      	lsls	r3, r3, #2
 801e4f2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801e4f4:	2b03      	cmp	r3, #3
 801e4f6:	d10b      	bne.n	801e510 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801e4f8:	68fa      	ldr	r2, [r7, #12]
 801e4fa:	23ad      	movs	r3, #173	@ 0xad
 801e4fc:	009b      	lsls	r3, r3, #2
 801e4fe:	58d3      	ldr	r3, [r2, r3]
 801e500:	695b      	ldr	r3, [r3, #20]
 801e502:	220b      	movs	r2, #11
 801e504:	18ba      	adds	r2, r7, r2
 801e506:	7811      	ldrb	r1, [r2, #0]
 801e508:	68fa      	ldr	r2, [r7, #12]
 801e50a:	0010      	movs	r0, r2
 801e50c:	4798      	blx	r3
 801e50e:	e001      	b.n	801e514 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801e510:	2302      	movs	r3, #2
 801e512:	e000      	b.n	801e516 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801e514:	2300      	movs	r3, #0
}
 801e516:	0018      	movs	r0, r3
 801e518:	46bd      	mov	sp, r7
 801e51a:	b006      	add	sp, #24
 801e51c:	bd80      	pop	{r7, pc}

0801e51e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801e51e:	b580      	push	{r7, lr}
 801e520:	b082      	sub	sp, #8
 801e522:	af00      	add	r7, sp, #0
 801e524:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e526:	6878      	ldr	r0, [r7, #4]
 801e528:	2340      	movs	r3, #64	@ 0x40
 801e52a:	2200      	movs	r2, #0
 801e52c:	2100      	movs	r1, #0
 801e52e:	f001 fb76 	bl	801fc1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801e532:	687a      	ldr	r2, [r7, #4]
 801e534:	23ac      	movs	r3, #172	@ 0xac
 801e536:	005b      	lsls	r3, r3, #1
 801e538:	2101      	movs	r1, #1
 801e53a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801e53c:	687a      	ldr	r2, [r7, #4]
 801e53e:	23b2      	movs	r3, #178	@ 0xb2
 801e540:	005b      	lsls	r3, r3, #1
 801e542:	2140      	movs	r1, #64	@ 0x40
 801e544:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e546:	6878      	ldr	r0, [r7, #4]
 801e548:	2340      	movs	r3, #64	@ 0x40
 801e54a:	2200      	movs	r2, #0
 801e54c:	2180      	movs	r1, #128	@ 0x80
 801e54e:	f001 fb66 	bl	801fc1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	2201      	movs	r2, #1
 801e556:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	2240      	movs	r2, #64	@ 0x40
 801e55c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e55e:	687a      	ldr	r2, [r7, #4]
 801e560:	23a7      	movs	r3, #167	@ 0xa7
 801e562:	009b      	lsls	r3, r3, #2
 801e564:	2101      	movs	r1, #1
 801e566:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801e568:	687a      	ldr	r2, [r7, #4]
 801e56a:	23a5      	movs	r3, #165	@ 0xa5
 801e56c:	009b      	lsls	r3, r3, #2
 801e56e:	2100      	movs	r1, #0
 801e570:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	2200      	movs	r2, #0
 801e576:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801e578:	687a      	ldr	r2, [r7, #4]
 801e57a:	23a9      	movs	r3, #169	@ 0xa9
 801e57c:	009b      	lsls	r3, r3, #2
 801e57e:	2100      	movs	r1, #0
 801e580:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801e582:	687a      	ldr	r2, [r7, #4]
 801e584:	23ae      	movs	r3, #174	@ 0xae
 801e586:	009b      	lsls	r3, r3, #2
 801e588:	58d3      	ldr	r3, [r2, r3]
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d00a      	beq.n	801e5a4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801e58e:	687a      	ldr	r2, [r7, #4]
 801e590:	23ad      	movs	r3, #173	@ 0xad
 801e592:	009b      	lsls	r3, r3, #2
 801e594:	58d3      	ldr	r3, [r2, r3]
 801e596:	685a      	ldr	r2, [r3, #4]
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	685b      	ldr	r3, [r3, #4]
 801e59c:	b2d9      	uxtb	r1, r3
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	0018      	movs	r0, r3
 801e5a2:	4790      	blx	r2
  }

  return USBD_OK;
 801e5a4:	2300      	movs	r3, #0
}
 801e5a6:	0018      	movs	r0, r3
 801e5a8:	46bd      	mov	sp, r7
 801e5aa:	b002      	add	sp, #8
 801e5ac:	bd80      	pop	{r7, pc}

0801e5ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801e5ae:	b580      	push	{r7, lr}
 801e5b0:	b082      	sub	sp, #8
 801e5b2:	af00      	add	r7, sp, #0
 801e5b4:	6078      	str	r0, [r7, #4]
 801e5b6:	000a      	movs	r2, r1
 801e5b8:	1cfb      	adds	r3, r7, #3
 801e5ba:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	1cfa      	adds	r2, r7, #3
 801e5c0:	7812      	ldrb	r2, [r2, #0]
 801e5c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801e5c4:	2300      	movs	r3, #0
}
 801e5c6:	0018      	movs	r0, r3
 801e5c8:	46bd      	mov	sp, r7
 801e5ca:	b002      	add	sp, #8
 801e5cc:	bd80      	pop	{r7, pc}
	...

0801e5d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801e5d0:	b580      	push	{r7, lr}
 801e5d2:	b082      	sub	sp, #8
 801e5d4:	af00      	add	r7, sp, #0
 801e5d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801e5d8:	687a      	ldr	r2, [r7, #4]
 801e5da:	23a7      	movs	r3, #167	@ 0xa7
 801e5dc:	009b      	lsls	r3, r3, #2
 801e5de:	5cd1      	ldrb	r1, [r2, r3]
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	4a06      	ldr	r2, [pc, #24]	@ (801e5fc <USBD_LL_Suspend+0x2c>)
 801e5e4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801e5e6:	687a      	ldr	r2, [r7, #4]
 801e5e8:	23a7      	movs	r3, #167	@ 0xa7
 801e5ea:	009b      	lsls	r3, r3, #2
 801e5ec:	2104      	movs	r1, #4
 801e5ee:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801e5f0:	2300      	movs	r3, #0
}
 801e5f2:	0018      	movs	r0, r3
 801e5f4:	46bd      	mov	sp, r7
 801e5f6:	b002      	add	sp, #8
 801e5f8:	bd80      	pop	{r7, pc}
 801e5fa:	46c0      	nop			@ (mov r8, r8)
 801e5fc:	0000029d 	.word	0x0000029d

0801e600 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801e600:	b580      	push	{r7, lr}
 801e602:	b082      	sub	sp, #8
 801e604:	af00      	add	r7, sp, #0
 801e606:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801e608:	687a      	ldr	r2, [r7, #4]
 801e60a:	23a7      	movs	r3, #167	@ 0xa7
 801e60c:	009b      	lsls	r3, r3, #2
 801e60e:	5cd3      	ldrb	r3, [r2, r3]
 801e610:	2b04      	cmp	r3, #4
 801e612:	d106      	bne.n	801e622 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	4a05      	ldr	r2, [pc, #20]	@ (801e62c <USBD_LL_Resume+0x2c>)
 801e618:	5c99      	ldrb	r1, [r3, r2]
 801e61a:	687a      	ldr	r2, [r7, #4]
 801e61c:	23a7      	movs	r3, #167	@ 0xa7
 801e61e:	009b      	lsls	r3, r3, #2
 801e620:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801e622:	2300      	movs	r3, #0
}
 801e624:	0018      	movs	r0, r3
 801e626:	46bd      	mov	sp, r7
 801e628:	b002      	add	sp, #8
 801e62a:	bd80      	pop	{r7, pc}
 801e62c:	0000029d 	.word	0x0000029d

0801e630 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801e630:	b580      	push	{r7, lr}
 801e632:	b082      	sub	sp, #8
 801e634:	af00      	add	r7, sp, #0
 801e636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e638:	687a      	ldr	r2, [r7, #4]
 801e63a:	23a7      	movs	r3, #167	@ 0xa7
 801e63c:	009b      	lsls	r3, r3, #2
 801e63e:	5cd3      	ldrb	r3, [r2, r3]
 801e640:	2b03      	cmp	r3, #3
 801e642:	d10e      	bne.n	801e662 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801e644:	687a      	ldr	r2, [r7, #4]
 801e646:	23ad      	movs	r3, #173	@ 0xad
 801e648:	009b      	lsls	r3, r3, #2
 801e64a:	58d3      	ldr	r3, [r2, r3]
 801e64c:	69db      	ldr	r3, [r3, #28]
 801e64e:	2b00      	cmp	r3, #0
 801e650:	d007      	beq.n	801e662 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801e652:	687a      	ldr	r2, [r7, #4]
 801e654:	23ad      	movs	r3, #173	@ 0xad
 801e656:	009b      	lsls	r3, r3, #2
 801e658:	58d3      	ldr	r3, [r2, r3]
 801e65a:	69db      	ldr	r3, [r3, #28]
 801e65c:	687a      	ldr	r2, [r7, #4]
 801e65e:	0010      	movs	r0, r2
 801e660:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801e662:	2300      	movs	r3, #0
}
 801e664:	0018      	movs	r0, r3
 801e666:	46bd      	mov	sp, r7
 801e668:	b002      	add	sp, #8
 801e66a:	bd80      	pop	{r7, pc}

0801e66c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801e66c:	b580      	push	{r7, lr}
 801e66e:	b084      	sub	sp, #16
 801e670:	af00      	add	r7, sp, #0
 801e672:	6078      	str	r0, [r7, #4]
 801e674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e676:	230f      	movs	r3, #15
 801e678:	18fb      	adds	r3, r7, r3
 801e67a:	2200      	movs	r2, #0
 801e67c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e67e:	683b      	ldr	r3, [r7, #0]
 801e680:	781b      	ldrb	r3, [r3, #0]
 801e682:	001a      	movs	r2, r3
 801e684:	2360      	movs	r3, #96	@ 0x60
 801e686:	4013      	ands	r3, r2
 801e688:	2b40      	cmp	r3, #64	@ 0x40
 801e68a:	d004      	beq.n	801e696 <USBD_StdDevReq+0x2a>
 801e68c:	d84f      	bhi.n	801e72e <USBD_StdDevReq+0xc2>
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d00b      	beq.n	801e6aa <USBD_StdDevReq+0x3e>
 801e692:	2b20      	cmp	r3, #32
 801e694:	d14b      	bne.n	801e72e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801e696:	687a      	ldr	r2, [r7, #4]
 801e698:	23ad      	movs	r3, #173	@ 0xad
 801e69a:	009b      	lsls	r3, r3, #2
 801e69c:	58d3      	ldr	r3, [r2, r3]
 801e69e:	689b      	ldr	r3, [r3, #8]
 801e6a0:	6839      	ldr	r1, [r7, #0]
 801e6a2:	687a      	ldr	r2, [r7, #4]
 801e6a4:	0010      	movs	r0, r2
 801e6a6:	4798      	blx	r3
      break;
 801e6a8:	e048      	b.n	801e73c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801e6aa:	683b      	ldr	r3, [r7, #0]
 801e6ac:	785b      	ldrb	r3, [r3, #1]
 801e6ae:	2b09      	cmp	r3, #9
 801e6b0:	d835      	bhi.n	801e71e <USBD_StdDevReq+0xb2>
 801e6b2:	009a      	lsls	r2, r3, #2
 801e6b4:	4b25      	ldr	r3, [pc, #148]	@ (801e74c <USBD_StdDevReq+0xe0>)
 801e6b6:	18d3      	adds	r3, r2, r3
 801e6b8:	681b      	ldr	r3, [r3, #0]
 801e6ba:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801e6bc:	683a      	ldr	r2, [r7, #0]
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	0011      	movs	r1, r2
 801e6c2:	0018      	movs	r0, r3
 801e6c4:	f000 fa52 	bl	801eb6c <USBD_GetDescriptor>
          break;
 801e6c8:	e030      	b.n	801e72c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801e6ca:	683a      	ldr	r2, [r7, #0]
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	0011      	movs	r1, r2
 801e6d0:	0018      	movs	r0, r3
 801e6d2:	f000 fbfd 	bl	801eed0 <USBD_SetAddress>
          break;
 801e6d6:	e029      	b.n	801e72c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801e6d8:	683a      	ldr	r2, [r7, #0]
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	0011      	movs	r1, r2
 801e6de:	0018      	movs	r0, r3
 801e6e0:	f000 fc4a 	bl	801ef78 <USBD_SetConfig>
          break;
 801e6e4:	e022      	b.n	801e72c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801e6e6:	683a      	ldr	r2, [r7, #0]
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	0011      	movs	r1, r2
 801e6ec:	0018      	movs	r0, r3
 801e6ee:	f000 fce7 	bl	801f0c0 <USBD_GetConfig>
          break;
 801e6f2:	e01b      	b.n	801e72c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801e6f4:	683a      	ldr	r2, [r7, #0]
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	0011      	movs	r1, r2
 801e6fa:	0018      	movs	r0, r3
 801e6fc:	f000 fd1b 	bl	801f136 <USBD_GetStatus>
          break;
 801e700:	e014      	b.n	801e72c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801e702:	683a      	ldr	r2, [r7, #0]
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	0011      	movs	r1, r2
 801e708:	0018      	movs	r0, r3
 801e70a:	f000 fd4e 	bl	801f1aa <USBD_SetFeature>
          break;
 801e70e:	e00d      	b.n	801e72c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801e710:	683a      	ldr	r2, [r7, #0]
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	0011      	movs	r1, r2
 801e716:	0018      	movs	r0, r3
 801e718:	f000 fd5d 	bl	801f1d6 <USBD_ClrFeature>
          break;
 801e71c:	e006      	b.n	801e72c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801e71e:	683a      	ldr	r2, [r7, #0]
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	0011      	movs	r1, r2
 801e724:	0018      	movs	r0, r3
 801e726:	f000 fdb4 	bl	801f292 <USBD_CtlError>
          break;
 801e72a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e72c:	e006      	b.n	801e73c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801e72e:	683a      	ldr	r2, [r7, #0]
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	0011      	movs	r1, r2
 801e734:	0018      	movs	r0, r3
 801e736:	f000 fdac 	bl	801f292 <USBD_CtlError>
      break;
 801e73a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801e73c:	230f      	movs	r3, #15
 801e73e:	18fb      	adds	r3, r7, r3
 801e740:	781b      	ldrb	r3, [r3, #0]
}
 801e742:	0018      	movs	r0, r3
 801e744:	46bd      	mov	sp, r7
 801e746:	b004      	add	sp, #16
 801e748:	bd80      	pop	{r7, pc}
 801e74a:	46c0      	nop			@ (mov r8, r8)
 801e74c:	08028ff0 	.word	0x08028ff0

0801e750 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801e750:	b5b0      	push	{r4, r5, r7, lr}
 801e752:	b084      	sub	sp, #16
 801e754:	af00      	add	r7, sp, #0
 801e756:	6078      	str	r0, [r7, #4]
 801e758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e75a:	230f      	movs	r3, #15
 801e75c:	18fb      	adds	r3, r7, r3
 801e75e:	2200      	movs	r2, #0
 801e760:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e762:	683b      	ldr	r3, [r7, #0]
 801e764:	781b      	ldrb	r3, [r3, #0]
 801e766:	001a      	movs	r2, r3
 801e768:	2360      	movs	r3, #96	@ 0x60
 801e76a:	4013      	ands	r3, r2
 801e76c:	2b40      	cmp	r3, #64	@ 0x40
 801e76e:	d004      	beq.n	801e77a <USBD_StdItfReq+0x2a>
 801e770:	d839      	bhi.n	801e7e6 <USBD_StdItfReq+0x96>
 801e772:	2b00      	cmp	r3, #0
 801e774:	d001      	beq.n	801e77a <USBD_StdItfReq+0x2a>
 801e776:	2b20      	cmp	r3, #32
 801e778:	d135      	bne.n	801e7e6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801e77a:	687a      	ldr	r2, [r7, #4]
 801e77c:	23a7      	movs	r3, #167	@ 0xa7
 801e77e:	009b      	lsls	r3, r3, #2
 801e780:	5cd3      	ldrb	r3, [r2, r3]
 801e782:	3b01      	subs	r3, #1
 801e784:	2b02      	cmp	r3, #2
 801e786:	d825      	bhi.n	801e7d4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801e788:	683b      	ldr	r3, [r7, #0]
 801e78a:	889b      	ldrh	r3, [r3, #4]
 801e78c:	b2db      	uxtb	r3, r3
 801e78e:	2b01      	cmp	r3, #1
 801e790:	d819      	bhi.n	801e7c6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801e792:	687a      	ldr	r2, [r7, #4]
 801e794:	23ad      	movs	r3, #173	@ 0xad
 801e796:	009b      	lsls	r3, r3, #2
 801e798:	58d3      	ldr	r3, [r2, r3]
 801e79a:	689b      	ldr	r3, [r3, #8]
 801e79c:	250f      	movs	r5, #15
 801e79e:	197c      	adds	r4, r7, r5
 801e7a0:	6839      	ldr	r1, [r7, #0]
 801e7a2:	687a      	ldr	r2, [r7, #4]
 801e7a4:	0010      	movs	r0, r2
 801e7a6:	4798      	blx	r3
 801e7a8:	0003      	movs	r3, r0
 801e7aa:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801e7ac:	683b      	ldr	r3, [r7, #0]
 801e7ae:	88db      	ldrh	r3, [r3, #6]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d116      	bne.n	801e7e2 <USBD_StdItfReq+0x92>
 801e7b4:	197b      	adds	r3, r7, r5
 801e7b6:	781b      	ldrb	r3, [r3, #0]
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d112      	bne.n	801e7e2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	0018      	movs	r0, r3
 801e7c0:	f000 fe4f 	bl	801f462 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801e7c4:	e00d      	b.n	801e7e2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801e7c6:	683a      	ldr	r2, [r7, #0]
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	0011      	movs	r1, r2
 801e7cc:	0018      	movs	r0, r3
 801e7ce:	f000 fd60 	bl	801f292 <USBD_CtlError>
          break;
 801e7d2:	e006      	b.n	801e7e2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801e7d4:	683a      	ldr	r2, [r7, #0]
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	0011      	movs	r1, r2
 801e7da:	0018      	movs	r0, r3
 801e7dc:	f000 fd59 	bl	801f292 <USBD_CtlError>
          break;
 801e7e0:	e000      	b.n	801e7e4 <USBD_StdItfReq+0x94>
          break;
 801e7e2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e7e4:	e006      	b.n	801e7f4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801e7e6:	683a      	ldr	r2, [r7, #0]
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	0011      	movs	r1, r2
 801e7ec:	0018      	movs	r0, r3
 801e7ee:	f000 fd50 	bl	801f292 <USBD_CtlError>
      break;
 801e7f2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801e7f4:	2300      	movs	r3, #0
}
 801e7f6:	0018      	movs	r0, r3
 801e7f8:	46bd      	mov	sp, r7
 801e7fa:	b004      	add	sp, #16
 801e7fc:	bdb0      	pop	{r4, r5, r7, pc}

0801e7fe <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801e7fe:	b5b0      	push	{r4, r5, r7, lr}
 801e800:	b084      	sub	sp, #16
 801e802:	af00      	add	r7, sp, #0
 801e804:	6078      	str	r0, [r7, #4]
 801e806:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801e808:	230f      	movs	r3, #15
 801e80a:	18fb      	adds	r3, r7, r3
 801e80c:	2200      	movs	r2, #0
 801e80e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801e810:	683b      	ldr	r3, [r7, #0]
 801e812:	889a      	ldrh	r2, [r3, #4]
 801e814:	230e      	movs	r3, #14
 801e816:	18fb      	adds	r3, r7, r3
 801e818:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e81a:	683b      	ldr	r3, [r7, #0]
 801e81c:	781b      	ldrb	r3, [r3, #0]
 801e81e:	001a      	movs	r2, r3
 801e820:	2360      	movs	r3, #96	@ 0x60
 801e822:	4013      	ands	r3, r2
 801e824:	2b40      	cmp	r3, #64	@ 0x40
 801e826:	d006      	beq.n	801e836 <USBD_StdEPReq+0x38>
 801e828:	d900      	bls.n	801e82c <USBD_StdEPReq+0x2e>
 801e82a:	e190      	b.n	801eb4e <USBD_StdEPReq+0x350>
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d00c      	beq.n	801e84a <USBD_StdEPReq+0x4c>
 801e830:	2b20      	cmp	r3, #32
 801e832:	d000      	beq.n	801e836 <USBD_StdEPReq+0x38>
 801e834:	e18b      	b.n	801eb4e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801e836:	687a      	ldr	r2, [r7, #4]
 801e838:	23ad      	movs	r3, #173	@ 0xad
 801e83a:	009b      	lsls	r3, r3, #2
 801e83c:	58d3      	ldr	r3, [r2, r3]
 801e83e:	689b      	ldr	r3, [r3, #8]
 801e840:	6839      	ldr	r1, [r7, #0]
 801e842:	687a      	ldr	r2, [r7, #4]
 801e844:	0010      	movs	r0, r2
 801e846:	4798      	blx	r3
      break;
 801e848:	e188      	b.n	801eb5c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801e84a:	683b      	ldr	r3, [r7, #0]
 801e84c:	781b      	ldrb	r3, [r3, #0]
 801e84e:	001a      	movs	r2, r3
 801e850:	2360      	movs	r3, #96	@ 0x60
 801e852:	4013      	ands	r3, r2
 801e854:	2b20      	cmp	r3, #32
 801e856:	d10f      	bne.n	801e878 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801e858:	687a      	ldr	r2, [r7, #4]
 801e85a:	23ad      	movs	r3, #173	@ 0xad
 801e85c:	009b      	lsls	r3, r3, #2
 801e85e:	58d3      	ldr	r3, [r2, r3]
 801e860:	689b      	ldr	r3, [r3, #8]
 801e862:	250f      	movs	r5, #15
 801e864:	197c      	adds	r4, r7, r5
 801e866:	6839      	ldr	r1, [r7, #0]
 801e868:	687a      	ldr	r2, [r7, #4]
 801e86a:	0010      	movs	r0, r2
 801e86c:	4798      	blx	r3
 801e86e:	0003      	movs	r3, r0
 801e870:	7023      	strb	r3, [r4, #0]

        return ret;
 801e872:	197b      	adds	r3, r7, r5
 801e874:	781b      	ldrb	r3, [r3, #0]
 801e876:	e174      	b.n	801eb62 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801e878:	683b      	ldr	r3, [r7, #0]
 801e87a:	785b      	ldrb	r3, [r3, #1]
 801e87c:	2b03      	cmp	r3, #3
 801e87e:	d007      	beq.n	801e890 <USBD_StdEPReq+0x92>
 801e880:	dd00      	ble.n	801e884 <USBD_StdEPReq+0x86>
 801e882:	e15c      	b.n	801eb3e <USBD_StdEPReq+0x340>
 801e884:	2b00      	cmp	r3, #0
 801e886:	d100      	bne.n	801e88a <USBD_StdEPReq+0x8c>
 801e888:	e092      	b.n	801e9b0 <USBD_StdEPReq+0x1b2>
 801e88a:	2b01      	cmp	r3, #1
 801e88c:	d04b      	beq.n	801e926 <USBD_StdEPReq+0x128>
 801e88e:	e156      	b.n	801eb3e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801e890:	687a      	ldr	r2, [r7, #4]
 801e892:	23a7      	movs	r3, #167	@ 0xa7
 801e894:	009b      	lsls	r3, r3, #2
 801e896:	5cd3      	ldrb	r3, [r2, r3]
 801e898:	2b02      	cmp	r3, #2
 801e89a:	d002      	beq.n	801e8a2 <USBD_StdEPReq+0xa4>
 801e89c:	2b03      	cmp	r3, #3
 801e89e:	d01d      	beq.n	801e8dc <USBD_StdEPReq+0xde>
 801e8a0:	e039      	b.n	801e916 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e8a2:	220e      	movs	r2, #14
 801e8a4:	18bb      	adds	r3, r7, r2
 801e8a6:	781b      	ldrb	r3, [r3, #0]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d010      	beq.n	801e8ce <USBD_StdEPReq+0xd0>
 801e8ac:	18bb      	adds	r3, r7, r2
 801e8ae:	781b      	ldrb	r3, [r3, #0]
 801e8b0:	2b80      	cmp	r3, #128	@ 0x80
 801e8b2:	d00c      	beq.n	801e8ce <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801e8b4:	18bb      	adds	r3, r7, r2
 801e8b6:	781a      	ldrb	r2, [r3, #0]
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	0011      	movs	r1, r2
 801e8bc:	0018      	movs	r0, r3
 801e8be:	f001 fa10 	bl	801fce2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	2180      	movs	r1, #128	@ 0x80
 801e8c6:	0018      	movs	r0, r3
 801e8c8:	f001 fa0b 	bl	801fce2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801e8cc:	e02a      	b.n	801e924 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801e8ce:	683a      	ldr	r2, [r7, #0]
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	0011      	movs	r1, r2
 801e8d4:	0018      	movs	r0, r3
 801e8d6:	f000 fcdc 	bl	801f292 <USBD_CtlError>
              break;
 801e8da:	e023      	b.n	801e924 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801e8dc:	683b      	ldr	r3, [r7, #0]
 801e8de:	885b      	ldrh	r3, [r3, #2]
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d113      	bne.n	801e90c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801e8e4:	220e      	movs	r2, #14
 801e8e6:	18bb      	adds	r3, r7, r2
 801e8e8:	781b      	ldrb	r3, [r3, #0]
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d00e      	beq.n	801e90c <USBD_StdEPReq+0x10e>
 801e8ee:	18bb      	adds	r3, r7, r2
 801e8f0:	781b      	ldrb	r3, [r3, #0]
 801e8f2:	2b80      	cmp	r3, #128	@ 0x80
 801e8f4:	d00a      	beq.n	801e90c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801e8f6:	683b      	ldr	r3, [r7, #0]
 801e8f8:	88db      	ldrh	r3, [r3, #6]
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d106      	bne.n	801e90c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801e8fe:	18bb      	adds	r3, r7, r2
 801e900:	781a      	ldrb	r2, [r3, #0]
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	0011      	movs	r1, r2
 801e906:	0018      	movs	r0, r3
 801e908:	f001 f9eb 	bl	801fce2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	0018      	movs	r0, r3
 801e910:	f000 fda7 	bl	801f462 <USBD_CtlSendStatus>

              break;
 801e914:	e006      	b.n	801e924 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801e916:	683a      	ldr	r2, [r7, #0]
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	0011      	movs	r1, r2
 801e91c:	0018      	movs	r0, r3
 801e91e:	f000 fcb8 	bl	801f292 <USBD_CtlError>
              break;
 801e922:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801e924:	e112      	b.n	801eb4c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801e926:	687a      	ldr	r2, [r7, #4]
 801e928:	23a7      	movs	r3, #167	@ 0xa7
 801e92a:	009b      	lsls	r3, r3, #2
 801e92c:	5cd3      	ldrb	r3, [r2, r3]
 801e92e:	2b02      	cmp	r3, #2
 801e930:	d002      	beq.n	801e938 <USBD_StdEPReq+0x13a>
 801e932:	2b03      	cmp	r3, #3
 801e934:	d01d      	beq.n	801e972 <USBD_StdEPReq+0x174>
 801e936:	e032      	b.n	801e99e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e938:	220e      	movs	r2, #14
 801e93a:	18bb      	adds	r3, r7, r2
 801e93c:	781b      	ldrb	r3, [r3, #0]
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d010      	beq.n	801e964 <USBD_StdEPReq+0x166>
 801e942:	18bb      	adds	r3, r7, r2
 801e944:	781b      	ldrb	r3, [r3, #0]
 801e946:	2b80      	cmp	r3, #128	@ 0x80
 801e948:	d00c      	beq.n	801e964 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801e94a:	18bb      	adds	r3, r7, r2
 801e94c:	781a      	ldrb	r2, [r3, #0]
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	0011      	movs	r1, r2
 801e952:	0018      	movs	r0, r3
 801e954:	f001 f9c5 	bl	801fce2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	2180      	movs	r1, #128	@ 0x80
 801e95c:	0018      	movs	r0, r3
 801e95e:	f001 f9c0 	bl	801fce2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801e962:	e024      	b.n	801e9ae <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801e964:	683a      	ldr	r2, [r7, #0]
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	0011      	movs	r1, r2
 801e96a:	0018      	movs	r0, r3
 801e96c:	f000 fc91 	bl	801f292 <USBD_CtlError>
              break;
 801e970:	e01d      	b.n	801e9ae <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801e972:	683b      	ldr	r3, [r7, #0]
 801e974:	885b      	ldrh	r3, [r3, #2]
 801e976:	2b00      	cmp	r3, #0
 801e978:	d118      	bne.n	801e9ac <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801e97a:	210e      	movs	r1, #14
 801e97c:	187b      	adds	r3, r7, r1
 801e97e:	781b      	ldrb	r3, [r3, #0]
 801e980:	227f      	movs	r2, #127	@ 0x7f
 801e982:	4013      	ands	r3, r2
 801e984:	d006      	beq.n	801e994 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801e986:	187b      	adds	r3, r7, r1
 801e988:	781a      	ldrb	r2, [r3, #0]
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	0011      	movs	r1, r2
 801e98e:	0018      	movs	r0, r3
 801e990:	f001 f9d2 	bl	801fd38 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	0018      	movs	r0, r3
 801e998:	f000 fd63 	bl	801f462 <USBD_CtlSendStatus>
              }
              break;
 801e99c:	e006      	b.n	801e9ac <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801e99e:	683a      	ldr	r2, [r7, #0]
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	0011      	movs	r1, r2
 801e9a4:	0018      	movs	r0, r3
 801e9a6:	f000 fc74 	bl	801f292 <USBD_CtlError>
              break;
 801e9aa:	e000      	b.n	801e9ae <USBD_StdEPReq+0x1b0>
              break;
 801e9ac:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801e9ae:	e0cd      	b.n	801eb4c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801e9b0:	687a      	ldr	r2, [r7, #4]
 801e9b2:	23a7      	movs	r3, #167	@ 0xa7
 801e9b4:	009b      	lsls	r3, r3, #2
 801e9b6:	5cd3      	ldrb	r3, [r2, r3]
 801e9b8:	2b02      	cmp	r3, #2
 801e9ba:	d002      	beq.n	801e9c2 <USBD_StdEPReq+0x1c4>
 801e9bc:	2b03      	cmp	r3, #3
 801e9be:	d03c      	beq.n	801ea3a <USBD_StdEPReq+0x23c>
 801e9c0:	e0b5      	b.n	801eb2e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e9c2:	220e      	movs	r2, #14
 801e9c4:	18bb      	adds	r3, r7, r2
 801e9c6:	781b      	ldrb	r3, [r3, #0]
 801e9c8:	2b00      	cmp	r3, #0
 801e9ca:	d00a      	beq.n	801e9e2 <USBD_StdEPReq+0x1e4>
 801e9cc:	18bb      	adds	r3, r7, r2
 801e9ce:	781b      	ldrb	r3, [r3, #0]
 801e9d0:	2b80      	cmp	r3, #128	@ 0x80
 801e9d2:	d006      	beq.n	801e9e2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801e9d4:	683a      	ldr	r2, [r7, #0]
 801e9d6:	687b      	ldr	r3, [r7, #4]
 801e9d8:	0011      	movs	r1, r2
 801e9da:	0018      	movs	r0, r3
 801e9dc:	f000 fc59 	bl	801f292 <USBD_CtlError>
                break;
 801e9e0:	e0ac      	b.n	801eb3c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e9e2:	220e      	movs	r2, #14
 801e9e4:	18bb      	adds	r3, r7, r2
 801e9e6:	781b      	ldrb	r3, [r3, #0]
 801e9e8:	b25b      	sxtb	r3, r3
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	da0c      	bge.n	801ea08 <USBD_StdEPReq+0x20a>
 801e9ee:	18bb      	adds	r3, r7, r2
 801e9f0:	781b      	ldrb	r3, [r3, #0]
 801e9f2:	227f      	movs	r2, #127	@ 0x7f
 801e9f4:	401a      	ands	r2, r3
 801e9f6:	0013      	movs	r3, r2
 801e9f8:	009b      	lsls	r3, r3, #2
 801e9fa:	189b      	adds	r3, r3, r2
 801e9fc:	009b      	lsls	r3, r3, #2
 801e9fe:	3310      	adds	r3, #16
 801ea00:	687a      	ldr	r2, [r7, #4]
 801ea02:	18d3      	adds	r3, r2, r3
 801ea04:	3304      	adds	r3, #4
 801ea06:	e00d      	b.n	801ea24 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801ea08:	230e      	movs	r3, #14
 801ea0a:	18fb      	adds	r3, r7, r3
 801ea0c:	781b      	ldrb	r3, [r3, #0]
 801ea0e:	227f      	movs	r2, #127	@ 0x7f
 801ea10:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ea12:	0013      	movs	r3, r2
 801ea14:	009b      	lsls	r3, r3, #2
 801ea16:	189b      	adds	r3, r3, r2
 801ea18:	009b      	lsls	r3, r3, #2
 801ea1a:	3351      	adds	r3, #81	@ 0x51
 801ea1c:	33ff      	adds	r3, #255	@ 0xff
 801ea1e:	687a      	ldr	r2, [r7, #4]
 801ea20:	18d3      	adds	r3, r2, r3
 801ea22:	3304      	adds	r3, #4
 801ea24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801ea26:	68bb      	ldr	r3, [r7, #8]
 801ea28:	2200      	movs	r2, #0
 801ea2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ea2c:	68b9      	ldr	r1, [r7, #8]
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	2202      	movs	r2, #2
 801ea32:	0018      	movs	r0, r3
 801ea34:	f000 fcab 	bl	801f38e <USBD_CtlSendData>
              break;
 801ea38:	e080      	b.n	801eb3c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801ea3a:	220e      	movs	r2, #14
 801ea3c:	18bb      	adds	r3, r7, r2
 801ea3e:	781b      	ldrb	r3, [r3, #0]
 801ea40:	b25b      	sxtb	r3, r3
 801ea42:	2b00      	cmp	r3, #0
 801ea44:	da14      	bge.n	801ea70 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801ea46:	18bb      	adds	r3, r7, r2
 801ea48:	781b      	ldrb	r3, [r3, #0]
 801ea4a:	220f      	movs	r2, #15
 801ea4c:	401a      	ands	r2, r3
 801ea4e:	6879      	ldr	r1, [r7, #4]
 801ea50:	0013      	movs	r3, r2
 801ea52:	009b      	lsls	r3, r3, #2
 801ea54:	189b      	adds	r3, r3, r2
 801ea56:	009b      	lsls	r3, r3, #2
 801ea58:	18cb      	adds	r3, r1, r3
 801ea5a:	3318      	adds	r3, #24
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	d11e      	bne.n	801eaa0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801ea62:	683a      	ldr	r2, [r7, #0]
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	0011      	movs	r1, r2
 801ea68:	0018      	movs	r0, r3
 801ea6a:	f000 fc12 	bl	801f292 <USBD_CtlError>
                  break;
 801ea6e:	e065      	b.n	801eb3c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801ea70:	230e      	movs	r3, #14
 801ea72:	18fb      	adds	r3, r7, r3
 801ea74:	781b      	ldrb	r3, [r3, #0]
 801ea76:	220f      	movs	r2, #15
 801ea78:	401a      	ands	r2, r3
 801ea7a:	6878      	ldr	r0, [r7, #4]
 801ea7c:	23ac      	movs	r3, #172	@ 0xac
 801ea7e:	0059      	lsls	r1, r3, #1
 801ea80:	0013      	movs	r3, r2
 801ea82:	009b      	lsls	r3, r3, #2
 801ea84:	189b      	adds	r3, r3, r2
 801ea86:	009b      	lsls	r3, r3, #2
 801ea88:	18c3      	adds	r3, r0, r3
 801ea8a:	185b      	adds	r3, r3, r1
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d106      	bne.n	801eaa0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801ea92:	683a      	ldr	r2, [r7, #0]
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	0011      	movs	r1, r2
 801ea98:	0018      	movs	r0, r3
 801ea9a:	f000 fbfa 	bl	801f292 <USBD_CtlError>
                  break;
 801ea9e:	e04d      	b.n	801eb3c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801eaa0:	220e      	movs	r2, #14
 801eaa2:	18bb      	adds	r3, r7, r2
 801eaa4:	781b      	ldrb	r3, [r3, #0]
 801eaa6:	b25b      	sxtb	r3, r3
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	da0c      	bge.n	801eac6 <USBD_StdEPReq+0x2c8>
 801eaac:	18bb      	adds	r3, r7, r2
 801eaae:	781b      	ldrb	r3, [r3, #0]
 801eab0:	227f      	movs	r2, #127	@ 0x7f
 801eab2:	401a      	ands	r2, r3
 801eab4:	0013      	movs	r3, r2
 801eab6:	009b      	lsls	r3, r3, #2
 801eab8:	189b      	adds	r3, r3, r2
 801eaba:	009b      	lsls	r3, r3, #2
 801eabc:	3310      	adds	r3, #16
 801eabe:	687a      	ldr	r2, [r7, #4]
 801eac0:	18d3      	adds	r3, r2, r3
 801eac2:	3304      	adds	r3, #4
 801eac4:	e00d      	b.n	801eae2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801eac6:	230e      	movs	r3, #14
 801eac8:	18fb      	adds	r3, r7, r3
 801eaca:	781b      	ldrb	r3, [r3, #0]
 801eacc:	227f      	movs	r2, #127	@ 0x7f
 801eace:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ead0:	0013      	movs	r3, r2
 801ead2:	009b      	lsls	r3, r3, #2
 801ead4:	189b      	adds	r3, r3, r2
 801ead6:	009b      	lsls	r3, r3, #2
 801ead8:	3351      	adds	r3, #81	@ 0x51
 801eada:	33ff      	adds	r3, #255	@ 0xff
 801eadc:	687a      	ldr	r2, [r7, #4]
 801eade:	18d3      	adds	r3, r2, r3
 801eae0:	3304      	adds	r3, #4
 801eae2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801eae4:	220e      	movs	r2, #14
 801eae6:	18bb      	adds	r3, r7, r2
 801eae8:	781b      	ldrb	r3, [r3, #0]
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d003      	beq.n	801eaf6 <USBD_StdEPReq+0x2f8>
 801eaee:	18bb      	adds	r3, r7, r2
 801eaf0:	781b      	ldrb	r3, [r3, #0]
 801eaf2:	2b80      	cmp	r3, #128	@ 0x80
 801eaf4:	d103      	bne.n	801eafe <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801eaf6:	68bb      	ldr	r3, [r7, #8]
 801eaf8:	2200      	movs	r2, #0
 801eafa:	601a      	str	r2, [r3, #0]
 801eafc:	e010      	b.n	801eb20 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801eafe:	230e      	movs	r3, #14
 801eb00:	18fb      	adds	r3, r7, r3
 801eb02:	781a      	ldrb	r2, [r3, #0]
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	0011      	movs	r1, r2
 801eb08:	0018      	movs	r0, r3
 801eb0a:	f001 f940 	bl	801fd8e <USBD_LL_IsStallEP>
 801eb0e:	1e03      	subs	r3, r0, #0
 801eb10:	d003      	beq.n	801eb1a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801eb12:	68bb      	ldr	r3, [r7, #8]
 801eb14:	2201      	movs	r2, #1
 801eb16:	601a      	str	r2, [r3, #0]
 801eb18:	e002      	b.n	801eb20 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801eb1a:	68bb      	ldr	r3, [r7, #8]
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801eb20:	68b9      	ldr	r1, [r7, #8]
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	2202      	movs	r2, #2
 801eb26:	0018      	movs	r0, r3
 801eb28:	f000 fc31 	bl	801f38e <USBD_CtlSendData>
              break;
 801eb2c:	e006      	b.n	801eb3c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801eb2e:	683a      	ldr	r2, [r7, #0]
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	0011      	movs	r1, r2
 801eb34:	0018      	movs	r0, r3
 801eb36:	f000 fbac 	bl	801f292 <USBD_CtlError>
              break;
 801eb3a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801eb3c:	e006      	b.n	801eb4c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801eb3e:	683a      	ldr	r2, [r7, #0]
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	0011      	movs	r1, r2
 801eb44:	0018      	movs	r0, r3
 801eb46:	f000 fba4 	bl	801f292 <USBD_CtlError>
          break;
 801eb4a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801eb4c:	e006      	b.n	801eb5c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801eb4e:	683a      	ldr	r2, [r7, #0]
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	0011      	movs	r1, r2
 801eb54:	0018      	movs	r0, r3
 801eb56:	f000 fb9c 	bl	801f292 <USBD_CtlError>
      break;
 801eb5a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801eb5c:	230f      	movs	r3, #15
 801eb5e:	18fb      	adds	r3, r7, r3
 801eb60:	781b      	ldrb	r3, [r3, #0]
}
 801eb62:	0018      	movs	r0, r3
 801eb64:	46bd      	mov	sp, r7
 801eb66:	b004      	add	sp, #16
 801eb68:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801eb6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801eb6c:	b580      	push	{r7, lr}
 801eb6e:	b084      	sub	sp, #16
 801eb70:	af00      	add	r7, sp, #0
 801eb72:	6078      	str	r0, [r7, #4]
 801eb74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801eb76:	2308      	movs	r3, #8
 801eb78:	18fb      	adds	r3, r7, r3
 801eb7a:	2200      	movs	r2, #0
 801eb7c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801eb7e:	2300      	movs	r3, #0
 801eb80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801eb82:	230b      	movs	r3, #11
 801eb84:	18fb      	adds	r3, r7, r3
 801eb86:	2200      	movs	r2, #0
 801eb88:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801eb8a:	683b      	ldr	r3, [r7, #0]
 801eb8c:	885b      	ldrh	r3, [r3, #2]
 801eb8e:	0a1b      	lsrs	r3, r3, #8
 801eb90:	b29b      	uxth	r3, r3
 801eb92:	2b07      	cmp	r3, #7
 801eb94:	d900      	bls.n	801eb98 <USBD_GetDescriptor+0x2c>
 801eb96:	e159      	b.n	801ee4c <USBD_GetDescriptor+0x2e0>
 801eb98:	009a      	lsls	r2, r3, #2
 801eb9a:	4bcb      	ldr	r3, [pc, #812]	@ (801eec8 <USBD_GetDescriptor+0x35c>)
 801eb9c:	18d3      	adds	r3, r2, r3
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801eba2:	687a      	ldr	r2, [r7, #4]
 801eba4:	23ac      	movs	r3, #172	@ 0xac
 801eba6:	009b      	lsls	r3, r3, #2
 801eba8:	58d3      	ldr	r3, [r2, r3]
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	687a      	ldr	r2, [r7, #4]
 801ebae:	7c12      	ldrb	r2, [r2, #16]
 801ebb0:	2108      	movs	r1, #8
 801ebb2:	1879      	adds	r1, r7, r1
 801ebb4:	0010      	movs	r0, r2
 801ebb6:	4798      	blx	r3
 801ebb8:	0003      	movs	r3, r0
 801ebba:	60fb      	str	r3, [r7, #12]
      break;
 801ebbc:	e153      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	7c1b      	ldrb	r3, [r3, #16]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d10f      	bne.n	801ebe6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801ebc6:	687a      	ldr	r2, [r7, #4]
 801ebc8:	23ad      	movs	r3, #173	@ 0xad
 801ebca:	009b      	lsls	r3, r3, #2
 801ebcc:	58d3      	ldr	r3, [r2, r3]
 801ebce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebd0:	2208      	movs	r2, #8
 801ebd2:	18ba      	adds	r2, r7, r2
 801ebd4:	0010      	movs	r0, r2
 801ebd6:	4798      	blx	r3
 801ebd8:	0003      	movs	r3, r0
 801ebda:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ebdc:	68fb      	ldr	r3, [r7, #12]
 801ebde:	3301      	adds	r3, #1
 801ebe0:	2202      	movs	r2, #2
 801ebe2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801ebe4:	e13f      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801ebe6:	687a      	ldr	r2, [r7, #4]
 801ebe8:	23ad      	movs	r3, #173	@ 0xad
 801ebea:	009b      	lsls	r3, r3, #2
 801ebec:	58d3      	ldr	r3, [r2, r3]
 801ebee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebf0:	2208      	movs	r2, #8
 801ebf2:	18ba      	adds	r2, r7, r2
 801ebf4:	0010      	movs	r0, r2
 801ebf6:	4798      	blx	r3
 801ebf8:	0003      	movs	r3, r0
 801ebfa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ebfc:	68fb      	ldr	r3, [r7, #12]
 801ebfe:	3301      	adds	r3, #1
 801ec00:	2202      	movs	r2, #2
 801ec02:	701a      	strb	r2, [r3, #0]
      break;
 801ec04:	e12f      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801ec06:	683b      	ldr	r3, [r7, #0]
 801ec08:	885b      	ldrh	r3, [r3, #2]
 801ec0a:	b2db      	uxtb	r3, r3
 801ec0c:	2b05      	cmp	r3, #5
 801ec0e:	d900      	bls.n	801ec12 <USBD_GetDescriptor+0xa6>
 801ec10:	e0d0      	b.n	801edb4 <USBD_GetDescriptor+0x248>
 801ec12:	009a      	lsls	r2, r3, #2
 801ec14:	4bad      	ldr	r3, [pc, #692]	@ (801eecc <USBD_GetDescriptor+0x360>)
 801ec16:	18d3      	adds	r3, r2, r3
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801ec1c:	687a      	ldr	r2, [r7, #4]
 801ec1e:	23ac      	movs	r3, #172	@ 0xac
 801ec20:	009b      	lsls	r3, r3, #2
 801ec22:	58d3      	ldr	r3, [r2, r3]
 801ec24:	685b      	ldr	r3, [r3, #4]
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d00d      	beq.n	801ec46 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801ec2a:	687a      	ldr	r2, [r7, #4]
 801ec2c:	23ac      	movs	r3, #172	@ 0xac
 801ec2e:	009b      	lsls	r3, r3, #2
 801ec30:	58d3      	ldr	r3, [r2, r3]
 801ec32:	685b      	ldr	r3, [r3, #4]
 801ec34:	687a      	ldr	r2, [r7, #4]
 801ec36:	7c12      	ldrb	r2, [r2, #16]
 801ec38:	2108      	movs	r1, #8
 801ec3a:	1879      	adds	r1, r7, r1
 801ec3c:	0010      	movs	r0, r2
 801ec3e:	4798      	blx	r3
 801ec40:	0003      	movs	r3, r0
 801ec42:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ec44:	e0c3      	b.n	801edce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ec46:	683a      	ldr	r2, [r7, #0]
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	0011      	movs	r1, r2
 801ec4c:	0018      	movs	r0, r3
 801ec4e:	f000 fb20 	bl	801f292 <USBD_CtlError>
            err++;
 801ec52:	210b      	movs	r1, #11
 801ec54:	187b      	adds	r3, r7, r1
 801ec56:	781a      	ldrb	r2, [r3, #0]
 801ec58:	187b      	adds	r3, r7, r1
 801ec5a:	3201      	adds	r2, #1
 801ec5c:	701a      	strb	r2, [r3, #0]
          break;
 801ec5e:	e0b6      	b.n	801edce <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801ec60:	687a      	ldr	r2, [r7, #4]
 801ec62:	23ac      	movs	r3, #172	@ 0xac
 801ec64:	009b      	lsls	r3, r3, #2
 801ec66:	58d3      	ldr	r3, [r2, r3]
 801ec68:	689b      	ldr	r3, [r3, #8]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d00d      	beq.n	801ec8a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ec6e:	687a      	ldr	r2, [r7, #4]
 801ec70:	23ac      	movs	r3, #172	@ 0xac
 801ec72:	009b      	lsls	r3, r3, #2
 801ec74:	58d3      	ldr	r3, [r2, r3]
 801ec76:	689b      	ldr	r3, [r3, #8]
 801ec78:	687a      	ldr	r2, [r7, #4]
 801ec7a:	7c12      	ldrb	r2, [r2, #16]
 801ec7c:	2108      	movs	r1, #8
 801ec7e:	1879      	adds	r1, r7, r1
 801ec80:	0010      	movs	r0, r2
 801ec82:	4798      	blx	r3
 801ec84:	0003      	movs	r3, r0
 801ec86:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ec88:	e0a1      	b.n	801edce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ec8a:	683a      	ldr	r2, [r7, #0]
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	0011      	movs	r1, r2
 801ec90:	0018      	movs	r0, r3
 801ec92:	f000 fafe 	bl	801f292 <USBD_CtlError>
            err++;
 801ec96:	210b      	movs	r1, #11
 801ec98:	187b      	adds	r3, r7, r1
 801ec9a:	781a      	ldrb	r2, [r3, #0]
 801ec9c:	187b      	adds	r3, r7, r1
 801ec9e:	3201      	adds	r2, #1
 801eca0:	701a      	strb	r2, [r3, #0]
          break;
 801eca2:	e094      	b.n	801edce <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801eca4:	687a      	ldr	r2, [r7, #4]
 801eca6:	23ac      	movs	r3, #172	@ 0xac
 801eca8:	009b      	lsls	r3, r3, #2
 801ecaa:	58d3      	ldr	r3, [r2, r3]
 801ecac:	68db      	ldr	r3, [r3, #12]
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d00d      	beq.n	801ecce <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ecb2:	687a      	ldr	r2, [r7, #4]
 801ecb4:	23ac      	movs	r3, #172	@ 0xac
 801ecb6:	009b      	lsls	r3, r3, #2
 801ecb8:	58d3      	ldr	r3, [r2, r3]
 801ecba:	68db      	ldr	r3, [r3, #12]
 801ecbc:	687a      	ldr	r2, [r7, #4]
 801ecbe:	7c12      	ldrb	r2, [r2, #16]
 801ecc0:	2108      	movs	r1, #8
 801ecc2:	1879      	adds	r1, r7, r1
 801ecc4:	0010      	movs	r0, r2
 801ecc6:	4798      	blx	r3
 801ecc8:	0003      	movs	r3, r0
 801ecca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eccc:	e07f      	b.n	801edce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ecce:	683a      	ldr	r2, [r7, #0]
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	0011      	movs	r1, r2
 801ecd4:	0018      	movs	r0, r3
 801ecd6:	f000 fadc 	bl	801f292 <USBD_CtlError>
            err++;
 801ecda:	210b      	movs	r1, #11
 801ecdc:	187b      	adds	r3, r7, r1
 801ecde:	781a      	ldrb	r2, [r3, #0]
 801ece0:	187b      	adds	r3, r7, r1
 801ece2:	3201      	adds	r2, #1
 801ece4:	701a      	strb	r2, [r3, #0]
          break;
 801ece6:	e072      	b.n	801edce <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ece8:	687a      	ldr	r2, [r7, #4]
 801ecea:	23ac      	movs	r3, #172	@ 0xac
 801ecec:	009b      	lsls	r3, r3, #2
 801ecee:	58d3      	ldr	r3, [r2, r3]
 801ecf0:	691b      	ldr	r3, [r3, #16]
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d00d      	beq.n	801ed12 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ecf6:	687a      	ldr	r2, [r7, #4]
 801ecf8:	23ac      	movs	r3, #172	@ 0xac
 801ecfa:	009b      	lsls	r3, r3, #2
 801ecfc:	58d3      	ldr	r3, [r2, r3]
 801ecfe:	691b      	ldr	r3, [r3, #16]
 801ed00:	687a      	ldr	r2, [r7, #4]
 801ed02:	7c12      	ldrb	r2, [r2, #16]
 801ed04:	2108      	movs	r1, #8
 801ed06:	1879      	adds	r1, r7, r1
 801ed08:	0010      	movs	r0, r2
 801ed0a:	4798      	blx	r3
 801ed0c:	0003      	movs	r3, r0
 801ed0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ed10:	e05d      	b.n	801edce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ed12:	683a      	ldr	r2, [r7, #0]
 801ed14:	687b      	ldr	r3, [r7, #4]
 801ed16:	0011      	movs	r1, r2
 801ed18:	0018      	movs	r0, r3
 801ed1a:	f000 faba 	bl	801f292 <USBD_CtlError>
            err++;
 801ed1e:	210b      	movs	r1, #11
 801ed20:	187b      	adds	r3, r7, r1
 801ed22:	781a      	ldrb	r2, [r3, #0]
 801ed24:	187b      	adds	r3, r7, r1
 801ed26:	3201      	adds	r2, #1
 801ed28:	701a      	strb	r2, [r3, #0]
          break;
 801ed2a:	e050      	b.n	801edce <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ed2c:	687a      	ldr	r2, [r7, #4]
 801ed2e:	23ac      	movs	r3, #172	@ 0xac
 801ed30:	009b      	lsls	r3, r3, #2
 801ed32:	58d3      	ldr	r3, [r2, r3]
 801ed34:	695b      	ldr	r3, [r3, #20]
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d00d      	beq.n	801ed56 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ed3a:	687a      	ldr	r2, [r7, #4]
 801ed3c:	23ac      	movs	r3, #172	@ 0xac
 801ed3e:	009b      	lsls	r3, r3, #2
 801ed40:	58d3      	ldr	r3, [r2, r3]
 801ed42:	695b      	ldr	r3, [r3, #20]
 801ed44:	687a      	ldr	r2, [r7, #4]
 801ed46:	7c12      	ldrb	r2, [r2, #16]
 801ed48:	2108      	movs	r1, #8
 801ed4a:	1879      	adds	r1, r7, r1
 801ed4c:	0010      	movs	r0, r2
 801ed4e:	4798      	blx	r3
 801ed50:	0003      	movs	r3, r0
 801ed52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ed54:	e03b      	b.n	801edce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ed56:	683a      	ldr	r2, [r7, #0]
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	0011      	movs	r1, r2
 801ed5c:	0018      	movs	r0, r3
 801ed5e:	f000 fa98 	bl	801f292 <USBD_CtlError>
            err++;
 801ed62:	210b      	movs	r1, #11
 801ed64:	187b      	adds	r3, r7, r1
 801ed66:	781a      	ldrb	r2, [r3, #0]
 801ed68:	187b      	adds	r3, r7, r1
 801ed6a:	3201      	adds	r2, #1
 801ed6c:	701a      	strb	r2, [r3, #0]
          break;
 801ed6e:	e02e      	b.n	801edce <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ed70:	687a      	ldr	r2, [r7, #4]
 801ed72:	23ac      	movs	r3, #172	@ 0xac
 801ed74:	009b      	lsls	r3, r3, #2
 801ed76:	58d3      	ldr	r3, [r2, r3]
 801ed78:	699b      	ldr	r3, [r3, #24]
 801ed7a:	2b00      	cmp	r3, #0
 801ed7c:	d00d      	beq.n	801ed9a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ed7e:	687a      	ldr	r2, [r7, #4]
 801ed80:	23ac      	movs	r3, #172	@ 0xac
 801ed82:	009b      	lsls	r3, r3, #2
 801ed84:	58d3      	ldr	r3, [r2, r3]
 801ed86:	699b      	ldr	r3, [r3, #24]
 801ed88:	687a      	ldr	r2, [r7, #4]
 801ed8a:	7c12      	ldrb	r2, [r2, #16]
 801ed8c:	2108      	movs	r1, #8
 801ed8e:	1879      	adds	r1, r7, r1
 801ed90:	0010      	movs	r0, r2
 801ed92:	4798      	blx	r3
 801ed94:	0003      	movs	r3, r0
 801ed96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ed98:	e019      	b.n	801edce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ed9a:	683a      	ldr	r2, [r7, #0]
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	0011      	movs	r1, r2
 801eda0:	0018      	movs	r0, r3
 801eda2:	f000 fa76 	bl	801f292 <USBD_CtlError>
            err++;
 801eda6:	210b      	movs	r1, #11
 801eda8:	187b      	adds	r3, r7, r1
 801edaa:	781a      	ldrb	r2, [r3, #0]
 801edac:	187b      	adds	r3, r7, r1
 801edae:	3201      	adds	r2, #1
 801edb0:	701a      	strb	r2, [r3, #0]
          break;
 801edb2:	e00c      	b.n	801edce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801edb4:	683a      	ldr	r2, [r7, #0]
 801edb6:	687b      	ldr	r3, [r7, #4]
 801edb8:	0011      	movs	r1, r2
 801edba:	0018      	movs	r0, r3
 801edbc:	f000 fa69 	bl	801f292 <USBD_CtlError>
          err++;
 801edc0:	210b      	movs	r1, #11
 801edc2:	187b      	adds	r3, r7, r1
 801edc4:	781a      	ldrb	r2, [r3, #0]
 801edc6:	187b      	adds	r3, r7, r1
 801edc8:	3201      	adds	r2, #1
 801edca:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801edcc:	e04b      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>
 801edce:	e04a      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	7c1b      	ldrb	r3, [r3, #16]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d10b      	bne.n	801edf0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801edd8:	687a      	ldr	r2, [r7, #4]
 801edda:	23ad      	movs	r3, #173	@ 0xad
 801eddc:	009b      	lsls	r3, r3, #2
 801edde:	58d3      	ldr	r3, [r2, r3]
 801ede0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ede2:	2208      	movs	r2, #8
 801ede4:	18ba      	adds	r2, r7, r2
 801ede6:	0010      	movs	r0, r2
 801ede8:	4798      	blx	r3
 801edea:	0003      	movs	r3, r0
 801edec:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801edee:	e03a      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801edf0:	683a      	ldr	r2, [r7, #0]
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	0011      	movs	r1, r2
 801edf6:	0018      	movs	r0, r3
 801edf8:	f000 fa4b 	bl	801f292 <USBD_CtlError>
        err++;
 801edfc:	210b      	movs	r1, #11
 801edfe:	187b      	adds	r3, r7, r1
 801ee00:	781a      	ldrb	r2, [r3, #0]
 801ee02:	187b      	adds	r3, r7, r1
 801ee04:	3201      	adds	r2, #1
 801ee06:	701a      	strb	r2, [r3, #0]
      break;
 801ee08:	e02d      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	7c1b      	ldrb	r3, [r3, #16]
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d10f      	bne.n	801ee32 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ee12:	687a      	ldr	r2, [r7, #4]
 801ee14:	23ad      	movs	r3, #173	@ 0xad
 801ee16:	009b      	lsls	r3, r3, #2
 801ee18:	58d3      	ldr	r3, [r2, r3]
 801ee1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ee1c:	2208      	movs	r2, #8
 801ee1e:	18ba      	adds	r2, r7, r2
 801ee20:	0010      	movs	r0, r2
 801ee22:	4798      	blx	r3
 801ee24:	0003      	movs	r3, r0
 801ee26:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ee28:	68fb      	ldr	r3, [r7, #12]
 801ee2a:	3301      	adds	r3, #1
 801ee2c:	2207      	movs	r2, #7
 801ee2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ee30:	e019      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801ee32:	683a      	ldr	r2, [r7, #0]
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	0011      	movs	r1, r2
 801ee38:	0018      	movs	r0, r3
 801ee3a:	f000 fa2a 	bl	801f292 <USBD_CtlError>
        err++;
 801ee3e:	210b      	movs	r1, #11
 801ee40:	187b      	adds	r3, r7, r1
 801ee42:	781a      	ldrb	r2, [r3, #0]
 801ee44:	187b      	adds	r3, r7, r1
 801ee46:	3201      	adds	r2, #1
 801ee48:	701a      	strb	r2, [r3, #0]
      break;
 801ee4a:	e00c      	b.n	801ee66 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801ee4c:	683a      	ldr	r2, [r7, #0]
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	0011      	movs	r1, r2
 801ee52:	0018      	movs	r0, r3
 801ee54:	f000 fa1d 	bl	801f292 <USBD_CtlError>
      err++;
 801ee58:	210b      	movs	r1, #11
 801ee5a:	187b      	adds	r3, r7, r1
 801ee5c:	781a      	ldrb	r2, [r3, #0]
 801ee5e:	187b      	adds	r3, r7, r1
 801ee60:	3201      	adds	r2, #1
 801ee62:	701a      	strb	r2, [r3, #0]
      break;
 801ee64:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801ee66:	230b      	movs	r3, #11
 801ee68:	18fb      	adds	r3, r7, r3
 801ee6a:	781b      	ldrb	r3, [r3, #0]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d127      	bne.n	801eec0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801ee70:	2108      	movs	r1, #8
 801ee72:	187b      	adds	r3, r7, r1
 801ee74:	881b      	ldrh	r3, [r3, #0]
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d019      	beq.n	801eeae <USBD_GetDescriptor+0x342>
 801ee7a:	683b      	ldr	r3, [r7, #0]
 801ee7c:	88db      	ldrh	r3, [r3, #6]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d015      	beq.n	801eeae <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801ee82:	683b      	ldr	r3, [r7, #0]
 801ee84:	88da      	ldrh	r2, [r3, #6]
 801ee86:	187b      	adds	r3, r7, r1
 801ee88:	881b      	ldrh	r3, [r3, #0]
 801ee8a:	1c18      	adds	r0, r3, #0
 801ee8c:	1c11      	adds	r1, r2, #0
 801ee8e:	b28a      	uxth	r2, r1
 801ee90:	b283      	uxth	r3, r0
 801ee92:	429a      	cmp	r2, r3
 801ee94:	d900      	bls.n	801ee98 <USBD_GetDescriptor+0x32c>
 801ee96:	1c01      	adds	r1, r0, #0
 801ee98:	b28a      	uxth	r2, r1
 801ee9a:	2108      	movs	r1, #8
 801ee9c:	187b      	adds	r3, r7, r1
 801ee9e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801eea0:	187b      	adds	r3, r7, r1
 801eea2:	881a      	ldrh	r2, [r3, #0]
 801eea4:	68f9      	ldr	r1, [r7, #12]
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	0018      	movs	r0, r3
 801eeaa:	f000 fa70 	bl	801f38e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801eeae:	683b      	ldr	r3, [r7, #0]
 801eeb0:	88db      	ldrh	r3, [r3, #6]
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d105      	bne.n	801eec2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	0018      	movs	r0, r3
 801eeba:	f000 fad2 	bl	801f462 <USBD_CtlSendStatus>
 801eebe:	e000      	b.n	801eec2 <USBD_GetDescriptor+0x356>
    return;
 801eec0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801eec2:	46bd      	mov	sp, r7
 801eec4:	b004      	add	sp, #16
 801eec6:	bd80      	pop	{r7, pc}
 801eec8:	08029018 	.word	0x08029018
 801eecc:	08029038 	.word	0x08029038

0801eed0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801eed0:	b590      	push	{r4, r7, lr}
 801eed2:	b085      	sub	sp, #20
 801eed4:	af00      	add	r7, sp, #0
 801eed6:	6078      	str	r0, [r7, #4]
 801eed8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801eeda:	683b      	ldr	r3, [r7, #0]
 801eedc:	889b      	ldrh	r3, [r3, #4]
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d13d      	bne.n	801ef5e <USBD_SetAddress+0x8e>
 801eee2:	683b      	ldr	r3, [r7, #0]
 801eee4:	88db      	ldrh	r3, [r3, #6]
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	d139      	bne.n	801ef5e <USBD_SetAddress+0x8e>
 801eeea:	683b      	ldr	r3, [r7, #0]
 801eeec:	885b      	ldrh	r3, [r3, #2]
 801eeee:	2b7f      	cmp	r3, #127	@ 0x7f
 801eef0:	d835      	bhi.n	801ef5e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801eef2:	683b      	ldr	r3, [r7, #0]
 801eef4:	885b      	ldrh	r3, [r3, #2]
 801eef6:	b2da      	uxtb	r2, r3
 801eef8:	230f      	movs	r3, #15
 801eefa:	18fb      	adds	r3, r7, r3
 801eefc:	217f      	movs	r1, #127	@ 0x7f
 801eefe:	400a      	ands	r2, r1
 801ef00:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ef02:	687a      	ldr	r2, [r7, #4]
 801ef04:	23a7      	movs	r3, #167	@ 0xa7
 801ef06:	009b      	lsls	r3, r3, #2
 801ef08:	5cd3      	ldrb	r3, [r2, r3]
 801ef0a:	2b03      	cmp	r3, #3
 801ef0c:	d106      	bne.n	801ef1c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801ef0e:	683a      	ldr	r2, [r7, #0]
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	0011      	movs	r1, r2
 801ef14:	0018      	movs	r0, r3
 801ef16:	f000 f9bc 	bl	801f292 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ef1a:	e027      	b.n	801ef6c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	240f      	movs	r4, #15
 801ef20:	193a      	adds	r2, r7, r4
 801ef22:	4914      	ldr	r1, [pc, #80]	@ (801ef74 <USBD_SetAddress+0xa4>)
 801ef24:	7812      	ldrb	r2, [r2, #0]
 801ef26:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ef28:	193b      	adds	r3, r7, r4
 801ef2a:	781a      	ldrb	r2, [r3, #0]
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	0011      	movs	r1, r2
 801ef30:	0018      	movs	r0, r3
 801ef32:	f000 ff5d 	bl	801fdf0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	0018      	movs	r0, r3
 801ef3a:	f000 fa92 	bl	801f462 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ef3e:	193b      	adds	r3, r7, r4
 801ef40:	781b      	ldrb	r3, [r3, #0]
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	d005      	beq.n	801ef52 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ef46:	687a      	ldr	r2, [r7, #4]
 801ef48:	23a7      	movs	r3, #167	@ 0xa7
 801ef4a:	009b      	lsls	r3, r3, #2
 801ef4c:	2102      	movs	r1, #2
 801ef4e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ef50:	e00c      	b.n	801ef6c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ef52:	687a      	ldr	r2, [r7, #4]
 801ef54:	23a7      	movs	r3, #167	@ 0xa7
 801ef56:	009b      	lsls	r3, r3, #2
 801ef58:	2101      	movs	r1, #1
 801ef5a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ef5c:	e006      	b.n	801ef6c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ef5e:	683a      	ldr	r2, [r7, #0]
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	0011      	movs	r1, r2
 801ef64:	0018      	movs	r0, r3
 801ef66:	f000 f994 	bl	801f292 <USBD_CtlError>
  }
}
 801ef6a:	46c0      	nop			@ (mov r8, r8)
 801ef6c:	46c0      	nop			@ (mov r8, r8)
 801ef6e:	46bd      	mov	sp, r7
 801ef70:	b005      	add	sp, #20
 801ef72:	bd90      	pop	{r4, r7, pc}
 801ef74:	0000029e 	.word	0x0000029e

0801ef78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ef78:	b580      	push	{r7, lr}
 801ef7a:	b082      	sub	sp, #8
 801ef7c:	af00      	add	r7, sp, #0
 801ef7e:	6078      	str	r0, [r7, #4]
 801ef80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ef82:	683b      	ldr	r3, [r7, #0]
 801ef84:	885b      	ldrh	r3, [r3, #2]
 801ef86:	b2da      	uxtb	r2, r3
 801ef88:	4b4c      	ldr	r3, [pc, #304]	@ (801f0bc <USBD_SetConfig+0x144>)
 801ef8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ef8c:	4b4b      	ldr	r3, [pc, #300]	@ (801f0bc <USBD_SetConfig+0x144>)
 801ef8e:	781b      	ldrb	r3, [r3, #0]
 801ef90:	2b01      	cmp	r3, #1
 801ef92:	d906      	bls.n	801efa2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801ef94:	683a      	ldr	r2, [r7, #0]
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	0011      	movs	r1, r2
 801ef9a:	0018      	movs	r0, r3
 801ef9c:	f000 f979 	bl	801f292 <USBD_CtlError>
 801efa0:	e088      	b.n	801f0b4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801efa2:	687a      	ldr	r2, [r7, #4]
 801efa4:	23a7      	movs	r3, #167	@ 0xa7
 801efa6:	009b      	lsls	r3, r3, #2
 801efa8:	5cd3      	ldrb	r3, [r2, r3]
 801efaa:	2b02      	cmp	r3, #2
 801efac:	d002      	beq.n	801efb4 <USBD_SetConfig+0x3c>
 801efae:	2b03      	cmp	r3, #3
 801efb0:	d029      	beq.n	801f006 <USBD_SetConfig+0x8e>
 801efb2:	e071      	b.n	801f098 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801efb4:	4b41      	ldr	r3, [pc, #260]	@ (801f0bc <USBD_SetConfig+0x144>)
 801efb6:	781b      	ldrb	r3, [r3, #0]
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d01f      	beq.n	801effc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801efbc:	4b3f      	ldr	r3, [pc, #252]	@ (801f0bc <USBD_SetConfig+0x144>)
 801efbe:	781b      	ldrb	r3, [r3, #0]
 801efc0:	001a      	movs	r2, r3
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801efc6:	687a      	ldr	r2, [r7, #4]
 801efc8:	23a7      	movs	r3, #167	@ 0xa7
 801efca:	009b      	lsls	r3, r3, #2
 801efcc:	2103      	movs	r1, #3
 801efce:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801efd0:	4b3a      	ldr	r3, [pc, #232]	@ (801f0bc <USBD_SetConfig+0x144>)
 801efd2:	781a      	ldrb	r2, [r3, #0]
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	0011      	movs	r1, r2
 801efd8:	0018      	movs	r0, r3
 801efda:	f7ff f8c6 	bl	801e16a <USBD_SetClassConfig>
 801efde:	0003      	movs	r3, r0
 801efe0:	2b02      	cmp	r3, #2
 801efe2:	d106      	bne.n	801eff2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801efe4:	683a      	ldr	r2, [r7, #0]
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	0011      	movs	r1, r2
 801efea:	0018      	movs	r0, r3
 801efec:	f000 f951 	bl	801f292 <USBD_CtlError>
            return;
 801eff0:	e060      	b.n	801f0b4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	0018      	movs	r0, r3
 801eff6:	f000 fa34 	bl	801f462 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801effa:	e05b      	b.n	801f0b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	0018      	movs	r0, r3
 801f000:	f000 fa2f 	bl	801f462 <USBD_CtlSendStatus>
        break;
 801f004:	e056      	b.n	801f0b4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801f006:	4b2d      	ldr	r3, [pc, #180]	@ (801f0bc <USBD_SetConfig+0x144>)
 801f008:	781b      	ldrb	r3, [r3, #0]
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d115      	bne.n	801f03a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801f00e:	687a      	ldr	r2, [r7, #4]
 801f010:	23a7      	movs	r3, #167	@ 0xa7
 801f012:	009b      	lsls	r3, r3, #2
 801f014:	2102      	movs	r1, #2
 801f016:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801f018:	4b28      	ldr	r3, [pc, #160]	@ (801f0bc <USBD_SetConfig+0x144>)
 801f01a:	781b      	ldrb	r3, [r3, #0]
 801f01c:	001a      	movs	r2, r3
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801f022:	4b26      	ldr	r3, [pc, #152]	@ (801f0bc <USBD_SetConfig+0x144>)
 801f024:	781a      	ldrb	r2, [r3, #0]
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	0011      	movs	r1, r2
 801f02a:	0018      	movs	r0, r3
 801f02c:	f7ff f8c4 	bl	801e1b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	0018      	movs	r0, r3
 801f034:	f000 fa15 	bl	801f462 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801f038:	e03c      	b.n	801f0b4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801f03a:	4b20      	ldr	r3, [pc, #128]	@ (801f0bc <USBD_SetConfig+0x144>)
 801f03c:	781b      	ldrb	r3, [r3, #0]
 801f03e:	001a      	movs	r2, r3
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	685b      	ldr	r3, [r3, #4]
 801f044:	429a      	cmp	r2, r3
 801f046:	d022      	beq.n	801f08e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	685b      	ldr	r3, [r3, #4]
 801f04c:	b2da      	uxtb	r2, r3
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	0011      	movs	r1, r2
 801f052:	0018      	movs	r0, r3
 801f054:	f7ff f8b0 	bl	801e1b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801f058:	4b18      	ldr	r3, [pc, #96]	@ (801f0bc <USBD_SetConfig+0x144>)
 801f05a:	781b      	ldrb	r3, [r3, #0]
 801f05c:	001a      	movs	r2, r3
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801f062:	4b16      	ldr	r3, [pc, #88]	@ (801f0bc <USBD_SetConfig+0x144>)
 801f064:	781a      	ldrb	r2, [r3, #0]
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	0011      	movs	r1, r2
 801f06a:	0018      	movs	r0, r3
 801f06c:	f7ff f87d 	bl	801e16a <USBD_SetClassConfig>
 801f070:	0003      	movs	r3, r0
 801f072:	2b02      	cmp	r3, #2
 801f074:	d106      	bne.n	801f084 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801f076:	683a      	ldr	r2, [r7, #0]
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	0011      	movs	r1, r2
 801f07c:	0018      	movs	r0, r3
 801f07e:	f000 f908 	bl	801f292 <USBD_CtlError>
            return;
 801f082:	e017      	b.n	801f0b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	0018      	movs	r0, r3
 801f088:	f000 f9eb 	bl	801f462 <USBD_CtlSendStatus>
        break;
 801f08c:	e012      	b.n	801f0b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	0018      	movs	r0, r3
 801f092:	f000 f9e6 	bl	801f462 <USBD_CtlSendStatus>
        break;
 801f096:	e00d      	b.n	801f0b4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801f098:	683a      	ldr	r2, [r7, #0]
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	0011      	movs	r1, r2
 801f09e:	0018      	movs	r0, r3
 801f0a0:	f000 f8f7 	bl	801f292 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801f0a4:	4b05      	ldr	r3, [pc, #20]	@ (801f0bc <USBD_SetConfig+0x144>)
 801f0a6:	781a      	ldrb	r2, [r3, #0]
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	0011      	movs	r1, r2
 801f0ac:	0018      	movs	r0, r3
 801f0ae:	f7ff f883 	bl	801e1b8 <USBD_ClrClassConfig>
        break;
 801f0b2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	b002      	add	sp, #8
 801f0b8:	bd80      	pop	{r7, pc}
 801f0ba:	46c0      	nop			@ (mov r8, r8)
 801f0bc:	200021b0 	.word	0x200021b0

0801f0c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f0c0:	b580      	push	{r7, lr}
 801f0c2:	b082      	sub	sp, #8
 801f0c4:	af00      	add	r7, sp, #0
 801f0c6:	6078      	str	r0, [r7, #4]
 801f0c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801f0ca:	683b      	ldr	r3, [r7, #0]
 801f0cc:	88db      	ldrh	r3, [r3, #6]
 801f0ce:	2b01      	cmp	r3, #1
 801f0d0:	d006      	beq.n	801f0e0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801f0d2:	683a      	ldr	r2, [r7, #0]
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	0011      	movs	r1, r2
 801f0d8:	0018      	movs	r0, r3
 801f0da:	f000 f8da 	bl	801f292 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801f0de:	e026      	b.n	801f12e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801f0e0:	687a      	ldr	r2, [r7, #4]
 801f0e2:	23a7      	movs	r3, #167	@ 0xa7
 801f0e4:	009b      	lsls	r3, r3, #2
 801f0e6:	5cd3      	ldrb	r3, [r2, r3]
 801f0e8:	2b02      	cmp	r3, #2
 801f0ea:	dc02      	bgt.n	801f0f2 <USBD_GetConfig+0x32>
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	dc03      	bgt.n	801f0f8 <USBD_GetConfig+0x38>
 801f0f0:	e016      	b.n	801f120 <USBD_GetConfig+0x60>
 801f0f2:	2b03      	cmp	r3, #3
 801f0f4:	d00c      	beq.n	801f110 <USBD_GetConfig+0x50>
 801f0f6:	e013      	b.n	801f120 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	2200      	movs	r2, #0
 801f0fc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	3308      	adds	r3, #8
 801f102:	0019      	movs	r1, r3
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	2201      	movs	r2, #1
 801f108:	0018      	movs	r0, r3
 801f10a:	f000 f940 	bl	801f38e <USBD_CtlSendData>
        break;
 801f10e:	e00e      	b.n	801f12e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	1d19      	adds	r1, r3, #4
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	2201      	movs	r2, #1
 801f118:	0018      	movs	r0, r3
 801f11a:	f000 f938 	bl	801f38e <USBD_CtlSendData>
        break;
 801f11e:	e006      	b.n	801f12e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801f120:	683a      	ldr	r2, [r7, #0]
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	0011      	movs	r1, r2
 801f126:	0018      	movs	r0, r3
 801f128:	f000 f8b3 	bl	801f292 <USBD_CtlError>
        break;
 801f12c:	46c0      	nop			@ (mov r8, r8)
}
 801f12e:	46c0      	nop			@ (mov r8, r8)
 801f130:	46bd      	mov	sp, r7
 801f132:	b002      	add	sp, #8
 801f134:	bd80      	pop	{r7, pc}

0801f136 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f136:	b580      	push	{r7, lr}
 801f138:	b082      	sub	sp, #8
 801f13a:	af00      	add	r7, sp, #0
 801f13c:	6078      	str	r0, [r7, #4]
 801f13e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801f140:	687a      	ldr	r2, [r7, #4]
 801f142:	23a7      	movs	r3, #167	@ 0xa7
 801f144:	009b      	lsls	r3, r3, #2
 801f146:	5cd3      	ldrb	r3, [r2, r3]
 801f148:	3b01      	subs	r3, #1
 801f14a:	2b02      	cmp	r3, #2
 801f14c:	d822      	bhi.n	801f194 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801f14e:	683b      	ldr	r3, [r7, #0]
 801f150:	88db      	ldrh	r3, [r3, #6]
 801f152:	2b02      	cmp	r3, #2
 801f154:	d006      	beq.n	801f164 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801f156:	683a      	ldr	r2, [r7, #0]
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	0011      	movs	r1, r2
 801f15c:	0018      	movs	r0, r3
 801f15e:	f000 f898 	bl	801f292 <USBD_CtlError>
        break;
 801f162:	e01e      	b.n	801f1a2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	2201      	movs	r2, #1
 801f168:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801f16a:	687a      	ldr	r2, [r7, #4]
 801f16c:	23a9      	movs	r3, #169	@ 0xa9
 801f16e:	009b      	lsls	r3, r3, #2
 801f170:	58d3      	ldr	r3, [r2, r3]
 801f172:	2b00      	cmp	r3, #0
 801f174:	d005      	beq.n	801f182 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	68db      	ldr	r3, [r3, #12]
 801f17a:	2202      	movs	r2, #2
 801f17c:	431a      	orrs	r2, r3
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	330c      	adds	r3, #12
 801f186:	0019      	movs	r1, r3
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	2202      	movs	r2, #2
 801f18c:	0018      	movs	r0, r3
 801f18e:	f000 f8fe 	bl	801f38e <USBD_CtlSendData>
      break;
 801f192:	e006      	b.n	801f1a2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801f194:	683a      	ldr	r2, [r7, #0]
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	0011      	movs	r1, r2
 801f19a:	0018      	movs	r0, r3
 801f19c:	f000 f879 	bl	801f292 <USBD_CtlError>
      break;
 801f1a0:	46c0      	nop			@ (mov r8, r8)
  }
}
 801f1a2:	46c0      	nop			@ (mov r8, r8)
 801f1a4:	46bd      	mov	sp, r7
 801f1a6:	b002      	add	sp, #8
 801f1a8:	bd80      	pop	{r7, pc}

0801f1aa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801f1aa:	b580      	push	{r7, lr}
 801f1ac:	b082      	sub	sp, #8
 801f1ae:	af00      	add	r7, sp, #0
 801f1b0:	6078      	str	r0, [r7, #4]
 801f1b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801f1b4:	683b      	ldr	r3, [r7, #0]
 801f1b6:	885b      	ldrh	r3, [r3, #2]
 801f1b8:	2b01      	cmp	r3, #1
 801f1ba:	d108      	bne.n	801f1ce <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801f1bc:	687a      	ldr	r2, [r7, #4]
 801f1be:	23a9      	movs	r3, #169	@ 0xa9
 801f1c0:	009b      	lsls	r3, r3, #2
 801f1c2:	2101      	movs	r1, #1
 801f1c4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801f1c6:	687b      	ldr	r3, [r7, #4]
 801f1c8:	0018      	movs	r0, r3
 801f1ca:	f000 f94a 	bl	801f462 <USBD_CtlSendStatus>
  }
}
 801f1ce:	46c0      	nop			@ (mov r8, r8)
 801f1d0:	46bd      	mov	sp, r7
 801f1d2:	b002      	add	sp, #8
 801f1d4:	bd80      	pop	{r7, pc}

0801f1d6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801f1d6:	b580      	push	{r7, lr}
 801f1d8:	b082      	sub	sp, #8
 801f1da:	af00      	add	r7, sp, #0
 801f1dc:	6078      	str	r0, [r7, #4]
 801f1de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801f1e0:	687a      	ldr	r2, [r7, #4]
 801f1e2:	23a7      	movs	r3, #167	@ 0xa7
 801f1e4:	009b      	lsls	r3, r3, #2
 801f1e6:	5cd3      	ldrb	r3, [r2, r3]
 801f1e8:	3b01      	subs	r3, #1
 801f1ea:	2b02      	cmp	r3, #2
 801f1ec:	d80d      	bhi.n	801f20a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801f1ee:	683b      	ldr	r3, [r7, #0]
 801f1f0:	885b      	ldrh	r3, [r3, #2]
 801f1f2:	2b01      	cmp	r3, #1
 801f1f4:	d110      	bne.n	801f218 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801f1f6:	687a      	ldr	r2, [r7, #4]
 801f1f8:	23a9      	movs	r3, #169	@ 0xa9
 801f1fa:	009b      	lsls	r3, r3, #2
 801f1fc:	2100      	movs	r1, #0
 801f1fe:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	0018      	movs	r0, r3
 801f204:	f000 f92d 	bl	801f462 <USBD_CtlSendStatus>
      }
      break;
 801f208:	e006      	b.n	801f218 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801f20a:	683a      	ldr	r2, [r7, #0]
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	0011      	movs	r1, r2
 801f210:	0018      	movs	r0, r3
 801f212:	f000 f83e 	bl	801f292 <USBD_CtlError>
      break;
 801f216:	e000      	b.n	801f21a <USBD_ClrFeature+0x44>
      break;
 801f218:	46c0      	nop			@ (mov r8, r8)
  }
}
 801f21a:	46c0      	nop			@ (mov r8, r8)
 801f21c:	46bd      	mov	sp, r7
 801f21e:	b002      	add	sp, #8
 801f220:	bd80      	pop	{r7, pc}

0801f222 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801f222:	b580      	push	{r7, lr}
 801f224:	b082      	sub	sp, #8
 801f226:	af00      	add	r7, sp, #0
 801f228:	6078      	str	r0, [r7, #4]
 801f22a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801f22c:	683b      	ldr	r3, [r7, #0]
 801f22e:	781a      	ldrb	r2, [r3, #0]
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801f234:	683b      	ldr	r3, [r7, #0]
 801f236:	785a      	ldrb	r2, [r3, #1]
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801f23c:	683b      	ldr	r3, [r7, #0]
 801f23e:	3302      	adds	r3, #2
 801f240:	781b      	ldrb	r3, [r3, #0]
 801f242:	001a      	movs	r2, r3
 801f244:	683b      	ldr	r3, [r7, #0]
 801f246:	3303      	adds	r3, #3
 801f248:	781b      	ldrb	r3, [r3, #0]
 801f24a:	021b      	lsls	r3, r3, #8
 801f24c:	b29b      	uxth	r3, r3
 801f24e:	18d3      	adds	r3, r2, r3
 801f250:	b29a      	uxth	r2, r3
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801f256:	683b      	ldr	r3, [r7, #0]
 801f258:	3304      	adds	r3, #4
 801f25a:	781b      	ldrb	r3, [r3, #0]
 801f25c:	001a      	movs	r2, r3
 801f25e:	683b      	ldr	r3, [r7, #0]
 801f260:	3305      	adds	r3, #5
 801f262:	781b      	ldrb	r3, [r3, #0]
 801f264:	021b      	lsls	r3, r3, #8
 801f266:	b29b      	uxth	r3, r3
 801f268:	18d3      	adds	r3, r2, r3
 801f26a:	b29a      	uxth	r2, r3
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801f270:	683b      	ldr	r3, [r7, #0]
 801f272:	3306      	adds	r3, #6
 801f274:	781b      	ldrb	r3, [r3, #0]
 801f276:	001a      	movs	r2, r3
 801f278:	683b      	ldr	r3, [r7, #0]
 801f27a:	3307      	adds	r3, #7
 801f27c:	781b      	ldrb	r3, [r3, #0]
 801f27e:	021b      	lsls	r3, r3, #8
 801f280:	b29b      	uxth	r3, r3
 801f282:	18d3      	adds	r3, r2, r3
 801f284:	b29a      	uxth	r2, r3
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	80da      	strh	r2, [r3, #6]

}
 801f28a:	46c0      	nop			@ (mov r8, r8)
 801f28c:	46bd      	mov	sp, r7
 801f28e:	b002      	add	sp, #8
 801f290:	bd80      	pop	{r7, pc}

0801f292 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801f292:	b580      	push	{r7, lr}
 801f294:	b082      	sub	sp, #8
 801f296:	af00      	add	r7, sp, #0
 801f298:	6078      	str	r0, [r7, #4]
 801f29a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	2180      	movs	r1, #128	@ 0x80
 801f2a0:	0018      	movs	r0, r3
 801f2a2:	f000 fd1e 	bl	801fce2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	2100      	movs	r1, #0
 801f2aa:	0018      	movs	r0, r3
 801f2ac:	f000 fd19 	bl	801fce2 <USBD_LL_StallEP>
}
 801f2b0:	46c0      	nop			@ (mov r8, r8)
 801f2b2:	46bd      	mov	sp, r7
 801f2b4:	b002      	add	sp, #8
 801f2b6:	bd80      	pop	{r7, pc}

0801f2b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801f2b8:	b590      	push	{r4, r7, lr}
 801f2ba:	b087      	sub	sp, #28
 801f2bc:	af00      	add	r7, sp, #0
 801f2be:	60f8      	str	r0, [r7, #12]
 801f2c0:	60b9      	str	r1, [r7, #8]
 801f2c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801f2c4:	2417      	movs	r4, #23
 801f2c6:	193b      	adds	r3, r7, r4
 801f2c8:	2200      	movs	r2, #0
 801f2ca:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801f2cc:	68fb      	ldr	r3, [r7, #12]
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d03c      	beq.n	801f34c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801f2d2:	68fb      	ldr	r3, [r7, #12]
 801f2d4:	0018      	movs	r0, r3
 801f2d6:	f000 f83d 	bl	801f354 <USBD_GetLen>
 801f2da:	0003      	movs	r3, r0
 801f2dc:	3301      	adds	r3, #1
 801f2de:	b29b      	uxth	r3, r3
 801f2e0:	18db      	adds	r3, r3, r3
 801f2e2:	b29a      	uxth	r2, r3
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801f2e8:	193b      	adds	r3, r7, r4
 801f2ea:	781b      	ldrb	r3, [r3, #0]
 801f2ec:	193a      	adds	r2, r7, r4
 801f2ee:	1c59      	adds	r1, r3, #1
 801f2f0:	7011      	strb	r1, [r2, #0]
 801f2f2:	001a      	movs	r2, r3
 801f2f4:	68bb      	ldr	r3, [r7, #8]
 801f2f6:	189b      	adds	r3, r3, r2
 801f2f8:	687a      	ldr	r2, [r7, #4]
 801f2fa:	7812      	ldrb	r2, [r2, #0]
 801f2fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801f2fe:	193b      	adds	r3, r7, r4
 801f300:	781b      	ldrb	r3, [r3, #0]
 801f302:	193a      	adds	r2, r7, r4
 801f304:	1c59      	adds	r1, r3, #1
 801f306:	7011      	strb	r1, [r2, #0]
 801f308:	001a      	movs	r2, r3
 801f30a:	68bb      	ldr	r3, [r7, #8]
 801f30c:	189b      	adds	r3, r3, r2
 801f30e:	2203      	movs	r2, #3
 801f310:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801f312:	e017      	b.n	801f344 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	1c5a      	adds	r2, r3, #1
 801f318:	60fa      	str	r2, [r7, #12]
 801f31a:	2417      	movs	r4, #23
 801f31c:	193a      	adds	r2, r7, r4
 801f31e:	7812      	ldrb	r2, [r2, #0]
 801f320:	1939      	adds	r1, r7, r4
 801f322:	1c50      	adds	r0, r2, #1
 801f324:	7008      	strb	r0, [r1, #0]
 801f326:	0011      	movs	r1, r2
 801f328:	68ba      	ldr	r2, [r7, #8]
 801f32a:	1852      	adds	r2, r2, r1
 801f32c:	781b      	ldrb	r3, [r3, #0]
 801f32e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801f330:	193b      	adds	r3, r7, r4
 801f332:	781b      	ldrb	r3, [r3, #0]
 801f334:	193a      	adds	r2, r7, r4
 801f336:	1c59      	adds	r1, r3, #1
 801f338:	7011      	strb	r1, [r2, #0]
 801f33a:	001a      	movs	r2, r3
 801f33c:	68bb      	ldr	r3, [r7, #8]
 801f33e:	189b      	adds	r3, r3, r2
 801f340:	2200      	movs	r2, #0
 801f342:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	781b      	ldrb	r3, [r3, #0]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	d1e3      	bne.n	801f314 <USBD_GetString+0x5c>
    }
  }
}
 801f34c:	46c0      	nop			@ (mov r8, r8)
 801f34e:	46bd      	mov	sp, r7
 801f350:	b007      	add	sp, #28
 801f352:	bd90      	pop	{r4, r7, pc}

0801f354 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801f354:	b580      	push	{r7, lr}
 801f356:	b084      	sub	sp, #16
 801f358:	af00      	add	r7, sp, #0
 801f35a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801f35c:	230f      	movs	r3, #15
 801f35e:	18fb      	adds	r3, r7, r3
 801f360:	2200      	movs	r2, #0
 801f362:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801f364:	e008      	b.n	801f378 <USBD_GetLen+0x24>
  {
    len++;
 801f366:	210f      	movs	r1, #15
 801f368:	187b      	adds	r3, r7, r1
 801f36a:	781a      	ldrb	r2, [r3, #0]
 801f36c:	187b      	adds	r3, r7, r1
 801f36e:	3201      	adds	r2, #1
 801f370:	701a      	strb	r2, [r3, #0]
    buf++;
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	3301      	adds	r3, #1
 801f376:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	781b      	ldrb	r3, [r3, #0]
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d1f2      	bne.n	801f366 <USBD_GetLen+0x12>
  }

  return len;
 801f380:	230f      	movs	r3, #15
 801f382:	18fb      	adds	r3, r7, r3
 801f384:	781b      	ldrb	r3, [r3, #0]
}
 801f386:	0018      	movs	r0, r3
 801f388:	46bd      	mov	sp, r7
 801f38a:	b004      	add	sp, #16
 801f38c:	bd80      	pop	{r7, pc}

0801f38e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801f38e:	b580      	push	{r7, lr}
 801f390:	b084      	sub	sp, #16
 801f392:	af00      	add	r7, sp, #0
 801f394:	60f8      	str	r0, [r7, #12]
 801f396:	60b9      	str	r1, [r7, #8]
 801f398:	1dbb      	adds	r3, r7, #6
 801f39a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801f39c:	68fa      	ldr	r2, [r7, #12]
 801f39e:	23a5      	movs	r3, #165	@ 0xa5
 801f3a0:	009b      	lsls	r3, r3, #2
 801f3a2:	2102      	movs	r1, #2
 801f3a4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801f3a6:	1dbb      	adds	r3, r7, #6
 801f3a8:	881a      	ldrh	r2, [r3, #0]
 801f3aa:	68fb      	ldr	r3, [r7, #12]
 801f3ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801f3ae:	1dbb      	adds	r3, r7, #6
 801f3b0:	881a      	ldrh	r2, [r3, #0]
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f3b6:	1dbb      	adds	r3, r7, #6
 801f3b8:	881b      	ldrh	r3, [r3, #0]
 801f3ba:	68ba      	ldr	r2, [r7, #8]
 801f3bc:	68f8      	ldr	r0, [r7, #12]
 801f3be:	2100      	movs	r1, #0
 801f3c0:	f000 fd41 	bl	801fe46 <USBD_LL_Transmit>

  return USBD_OK;
 801f3c4:	2300      	movs	r3, #0
}
 801f3c6:	0018      	movs	r0, r3
 801f3c8:	46bd      	mov	sp, r7
 801f3ca:	b004      	add	sp, #16
 801f3cc:	bd80      	pop	{r7, pc}

0801f3ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801f3ce:	b580      	push	{r7, lr}
 801f3d0:	b084      	sub	sp, #16
 801f3d2:	af00      	add	r7, sp, #0
 801f3d4:	60f8      	str	r0, [r7, #12]
 801f3d6:	60b9      	str	r1, [r7, #8]
 801f3d8:	1dbb      	adds	r3, r7, #6
 801f3da:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f3dc:	1dbb      	adds	r3, r7, #6
 801f3de:	881b      	ldrh	r3, [r3, #0]
 801f3e0:	68ba      	ldr	r2, [r7, #8]
 801f3e2:	68f8      	ldr	r0, [r7, #12]
 801f3e4:	2100      	movs	r1, #0
 801f3e6:	f000 fd2e 	bl	801fe46 <USBD_LL_Transmit>

  return USBD_OK;
 801f3ea:	2300      	movs	r3, #0
}
 801f3ec:	0018      	movs	r0, r3
 801f3ee:	46bd      	mov	sp, r7
 801f3f0:	b004      	add	sp, #16
 801f3f2:	bd80      	pop	{r7, pc}

0801f3f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801f3f4:	b580      	push	{r7, lr}
 801f3f6:	b084      	sub	sp, #16
 801f3f8:	af00      	add	r7, sp, #0
 801f3fa:	60f8      	str	r0, [r7, #12]
 801f3fc:	60b9      	str	r1, [r7, #8]
 801f3fe:	1dbb      	adds	r3, r7, #6
 801f400:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801f402:	68fa      	ldr	r2, [r7, #12]
 801f404:	23a5      	movs	r3, #165	@ 0xa5
 801f406:	009b      	lsls	r3, r3, #2
 801f408:	2103      	movs	r1, #3
 801f40a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801f40c:	1dbb      	adds	r3, r7, #6
 801f40e:	8819      	ldrh	r1, [r3, #0]
 801f410:	68fa      	ldr	r2, [r7, #12]
 801f412:	23ae      	movs	r3, #174	@ 0xae
 801f414:	005b      	lsls	r3, r3, #1
 801f416:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801f418:	1dbb      	adds	r3, r7, #6
 801f41a:	8819      	ldrh	r1, [r3, #0]
 801f41c:	68fa      	ldr	r2, [r7, #12]
 801f41e:	23b0      	movs	r3, #176	@ 0xb0
 801f420:	005b      	lsls	r3, r3, #1
 801f422:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f424:	1dbb      	adds	r3, r7, #6
 801f426:	881b      	ldrh	r3, [r3, #0]
 801f428:	68ba      	ldr	r2, [r7, #8]
 801f42a:	68f8      	ldr	r0, [r7, #12]
 801f42c:	2100      	movs	r1, #0
 801f42e:	f000 fd41 	bl	801feb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f432:	2300      	movs	r3, #0
}
 801f434:	0018      	movs	r0, r3
 801f436:	46bd      	mov	sp, r7
 801f438:	b004      	add	sp, #16
 801f43a:	bd80      	pop	{r7, pc}

0801f43c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801f43c:	b580      	push	{r7, lr}
 801f43e:	b084      	sub	sp, #16
 801f440:	af00      	add	r7, sp, #0
 801f442:	60f8      	str	r0, [r7, #12]
 801f444:	60b9      	str	r1, [r7, #8]
 801f446:	1dbb      	adds	r3, r7, #6
 801f448:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f44a:	1dbb      	adds	r3, r7, #6
 801f44c:	881b      	ldrh	r3, [r3, #0]
 801f44e:	68ba      	ldr	r2, [r7, #8]
 801f450:	68f8      	ldr	r0, [r7, #12]
 801f452:	2100      	movs	r1, #0
 801f454:	f000 fd2e 	bl	801feb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f458:	2300      	movs	r3, #0
}
 801f45a:	0018      	movs	r0, r3
 801f45c:	46bd      	mov	sp, r7
 801f45e:	b004      	add	sp, #16
 801f460:	bd80      	pop	{r7, pc}

0801f462 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801f462:	b580      	push	{r7, lr}
 801f464:	b082      	sub	sp, #8
 801f466:	af00      	add	r7, sp, #0
 801f468:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801f46a:	687a      	ldr	r2, [r7, #4]
 801f46c:	23a5      	movs	r3, #165	@ 0xa5
 801f46e:	009b      	lsls	r3, r3, #2
 801f470:	2104      	movs	r1, #4
 801f472:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801f474:	6878      	ldr	r0, [r7, #4]
 801f476:	2300      	movs	r3, #0
 801f478:	2200      	movs	r2, #0
 801f47a:	2100      	movs	r1, #0
 801f47c:	f000 fce3 	bl	801fe46 <USBD_LL_Transmit>

  return USBD_OK;
 801f480:	2300      	movs	r3, #0
}
 801f482:	0018      	movs	r0, r3
 801f484:	46bd      	mov	sp, r7
 801f486:	b002      	add	sp, #8
 801f488:	bd80      	pop	{r7, pc}

0801f48a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801f48a:	b580      	push	{r7, lr}
 801f48c:	b082      	sub	sp, #8
 801f48e:	af00      	add	r7, sp, #0
 801f490:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801f492:	687a      	ldr	r2, [r7, #4]
 801f494:	23a5      	movs	r3, #165	@ 0xa5
 801f496:	009b      	lsls	r3, r3, #2
 801f498:	2105      	movs	r1, #5
 801f49a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f49c:	6878      	ldr	r0, [r7, #4]
 801f49e:	2300      	movs	r3, #0
 801f4a0:	2200      	movs	r2, #0
 801f4a2:	2100      	movs	r1, #0
 801f4a4:	f000 fd06 	bl	801feb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f4a8:	2300      	movs	r3, #0
}
 801f4aa:	0018      	movs	r0, r3
 801f4ac:	46bd      	mov	sp, r7
 801f4ae:	b002      	add	sp, #8
 801f4b0:	bd80      	pop	{r7, pc}
	...

0801f4b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f4b4:	b580      	push	{r7, lr}
 801f4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f4b8:	4914      	ldr	r1, [pc, #80]	@ (801f50c <MX_USB_DEVICE_Init+0x58>)
 801f4ba:	4b15      	ldr	r3, [pc, #84]	@ (801f510 <MX_USB_DEVICE_Init+0x5c>)
 801f4bc:	2200      	movs	r2, #0
 801f4be:	0018      	movs	r0, r3
 801f4c0:	f7fe fdec 	bl	801e09c <USBD_Init>
 801f4c4:	1e03      	subs	r3, r0, #0
 801f4c6:	d001      	beq.n	801f4cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801f4c8:	f7ea ff44 	bl	800a354 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f4cc:	4a11      	ldr	r2, [pc, #68]	@ (801f514 <MX_USB_DEVICE_Init+0x60>)
 801f4ce:	4b10      	ldr	r3, [pc, #64]	@ (801f510 <MX_USB_DEVICE_Init+0x5c>)
 801f4d0:	0011      	movs	r1, r2
 801f4d2:	0018      	movs	r0, r3
 801f4d4:	f7fe fe13 	bl	801e0fe <USBD_RegisterClass>
 801f4d8:	1e03      	subs	r3, r0, #0
 801f4da:	d001      	beq.n	801f4e0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801f4dc:	f7ea ff3a 	bl	800a354 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f4e0:	4a0d      	ldr	r2, [pc, #52]	@ (801f518 <MX_USB_DEVICE_Init+0x64>)
 801f4e2:	4b0b      	ldr	r3, [pc, #44]	@ (801f510 <MX_USB_DEVICE_Init+0x5c>)
 801f4e4:	0011      	movs	r1, r2
 801f4e6:	0018      	movs	r0, r3
 801f4e8:	f7fe fd28 	bl	801df3c <USBD_CDC_RegisterInterface>
 801f4ec:	1e03      	subs	r3, r0, #0
 801f4ee:	d001      	beq.n	801f4f4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801f4f0:	f7ea ff30 	bl	800a354 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f4f4:	4b06      	ldr	r3, [pc, #24]	@ (801f510 <MX_USB_DEVICE_Init+0x5c>)
 801f4f6:	0018      	movs	r0, r3
 801f4f8:	f7fe fe21 	bl	801e13e <USBD_Start>
 801f4fc:	1e03      	subs	r3, r0, #0
 801f4fe:	d001      	beq.n	801f504 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801f500:	f7ea ff28 	bl	800a354 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f504:	46c0      	nop			@ (mov r8, r8)
 801f506:	46bd      	mov	sp, r7
 801f508:	bd80      	pop	{r7, pc}
 801f50a:	46c0      	nop			@ (mov r8, r8)
 801f50c:	20000218 	.word	0x20000218
 801f510:	200021b4 	.word	0x200021b4
 801f514:	20000104 	.word	0x20000104
 801f518:	20000208 	.word	0x20000208

0801f51c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801f51c:	b580      	push	{r7, lr}
 801f51e:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f520:	4907      	ldr	r1, [pc, #28]	@ (801f540 <CDC_Init_FS+0x24>)
 801f522:	4b08      	ldr	r3, [pc, #32]	@ (801f544 <CDC_Init_FS+0x28>)
 801f524:	2200      	movs	r2, #0
 801f526:	0018      	movs	r0, r3
 801f528:	f7fe fd23 	bl	801df72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f52c:	4a06      	ldr	r2, [pc, #24]	@ (801f548 <CDC_Init_FS+0x2c>)
 801f52e:	4b05      	ldr	r3, [pc, #20]	@ (801f544 <CDC_Init_FS+0x28>)
 801f530:	0011      	movs	r1, r2
 801f532:	0018      	movs	r0, r3
 801f534:	f7fe fd39 	bl	801dfaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801f538:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801f53a:	0018      	movs	r0, r3
 801f53c:	46bd      	mov	sp, r7
 801f53e:	bd80      	pop	{r7, pc}
 801f540:	20002938 	.word	0x20002938
 801f544:	200021b4 	.word	0x200021b4
 801f548:	20002538 	.word	0x20002538

0801f54c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801f54c:	b580      	push	{r7, lr}
 801f54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801f550:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801f552:	0018      	movs	r0, r3
 801f554:	46bd      	mov	sp, r7
 801f556:	bd80      	pop	{r7, pc}

0801f558 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801f558:	b580      	push	{r7, lr}
 801f55a:	b082      	sub	sp, #8
 801f55c:	af00      	add	r7, sp, #0
 801f55e:	6039      	str	r1, [r7, #0]
 801f560:	0011      	movs	r1, r2
 801f562:	1dfb      	adds	r3, r7, #7
 801f564:	1c02      	adds	r2, r0, #0
 801f566:	701a      	strb	r2, [r3, #0]
 801f568:	1d3b      	adds	r3, r7, #4
 801f56a:	1c0a      	adds	r2, r1, #0
 801f56c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801f56e:	1dfb      	adds	r3, r7, #7
 801f570:	781b      	ldrb	r3, [r3, #0]
 801f572:	2b23      	cmp	r3, #35	@ 0x23
 801f574:	d804      	bhi.n	801f580 <CDC_Control_FS+0x28>
 801f576:	009a      	lsls	r2, r3, #2
 801f578:	4b04      	ldr	r3, [pc, #16]	@ (801f58c <CDC_Control_FS+0x34>)
 801f57a:	18d3      	adds	r3, r2, r3
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801f580:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801f582:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801f584:	0018      	movs	r0, r3
 801f586:	46bd      	mov	sp, r7
 801f588:	b002      	add	sp, #8
 801f58a:	bd80      	pop	{r7, pc}
 801f58c:	08029050 	.word	0x08029050

0801f590 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801f590:	b580      	push	{r7, lr}
 801f592:	b082      	sub	sp, #8
 801f594:	af00      	add	r7, sp, #0
 801f596:	6078      	str	r0, [r7, #4]
 801f598:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801f59a:	4b12      	ldr	r3, [pc, #72]	@ (801f5e4 <CDC_Receive_FS+0x54>)
 801f59c:	781b      	ldrb	r3, [r3, #0]
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d013      	beq.n	801f5ca <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801f5a2:	683b      	ldr	r3, [r7, #0]
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	b29a      	uxth	r2, r3
 801f5a8:	2301      	movs	r3, #1
 801f5aa:	425b      	negs	r3, r3
 801f5ac:	6879      	ldr	r1, [r7, #4]
 801f5ae:	480e      	ldr	r0, [pc, #56]	@ (801f5e8 <CDC_Receive_FS+0x58>)
 801f5b0:	f7fa fa46 	bl	8019a40 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f5b4:	687a      	ldr	r2, [r7, #4]
 801f5b6:	4b0d      	ldr	r3, [pc, #52]	@ (801f5ec <CDC_Receive_FS+0x5c>)
 801f5b8:	0011      	movs	r1, r2
 801f5ba:	0018      	movs	r0, r3
 801f5bc:	f7fe fcf5 	bl	801dfaa <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f5c0:	4b0a      	ldr	r3, [pc, #40]	@ (801f5ec <CDC_Receive_FS+0x5c>)
 801f5c2:	0018      	movs	r0, r3
 801f5c4:	f7fe fd3c 	bl	801e040 <USBD_CDC_ReceivePacket>
 801f5c8:	e006      	b.n	801f5d8 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801f5ca:	683b      	ldr	r3, [r7, #0]
 801f5cc:	681a      	ldr	r2, [r3, #0]
 801f5ce:	4b08      	ldr	r3, [pc, #32]	@ (801f5f0 <CDC_Receive_FS+0x60>)
 801f5d0:	681b      	ldr	r3, [r3, #0]
 801f5d2:	18d2      	adds	r2, r2, r3
 801f5d4:	4b06      	ldr	r3, [pc, #24]	@ (801f5f0 <CDC_Receive_FS+0x60>)
 801f5d6:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801f5d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801f5da:	0018      	movs	r0, r3
 801f5dc:	46bd      	mov	sp, r7
 801f5de:	b002      	add	sp, #8
 801f5e0:	bd80      	pop	{r7, pc}
 801f5e2:	46c0      	nop			@ (mov r8, r8)
 801f5e4:	20002478 	.word	0x20002478
 801f5e8:	2000247c 	.word	0x2000247c
 801f5ec:	200021b4 	.word	0x200021b4
 801f5f0:	20002534 	.word	0x20002534

0801f5f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801f5f4:	b5b0      	push	{r4, r5, r7, lr}
 801f5f6:	b084      	sub	sp, #16
 801f5f8:	af00      	add	r7, sp, #0
 801f5fa:	6078      	str	r0, [r7, #4]
 801f5fc:	000a      	movs	r2, r1
 801f5fe:	1cbb      	adds	r3, r7, #2
 801f600:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801f602:	230f      	movs	r3, #15
 801f604:	18fb      	adds	r3, r7, r3
 801f606:	2200      	movs	r2, #0
 801f608:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801f60a:	4a11      	ldr	r2, [pc, #68]	@ (801f650 <CDC_Transmit_FS+0x5c>)
 801f60c:	23ae      	movs	r3, #174	@ 0xae
 801f60e:	009b      	lsls	r3, r3, #2
 801f610:	58d3      	ldr	r3, [r2, r3]
 801f612:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801f614:	68ba      	ldr	r2, [r7, #8]
 801f616:	2385      	movs	r3, #133	@ 0x85
 801f618:	009b      	lsls	r3, r3, #2
 801f61a:	58d3      	ldr	r3, [r2, r3]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d001      	beq.n	801f624 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801f620:	2301      	movs	r3, #1
 801f622:	e010      	b.n	801f646 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801f624:	1cbb      	adds	r3, r7, #2
 801f626:	881a      	ldrh	r2, [r3, #0]
 801f628:	6879      	ldr	r1, [r7, #4]
 801f62a:	4b09      	ldr	r3, [pc, #36]	@ (801f650 <CDC_Transmit_FS+0x5c>)
 801f62c:	0018      	movs	r0, r3
 801f62e:	f7fe fca0 	bl	801df72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801f632:	250f      	movs	r5, #15
 801f634:	197c      	adds	r4, r7, r5
 801f636:	4b06      	ldr	r3, [pc, #24]	@ (801f650 <CDC_Transmit_FS+0x5c>)
 801f638:	0018      	movs	r0, r3
 801f63a:	f7fe fcca 	bl	801dfd2 <USBD_CDC_TransmitPacket>
 801f63e:	0003      	movs	r3, r0
 801f640:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801f642:	197b      	adds	r3, r7, r5
 801f644:	781b      	ldrb	r3, [r3, #0]
}
 801f646:	0018      	movs	r0, r3
 801f648:	46bd      	mov	sp, r7
 801f64a:	b004      	add	sp, #16
 801f64c:	bdb0      	pop	{r4, r5, r7, pc}
 801f64e:	46c0      	nop			@ (mov r8, r8)
 801f650:	200021b4 	.word	0x200021b4

0801f654 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801f654:	b580      	push	{r7, lr}
 801f656:	af00      	add	r7, sp, #0
  ESPProg = true;
 801f658:	4b02      	ldr	r3, [pc, #8]	@ (801f664 <EnableESPProg+0x10>)
 801f65a:	2201      	movs	r2, #1
 801f65c:	701a      	strb	r2, [r3, #0]
}
 801f65e:	46c0      	nop			@ (mov r8, r8)
 801f660:	46bd      	mov	sp, r7
 801f662:	bd80      	pop	{r7, pc}
 801f664:	20002478 	.word	0x20002478

0801f668 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801f668:	b580      	push	{r7, lr}
 801f66a:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801f66c:	4b01      	ldr	r3, [pc, #4]	@ (801f674 <GetUsbRxPointer+0xc>)
}
 801f66e:	0018      	movs	r0, r3
 801f670:	46bd      	mov	sp, r7
 801f672:	bd80      	pop	{r7, pc}
 801f674:	20002538 	.word	0x20002538

0801f678 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801f678:	b580      	push	{r7, lr}
 801f67a:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801f67c:	4b07      	ldr	r3, [pc, #28]	@ (801f69c <ResetUsbRxDataSize+0x24>)
 801f67e:	2200      	movs	r2, #0
 801f680:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801f682:	4a07      	ldr	r2, [pc, #28]	@ (801f6a0 <ResetUsbRxDataSize+0x28>)
 801f684:	4b07      	ldr	r3, [pc, #28]	@ (801f6a4 <ResetUsbRxDataSize+0x2c>)
 801f686:	0011      	movs	r1, r2
 801f688:	0018      	movs	r0, r3
 801f68a:	f7fe fc8e 	bl	801dfaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f68e:	4b05      	ldr	r3, [pc, #20]	@ (801f6a4 <ResetUsbRxDataSize+0x2c>)
 801f690:	0018      	movs	r0, r3
 801f692:	f7fe fcd5 	bl	801e040 <USBD_CDC_ReceivePacket>
}
 801f696:	46c0      	nop			@ (mov r8, r8)
 801f698:	46bd      	mov	sp, r7
 801f69a:	bd80      	pop	{r7, pc}
 801f69c:	20002534 	.word	0x20002534
 801f6a0:	20002538 	.word	0x20002538
 801f6a4:	200021b4 	.word	0x200021b4

0801f6a8 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801f6a8:	b580      	push	{r7, lr}
 801f6aa:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801f6ac:	4b02      	ldr	r3, [pc, #8]	@ (801f6b8 <GetUsbRxDataSize+0x10>)
 801f6ae:	681b      	ldr	r3, [r3, #0]
}
 801f6b0:	0018      	movs	r0, r3
 801f6b2:	46bd      	mov	sp, r7
 801f6b4:	bd80      	pop	{r7, pc}
 801f6b6:	46c0      	nop			@ (mov r8, r8)
 801f6b8:	20002534 	.word	0x20002534

0801f6bc <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801f6bc:	b580      	push	{r7, lr}
 801f6be:	b082      	sub	sp, #8
 801f6c0:	af00      	add	r7, sp, #0
 801f6c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801f6c4:	687a      	ldr	r2, [r7, #4]
 801f6c6:	4b07      	ldr	r3, [pc, #28]	@ (801f6e4 <GetUsbRxNextChunk+0x28>)
 801f6c8:	18d2      	adds	r2, r2, r3
 801f6ca:	4b07      	ldr	r3, [pc, #28]	@ (801f6e8 <GetUsbRxNextChunk+0x2c>)
 801f6cc:	0011      	movs	r1, r2
 801f6ce:	0018      	movs	r0, r3
 801f6d0:	f7fe fc6b 	bl	801dfaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f6d4:	4b04      	ldr	r3, [pc, #16]	@ (801f6e8 <GetUsbRxNextChunk+0x2c>)
 801f6d6:	0018      	movs	r0, r3
 801f6d8:	f7fe fcb2 	bl	801e040 <USBD_CDC_ReceivePacket>
}
 801f6dc:	46c0      	nop			@ (mov r8, r8)
 801f6de:	46bd      	mov	sp, r7
 801f6e0:	b002      	add	sp, #8
 801f6e2:	bd80      	pop	{r7, pc}
 801f6e4:	20002538 	.word	0x20002538
 801f6e8:	200021b4 	.word	0x200021b4

0801f6ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f6ec:	b580      	push	{r7, lr}
 801f6ee:	b082      	sub	sp, #8
 801f6f0:	af00      	add	r7, sp, #0
 801f6f2:	0002      	movs	r2, r0
 801f6f4:	6039      	str	r1, [r7, #0]
 801f6f6:	1dfb      	adds	r3, r7, #7
 801f6f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f6fa:	683b      	ldr	r3, [r7, #0]
 801f6fc:	2212      	movs	r2, #18
 801f6fe:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801f700:	4b02      	ldr	r3, [pc, #8]	@ (801f70c <USBD_FS_DeviceDescriptor+0x20>)
}
 801f702:	0018      	movs	r0, r3
 801f704:	46bd      	mov	sp, r7
 801f706:	b002      	add	sp, #8
 801f708:	bd80      	pop	{r7, pc}
 801f70a:	46c0      	nop			@ (mov r8, r8)
 801f70c:	20000234 	.word	0x20000234

0801f710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f710:	b580      	push	{r7, lr}
 801f712:	b082      	sub	sp, #8
 801f714:	af00      	add	r7, sp, #0
 801f716:	0002      	movs	r2, r0
 801f718:	6039      	str	r1, [r7, #0]
 801f71a:	1dfb      	adds	r3, r7, #7
 801f71c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f71e:	683b      	ldr	r3, [r7, #0]
 801f720:	2204      	movs	r2, #4
 801f722:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801f724:	4b02      	ldr	r3, [pc, #8]	@ (801f730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801f726:	0018      	movs	r0, r3
 801f728:	46bd      	mov	sp, r7
 801f72a:	b002      	add	sp, #8
 801f72c:	bd80      	pop	{r7, pc}
 801f72e:	46c0      	nop			@ (mov r8, r8)
 801f730:	20000248 	.word	0x20000248

0801f734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f734:	b580      	push	{r7, lr}
 801f736:	b082      	sub	sp, #8
 801f738:	af00      	add	r7, sp, #0
 801f73a:	0002      	movs	r2, r0
 801f73c:	6039      	str	r1, [r7, #0]
 801f73e:	1dfb      	adds	r3, r7, #7
 801f740:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801f742:	1dfb      	adds	r3, r7, #7
 801f744:	781b      	ldrb	r3, [r3, #0]
 801f746:	2b00      	cmp	r3, #0
 801f748:	d106      	bne.n	801f758 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f74a:	683a      	ldr	r2, [r7, #0]
 801f74c:	4908      	ldr	r1, [pc, #32]	@ (801f770 <USBD_FS_ProductStrDescriptor+0x3c>)
 801f74e:	4b09      	ldr	r3, [pc, #36]	@ (801f774 <USBD_FS_ProductStrDescriptor+0x40>)
 801f750:	0018      	movs	r0, r3
 801f752:	f7ff fdb1 	bl	801f2b8 <USBD_GetString>
 801f756:	e005      	b.n	801f764 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f758:	683a      	ldr	r2, [r7, #0]
 801f75a:	4905      	ldr	r1, [pc, #20]	@ (801f770 <USBD_FS_ProductStrDescriptor+0x3c>)
 801f75c:	4b05      	ldr	r3, [pc, #20]	@ (801f774 <USBD_FS_ProductStrDescriptor+0x40>)
 801f75e:	0018      	movs	r0, r3
 801f760:	f7ff fdaa 	bl	801f2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f764:	4b02      	ldr	r3, [pc, #8]	@ (801f770 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801f766:	0018      	movs	r0, r3
 801f768:	46bd      	mov	sp, r7
 801f76a:	b002      	add	sp, #8
 801f76c:	bd80      	pop	{r7, pc}
 801f76e:	46c0      	nop			@ (mov r8, r8)
 801f770:	20002d38 	.word	0x20002d38
 801f774:	08028a5c 	.word	0x08028a5c

0801f778 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f778:	b580      	push	{r7, lr}
 801f77a:	b082      	sub	sp, #8
 801f77c:	af00      	add	r7, sp, #0
 801f77e:	0002      	movs	r2, r0
 801f780:	6039      	str	r1, [r7, #0]
 801f782:	1dfb      	adds	r3, r7, #7
 801f784:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f786:	683a      	ldr	r2, [r7, #0]
 801f788:	4904      	ldr	r1, [pc, #16]	@ (801f79c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801f78a:	4b05      	ldr	r3, [pc, #20]	@ (801f7a0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801f78c:	0018      	movs	r0, r3
 801f78e:	f7ff fd93 	bl	801f2b8 <USBD_GetString>
  return USBD_StrDesc;
 801f792:	4b02      	ldr	r3, [pc, #8]	@ (801f79c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801f794:	0018      	movs	r0, r3
 801f796:	46bd      	mov	sp, r7
 801f798:	b002      	add	sp, #8
 801f79a:	bd80      	pop	{r7, pc}
 801f79c:	20002d38 	.word	0x20002d38
 801f7a0:	08028a74 	.word	0x08028a74

0801f7a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f7a4:	b580      	push	{r7, lr}
 801f7a6:	b082      	sub	sp, #8
 801f7a8:	af00      	add	r7, sp, #0
 801f7aa:	0002      	movs	r2, r0
 801f7ac:	6039      	str	r1, [r7, #0]
 801f7ae:	1dfb      	adds	r3, r7, #7
 801f7b0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801f7b2:	683b      	ldr	r3, [r7, #0]
 801f7b4:	221a      	movs	r2, #26
 801f7b6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801f7b8:	f000 f84c 	bl	801f854 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801f7bc:	4b02      	ldr	r3, [pc, #8]	@ (801f7c8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801f7be:	0018      	movs	r0, r3
 801f7c0:	46bd      	mov	sp, r7
 801f7c2:	b002      	add	sp, #8
 801f7c4:	bd80      	pop	{r7, pc}
 801f7c6:	46c0      	nop			@ (mov r8, r8)
 801f7c8:	2000024c 	.word	0x2000024c

0801f7cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b082      	sub	sp, #8
 801f7d0:	af00      	add	r7, sp, #0
 801f7d2:	0002      	movs	r2, r0
 801f7d4:	6039      	str	r1, [r7, #0]
 801f7d6:	1dfb      	adds	r3, r7, #7
 801f7d8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801f7da:	1dfb      	adds	r3, r7, #7
 801f7dc:	781b      	ldrb	r3, [r3, #0]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d106      	bne.n	801f7f0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f7e2:	683a      	ldr	r2, [r7, #0]
 801f7e4:	4908      	ldr	r1, [pc, #32]	@ (801f808 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801f7e6:	4b09      	ldr	r3, [pc, #36]	@ (801f80c <USBD_FS_ConfigStrDescriptor+0x40>)
 801f7e8:	0018      	movs	r0, r3
 801f7ea:	f7ff fd65 	bl	801f2b8 <USBD_GetString>
 801f7ee:	e005      	b.n	801f7fc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f7f0:	683a      	ldr	r2, [r7, #0]
 801f7f2:	4905      	ldr	r1, [pc, #20]	@ (801f808 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801f7f4:	4b05      	ldr	r3, [pc, #20]	@ (801f80c <USBD_FS_ConfigStrDescriptor+0x40>)
 801f7f6:	0018      	movs	r0, r3
 801f7f8:	f7ff fd5e 	bl	801f2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f7fc:	4b02      	ldr	r3, [pc, #8]	@ (801f808 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801f7fe:	0018      	movs	r0, r3
 801f800:	46bd      	mov	sp, r7
 801f802:	b002      	add	sp, #8
 801f804:	bd80      	pop	{r7, pc}
 801f806:	46c0      	nop			@ (mov r8, r8)
 801f808:	20002d38 	.word	0x20002d38
 801f80c:	08028a88 	.word	0x08028a88

0801f810 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f810:	b580      	push	{r7, lr}
 801f812:	b082      	sub	sp, #8
 801f814:	af00      	add	r7, sp, #0
 801f816:	0002      	movs	r2, r0
 801f818:	6039      	str	r1, [r7, #0]
 801f81a:	1dfb      	adds	r3, r7, #7
 801f81c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801f81e:	1dfb      	adds	r3, r7, #7
 801f820:	781b      	ldrb	r3, [r3, #0]
 801f822:	2b00      	cmp	r3, #0
 801f824:	d106      	bne.n	801f834 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f826:	683a      	ldr	r2, [r7, #0]
 801f828:	4908      	ldr	r1, [pc, #32]	@ (801f84c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801f82a:	4b09      	ldr	r3, [pc, #36]	@ (801f850 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801f82c:	0018      	movs	r0, r3
 801f82e:	f7ff fd43 	bl	801f2b8 <USBD_GetString>
 801f832:	e005      	b.n	801f840 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f834:	683a      	ldr	r2, [r7, #0]
 801f836:	4905      	ldr	r1, [pc, #20]	@ (801f84c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801f838:	4b05      	ldr	r3, [pc, #20]	@ (801f850 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801f83a:	0018      	movs	r0, r3
 801f83c:	f7ff fd3c 	bl	801f2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f840:	4b02      	ldr	r3, [pc, #8]	@ (801f84c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801f842:	0018      	movs	r0, r3
 801f844:	46bd      	mov	sp, r7
 801f846:	b002      	add	sp, #8
 801f848:	bd80      	pop	{r7, pc}
 801f84a:	46c0      	nop			@ (mov r8, r8)
 801f84c:	20002d38 	.word	0x20002d38
 801f850:	08028a94 	.word	0x08028a94

0801f854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801f854:	b580      	push	{r7, lr}
 801f856:	b084      	sub	sp, #16
 801f858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f85a:	4b10      	ldr	r3, [pc, #64]	@ (801f89c <Get_SerialNum+0x48>)
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f860:	4b0f      	ldr	r3, [pc, #60]	@ (801f8a0 <Get_SerialNum+0x4c>)
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f866:	4b0f      	ldr	r3, [pc, #60]	@ (801f8a4 <Get_SerialNum+0x50>)
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801f86c:	68fa      	ldr	r2, [r7, #12]
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	18d3      	adds	r3, r2, r3
 801f872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	2b00      	cmp	r3, #0
 801f878:	d00b      	beq.n	801f892 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f87a:	490b      	ldr	r1, [pc, #44]	@ (801f8a8 <Get_SerialNum+0x54>)
 801f87c:	68fb      	ldr	r3, [r7, #12]
 801f87e:	2208      	movs	r2, #8
 801f880:	0018      	movs	r0, r3
 801f882:	f000 f815 	bl	801f8b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f886:	4909      	ldr	r1, [pc, #36]	@ (801f8ac <Get_SerialNum+0x58>)
 801f888:	68bb      	ldr	r3, [r7, #8]
 801f88a:	2204      	movs	r2, #4
 801f88c:	0018      	movs	r0, r3
 801f88e:	f000 f80f 	bl	801f8b0 <IntToUnicode>
  }
}
 801f892:	46c0      	nop			@ (mov r8, r8)
 801f894:	46bd      	mov	sp, r7
 801f896:	b004      	add	sp, #16
 801f898:	bd80      	pop	{r7, pc}
 801f89a:	46c0      	nop			@ (mov r8, r8)
 801f89c:	1ff80050 	.word	0x1ff80050
 801f8a0:	1ff80054 	.word	0x1ff80054
 801f8a4:	1ff80058 	.word	0x1ff80058
 801f8a8:	2000024e 	.word	0x2000024e
 801f8ac:	2000025e 	.word	0x2000025e

0801f8b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f8b0:	b580      	push	{r7, lr}
 801f8b2:	b086      	sub	sp, #24
 801f8b4:	af00      	add	r7, sp, #0
 801f8b6:	60f8      	str	r0, [r7, #12]
 801f8b8:	60b9      	str	r1, [r7, #8]
 801f8ba:	1dfb      	adds	r3, r7, #7
 801f8bc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801f8be:	2117      	movs	r1, #23
 801f8c0:	187b      	adds	r3, r7, r1
 801f8c2:	2200      	movs	r2, #0
 801f8c4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801f8c6:	187b      	adds	r3, r7, r1
 801f8c8:	2200      	movs	r2, #0
 801f8ca:	701a      	strb	r2, [r3, #0]
 801f8cc:	e02f      	b.n	801f92e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	0f1b      	lsrs	r3, r3, #28
 801f8d2:	2b09      	cmp	r3, #9
 801f8d4:	d80d      	bhi.n	801f8f2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801f8d6:	68fb      	ldr	r3, [r7, #12]
 801f8d8:	0f1b      	lsrs	r3, r3, #28
 801f8da:	b2da      	uxtb	r2, r3
 801f8dc:	2317      	movs	r3, #23
 801f8de:	18fb      	adds	r3, r7, r3
 801f8e0:	781b      	ldrb	r3, [r3, #0]
 801f8e2:	005b      	lsls	r3, r3, #1
 801f8e4:	0019      	movs	r1, r3
 801f8e6:	68bb      	ldr	r3, [r7, #8]
 801f8e8:	185b      	adds	r3, r3, r1
 801f8ea:	3230      	adds	r2, #48	@ 0x30
 801f8ec:	b2d2      	uxtb	r2, r2
 801f8ee:	701a      	strb	r2, [r3, #0]
 801f8f0:	e00c      	b.n	801f90c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f8f2:	68fb      	ldr	r3, [r7, #12]
 801f8f4:	0f1b      	lsrs	r3, r3, #28
 801f8f6:	b2da      	uxtb	r2, r3
 801f8f8:	2317      	movs	r3, #23
 801f8fa:	18fb      	adds	r3, r7, r3
 801f8fc:	781b      	ldrb	r3, [r3, #0]
 801f8fe:	005b      	lsls	r3, r3, #1
 801f900:	0019      	movs	r1, r3
 801f902:	68bb      	ldr	r3, [r7, #8]
 801f904:	185b      	adds	r3, r3, r1
 801f906:	3237      	adds	r2, #55	@ 0x37
 801f908:	b2d2      	uxtb	r2, r2
 801f90a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801f90c:	68fb      	ldr	r3, [r7, #12]
 801f90e:	011b      	lsls	r3, r3, #4
 801f910:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801f912:	2117      	movs	r1, #23
 801f914:	187b      	adds	r3, r7, r1
 801f916:	781b      	ldrb	r3, [r3, #0]
 801f918:	005b      	lsls	r3, r3, #1
 801f91a:	3301      	adds	r3, #1
 801f91c:	68ba      	ldr	r2, [r7, #8]
 801f91e:	18d3      	adds	r3, r2, r3
 801f920:	2200      	movs	r2, #0
 801f922:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801f924:	187b      	adds	r3, r7, r1
 801f926:	781a      	ldrb	r2, [r3, #0]
 801f928:	187b      	adds	r3, r7, r1
 801f92a:	3201      	adds	r2, #1
 801f92c:	701a      	strb	r2, [r3, #0]
 801f92e:	2317      	movs	r3, #23
 801f930:	18fa      	adds	r2, r7, r3
 801f932:	1dfb      	adds	r3, r7, #7
 801f934:	7812      	ldrb	r2, [r2, #0]
 801f936:	781b      	ldrb	r3, [r3, #0]
 801f938:	429a      	cmp	r2, r3
 801f93a:	d3c8      	bcc.n	801f8ce <IntToUnicode+0x1e>
  }
}
 801f93c:	46c0      	nop			@ (mov r8, r8)
 801f93e:	46c0      	nop			@ (mov r8, r8)
 801f940:	46bd      	mov	sp, r7
 801f942:	b006      	add	sp, #24
 801f944:	bd80      	pop	{r7, pc}
	...

0801f948 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801f948:	b580      	push	{r7, lr}
 801f94a:	b082      	sub	sp, #8
 801f94c:	af00      	add	r7, sp, #0
 801f94e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	681b      	ldr	r3, [r3, #0]
 801f954:	4a0a      	ldr	r2, [pc, #40]	@ (801f980 <HAL_PCD_MspInit+0x38>)
 801f956:	4293      	cmp	r3, r2
 801f958:	d10e      	bne.n	801f978 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801f95a:	4b0a      	ldr	r3, [pc, #40]	@ (801f984 <HAL_PCD_MspInit+0x3c>)
 801f95c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801f95e:	4b09      	ldr	r3, [pc, #36]	@ (801f984 <HAL_PCD_MspInit+0x3c>)
 801f960:	2180      	movs	r1, #128	@ 0x80
 801f962:	0409      	lsls	r1, r1, #16
 801f964:	430a      	orrs	r2, r1
 801f966:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801f968:	2200      	movs	r2, #0
 801f96a:	2100      	movs	r1, #0
 801f96c:	201f      	movs	r0, #31
 801f96e:	f7f2 f847 	bl	8011a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801f972:	201f      	movs	r0, #31
 801f974:	f7f2 f859 	bl	8011a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801f978:	46c0      	nop			@ (mov r8, r8)
 801f97a:	46bd      	mov	sp, r7
 801f97c:	b002      	add	sp, #8
 801f97e:	bd80      	pop	{r7, pc}
 801f980:	40005c00 	.word	0x40005c00
 801f984:	40021000 	.word	0x40021000

0801f988 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f988:	b580      	push	{r7, lr}
 801f98a:	b082      	sub	sp, #8
 801f98c:	af00      	add	r7, sp, #0
 801f98e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f990:	687a      	ldr	r2, [r7, #4]
 801f992:	23bc      	movs	r3, #188	@ 0xbc
 801f994:	009b      	lsls	r3, r3, #2
 801f996:	58d2      	ldr	r2, [r2, r3]
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	21ac      	movs	r1, #172	@ 0xac
 801f99c:	0089      	lsls	r1, r1, #2
 801f99e:	468c      	mov	ip, r1
 801f9a0:	4463      	add	r3, ip
 801f9a2:	0019      	movs	r1, r3
 801f9a4:	0010      	movs	r0, r2
 801f9a6:	f7fe fc1d 	bl	801e1e4 <USBD_LL_SetupStage>
}
 801f9aa:	46c0      	nop			@ (mov r8, r8)
 801f9ac:	46bd      	mov	sp, r7
 801f9ae:	b002      	add	sp, #8
 801f9b0:	bd80      	pop	{r7, pc}

0801f9b2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f9b2:	b590      	push	{r4, r7, lr}
 801f9b4:	b083      	sub	sp, #12
 801f9b6:	af00      	add	r7, sp, #0
 801f9b8:	6078      	str	r0, [r7, #4]
 801f9ba:	000a      	movs	r2, r1
 801f9bc:	1cfb      	adds	r3, r7, #3
 801f9be:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f9c0:	687a      	ldr	r2, [r7, #4]
 801f9c2:	23bc      	movs	r3, #188	@ 0xbc
 801f9c4:	009b      	lsls	r3, r3, #2
 801f9c6:	58d4      	ldr	r4, [r2, r3]
 801f9c8:	1cfb      	adds	r3, r7, #3
 801f9ca:	781a      	ldrb	r2, [r3, #0]
 801f9cc:	6878      	ldr	r0, [r7, #4]
 801f9ce:	23be      	movs	r3, #190	@ 0xbe
 801f9d0:	0059      	lsls	r1, r3, #1
 801f9d2:	0013      	movs	r3, r2
 801f9d4:	009b      	lsls	r3, r3, #2
 801f9d6:	189b      	adds	r3, r3, r2
 801f9d8:	00db      	lsls	r3, r3, #3
 801f9da:	18c3      	adds	r3, r0, r3
 801f9dc:	185b      	adds	r3, r3, r1
 801f9de:	681a      	ldr	r2, [r3, #0]
 801f9e0:	1cfb      	adds	r3, r7, #3
 801f9e2:	781b      	ldrb	r3, [r3, #0]
 801f9e4:	0019      	movs	r1, r3
 801f9e6:	0020      	movs	r0, r4
 801f9e8:	f7fe fc5a 	bl	801e2a0 <USBD_LL_DataOutStage>
}
 801f9ec:	46c0      	nop			@ (mov r8, r8)
 801f9ee:	46bd      	mov	sp, r7
 801f9f0:	b003      	add	sp, #12
 801f9f2:	bd90      	pop	{r4, r7, pc}

0801f9f4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f9f4:	b580      	push	{r7, lr}
 801f9f6:	b082      	sub	sp, #8
 801f9f8:	af00      	add	r7, sp, #0
 801f9fa:	6078      	str	r0, [r7, #4]
 801f9fc:	000a      	movs	r2, r1
 801f9fe:	1cfb      	adds	r3, r7, #3
 801fa00:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801fa02:	687a      	ldr	r2, [r7, #4]
 801fa04:	23bc      	movs	r3, #188	@ 0xbc
 801fa06:	009b      	lsls	r3, r3, #2
 801fa08:	58d0      	ldr	r0, [r2, r3]
 801fa0a:	1cfb      	adds	r3, r7, #3
 801fa0c:	781a      	ldrb	r2, [r3, #0]
 801fa0e:	6879      	ldr	r1, [r7, #4]
 801fa10:	0013      	movs	r3, r2
 801fa12:	009b      	lsls	r3, r3, #2
 801fa14:	189b      	adds	r3, r3, r2
 801fa16:	00db      	lsls	r3, r3, #3
 801fa18:	18cb      	adds	r3, r1, r3
 801fa1a:	333c      	adds	r3, #60	@ 0x3c
 801fa1c:	681a      	ldr	r2, [r3, #0]
 801fa1e:	1cfb      	adds	r3, r7, #3
 801fa20:	781b      	ldrb	r3, [r3, #0]
 801fa22:	0019      	movs	r1, r3
 801fa24:	f7fe fcbe 	bl	801e3a4 <USBD_LL_DataInStage>
}
 801fa28:	46c0      	nop			@ (mov r8, r8)
 801fa2a:	46bd      	mov	sp, r7
 801fa2c:	b002      	add	sp, #8
 801fa2e:	bd80      	pop	{r7, pc}

0801fa30 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fa30:	b580      	push	{r7, lr}
 801fa32:	b082      	sub	sp, #8
 801fa34:	af00      	add	r7, sp, #0
 801fa36:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801fa38:	687a      	ldr	r2, [r7, #4]
 801fa3a:	23bc      	movs	r3, #188	@ 0xbc
 801fa3c:	009b      	lsls	r3, r3, #2
 801fa3e:	58d3      	ldr	r3, [r2, r3]
 801fa40:	0018      	movs	r0, r3
 801fa42:	f7fe fdf5 	bl	801e630 <USBD_LL_SOF>
}
 801fa46:	46c0      	nop			@ (mov r8, r8)
 801fa48:	46bd      	mov	sp, r7
 801fa4a:	b002      	add	sp, #8
 801fa4c:	bd80      	pop	{r7, pc}

0801fa4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fa4e:	b580      	push	{r7, lr}
 801fa50:	b084      	sub	sp, #16
 801fa52:	af00      	add	r7, sp, #0
 801fa54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801fa56:	230f      	movs	r3, #15
 801fa58:	18fb      	adds	r3, r7, r3
 801fa5a:	2201      	movs	r2, #1
 801fa5c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	689b      	ldr	r3, [r3, #8]
 801fa62:	2b02      	cmp	r3, #2
 801fa64:	d001      	beq.n	801fa6a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801fa66:	f7ea fc75 	bl	800a354 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801fa6a:	687a      	ldr	r2, [r7, #4]
 801fa6c:	23bc      	movs	r3, #188	@ 0xbc
 801fa6e:	009b      	lsls	r3, r3, #2
 801fa70:	58d2      	ldr	r2, [r2, r3]
 801fa72:	230f      	movs	r3, #15
 801fa74:	18fb      	adds	r3, r7, r3
 801fa76:	781b      	ldrb	r3, [r3, #0]
 801fa78:	0019      	movs	r1, r3
 801fa7a:	0010      	movs	r0, r2
 801fa7c:	f7fe fd97 	bl	801e5ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801fa80:	687a      	ldr	r2, [r7, #4]
 801fa82:	23bc      	movs	r3, #188	@ 0xbc
 801fa84:	009b      	lsls	r3, r3, #2
 801fa86:	58d3      	ldr	r3, [r2, r3]
 801fa88:	0018      	movs	r0, r3
 801fa8a:	f7fe fd48 	bl	801e51e <USBD_LL_Reset>
}
 801fa8e:	46c0      	nop			@ (mov r8, r8)
 801fa90:	46bd      	mov	sp, r7
 801fa92:	b004      	add	sp, #16
 801fa94:	bd80      	pop	{r7, pc}
	...

0801fa98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fa98:	b580      	push	{r7, lr}
 801fa9a:	b082      	sub	sp, #8
 801fa9c:	af00      	add	r7, sp, #0
 801fa9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801faa0:	687a      	ldr	r2, [r7, #4]
 801faa2:	23bc      	movs	r3, #188	@ 0xbc
 801faa4:	009b      	lsls	r3, r3, #2
 801faa6:	58d3      	ldr	r3, [r2, r3]
 801faa8:	0018      	movs	r0, r3
 801faaa:	f7fe fd91 	bl	801e5d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	699b      	ldr	r3, [r3, #24]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d005      	beq.n	801fac2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801fab6:	4b05      	ldr	r3, [pc, #20]	@ (801facc <HAL_PCD_SuspendCallback+0x34>)
 801fab8:	691a      	ldr	r2, [r3, #16]
 801faba:	4b04      	ldr	r3, [pc, #16]	@ (801facc <HAL_PCD_SuspendCallback+0x34>)
 801fabc:	2106      	movs	r1, #6
 801fabe:	430a      	orrs	r2, r1
 801fac0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801fac2:	46c0      	nop			@ (mov r8, r8)
 801fac4:	46bd      	mov	sp, r7
 801fac6:	b002      	add	sp, #8
 801fac8:	bd80      	pop	{r7, pc}
 801faca:	46c0      	nop			@ (mov r8, r8)
 801facc:	e000ed00 	.word	0xe000ed00

0801fad0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fad0:	b580      	push	{r7, lr}
 801fad2:	b082      	sub	sp, #8
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	699b      	ldr	r3, [r3, #24]
 801fadc:	2b00      	cmp	r3, #0
 801fade:	d007      	beq.n	801faf0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801fae0:	4b09      	ldr	r3, [pc, #36]	@ (801fb08 <HAL_PCD_ResumeCallback+0x38>)
 801fae2:	691a      	ldr	r2, [r3, #16]
 801fae4:	4b08      	ldr	r3, [pc, #32]	@ (801fb08 <HAL_PCD_ResumeCallback+0x38>)
 801fae6:	2106      	movs	r1, #6
 801fae8:	438a      	bics	r2, r1
 801faea:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801faec:	f000 fa44 	bl	801ff78 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801faf0:	687a      	ldr	r2, [r7, #4]
 801faf2:	23bc      	movs	r3, #188	@ 0xbc
 801faf4:	009b      	lsls	r3, r3, #2
 801faf6:	58d3      	ldr	r3, [r2, r3]
 801faf8:	0018      	movs	r0, r3
 801fafa:	f7fe fd81 	bl	801e600 <USBD_LL_Resume>
}
 801fafe:	46c0      	nop			@ (mov r8, r8)
 801fb00:	46bd      	mov	sp, r7
 801fb02:	b002      	add	sp, #8
 801fb04:	bd80      	pop	{r7, pc}
 801fb06:	46c0      	nop			@ (mov r8, r8)
 801fb08:	e000ed00 	.word	0xe000ed00

0801fb0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801fb0c:	b580      	push	{r7, lr}
 801fb0e:	b082      	sub	sp, #8
 801fb10:	af00      	add	r7, sp, #0
 801fb12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801fb14:	4a2d      	ldr	r2, [pc, #180]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb16:	23bc      	movs	r3, #188	@ 0xbc
 801fb18:	009b      	lsls	r3, r3, #2
 801fb1a:	6879      	ldr	r1, [r7, #4]
 801fb1c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801fb1e:	687a      	ldr	r2, [r7, #4]
 801fb20:	23b0      	movs	r3, #176	@ 0xb0
 801fb22:	009b      	lsls	r3, r3, #2
 801fb24:	4929      	ldr	r1, [pc, #164]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb26:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801fb28:	4b28      	ldr	r3, [pc, #160]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb2a:	4a29      	ldr	r2, [pc, #164]	@ (801fbd0 <USBD_LL_Init+0xc4>)
 801fb2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801fb2e:	4b27      	ldr	r3, [pc, #156]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb30:	2208      	movs	r2, #8
 801fb32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801fb34:	4b25      	ldr	r3, [pc, #148]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb36:	2202      	movs	r2, #2
 801fb38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801fb3a:	4b24      	ldr	r3, [pc, #144]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb3c:	2202      	movs	r2, #2
 801fb3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801fb40:	4b22      	ldr	r3, [pc, #136]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb42:	2200      	movs	r2, #0
 801fb44:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801fb46:	4b21      	ldr	r3, [pc, #132]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb48:	2200      	movs	r2, #0
 801fb4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801fb4c:	4b1f      	ldr	r3, [pc, #124]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb4e:	2200      	movs	r2, #0
 801fb50:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801fb52:	4b1e      	ldr	r3, [pc, #120]	@ (801fbcc <USBD_LL_Init+0xc0>)
 801fb54:	0018      	movs	r0, r3
 801fb56:	f7f5 ff95 	bl	8015a84 <HAL_PCD_Init>
 801fb5a:	1e03      	subs	r3, r0, #0
 801fb5c:	d001      	beq.n	801fb62 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801fb5e:	f7ea fbf9 	bl	800a354 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801fb62:	687a      	ldr	r2, [r7, #4]
 801fb64:	23b0      	movs	r3, #176	@ 0xb0
 801fb66:	009b      	lsls	r3, r3, #2
 801fb68:	58d0      	ldr	r0, [r2, r3]
 801fb6a:	2318      	movs	r3, #24
 801fb6c:	2200      	movs	r2, #0
 801fb6e:	2100      	movs	r1, #0
 801fb70:	f7f7 fd56 	bl	8017620 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801fb74:	687a      	ldr	r2, [r7, #4]
 801fb76:	23b0      	movs	r3, #176	@ 0xb0
 801fb78:	009b      	lsls	r3, r3, #2
 801fb7a:	58d0      	ldr	r0, [r2, r3]
 801fb7c:	2358      	movs	r3, #88	@ 0x58
 801fb7e:	2200      	movs	r2, #0
 801fb80:	2180      	movs	r1, #128	@ 0x80
 801fb82:	f7f7 fd4d 	bl	8017620 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801fb86:	687a      	ldr	r2, [r7, #4]
 801fb88:	23b0      	movs	r3, #176	@ 0xb0
 801fb8a:	009b      	lsls	r3, r3, #2
 801fb8c:	58d0      	ldr	r0, [r2, r3]
 801fb8e:	23c0      	movs	r3, #192	@ 0xc0
 801fb90:	2200      	movs	r2, #0
 801fb92:	2181      	movs	r1, #129	@ 0x81
 801fb94:	f7f7 fd44 	bl	8017620 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801fb98:	687a      	ldr	r2, [r7, #4]
 801fb9a:	23b0      	movs	r3, #176	@ 0xb0
 801fb9c:	009b      	lsls	r3, r3, #2
 801fb9e:	58d0      	ldr	r0, [r2, r3]
 801fba0:	2388      	movs	r3, #136	@ 0x88
 801fba2:	005b      	lsls	r3, r3, #1
 801fba4:	2200      	movs	r2, #0
 801fba6:	2101      	movs	r1, #1
 801fba8:	f7f7 fd3a 	bl	8017620 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801fbac:	687a      	ldr	r2, [r7, #4]
 801fbae:	23b0      	movs	r3, #176	@ 0xb0
 801fbb0:	009b      	lsls	r3, r3, #2
 801fbb2:	58d0      	ldr	r0, [r2, r3]
 801fbb4:	2380      	movs	r3, #128	@ 0x80
 801fbb6:	005b      	lsls	r3, r3, #1
 801fbb8:	2200      	movs	r2, #0
 801fbba:	2182      	movs	r1, #130	@ 0x82
 801fbbc:	f7f7 fd30 	bl	8017620 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801fbc0:	2300      	movs	r3, #0
}
 801fbc2:	0018      	movs	r0, r3
 801fbc4:	46bd      	mov	sp, r7
 801fbc6:	b002      	add	sp, #8
 801fbc8:	bd80      	pop	{r7, pc}
 801fbca:	46c0      	nop			@ (mov r8, r8)
 801fbcc:	20002f38 	.word	0x20002f38
 801fbd0:	40005c00 	.word	0x40005c00

0801fbd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801fbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbd6:	b085      	sub	sp, #20
 801fbd8:	af00      	add	r7, sp, #0
 801fbda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fbdc:	210f      	movs	r1, #15
 801fbde:	187b      	adds	r3, r7, r1
 801fbe0:	2200      	movs	r2, #0
 801fbe2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fbe4:	260e      	movs	r6, #14
 801fbe6:	19bb      	adds	r3, r7, r6
 801fbe8:	2200      	movs	r2, #0
 801fbea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801fbec:	687a      	ldr	r2, [r7, #4]
 801fbee:	23b0      	movs	r3, #176	@ 0xb0
 801fbf0:	009b      	lsls	r3, r3, #2
 801fbf2:	58d3      	ldr	r3, [r2, r3]
 801fbf4:	000d      	movs	r5, r1
 801fbf6:	187c      	adds	r4, r7, r1
 801fbf8:	0018      	movs	r0, r3
 801fbfa:	f7f6 f843 	bl	8015c84 <HAL_PCD_Start>
 801fbfe:	0003      	movs	r3, r0
 801fc00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc02:	19bc      	adds	r4, r7, r6
 801fc04:	197b      	adds	r3, r7, r5
 801fc06:	781b      	ldrb	r3, [r3, #0]
 801fc08:	0018      	movs	r0, r3
 801fc0a:	f000 f9bc 	bl	801ff86 <USBD_Get_USB_Status>
 801fc0e:	0003      	movs	r3, r0
 801fc10:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fc12:	19bb      	adds	r3, r7, r6
 801fc14:	781b      	ldrb	r3, [r3, #0]
}
 801fc16:	0018      	movs	r0, r3
 801fc18:	46bd      	mov	sp, r7
 801fc1a:	b005      	add	sp, #20
 801fc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fc1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801fc1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc20:	b085      	sub	sp, #20
 801fc22:	af00      	add	r7, sp, #0
 801fc24:	6078      	str	r0, [r7, #4]
 801fc26:	000c      	movs	r4, r1
 801fc28:	0010      	movs	r0, r2
 801fc2a:	0019      	movs	r1, r3
 801fc2c:	1cfb      	adds	r3, r7, #3
 801fc2e:	1c22      	adds	r2, r4, #0
 801fc30:	701a      	strb	r2, [r3, #0]
 801fc32:	1cbb      	adds	r3, r7, #2
 801fc34:	1c02      	adds	r2, r0, #0
 801fc36:	701a      	strb	r2, [r3, #0]
 801fc38:	003b      	movs	r3, r7
 801fc3a:	1c0a      	adds	r2, r1, #0
 801fc3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fc3e:	260f      	movs	r6, #15
 801fc40:	19bb      	adds	r3, r7, r6
 801fc42:	2200      	movs	r2, #0
 801fc44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fc46:	250e      	movs	r5, #14
 801fc48:	197b      	adds	r3, r7, r5
 801fc4a:	2200      	movs	r2, #0
 801fc4c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801fc4e:	687a      	ldr	r2, [r7, #4]
 801fc50:	23b0      	movs	r3, #176	@ 0xb0
 801fc52:	009b      	lsls	r3, r3, #2
 801fc54:	58d0      	ldr	r0, [r2, r3]
 801fc56:	19bc      	adds	r4, r7, r6
 801fc58:	1cbb      	adds	r3, r7, #2
 801fc5a:	781d      	ldrb	r5, [r3, #0]
 801fc5c:	003b      	movs	r3, r7
 801fc5e:	881a      	ldrh	r2, [r3, #0]
 801fc60:	1cfb      	adds	r3, r7, #3
 801fc62:	7819      	ldrb	r1, [r3, #0]
 801fc64:	002b      	movs	r3, r5
 801fc66:	f7f6 f9a2 	bl	8015fae <HAL_PCD_EP_Open>
 801fc6a:	0003      	movs	r3, r0
 801fc6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc6e:	250e      	movs	r5, #14
 801fc70:	197c      	adds	r4, r7, r5
 801fc72:	19bb      	adds	r3, r7, r6
 801fc74:	781b      	ldrb	r3, [r3, #0]
 801fc76:	0018      	movs	r0, r3
 801fc78:	f000 f985 	bl	801ff86 <USBD_Get_USB_Status>
 801fc7c:	0003      	movs	r3, r0
 801fc7e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fc80:	197b      	adds	r3, r7, r5
 801fc82:	781b      	ldrb	r3, [r3, #0]
}
 801fc84:	0018      	movs	r0, r3
 801fc86:	46bd      	mov	sp, r7
 801fc88:	b005      	add	sp, #20
 801fc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fc8c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc8e:	b085      	sub	sp, #20
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	6078      	str	r0, [r7, #4]
 801fc94:	000a      	movs	r2, r1
 801fc96:	1cfb      	adds	r3, r7, #3
 801fc98:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fc9a:	210f      	movs	r1, #15
 801fc9c:	187b      	adds	r3, r7, r1
 801fc9e:	2200      	movs	r2, #0
 801fca0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fca2:	260e      	movs	r6, #14
 801fca4:	19bb      	adds	r3, r7, r6
 801fca6:	2200      	movs	r2, #0
 801fca8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801fcaa:	687a      	ldr	r2, [r7, #4]
 801fcac:	23b0      	movs	r3, #176	@ 0xb0
 801fcae:	009b      	lsls	r3, r3, #2
 801fcb0:	58d2      	ldr	r2, [r2, r3]
 801fcb2:	000d      	movs	r5, r1
 801fcb4:	187c      	adds	r4, r7, r1
 801fcb6:	1cfb      	adds	r3, r7, #3
 801fcb8:	781b      	ldrb	r3, [r3, #0]
 801fcba:	0019      	movs	r1, r3
 801fcbc:	0010      	movs	r0, r2
 801fcbe:	f7f6 f9e5 	bl	801608c <HAL_PCD_EP_Close>
 801fcc2:	0003      	movs	r3, r0
 801fcc4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fcc6:	19bc      	adds	r4, r7, r6
 801fcc8:	197b      	adds	r3, r7, r5
 801fcca:	781b      	ldrb	r3, [r3, #0]
 801fccc:	0018      	movs	r0, r3
 801fcce:	f000 f95a 	bl	801ff86 <USBD_Get_USB_Status>
 801fcd2:	0003      	movs	r3, r0
 801fcd4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fcd6:	19bb      	adds	r3, r7, r6
 801fcd8:	781b      	ldrb	r3, [r3, #0]
}
 801fcda:	0018      	movs	r0, r3
 801fcdc:	46bd      	mov	sp, r7
 801fcde:	b005      	add	sp, #20
 801fce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fce2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fce4:	b085      	sub	sp, #20
 801fce6:	af00      	add	r7, sp, #0
 801fce8:	6078      	str	r0, [r7, #4]
 801fcea:	000a      	movs	r2, r1
 801fcec:	1cfb      	adds	r3, r7, #3
 801fcee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fcf0:	210f      	movs	r1, #15
 801fcf2:	187b      	adds	r3, r7, r1
 801fcf4:	2200      	movs	r2, #0
 801fcf6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fcf8:	260e      	movs	r6, #14
 801fcfa:	19bb      	adds	r3, r7, r6
 801fcfc:	2200      	movs	r2, #0
 801fcfe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801fd00:	687a      	ldr	r2, [r7, #4]
 801fd02:	23b0      	movs	r3, #176	@ 0xb0
 801fd04:	009b      	lsls	r3, r3, #2
 801fd06:	58d2      	ldr	r2, [r2, r3]
 801fd08:	000d      	movs	r5, r1
 801fd0a:	187c      	adds	r4, r7, r1
 801fd0c:	1cfb      	adds	r3, r7, #3
 801fd0e:	781b      	ldrb	r3, [r3, #0]
 801fd10:	0019      	movs	r1, r3
 801fd12:	0010      	movs	r0, r2
 801fd14:	f7f6 fa97 	bl	8016246 <HAL_PCD_EP_SetStall>
 801fd18:	0003      	movs	r3, r0
 801fd1a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fd1c:	19bc      	adds	r4, r7, r6
 801fd1e:	197b      	adds	r3, r7, r5
 801fd20:	781b      	ldrb	r3, [r3, #0]
 801fd22:	0018      	movs	r0, r3
 801fd24:	f000 f92f 	bl	801ff86 <USBD_Get_USB_Status>
 801fd28:	0003      	movs	r3, r0
 801fd2a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fd2c:	19bb      	adds	r3, r7, r6
 801fd2e:	781b      	ldrb	r3, [r3, #0]
}
 801fd30:	0018      	movs	r0, r3
 801fd32:	46bd      	mov	sp, r7
 801fd34:	b005      	add	sp, #20
 801fd36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fd38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd3a:	b085      	sub	sp, #20
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	6078      	str	r0, [r7, #4]
 801fd40:	000a      	movs	r2, r1
 801fd42:	1cfb      	adds	r3, r7, #3
 801fd44:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fd46:	210f      	movs	r1, #15
 801fd48:	187b      	adds	r3, r7, r1
 801fd4a:	2200      	movs	r2, #0
 801fd4c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fd4e:	260e      	movs	r6, #14
 801fd50:	19bb      	adds	r3, r7, r6
 801fd52:	2200      	movs	r2, #0
 801fd54:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801fd56:	687a      	ldr	r2, [r7, #4]
 801fd58:	23b0      	movs	r3, #176	@ 0xb0
 801fd5a:	009b      	lsls	r3, r3, #2
 801fd5c:	58d2      	ldr	r2, [r2, r3]
 801fd5e:	000d      	movs	r5, r1
 801fd60:	187c      	adds	r4, r7, r1
 801fd62:	1cfb      	adds	r3, r7, #3
 801fd64:	781b      	ldrb	r3, [r3, #0]
 801fd66:	0019      	movs	r1, r3
 801fd68:	0010      	movs	r0, r2
 801fd6a:	f7f6 fac8 	bl	80162fe <HAL_PCD_EP_ClrStall>
 801fd6e:	0003      	movs	r3, r0
 801fd70:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fd72:	19bc      	adds	r4, r7, r6
 801fd74:	197b      	adds	r3, r7, r5
 801fd76:	781b      	ldrb	r3, [r3, #0]
 801fd78:	0018      	movs	r0, r3
 801fd7a:	f000 f904 	bl	801ff86 <USBD_Get_USB_Status>
 801fd7e:	0003      	movs	r3, r0
 801fd80:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fd82:	19bb      	adds	r3, r7, r6
 801fd84:	781b      	ldrb	r3, [r3, #0]
}
 801fd86:	0018      	movs	r0, r3
 801fd88:	46bd      	mov	sp, r7
 801fd8a:	b005      	add	sp, #20
 801fd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fd8e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fd8e:	b580      	push	{r7, lr}
 801fd90:	b084      	sub	sp, #16
 801fd92:	af00      	add	r7, sp, #0
 801fd94:	6078      	str	r0, [r7, #4]
 801fd96:	000a      	movs	r2, r1
 801fd98:	1cfb      	adds	r3, r7, #3
 801fd9a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801fd9c:	687a      	ldr	r2, [r7, #4]
 801fd9e:	23b0      	movs	r3, #176	@ 0xb0
 801fda0:	009b      	lsls	r3, r3, #2
 801fda2:	58d3      	ldr	r3, [r2, r3]
 801fda4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801fda6:	1cfb      	adds	r3, r7, #3
 801fda8:	781b      	ldrb	r3, [r3, #0]
 801fdaa:	b25b      	sxtb	r3, r3
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	da0d      	bge.n	801fdcc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801fdb0:	1cfb      	adds	r3, r7, #3
 801fdb2:	781b      	ldrb	r3, [r3, #0]
 801fdb4:	227f      	movs	r2, #127	@ 0x7f
 801fdb6:	4013      	ands	r3, r2
 801fdb8:	68f9      	ldr	r1, [r7, #12]
 801fdba:	1c5a      	adds	r2, r3, #1
 801fdbc:	0013      	movs	r3, r2
 801fdbe:	009b      	lsls	r3, r3, #2
 801fdc0:	189b      	adds	r3, r3, r2
 801fdc2:	00db      	lsls	r3, r3, #3
 801fdc4:	18cb      	adds	r3, r1, r3
 801fdc6:	3302      	adds	r3, #2
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	e00d      	b.n	801fde8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801fdcc:	1cfb      	adds	r3, r7, #3
 801fdce:	781b      	ldrb	r3, [r3, #0]
 801fdd0:	227f      	movs	r2, #127	@ 0x7f
 801fdd2:	401a      	ands	r2, r3
 801fdd4:	68f8      	ldr	r0, [r7, #12]
 801fdd6:	23b5      	movs	r3, #181	@ 0xb5
 801fdd8:	0059      	lsls	r1, r3, #1
 801fdda:	0013      	movs	r3, r2
 801fddc:	009b      	lsls	r3, r3, #2
 801fdde:	189b      	adds	r3, r3, r2
 801fde0:	00db      	lsls	r3, r3, #3
 801fde2:	18c3      	adds	r3, r0, r3
 801fde4:	185b      	adds	r3, r3, r1
 801fde6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fde8:	0018      	movs	r0, r3
 801fdea:	46bd      	mov	sp, r7
 801fdec:	b004      	add	sp, #16
 801fdee:	bd80      	pop	{r7, pc}

0801fdf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801fdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdf2:	b085      	sub	sp, #20
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
 801fdf8:	000a      	movs	r2, r1
 801fdfa:	1cfb      	adds	r3, r7, #3
 801fdfc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fdfe:	210f      	movs	r1, #15
 801fe00:	187b      	adds	r3, r7, r1
 801fe02:	2200      	movs	r2, #0
 801fe04:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fe06:	260e      	movs	r6, #14
 801fe08:	19bb      	adds	r3, r7, r6
 801fe0a:	2200      	movs	r2, #0
 801fe0c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801fe0e:	687a      	ldr	r2, [r7, #4]
 801fe10:	23b0      	movs	r3, #176	@ 0xb0
 801fe12:	009b      	lsls	r3, r3, #2
 801fe14:	58d2      	ldr	r2, [r2, r3]
 801fe16:	000d      	movs	r5, r1
 801fe18:	187c      	adds	r4, r7, r1
 801fe1a:	1cfb      	adds	r3, r7, #3
 801fe1c:	781b      	ldrb	r3, [r3, #0]
 801fe1e:	0019      	movs	r1, r3
 801fe20:	0010      	movs	r0, r2
 801fe22:	f7f6 f899 	bl	8015f58 <HAL_PCD_SetAddress>
 801fe26:	0003      	movs	r3, r0
 801fe28:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fe2a:	19bc      	adds	r4, r7, r6
 801fe2c:	197b      	adds	r3, r7, r5
 801fe2e:	781b      	ldrb	r3, [r3, #0]
 801fe30:	0018      	movs	r0, r3
 801fe32:	f000 f8a8 	bl	801ff86 <USBD_Get_USB_Status>
 801fe36:	0003      	movs	r3, r0
 801fe38:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fe3a:	19bb      	adds	r3, r7, r6
 801fe3c:	781b      	ldrb	r3, [r3, #0]
}
 801fe3e:	0018      	movs	r0, r3
 801fe40:	46bd      	mov	sp, r7
 801fe42:	b005      	add	sp, #20
 801fe44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fe46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801fe46:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe48:	b087      	sub	sp, #28
 801fe4a:	af00      	add	r7, sp, #0
 801fe4c:	60f8      	str	r0, [r7, #12]
 801fe4e:	0008      	movs	r0, r1
 801fe50:	607a      	str	r2, [r7, #4]
 801fe52:	0019      	movs	r1, r3
 801fe54:	230b      	movs	r3, #11
 801fe56:	18fb      	adds	r3, r7, r3
 801fe58:	1c02      	adds	r2, r0, #0
 801fe5a:	701a      	strb	r2, [r3, #0]
 801fe5c:	2408      	movs	r4, #8
 801fe5e:	193b      	adds	r3, r7, r4
 801fe60:	1c0a      	adds	r2, r1, #0
 801fe62:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fe64:	2117      	movs	r1, #23
 801fe66:	187b      	adds	r3, r7, r1
 801fe68:	2200      	movs	r2, #0
 801fe6a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fe6c:	2516      	movs	r5, #22
 801fe6e:	197b      	adds	r3, r7, r5
 801fe70:	2200      	movs	r2, #0
 801fe72:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801fe74:	68fa      	ldr	r2, [r7, #12]
 801fe76:	23b0      	movs	r3, #176	@ 0xb0
 801fe78:	009b      	lsls	r3, r3, #2
 801fe7a:	58d0      	ldr	r0, [r2, r3]
 801fe7c:	193b      	adds	r3, r7, r4
 801fe7e:	881d      	ldrh	r5, [r3, #0]
 801fe80:	000e      	movs	r6, r1
 801fe82:	187c      	adds	r4, r7, r1
 801fe84:	687a      	ldr	r2, [r7, #4]
 801fe86:	230b      	movs	r3, #11
 801fe88:	18fb      	adds	r3, r7, r3
 801fe8a:	7819      	ldrb	r1, [r3, #0]
 801fe8c:	002b      	movs	r3, r5
 801fe8e:	f7f6 f99e 	bl	80161ce <HAL_PCD_EP_Transmit>
 801fe92:	0003      	movs	r3, r0
 801fe94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fe96:	2516      	movs	r5, #22
 801fe98:	197c      	adds	r4, r7, r5
 801fe9a:	19bb      	adds	r3, r7, r6
 801fe9c:	781b      	ldrb	r3, [r3, #0]
 801fe9e:	0018      	movs	r0, r3
 801fea0:	f000 f871 	bl	801ff86 <USBD_Get_USB_Status>
 801fea4:	0003      	movs	r3, r0
 801fea6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fea8:	197b      	adds	r3, r7, r5
 801feaa:	781b      	ldrb	r3, [r3, #0]
}
 801feac:	0018      	movs	r0, r3
 801feae:	46bd      	mov	sp, r7
 801feb0:	b007      	add	sp, #28
 801feb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801feb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801feb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801feb6:	b087      	sub	sp, #28
 801feb8:	af00      	add	r7, sp, #0
 801feba:	60f8      	str	r0, [r7, #12]
 801febc:	0008      	movs	r0, r1
 801febe:	607a      	str	r2, [r7, #4]
 801fec0:	0019      	movs	r1, r3
 801fec2:	230b      	movs	r3, #11
 801fec4:	18fb      	adds	r3, r7, r3
 801fec6:	1c02      	adds	r2, r0, #0
 801fec8:	701a      	strb	r2, [r3, #0]
 801feca:	2408      	movs	r4, #8
 801fecc:	193b      	adds	r3, r7, r4
 801fece:	1c0a      	adds	r2, r1, #0
 801fed0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fed2:	2117      	movs	r1, #23
 801fed4:	187b      	adds	r3, r7, r1
 801fed6:	2200      	movs	r2, #0
 801fed8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801feda:	2516      	movs	r5, #22
 801fedc:	197b      	adds	r3, r7, r5
 801fede:	2200      	movs	r2, #0
 801fee0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801fee2:	68fa      	ldr	r2, [r7, #12]
 801fee4:	23b0      	movs	r3, #176	@ 0xb0
 801fee6:	009b      	lsls	r3, r3, #2
 801fee8:	58d0      	ldr	r0, [r2, r3]
 801feea:	193b      	adds	r3, r7, r4
 801feec:	881d      	ldrh	r5, [r3, #0]
 801feee:	000e      	movs	r6, r1
 801fef0:	187c      	adds	r4, r7, r1
 801fef2:	687a      	ldr	r2, [r7, #4]
 801fef4:	230b      	movs	r3, #11
 801fef6:	18fb      	adds	r3, r7, r3
 801fef8:	7819      	ldrb	r1, [r3, #0]
 801fefa:	002b      	movs	r3, r5
 801fefc:	f7f6 f917 	bl	801612e <HAL_PCD_EP_Receive>
 801ff00:	0003      	movs	r3, r0
 801ff02:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ff04:	2516      	movs	r5, #22
 801ff06:	197c      	adds	r4, r7, r5
 801ff08:	19bb      	adds	r3, r7, r6
 801ff0a:	781b      	ldrb	r3, [r3, #0]
 801ff0c:	0018      	movs	r0, r3
 801ff0e:	f000 f83a 	bl	801ff86 <USBD_Get_USB_Status>
 801ff12:	0003      	movs	r3, r0
 801ff14:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ff16:	197b      	adds	r3, r7, r5
 801ff18:	781b      	ldrb	r3, [r3, #0]
}
 801ff1a:	0018      	movs	r0, r3
 801ff1c:	46bd      	mov	sp, r7
 801ff1e:	b007      	add	sp, #28
 801ff20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ff22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ff22:	b580      	push	{r7, lr}
 801ff24:	b082      	sub	sp, #8
 801ff26:	af00      	add	r7, sp, #0
 801ff28:	6078      	str	r0, [r7, #4]
 801ff2a:	000a      	movs	r2, r1
 801ff2c:	1cfb      	adds	r3, r7, #3
 801ff2e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ff30:	687a      	ldr	r2, [r7, #4]
 801ff32:	23b0      	movs	r3, #176	@ 0xb0
 801ff34:	009b      	lsls	r3, r3, #2
 801ff36:	58d2      	ldr	r2, [r2, r3]
 801ff38:	1cfb      	adds	r3, r7, #3
 801ff3a:	781b      	ldrb	r3, [r3, #0]
 801ff3c:	0019      	movs	r1, r3
 801ff3e:	0010      	movs	r0, r2
 801ff40:	f7f6 f92c 	bl	801619c <HAL_PCD_EP_GetRxCount>
 801ff44:	0003      	movs	r3, r0
}
 801ff46:	0018      	movs	r0, r3
 801ff48:	46bd      	mov	sp, r7
 801ff4a:	b002      	add	sp, #8
 801ff4c:	bd80      	pop	{r7, pc}
	...

0801ff50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ff50:	b580      	push	{r7, lr}
 801ff52:	b082      	sub	sp, #8
 801ff54:	af00      	add	r7, sp, #0
 801ff56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ff58:	4b02      	ldr	r3, [pc, #8]	@ (801ff64 <USBD_static_malloc+0x14>)
}
 801ff5a:	0018      	movs	r0, r3
 801ff5c:	46bd      	mov	sp, r7
 801ff5e:	b002      	add	sp, #8
 801ff60:	bd80      	pop	{r7, pc}
 801ff62:	46c0      	nop			@ (mov r8, r8)
 801ff64:	2000322c 	.word	0x2000322c

0801ff68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ff68:	b580      	push	{r7, lr}
 801ff6a:	b082      	sub	sp, #8
 801ff6c:	af00      	add	r7, sp, #0
 801ff6e:	6078      	str	r0, [r7, #4]

}
 801ff70:	46c0      	nop			@ (mov r8, r8)
 801ff72:	46bd      	mov	sp, r7
 801ff74:	b002      	add	sp, #8
 801ff76:	bd80      	pop	{r7, pc}

0801ff78 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801ff78:	b580      	push	{r7, lr}
 801ff7a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801ff7c:	f7ea f89a 	bl	800a0b4 <SystemClock_Config>
}
 801ff80:	46c0      	nop			@ (mov r8, r8)
 801ff82:	46bd      	mov	sp, r7
 801ff84:	bd80      	pop	{r7, pc}

0801ff86 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ff86:	b580      	push	{r7, lr}
 801ff88:	b084      	sub	sp, #16
 801ff8a:	af00      	add	r7, sp, #0
 801ff8c:	0002      	movs	r2, r0
 801ff8e:	1dfb      	adds	r3, r7, #7
 801ff90:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ff92:	230f      	movs	r3, #15
 801ff94:	18fb      	adds	r3, r7, r3
 801ff96:	2200      	movs	r2, #0
 801ff98:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801ff9a:	1dfb      	adds	r3, r7, #7
 801ff9c:	781b      	ldrb	r3, [r3, #0]
 801ff9e:	2b03      	cmp	r3, #3
 801ffa0:	d017      	beq.n	801ffd2 <USBD_Get_USB_Status+0x4c>
 801ffa2:	dc1b      	bgt.n	801ffdc <USBD_Get_USB_Status+0x56>
 801ffa4:	2b02      	cmp	r3, #2
 801ffa6:	d00f      	beq.n	801ffc8 <USBD_Get_USB_Status+0x42>
 801ffa8:	dc18      	bgt.n	801ffdc <USBD_Get_USB_Status+0x56>
 801ffaa:	2b00      	cmp	r3, #0
 801ffac:	d002      	beq.n	801ffb4 <USBD_Get_USB_Status+0x2e>
 801ffae:	2b01      	cmp	r3, #1
 801ffb0:	d005      	beq.n	801ffbe <USBD_Get_USB_Status+0x38>
 801ffb2:	e013      	b.n	801ffdc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ffb4:	230f      	movs	r3, #15
 801ffb6:	18fb      	adds	r3, r7, r3
 801ffb8:	2200      	movs	r2, #0
 801ffba:	701a      	strb	r2, [r3, #0]
    break;
 801ffbc:	e013      	b.n	801ffe6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ffbe:	230f      	movs	r3, #15
 801ffc0:	18fb      	adds	r3, r7, r3
 801ffc2:	2202      	movs	r2, #2
 801ffc4:	701a      	strb	r2, [r3, #0]
    break;
 801ffc6:	e00e      	b.n	801ffe6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ffc8:	230f      	movs	r3, #15
 801ffca:	18fb      	adds	r3, r7, r3
 801ffcc:	2201      	movs	r2, #1
 801ffce:	701a      	strb	r2, [r3, #0]
    break;
 801ffd0:	e009      	b.n	801ffe6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ffd2:	230f      	movs	r3, #15
 801ffd4:	18fb      	adds	r3, r7, r3
 801ffd6:	2202      	movs	r2, #2
 801ffd8:	701a      	strb	r2, [r3, #0]
    break;
 801ffda:	e004      	b.n	801ffe6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801ffdc:	230f      	movs	r3, #15
 801ffde:	18fb      	adds	r3, r7, r3
 801ffe0:	2202      	movs	r2, #2
 801ffe2:	701a      	strb	r2, [r3, #0]
    break;
 801ffe4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801ffe6:	230f      	movs	r3, #15
 801ffe8:	18fb      	adds	r3, r7, r3
 801ffea:	781b      	ldrb	r3, [r3, #0]
}
 801ffec:	0018      	movs	r0, r3
 801ffee:	46bd      	mov	sp, r7
 801fff0:	b004      	add	sp, #16
 801fff2:	bd80      	pop	{r7, pc}

0801fff4 <arm_cfft_radix4by2_q31>:
 801fff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fff6:	465f      	mov	r7, fp
 801fff8:	4656      	mov	r6, sl
 801fffa:	464d      	mov	r5, r9
 801fffc:	4644      	mov	r4, r8
 801fffe:	000b      	movs	r3, r1
 8020000:	b4f0      	push	{r4, r5, r6, r7}
 8020002:	085b      	lsrs	r3, r3, #1
 8020004:	b08f      	sub	sp, #60	@ 0x3c
 8020006:	910a      	str	r1, [sp, #40]	@ 0x28
 8020008:	0007      	movs	r7, r0
 802000a:	9009      	str	r0, [sp, #36]	@ 0x24
 802000c:	0011      	movs	r1, r2
 802000e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020010:	930c      	str	r3, [sp, #48]	@ 0x30
 8020012:	2b00      	cmp	r3, #0
 8020014:	d100      	bne.n	8020018 <arm_cfft_radix4by2_q31+0x24>
 8020016:	e0a0      	b.n	802015a <arm_cfft_radix4by2_q31+0x166>
 8020018:	0002      	movs	r2, r0
 802001a:	00db      	lsls	r3, r3, #3
 802001c:	3204      	adds	r2, #4
 802001e:	4691      	mov	r9, r2
 8020020:	4698      	mov	r8, r3
 8020022:	000a      	movs	r2, r1
 8020024:	464e      	mov	r6, r9
 8020026:	4442      	add	r2, r8
 8020028:	4699      	mov	r9, r3
 802002a:	4688      	mov	r8, r1
 802002c:	9208      	str	r2, [sp, #32]
 802002e:	900d      	str	r0, [sp, #52]	@ 0x34
 8020030:	4643      	mov	r3, r8
 8020032:	681b      	ldr	r3, [r3, #0]
 8020034:	469b      	mov	fp, r3
 8020036:	4643      	mov	r3, r8
 8020038:	685b      	ldr	r3, [r3, #4]
 802003a:	469a      	mov	sl, r3
 802003c:	683b      	ldr	r3, [r7, #0]
 802003e:	109c      	asrs	r4, r3, #2
 8020040:	464b      	mov	r3, r9
 8020042:	58fb      	ldr	r3, [r7, r3]
 8020044:	109a      	asrs	r2, r3, #2
 8020046:	18a3      	adds	r3, r4, r2
 8020048:	603b      	str	r3, [r7, #0]
 802004a:	6833      	ldr	r3, [r6, #0]
 802004c:	1aa4      	subs	r4, r4, r2
 802004e:	109d      	asrs	r5, r3, #2
 8020050:	464b      	mov	r3, r9
 8020052:	58f3      	ldr	r3, [r6, r3]
 8020054:	17e2      	asrs	r2, r4, #31
 8020056:	109b      	asrs	r3, r3, #2
 8020058:	18e9      	adds	r1, r5, r3
 802005a:	6031      	str	r1, [r6, #0]
 802005c:	0011      	movs	r1, r2
 802005e:	465a      	mov	r2, fp
 8020060:	17d2      	asrs	r2, r2, #31
 8020062:	0010      	movs	r0, r2
 8020064:	4652      	mov	r2, sl
 8020066:	1aed      	subs	r5, r5, r3
 8020068:	17eb      	asrs	r3, r5, #31
 802006a:	17d2      	asrs	r2, r2, #31
 802006c:	9307      	str	r3, [sp, #28]
 802006e:	9204      	str	r2, [sp, #16]
 8020070:	0003      	movs	r3, r0
 8020072:	465a      	mov	r2, fp
 8020074:	9006      	str	r0, [sp, #24]
 8020076:	0020      	movs	r0, r4
 8020078:	9105      	str	r1, [sp, #20]
 802007a:	f7e0 faa1 	bl	80005c0 <__aeabi_lmul>
 802007e:	2280      	movs	r2, #128	@ 0x80
 8020080:	2300      	movs	r3, #0
 8020082:	0612      	lsls	r2, r2, #24
 8020084:	1880      	adds	r0, r0, r2
 8020086:	4159      	adcs	r1, r3
 8020088:	2300      	movs	r3, #0
 802008a:	9101      	str	r1, [sp, #4]
 802008c:	9300      	str	r3, [sp, #0]
 802008e:	4652      	mov	r2, sl
 8020090:	9b04      	ldr	r3, [sp, #16]
 8020092:	0028      	movs	r0, r5
 8020094:	17e9      	asrs	r1, r5, #31
 8020096:	f7e0 fa93 	bl	80005c0 <__aeabi_lmul>
 802009a:	9a00      	ldr	r2, [sp, #0]
 802009c:	9b01      	ldr	r3, [sp, #4]
 802009e:	1880      	adds	r0, r0, r2
 80200a0:	4159      	adcs	r1, r3
 80200a2:	2280      	movs	r2, #128	@ 0x80
 80200a4:	2300      	movs	r3, #0
 80200a6:	0612      	lsls	r2, r2, #24
 80200a8:	1880      	adds	r0, r0, r2
 80200aa:	4159      	adcs	r1, r3
 80200ac:	464a      	mov	r2, r9
 80200ae:	004b      	lsls	r3, r1, #1
 80200b0:	50bb      	str	r3, [r7, r2]
 80200b2:	4658      	mov	r0, fp
 80200b4:	002a      	movs	r2, r5
 80200b6:	9b07      	ldr	r3, [sp, #28]
 80200b8:	9906      	ldr	r1, [sp, #24]
 80200ba:	f7e0 fa81 	bl	80005c0 <__aeabi_lmul>
 80200be:	2280      	movs	r2, #128	@ 0x80
 80200c0:	2300      	movs	r3, #0
 80200c2:	0612      	lsls	r2, r2, #24
 80200c4:	1880      	adds	r0, r0, r2
 80200c6:	4159      	adcs	r1, r3
 80200c8:	2000      	movs	r0, #0
 80200ca:	9103      	str	r1, [sp, #12]
 80200cc:	9002      	str	r0, [sp, #8]
 80200ce:	4652      	mov	r2, sl
 80200d0:	9b04      	ldr	r3, [sp, #16]
 80200d2:	0020      	movs	r0, r4
 80200d4:	9905      	ldr	r1, [sp, #20]
 80200d6:	f7e0 fa73 	bl	80005c0 <__aeabi_lmul>
 80200da:	9a02      	ldr	r2, [sp, #8]
 80200dc:	9b03      	ldr	r3, [sp, #12]
 80200de:	1a12      	subs	r2, r2, r0
 80200e0:	418b      	sbcs	r3, r1
 80200e2:	2080      	movs	r0, #128	@ 0x80
 80200e4:	2100      	movs	r1, #0
 80200e6:	0600      	lsls	r0, r0, #24
 80200e8:	1812      	adds	r2, r2, r0
 80200ea:	414b      	adcs	r3, r1
 80200ec:	464a      	mov	r2, r9
 80200ee:	005b      	lsls	r3, r3, #1
 80200f0:	50b3      	str	r3, [r6, r2]
 80200f2:	2308      	movs	r3, #8
 80200f4:	469c      	mov	ip, r3
 80200f6:	9b08      	ldr	r3, [sp, #32]
 80200f8:	44e0      	add	r8, ip
 80200fa:	3708      	adds	r7, #8
 80200fc:	3608      	adds	r6, #8
 80200fe:	4598      	cmp	r8, r3
 8020100:	d196      	bne.n	8020030 <arm_cfft_radix4by2_q31+0x3c>
 8020102:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020104:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020106:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020108:	2302      	movs	r3, #2
 802010a:	003a      	movs	r2, r7
 802010c:	0029      	movs	r1, r5
 802010e:	0020      	movs	r0, r4
 8020110:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8020112:	f000 f957 	bl	80203c4 <arm_radix4_butterfly_q31>
 8020116:	46a4      	mov	ip, r4
 8020118:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802011a:	2302      	movs	r3, #2
 802011c:	0088      	lsls	r0, r1, #2
 802011e:	4460      	add	r0, ip
 8020120:	003a      	movs	r2, r7
 8020122:	0029      	movs	r1, r5
 8020124:	f000 f94e 	bl	80203c4 <arm_radix4_butterfly_q31>
 8020128:	46a4      	mov	ip, r4
 802012a:	0128      	lsls	r0, r5, #4
 802012c:	4460      	add	r0, ip
 802012e:	6833      	ldr	r3, [r6, #0]
 8020130:	005b      	lsls	r3, r3, #1
 8020132:	6033      	str	r3, [r6, #0]
 8020134:	6873      	ldr	r3, [r6, #4]
 8020136:	005b      	lsls	r3, r3, #1
 8020138:	6073      	str	r3, [r6, #4]
 802013a:	68b3      	ldr	r3, [r6, #8]
 802013c:	005b      	lsls	r3, r3, #1
 802013e:	60b3      	str	r3, [r6, #8]
 8020140:	68f3      	ldr	r3, [r6, #12]
 8020142:	005b      	lsls	r3, r3, #1
 8020144:	60f3      	str	r3, [r6, #12]
 8020146:	3610      	adds	r6, #16
 8020148:	42b0      	cmp	r0, r6
 802014a:	d1f0      	bne.n	802012e <arm_cfft_radix4by2_q31+0x13a>
 802014c:	b00f      	add	sp, #60	@ 0x3c
 802014e:	bc3c      	pop	{r2, r3, r4, r5}
 8020150:	4690      	mov	r8, r2
 8020152:	4699      	mov	r9, r3
 8020154:	46a2      	mov	sl, r4
 8020156:	46ab      	mov	fp, r5
 8020158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802015a:	2302      	movs	r3, #2
 802015c:	2100      	movs	r1, #0
 802015e:	0015      	movs	r5, r2
 8020160:	f000 f930 	bl	80203c4 <arm_radix4_butterfly_q31>
 8020164:	46bc      	mov	ip, r7
 8020166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020168:	002a      	movs	r2, r5
 802016a:	0098      	lsls	r0, r3, #2
 802016c:	4460      	add	r0, ip
 802016e:	2302      	movs	r3, #2
 8020170:	2100      	movs	r1, #0
 8020172:	f000 f927 	bl	80203c4 <arm_radix4_butterfly_q31>
 8020176:	e7e9      	b.n	802014c <arm_cfft_radix4by2_q31+0x158>

08020178 <arm_cfft_radix4by2_inverse_q31>:
 8020178:	b5f0      	push	{r4, r5, r6, r7, lr}
 802017a:	465f      	mov	r7, fp
 802017c:	4656      	mov	r6, sl
 802017e:	464d      	mov	r5, r9
 8020180:	4644      	mov	r4, r8
 8020182:	000b      	movs	r3, r1
 8020184:	b4f0      	push	{r4, r5, r6, r7}
 8020186:	085b      	lsrs	r3, r3, #1
 8020188:	b08f      	sub	sp, #60	@ 0x3c
 802018a:	910a      	str	r1, [sp, #40]	@ 0x28
 802018c:	0007      	movs	r7, r0
 802018e:	9009      	str	r0, [sp, #36]	@ 0x24
 8020190:	0011      	movs	r1, r2
 8020192:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020194:	930c      	str	r3, [sp, #48]	@ 0x30
 8020196:	2b00      	cmp	r3, #0
 8020198:	d100      	bne.n	802019c <arm_cfft_radix4by2_inverse_q31+0x24>
 802019a:	e0a0      	b.n	80202de <arm_cfft_radix4by2_inverse_q31+0x166>
 802019c:	0002      	movs	r2, r0
 802019e:	00db      	lsls	r3, r3, #3
 80201a0:	3204      	adds	r2, #4
 80201a2:	4691      	mov	r9, r2
 80201a4:	4698      	mov	r8, r3
 80201a6:	000a      	movs	r2, r1
 80201a8:	464e      	mov	r6, r9
 80201aa:	4442      	add	r2, r8
 80201ac:	4699      	mov	r9, r3
 80201ae:	4688      	mov	r8, r1
 80201b0:	9208      	str	r2, [sp, #32]
 80201b2:	900d      	str	r0, [sp, #52]	@ 0x34
 80201b4:	4643      	mov	r3, r8
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	469b      	mov	fp, r3
 80201ba:	4643      	mov	r3, r8
 80201bc:	685b      	ldr	r3, [r3, #4]
 80201be:	469a      	mov	sl, r3
 80201c0:	683b      	ldr	r3, [r7, #0]
 80201c2:	109c      	asrs	r4, r3, #2
 80201c4:	464b      	mov	r3, r9
 80201c6:	58fb      	ldr	r3, [r7, r3]
 80201c8:	109a      	asrs	r2, r3, #2
 80201ca:	18a3      	adds	r3, r4, r2
 80201cc:	603b      	str	r3, [r7, #0]
 80201ce:	6833      	ldr	r3, [r6, #0]
 80201d0:	1aa4      	subs	r4, r4, r2
 80201d2:	109d      	asrs	r5, r3, #2
 80201d4:	464b      	mov	r3, r9
 80201d6:	58f3      	ldr	r3, [r6, r3]
 80201d8:	17e2      	asrs	r2, r4, #31
 80201da:	109b      	asrs	r3, r3, #2
 80201dc:	18e9      	adds	r1, r5, r3
 80201de:	6031      	str	r1, [r6, #0]
 80201e0:	0011      	movs	r1, r2
 80201e2:	465a      	mov	r2, fp
 80201e4:	17d2      	asrs	r2, r2, #31
 80201e6:	0010      	movs	r0, r2
 80201e8:	4652      	mov	r2, sl
 80201ea:	1aed      	subs	r5, r5, r3
 80201ec:	17eb      	asrs	r3, r5, #31
 80201ee:	17d2      	asrs	r2, r2, #31
 80201f0:	9307      	str	r3, [sp, #28]
 80201f2:	9204      	str	r2, [sp, #16]
 80201f4:	0003      	movs	r3, r0
 80201f6:	465a      	mov	r2, fp
 80201f8:	9006      	str	r0, [sp, #24]
 80201fa:	0020      	movs	r0, r4
 80201fc:	9105      	str	r1, [sp, #20]
 80201fe:	f7e0 f9df 	bl	80005c0 <__aeabi_lmul>
 8020202:	2280      	movs	r2, #128	@ 0x80
 8020204:	2300      	movs	r3, #0
 8020206:	0612      	lsls	r2, r2, #24
 8020208:	1880      	adds	r0, r0, r2
 802020a:	4159      	adcs	r1, r3
 802020c:	2300      	movs	r3, #0
 802020e:	9101      	str	r1, [sp, #4]
 8020210:	9300      	str	r3, [sp, #0]
 8020212:	4652      	mov	r2, sl
 8020214:	9b04      	ldr	r3, [sp, #16]
 8020216:	0028      	movs	r0, r5
 8020218:	17e9      	asrs	r1, r5, #31
 802021a:	f7e0 f9d1 	bl	80005c0 <__aeabi_lmul>
 802021e:	9a00      	ldr	r2, [sp, #0]
 8020220:	9b01      	ldr	r3, [sp, #4]
 8020222:	1a12      	subs	r2, r2, r0
 8020224:	418b      	sbcs	r3, r1
 8020226:	2080      	movs	r0, #128	@ 0x80
 8020228:	2100      	movs	r1, #0
 802022a:	0600      	lsls	r0, r0, #24
 802022c:	1812      	adds	r2, r2, r0
 802022e:	414b      	adcs	r3, r1
 8020230:	464a      	mov	r2, r9
 8020232:	005b      	lsls	r3, r3, #1
 8020234:	50bb      	str	r3, [r7, r2]
 8020236:	4658      	mov	r0, fp
 8020238:	002a      	movs	r2, r5
 802023a:	9b07      	ldr	r3, [sp, #28]
 802023c:	9906      	ldr	r1, [sp, #24]
 802023e:	f7e0 f9bf 	bl	80005c0 <__aeabi_lmul>
 8020242:	2280      	movs	r2, #128	@ 0x80
 8020244:	2300      	movs	r3, #0
 8020246:	0612      	lsls	r2, r2, #24
 8020248:	1880      	adds	r0, r0, r2
 802024a:	4159      	adcs	r1, r3
 802024c:	2000      	movs	r0, #0
 802024e:	9103      	str	r1, [sp, #12]
 8020250:	9002      	str	r0, [sp, #8]
 8020252:	4652      	mov	r2, sl
 8020254:	9b04      	ldr	r3, [sp, #16]
 8020256:	0020      	movs	r0, r4
 8020258:	9905      	ldr	r1, [sp, #20]
 802025a:	f7e0 f9b1 	bl	80005c0 <__aeabi_lmul>
 802025e:	9b02      	ldr	r3, [sp, #8]
 8020260:	9c03      	ldr	r4, [sp, #12]
 8020262:	18c0      	adds	r0, r0, r3
 8020264:	4161      	adcs	r1, r4
 8020266:	2380      	movs	r3, #128	@ 0x80
 8020268:	2400      	movs	r4, #0
 802026a:	061b      	lsls	r3, r3, #24
 802026c:	18c0      	adds	r0, r0, r3
 802026e:	4161      	adcs	r1, r4
 8020270:	464a      	mov	r2, r9
 8020272:	004b      	lsls	r3, r1, #1
 8020274:	50b3      	str	r3, [r6, r2]
 8020276:	2308      	movs	r3, #8
 8020278:	469c      	mov	ip, r3
 802027a:	9b08      	ldr	r3, [sp, #32]
 802027c:	44e0      	add	r8, ip
 802027e:	3708      	adds	r7, #8
 8020280:	3608      	adds	r6, #8
 8020282:	4598      	cmp	r8, r3
 8020284:	d196      	bne.n	80201b4 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8020286:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020288:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802028a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802028c:	2302      	movs	r3, #2
 802028e:	003a      	movs	r2, r7
 8020290:	0029      	movs	r1, r5
 8020292:	0020      	movs	r0, r4
 8020294:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8020296:	f000 fb3b 	bl	8020910 <arm_radix4_butterfly_inverse_q31>
 802029a:	46a4      	mov	ip, r4
 802029c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802029e:	2302      	movs	r3, #2
 80202a0:	0088      	lsls	r0, r1, #2
 80202a2:	4460      	add	r0, ip
 80202a4:	003a      	movs	r2, r7
 80202a6:	0029      	movs	r1, r5
 80202a8:	f000 fb32 	bl	8020910 <arm_radix4_butterfly_inverse_q31>
 80202ac:	46a4      	mov	ip, r4
 80202ae:	0128      	lsls	r0, r5, #4
 80202b0:	4460      	add	r0, ip
 80202b2:	6833      	ldr	r3, [r6, #0]
 80202b4:	005b      	lsls	r3, r3, #1
 80202b6:	6033      	str	r3, [r6, #0]
 80202b8:	6873      	ldr	r3, [r6, #4]
 80202ba:	005b      	lsls	r3, r3, #1
 80202bc:	6073      	str	r3, [r6, #4]
 80202be:	68b3      	ldr	r3, [r6, #8]
 80202c0:	005b      	lsls	r3, r3, #1
 80202c2:	60b3      	str	r3, [r6, #8]
 80202c4:	68f3      	ldr	r3, [r6, #12]
 80202c6:	005b      	lsls	r3, r3, #1
 80202c8:	60f3      	str	r3, [r6, #12]
 80202ca:	3610      	adds	r6, #16
 80202cc:	42b0      	cmp	r0, r6
 80202ce:	d1f0      	bne.n	80202b2 <arm_cfft_radix4by2_inverse_q31+0x13a>
 80202d0:	b00f      	add	sp, #60	@ 0x3c
 80202d2:	bc3c      	pop	{r2, r3, r4, r5}
 80202d4:	4690      	mov	r8, r2
 80202d6:	4699      	mov	r9, r3
 80202d8:	46a2      	mov	sl, r4
 80202da:	46ab      	mov	fp, r5
 80202dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80202de:	2302      	movs	r3, #2
 80202e0:	2100      	movs	r1, #0
 80202e2:	0015      	movs	r5, r2
 80202e4:	f000 fb14 	bl	8020910 <arm_radix4_butterfly_inverse_q31>
 80202e8:	46bc      	mov	ip, r7
 80202ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80202ec:	002a      	movs	r2, r5
 80202ee:	0098      	lsls	r0, r3, #2
 80202f0:	4460      	add	r0, ip
 80202f2:	2302      	movs	r3, #2
 80202f4:	2100      	movs	r1, #0
 80202f6:	f000 fb0b 	bl	8020910 <arm_radix4_butterfly_inverse_q31>
 80202fa:	e7e9      	b.n	80202d0 <arm_cfft_radix4by2_inverse_q31+0x158>

080202fc <arm_cfft_q31>:
 80202fc:	b570      	push	{r4, r5, r6, lr}
 80202fe:	001e      	movs	r6, r3
 8020300:	2380      	movs	r3, #128	@ 0x80
 8020302:	000d      	movs	r5, r1
 8020304:	0004      	movs	r4, r0
 8020306:	8801      	ldrh	r1, [r0, #0]
 8020308:	005b      	lsls	r3, r3, #1
 802030a:	2a01      	cmp	r2, #1
 802030c:	d028      	beq.n	8020360 <arm_cfft_q31+0x64>
 802030e:	4299      	cmp	r1, r3
 8020310:	d020      	beq.n	8020354 <arm_cfft_q31+0x58>
 8020312:	d812      	bhi.n	802033a <arm_cfft_q31+0x3e>
 8020314:	2920      	cmp	r1, #32
 8020316:	d004      	beq.n	8020322 <arm_cfft_q31+0x26>
 8020318:	d949      	bls.n	80203ae <arm_cfft_q31+0xb2>
 802031a:	2940      	cmp	r1, #64	@ 0x40
 802031c:	d01a      	beq.n	8020354 <arm_cfft_q31+0x58>
 802031e:	2980      	cmp	r1, #128	@ 0x80
 8020320:	d103      	bne.n	802032a <arm_cfft_q31+0x2e>
 8020322:	6862      	ldr	r2, [r4, #4]
 8020324:	0028      	movs	r0, r5
 8020326:	f7ff fe65 	bl	801fff4 <arm_cfft_radix4by2_q31>
 802032a:	2e00      	cmp	r6, #0
 802032c:	d004      	beq.n	8020338 <arm_cfft_q31+0x3c>
 802032e:	68a2      	ldr	r2, [r4, #8]
 8020330:	89a1      	ldrh	r1, [r4, #12]
 8020332:	0028      	movs	r0, r5
 8020334:	f7df fee8 	bl	8000108 <arm_bitreversal_32>
 8020338:	bd70      	pop	{r4, r5, r6, pc}
 802033a:	2380      	movs	r3, #128	@ 0x80
 802033c:	00db      	lsls	r3, r3, #3
 802033e:	4299      	cmp	r1, r3
 8020340:	d008      	beq.n	8020354 <arm_cfft_q31+0x58>
 8020342:	d92f      	bls.n	80203a4 <arm_cfft_q31+0xa8>
 8020344:	2380      	movs	r3, #128	@ 0x80
 8020346:	011b      	lsls	r3, r3, #4
 8020348:	4299      	cmp	r1, r3
 802034a:	d0ea      	beq.n	8020322 <arm_cfft_q31+0x26>
 802034c:	2380      	movs	r3, #128	@ 0x80
 802034e:	015b      	lsls	r3, r3, #5
 8020350:	4299      	cmp	r1, r3
 8020352:	d1ea      	bne.n	802032a <arm_cfft_q31+0x2e>
 8020354:	2301      	movs	r3, #1
 8020356:	6862      	ldr	r2, [r4, #4]
 8020358:	0028      	movs	r0, r5
 802035a:	f000 f833 	bl	80203c4 <arm_radix4_butterfly_q31>
 802035e:	e7e4      	b.n	802032a <arm_cfft_q31+0x2e>
 8020360:	4299      	cmp	r1, r3
 8020362:	d019      	beq.n	8020398 <arm_cfft_q31+0x9c>
 8020364:	d80b      	bhi.n	802037e <arm_cfft_q31+0x82>
 8020366:	2920      	cmp	r1, #32
 8020368:	d004      	beq.n	8020374 <arm_cfft_q31+0x78>
 802036a:	d928      	bls.n	80203be <arm_cfft_q31+0xc2>
 802036c:	2940      	cmp	r1, #64	@ 0x40
 802036e:	d013      	beq.n	8020398 <arm_cfft_q31+0x9c>
 8020370:	2980      	cmp	r1, #128	@ 0x80
 8020372:	d1da      	bne.n	802032a <arm_cfft_q31+0x2e>
 8020374:	6862      	ldr	r2, [r4, #4]
 8020376:	0028      	movs	r0, r5
 8020378:	f7ff fefe 	bl	8020178 <arm_cfft_radix4by2_inverse_q31>
 802037c:	e7d5      	b.n	802032a <arm_cfft_q31+0x2e>
 802037e:	2380      	movs	r3, #128	@ 0x80
 8020380:	00db      	lsls	r3, r3, #3
 8020382:	4299      	cmp	r1, r3
 8020384:	d008      	beq.n	8020398 <arm_cfft_q31+0x9c>
 8020386:	d915      	bls.n	80203b4 <arm_cfft_q31+0xb8>
 8020388:	2380      	movs	r3, #128	@ 0x80
 802038a:	011b      	lsls	r3, r3, #4
 802038c:	4299      	cmp	r1, r3
 802038e:	d0f1      	beq.n	8020374 <arm_cfft_q31+0x78>
 8020390:	2380      	movs	r3, #128	@ 0x80
 8020392:	015b      	lsls	r3, r3, #5
 8020394:	4299      	cmp	r1, r3
 8020396:	d1c8      	bne.n	802032a <arm_cfft_q31+0x2e>
 8020398:	2301      	movs	r3, #1
 802039a:	6862      	ldr	r2, [r4, #4]
 802039c:	0028      	movs	r0, r5
 802039e:	f000 fab7 	bl	8020910 <arm_radix4_butterfly_inverse_q31>
 80203a2:	e7c2      	b.n	802032a <arm_cfft_q31+0x2e>
 80203a4:	2380      	movs	r3, #128	@ 0x80
 80203a6:	009b      	lsls	r3, r3, #2
 80203a8:	4299      	cmp	r1, r3
 80203aa:	d0ba      	beq.n	8020322 <arm_cfft_q31+0x26>
 80203ac:	e7bd      	b.n	802032a <arm_cfft_q31+0x2e>
 80203ae:	2910      	cmp	r1, #16
 80203b0:	d1bb      	bne.n	802032a <arm_cfft_q31+0x2e>
 80203b2:	e7cf      	b.n	8020354 <arm_cfft_q31+0x58>
 80203b4:	2380      	movs	r3, #128	@ 0x80
 80203b6:	009b      	lsls	r3, r3, #2
 80203b8:	4299      	cmp	r1, r3
 80203ba:	d0db      	beq.n	8020374 <arm_cfft_q31+0x78>
 80203bc:	e7b5      	b.n	802032a <arm_cfft_q31+0x2e>
 80203be:	2910      	cmp	r1, #16
 80203c0:	d1b3      	bne.n	802032a <arm_cfft_q31+0x2e>
 80203c2:	e7e9      	b.n	8020398 <arm_cfft_q31+0x9c>

080203c4 <arm_radix4_butterfly_q31>:
 80203c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203c6:	464d      	mov	r5, r9
 80203c8:	4644      	mov	r4, r8
 80203ca:	465f      	mov	r7, fp
 80203cc:	4656      	mov	r6, sl
 80203ce:	469c      	mov	ip, r3
 80203d0:	b4f0      	push	{r4, r5, r6, r7}
 80203d2:	b0a7      	sub	sp, #156	@ 0x9c
 80203d4:	9114      	str	r1, [sp, #80]	@ 0x50
 80203d6:	0889      	lsrs	r1, r1, #2
 80203d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80203da:	00cb      	lsls	r3, r1, #3
 80203dc:	0015      	movs	r5, r2
 80203de:	9223      	str	r2, [sp, #140]	@ 0x8c
 80203e0:	18c2      	adds	r2, r0, r3
 80203e2:	000c      	movs	r4, r1
 80203e4:	469a      	mov	sl, r3
 80203e6:	9124      	str	r1, [sp, #144]	@ 0x90
 80203e8:	18d1      	adds	r1, r2, r3
 80203ea:	4663      	mov	r3, ip
 80203ec:	468b      	mov	fp, r1
 80203ee:	0119      	lsls	r1, r3, #4
 80203f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80203f2:	00d9      	lsls	r1, r3, #3
 80203f4:	005b      	lsls	r3, r3, #1
 80203f6:	4463      	add	r3, ip
 80203f8:	910e      	str	r1, [sp, #56]	@ 0x38
 80203fa:	00d9      	lsls	r1, r3, #3
 80203fc:	465b      	mov	r3, fp
 80203fe:	44da      	add	sl, fp
 8020400:	4690      	mov	r8, r2
 8020402:	4683      	mov	fp, r0
 8020404:	4699      	mov	r9, r3
 8020406:	9022      	str	r0, [sp, #136]	@ 0x88
 8020408:	9025      	str	r0, [sp, #148]	@ 0x94
 802040a:	910f      	str	r1, [sp, #60]	@ 0x3c
 802040c:	9502      	str	r5, [sp, #8]
 802040e:	9500      	str	r5, [sp, #0]
 8020410:	9501      	str	r5, [sp, #4]
 8020412:	9407      	str	r4, [sp, #28]
 8020414:	465b      	mov	r3, fp
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	4642      	mov	r2, r8
 802041a:	111c      	asrs	r4, r3, #4
 802041c:	464b      	mov	r3, r9
 802041e:	4658      	mov	r0, fp
 8020420:	681b      	ldr	r3, [r3, #0]
 8020422:	6812      	ldr	r2, [r2, #0]
 8020424:	111b      	asrs	r3, r3, #4
 8020426:	18e7      	adds	r7, r4, r3
 8020428:	1ae3      	subs	r3, r4, r3
 802042a:	1114      	asrs	r4, r2, #4
 802042c:	4652      	mov	r2, sl
 802042e:	6840      	ldr	r0, [r0, #4]
 8020430:	6812      	ldr	r2, [r2, #0]
 8020432:	1105      	asrs	r5, r0, #4
 8020434:	4648      	mov	r0, r9
 8020436:	9303      	str	r3, [sp, #12]
 8020438:	1113      	asrs	r3, r2, #4
 802043a:	18e2      	adds	r2, r4, r3
 802043c:	465c      	mov	r4, fp
 802043e:	6840      	ldr	r0, [r0, #4]
 8020440:	1103      	asrs	r3, r0, #4
 8020442:	18ee      	adds	r6, r5, r3
 8020444:	1ae8      	subs	r0, r5, r3
 8020446:	18bb      	adds	r3, r7, r2
 8020448:	6023      	str	r3, [r4, #0]
 802044a:	4644      	mov	r4, r8
 802044c:	6864      	ldr	r4, [r4, #4]
 802044e:	9004      	str	r0, [sp, #16]
 8020450:	1125      	asrs	r5, r4, #4
 8020452:	4654      	mov	r4, sl
 8020454:	6864      	ldr	r4, [r4, #4]
 8020456:	1123      	asrs	r3, r4, #4
 8020458:	465c      	mov	r4, fp
 802045a:	18eb      	adds	r3, r5, r3
 802045c:	18f1      	adds	r1, r6, r3
 802045e:	6061      	str	r1, [r4, #4]
 8020460:	4655      	mov	r5, sl
 8020462:	4644      	mov	r4, r8
 8020464:	686d      	ldr	r5, [r5, #4]
 8020466:	6864      	ldr	r4, [r4, #4]
 8020468:	1129      	asrs	r1, r5, #4
 802046a:	1124      	asrs	r4, r4, #4
 802046c:	1a64      	subs	r4, r4, r1
 802046e:	4641      	mov	r1, r8
 8020470:	6809      	ldr	r1, [r1, #0]
 8020472:	9405      	str	r4, [sp, #20]
 8020474:	1108      	asrs	r0, r1, #4
 8020476:	4651      	mov	r1, sl
 8020478:	6809      	ldr	r1, [r1, #0]
 802047a:	1abc      	subs	r4, r7, r2
 802047c:	1109      	asrs	r1, r1, #4
 802047e:	1a41      	subs	r1, r0, r1
 8020480:	17e2      	asrs	r2, r4, #31
 8020482:	9106      	str	r1, [sp, #24]
 8020484:	0011      	movs	r1, r2
 8020486:	9a01      	ldr	r2, [sp, #4]
 8020488:	9108      	str	r1, [sp, #32]
 802048a:	6817      	ldr	r7, [r2, #0]
 802048c:	17fd      	asrs	r5, r7, #31
 802048e:	0028      	movs	r0, r5
 8020490:	1af5      	subs	r5, r6, r3
 8020492:	17ee      	asrs	r6, r5, #31
 8020494:	960a      	str	r6, [sp, #40]	@ 0x28
 8020496:	6856      	ldr	r6, [r2, #4]
 8020498:	9009      	str	r0, [sp, #36]	@ 0x24
 802049a:	17f3      	asrs	r3, r6, #31
 802049c:	003a      	movs	r2, r7
 802049e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80204a0:	0003      	movs	r3, r0
 80204a2:	0020      	movs	r0, r4
 80204a4:	f7e0 f88c 	bl	80005c0 <__aeabi_lmul>
 80204a8:	0032      	movs	r2, r6
 80204aa:	17f3      	asrs	r3, r6, #31
 80204ac:	910c      	str	r1, [sp, #48]	@ 0x30
 80204ae:	0028      	movs	r0, r5
 80204b0:	17e9      	asrs	r1, r5, #31
 80204b2:	f7e0 f885 	bl	80005c0 <__aeabi_lmul>
 80204b6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80204b8:	002a      	movs	r2, r5
 80204ba:	4684      	mov	ip, r0
 80204bc:	4640      	mov	r0, r8
 80204be:	4461      	add	r1, ip
 80204c0:	0049      	lsls	r1, r1, #1
 80204c2:	6001      	str	r1, [r0, #0]
 80204c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80204c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80204c8:	0038      	movs	r0, r7
 80204ca:	f7e0 f879 	bl	80005c0 <__aeabi_lmul>
 80204ce:	0032      	movs	r2, r6
 80204d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80204d2:	000d      	movs	r5, r1
 80204d4:	0020      	movs	r0, r4
 80204d6:	9908      	ldr	r1, [sp, #32]
 80204d8:	f7e0 f872 	bl	80005c0 <__aeabi_lmul>
 80204dc:	4646      	mov	r6, r8
 80204de:	1a6d      	subs	r5, r5, r1
 80204e0:	006d      	lsls	r5, r5, #1
 80204e2:	6075      	str	r5, [r6, #4]
 80204e4:	9903      	ldr	r1, [sp, #12]
 80204e6:	9d05      	ldr	r5, [sp, #20]
 80204e8:	000c      	movs	r4, r1
 80204ea:	46ac      	mov	ip, r5
 80204ec:	4464      	add	r4, ip
 80204ee:	17e6      	asrs	r6, r4, #31
 80204f0:	0031      	movs	r1, r6
 80204f2:	9b00      	ldr	r3, [sp, #0]
 80204f4:	9804      	ldr	r0, [sp, #16]
 80204f6:	681e      	ldr	r6, [r3, #0]
 80204f8:	17f7      	asrs	r7, r6, #31
 80204fa:	9709      	str	r7, [sp, #36]	@ 0x24
 80204fc:	9f06      	ldr	r7, [sp, #24]
 80204fe:	0032      	movs	r2, r6
 8020500:	1bc7      	subs	r7, r0, r7
 8020502:	17fd      	asrs	r5, r7, #31
 8020504:	950a      	str	r5, [sp, #40]	@ 0x28
 8020506:	685d      	ldr	r5, [r3, #4]
 8020508:	17f3      	asrs	r3, r6, #31
 802050a:	17e8      	asrs	r0, r5, #31
 802050c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802050e:	0020      	movs	r0, r4
 8020510:	9108      	str	r1, [sp, #32]
 8020512:	f7e0 f855 	bl	80005c0 <__aeabi_lmul>
 8020516:	002a      	movs	r2, r5
 8020518:	17eb      	asrs	r3, r5, #31
 802051a:	910c      	str	r1, [sp, #48]	@ 0x30
 802051c:	0038      	movs	r0, r7
 802051e:	17f9      	asrs	r1, r7, #31
 8020520:	f7e0 f84e 	bl	80005c0 <__aeabi_lmul>
 8020524:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020526:	003a      	movs	r2, r7
 8020528:	4684      	mov	ip, r0
 802052a:	4648      	mov	r0, r9
 802052c:	4461      	add	r1, ip
 802052e:	0049      	lsls	r1, r1, #1
 8020530:	6001      	str	r1, [r0, #0]
 8020532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020534:	0030      	movs	r0, r6
 8020536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020538:	f7e0 f842 	bl	80005c0 <__aeabi_lmul>
 802053c:	002a      	movs	r2, r5
 802053e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020540:	000e      	movs	r6, r1
 8020542:	0020      	movs	r0, r4
 8020544:	9908      	ldr	r1, [sp, #32]
 8020546:	f7e0 f83b 	bl	80005c0 <__aeabi_lmul>
 802054a:	464c      	mov	r4, r9
 802054c:	9d05      	ldr	r5, [sp, #20]
 802054e:	1a76      	subs	r6, r6, r1
 8020550:	9903      	ldr	r1, [sp, #12]
 8020552:	0076      	lsls	r6, r6, #1
 8020554:	6066      	str	r6, [r4, #4]
 8020556:	1b4c      	subs	r4, r1, r5
 8020558:	9e06      	ldr	r6, [sp, #24]
 802055a:	17e1      	asrs	r1, r4, #31
 802055c:	9103      	str	r1, [sp, #12]
 802055e:	9902      	ldr	r1, [sp, #8]
 8020560:	46b4      	mov	ip, r6
 8020562:	680f      	ldr	r7, [r1, #0]
 8020564:	9804      	ldr	r0, [sp, #16]
 8020566:	17fd      	asrs	r5, r7, #31
 8020568:	002b      	movs	r3, r5
 802056a:	684e      	ldr	r6, [r1, #4]
 802056c:	4460      	add	r0, ip
 802056e:	0005      	movs	r5, r0
 8020570:	17c0      	asrs	r0, r0, #31
 8020572:	9005      	str	r0, [sp, #20]
 8020574:	17f0      	asrs	r0, r6, #31
 8020576:	9006      	str	r0, [sp, #24]
 8020578:	003a      	movs	r2, r7
 802057a:	0020      	movs	r0, r4
 802057c:	17e1      	asrs	r1, r4, #31
 802057e:	9304      	str	r3, [sp, #16]
 8020580:	f7e0 f81e 	bl	80005c0 <__aeabi_lmul>
 8020584:	0032      	movs	r2, r6
 8020586:	9108      	str	r1, [sp, #32]
 8020588:	17f3      	asrs	r3, r6, #31
 802058a:	0028      	movs	r0, r5
 802058c:	17e9      	asrs	r1, r5, #31
 802058e:	f7e0 f817 	bl	80005c0 <__aeabi_lmul>
 8020592:	9808      	ldr	r0, [sp, #32]
 8020594:	002a      	movs	r2, r5
 8020596:	4684      	mov	ip, r0
 8020598:	4650      	mov	r0, sl
 802059a:	4461      	add	r1, ip
 802059c:	0049      	lsls	r1, r1, #1
 802059e:	6001      	str	r1, [r0, #0]
 80205a0:	9b05      	ldr	r3, [sp, #20]
 80205a2:	9904      	ldr	r1, [sp, #16]
 80205a4:	0038      	movs	r0, r7
 80205a6:	f7e0 f80b 	bl	80005c0 <__aeabi_lmul>
 80205aa:	0020      	movs	r0, r4
 80205ac:	2408      	movs	r4, #8
 80205ae:	000d      	movs	r5, r1
 80205b0:	0032      	movs	r2, r6
 80205b2:	9b06      	ldr	r3, [sp, #24]
 80205b4:	9903      	ldr	r1, [sp, #12]
 80205b6:	f7e0 f803 	bl	80005c0 <__aeabi_lmul>
 80205ba:	46a4      	mov	ip, r4
 80205bc:	4650      	mov	r0, sl
 80205be:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80205c0:	44e3      	add	fp, ip
 80205c2:	44e0      	add	r8, ip
 80205c4:	44e1      	add	r9, ip
 80205c6:	44e2      	add	sl, ip
 80205c8:	46a4      	mov	ip, r4
 80205ca:	1a6d      	subs	r5, r5, r1
 80205cc:	006d      	lsls	r5, r5, #1
 80205ce:	9a01      	ldr	r2, [sp, #4]
 80205d0:	6045      	str	r5, [r0, #4]
 80205d2:	9807      	ldr	r0, [sp, #28]
 80205d4:	4462      	add	r2, ip
 80205d6:	3801      	subs	r0, #1
 80205d8:	9201      	str	r2, [sp, #4]
 80205da:	9007      	str	r0, [sp, #28]
 80205dc:	9b00      	ldr	r3, [sp, #0]
 80205de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80205e0:	9902      	ldr	r1, [sp, #8]
 80205e2:	4694      	mov	ip, r2
 80205e4:	4463      	add	r3, ip
 80205e6:	9300      	str	r3, [sp, #0]
 80205e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80205ea:	469c      	mov	ip, r3
 80205ec:	4461      	add	r1, ip
 80205ee:	9102      	str	r1, [sp, #8]
 80205f0:	2800      	cmp	r0, #0
 80205f2:	d000      	beq.n	80205f6 <arm_radix4_butterfly_q31+0x232>
 80205f4:	e70e      	b.n	8020414 <arm_radix4_butterfly_q31+0x50>
 80205f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80205f8:	009b      	lsls	r3, r3, #2
 80205fa:	931f      	str	r3, [sp, #124]	@ 0x7c
 80205fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80205fe:	9320      	str	r3, [sp, #128]	@ 0x80
 8020600:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020602:	2b04      	cmp	r3, #4
 8020604:	d800      	bhi.n	8020608 <arm_radix4_butterfly_q31+0x244>
 8020606:	e180      	b.n	802090a <arm_radix4_butterfly_q31+0x546>
 8020608:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802060a:	0893      	lsrs	r3, r2, #2
 802060c:	1e59      	subs	r1, r3, #1
 802060e:	9321      	str	r3, [sp, #132]	@ 0x84
 8020610:	00db      	lsls	r3, r3, #3
 8020612:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020614:	00d3      	lsls	r3, r2, #3
 8020616:	9300      	str	r3, [sp, #0]
 8020618:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802061a:	911a      	str	r1, [sp, #104]	@ 0x68
 802061c:	00da      	lsls	r2, r3, #3
 802061e:	921e      	str	r2, [sp, #120]	@ 0x78
 8020620:	011a      	lsls	r2, r3, #4
 8020622:	921d      	str	r2, [sp, #116]	@ 0x74
 8020624:	001a      	movs	r2, r3
 8020626:	4694      	mov	ip, r2
 8020628:	005b      	lsls	r3, r3, #1
 802062a:	4463      	add	r3, ip
 802062c:	00db      	lsls	r3, r3, #3
 802062e:	931c      	str	r3, [sp, #112]	@ 0x70
 8020630:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020632:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020636:	9318      	str	r3, [sp, #96]	@ 0x60
 8020638:	9319      	str	r3, [sp, #100]	@ 0x64
 802063a:	9316      	str	r3, [sp, #88]	@ 0x58
 802063c:	2300      	movs	r3, #0
 802063e:	9315      	str	r3, [sp, #84]	@ 0x54
 8020640:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020642:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020644:	681a      	ldr	r2, [r3, #0]
 8020646:	685b      	ldr	r3, [r3, #4]
 8020648:	9205      	str	r2, [sp, #20]
 802064a:	9306      	str	r3, [sp, #24]
 802064c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802064e:	468c      	mov	ip, r1
 8020650:	681a      	ldr	r2, [r3, #0]
 8020652:	685b      	ldr	r3, [r3, #4]
 8020654:	9207      	str	r2, [sp, #28]
 8020656:	9308      	str	r3, [sp, #32]
 8020658:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802065a:	681a      	ldr	r2, [r3, #0]
 802065c:	685b      	ldr	r3, [r3, #4]
 802065e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020660:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020662:	930a      	str	r3, [sp, #40]	@ 0x28
 8020664:	0013      	movs	r3, r2
 8020666:	4463      	add	r3, ip
 8020668:	4698      	mov	r8, r3
 802066a:	0013      	movs	r3, r2
 802066c:	4442      	add	r2, r8
 802066e:	4691      	mov	r9, r2
 8020670:	001a      	movs	r2, r3
 8020672:	444a      	add	r2, r9
 8020674:	4692      	mov	sl, r2
 8020676:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020678:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802067a:	4293      	cmp	r3, r2
 802067c:	d800      	bhi.n	8020680 <arm_radix4_butterfly_q31+0x2bc>
 802067e:	e0dd      	b.n	802083c <arm_radix4_butterfly_q31+0x478>
 8020680:	4694      	mov	ip, r2
 8020682:	468b      	mov	fp, r1
 8020684:	4644      	mov	r4, r8
 8020686:	4655      	mov	r5, sl
 8020688:	9b07      	ldr	r3, [sp, #28]
 802068a:	17db      	asrs	r3, r3, #31
 802068c:	930c      	str	r3, [sp, #48]	@ 0x30
 802068e:	9b08      	ldr	r3, [sp, #32]
 8020690:	17db      	asrs	r3, r3, #31
 8020692:	930d      	str	r3, [sp, #52]	@ 0x34
 8020694:	9b05      	ldr	r3, [sp, #20]
 8020696:	17db      	asrs	r3, r3, #31
 8020698:	930e      	str	r3, [sp, #56]	@ 0x38
 802069a:	9b06      	ldr	r3, [sp, #24]
 802069c:	17db      	asrs	r3, r3, #31
 802069e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206a2:	17db      	asrs	r3, r3, #31
 80206a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80206a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80206a8:	17db      	asrs	r3, r3, #31
 80206aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80206ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80206ae:	4463      	add	r3, ip
 80206b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80206b2:	465b      	mov	r3, fp
 80206b4:	4659      	mov	r1, fp
 80206b6:	681a      	ldr	r2, [r3, #0]
 80206b8:	464b      	mov	r3, r9
 80206ba:	684f      	ldr	r7, [r1, #4]
 80206bc:	4649      	mov	r1, r9
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	18d6      	adds	r6, r2, r3
 80206c2:	1ad3      	subs	r3, r2, r3
 80206c4:	9301      	str	r3, [sp, #4]
 80206c6:	684b      	ldr	r3, [r1, #4]
 80206c8:	18f8      	adds	r0, r7, r3
 80206ca:	1af9      	subs	r1, r7, r3
 80206cc:	6827      	ldr	r7, [r4, #0]
 80206ce:	9102      	str	r1, [sp, #8]
 80206d0:	003a      	movs	r2, r7
 80206d2:	682f      	ldr	r7, [r5, #0]
 80206d4:	46bc      	mov	ip, r7
 80206d6:	465f      	mov	r7, fp
 80206d8:	4462      	add	r2, ip
 80206da:	18b3      	adds	r3, r6, r2
 80206dc:	109b      	asrs	r3, r3, #2
 80206de:	603b      	str	r3, [r7, #0]
 80206e0:	6867      	ldr	r7, [r4, #4]
 80206e2:	1ab6      	subs	r6, r6, r2
 80206e4:	46b8      	mov	r8, r7
 80206e6:	686f      	ldr	r7, [r5, #4]
 80206e8:	17f2      	asrs	r2, r6, #31
 80206ea:	46bc      	mov	ip, r7
 80206ec:	44e0      	add	r8, ip
 80206ee:	4643      	mov	r3, r8
 80206f0:	465f      	mov	r7, fp
 80206f2:	18c1      	adds	r1, r0, r3
 80206f4:	1089      	asrs	r1, r1, #2
 80206f6:	6079      	str	r1, [r7, #4]
 80206f8:	9900      	ldr	r1, [sp, #0]
 80206fa:	4690      	mov	r8, r2
 80206fc:	468c      	mov	ip, r1
 80206fe:	6867      	ldr	r7, [r4, #4]
 8020700:	6869      	ldr	r1, [r5, #4]
 8020702:	44e3      	add	fp, ip
 8020704:	1a7f      	subs	r7, r7, r1
 8020706:	9703      	str	r7, [sp, #12]
 8020708:	6829      	ldr	r1, [r5, #0]
 802070a:	6827      	ldr	r7, [r4, #0]
 802070c:	1a7f      	subs	r7, r7, r1
 802070e:	9704      	str	r7, [sp, #16]
 8020710:	1ac7      	subs	r7, r0, r3
 8020712:	17fa      	asrs	r2, r7, #31
 8020714:	4692      	mov	sl, r2
 8020716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020718:	9a07      	ldr	r2, [sp, #28]
 802071a:	0030      	movs	r0, r6
 802071c:	4641      	mov	r1, r8
 802071e:	f7df ff4f 	bl	80005c0 <__aeabi_lmul>
 8020722:	9a08      	ldr	r2, [sp, #32]
 8020724:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020726:	9112      	str	r1, [sp, #72]	@ 0x48
 8020728:	0038      	movs	r0, r7
 802072a:	4651      	mov	r1, sl
 802072c:	f7df ff48 	bl	80005c0 <__aeabi_lmul>
 8020730:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020732:	9a07      	ldr	r2, [sp, #28]
 8020734:	4684      	mov	ip, r0
 8020736:	4461      	add	r1, ip
 8020738:	1049      	asrs	r1, r1, #1
 802073a:	6021      	str	r1, [r4, #0]
 802073c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802073e:	0038      	movs	r0, r7
 8020740:	4651      	mov	r1, sl
 8020742:	f7df ff3d 	bl	80005c0 <__aeabi_lmul>
 8020746:	9a08      	ldr	r2, [sp, #32]
 8020748:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802074a:	000f      	movs	r7, r1
 802074c:	0030      	movs	r0, r6
 802074e:	4641      	mov	r1, r8
 8020750:	f7df ff36 	bl	80005c0 <__aeabi_lmul>
 8020754:	9b00      	ldr	r3, [sp, #0]
 8020756:	9a01      	ldr	r2, [sp, #4]
 8020758:	469c      	mov	ip, r3
 802075a:	9803      	ldr	r0, [sp, #12]
 802075c:	1a7f      	subs	r7, r7, r1
 802075e:	107f      	asrs	r7, r7, #1
 8020760:	6067      	str	r7, [r4, #4]
 8020762:	0016      	movs	r6, r2
 8020764:	4464      	add	r4, ip
 8020766:	4684      	mov	ip, r0
 8020768:	4466      	add	r6, ip
 802076a:	17f2      	asrs	r2, r6, #31
 802076c:	4690      	mov	r8, r2
 802076e:	9902      	ldr	r1, [sp, #8]
 8020770:	9f04      	ldr	r7, [sp, #16]
 8020772:	0030      	movs	r0, r6
 8020774:	1bcf      	subs	r7, r1, r7
 8020776:	17fa      	asrs	r2, r7, #31
 8020778:	4692      	mov	sl, r2
 802077a:	4641      	mov	r1, r8
 802077c:	9a05      	ldr	r2, [sp, #20]
 802077e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020780:	f7df ff1e 	bl	80005c0 <__aeabi_lmul>
 8020784:	9a06      	ldr	r2, [sp, #24]
 8020786:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020788:	9112      	str	r1, [sp, #72]	@ 0x48
 802078a:	0038      	movs	r0, r7
 802078c:	4651      	mov	r1, sl
 802078e:	f7df ff17 	bl	80005c0 <__aeabi_lmul>
 8020792:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020794:	9a05      	ldr	r2, [sp, #20]
 8020796:	4684      	mov	ip, r0
 8020798:	4648      	mov	r0, r9
 802079a:	4461      	add	r1, ip
 802079c:	1049      	asrs	r1, r1, #1
 802079e:	6001      	str	r1, [r0, #0]
 80207a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80207a2:	0038      	movs	r0, r7
 80207a4:	4651      	mov	r1, sl
 80207a6:	f7df ff0b 	bl	80005c0 <__aeabi_lmul>
 80207aa:	9a06      	ldr	r2, [sp, #24]
 80207ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80207ae:	000f      	movs	r7, r1
 80207b0:	0030      	movs	r0, r6
 80207b2:	4641      	mov	r1, r8
 80207b4:	f7df ff04 	bl	80005c0 <__aeabi_lmul>
 80207b8:	464e      	mov	r6, r9
 80207ba:	9a00      	ldr	r2, [sp, #0]
 80207bc:	9b01      	ldr	r3, [sp, #4]
 80207be:	4694      	mov	ip, r2
 80207c0:	9803      	ldr	r0, [sp, #12]
 80207c2:	1a7f      	subs	r7, r7, r1
 80207c4:	107f      	asrs	r7, r7, #1
 80207c6:	6077      	str	r7, [r6, #4]
 80207c8:	1a1e      	subs	r6, r3, r0
 80207ca:	9b04      	ldr	r3, [sp, #16]
 80207cc:	44e1      	add	r9, ip
 80207ce:	469c      	mov	ip, r3
 80207d0:	17f0      	asrs	r0, r6, #31
 80207d2:	4680      	mov	r8, r0
 80207d4:	9902      	ldr	r1, [sp, #8]
 80207d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80207d8:	4461      	add	r1, ip
 80207da:	17cb      	asrs	r3, r1, #31
 80207dc:	000f      	movs	r7, r1
 80207de:	469a      	mov	sl, r3
 80207e0:	0030      	movs	r0, r6
 80207e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80207e4:	4641      	mov	r1, r8
 80207e6:	f7df feeb 	bl	80005c0 <__aeabi_lmul>
 80207ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80207ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80207ee:	9101      	str	r1, [sp, #4]
 80207f0:	0038      	movs	r0, r7
 80207f2:	4651      	mov	r1, sl
 80207f4:	f7df fee4 	bl	80005c0 <__aeabi_lmul>
 80207f8:	9801      	ldr	r0, [sp, #4]
 80207fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80207fc:	4684      	mov	ip, r0
 80207fe:	4461      	add	r1, ip
 8020800:	1049      	asrs	r1, r1, #1
 8020802:	6029      	str	r1, [r5, #0]
 8020804:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020806:	0038      	movs	r0, r7
 8020808:	4651      	mov	r1, sl
 802080a:	f7df fed9 	bl	80005c0 <__aeabi_lmul>
 802080e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020810:	000f      	movs	r7, r1
 8020812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020814:	0030      	movs	r0, r6
 8020816:	4641      	mov	r1, r8
 8020818:	f7df fed2 	bl	80005c0 <__aeabi_lmul>
 802081c:	1a7f      	subs	r7, r7, r1
 802081e:	107f      	asrs	r7, r7, #1
 8020820:	606f      	str	r7, [r5, #4]
 8020822:	9a00      	ldr	r2, [sp, #0]
 8020824:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020826:	4694      	mov	ip, r2
 8020828:	4465      	add	r5, ip
 802082a:	468c      	mov	ip, r1
 802082c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802082e:	0013      	movs	r3, r2
 8020830:	4462      	add	r2, ip
 8020832:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020834:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020836:	429a      	cmp	r2, r3
 8020838:	d900      	bls.n	802083c <arm_radix4_butterfly_q31+0x478>
 802083a:	e73a      	b.n	80206b2 <arm_radix4_butterfly_q31+0x2ee>
 802083c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802083e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020840:	468c      	mov	ip, r1
 8020842:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8020844:	4462      	add	r2, ip
 8020846:	468c      	mov	ip, r1
 8020848:	9216      	str	r2, [sp, #88]	@ 0x58
 802084a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802084c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802084e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020850:	4462      	add	r2, ip
 8020852:	468c      	mov	ip, r1
 8020854:	9219      	str	r2, [sp, #100]	@ 0x64
 8020856:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020858:	3301      	adds	r3, #1
 802085a:	4462      	add	r2, ip
 802085c:	9218      	str	r2, [sp, #96]	@ 0x60
 802085e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020860:	9315      	str	r3, [sp, #84]	@ 0x54
 8020862:	3208      	adds	r2, #8
 8020864:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020866:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020868:	4293      	cmp	r3, r2
 802086a:	d800      	bhi.n	802086e <arm_radix4_butterfly_q31+0x4aa>
 802086c:	e6e8      	b.n	8020640 <arm_radix4_butterfly_q31+0x27c>
 802086e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020870:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020872:	009b      	lsls	r3, r3, #2
 8020874:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020876:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020878:	9213      	str	r2, [sp, #76]	@ 0x4c
 802087a:	089b      	lsrs	r3, r3, #2
 802087c:	9320      	str	r3, [sp, #128]	@ 0x80
 802087e:	2b04      	cmp	r3, #4
 8020880:	d900      	bls.n	8020884 <arm_radix4_butterfly_q31+0x4c0>
 8020882:	e6c1      	b.n	8020608 <arm_radix4_butterfly_q31+0x244>
 8020884:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020886:	469a      	mov	sl, r3
 8020888:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802088a:	691c      	ldr	r4, [r3, #16]
 802088c:	685a      	ldr	r2, [r3, #4]
 802088e:	46a1      	mov	r9, r4
 8020890:	4690      	mov	r8, r2
 8020892:	6819      	ldr	r1, [r3, #0]
 8020894:	689a      	ldr	r2, [r3, #8]
 8020896:	699f      	ldr	r7, [r3, #24]
 8020898:	188d      	adds	r5, r1, r2
 802089a:	444d      	add	r5, r9
 802089c:	19ed      	adds	r5, r5, r7
 802089e:	69de      	ldr	r6, [r3, #28]
 80208a0:	601d      	str	r5, [r3, #0]
 80208a2:	4645      	mov	r5, r8
 80208a4:	46b4      	mov	ip, r6
 80208a6:	68d8      	ldr	r0, [r3, #12]
 80208a8:	695c      	ldr	r4, [r3, #20]
 80208aa:	182d      	adds	r5, r5, r0
 80208ac:	192d      	adds	r5, r5, r4
 80208ae:	4465      	add	r5, ip
 80208b0:	605d      	str	r5, [r3, #4]
 80208b2:	1a8d      	subs	r5, r1, r2
 80208b4:	444d      	add	r5, r9
 80208b6:	1bed      	subs	r5, r5, r7
 80208b8:	609d      	str	r5, [r3, #8]
 80208ba:	4645      	mov	r5, r8
 80208bc:	1a2d      	subs	r5, r5, r0
 80208be:	192d      	adds	r5, r5, r4
 80208c0:	1bad      	subs	r5, r5, r6
 80208c2:	464e      	mov	r6, r9
 80208c4:	60dd      	str	r5, [r3, #12]
 80208c6:	180d      	adds	r5, r1, r0
 80208c8:	1bad      	subs	r5, r5, r6
 80208ca:	4666      	mov	r6, ip
 80208cc:	1bad      	subs	r5, r5, r6
 80208ce:	611d      	str	r5, [r3, #16]
 80208d0:	4645      	mov	r5, r8
 80208d2:	1aad      	subs	r5, r5, r2
 80208d4:	4442      	add	r2, r8
 80208d6:	1b12      	subs	r2, r2, r4
 80208d8:	1bd2      	subs	r2, r2, r7
 80208da:	1a08      	subs	r0, r1, r0
 80208dc:	61da      	str	r2, [r3, #28]
 80208de:	4649      	mov	r1, r9
 80208e0:	2201      	movs	r2, #1
 80208e2:	1a41      	subs	r1, r0, r1
 80208e4:	4252      	negs	r2, r2
 80208e6:	4461      	add	r1, ip
 80208e8:	4694      	mov	ip, r2
 80208ea:	44e2      	add	sl, ip
 80208ec:	4652      	mov	r2, sl
 80208ee:	1b2d      	subs	r5, r5, r4
 80208f0:	19ed      	adds	r5, r5, r7
 80208f2:	615d      	str	r5, [r3, #20]
 80208f4:	6199      	str	r1, [r3, #24]
 80208f6:	3320      	adds	r3, #32
 80208f8:	2a00      	cmp	r2, #0
 80208fa:	d1c6      	bne.n	802088a <arm_radix4_butterfly_q31+0x4c6>
 80208fc:	b027      	add	sp, #156	@ 0x9c
 80208fe:	bc3c      	pop	{r2, r3, r4, r5}
 8020900:	4690      	mov	r8, r2
 8020902:	4699      	mov	r9, r3
 8020904:	46a2      	mov	sl, r4
 8020906:	46ab      	mov	fp, r5
 8020908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802090a:	469a      	mov	sl, r3
 802090c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802090e:	e7bc      	b.n	802088a <arm_radix4_butterfly_q31+0x4c6>

08020910 <arm_radix4_butterfly_inverse_q31>:
 8020910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020912:	464d      	mov	r5, r9
 8020914:	4644      	mov	r4, r8
 8020916:	465f      	mov	r7, fp
 8020918:	4656      	mov	r6, sl
 802091a:	b4f0      	push	{r4, r5, r6, r7}
 802091c:	b0a7      	sub	sp, #156	@ 0x9c
 802091e:	469c      	mov	ip, r3
 8020920:	9114      	str	r1, [sp, #80]	@ 0x50
 8020922:	0889      	lsrs	r1, r1, #2
 8020924:	9310      	str	r3, [sp, #64]	@ 0x40
 8020926:	00cb      	lsls	r3, r1, #3
 8020928:	0015      	movs	r5, r2
 802092a:	9223      	str	r2, [sp, #140]	@ 0x8c
 802092c:	18c2      	adds	r2, r0, r3
 802092e:	000c      	movs	r4, r1
 8020930:	9124      	str	r1, [sp, #144]	@ 0x90
 8020932:	18d1      	adds	r1, r2, r3
 8020934:	468b      	mov	fp, r1
 8020936:	469a      	mov	sl, r3
 8020938:	4663      	mov	r3, ip
 802093a:	44da      	add	sl, fp
 802093c:	46d0      	mov	r8, sl
 802093e:	4681      	mov	r9, r0
 8020940:	4692      	mov	sl, r2
 8020942:	0119      	lsls	r1, r3, #4
 8020944:	910d      	str	r1, [sp, #52]	@ 0x34
 8020946:	00d9      	lsls	r1, r3, #3
 8020948:	005b      	lsls	r3, r3, #1
 802094a:	4463      	add	r3, ip
 802094c:	910e      	str	r1, [sp, #56]	@ 0x38
 802094e:	00d9      	lsls	r1, r3, #3
 8020950:	9022      	str	r0, [sp, #136]	@ 0x88
 8020952:	9025      	str	r0, [sp, #148]	@ 0x94
 8020954:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020956:	9502      	str	r5, [sp, #8]
 8020958:	9500      	str	r5, [sp, #0]
 802095a:	9501      	str	r5, [sp, #4]
 802095c:	9409      	str	r4, [sp, #36]	@ 0x24
 802095e:	464b      	mov	r3, r9
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	4652      	mov	r2, sl
 8020964:	111c      	asrs	r4, r3, #4
 8020966:	465b      	mov	r3, fp
 8020968:	4648      	mov	r0, r9
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	6812      	ldr	r2, [r2, #0]
 802096e:	6840      	ldr	r0, [r0, #4]
 8020970:	111b      	asrs	r3, r3, #4
 8020972:	18e7      	adds	r7, r4, r3
 8020974:	1ae3      	subs	r3, r4, r3
 8020976:	1114      	asrs	r4, r2, #4
 8020978:	4642      	mov	r2, r8
 802097a:	1105      	asrs	r5, r0, #4
 802097c:	4658      	mov	r0, fp
 802097e:	6812      	ldr	r2, [r2, #0]
 8020980:	6840      	ldr	r0, [r0, #4]
 8020982:	9303      	str	r3, [sp, #12]
 8020984:	1113      	asrs	r3, r2, #4
 8020986:	18e2      	adds	r2, r4, r3
 8020988:	1103      	asrs	r3, r0, #4
 802098a:	18ee      	adds	r6, r5, r3
 802098c:	1ae8      	subs	r0, r5, r3
 802098e:	464d      	mov	r5, r9
 8020990:	18bb      	adds	r3, r7, r2
 8020992:	602b      	str	r3, [r5, #0]
 8020994:	4641      	mov	r1, r8
 8020996:	4655      	mov	r5, sl
 8020998:	6849      	ldr	r1, [r1, #4]
 802099a:	686d      	ldr	r5, [r5, #4]
 802099c:	110b      	asrs	r3, r1, #4
 802099e:	112d      	asrs	r5, r5, #4
 80209a0:	18eb      	adds	r3, r5, r3
 80209a2:	464d      	mov	r5, r9
 80209a4:	18f1      	adds	r1, r6, r3
 80209a6:	6069      	str	r1, [r5, #4]
 80209a8:	4655      	mov	r5, sl
 80209aa:	686d      	ldr	r5, [r5, #4]
 80209ac:	9004      	str	r0, [sp, #16]
 80209ae:	112c      	asrs	r4, r5, #4
 80209b0:	4645      	mov	r5, r8
 80209b2:	686d      	ldr	r5, [r5, #4]
 80209b4:	1129      	asrs	r1, r5, #4
 80209b6:	1a65      	subs	r5, r4, r1
 80209b8:	4651      	mov	r1, sl
 80209ba:	6809      	ldr	r1, [r1, #0]
 80209bc:	1abc      	subs	r4, r7, r2
 80209be:	1108      	asrs	r0, r1, #4
 80209c0:	4641      	mov	r1, r8
 80209c2:	17e2      	asrs	r2, r4, #31
 80209c4:	6809      	ldr	r1, [r1, #0]
 80209c6:	9207      	str	r2, [sp, #28]
 80209c8:	9a01      	ldr	r2, [sp, #4]
 80209ca:	1109      	asrs	r1, r1, #4
 80209cc:	6817      	ldr	r7, [r2, #0]
 80209ce:	1a41      	subs	r1, r0, r1
 80209d0:	9106      	str	r1, [sp, #24]
 80209d2:	0039      	movs	r1, r7
 80209d4:	17ff      	asrs	r7, r7, #31
 80209d6:	0038      	movs	r0, r7
 80209d8:	9505      	str	r5, [sp, #20]
 80209da:	1af5      	subs	r5, r6, r3
 80209dc:	17ef      	asrs	r7, r5, #31
 80209de:	970b      	str	r7, [sp, #44]	@ 0x2c
 80209e0:	6857      	ldr	r7, [r2, #4]
 80209e2:	0003      	movs	r3, r0
 80209e4:	17fe      	asrs	r6, r7, #31
 80209e6:	000a      	movs	r2, r1
 80209e8:	9108      	str	r1, [sp, #32]
 80209ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80209ec:	17e1      	asrs	r1, r4, #31
 80209ee:	0020      	movs	r0, r4
 80209f0:	960c      	str	r6, [sp, #48]	@ 0x30
 80209f2:	f7df fde5 	bl	80005c0 <__aeabi_lmul>
 80209f6:	003a      	movs	r2, r7
 80209f8:	17fb      	asrs	r3, r7, #31
 80209fa:	000e      	movs	r6, r1
 80209fc:	0028      	movs	r0, r5
 80209fe:	17e9      	asrs	r1, r5, #31
 8020a00:	f7df fdde 	bl	80005c0 <__aeabi_lmul>
 8020a04:	4653      	mov	r3, sl
 8020a06:	1a76      	subs	r6, r6, r1
 8020a08:	0076      	lsls	r6, r6, #1
 8020a0a:	601e      	str	r6, [r3, #0]
 8020a0c:	002a      	movs	r2, r5
 8020a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a10:	9808      	ldr	r0, [sp, #32]
 8020a12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020a14:	f7df fdd4 	bl	80005c0 <__aeabi_lmul>
 8020a18:	003a      	movs	r2, r7
 8020a1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a1c:	000d      	movs	r5, r1
 8020a1e:	0020      	movs	r0, r4
 8020a20:	9907      	ldr	r1, [sp, #28]
 8020a22:	f7df fdcd 	bl	80005c0 <__aeabi_lmul>
 8020a26:	4657      	mov	r7, sl
 8020a28:	186d      	adds	r5, r5, r1
 8020a2a:	006d      	lsls	r5, r5, #1
 8020a2c:	607d      	str	r5, [r7, #4]
 8020a2e:	9b03      	ldr	r3, [sp, #12]
 8020a30:	9e06      	ldr	r6, [sp, #24]
 8020a32:	9d05      	ldr	r5, [sp, #20]
 8020a34:	46b4      	mov	ip, r6
 8020a36:	1b5d      	subs	r5, r3, r5
 8020a38:	9b00      	ldr	r3, [sp, #0]
 8020a3a:	17ef      	asrs	r7, r5, #31
 8020a3c:	0039      	movs	r1, r7
 8020a3e:	681f      	ldr	r7, [r3, #0]
 8020a40:	17fc      	asrs	r4, r7, #31
 8020a42:	0020      	movs	r0, r4
 8020a44:	9c04      	ldr	r4, [sp, #16]
 8020a46:	4464      	add	r4, ip
 8020a48:	17e6      	asrs	r6, r4, #31
 8020a4a:	9407      	str	r4, [sp, #28]
 8020a4c:	9608      	str	r6, [sp, #32]
 8020a4e:	685e      	ldr	r6, [r3, #4]
 8020a50:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020a52:	17f2      	asrs	r2, r6, #31
 8020a54:	0003      	movs	r3, r0
 8020a56:	920c      	str	r2, [sp, #48]	@ 0x30
 8020a58:	0028      	movs	r0, r5
 8020a5a:	003a      	movs	r2, r7
 8020a5c:	910a      	str	r1, [sp, #40]	@ 0x28
 8020a5e:	f7df fdaf 	bl	80005c0 <__aeabi_lmul>
 8020a62:	0032      	movs	r2, r6
 8020a64:	17f3      	asrs	r3, r6, #31
 8020a66:	9807      	ldr	r0, [sp, #28]
 8020a68:	000c      	movs	r4, r1
 8020a6a:	9908      	ldr	r1, [sp, #32]
 8020a6c:	f7df fda8 	bl	80005c0 <__aeabi_lmul>
 8020a70:	4658      	mov	r0, fp
 8020a72:	1a64      	subs	r4, r4, r1
 8020a74:	0064      	lsls	r4, r4, #1
 8020a76:	9a07      	ldr	r2, [sp, #28]
 8020a78:	6004      	str	r4, [r0, #0]
 8020a7a:	9b08      	ldr	r3, [sp, #32]
 8020a7c:	0038      	movs	r0, r7
 8020a7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a80:	f7df fd9e 	bl	80005c0 <__aeabi_lmul>
 8020a84:	0032      	movs	r2, r6
 8020a86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a88:	000c      	movs	r4, r1
 8020a8a:	0028      	movs	r0, r5
 8020a8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020a8e:	f7df fd97 	bl	80005c0 <__aeabi_lmul>
 8020a92:	9d05      	ldr	r5, [sp, #20]
 8020a94:	465f      	mov	r7, fp
 8020a96:	46ac      	mov	ip, r5
 8020a98:	1864      	adds	r4, r4, r1
 8020a9a:	9903      	ldr	r1, [sp, #12]
 8020a9c:	0064      	lsls	r4, r4, #1
 8020a9e:	4461      	add	r1, ip
 8020aa0:	607c      	str	r4, [r7, #4]
 8020aa2:	000c      	movs	r4, r1
 8020aa4:	17c9      	asrs	r1, r1, #31
 8020aa6:	9105      	str	r1, [sp, #20]
 8020aa8:	9902      	ldr	r1, [sp, #8]
 8020aaa:	9804      	ldr	r0, [sp, #16]
 8020aac:	680d      	ldr	r5, [r1, #0]
 8020aae:	9e06      	ldr	r6, [sp, #24]
 8020ab0:	002b      	movs	r3, r5
 8020ab2:	17ed      	asrs	r5, r5, #31
 8020ab4:	684f      	ldr	r7, [r1, #4]
 8020ab6:	9503      	str	r5, [sp, #12]
 8020ab8:	1b85      	subs	r5, r0, r6
 8020aba:	17e8      	asrs	r0, r5, #31
 8020abc:	001a      	movs	r2, r3
 8020abe:	9006      	str	r0, [sp, #24]
 8020ac0:	17fe      	asrs	r6, r7, #31
 8020ac2:	9304      	str	r3, [sp, #16]
 8020ac4:	0020      	movs	r0, r4
 8020ac6:	9b03      	ldr	r3, [sp, #12]
 8020ac8:	17e1      	asrs	r1, r4, #31
 8020aca:	9607      	str	r6, [sp, #28]
 8020acc:	f7df fd78 	bl	80005c0 <__aeabi_lmul>
 8020ad0:	003a      	movs	r2, r7
 8020ad2:	000e      	movs	r6, r1
 8020ad4:	17fb      	asrs	r3, r7, #31
 8020ad6:	0028      	movs	r0, r5
 8020ad8:	17e9      	asrs	r1, r5, #31
 8020ada:	f7df fd71 	bl	80005c0 <__aeabi_lmul>
 8020ade:	4640      	mov	r0, r8
 8020ae0:	1a76      	subs	r6, r6, r1
 8020ae2:	0076      	lsls	r6, r6, #1
 8020ae4:	002a      	movs	r2, r5
 8020ae6:	9b06      	ldr	r3, [sp, #24]
 8020ae8:	6006      	str	r6, [r0, #0]
 8020aea:	9903      	ldr	r1, [sp, #12]
 8020aec:	9804      	ldr	r0, [sp, #16]
 8020aee:	f7df fd67 	bl	80005c0 <__aeabi_lmul>
 8020af2:	0020      	movs	r0, r4
 8020af4:	2408      	movs	r4, #8
 8020af6:	9b07      	ldr	r3, [sp, #28]
 8020af8:	000d      	movs	r5, r1
 8020afa:	003a      	movs	r2, r7
 8020afc:	9905      	ldr	r1, [sp, #20]
 8020afe:	f7df fd5f 	bl	80005c0 <__aeabi_lmul>
 8020b02:	4640      	mov	r0, r8
 8020b04:	46a4      	mov	ip, r4
 8020b06:	186d      	adds	r5, r5, r1
 8020b08:	006d      	lsls	r5, r5, #1
 8020b0a:	6045      	str	r5, [r0, #4]
 8020b0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020b0e:	44e1      	add	r9, ip
 8020b10:	3801      	subs	r0, #1
 8020b12:	9009      	str	r0, [sp, #36]	@ 0x24
 8020b14:	9a01      	ldr	r2, [sp, #4]
 8020b16:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020b18:	44e2      	add	sl, ip
 8020b1a:	44e3      	add	fp, ip
 8020b1c:	44e0      	add	r8, ip
 8020b1e:	46a4      	mov	ip, r4
 8020b20:	4462      	add	r2, ip
 8020b22:	9201      	str	r2, [sp, #4]
 8020b24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020b26:	9b00      	ldr	r3, [sp, #0]
 8020b28:	4694      	mov	ip, r2
 8020b2a:	4463      	add	r3, ip
 8020b2c:	9300      	str	r3, [sp, #0]
 8020b2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b30:	9902      	ldr	r1, [sp, #8]
 8020b32:	469c      	mov	ip, r3
 8020b34:	4461      	add	r1, ip
 8020b36:	9102      	str	r1, [sp, #8]
 8020b38:	2800      	cmp	r0, #0
 8020b3a:	d000      	beq.n	8020b3e <arm_radix4_butterfly_inverse_q31+0x22e>
 8020b3c:	e70f      	b.n	802095e <arm_radix4_butterfly_inverse_q31+0x4e>
 8020b3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020b40:	009b      	lsls	r3, r3, #2
 8020b42:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020b44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020b46:	9320      	str	r3, [sp, #128]	@ 0x80
 8020b48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020b4a:	2b04      	cmp	r3, #4
 8020b4c:	d800      	bhi.n	8020b50 <arm_radix4_butterfly_inverse_q31+0x240>
 8020b4e:	e17c      	b.n	8020e4a <arm_radix4_butterfly_inverse_q31+0x53a>
 8020b50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020b52:	0893      	lsrs	r3, r2, #2
 8020b54:	1e59      	subs	r1, r3, #1
 8020b56:	9321      	str	r3, [sp, #132]	@ 0x84
 8020b58:	00db      	lsls	r3, r3, #3
 8020b5a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020b5c:	00d3      	lsls	r3, r2, #3
 8020b5e:	9300      	str	r3, [sp, #0]
 8020b60:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020b62:	911a      	str	r1, [sp, #104]	@ 0x68
 8020b64:	00da      	lsls	r2, r3, #3
 8020b66:	921e      	str	r2, [sp, #120]	@ 0x78
 8020b68:	011a      	lsls	r2, r3, #4
 8020b6a:	921d      	str	r2, [sp, #116]	@ 0x74
 8020b6c:	001a      	movs	r2, r3
 8020b6e:	4694      	mov	ip, r2
 8020b70:	005b      	lsls	r3, r3, #1
 8020b72:	4463      	add	r3, ip
 8020b74:	00db      	lsls	r3, r3, #3
 8020b76:	931c      	str	r3, [sp, #112]	@ 0x70
 8020b78:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020b7a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020b7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020b7e:	9318      	str	r3, [sp, #96]	@ 0x60
 8020b80:	9319      	str	r3, [sp, #100]	@ 0x64
 8020b82:	9316      	str	r3, [sp, #88]	@ 0x58
 8020b84:	2300      	movs	r3, #0
 8020b86:	9315      	str	r3, [sp, #84]	@ 0x54
 8020b88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020b8a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020b8c:	681a      	ldr	r2, [r3, #0]
 8020b8e:	685b      	ldr	r3, [r3, #4]
 8020b90:	9205      	str	r2, [sp, #20]
 8020b92:	9306      	str	r3, [sp, #24]
 8020b94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020b96:	468c      	mov	ip, r1
 8020b98:	681a      	ldr	r2, [r3, #0]
 8020b9a:	685b      	ldr	r3, [r3, #4]
 8020b9c:	9207      	str	r2, [sp, #28]
 8020b9e:	9308      	str	r3, [sp, #32]
 8020ba0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020ba2:	681a      	ldr	r2, [r3, #0]
 8020ba4:	685b      	ldr	r3, [r3, #4]
 8020ba6:	9209      	str	r2, [sp, #36]	@ 0x24
 8020ba8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8020bac:	0013      	movs	r3, r2
 8020bae:	4463      	add	r3, ip
 8020bb0:	4698      	mov	r8, r3
 8020bb2:	0013      	movs	r3, r2
 8020bb4:	4442      	add	r2, r8
 8020bb6:	4691      	mov	r9, r2
 8020bb8:	001a      	movs	r2, r3
 8020bba:	444a      	add	r2, r9
 8020bbc:	4692      	mov	sl, r2
 8020bbe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020bc0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020bc2:	4293      	cmp	r3, r2
 8020bc4:	d800      	bhi.n	8020bc8 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8020bc6:	e0d9      	b.n	8020d7c <arm_radix4_butterfly_inverse_q31+0x46c>
 8020bc8:	4694      	mov	ip, r2
 8020bca:	4644      	mov	r4, r8
 8020bcc:	4655      	mov	r5, sl
 8020bce:	4688      	mov	r8, r1
 8020bd0:	9b07      	ldr	r3, [sp, #28]
 8020bd2:	17db      	asrs	r3, r3, #31
 8020bd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8020bd6:	9b08      	ldr	r3, [sp, #32]
 8020bd8:	17db      	asrs	r3, r3, #31
 8020bda:	930d      	str	r3, [sp, #52]	@ 0x34
 8020bdc:	9b05      	ldr	r3, [sp, #20]
 8020bde:	17db      	asrs	r3, r3, #31
 8020be0:	930e      	str	r3, [sp, #56]	@ 0x38
 8020be2:	9b06      	ldr	r3, [sp, #24]
 8020be4:	17db      	asrs	r3, r3, #31
 8020be6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bea:	17db      	asrs	r3, r3, #31
 8020bec:	9310      	str	r3, [sp, #64]	@ 0x40
 8020bee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020bf0:	17db      	asrs	r3, r3, #31
 8020bf2:	9311      	str	r3, [sp, #68]	@ 0x44
 8020bf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020bf6:	4463      	add	r3, ip
 8020bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020bfa:	4643      	mov	r3, r8
 8020bfc:	4641      	mov	r1, r8
 8020bfe:	681a      	ldr	r2, [r3, #0]
 8020c00:	464b      	mov	r3, r9
 8020c02:	684f      	ldr	r7, [r1, #4]
 8020c04:	4649      	mov	r1, r9
 8020c06:	681b      	ldr	r3, [r3, #0]
 8020c08:	18d6      	adds	r6, r2, r3
 8020c0a:	1ad3      	subs	r3, r2, r3
 8020c0c:	9301      	str	r3, [sp, #4]
 8020c0e:	684b      	ldr	r3, [r1, #4]
 8020c10:	1af9      	subs	r1, r7, r3
 8020c12:	9102      	str	r1, [sp, #8]
 8020c14:	6829      	ldr	r1, [r5, #0]
 8020c16:	18f8      	adds	r0, r7, r3
 8020c18:	468c      	mov	ip, r1
 8020c1a:	6827      	ldr	r7, [r4, #0]
 8020c1c:	4467      	add	r7, ip
 8020c1e:	003a      	movs	r2, r7
 8020c20:	19f3      	adds	r3, r6, r7
 8020c22:	4647      	mov	r7, r8
 8020c24:	109b      	asrs	r3, r3, #2
 8020c26:	603b      	str	r3, [r7, #0]
 8020c28:	6869      	ldr	r1, [r5, #4]
 8020c2a:	6867      	ldr	r7, [r4, #4]
 8020c2c:	468c      	mov	ip, r1
 8020c2e:	4467      	add	r7, ip
 8020c30:	003b      	movs	r3, r7
 8020c32:	19c1      	adds	r1, r0, r7
 8020c34:	4647      	mov	r7, r8
 8020c36:	1ab6      	subs	r6, r6, r2
 8020c38:	1089      	asrs	r1, r1, #2
 8020c3a:	6079      	str	r1, [r7, #4]
 8020c3c:	17f2      	asrs	r2, r6, #31
 8020c3e:	9900      	ldr	r1, [sp, #0]
 8020c40:	4692      	mov	sl, r2
 8020c42:	468c      	mov	ip, r1
 8020c44:	6867      	ldr	r7, [r4, #4]
 8020c46:	6869      	ldr	r1, [r5, #4]
 8020c48:	44e0      	add	r8, ip
 8020c4a:	1a7f      	subs	r7, r7, r1
 8020c4c:	9703      	str	r7, [sp, #12]
 8020c4e:	6821      	ldr	r1, [r4, #0]
 8020c50:	682f      	ldr	r7, [r5, #0]
 8020c52:	1bc9      	subs	r1, r1, r7
 8020c54:	1ac7      	subs	r7, r0, r3
 8020c56:	17fa      	asrs	r2, r7, #31
 8020c58:	4693      	mov	fp, r2
 8020c5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020c5c:	9a07      	ldr	r2, [sp, #28]
 8020c5e:	9104      	str	r1, [sp, #16]
 8020c60:	0030      	movs	r0, r6
 8020c62:	4651      	mov	r1, sl
 8020c64:	f7df fcac 	bl	80005c0 <__aeabi_lmul>
 8020c68:	9a08      	ldr	r2, [sp, #32]
 8020c6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c6c:	9112      	str	r1, [sp, #72]	@ 0x48
 8020c6e:	0038      	movs	r0, r7
 8020c70:	4659      	mov	r1, fp
 8020c72:	f7df fca5 	bl	80005c0 <__aeabi_lmul>
 8020c76:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020c78:	9a07      	ldr	r2, [sp, #28]
 8020c7a:	1a41      	subs	r1, r0, r1
 8020c7c:	1049      	asrs	r1, r1, #1
 8020c7e:	6021      	str	r1, [r4, #0]
 8020c80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020c82:	0038      	movs	r0, r7
 8020c84:	4659      	mov	r1, fp
 8020c86:	f7df fc9b 	bl	80005c0 <__aeabi_lmul>
 8020c8a:	9a08      	ldr	r2, [sp, #32]
 8020c8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c8e:	000f      	movs	r7, r1
 8020c90:	0030      	movs	r0, r6
 8020c92:	4651      	mov	r1, sl
 8020c94:	f7df fc94 	bl	80005c0 <__aeabi_lmul>
 8020c98:	9b00      	ldr	r3, [sp, #0]
 8020c9a:	187f      	adds	r7, r7, r1
 8020c9c:	469c      	mov	ip, r3
 8020c9e:	107f      	asrs	r7, r7, #1
 8020ca0:	6067      	str	r7, [r4, #4]
 8020ca2:	9a01      	ldr	r2, [sp, #4]
 8020ca4:	9f03      	ldr	r7, [sp, #12]
 8020ca6:	9802      	ldr	r0, [sp, #8]
 8020ca8:	1bd7      	subs	r7, r2, r7
 8020caa:	17fe      	asrs	r6, r7, #31
 8020cac:	0031      	movs	r1, r6
 8020cae:	9e04      	ldr	r6, [sp, #16]
 8020cb0:	4682      	mov	sl, r0
 8020cb2:	4464      	add	r4, ip
 8020cb4:	46b4      	mov	ip, r6
 8020cb6:	44e2      	add	sl, ip
 8020cb8:	4652      	mov	r2, sl
 8020cba:	17d2      	asrs	r2, r2, #31
 8020cbc:	4693      	mov	fp, r2
 8020cbe:	0038      	movs	r0, r7
 8020cc0:	9a05      	ldr	r2, [sp, #20]
 8020cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020cc4:	9112      	str	r1, [sp, #72]	@ 0x48
 8020cc6:	f7df fc7b 	bl	80005c0 <__aeabi_lmul>
 8020cca:	9a06      	ldr	r2, [sp, #24]
 8020ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cce:	000e      	movs	r6, r1
 8020cd0:	4650      	mov	r0, sl
 8020cd2:	4659      	mov	r1, fp
 8020cd4:	f7df fc74 	bl	80005c0 <__aeabi_lmul>
 8020cd8:	4648      	mov	r0, r9
 8020cda:	1a76      	subs	r6, r6, r1
 8020cdc:	1076      	asrs	r6, r6, #1
 8020cde:	6006      	str	r6, [r0, #0]
 8020ce0:	9a05      	ldr	r2, [sp, #20]
 8020ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020ce4:	4650      	mov	r0, sl
 8020ce6:	4659      	mov	r1, fp
 8020ce8:	f7df fc6a 	bl	80005c0 <__aeabi_lmul>
 8020cec:	9a06      	ldr	r2, [sp, #24]
 8020cee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cf0:	000e      	movs	r6, r1
 8020cf2:	0038      	movs	r0, r7
 8020cf4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020cf6:	f7df fc63 	bl	80005c0 <__aeabi_lmul>
 8020cfa:	9a00      	ldr	r2, [sp, #0]
 8020cfc:	9f03      	ldr	r7, [sp, #12]
 8020cfe:	4694      	mov	ip, r2
 8020d00:	1876      	adds	r6, r6, r1
 8020d02:	4649      	mov	r1, r9
 8020d04:	44e1      	add	r9, ip
 8020d06:	46bc      	mov	ip, r7
 8020d08:	9b01      	ldr	r3, [sp, #4]
 8020d0a:	1076      	asrs	r6, r6, #1
 8020d0c:	4463      	add	r3, ip
 8020d0e:	17df      	asrs	r7, r3, #31
 8020d10:	604e      	str	r6, [r1, #4]
 8020d12:	46ba      	mov	sl, r7
 8020d14:	001e      	movs	r6, r3
 8020d16:	9802      	ldr	r0, [sp, #8]
 8020d18:	9b04      	ldr	r3, [sp, #16]
 8020d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020d1c:	1ac7      	subs	r7, r0, r3
 8020d1e:	17fb      	asrs	r3, r7, #31
 8020d20:	469b      	mov	fp, r3
 8020d22:	0030      	movs	r0, r6
 8020d24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d26:	4651      	mov	r1, sl
 8020d28:	f7df fc4a 	bl	80005c0 <__aeabi_lmul>
 8020d2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020d30:	9101      	str	r1, [sp, #4]
 8020d32:	0038      	movs	r0, r7
 8020d34:	4659      	mov	r1, fp
 8020d36:	f7df fc43 	bl	80005c0 <__aeabi_lmul>
 8020d3a:	9801      	ldr	r0, [sp, #4]
 8020d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020d3e:	1a41      	subs	r1, r0, r1
 8020d40:	1049      	asrs	r1, r1, #1
 8020d42:	6029      	str	r1, [r5, #0]
 8020d44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d46:	0038      	movs	r0, r7
 8020d48:	4659      	mov	r1, fp
 8020d4a:	f7df fc39 	bl	80005c0 <__aeabi_lmul>
 8020d4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020d50:	000f      	movs	r7, r1
 8020d52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d54:	0030      	movs	r0, r6
 8020d56:	4651      	mov	r1, sl
 8020d58:	f7df fc32 	bl	80005c0 <__aeabi_lmul>
 8020d5c:	187f      	adds	r7, r7, r1
 8020d5e:	107f      	asrs	r7, r7, #1
 8020d60:	606f      	str	r7, [r5, #4]
 8020d62:	9a00      	ldr	r2, [sp, #0]
 8020d64:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020d66:	4694      	mov	ip, r2
 8020d68:	4465      	add	r5, ip
 8020d6a:	468c      	mov	ip, r1
 8020d6c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020d6e:	0013      	movs	r3, r2
 8020d70:	4462      	add	r2, ip
 8020d72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020d74:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020d76:	429a      	cmp	r2, r3
 8020d78:	d900      	bls.n	8020d7c <arm_radix4_butterfly_inverse_q31+0x46c>
 8020d7a:	e73e      	b.n	8020bfa <arm_radix4_butterfly_inverse_q31+0x2ea>
 8020d7c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8020d7e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020d80:	468c      	mov	ip, r1
 8020d82:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8020d84:	4462      	add	r2, ip
 8020d86:	468c      	mov	ip, r1
 8020d88:	9216      	str	r2, [sp, #88]	@ 0x58
 8020d8a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020d8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020d8e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020d90:	4462      	add	r2, ip
 8020d92:	468c      	mov	ip, r1
 8020d94:	9219      	str	r2, [sp, #100]	@ 0x64
 8020d96:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020d98:	3301      	adds	r3, #1
 8020d9a:	4462      	add	r2, ip
 8020d9c:	9218      	str	r2, [sp, #96]	@ 0x60
 8020d9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020da0:	9315      	str	r3, [sp, #84]	@ 0x54
 8020da2:	3208      	adds	r2, #8
 8020da4:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020da6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020da8:	4293      	cmp	r3, r2
 8020daa:	d800      	bhi.n	8020dae <arm_radix4_butterfly_inverse_q31+0x49e>
 8020dac:	e6ec      	b.n	8020b88 <arm_radix4_butterfly_inverse_q31+0x278>
 8020dae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020db0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020db2:	009b      	lsls	r3, r3, #2
 8020db4:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020db6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020db8:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020dba:	089b      	lsrs	r3, r3, #2
 8020dbc:	9320      	str	r3, [sp, #128]	@ 0x80
 8020dbe:	2b04      	cmp	r3, #4
 8020dc0:	d900      	bls.n	8020dc4 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8020dc2:	e6c5      	b.n	8020b50 <arm_radix4_butterfly_inverse_q31+0x240>
 8020dc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020dc6:	469a      	mov	sl, r3
 8020dc8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020dca:	681a      	ldr	r2, [r3, #0]
 8020dcc:	6918      	ldr	r0, [r3, #16]
 8020dce:	4691      	mov	r9, r2
 8020dd0:	464c      	mov	r4, r9
 8020dd2:	4680      	mov	r8, r0
 8020dd4:	69de      	ldr	r6, [r3, #28]
 8020dd6:	689d      	ldr	r5, [r3, #8]
 8020dd8:	46b4      	mov	ip, r6
 8020dda:	6998      	ldr	r0, [r3, #24]
 8020ddc:	1964      	adds	r4, r4, r5
 8020dde:	6859      	ldr	r1, [r3, #4]
 8020de0:	68da      	ldr	r2, [r3, #12]
 8020de2:	4444      	add	r4, r8
 8020de4:	695f      	ldr	r7, [r3, #20]
 8020de6:	1824      	adds	r4, r4, r0
 8020de8:	601c      	str	r4, [r3, #0]
 8020dea:	188c      	adds	r4, r1, r2
 8020dec:	19e4      	adds	r4, r4, r7
 8020dee:	4464      	add	r4, ip
 8020df0:	605c      	str	r4, [r3, #4]
 8020df2:	464c      	mov	r4, r9
 8020df4:	1b64      	subs	r4, r4, r5
 8020df6:	4444      	add	r4, r8
 8020df8:	1a24      	subs	r4, r4, r0
 8020dfa:	609c      	str	r4, [r3, #8]
 8020dfc:	1a8c      	subs	r4, r1, r2
 8020dfe:	19e4      	adds	r4, r4, r7
 8020e00:	1ba4      	subs	r4, r4, r6
 8020e02:	60dc      	str	r4, [r3, #12]
 8020e04:	464c      	mov	r4, r9
 8020e06:	4646      	mov	r6, r8
 8020e08:	1aa4      	subs	r4, r4, r2
 8020e0a:	1ba4      	subs	r4, r4, r6
 8020e0c:	4464      	add	r4, ip
 8020e0e:	611c      	str	r4, [r3, #16]
 8020e10:	194c      	adds	r4, r1, r5
 8020e12:	1be4      	subs	r4, r4, r7
 8020e14:	1a24      	subs	r4, r4, r0
 8020e16:	615c      	str	r4, [r3, #20]
 8020e18:	4644      	mov	r4, r8
 8020e1a:	4666      	mov	r6, ip
 8020e1c:	444a      	add	r2, r9
 8020e1e:	1b12      	subs	r2, r2, r4
 8020e20:	1b92      	subs	r2, r2, r6
 8020e22:	619a      	str	r2, [r3, #24]
 8020e24:	1b4a      	subs	r2, r1, r5
 8020e26:	1bd1      	subs	r1, r2, r7
 8020e28:	2201      	movs	r2, #1
 8020e2a:	4252      	negs	r2, r2
 8020e2c:	4694      	mov	ip, r2
 8020e2e:	44e2      	add	sl, ip
 8020e30:	4652      	mov	r2, sl
 8020e32:	1809      	adds	r1, r1, r0
 8020e34:	61d9      	str	r1, [r3, #28]
 8020e36:	3320      	adds	r3, #32
 8020e38:	2a00      	cmp	r2, #0
 8020e3a:	d1c6      	bne.n	8020dca <arm_radix4_butterfly_inverse_q31+0x4ba>
 8020e3c:	b027      	add	sp, #156	@ 0x9c
 8020e3e:	bc3c      	pop	{r2, r3, r4, r5}
 8020e40:	4690      	mov	r8, r2
 8020e42:	4699      	mov	r9, r3
 8020e44:	46a2      	mov	sl, r4
 8020e46:	46ab      	mov	fp, r5
 8020e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e4a:	469a      	mov	sl, r3
 8020e4c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020e4e:	e7bc      	b.n	8020dca <arm_radix4_butterfly_inverse_q31+0x4ba>

08020e50 <arm_cmplx_mag_squared_q31>:
 8020e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e52:	464f      	mov	r7, r9
 8020e54:	4646      	mov	r6, r8
 8020e56:	0004      	movs	r4, r0
 8020e58:	b4c0      	push	{r6, r7}
 8020e5a:	0016      	movs	r6, r2
 8020e5c:	000f      	movs	r7, r1
 8020e5e:	2a00      	cmp	r2, #0
 8020e60:	d018      	beq.n	8020e94 <arm_cmplx_mag_squared_q31+0x44>
 8020e62:	6823      	ldr	r3, [r4, #0]
 8020e64:	6822      	ldr	r2, [r4, #0]
 8020e66:	17d9      	asrs	r1, r3, #31
 8020e68:	6863      	ldr	r3, [r4, #4]
 8020e6a:	0010      	movs	r0, r2
 8020e6c:	4698      	mov	r8, r3
 8020e6e:	17db      	asrs	r3, r3, #31
 8020e70:	4699      	mov	r9, r3
 8020e72:	000b      	movs	r3, r1
 8020e74:	f7df fba4 	bl	80005c0 <__aeabi_lmul>
 8020e78:	4642      	mov	r2, r8
 8020e7a:	104d      	asrs	r5, r1, #1
 8020e7c:	464b      	mov	r3, r9
 8020e7e:	4640      	mov	r0, r8
 8020e80:	4649      	mov	r1, r9
 8020e82:	f7df fb9d 	bl	80005c0 <__aeabi_lmul>
 8020e86:	1049      	asrs	r1, r1, #1
 8020e88:	1869      	adds	r1, r5, r1
 8020e8a:	3e01      	subs	r6, #1
 8020e8c:	c702      	stmia	r7!, {r1}
 8020e8e:	3408      	adds	r4, #8
 8020e90:	2e00      	cmp	r6, #0
 8020e92:	d1e6      	bne.n	8020e62 <arm_cmplx_mag_squared_q31+0x12>
 8020e94:	bc0c      	pop	{r2, r3}
 8020e96:	4690      	mov	r8, r2
 8020e98:	4699      	mov	r9, r3
 8020e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020e9c <arm_mult_q31>:
 8020e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e9e:	4646      	mov	r6, r8
 8020ea0:	464f      	mov	r7, r9
 8020ea2:	4690      	mov	r8, r2
 8020ea4:	b4c0      	push	{r6, r7}
 8020ea6:	001d      	movs	r5, r3
 8020ea8:	0006      	movs	r6, r0
 8020eaa:	000f      	movs	r7, r1
 8020eac:	2400      	movs	r4, #0
 8020eae:	2b00      	cmp	r3, #0
 8020eb0:	d020      	beq.n	8020ef4 <arm_mult_q31+0x58>
 8020eb2:	4b12      	ldr	r3, [pc, #72]	@ (8020efc <arm_mult_q31+0x60>)
 8020eb4:	4699      	mov	r9, r3
 8020eb6:	e007      	b.n	8020ec8 <arm_mult_q31+0x2c>
 8020eb8:	464b      	mov	r3, r9
 8020eba:	4059      	eors	r1, r3
 8020ebc:	4643      	mov	r3, r8
 8020ebe:	3d01      	subs	r5, #1
 8020ec0:	5119      	str	r1, [r3, r4]
 8020ec2:	3404      	adds	r4, #4
 8020ec4:	2d00      	cmp	r5, #0
 8020ec6:	d015      	beq.n	8020ef4 <arm_mult_q31+0x58>
 8020ec8:	5933      	ldr	r3, [r6, r4]
 8020eca:	593a      	ldr	r2, [r7, r4]
 8020ecc:	17d9      	asrs	r1, r3, #31
 8020ece:	593b      	ldr	r3, [r7, r4]
 8020ed0:	5930      	ldr	r0, [r6, r4]
 8020ed2:	17db      	asrs	r3, r3, #31
 8020ed4:	f7df fb74 	bl	80005c0 <__aeabi_lmul>
 8020ed8:	004b      	lsls	r3, r1, #1
 8020eda:	0fc0      	lsrs	r0, r0, #31
 8020edc:	4318      	orrs	r0, r3
 8020ede:	17c9      	asrs	r1, r1, #31
 8020ee0:	17c3      	asrs	r3, r0, #31
 8020ee2:	428b      	cmp	r3, r1
 8020ee4:	d1e8      	bne.n	8020eb8 <arm_mult_q31+0x1c>
 8020ee6:	0001      	movs	r1, r0
 8020ee8:	4643      	mov	r3, r8
 8020eea:	3d01      	subs	r5, #1
 8020eec:	5119      	str	r1, [r3, r4]
 8020eee:	3404      	adds	r4, #4
 8020ef0:	2d00      	cmp	r5, #0
 8020ef2:	d1e9      	bne.n	8020ec8 <arm_mult_q31+0x2c>
 8020ef4:	bc0c      	pop	{r2, r3}
 8020ef6:	4690      	mov	r8, r2
 8020ef8:	4699      	mov	r9, r3
 8020efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020efc:	7fffffff 	.word	0x7fffffff

08020f00 <arm_add_q31>:
 8020f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f02:	465f      	mov	r7, fp
 8020f04:	4656      	mov	r6, sl
 8020f06:	464d      	mov	r5, r9
 8020f08:	4644      	mov	r4, r8
 8020f0a:	b4f0      	push	{r4, r5, r6, r7}
 8020f0c:	4693      	mov	fp, r2
 8020f0e:	b083      	sub	sp, #12
 8020f10:	4681      	mov	r9, r0
 8020f12:	468a      	mov	sl, r1
 8020f14:	4698      	mov	r8, r3
 8020f16:	2200      	movs	r2, #0
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d020      	beq.n	8020f5e <arm_add_q31+0x5e>
 8020f1c:	4649      	mov	r1, r9
 8020f1e:	4653      	mov	r3, sl
 8020f20:	588e      	ldr	r6, [r1, r2]
 8020f22:	589b      	ldr	r3, [r3, r2]
 8020f24:	17f7      	asrs	r7, r6, #31
 8020f26:	001c      	movs	r4, r3
 8020f28:	0030      	movs	r0, r6
 8020f2a:	0039      	movs	r1, r7
 8020f2c:	17dd      	asrs	r5, r3, #31
 8020f2e:	46b4      	mov	ip, r6
 8020f30:	1900      	adds	r0, r0, r4
 8020f32:	4169      	adcs	r1, r5
 8020f34:	4463      	add	r3, ip
 8020f36:	9000      	str	r0, [sp, #0]
 8020f38:	9101      	str	r1, [sp, #4]
 8020f3a:	17d9      	asrs	r1, r3, #31
 8020f3c:	468c      	mov	ip, r1
 8020f3e:	9901      	ldr	r1, [sp, #4]
 8020f40:	458c      	cmp	ip, r1
 8020f42:	d002      	beq.n	8020f4a <arm_add_q31+0x4a>
 8020f44:	17cb      	asrs	r3, r1, #31
 8020f46:	4909      	ldr	r1, [pc, #36]	@ (8020f6c <arm_add_q31+0x6c>)
 8020f48:	404b      	eors	r3, r1
 8020f4a:	4659      	mov	r1, fp
 8020f4c:	508b      	str	r3, [r1, r2]
 8020f4e:	2301      	movs	r3, #1
 8020f50:	425b      	negs	r3, r3
 8020f52:	469c      	mov	ip, r3
 8020f54:	44e0      	add	r8, ip
 8020f56:	4643      	mov	r3, r8
 8020f58:	3204      	adds	r2, #4
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d1de      	bne.n	8020f1c <arm_add_q31+0x1c>
 8020f5e:	b003      	add	sp, #12
 8020f60:	bc3c      	pop	{r2, r3, r4, r5}
 8020f62:	4690      	mov	r8, r2
 8020f64:	4699      	mov	r9, r3
 8020f66:	46a2      	mov	sl, r4
 8020f68:	46ab      	mov	fp, r5
 8020f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f6c:	7fffffff 	.word	0x7fffffff

08020f70 <atof>:
 8020f70:	b510      	push	{r4, lr}
 8020f72:	2100      	movs	r1, #0
 8020f74:	f000 fe12 	bl	8021b9c <strtod>
 8020f78:	bd10      	pop	{r4, pc}

08020f7a <atoi>:
 8020f7a:	b510      	push	{r4, lr}
 8020f7c:	220a      	movs	r2, #10
 8020f7e:	2100      	movs	r1, #0
 8020f80:	f000 fea4 	bl	8021ccc <strtol>
 8020f84:	bd10      	pop	{r4, pc}
	...

08020f88 <sulp>:
 8020f88:	b570      	push	{r4, r5, r6, lr}
 8020f8a:	0016      	movs	r6, r2
 8020f8c:	000d      	movs	r5, r1
 8020f8e:	f003 fd15 	bl	80249bc <__ulp>
 8020f92:	2e00      	cmp	r6, #0
 8020f94:	d00d      	beq.n	8020fb2 <sulp+0x2a>
 8020f96:	236b      	movs	r3, #107	@ 0x6b
 8020f98:	006a      	lsls	r2, r5, #1
 8020f9a:	0d52      	lsrs	r2, r2, #21
 8020f9c:	1a9b      	subs	r3, r3, r2
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	dd07      	ble.n	8020fb2 <sulp+0x2a>
 8020fa2:	2400      	movs	r4, #0
 8020fa4:	4a03      	ldr	r2, [pc, #12]	@ (8020fb4 <sulp+0x2c>)
 8020fa6:	051b      	lsls	r3, r3, #20
 8020fa8:	189d      	adds	r5, r3, r2
 8020faa:	002b      	movs	r3, r5
 8020fac:	0022      	movs	r2, r4
 8020fae:	f7e1 fb45 	bl	800263c <__aeabi_dmul>
 8020fb2:	bd70      	pop	{r4, r5, r6, pc}
 8020fb4:	3ff00000 	.word	0x3ff00000

08020fb8 <_strtod_l>:
 8020fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020fba:	b0a3      	sub	sp, #140	@ 0x8c
 8020fbc:	921b      	str	r2, [sp, #108]	@ 0x6c
 8020fbe:	2200      	movs	r2, #0
 8020fc0:	2600      	movs	r6, #0
 8020fc2:	2700      	movs	r7, #0
 8020fc4:	9005      	str	r0, [sp, #20]
 8020fc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8020fc8:	921e      	str	r2, [sp, #120]	@ 0x78
 8020fca:	911d      	str	r1, [sp, #116]	@ 0x74
 8020fcc:	780a      	ldrb	r2, [r1, #0]
 8020fce:	2a2b      	cmp	r2, #43	@ 0x2b
 8020fd0:	d053      	beq.n	802107a <_strtod_l+0xc2>
 8020fd2:	d83f      	bhi.n	8021054 <_strtod_l+0x9c>
 8020fd4:	2a0d      	cmp	r2, #13
 8020fd6:	d839      	bhi.n	802104c <_strtod_l+0x94>
 8020fd8:	2a08      	cmp	r2, #8
 8020fda:	d839      	bhi.n	8021050 <_strtod_l+0x98>
 8020fdc:	2a00      	cmp	r2, #0
 8020fde:	d042      	beq.n	8021066 <_strtod_l+0xae>
 8020fe0:	2200      	movs	r2, #0
 8020fe2:	9212      	str	r2, [sp, #72]	@ 0x48
 8020fe4:	2100      	movs	r1, #0
 8020fe6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8020fe8:	910c      	str	r1, [sp, #48]	@ 0x30
 8020fea:	782a      	ldrb	r2, [r5, #0]
 8020fec:	2a30      	cmp	r2, #48	@ 0x30
 8020fee:	d000      	beq.n	8020ff2 <_strtod_l+0x3a>
 8020ff0:	e083      	b.n	80210fa <_strtod_l+0x142>
 8020ff2:	786a      	ldrb	r2, [r5, #1]
 8020ff4:	3120      	adds	r1, #32
 8020ff6:	438a      	bics	r2, r1
 8020ff8:	2a58      	cmp	r2, #88	@ 0x58
 8020ffa:	d000      	beq.n	8020ffe <_strtod_l+0x46>
 8020ffc:	e073      	b.n	80210e6 <_strtod_l+0x12e>
 8020ffe:	9302      	str	r3, [sp, #8]
 8021000:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021002:	4a95      	ldr	r2, [pc, #596]	@ (8021258 <_strtod_l+0x2a0>)
 8021004:	9301      	str	r3, [sp, #4]
 8021006:	ab1e      	add	r3, sp, #120	@ 0x78
 8021008:	9300      	str	r3, [sp, #0]
 802100a:	9805      	ldr	r0, [sp, #20]
 802100c:	ab1f      	add	r3, sp, #124	@ 0x7c
 802100e:	a91d      	add	r1, sp, #116	@ 0x74
 8021010:	f002 fd84 	bl	8023b1c <__gethex>
 8021014:	230f      	movs	r3, #15
 8021016:	0002      	movs	r2, r0
 8021018:	401a      	ands	r2, r3
 802101a:	0004      	movs	r4, r0
 802101c:	9206      	str	r2, [sp, #24]
 802101e:	4218      	tst	r0, r3
 8021020:	d005      	beq.n	802102e <_strtod_l+0x76>
 8021022:	2a06      	cmp	r2, #6
 8021024:	d12b      	bne.n	802107e <_strtod_l+0xc6>
 8021026:	2300      	movs	r3, #0
 8021028:	3501      	adds	r5, #1
 802102a:	951d      	str	r5, [sp, #116]	@ 0x74
 802102c:	9312      	str	r3, [sp, #72]	@ 0x48
 802102e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021030:	2b00      	cmp	r3, #0
 8021032:	d002      	beq.n	802103a <_strtod_l+0x82>
 8021034:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021036:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021038:	6013      	str	r3, [r2, #0]
 802103a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802103c:	2b00      	cmp	r3, #0
 802103e:	d019      	beq.n	8021074 <_strtod_l+0xbc>
 8021040:	2380      	movs	r3, #128	@ 0x80
 8021042:	0030      	movs	r0, r6
 8021044:	061b      	lsls	r3, r3, #24
 8021046:	18f9      	adds	r1, r7, r3
 8021048:	b023      	add	sp, #140	@ 0x8c
 802104a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802104c:	2a20      	cmp	r2, #32
 802104e:	d1c7      	bne.n	8020fe0 <_strtod_l+0x28>
 8021050:	3101      	adds	r1, #1
 8021052:	e7ba      	b.n	8020fca <_strtod_l+0x12>
 8021054:	2a2d      	cmp	r2, #45	@ 0x2d
 8021056:	d1c3      	bne.n	8020fe0 <_strtod_l+0x28>
 8021058:	3a2c      	subs	r2, #44	@ 0x2c
 802105a:	9212      	str	r2, [sp, #72]	@ 0x48
 802105c:	1c4a      	adds	r2, r1, #1
 802105e:	921d      	str	r2, [sp, #116]	@ 0x74
 8021060:	784a      	ldrb	r2, [r1, #1]
 8021062:	2a00      	cmp	r2, #0
 8021064:	d1be      	bne.n	8020fe4 <_strtod_l+0x2c>
 8021066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021068:	931d      	str	r3, [sp, #116]	@ 0x74
 802106a:	2300      	movs	r3, #0
 802106c:	9312      	str	r3, [sp, #72]	@ 0x48
 802106e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021070:	2b00      	cmp	r3, #0
 8021072:	d1df      	bne.n	8021034 <_strtod_l+0x7c>
 8021074:	0030      	movs	r0, r6
 8021076:	0039      	movs	r1, r7
 8021078:	e7e6      	b.n	8021048 <_strtod_l+0x90>
 802107a:	2200      	movs	r2, #0
 802107c:	e7ed      	b.n	802105a <_strtod_l+0xa2>
 802107e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8021080:	2a00      	cmp	r2, #0
 8021082:	d007      	beq.n	8021094 <_strtod_l+0xdc>
 8021084:	2135      	movs	r1, #53	@ 0x35
 8021086:	a820      	add	r0, sp, #128	@ 0x80
 8021088:	f003 fd8e 	bl	8024ba8 <__copybits>
 802108c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802108e:	9805      	ldr	r0, [sp, #20]
 8021090:	f003 f948 	bl	8024324 <_Bfree>
 8021094:	9806      	ldr	r0, [sp, #24]
 8021096:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021098:	3801      	subs	r0, #1
 802109a:	2804      	cmp	r0, #4
 802109c:	d806      	bhi.n	80210ac <_strtod_l+0xf4>
 802109e:	f7df f86d 	bl	800017c <__gnu_thumb1_case_uqi>
 80210a2:	0312      	.short	0x0312
 80210a4:	1e1c      	.short	0x1e1c
 80210a6:	12          	.byte	0x12
 80210a7:	00          	.byte	0x00
 80210a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80210aa:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 80210ac:	05e4      	lsls	r4, r4, #23
 80210ae:	d502      	bpl.n	80210b6 <_strtod_l+0xfe>
 80210b0:	2380      	movs	r3, #128	@ 0x80
 80210b2:	061b      	lsls	r3, r3, #24
 80210b4:	431f      	orrs	r7, r3
 80210b6:	4b69      	ldr	r3, [pc, #420]	@ (802125c <_strtod_l+0x2a4>)
 80210b8:	423b      	tst	r3, r7
 80210ba:	d1b8      	bne.n	802102e <_strtod_l+0x76>
 80210bc:	f001 fdb2 	bl	8022c24 <__errno>
 80210c0:	2322      	movs	r3, #34	@ 0x22
 80210c2:	6003      	str	r3, [r0, #0]
 80210c4:	e7b3      	b.n	802102e <_strtod_l+0x76>
 80210c6:	4966      	ldr	r1, [pc, #408]	@ (8021260 <_strtod_l+0x2a8>)
 80210c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80210ca:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80210cc:	400a      	ands	r2, r1
 80210ce:	4965      	ldr	r1, [pc, #404]	@ (8021264 <_strtod_l+0x2ac>)
 80210d0:	185b      	adds	r3, r3, r1
 80210d2:	051b      	lsls	r3, r3, #20
 80210d4:	431a      	orrs	r2, r3
 80210d6:	0017      	movs	r7, r2
 80210d8:	e7e8      	b.n	80210ac <_strtod_l+0xf4>
 80210da:	4f60      	ldr	r7, [pc, #384]	@ (802125c <_strtod_l+0x2a4>)
 80210dc:	e7e6      	b.n	80210ac <_strtod_l+0xf4>
 80210de:	2601      	movs	r6, #1
 80210e0:	4f61      	ldr	r7, [pc, #388]	@ (8021268 <_strtod_l+0x2b0>)
 80210e2:	4276      	negs	r6, r6
 80210e4:	e7e2      	b.n	80210ac <_strtod_l+0xf4>
 80210e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80210e8:	1c5a      	adds	r2, r3, #1
 80210ea:	921d      	str	r2, [sp, #116]	@ 0x74
 80210ec:	785b      	ldrb	r3, [r3, #1]
 80210ee:	2b30      	cmp	r3, #48	@ 0x30
 80210f0:	d0f9      	beq.n	80210e6 <_strtod_l+0x12e>
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	d09b      	beq.n	802102e <_strtod_l+0x76>
 80210f6:	2301      	movs	r3, #1
 80210f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80210fa:	2500      	movs	r5, #0
 80210fc:	220a      	movs	r2, #10
 80210fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021100:	950d      	str	r5, [sp, #52]	@ 0x34
 8021102:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021104:	9508      	str	r5, [sp, #32]
 8021106:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8021108:	7804      	ldrb	r4, [r0, #0]
 802110a:	0023      	movs	r3, r4
 802110c:	3b30      	subs	r3, #48	@ 0x30
 802110e:	b2d9      	uxtb	r1, r3
 8021110:	2909      	cmp	r1, #9
 8021112:	d927      	bls.n	8021164 <_strtod_l+0x1ac>
 8021114:	2201      	movs	r2, #1
 8021116:	4955      	ldr	r1, [pc, #340]	@ (802126c <_strtod_l+0x2b4>)
 8021118:	f001 fcf6 	bl	8022b08 <strncmp>
 802111c:	2800      	cmp	r0, #0
 802111e:	d031      	beq.n	8021184 <_strtod_l+0x1cc>
 8021120:	2000      	movs	r0, #0
 8021122:	0023      	movs	r3, r4
 8021124:	4684      	mov	ip, r0
 8021126:	9a08      	ldr	r2, [sp, #32]
 8021128:	900e      	str	r0, [sp, #56]	@ 0x38
 802112a:	9206      	str	r2, [sp, #24]
 802112c:	2220      	movs	r2, #32
 802112e:	0019      	movs	r1, r3
 8021130:	4391      	bics	r1, r2
 8021132:	000a      	movs	r2, r1
 8021134:	2100      	movs	r1, #0
 8021136:	9107      	str	r1, [sp, #28]
 8021138:	2a45      	cmp	r2, #69	@ 0x45
 802113a:	d000      	beq.n	802113e <_strtod_l+0x186>
 802113c:	e0c0      	b.n	80212c0 <_strtod_l+0x308>
 802113e:	9b06      	ldr	r3, [sp, #24]
 8021140:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021142:	4303      	orrs	r3, r0
 8021144:	4313      	orrs	r3, r2
 8021146:	428b      	cmp	r3, r1
 8021148:	d08d      	beq.n	8021066 <_strtod_l+0xae>
 802114a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802114c:	9309      	str	r3, [sp, #36]	@ 0x24
 802114e:	3301      	adds	r3, #1
 8021150:	931d      	str	r3, [sp, #116]	@ 0x74
 8021152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021154:	785b      	ldrb	r3, [r3, #1]
 8021156:	2b2b      	cmp	r3, #43	@ 0x2b
 8021158:	d070      	beq.n	802123c <_strtod_l+0x284>
 802115a:	000c      	movs	r4, r1
 802115c:	2b2d      	cmp	r3, #45	@ 0x2d
 802115e:	d173      	bne.n	8021248 <_strtod_l+0x290>
 8021160:	2401      	movs	r4, #1
 8021162:	e06c      	b.n	802123e <_strtod_l+0x286>
 8021164:	9908      	ldr	r1, [sp, #32]
 8021166:	2908      	cmp	r1, #8
 8021168:	dc09      	bgt.n	802117e <_strtod_l+0x1c6>
 802116a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802116c:	4351      	muls	r1, r2
 802116e:	185b      	adds	r3, r3, r1
 8021170:	930d      	str	r3, [sp, #52]	@ 0x34
 8021172:	9b08      	ldr	r3, [sp, #32]
 8021174:	3001      	adds	r0, #1
 8021176:	3301      	adds	r3, #1
 8021178:	9308      	str	r3, [sp, #32]
 802117a:	901d      	str	r0, [sp, #116]	@ 0x74
 802117c:	e7c3      	b.n	8021106 <_strtod_l+0x14e>
 802117e:	4355      	muls	r5, r2
 8021180:	195d      	adds	r5, r3, r5
 8021182:	e7f6      	b.n	8021172 <_strtod_l+0x1ba>
 8021184:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021186:	1c5a      	adds	r2, r3, #1
 8021188:	921d      	str	r2, [sp, #116]	@ 0x74
 802118a:	9a08      	ldr	r2, [sp, #32]
 802118c:	785b      	ldrb	r3, [r3, #1]
 802118e:	2a00      	cmp	r2, #0
 8021190:	d03a      	beq.n	8021208 <_strtod_l+0x250>
 8021192:	900e      	str	r0, [sp, #56]	@ 0x38
 8021194:	9206      	str	r2, [sp, #24]
 8021196:	001a      	movs	r2, r3
 8021198:	3a30      	subs	r2, #48	@ 0x30
 802119a:	2a09      	cmp	r2, #9
 802119c:	d912      	bls.n	80211c4 <_strtod_l+0x20c>
 802119e:	2201      	movs	r2, #1
 80211a0:	4694      	mov	ip, r2
 80211a2:	e7c3      	b.n	802112c <_strtod_l+0x174>
 80211a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80211a6:	3001      	adds	r0, #1
 80211a8:	1c5a      	adds	r2, r3, #1
 80211aa:	921d      	str	r2, [sp, #116]	@ 0x74
 80211ac:	785b      	ldrb	r3, [r3, #1]
 80211ae:	2b30      	cmp	r3, #48	@ 0x30
 80211b0:	d0f8      	beq.n	80211a4 <_strtod_l+0x1ec>
 80211b2:	001a      	movs	r2, r3
 80211b4:	3a31      	subs	r2, #49	@ 0x31
 80211b6:	2a08      	cmp	r2, #8
 80211b8:	d83b      	bhi.n	8021232 <_strtod_l+0x27a>
 80211ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80211bc:	2000      	movs	r0, #0
 80211be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80211c0:	9006      	str	r0, [sp, #24]
 80211c2:	9213      	str	r2, [sp, #76]	@ 0x4c
 80211c4:	001a      	movs	r2, r3
 80211c6:	1c41      	adds	r1, r0, #1
 80211c8:	3a30      	subs	r2, #48	@ 0x30
 80211ca:	2b30      	cmp	r3, #48	@ 0x30
 80211cc:	d016      	beq.n	80211fc <_strtod_l+0x244>
 80211ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80211d0:	185b      	adds	r3, r3, r1
 80211d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80211d4:	9b06      	ldr	r3, [sp, #24]
 80211d6:	210a      	movs	r1, #10
 80211d8:	469c      	mov	ip, r3
 80211da:	4484      	add	ip, r0
 80211dc:	459c      	cmp	ip, r3
 80211de:	d115      	bne.n	802120c <_strtod_l+0x254>
 80211e0:	9906      	ldr	r1, [sp, #24]
 80211e2:	9b06      	ldr	r3, [sp, #24]
 80211e4:	3101      	adds	r1, #1
 80211e6:	1809      	adds	r1, r1, r0
 80211e8:	181b      	adds	r3, r3, r0
 80211ea:	9106      	str	r1, [sp, #24]
 80211ec:	2b08      	cmp	r3, #8
 80211ee:	dc19      	bgt.n	8021224 <_strtod_l+0x26c>
 80211f0:	230a      	movs	r3, #10
 80211f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80211f4:	434b      	muls	r3, r1
 80211f6:	2100      	movs	r1, #0
 80211f8:	18d3      	adds	r3, r2, r3
 80211fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80211fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80211fe:	0008      	movs	r0, r1
 8021200:	1c5a      	adds	r2, r3, #1
 8021202:	921d      	str	r2, [sp, #116]	@ 0x74
 8021204:	785b      	ldrb	r3, [r3, #1]
 8021206:	e7c6      	b.n	8021196 <_strtod_l+0x1de>
 8021208:	9808      	ldr	r0, [sp, #32]
 802120a:	e7d0      	b.n	80211ae <_strtod_l+0x1f6>
 802120c:	1c5c      	adds	r4, r3, #1
 802120e:	2b08      	cmp	r3, #8
 8021210:	dc04      	bgt.n	802121c <_strtod_l+0x264>
 8021212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021214:	434b      	muls	r3, r1
 8021216:	930d      	str	r3, [sp, #52]	@ 0x34
 8021218:	0023      	movs	r3, r4
 802121a:	e7df      	b.n	80211dc <_strtod_l+0x224>
 802121c:	2c10      	cmp	r4, #16
 802121e:	dcfb      	bgt.n	8021218 <_strtod_l+0x260>
 8021220:	434d      	muls	r5, r1
 8021222:	e7f9      	b.n	8021218 <_strtod_l+0x260>
 8021224:	2100      	movs	r1, #0
 8021226:	2b0f      	cmp	r3, #15
 8021228:	dce8      	bgt.n	80211fc <_strtod_l+0x244>
 802122a:	230a      	movs	r3, #10
 802122c:	435d      	muls	r5, r3
 802122e:	1955      	adds	r5, r2, r5
 8021230:	e7e4      	b.n	80211fc <_strtod_l+0x244>
 8021232:	2200      	movs	r2, #0
 8021234:	920e      	str	r2, [sp, #56]	@ 0x38
 8021236:	9206      	str	r2, [sp, #24]
 8021238:	3201      	adds	r2, #1
 802123a:	e7b1      	b.n	80211a0 <_strtod_l+0x1e8>
 802123c:	2400      	movs	r4, #0
 802123e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021240:	3302      	adds	r3, #2
 8021242:	931d      	str	r3, [sp, #116]	@ 0x74
 8021244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021246:	789b      	ldrb	r3, [r3, #2]
 8021248:	001a      	movs	r2, r3
 802124a:	3a30      	subs	r2, #48	@ 0x30
 802124c:	2a09      	cmp	r2, #9
 802124e:	d913      	bls.n	8021278 <_strtod_l+0x2c0>
 8021250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021252:	921d      	str	r2, [sp, #116]	@ 0x74
 8021254:	2200      	movs	r2, #0
 8021256:	e032      	b.n	80212be <_strtod_l+0x306>
 8021258:	080294e8 	.word	0x080294e8
 802125c:	7ff00000 	.word	0x7ff00000
 8021260:	ffefffff 	.word	0xffefffff
 8021264:	00000433 	.word	0x00000433
 8021268:	7fffffff 	.word	0x7fffffff
 802126c:	080294d0 	.word	0x080294d0
 8021270:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021272:	1c5a      	adds	r2, r3, #1
 8021274:	921d      	str	r2, [sp, #116]	@ 0x74
 8021276:	785b      	ldrb	r3, [r3, #1]
 8021278:	2b30      	cmp	r3, #48	@ 0x30
 802127a:	d0f9      	beq.n	8021270 <_strtod_l+0x2b8>
 802127c:	2200      	movs	r2, #0
 802127e:	9207      	str	r2, [sp, #28]
 8021280:	001a      	movs	r2, r3
 8021282:	3a31      	subs	r2, #49	@ 0x31
 8021284:	2a08      	cmp	r2, #8
 8021286:	d81b      	bhi.n	80212c0 <_strtod_l+0x308>
 8021288:	3b30      	subs	r3, #48	@ 0x30
 802128a:	9310      	str	r3, [sp, #64]	@ 0x40
 802128c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802128e:	9307      	str	r3, [sp, #28]
 8021290:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021292:	1c59      	adds	r1, r3, #1
 8021294:	911d      	str	r1, [sp, #116]	@ 0x74
 8021296:	785b      	ldrb	r3, [r3, #1]
 8021298:	001a      	movs	r2, r3
 802129a:	3a30      	subs	r2, #48	@ 0x30
 802129c:	2a09      	cmp	r2, #9
 802129e:	d93a      	bls.n	8021316 <_strtod_l+0x35e>
 80212a0:	9a07      	ldr	r2, [sp, #28]
 80212a2:	1a8a      	subs	r2, r1, r2
 80212a4:	49b4      	ldr	r1, [pc, #720]	@ (8021578 <_strtod_l+0x5c0>)
 80212a6:	9107      	str	r1, [sp, #28]
 80212a8:	2a08      	cmp	r2, #8
 80212aa:	dc04      	bgt.n	80212b6 <_strtod_l+0x2fe>
 80212ac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80212ae:	9207      	str	r2, [sp, #28]
 80212b0:	428a      	cmp	r2, r1
 80212b2:	dd00      	ble.n	80212b6 <_strtod_l+0x2fe>
 80212b4:	9107      	str	r1, [sp, #28]
 80212b6:	2c00      	cmp	r4, #0
 80212b8:	d002      	beq.n	80212c0 <_strtod_l+0x308>
 80212ba:	9a07      	ldr	r2, [sp, #28]
 80212bc:	4252      	negs	r2, r2
 80212be:	9207      	str	r2, [sp, #28]
 80212c0:	9a06      	ldr	r2, [sp, #24]
 80212c2:	2a00      	cmp	r2, #0
 80212c4:	d14d      	bne.n	8021362 <_strtod_l+0x3aa>
 80212c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80212c8:	4310      	orrs	r0, r2
 80212ca:	d000      	beq.n	80212ce <_strtod_l+0x316>
 80212cc:	e6af      	b.n	802102e <_strtod_l+0x76>
 80212ce:	4662      	mov	r2, ip
 80212d0:	2a00      	cmp	r2, #0
 80212d2:	d000      	beq.n	80212d6 <_strtod_l+0x31e>
 80212d4:	e6c7      	b.n	8021066 <_strtod_l+0xae>
 80212d6:	2b69      	cmp	r3, #105	@ 0x69
 80212d8:	d027      	beq.n	802132a <_strtod_l+0x372>
 80212da:	dc23      	bgt.n	8021324 <_strtod_l+0x36c>
 80212dc:	2b49      	cmp	r3, #73	@ 0x49
 80212de:	d024      	beq.n	802132a <_strtod_l+0x372>
 80212e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80212e2:	d000      	beq.n	80212e6 <_strtod_l+0x32e>
 80212e4:	e6bf      	b.n	8021066 <_strtod_l+0xae>
 80212e6:	49a5      	ldr	r1, [pc, #660]	@ (802157c <_strtod_l+0x5c4>)
 80212e8:	a81d      	add	r0, sp, #116	@ 0x74
 80212ea:	f002 fe4d 	bl	8023f88 <__match>
 80212ee:	2800      	cmp	r0, #0
 80212f0:	d100      	bne.n	80212f4 <_strtod_l+0x33c>
 80212f2:	e6b8      	b.n	8021066 <_strtod_l+0xae>
 80212f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80212f6:	781b      	ldrb	r3, [r3, #0]
 80212f8:	2b28      	cmp	r3, #40	@ 0x28
 80212fa:	d12c      	bne.n	8021356 <_strtod_l+0x39e>
 80212fc:	49a0      	ldr	r1, [pc, #640]	@ (8021580 <_strtod_l+0x5c8>)
 80212fe:	aa20      	add	r2, sp, #128	@ 0x80
 8021300:	a81d      	add	r0, sp, #116	@ 0x74
 8021302:	f002 fe55 	bl	8023fb0 <__hexnan>
 8021306:	2805      	cmp	r0, #5
 8021308:	d125      	bne.n	8021356 <_strtod_l+0x39e>
 802130a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802130c:	4a9d      	ldr	r2, [pc, #628]	@ (8021584 <_strtod_l+0x5cc>)
 802130e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8021310:	431a      	orrs	r2, r3
 8021312:	0017      	movs	r7, r2
 8021314:	e68b      	b.n	802102e <_strtod_l+0x76>
 8021316:	220a      	movs	r2, #10
 8021318:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802131a:	434a      	muls	r2, r1
 802131c:	18d2      	adds	r2, r2, r3
 802131e:	3a30      	subs	r2, #48	@ 0x30
 8021320:	9210      	str	r2, [sp, #64]	@ 0x40
 8021322:	e7b5      	b.n	8021290 <_strtod_l+0x2d8>
 8021324:	2b6e      	cmp	r3, #110	@ 0x6e
 8021326:	d0de      	beq.n	80212e6 <_strtod_l+0x32e>
 8021328:	e69d      	b.n	8021066 <_strtod_l+0xae>
 802132a:	4997      	ldr	r1, [pc, #604]	@ (8021588 <_strtod_l+0x5d0>)
 802132c:	a81d      	add	r0, sp, #116	@ 0x74
 802132e:	f002 fe2b 	bl	8023f88 <__match>
 8021332:	2800      	cmp	r0, #0
 8021334:	d100      	bne.n	8021338 <_strtod_l+0x380>
 8021336:	e696      	b.n	8021066 <_strtod_l+0xae>
 8021338:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802133a:	4994      	ldr	r1, [pc, #592]	@ (802158c <_strtod_l+0x5d4>)
 802133c:	3b01      	subs	r3, #1
 802133e:	a81d      	add	r0, sp, #116	@ 0x74
 8021340:	931d      	str	r3, [sp, #116]	@ 0x74
 8021342:	f002 fe21 	bl	8023f88 <__match>
 8021346:	2800      	cmp	r0, #0
 8021348:	d102      	bne.n	8021350 <_strtod_l+0x398>
 802134a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802134c:	3301      	adds	r3, #1
 802134e:	931d      	str	r3, [sp, #116]	@ 0x74
 8021350:	2600      	movs	r6, #0
 8021352:	4f8c      	ldr	r7, [pc, #560]	@ (8021584 <_strtod_l+0x5cc>)
 8021354:	e66b      	b.n	802102e <_strtod_l+0x76>
 8021356:	488e      	ldr	r0, [pc, #568]	@ (8021590 <_strtod_l+0x5d8>)
 8021358:	f001 fca6 	bl	8022ca8 <nan>
 802135c:	0006      	movs	r6, r0
 802135e:	000f      	movs	r7, r1
 8021360:	e665      	b.n	802102e <_strtod_l+0x76>
 8021362:	9b07      	ldr	r3, [sp, #28]
 8021364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021366:	1a9b      	subs	r3, r3, r2
 8021368:	930c      	str	r3, [sp, #48]	@ 0x30
 802136a:	9b08      	ldr	r3, [sp, #32]
 802136c:	2b00      	cmp	r3, #0
 802136e:	d101      	bne.n	8021374 <_strtod_l+0x3bc>
 8021370:	9b06      	ldr	r3, [sp, #24]
 8021372:	9308      	str	r3, [sp, #32]
 8021374:	9c06      	ldr	r4, [sp, #24]
 8021376:	2c10      	cmp	r4, #16
 8021378:	dd00      	ble.n	802137c <_strtod_l+0x3c4>
 802137a:	2410      	movs	r4, #16
 802137c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802137e:	f7e2 f84d 	bl	800341c <__aeabi_ui2d>
 8021382:	9b06      	ldr	r3, [sp, #24]
 8021384:	0006      	movs	r6, r0
 8021386:	000f      	movs	r7, r1
 8021388:	2b09      	cmp	r3, #9
 802138a:	dc13      	bgt.n	80213b4 <_strtod_l+0x3fc>
 802138c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802138e:	2b00      	cmp	r3, #0
 8021390:	d100      	bne.n	8021394 <_strtod_l+0x3dc>
 8021392:	e64c      	b.n	802102e <_strtod_l+0x76>
 8021394:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021396:	2b00      	cmp	r3, #0
 8021398:	dc00      	bgt.n	802139c <_strtod_l+0x3e4>
 802139a:	e07e      	b.n	802149a <_strtod_l+0x4e2>
 802139c:	2b16      	cmp	r3, #22
 802139e:	dc63      	bgt.n	8021468 <_strtod_l+0x4b0>
 80213a0:	497c      	ldr	r1, [pc, #496]	@ (8021594 <_strtod_l+0x5dc>)
 80213a2:	00db      	lsls	r3, r3, #3
 80213a4:	18c9      	adds	r1, r1, r3
 80213a6:	0032      	movs	r2, r6
 80213a8:	6808      	ldr	r0, [r1, #0]
 80213aa:	6849      	ldr	r1, [r1, #4]
 80213ac:	003b      	movs	r3, r7
 80213ae:	f7e1 f945 	bl	800263c <__aeabi_dmul>
 80213b2:	e7d3      	b.n	802135c <_strtod_l+0x3a4>
 80213b4:	0022      	movs	r2, r4
 80213b6:	4b77      	ldr	r3, [pc, #476]	@ (8021594 <_strtod_l+0x5dc>)
 80213b8:	3a09      	subs	r2, #9
 80213ba:	00d2      	lsls	r2, r2, #3
 80213bc:	189b      	adds	r3, r3, r2
 80213be:	681a      	ldr	r2, [r3, #0]
 80213c0:	685b      	ldr	r3, [r3, #4]
 80213c2:	f7e1 f93b 	bl	800263c <__aeabi_dmul>
 80213c6:	0006      	movs	r6, r0
 80213c8:	0028      	movs	r0, r5
 80213ca:	000f      	movs	r7, r1
 80213cc:	f7e2 f826 	bl	800341c <__aeabi_ui2d>
 80213d0:	000b      	movs	r3, r1
 80213d2:	0002      	movs	r2, r0
 80213d4:	0039      	movs	r1, r7
 80213d6:	0030      	movs	r0, r6
 80213d8:	f7e0 f988 	bl	80016ec <__aeabi_dadd>
 80213dc:	9b06      	ldr	r3, [sp, #24]
 80213de:	0006      	movs	r6, r0
 80213e0:	000f      	movs	r7, r1
 80213e2:	2b0f      	cmp	r3, #15
 80213e4:	ddd2      	ble.n	802138c <_strtod_l+0x3d4>
 80213e6:	9b06      	ldr	r3, [sp, #24]
 80213e8:	1b1c      	subs	r4, r3, r4
 80213ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80213ec:	18e4      	adds	r4, r4, r3
 80213ee:	2c00      	cmp	r4, #0
 80213f0:	dc00      	bgt.n	80213f4 <_strtod_l+0x43c>
 80213f2:	e09b      	b.n	802152c <_strtod_l+0x574>
 80213f4:	220f      	movs	r2, #15
 80213f6:	0023      	movs	r3, r4
 80213f8:	4013      	ands	r3, r2
 80213fa:	4214      	tst	r4, r2
 80213fc:	d00a      	beq.n	8021414 <_strtod_l+0x45c>
 80213fe:	4965      	ldr	r1, [pc, #404]	@ (8021594 <_strtod_l+0x5dc>)
 8021400:	00db      	lsls	r3, r3, #3
 8021402:	18c9      	adds	r1, r1, r3
 8021404:	0032      	movs	r2, r6
 8021406:	6808      	ldr	r0, [r1, #0]
 8021408:	6849      	ldr	r1, [r1, #4]
 802140a:	003b      	movs	r3, r7
 802140c:	f7e1 f916 	bl	800263c <__aeabi_dmul>
 8021410:	0006      	movs	r6, r0
 8021412:	000f      	movs	r7, r1
 8021414:	230f      	movs	r3, #15
 8021416:	439c      	bics	r4, r3
 8021418:	d073      	beq.n	8021502 <_strtod_l+0x54a>
 802141a:	3326      	adds	r3, #38	@ 0x26
 802141c:	33ff      	adds	r3, #255	@ 0xff
 802141e:	429c      	cmp	r4, r3
 8021420:	dd4b      	ble.n	80214ba <_strtod_l+0x502>
 8021422:	2300      	movs	r3, #0
 8021424:	9306      	str	r3, [sp, #24]
 8021426:	9307      	str	r3, [sp, #28]
 8021428:	930d      	str	r3, [sp, #52]	@ 0x34
 802142a:	9308      	str	r3, [sp, #32]
 802142c:	2322      	movs	r3, #34	@ 0x22
 802142e:	2600      	movs	r6, #0
 8021430:	9a05      	ldr	r2, [sp, #20]
 8021432:	4f54      	ldr	r7, [pc, #336]	@ (8021584 <_strtod_l+0x5cc>)
 8021434:	6013      	str	r3, [r2, #0]
 8021436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021438:	42b3      	cmp	r3, r6
 802143a:	d100      	bne.n	802143e <_strtod_l+0x486>
 802143c:	e5f7      	b.n	802102e <_strtod_l+0x76>
 802143e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021440:	9805      	ldr	r0, [sp, #20]
 8021442:	f002 ff6f 	bl	8024324 <_Bfree>
 8021446:	9908      	ldr	r1, [sp, #32]
 8021448:	9805      	ldr	r0, [sp, #20]
 802144a:	f002 ff6b 	bl	8024324 <_Bfree>
 802144e:	9907      	ldr	r1, [sp, #28]
 8021450:	9805      	ldr	r0, [sp, #20]
 8021452:	f002 ff67 	bl	8024324 <_Bfree>
 8021456:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021458:	9805      	ldr	r0, [sp, #20]
 802145a:	f002 ff63 	bl	8024324 <_Bfree>
 802145e:	9906      	ldr	r1, [sp, #24]
 8021460:	9805      	ldr	r0, [sp, #20]
 8021462:	f002 ff5f 	bl	8024324 <_Bfree>
 8021466:	e5e2      	b.n	802102e <_strtod_l+0x76>
 8021468:	2325      	movs	r3, #37	@ 0x25
 802146a:	9a06      	ldr	r2, [sp, #24]
 802146c:	1a9b      	subs	r3, r3, r2
 802146e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021470:	4293      	cmp	r3, r2
 8021472:	dbb8      	blt.n	80213e6 <_strtod_l+0x42e>
 8021474:	240f      	movs	r4, #15
 8021476:	9b06      	ldr	r3, [sp, #24]
 8021478:	4d46      	ldr	r5, [pc, #280]	@ (8021594 <_strtod_l+0x5dc>)
 802147a:	1ae4      	subs	r4, r4, r3
 802147c:	00e1      	lsls	r1, r4, #3
 802147e:	1869      	adds	r1, r5, r1
 8021480:	0032      	movs	r2, r6
 8021482:	6808      	ldr	r0, [r1, #0]
 8021484:	6849      	ldr	r1, [r1, #4]
 8021486:	003b      	movs	r3, r7
 8021488:	f7e1 f8d8 	bl	800263c <__aeabi_dmul>
 802148c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802148e:	1b1c      	subs	r4, r3, r4
 8021490:	00e4      	lsls	r4, r4, #3
 8021492:	192d      	adds	r5, r5, r4
 8021494:	682a      	ldr	r2, [r5, #0]
 8021496:	686b      	ldr	r3, [r5, #4]
 8021498:	e789      	b.n	80213ae <_strtod_l+0x3f6>
 802149a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802149c:	3316      	adds	r3, #22
 802149e:	dba2      	blt.n	80213e6 <_strtod_l+0x42e>
 80214a0:	9907      	ldr	r1, [sp, #28]
 80214a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80214a4:	4b3b      	ldr	r3, [pc, #236]	@ (8021594 <_strtod_l+0x5dc>)
 80214a6:	1a52      	subs	r2, r2, r1
 80214a8:	00d2      	lsls	r2, r2, #3
 80214aa:	189b      	adds	r3, r3, r2
 80214ac:	0030      	movs	r0, r6
 80214ae:	681a      	ldr	r2, [r3, #0]
 80214b0:	685b      	ldr	r3, [r3, #4]
 80214b2:	0039      	movs	r1, r7
 80214b4:	f7e0 fc7e 	bl	8001db4 <__aeabi_ddiv>
 80214b8:	e750      	b.n	802135c <_strtod_l+0x3a4>
 80214ba:	2300      	movs	r3, #0
 80214bc:	0030      	movs	r0, r6
 80214be:	0039      	movs	r1, r7
 80214c0:	4d35      	ldr	r5, [pc, #212]	@ (8021598 <_strtod_l+0x5e0>)
 80214c2:	1124      	asrs	r4, r4, #4
 80214c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80214c6:	2c01      	cmp	r4, #1
 80214c8:	dc1e      	bgt.n	8021508 <_strtod_l+0x550>
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d001      	beq.n	80214d2 <_strtod_l+0x51a>
 80214ce:	0006      	movs	r6, r0
 80214d0:	000f      	movs	r7, r1
 80214d2:	4b32      	ldr	r3, [pc, #200]	@ (802159c <_strtod_l+0x5e4>)
 80214d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80214d6:	18ff      	adds	r7, r7, r3
 80214d8:	4b2f      	ldr	r3, [pc, #188]	@ (8021598 <_strtod_l+0x5e0>)
 80214da:	00d5      	lsls	r5, r2, #3
 80214dc:	195d      	adds	r5, r3, r5
 80214de:	0032      	movs	r2, r6
 80214e0:	6828      	ldr	r0, [r5, #0]
 80214e2:	6869      	ldr	r1, [r5, #4]
 80214e4:	003b      	movs	r3, r7
 80214e6:	f7e1 f8a9 	bl	800263c <__aeabi_dmul>
 80214ea:	4b26      	ldr	r3, [pc, #152]	@ (8021584 <_strtod_l+0x5cc>)
 80214ec:	4a2c      	ldr	r2, [pc, #176]	@ (80215a0 <_strtod_l+0x5e8>)
 80214ee:	0006      	movs	r6, r0
 80214f0:	400b      	ands	r3, r1
 80214f2:	4293      	cmp	r3, r2
 80214f4:	d895      	bhi.n	8021422 <_strtod_l+0x46a>
 80214f6:	4a2b      	ldr	r2, [pc, #172]	@ (80215a4 <_strtod_l+0x5ec>)
 80214f8:	4293      	cmp	r3, r2
 80214fa:	d913      	bls.n	8021524 <_strtod_l+0x56c>
 80214fc:	2601      	movs	r6, #1
 80214fe:	4f2a      	ldr	r7, [pc, #168]	@ (80215a8 <_strtod_l+0x5f0>)
 8021500:	4276      	negs	r6, r6
 8021502:	2300      	movs	r3, #0
 8021504:	9309      	str	r3, [sp, #36]	@ 0x24
 8021506:	e086      	b.n	8021616 <_strtod_l+0x65e>
 8021508:	2201      	movs	r2, #1
 802150a:	4214      	tst	r4, r2
 802150c:	d004      	beq.n	8021518 <_strtod_l+0x560>
 802150e:	682a      	ldr	r2, [r5, #0]
 8021510:	686b      	ldr	r3, [r5, #4]
 8021512:	f7e1 f893 	bl	800263c <__aeabi_dmul>
 8021516:	2301      	movs	r3, #1
 8021518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802151a:	1064      	asrs	r4, r4, #1
 802151c:	3201      	adds	r2, #1
 802151e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021520:	3508      	adds	r5, #8
 8021522:	e7d0      	b.n	80214c6 <_strtod_l+0x50e>
 8021524:	23d4      	movs	r3, #212	@ 0xd4
 8021526:	049b      	lsls	r3, r3, #18
 8021528:	18cf      	adds	r7, r1, r3
 802152a:	e7ea      	b.n	8021502 <_strtod_l+0x54a>
 802152c:	2c00      	cmp	r4, #0
 802152e:	d0e8      	beq.n	8021502 <_strtod_l+0x54a>
 8021530:	4264      	negs	r4, r4
 8021532:	230f      	movs	r3, #15
 8021534:	0022      	movs	r2, r4
 8021536:	401a      	ands	r2, r3
 8021538:	421c      	tst	r4, r3
 802153a:	d00a      	beq.n	8021552 <_strtod_l+0x59a>
 802153c:	4b15      	ldr	r3, [pc, #84]	@ (8021594 <_strtod_l+0x5dc>)
 802153e:	00d2      	lsls	r2, r2, #3
 8021540:	189b      	adds	r3, r3, r2
 8021542:	0030      	movs	r0, r6
 8021544:	681a      	ldr	r2, [r3, #0]
 8021546:	685b      	ldr	r3, [r3, #4]
 8021548:	0039      	movs	r1, r7
 802154a:	f7e0 fc33 	bl	8001db4 <__aeabi_ddiv>
 802154e:	0006      	movs	r6, r0
 8021550:	000f      	movs	r7, r1
 8021552:	1124      	asrs	r4, r4, #4
 8021554:	d0d5      	beq.n	8021502 <_strtod_l+0x54a>
 8021556:	2c1f      	cmp	r4, #31
 8021558:	dd28      	ble.n	80215ac <_strtod_l+0x5f4>
 802155a:	2300      	movs	r3, #0
 802155c:	9306      	str	r3, [sp, #24]
 802155e:	9307      	str	r3, [sp, #28]
 8021560:	930d      	str	r3, [sp, #52]	@ 0x34
 8021562:	9308      	str	r3, [sp, #32]
 8021564:	2322      	movs	r3, #34	@ 0x22
 8021566:	9a05      	ldr	r2, [sp, #20]
 8021568:	2600      	movs	r6, #0
 802156a:	6013      	str	r3, [r2, #0]
 802156c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802156e:	2700      	movs	r7, #0
 8021570:	2b00      	cmp	r3, #0
 8021572:	d000      	beq.n	8021576 <_strtod_l+0x5be>
 8021574:	e763      	b.n	802143e <_strtod_l+0x486>
 8021576:	e55a      	b.n	802102e <_strtod_l+0x76>
 8021578:	00004e1f 	.word	0x00004e1f
 802157c:	08029636 	.word	0x08029636
 8021580:	080294d4 	.word	0x080294d4
 8021584:	7ff00000 	.word	0x7ff00000
 8021588:	0802962e 	.word	0x0802962e
 802158c:	08029668 	.word	0x08029668
 8021590:	080298f4 	.word	0x080298f4
 8021594:	080297e0 	.word	0x080297e0
 8021598:	080297b8 	.word	0x080297b8
 802159c:	fcb00000 	.word	0xfcb00000
 80215a0:	7ca00000 	.word	0x7ca00000
 80215a4:	7c900000 	.word	0x7c900000
 80215a8:	7fefffff 	.word	0x7fefffff
 80215ac:	2310      	movs	r3, #16
 80215ae:	0022      	movs	r2, r4
 80215b0:	401a      	ands	r2, r3
 80215b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80215b4:	421c      	tst	r4, r3
 80215b6:	d001      	beq.n	80215bc <_strtod_l+0x604>
 80215b8:	335a      	adds	r3, #90	@ 0x5a
 80215ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80215bc:	0030      	movs	r0, r6
 80215be:	0039      	movs	r1, r7
 80215c0:	2300      	movs	r3, #0
 80215c2:	4dbf      	ldr	r5, [pc, #764]	@ (80218c0 <_strtod_l+0x908>)
 80215c4:	2201      	movs	r2, #1
 80215c6:	4214      	tst	r4, r2
 80215c8:	d004      	beq.n	80215d4 <_strtod_l+0x61c>
 80215ca:	682a      	ldr	r2, [r5, #0]
 80215cc:	686b      	ldr	r3, [r5, #4]
 80215ce:	f7e1 f835 	bl	800263c <__aeabi_dmul>
 80215d2:	2301      	movs	r3, #1
 80215d4:	1064      	asrs	r4, r4, #1
 80215d6:	3508      	adds	r5, #8
 80215d8:	2c00      	cmp	r4, #0
 80215da:	d1f3      	bne.n	80215c4 <_strtod_l+0x60c>
 80215dc:	2b00      	cmp	r3, #0
 80215de:	d001      	beq.n	80215e4 <_strtod_l+0x62c>
 80215e0:	0006      	movs	r6, r0
 80215e2:	000f      	movs	r7, r1
 80215e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d00d      	beq.n	8021606 <_strtod_l+0x64e>
 80215ea:	236b      	movs	r3, #107	@ 0x6b
 80215ec:	007a      	lsls	r2, r7, #1
 80215ee:	0d52      	lsrs	r2, r2, #21
 80215f0:	0039      	movs	r1, r7
 80215f2:	1a9b      	subs	r3, r3, r2
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	dd06      	ble.n	8021606 <_strtod_l+0x64e>
 80215f8:	2b1f      	cmp	r3, #31
 80215fa:	dd5a      	ble.n	80216b2 <_strtod_l+0x6fa>
 80215fc:	2600      	movs	r6, #0
 80215fe:	2b34      	cmp	r3, #52	@ 0x34
 8021600:	dd50      	ble.n	80216a4 <_strtod_l+0x6ec>
 8021602:	27dc      	movs	r7, #220	@ 0xdc
 8021604:	04bf      	lsls	r7, r7, #18
 8021606:	2200      	movs	r2, #0
 8021608:	2300      	movs	r3, #0
 802160a:	0030      	movs	r0, r6
 802160c:	0039      	movs	r1, r7
 802160e:	f7de ff4f 	bl	80004b0 <__aeabi_dcmpeq>
 8021612:	2800      	cmp	r0, #0
 8021614:	d1a1      	bne.n	802155a <_strtod_l+0x5a2>
 8021616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021618:	9a08      	ldr	r2, [sp, #32]
 802161a:	9300      	str	r3, [sp, #0]
 802161c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802161e:	9b06      	ldr	r3, [sp, #24]
 8021620:	9805      	ldr	r0, [sp, #20]
 8021622:	f002 fee7 	bl	80243f4 <__s2b>
 8021626:	900d      	str	r0, [sp, #52]	@ 0x34
 8021628:	2800      	cmp	r0, #0
 802162a:	d100      	bne.n	802162e <_strtod_l+0x676>
 802162c:	e6f9      	b.n	8021422 <_strtod_l+0x46a>
 802162e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021630:	9907      	ldr	r1, [sp, #28]
 8021632:	17da      	asrs	r2, r3, #31
 8021634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021636:	1a5b      	subs	r3, r3, r1
 8021638:	401a      	ands	r2, r3
 802163a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802163c:	9217      	str	r2, [sp, #92]	@ 0x5c
 802163e:	43db      	mvns	r3, r3
 8021640:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021642:	17db      	asrs	r3, r3, #31
 8021644:	401a      	ands	r2, r3
 8021646:	2300      	movs	r3, #0
 8021648:	921a      	str	r2, [sp, #104]	@ 0x68
 802164a:	9306      	str	r3, [sp, #24]
 802164c:	9307      	str	r3, [sp, #28]
 802164e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021650:	9805      	ldr	r0, [sp, #20]
 8021652:	6859      	ldr	r1, [r3, #4]
 8021654:	f002 fe22 	bl	802429c <_Balloc>
 8021658:	9008      	str	r0, [sp, #32]
 802165a:	2800      	cmp	r0, #0
 802165c:	d100      	bne.n	8021660 <_strtod_l+0x6a8>
 802165e:	e6e5      	b.n	802142c <_strtod_l+0x474>
 8021660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021662:	300c      	adds	r0, #12
 8021664:	0019      	movs	r1, r3
 8021666:	691a      	ldr	r2, [r3, #16]
 8021668:	310c      	adds	r1, #12
 802166a:	3202      	adds	r2, #2
 802166c:	0092      	lsls	r2, r2, #2
 802166e:	f001 fb11 	bl	8022c94 <memcpy>
 8021672:	ab20      	add	r3, sp, #128	@ 0x80
 8021674:	9301      	str	r3, [sp, #4]
 8021676:	ab1f      	add	r3, sp, #124	@ 0x7c
 8021678:	9300      	str	r3, [sp, #0]
 802167a:	0032      	movs	r2, r6
 802167c:	003b      	movs	r3, r7
 802167e:	9805      	ldr	r0, [sp, #20]
 8021680:	9610      	str	r6, [sp, #64]	@ 0x40
 8021682:	9711      	str	r7, [sp, #68]	@ 0x44
 8021684:	f003 fa06 	bl	8024a94 <__d2b>
 8021688:	901e      	str	r0, [sp, #120]	@ 0x78
 802168a:	2800      	cmp	r0, #0
 802168c:	d100      	bne.n	8021690 <_strtod_l+0x6d8>
 802168e:	e6cd      	b.n	802142c <_strtod_l+0x474>
 8021690:	2101      	movs	r1, #1
 8021692:	9805      	ldr	r0, [sp, #20]
 8021694:	f002 ff4a 	bl	802452c <__i2b>
 8021698:	9007      	str	r0, [sp, #28]
 802169a:	2800      	cmp	r0, #0
 802169c:	d10e      	bne.n	80216bc <_strtod_l+0x704>
 802169e:	2300      	movs	r3, #0
 80216a0:	9307      	str	r3, [sp, #28]
 80216a2:	e6c3      	b.n	802142c <_strtod_l+0x474>
 80216a4:	234b      	movs	r3, #75	@ 0x4b
 80216a6:	1a9a      	subs	r2, r3, r2
 80216a8:	3b4c      	subs	r3, #76	@ 0x4c
 80216aa:	4093      	lsls	r3, r2
 80216ac:	4019      	ands	r1, r3
 80216ae:	000f      	movs	r7, r1
 80216b0:	e7a9      	b.n	8021606 <_strtod_l+0x64e>
 80216b2:	2201      	movs	r2, #1
 80216b4:	4252      	negs	r2, r2
 80216b6:	409a      	lsls	r2, r3
 80216b8:	4016      	ands	r6, r2
 80216ba:	e7a4      	b.n	8021606 <_strtod_l+0x64e>
 80216bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80216be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80216c0:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80216c2:	1ad4      	subs	r4, r2, r3
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	db01      	blt.n	80216cc <_strtod_l+0x714>
 80216c8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80216ca:	195d      	adds	r5, r3, r5
 80216cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80216ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80216d0:	1a5b      	subs	r3, r3, r1
 80216d2:	2136      	movs	r1, #54	@ 0x36
 80216d4:	189b      	adds	r3, r3, r2
 80216d6:	1a8a      	subs	r2, r1, r2
 80216d8:	497a      	ldr	r1, [pc, #488]	@ (80218c4 <_strtod_l+0x90c>)
 80216da:	2001      	movs	r0, #1
 80216dc:	468c      	mov	ip, r1
 80216de:	2100      	movs	r1, #0
 80216e0:	3b01      	subs	r3, #1
 80216e2:	9116      	str	r1, [sp, #88]	@ 0x58
 80216e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80216e6:	4563      	cmp	r3, ip
 80216e8:	da06      	bge.n	80216f8 <_strtod_l+0x740>
 80216ea:	4661      	mov	r1, ip
 80216ec:	1ac9      	subs	r1, r1, r3
 80216ee:	1a52      	subs	r2, r2, r1
 80216f0:	291f      	cmp	r1, #31
 80216f2:	dc3f      	bgt.n	8021774 <_strtod_l+0x7bc>
 80216f4:	4088      	lsls	r0, r1
 80216f6:	9014      	str	r0, [sp, #80]	@ 0x50
 80216f8:	18ab      	adds	r3, r5, r2
 80216fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80216fc:	18a4      	adds	r4, r4, r2
 80216fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021702:	191c      	adds	r4, r3, r4
 8021704:	002b      	movs	r3, r5
 8021706:	4295      	cmp	r5, r2
 8021708:	dd00      	ble.n	802170c <_strtod_l+0x754>
 802170a:	0013      	movs	r3, r2
 802170c:	42a3      	cmp	r3, r4
 802170e:	dd00      	ble.n	8021712 <_strtod_l+0x75a>
 8021710:	0023      	movs	r3, r4
 8021712:	2b00      	cmp	r3, #0
 8021714:	dd04      	ble.n	8021720 <_strtod_l+0x768>
 8021716:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021718:	1ae4      	subs	r4, r4, r3
 802171a:	1ad2      	subs	r2, r2, r3
 802171c:	920e      	str	r2, [sp, #56]	@ 0x38
 802171e:	1aed      	subs	r5, r5, r3
 8021720:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021722:	2b00      	cmp	r3, #0
 8021724:	dd16      	ble.n	8021754 <_strtod_l+0x79c>
 8021726:	001a      	movs	r2, r3
 8021728:	9907      	ldr	r1, [sp, #28]
 802172a:	9805      	ldr	r0, [sp, #20]
 802172c:	f002 ffc8 	bl	80246c0 <__pow5mult>
 8021730:	9007      	str	r0, [sp, #28]
 8021732:	2800      	cmp	r0, #0
 8021734:	d0b3      	beq.n	802169e <_strtod_l+0x6e6>
 8021736:	0001      	movs	r1, r0
 8021738:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802173a:	9805      	ldr	r0, [sp, #20]
 802173c:	f002 ff0e 	bl	802455c <__multiply>
 8021740:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021742:	2800      	cmp	r0, #0
 8021744:	d100      	bne.n	8021748 <_strtod_l+0x790>
 8021746:	e671      	b.n	802142c <_strtod_l+0x474>
 8021748:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802174a:	9805      	ldr	r0, [sp, #20]
 802174c:	f002 fdea 	bl	8024324 <_Bfree>
 8021750:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021752:	931e      	str	r3, [sp, #120]	@ 0x78
 8021754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021756:	2b00      	cmp	r3, #0
 8021758:	dc12      	bgt.n	8021780 <_strtod_l+0x7c8>
 802175a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802175c:	2b00      	cmp	r3, #0
 802175e:	dd18      	ble.n	8021792 <_strtod_l+0x7da>
 8021760:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021762:	9908      	ldr	r1, [sp, #32]
 8021764:	9805      	ldr	r0, [sp, #20]
 8021766:	f002 ffab 	bl	80246c0 <__pow5mult>
 802176a:	9008      	str	r0, [sp, #32]
 802176c:	2800      	cmp	r0, #0
 802176e:	d110      	bne.n	8021792 <_strtod_l+0x7da>
 8021770:	2300      	movs	r3, #0
 8021772:	e65a      	b.n	802142a <_strtod_l+0x472>
 8021774:	4954      	ldr	r1, [pc, #336]	@ (80218c8 <_strtod_l+0x910>)
 8021776:	1acb      	subs	r3, r1, r3
 8021778:	0001      	movs	r1, r0
 802177a:	4099      	lsls	r1, r3
 802177c:	9116      	str	r1, [sp, #88]	@ 0x58
 802177e:	e7ba      	b.n	80216f6 <_strtod_l+0x73e>
 8021780:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021782:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021784:	9805      	ldr	r0, [sp, #20]
 8021786:	f002 fff7 	bl	8024778 <__lshift>
 802178a:	901e      	str	r0, [sp, #120]	@ 0x78
 802178c:	2800      	cmp	r0, #0
 802178e:	d1e4      	bne.n	802175a <_strtod_l+0x7a2>
 8021790:	e64c      	b.n	802142c <_strtod_l+0x474>
 8021792:	2c00      	cmp	r4, #0
 8021794:	dd07      	ble.n	80217a6 <_strtod_l+0x7ee>
 8021796:	0022      	movs	r2, r4
 8021798:	9908      	ldr	r1, [sp, #32]
 802179a:	9805      	ldr	r0, [sp, #20]
 802179c:	f002 ffec 	bl	8024778 <__lshift>
 80217a0:	9008      	str	r0, [sp, #32]
 80217a2:	2800      	cmp	r0, #0
 80217a4:	d0e4      	beq.n	8021770 <_strtod_l+0x7b8>
 80217a6:	2d00      	cmp	r5, #0
 80217a8:	dd08      	ble.n	80217bc <_strtod_l+0x804>
 80217aa:	002a      	movs	r2, r5
 80217ac:	9907      	ldr	r1, [sp, #28]
 80217ae:	9805      	ldr	r0, [sp, #20]
 80217b0:	f002 ffe2 	bl	8024778 <__lshift>
 80217b4:	9007      	str	r0, [sp, #28]
 80217b6:	2800      	cmp	r0, #0
 80217b8:	d100      	bne.n	80217bc <_strtod_l+0x804>
 80217ba:	e637      	b.n	802142c <_strtod_l+0x474>
 80217bc:	9a08      	ldr	r2, [sp, #32]
 80217be:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80217c0:	9805      	ldr	r0, [sp, #20]
 80217c2:	f003 f861 	bl	8024888 <__mdiff>
 80217c6:	9006      	str	r0, [sp, #24]
 80217c8:	2800      	cmp	r0, #0
 80217ca:	d100      	bne.n	80217ce <_strtod_l+0x816>
 80217cc:	e62e      	b.n	802142c <_strtod_l+0x474>
 80217ce:	68c3      	ldr	r3, [r0, #12]
 80217d0:	9907      	ldr	r1, [sp, #28]
 80217d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80217d4:	2300      	movs	r3, #0
 80217d6:	60c3      	str	r3, [r0, #12]
 80217d8:	f003 f83a 	bl	8024850 <__mcmp>
 80217dc:	2800      	cmp	r0, #0
 80217de:	da3b      	bge.n	8021858 <_strtod_l+0x8a0>
 80217e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80217e2:	4333      	orrs	r3, r6
 80217e4:	d167      	bne.n	80218b6 <_strtod_l+0x8fe>
 80217e6:	033b      	lsls	r3, r7, #12
 80217e8:	d165      	bne.n	80218b6 <_strtod_l+0x8fe>
 80217ea:	22d6      	movs	r2, #214	@ 0xd6
 80217ec:	4b37      	ldr	r3, [pc, #220]	@ (80218cc <_strtod_l+0x914>)
 80217ee:	04d2      	lsls	r2, r2, #19
 80217f0:	403b      	ands	r3, r7
 80217f2:	4293      	cmp	r3, r2
 80217f4:	d95f      	bls.n	80218b6 <_strtod_l+0x8fe>
 80217f6:	9b06      	ldr	r3, [sp, #24]
 80217f8:	695b      	ldr	r3, [r3, #20]
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d103      	bne.n	8021806 <_strtod_l+0x84e>
 80217fe:	9b06      	ldr	r3, [sp, #24]
 8021800:	691b      	ldr	r3, [r3, #16]
 8021802:	2b01      	cmp	r3, #1
 8021804:	dd57      	ble.n	80218b6 <_strtod_l+0x8fe>
 8021806:	9906      	ldr	r1, [sp, #24]
 8021808:	2201      	movs	r2, #1
 802180a:	9805      	ldr	r0, [sp, #20]
 802180c:	f002 ffb4 	bl	8024778 <__lshift>
 8021810:	9907      	ldr	r1, [sp, #28]
 8021812:	9006      	str	r0, [sp, #24]
 8021814:	f003 f81c 	bl	8024850 <__mcmp>
 8021818:	2800      	cmp	r0, #0
 802181a:	dd4c      	ble.n	80218b6 <_strtod_l+0x8fe>
 802181c:	4b2b      	ldr	r3, [pc, #172]	@ (80218cc <_strtod_l+0x914>)
 802181e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021820:	403b      	ands	r3, r7
 8021822:	2a00      	cmp	r2, #0
 8021824:	d074      	beq.n	8021910 <_strtod_l+0x958>
 8021826:	22d6      	movs	r2, #214	@ 0xd6
 8021828:	04d2      	lsls	r2, r2, #19
 802182a:	4293      	cmp	r3, r2
 802182c:	d870      	bhi.n	8021910 <_strtod_l+0x958>
 802182e:	22dc      	movs	r2, #220	@ 0xdc
 8021830:	0492      	lsls	r2, r2, #18
 8021832:	4293      	cmp	r3, r2
 8021834:	d800      	bhi.n	8021838 <_strtod_l+0x880>
 8021836:	e695      	b.n	8021564 <_strtod_l+0x5ac>
 8021838:	0030      	movs	r0, r6
 802183a:	0039      	movs	r1, r7
 802183c:	4b24      	ldr	r3, [pc, #144]	@ (80218d0 <_strtod_l+0x918>)
 802183e:	2200      	movs	r2, #0
 8021840:	f7e0 fefc 	bl	800263c <__aeabi_dmul>
 8021844:	4b21      	ldr	r3, [pc, #132]	@ (80218cc <_strtod_l+0x914>)
 8021846:	0006      	movs	r6, r0
 8021848:	000f      	movs	r7, r1
 802184a:	420b      	tst	r3, r1
 802184c:	d000      	beq.n	8021850 <_strtod_l+0x898>
 802184e:	e5f6      	b.n	802143e <_strtod_l+0x486>
 8021850:	2322      	movs	r3, #34	@ 0x22
 8021852:	9a05      	ldr	r2, [sp, #20]
 8021854:	6013      	str	r3, [r2, #0]
 8021856:	e5f2      	b.n	802143e <_strtod_l+0x486>
 8021858:	970e      	str	r7, [sp, #56]	@ 0x38
 802185a:	2800      	cmp	r0, #0
 802185c:	d175      	bne.n	802194a <_strtod_l+0x992>
 802185e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021860:	033b      	lsls	r3, r7, #12
 8021862:	0b1b      	lsrs	r3, r3, #12
 8021864:	2a00      	cmp	r2, #0
 8021866:	d039      	beq.n	80218dc <_strtod_l+0x924>
 8021868:	4a1a      	ldr	r2, [pc, #104]	@ (80218d4 <_strtod_l+0x91c>)
 802186a:	4293      	cmp	r3, r2
 802186c:	d138      	bne.n	80218e0 <_strtod_l+0x928>
 802186e:	2101      	movs	r1, #1
 8021870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021872:	4249      	negs	r1, r1
 8021874:	0032      	movs	r2, r6
 8021876:	0008      	movs	r0, r1
 8021878:	2b00      	cmp	r3, #0
 802187a:	d00b      	beq.n	8021894 <_strtod_l+0x8dc>
 802187c:	24d4      	movs	r4, #212	@ 0xd4
 802187e:	4b13      	ldr	r3, [pc, #76]	@ (80218cc <_strtod_l+0x914>)
 8021880:	0008      	movs	r0, r1
 8021882:	403b      	ands	r3, r7
 8021884:	04e4      	lsls	r4, r4, #19
 8021886:	42a3      	cmp	r3, r4
 8021888:	d804      	bhi.n	8021894 <_strtod_l+0x8dc>
 802188a:	306c      	adds	r0, #108	@ 0x6c
 802188c:	0d1b      	lsrs	r3, r3, #20
 802188e:	1ac3      	subs	r3, r0, r3
 8021890:	4099      	lsls	r1, r3
 8021892:	0008      	movs	r0, r1
 8021894:	4282      	cmp	r2, r0
 8021896:	d123      	bne.n	80218e0 <_strtod_l+0x928>
 8021898:	4b0f      	ldr	r3, [pc, #60]	@ (80218d8 <_strtod_l+0x920>)
 802189a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802189c:	4299      	cmp	r1, r3
 802189e:	d102      	bne.n	80218a6 <_strtod_l+0x8ee>
 80218a0:	3201      	adds	r2, #1
 80218a2:	d100      	bne.n	80218a6 <_strtod_l+0x8ee>
 80218a4:	e5c2      	b.n	802142c <_strtod_l+0x474>
 80218a6:	4b09      	ldr	r3, [pc, #36]	@ (80218cc <_strtod_l+0x914>)
 80218a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80218aa:	2600      	movs	r6, #0
 80218ac:	401a      	ands	r2, r3
 80218ae:	0013      	movs	r3, r2
 80218b0:	2280      	movs	r2, #128	@ 0x80
 80218b2:	0352      	lsls	r2, r2, #13
 80218b4:	189f      	adds	r7, r3, r2
 80218b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d1bd      	bne.n	8021838 <_strtod_l+0x880>
 80218bc:	e5bf      	b.n	802143e <_strtod_l+0x486>
 80218be:	46c0      	nop			@ (mov r8, r8)
 80218c0:	08029500 	.word	0x08029500
 80218c4:	fffffc02 	.word	0xfffffc02
 80218c8:	fffffbe2 	.word	0xfffffbe2
 80218cc:	7ff00000 	.word	0x7ff00000
 80218d0:	39500000 	.word	0x39500000
 80218d4:	000fffff 	.word	0x000fffff
 80218d8:	7fefffff 	.word	0x7fefffff
 80218dc:	4333      	orrs	r3, r6
 80218de:	d09d      	beq.n	802181c <_strtod_l+0x864>
 80218e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	d01c      	beq.n	8021920 <_strtod_l+0x968>
 80218e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80218e8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80218ea:	4213      	tst	r3, r2
 80218ec:	d0e3      	beq.n	80218b6 <_strtod_l+0x8fe>
 80218ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80218f0:	0030      	movs	r0, r6
 80218f2:	0039      	movs	r1, r7
 80218f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	d016      	beq.n	8021928 <_strtod_l+0x970>
 80218fa:	f7ff fb45 	bl	8020f88 <sulp>
 80218fe:	0002      	movs	r2, r0
 8021900:	000b      	movs	r3, r1
 8021902:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021904:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021906:	f7df fef1 	bl	80016ec <__aeabi_dadd>
 802190a:	0006      	movs	r6, r0
 802190c:	000f      	movs	r7, r1
 802190e:	e7d2      	b.n	80218b6 <_strtod_l+0x8fe>
 8021910:	2601      	movs	r6, #1
 8021912:	4a92      	ldr	r2, [pc, #584]	@ (8021b5c <_strtod_l+0xba4>)
 8021914:	4276      	negs	r6, r6
 8021916:	189b      	adds	r3, r3, r2
 8021918:	4a91      	ldr	r2, [pc, #580]	@ (8021b60 <_strtod_l+0xba8>)
 802191a:	431a      	orrs	r2, r3
 802191c:	0017      	movs	r7, r2
 802191e:	e7ca      	b.n	80218b6 <_strtod_l+0x8fe>
 8021920:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021922:	4233      	tst	r3, r6
 8021924:	d0c7      	beq.n	80218b6 <_strtod_l+0x8fe>
 8021926:	e7e2      	b.n	80218ee <_strtod_l+0x936>
 8021928:	f7ff fb2e 	bl	8020f88 <sulp>
 802192c:	0002      	movs	r2, r0
 802192e:	000b      	movs	r3, r1
 8021930:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021932:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021934:	f7e1 f94a 	bl	8002bcc <__aeabi_dsub>
 8021938:	2200      	movs	r2, #0
 802193a:	2300      	movs	r3, #0
 802193c:	0006      	movs	r6, r0
 802193e:	000f      	movs	r7, r1
 8021940:	f7de fdb6 	bl	80004b0 <__aeabi_dcmpeq>
 8021944:	2800      	cmp	r0, #0
 8021946:	d0b6      	beq.n	80218b6 <_strtod_l+0x8fe>
 8021948:	e60c      	b.n	8021564 <_strtod_l+0x5ac>
 802194a:	9907      	ldr	r1, [sp, #28]
 802194c:	9806      	ldr	r0, [sp, #24]
 802194e:	f003 f901 	bl	8024b54 <__ratio>
 8021952:	2380      	movs	r3, #128	@ 0x80
 8021954:	2200      	movs	r2, #0
 8021956:	05db      	lsls	r3, r3, #23
 8021958:	0004      	movs	r4, r0
 802195a:	000d      	movs	r5, r1
 802195c:	f7de fdb8 	bl	80004d0 <__aeabi_dcmple>
 8021960:	2800      	cmp	r0, #0
 8021962:	d06c      	beq.n	8021a3e <_strtod_l+0xa86>
 8021964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021966:	2b00      	cmp	r3, #0
 8021968:	d177      	bne.n	8021a5a <_strtod_l+0xaa2>
 802196a:	2e00      	cmp	r6, #0
 802196c:	d157      	bne.n	8021a1e <_strtod_l+0xa66>
 802196e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021970:	031b      	lsls	r3, r3, #12
 8021972:	d15a      	bne.n	8021a2a <_strtod_l+0xa72>
 8021974:	2200      	movs	r2, #0
 8021976:	0020      	movs	r0, r4
 8021978:	0029      	movs	r1, r5
 802197a:	4b7a      	ldr	r3, [pc, #488]	@ (8021b64 <_strtod_l+0xbac>)
 802197c:	f7de fd9e 	bl	80004bc <__aeabi_dcmplt>
 8021980:	2800      	cmp	r0, #0
 8021982:	d159      	bne.n	8021a38 <_strtod_l+0xa80>
 8021984:	0020      	movs	r0, r4
 8021986:	0029      	movs	r1, r5
 8021988:	2200      	movs	r2, #0
 802198a:	4b77      	ldr	r3, [pc, #476]	@ (8021b68 <_strtod_l+0xbb0>)
 802198c:	f7e0 fe56 	bl	800263c <__aeabi_dmul>
 8021990:	0004      	movs	r4, r0
 8021992:	000d      	movs	r5, r1
 8021994:	2380      	movs	r3, #128	@ 0x80
 8021996:	061b      	lsls	r3, r3, #24
 8021998:	18eb      	adds	r3, r5, r3
 802199a:	940a      	str	r4, [sp, #40]	@ 0x28
 802199c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802199e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80219a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80219a2:	9214      	str	r2, [sp, #80]	@ 0x50
 80219a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80219a6:	4a71      	ldr	r2, [pc, #452]	@ (8021b6c <_strtod_l+0xbb4>)
 80219a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80219aa:	4013      	ands	r3, r2
 80219ac:	9316      	str	r3, [sp, #88]	@ 0x58
 80219ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80219b0:	4b6f      	ldr	r3, [pc, #444]	@ (8021b70 <_strtod_l+0xbb8>)
 80219b2:	429a      	cmp	r2, r3
 80219b4:	d000      	beq.n	80219b8 <_strtod_l+0xa00>
 80219b6:	e087      	b.n	8021ac8 <_strtod_l+0xb10>
 80219b8:	4a6e      	ldr	r2, [pc, #440]	@ (8021b74 <_strtod_l+0xbbc>)
 80219ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80219bc:	4694      	mov	ip, r2
 80219be:	4463      	add	r3, ip
 80219c0:	001f      	movs	r7, r3
 80219c2:	0030      	movs	r0, r6
 80219c4:	0019      	movs	r1, r3
 80219c6:	f002 fff9 	bl	80249bc <__ulp>
 80219ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80219cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80219ce:	f7e0 fe35 	bl	800263c <__aeabi_dmul>
 80219d2:	0032      	movs	r2, r6
 80219d4:	003b      	movs	r3, r7
 80219d6:	f7df fe89 	bl	80016ec <__aeabi_dadd>
 80219da:	4a64      	ldr	r2, [pc, #400]	@ (8021b6c <_strtod_l+0xbb4>)
 80219dc:	4b66      	ldr	r3, [pc, #408]	@ (8021b78 <_strtod_l+0xbc0>)
 80219de:	0006      	movs	r6, r0
 80219e0:	400a      	ands	r2, r1
 80219e2:	429a      	cmp	r2, r3
 80219e4:	d940      	bls.n	8021a68 <_strtod_l+0xab0>
 80219e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80219e8:	4a64      	ldr	r2, [pc, #400]	@ (8021b7c <_strtod_l+0xbc4>)
 80219ea:	4293      	cmp	r3, r2
 80219ec:	d103      	bne.n	80219f6 <_strtod_l+0xa3e>
 80219ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80219f0:	3301      	adds	r3, #1
 80219f2:	d100      	bne.n	80219f6 <_strtod_l+0xa3e>
 80219f4:	e51a      	b.n	802142c <_strtod_l+0x474>
 80219f6:	2601      	movs	r6, #1
 80219f8:	4f60      	ldr	r7, [pc, #384]	@ (8021b7c <_strtod_l+0xbc4>)
 80219fa:	4276      	negs	r6, r6
 80219fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80219fe:	9805      	ldr	r0, [sp, #20]
 8021a00:	f002 fc90 	bl	8024324 <_Bfree>
 8021a04:	9908      	ldr	r1, [sp, #32]
 8021a06:	9805      	ldr	r0, [sp, #20]
 8021a08:	f002 fc8c 	bl	8024324 <_Bfree>
 8021a0c:	9907      	ldr	r1, [sp, #28]
 8021a0e:	9805      	ldr	r0, [sp, #20]
 8021a10:	f002 fc88 	bl	8024324 <_Bfree>
 8021a14:	9906      	ldr	r1, [sp, #24]
 8021a16:	9805      	ldr	r0, [sp, #20]
 8021a18:	f002 fc84 	bl	8024324 <_Bfree>
 8021a1c:	e617      	b.n	802164e <_strtod_l+0x696>
 8021a1e:	2e01      	cmp	r6, #1
 8021a20:	d103      	bne.n	8021a2a <_strtod_l+0xa72>
 8021a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a24:	2b00      	cmp	r3, #0
 8021a26:	d100      	bne.n	8021a2a <_strtod_l+0xa72>
 8021a28:	e59c      	b.n	8021564 <_strtod_l+0x5ac>
 8021a2a:	2300      	movs	r3, #0
 8021a2c:	4c54      	ldr	r4, [pc, #336]	@ (8021b80 <_strtod_l+0xbc8>)
 8021a2e:	4d4d      	ldr	r5, [pc, #308]	@ (8021b64 <_strtod_l+0xbac>)
 8021a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8021a32:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021a34:	2400      	movs	r4, #0
 8021a36:	e7b2      	b.n	802199e <_strtod_l+0x9e6>
 8021a38:	2400      	movs	r4, #0
 8021a3a:	4d4b      	ldr	r5, [pc, #300]	@ (8021b68 <_strtod_l+0xbb0>)
 8021a3c:	e7aa      	b.n	8021994 <_strtod_l+0x9dc>
 8021a3e:	0020      	movs	r0, r4
 8021a40:	0029      	movs	r1, r5
 8021a42:	4b49      	ldr	r3, [pc, #292]	@ (8021b68 <_strtod_l+0xbb0>)
 8021a44:	2200      	movs	r2, #0
 8021a46:	f7e0 fdf9 	bl	800263c <__aeabi_dmul>
 8021a4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021a4c:	0004      	movs	r4, r0
 8021a4e:	000d      	movs	r5, r1
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	d09f      	beq.n	8021994 <_strtod_l+0x9dc>
 8021a54:	940a      	str	r4, [sp, #40]	@ 0x28
 8021a56:	950b      	str	r5, [sp, #44]	@ 0x2c
 8021a58:	e7a1      	b.n	802199e <_strtod_l+0x9e6>
 8021a5a:	2300      	movs	r3, #0
 8021a5c:	4c41      	ldr	r4, [pc, #260]	@ (8021b64 <_strtod_l+0xbac>)
 8021a5e:	0025      	movs	r5, r4
 8021a60:	930a      	str	r3, [sp, #40]	@ 0x28
 8021a62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021a64:	001c      	movs	r4, r3
 8021a66:	e79a      	b.n	802199e <_strtod_l+0x9e6>
 8021a68:	23d4      	movs	r3, #212	@ 0xd4
 8021a6a:	049b      	lsls	r3, r3, #18
 8021a6c:	18cf      	adds	r7, r1, r3
 8021a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a70:	9710      	str	r7, [sp, #64]	@ 0x40
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d1c2      	bne.n	80219fc <_strtod_l+0xa44>
 8021a76:	4b3d      	ldr	r3, [pc, #244]	@ (8021b6c <_strtod_l+0xbb4>)
 8021a78:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021a7a:	403b      	ands	r3, r7
 8021a7c:	429a      	cmp	r2, r3
 8021a7e:	d1bd      	bne.n	80219fc <_strtod_l+0xa44>
 8021a80:	0020      	movs	r0, r4
 8021a82:	0029      	movs	r1, r5
 8021a84:	f7de fe00 	bl	8000688 <__aeabi_d2lz>
 8021a88:	f7de fe38 	bl	80006fc <__aeabi_l2d>
 8021a8c:	0002      	movs	r2, r0
 8021a8e:	000b      	movs	r3, r1
 8021a90:	0020      	movs	r0, r4
 8021a92:	0029      	movs	r1, r5
 8021a94:	f7e1 f89a 	bl	8002bcc <__aeabi_dsub>
 8021a98:	033c      	lsls	r4, r7, #12
 8021a9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021a9c:	0b24      	lsrs	r4, r4, #12
 8021a9e:	4334      	orrs	r4, r6
 8021aa0:	900e      	str	r0, [sp, #56]	@ 0x38
 8021aa2:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021aa4:	4a37      	ldr	r2, [pc, #220]	@ (8021b84 <_strtod_l+0xbcc>)
 8021aa6:	431c      	orrs	r4, r3
 8021aa8:	d052      	beq.n	8021b50 <_strtod_l+0xb98>
 8021aaa:	4b37      	ldr	r3, [pc, #220]	@ (8021b88 <_strtod_l+0xbd0>)
 8021aac:	f7de fd06 	bl	80004bc <__aeabi_dcmplt>
 8021ab0:	2800      	cmp	r0, #0
 8021ab2:	d000      	beq.n	8021ab6 <_strtod_l+0xafe>
 8021ab4:	e4c3      	b.n	802143e <_strtod_l+0x486>
 8021ab6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021ab8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021aba:	4a34      	ldr	r2, [pc, #208]	@ (8021b8c <_strtod_l+0xbd4>)
 8021abc:	4b2a      	ldr	r3, [pc, #168]	@ (8021b68 <_strtod_l+0xbb0>)
 8021abe:	f7de fd11 	bl	80004e4 <__aeabi_dcmpgt>
 8021ac2:	2800      	cmp	r0, #0
 8021ac4:	d09a      	beq.n	80219fc <_strtod_l+0xa44>
 8021ac6:	e4ba      	b.n	802143e <_strtod_l+0x486>
 8021ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d02a      	beq.n	8021b24 <_strtod_l+0xb6c>
 8021ace:	23d4      	movs	r3, #212	@ 0xd4
 8021ad0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021ad2:	04db      	lsls	r3, r3, #19
 8021ad4:	429a      	cmp	r2, r3
 8021ad6:	d825      	bhi.n	8021b24 <_strtod_l+0xb6c>
 8021ad8:	0020      	movs	r0, r4
 8021ada:	0029      	movs	r1, r5
 8021adc:	4a2c      	ldr	r2, [pc, #176]	@ (8021b90 <_strtod_l+0xbd8>)
 8021ade:	4b2d      	ldr	r3, [pc, #180]	@ (8021b94 <_strtod_l+0xbdc>)
 8021ae0:	f7de fcf6 	bl	80004d0 <__aeabi_dcmple>
 8021ae4:	2800      	cmp	r0, #0
 8021ae6:	d016      	beq.n	8021b16 <_strtod_l+0xb5e>
 8021ae8:	0020      	movs	r0, r4
 8021aea:	0029      	movs	r1, r5
 8021aec:	f7de fdae 	bl	800064c <__aeabi_d2uiz>
 8021af0:	2800      	cmp	r0, #0
 8021af2:	d100      	bne.n	8021af6 <_strtod_l+0xb3e>
 8021af4:	3001      	adds	r0, #1
 8021af6:	f7e1 fc91 	bl	800341c <__aeabi_ui2d>
 8021afa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021afc:	0004      	movs	r4, r0
 8021afe:	000d      	movs	r5, r1
 8021b00:	2b00      	cmp	r3, #0
 8021b02:	d122      	bne.n	8021b4a <_strtod_l+0xb92>
 8021b04:	2380      	movs	r3, #128	@ 0x80
 8021b06:	061b      	lsls	r3, r3, #24
 8021b08:	18cb      	adds	r3, r1, r3
 8021b0a:	9018      	str	r0, [sp, #96]	@ 0x60
 8021b0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8021b0e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021b10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021b12:	9214      	str	r2, [sp, #80]	@ 0x50
 8021b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8021b16:	22d6      	movs	r2, #214	@ 0xd6
 8021b18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021b1a:	04d2      	lsls	r2, r2, #19
 8021b1c:	189b      	adds	r3, r3, r2
 8021b1e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021b20:	1a9b      	subs	r3, r3, r2
 8021b22:	9315      	str	r3, [sp, #84]	@ 0x54
 8021b24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021b26:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021b28:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8021b2a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8021b2c:	f002 ff46 	bl	80249bc <__ulp>
 8021b30:	0002      	movs	r2, r0
 8021b32:	000b      	movs	r3, r1
 8021b34:	0030      	movs	r0, r6
 8021b36:	0039      	movs	r1, r7
 8021b38:	f7e0 fd80 	bl	800263c <__aeabi_dmul>
 8021b3c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021b3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021b40:	f7df fdd4 	bl	80016ec <__aeabi_dadd>
 8021b44:	0006      	movs	r6, r0
 8021b46:	000f      	movs	r7, r1
 8021b48:	e791      	b.n	8021a6e <_strtod_l+0xab6>
 8021b4a:	9418      	str	r4, [sp, #96]	@ 0x60
 8021b4c:	9519      	str	r5, [sp, #100]	@ 0x64
 8021b4e:	e7de      	b.n	8021b0e <_strtod_l+0xb56>
 8021b50:	4b11      	ldr	r3, [pc, #68]	@ (8021b98 <_strtod_l+0xbe0>)
 8021b52:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021b54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021b56:	f7de fcb1 	bl	80004bc <__aeabi_dcmplt>
 8021b5a:	e7b2      	b.n	8021ac2 <_strtod_l+0xb0a>
 8021b5c:	fff00000 	.word	0xfff00000
 8021b60:	000fffff 	.word	0x000fffff
 8021b64:	3ff00000 	.word	0x3ff00000
 8021b68:	3fe00000 	.word	0x3fe00000
 8021b6c:	7ff00000 	.word	0x7ff00000
 8021b70:	7fe00000 	.word	0x7fe00000
 8021b74:	fcb00000 	.word	0xfcb00000
 8021b78:	7c9fffff 	.word	0x7c9fffff
 8021b7c:	7fefffff 	.word	0x7fefffff
 8021b80:	bff00000 	.word	0xbff00000
 8021b84:	94a03595 	.word	0x94a03595
 8021b88:	3fdfffff 	.word	0x3fdfffff
 8021b8c:	35afe535 	.word	0x35afe535
 8021b90:	ffc00000 	.word	0xffc00000
 8021b94:	41dfffff 	.word	0x41dfffff
 8021b98:	3fcfffff 	.word	0x3fcfffff

08021b9c <strtod>:
 8021b9c:	b510      	push	{r4, lr}
 8021b9e:	4c04      	ldr	r4, [pc, #16]	@ (8021bb0 <strtod+0x14>)
 8021ba0:	000a      	movs	r2, r1
 8021ba2:	0001      	movs	r1, r0
 8021ba4:	4b03      	ldr	r3, [pc, #12]	@ (8021bb4 <strtod+0x18>)
 8021ba6:	6820      	ldr	r0, [r4, #0]
 8021ba8:	f7ff fa06 	bl	8020fb8 <_strtod_l>
 8021bac:	bd10      	pop	{r4, pc}
 8021bae:	46c0      	nop			@ (mov r8, r8)
 8021bb0:	200003e0 	.word	0x200003e0
 8021bb4:	20000274 	.word	0x20000274

08021bb8 <_strtol_l.constprop.0>:
 8021bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bba:	b085      	sub	sp, #20
 8021bbc:	0017      	movs	r7, r2
 8021bbe:	001e      	movs	r6, r3
 8021bc0:	9003      	str	r0, [sp, #12]
 8021bc2:	9101      	str	r1, [sp, #4]
 8021bc4:	2b24      	cmp	r3, #36	@ 0x24
 8021bc6:	d844      	bhi.n	8021c52 <_strtol_l.constprop.0+0x9a>
 8021bc8:	000c      	movs	r4, r1
 8021bca:	2b01      	cmp	r3, #1
 8021bcc:	d041      	beq.n	8021c52 <_strtol_l.constprop.0+0x9a>
 8021bce:	4b3d      	ldr	r3, [pc, #244]	@ (8021cc4 <_strtol_l.constprop.0+0x10c>)
 8021bd0:	2208      	movs	r2, #8
 8021bd2:	469c      	mov	ip, r3
 8021bd4:	0023      	movs	r3, r4
 8021bd6:	4661      	mov	r1, ip
 8021bd8:	781d      	ldrb	r5, [r3, #0]
 8021bda:	3401      	adds	r4, #1
 8021bdc:	5d48      	ldrb	r0, [r1, r5]
 8021bde:	0001      	movs	r1, r0
 8021be0:	4011      	ands	r1, r2
 8021be2:	4210      	tst	r0, r2
 8021be4:	d1f6      	bne.n	8021bd4 <_strtol_l.constprop.0+0x1c>
 8021be6:	2d2d      	cmp	r5, #45	@ 0x2d
 8021be8:	d13a      	bne.n	8021c60 <_strtol_l.constprop.0+0xa8>
 8021bea:	7825      	ldrb	r5, [r4, #0]
 8021bec:	1c9c      	adds	r4, r3, #2
 8021bee:	2301      	movs	r3, #1
 8021bf0:	9300      	str	r3, [sp, #0]
 8021bf2:	2210      	movs	r2, #16
 8021bf4:	0033      	movs	r3, r6
 8021bf6:	4393      	bics	r3, r2
 8021bf8:	d109      	bne.n	8021c0e <_strtol_l.constprop.0+0x56>
 8021bfa:	2d30      	cmp	r5, #48	@ 0x30
 8021bfc:	d136      	bne.n	8021c6c <_strtol_l.constprop.0+0xb4>
 8021bfe:	2120      	movs	r1, #32
 8021c00:	7823      	ldrb	r3, [r4, #0]
 8021c02:	438b      	bics	r3, r1
 8021c04:	2b58      	cmp	r3, #88	@ 0x58
 8021c06:	d131      	bne.n	8021c6c <_strtol_l.constprop.0+0xb4>
 8021c08:	0016      	movs	r6, r2
 8021c0a:	7865      	ldrb	r5, [r4, #1]
 8021c0c:	3402      	adds	r4, #2
 8021c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8021cc8 <_strtol_l.constprop.0+0x110>)
 8021c10:	9b00      	ldr	r3, [sp, #0]
 8021c12:	4694      	mov	ip, r2
 8021c14:	4463      	add	r3, ip
 8021c16:	0031      	movs	r1, r6
 8021c18:	0018      	movs	r0, r3
 8021c1a:	9302      	str	r3, [sp, #8]
 8021c1c:	f7de fb48 	bl	80002b0 <__aeabi_uidivmod>
 8021c20:	2200      	movs	r2, #0
 8021c22:	4684      	mov	ip, r0
 8021c24:	0010      	movs	r0, r2
 8021c26:	002b      	movs	r3, r5
 8021c28:	3b30      	subs	r3, #48	@ 0x30
 8021c2a:	2b09      	cmp	r3, #9
 8021c2c:	d825      	bhi.n	8021c7a <_strtol_l.constprop.0+0xc2>
 8021c2e:	001d      	movs	r5, r3
 8021c30:	42ae      	cmp	r6, r5
 8021c32:	dd31      	ble.n	8021c98 <_strtol_l.constprop.0+0xe0>
 8021c34:	1c53      	adds	r3, r2, #1
 8021c36:	d009      	beq.n	8021c4c <_strtol_l.constprop.0+0x94>
 8021c38:	2201      	movs	r2, #1
 8021c3a:	4252      	negs	r2, r2
 8021c3c:	4584      	cmp	ip, r0
 8021c3e:	d305      	bcc.n	8021c4c <_strtol_l.constprop.0+0x94>
 8021c40:	d101      	bne.n	8021c46 <_strtol_l.constprop.0+0x8e>
 8021c42:	42a9      	cmp	r1, r5
 8021c44:	db25      	blt.n	8021c92 <_strtol_l.constprop.0+0xda>
 8021c46:	2201      	movs	r2, #1
 8021c48:	4370      	muls	r0, r6
 8021c4a:	1828      	adds	r0, r5, r0
 8021c4c:	7825      	ldrb	r5, [r4, #0]
 8021c4e:	3401      	adds	r4, #1
 8021c50:	e7e9      	b.n	8021c26 <_strtol_l.constprop.0+0x6e>
 8021c52:	f000 ffe7 	bl	8022c24 <__errno>
 8021c56:	2316      	movs	r3, #22
 8021c58:	6003      	str	r3, [r0, #0]
 8021c5a:	2000      	movs	r0, #0
 8021c5c:	b005      	add	sp, #20
 8021c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c60:	9100      	str	r1, [sp, #0]
 8021c62:	2d2b      	cmp	r5, #43	@ 0x2b
 8021c64:	d1c5      	bne.n	8021bf2 <_strtol_l.constprop.0+0x3a>
 8021c66:	7825      	ldrb	r5, [r4, #0]
 8021c68:	1c9c      	adds	r4, r3, #2
 8021c6a:	e7c2      	b.n	8021bf2 <_strtol_l.constprop.0+0x3a>
 8021c6c:	2e00      	cmp	r6, #0
 8021c6e:	d1ce      	bne.n	8021c0e <_strtol_l.constprop.0+0x56>
 8021c70:	3608      	adds	r6, #8
 8021c72:	2d30      	cmp	r5, #48	@ 0x30
 8021c74:	d0cb      	beq.n	8021c0e <_strtol_l.constprop.0+0x56>
 8021c76:	3602      	adds	r6, #2
 8021c78:	e7c9      	b.n	8021c0e <_strtol_l.constprop.0+0x56>
 8021c7a:	002b      	movs	r3, r5
 8021c7c:	3b41      	subs	r3, #65	@ 0x41
 8021c7e:	2b19      	cmp	r3, #25
 8021c80:	d801      	bhi.n	8021c86 <_strtol_l.constprop.0+0xce>
 8021c82:	3d37      	subs	r5, #55	@ 0x37
 8021c84:	e7d4      	b.n	8021c30 <_strtol_l.constprop.0+0x78>
 8021c86:	002b      	movs	r3, r5
 8021c88:	3b61      	subs	r3, #97	@ 0x61
 8021c8a:	2b19      	cmp	r3, #25
 8021c8c:	d804      	bhi.n	8021c98 <_strtol_l.constprop.0+0xe0>
 8021c8e:	3d57      	subs	r5, #87	@ 0x57
 8021c90:	e7ce      	b.n	8021c30 <_strtol_l.constprop.0+0x78>
 8021c92:	2201      	movs	r2, #1
 8021c94:	4252      	negs	r2, r2
 8021c96:	e7d9      	b.n	8021c4c <_strtol_l.constprop.0+0x94>
 8021c98:	1c53      	adds	r3, r2, #1
 8021c9a:	d108      	bne.n	8021cae <_strtol_l.constprop.0+0xf6>
 8021c9c:	2322      	movs	r3, #34	@ 0x22
 8021c9e:	9a03      	ldr	r2, [sp, #12]
 8021ca0:	9802      	ldr	r0, [sp, #8]
 8021ca2:	6013      	str	r3, [r2, #0]
 8021ca4:	2f00      	cmp	r7, #0
 8021ca6:	d0d9      	beq.n	8021c5c <_strtol_l.constprop.0+0xa4>
 8021ca8:	1e63      	subs	r3, r4, #1
 8021caa:	9301      	str	r3, [sp, #4]
 8021cac:	e007      	b.n	8021cbe <_strtol_l.constprop.0+0x106>
 8021cae:	9b00      	ldr	r3, [sp, #0]
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d000      	beq.n	8021cb6 <_strtol_l.constprop.0+0xfe>
 8021cb4:	4240      	negs	r0, r0
 8021cb6:	2f00      	cmp	r7, #0
 8021cb8:	d0d0      	beq.n	8021c5c <_strtol_l.constprop.0+0xa4>
 8021cba:	2a00      	cmp	r2, #0
 8021cbc:	d1f4      	bne.n	8021ca8 <_strtol_l.constprop.0+0xf0>
 8021cbe:	9b01      	ldr	r3, [sp, #4]
 8021cc0:	603b      	str	r3, [r7, #0]
 8021cc2:	e7cb      	b.n	8021c5c <_strtol_l.constprop.0+0xa4>
 8021cc4:	08029529 	.word	0x08029529
 8021cc8:	7fffffff 	.word	0x7fffffff

08021ccc <strtol>:
 8021ccc:	b510      	push	{r4, lr}
 8021cce:	4c04      	ldr	r4, [pc, #16]	@ (8021ce0 <strtol+0x14>)
 8021cd0:	0013      	movs	r3, r2
 8021cd2:	000a      	movs	r2, r1
 8021cd4:	0001      	movs	r1, r0
 8021cd6:	6820      	ldr	r0, [r4, #0]
 8021cd8:	f7ff ff6e 	bl	8021bb8 <_strtol_l.constprop.0>
 8021cdc:	bd10      	pop	{r4, pc}
 8021cde:	46c0      	nop			@ (mov r8, r8)
 8021ce0:	200003e0 	.word	0x200003e0

08021ce4 <__cvt>:
 8021ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ce6:	001f      	movs	r7, r3
 8021ce8:	2300      	movs	r3, #0
 8021cea:	0016      	movs	r6, r2
 8021cec:	b08b      	sub	sp, #44	@ 0x2c
 8021cee:	429f      	cmp	r7, r3
 8021cf0:	da04      	bge.n	8021cfc <__cvt+0x18>
 8021cf2:	2180      	movs	r1, #128	@ 0x80
 8021cf4:	0609      	lsls	r1, r1, #24
 8021cf6:	187b      	adds	r3, r7, r1
 8021cf8:	001f      	movs	r7, r3
 8021cfa:	232d      	movs	r3, #45	@ 0x2d
 8021cfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021cfe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021d00:	7013      	strb	r3, [r2, #0]
 8021d02:	2320      	movs	r3, #32
 8021d04:	2203      	movs	r2, #3
 8021d06:	439d      	bics	r5, r3
 8021d08:	2d46      	cmp	r5, #70	@ 0x46
 8021d0a:	d007      	beq.n	8021d1c <__cvt+0x38>
 8021d0c:	002b      	movs	r3, r5
 8021d0e:	3b45      	subs	r3, #69	@ 0x45
 8021d10:	4259      	negs	r1, r3
 8021d12:	414b      	adcs	r3, r1
 8021d14:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021d16:	3a01      	subs	r2, #1
 8021d18:	18cb      	adds	r3, r1, r3
 8021d1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8021d1c:	ab09      	add	r3, sp, #36	@ 0x24
 8021d1e:	9304      	str	r3, [sp, #16]
 8021d20:	ab08      	add	r3, sp, #32
 8021d22:	9303      	str	r3, [sp, #12]
 8021d24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021d26:	9200      	str	r2, [sp, #0]
 8021d28:	9302      	str	r3, [sp, #8]
 8021d2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021d2c:	0032      	movs	r2, r6
 8021d2e:	9301      	str	r3, [sp, #4]
 8021d30:	003b      	movs	r3, r7
 8021d32:	f001 f84d 	bl	8022dd0 <_dtoa_r>
 8021d36:	0004      	movs	r4, r0
 8021d38:	2d47      	cmp	r5, #71	@ 0x47
 8021d3a:	d11b      	bne.n	8021d74 <__cvt+0x90>
 8021d3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021d3e:	07db      	lsls	r3, r3, #31
 8021d40:	d511      	bpl.n	8021d66 <__cvt+0x82>
 8021d42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021d44:	18c3      	adds	r3, r0, r3
 8021d46:	9307      	str	r3, [sp, #28]
 8021d48:	2200      	movs	r2, #0
 8021d4a:	2300      	movs	r3, #0
 8021d4c:	0030      	movs	r0, r6
 8021d4e:	0039      	movs	r1, r7
 8021d50:	f7de fbae 	bl	80004b0 <__aeabi_dcmpeq>
 8021d54:	2800      	cmp	r0, #0
 8021d56:	d001      	beq.n	8021d5c <__cvt+0x78>
 8021d58:	9b07      	ldr	r3, [sp, #28]
 8021d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d5c:	2230      	movs	r2, #48	@ 0x30
 8021d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d60:	9907      	ldr	r1, [sp, #28]
 8021d62:	428b      	cmp	r3, r1
 8021d64:	d320      	bcc.n	8021da8 <__cvt+0xc4>
 8021d66:	0020      	movs	r0, r4
 8021d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d6a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021d6c:	1b1b      	subs	r3, r3, r4
 8021d6e:	6013      	str	r3, [r2, #0]
 8021d70:	b00b      	add	sp, #44	@ 0x2c
 8021d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021d76:	18c3      	adds	r3, r0, r3
 8021d78:	9307      	str	r3, [sp, #28]
 8021d7a:	2d46      	cmp	r5, #70	@ 0x46
 8021d7c:	d1e4      	bne.n	8021d48 <__cvt+0x64>
 8021d7e:	7803      	ldrb	r3, [r0, #0]
 8021d80:	2b30      	cmp	r3, #48	@ 0x30
 8021d82:	d10c      	bne.n	8021d9e <__cvt+0xba>
 8021d84:	2200      	movs	r2, #0
 8021d86:	2300      	movs	r3, #0
 8021d88:	0030      	movs	r0, r6
 8021d8a:	0039      	movs	r1, r7
 8021d8c:	f7de fb90 	bl	80004b0 <__aeabi_dcmpeq>
 8021d90:	2800      	cmp	r0, #0
 8021d92:	d104      	bne.n	8021d9e <__cvt+0xba>
 8021d94:	2301      	movs	r3, #1
 8021d96:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021d98:	1a9b      	subs	r3, r3, r2
 8021d9a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021d9c:	6013      	str	r3, [r2, #0]
 8021d9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021da0:	9a07      	ldr	r2, [sp, #28]
 8021da2:	681b      	ldr	r3, [r3, #0]
 8021da4:	18d3      	adds	r3, r2, r3
 8021da6:	e7ce      	b.n	8021d46 <__cvt+0x62>
 8021da8:	1c59      	adds	r1, r3, #1
 8021daa:	9109      	str	r1, [sp, #36]	@ 0x24
 8021dac:	701a      	strb	r2, [r3, #0]
 8021dae:	e7d6      	b.n	8021d5e <__cvt+0x7a>

08021db0 <__exponent>:
 8021db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021db2:	232b      	movs	r3, #43	@ 0x2b
 8021db4:	0005      	movs	r5, r0
 8021db6:	000c      	movs	r4, r1
 8021db8:	b085      	sub	sp, #20
 8021dba:	7002      	strb	r2, [r0, #0]
 8021dbc:	2900      	cmp	r1, #0
 8021dbe:	da01      	bge.n	8021dc4 <__exponent+0x14>
 8021dc0:	424c      	negs	r4, r1
 8021dc2:	3302      	adds	r3, #2
 8021dc4:	706b      	strb	r3, [r5, #1]
 8021dc6:	2c09      	cmp	r4, #9
 8021dc8:	dd2c      	ble.n	8021e24 <__exponent+0x74>
 8021dca:	ab02      	add	r3, sp, #8
 8021dcc:	1dde      	adds	r6, r3, #7
 8021dce:	0020      	movs	r0, r4
 8021dd0:	210a      	movs	r1, #10
 8021dd2:	f7de fb57 	bl	8000484 <__aeabi_idivmod>
 8021dd6:	0037      	movs	r7, r6
 8021dd8:	3130      	adds	r1, #48	@ 0x30
 8021dda:	3e01      	subs	r6, #1
 8021ddc:	0020      	movs	r0, r4
 8021dde:	7031      	strb	r1, [r6, #0]
 8021de0:	210a      	movs	r1, #10
 8021de2:	9401      	str	r4, [sp, #4]
 8021de4:	f7de fa68 	bl	80002b8 <__divsi3>
 8021de8:	9b01      	ldr	r3, [sp, #4]
 8021dea:	0004      	movs	r4, r0
 8021dec:	2b63      	cmp	r3, #99	@ 0x63
 8021dee:	dcee      	bgt.n	8021dce <__exponent+0x1e>
 8021df0:	1eba      	subs	r2, r7, #2
 8021df2:	1ca8      	adds	r0, r5, #2
 8021df4:	0001      	movs	r1, r0
 8021df6:	0013      	movs	r3, r2
 8021df8:	3430      	adds	r4, #48	@ 0x30
 8021dfa:	7014      	strb	r4, [r2, #0]
 8021dfc:	ac02      	add	r4, sp, #8
 8021dfe:	3407      	adds	r4, #7
 8021e00:	429c      	cmp	r4, r3
 8021e02:	d80a      	bhi.n	8021e1a <__exponent+0x6a>
 8021e04:	2300      	movs	r3, #0
 8021e06:	42a2      	cmp	r2, r4
 8021e08:	d803      	bhi.n	8021e12 <__exponent+0x62>
 8021e0a:	3309      	adds	r3, #9
 8021e0c:	aa02      	add	r2, sp, #8
 8021e0e:	189b      	adds	r3, r3, r2
 8021e10:	1bdb      	subs	r3, r3, r7
 8021e12:	18c0      	adds	r0, r0, r3
 8021e14:	1b40      	subs	r0, r0, r5
 8021e16:	b005      	add	sp, #20
 8021e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e1a:	781c      	ldrb	r4, [r3, #0]
 8021e1c:	3301      	adds	r3, #1
 8021e1e:	700c      	strb	r4, [r1, #0]
 8021e20:	3101      	adds	r1, #1
 8021e22:	e7eb      	b.n	8021dfc <__exponent+0x4c>
 8021e24:	2330      	movs	r3, #48	@ 0x30
 8021e26:	18e4      	adds	r4, r4, r3
 8021e28:	70ab      	strb	r3, [r5, #2]
 8021e2a:	1d28      	adds	r0, r5, #4
 8021e2c:	70ec      	strb	r4, [r5, #3]
 8021e2e:	e7f1      	b.n	8021e14 <__exponent+0x64>

08021e30 <_printf_float>:
 8021e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e32:	b097      	sub	sp, #92	@ 0x5c
 8021e34:	000d      	movs	r5, r1
 8021e36:	920a      	str	r2, [sp, #40]	@ 0x28
 8021e38:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8021e3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021e3c:	9009      	str	r0, [sp, #36]	@ 0x24
 8021e3e:	f000 fe9f 	bl	8022b80 <_localeconv_r>
 8021e42:	6803      	ldr	r3, [r0, #0]
 8021e44:	0018      	movs	r0, r3
 8021e46:	930d      	str	r3, [sp, #52]	@ 0x34
 8021e48:	f7de f990 	bl	800016c <strlen>
 8021e4c:	2300      	movs	r3, #0
 8021e4e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021e50:	9314      	str	r3, [sp, #80]	@ 0x50
 8021e52:	7e2b      	ldrb	r3, [r5, #24]
 8021e54:	2207      	movs	r2, #7
 8021e56:	930c      	str	r3, [sp, #48]	@ 0x30
 8021e58:	682b      	ldr	r3, [r5, #0]
 8021e5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8021e5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021e5e:	6823      	ldr	r3, [r4, #0]
 8021e60:	05c9      	lsls	r1, r1, #23
 8021e62:	d545      	bpl.n	8021ef0 <_printf_float+0xc0>
 8021e64:	189b      	adds	r3, r3, r2
 8021e66:	4393      	bics	r3, r2
 8021e68:	001a      	movs	r2, r3
 8021e6a:	3208      	adds	r2, #8
 8021e6c:	6022      	str	r2, [r4, #0]
 8021e6e:	2201      	movs	r2, #1
 8021e70:	681e      	ldr	r6, [r3, #0]
 8021e72:	685f      	ldr	r7, [r3, #4]
 8021e74:	007b      	lsls	r3, r7, #1
 8021e76:	085b      	lsrs	r3, r3, #1
 8021e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8021e7a:	9610      	str	r6, [sp, #64]	@ 0x40
 8021e7c:	64ae      	str	r6, [r5, #72]	@ 0x48
 8021e7e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8021e80:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021e82:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021e84:	4ba7      	ldr	r3, [pc, #668]	@ (8022124 <_printf_float+0x2f4>)
 8021e86:	4252      	negs	r2, r2
 8021e88:	f7e1 fa3c 	bl	8003304 <__aeabi_dcmpun>
 8021e8c:	2800      	cmp	r0, #0
 8021e8e:	d131      	bne.n	8021ef4 <_printf_float+0xc4>
 8021e90:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021e92:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021e94:	2201      	movs	r2, #1
 8021e96:	4ba3      	ldr	r3, [pc, #652]	@ (8022124 <_printf_float+0x2f4>)
 8021e98:	4252      	negs	r2, r2
 8021e9a:	f7de fb19 	bl	80004d0 <__aeabi_dcmple>
 8021e9e:	2800      	cmp	r0, #0
 8021ea0:	d128      	bne.n	8021ef4 <_printf_float+0xc4>
 8021ea2:	2200      	movs	r2, #0
 8021ea4:	2300      	movs	r3, #0
 8021ea6:	0030      	movs	r0, r6
 8021ea8:	0039      	movs	r1, r7
 8021eaa:	f7de fb07 	bl	80004bc <__aeabi_dcmplt>
 8021eae:	2800      	cmp	r0, #0
 8021eb0:	d003      	beq.n	8021eba <_printf_float+0x8a>
 8021eb2:	002b      	movs	r3, r5
 8021eb4:	222d      	movs	r2, #45	@ 0x2d
 8021eb6:	3343      	adds	r3, #67	@ 0x43
 8021eb8:	701a      	strb	r2, [r3, #0]
 8021eba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ebc:	4f9a      	ldr	r7, [pc, #616]	@ (8022128 <_printf_float+0x2f8>)
 8021ebe:	2b47      	cmp	r3, #71	@ 0x47
 8021ec0:	d900      	bls.n	8021ec4 <_printf_float+0x94>
 8021ec2:	4f9a      	ldr	r7, [pc, #616]	@ (802212c <_printf_float+0x2fc>)
 8021ec4:	2303      	movs	r3, #3
 8021ec6:	2400      	movs	r4, #0
 8021ec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021eca:	612b      	str	r3, [r5, #16]
 8021ecc:	3301      	adds	r3, #1
 8021ece:	439a      	bics	r2, r3
 8021ed0:	602a      	str	r2, [r5, #0]
 8021ed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021ed4:	0029      	movs	r1, r5
 8021ed6:	9300      	str	r3, [sp, #0]
 8021ed8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021edc:	aa15      	add	r2, sp, #84	@ 0x54
 8021ede:	f000 f9e5 	bl	80222ac <_printf_common>
 8021ee2:	3001      	adds	r0, #1
 8021ee4:	d000      	beq.n	8021ee8 <_printf_float+0xb8>
 8021ee6:	e09f      	b.n	8022028 <_printf_float+0x1f8>
 8021ee8:	2001      	movs	r0, #1
 8021eea:	4240      	negs	r0, r0
 8021eec:	b017      	add	sp, #92	@ 0x5c
 8021eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ef0:	3307      	adds	r3, #7
 8021ef2:	e7b8      	b.n	8021e66 <_printf_float+0x36>
 8021ef4:	0032      	movs	r2, r6
 8021ef6:	003b      	movs	r3, r7
 8021ef8:	0030      	movs	r0, r6
 8021efa:	0039      	movs	r1, r7
 8021efc:	f7e1 fa02 	bl	8003304 <__aeabi_dcmpun>
 8021f00:	2800      	cmp	r0, #0
 8021f02:	d00b      	beq.n	8021f1c <_printf_float+0xec>
 8021f04:	2f00      	cmp	r7, #0
 8021f06:	da03      	bge.n	8021f10 <_printf_float+0xe0>
 8021f08:	002b      	movs	r3, r5
 8021f0a:	222d      	movs	r2, #45	@ 0x2d
 8021f0c:	3343      	adds	r3, #67	@ 0x43
 8021f0e:	701a      	strb	r2, [r3, #0]
 8021f10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f12:	4f87      	ldr	r7, [pc, #540]	@ (8022130 <_printf_float+0x300>)
 8021f14:	2b47      	cmp	r3, #71	@ 0x47
 8021f16:	d9d5      	bls.n	8021ec4 <_printf_float+0x94>
 8021f18:	4f86      	ldr	r7, [pc, #536]	@ (8022134 <_printf_float+0x304>)
 8021f1a:	e7d3      	b.n	8021ec4 <_printf_float+0x94>
 8021f1c:	2220      	movs	r2, #32
 8021f1e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021f20:	686b      	ldr	r3, [r5, #4]
 8021f22:	4394      	bics	r4, r2
 8021f24:	1c5a      	adds	r2, r3, #1
 8021f26:	d146      	bne.n	8021fb6 <_printf_float+0x186>
 8021f28:	3307      	adds	r3, #7
 8021f2a:	606b      	str	r3, [r5, #4]
 8021f2c:	2380      	movs	r3, #128	@ 0x80
 8021f2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021f30:	00db      	lsls	r3, r3, #3
 8021f32:	4313      	orrs	r3, r2
 8021f34:	2200      	movs	r2, #0
 8021f36:	602b      	str	r3, [r5, #0]
 8021f38:	9206      	str	r2, [sp, #24]
 8021f3a:	aa14      	add	r2, sp, #80	@ 0x50
 8021f3c:	9205      	str	r2, [sp, #20]
 8021f3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021f40:	a90a      	add	r1, sp, #40	@ 0x28
 8021f42:	9204      	str	r2, [sp, #16]
 8021f44:	aa13      	add	r2, sp, #76	@ 0x4c
 8021f46:	9203      	str	r2, [sp, #12]
 8021f48:	2223      	movs	r2, #35	@ 0x23
 8021f4a:	1852      	adds	r2, r2, r1
 8021f4c:	9202      	str	r2, [sp, #8]
 8021f4e:	9301      	str	r3, [sp, #4]
 8021f50:	686b      	ldr	r3, [r5, #4]
 8021f52:	0032      	movs	r2, r6
 8021f54:	9300      	str	r3, [sp, #0]
 8021f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f58:	003b      	movs	r3, r7
 8021f5a:	f7ff fec3 	bl	8021ce4 <__cvt>
 8021f5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021f60:	0007      	movs	r7, r0
 8021f62:	2c47      	cmp	r4, #71	@ 0x47
 8021f64:	d12d      	bne.n	8021fc2 <_printf_float+0x192>
 8021f66:	1cd3      	adds	r3, r2, #3
 8021f68:	db02      	blt.n	8021f70 <_printf_float+0x140>
 8021f6a:	686b      	ldr	r3, [r5, #4]
 8021f6c:	429a      	cmp	r2, r3
 8021f6e:	dd48      	ble.n	8022002 <_printf_float+0x1d2>
 8021f70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f72:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021f74:	3b02      	subs	r3, #2
 8021f76:	b2db      	uxtb	r3, r3
 8021f78:	930c      	str	r3, [sp, #48]	@ 0x30
 8021f7a:	0028      	movs	r0, r5
 8021f7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021f7e:	3901      	subs	r1, #1
 8021f80:	3050      	adds	r0, #80	@ 0x50
 8021f82:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021f84:	f7ff ff14 	bl	8021db0 <__exponent>
 8021f88:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021f8a:	0004      	movs	r4, r0
 8021f8c:	1813      	adds	r3, r2, r0
 8021f8e:	612b      	str	r3, [r5, #16]
 8021f90:	2a01      	cmp	r2, #1
 8021f92:	dc02      	bgt.n	8021f9a <_printf_float+0x16a>
 8021f94:	682a      	ldr	r2, [r5, #0]
 8021f96:	07d2      	lsls	r2, r2, #31
 8021f98:	d501      	bpl.n	8021f9e <_printf_float+0x16e>
 8021f9a:	3301      	adds	r3, #1
 8021f9c:	612b      	str	r3, [r5, #16]
 8021f9e:	2323      	movs	r3, #35	@ 0x23
 8021fa0:	aa0a      	add	r2, sp, #40	@ 0x28
 8021fa2:	189b      	adds	r3, r3, r2
 8021fa4:	781b      	ldrb	r3, [r3, #0]
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d100      	bne.n	8021fac <_printf_float+0x17c>
 8021faa:	e792      	b.n	8021ed2 <_printf_float+0xa2>
 8021fac:	002b      	movs	r3, r5
 8021fae:	222d      	movs	r2, #45	@ 0x2d
 8021fb0:	3343      	adds	r3, #67	@ 0x43
 8021fb2:	701a      	strb	r2, [r3, #0]
 8021fb4:	e78d      	b.n	8021ed2 <_printf_float+0xa2>
 8021fb6:	2c47      	cmp	r4, #71	@ 0x47
 8021fb8:	d1b8      	bne.n	8021f2c <_printf_float+0xfc>
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	d1b6      	bne.n	8021f2c <_printf_float+0xfc>
 8021fbe:	3301      	adds	r3, #1
 8021fc0:	e7b3      	b.n	8021f2a <_printf_float+0xfa>
 8021fc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021fc4:	0011      	movs	r1, r2
 8021fc6:	2b65      	cmp	r3, #101	@ 0x65
 8021fc8:	d9d7      	bls.n	8021f7a <_printf_float+0x14a>
 8021fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021fcc:	2b66      	cmp	r3, #102	@ 0x66
 8021fce:	d11a      	bne.n	8022006 <_printf_float+0x1d6>
 8021fd0:	686b      	ldr	r3, [r5, #4]
 8021fd2:	2a00      	cmp	r2, #0
 8021fd4:	dd09      	ble.n	8021fea <_printf_float+0x1ba>
 8021fd6:	612a      	str	r2, [r5, #16]
 8021fd8:	2b00      	cmp	r3, #0
 8021fda:	d102      	bne.n	8021fe2 <_printf_float+0x1b2>
 8021fdc:	6829      	ldr	r1, [r5, #0]
 8021fde:	07c9      	lsls	r1, r1, #31
 8021fe0:	d50b      	bpl.n	8021ffa <_printf_float+0x1ca>
 8021fe2:	3301      	adds	r3, #1
 8021fe4:	189b      	adds	r3, r3, r2
 8021fe6:	612b      	str	r3, [r5, #16]
 8021fe8:	e007      	b.n	8021ffa <_printf_float+0x1ca>
 8021fea:	2b00      	cmp	r3, #0
 8021fec:	d103      	bne.n	8021ff6 <_printf_float+0x1c6>
 8021fee:	2201      	movs	r2, #1
 8021ff0:	6829      	ldr	r1, [r5, #0]
 8021ff2:	4211      	tst	r1, r2
 8021ff4:	d000      	beq.n	8021ff8 <_printf_float+0x1c8>
 8021ff6:	1c9a      	adds	r2, r3, #2
 8021ff8:	612a      	str	r2, [r5, #16]
 8021ffa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021ffc:	2400      	movs	r4, #0
 8021ffe:	65ab      	str	r3, [r5, #88]	@ 0x58
 8022000:	e7cd      	b.n	8021f9e <_printf_float+0x16e>
 8022002:	2367      	movs	r3, #103	@ 0x67
 8022004:	930c      	str	r3, [sp, #48]	@ 0x30
 8022006:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022008:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802200a:	4299      	cmp	r1, r3
 802200c:	db06      	blt.n	802201c <_printf_float+0x1ec>
 802200e:	682b      	ldr	r3, [r5, #0]
 8022010:	6129      	str	r1, [r5, #16]
 8022012:	07db      	lsls	r3, r3, #31
 8022014:	d5f1      	bpl.n	8021ffa <_printf_float+0x1ca>
 8022016:	3101      	adds	r1, #1
 8022018:	6129      	str	r1, [r5, #16]
 802201a:	e7ee      	b.n	8021ffa <_printf_float+0x1ca>
 802201c:	2201      	movs	r2, #1
 802201e:	2900      	cmp	r1, #0
 8022020:	dce0      	bgt.n	8021fe4 <_printf_float+0x1b4>
 8022022:	1892      	adds	r2, r2, r2
 8022024:	1a52      	subs	r2, r2, r1
 8022026:	e7dd      	b.n	8021fe4 <_printf_float+0x1b4>
 8022028:	682a      	ldr	r2, [r5, #0]
 802202a:	0553      	lsls	r3, r2, #21
 802202c:	d408      	bmi.n	8022040 <_printf_float+0x210>
 802202e:	692b      	ldr	r3, [r5, #16]
 8022030:	003a      	movs	r2, r7
 8022032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022034:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022036:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022038:	47a0      	blx	r4
 802203a:	3001      	adds	r0, #1
 802203c:	d129      	bne.n	8022092 <_printf_float+0x262>
 802203e:	e753      	b.n	8021ee8 <_printf_float+0xb8>
 8022040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022042:	2b65      	cmp	r3, #101	@ 0x65
 8022044:	d800      	bhi.n	8022048 <_printf_float+0x218>
 8022046:	e0da      	b.n	80221fe <_printf_float+0x3ce>
 8022048:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 802204a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 802204c:	2200      	movs	r2, #0
 802204e:	2300      	movs	r3, #0
 8022050:	f7de fa2e 	bl	80004b0 <__aeabi_dcmpeq>
 8022054:	2800      	cmp	r0, #0
 8022056:	d033      	beq.n	80220c0 <_printf_float+0x290>
 8022058:	2301      	movs	r3, #1
 802205a:	4a37      	ldr	r2, [pc, #220]	@ (8022138 <_printf_float+0x308>)
 802205c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802205e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022060:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022062:	47a0      	blx	r4
 8022064:	3001      	adds	r0, #1
 8022066:	d100      	bne.n	802206a <_printf_float+0x23a>
 8022068:	e73e      	b.n	8021ee8 <_printf_float+0xb8>
 802206a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802206c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802206e:	42b3      	cmp	r3, r6
 8022070:	db02      	blt.n	8022078 <_printf_float+0x248>
 8022072:	682b      	ldr	r3, [r5, #0]
 8022074:	07db      	lsls	r3, r3, #31
 8022076:	d50c      	bpl.n	8022092 <_printf_float+0x262>
 8022078:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802207a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802207c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802207e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022080:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022082:	47a0      	blx	r4
 8022084:	2400      	movs	r4, #0
 8022086:	3001      	adds	r0, #1
 8022088:	d100      	bne.n	802208c <_printf_float+0x25c>
 802208a:	e72d      	b.n	8021ee8 <_printf_float+0xb8>
 802208c:	1e73      	subs	r3, r6, #1
 802208e:	42a3      	cmp	r3, r4
 8022090:	dc0a      	bgt.n	80220a8 <_printf_float+0x278>
 8022092:	682b      	ldr	r3, [r5, #0]
 8022094:	079b      	lsls	r3, r3, #30
 8022096:	d500      	bpl.n	802209a <_printf_float+0x26a>
 8022098:	e105      	b.n	80222a6 <_printf_float+0x476>
 802209a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802209c:	68e8      	ldr	r0, [r5, #12]
 802209e:	4298      	cmp	r0, r3
 80220a0:	db00      	blt.n	80220a4 <_printf_float+0x274>
 80220a2:	e723      	b.n	8021eec <_printf_float+0xbc>
 80220a4:	0018      	movs	r0, r3
 80220a6:	e721      	b.n	8021eec <_printf_float+0xbc>
 80220a8:	002a      	movs	r2, r5
 80220aa:	2301      	movs	r3, #1
 80220ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80220ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80220b2:	321a      	adds	r2, #26
 80220b4:	47b8      	blx	r7
 80220b6:	3001      	adds	r0, #1
 80220b8:	d100      	bne.n	80220bc <_printf_float+0x28c>
 80220ba:	e715      	b.n	8021ee8 <_printf_float+0xb8>
 80220bc:	3401      	adds	r4, #1
 80220be:	e7e5      	b.n	802208c <_printf_float+0x25c>
 80220c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	dc3a      	bgt.n	802213c <_printf_float+0x30c>
 80220c6:	2301      	movs	r3, #1
 80220c8:	4a1b      	ldr	r2, [pc, #108]	@ (8022138 <_printf_float+0x308>)
 80220ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80220cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80220d0:	47a0      	blx	r4
 80220d2:	3001      	adds	r0, #1
 80220d4:	d100      	bne.n	80220d8 <_printf_float+0x2a8>
 80220d6:	e707      	b.n	8021ee8 <_printf_float+0xb8>
 80220d8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80220da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80220dc:	4333      	orrs	r3, r6
 80220de:	d102      	bne.n	80220e6 <_printf_float+0x2b6>
 80220e0:	682b      	ldr	r3, [r5, #0]
 80220e2:	07db      	lsls	r3, r3, #31
 80220e4:	d5d5      	bpl.n	8022092 <_printf_float+0x262>
 80220e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80220e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80220ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80220ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80220f0:	47a0      	blx	r4
 80220f2:	2300      	movs	r3, #0
 80220f4:	3001      	adds	r0, #1
 80220f6:	d100      	bne.n	80220fa <_printf_float+0x2ca>
 80220f8:	e6f6      	b.n	8021ee8 <_printf_float+0xb8>
 80220fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80220fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80220fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022100:	425b      	negs	r3, r3
 8022102:	4293      	cmp	r3, r2
 8022104:	dc01      	bgt.n	802210a <_printf_float+0x2da>
 8022106:	0033      	movs	r3, r6
 8022108:	e792      	b.n	8022030 <_printf_float+0x200>
 802210a:	002a      	movs	r2, r5
 802210c:	2301      	movs	r3, #1
 802210e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022110:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022112:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022114:	321a      	adds	r2, #26
 8022116:	47a0      	blx	r4
 8022118:	3001      	adds	r0, #1
 802211a:	d100      	bne.n	802211e <_printf_float+0x2ee>
 802211c:	e6e4      	b.n	8021ee8 <_printf_float+0xb8>
 802211e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022120:	3301      	adds	r3, #1
 8022122:	e7ea      	b.n	80220fa <_printf_float+0x2ca>
 8022124:	7fefffff 	.word	0x7fefffff
 8022128:	08029629 	.word	0x08029629
 802212c:	0802962d 	.word	0x0802962d
 8022130:	08029631 	.word	0x08029631
 8022134:	08029635 	.word	0x08029635
 8022138:	08029639 	.word	0x08029639
 802213c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802213e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8022140:	930c      	str	r3, [sp, #48]	@ 0x30
 8022142:	429e      	cmp	r6, r3
 8022144:	dd00      	ble.n	8022148 <_printf_float+0x318>
 8022146:	001e      	movs	r6, r3
 8022148:	2e00      	cmp	r6, #0
 802214a:	dc31      	bgt.n	80221b0 <_printf_float+0x380>
 802214c:	43f3      	mvns	r3, r6
 802214e:	2400      	movs	r4, #0
 8022150:	17db      	asrs	r3, r3, #31
 8022152:	4033      	ands	r3, r6
 8022154:	930e      	str	r3, [sp, #56]	@ 0x38
 8022156:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8022158:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802215a:	1af3      	subs	r3, r6, r3
 802215c:	42a3      	cmp	r3, r4
 802215e:	dc30      	bgt.n	80221c2 <_printf_float+0x392>
 8022160:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022162:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022164:	429a      	cmp	r2, r3
 8022166:	dc38      	bgt.n	80221da <_printf_float+0x3aa>
 8022168:	682b      	ldr	r3, [r5, #0]
 802216a:	07db      	lsls	r3, r3, #31
 802216c:	d435      	bmi.n	80221da <_printf_float+0x3aa>
 802216e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022172:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022174:	1b9b      	subs	r3, r3, r6
 8022176:	1b14      	subs	r4, r2, r4
 8022178:	429c      	cmp	r4, r3
 802217a:	dd00      	ble.n	802217e <_printf_float+0x34e>
 802217c:	001c      	movs	r4, r3
 802217e:	2c00      	cmp	r4, #0
 8022180:	dc34      	bgt.n	80221ec <_printf_float+0x3bc>
 8022182:	43e3      	mvns	r3, r4
 8022184:	2600      	movs	r6, #0
 8022186:	17db      	asrs	r3, r3, #31
 8022188:	401c      	ands	r4, r3
 802218a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802218c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802218e:	1ad3      	subs	r3, r2, r3
 8022190:	1b1b      	subs	r3, r3, r4
 8022192:	42b3      	cmp	r3, r6
 8022194:	dc00      	bgt.n	8022198 <_printf_float+0x368>
 8022196:	e77c      	b.n	8022092 <_printf_float+0x262>
 8022198:	002a      	movs	r2, r5
 802219a:	2301      	movs	r3, #1
 802219c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802219e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80221a2:	321a      	adds	r2, #26
 80221a4:	47b8      	blx	r7
 80221a6:	3001      	adds	r0, #1
 80221a8:	d100      	bne.n	80221ac <_printf_float+0x37c>
 80221aa:	e69d      	b.n	8021ee8 <_printf_float+0xb8>
 80221ac:	3601      	adds	r6, #1
 80221ae:	e7ec      	b.n	802218a <_printf_float+0x35a>
 80221b0:	0033      	movs	r3, r6
 80221b2:	003a      	movs	r2, r7
 80221b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80221b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80221ba:	47a0      	blx	r4
 80221bc:	3001      	adds	r0, #1
 80221be:	d1c5      	bne.n	802214c <_printf_float+0x31c>
 80221c0:	e692      	b.n	8021ee8 <_printf_float+0xb8>
 80221c2:	002a      	movs	r2, r5
 80221c4:	2301      	movs	r3, #1
 80221c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80221c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221ca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80221cc:	321a      	adds	r2, #26
 80221ce:	47b0      	blx	r6
 80221d0:	3001      	adds	r0, #1
 80221d2:	d100      	bne.n	80221d6 <_printf_float+0x3a6>
 80221d4:	e688      	b.n	8021ee8 <_printf_float+0xb8>
 80221d6:	3401      	adds	r4, #1
 80221d8:	e7bd      	b.n	8022156 <_printf_float+0x326>
 80221da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80221dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80221de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80221e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80221e4:	47a0      	blx	r4
 80221e6:	3001      	adds	r0, #1
 80221e8:	d1c1      	bne.n	802216e <_printf_float+0x33e>
 80221ea:	e67d      	b.n	8021ee8 <_printf_float+0xb8>
 80221ec:	19ba      	adds	r2, r7, r6
 80221ee:	0023      	movs	r3, r4
 80221f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80221f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80221f6:	47b0      	blx	r6
 80221f8:	3001      	adds	r0, #1
 80221fa:	d1c2      	bne.n	8022182 <_printf_float+0x352>
 80221fc:	e674      	b.n	8021ee8 <_printf_float+0xb8>
 80221fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022200:	930c      	str	r3, [sp, #48]	@ 0x30
 8022202:	2b01      	cmp	r3, #1
 8022204:	dc02      	bgt.n	802220c <_printf_float+0x3dc>
 8022206:	2301      	movs	r3, #1
 8022208:	421a      	tst	r2, r3
 802220a:	d039      	beq.n	8022280 <_printf_float+0x450>
 802220c:	2301      	movs	r3, #1
 802220e:	003a      	movs	r2, r7
 8022210:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022214:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022216:	47b0      	blx	r6
 8022218:	3001      	adds	r0, #1
 802221a:	d100      	bne.n	802221e <_printf_float+0x3ee>
 802221c:	e664      	b.n	8021ee8 <_printf_float+0xb8>
 802221e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022220:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022222:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022224:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022226:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022228:	47b0      	blx	r6
 802222a:	3001      	adds	r0, #1
 802222c:	d100      	bne.n	8022230 <_printf_float+0x400>
 802222e:	e65b      	b.n	8021ee8 <_printf_float+0xb8>
 8022230:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8022232:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8022234:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022236:	2200      	movs	r2, #0
 8022238:	3b01      	subs	r3, #1
 802223a:	930c      	str	r3, [sp, #48]	@ 0x30
 802223c:	2300      	movs	r3, #0
 802223e:	f7de f937 	bl	80004b0 <__aeabi_dcmpeq>
 8022242:	2800      	cmp	r0, #0
 8022244:	d11a      	bne.n	802227c <_printf_float+0x44c>
 8022246:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022248:	1c7a      	adds	r2, r7, #1
 802224a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802224c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802224e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022250:	47b0      	blx	r6
 8022252:	3001      	adds	r0, #1
 8022254:	d10e      	bne.n	8022274 <_printf_float+0x444>
 8022256:	e647      	b.n	8021ee8 <_printf_float+0xb8>
 8022258:	002a      	movs	r2, r5
 802225a:	2301      	movs	r3, #1
 802225c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802225e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022260:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022262:	321a      	adds	r2, #26
 8022264:	47b8      	blx	r7
 8022266:	3001      	adds	r0, #1
 8022268:	d100      	bne.n	802226c <_printf_float+0x43c>
 802226a:	e63d      	b.n	8021ee8 <_printf_float+0xb8>
 802226c:	3601      	adds	r6, #1
 802226e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022270:	429e      	cmp	r6, r3
 8022272:	dbf1      	blt.n	8022258 <_printf_float+0x428>
 8022274:	002a      	movs	r2, r5
 8022276:	0023      	movs	r3, r4
 8022278:	3250      	adds	r2, #80	@ 0x50
 802227a:	e6da      	b.n	8022032 <_printf_float+0x202>
 802227c:	2600      	movs	r6, #0
 802227e:	e7f6      	b.n	802226e <_printf_float+0x43e>
 8022280:	003a      	movs	r2, r7
 8022282:	e7e2      	b.n	802224a <_printf_float+0x41a>
 8022284:	002a      	movs	r2, r5
 8022286:	2301      	movs	r3, #1
 8022288:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802228a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802228c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802228e:	3219      	adds	r2, #25
 8022290:	47b0      	blx	r6
 8022292:	3001      	adds	r0, #1
 8022294:	d100      	bne.n	8022298 <_printf_float+0x468>
 8022296:	e627      	b.n	8021ee8 <_printf_float+0xb8>
 8022298:	3401      	adds	r4, #1
 802229a:	68eb      	ldr	r3, [r5, #12]
 802229c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802229e:	1a9b      	subs	r3, r3, r2
 80222a0:	42a3      	cmp	r3, r4
 80222a2:	dcef      	bgt.n	8022284 <_printf_float+0x454>
 80222a4:	e6f9      	b.n	802209a <_printf_float+0x26a>
 80222a6:	2400      	movs	r4, #0
 80222a8:	e7f7      	b.n	802229a <_printf_float+0x46a>
 80222aa:	46c0      	nop			@ (mov r8, r8)

080222ac <_printf_common>:
 80222ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80222ae:	0016      	movs	r6, r2
 80222b0:	9301      	str	r3, [sp, #4]
 80222b2:	688a      	ldr	r2, [r1, #8]
 80222b4:	690b      	ldr	r3, [r1, #16]
 80222b6:	000c      	movs	r4, r1
 80222b8:	9000      	str	r0, [sp, #0]
 80222ba:	4293      	cmp	r3, r2
 80222bc:	da00      	bge.n	80222c0 <_printf_common+0x14>
 80222be:	0013      	movs	r3, r2
 80222c0:	0022      	movs	r2, r4
 80222c2:	6033      	str	r3, [r6, #0]
 80222c4:	3243      	adds	r2, #67	@ 0x43
 80222c6:	7812      	ldrb	r2, [r2, #0]
 80222c8:	2a00      	cmp	r2, #0
 80222ca:	d001      	beq.n	80222d0 <_printf_common+0x24>
 80222cc:	3301      	adds	r3, #1
 80222ce:	6033      	str	r3, [r6, #0]
 80222d0:	6823      	ldr	r3, [r4, #0]
 80222d2:	069b      	lsls	r3, r3, #26
 80222d4:	d502      	bpl.n	80222dc <_printf_common+0x30>
 80222d6:	6833      	ldr	r3, [r6, #0]
 80222d8:	3302      	adds	r3, #2
 80222da:	6033      	str	r3, [r6, #0]
 80222dc:	6822      	ldr	r2, [r4, #0]
 80222de:	2306      	movs	r3, #6
 80222e0:	0015      	movs	r5, r2
 80222e2:	401d      	ands	r5, r3
 80222e4:	421a      	tst	r2, r3
 80222e6:	d027      	beq.n	8022338 <_printf_common+0x8c>
 80222e8:	0023      	movs	r3, r4
 80222ea:	3343      	adds	r3, #67	@ 0x43
 80222ec:	781b      	ldrb	r3, [r3, #0]
 80222ee:	1e5a      	subs	r2, r3, #1
 80222f0:	4193      	sbcs	r3, r2
 80222f2:	6822      	ldr	r2, [r4, #0]
 80222f4:	0692      	lsls	r2, r2, #26
 80222f6:	d430      	bmi.n	802235a <_printf_common+0xae>
 80222f8:	0022      	movs	r2, r4
 80222fa:	9901      	ldr	r1, [sp, #4]
 80222fc:	9800      	ldr	r0, [sp, #0]
 80222fe:	9d08      	ldr	r5, [sp, #32]
 8022300:	3243      	adds	r2, #67	@ 0x43
 8022302:	47a8      	blx	r5
 8022304:	3001      	adds	r0, #1
 8022306:	d025      	beq.n	8022354 <_printf_common+0xa8>
 8022308:	2206      	movs	r2, #6
 802230a:	6823      	ldr	r3, [r4, #0]
 802230c:	2500      	movs	r5, #0
 802230e:	4013      	ands	r3, r2
 8022310:	2b04      	cmp	r3, #4
 8022312:	d105      	bne.n	8022320 <_printf_common+0x74>
 8022314:	6833      	ldr	r3, [r6, #0]
 8022316:	68e5      	ldr	r5, [r4, #12]
 8022318:	1aed      	subs	r5, r5, r3
 802231a:	43eb      	mvns	r3, r5
 802231c:	17db      	asrs	r3, r3, #31
 802231e:	401d      	ands	r5, r3
 8022320:	68a3      	ldr	r3, [r4, #8]
 8022322:	6922      	ldr	r2, [r4, #16]
 8022324:	4293      	cmp	r3, r2
 8022326:	dd01      	ble.n	802232c <_printf_common+0x80>
 8022328:	1a9b      	subs	r3, r3, r2
 802232a:	18ed      	adds	r5, r5, r3
 802232c:	2600      	movs	r6, #0
 802232e:	42b5      	cmp	r5, r6
 8022330:	d120      	bne.n	8022374 <_printf_common+0xc8>
 8022332:	2000      	movs	r0, #0
 8022334:	e010      	b.n	8022358 <_printf_common+0xac>
 8022336:	3501      	adds	r5, #1
 8022338:	68e3      	ldr	r3, [r4, #12]
 802233a:	6832      	ldr	r2, [r6, #0]
 802233c:	1a9b      	subs	r3, r3, r2
 802233e:	42ab      	cmp	r3, r5
 8022340:	ddd2      	ble.n	80222e8 <_printf_common+0x3c>
 8022342:	0022      	movs	r2, r4
 8022344:	2301      	movs	r3, #1
 8022346:	9901      	ldr	r1, [sp, #4]
 8022348:	9800      	ldr	r0, [sp, #0]
 802234a:	9f08      	ldr	r7, [sp, #32]
 802234c:	3219      	adds	r2, #25
 802234e:	47b8      	blx	r7
 8022350:	3001      	adds	r0, #1
 8022352:	d1f0      	bne.n	8022336 <_printf_common+0x8a>
 8022354:	2001      	movs	r0, #1
 8022356:	4240      	negs	r0, r0
 8022358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802235a:	2030      	movs	r0, #48	@ 0x30
 802235c:	18e1      	adds	r1, r4, r3
 802235e:	3143      	adds	r1, #67	@ 0x43
 8022360:	7008      	strb	r0, [r1, #0]
 8022362:	0021      	movs	r1, r4
 8022364:	1c5a      	adds	r2, r3, #1
 8022366:	3145      	adds	r1, #69	@ 0x45
 8022368:	7809      	ldrb	r1, [r1, #0]
 802236a:	18a2      	adds	r2, r4, r2
 802236c:	3243      	adds	r2, #67	@ 0x43
 802236e:	3302      	adds	r3, #2
 8022370:	7011      	strb	r1, [r2, #0]
 8022372:	e7c1      	b.n	80222f8 <_printf_common+0x4c>
 8022374:	0022      	movs	r2, r4
 8022376:	2301      	movs	r3, #1
 8022378:	9901      	ldr	r1, [sp, #4]
 802237a:	9800      	ldr	r0, [sp, #0]
 802237c:	9f08      	ldr	r7, [sp, #32]
 802237e:	321a      	adds	r2, #26
 8022380:	47b8      	blx	r7
 8022382:	3001      	adds	r0, #1
 8022384:	d0e6      	beq.n	8022354 <_printf_common+0xa8>
 8022386:	3601      	adds	r6, #1
 8022388:	e7d1      	b.n	802232e <_printf_common+0x82>
	...

0802238c <_printf_i>:
 802238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802238e:	b08b      	sub	sp, #44	@ 0x2c
 8022390:	9206      	str	r2, [sp, #24]
 8022392:	000a      	movs	r2, r1
 8022394:	3243      	adds	r2, #67	@ 0x43
 8022396:	9307      	str	r3, [sp, #28]
 8022398:	9005      	str	r0, [sp, #20]
 802239a:	9203      	str	r2, [sp, #12]
 802239c:	7e0a      	ldrb	r2, [r1, #24]
 802239e:	000c      	movs	r4, r1
 80223a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80223a2:	2a78      	cmp	r2, #120	@ 0x78
 80223a4:	d809      	bhi.n	80223ba <_printf_i+0x2e>
 80223a6:	2a62      	cmp	r2, #98	@ 0x62
 80223a8:	d80b      	bhi.n	80223c2 <_printf_i+0x36>
 80223aa:	2a00      	cmp	r2, #0
 80223ac:	d100      	bne.n	80223b0 <_printf_i+0x24>
 80223ae:	e0bc      	b.n	802252a <_printf_i+0x19e>
 80223b0:	497b      	ldr	r1, [pc, #492]	@ (80225a0 <_printf_i+0x214>)
 80223b2:	9104      	str	r1, [sp, #16]
 80223b4:	2a58      	cmp	r2, #88	@ 0x58
 80223b6:	d100      	bne.n	80223ba <_printf_i+0x2e>
 80223b8:	e090      	b.n	80224dc <_printf_i+0x150>
 80223ba:	0025      	movs	r5, r4
 80223bc:	3542      	adds	r5, #66	@ 0x42
 80223be:	702a      	strb	r2, [r5, #0]
 80223c0:	e022      	b.n	8022408 <_printf_i+0x7c>
 80223c2:	0010      	movs	r0, r2
 80223c4:	3863      	subs	r0, #99	@ 0x63
 80223c6:	2815      	cmp	r0, #21
 80223c8:	d8f7      	bhi.n	80223ba <_printf_i+0x2e>
 80223ca:	f7dd fee1 	bl	8000190 <__gnu_thumb1_case_shi>
 80223ce:	0016      	.short	0x0016
 80223d0:	fff6001f 	.word	0xfff6001f
 80223d4:	fff6fff6 	.word	0xfff6fff6
 80223d8:	001ffff6 	.word	0x001ffff6
 80223dc:	fff6fff6 	.word	0xfff6fff6
 80223e0:	fff6fff6 	.word	0xfff6fff6
 80223e4:	003600a1 	.word	0x003600a1
 80223e8:	fff60080 	.word	0xfff60080
 80223ec:	00b2fff6 	.word	0x00b2fff6
 80223f0:	0036fff6 	.word	0x0036fff6
 80223f4:	fff6fff6 	.word	0xfff6fff6
 80223f8:	0084      	.short	0x0084
 80223fa:	0025      	movs	r5, r4
 80223fc:	681a      	ldr	r2, [r3, #0]
 80223fe:	3542      	adds	r5, #66	@ 0x42
 8022400:	1d11      	adds	r1, r2, #4
 8022402:	6019      	str	r1, [r3, #0]
 8022404:	6813      	ldr	r3, [r2, #0]
 8022406:	702b      	strb	r3, [r5, #0]
 8022408:	2301      	movs	r3, #1
 802240a:	e0a0      	b.n	802254e <_printf_i+0x1c2>
 802240c:	6818      	ldr	r0, [r3, #0]
 802240e:	6809      	ldr	r1, [r1, #0]
 8022410:	1d02      	adds	r2, r0, #4
 8022412:	060d      	lsls	r5, r1, #24
 8022414:	d50b      	bpl.n	802242e <_printf_i+0xa2>
 8022416:	6806      	ldr	r6, [r0, #0]
 8022418:	601a      	str	r2, [r3, #0]
 802241a:	2e00      	cmp	r6, #0
 802241c:	da03      	bge.n	8022426 <_printf_i+0x9a>
 802241e:	232d      	movs	r3, #45	@ 0x2d
 8022420:	9a03      	ldr	r2, [sp, #12]
 8022422:	4276      	negs	r6, r6
 8022424:	7013      	strb	r3, [r2, #0]
 8022426:	4b5e      	ldr	r3, [pc, #376]	@ (80225a0 <_printf_i+0x214>)
 8022428:	270a      	movs	r7, #10
 802242a:	9304      	str	r3, [sp, #16]
 802242c:	e018      	b.n	8022460 <_printf_i+0xd4>
 802242e:	6806      	ldr	r6, [r0, #0]
 8022430:	601a      	str	r2, [r3, #0]
 8022432:	0649      	lsls	r1, r1, #25
 8022434:	d5f1      	bpl.n	802241a <_printf_i+0x8e>
 8022436:	b236      	sxth	r6, r6
 8022438:	e7ef      	b.n	802241a <_printf_i+0x8e>
 802243a:	6808      	ldr	r0, [r1, #0]
 802243c:	6819      	ldr	r1, [r3, #0]
 802243e:	c940      	ldmia	r1!, {r6}
 8022440:	0605      	lsls	r5, r0, #24
 8022442:	d402      	bmi.n	802244a <_printf_i+0xbe>
 8022444:	0640      	lsls	r0, r0, #25
 8022446:	d500      	bpl.n	802244a <_printf_i+0xbe>
 8022448:	b2b6      	uxth	r6, r6
 802244a:	6019      	str	r1, [r3, #0]
 802244c:	4b54      	ldr	r3, [pc, #336]	@ (80225a0 <_printf_i+0x214>)
 802244e:	270a      	movs	r7, #10
 8022450:	9304      	str	r3, [sp, #16]
 8022452:	2a6f      	cmp	r2, #111	@ 0x6f
 8022454:	d100      	bne.n	8022458 <_printf_i+0xcc>
 8022456:	3f02      	subs	r7, #2
 8022458:	0023      	movs	r3, r4
 802245a:	2200      	movs	r2, #0
 802245c:	3343      	adds	r3, #67	@ 0x43
 802245e:	701a      	strb	r2, [r3, #0]
 8022460:	6863      	ldr	r3, [r4, #4]
 8022462:	60a3      	str	r3, [r4, #8]
 8022464:	2b00      	cmp	r3, #0
 8022466:	db03      	blt.n	8022470 <_printf_i+0xe4>
 8022468:	2104      	movs	r1, #4
 802246a:	6822      	ldr	r2, [r4, #0]
 802246c:	438a      	bics	r2, r1
 802246e:	6022      	str	r2, [r4, #0]
 8022470:	2e00      	cmp	r6, #0
 8022472:	d102      	bne.n	802247a <_printf_i+0xee>
 8022474:	9d03      	ldr	r5, [sp, #12]
 8022476:	2b00      	cmp	r3, #0
 8022478:	d00c      	beq.n	8022494 <_printf_i+0x108>
 802247a:	9d03      	ldr	r5, [sp, #12]
 802247c:	0030      	movs	r0, r6
 802247e:	0039      	movs	r1, r7
 8022480:	f7dd ff16 	bl	80002b0 <__aeabi_uidivmod>
 8022484:	9b04      	ldr	r3, [sp, #16]
 8022486:	3d01      	subs	r5, #1
 8022488:	5c5b      	ldrb	r3, [r3, r1]
 802248a:	702b      	strb	r3, [r5, #0]
 802248c:	0033      	movs	r3, r6
 802248e:	0006      	movs	r6, r0
 8022490:	429f      	cmp	r7, r3
 8022492:	d9f3      	bls.n	802247c <_printf_i+0xf0>
 8022494:	2f08      	cmp	r7, #8
 8022496:	d109      	bne.n	80224ac <_printf_i+0x120>
 8022498:	6823      	ldr	r3, [r4, #0]
 802249a:	07db      	lsls	r3, r3, #31
 802249c:	d506      	bpl.n	80224ac <_printf_i+0x120>
 802249e:	6862      	ldr	r2, [r4, #4]
 80224a0:	6923      	ldr	r3, [r4, #16]
 80224a2:	429a      	cmp	r2, r3
 80224a4:	dc02      	bgt.n	80224ac <_printf_i+0x120>
 80224a6:	2330      	movs	r3, #48	@ 0x30
 80224a8:	3d01      	subs	r5, #1
 80224aa:	702b      	strb	r3, [r5, #0]
 80224ac:	9b03      	ldr	r3, [sp, #12]
 80224ae:	1b5b      	subs	r3, r3, r5
 80224b0:	6123      	str	r3, [r4, #16]
 80224b2:	9b07      	ldr	r3, [sp, #28]
 80224b4:	0021      	movs	r1, r4
 80224b6:	9300      	str	r3, [sp, #0]
 80224b8:	9805      	ldr	r0, [sp, #20]
 80224ba:	9b06      	ldr	r3, [sp, #24]
 80224bc:	aa09      	add	r2, sp, #36	@ 0x24
 80224be:	f7ff fef5 	bl	80222ac <_printf_common>
 80224c2:	3001      	adds	r0, #1
 80224c4:	d148      	bne.n	8022558 <_printf_i+0x1cc>
 80224c6:	2001      	movs	r0, #1
 80224c8:	4240      	negs	r0, r0
 80224ca:	b00b      	add	sp, #44	@ 0x2c
 80224cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80224ce:	2220      	movs	r2, #32
 80224d0:	6809      	ldr	r1, [r1, #0]
 80224d2:	430a      	orrs	r2, r1
 80224d4:	6022      	str	r2, [r4, #0]
 80224d6:	2278      	movs	r2, #120	@ 0x78
 80224d8:	4932      	ldr	r1, [pc, #200]	@ (80225a4 <_printf_i+0x218>)
 80224da:	9104      	str	r1, [sp, #16]
 80224dc:	0021      	movs	r1, r4
 80224de:	3145      	adds	r1, #69	@ 0x45
 80224e0:	700a      	strb	r2, [r1, #0]
 80224e2:	6819      	ldr	r1, [r3, #0]
 80224e4:	6822      	ldr	r2, [r4, #0]
 80224e6:	c940      	ldmia	r1!, {r6}
 80224e8:	0610      	lsls	r0, r2, #24
 80224ea:	d402      	bmi.n	80224f2 <_printf_i+0x166>
 80224ec:	0650      	lsls	r0, r2, #25
 80224ee:	d500      	bpl.n	80224f2 <_printf_i+0x166>
 80224f0:	b2b6      	uxth	r6, r6
 80224f2:	6019      	str	r1, [r3, #0]
 80224f4:	07d3      	lsls	r3, r2, #31
 80224f6:	d502      	bpl.n	80224fe <_printf_i+0x172>
 80224f8:	2320      	movs	r3, #32
 80224fa:	4313      	orrs	r3, r2
 80224fc:	6023      	str	r3, [r4, #0]
 80224fe:	2e00      	cmp	r6, #0
 8022500:	d001      	beq.n	8022506 <_printf_i+0x17a>
 8022502:	2710      	movs	r7, #16
 8022504:	e7a8      	b.n	8022458 <_printf_i+0xcc>
 8022506:	2220      	movs	r2, #32
 8022508:	6823      	ldr	r3, [r4, #0]
 802250a:	4393      	bics	r3, r2
 802250c:	6023      	str	r3, [r4, #0]
 802250e:	e7f8      	b.n	8022502 <_printf_i+0x176>
 8022510:	681a      	ldr	r2, [r3, #0]
 8022512:	680d      	ldr	r5, [r1, #0]
 8022514:	1d10      	adds	r0, r2, #4
 8022516:	6949      	ldr	r1, [r1, #20]
 8022518:	6018      	str	r0, [r3, #0]
 802251a:	6813      	ldr	r3, [r2, #0]
 802251c:	062e      	lsls	r6, r5, #24
 802251e:	d501      	bpl.n	8022524 <_printf_i+0x198>
 8022520:	6019      	str	r1, [r3, #0]
 8022522:	e002      	b.n	802252a <_printf_i+0x19e>
 8022524:	066d      	lsls	r5, r5, #25
 8022526:	d5fb      	bpl.n	8022520 <_printf_i+0x194>
 8022528:	8019      	strh	r1, [r3, #0]
 802252a:	2300      	movs	r3, #0
 802252c:	9d03      	ldr	r5, [sp, #12]
 802252e:	6123      	str	r3, [r4, #16]
 8022530:	e7bf      	b.n	80224b2 <_printf_i+0x126>
 8022532:	681a      	ldr	r2, [r3, #0]
 8022534:	1d11      	adds	r1, r2, #4
 8022536:	6019      	str	r1, [r3, #0]
 8022538:	6815      	ldr	r5, [r2, #0]
 802253a:	2100      	movs	r1, #0
 802253c:	0028      	movs	r0, r5
 802253e:	6862      	ldr	r2, [r4, #4]
 8022540:	f000 fb9d 	bl	8022c7e <memchr>
 8022544:	2800      	cmp	r0, #0
 8022546:	d001      	beq.n	802254c <_printf_i+0x1c0>
 8022548:	1b40      	subs	r0, r0, r5
 802254a:	6060      	str	r0, [r4, #4]
 802254c:	6863      	ldr	r3, [r4, #4]
 802254e:	6123      	str	r3, [r4, #16]
 8022550:	2300      	movs	r3, #0
 8022552:	9a03      	ldr	r2, [sp, #12]
 8022554:	7013      	strb	r3, [r2, #0]
 8022556:	e7ac      	b.n	80224b2 <_printf_i+0x126>
 8022558:	002a      	movs	r2, r5
 802255a:	6923      	ldr	r3, [r4, #16]
 802255c:	9906      	ldr	r1, [sp, #24]
 802255e:	9805      	ldr	r0, [sp, #20]
 8022560:	9d07      	ldr	r5, [sp, #28]
 8022562:	47a8      	blx	r5
 8022564:	3001      	adds	r0, #1
 8022566:	d0ae      	beq.n	80224c6 <_printf_i+0x13a>
 8022568:	6823      	ldr	r3, [r4, #0]
 802256a:	079b      	lsls	r3, r3, #30
 802256c:	d415      	bmi.n	802259a <_printf_i+0x20e>
 802256e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022570:	68e0      	ldr	r0, [r4, #12]
 8022572:	4298      	cmp	r0, r3
 8022574:	daa9      	bge.n	80224ca <_printf_i+0x13e>
 8022576:	0018      	movs	r0, r3
 8022578:	e7a7      	b.n	80224ca <_printf_i+0x13e>
 802257a:	0022      	movs	r2, r4
 802257c:	2301      	movs	r3, #1
 802257e:	9906      	ldr	r1, [sp, #24]
 8022580:	9805      	ldr	r0, [sp, #20]
 8022582:	9e07      	ldr	r6, [sp, #28]
 8022584:	3219      	adds	r2, #25
 8022586:	47b0      	blx	r6
 8022588:	3001      	adds	r0, #1
 802258a:	d09c      	beq.n	80224c6 <_printf_i+0x13a>
 802258c:	3501      	adds	r5, #1
 802258e:	68e3      	ldr	r3, [r4, #12]
 8022590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022592:	1a9b      	subs	r3, r3, r2
 8022594:	42ab      	cmp	r3, r5
 8022596:	dcf0      	bgt.n	802257a <_printf_i+0x1ee>
 8022598:	e7e9      	b.n	802256e <_printf_i+0x1e2>
 802259a:	2500      	movs	r5, #0
 802259c:	e7f7      	b.n	802258e <_printf_i+0x202>
 802259e:	46c0      	nop			@ (mov r8, r8)
 80225a0:	0802963b 	.word	0x0802963b
 80225a4:	0802964c 	.word	0x0802964c

080225a8 <std>:
 80225a8:	2300      	movs	r3, #0
 80225aa:	b510      	push	{r4, lr}
 80225ac:	0004      	movs	r4, r0
 80225ae:	6003      	str	r3, [r0, #0]
 80225b0:	6043      	str	r3, [r0, #4]
 80225b2:	6083      	str	r3, [r0, #8]
 80225b4:	8181      	strh	r1, [r0, #12]
 80225b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80225b8:	81c2      	strh	r2, [r0, #14]
 80225ba:	6103      	str	r3, [r0, #16]
 80225bc:	6143      	str	r3, [r0, #20]
 80225be:	6183      	str	r3, [r0, #24]
 80225c0:	0019      	movs	r1, r3
 80225c2:	2208      	movs	r2, #8
 80225c4:	305c      	adds	r0, #92	@ 0x5c
 80225c6:	f000 fa89 	bl	8022adc <memset>
 80225ca:	4b0b      	ldr	r3, [pc, #44]	@ (80225f8 <std+0x50>)
 80225cc:	6224      	str	r4, [r4, #32]
 80225ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80225d0:	4b0a      	ldr	r3, [pc, #40]	@ (80225fc <std+0x54>)
 80225d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80225d4:	4b0a      	ldr	r3, [pc, #40]	@ (8022600 <std+0x58>)
 80225d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80225d8:	4b0a      	ldr	r3, [pc, #40]	@ (8022604 <std+0x5c>)
 80225da:	6323      	str	r3, [r4, #48]	@ 0x30
 80225dc:	4b0a      	ldr	r3, [pc, #40]	@ (8022608 <std+0x60>)
 80225de:	429c      	cmp	r4, r3
 80225e0:	d005      	beq.n	80225ee <std+0x46>
 80225e2:	4b0a      	ldr	r3, [pc, #40]	@ (802260c <std+0x64>)
 80225e4:	429c      	cmp	r4, r3
 80225e6:	d002      	beq.n	80225ee <std+0x46>
 80225e8:	4b09      	ldr	r3, [pc, #36]	@ (8022610 <std+0x68>)
 80225ea:	429c      	cmp	r4, r3
 80225ec:	d103      	bne.n	80225f6 <std+0x4e>
 80225ee:	0020      	movs	r0, r4
 80225f0:	3058      	adds	r0, #88	@ 0x58
 80225f2:	f000 fb41 	bl	8022c78 <__retarget_lock_init_recursive>
 80225f6:	bd10      	pop	{r4, pc}
 80225f8:	08022851 	.word	0x08022851
 80225fc:	08022879 	.word	0x08022879
 8022600:	080228b1 	.word	0x080228b1
 8022604:	080228dd 	.word	0x080228dd
 8022608:	2000344c 	.word	0x2000344c
 802260c:	200034b4 	.word	0x200034b4
 8022610:	2000351c 	.word	0x2000351c

08022614 <stdio_exit_handler>:
 8022614:	b510      	push	{r4, lr}
 8022616:	4a03      	ldr	r2, [pc, #12]	@ (8022624 <stdio_exit_handler+0x10>)
 8022618:	4903      	ldr	r1, [pc, #12]	@ (8022628 <stdio_exit_handler+0x14>)
 802261a:	4804      	ldr	r0, [pc, #16]	@ (802262c <stdio_exit_handler+0x18>)
 802261c:	f000 f86c 	bl	80226f8 <_fwalk_sglue>
 8022620:	bd10      	pop	{r4, pc}
 8022622:	46c0      	nop			@ (mov r8, r8)
 8022624:	20000268 	.word	0x20000268
 8022628:	0802529d 	.word	0x0802529d
 802262c:	200003e4 	.word	0x200003e4

08022630 <cleanup_stdio>:
 8022630:	6841      	ldr	r1, [r0, #4]
 8022632:	4b0b      	ldr	r3, [pc, #44]	@ (8022660 <cleanup_stdio+0x30>)
 8022634:	b510      	push	{r4, lr}
 8022636:	0004      	movs	r4, r0
 8022638:	4299      	cmp	r1, r3
 802263a:	d001      	beq.n	8022640 <cleanup_stdio+0x10>
 802263c:	f002 fe2e 	bl	802529c <_fflush_r>
 8022640:	68a1      	ldr	r1, [r4, #8]
 8022642:	4b08      	ldr	r3, [pc, #32]	@ (8022664 <cleanup_stdio+0x34>)
 8022644:	4299      	cmp	r1, r3
 8022646:	d002      	beq.n	802264e <cleanup_stdio+0x1e>
 8022648:	0020      	movs	r0, r4
 802264a:	f002 fe27 	bl	802529c <_fflush_r>
 802264e:	68e1      	ldr	r1, [r4, #12]
 8022650:	4b05      	ldr	r3, [pc, #20]	@ (8022668 <cleanup_stdio+0x38>)
 8022652:	4299      	cmp	r1, r3
 8022654:	d002      	beq.n	802265c <cleanup_stdio+0x2c>
 8022656:	0020      	movs	r0, r4
 8022658:	f002 fe20 	bl	802529c <_fflush_r>
 802265c:	bd10      	pop	{r4, pc}
 802265e:	46c0      	nop			@ (mov r8, r8)
 8022660:	2000344c 	.word	0x2000344c
 8022664:	200034b4 	.word	0x200034b4
 8022668:	2000351c 	.word	0x2000351c

0802266c <global_stdio_init.part.0>:
 802266c:	b510      	push	{r4, lr}
 802266e:	4b09      	ldr	r3, [pc, #36]	@ (8022694 <global_stdio_init.part.0+0x28>)
 8022670:	4a09      	ldr	r2, [pc, #36]	@ (8022698 <global_stdio_init.part.0+0x2c>)
 8022672:	2104      	movs	r1, #4
 8022674:	601a      	str	r2, [r3, #0]
 8022676:	4809      	ldr	r0, [pc, #36]	@ (802269c <global_stdio_init.part.0+0x30>)
 8022678:	2200      	movs	r2, #0
 802267a:	f7ff ff95 	bl	80225a8 <std>
 802267e:	2201      	movs	r2, #1
 8022680:	2109      	movs	r1, #9
 8022682:	4807      	ldr	r0, [pc, #28]	@ (80226a0 <global_stdio_init.part.0+0x34>)
 8022684:	f7ff ff90 	bl	80225a8 <std>
 8022688:	2202      	movs	r2, #2
 802268a:	2112      	movs	r1, #18
 802268c:	4805      	ldr	r0, [pc, #20]	@ (80226a4 <global_stdio_init.part.0+0x38>)
 802268e:	f7ff ff8b 	bl	80225a8 <std>
 8022692:	bd10      	pop	{r4, pc}
 8022694:	20003584 	.word	0x20003584
 8022698:	08022615 	.word	0x08022615
 802269c:	2000344c 	.word	0x2000344c
 80226a0:	200034b4 	.word	0x200034b4
 80226a4:	2000351c 	.word	0x2000351c

080226a8 <__sfp_lock_acquire>:
 80226a8:	b510      	push	{r4, lr}
 80226aa:	4802      	ldr	r0, [pc, #8]	@ (80226b4 <__sfp_lock_acquire+0xc>)
 80226ac:	f000 fae5 	bl	8022c7a <__retarget_lock_acquire_recursive>
 80226b0:	bd10      	pop	{r4, pc}
 80226b2:	46c0      	nop			@ (mov r8, r8)
 80226b4:	2000358d 	.word	0x2000358d

080226b8 <__sfp_lock_release>:
 80226b8:	b510      	push	{r4, lr}
 80226ba:	4802      	ldr	r0, [pc, #8]	@ (80226c4 <__sfp_lock_release+0xc>)
 80226bc:	f000 fade 	bl	8022c7c <__retarget_lock_release_recursive>
 80226c0:	bd10      	pop	{r4, pc}
 80226c2:	46c0      	nop			@ (mov r8, r8)
 80226c4:	2000358d 	.word	0x2000358d

080226c8 <__sinit>:
 80226c8:	b510      	push	{r4, lr}
 80226ca:	0004      	movs	r4, r0
 80226cc:	f7ff ffec 	bl	80226a8 <__sfp_lock_acquire>
 80226d0:	6a23      	ldr	r3, [r4, #32]
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d002      	beq.n	80226dc <__sinit+0x14>
 80226d6:	f7ff ffef 	bl	80226b8 <__sfp_lock_release>
 80226da:	bd10      	pop	{r4, pc}
 80226dc:	4b04      	ldr	r3, [pc, #16]	@ (80226f0 <__sinit+0x28>)
 80226de:	6223      	str	r3, [r4, #32]
 80226e0:	4b04      	ldr	r3, [pc, #16]	@ (80226f4 <__sinit+0x2c>)
 80226e2:	681b      	ldr	r3, [r3, #0]
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d1f6      	bne.n	80226d6 <__sinit+0xe>
 80226e8:	f7ff ffc0 	bl	802266c <global_stdio_init.part.0>
 80226ec:	e7f3      	b.n	80226d6 <__sinit+0xe>
 80226ee:	46c0      	nop			@ (mov r8, r8)
 80226f0:	08022631 	.word	0x08022631
 80226f4:	20003584 	.word	0x20003584

080226f8 <_fwalk_sglue>:
 80226f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80226fa:	0014      	movs	r4, r2
 80226fc:	2600      	movs	r6, #0
 80226fe:	9000      	str	r0, [sp, #0]
 8022700:	9101      	str	r1, [sp, #4]
 8022702:	68a5      	ldr	r5, [r4, #8]
 8022704:	6867      	ldr	r7, [r4, #4]
 8022706:	3f01      	subs	r7, #1
 8022708:	d504      	bpl.n	8022714 <_fwalk_sglue+0x1c>
 802270a:	6824      	ldr	r4, [r4, #0]
 802270c:	2c00      	cmp	r4, #0
 802270e:	d1f8      	bne.n	8022702 <_fwalk_sglue+0xa>
 8022710:	0030      	movs	r0, r6
 8022712:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022714:	89ab      	ldrh	r3, [r5, #12]
 8022716:	2b01      	cmp	r3, #1
 8022718:	d908      	bls.n	802272c <_fwalk_sglue+0x34>
 802271a:	220e      	movs	r2, #14
 802271c:	5eab      	ldrsh	r3, [r5, r2]
 802271e:	3301      	adds	r3, #1
 8022720:	d004      	beq.n	802272c <_fwalk_sglue+0x34>
 8022722:	0029      	movs	r1, r5
 8022724:	9800      	ldr	r0, [sp, #0]
 8022726:	9b01      	ldr	r3, [sp, #4]
 8022728:	4798      	blx	r3
 802272a:	4306      	orrs	r6, r0
 802272c:	3568      	adds	r5, #104	@ 0x68
 802272e:	e7ea      	b.n	8022706 <_fwalk_sglue+0xe>

08022730 <iprintf>:
 8022730:	b40f      	push	{r0, r1, r2, r3}
 8022732:	b507      	push	{r0, r1, r2, lr}
 8022734:	4905      	ldr	r1, [pc, #20]	@ (802274c <iprintf+0x1c>)
 8022736:	ab04      	add	r3, sp, #16
 8022738:	6808      	ldr	r0, [r1, #0]
 802273a:	cb04      	ldmia	r3!, {r2}
 802273c:	6881      	ldr	r1, [r0, #8]
 802273e:	9301      	str	r3, [sp, #4]
 8022740:	f002 fc0a 	bl	8024f58 <_vfiprintf_r>
 8022744:	b003      	add	sp, #12
 8022746:	bc08      	pop	{r3}
 8022748:	b004      	add	sp, #16
 802274a:	4718      	bx	r3
 802274c:	200003e0 	.word	0x200003e0

08022750 <_puts_r>:
 8022750:	6a03      	ldr	r3, [r0, #32]
 8022752:	b570      	push	{r4, r5, r6, lr}
 8022754:	0005      	movs	r5, r0
 8022756:	000e      	movs	r6, r1
 8022758:	6884      	ldr	r4, [r0, #8]
 802275a:	2b00      	cmp	r3, #0
 802275c:	d101      	bne.n	8022762 <_puts_r+0x12>
 802275e:	f7ff ffb3 	bl	80226c8 <__sinit>
 8022762:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022764:	07db      	lsls	r3, r3, #31
 8022766:	d405      	bmi.n	8022774 <_puts_r+0x24>
 8022768:	89a3      	ldrh	r3, [r4, #12]
 802276a:	059b      	lsls	r3, r3, #22
 802276c:	d402      	bmi.n	8022774 <_puts_r+0x24>
 802276e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022770:	f000 fa83 	bl	8022c7a <__retarget_lock_acquire_recursive>
 8022774:	89a3      	ldrh	r3, [r4, #12]
 8022776:	071b      	lsls	r3, r3, #28
 8022778:	d502      	bpl.n	8022780 <_puts_r+0x30>
 802277a:	6923      	ldr	r3, [r4, #16]
 802277c:	2b00      	cmp	r3, #0
 802277e:	d11f      	bne.n	80227c0 <_puts_r+0x70>
 8022780:	0021      	movs	r1, r4
 8022782:	0028      	movs	r0, r5
 8022784:	f000 f94c 	bl	8022a20 <__swsetup_r>
 8022788:	2800      	cmp	r0, #0
 802278a:	d019      	beq.n	80227c0 <_puts_r+0x70>
 802278c:	2501      	movs	r5, #1
 802278e:	426d      	negs	r5, r5
 8022790:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022792:	07db      	lsls	r3, r3, #31
 8022794:	d405      	bmi.n	80227a2 <_puts_r+0x52>
 8022796:	89a3      	ldrh	r3, [r4, #12]
 8022798:	059b      	lsls	r3, r3, #22
 802279a:	d402      	bmi.n	80227a2 <_puts_r+0x52>
 802279c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802279e:	f000 fa6d 	bl	8022c7c <__retarget_lock_release_recursive>
 80227a2:	0028      	movs	r0, r5
 80227a4:	bd70      	pop	{r4, r5, r6, pc}
 80227a6:	3601      	adds	r6, #1
 80227a8:	60a3      	str	r3, [r4, #8]
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	da04      	bge.n	80227b8 <_puts_r+0x68>
 80227ae:	69a2      	ldr	r2, [r4, #24]
 80227b0:	429a      	cmp	r2, r3
 80227b2:	dc16      	bgt.n	80227e2 <_puts_r+0x92>
 80227b4:	290a      	cmp	r1, #10
 80227b6:	d014      	beq.n	80227e2 <_puts_r+0x92>
 80227b8:	6823      	ldr	r3, [r4, #0]
 80227ba:	1c5a      	adds	r2, r3, #1
 80227bc:	6022      	str	r2, [r4, #0]
 80227be:	7019      	strb	r1, [r3, #0]
 80227c0:	68a3      	ldr	r3, [r4, #8]
 80227c2:	7831      	ldrb	r1, [r6, #0]
 80227c4:	3b01      	subs	r3, #1
 80227c6:	2900      	cmp	r1, #0
 80227c8:	d1ed      	bne.n	80227a6 <_puts_r+0x56>
 80227ca:	60a3      	str	r3, [r4, #8]
 80227cc:	2b00      	cmp	r3, #0
 80227ce:	da0f      	bge.n	80227f0 <_puts_r+0xa0>
 80227d0:	0022      	movs	r2, r4
 80227d2:	0028      	movs	r0, r5
 80227d4:	310a      	adds	r1, #10
 80227d6:	f000 f8e1 	bl	802299c <__swbuf_r>
 80227da:	3001      	adds	r0, #1
 80227dc:	d0d6      	beq.n	802278c <_puts_r+0x3c>
 80227de:	250a      	movs	r5, #10
 80227e0:	e7d6      	b.n	8022790 <_puts_r+0x40>
 80227e2:	0022      	movs	r2, r4
 80227e4:	0028      	movs	r0, r5
 80227e6:	f000 f8d9 	bl	802299c <__swbuf_r>
 80227ea:	3001      	adds	r0, #1
 80227ec:	d1e8      	bne.n	80227c0 <_puts_r+0x70>
 80227ee:	e7cd      	b.n	802278c <_puts_r+0x3c>
 80227f0:	6823      	ldr	r3, [r4, #0]
 80227f2:	1c5a      	adds	r2, r3, #1
 80227f4:	6022      	str	r2, [r4, #0]
 80227f6:	220a      	movs	r2, #10
 80227f8:	701a      	strb	r2, [r3, #0]
 80227fa:	e7f0      	b.n	80227de <_puts_r+0x8e>

080227fc <puts>:
 80227fc:	b510      	push	{r4, lr}
 80227fe:	4b03      	ldr	r3, [pc, #12]	@ (802280c <puts+0x10>)
 8022800:	0001      	movs	r1, r0
 8022802:	6818      	ldr	r0, [r3, #0]
 8022804:	f7ff ffa4 	bl	8022750 <_puts_r>
 8022808:	bd10      	pop	{r4, pc}
 802280a:	46c0      	nop			@ (mov r8, r8)
 802280c:	200003e0 	.word	0x200003e0

08022810 <siprintf>:
 8022810:	b40e      	push	{r1, r2, r3}
 8022812:	b500      	push	{lr}
 8022814:	490b      	ldr	r1, [pc, #44]	@ (8022844 <siprintf+0x34>)
 8022816:	b09c      	sub	sp, #112	@ 0x70
 8022818:	ab1d      	add	r3, sp, #116	@ 0x74
 802281a:	9002      	str	r0, [sp, #8]
 802281c:	9006      	str	r0, [sp, #24]
 802281e:	9107      	str	r1, [sp, #28]
 8022820:	9104      	str	r1, [sp, #16]
 8022822:	4809      	ldr	r0, [pc, #36]	@ (8022848 <siprintf+0x38>)
 8022824:	4909      	ldr	r1, [pc, #36]	@ (802284c <siprintf+0x3c>)
 8022826:	cb04      	ldmia	r3!, {r2}
 8022828:	9105      	str	r1, [sp, #20]
 802282a:	6800      	ldr	r0, [r0, #0]
 802282c:	a902      	add	r1, sp, #8
 802282e:	9301      	str	r3, [sp, #4]
 8022830:	f002 fa6c 	bl	8024d0c <_svfiprintf_r>
 8022834:	2200      	movs	r2, #0
 8022836:	9b02      	ldr	r3, [sp, #8]
 8022838:	701a      	strb	r2, [r3, #0]
 802283a:	b01c      	add	sp, #112	@ 0x70
 802283c:	bc08      	pop	{r3}
 802283e:	b003      	add	sp, #12
 8022840:	4718      	bx	r3
 8022842:	46c0      	nop			@ (mov r8, r8)
 8022844:	7fffffff 	.word	0x7fffffff
 8022848:	200003e0 	.word	0x200003e0
 802284c:	ffff0208 	.word	0xffff0208

08022850 <__sread>:
 8022850:	b570      	push	{r4, r5, r6, lr}
 8022852:	000c      	movs	r4, r1
 8022854:	250e      	movs	r5, #14
 8022856:	5f49      	ldrsh	r1, [r1, r5]
 8022858:	f000 f9bc 	bl	8022bd4 <_read_r>
 802285c:	2800      	cmp	r0, #0
 802285e:	db03      	blt.n	8022868 <__sread+0x18>
 8022860:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8022862:	181b      	adds	r3, r3, r0
 8022864:	6563      	str	r3, [r4, #84]	@ 0x54
 8022866:	bd70      	pop	{r4, r5, r6, pc}
 8022868:	89a3      	ldrh	r3, [r4, #12]
 802286a:	4a02      	ldr	r2, [pc, #8]	@ (8022874 <__sread+0x24>)
 802286c:	4013      	ands	r3, r2
 802286e:	81a3      	strh	r3, [r4, #12]
 8022870:	e7f9      	b.n	8022866 <__sread+0x16>
 8022872:	46c0      	nop			@ (mov r8, r8)
 8022874:	ffffefff 	.word	0xffffefff

08022878 <__swrite>:
 8022878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802287a:	001f      	movs	r7, r3
 802287c:	898b      	ldrh	r3, [r1, #12]
 802287e:	0005      	movs	r5, r0
 8022880:	000c      	movs	r4, r1
 8022882:	0016      	movs	r6, r2
 8022884:	05db      	lsls	r3, r3, #23
 8022886:	d505      	bpl.n	8022894 <__swrite+0x1c>
 8022888:	230e      	movs	r3, #14
 802288a:	5ec9      	ldrsh	r1, [r1, r3]
 802288c:	2200      	movs	r2, #0
 802288e:	2302      	movs	r3, #2
 8022890:	f000 f98c 	bl	8022bac <_lseek_r>
 8022894:	89a3      	ldrh	r3, [r4, #12]
 8022896:	4a05      	ldr	r2, [pc, #20]	@ (80228ac <__swrite+0x34>)
 8022898:	0028      	movs	r0, r5
 802289a:	4013      	ands	r3, r2
 802289c:	81a3      	strh	r3, [r4, #12]
 802289e:	0032      	movs	r2, r6
 80228a0:	230e      	movs	r3, #14
 80228a2:	5ee1      	ldrsh	r1, [r4, r3]
 80228a4:	003b      	movs	r3, r7
 80228a6:	f000 f9a9 	bl	8022bfc <_write_r>
 80228aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80228ac:	ffffefff 	.word	0xffffefff

080228b0 <__sseek>:
 80228b0:	b570      	push	{r4, r5, r6, lr}
 80228b2:	000c      	movs	r4, r1
 80228b4:	250e      	movs	r5, #14
 80228b6:	5f49      	ldrsh	r1, [r1, r5]
 80228b8:	f000 f978 	bl	8022bac <_lseek_r>
 80228bc:	89a3      	ldrh	r3, [r4, #12]
 80228be:	1c42      	adds	r2, r0, #1
 80228c0:	d103      	bne.n	80228ca <__sseek+0x1a>
 80228c2:	4a05      	ldr	r2, [pc, #20]	@ (80228d8 <__sseek+0x28>)
 80228c4:	4013      	ands	r3, r2
 80228c6:	81a3      	strh	r3, [r4, #12]
 80228c8:	bd70      	pop	{r4, r5, r6, pc}
 80228ca:	2280      	movs	r2, #128	@ 0x80
 80228cc:	0152      	lsls	r2, r2, #5
 80228ce:	4313      	orrs	r3, r2
 80228d0:	81a3      	strh	r3, [r4, #12]
 80228d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80228d4:	e7f8      	b.n	80228c8 <__sseek+0x18>
 80228d6:	46c0      	nop			@ (mov r8, r8)
 80228d8:	ffffefff 	.word	0xffffefff

080228dc <__sclose>:
 80228dc:	b510      	push	{r4, lr}
 80228de:	230e      	movs	r3, #14
 80228e0:	5ec9      	ldrsh	r1, [r1, r3]
 80228e2:	f000 f951 	bl	8022b88 <_close_r>
 80228e6:	bd10      	pop	{r4, pc}

080228e8 <_vsniprintf_r>:
 80228e8:	b530      	push	{r4, r5, lr}
 80228ea:	0014      	movs	r4, r2
 80228ec:	0005      	movs	r5, r0
 80228ee:	001a      	movs	r2, r3
 80228f0:	b09b      	sub	sp, #108	@ 0x6c
 80228f2:	2c00      	cmp	r4, #0
 80228f4:	da05      	bge.n	8022902 <_vsniprintf_r+0x1a>
 80228f6:	238b      	movs	r3, #139	@ 0x8b
 80228f8:	6003      	str	r3, [r0, #0]
 80228fa:	2001      	movs	r0, #1
 80228fc:	4240      	negs	r0, r0
 80228fe:	b01b      	add	sp, #108	@ 0x6c
 8022900:	bd30      	pop	{r4, r5, pc}
 8022902:	2382      	movs	r3, #130	@ 0x82
 8022904:	4668      	mov	r0, sp
 8022906:	009b      	lsls	r3, r3, #2
 8022908:	8183      	strh	r3, [r0, #12]
 802290a:	2300      	movs	r3, #0
 802290c:	9100      	str	r1, [sp, #0]
 802290e:	9104      	str	r1, [sp, #16]
 8022910:	429c      	cmp	r4, r3
 8022912:	d000      	beq.n	8022916 <_vsniprintf_r+0x2e>
 8022914:	1e63      	subs	r3, r4, #1
 8022916:	9302      	str	r3, [sp, #8]
 8022918:	9305      	str	r3, [sp, #20]
 802291a:	2301      	movs	r3, #1
 802291c:	4669      	mov	r1, sp
 802291e:	425b      	negs	r3, r3
 8022920:	81cb      	strh	r3, [r1, #14]
 8022922:	0028      	movs	r0, r5
 8022924:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022926:	f002 f9f1 	bl	8024d0c <_svfiprintf_r>
 802292a:	1c43      	adds	r3, r0, #1
 802292c:	da01      	bge.n	8022932 <_vsniprintf_r+0x4a>
 802292e:	238b      	movs	r3, #139	@ 0x8b
 8022930:	602b      	str	r3, [r5, #0]
 8022932:	2c00      	cmp	r4, #0
 8022934:	d0e3      	beq.n	80228fe <_vsniprintf_r+0x16>
 8022936:	2200      	movs	r2, #0
 8022938:	9b00      	ldr	r3, [sp, #0]
 802293a:	701a      	strb	r2, [r3, #0]
 802293c:	e7df      	b.n	80228fe <_vsniprintf_r+0x16>
	...

08022940 <vsniprintf>:
 8022940:	b513      	push	{r0, r1, r4, lr}
 8022942:	4c04      	ldr	r4, [pc, #16]	@ (8022954 <vsniprintf+0x14>)
 8022944:	9300      	str	r3, [sp, #0]
 8022946:	0013      	movs	r3, r2
 8022948:	000a      	movs	r2, r1
 802294a:	0001      	movs	r1, r0
 802294c:	6820      	ldr	r0, [r4, #0]
 802294e:	f7ff ffcb 	bl	80228e8 <_vsniprintf_r>
 8022952:	bd16      	pop	{r1, r2, r4, pc}
 8022954:	200003e0 	.word	0x200003e0

08022958 <_vsiprintf_r>:
 8022958:	b500      	push	{lr}
 802295a:	b09b      	sub	sp, #108	@ 0x6c
 802295c:	9100      	str	r1, [sp, #0]
 802295e:	9104      	str	r1, [sp, #16]
 8022960:	4906      	ldr	r1, [pc, #24]	@ (802297c <_vsiprintf_r+0x24>)
 8022962:	9105      	str	r1, [sp, #20]
 8022964:	9102      	str	r1, [sp, #8]
 8022966:	4906      	ldr	r1, [pc, #24]	@ (8022980 <_vsiprintf_r+0x28>)
 8022968:	9103      	str	r1, [sp, #12]
 802296a:	4669      	mov	r1, sp
 802296c:	f002 f9ce 	bl	8024d0c <_svfiprintf_r>
 8022970:	2200      	movs	r2, #0
 8022972:	9b00      	ldr	r3, [sp, #0]
 8022974:	701a      	strb	r2, [r3, #0]
 8022976:	b01b      	add	sp, #108	@ 0x6c
 8022978:	bd00      	pop	{pc}
 802297a:	46c0      	nop			@ (mov r8, r8)
 802297c:	7fffffff 	.word	0x7fffffff
 8022980:	ffff0208 	.word	0xffff0208

08022984 <vsiprintf>:
 8022984:	b510      	push	{r4, lr}
 8022986:	4c04      	ldr	r4, [pc, #16]	@ (8022998 <vsiprintf+0x14>)
 8022988:	0013      	movs	r3, r2
 802298a:	000a      	movs	r2, r1
 802298c:	0001      	movs	r1, r0
 802298e:	6820      	ldr	r0, [r4, #0]
 8022990:	f7ff ffe2 	bl	8022958 <_vsiprintf_r>
 8022994:	bd10      	pop	{r4, pc}
 8022996:	46c0      	nop			@ (mov r8, r8)
 8022998:	200003e0 	.word	0x200003e0

0802299c <__swbuf_r>:
 802299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802299e:	0006      	movs	r6, r0
 80229a0:	000d      	movs	r5, r1
 80229a2:	0014      	movs	r4, r2
 80229a4:	2800      	cmp	r0, #0
 80229a6:	d004      	beq.n	80229b2 <__swbuf_r+0x16>
 80229a8:	6a03      	ldr	r3, [r0, #32]
 80229aa:	2b00      	cmp	r3, #0
 80229ac:	d101      	bne.n	80229b2 <__swbuf_r+0x16>
 80229ae:	f7ff fe8b 	bl	80226c8 <__sinit>
 80229b2:	69a3      	ldr	r3, [r4, #24]
 80229b4:	60a3      	str	r3, [r4, #8]
 80229b6:	89a3      	ldrh	r3, [r4, #12]
 80229b8:	071b      	lsls	r3, r3, #28
 80229ba:	d502      	bpl.n	80229c2 <__swbuf_r+0x26>
 80229bc:	6923      	ldr	r3, [r4, #16]
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d109      	bne.n	80229d6 <__swbuf_r+0x3a>
 80229c2:	0021      	movs	r1, r4
 80229c4:	0030      	movs	r0, r6
 80229c6:	f000 f82b 	bl	8022a20 <__swsetup_r>
 80229ca:	2800      	cmp	r0, #0
 80229cc:	d003      	beq.n	80229d6 <__swbuf_r+0x3a>
 80229ce:	2501      	movs	r5, #1
 80229d0:	426d      	negs	r5, r5
 80229d2:	0028      	movs	r0, r5
 80229d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80229d6:	6923      	ldr	r3, [r4, #16]
 80229d8:	6820      	ldr	r0, [r4, #0]
 80229da:	b2ef      	uxtb	r7, r5
 80229dc:	1ac0      	subs	r0, r0, r3
 80229de:	6963      	ldr	r3, [r4, #20]
 80229e0:	b2ed      	uxtb	r5, r5
 80229e2:	4283      	cmp	r3, r0
 80229e4:	dc05      	bgt.n	80229f2 <__swbuf_r+0x56>
 80229e6:	0021      	movs	r1, r4
 80229e8:	0030      	movs	r0, r6
 80229ea:	f002 fc57 	bl	802529c <_fflush_r>
 80229ee:	2800      	cmp	r0, #0
 80229f0:	d1ed      	bne.n	80229ce <__swbuf_r+0x32>
 80229f2:	68a3      	ldr	r3, [r4, #8]
 80229f4:	3001      	adds	r0, #1
 80229f6:	3b01      	subs	r3, #1
 80229f8:	60a3      	str	r3, [r4, #8]
 80229fa:	6823      	ldr	r3, [r4, #0]
 80229fc:	1c5a      	adds	r2, r3, #1
 80229fe:	6022      	str	r2, [r4, #0]
 8022a00:	701f      	strb	r7, [r3, #0]
 8022a02:	6963      	ldr	r3, [r4, #20]
 8022a04:	4283      	cmp	r3, r0
 8022a06:	d004      	beq.n	8022a12 <__swbuf_r+0x76>
 8022a08:	89a3      	ldrh	r3, [r4, #12]
 8022a0a:	07db      	lsls	r3, r3, #31
 8022a0c:	d5e1      	bpl.n	80229d2 <__swbuf_r+0x36>
 8022a0e:	2d0a      	cmp	r5, #10
 8022a10:	d1df      	bne.n	80229d2 <__swbuf_r+0x36>
 8022a12:	0021      	movs	r1, r4
 8022a14:	0030      	movs	r0, r6
 8022a16:	f002 fc41 	bl	802529c <_fflush_r>
 8022a1a:	2800      	cmp	r0, #0
 8022a1c:	d0d9      	beq.n	80229d2 <__swbuf_r+0x36>
 8022a1e:	e7d6      	b.n	80229ce <__swbuf_r+0x32>

08022a20 <__swsetup_r>:
 8022a20:	4b2d      	ldr	r3, [pc, #180]	@ (8022ad8 <__swsetup_r+0xb8>)
 8022a22:	b570      	push	{r4, r5, r6, lr}
 8022a24:	0005      	movs	r5, r0
 8022a26:	6818      	ldr	r0, [r3, #0]
 8022a28:	000c      	movs	r4, r1
 8022a2a:	2800      	cmp	r0, #0
 8022a2c:	d004      	beq.n	8022a38 <__swsetup_r+0x18>
 8022a2e:	6a03      	ldr	r3, [r0, #32]
 8022a30:	2b00      	cmp	r3, #0
 8022a32:	d101      	bne.n	8022a38 <__swsetup_r+0x18>
 8022a34:	f7ff fe48 	bl	80226c8 <__sinit>
 8022a38:	230c      	movs	r3, #12
 8022a3a:	5ee2      	ldrsh	r2, [r4, r3]
 8022a3c:	0713      	lsls	r3, r2, #28
 8022a3e:	d423      	bmi.n	8022a88 <__swsetup_r+0x68>
 8022a40:	06d3      	lsls	r3, r2, #27
 8022a42:	d407      	bmi.n	8022a54 <__swsetup_r+0x34>
 8022a44:	2309      	movs	r3, #9
 8022a46:	602b      	str	r3, [r5, #0]
 8022a48:	2340      	movs	r3, #64	@ 0x40
 8022a4a:	2001      	movs	r0, #1
 8022a4c:	4313      	orrs	r3, r2
 8022a4e:	81a3      	strh	r3, [r4, #12]
 8022a50:	4240      	negs	r0, r0
 8022a52:	e03a      	b.n	8022aca <__swsetup_r+0xaa>
 8022a54:	0752      	lsls	r2, r2, #29
 8022a56:	d513      	bpl.n	8022a80 <__swsetup_r+0x60>
 8022a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022a5a:	2900      	cmp	r1, #0
 8022a5c:	d008      	beq.n	8022a70 <__swsetup_r+0x50>
 8022a5e:	0023      	movs	r3, r4
 8022a60:	3344      	adds	r3, #68	@ 0x44
 8022a62:	4299      	cmp	r1, r3
 8022a64:	d002      	beq.n	8022a6c <__swsetup_r+0x4c>
 8022a66:	0028      	movs	r0, r5
 8022a68:	f000 ffa6 	bl	80239b8 <_free_r>
 8022a6c:	2300      	movs	r3, #0
 8022a6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8022a70:	2224      	movs	r2, #36	@ 0x24
 8022a72:	89a3      	ldrh	r3, [r4, #12]
 8022a74:	4393      	bics	r3, r2
 8022a76:	81a3      	strh	r3, [r4, #12]
 8022a78:	2300      	movs	r3, #0
 8022a7a:	6063      	str	r3, [r4, #4]
 8022a7c:	6923      	ldr	r3, [r4, #16]
 8022a7e:	6023      	str	r3, [r4, #0]
 8022a80:	2308      	movs	r3, #8
 8022a82:	89a2      	ldrh	r2, [r4, #12]
 8022a84:	4313      	orrs	r3, r2
 8022a86:	81a3      	strh	r3, [r4, #12]
 8022a88:	6923      	ldr	r3, [r4, #16]
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	d10b      	bne.n	8022aa6 <__swsetup_r+0x86>
 8022a8e:	21a0      	movs	r1, #160	@ 0xa0
 8022a90:	2280      	movs	r2, #128	@ 0x80
 8022a92:	89a3      	ldrh	r3, [r4, #12]
 8022a94:	0089      	lsls	r1, r1, #2
 8022a96:	0092      	lsls	r2, r2, #2
 8022a98:	400b      	ands	r3, r1
 8022a9a:	4293      	cmp	r3, r2
 8022a9c:	d003      	beq.n	8022aa6 <__swsetup_r+0x86>
 8022a9e:	0021      	movs	r1, r4
 8022aa0:	0028      	movs	r0, r5
 8022aa2:	f002 fc51 	bl	8025348 <__smakebuf_r>
 8022aa6:	230c      	movs	r3, #12
 8022aa8:	5ee2      	ldrsh	r2, [r4, r3]
 8022aaa:	2101      	movs	r1, #1
 8022aac:	0013      	movs	r3, r2
 8022aae:	400b      	ands	r3, r1
 8022ab0:	420a      	tst	r2, r1
 8022ab2:	d00b      	beq.n	8022acc <__swsetup_r+0xac>
 8022ab4:	2300      	movs	r3, #0
 8022ab6:	60a3      	str	r3, [r4, #8]
 8022ab8:	6963      	ldr	r3, [r4, #20]
 8022aba:	425b      	negs	r3, r3
 8022abc:	61a3      	str	r3, [r4, #24]
 8022abe:	2000      	movs	r0, #0
 8022ac0:	6923      	ldr	r3, [r4, #16]
 8022ac2:	4283      	cmp	r3, r0
 8022ac4:	d101      	bne.n	8022aca <__swsetup_r+0xaa>
 8022ac6:	0613      	lsls	r3, r2, #24
 8022ac8:	d4be      	bmi.n	8022a48 <__swsetup_r+0x28>
 8022aca:	bd70      	pop	{r4, r5, r6, pc}
 8022acc:	0791      	lsls	r1, r2, #30
 8022ace:	d400      	bmi.n	8022ad2 <__swsetup_r+0xb2>
 8022ad0:	6963      	ldr	r3, [r4, #20]
 8022ad2:	60a3      	str	r3, [r4, #8]
 8022ad4:	e7f3      	b.n	8022abe <__swsetup_r+0x9e>
 8022ad6:	46c0      	nop			@ (mov r8, r8)
 8022ad8:	200003e0 	.word	0x200003e0

08022adc <memset>:
 8022adc:	0003      	movs	r3, r0
 8022ade:	1882      	adds	r2, r0, r2
 8022ae0:	4293      	cmp	r3, r2
 8022ae2:	d100      	bne.n	8022ae6 <memset+0xa>
 8022ae4:	4770      	bx	lr
 8022ae6:	7019      	strb	r1, [r3, #0]
 8022ae8:	3301      	adds	r3, #1
 8022aea:	e7f9      	b.n	8022ae0 <memset+0x4>

08022aec <strchr>:
 8022aec:	b2c9      	uxtb	r1, r1
 8022aee:	7803      	ldrb	r3, [r0, #0]
 8022af0:	2b00      	cmp	r3, #0
 8022af2:	d004      	beq.n	8022afe <strchr+0x12>
 8022af4:	428b      	cmp	r3, r1
 8022af6:	d100      	bne.n	8022afa <strchr+0xe>
 8022af8:	4770      	bx	lr
 8022afa:	3001      	adds	r0, #1
 8022afc:	e7f7      	b.n	8022aee <strchr+0x2>
 8022afe:	424b      	negs	r3, r1
 8022b00:	4159      	adcs	r1, r3
 8022b02:	4249      	negs	r1, r1
 8022b04:	4008      	ands	r0, r1
 8022b06:	e7f7      	b.n	8022af8 <strchr+0xc>

08022b08 <strncmp>:
 8022b08:	b530      	push	{r4, r5, lr}
 8022b0a:	0005      	movs	r5, r0
 8022b0c:	1e10      	subs	r0, r2, #0
 8022b0e:	d00b      	beq.n	8022b28 <strncmp+0x20>
 8022b10:	2400      	movs	r4, #0
 8022b12:	3a01      	subs	r2, #1
 8022b14:	5d2b      	ldrb	r3, [r5, r4]
 8022b16:	5d08      	ldrb	r0, [r1, r4]
 8022b18:	4283      	cmp	r3, r0
 8022b1a:	d104      	bne.n	8022b26 <strncmp+0x1e>
 8022b1c:	42a2      	cmp	r2, r4
 8022b1e:	d002      	beq.n	8022b26 <strncmp+0x1e>
 8022b20:	3401      	adds	r4, #1
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	d1f6      	bne.n	8022b14 <strncmp+0xc>
 8022b26:	1a18      	subs	r0, r3, r0
 8022b28:	bd30      	pop	{r4, r5, pc}

08022b2a <strncpy>:
 8022b2a:	0003      	movs	r3, r0
 8022b2c:	b530      	push	{r4, r5, lr}
 8022b2e:	001d      	movs	r5, r3
 8022b30:	2a00      	cmp	r2, #0
 8022b32:	d006      	beq.n	8022b42 <strncpy+0x18>
 8022b34:	780c      	ldrb	r4, [r1, #0]
 8022b36:	3a01      	subs	r2, #1
 8022b38:	3301      	adds	r3, #1
 8022b3a:	702c      	strb	r4, [r5, #0]
 8022b3c:	3101      	adds	r1, #1
 8022b3e:	2c00      	cmp	r4, #0
 8022b40:	d1f5      	bne.n	8022b2e <strncpy+0x4>
 8022b42:	2100      	movs	r1, #0
 8022b44:	189a      	adds	r2, r3, r2
 8022b46:	4293      	cmp	r3, r2
 8022b48:	d100      	bne.n	8022b4c <strncpy+0x22>
 8022b4a:	bd30      	pop	{r4, r5, pc}
 8022b4c:	7019      	strb	r1, [r3, #0]
 8022b4e:	3301      	adds	r3, #1
 8022b50:	e7f9      	b.n	8022b46 <strncpy+0x1c>

08022b52 <strstr>:
 8022b52:	780a      	ldrb	r2, [r1, #0]
 8022b54:	b530      	push	{r4, r5, lr}
 8022b56:	2a00      	cmp	r2, #0
 8022b58:	d10c      	bne.n	8022b74 <strstr+0x22>
 8022b5a:	bd30      	pop	{r4, r5, pc}
 8022b5c:	429a      	cmp	r2, r3
 8022b5e:	d108      	bne.n	8022b72 <strstr+0x20>
 8022b60:	2301      	movs	r3, #1
 8022b62:	5ccc      	ldrb	r4, [r1, r3]
 8022b64:	2c00      	cmp	r4, #0
 8022b66:	d0f8      	beq.n	8022b5a <strstr+0x8>
 8022b68:	5cc5      	ldrb	r5, [r0, r3]
 8022b6a:	42a5      	cmp	r5, r4
 8022b6c:	d101      	bne.n	8022b72 <strstr+0x20>
 8022b6e:	3301      	adds	r3, #1
 8022b70:	e7f7      	b.n	8022b62 <strstr+0x10>
 8022b72:	3001      	adds	r0, #1
 8022b74:	7803      	ldrb	r3, [r0, #0]
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d1f0      	bne.n	8022b5c <strstr+0xa>
 8022b7a:	0018      	movs	r0, r3
 8022b7c:	e7ed      	b.n	8022b5a <strstr+0x8>
	...

08022b80 <_localeconv_r>:
 8022b80:	4800      	ldr	r0, [pc, #0]	@ (8022b84 <_localeconv_r+0x4>)
 8022b82:	4770      	bx	lr
 8022b84:	20000364 	.word	0x20000364

08022b88 <_close_r>:
 8022b88:	2300      	movs	r3, #0
 8022b8a:	b570      	push	{r4, r5, r6, lr}
 8022b8c:	4d06      	ldr	r5, [pc, #24]	@ (8022ba8 <_close_r+0x20>)
 8022b8e:	0004      	movs	r4, r0
 8022b90:	0008      	movs	r0, r1
 8022b92:	602b      	str	r3, [r5, #0]
 8022b94:	f7ed f9e6 	bl	800ff64 <_close>
 8022b98:	1c43      	adds	r3, r0, #1
 8022b9a:	d103      	bne.n	8022ba4 <_close_r+0x1c>
 8022b9c:	682b      	ldr	r3, [r5, #0]
 8022b9e:	2b00      	cmp	r3, #0
 8022ba0:	d000      	beq.n	8022ba4 <_close_r+0x1c>
 8022ba2:	6023      	str	r3, [r4, #0]
 8022ba4:	bd70      	pop	{r4, r5, r6, pc}
 8022ba6:	46c0      	nop			@ (mov r8, r8)
 8022ba8:	20003588 	.word	0x20003588

08022bac <_lseek_r>:
 8022bac:	b570      	push	{r4, r5, r6, lr}
 8022bae:	0004      	movs	r4, r0
 8022bb0:	0008      	movs	r0, r1
 8022bb2:	0011      	movs	r1, r2
 8022bb4:	001a      	movs	r2, r3
 8022bb6:	2300      	movs	r3, #0
 8022bb8:	4d05      	ldr	r5, [pc, #20]	@ (8022bd0 <_lseek_r+0x24>)
 8022bba:	602b      	str	r3, [r5, #0]
 8022bbc:	f7ed f9f3 	bl	800ffa6 <_lseek>
 8022bc0:	1c43      	adds	r3, r0, #1
 8022bc2:	d103      	bne.n	8022bcc <_lseek_r+0x20>
 8022bc4:	682b      	ldr	r3, [r5, #0]
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d000      	beq.n	8022bcc <_lseek_r+0x20>
 8022bca:	6023      	str	r3, [r4, #0]
 8022bcc:	bd70      	pop	{r4, r5, r6, pc}
 8022bce:	46c0      	nop			@ (mov r8, r8)
 8022bd0:	20003588 	.word	0x20003588

08022bd4 <_read_r>:
 8022bd4:	b570      	push	{r4, r5, r6, lr}
 8022bd6:	0004      	movs	r4, r0
 8022bd8:	0008      	movs	r0, r1
 8022bda:	0011      	movs	r1, r2
 8022bdc:	001a      	movs	r2, r3
 8022bde:	2300      	movs	r3, #0
 8022be0:	4d05      	ldr	r5, [pc, #20]	@ (8022bf8 <_read_r+0x24>)
 8022be2:	602b      	str	r3, [r5, #0]
 8022be4:	f7ed f9a1 	bl	800ff2a <_read>
 8022be8:	1c43      	adds	r3, r0, #1
 8022bea:	d103      	bne.n	8022bf4 <_read_r+0x20>
 8022bec:	682b      	ldr	r3, [r5, #0]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d000      	beq.n	8022bf4 <_read_r+0x20>
 8022bf2:	6023      	str	r3, [r4, #0]
 8022bf4:	bd70      	pop	{r4, r5, r6, pc}
 8022bf6:	46c0      	nop			@ (mov r8, r8)
 8022bf8:	20003588 	.word	0x20003588

08022bfc <_write_r>:
 8022bfc:	b570      	push	{r4, r5, r6, lr}
 8022bfe:	0004      	movs	r4, r0
 8022c00:	0008      	movs	r0, r1
 8022c02:	0011      	movs	r1, r2
 8022c04:	001a      	movs	r2, r3
 8022c06:	2300      	movs	r3, #0
 8022c08:	4d05      	ldr	r5, [pc, #20]	@ (8022c20 <_write_r+0x24>)
 8022c0a:	602b      	str	r3, [r5, #0]
 8022c0c:	f7ed fe5e 	bl	80108cc <_write>
 8022c10:	1c43      	adds	r3, r0, #1
 8022c12:	d103      	bne.n	8022c1c <_write_r+0x20>
 8022c14:	682b      	ldr	r3, [r5, #0]
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d000      	beq.n	8022c1c <_write_r+0x20>
 8022c1a:	6023      	str	r3, [r4, #0]
 8022c1c:	bd70      	pop	{r4, r5, r6, pc}
 8022c1e:	46c0      	nop			@ (mov r8, r8)
 8022c20:	20003588 	.word	0x20003588

08022c24 <__errno>:
 8022c24:	4b01      	ldr	r3, [pc, #4]	@ (8022c2c <__errno+0x8>)
 8022c26:	6818      	ldr	r0, [r3, #0]
 8022c28:	4770      	bx	lr
 8022c2a:	46c0      	nop			@ (mov r8, r8)
 8022c2c:	200003e0 	.word	0x200003e0

08022c30 <__libc_init_array>:
 8022c30:	b570      	push	{r4, r5, r6, lr}
 8022c32:	2600      	movs	r6, #0
 8022c34:	4c0c      	ldr	r4, [pc, #48]	@ (8022c68 <__libc_init_array+0x38>)
 8022c36:	4d0d      	ldr	r5, [pc, #52]	@ (8022c6c <__libc_init_array+0x3c>)
 8022c38:	1b64      	subs	r4, r4, r5
 8022c3a:	10a4      	asrs	r4, r4, #2
 8022c3c:	42a6      	cmp	r6, r4
 8022c3e:	d109      	bne.n	8022c54 <__libc_init_array+0x24>
 8022c40:	2600      	movs	r6, #0
 8022c42:	f002 fee9 	bl	8025a18 <_init>
 8022c46:	4c0a      	ldr	r4, [pc, #40]	@ (8022c70 <__libc_init_array+0x40>)
 8022c48:	4d0a      	ldr	r5, [pc, #40]	@ (8022c74 <__libc_init_array+0x44>)
 8022c4a:	1b64      	subs	r4, r4, r5
 8022c4c:	10a4      	asrs	r4, r4, #2
 8022c4e:	42a6      	cmp	r6, r4
 8022c50:	d105      	bne.n	8022c5e <__libc_init_array+0x2e>
 8022c52:	bd70      	pop	{r4, r5, r6, pc}
 8022c54:	00b3      	lsls	r3, r6, #2
 8022c56:	58eb      	ldr	r3, [r5, r3]
 8022c58:	4798      	blx	r3
 8022c5a:	3601      	adds	r6, #1
 8022c5c:	e7ee      	b.n	8022c3c <__libc_init_array+0xc>
 8022c5e:	00b3      	lsls	r3, r6, #2
 8022c60:	58eb      	ldr	r3, [r5, r3]
 8022c62:	4798      	blx	r3
 8022c64:	3601      	adds	r6, #1
 8022c66:	e7f2      	b.n	8022c4e <__libc_init_array+0x1e>
 8022c68:	08029918 	.word	0x08029918
 8022c6c:	08029918 	.word	0x08029918
 8022c70:	0802991c 	.word	0x0802991c
 8022c74:	08029918 	.word	0x08029918

08022c78 <__retarget_lock_init_recursive>:
 8022c78:	4770      	bx	lr

08022c7a <__retarget_lock_acquire_recursive>:
 8022c7a:	4770      	bx	lr

08022c7c <__retarget_lock_release_recursive>:
 8022c7c:	4770      	bx	lr

08022c7e <memchr>:
 8022c7e:	b2c9      	uxtb	r1, r1
 8022c80:	1882      	adds	r2, r0, r2
 8022c82:	4290      	cmp	r0, r2
 8022c84:	d101      	bne.n	8022c8a <memchr+0xc>
 8022c86:	2000      	movs	r0, #0
 8022c88:	4770      	bx	lr
 8022c8a:	7803      	ldrb	r3, [r0, #0]
 8022c8c:	428b      	cmp	r3, r1
 8022c8e:	d0fb      	beq.n	8022c88 <memchr+0xa>
 8022c90:	3001      	adds	r0, #1
 8022c92:	e7f6      	b.n	8022c82 <memchr+0x4>

08022c94 <memcpy>:
 8022c94:	2300      	movs	r3, #0
 8022c96:	b510      	push	{r4, lr}
 8022c98:	429a      	cmp	r2, r3
 8022c9a:	d100      	bne.n	8022c9e <memcpy+0xa>
 8022c9c:	bd10      	pop	{r4, pc}
 8022c9e:	5ccc      	ldrb	r4, [r1, r3]
 8022ca0:	54c4      	strb	r4, [r0, r3]
 8022ca2:	3301      	adds	r3, #1
 8022ca4:	e7f8      	b.n	8022c98 <memcpy+0x4>
	...

08022ca8 <nan>:
 8022ca8:	2000      	movs	r0, #0
 8022caa:	4901      	ldr	r1, [pc, #4]	@ (8022cb0 <nan+0x8>)
 8022cac:	4770      	bx	lr
 8022cae:	46c0      	nop			@ (mov r8, r8)
 8022cb0:	7ff80000 	.word	0x7ff80000

08022cb4 <quorem>:
 8022cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cb6:	6902      	ldr	r2, [r0, #16]
 8022cb8:	690f      	ldr	r7, [r1, #16]
 8022cba:	b087      	sub	sp, #28
 8022cbc:	0006      	movs	r6, r0
 8022cbe:	000b      	movs	r3, r1
 8022cc0:	2000      	movs	r0, #0
 8022cc2:	9102      	str	r1, [sp, #8]
 8022cc4:	42ba      	cmp	r2, r7
 8022cc6:	db6d      	blt.n	8022da4 <quorem+0xf0>
 8022cc8:	3f01      	subs	r7, #1
 8022cca:	00bc      	lsls	r4, r7, #2
 8022ccc:	3314      	adds	r3, #20
 8022cce:	9305      	str	r3, [sp, #20]
 8022cd0:	191b      	adds	r3, r3, r4
 8022cd2:	9303      	str	r3, [sp, #12]
 8022cd4:	0033      	movs	r3, r6
 8022cd6:	3314      	adds	r3, #20
 8022cd8:	191c      	adds	r4, r3, r4
 8022cda:	9301      	str	r3, [sp, #4]
 8022cdc:	6823      	ldr	r3, [r4, #0]
 8022cde:	9304      	str	r3, [sp, #16]
 8022ce0:	9b03      	ldr	r3, [sp, #12]
 8022ce2:	9804      	ldr	r0, [sp, #16]
 8022ce4:	681d      	ldr	r5, [r3, #0]
 8022ce6:	3501      	adds	r5, #1
 8022ce8:	0029      	movs	r1, r5
 8022cea:	f7dd fa5b 	bl	80001a4 <__udivsi3>
 8022cee:	9b04      	ldr	r3, [sp, #16]
 8022cf0:	9000      	str	r0, [sp, #0]
 8022cf2:	42ab      	cmp	r3, r5
 8022cf4:	d32b      	bcc.n	8022d4e <quorem+0x9a>
 8022cf6:	9b05      	ldr	r3, [sp, #20]
 8022cf8:	9d01      	ldr	r5, [sp, #4]
 8022cfa:	469c      	mov	ip, r3
 8022cfc:	2300      	movs	r3, #0
 8022cfe:	9305      	str	r3, [sp, #20]
 8022d00:	9304      	str	r3, [sp, #16]
 8022d02:	4662      	mov	r2, ip
 8022d04:	ca08      	ldmia	r2!, {r3}
 8022d06:	6828      	ldr	r0, [r5, #0]
 8022d08:	4694      	mov	ip, r2
 8022d0a:	9a00      	ldr	r2, [sp, #0]
 8022d0c:	b299      	uxth	r1, r3
 8022d0e:	4351      	muls	r1, r2
 8022d10:	9a05      	ldr	r2, [sp, #20]
 8022d12:	0c1b      	lsrs	r3, r3, #16
 8022d14:	1889      	adds	r1, r1, r2
 8022d16:	9a00      	ldr	r2, [sp, #0]
 8022d18:	4353      	muls	r3, r2
 8022d1a:	0c0a      	lsrs	r2, r1, #16
 8022d1c:	189b      	adds	r3, r3, r2
 8022d1e:	0c1a      	lsrs	r2, r3, #16
 8022d20:	b289      	uxth	r1, r1
 8022d22:	9205      	str	r2, [sp, #20]
 8022d24:	b282      	uxth	r2, r0
 8022d26:	1a52      	subs	r2, r2, r1
 8022d28:	9904      	ldr	r1, [sp, #16]
 8022d2a:	0c00      	lsrs	r0, r0, #16
 8022d2c:	1852      	adds	r2, r2, r1
 8022d2e:	b29b      	uxth	r3, r3
 8022d30:	1411      	asrs	r1, r2, #16
 8022d32:	1ac3      	subs	r3, r0, r3
 8022d34:	185b      	adds	r3, r3, r1
 8022d36:	1419      	asrs	r1, r3, #16
 8022d38:	b292      	uxth	r2, r2
 8022d3a:	041b      	lsls	r3, r3, #16
 8022d3c:	431a      	orrs	r2, r3
 8022d3e:	9b03      	ldr	r3, [sp, #12]
 8022d40:	9104      	str	r1, [sp, #16]
 8022d42:	c504      	stmia	r5!, {r2}
 8022d44:	4563      	cmp	r3, ip
 8022d46:	d2dc      	bcs.n	8022d02 <quorem+0x4e>
 8022d48:	6823      	ldr	r3, [r4, #0]
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d030      	beq.n	8022db0 <quorem+0xfc>
 8022d4e:	0030      	movs	r0, r6
 8022d50:	9902      	ldr	r1, [sp, #8]
 8022d52:	f001 fd7d 	bl	8024850 <__mcmp>
 8022d56:	2800      	cmp	r0, #0
 8022d58:	db23      	blt.n	8022da2 <quorem+0xee>
 8022d5a:	0034      	movs	r4, r6
 8022d5c:	2500      	movs	r5, #0
 8022d5e:	9902      	ldr	r1, [sp, #8]
 8022d60:	3414      	adds	r4, #20
 8022d62:	3114      	adds	r1, #20
 8022d64:	6823      	ldr	r3, [r4, #0]
 8022d66:	c901      	ldmia	r1!, {r0}
 8022d68:	9302      	str	r3, [sp, #8]
 8022d6a:	466b      	mov	r3, sp
 8022d6c:	891b      	ldrh	r3, [r3, #8]
 8022d6e:	b282      	uxth	r2, r0
 8022d70:	1a9a      	subs	r2, r3, r2
 8022d72:	9b02      	ldr	r3, [sp, #8]
 8022d74:	1952      	adds	r2, r2, r5
 8022d76:	0c00      	lsrs	r0, r0, #16
 8022d78:	0c1b      	lsrs	r3, r3, #16
 8022d7a:	1a1b      	subs	r3, r3, r0
 8022d7c:	1410      	asrs	r0, r2, #16
 8022d7e:	181b      	adds	r3, r3, r0
 8022d80:	141d      	asrs	r5, r3, #16
 8022d82:	b292      	uxth	r2, r2
 8022d84:	041b      	lsls	r3, r3, #16
 8022d86:	431a      	orrs	r2, r3
 8022d88:	9b03      	ldr	r3, [sp, #12]
 8022d8a:	c404      	stmia	r4!, {r2}
 8022d8c:	428b      	cmp	r3, r1
 8022d8e:	d2e9      	bcs.n	8022d64 <quorem+0xb0>
 8022d90:	9a01      	ldr	r2, [sp, #4]
 8022d92:	00bb      	lsls	r3, r7, #2
 8022d94:	18d3      	adds	r3, r2, r3
 8022d96:	681a      	ldr	r2, [r3, #0]
 8022d98:	2a00      	cmp	r2, #0
 8022d9a:	d013      	beq.n	8022dc4 <quorem+0x110>
 8022d9c:	9b00      	ldr	r3, [sp, #0]
 8022d9e:	3301      	adds	r3, #1
 8022da0:	9300      	str	r3, [sp, #0]
 8022da2:	9800      	ldr	r0, [sp, #0]
 8022da4:	b007      	add	sp, #28
 8022da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022da8:	6823      	ldr	r3, [r4, #0]
 8022daa:	2b00      	cmp	r3, #0
 8022dac:	d104      	bne.n	8022db8 <quorem+0x104>
 8022dae:	3f01      	subs	r7, #1
 8022db0:	9b01      	ldr	r3, [sp, #4]
 8022db2:	3c04      	subs	r4, #4
 8022db4:	42a3      	cmp	r3, r4
 8022db6:	d3f7      	bcc.n	8022da8 <quorem+0xf4>
 8022db8:	6137      	str	r7, [r6, #16]
 8022dba:	e7c8      	b.n	8022d4e <quorem+0x9a>
 8022dbc:	681a      	ldr	r2, [r3, #0]
 8022dbe:	2a00      	cmp	r2, #0
 8022dc0:	d104      	bne.n	8022dcc <quorem+0x118>
 8022dc2:	3f01      	subs	r7, #1
 8022dc4:	9a01      	ldr	r2, [sp, #4]
 8022dc6:	3b04      	subs	r3, #4
 8022dc8:	429a      	cmp	r2, r3
 8022dca:	d3f7      	bcc.n	8022dbc <quorem+0x108>
 8022dcc:	6137      	str	r7, [r6, #16]
 8022dce:	e7e5      	b.n	8022d9c <quorem+0xe8>

08022dd0 <_dtoa_r>:
 8022dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022dd2:	0014      	movs	r4, r2
 8022dd4:	001d      	movs	r5, r3
 8022dd6:	69c6      	ldr	r6, [r0, #28]
 8022dd8:	b09d      	sub	sp, #116	@ 0x74
 8022dda:	940a      	str	r4, [sp, #40]	@ 0x28
 8022ddc:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022dde:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8022de0:	9003      	str	r0, [sp, #12]
 8022de2:	2e00      	cmp	r6, #0
 8022de4:	d10f      	bne.n	8022e06 <_dtoa_r+0x36>
 8022de6:	2010      	movs	r0, #16
 8022de8:	f001 f98a 	bl	8024100 <malloc>
 8022dec:	9b03      	ldr	r3, [sp, #12]
 8022dee:	1e02      	subs	r2, r0, #0
 8022df0:	61d8      	str	r0, [r3, #28]
 8022df2:	d104      	bne.n	8022dfe <_dtoa_r+0x2e>
 8022df4:	21ef      	movs	r1, #239	@ 0xef
 8022df6:	4bc7      	ldr	r3, [pc, #796]	@ (8023114 <_dtoa_r+0x344>)
 8022df8:	48c7      	ldr	r0, [pc, #796]	@ (8023118 <_dtoa_r+0x348>)
 8022dfa:	f002 fb2f 	bl	802545c <__assert_func>
 8022dfe:	6046      	str	r6, [r0, #4]
 8022e00:	6086      	str	r6, [r0, #8]
 8022e02:	6006      	str	r6, [r0, #0]
 8022e04:	60c6      	str	r6, [r0, #12]
 8022e06:	9b03      	ldr	r3, [sp, #12]
 8022e08:	69db      	ldr	r3, [r3, #28]
 8022e0a:	6819      	ldr	r1, [r3, #0]
 8022e0c:	2900      	cmp	r1, #0
 8022e0e:	d00b      	beq.n	8022e28 <_dtoa_r+0x58>
 8022e10:	685a      	ldr	r2, [r3, #4]
 8022e12:	2301      	movs	r3, #1
 8022e14:	4093      	lsls	r3, r2
 8022e16:	604a      	str	r2, [r1, #4]
 8022e18:	608b      	str	r3, [r1, #8]
 8022e1a:	9803      	ldr	r0, [sp, #12]
 8022e1c:	f001 fa82 	bl	8024324 <_Bfree>
 8022e20:	2200      	movs	r2, #0
 8022e22:	9b03      	ldr	r3, [sp, #12]
 8022e24:	69db      	ldr	r3, [r3, #28]
 8022e26:	601a      	str	r2, [r3, #0]
 8022e28:	2d00      	cmp	r5, #0
 8022e2a:	da1e      	bge.n	8022e6a <_dtoa_r+0x9a>
 8022e2c:	2301      	movs	r3, #1
 8022e2e:	603b      	str	r3, [r7, #0]
 8022e30:	006b      	lsls	r3, r5, #1
 8022e32:	085b      	lsrs	r3, r3, #1
 8022e34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e36:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022e38:	4bb8      	ldr	r3, [pc, #736]	@ (802311c <_dtoa_r+0x34c>)
 8022e3a:	4ab8      	ldr	r2, [pc, #736]	@ (802311c <_dtoa_r+0x34c>)
 8022e3c:	403b      	ands	r3, r7
 8022e3e:	4293      	cmp	r3, r2
 8022e40:	d116      	bne.n	8022e70 <_dtoa_r+0xa0>
 8022e42:	4bb7      	ldr	r3, [pc, #732]	@ (8023120 <_dtoa_r+0x350>)
 8022e44:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022e46:	6013      	str	r3, [r2, #0]
 8022e48:	033b      	lsls	r3, r7, #12
 8022e4a:	0b1b      	lsrs	r3, r3, #12
 8022e4c:	4323      	orrs	r3, r4
 8022e4e:	d101      	bne.n	8022e54 <_dtoa_r+0x84>
 8022e50:	f000 fd83 	bl	802395a <_dtoa_r+0xb8a>
 8022e54:	4bb3      	ldr	r3, [pc, #716]	@ (8023124 <_dtoa_r+0x354>)
 8022e56:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022e58:	9308      	str	r3, [sp, #32]
 8022e5a:	2a00      	cmp	r2, #0
 8022e5c:	d002      	beq.n	8022e64 <_dtoa_r+0x94>
 8022e5e:	4bb2      	ldr	r3, [pc, #712]	@ (8023128 <_dtoa_r+0x358>)
 8022e60:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022e62:	6013      	str	r3, [r2, #0]
 8022e64:	9808      	ldr	r0, [sp, #32]
 8022e66:	b01d      	add	sp, #116	@ 0x74
 8022e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e6a:	2300      	movs	r3, #0
 8022e6c:	603b      	str	r3, [r7, #0]
 8022e6e:	e7e2      	b.n	8022e36 <_dtoa_r+0x66>
 8022e70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e74:	9212      	str	r2, [sp, #72]	@ 0x48
 8022e76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022e78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022e7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022e7c:	2200      	movs	r2, #0
 8022e7e:	2300      	movs	r3, #0
 8022e80:	f7dd fb16 	bl	80004b0 <__aeabi_dcmpeq>
 8022e84:	1e06      	subs	r6, r0, #0
 8022e86:	d00b      	beq.n	8022ea0 <_dtoa_r+0xd0>
 8022e88:	2301      	movs	r3, #1
 8022e8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022e8c:	6013      	str	r3, [r2, #0]
 8022e8e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	d002      	beq.n	8022e9a <_dtoa_r+0xca>
 8022e94:	4ba5      	ldr	r3, [pc, #660]	@ (802312c <_dtoa_r+0x35c>)
 8022e96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022e98:	6013      	str	r3, [r2, #0]
 8022e9a:	4ba5      	ldr	r3, [pc, #660]	@ (8023130 <_dtoa_r+0x360>)
 8022e9c:	9308      	str	r3, [sp, #32]
 8022e9e:	e7e1      	b.n	8022e64 <_dtoa_r+0x94>
 8022ea0:	ab1a      	add	r3, sp, #104	@ 0x68
 8022ea2:	9301      	str	r3, [sp, #4]
 8022ea4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8022ea6:	9300      	str	r3, [sp, #0]
 8022ea8:	9803      	ldr	r0, [sp, #12]
 8022eaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022eac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022eae:	f001 fdf1 	bl	8024a94 <__d2b>
 8022eb2:	007a      	lsls	r2, r7, #1
 8022eb4:	9005      	str	r0, [sp, #20]
 8022eb6:	0d52      	lsrs	r2, r2, #21
 8022eb8:	d100      	bne.n	8022ebc <_dtoa_r+0xec>
 8022eba:	e07b      	b.n	8022fb4 <_dtoa_r+0x1e4>
 8022ebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022ebe:	9618      	str	r6, [sp, #96]	@ 0x60
 8022ec0:	0319      	lsls	r1, r3, #12
 8022ec2:	4b9c      	ldr	r3, [pc, #624]	@ (8023134 <_dtoa_r+0x364>)
 8022ec4:	0b09      	lsrs	r1, r1, #12
 8022ec6:	430b      	orrs	r3, r1
 8022ec8:	499b      	ldr	r1, [pc, #620]	@ (8023138 <_dtoa_r+0x368>)
 8022eca:	1857      	adds	r7, r2, r1
 8022ecc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022ece:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022ed0:	0019      	movs	r1, r3
 8022ed2:	2200      	movs	r2, #0
 8022ed4:	4b99      	ldr	r3, [pc, #612]	@ (802313c <_dtoa_r+0x36c>)
 8022ed6:	f7df fe79 	bl	8002bcc <__aeabi_dsub>
 8022eda:	4a99      	ldr	r2, [pc, #612]	@ (8023140 <_dtoa_r+0x370>)
 8022edc:	4b99      	ldr	r3, [pc, #612]	@ (8023144 <_dtoa_r+0x374>)
 8022ede:	f7df fbad 	bl	800263c <__aeabi_dmul>
 8022ee2:	4a99      	ldr	r2, [pc, #612]	@ (8023148 <_dtoa_r+0x378>)
 8022ee4:	4b99      	ldr	r3, [pc, #612]	@ (802314c <_dtoa_r+0x37c>)
 8022ee6:	f7de fc01 	bl	80016ec <__aeabi_dadd>
 8022eea:	0004      	movs	r4, r0
 8022eec:	0038      	movs	r0, r7
 8022eee:	000d      	movs	r5, r1
 8022ef0:	f7e0 fa66 	bl	80033c0 <__aeabi_i2d>
 8022ef4:	4a96      	ldr	r2, [pc, #600]	@ (8023150 <_dtoa_r+0x380>)
 8022ef6:	4b97      	ldr	r3, [pc, #604]	@ (8023154 <_dtoa_r+0x384>)
 8022ef8:	f7df fba0 	bl	800263c <__aeabi_dmul>
 8022efc:	0002      	movs	r2, r0
 8022efe:	000b      	movs	r3, r1
 8022f00:	0020      	movs	r0, r4
 8022f02:	0029      	movs	r1, r5
 8022f04:	f7de fbf2 	bl	80016ec <__aeabi_dadd>
 8022f08:	0004      	movs	r4, r0
 8022f0a:	000d      	movs	r5, r1
 8022f0c:	f7e0 fa1c 	bl	8003348 <__aeabi_d2iz>
 8022f10:	2200      	movs	r2, #0
 8022f12:	9004      	str	r0, [sp, #16]
 8022f14:	2300      	movs	r3, #0
 8022f16:	0020      	movs	r0, r4
 8022f18:	0029      	movs	r1, r5
 8022f1a:	f7dd facf 	bl	80004bc <__aeabi_dcmplt>
 8022f1e:	2800      	cmp	r0, #0
 8022f20:	d00b      	beq.n	8022f3a <_dtoa_r+0x16a>
 8022f22:	9804      	ldr	r0, [sp, #16]
 8022f24:	f7e0 fa4c 	bl	80033c0 <__aeabi_i2d>
 8022f28:	002b      	movs	r3, r5
 8022f2a:	0022      	movs	r2, r4
 8022f2c:	f7dd fac0 	bl	80004b0 <__aeabi_dcmpeq>
 8022f30:	4243      	negs	r3, r0
 8022f32:	4158      	adcs	r0, r3
 8022f34:	9b04      	ldr	r3, [sp, #16]
 8022f36:	1a1b      	subs	r3, r3, r0
 8022f38:	9304      	str	r3, [sp, #16]
 8022f3a:	2301      	movs	r3, #1
 8022f3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8022f3e:	9b04      	ldr	r3, [sp, #16]
 8022f40:	2b16      	cmp	r3, #22
 8022f42:	d810      	bhi.n	8022f66 <_dtoa_r+0x196>
 8022f44:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022f46:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022f48:	9a04      	ldr	r2, [sp, #16]
 8022f4a:	4b83      	ldr	r3, [pc, #524]	@ (8023158 <_dtoa_r+0x388>)
 8022f4c:	00d2      	lsls	r2, r2, #3
 8022f4e:	189b      	adds	r3, r3, r2
 8022f50:	681a      	ldr	r2, [r3, #0]
 8022f52:	685b      	ldr	r3, [r3, #4]
 8022f54:	f7dd fab2 	bl	80004bc <__aeabi_dcmplt>
 8022f58:	2800      	cmp	r0, #0
 8022f5a:	d047      	beq.n	8022fec <_dtoa_r+0x21c>
 8022f5c:	9b04      	ldr	r3, [sp, #16]
 8022f5e:	3b01      	subs	r3, #1
 8022f60:	9304      	str	r3, [sp, #16]
 8022f62:	2300      	movs	r3, #0
 8022f64:	9315      	str	r3, [sp, #84]	@ 0x54
 8022f66:	2200      	movs	r2, #0
 8022f68:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8022f6a:	9206      	str	r2, [sp, #24]
 8022f6c:	1bdb      	subs	r3, r3, r7
 8022f6e:	1e5a      	subs	r2, r3, #1
 8022f70:	d53e      	bpl.n	8022ff0 <_dtoa_r+0x220>
 8022f72:	2201      	movs	r2, #1
 8022f74:	1ad3      	subs	r3, r2, r3
 8022f76:	9306      	str	r3, [sp, #24]
 8022f78:	2300      	movs	r3, #0
 8022f7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8022f7c:	9b04      	ldr	r3, [sp, #16]
 8022f7e:	2b00      	cmp	r3, #0
 8022f80:	db38      	blt.n	8022ff4 <_dtoa_r+0x224>
 8022f82:	9a04      	ldr	r2, [sp, #16]
 8022f84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022f86:	4694      	mov	ip, r2
 8022f88:	4463      	add	r3, ip
 8022f8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8022f8c:	2300      	movs	r3, #0
 8022f8e:	9214      	str	r2, [sp, #80]	@ 0x50
 8022f90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022f92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022f94:	2401      	movs	r4, #1
 8022f96:	2b09      	cmp	r3, #9
 8022f98:	d867      	bhi.n	802306a <_dtoa_r+0x29a>
 8022f9a:	2b05      	cmp	r3, #5
 8022f9c:	dd02      	ble.n	8022fa4 <_dtoa_r+0x1d4>
 8022f9e:	2400      	movs	r4, #0
 8022fa0:	3b04      	subs	r3, #4
 8022fa2:	9322      	str	r3, [sp, #136]	@ 0x88
 8022fa4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022fa6:	1e98      	subs	r0, r3, #2
 8022fa8:	2803      	cmp	r0, #3
 8022faa:	d867      	bhi.n	802307c <_dtoa_r+0x2ac>
 8022fac:	f7dd f8e6 	bl	800017c <__gnu_thumb1_case_uqi>
 8022fb0:	5b383a2b 	.word	0x5b383a2b
 8022fb4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022fb6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8022fb8:	18f6      	adds	r6, r6, r3
 8022fba:	4b68      	ldr	r3, [pc, #416]	@ (802315c <_dtoa_r+0x38c>)
 8022fbc:	18f2      	adds	r2, r6, r3
 8022fbe:	2a20      	cmp	r2, #32
 8022fc0:	dd0f      	ble.n	8022fe2 <_dtoa_r+0x212>
 8022fc2:	2340      	movs	r3, #64	@ 0x40
 8022fc4:	1a9b      	subs	r3, r3, r2
 8022fc6:	409f      	lsls	r7, r3
 8022fc8:	4b65      	ldr	r3, [pc, #404]	@ (8023160 <_dtoa_r+0x390>)
 8022fca:	0038      	movs	r0, r7
 8022fcc:	18f3      	adds	r3, r6, r3
 8022fce:	40dc      	lsrs	r4, r3
 8022fd0:	4320      	orrs	r0, r4
 8022fd2:	f7e0 fa23 	bl	800341c <__aeabi_ui2d>
 8022fd6:	2201      	movs	r2, #1
 8022fd8:	4b62      	ldr	r3, [pc, #392]	@ (8023164 <_dtoa_r+0x394>)
 8022fda:	1e77      	subs	r7, r6, #1
 8022fdc:	18cb      	adds	r3, r1, r3
 8022fde:	9218      	str	r2, [sp, #96]	@ 0x60
 8022fe0:	e776      	b.n	8022ed0 <_dtoa_r+0x100>
 8022fe2:	2320      	movs	r3, #32
 8022fe4:	0020      	movs	r0, r4
 8022fe6:	1a9b      	subs	r3, r3, r2
 8022fe8:	4098      	lsls	r0, r3
 8022fea:	e7f2      	b.n	8022fd2 <_dtoa_r+0x202>
 8022fec:	9015      	str	r0, [sp, #84]	@ 0x54
 8022fee:	e7ba      	b.n	8022f66 <_dtoa_r+0x196>
 8022ff0:	920d      	str	r2, [sp, #52]	@ 0x34
 8022ff2:	e7c3      	b.n	8022f7c <_dtoa_r+0x1ac>
 8022ff4:	9b06      	ldr	r3, [sp, #24]
 8022ff6:	9a04      	ldr	r2, [sp, #16]
 8022ff8:	1a9b      	subs	r3, r3, r2
 8022ffa:	9306      	str	r3, [sp, #24]
 8022ffc:	4253      	negs	r3, r2
 8022ffe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023000:	2300      	movs	r3, #0
 8023002:	9314      	str	r3, [sp, #80]	@ 0x50
 8023004:	e7c5      	b.n	8022f92 <_dtoa_r+0x1c2>
 8023006:	2300      	movs	r3, #0
 8023008:	9310      	str	r3, [sp, #64]	@ 0x40
 802300a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802300c:	930e      	str	r3, [sp, #56]	@ 0x38
 802300e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023010:	2b00      	cmp	r3, #0
 8023012:	dc13      	bgt.n	802303c <_dtoa_r+0x26c>
 8023014:	2301      	movs	r3, #1
 8023016:	001a      	movs	r2, r3
 8023018:	930e      	str	r3, [sp, #56]	@ 0x38
 802301a:	9309      	str	r3, [sp, #36]	@ 0x24
 802301c:	9223      	str	r2, [sp, #140]	@ 0x8c
 802301e:	e00d      	b.n	802303c <_dtoa_r+0x26c>
 8023020:	2301      	movs	r3, #1
 8023022:	e7f1      	b.n	8023008 <_dtoa_r+0x238>
 8023024:	2300      	movs	r3, #0
 8023026:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8023028:	9310      	str	r3, [sp, #64]	@ 0x40
 802302a:	4694      	mov	ip, r2
 802302c:	9b04      	ldr	r3, [sp, #16]
 802302e:	4463      	add	r3, ip
 8023030:	930e      	str	r3, [sp, #56]	@ 0x38
 8023032:	3301      	adds	r3, #1
 8023034:	9309      	str	r3, [sp, #36]	@ 0x24
 8023036:	2b00      	cmp	r3, #0
 8023038:	dc00      	bgt.n	802303c <_dtoa_r+0x26c>
 802303a:	2301      	movs	r3, #1
 802303c:	9a03      	ldr	r2, [sp, #12]
 802303e:	2100      	movs	r1, #0
 8023040:	69d0      	ldr	r0, [r2, #28]
 8023042:	2204      	movs	r2, #4
 8023044:	0015      	movs	r5, r2
 8023046:	3514      	adds	r5, #20
 8023048:	429d      	cmp	r5, r3
 802304a:	d91b      	bls.n	8023084 <_dtoa_r+0x2b4>
 802304c:	6041      	str	r1, [r0, #4]
 802304e:	9803      	ldr	r0, [sp, #12]
 8023050:	f001 f924 	bl	802429c <_Balloc>
 8023054:	9008      	str	r0, [sp, #32]
 8023056:	2800      	cmp	r0, #0
 8023058:	d117      	bne.n	802308a <_dtoa_r+0x2ba>
 802305a:	21b0      	movs	r1, #176	@ 0xb0
 802305c:	4b42      	ldr	r3, [pc, #264]	@ (8023168 <_dtoa_r+0x398>)
 802305e:	482e      	ldr	r0, [pc, #184]	@ (8023118 <_dtoa_r+0x348>)
 8023060:	9a08      	ldr	r2, [sp, #32]
 8023062:	31ff      	adds	r1, #255	@ 0xff
 8023064:	e6c9      	b.n	8022dfa <_dtoa_r+0x2a>
 8023066:	2301      	movs	r3, #1
 8023068:	e7dd      	b.n	8023026 <_dtoa_r+0x256>
 802306a:	2300      	movs	r3, #0
 802306c:	9410      	str	r4, [sp, #64]	@ 0x40
 802306e:	9322      	str	r3, [sp, #136]	@ 0x88
 8023070:	3b01      	subs	r3, #1
 8023072:	930e      	str	r3, [sp, #56]	@ 0x38
 8023074:	9309      	str	r3, [sp, #36]	@ 0x24
 8023076:	2200      	movs	r2, #0
 8023078:	3313      	adds	r3, #19
 802307a:	e7cf      	b.n	802301c <_dtoa_r+0x24c>
 802307c:	2301      	movs	r3, #1
 802307e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023080:	3b02      	subs	r3, #2
 8023082:	e7f6      	b.n	8023072 <_dtoa_r+0x2a2>
 8023084:	3101      	adds	r1, #1
 8023086:	0052      	lsls	r2, r2, #1
 8023088:	e7dc      	b.n	8023044 <_dtoa_r+0x274>
 802308a:	9b03      	ldr	r3, [sp, #12]
 802308c:	9a08      	ldr	r2, [sp, #32]
 802308e:	69db      	ldr	r3, [r3, #28]
 8023090:	601a      	str	r2, [r3, #0]
 8023092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023094:	2b0e      	cmp	r3, #14
 8023096:	d900      	bls.n	802309a <_dtoa_r+0x2ca>
 8023098:	e0d9      	b.n	802324e <_dtoa_r+0x47e>
 802309a:	2c00      	cmp	r4, #0
 802309c:	d100      	bne.n	80230a0 <_dtoa_r+0x2d0>
 802309e:	e0d6      	b.n	802324e <_dtoa_r+0x47e>
 80230a0:	9b04      	ldr	r3, [sp, #16]
 80230a2:	2b00      	cmp	r3, #0
 80230a4:	dd64      	ble.n	8023170 <_dtoa_r+0x3a0>
 80230a6:	210f      	movs	r1, #15
 80230a8:	9a04      	ldr	r2, [sp, #16]
 80230aa:	4b2b      	ldr	r3, [pc, #172]	@ (8023158 <_dtoa_r+0x388>)
 80230ac:	400a      	ands	r2, r1
 80230ae:	00d2      	lsls	r2, r2, #3
 80230b0:	189b      	adds	r3, r3, r2
 80230b2:	681e      	ldr	r6, [r3, #0]
 80230b4:	685f      	ldr	r7, [r3, #4]
 80230b6:	9b04      	ldr	r3, [sp, #16]
 80230b8:	2402      	movs	r4, #2
 80230ba:	111d      	asrs	r5, r3, #4
 80230bc:	05db      	lsls	r3, r3, #23
 80230be:	d50a      	bpl.n	80230d6 <_dtoa_r+0x306>
 80230c0:	4b2a      	ldr	r3, [pc, #168]	@ (802316c <_dtoa_r+0x39c>)
 80230c2:	400d      	ands	r5, r1
 80230c4:	6a1a      	ldr	r2, [r3, #32]
 80230c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80230c8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80230ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80230cc:	f7de fe72 	bl	8001db4 <__aeabi_ddiv>
 80230d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80230d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80230d4:	3401      	adds	r4, #1
 80230d6:	4b25      	ldr	r3, [pc, #148]	@ (802316c <_dtoa_r+0x39c>)
 80230d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80230da:	2d00      	cmp	r5, #0
 80230dc:	d108      	bne.n	80230f0 <_dtoa_r+0x320>
 80230de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80230e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80230e2:	0032      	movs	r2, r6
 80230e4:	003b      	movs	r3, r7
 80230e6:	f7de fe65 	bl	8001db4 <__aeabi_ddiv>
 80230ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80230ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80230ee:	e05a      	b.n	80231a6 <_dtoa_r+0x3d6>
 80230f0:	2301      	movs	r3, #1
 80230f2:	421d      	tst	r5, r3
 80230f4:	d009      	beq.n	802310a <_dtoa_r+0x33a>
 80230f6:	18e4      	adds	r4, r4, r3
 80230f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230fa:	0030      	movs	r0, r6
 80230fc:	681a      	ldr	r2, [r3, #0]
 80230fe:	685b      	ldr	r3, [r3, #4]
 8023100:	0039      	movs	r1, r7
 8023102:	f7df fa9b 	bl	800263c <__aeabi_dmul>
 8023106:	0006      	movs	r6, r0
 8023108:	000f      	movs	r7, r1
 802310a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802310c:	106d      	asrs	r5, r5, #1
 802310e:	3308      	adds	r3, #8
 8023110:	e7e2      	b.n	80230d8 <_dtoa_r+0x308>
 8023112:	46c0      	nop			@ (mov r8, r8)
 8023114:	08029672 	.word	0x08029672
 8023118:	08029689 	.word	0x08029689
 802311c:	7ff00000 	.word	0x7ff00000
 8023120:	0000270f 	.word	0x0000270f
 8023124:	0802966e 	.word	0x0802966e
 8023128:	08029671 	.word	0x08029671
 802312c:	0802963a 	.word	0x0802963a
 8023130:	08029639 	.word	0x08029639
 8023134:	3ff00000 	.word	0x3ff00000
 8023138:	fffffc01 	.word	0xfffffc01
 802313c:	3ff80000 	.word	0x3ff80000
 8023140:	636f4361 	.word	0x636f4361
 8023144:	3fd287a7 	.word	0x3fd287a7
 8023148:	8b60c8b3 	.word	0x8b60c8b3
 802314c:	3fc68a28 	.word	0x3fc68a28
 8023150:	509f79fb 	.word	0x509f79fb
 8023154:	3fd34413 	.word	0x3fd34413
 8023158:	080297e0 	.word	0x080297e0
 802315c:	00000432 	.word	0x00000432
 8023160:	00000412 	.word	0x00000412
 8023164:	fe100000 	.word	0xfe100000
 8023168:	080296e1 	.word	0x080296e1
 802316c:	080297b8 	.word	0x080297b8
 8023170:	9b04      	ldr	r3, [sp, #16]
 8023172:	2402      	movs	r4, #2
 8023174:	2b00      	cmp	r3, #0
 8023176:	d016      	beq.n	80231a6 <_dtoa_r+0x3d6>
 8023178:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802317a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802317c:	220f      	movs	r2, #15
 802317e:	425d      	negs	r5, r3
 8023180:	402a      	ands	r2, r5
 8023182:	4bd7      	ldr	r3, [pc, #860]	@ (80234e0 <_dtoa_r+0x710>)
 8023184:	00d2      	lsls	r2, r2, #3
 8023186:	189b      	adds	r3, r3, r2
 8023188:	681a      	ldr	r2, [r3, #0]
 802318a:	685b      	ldr	r3, [r3, #4]
 802318c:	f7df fa56 	bl	800263c <__aeabi_dmul>
 8023190:	2701      	movs	r7, #1
 8023192:	2300      	movs	r3, #0
 8023194:	900a      	str	r0, [sp, #40]	@ 0x28
 8023196:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023198:	4ed2      	ldr	r6, [pc, #840]	@ (80234e4 <_dtoa_r+0x714>)
 802319a:	112d      	asrs	r5, r5, #4
 802319c:	2d00      	cmp	r5, #0
 802319e:	d000      	beq.n	80231a2 <_dtoa_r+0x3d2>
 80231a0:	e0ba      	b.n	8023318 <_dtoa_r+0x548>
 80231a2:	2b00      	cmp	r3, #0
 80231a4:	d1a1      	bne.n	80230ea <_dtoa_r+0x31a>
 80231a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80231a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80231aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80231ac:	2b00      	cmp	r3, #0
 80231ae:	d100      	bne.n	80231b2 <_dtoa_r+0x3e2>
 80231b0:	e0bd      	b.n	802332e <_dtoa_r+0x55e>
 80231b2:	2200      	movs	r2, #0
 80231b4:	0030      	movs	r0, r6
 80231b6:	0039      	movs	r1, r7
 80231b8:	4bcb      	ldr	r3, [pc, #812]	@ (80234e8 <_dtoa_r+0x718>)
 80231ba:	f7dd f97f 	bl	80004bc <__aeabi_dcmplt>
 80231be:	2800      	cmp	r0, #0
 80231c0:	d100      	bne.n	80231c4 <_dtoa_r+0x3f4>
 80231c2:	e0b4      	b.n	802332e <_dtoa_r+0x55e>
 80231c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231c6:	2b00      	cmp	r3, #0
 80231c8:	d100      	bne.n	80231cc <_dtoa_r+0x3fc>
 80231ca:	e0b0      	b.n	802332e <_dtoa_r+0x55e>
 80231cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80231ce:	2b00      	cmp	r3, #0
 80231d0:	dd39      	ble.n	8023246 <_dtoa_r+0x476>
 80231d2:	9b04      	ldr	r3, [sp, #16]
 80231d4:	2200      	movs	r2, #0
 80231d6:	3b01      	subs	r3, #1
 80231d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80231da:	0030      	movs	r0, r6
 80231dc:	4bc3      	ldr	r3, [pc, #780]	@ (80234ec <_dtoa_r+0x71c>)
 80231de:	0039      	movs	r1, r7
 80231e0:	f7df fa2c 	bl	800263c <__aeabi_dmul>
 80231e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80231e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80231e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80231ea:	3401      	adds	r4, #1
 80231ec:	0020      	movs	r0, r4
 80231ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80231f0:	f7e0 f8e6 	bl	80033c0 <__aeabi_i2d>
 80231f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80231f8:	f7df fa20 	bl	800263c <__aeabi_dmul>
 80231fc:	4bbc      	ldr	r3, [pc, #752]	@ (80234f0 <_dtoa_r+0x720>)
 80231fe:	2200      	movs	r2, #0
 8023200:	f7de fa74 	bl	80016ec <__aeabi_dadd>
 8023204:	4bbb      	ldr	r3, [pc, #748]	@ (80234f4 <_dtoa_r+0x724>)
 8023206:	0006      	movs	r6, r0
 8023208:	18cf      	adds	r7, r1, r3
 802320a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802320c:	2b00      	cmp	r3, #0
 802320e:	d000      	beq.n	8023212 <_dtoa_r+0x442>
 8023210:	e091      	b.n	8023336 <_dtoa_r+0x566>
 8023212:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023214:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023216:	2200      	movs	r2, #0
 8023218:	4bb7      	ldr	r3, [pc, #732]	@ (80234f8 <_dtoa_r+0x728>)
 802321a:	f7df fcd7 	bl	8002bcc <__aeabi_dsub>
 802321e:	0032      	movs	r2, r6
 8023220:	003b      	movs	r3, r7
 8023222:	0004      	movs	r4, r0
 8023224:	000d      	movs	r5, r1
 8023226:	f7dd f95d 	bl	80004e4 <__aeabi_dcmpgt>
 802322a:	2800      	cmp	r0, #0
 802322c:	d000      	beq.n	8023230 <_dtoa_r+0x460>
 802322e:	e29d      	b.n	802376c <_dtoa_r+0x99c>
 8023230:	2180      	movs	r1, #128	@ 0x80
 8023232:	0609      	lsls	r1, r1, #24
 8023234:	187b      	adds	r3, r7, r1
 8023236:	0032      	movs	r2, r6
 8023238:	0020      	movs	r0, r4
 802323a:	0029      	movs	r1, r5
 802323c:	f7dd f93e 	bl	80004bc <__aeabi_dcmplt>
 8023240:	2800      	cmp	r0, #0
 8023242:	d000      	beq.n	8023246 <_dtoa_r+0x476>
 8023244:	e130      	b.n	80234a8 <_dtoa_r+0x6d8>
 8023246:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023248:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802324a:	930a      	str	r3, [sp, #40]	@ 0x28
 802324c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802324e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023250:	2b00      	cmp	r3, #0
 8023252:	da00      	bge.n	8023256 <_dtoa_r+0x486>
 8023254:	e177      	b.n	8023546 <_dtoa_r+0x776>
 8023256:	9a04      	ldr	r2, [sp, #16]
 8023258:	2a0e      	cmp	r2, #14
 802325a:	dd00      	ble.n	802325e <_dtoa_r+0x48e>
 802325c:	e173      	b.n	8023546 <_dtoa_r+0x776>
 802325e:	4ba0      	ldr	r3, [pc, #640]	@ (80234e0 <_dtoa_r+0x710>)
 8023260:	00d2      	lsls	r2, r2, #3
 8023262:	189b      	adds	r3, r3, r2
 8023264:	685c      	ldr	r4, [r3, #4]
 8023266:	681b      	ldr	r3, [r3, #0]
 8023268:	9306      	str	r3, [sp, #24]
 802326a:	9407      	str	r4, [sp, #28]
 802326c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802326e:	2b00      	cmp	r3, #0
 8023270:	da03      	bge.n	802327a <_dtoa_r+0x4aa>
 8023272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023274:	2b00      	cmp	r3, #0
 8023276:	dc00      	bgt.n	802327a <_dtoa_r+0x4aa>
 8023278:	e106      	b.n	8023488 <_dtoa_r+0x6b8>
 802327a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802327c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802327e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023280:	9d08      	ldr	r5, [sp, #32]
 8023282:	3b01      	subs	r3, #1
 8023284:	195b      	adds	r3, r3, r5
 8023286:	930a      	str	r3, [sp, #40]	@ 0x28
 8023288:	9a06      	ldr	r2, [sp, #24]
 802328a:	9b07      	ldr	r3, [sp, #28]
 802328c:	0030      	movs	r0, r6
 802328e:	0039      	movs	r1, r7
 8023290:	f7de fd90 	bl	8001db4 <__aeabi_ddiv>
 8023294:	f7e0 f858 	bl	8003348 <__aeabi_d2iz>
 8023298:	9009      	str	r0, [sp, #36]	@ 0x24
 802329a:	f7e0 f891 	bl	80033c0 <__aeabi_i2d>
 802329e:	9a06      	ldr	r2, [sp, #24]
 80232a0:	9b07      	ldr	r3, [sp, #28]
 80232a2:	f7df f9cb 	bl	800263c <__aeabi_dmul>
 80232a6:	0002      	movs	r2, r0
 80232a8:	000b      	movs	r3, r1
 80232aa:	0030      	movs	r0, r6
 80232ac:	0039      	movs	r1, r7
 80232ae:	f7df fc8d 	bl	8002bcc <__aeabi_dsub>
 80232b2:	002b      	movs	r3, r5
 80232b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80232b6:	3501      	adds	r5, #1
 80232b8:	3230      	adds	r2, #48	@ 0x30
 80232ba:	701a      	strb	r2, [r3, #0]
 80232bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80232be:	002c      	movs	r4, r5
 80232c0:	429a      	cmp	r2, r3
 80232c2:	d000      	beq.n	80232c6 <_dtoa_r+0x4f6>
 80232c4:	e131      	b.n	802352a <_dtoa_r+0x75a>
 80232c6:	0002      	movs	r2, r0
 80232c8:	000b      	movs	r3, r1
 80232ca:	f7de fa0f 	bl	80016ec <__aeabi_dadd>
 80232ce:	9a06      	ldr	r2, [sp, #24]
 80232d0:	9b07      	ldr	r3, [sp, #28]
 80232d2:	0006      	movs	r6, r0
 80232d4:	000f      	movs	r7, r1
 80232d6:	f7dd f905 	bl	80004e4 <__aeabi_dcmpgt>
 80232da:	2800      	cmp	r0, #0
 80232dc:	d000      	beq.n	80232e0 <_dtoa_r+0x510>
 80232de:	e10f      	b.n	8023500 <_dtoa_r+0x730>
 80232e0:	9a06      	ldr	r2, [sp, #24]
 80232e2:	9b07      	ldr	r3, [sp, #28]
 80232e4:	0030      	movs	r0, r6
 80232e6:	0039      	movs	r1, r7
 80232e8:	f7dd f8e2 	bl	80004b0 <__aeabi_dcmpeq>
 80232ec:	2800      	cmp	r0, #0
 80232ee:	d003      	beq.n	80232f8 <_dtoa_r+0x528>
 80232f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80232f2:	07dd      	lsls	r5, r3, #31
 80232f4:	d500      	bpl.n	80232f8 <_dtoa_r+0x528>
 80232f6:	e103      	b.n	8023500 <_dtoa_r+0x730>
 80232f8:	9905      	ldr	r1, [sp, #20]
 80232fa:	9803      	ldr	r0, [sp, #12]
 80232fc:	f001 f812 	bl	8024324 <_Bfree>
 8023300:	2300      	movs	r3, #0
 8023302:	7023      	strb	r3, [r4, #0]
 8023304:	9b04      	ldr	r3, [sp, #16]
 8023306:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023308:	3301      	adds	r3, #1
 802330a:	6013      	str	r3, [r2, #0]
 802330c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802330e:	2b00      	cmp	r3, #0
 8023310:	d100      	bne.n	8023314 <_dtoa_r+0x544>
 8023312:	e5a7      	b.n	8022e64 <_dtoa_r+0x94>
 8023314:	601c      	str	r4, [r3, #0]
 8023316:	e5a5      	b.n	8022e64 <_dtoa_r+0x94>
 8023318:	423d      	tst	r5, r7
 802331a:	d005      	beq.n	8023328 <_dtoa_r+0x558>
 802331c:	6832      	ldr	r2, [r6, #0]
 802331e:	6873      	ldr	r3, [r6, #4]
 8023320:	f7df f98c 	bl	800263c <__aeabi_dmul>
 8023324:	003b      	movs	r3, r7
 8023326:	3401      	adds	r4, #1
 8023328:	106d      	asrs	r5, r5, #1
 802332a:	3608      	adds	r6, #8
 802332c:	e736      	b.n	802319c <_dtoa_r+0x3cc>
 802332e:	9b04      	ldr	r3, [sp, #16]
 8023330:	930c      	str	r3, [sp, #48]	@ 0x30
 8023332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023334:	e75a      	b.n	80231ec <_dtoa_r+0x41c>
 8023336:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023338:	4b69      	ldr	r3, [pc, #420]	@ (80234e0 <_dtoa_r+0x710>)
 802333a:	3a01      	subs	r2, #1
 802333c:	00d2      	lsls	r2, r2, #3
 802333e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8023340:	189b      	adds	r3, r3, r2
 8023342:	681a      	ldr	r2, [r3, #0]
 8023344:	685b      	ldr	r3, [r3, #4]
 8023346:	2900      	cmp	r1, #0
 8023348:	d04c      	beq.n	80233e4 <_dtoa_r+0x614>
 802334a:	2000      	movs	r0, #0
 802334c:	496b      	ldr	r1, [pc, #428]	@ (80234fc <_dtoa_r+0x72c>)
 802334e:	f7de fd31 	bl	8001db4 <__aeabi_ddiv>
 8023352:	0032      	movs	r2, r6
 8023354:	003b      	movs	r3, r7
 8023356:	f7df fc39 	bl	8002bcc <__aeabi_dsub>
 802335a:	9a08      	ldr	r2, [sp, #32]
 802335c:	0006      	movs	r6, r0
 802335e:	4694      	mov	ip, r2
 8023360:	000f      	movs	r7, r1
 8023362:	9b08      	ldr	r3, [sp, #32]
 8023364:	9316      	str	r3, [sp, #88]	@ 0x58
 8023366:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023368:	4463      	add	r3, ip
 802336a:	9311      	str	r3, [sp, #68]	@ 0x44
 802336c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802336e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023370:	f7df ffea 	bl	8003348 <__aeabi_d2iz>
 8023374:	0005      	movs	r5, r0
 8023376:	f7e0 f823 	bl	80033c0 <__aeabi_i2d>
 802337a:	0002      	movs	r2, r0
 802337c:	000b      	movs	r3, r1
 802337e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023382:	f7df fc23 	bl	8002bcc <__aeabi_dsub>
 8023386:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023388:	3530      	adds	r5, #48	@ 0x30
 802338a:	1c5c      	adds	r4, r3, #1
 802338c:	701d      	strb	r5, [r3, #0]
 802338e:	0032      	movs	r2, r6
 8023390:	003b      	movs	r3, r7
 8023392:	900a      	str	r0, [sp, #40]	@ 0x28
 8023394:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023396:	f7dd f891 	bl	80004bc <__aeabi_dcmplt>
 802339a:	2800      	cmp	r0, #0
 802339c:	d16a      	bne.n	8023474 <_dtoa_r+0x6a4>
 802339e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80233a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233a2:	2000      	movs	r0, #0
 80233a4:	4950      	ldr	r1, [pc, #320]	@ (80234e8 <_dtoa_r+0x718>)
 80233a6:	f7df fc11 	bl	8002bcc <__aeabi_dsub>
 80233aa:	0032      	movs	r2, r6
 80233ac:	003b      	movs	r3, r7
 80233ae:	f7dd f885 	bl	80004bc <__aeabi_dcmplt>
 80233b2:	2800      	cmp	r0, #0
 80233b4:	d000      	beq.n	80233b8 <_dtoa_r+0x5e8>
 80233b6:	e0a5      	b.n	8023504 <_dtoa_r+0x734>
 80233b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80233ba:	42a3      	cmp	r3, r4
 80233bc:	d100      	bne.n	80233c0 <_dtoa_r+0x5f0>
 80233be:	e742      	b.n	8023246 <_dtoa_r+0x476>
 80233c0:	2200      	movs	r2, #0
 80233c2:	0030      	movs	r0, r6
 80233c4:	0039      	movs	r1, r7
 80233c6:	4b49      	ldr	r3, [pc, #292]	@ (80234ec <_dtoa_r+0x71c>)
 80233c8:	f7df f938 	bl	800263c <__aeabi_dmul>
 80233cc:	2200      	movs	r2, #0
 80233ce:	0006      	movs	r6, r0
 80233d0:	000f      	movs	r7, r1
 80233d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80233d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80233d6:	4b45      	ldr	r3, [pc, #276]	@ (80234ec <_dtoa_r+0x71c>)
 80233d8:	f7df f930 	bl	800263c <__aeabi_dmul>
 80233dc:	9416      	str	r4, [sp, #88]	@ 0x58
 80233de:	900a      	str	r0, [sp, #40]	@ 0x28
 80233e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80233e2:	e7c3      	b.n	802336c <_dtoa_r+0x59c>
 80233e4:	0030      	movs	r0, r6
 80233e6:	0039      	movs	r1, r7
 80233e8:	f7df f928 	bl	800263c <__aeabi_dmul>
 80233ec:	9d08      	ldr	r5, [sp, #32]
 80233ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80233f0:	002b      	movs	r3, r5
 80233f2:	4694      	mov	ip, r2
 80233f4:	9016      	str	r0, [sp, #88]	@ 0x58
 80233f6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80233f8:	4463      	add	r3, ip
 80233fa:	9319      	str	r3, [sp, #100]	@ 0x64
 80233fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80233fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023400:	f7df ffa2 	bl	8003348 <__aeabi_d2iz>
 8023404:	0004      	movs	r4, r0
 8023406:	f7df ffdb 	bl	80033c0 <__aeabi_i2d>
 802340a:	000b      	movs	r3, r1
 802340c:	0002      	movs	r2, r0
 802340e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023412:	f7df fbdb 	bl	8002bcc <__aeabi_dsub>
 8023416:	3430      	adds	r4, #48	@ 0x30
 8023418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802341a:	702c      	strb	r4, [r5, #0]
 802341c:	3501      	adds	r5, #1
 802341e:	0006      	movs	r6, r0
 8023420:	000f      	movs	r7, r1
 8023422:	42ab      	cmp	r3, r5
 8023424:	d129      	bne.n	802347a <_dtoa_r+0x6aa>
 8023426:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8023428:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802342a:	9b08      	ldr	r3, [sp, #32]
 802342c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802342e:	469c      	mov	ip, r3
 8023430:	2200      	movs	r2, #0
 8023432:	4b32      	ldr	r3, [pc, #200]	@ (80234fc <_dtoa_r+0x72c>)
 8023434:	4464      	add	r4, ip
 8023436:	f7de f959 	bl	80016ec <__aeabi_dadd>
 802343a:	0002      	movs	r2, r0
 802343c:	000b      	movs	r3, r1
 802343e:	0030      	movs	r0, r6
 8023440:	0039      	movs	r1, r7
 8023442:	f7dd f84f 	bl	80004e4 <__aeabi_dcmpgt>
 8023446:	2800      	cmp	r0, #0
 8023448:	d15c      	bne.n	8023504 <_dtoa_r+0x734>
 802344a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802344c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802344e:	2000      	movs	r0, #0
 8023450:	492a      	ldr	r1, [pc, #168]	@ (80234fc <_dtoa_r+0x72c>)
 8023452:	f7df fbbb 	bl	8002bcc <__aeabi_dsub>
 8023456:	0002      	movs	r2, r0
 8023458:	000b      	movs	r3, r1
 802345a:	0030      	movs	r0, r6
 802345c:	0039      	movs	r1, r7
 802345e:	f7dd f82d 	bl	80004bc <__aeabi_dcmplt>
 8023462:	2800      	cmp	r0, #0
 8023464:	d100      	bne.n	8023468 <_dtoa_r+0x698>
 8023466:	e6ee      	b.n	8023246 <_dtoa_r+0x476>
 8023468:	0023      	movs	r3, r4
 802346a:	3c01      	subs	r4, #1
 802346c:	7822      	ldrb	r2, [r4, #0]
 802346e:	2a30      	cmp	r2, #48	@ 0x30
 8023470:	d0fa      	beq.n	8023468 <_dtoa_r+0x698>
 8023472:	001c      	movs	r4, r3
 8023474:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023476:	9304      	str	r3, [sp, #16]
 8023478:	e73e      	b.n	80232f8 <_dtoa_r+0x528>
 802347a:	2200      	movs	r2, #0
 802347c:	4b1b      	ldr	r3, [pc, #108]	@ (80234ec <_dtoa_r+0x71c>)
 802347e:	f7df f8dd 	bl	800263c <__aeabi_dmul>
 8023482:	900a      	str	r0, [sp, #40]	@ 0x28
 8023484:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023486:	e7b9      	b.n	80233fc <_dtoa_r+0x62c>
 8023488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802348a:	2b00      	cmp	r3, #0
 802348c:	d10c      	bne.n	80234a8 <_dtoa_r+0x6d8>
 802348e:	9806      	ldr	r0, [sp, #24]
 8023490:	9907      	ldr	r1, [sp, #28]
 8023492:	2200      	movs	r2, #0
 8023494:	4b18      	ldr	r3, [pc, #96]	@ (80234f8 <_dtoa_r+0x728>)
 8023496:	f7df f8d1 	bl	800263c <__aeabi_dmul>
 802349a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802349c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802349e:	f7dd f82b 	bl	80004f8 <__aeabi_dcmpge>
 80234a2:	2800      	cmp	r0, #0
 80234a4:	d100      	bne.n	80234a8 <_dtoa_r+0x6d8>
 80234a6:	e164      	b.n	8023772 <_dtoa_r+0x9a2>
 80234a8:	2600      	movs	r6, #0
 80234aa:	0037      	movs	r7, r6
 80234ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80234ae:	9c08      	ldr	r4, [sp, #32]
 80234b0:	43db      	mvns	r3, r3
 80234b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80234b4:	2300      	movs	r3, #0
 80234b6:	9304      	str	r3, [sp, #16]
 80234b8:	0031      	movs	r1, r6
 80234ba:	9803      	ldr	r0, [sp, #12]
 80234bc:	f000 ff32 	bl	8024324 <_Bfree>
 80234c0:	2f00      	cmp	r7, #0
 80234c2:	d0d7      	beq.n	8023474 <_dtoa_r+0x6a4>
 80234c4:	9b04      	ldr	r3, [sp, #16]
 80234c6:	2b00      	cmp	r3, #0
 80234c8:	d005      	beq.n	80234d6 <_dtoa_r+0x706>
 80234ca:	42bb      	cmp	r3, r7
 80234cc:	d003      	beq.n	80234d6 <_dtoa_r+0x706>
 80234ce:	0019      	movs	r1, r3
 80234d0:	9803      	ldr	r0, [sp, #12]
 80234d2:	f000 ff27 	bl	8024324 <_Bfree>
 80234d6:	0039      	movs	r1, r7
 80234d8:	9803      	ldr	r0, [sp, #12]
 80234da:	f000 ff23 	bl	8024324 <_Bfree>
 80234de:	e7c9      	b.n	8023474 <_dtoa_r+0x6a4>
 80234e0:	080297e0 	.word	0x080297e0
 80234e4:	080297b8 	.word	0x080297b8
 80234e8:	3ff00000 	.word	0x3ff00000
 80234ec:	40240000 	.word	0x40240000
 80234f0:	401c0000 	.word	0x401c0000
 80234f4:	fcc00000 	.word	0xfcc00000
 80234f8:	40140000 	.word	0x40140000
 80234fc:	3fe00000 	.word	0x3fe00000
 8023500:	9b04      	ldr	r3, [sp, #16]
 8023502:	930c      	str	r3, [sp, #48]	@ 0x30
 8023504:	0023      	movs	r3, r4
 8023506:	001c      	movs	r4, r3
 8023508:	3b01      	subs	r3, #1
 802350a:	781a      	ldrb	r2, [r3, #0]
 802350c:	2a39      	cmp	r2, #57	@ 0x39
 802350e:	d108      	bne.n	8023522 <_dtoa_r+0x752>
 8023510:	9a08      	ldr	r2, [sp, #32]
 8023512:	429a      	cmp	r2, r3
 8023514:	d1f7      	bne.n	8023506 <_dtoa_r+0x736>
 8023516:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023518:	9908      	ldr	r1, [sp, #32]
 802351a:	3201      	adds	r2, #1
 802351c:	920c      	str	r2, [sp, #48]	@ 0x30
 802351e:	2230      	movs	r2, #48	@ 0x30
 8023520:	700a      	strb	r2, [r1, #0]
 8023522:	781a      	ldrb	r2, [r3, #0]
 8023524:	3201      	adds	r2, #1
 8023526:	701a      	strb	r2, [r3, #0]
 8023528:	e7a4      	b.n	8023474 <_dtoa_r+0x6a4>
 802352a:	2200      	movs	r2, #0
 802352c:	4bc6      	ldr	r3, [pc, #792]	@ (8023848 <_dtoa_r+0xa78>)
 802352e:	f7df f885 	bl	800263c <__aeabi_dmul>
 8023532:	2200      	movs	r2, #0
 8023534:	2300      	movs	r3, #0
 8023536:	0006      	movs	r6, r0
 8023538:	000f      	movs	r7, r1
 802353a:	f7dc ffb9 	bl	80004b0 <__aeabi_dcmpeq>
 802353e:	2800      	cmp	r0, #0
 8023540:	d100      	bne.n	8023544 <_dtoa_r+0x774>
 8023542:	e6a1      	b.n	8023288 <_dtoa_r+0x4b8>
 8023544:	e6d8      	b.n	80232f8 <_dtoa_r+0x528>
 8023546:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8023548:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802354a:	9c06      	ldr	r4, [sp, #24]
 802354c:	2f00      	cmp	r7, #0
 802354e:	d014      	beq.n	802357a <_dtoa_r+0x7aa>
 8023550:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023552:	2a01      	cmp	r2, #1
 8023554:	dd00      	ble.n	8023558 <_dtoa_r+0x788>
 8023556:	e0c8      	b.n	80236ea <_dtoa_r+0x91a>
 8023558:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802355a:	2a00      	cmp	r2, #0
 802355c:	d100      	bne.n	8023560 <_dtoa_r+0x790>
 802355e:	e0be      	b.n	80236de <_dtoa_r+0x90e>
 8023560:	4aba      	ldr	r2, [pc, #744]	@ (802384c <_dtoa_r+0xa7c>)
 8023562:	189b      	adds	r3, r3, r2
 8023564:	9a06      	ldr	r2, [sp, #24]
 8023566:	2101      	movs	r1, #1
 8023568:	18d2      	adds	r2, r2, r3
 802356a:	9206      	str	r2, [sp, #24]
 802356c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802356e:	9803      	ldr	r0, [sp, #12]
 8023570:	18d3      	adds	r3, r2, r3
 8023572:	930d      	str	r3, [sp, #52]	@ 0x34
 8023574:	f000 ffda 	bl	802452c <__i2b>
 8023578:	0007      	movs	r7, r0
 802357a:	2c00      	cmp	r4, #0
 802357c:	d00e      	beq.n	802359c <_dtoa_r+0x7cc>
 802357e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023580:	2b00      	cmp	r3, #0
 8023582:	dd0b      	ble.n	802359c <_dtoa_r+0x7cc>
 8023584:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023586:	0023      	movs	r3, r4
 8023588:	4294      	cmp	r4, r2
 802358a:	dd00      	ble.n	802358e <_dtoa_r+0x7be>
 802358c:	0013      	movs	r3, r2
 802358e:	9a06      	ldr	r2, [sp, #24]
 8023590:	1ae4      	subs	r4, r4, r3
 8023592:	1ad2      	subs	r2, r2, r3
 8023594:	9206      	str	r2, [sp, #24]
 8023596:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023598:	1ad3      	subs	r3, r2, r3
 802359a:	930d      	str	r3, [sp, #52]	@ 0x34
 802359c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802359e:	2b00      	cmp	r3, #0
 80235a0:	d01f      	beq.n	80235e2 <_dtoa_r+0x812>
 80235a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	d100      	bne.n	80235aa <_dtoa_r+0x7da>
 80235a8:	e0b5      	b.n	8023716 <_dtoa_r+0x946>
 80235aa:	2d00      	cmp	r5, #0
 80235ac:	d010      	beq.n	80235d0 <_dtoa_r+0x800>
 80235ae:	0039      	movs	r1, r7
 80235b0:	002a      	movs	r2, r5
 80235b2:	9803      	ldr	r0, [sp, #12]
 80235b4:	f001 f884 	bl	80246c0 <__pow5mult>
 80235b8:	9a05      	ldr	r2, [sp, #20]
 80235ba:	0001      	movs	r1, r0
 80235bc:	0007      	movs	r7, r0
 80235be:	9803      	ldr	r0, [sp, #12]
 80235c0:	f000 ffcc 	bl	802455c <__multiply>
 80235c4:	0006      	movs	r6, r0
 80235c6:	9905      	ldr	r1, [sp, #20]
 80235c8:	9803      	ldr	r0, [sp, #12]
 80235ca:	f000 feab 	bl	8024324 <_Bfree>
 80235ce:	9605      	str	r6, [sp, #20]
 80235d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80235d2:	1b5a      	subs	r2, r3, r5
 80235d4:	42ab      	cmp	r3, r5
 80235d6:	d004      	beq.n	80235e2 <_dtoa_r+0x812>
 80235d8:	9905      	ldr	r1, [sp, #20]
 80235da:	9803      	ldr	r0, [sp, #12]
 80235dc:	f001 f870 	bl	80246c0 <__pow5mult>
 80235e0:	9005      	str	r0, [sp, #20]
 80235e2:	2101      	movs	r1, #1
 80235e4:	9803      	ldr	r0, [sp, #12]
 80235e6:	f000 ffa1 	bl	802452c <__i2b>
 80235ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80235ec:	0006      	movs	r6, r0
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	d100      	bne.n	80235f4 <_dtoa_r+0x824>
 80235f2:	e1bc      	b.n	802396e <_dtoa_r+0xb9e>
 80235f4:	001a      	movs	r2, r3
 80235f6:	0001      	movs	r1, r0
 80235f8:	9803      	ldr	r0, [sp, #12]
 80235fa:	f001 f861 	bl	80246c0 <__pow5mult>
 80235fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023600:	0006      	movs	r6, r0
 8023602:	2500      	movs	r5, #0
 8023604:	2b01      	cmp	r3, #1
 8023606:	dc16      	bgt.n	8023636 <_dtoa_r+0x866>
 8023608:	2500      	movs	r5, #0
 802360a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802360c:	42ab      	cmp	r3, r5
 802360e:	d10e      	bne.n	802362e <_dtoa_r+0x85e>
 8023610:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023612:	031b      	lsls	r3, r3, #12
 8023614:	42ab      	cmp	r3, r5
 8023616:	d10a      	bne.n	802362e <_dtoa_r+0x85e>
 8023618:	4b8d      	ldr	r3, [pc, #564]	@ (8023850 <_dtoa_r+0xa80>)
 802361a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802361c:	4213      	tst	r3, r2
 802361e:	d006      	beq.n	802362e <_dtoa_r+0x85e>
 8023620:	9b06      	ldr	r3, [sp, #24]
 8023622:	3501      	adds	r5, #1
 8023624:	3301      	adds	r3, #1
 8023626:	9306      	str	r3, [sp, #24]
 8023628:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802362a:	3301      	adds	r3, #1
 802362c:	930d      	str	r3, [sp, #52]	@ 0x34
 802362e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023630:	2001      	movs	r0, #1
 8023632:	2b00      	cmp	r3, #0
 8023634:	d008      	beq.n	8023648 <_dtoa_r+0x878>
 8023636:	6933      	ldr	r3, [r6, #16]
 8023638:	3303      	adds	r3, #3
 802363a:	009b      	lsls	r3, r3, #2
 802363c:	18f3      	adds	r3, r6, r3
 802363e:	6858      	ldr	r0, [r3, #4]
 8023640:	f000 ff24 	bl	802448c <__hi0bits>
 8023644:	2320      	movs	r3, #32
 8023646:	1a18      	subs	r0, r3, r0
 8023648:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802364a:	1818      	adds	r0, r3, r0
 802364c:	0002      	movs	r2, r0
 802364e:	231f      	movs	r3, #31
 8023650:	401a      	ands	r2, r3
 8023652:	4218      	tst	r0, r3
 8023654:	d065      	beq.n	8023722 <_dtoa_r+0x952>
 8023656:	3301      	adds	r3, #1
 8023658:	1a9b      	subs	r3, r3, r2
 802365a:	2b04      	cmp	r3, #4
 802365c:	dd5d      	ble.n	802371a <_dtoa_r+0x94a>
 802365e:	231c      	movs	r3, #28
 8023660:	1a9b      	subs	r3, r3, r2
 8023662:	9a06      	ldr	r2, [sp, #24]
 8023664:	18e4      	adds	r4, r4, r3
 8023666:	18d2      	adds	r2, r2, r3
 8023668:	9206      	str	r2, [sp, #24]
 802366a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802366c:	18d3      	adds	r3, r2, r3
 802366e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023670:	9b06      	ldr	r3, [sp, #24]
 8023672:	2b00      	cmp	r3, #0
 8023674:	dd05      	ble.n	8023682 <_dtoa_r+0x8b2>
 8023676:	001a      	movs	r2, r3
 8023678:	9905      	ldr	r1, [sp, #20]
 802367a:	9803      	ldr	r0, [sp, #12]
 802367c:	f001 f87c 	bl	8024778 <__lshift>
 8023680:	9005      	str	r0, [sp, #20]
 8023682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023684:	2b00      	cmp	r3, #0
 8023686:	dd05      	ble.n	8023694 <_dtoa_r+0x8c4>
 8023688:	0031      	movs	r1, r6
 802368a:	001a      	movs	r2, r3
 802368c:	9803      	ldr	r0, [sp, #12]
 802368e:	f001 f873 	bl	8024778 <__lshift>
 8023692:	0006      	movs	r6, r0
 8023694:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023696:	2b00      	cmp	r3, #0
 8023698:	d045      	beq.n	8023726 <_dtoa_r+0x956>
 802369a:	0031      	movs	r1, r6
 802369c:	9805      	ldr	r0, [sp, #20]
 802369e:	f001 f8d7 	bl	8024850 <__mcmp>
 80236a2:	2800      	cmp	r0, #0
 80236a4:	da3f      	bge.n	8023726 <_dtoa_r+0x956>
 80236a6:	9b04      	ldr	r3, [sp, #16]
 80236a8:	220a      	movs	r2, #10
 80236aa:	3b01      	subs	r3, #1
 80236ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80236ae:	9905      	ldr	r1, [sp, #20]
 80236b0:	2300      	movs	r3, #0
 80236b2:	9803      	ldr	r0, [sp, #12]
 80236b4:	f000 fe5a 	bl	802436c <__multadd>
 80236b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80236ba:	9005      	str	r0, [sp, #20]
 80236bc:	2b00      	cmp	r3, #0
 80236be:	d100      	bne.n	80236c2 <_dtoa_r+0x8f2>
 80236c0:	e15c      	b.n	802397c <_dtoa_r+0xbac>
 80236c2:	2300      	movs	r3, #0
 80236c4:	0039      	movs	r1, r7
 80236c6:	220a      	movs	r2, #10
 80236c8:	9803      	ldr	r0, [sp, #12]
 80236ca:	f000 fe4f 	bl	802436c <__multadd>
 80236ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80236d0:	0007      	movs	r7, r0
 80236d2:	2b00      	cmp	r3, #0
 80236d4:	dc55      	bgt.n	8023782 <_dtoa_r+0x9b2>
 80236d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80236d8:	2b02      	cmp	r3, #2
 80236da:	dc2d      	bgt.n	8023738 <_dtoa_r+0x968>
 80236dc:	e051      	b.n	8023782 <_dtoa_r+0x9b2>
 80236de:	2336      	movs	r3, #54	@ 0x36
 80236e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80236e2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80236e4:	9c06      	ldr	r4, [sp, #24]
 80236e6:	1a9b      	subs	r3, r3, r2
 80236e8:	e73c      	b.n	8023564 <_dtoa_r+0x794>
 80236ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236ec:	1e5d      	subs	r5, r3, #1
 80236ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80236f0:	42ab      	cmp	r3, r5
 80236f2:	db08      	blt.n	8023706 <_dtoa_r+0x936>
 80236f4:	1b5d      	subs	r5, r3, r5
 80236f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236f8:	9c06      	ldr	r4, [sp, #24]
 80236fa:	2b00      	cmp	r3, #0
 80236fc:	db00      	blt.n	8023700 <_dtoa_r+0x930>
 80236fe:	e731      	b.n	8023564 <_dtoa_r+0x794>
 8023700:	1ae4      	subs	r4, r4, r3
 8023702:	2300      	movs	r3, #0
 8023704:	e72e      	b.n	8023564 <_dtoa_r+0x794>
 8023706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023708:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802370a:	1aeb      	subs	r3, r5, r3
 802370c:	18d3      	adds	r3, r2, r3
 802370e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8023710:	9314      	str	r3, [sp, #80]	@ 0x50
 8023712:	2500      	movs	r5, #0
 8023714:	e7ef      	b.n	80236f6 <_dtoa_r+0x926>
 8023716:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023718:	e75e      	b.n	80235d8 <_dtoa_r+0x808>
 802371a:	2b04      	cmp	r3, #4
 802371c:	d0a8      	beq.n	8023670 <_dtoa_r+0x8a0>
 802371e:	331c      	adds	r3, #28
 8023720:	e79f      	b.n	8023662 <_dtoa_r+0x892>
 8023722:	0013      	movs	r3, r2
 8023724:	e7fb      	b.n	802371e <_dtoa_r+0x94e>
 8023726:	9b04      	ldr	r3, [sp, #16]
 8023728:	930c      	str	r3, [sp, #48]	@ 0x30
 802372a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802372c:	930e      	str	r3, [sp, #56]	@ 0x38
 802372e:	2b00      	cmp	r3, #0
 8023730:	dc23      	bgt.n	802377a <_dtoa_r+0x9aa>
 8023732:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023734:	2b02      	cmp	r3, #2
 8023736:	dd20      	ble.n	802377a <_dtoa_r+0x9aa>
 8023738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802373a:	2b00      	cmp	r3, #0
 802373c:	d000      	beq.n	8023740 <_dtoa_r+0x970>
 802373e:	e6b5      	b.n	80234ac <_dtoa_r+0x6dc>
 8023740:	0031      	movs	r1, r6
 8023742:	2205      	movs	r2, #5
 8023744:	9803      	ldr	r0, [sp, #12]
 8023746:	f000 fe11 	bl	802436c <__multadd>
 802374a:	0006      	movs	r6, r0
 802374c:	0001      	movs	r1, r0
 802374e:	9805      	ldr	r0, [sp, #20]
 8023750:	f001 f87e 	bl	8024850 <__mcmp>
 8023754:	2800      	cmp	r0, #0
 8023756:	dc00      	bgt.n	802375a <_dtoa_r+0x98a>
 8023758:	e6a8      	b.n	80234ac <_dtoa_r+0x6dc>
 802375a:	9b08      	ldr	r3, [sp, #32]
 802375c:	9a08      	ldr	r2, [sp, #32]
 802375e:	1c5c      	adds	r4, r3, #1
 8023760:	2331      	movs	r3, #49	@ 0x31
 8023762:	7013      	strb	r3, [r2, #0]
 8023764:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023766:	3301      	adds	r3, #1
 8023768:	930c      	str	r3, [sp, #48]	@ 0x30
 802376a:	e6a3      	b.n	80234b4 <_dtoa_r+0x6e4>
 802376c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802376e:	0037      	movs	r7, r6
 8023770:	e7f3      	b.n	802375a <_dtoa_r+0x98a>
 8023772:	9b04      	ldr	r3, [sp, #16]
 8023774:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8023776:	930c      	str	r3, [sp, #48]	@ 0x30
 8023778:	e7f9      	b.n	802376e <_dtoa_r+0x99e>
 802377a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802377c:	2b00      	cmp	r3, #0
 802377e:	d100      	bne.n	8023782 <_dtoa_r+0x9b2>
 8023780:	e100      	b.n	8023984 <_dtoa_r+0xbb4>
 8023782:	2c00      	cmp	r4, #0
 8023784:	dd05      	ble.n	8023792 <_dtoa_r+0x9c2>
 8023786:	0039      	movs	r1, r7
 8023788:	0022      	movs	r2, r4
 802378a:	9803      	ldr	r0, [sp, #12]
 802378c:	f000 fff4 	bl	8024778 <__lshift>
 8023790:	0007      	movs	r7, r0
 8023792:	0038      	movs	r0, r7
 8023794:	2d00      	cmp	r5, #0
 8023796:	d018      	beq.n	80237ca <_dtoa_r+0x9fa>
 8023798:	6879      	ldr	r1, [r7, #4]
 802379a:	9803      	ldr	r0, [sp, #12]
 802379c:	f000 fd7e 	bl	802429c <_Balloc>
 80237a0:	1e04      	subs	r4, r0, #0
 80237a2:	d105      	bne.n	80237b0 <_dtoa_r+0x9e0>
 80237a4:	0022      	movs	r2, r4
 80237a6:	4b2b      	ldr	r3, [pc, #172]	@ (8023854 <_dtoa_r+0xa84>)
 80237a8:	482b      	ldr	r0, [pc, #172]	@ (8023858 <_dtoa_r+0xa88>)
 80237aa:	492c      	ldr	r1, [pc, #176]	@ (802385c <_dtoa_r+0xa8c>)
 80237ac:	f7ff fb25 	bl	8022dfa <_dtoa_r+0x2a>
 80237b0:	0039      	movs	r1, r7
 80237b2:	693a      	ldr	r2, [r7, #16]
 80237b4:	310c      	adds	r1, #12
 80237b6:	3202      	adds	r2, #2
 80237b8:	0092      	lsls	r2, r2, #2
 80237ba:	300c      	adds	r0, #12
 80237bc:	f7ff fa6a 	bl	8022c94 <memcpy>
 80237c0:	2201      	movs	r2, #1
 80237c2:	0021      	movs	r1, r4
 80237c4:	9803      	ldr	r0, [sp, #12]
 80237c6:	f000 ffd7 	bl	8024778 <__lshift>
 80237ca:	9b08      	ldr	r3, [sp, #32]
 80237cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80237ce:	9306      	str	r3, [sp, #24]
 80237d0:	3b01      	subs	r3, #1
 80237d2:	189b      	adds	r3, r3, r2
 80237d4:	2201      	movs	r2, #1
 80237d6:	9704      	str	r7, [sp, #16]
 80237d8:	0007      	movs	r7, r0
 80237da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80237dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80237de:	4013      	ands	r3, r2
 80237e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80237e2:	0031      	movs	r1, r6
 80237e4:	9805      	ldr	r0, [sp, #20]
 80237e6:	f7ff fa65 	bl	8022cb4 <quorem>
 80237ea:	9904      	ldr	r1, [sp, #16]
 80237ec:	0005      	movs	r5, r0
 80237ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80237f0:	9805      	ldr	r0, [sp, #20]
 80237f2:	f001 f82d 	bl	8024850 <__mcmp>
 80237f6:	003a      	movs	r2, r7
 80237f8:	900d      	str	r0, [sp, #52]	@ 0x34
 80237fa:	0031      	movs	r1, r6
 80237fc:	9803      	ldr	r0, [sp, #12]
 80237fe:	f001 f843 	bl	8024888 <__mdiff>
 8023802:	2201      	movs	r2, #1
 8023804:	68c3      	ldr	r3, [r0, #12]
 8023806:	0004      	movs	r4, r0
 8023808:	3530      	adds	r5, #48	@ 0x30
 802380a:	9209      	str	r2, [sp, #36]	@ 0x24
 802380c:	2b00      	cmp	r3, #0
 802380e:	d104      	bne.n	802381a <_dtoa_r+0xa4a>
 8023810:	0001      	movs	r1, r0
 8023812:	9805      	ldr	r0, [sp, #20]
 8023814:	f001 f81c 	bl	8024850 <__mcmp>
 8023818:	9009      	str	r0, [sp, #36]	@ 0x24
 802381a:	0021      	movs	r1, r4
 802381c:	9803      	ldr	r0, [sp, #12]
 802381e:	f000 fd81 	bl	8024324 <_Bfree>
 8023822:	9b06      	ldr	r3, [sp, #24]
 8023824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023826:	1c5c      	adds	r4, r3, #1
 8023828:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802382a:	4313      	orrs	r3, r2
 802382c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802382e:	4313      	orrs	r3, r2
 8023830:	d116      	bne.n	8023860 <_dtoa_r+0xa90>
 8023832:	2d39      	cmp	r5, #57	@ 0x39
 8023834:	d02f      	beq.n	8023896 <_dtoa_r+0xac6>
 8023836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023838:	2b00      	cmp	r3, #0
 802383a:	dd01      	ble.n	8023840 <_dtoa_r+0xa70>
 802383c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802383e:	3531      	adds	r5, #49	@ 0x31
 8023840:	9b06      	ldr	r3, [sp, #24]
 8023842:	701d      	strb	r5, [r3, #0]
 8023844:	e638      	b.n	80234b8 <_dtoa_r+0x6e8>
 8023846:	46c0      	nop			@ (mov r8, r8)
 8023848:	40240000 	.word	0x40240000
 802384c:	00000433 	.word	0x00000433
 8023850:	7ff00000 	.word	0x7ff00000
 8023854:	080296e1 	.word	0x080296e1
 8023858:	08029689 	.word	0x08029689
 802385c:	000002ef 	.word	0x000002ef
 8023860:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023862:	2b00      	cmp	r3, #0
 8023864:	db04      	blt.n	8023870 <_dtoa_r+0xaa0>
 8023866:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023868:	4313      	orrs	r3, r2
 802386a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802386c:	4313      	orrs	r3, r2
 802386e:	d11e      	bne.n	80238ae <_dtoa_r+0xade>
 8023870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023872:	2b00      	cmp	r3, #0
 8023874:	dde4      	ble.n	8023840 <_dtoa_r+0xa70>
 8023876:	9905      	ldr	r1, [sp, #20]
 8023878:	2201      	movs	r2, #1
 802387a:	9803      	ldr	r0, [sp, #12]
 802387c:	f000 ff7c 	bl	8024778 <__lshift>
 8023880:	0031      	movs	r1, r6
 8023882:	9005      	str	r0, [sp, #20]
 8023884:	f000 ffe4 	bl	8024850 <__mcmp>
 8023888:	2800      	cmp	r0, #0
 802388a:	dc02      	bgt.n	8023892 <_dtoa_r+0xac2>
 802388c:	d1d8      	bne.n	8023840 <_dtoa_r+0xa70>
 802388e:	07eb      	lsls	r3, r5, #31
 8023890:	d5d6      	bpl.n	8023840 <_dtoa_r+0xa70>
 8023892:	2d39      	cmp	r5, #57	@ 0x39
 8023894:	d1d2      	bne.n	802383c <_dtoa_r+0xa6c>
 8023896:	2339      	movs	r3, #57	@ 0x39
 8023898:	9a06      	ldr	r2, [sp, #24]
 802389a:	7013      	strb	r3, [r2, #0]
 802389c:	0023      	movs	r3, r4
 802389e:	001c      	movs	r4, r3
 80238a0:	3b01      	subs	r3, #1
 80238a2:	781a      	ldrb	r2, [r3, #0]
 80238a4:	2a39      	cmp	r2, #57	@ 0x39
 80238a6:	d04f      	beq.n	8023948 <_dtoa_r+0xb78>
 80238a8:	3201      	adds	r2, #1
 80238aa:	701a      	strb	r2, [r3, #0]
 80238ac:	e604      	b.n	80234b8 <_dtoa_r+0x6e8>
 80238ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238b0:	2b00      	cmp	r3, #0
 80238b2:	dd03      	ble.n	80238bc <_dtoa_r+0xaec>
 80238b4:	2d39      	cmp	r5, #57	@ 0x39
 80238b6:	d0ee      	beq.n	8023896 <_dtoa_r+0xac6>
 80238b8:	3501      	adds	r5, #1
 80238ba:	e7c1      	b.n	8023840 <_dtoa_r+0xa70>
 80238bc:	9b06      	ldr	r3, [sp, #24]
 80238be:	9a06      	ldr	r2, [sp, #24]
 80238c0:	701d      	strb	r5, [r3, #0]
 80238c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80238c4:	4293      	cmp	r3, r2
 80238c6:	d02a      	beq.n	802391e <_dtoa_r+0xb4e>
 80238c8:	2300      	movs	r3, #0
 80238ca:	220a      	movs	r2, #10
 80238cc:	9905      	ldr	r1, [sp, #20]
 80238ce:	9803      	ldr	r0, [sp, #12]
 80238d0:	f000 fd4c 	bl	802436c <__multadd>
 80238d4:	9b04      	ldr	r3, [sp, #16]
 80238d6:	9005      	str	r0, [sp, #20]
 80238d8:	42bb      	cmp	r3, r7
 80238da:	d109      	bne.n	80238f0 <_dtoa_r+0xb20>
 80238dc:	2300      	movs	r3, #0
 80238de:	220a      	movs	r2, #10
 80238e0:	9904      	ldr	r1, [sp, #16]
 80238e2:	9803      	ldr	r0, [sp, #12]
 80238e4:	f000 fd42 	bl	802436c <__multadd>
 80238e8:	9004      	str	r0, [sp, #16]
 80238ea:	0007      	movs	r7, r0
 80238ec:	9406      	str	r4, [sp, #24]
 80238ee:	e778      	b.n	80237e2 <_dtoa_r+0xa12>
 80238f0:	9904      	ldr	r1, [sp, #16]
 80238f2:	2300      	movs	r3, #0
 80238f4:	220a      	movs	r2, #10
 80238f6:	9803      	ldr	r0, [sp, #12]
 80238f8:	f000 fd38 	bl	802436c <__multadd>
 80238fc:	2300      	movs	r3, #0
 80238fe:	9004      	str	r0, [sp, #16]
 8023900:	220a      	movs	r2, #10
 8023902:	0039      	movs	r1, r7
 8023904:	9803      	ldr	r0, [sp, #12]
 8023906:	f000 fd31 	bl	802436c <__multadd>
 802390a:	e7ee      	b.n	80238ea <_dtoa_r+0xb1a>
 802390c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802390e:	2401      	movs	r4, #1
 8023910:	2b00      	cmp	r3, #0
 8023912:	dd00      	ble.n	8023916 <_dtoa_r+0xb46>
 8023914:	001c      	movs	r4, r3
 8023916:	9b08      	ldr	r3, [sp, #32]
 8023918:	191c      	adds	r4, r3, r4
 802391a:	2300      	movs	r3, #0
 802391c:	9304      	str	r3, [sp, #16]
 802391e:	9905      	ldr	r1, [sp, #20]
 8023920:	2201      	movs	r2, #1
 8023922:	9803      	ldr	r0, [sp, #12]
 8023924:	f000 ff28 	bl	8024778 <__lshift>
 8023928:	0031      	movs	r1, r6
 802392a:	9005      	str	r0, [sp, #20]
 802392c:	f000 ff90 	bl	8024850 <__mcmp>
 8023930:	2800      	cmp	r0, #0
 8023932:	dcb3      	bgt.n	802389c <_dtoa_r+0xacc>
 8023934:	d101      	bne.n	802393a <_dtoa_r+0xb6a>
 8023936:	07ed      	lsls	r5, r5, #31
 8023938:	d4b0      	bmi.n	802389c <_dtoa_r+0xacc>
 802393a:	0023      	movs	r3, r4
 802393c:	001c      	movs	r4, r3
 802393e:	3b01      	subs	r3, #1
 8023940:	781a      	ldrb	r2, [r3, #0]
 8023942:	2a30      	cmp	r2, #48	@ 0x30
 8023944:	d0fa      	beq.n	802393c <_dtoa_r+0xb6c>
 8023946:	e5b7      	b.n	80234b8 <_dtoa_r+0x6e8>
 8023948:	9a08      	ldr	r2, [sp, #32]
 802394a:	429a      	cmp	r2, r3
 802394c:	d1a7      	bne.n	802389e <_dtoa_r+0xace>
 802394e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023950:	3301      	adds	r3, #1
 8023952:	930c      	str	r3, [sp, #48]	@ 0x30
 8023954:	2331      	movs	r3, #49	@ 0x31
 8023956:	7013      	strb	r3, [r2, #0]
 8023958:	e5ae      	b.n	80234b8 <_dtoa_r+0x6e8>
 802395a:	4b15      	ldr	r3, [pc, #84]	@ (80239b0 <_dtoa_r+0xbe0>)
 802395c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802395e:	9308      	str	r3, [sp, #32]
 8023960:	4b14      	ldr	r3, [pc, #80]	@ (80239b4 <_dtoa_r+0xbe4>)
 8023962:	2a00      	cmp	r2, #0
 8023964:	d001      	beq.n	802396a <_dtoa_r+0xb9a>
 8023966:	f7ff fa7b 	bl	8022e60 <_dtoa_r+0x90>
 802396a:	f7ff fa7b 	bl	8022e64 <_dtoa_r+0x94>
 802396e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023970:	2b01      	cmp	r3, #1
 8023972:	dc00      	bgt.n	8023976 <_dtoa_r+0xba6>
 8023974:	e648      	b.n	8023608 <_dtoa_r+0x838>
 8023976:	2001      	movs	r0, #1
 8023978:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802397a:	e665      	b.n	8023648 <_dtoa_r+0x878>
 802397c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802397e:	2b00      	cmp	r3, #0
 8023980:	dc00      	bgt.n	8023984 <_dtoa_r+0xbb4>
 8023982:	e6d6      	b.n	8023732 <_dtoa_r+0x962>
 8023984:	2400      	movs	r4, #0
 8023986:	0031      	movs	r1, r6
 8023988:	9805      	ldr	r0, [sp, #20]
 802398a:	f7ff f993 	bl	8022cb4 <quorem>
 802398e:	9b08      	ldr	r3, [sp, #32]
 8023990:	3030      	adds	r0, #48	@ 0x30
 8023992:	5518      	strb	r0, [r3, r4]
 8023994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023996:	3401      	adds	r4, #1
 8023998:	0005      	movs	r5, r0
 802399a:	429c      	cmp	r4, r3
 802399c:	dab6      	bge.n	802390c <_dtoa_r+0xb3c>
 802399e:	2300      	movs	r3, #0
 80239a0:	220a      	movs	r2, #10
 80239a2:	9905      	ldr	r1, [sp, #20]
 80239a4:	9803      	ldr	r0, [sp, #12]
 80239a6:	f000 fce1 	bl	802436c <__multadd>
 80239aa:	9005      	str	r0, [sp, #20]
 80239ac:	e7eb      	b.n	8023986 <_dtoa_r+0xbb6>
 80239ae:	46c0      	nop			@ (mov r8, r8)
 80239b0:	08029665 	.word	0x08029665
 80239b4:	0802966d 	.word	0x0802966d

080239b8 <_free_r>:
 80239b8:	b570      	push	{r4, r5, r6, lr}
 80239ba:	0005      	movs	r5, r0
 80239bc:	1e0c      	subs	r4, r1, #0
 80239be:	d010      	beq.n	80239e2 <_free_r+0x2a>
 80239c0:	3c04      	subs	r4, #4
 80239c2:	6823      	ldr	r3, [r4, #0]
 80239c4:	2b00      	cmp	r3, #0
 80239c6:	da00      	bge.n	80239ca <_free_r+0x12>
 80239c8:	18e4      	adds	r4, r4, r3
 80239ca:	0028      	movs	r0, r5
 80239cc:	f000 fc56 	bl	802427c <__malloc_lock>
 80239d0:	4a1d      	ldr	r2, [pc, #116]	@ (8023a48 <_free_r+0x90>)
 80239d2:	6813      	ldr	r3, [r2, #0]
 80239d4:	2b00      	cmp	r3, #0
 80239d6:	d105      	bne.n	80239e4 <_free_r+0x2c>
 80239d8:	6063      	str	r3, [r4, #4]
 80239da:	6014      	str	r4, [r2, #0]
 80239dc:	0028      	movs	r0, r5
 80239de:	f000 fc55 	bl	802428c <__malloc_unlock>
 80239e2:	bd70      	pop	{r4, r5, r6, pc}
 80239e4:	42a3      	cmp	r3, r4
 80239e6:	d908      	bls.n	80239fa <_free_r+0x42>
 80239e8:	6820      	ldr	r0, [r4, #0]
 80239ea:	1821      	adds	r1, r4, r0
 80239ec:	428b      	cmp	r3, r1
 80239ee:	d1f3      	bne.n	80239d8 <_free_r+0x20>
 80239f0:	6819      	ldr	r1, [r3, #0]
 80239f2:	685b      	ldr	r3, [r3, #4]
 80239f4:	1809      	adds	r1, r1, r0
 80239f6:	6021      	str	r1, [r4, #0]
 80239f8:	e7ee      	b.n	80239d8 <_free_r+0x20>
 80239fa:	001a      	movs	r2, r3
 80239fc:	685b      	ldr	r3, [r3, #4]
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	d001      	beq.n	8023a06 <_free_r+0x4e>
 8023a02:	42a3      	cmp	r3, r4
 8023a04:	d9f9      	bls.n	80239fa <_free_r+0x42>
 8023a06:	6811      	ldr	r1, [r2, #0]
 8023a08:	1850      	adds	r0, r2, r1
 8023a0a:	42a0      	cmp	r0, r4
 8023a0c:	d10b      	bne.n	8023a26 <_free_r+0x6e>
 8023a0e:	6820      	ldr	r0, [r4, #0]
 8023a10:	1809      	adds	r1, r1, r0
 8023a12:	1850      	adds	r0, r2, r1
 8023a14:	6011      	str	r1, [r2, #0]
 8023a16:	4283      	cmp	r3, r0
 8023a18:	d1e0      	bne.n	80239dc <_free_r+0x24>
 8023a1a:	6818      	ldr	r0, [r3, #0]
 8023a1c:	685b      	ldr	r3, [r3, #4]
 8023a1e:	1841      	adds	r1, r0, r1
 8023a20:	6011      	str	r1, [r2, #0]
 8023a22:	6053      	str	r3, [r2, #4]
 8023a24:	e7da      	b.n	80239dc <_free_r+0x24>
 8023a26:	42a0      	cmp	r0, r4
 8023a28:	d902      	bls.n	8023a30 <_free_r+0x78>
 8023a2a:	230c      	movs	r3, #12
 8023a2c:	602b      	str	r3, [r5, #0]
 8023a2e:	e7d5      	b.n	80239dc <_free_r+0x24>
 8023a30:	6820      	ldr	r0, [r4, #0]
 8023a32:	1821      	adds	r1, r4, r0
 8023a34:	428b      	cmp	r3, r1
 8023a36:	d103      	bne.n	8023a40 <_free_r+0x88>
 8023a38:	6819      	ldr	r1, [r3, #0]
 8023a3a:	685b      	ldr	r3, [r3, #4]
 8023a3c:	1809      	adds	r1, r1, r0
 8023a3e:	6021      	str	r1, [r4, #0]
 8023a40:	6063      	str	r3, [r4, #4]
 8023a42:	6054      	str	r4, [r2, #4]
 8023a44:	e7ca      	b.n	80239dc <_free_r+0x24>
 8023a46:	46c0      	nop			@ (mov r8, r8)
 8023a48:	20003594 	.word	0x20003594

08023a4c <rshift>:
 8023a4c:	0002      	movs	r2, r0
 8023a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a50:	6904      	ldr	r4, [r0, #16]
 8023a52:	b085      	sub	sp, #20
 8023a54:	3214      	adds	r2, #20
 8023a56:	114b      	asrs	r3, r1, #5
 8023a58:	0016      	movs	r6, r2
 8023a5a:	9302      	str	r3, [sp, #8]
 8023a5c:	429c      	cmp	r4, r3
 8023a5e:	dd31      	ble.n	8023ac4 <rshift+0x78>
 8023a60:	261f      	movs	r6, #31
 8023a62:	000f      	movs	r7, r1
 8023a64:	009b      	lsls	r3, r3, #2
 8023a66:	00a5      	lsls	r5, r4, #2
 8023a68:	18d3      	adds	r3, r2, r3
 8023a6a:	4037      	ands	r7, r6
 8023a6c:	1955      	adds	r5, r2, r5
 8023a6e:	9300      	str	r3, [sp, #0]
 8023a70:	9701      	str	r7, [sp, #4]
 8023a72:	4231      	tst	r1, r6
 8023a74:	d10d      	bne.n	8023a92 <rshift+0x46>
 8023a76:	0016      	movs	r6, r2
 8023a78:	0019      	movs	r1, r3
 8023a7a:	428d      	cmp	r5, r1
 8023a7c:	d836      	bhi.n	8023aec <rshift+0xa0>
 8023a7e:	9b00      	ldr	r3, [sp, #0]
 8023a80:	2600      	movs	r6, #0
 8023a82:	3b03      	subs	r3, #3
 8023a84:	429d      	cmp	r5, r3
 8023a86:	d302      	bcc.n	8023a8e <rshift+0x42>
 8023a88:	9b02      	ldr	r3, [sp, #8]
 8023a8a:	1ae4      	subs	r4, r4, r3
 8023a8c:	00a6      	lsls	r6, r4, #2
 8023a8e:	1996      	adds	r6, r2, r6
 8023a90:	e018      	b.n	8023ac4 <rshift+0x78>
 8023a92:	2120      	movs	r1, #32
 8023a94:	9e01      	ldr	r6, [sp, #4]
 8023a96:	9f01      	ldr	r7, [sp, #4]
 8023a98:	1b89      	subs	r1, r1, r6
 8023a9a:	9e00      	ldr	r6, [sp, #0]
 8023a9c:	9103      	str	r1, [sp, #12]
 8023a9e:	ce02      	ldmia	r6!, {r1}
 8023aa0:	4694      	mov	ip, r2
 8023aa2:	40f9      	lsrs	r1, r7
 8023aa4:	42b5      	cmp	r5, r6
 8023aa6:	d816      	bhi.n	8023ad6 <rshift+0x8a>
 8023aa8:	9b00      	ldr	r3, [sp, #0]
 8023aaa:	2600      	movs	r6, #0
 8023aac:	3301      	adds	r3, #1
 8023aae:	429d      	cmp	r5, r3
 8023ab0:	d303      	bcc.n	8023aba <rshift+0x6e>
 8023ab2:	9b02      	ldr	r3, [sp, #8]
 8023ab4:	1ae4      	subs	r4, r4, r3
 8023ab6:	00a6      	lsls	r6, r4, #2
 8023ab8:	3e04      	subs	r6, #4
 8023aba:	1996      	adds	r6, r2, r6
 8023abc:	6031      	str	r1, [r6, #0]
 8023abe:	2900      	cmp	r1, #0
 8023ac0:	d000      	beq.n	8023ac4 <rshift+0x78>
 8023ac2:	3604      	adds	r6, #4
 8023ac4:	1ab1      	subs	r1, r6, r2
 8023ac6:	1089      	asrs	r1, r1, #2
 8023ac8:	6101      	str	r1, [r0, #16]
 8023aca:	4296      	cmp	r6, r2
 8023acc:	d101      	bne.n	8023ad2 <rshift+0x86>
 8023ace:	2300      	movs	r3, #0
 8023ad0:	6143      	str	r3, [r0, #20]
 8023ad2:	b005      	add	sp, #20
 8023ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ad6:	6837      	ldr	r7, [r6, #0]
 8023ad8:	9b03      	ldr	r3, [sp, #12]
 8023ada:	409f      	lsls	r7, r3
 8023adc:	430f      	orrs	r7, r1
 8023ade:	4661      	mov	r1, ip
 8023ae0:	c180      	stmia	r1!, {r7}
 8023ae2:	468c      	mov	ip, r1
 8023ae4:	9b01      	ldr	r3, [sp, #4]
 8023ae6:	ce02      	ldmia	r6!, {r1}
 8023ae8:	40d9      	lsrs	r1, r3
 8023aea:	e7db      	b.n	8023aa4 <rshift+0x58>
 8023aec:	c980      	ldmia	r1!, {r7}
 8023aee:	c680      	stmia	r6!, {r7}
 8023af0:	e7c3      	b.n	8023a7a <rshift+0x2e>

08023af2 <__hexdig_fun>:
 8023af2:	0002      	movs	r2, r0
 8023af4:	3a30      	subs	r2, #48	@ 0x30
 8023af6:	0003      	movs	r3, r0
 8023af8:	2a09      	cmp	r2, #9
 8023afa:	d802      	bhi.n	8023b02 <__hexdig_fun+0x10>
 8023afc:	3b20      	subs	r3, #32
 8023afe:	b2d8      	uxtb	r0, r3
 8023b00:	4770      	bx	lr
 8023b02:	0002      	movs	r2, r0
 8023b04:	3a61      	subs	r2, #97	@ 0x61
 8023b06:	2a05      	cmp	r2, #5
 8023b08:	d801      	bhi.n	8023b0e <__hexdig_fun+0x1c>
 8023b0a:	3b47      	subs	r3, #71	@ 0x47
 8023b0c:	e7f7      	b.n	8023afe <__hexdig_fun+0xc>
 8023b0e:	001a      	movs	r2, r3
 8023b10:	3a41      	subs	r2, #65	@ 0x41
 8023b12:	2000      	movs	r0, #0
 8023b14:	2a05      	cmp	r2, #5
 8023b16:	d8f3      	bhi.n	8023b00 <__hexdig_fun+0xe>
 8023b18:	3b27      	subs	r3, #39	@ 0x27
 8023b1a:	e7f0      	b.n	8023afe <__hexdig_fun+0xc>

08023b1c <__gethex>:
 8023b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b1e:	b089      	sub	sp, #36	@ 0x24
 8023b20:	9307      	str	r3, [sp, #28]
 8023b22:	680b      	ldr	r3, [r1, #0]
 8023b24:	9201      	str	r2, [sp, #4]
 8023b26:	9003      	str	r0, [sp, #12]
 8023b28:	9106      	str	r1, [sp, #24]
 8023b2a:	1c9a      	adds	r2, r3, #2
 8023b2c:	0011      	movs	r1, r2
 8023b2e:	3201      	adds	r2, #1
 8023b30:	1e50      	subs	r0, r2, #1
 8023b32:	7800      	ldrb	r0, [r0, #0]
 8023b34:	2830      	cmp	r0, #48	@ 0x30
 8023b36:	d0f9      	beq.n	8023b2c <__gethex+0x10>
 8023b38:	1acb      	subs	r3, r1, r3
 8023b3a:	3b02      	subs	r3, #2
 8023b3c:	9305      	str	r3, [sp, #20]
 8023b3e:	9100      	str	r1, [sp, #0]
 8023b40:	f7ff ffd7 	bl	8023af2 <__hexdig_fun>
 8023b44:	2300      	movs	r3, #0
 8023b46:	001d      	movs	r5, r3
 8023b48:	9302      	str	r3, [sp, #8]
 8023b4a:	4298      	cmp	r0, r3
 8023b4c:	d11e      	bne.n	8023b8c <__gethex+0x70>
 8023b4e:	2201      	movs	r2, #1
 8023b50:	49a6      	ldr	r1, [pc, #664]	@ (8023dec <__gethex+0x2d0>)
 8023b52:	9800      	ldr	r0, [sp, #0]
 8023b54:	f7fe ffd8 	bl	8022b08 <strncmp>
 8023b58:	0007      	movs	r7, r0
 8023b5a:	42a8      	cmp	r0, r5
 8023b5c:	d000      	beq.n	8023b60 <__gethex+0x44>
 8023b5e:	e06a      	b.n	8023c36 <__gethex+0x11a>
 8023b60:	9b00      	ldr	r3, [sp, #0]
 8023b62:	7858      	ldrb	r0, [r3, #1]
 8023b64:	1c5c      	adds	r4, r3, #1
 8023b66:	f7ff ffc4 	bl	8023af2 <__hexdig_fun>
 8023b6a:	2301      	movs	r3, #1
 8023b6c:	9302      	str	r3, [sp, #8]
 8023b6e:	42a8      	cmp	r0, r5
 8023b70:	d02f      	beq.n	8023bd2 <__gethex+0xb6>
 8023b72:	9400      	str	r4, [sp, #0]
 8023b74:	9b00      	ldr	r3, [sp, #0]
 8023b76:	7818      	ldrb	r0, [r3, #0]
 8023b78:	2830      	cmp	r0, #48	@ 0x30
 8023b7a:	d009      	beq.n	8023b90 <__gethex+0x74>
 8023b7c:	f7ff ffb9 	bl	8023af2 <__hexdig_fun>
 8023b80:	4242      	negs	r2, r0
 8023b82:	4142      	adcs	r2, r0
 8023b84:	2301      	movs	r3, #1
 8023b86:	0025      	movs	r5, r4
 8023b88:	9202      	str	r2, [sp, #8]
 8023b8a:	9305      	str	r3, [sp, #20]
 8023b8c:	9c00      	ldr	r4, [sp, #0]
 8023b8e:	e004      	b.n	8023b9a <__gethex+0x7e>
 8023b90:	9b00      	ldr	r3, [sp, #0]
 8023b92:	3301      	adds	r3, #1
 8023b94:	9300      	str	r3, [sp, #0]
 8023b96:	e7ed      	b.n	8023b74 <__gethex+0x58>
 8023b98:	3401      	adds	r4, #1
 8023b9a:	7820      	ldrb	r0, [r4, #0]
 8023b9c:	f7ff ffa9 	bl	8023af2 <__hexdig_fun>
 8023ba0:	1e07      	subs	r7, r0, #0
 8023ba2:	d1f9      	bne.n	8023b98 <__gethex+0x7c>
 8023ba4:	2201      	movs	r2, #1
 8023ba6:	0020      	movs	r0, r4
 8023ba8:	4990      	ldr	r1, [pc, #576]	@ (8023dec <__gethex+0x2d0>)
 8023baa:	f7fe ffad 	bl	8022b08 <strncmp>
 8023bae:	2800      	cmp	r0, #0
 8023bb0:	d10d      	bne.n	8023bce <__gethex+0xb2>
 8023bb2:	2d00      	cmp	r5, #0
 8023bb4:	d106      	bne.n	8023bc4 <__gethex+0xa8>
 8023bb6:	3401      	adds	r4, #1
 8023bb8:	0025      	movs	r5, r4
 8023bba:	7820      	ldrb	r0, [r4, #0]
 8023bbc:	f7ff ff99 	bl	8023af2 <__hexdig_fun>
 8023bc0:	2800      	cmp	r0, #0
 8023bc2:	d102      	bne.n	8023bca <__gethex+0xae>
 8023bc4:	1b2d      	subs	r5, r5, r4
 8023bc6:	00af      	lsls	r7, r5, #2
 8023bc8:	e003      	b.n	8023bd2 <__gethex+0xb6>
 8023bca:	3401      	adds	r4, #1
 8023bcc:	e7f5      	b.n	8023bba <__gethex+0x9e>
 8023bce:	2d00      	cmp	r5, #0
 8023bd0:	d1f8      	bne.n	8023bc4 <__gethex+0xa8>
 8023bd2:	2220      	movs	r2, #32
 8023bd4:	7823      	ldrb	r3, [r4, #0]
 8023bd6:	0026      	movs	r6, r4
 8023bd8:	4393      	bics	r3, r2
 8023bda:	2b50      	cmp	r3, #80	@ 0x50
 8023bdc:	d11d      	bne.n	8023c1a <__gethex+0xfe>
 8023bde:	7863      	ldrb	r3, [r4, #1]
 8023be0:	2b2b      	cmp	r3, #43	@ 0x2b
 8023be2:	d02d      	beq.n	8023c40 <__gethex+0x124>
 8023be4:	2b2d      	cmp	r3, #45	@ 0x2d
 8023be6:	d02f      	beq.n	8023c48 <__gethex+0x12c>
 8023be8:	2300      	movs	r3, #0
 8023bea:	1c66      	adds	r6, r4, #1
 8023bec:	9304      	str	r3, [sp, #16]
 8023bee:	7830      	ldrb	r0, [r6, #0]
 8023bf0:	f7ff ff7f 	bl	8023af2 <__hexdig_fun>
 8023bf4:	1e43      	subs	r3, r0, #1
 8023bf6:	b2db      	uxtb	r3, r3
 8023bf8:	0005      	movs	r5, r0
 8023bfa:	2b18      	cmp	r3, #24
 8023bfc:	d82a      	bhi.n	8023c54 <__gethex+0x138>
 8023bfe:	7870      	ldrb	r0, [r6, #1]
 8023c00:	f7ff ff77 	bl	8023af2 <__hexdig_fun>
 8023c04:	1e43      	subs	r3, r0, #1
 8023c06:	b2db      	uxtb	r3, r3
 8023c08:	3601      	adds	r6, #1
 8023c0a:	3d10      	subs	r5, #16
 8023c0c:	2b18      	cmp	r3, #24
 8023c0e:	d91d      	bls.n	8023c4c <__gethex+0x130>
 8023c10:	9b04      	ldr	r3, [sp, #16]
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	d000      	beq.n	8023c18 <__gethex+0xfc>
 8023c16:	426d      	negs	r5, r5
 8023c18:	197f      	adds	r7, r7, r5
 8023c1a:	9b06      	ldr	r3, [sp, #24]
 8023c1c:	601e      	str	r6, [r3, #0]
 8023c1e:	9b02      	ldr	r3, [sp, #8]
 8023c20:	2b00      	cmp	r3, #0
 8023c22:	d019      	beq.n	8023c58 <__gethex+0x13c>
 8023c24:	9b05      	ldr	r3, [sp, #20]
 8023c26:	2606      	movs	r6, #6
 8023c28:	425a      	negs	r2, r3
 8023c2a:	4153      	adcs	r3, r2
 8023c2c:	425b      	negs	r3, r3
 8023c2e:	401e      	ands	r6, r3
 8023c30:	0030      	movs	r0, r6
 8023c32:	b009      	add	sp, #36	@ 0x24
 8023c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c36:	2301      	movs	r3, #1
 8023c38:	2700      	movs	r7, #0
 8023c3a:	9c00      	ldr	r4, [sp, #0]
 8023c3c:	9302      	str	r3, [sp, #8]
 8023c3e:	e7c8      	b.n	8023bd2 <__gethex+0xb6>
 8023c40:	2300      	movs	r3, #0
 8023c42:	9304      	str	r3, [sp, #16]
 8023c44:	1ca6      	adds	r6, r4, #2
 8023c46:	e7d2      	b.n	8023bee <__gethex+0xd2>
 8023c48:	2301      	movs	r3, #1
 8023c4a:	e7fa      	b.n	8023c42 <__gethex+0x126>
 8023c4c:	230a      	movs	r3, #10
 8023c4e:	435d      	muls	r5, r3
 8023c50:	182d      	adds	r5, r5, r0
 8023c52:	e7d4      	b.n	8023bfe <__gethex+0xe2>
 8023c54:	0026      	movs	r6, r4
 8023c56:	e7e0      	b.n	8023c1a <__gethex+0xfe>
 8023c58:	9b00      	ldr	r3, [sp, #0]
 8023c5a:	9902      	ldr	r1, [sp, #8]
 8023c5c:	1ae3      	subs	r3, r4, r3
 8023c5e:	3b01      	subs	r3, #1
 8023c60:	2b07      	cmp	r3, #7
 8023c62:	dc0a      	bgt.n	8023c7a <__gethex+0x15e>
 8023c64:	9803      	ldr	r0, [sp, #12]
 8023c66:	f000 fb19 	bl	802429c <_Balloc>
 8023c6a:	1e05      	subs	r5, r0, #0
 8023c6c:	d108      	bne.n	8023c80 <__gethex+0x164>
 8023c6e:	002a      	movs	r2, r5
 8023c70:	21e4      	movs	r1, #228	@ 0xe4
 8023c72:	4b5f      	ldr	r3, [pc, #380]	@ (8023df0 <__gethex+0x2d4>)
 8023c74:	485f      	ldr	r0, [pc, #380]	@ (8023df4 <__gethex+0x2d8>)
 8023c76:	f001 fbf1 	bl	802545c <__assert_func>
 8023c7a:	3101      	adds	r1, #1
 8023c7c:	105b      	asrs	r3, r3, #1
 8023c7e:	e7ef      	b.n	8023c60 <__gethex+0x144>
 8023c80:	0003      	movs	r3, r0
 8023c82:	3314      	adds	r3, #20
 8023c84:	9302      	str	r3, [sp, #8]
 8023c86:	9305      	str	r3, [sp, #20]
 8023c88:	2300      	movs	r3, #0
 8023c8a:	001e      	movs	r6, r3
 8023c8c:	9304      	str	r3, [sp, #16]
 8023c8e:	9b00      	ldr	r3, [sp, #0]
 8023c90:	42a3      	cmp	r3, r4
 8023c92:	d338      	bcc.n	8023d06 <__gethex+0x1ea>
 8023c94:	9c05      	ldr	r4, [sp, #20]
 8023c96:	9b02      	ldr	r3, [sp, #8]
 8023c98:	c440      	stmia	r4!, {r6}
 8023c9a:	1ae4      	subs	r4, r4, r3
 8023c9c:	10a4      	asrs	r4, r4, #2
 8023c9e:	0030      	movs	r0, r6
 8023ca0:	612c      	str	r4, [r5, #16]
 8023ca2:	f000 fbf3 	bl	802448c <__hi0bits>
 8023ca6:	9b01      	ldr	r3, [sp, #4]
 8023ca8:	0164      	lsls	r4, r4, #5
 8023caa:	681b      	ldr	r3, [r3, #0]
 8023cac:	1a26      	subs	r6, r4, r0
 8023cae:	9300      	str	r3, [sp, #0]
 8023cb0:	429e      	cmp	r6, r3
 8023cb2:	dd52      	ble.n	8023d5a <__gethex+0x23e>
 8023cb4:	1af6      	subs	r6, r6, r3
 8023cb6:	0031      	movs	r1, r6
 8023cb8:	0028      	movs	r0, r5
 8023cba:	f000 ff96 	bl	8024bea <__any_on>
 8023cbe:	1e04      	subs	r4, r0, #0
 8023cc0:	d00f      	beq.n	8023ce2 <__gethex+0x1c6>
 8023cc2:	2401      	movs	r4, #1
 8023cc4:	231f      	movs	r3, #31
 8023cc6:	0020      	movs	r0, r4
 8023cc8:	1e72      	subs	r2, r6, #1
 8023cca:	4013      	ands	r3, r2
 8023ccc:	4098      	lsls	r0, r3
 8023cce:	0003      	movs	r3, r0
 8023cd0:	1151      	asrs	r1, r2, #5
 8023cd2:	9802      	ldr	r0, [sp, #8]
 8023cd4:	0089      	lsls	r1, r1, #2
 8023cd6:	5809      	ldr	r1, [r1, r0]
 8023cd8:	4219      	tst	r1, r3
 8023cda:	d002      	beq.n	8023ce2 <__gethex+0x1c6>
 8023cdc:	42a2      	cmp	r2, r4
 8023cde:	dc34      	bgt.n	8023d4a <__gethex+0x22e>
 8023ce0:	2402      	movs	r4, #2
 8023ce2:	0031      	movs	r1, r6
 8023ce4:	0028      	movs	r0, r5
 8023ce6:	f7ff feb1 	bl	8023a4c <rshift>
 8023cea:	19bf      	adds	r7, r7, r6
 8023cec:	9b01      	ldr	r3, [sp, #4]
 8023cee:	689b      	ldr	r3, [r3, #8]
 8023cf0:	42bb      	cmp	r3, r7
 8023cf2:	da42      	bge.n	8023d7a <__gethex+0x25e>
 8023cf4:	0029      	movs	r1, r5
 8023cf6:	9803      	ldr	r0, [sp, #12]
 8023cf8:	f000 fb14 	bl	8024324 <_Bfree>
 8023cfc:	2300      	movs	r3, #0
 8023cfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023d00:	26a3      	movs	r6, #163	@ 0xa3
 8023d02:	6013      	str	r3, [r2, #0]
 8023d04:	e794      	b.n	8023c30 <__gethex+0x114>
 8023d06:	3c01      	subs	r4, #1
 8023d08:	7823      	ldrb	r3, [r4, #0]
 8023d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8023d0c:	d012      	beq.n	8023d34 <__gethex+0x218>
 8023d0e:	9b04      	ldr	r3, [sp, #16]
 8023d10:	2b20      	cmp	r3, #32
 8023d12:	d104      	bne.n	8023d1e <__gethex+0x202>
 8023d14:	9b05      	ldr	r3, [sp, #20]
 8023d16:	c340      	stmia	r3!, {r6}
 8023d18:	2600      	movs	r6, #0
 8023d1a:	9305      	str	r3, [sp, #20]
 8023d1c:	9604      	str	r6, [sp, #16]
 8023d1e:	7820      	ldrb	r0, [r4, #0]
 8023d20:	f7ff fee7 	bl	8023af2 <__hexdig_fun>
 8023d24:	230f      	movs	r3, #15
 8023d26:	4018      	ands	r0, r3
 8023d28:	9b04      	ldr	r3, [sp, #16]
 8023d2a:	4098      	lsls	r0, r3
 8023d2c:	3304      	adds	r3, #4
 8023d2e:	4306      	orrs	r6, r0
 8023d30:	9304      	str	r3, [sp, #16]
 8023d32:	e7ac      	b.n	8023c8e <__gethex+0x172>
 8023d34:	9b00      	ldr	r3, [sp, #0]
 8023d36:	42a3      	cmp	r3, r4
 8023d38:	d8e9      	bhi.n	8023d0e <__gethex+0x1f2>
 8023d3a:	2201      	movs	r2, #1
 8023d3c:	0020      	movs	r0, r4
 8023d3e:	492b      	ldr	r1, [pc, #172]	@ (8023dec <__gethex+0x2d0>)
 8023d40:	f7fe fee2 	bl	8022b08 <strncmp>
 8023d44:	2800      	cmp	r0, #0
 8023d46:	d1e2      	bne.n	8023d0e <__gethex+0x1f2>
 8023d48:	e7a1      	b.n	8023c8e <__gethex+0x172>
 8023d4a:	0028      	movs	r0, r5
 8023d4c:	1eb1      	subs	r1, r6, #2
 8023d4e:	f000 ff4c 	bl	8024bea <__any_on>
 8023d52:	2800      	cmp	r0, #0
 8023d54:	d0c4      	beq.n	8023ce0 <__gethex+0x1c4>
 8023d56:	2403      	movs	r4, #3
 8023d58:	e7c3      	b.n	8023ce2 <__gethex+0x1c6>
 8023d5a:	9b00      	ldr	r3, [sp, #0]
 8023d5c:	2400      	movs	r4, #0
 8023d5e:	429e      	cmp	r6, r3
 8023d60:	dac4      	bge.n	8023cec <__gethex+0x1d0>
 8023d62:	1b9e      	subs	r6, r3, r6
 8023d64:	0029      	movs	r1, r5
 8023d66:	0032      	movs	r2, r6
 8023d68:	9803      	ldr	r0, [sp, #12]
 8023d6a:	f000 fd05 	bl	8024778 <__lshift>
 8023d6e:	0003      	movs	r3, r0
 8023d70:	3314      	adds	r3, #20
 8023d72:	0005      	movs	r5, r0
 8023d74:	1bbf      	subs	r7, r7, r6
 8023d76:	9302      	str	r3, [sp, #8]
 8023d78:	e7b8      	b.n	8023cec <__gethex+0x1d0>
 8023d7a:	9b01      	ldr	r3, [sp, #4]
 8023d7c:	685e      	ldr	r6, [r3, #4]
 8023d7e:	42be      	cmp	r6, r7
 8023d80:	dd6f      	ble.n	8023e62 <__gethex+0x346>
 8023d82:	9b00      	ldr	r3, [sp, #0]
 8023d84:	1bf6      	subs	r6, r6, r7
 8023d86:	42b3      	cmp	r3, r6
 8023d88:	dc36      	bgt.n	8023df8 <__gethex+0x2dc>
 8023d8a:	9b01      	ldr	r3, [sp, #4]
 8023d8c:	68db      	ldr	r3, [r3, #12]
 8023d8e:	2b02      	cmp	r3, #2
 8023d90:	d024      	beq.n	8023ddc <__gethex+0x2c0>
 8023d92:	2b03      	cmp	r3, #3
 8023d94:	d026      	beq.n	8023de4 <__gethex+0x2c8>
 8023d96:	2b01      	cmp	r3, #1
 8023d98:	d117      	bne.n	8023dca <__gethex+0x2ae>
 8023d9a:	9b00      	ldr	r3, [sp, #0]
 8023d9c:	42b3      	cmp	r3, r6
 8023d9e:	d114      	bne.n	8023dca <__gethex+0x2ae>
 8023da0:	2b01      	cmp	r3, #1
 8023da2:	d10b      	bne.n	8023dbc <__gethex+0x2a0>
 8023da4:	9b01      	ldr	r3, [sp, #4]
 8023da6:	9a07      	ldr	r2, [sp, #28]
 8023da8:	685b      	ldr	r3, [r3, #4]
 8023daa:	2662      	movs	r6, #98	@ 0x62
 8023dac:	6013      	str	r3, [r2, #0]
 8023dae:	2301      	movs	r3, #1
 8023db0:	9a02      	ldr	r2, [sp, #8]
 8023db2:	612b      	str	r3, [r5, #16]
 8023db4:	6013      	str	r3, [r2, #0]
 8023db6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023db8:	601d      	str	r5, [r3, #0]
 8023dba:	e739      	b.n	8023c30 <__gethex+0x114>
 8023dbc:	9900      	ldr	r1, [sp, #0]
 8023dbe:	0028      	movs	r0, r5
 8023dc0:	3901      	subs	r1, #1
 8023dc2:	f000 ff12 	bl	8024bea <__any_on>
 8023dc6:	2800      	cmp	r0, #0
 8023dc8:	d1ec      	bne.n	8023da4 <__gethex+0x288>
 8023dca:	0029      	movs	r1, r5
 8023dcc:	9803      	ldr	r0, [sp, #12]
 8023dce:	f000 faa9 	bl	8024324 <_Bfree>
 8023dd2:	2300      	movs	r3, #0
 8023dd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023dd6:	2650      	movs	r6, #80	@ 0x50
 8023dd8:	6013      	str	r3, [r2, #0]
 8023dda:	e729      	b.n	8023c30 <__gethex+0x114>
 8023ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023dde:	2b00      	cmp	r3, #0
 8023de0:	d1f3      	bne.n	8023dca <__gethex+0x2ae>
 8023de2:	e7df      	b.n	8023da4 <__gethex+0x288>
 8023de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	d1dc      	bne.n	8023da4 <__gethex+0x288>
 8023dea:	e7ee      	b.n	8023dca <__gethex+0x2ae>
 8023dec:	080294d0 	.word	0x080294d0
 8023df0:	080296e1 	.word	0x080296e1
 8023df4:	080296f2 	.word	0x080296f2
 8023df8:	1e77      	subs	r7, r6, #1
 8023dfa:	2c00      	cmp	r4, #0
 8023dfc:	d12f      	bne.n	8023e5e <__gethex+0x342>
 8023dfe:	2f00      	cmp	r7, #0
 8023e00:	d004      	beq.n	8023e0c <__gethex+0x2f0>
 8023e02:	0039      	movs	r1, r7
 8023e04:	0028      	movs	r0, r5
 8023e06:	f000 fef0 	bl	8024bea <__any_on>
 8023e0a:	0004      	movs	r4, r0
 8023e0c:	231f      	movs	r3, #31
 8023e0e:	117a      	asrs	r2, r7, #5
 8023e10:	401f      	ands	r7, r3
 8023e12:	3b1e      	subs	r3, #30
 8023e14:	40bb      	lsls	r3, r7
 8023e16:	9902      	ldr	r1, [sp, #8]
 8023e18:	0092      	lsls	r2, r2, #2
 8023e1a:	5852      	ldr	r2, [r2, r1]
 8023e1c:	421a      	tst	r2, r3
 8023e1e:	d001      	beq.n	8023e24 <__gethex+0x308>
 8023e20:	2302      	movs	r3, #2
 8023e22:	431c      	orrs	r4, r3
 8023e24:	9b00      	ldr	r3, [sp, #0]
 8023e26:	0031      	movs	r1, r6
 8023e28:	1b9b      	subs	r3, r3, r6
 8023e2a:	2602      	movs	r6, #2
 8023e2c:	0028      	movs	r0, r5
 8023e2e:	9300      	str	r3, [sp, #0]
 8023e30:	f7ff fe0c 	bl	8023a4c <rshift>
 8023e34:	9b01      	ldr	r3, [sp, #4]
 8023e36:	685f      	ldr	r7, [r3, #4]
 8023e38:	2c00      	cmp	r4, #0
 8023e3a:	d03f      	beq.n	8023ebc <__gethex+0x3a0>
 8023e3c:	9b01      	ldr	r3, [sp, #4]
 8023e3e:	68db      	ldr	r3, [r3, #12]
 8023e40:	2b02      	cmp	r3, #2
 8023e42:	d010      	beq.n	8023e66 <__gethex+0x34a>
 8023e44:	2b03      	cmp	r3, #3
 8023e46:	d012      	beq.n	8023e6e <__gethex+0x352>
 8023e48:	2b01      	cmp	r3, #1
 8023e4a:	d106      	bne.n	8023e5a <__gethex+0x33e>
 8023e4c:	07a2      	lsls	r2, r4, #30
 8023e4e:	d504      	bpl.n	8023e5a <__gethex+0x33e>
 8023e50:	9a02      	ldr	r2, [sp, #8]
 8023e52:	6812      	ldr	r2, [r2, #0]
 8023e54:	4314      	orrs	r4, r2
 8023e56:	421c      	tst	r4, r3
 8023e58:	d10c      	bne.n	8023e74 <__gethex+0x358>
 8023e5a:	2310      	movs	r3, #16
 8023e5c:	e02d      	b.n	8023eba <__gethex+0x39e>
 8023e5e:	2401      	movs	r4, #1
 8023e60:	e7d4      	b.n	8023e0c <__gethex+0x2f0>
 8023e62:	2601      	movs	r6, #1
 8023e64:	e7e8      	b.n	8023e38 <__gethex+0x31c>
 8023e66:	2301      	movs	r3, #1
 8023e68:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023e6a:	1a9b      	subs	r3, r3, r2
 8023e6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023e6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023e70:	2b00      	cmp	r3, #0
 8023e72:	d0f2      	beq.n	8023e5a <__gethex+0x33e>
 8023e74:	692b      	ldr	r3, [r5, #16]
 8023e76:	2000      	movs	r0, #0
 8023e78:	9302      	str	r3, [sp, #8]
 8023e7a:	009b      	lsls	r3, r3, #2
 8023e7c:	9304      	str	r3, [sp, #16]
 8023e7e:	002b      	movs	r3, r5
 8023e80:	9a04      	ldr	r2, [sp, #16]
 8023e82:	3314      	adds	r3, #20
 8023e84:	1899      	adds	r1, r3, r2
 8023e86:	681a      	ldr	r2, [r3, #0]
 8023e88:	1c54      	adds	r4, r2, #1
 8023e8a:	d01c      	beq.n	8023ec6 <__gethex+0x3aa>
 8023e8c:	3201      	adds	r2, #1
 8023e8e:	601a      	str	r2, [r3, #0]
 8023e90:	002b      	movs	r3, r5
 8023e92:	3314      	adds	r3, #20
 8023e94:	2e02      	cmp	r6, #2
 8023e96:	d13f      	bne.n	8023f18 <__gethex+0x3fc>
 8023e98:	9a01      	ldr	r2, [sp, #4]
 8023e9a:	9900      	ldr	r1, [sp, #0]
 8023e9c:	6812      	ldr	r2, [r2, #0]
 8023e9e:	3a01      	subs	r2, #1
 8023ea0:	428a      	cmp	r2, r1
 8023ea2:	d109      	bne.n	8023eb8 <__gethex+0x39c>
 8023ea4:	000a      	movs	r2, r1
 8023ea6:	201f      	movs	r0, #31
 8023ea8:	4010      	ands	r0, r2
 8023eaa:	2201      	movs	r2, #1
 8023eac:	4082      	lsls	r2, r0
 8023eae:	1149      	asrs	r1, r1, #5
 8023eb0:	0089      	lsls	r1, r1, #2
 8023eb2:	58cb      	ldr	r3, [r1, r3]
 8023eb4:	4213      	tst	r3, r2
 8023eb6:	d13d      	bne.n	8023f34 <__gethex+0x418>
 8023eb8:	2320      	movs	r3, #32
 8023eba:	431e      	orrs	r6, r3
 8023ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023ebe:	601d      	str	r5, [r3, #0]
 8023ec0:	9b07      	ldr	r3, [sp, #28]
 8023ec2:	601f      	str	r7, [r3, #0]
 8023ec4:	e6b4      	b.n	8023c30 <__gethex+0x114>
 8023ec6:	c301      	stmia	r3!, {r0}
 8023ec8:	4299      	cmp	r1, r3
 8023eca:	d8dc      	bhi.n	8023e86 <__gethex+0x36a>
 8023ecc:	68ab      	ldr	r3, [r5, #8]
 8023ece:	9a02      	ldr	r2, [sp, #8]
 8023ed0:	429a      	cmp	r2, r3
 8023ed2:	db18      	blt.n	8023f06 <__gethex+0x3ea>
 8023ed4:	6869      	ldr	r1, [r5, #4]
 8023ed6:	9803      	ldr	r0, [sp, #12]
 8023ed8:	3101      	adds	r1, #1
 8023eda:	f000 f9df 	bl	802429c <_Balloc>
 8023ede:	1e04      	subs	r4, r0, #0
 8023ee0:	d104      	bne.n	8023eec <__gethex+0x3d0>
 8023ee2:	0022      	movs	r2, r4
 8023ee4:	2184      	movs	r1, #132	@ 0x84
 8023ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8023f5c <__gethex+0x440>)
 8023ee8:	481d      	ldr	r0, [pc, #116]	@ (8023f60 <__gethex+0x444>)
 8023eea:	e6c4      	b.n	8023c76 <__gethex+0x15a>
 8023eec:	0029      	movs	r1, r5
 8023eee:	692a      	ldr	r2, [r5, #16]
 8023ef0:	310c      	adds	r1, #12
 8023ef2:	3202      	adds	r2, #2
 8023ef4:	0092      	lsls	r2, r2, #2
 8023ef6:	300c      	adds	r0, #12
 8023ef8:	f7fe fecc 	bl	8022c94 <memcpy>
 8023efc:	0029      	movs	r1, r5
 8023efe:	9803      	ldr	r0, [sp, #12]
 8023f00:	f000 fa10 	bl	8024324 <_Bfree>
 8023f04:	0025      	movs	r5, r4
 8023f06:	692b      	ldr	r3, [r5, #16]
 8023f08:	1c5a      	adds	r2, r3, #1
 8023f0a:	612a      	str	r2, [r5, #16]
 8023f0c:	2201      	movs	r2, #1
 8023f0e:	3304      	adds	r3, #4
 8023f10:	009b      	lsls	r3, r3, #2
 8023f12:	18eb      	adds	r3, r5, r3
 8023f14:	605a      	str	r2, [r3, #4]
 8023f16:	e7bb      	b.n	8023e90 <__gethex+0x374>
 8023f18:	692a      	ldr	r2, [r5, #16]
 8023f1a:	9902      	ldr	r1, [sp, #8]
 8023f1c:	428a      	cmp	r2, r1
 8023f1e:	dd0b      	ble.n	8023f38 <__gethex+0x41c>
 8023f20:	2101      	movs	r1, #1
 8023f22:	0028      	movs	r0, r5
 8023f24:	f7ff fd92 	bl	8023a4c <rshift>
 8023f28:	9b01      	ldr	r3, [sp, #4]
 8023f2a:	3701      	adds	r7, #1
 8023f2c:	689b      	ldr	r3, [r3, #8]
 8023f2e:	42bb      	cmp	r3, r7
 8023f30:	da00      	bge.n	8023f34 <__gethex+0x418>
 8023f32:	e6df      	b.n	8023cf4 <__gethex+0x1d8>
 8023f34:	2601      	movs	r6, #1
 8023f36:	e7bf      	b.n	8023eb8 <__gethex+0x39c>
 8023f38:	221f      	movs	r2, #31
 8023f3a:	9c00      	ldr	r4, [sp, #0]
 8023f3c:	9900      	ldr	r1, [sp, #0]
 8023f3e:	4014      	ands	r4, r2
 8023f40:	4211      	tst	r1, r2
 8023f42:	d0f7      	beq.n	8023f34 <__gethex+0x418>
 8023f44:	9a04      	ldr	r2, [sp, #16]
 8023f46:	189b      	adds	r3, r3, r2
 8023f48:	3b04      	subs	r3, #4
 8023f4a:	6818      	ldr	r0, [r3, #0]
 8023f4c:	f000 fa9e 	bl	802448c <__hi0bits>
 8023f50:	2320      	movs	r3, #32
 8023f52:	1b1b      	subs	r3, r3, r4
 8023f54:	4298      	cmp	r0, r3
 8023f56:	dbe3      	blt.n	8023f20 <__gethex+0x404>
 8023f58:	e7ec      	b.n	8023f34 <__gethex+0x418>
 8023f5a:	46c0      	nop			@ (mov r8, r8)
 8023f5c:	080296e1 	.word	0x080296e1
 8023f60:	080296f2 	.word	0x080296f2

08023f64 <L_shift>:
 8023f64:	2308      	movs	r3, #8
 8023f66:	b570      	push	{r4, r5, r6, lr}
 8023f68:	2520      	movs	r5, #32
 8023f6a:	1a9a      	subs	r2, r3, r2
 8023f6c:	0092      	lsls	r2, r2, #2
 8023f6e:	1aad      	subs	r5, r5, r2
 8023f70:	6843      	ldr	r3, [r0, #4]
 8023f72:	6804      	ldr	r4, [r0, #0]
 8023f74:	001e      	movs	r6, r3
 8023f76:	40ae      	lsls	r6, r5
 8023f78:	40d3      	lsrs	r3, r2
 8023f7a:	4334      	orrs	r4, r6
 8023f7c:	6004      	str	r4, [r0, #0]
 8023f7e:	6043      	str	r3, [r0, #4]
 8023f80:	3004      	adds	r0, #4
 8023f82:	4288      	cmp	r0, r1
 8023f84:	d3f4      	bcc.n	8023f70 <L_shift+0xc>
 8023f86:	bd70      	pop	{r4, r5, r6, pc}

08023f88 <__match>:
 8023f88:	b530      	push	{r4, r5, lr}
 8023f8a:	6803      	ldr	r3, [r0, #0]
 8023f8c:	780c      	ldrb	r4, [r1, #0]
 8023f8e:	3301      	adds	r3, #1
 8023f90:	2c00      	cmp	r4, #0
 8023f92:	d102      	bne.n	8023f9a <__match+0x12>
 8023f94:	6003      	str	r3, [r0, #0]
 8023f96:	2001      	movs	r0, #1
 8023f98:	bd30      	pop	{r4, r5, pc}
 8023f9a:	781a      	ldrb	r2, [r3, #0]
 8023f9c:	0015      	movs	r5, r2
 8023f9e:	3d41      	subs	r5, #65	@ 0x41
 8023fa0:	2d19      	cmp	r5, #25
 8023fa2:	d800      	bhi.n	8023fa6 <__match+0x1e>
 8023fa4:	3220      	adds	r2, #32
 8023fa6:	3101      	adds	r1, #1
 8023fa8:	42a2      	cmp	r2, r4
 8023faa:	d0ef      	beq.n	8023f8c <__match+0x4>
 8023fac:	2000      	movs	r0, #0
 8023fae:	e7f3      	b.n	8023f98 <__match+0x10>

08023fb0 <__hexnan>:
 8023fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023fb2:	680b      	ldr	r3, [r1, #0]
 8023fb4:	b08b      	sub	sp, #44	@ 0x2c
 8023fb6:	9201      	str	r2, [sp, #4]
 8023fb8:	9901      	ldr	r1, [sp, #4]
 8023fba:	115a      	asrs	r2, r3, #5
 8023fbc:	0092      	lsls	r2, r2, #2
 8023fbe:	188a      	adds	r2, r1, r2
 8023fc0:	9202      	str	r2, [sp, #8]
 8023fc2:	0019      	movs	r1, r3
 8023fc4:	221f      	movs	r2, #31
 8023fc6:	4011      	ands	r1, r2
 8023fc8:	9008      	str	r0, [sp, #32]
 8023fca:	9106      	str	r1, [sp, #24]
 8023fcc:	4213      	tst	r3, r2
 8023fce:	d002      	beq.n	8023fd6 <__hexnan+0x26>
 8023fd0:	9b02      	ldr	r3, [sp, #8]
 8023fd2:	3304      	adds	r3, #4
 8023fd4:	9302      	str	r3, [sp, #8]
 8023fd6:	9b02      	ldr	r3, [sp, #8]
 8023fd8:	2500      	movs	r5, #0
 8023fda:	1f1f      	subs	r7, r3, #4
 8023fdc:	003e      	movs	r6, r7
 8023fde:	003c      	movs	r4, r7
 8023fe0:	9b08      	ldr	r3, [sp, #32]
 8023fe2:	603d      	str	r5, [r7, #0]
 8023fe4:	681b      	ldr	r3, [r3, #0]
 8023fe6:	9507      	str	r5, [sp, #28]
 8023fe8:	9305      	str	r3, [sp, #20]
 8023fea:	9503      	str	r5, [sp, #12]
 8023fec:	9b05      	ldr	r3, [sp, #20]
 8023fee:	3301      	adds	r3, #1
 8023ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ff2:	9b05      	ldr	r3, [sp, #20]
 8023ff4:	785b      	ldrb	r3, [r3, #1]
 8023ff6:	9304      	str	r3, [sp, #16]
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	d028      	beq.n	802404e <__hexnan+0x9e>
 8023ffc:	9804      	ldr	r0, [sp, #16]
 8023ffe:	f7ff fd78 	bl	8023af2 <__hexdig_fun>
 8024002:	2800      	cmp	r0, #0
 8024004:	d155      	bne.n	80240b2 <__hexnan+0x102>
 8024006:	9b04      	ldr	r3, [sp, #16]
 8024008:	2b20      	cmp	r3, #32
 802400a:	d819      	bhi.n	8024040 <__hexnan+0x90>
 802400c:	9b03      	ldr	r3, [sp, #12]
 802400e:	9a07      	ldr	r2, [sp, #28]
 8024010:	4293      	cmp	r3, r2
 8024012:	dd12      	ble.n	802403a <__hexnan+0x8a>
 8024014:	42b4      	cmp	r4, r6
 8024016:	d206      	bcs.n	8024026 <__hexnan+0x76>
 8024018:	2d07      	cmp	r5, #7
 802401a:	dc04      	bgt.n	8024026 <__hexnan+0x76>
 802401c:	002a      	movs	r2, r5
 802401e:	0031      	movs	r1, r6
 8024020:	0020      	movs	r0, r4
 8024022:	f7ff ff9f 	bl	8023f64 <L_shift>
 8024026:	9b01      	ldr	r3, [sp, #4]
 8024028:	2508      	movs	r5, #8
 802402a:	429c      	cmp	r4, r3
 802402c:	d905      	bls.n	802403a <__hexnan+0x8a>
 802402e:	1f26      	subs	r6, r4, #4
 8024030:	2500      	movs	r5, #0
 8024032:	0034      	movs	r4, r6
 8024034:	9b03      	ldr	r3, [sp, #12]
 8024036:	6035      	str	r5, [r6, #0]
 8024038:	9307      	str	r3, [sp, #28]
 802403a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802403c:	9305      	str	r3, [sp, #20]
 802403e:	e7d5      	b.n	8023fec <__hexnan+0x3c>
 8024040:	9b04      	ldr	r3, [sp, #16]
 8024042:	2b29      	cmp	r3, #41	@ 0x29
 8024044:	d15a      	bne.n	80240fc <__hexnan+0x14c>
 8024046:	9b05      	ldr	r3, [sp, #20]
 8024048:	9a08      	ldr	r2, [sp, #32]
 802404a:	3302      	adds	r3, #2
 802404c:	6013      	str	r3, [r2, #0]
 802404e:	9b03      	ldr	r3, [sp, #12]
 8024050:	2b00      	cmp	r3, #0
 8024052:	d053      	beq.n	80240fc <__hexnan+0x14c>
 8024054:	42b4      	cmp	r4, r6
 8024056:	d206      	bcs.n	8024066 <__hexnan+0xb6>
 8024058:	2d07      	cmp	r5, #7
 802405a:	dc04      	bgt.n	8024066 <__hexnan+0xb6>
 802405c:	002a      	movs	r2, r5
 802405e:	0031      	movs	r1, r6
 8024060:	0020      	movs	r0, r4
 8024062:	f7ff ff7f 	bl	8023f64 <L_shift>
 8024066:	9b01      	ldr	r3, [sp, #4]
 8024068:	429c      	cmp	r4, r3
 802406a:	d936      	bls.n	80240da <__hexnan+0x12a>
 802406c:	001a      	movs	r2, r3
 802406e:	0023      	movs	r3, r4
 8024070:	cb02      	ldmia	r3!, {r1}
 8024072:	c202      	stmia	r2!, {r1}
 8024074:	429f      	cmp	r7, r3
 8024076:	d2fb      	bcs.n	8024070 <__hexnan+0xc0>
 8024078:	9b02      	ldr	r3, [sp, #8]
 802407a:	1c61      	adds	r1, r4, #1
 802407c:	1eda      	subs	r2, r3, #3
 802407e:	2304      	movs	r3, #4
 8024080:	4291      	cmp	r1, r2
 8024082:	d805      	bhi.n	8024090 <__hexnan+0xe0>
 8024084:	9b02      	ldr	r3, [sp, #8]
 8024086:	3b04      	subs	r3, #4
 8024088:	1b1b      	subs	r3, r3, r4
 802408a:	089b      	lsrs	r3, r3, #2
 802408c:	3301      	adds	r3, #1
 802408e:	009b      	lsls	r3, r3, #2
 8024090:	9a01      	ldr	r2, [sp, #4]
 8024092:	18d3      	adds	r3, r2, r3
 8024094:	2200      	movs	r2, #0
 8024096:	c304      	stmia	r3!, {r2}
 8024098:	429f      	cmp	r7, r3
 802409a:	d2fc      	bcs.n	8024096 <__hexnan+0xe6>
 802409c:	683b      	ldr	r3, [r7, #0]
 802409e:	2b00      	cmp	r3, #0
 80240a0:	d104      	bne.n	80240ac <__hexnan+0xfc>
 80240a2:	9b01      	ldr	r3, [sp, #4]
 80240a4:	429f      	cmp	r7, r3
 80240a6:	d127      	bne.n	80240f8 <__hexnan+0x148>
 80240a8:	2301      	movs	r3, #1
 80240aa:	603b      	str	r3, [r7, #0]
 80240ac:	2005      	movs	r0, #5
 80240ae:	b00b      	add	sp, #44	@ 0x2c
 80240b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80240b2:	9b03      	ldr	r3, [sp, #12]
 80240b4:	3501      	adds	r5, #1
 80240b6:	3301      	adds	r3, #1
 80240b8:	9303      	str	r3, [sp, #12]
 80240ba:	2d08      	cmp	r5, #8
 80240bc:	dd06      	ble.n	80240cc <__hexnan+0x11c>
 80240be:	9b01      	ldr	r3, [sp, #4]
 80240c0:	429c      	cmp	r4, r3
 80240c2:	d9ba      	bls.n	802403a <__hexnan+0x8a>
 80240c4:	2300      	movs	r3, #0
 80240c6:	2501      	movs	r5, #1
 80240c8:	3c04      	subs	r4, #4
 80240ca:	6023      	str	r3, [r4, #0]
 80240cc:	220f      	movs	r2, #15
 80240ce:	6823      	ldr	r3, [r4, #0]
 80240d0:	4010      	ands	r0, r2
 80240d2:	011b      	lsls	r3, r3, #4
 80240d4:	4303      	orrs	r3, r0
 80240d6:	6023      	str	r3, [r4, #0]
 80240d8:	e7af      	b.n	802403a <__hexnan+0x8a>
 80240da:	9b06      	ldr	r3, [sp, #24]
 80240dc:	2b00      	cmp	r3, #0
 80240de:	d0dd      	beq.n	802409c <__hexnan+0xec>
 80240e0:	2320      	movs	r3, #32
 80240e2:	9a06      	ldr	r2, [sp, #24]
 80240e4:	9902      	ldr	r1, [sp, #8]
 80240e6:	1a9b      	subs	r3, r3, r2
 80240e8:	2201      	movs	r2, #1
 80240ea:	4252      	negs	r2, r2
 80240ec:	40da      	lsrs	r2, r3
 80240ee:	3904      	subs	r1, #4
 80240f0:	680b      	ldr	r3, [r1, #0]
 80240f2:	4013      	ands	r3, r2
 80240f4:	600b      	str	r3, [r1, #0]
 80240f6:	e7d1      	b.n	802409c <__hexnan+0xec>
 80240f8:	3f04      	subs	r7, #4
 80240fa:	e7cf      	b.n	802409c <__hexnan+0xec>
 80240fc:	2004      	movs	r0, #4
 80240fe:	e7d6      	b.n	80240ae <__hexnan+0xfe>

08024100 <malloc>:
 8024100:	b510      	push	{r4, lr}
 8024102:	4b03      	ldr	r3, [pc, #12]	@ (8024110 <malloc+0x10>)
 8024104:	0001      	movs	r1, r0
 8024106:	6818      	ldr	r0, [r3, #0]
 8024108:	f000 f826 	bl	8024158 <_malloc_r>
 802410c:	bd10      	pop	{r4, pc}
 802410e:	46c0      	nop			@ (mov r8, r8)
 8024110:	200003e0 	.word	0x200003e0

08024114 <sbrk_aligned>:
 8024114:	b570      	push	{r4, r5, r6, lr}
 8024116:	4e0f      	ldr	r6, [pc, #60]	@ (8024154 <sbrk_aligned+0x40>)
 8024118:	000d      	movs	r5, r1
 802411a:	6831      	ldr	r1, [r6, #0]
 802411c:	0004      	movs	r4, r0
 802411e:	2900      	cmp	r1, #0
 8024120:	d102      	bne.n	8024128 <sbrk_aligned+0x14>
 8024122:	f001 f989 	bl	8025438 <_sbrk_r>
 8024126:	6030      	str	r0, [r6, #0]
 8024128:	0029      	movs	r1, r5
 802412a:	0020      	movs	r0, r4
 802412c:	f001 f984 	bl	8025438 <_sbrk_r>
 8024130:	1c43      	adds	r3, r0, #1
 8024132:	d103      	bne.n	802413c <sbrk_aligned+0x28>
 8024134:	2501      	movs	r5, #1
 8024136:	426d      	negs	r5, r5
 8024138:	0028      	movs	r0, r5
 802413a:	bd70      	pop	{r4, r5, r6, pc}
 802413c:	2303      	movs	r3, #3
 802413e:	1cc5      	adds	r5, r0, #3
 8024140:	439d      	bics	r5, r3
 8024142:	42a8      	cmp	r0, r5
 8024144:	d0f8      	beq.n	8024138 <sbrk_aligned+0x24>
 8024146:	1a29      	subs	r1, r5, r0
 8024148:	0020      	movs	r0, r4
 802414a:	f001 f975 	bl	8025438 <_sbrk_r>
 802414e:	3001      	adds	r0, #1
 8024150:	d1f2      	bne.n	8024138 <sbrk_aligned+0x24>
 8024152:	e7ef      	b.n	8024134 <sbrk_aligned+0x20>
 8024154:	20003590 	.word	0x20003590

08024158 <_malloc_r>:
 8024158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802415a:	2203      	movs	r2, #3
 802415c:	1ccb      	adds	r3, r1, #3
 802415e:	4393      	bics	r3, r2
 8024160:	3308      	adds	r3, #8
 8024162:	0005      	movs	r5, r0
 8024164:	001f      	movs	r7, r3
 8024166:	2b0c      	cmp	r3, #12
 8024168:	d234      	bcs.n	80241d4 <_malloc_r+0x7c>
 802416a:	270c      	movs	r7, #12
 802416c:	42b9      	cmp	r1, r7
 802416e:	d833      	bhi.n	80241d8 <_malloc_r+0x80>
 8024170:	0028      	movs	r0, r5
 8024172:	f000 f883 	bl	802427c <__malloc_lock>
 8024176:	4e37      	ldr	r6, [pc, #220]	@ (8024254 <_malloc_r+0xfc>)
 8024178:	6833      	ldr	r3, [r6, #0]
 802417a:	001c      	movs	r4, r3
 802417c:	2c00      	cmp	r4, #0
 802417e:	d12f      	bne.n	80241e0 <_malloc_r+0x88>
 8024180:	0039      	movs	r1, r7
 8024182:	0028      	movs	r0, r5
 8024184:	f7ff ffc6 	bl	8024114 <sbrk_aligned>
 8024188:	0004      	movs	r4, r0
 802418a:	1c43      	adds	r3, r0, #1
 802418c:	d15f      	bne.n	802424e <_malloc_r+0xf6>
 802418e:	6834      	ldr	r4, [r6, #0]
 8024190:	9400      	str	r4, [sp, #0]
 8024192:	9b00      	ldr	r3, [sp, #0]
 8024194:	2b00      	cmp	r3, #0
 8024196:	d14a      	bne.n	802422e <_malloc_r+0xd6>
 8024198:	2c00      	cmp	r4, #0
 802419a:	d052      	beq.n	8024242 <_malloc_r+0xea>
 802419c:	6823      	ldr	r3, [r4, #0]
 802419e:	0028      	movs	r0, r5
 80241a0:	18e3      	adds	r3, r4, r3
 80241a2:	9900      	ldr	r1, [sp, #0]
 80241a4:	9301      	str	r3, [sp, #4]
 80241a6:	f001 f947 	bl	8025438 <_sbrk_r>
 80241aa:	9b01      	ldr	r3, [sp, #4]
 80241ac:	4283      	cmp	r3, r0
 80241ae:	d148      	bne.n	8024242 <_malloc_r+0xea>
 80241b0:	6823      	ldr	r3, [r4, #0]
 80241b2:	0028      	movs	r0, r5
 80241b4:	1aff      	subs	r7, r7, r3
 80241b6:	0039      	movs	r1, r7
 80241b8:	f7ff ffac 	bl	8024114 <sbrk_aligned>
 80241bc:	3001      	adds	r0, #1
 80241be:	d040      	beq.n	8024242 <_malloc_r+0xea>
 80241c0:	6823      	ldr	r3, [r4, #0]
 80241c2:	19db      	adds	r3, r3, r7
 80241c4:	6023      	str	r3, [r4, #0]
 80241c6:	6833      	ldr	r3, [r6, #0]
 80241c8:	685a      	ldr	r2, [r3, #4]
 80241ca:	2a00      	cmp	r2, #0
 80241cc:	d133      	bne.n	8024236 <_malloc_r+0xde>
 80241ce:	9b00      	ldr	r3, [sp, #0]
 80241d0:	6033      	str	r3, [r6, #0]
 80241d2:	e019      	b.n	8024208 <_malloc_r+0xb0>
 80241d4:	2b00      	cmp	r3, #0
 80241d6:	dac9      	bge.n	802416c <_malloc_r+0x14>
 80241d8:	230c      	movs	r3, #12
 80241da:	602b      	str	r3, [r5, #0]
 80241dc:	2000      	movs	r0, #0
 80241de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80241e0:	6821      	ldr	r1, [r4, #0]
 80241e2:	1bc9      	subs	r1, r1, r7
 80241e4:	d420      	bmi.n	8024228 <_malloc_r+0xd0>
 80241e6:	290b      	cmp	r1, #11
 80241e8:	d90a      	bls.n	8024200 <_malloc_r+0xa8>
 80241ea:	19e2      	adds	r2, r4, r7
 80241ec:	6027      	str	r7, [r4, #0]
 80241ee:	42a3      	cmp	r3, r4
 80241f0:	d104      	bne.n	80241fc <_malloc_r+0xa4>
 80241f2:	6032      	str	r2, [r6, #0]
 80241f4:	6863      	ldr	r3, [r4, #4]
 80241f6:	6011      	str	r1, [r2, #0]
 80241f8:	6053      	str	r3, [r2, #4]
 80241fa:	e005      	b.n	8024208 <_malloc_r+0xb0>
 80241fc:	605a      	str	r2, [r3, #4]
 80241fe:	e7f9      	b.n	80241f4 <_malloc_r+0x9c>
 8024200:	6862      	ldr	r2, [r4, #4]
 8024202:	42a3      	cmp	r3, r4
 8024204:	d10e      	bne.n	8024224 <_malloc_r+0xcc>
 8024206:	6032      	str	r2, [r6, #0]
 8024208:	0028      	movs	r0, r5
 802420a:	f000 f83f 	bl	802428c <__malloc_unlock>
 802420e:	0020      	movs	r0, r4
 8024210:	2207      	movs	r2, #7
 8024212:	300b      	adds	r0, #11
 8024214:	1d23      	adds	r3, r4, #4
 8024216:	4390      	bics	r0, r2
 8024218:	1ac2      	subs	r2, r0, r3
 802421a:	4298      	cmp	r0, r3
 802421c:	d0df      	beq.n	80241de <_malloc_r+0x86>
 802421e:	1a1b      	subs	r3, r3, r0
 8024220:	50a3      	str	r3, [r4, r2]
 8024222:	e7dc      	b.n	80241de <_malloc_r+0x86>
 8024224:	605a      	str	r2, [r3, #4]
 8024226:	e7ef      	b.n	8024208 <_malloc_r+0xb0>
 8024228:	0023      	movs	r3, r4
 802422a:	6864      	ldr	r4, [r4, #4]
 802422c:	e7a6      	b.n	802417c <_malloc_r+0x24>
 802422e:	9c00      	ldr	r4, [sp, #0]
 8024230:	6863      	ldr	r3, [r4, #4]
 8024232:	9300      	str	r3, [sp, #0]
 8024234:	e7ad      	b.n	8024192 <_malloc_r+0x3a>
 8024236:	001a      	movs	r2, r3
 8024238:	685b      	ldr	r3, [r3, #4]
 802423a:	42a3      	cmp	r3, r4
 802423c:	d1fb      	bne.n	8024236 <_malloc_r+0xde>
 802423e:	2300      	movs	r3, #0
 8024240:	e7da      	b.n	80241f8 <_malloc_r+0xa0>
 8024242:	230c      	movs	r3, #12
 8024244:	0028      	movs	r0, r5
 8024246:	602b      	str	r3, [r5, #0]
 8024248:	f000 f820 	bl	802428c <__malloc_unlock>
 802424c:	e7c6      	b.n	80241dc <_malloc_r+0x84>
 802424e:	6007      	str	r7, [r0, #0]
 8024250:	e7da      	b.n	8024208 <_malloc_r+0xb0>
 8024252:	46c0      	nop			@ (mov r8, r8)
 8024254:	20003594 	.word	0x20003594

08024258 <__ascii_mbtowc>:
 8024258:	b082      	sub	sp, #8
 802425a:	2900      	cmp	r1, #0
 802425c:	d100      	bne.n	8024260 <__ascii_mbtowc+0x8>
 802425e:	a901      	add	r1, sp, #4
 8024260:	1e10      	subs	r0, r2, #0
 8024262:	d006      	beq.n	8024272 <__ascii_mbtowc+0x1a>
 8024264:	2b00      	cmp	r3, #0
 8024266:	d006      	beq.n	8024276 <__ascii_mbtowc+0x1e>
 8024268:	7813      	ldrb	r3, [r2, #0]
 802426a:	600b      	str	r3, [r1, #0]
 802426c:	7810      	ldrb	r0, [r2, #0]
 802426e:	1e43      	subs	r3, r0, #1
 8024270:	4198      	sbcs	r0, r3
 8024272:	b002      	add	sp, #8
 8024274:	4770      	bx	lr
 8024276:	2002      	movs	r0, #2
 8024278:	4240      	negs	r0, r0
 802427a:	e7fa      	b.n	8024272 <__ascii_mbtowc+0x1a>

0802427c <__malloc_lock>:
 802427c:	b510      	push	{r4, lr}
 802427e:	4802      	ldr	r0, [pc, #8]	@ (8024288 <__malloc_lock+0xc>)
 8024280:	f7fe fcfb 	bl	8022c7a <__retarget_lock_acquire_recursive>
 8024284:	bd10      	pop	{r4, pc}
 8024286:	46c0      	nop			@ (mov r8, r8)
 8024288:	2000358c 	.word	0x2000358c

0802428c <__malloc_unlock>:
 802428c:	b510      	push	{r4, lr}
 802428e:	4802      	ldr	r0, [pc, #8]	@ (8024298 <__malloc_unlock+0xc>)
 8024290:	f7fe fcf4 	bl	8022c7c <__retarget_lock_release_recursive>
 8024294:	bd10      	pop	{r4, pc}
 8024296:	46c0      	nop			@ (mov r8, r8)
 8024298:	2000358c 	.word	0x2000358c

0802429c <_Balloc>:
 802429c:	b570      	push	{r4, r5, r6, lr}
 802429e:	69c5      	ldr	r5, [r0, #28]
 80242a0:	0006      	movs	r6, r0
 80242a2:	000c      	movs	r4, r1
 80242a4:	2d00      	cmp	r5, #0
 80242a6:	d10e      	bne.n	80242c6 <_Balloc+0x2a>
 80242a8:	2010      	movs	r0, #16
 80242aa:	f7ff ff29 	bl	8024100 <malloc>
 80242ae:	1e02      	subs	r2, r0, #0
 80242b0:	61f0      	str	r0, [r6, #28]
 80242b2:	d104      	bne.n	80242be <_Balloc+0x22>
 80242b4:	216b      	movs	r1, #107	@ 0x6b
 80242b6:	4b19      	ldr	r3, [pc, #100]	@ (802431c <_Balloc+0x80>)
 80242b8:	4819      	ldr	r0, [pc, #100]	@ (8024320 <_Balloc+0x84>)
 80242ba:	f001 f8cf 	bl	802545c <__assert_func>
 80242be:	6045      	str	r5, [r0, #4]
 80242c0:	6085      	str	r5, [r0, #8]
 80242c2:	6005      	str	r5, [r0, #0]
 80242c4:	60c5      	str	r5, [r0, #12]
 80242c6:	69f5      	ldr	r5, [r6, #28]
 80242c8:	68eb      	ldr	r3, [r5, #12]
 80242ca:	2b00      	cmp	r3, #0
 80242cc:	d013      	beq.n	80242f6 <_Balloc+0x5a>
 80242ce:	69f3      	ldr	r3, [r6, #28]
 80242d0:	00a2      	lsls	r2, r4, #2
 80242d2:	68db      	ldr	r3, [r3, #12]
 80242d4:	189b      	adds	r3, r3, r2
 80242d6:	6818      	ldr	r0, [r3, #0]
 80242d8:	2800      	cmp	r0, #0
 80242da:	d118      	bne.n	802430e <_Balloc+0x72>
 80242dc:	2101      	movs	r1, #1
 80242de:	000d      	movs	r5, r1
 80242e0:	40a5      	lsls	r5, r4
 80242e2:	1d6a      	adds	r2, r5, #5
 80242e4:	0030      	movs	r0, r6
 80242e6:	0092      	lsls	r2, r2, #2
 80242e8:	f001 f8d6 	bl	8025498 <_calloc_r>
 80242ec:	2800      	cmp	r0, #0
 80242ee:	d00c      	beq.n	802430a <_Balloc+0x6e>
 80242f0:	6044      	str	r4, [r0, #4]
 80242f2:	6085      	str	r5, [r0, #8]
 80242f4:	e00d      	b.n	8024312 <_Balloc+0x76>
 80242f6:	2221      	movs	r2, #33	@ 0x21
 80242f8:	2104      	movs	r1, #4
 80242fa:	0030      	movs	r0, r6
 80242fc:	f001 f8cc 	bl	8025498 <_calloc_r>
 8024300:	69f3      	ldr	r3, [r6, #28]
 8024302:	60e8      	str	r0, [r5, #12]
 8024304:	68db      	ldr	r3, [r3, #12]
 8024306:	2b00      	cmp	r3, #0
 8024308:	d1e1      	bne.n	80242ce <_Balloc+0x32>
 802430a:	2000      	movs	r0, #0
 802430c:	bd70      	pop	{r4, r5, r6, pc}
 802430e:	6802      	ldr	r2, [r0, #0]
 8024310:	601a      	str	r2, [r3, #0]
 8024312:	2300      	movs	r3, #0
 8024314:	6103      	str	r3, [r0, #16]
 8024316:	60c3      	str	r3, [r0, #12]
 8024318:	e7f8      	b.n	802430c <_Balloc+0x70>
 802431a:	46c0      	nop			@ (mov r8, r8)
 802431c:	08029672 	.word	0x08029672
 8024320:	08029752 	.word	0x08029752

08024324 <_Bfree>:
 8024324:	b570      	push	{r4, r5, r6, lr}
 8024326:	69c6      	ldr	r6, [r0, #28]
 8024328:	0005      	movs	r5, r0
 802432a:	000c      	movs	r4, r1
 802432c:	2e00      	cmp	r6, #0
 802432e:	d10e      	bne.n	802434e <_Bfree+0x2a>
 8024330:	2010      	movs	r0, #16
 8024332:	f7ff fee5 	bl	8024100 <malloc>
 8024336:	1e02      	subs	r2, r0, #0
 8024338:	61e8      	str	r0, [r5, #28]
 802433a:	d104      	bne.n	8024346 <_Bfree+0x22>
 802433c:	218f      	movs	r1, #143	@ 0x8f
 802433e:	4b09      	ldr	r3, [pc, #36]	@ (8024364 <_Bfree+0x40>)
 8024340:	4809      	ldr	r0, [pc, #36]	@ (8024368 <_Bfree+0x44>)
 8024342:	f001 f88b 	bl	802545c <__assert_func>
 8024346:	6046      	str	r6, [r0, #4]
 8024348:	6086      	str	r6, [r0, #8]
 802434a:	6006      	str	r6, [r0, #0]
 802434c:	60c6      	str	r6, [r0, #12]
 802434e:	2c00      	cmp	r4, #0
 8024350:	d007      	beq.n	8024362 <_Bfree+0x3e>
 8024352:	69eb      	ldr	r3, [r5, #28]
 8024354:	6862      	ldr	r2, [r4, #4]
 8024356:	68db      	ldr	r3, [r3, #12]
 8024358:	0092      	lsls	r2, r2, #2
 802435a:	189b      	adds	r3, r3, r2
 802435c:	681a      	ldr	r2, [r3, #0]
 802435e:	6022      	str	r2, [r4, #0]
 8024360:	601c      	str	r4, [r3, #0]
 8024362:	bd70      	pop	{r4, r5, r6, pc}
 8024364:	08029672 	.word	0x08029672
 8024368:	08029752 	.word	0x08029752

0802436c <__multadd>:
 802436c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802436e:	000f      	movs	r7, r1
 8024370:	9001      	str	r0, [sp, #4]
 8024372:	000c      	movs	r4, r1
 8024374:	001e      	movs	r6, r3
 8024376:	2000      	movs	r0, #0
 8024378:	690d      	ldr	r5, [r1, #16]
 802437a:	3714      	adds	r7, #20
 802437c:	683b      	ldr	r3, [r7, #0]
 802437e:	3001      	adds	r0, #1
 8024380:	b299      	uxth	r1, r3
 8024382:	4351      	muls	r1, r2
 8024384:	0c1b      	lsrs	r3, r3, #16
 8024386:	4353      	muls	r3, r2
 8024388:	1989      	adds	r1, r1, r6
 802438a:	0c0e      	lsrs	r6, r1, #16
 802438c:	199b      	adds	r3, r3, r6
 802438e:	0c1e      	lsrs	r6, r3, #16
 8024390:	b289      	uxth	r1, r1
 8024392:	041b      	lsls	r3, r3, #16
 8024394:	185b      	adds	r3, r3, r1
 8024396:	c708      	stmia	r7!, {r3}
 8024398:	4285      	cmp	r5, r0
 802439a:	dcef      	bgt.n	802437c <__multadd+0x10>
 802439c:	2e00      	cmp	r6, #0
 802439e:	d022      	beq.n	80243e6 <__multadd+0x7a>
 80243a0:	68a3      	ldr	r3, [r4, #8]
 80243a2:	42ab      	cmp	r3, r5
 80243a4:	dc19      	bgt.n	80243da <__multadd+0x6e>
 80243a6:	6861      	ldr	r1, [r4, #4]
 80243a8:	9801      	ldr	r0, [sp, #4]
 80243aa:	3101      	adds	r1, #1
 80243ac:	f7ff ff76 	bl	802429c <_Balloc>
 80243b0:	1e07      	subs	r7, r0, #0
 80243b2:	d105      	bne.n	80243c0 <__multadd+0x54>
 80243b4:	003a      	movs	r2, r7
 80243b6:	21ba      	movs	r1, #186	@ 0xba
 80243b8:	4b0c      	ldr	r3, [pc, #48]	@ (80243ec <__multadd+0x80>)
 80243ba:	480d      	ldr	r0, [pc, #52]	@ (80243f0 <__multadd+0x84>)
 80243bc:	f001 f84e 	bl	802545c <__assert_func>
 80243c0:	0021      	movs	r1, r4
 80243c2:	6922      	ldr	r2, [r4, #16]
 80243c4:	310c      	adds	r1, #12
 80243c6:	3202      	adds	r2, #2
 80243c8:	0092      	lsls	r2, r2, #2
 80243ca:	300c      	adds	r0, #12
 80243cc:	f7fe fc62 	bl	8022c94 <memcpy>
 80243d0:	0021      	movs	r1, r4
 80243d2:	9801      	ldr	r0, [sp, #4]
 80243d4:	f7ff ffa6 	bl	8024324 <_Bfree>
 80243d8:	003c      	movs	r4, r7
 80243da:	1d2b      	adds	r3, r5, #4
 80243dc:	009b      	lsls	r3, r3, #2
 80243de:	18e3      	adds	r3, r4, r3
 80243e0:	3501      	adds	r5, #1
 80243e2:	605e      	str	r6, [r3, #4]
 80243e4:	6125      	str	r5, [r4, #16]
 80243e6:	0020      	movs	r0, r4
 80243e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80243ea:	46c0      	nop			@ (mov r8, r8)
 80243ec:	080296e1 	.word	0x080296e1
 80243f0:	08029752 	.word	0x08029752

080243f4 <__s2b>:
 80243f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80243f6:	0007      	movs	r7, r0
 80243f8:	0018      	movs	r0, r3
 80243fa:	000c      	movs	r4, r1
 80243fc:	3008      	adds	r0, #8
 80243fe:	2109      	movs	r1, #9
 8024400:	9301      	str	r3, [sp, #4]
 8024402:	0015      	movs	r5, r2
 8024404:	f7db ff58 	bl	80002b8 <__divsi3>
 8024408:	2301      	movs	r3, #1
 802440a:	2100      	movs	r1, #0
 802440c:	4283      	cmp	r3, r0
 802440e:	db0a      	blt.n	8024426 <__s2b+0x32>
 8024410:	0038      	movs	r0, r7
 8024412:	f7ff ff43 	bl	802429c <_Balloc>
 8024416:	1e01      	subs	r1, r0, #0
 8024418:	d108      	bne.n	802442c <__s2b+0x38>
 802441a:	000a      	movs	r2, r1
 802441c:	4b19      	ldr	r3, [pc, #100]	@ (8024484 <__s2b+0x90>)
 802441e:	481a      	ldr	r0, [pc, #104]	@ (8024488 <__s2b+0x94>)
 8024420:	31d3      	adds	r1, #211	@ 0xd3
 8024422:	f001 f81b 	bl	802545c <__assert_func>
 8024426:	005b      	lsls	r3, r3, #1
 8024428:	3101      	adds	r1, #1
 802442a:	e7ef      	b.n	802440c <__s2b+0x18>
 802442c:	9b08      	ldr	r3, [sp, #32]
 802442e:	6143      	str	r3, [r0, #20]
 8024430:	2301      	movs	r3, #1
 8024432:	6103      	str	r3, [r0, #16]
 8024434:	2d09      	cmp	r5, #9
 8024436:	dd18      	ble.n	802446a <__s2b+0x76>
 8024438:	0023      	movs	r3, r4
 802443a:	3309      	adds	r3, #9
 802443c:	001e      	movs	r6, r3
 802443e:	9300      	str	r3, [sp, #0]
 8024440:	1964      	adds	r4, r4, r5
 8024442:	7833      	ldrb	r3, [r6, #0]
 8024444:	220a      	movs	r2, #10
 8024446:	0038      	movs	r0, r7
 8024448:	3b30      	subs	r3, #48	@ 0x30
 802444a:	f7ff ff8f 	bl	802436c <__multadd>
 802444e:	3601      	adds	r6, #1
 8024450:	0001      	movs	r1, r0
 8024452:	42a6      	cmp	r6, r4
 8024454:	d1f5      	bne.n	8024442 <__s2b+0x4e>
 8024456:	002c      	movs	r4, r5
 8024458:	9b00      	ldr	r3, [sp, #0]
 802445a:	3c08      	subs	r4, #8
 802445c:	191c      	adds	r4, r3, r4
 802445e:	002e      	movs	r6, r5
 8024460:	9b01      	ldr	r3, [sp, #4]
 8024462:	429e      	cmp	r6, r3
 8024464:	db04      	blt.n	8024470 <__s2b+0x7c>
 8024466:	0008      	movs	r0, r1
 8024468:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802446a:	2509      	movs	r5, #9
 802446c:	340a      	adds	r4, #10
 802446e:	e7f6      	b.n	802445e <__s2b+0x6a>
 8024470:	1b63      	subs	r3, r4, r5
 8024472:	5d9b      	ldrb	r3, [r3, r6]
 8024474:	220a      	movs	r2, #10
 8024476:	0038      	movs	r0, r7
 8024478:	3b30      	subs	r3, #48	@ 0x30
 802447a:	f7ff ff77 	bl	802436c <__multadd>
 802447e:	3601      	adds	r6, #1
 8024480:	0001      	movs	r1, r0
 8024482:	e7ed      	b.n	8024460 <__s2b+0x6c>
 8024484:	080296e1 	.word	0x080296e1
 8024488:	08029752 	.word	0x08029752

0802448c <__hi0bits>:
 802448c:	2280      	movs	r2, #128	@ 0x80
 802448e:	0003      	movs	r3, r0
 8024490:	0252      	lsls	r2, r2, #9
 8024492:	2000      	movs	r0, #0
 8024494:	4293      	cmp	r3, r2
 8024496:	d201      	bcs.n	802449c <__hi0bits+0x10>
 8024498:	041b      	lsls	r3, r3, #16
 802449a:	3010      	adds	r0, #16
 802449c:	2280      	movs	r2, #128	@ 0x80
 802449e:	0452      	lsls	r2, r2, #17
 80244a0:	4293      	cmp	r3, r2
 80244a2:	d201      	bcs.n	80244a8 <__hi0bits+0x1c>
 80244a4:	3008      	adds	r0, #8
 80244a6:	021b      	lsls	r3, r3, #8
 80244a8:	2280      	movs	r2, #128	@ 0x80
 80244aa:	0552      	lsls	r2, r2, #21
 80244ac:	4293      	cmp	r3, r2
 80244ae:	d201      	bcs.n	80244b4 <__hi0bits+0x28>
 80244b0:	3004      	adds	r0, #4
 80244b2:	011b      	lsls	r3, r3, #4
 80244b4:	2280      	movs	r2, #128	@ 0x80
 80244b6:	05d2      	lsls	r2, r2, #23
 80244b8:	4293      	cmp	r3, r2
 80244ba:	d201      	bcs.n	80244c0 <__hi0bits+0x34>
 80244bc:	3002      	adds	r0, #2
 80244be:	009b      	lsls	r3, r3, #2
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	db03      	blt.n	80244cc <__hi0bits+0x40>
 80244c4:	3001      	adds	r0, #1
 80244c6:	4213      	tst	r3, r2
 80244c8:	d100      	bne.n	80244cc <__hi0bits+0x40>
 80244ca:	2020      	movs	r0, #32
 80244cc:	4770      	bx	lr

080244ce <__lo0bits>:
 80244ce:	6803      	ldr	r3, [r0, #0]
 80244d0:	0001      	movs	r1, r0
 80244d2:	2207      	movs	r2, #7
 80244d4:	0018      	movs	r0, r3
 80244d6:	4010      	ands	r0, r2
 80244d8:	4213      	tst	r3, r2
 80244da:	d00d      	beq.n	80244f8 <__lo0bits+0x2a>
 80244dc:	3a06      	subs	r2, #6
 80244de:	2000      	movs	r0, #0
 80244e0:	4213      	tst	r3, r2
 80244e2:	d105      	bne.n	80244f0 <__lo0bits+0x22>
 80244e4:	3002      	adds	r0, #2
 80244e6:	4203      	tst	r3, r0
 80244e8:	d003      	beq.n	80244f2 <__lo0bits+0x24>
 80244ea:	40d3      	lsrs	r3, r2
 80244ec:	0010      	movs	r0, r2
 80244ee:	600b      	str	r3, [r1, #0]
 80244f0:	4770      	bx	lr
 80244f2:	089b      	lsrs	r3, r3, #2
 80244f4:	600b      	str	r3, [r1, #0]
 80244f6:	e7fb      	b.n	80244f0 <__lo0bits+0x22>
 80244f8:	b29a      	uxth	r2, r3
 80244fa:	2a00      	cmp	r2, #0
 80244fc:	d101      	bne.n	8024502 <__lo0bits+0x34>
 80244fe:	2010      	movs	r0, #16
 8024500:	0c1b      	lsrs	r3, r3, #16
 8024502:	b2da      	uxtb	r2, r3
 8024504:	2a00      	cmp	r2, #0
 8024506:	d101      	bne.n	802450c <__lo0bits+0x3e>
 8024508:	3008      	adds	r0, #8
 802450a:	0a1b      	lsrs	r3, r3, #8
 802450c:	071a      	lsls	r2, r3, #28
 802450e:	d101      	bne.n	8024514 <__lo0bits+0x46>
 8024510:	3004      	adds	r0, #4
 8024512:	091b      	lsrs	r3, r3, #4
 8024514:	079a      	lsls	r2, r3, #30
 8024516:	d101      	bne.n	802451c <__lo0bits+0x4e>
 8024518:	3002      	adds	r0, #2
 802451a:	089b      	lsrs	r3, r3, #2
 802451c:	07da      	lsls	r2, r3, #31
 802451e:	d4e9      	bmi.n	80244f4 <__lo0bits+0x26>
 8024520:	3001      	adds	r0, #1
 8024522:	085b      	lsrs	r3, r3, #1
 8024524:	d1e6      	bne.n	80244f4 <__lo0bits+0x26>
 8024526:	2020      	movs	r0, #32
 8024528:	e7e2      	b.n	80244f0 <__lo0bits+0x22>
	...

0802452c <__i2b>:
 802452c:	b510      	push	{r4, lr}
 802452e:	000c      	movs	r4, r1
 8024530:	2101      	movs	r1, #1
 8024532:	f7ff feb3 	bl	802429c <_Balloc>
 8024536:	2800      	cmp	r0, #0
 8024538:	d107      	bne.n	802454a <__i2b+0x1e>
 802453a:	2146      	movs	r1, #70	@ 0x46
 802453c:	4c05      	ldr	r4, [pc, #20]	@ (8024554 <__i2b+0x28>)
 802453e:	0002      	movs	r2, r0
 8024540:	4b05      	ldr	r3, [pc, #20]	@ (8024558 <__i2b+0x2c>)
 8024542:	0020      	movs	r0, r4
 8024544:	31ff      	adds	r1, #255	@ 0xff
 8024546:	f000 ff89 	bl	802545c <__assert_func>
 802454a:	2301      	movs	r3, #1
 802454c:	6144      	str	r4, [r0, #20]
 802454e:	6103      	str	r3, [r0, #16]
 8024550:	bd10      	pop	{r4, pc}
 8024552:	46c0      	nop			@ (mov r8, r8)
 8024554:	08029752 	.word	0x08029752
 8024558:	080296e1 	.word	0x080296e1

0802455c <__multiply>:
 802455c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802455e:	0014      	movs	r4, r2
 8024560:	690a      	ldr	r2, [r1, #16]
 8024562:	6923      	ldr	r3, [r4, #16]
 8024564:	000d      	movs	r5, r1
 8024566:	b08b      	sub	sp, #44	@ 0x2c
 8024568:	429a      	cmp	r2, r3
 802456a:	db02      	blt.n	8024572 <__multiply+0x16>
 802456c:	0023      	movs	r3, r4
 802456e:	000c      	movs	r4, r1
 8024570:	001d      	movs	r5, r3
 8024572:	6927      	ldr	r7, [r4, #16]
 8024574:	692e      	ldr	r6, [r5, #16]
 8024576:	6861      	ldr	r1, [r4, #4]
 8024578:	19bb      	adds	r3, r7, r6
 802457a:	9303      	str	r3, [sp, #12]
 802457c:	68a3      	ldr	r3, [r4, #8]
 802457e:	19ba      	adds	r2, r7, r6
 8024580:	4293      	cmp	r3, r2
 8024582:	da00      	bge.n	8024586 <__multiply+0x2a>
 8024584:	3101      	adds	r1, #1
 8024586:	f7ff fe89 	bl	802429c <_Balloc>
 802458a:	9002      	str	r0, [sp, #8]
 802458c:	2800      	cmp	r0, #0
 802458e:	d106      	bne.n	802459e <__multiply+0x42>
 8024590:	21b1      	movs	r1, #177	@ 0xb1
 8024592:	4b49      	ldr	r3, [pc, #292]	@ (80246b8 <__multiply+0x15c>)
 8024594:	4849      	ldr	r0, [pc, #292]	@ (80246bc <__multiply+0x160>)
 8024596:	9a02      	ldr	r2, [sp, #8]
 8024598:	0049      	lsls	r1, r1, #1
 802459a:	f000 ff5f 	bl	802545c <__assert_func>
 802459e:	9b02      	ldr	r3, [sp, #8]
 80245a0:	2200      	movs	r2, #0
 80245a2:	3314      	adds	r3, #20
 80245a4:	469c      	mov	ip, r3
 80245a6:	19bb      	adds	r3, r7, r6
 80245a8:	009b      	lsls	r3, r3, #2
 80245aa:	4463      	add	r3, ip
 80245ac:	9304      	str	r3, [sp, #16]
 80245ae:	4663      	mov	r3, ip
 80245b0:	9904      	ldr	r1, [sp, #16]
 80245b2:	428b      	cmp	r3, r1
 80245b4:	d32a      	bcc.n	802460c <__multiply+0xb0>
 80245b6:	0023      	movs	r3, r4
 80245b8:	00bf      	lsls	r7, r7, #2
 80245ba:	3314      	adds	r3, #20
 80245bc:	3514      	adds	r5, #20
 80245be:	9308      	str	r3, [sp, #32]
 80245c0:	00b6      	lsls	r6, r6, #2
 80245c2:	19db      	adds	r3, r3, r7
 80245c4:	9305      	str	r3, [sp, #20]
 80245c6:	19ab      	adds	r3, r5, r6
 80245c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80245ca:	2304      	movs	r3, #4
 80245cc:	9306      	str	r3, [sp, #24]
 80245ce:	0023      	movs	r3, r4
 80245d0:	9a05      	ldr	r2, [sp, #20]
 80245d2:	3315      	adds	r3, #21
 80245d4:	9501      	str	r5, [sp, #4]
 80245d6:	429a      	cmp	r2, r3
 80245d8:	d305      	bcc.n	80245e6 <__multiply+0x8a>
 80245da:	1b13      	subs	r3, r2, r4
 80245dc:	3b15      	subs	r3, #21
 80245de:	089b      	lsrs	r3, r3, #2
 80245e0:	3301      	adds	r3, #1
 80245e2:	009b      	lsls	r3, r3, #2
 80245e4:	9306      	str	r3, [sp, #24]
 80245e6:	9b01      	ldr	r3, [sp, #4]
 80245e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80245ea:	4293      	cmp	r3, r2
 80245ec:	d310      	bcc.n	8024610 <__multiply+0xb4>
 80245ee:	9b03      	ldr	r3, [sp, #12]
 80245f0:	2b00      	cmp	r3, #0
 80245f2:	dd05      	ble.n	8024600 <__multiply+0xa4>
 80245f4:	9b04      	ldr	r3, [sp, #16]
 80245f6:	3b04      	subs	r3, #4
 80245f8:	9304      	str	r3, [sp, #16]
 80245fa:	681b      	ldr	r3, [r3, #0]
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	d056      	beq.n	80246ae <__multiply+0x152>
 8024600:	9b02      	ldr	r3, [sp, #8]
 8024602:	9a03      	ldr	r2, [sp, #12]
 8024604:	0018      	movs	r0, r3
 8024606:	611a      	str	r2, [r3, #16]
 8024608:	b00b      	add	sp, #44	@ 0x2c
 802460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802460c:	c304      	stmia	r3!, {r2}
 802460e:	e7cf      	b.n	80245b0 <__multiply+0x54>
 8024610:	9b01      	ldr	r3, [sp, #4]
 8024612:	6818      	ldr	r0, [r3, #0]
 8024614:	b280      	uxth	r0, r0
 8024616:	2800      	cmp	r0, #0
 8024618:	d01e      	beq.n	8024658 <__multiply+0xfc>
 802461a:	4667      	mov	r7, ip
 802461c:	2500      	movs	r5, #0
 802461e:	9e08      	ldr	r6, [sp, #32]
 8024620:	ce02      	ldmia	r6!, {r1}
 8024622:	683b      	ldr	r3, [r7, #0]
 8024624:	9307      	str	r3, [sp, #28]
 8024626:	b28b      	uxth	r3, r1
 8024628:	4343      	muls	r3, r0
 802462a:	001a      	movs	r2, r3
 802462c:	466b      	mov	r3, sp
 802462e:	0c09      	lsrs	r1, r1, #16
 8024630:	8b9b      	ldrh	r3, [r3, #28]
 8024632:	4341      	muls	r1, r0
 8024634:	18d3      	adds	r3, r2, r3
 8024636:	9a07      	ldr	r2, [sp, #28]
 8024638:	195b      	adds	r3, r3, r5
 802463a:	0c12      	lsrs	r2, r2, #16
 802463c:	1889      	adds	r1, r1, r2
 802463e:	0c1a      	lsrs	r2, r3, #16
 8024640:	188a      	adds	r2, r1, r2
 8024642:	b29b      	uxth	r3, r3
 8024644:	0c15      	lsrs	r5, r2, #16
 8024646:	0412      	lsls	r2, r2, #16
 8024648:	431a      	orrs	r2, r3
 802464a:	9b05      	ldr	r3, [sp, #20]
 802464c:	c704      	stmia	r7!, {r2}
 802464e:	42b3      	cmp	r3, r6
 8024650:	d8e6      	bhi.n	8024620 <__multiply+0xc4>
 8024652:	4663      	mov	r3, ip
 8024654:	9a06      	ldr	r2, [sp, #24]
 8024656:	509d      	str	r5, [r3, r2]
 8024658:	9b01      	ldr	r3, [sp, #4]
 802465a:	6818      	ldr	r0, [r3, #0]
 802465c:	0c00      	lsrs	r0, r0, #16
 802465e:	d020      	beq.n	80246a2 <__multiply+0x146>
 8024660:	4663      	mov	r3, ip
 8024662:	0025      	movs	r5, r4
 8024664:	4661      	mov	r1, ip
 8024666:	2700      	movs	r7, #0
 8024668:	681b      	ldr	r3, [r3, #0]
 802466a:	3514      	adds	r5, #20
 802466c:	682a      	ldr	r2, [r5, #0]
 802466e:	680e      	ldr	r6, [r1, #0]
 8024670:	b292      	uxth	r2, r2
 8024672:	4342      	muls	r2, r0
 8024674:	0c36      	lsrs	r6, r6, #16
 8024676:	1992      	adds	r2, r2, r6
 8024678:	19d2      	adds	r2, r2, r7
 802467a:	0416      	lsls	r6, r2, #16
 802467c:	b29b      	uxth	r3, r3
 802467e:	431e      	orrs	r6, r3
 8024680:	600e      	str	r6, [r1, #0]
 8024682:	cd40      	ldmia	r5!, {r6}
 8024684:	684b      	ldr	r3, [r1, #4]
 8024686:	0c36      	lsrs	r6, r6, #16
 8024688:	4346      	muls	r6, r0
 802468a:	b29b      	uxth	r3, r3
 802468c:	0c12      	lsrs	r2, r2, #16
 802468e:	18f3      	adds	r3, r6, r3
 8024690:	189b      	adds	r3, r3, r2
 8024692:	9a05      	ldr	r2, [sp, #20]
 8024694:	0c1f      	lsrs	r7, r3, #16
 8024696:	3104      	adds	r1, #4
 8024698:	42aa      	cmp	r2, r5
 802469a:	d8e7      	bhi.n	802466c <__multiply+0x110>
 802469c:	4662      	mov	r2, ip
 802469e:	9906      	ldr	r1, [sp, #24]
 80246a0:	5053      	str	r3, [r2, r1]
 80246a2:	9b01      	ldr	r3, [sp, #4]
 80246a4:	3304      	adds	r3, #4
 80246a6:	9301      	str	r3, [sp, #4]
 80246a8:	2304      	movs	r3, #4
 80246aa:	449c      	add	ip, r3
 80246ac:	e79b      	b.n	80245e6 <__multiply+0x8a>
 80246ae:	9b03      	ldr	r3, [sp, #12]
 80246b0:	3b01      	subs	r3, #1
 80246b2:	9303      	str	r3, [sp, #12]
 80246b4:	e79b      	b.n	80245ee <__multiply+0x92>
 80246b6:	46c0      	nop			@ (mov r8, r8)
 80246b8:	080296e1 	.word	0x080296e1
 80246bc:	08029752 	.word	0x08029752

080246c0 <__pow5mult>:
 80246c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80246c2:	2303      	movs	r3, #3
 80246c4:	0015      	movs	r5, r2
 80246c6:	0007      	movs	r7, r0
 80246c8:	000e      	movs	r6, r1
 80246ca:	401a      	ands	r2, r3
 80246cc:	421d      	tst	r5, r3
 80246ce:	d008      	beq.n	80246e2 <__pow5mult+0x22>
 80246d0:	4925      	ldr	r1, [pc, #148]	@ (8024768 <__pow5mult+0xa8>)
 80246d2:	3a01      	subs	r2, #1
 80246d4:	0092      	lsls	r2, r2, #2
 80246d6:	5852      	ldr	r2, [r2, r1]
 80246d8:	2300      	movs	r3, #0
 80246da:	0031      	movs	r1, r6
 80246dc:	f7ff fe46 	bl	802436c <__multadd>
 80246e0:	0006      	movs	r6, r0
 80246e2:	10ad      	asrs	r5, r5, #2
 80246e4:	d03d      	beq.n	8024762 <__pow5mult+0xa2>
 80246e6:	69fc      	ldr	r4, [r7, #28]
 80246e8:	2c00      	cmp	r4, #0
 80246ea:	d10f      	bne.n	802470c <__pow5mult+0x4c>
 80246ec:	2010      	movs	r0, #16
 80246ee:	f7ff fd07 	bl	8024100 <malloc>
 80246f2:	1e02      	subs	r2, r0, #0
 80246f4:	61f8      	str	r0, [r7, #28]
 80246f6:	d105      	bne.n	8024704 <__pow5mult+0x44>
 80246f8:	21b4      	movs	r1, #180	@ 0xb4
 80246fa:	4b1c      	ldr	r3, [pc, #112]	@ (802476c <__pow5mult+0xac>)
 80246fc:	481c      	ldr	r0, [pc, #112]	@ (8024770 <__pow5mult+0xb0>)
 80246fe:	31ff      	adds	r1, #255	@ 0xff
 8024700:	f000 feac 	bl	802545c <__assert_func>
 8024704:	6044      	str	r4, [r0, #4]
 8024706:	6084      	str	r4, [r0, #8]
 8024708:	6004      	str	r4, [r0, #0]
 802470a:	60c4      	str	r4, [r0, #12]
 802470c:	69fb      	ldr	r3, [r7, #28]
 802470e:	689c      	ldr	r4, [r3, #8]
 8024710:	9301      	str	r3, [sp, #4]
 8024712:	2c00      	cmp	r4, #0
 8024714:	d108      	bne.n	8024728 <__pow5mult+0x68>
 8024716:	0038      	movs	r0, r7
 8024718:	4916      	ldr	r1, [pc, #88]	@ (8024774 <__pow5mult+0xb4>)
 802471a:	f7ff ff07 	bl	802452c <__i2b>
 802471e:	9b01      	ldr	r3, [sp, #4]
 8024720:	0004      	movs	r4, r0
 8024722:	6098      	str	r0, [r3, #8]
 8024724:	2300      	movs	r3, #0
 8024726:	6003      	str	r3, [r0, #0]
 8024728:	2301      	movs	r3, #1
 802472a:	421d      	tst	r5, r3
 802472c:	d00a      	beq.n	8024744 <__pow5mult+0x84>
 802472e:	0031      	movs	r1, r6
 8024730:	0022      	movs	r2, r4
 8024732:	0038      	movs	r0, r7
 8024734:	f7ff ff12 	bl	802455c <__multiply>
 8024738:	0031      	movs	r1, r6
 802473a:	9001      	str	r0, [sp, #4]
 802473c:	0038      	movs	r0, r7
 802473e:	f7ff fdf1 	bl	8024324 <_Bfree>
 8024742:	9e01      	ldr	r6, [sp, #4]
 8024744:	106d      	asrs	r5, r5, #1
 8024746:	d00c      	beq.n	8024762 <__pow5mult+0xa2>
 8024748:	6820      	ldr	r0, [r4, #0]
 802474a:	2800      	cmp	r0, #0
 802474c:	d107      	bne.n	802475e <__pow5mult+0x9e>
 802474e:	0022      	movs	r2, r4
 8024750:	0021      	movs	r1, r4
 8024752:	0038      	movs	r0, r7
 8024754:	f7ff ff02 	bl	802455c <__multiply>
 8024758:	2300      	movs	r3, #0
 802475a:	6020      	str	r0, [r4, #0]
 802475c:	6003      	str	r3, [r0, #0]
 802475e:	0004      	movs	r4, r0
 8024760:	e7e2      	b.n	8024728 <__pow5mult+0x68>
 8024762:	0030      	movs	r0, r6
 8024764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024766:	46c0      	nop			@ (mov r8, r8)
 8024768:	080297ac 	.word	0x080297ac
 802476c:	08029672 	.word	0x08029672
 8024770:	08029752 	.word	0x08029752
 8024774:	00000271 	.word	0x00000271

08024778 <__lshift>:
 8024778:	b5f0      	push	{r4, r5, r6, r7, lr}
 802477a:	000c      	movs	r4, r1
 802477c:	0016      	movs	r6, r2
 802477e:	6923      	ldr	r3, [r4, #16]
 8024780:	1157      	asrs	r7, r2, #5
 8024782:	b085      	sub	sp, #20
 8024784:	18fb      	adds	r3, r7, r3
 8024786:	9301      	str	r3, [sp, #4]
 8024788:	3301      	adds	r3, #1
 802478a:	9300      	str	r3, [sp, #0]
 802478c:	6849      	ldr	r1, [r1, #4]
 802478e:	68a3      	ldr	r3, [r4, #8]
 8024790:	9002      	str	r0, [sp, #8]
 8024792:	9a00      	ldr	r2, [sp, #0]
 8024794:	4293      	cmp	r3, r2
 8024796:	db10      	blt.n	80247ba <__lshift+0x42>
 8024798:	9802      	ldr	r0, [sp, #8]
 802479a:	f7ff fd7f 	bl	802429c <_Balloc>
 802479e:	2300      	movs	r3, #0
 80247a0:	0001      	movs	r1, r0
 80247a2:	0005      	movs	r5, r0
 80247a4:	001a      	movs	r2, r3
 80247a6:	3114      	adds	r1, #20
 80247a8:	4298      	cmp	r0, r3
 80247aa:	d10c      	bne.n	80247c6 <__lshift+0x4e>
 80247ac:	21ef      	movs	r1, #239	@ 0xef
 80247ae:	002a      	movs	r2, r5
 80247b0:	4b25      	ldr	r3, [pc, #148]	@ (8024848 <__lshift+0xd0>)
 80247b2:	4826      	ldr	r0, [pc, #152]	@ (802484c <__lshift+0xd4>)
 80247b4:	0049      	lsls	r1, r1, #1
 80247b6:	f000 fe51 	bl	802545c <__assert_func>
 80247ba:	3101      	adds	r1, #1
 80247bc:	005b      	lsls	r3, r3, #1
 80247be:	e7e8      	b.n	8024792 <__lshift+0x1a>
 80247c0:	0098      	lsls	r0, r3, #2
 80247c2:	500a      	str	r2, [r1, r0]
 80247c4:	3301      	adds	r3, #1
 80247c6:	42bb      	cmp	r3, r7
 80247c8:	dbfa      	blt.n	80247c0 <__lshift+0x48>
 80247ca:	43fb      	mvns	r3, r7
 80247cc:	17db      	asrs	r3, r3, #31
 80247ce:	401f      	ands	r7, r3
 80247d0:	00bf      	lsls	r7, r7, #2
 80247d2:	0023      	movs	r3, r4
 80247d4:	201f      	movs	r0, #31
 80247d6:	19c9      	adds	r1, r1, r7
 80247d8:	0037      	movs	r7, r6
 80247da:	6922      	ldr	r2, [r4, #16]
 80247dc:	3314      	adds	r3, #20
 80247de:	0092      	lsls	r2, r2, #2
 80247e0:	189a      	adds	r2, r3, r2
 80247e2:	4007      	ands	r7, r0
 80247e4:	4206      	tst	r6, r0
 80247e6:	d029      	beq.n	802483c <__lshift+0xc4>
 80247e8:	3001      	adds	r0, #1
 80247ea:	1bc0      	subs	r0, r0, r7
 80247ec:	9003      	str	r0, [sp, #12]
 80247ee:	468c      	mov	ip, r1
 80247f0:	2000      	movs	r0, #0
 80247f2:	681e      	ldr	r6, [r3, #0]
 80247f4:	40be      	lsls	r6, r7
 80247f6:	4306      	orrs	r6, r0
 80247f8:	4660      	mov	r0, ip
 80247fa:	c040      	stmia	r0!, {r6}
 80247fc:	4684      	mov	ip, r0
 80247fe:	9e03      	ldr	r6, [sp, #12]
 8024800:	cb01      	ldmia	r3!, {r0}
 8024802:	40f0      	lsrs	r0, r6
 8024804:	429a      	cmp	r2, r3
 8024806:	d8f4      	bhi.n	80247f2 <__lshift+0x7a>
 8024808:	0026      	movs	r6, r4
 802480a:	3615      	adds	r6, #21
 802480c:	2304      	movs	r3, #4
 802480e:	42b2      	cmp	r2, r6
 8024810:	d304      	bcc.n	802481c <__lshift+0xa4>
 8024812:	1b13      	subs	r3, r2, r4
 8024814:	3b15      	subs	r3, #21
 8024816:	089b      	lsrs	r3, r3, #2
 8024818:	3301      	adds	r3, #1
 802481a:	009b      	lsls	r3, r3, #2
 802481c:	50c8      	str	r0, [r1, r3]
 802481e:	2800      	cmp	r0, #0
 8024820:	d002      	beq.n	8024828 <__lshift+0xb0>
 8024822:	9b01      	ldr	r3, [sp, #4]
 8024824:	3302      	adds	r3, #2
 8024826:	9300      	str	r3, [sp, #0]
 8024828:	9b00      	ldr	r3, [sp, #0]
 802482a:	9802      	ldr	r0, [sp, #8]
 802482c:	3b01      	subs	r3, #1
 802482e:	0021      	movs	r1, r4
 8024830:	612b      	str	r3, [r5, #16]
 8024832:	f7ff fd77 	bl	8024324 <_Bfree>
 8024836:	0028      	movs	r0, r5
 8024838:	b005      	add	sp, #20
 802483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802483c:	cb01      	ldmia	r3!, {r0}
 802483e:	c101      	stmia	r1!, {r0}
 8024840:	429a      	cmp	r2, r3
 8024842:	d8fb      	bhi.n	802483c <__lshift+0xc4>
 8024844:	e7f0      	b.n	8024828 <__lshift+0xb0>
 8024846:	46c0      	nop			@ (mov r8, r8)
 8024848:	080296e1 	.word	0x080296e1
 802484c:	08029752 	.word	0x08029752

08024850 <__mcmp>:
 8024850:	b530      	push	{r4, r5, lr}
 8024852:	690b      	ldr	r3, [r1, #16]
 8024854:	6904      	ldr	r4, [r0, #16]
 8024856:	0002      	movs	r2, r0
 8024858:	1ae0      	subs	r0, r4, r3
 802485a:	429c      	cmp	r4, r3
 802485c:	d10f      	bne.n	802487e <__mcmp+0x2e>
 802485e:	3214      	adds	r2, #20
 8024860:	009b      	lsls	r3, r3, #2
 8024862:	3114      	adds	r1, #20
 8024864:	0014      	movs	r4, r2
 8024866:	18c9      	adds	r1, r1, r3
 8024868:	18d2      	adds	r2, r2, r3
 802486a:	3a04      	subs	r2, #4
 802486c:	3904      	subs	r1, #4
 802486e:	6815      	ldr	r5, [r2, #0]
 8024870:	680b      	ldr	r3, [r1, #0]
 8024872:	429d      	cmp	r5, r3
 8024874:	d004      	beq.n	8024880 <__mcmp+0x30>
 8024876:	2001      	movs	r0, #1
 8024878:	429d      	cmp	r5, r3
 802487a:	d200      	bcs.n	802487e <__mcmp+0x2e>
 802487c:	3802      	subs	r0, #2
 802487e:	bd30      	pop	{r4, r5, pc}
 8024880:	4294      	cmp	r4, r2
 8024882:	d3f2      	bcc.n	802486a <__mcmp+0x1a>
 8024884:	e7fb      	b.n	802487e <__mcmp+0x2e>
	...

08024888 <__mdiff>:
 8024888:	b5f0      	push	{r4, r5, r6, r7, lr}
 802488a:	000c      	movs	r4, r1
 802488c:	b087      	sub	sp, #28
 802488e:	9000      	str	r0, [sp, #0]
 8024890:	0011      	movs	r1, r2
 8024892:	0020      	movs	r0, r4
 8024894:	0017      	movs	r7, r2
 8024896:	f7ff ffdb 	bl	8024850 <__mcmp>
 802489a:	1e05      	subs	r5, r0, #0
 802489c:	d110      	bne.n	80248c0 <__mdiff+0x38>
 802489e:	0001      	movs	r1, r0
 80248a0:	9800      	ldr	r0, [sp, #0]
 80248a2:	f7ff fcfb 	bl	802429c <_Balloc>
 80248a6:	1e02      	subs	r2, r0, #0
 80248a8:	d104      	bne.n	80248b4 <__mdiff+0x2c>
 80248aa:	4b40      	ldr	r3, [pc, #256]	@ (80249ac <__mdiff+0x124>)
 80248ac:	4840      	ldr	r0, [pc, #256]	@ (80249b0 <__mdiff+0x128>)
 80248ae:	4941      	ldr	r1, [pc, #260]	@ (80249b4 <__mdiff+0x12c>)
 80248b0:	f000 fdd4 	bl	802545c <__assert_func>
 80248b4:	2301      	movs	r3, #1
 80248b6:	6145      	str	r5, [r0, #20]
 80248b8:	6103      	str	r3, [r0, #16]
 80248ba:	0010      	movs	r0, r2
 80248bc:	b007      	add	sp, #28
 80248be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248c0:	2600      	movs	r6, #0
 80248c2:	42b0      	cmp	r0, r6
 80248c4:	da03      	bge.n	80248ce <__mdiff+0x46>
 80248c6:	0023      	movs	r3, r4
 80248c8:	003c      	movs	r4, r7
 80248ca:	001f      	movs	r7, r3
 80248cc:	3601      	adds	r6, #1
 80248ce:	6861      	ldr	r1, [r4, #4]
 80248d0:	9800      	ldr	r0, [sp, #0]
 80248d2:	f7ff fce3 	bl	802429c <_Balloc>
 80248d6:	1e02      	subs	r2, r0, #0
 80248d8:	d103      	bne.n	80248e2 <__mdiff+0x5a>
 80248da:	4b34      	ldr	r3, [pc, #208]	@ (80249ac <__mdiff+0x124>)
 80248dc:	4834      	ldr	r0, [pc, #208]	@ (80249b0 <__mdiff+0x128>)
 80248de:	4936      	ldr	r1, [pc, #216]	@ (80249b8 <__mdiff+0x130>)
 80248e0:	e7e6      	b.n	80248b0 <__mdiff+0x28>
 80248e2:	6923      	ldr	r3, [r4, #16]
 80248e4:	3414      	adds	r4, #20
 80248e6:	9300      	str	r3, [sp, #0]
 80248e8:	009b      	lsls	r3, r3, #2
 80248ea:	18e3      	adds	r3, r4, r3
 80248ec:	0021      	movs	r1, r4
 80248ee:	9401      	str	r4, [sp, #4]
 80248f0:	003c      	movs	r4, r7
 80248f2:	9302      	str	r3, [sp, #8]
 80248f4:	693b      	ldr	r3, [r7, #16]
 80248f6:	3414      	adds	r4, #20
 80248f8:	009b      	lsls	r3, r3, #2
 80248fa:	18e3      	adds	r3, r4, r3
 80248fc:	9303      	str	r3, [sp, #12]
 80248fe:	0003      	movs	r3, r0
 8024900:	60c6      	str	r6, [r0, #12]
 8024902:	468c      	mov	ip, r1
 8024904:	2000      	movs	r0, #0
 8024906:	3314      	adds	r3, #20
 8024908:	9304      	str	r3, [sp, #16]
 802490a:	9305      	str	r3, [sp, #20]
 802490c:	4663      	mov	r3, ip
 802490e:	cb20      	ldmia	r3!, {r5}
 8024910:	b2a9      	uxth	r1, r5
 8024912:	000e      	movs	r6, r1
 8024914:	469c      	mov	ip, r3
 8024916:	cc08      	ldmia	r4!, {r3}
 8024918:	0c2d      	lsrs	r5, r5, #16
 802491a:	b299      	uxth	r1, r3
 802491c:	1a71      	subs	r1, r6, r1
 802491e:	1809      	adds	r1, r1, r0
 8024920:	0c1b      	lsrs	r3, r3, #16
 8024922:	1408      	asrs	r0, r1, #16
 8024924:	1aeb      	subs	r3, r5, r3
 8024926:	181b      	adds	r3, r3, r0
 8024928:	1418      	asrs	r0, r3, #16
 802492a:	b289      	uxth	r1, r1
 802492c:	041b      	lsls	r3, r3, #16
 802492e:	4319      	orrs	r1, r3
 8024930:	9b05      	ldr	r3, [sp, #20]
 8024932:	c302      	stmia	r3!, {r1}
 8024934:	9305      	str	r3, [sp, #20]
 8024936:	9b03      	ldr	r3, [sp, #12]
 8024938:	42a3      	cmp	r3, r4
 802493a:	d8e7      	bhi.n	802490c <__mdiff+0x84>
 802493c:	0039      	movs	r1, r7
 802493e:	9c03      	ldr	r4, [sp, #12]
 8024940:	3115      	adds	r1, #21
 8024942:	2304      	movs	r3, #4
 8024944:	428c      	cmp	r4, r1
 8024946:	d304      	bcc.n	8024952 <__mdiff+0xca>
 8024948:	1be3      	subs	r3, r4, r7
 802494a:	3b15      	subs	r3, #21
 802494c:	089b      	lsrs	r3, r3, #2
 802494e:	3301      	adds	r3, #1
 8024950:	009b      	lsls	r3, r3, #2
 8024952:	9901      	ldr	r1, [sp, #4]
 8024954:	18cd      	adds	r5, r1, r3
 8024956:	9904      	ldr	r1, [sp, #16]
 8024958:	002e      	movs	r6, r5
 802495a:	18cb      	adds	r3, r1, r3
 802495c:	001f      	movs	r7, r3
 802495e:	9902      	ldr	r1, [sp, #8]
 8024960:	428e      	cmp	r6, r1
 8024962:	d311      	bcc.n	8024988 <__mdiff+0x100>
 8024964:	9c02      	ldr	r4, [sp, #8]
 8024966:	1ee9      	subs	r1, r5, #3
 8024968:	2000      	movs	r0, #0
 802496a:	428c      	cmp	r4, r1
 802496c:	d304      	bcc.n	8024978 <__mdiff+0xf0>
 802496e:	0021      	movs	r1, r4
 8024970:	3103      	adds	r1, #3
 8024972:	1b49      	subs	r1, r1, r5
 8024974:	0889      	lsrs	r1, r1, #2
 8024976:	0088      	lsls	r0, r1, #2
 8024978:	181b      	adds	r3, r3, r0
 802497a:	3b04      	subs	r3, #4
 802497c:	6819      	ldr	r1, [r3, #0]
 802497e:	2900      	cmp	r1, #0
 8024980:	d010      	beq.n	80249a4 <__mdiff+0x11c>
 8024982:	9b00      	ldr	r3, [sp, #0]
 8024984:	6113      	str	r3, [r2, #16]
 8024986:	e798      	b.n	80248ba <__mdiff+0x32>
 8024988:	4684      	mov	ip, r0
 802498a:	ce02      	ldmia	r6!, {r1}
 802498c:	b288      	uxth	r0, r1
 802498e:	4460      	add	r0, ip
 8024990:	1400      	asrs	r0, r0, #16
 8024992:	0c0c      	lsrs	r4, r1, #16
 8024994:	1904      	adds	r4, r0, r4
 8024996:	4461      	add	r1, ip
 8024998:	1420      	asrs	r0, r4, #16
 802499a:	b289      	uxth	r1, r1
 802499c:	0424      	lsls	r4, r4, #16
 802499e:	4321      	orrs	r1, r4
 80249a0:	c702      	stmia	r7!, {r1}
 80249a2:	e7dc      	b.n	802495e <__mdiff+0xd6>
 80249a4:	9900      	ldr	r1, [sp, #0]
 80249a6:	3901      	subs	r1, #1
 80249a8:	9100      	str	r1, [sp, #0]
 80249aa:	e7e6      	b.n	802497a <__mdiff+0xf2>
 80249ac:	080296e1 	.word	0x080296e1
 80249b0:	08029752 	.word	0x08029752
 80249b4:	00000237 	.word	0x00000237
 80249b8:	00000245 	.word	0x00000245

080249bc <__ulp>:
 80249bc:	b510      	push	{r4, lr}
 80249be:	2400      	movs	r4, #0
 80249c0:	4b0c      	ldr	r3, [pc, #48]	@ (80249f4 <__ulp+0x38>)
 80249c2:	4a0d      	ldr	r2, [pc, #52]	@ (80249f8 <__ulp+0x3c>)
 80249c4:	400b      	ands	r3, r1
 80249c6:	189b      	adds	r3, r3, r2
 80249c8:	42a3      	cmp	r3, r4
 80249ca:	dc06      	bgt.n	80249da <__ulp+0x1e>
 80249cc:	425b      	negs	r3, r3
 80249ce:	151a      	asrs	r2, r3, #20
 80249d0:	2a13      	cmp	r2, #19
 80249d2:	dc05      	bgt.n	80249e0 <__ulp+0x24>
 80249d4:	2380      	movs	r3, #128	@ 0x80
 80249d6:	031b      	lsls	r3, r3, #12
 80249d8:	4113      	asrs	r3, r2
 80249da:	0019      	movs	r1, r3
 80249dc:	0020      	movs	r0, r4
 80249de:	bd10      	pop	{r4, pc}
 80249e0:	3a14      	subs	r2, #20
 80249e2:	2401      	movs	r4, #1
 80249e4:	2a1e      	cmp	r2, #30
 80249e6:	dc02      	bgt.n	80249ee <__ulp+0x32>
 80249e8:	2480      	movs	r4, #128	@ 0x80
 80249ea:	0624      	lsls	r4, r4, #24
 80249ec:	40d4      	lsrs	r4, r2
 80249ee:	2300      	movs	r3, #0
 80249f0:	e7f3      	b.n	80249da <__ulp+0x1e>
 80249f2:	46c0      	nop			@ (mov r8, r8)
 80249f4:	7ff00000 	.word	0x7ff00000
 80249f8:	fcc00000 	.word	0xfcc00000

080249fc <__b2d>:
 80249fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80249fe:	0006      	movs	r6, r0
 8024a00:	6903      	ldr	r3, [r0, #16]
 8024a02:	3614      	adds	r6, #20
 8024a04:	009b      	lsls	r3, r3, #2
 8024a06:	18f3      	adds	r3, r6, r3
 8024a08:	1f1d      	subs	r5, r3, #4
 8024a0a:	682c      	ldr	r4, [r5, #0]
 8024a0c:	000f      	movs	r7, r1
 8024a0e:	0020      	movs	r0, r4
 8024a10:	9301      	str	r3, [sp, #4]
 8024a12:	f7ff fd3b 	bl	802448c <__hi0bits>
 8024a16:	2220      	movs	r2, #32
 8024a18:	1a12      	subs	r2, r2, r0
 8024a1a:	603a      	str	r2, [r7, #0]
 8024a1c:	0003      	movs	r3, r0
 8024a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8024a90 <__b2d+0x94>)
 8024a20:	280a      	cmp	r0, #10
 8024a22:	dc15      	bgt.n	8024a50 <__b2d+0x54>
 8024a24:	210b      	movs	r1, #11
 8024a26:	0027      	movs	r7, r4
 8024a28:	1a09      	subs	r1, r1, r0
 8024a2a:	40cf      	lsrs	r7, r1
 8024a2c:	433a      	orrs	r2, r7
 8024a2e:	468c      	mov	ip, r1
 8024a30:	0011      	movs	r1, r2
 8024a32:	2200      	movs	r2, #0
 8024a34:	42ae      	cmp	r6, r5
 8024a36:	d202      	bcs.n	8024a3e <__b2d+0x42>
 8024a38:	9a01      	ldr	r2, [sp, #4]
 8024a3a:	3a08      	subs	r2, #8
 8024a3c:	6812      	ldr	r2, [r2, #0]
 8024a3e:	3315      	adds	r3, #21
 8024a40:	409c      	lsls	r4, r3
 8024a42:	4663      	mov	r3, ip
 8024a44:	0027      	movs	r7, r4
 8024a46:	40da      	lsrs	r2, r3
 8024a48:	4317      	orrs	r7, r2
 8024a4a:	0038      	movs	r0, r7
 8024a4c:	b003      	add	sp, #12
 8024a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a50:	2700      	movs	r7, #0
 8024a52:	42ae      	cmp	r6, r5
 8024a54:	d202      	bcs.n	8024a5c <__b2d+0x60>
 8024a56:	9d01      	ldr	r5, [sp, #4]
 8024a58:	3d08      	subs	r5, #8
 8024a5a:	682f      	ldr	r7, [r5, #0]
 8024a5c:	210b      	movs	r1, #11
 8024a5e:	4249      	negs	r1, r1
 8024a60:	468c      	mov	ip, r1
 8024a62:	449c      	add	ip, r3
 8024a64:	2b0b      	cmp	r3, #11
 8024a66:	d010      	beq.n	8024a8a <__b2d+0x8e>
 8024a68:	4661      	mov	r1, ip
 8024a6a:	2320      	movs	r3, #32
 8024a6c:	408c      	lsls	r4, r1
 8024a6e:	1a5b      	subs	r3, r3, r1
 8024a70:	0039      	movs	r1, r7
 8024a72:	40d9      	lsrs	r1, r3
 8024a74:	430c      	orrs	r4, r1
 8024a76:	4322      	orrs	r2, r4
 8024a78:	0011      	movs	r1, r2
 8024a7a:	2200      	movs	r2, #0
 8024a7c:	42b5      	cmp	r5, r6
 8024a7e:	d901      	bls.n	8024a84 <__b2d+0x88>
 8024a80:	3d04      	subs	r5, #4
 8024a82:	682a      	ldr	r2, [r5, #0]
 8024a84:	4664      	mov	r4, ip
 8024a86:	40a7      	lsls	r7, r4
 8024a88:	e7dd      	b.n	8024a46 <__b2d+0x4a>
 8024a8a:	4322      	orrs	r2, r4
 8024a8c:	0011      	movs	r1, r2
 8024a8e:	e7dc      	b.n	8024a4a <__b2d+0x4e>
 8024a90:	3ff00000 	.word	0x3ff00000

08024a94 <__d2b>:
 8024a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024a96:	2101      	movs	r1, #1
 8024a98:	0016      	movs	r6, r2
 8024a9a:	001f      	movs	r7, r3
 8024a9c:	f7ff fbfe 	bl	802429c <_Balloc>
 8024aa0:	1e04      	subs	r4, r0, #0
 8024aa2:	d105      	bne.n	8024ab0 <__d2b+0x1c>
 8024aa4:	0022      	movs	r2, r4
 8024aa6:	4b25      	ldr	r3, [pc, #148]	@ (8024b3c <__d2b+0xa8>)
 8024aa8:	4825      	ldr	r0, [pc, #148]	@ (8024b40 <__d2b+0xac>)
 8024aaa:	4926      	ldr	r1, [pc, #152]	@ (8024b44 <__d2b+0xb0>)
 8024aac:	f000 fcd6 	bl	802545c <__assert_func>
 8024ab0:	033b      	lsls	r3, r7, #12
 8024ab2:	007d      	lsls	r5, r7, #1
 8024ab4:	0b1b      	lsrs	r3, r3, #12
 8024ab6:	0d6d      	lsrs	r5, r5, #21
 8024ab8:	d002      	beq.n	8024ac0 <__d2b+0x2c>
 8024aba:	2280      	movs	r2, #128	@ 0x80
 8024abc:	0352      	lsls	r2, r2, #13
 8024abe:	4313      	orrs	r3, r2
 8024ac0:	9301      	str	r3, [sp, #4]
 8024ac2:	2e00      	cmp	r6, #0
 8024ac4:	d025      	beq.n	8024b12 <__d2b+0x7e>
 8024ac6:	4668      	mov	r0, sp
 8024ac8:	9600      	str	r6, [sp, #0]
 8024aca:	f7ff fd00 	bl	80244ce <__lo0bits>
 8024ace:	9b01      	ldr	r3, [sp, #4]
 8024ad0:	9900      	ldr	r1, [sp, #0]
 8024ad2:	2800      	cmp	r0, #0
 8024ad4:	d01b      	beq.n	8024b0e <__d2b+0x7a>
 8024ad6:	2220      	movs	r2, #32
 8024ad8:	001e      	movs	r6, r3
 8024ada:	1a12      	subs	r2, r2, r0
 8024adc:	4096      	lsls	r6, r2
 8024ade:	0032      	movs	r2, r6
 8024ae0:	40c3      	lsrs	r3, r0
 8024ae2:	430a      	orrs	r2, r1
 8024ae4:	6162      	str	r2, [r4, #20]
 8024ae6:	9301      	str	r3, [sp, #4]
 8024ae8:	9e01      	ldr	r6, [sp, #4]
 8024aea:	61a6      	str	r6, [r4, #24]
 8024aec:	1e73      	subs	r3, r6, #1
 8024aee:	419e      	sbcs	r6, r3
 8024af0:	3601      	adds	r6, #1
 8024af2:	6126      	str	r6, [r4, #16]
 8024af4:	2d00      	cmp	r5, #0
 8024af6:	d014      	beq.n	8024b22 <__d2b+0x8e>
 8024af8:	2635      	movs	r6, #53	@ 0x35
 8024afa:	4b13      	ldr	r3, [pc, #76]	@ (8024b48 <__d2b+0xb4>)
 8024afc:	18ed      	adds	r5, r5, r3
 8024afe:	9b08      	ldr	r3, [sp, #32]
 8024b00:	182d      	adds	r5, r5, r0
 8024b02:	601d      	str	r5, [r3, #0]
 8024b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b06:	1a36      	subs	r6, r6, r0
 8024b08:	601e      	str	r6, [r3, #0]
 8024b0a:	0020      	movs	r0, r4
 8024b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024b0e:	6161      	str	r1, [r4, #20]
 8024b10:	e7ea      	b.n	8024ae8 <__d2b+0x54>
 8024b12:	a801      	add	r0, sp, #4
 8024b14:	f7ff fcdb 	bl	80244ce <__lo0bits>
 8024b18:	9b01      	ldr	r3, [sp, #4]
 8024b1a:	2601      	movs	r6, #1
 8024b1c:	6163      	str	r3, [r4, #20]
 8024b1e:	3020      	adds	r0, #32
 8024b20:	e7e7      	b.n	8024af2 <__d2b+0x5e>
 8024b22:	4b0a      	ldr	r3, [pc, #40]	@ (8024b4c <__d2b+0xb8>)
 8024b24:	18c0      	adds	r0, r0, r3
 8024b26:	9b08      	ldr	r3, [sp, #32]
 8024b28:	6018      	str	r0, [r3, #0]
 8024b2a:	4b09      	ldr	r3, [pc, #36]	@ (8024b50 <__d2b+0xbc>)
 8024b2c:	18f3      	adds	r3, r6, r3
 8024b2e:	009b      	lsls	r3, r3, #2
 8024b30:	18e3      	adds	r3, r4, r3
 8024b32:	6958      	ldr	r0, [r3, #20]
 8024b34:	f7ff fcaa 	bl	802448c <__hi0bits>
 8024b38:	0176      	lsls	r6, r6, #5
 8024b3a:	e7e3      	b.n	8024b04 <__d2b+0x70>
 8024b3c:	080296e1 	.word	0x080296e1
 8024b40:	08029752 	.word	0x08029752
 8024b44:	0000030f 	.word	0x0000030f
 8024b48:	fffffbcd 	.word	0xfffffbcd
 8024b4c:	fffffbce 	.word	0xfffffbce
 8024b50:	3fffffff 	.word	0x3fffffff

08024b54 <__ratio>:
 8024b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b56:	b087      	sub	sp, #28
 8024b58:	000f      	movs	r7, r1
 8024b5a:	a904      	add	r1, sp, #16
 8024b5c:	0006      	movs	r6, r0
 8024b5e:	f7ff ff4d 	bl	80249fc <__b2d>
 8024b62:	9000      	str	r0, [sp, #0]
 8024b64:	9101      	str	r1, [sp, #4]
 8024b66:	9b00      	ldr	r3, [sp, #0]
 8024b68:	9c01      	ldr	r4, [sp, #4]
 8024b6a:	0038      	movs	r0, r7
 8024b6c:	a905      	add	r1, sp, #20
 8024b6e:	9302      	str	r3, [sp, #8]
 8024b70:	9403      	str	r4, [sp, #12]
 8024b72:	f7ff ff43 	bl	80249fc <__b2d>
 8024b76:	000d      	movs	r5, r1
 8024b78:	0002      	movs	r2, r0
 8024b7a:	000b      	movs	r3, r1
 8024b7c:	6930      	ldr	r0, [r6, #16]
 8024b7e:	6939      	ldr	r1, [r7, #16]
 8024b80:	9e04      	ldr	r6, [sp, #16]
 8024b82:	1a40      	subs	r0, r0, r1
 8024b84:	9905      	ldr	r1, [sp, #20]
 8024b86:	0140      	lsls	r0, r0, #5
 8024b88:	1a71      	subs	r1, r6, r1
 8024b8a:	1841      	adds	r1, r0, r1
 8024b8c:	0508      	lsls	r0, r1, #20
 8024b8e:	2900      	cmp	r1, #0
 8024b90:	dd08      	ble.n	8024ba4 <__ratio+0x50>
 8024b92:	9901      	ldr	r1, [sp, #4]
 8024b94:	1841      	adds	r1, r0, r1
 8024b96:	9103      	str	r1, [sp, #12]
 8024b98:	9802      	ldr	r0, [sp, #8]
 8024b9a:	9903      	ldr	r1, [sp, #12]
 8024b9c:	f7dd f90a 	bl	8001db4 <__aeabi_ddiv>
 8024ba0:	b007      	add	sp, #28
 8024ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ba4:	1a2b      	subs	r3, r5, r0
 8024ba6:	e7f7      	b.n	8024b98 <__ratio+0x44>

08024ba8 <__copybits>:
 8024ba8:	b570      	push	{r4, r5, r6, lr}
 8024baa:	0014      	movs	r4, r2
 8024bac:	0005      	movs	r5, r0
 8024bae:	3901      	subs	r1, #1
 8024bb0:	6913      	ldr	r3, [r2, #16]
 8024bb2:	1149      	asrs	r1, r1, #5
 8024bb4:	3101      	adds	r1, #1
 8024bb6:	0089      	lsls	r1, r1, #2
 8024bb8:	3414      	adds	r4, #20
 8024bba:	009b      	lsls	r3, r3, #2
 8024bbc:	1841      	adds	r1, r0, r1
 8024bbe:	18e3      	adds	r3, r4, r3
 8024bc0:	42a3      	cmp	r3, r4
 8024bc2:	d80d      	bhi.n	8024be0 <__copybits+0x38>
 8024bc4:	0014      	movs	r4, r2
 8024bc6:	3411      	adds	r4, #17
 8024bc8:	2500      	movs	r5, #0
 8024bca:	429c      	cmp	r4, r3
 8024bcc:	d803      	bhi.n	8024bd6 <__copybits+0x2e>
 8024bce:	1a9b      	subs	r3, r3, r2
 8024bd0:	3b11      	subs	r3, #17
 8024bd2:	089b      	lsrs	r3, r3, #2
 8024bd4:	009d      	lsls	r5, r3, #2
 8024bd6:	2300      	movs	r3, #0
 8024bd8:	1940      	adds	r0, r0, r5
 8024bda:	4281      	cmp	r1, r0
 8024bdc:	d803      	bhi.n	8024be6 <__copybits+0x3e>
 8024bde:	bd70      	pop	{r4, r5, r6, pc}
 8024be0:	cc40      	ldmia	r4!, {r6}
 8024be2:	c540      	stmia	r5!, {r6}
 8024be4:	e7ec      	b.n	8024bc0 <__copybits+0x18>
 8024be6:	c008      	stmia	r0!, {r3}
 8024be8:	e7f7      	b.n	8024bda <__copybits+0x32>

08024bea <__any_on>:
 8024bea:	0002      	movs	r2, r0
 8024bec:	6900      	ldr	r0, [r0, #16]
 8024bee:	b510      	push	{r4, lr}
 8024bf0:	3214      	adds	r2, #20
 8024bf2:	114b      	asrs	r3, r1, #5
 8024bf4:	4298      	cmp	r0, r3
 8024bf6:	db13      	blt.n	8024c20 <__any_on+0x36>
 8024bf8:	dd0c      	ble.n	8024c14 <__any_on+0x2a>
 8024bfa:	241f      	movs	r4, #31
 8024bfc:	0008      	movs	r0, r1
 8024bfe:	4020      	ands	r0, r4
 8024c00:	4221      	tst	r1, r4
 8024c02:	d007      	beq.n	8024c14 <__any_on+0x2a>
 8024c04:	0099      	lsls	r1, r3, #2
 8024c06:	588c      	ldr	r4, [r1, r2]
 8024c08:	0021      	movs	r1, r4
 8024c0a:	40c1      	lsrs	r1, r0
 8024c0c:	4081      	lsls	r1, r0
 8024c0e:	2001      	movs	r0, #1
 8024c10:	428c      	cmp	r4, r1
 8024c12:	d104      	bne.n	8024c1e <__any_on+0x34>
 8024c14:	009b      	lsls	r3, r3, #2
 8024c16:	18d3      	adds	r3, r2, r3
 8024c18:	4293      	cmp	r3, r2
 8024c1a:	d803      	bhi.n	8024c24 <__any_on+0x3a>
 8024c1c:	2000      	movs	r0, #0
 8024c1e:	bd10      	pop	{r4, pc}
 8024c20:	0003      	movs	r3, r0
 8024c22:	e7f7      	b.n	8024c14 <__any_on+0x2a>
 8024c24:	3b04      	subs	r3, #4
 8024c26:	6819      	ldr	r1, [r3, #0]
 8024c28:	2900      	cmp	r1, #0
 8024c2a:	d0f5      	beq.n	8024c18 <__any_on+0x2e>
 8024c2c:	2001      	movs	r0, #1
 8024c2e:	e7f6      	b.n	8024c1e <__any_on+0x34>

08024c30 <__ascii_wctomb>:
 8024c30:	0003      	movs	r3, r0
 8024c32:	1e08      	subs	r0, r1, #0
 8024c34:	d005      	beq.n	8024c42 <__ascii_wctomb+0x12>
 8024c36:	2aff      	cmp	r2, #255	@ 0xff
 8024c38:	d904      	bls.n	8024c44 <__ascii_wctomb+0x14>
 8024c3a:	228a      	movs	r2, #138	@ 0x8a
 8024c3c:	2001      	movs	r0, #1
 8024c3e:	601a      	str	r2, [r3, #0]
 8024c40:	4240      	negs	r0, r0
 8024c42:	4770      	bx	lr
 8024c44:	2001      	movs	r0, #1
 8024c46:	700a      	strb	r2, [r1, #0]
 8024c48:	e7fb      	b.n	8024c42 <__ascii_wctomb+0x12>
	...

08024c4c <__ssputs_r>:
 8024c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c4e:	688e      	ldr	r6, [r1, #8]
 8024c50:	b085      	sub	sp, #20
 8024c52:	001f      	movs	r7, r3
 8024c54:	000c      	movs	r4, r1
 8024c56:	680b      	ldr	r3, [r1, #0]
 8024c58:	9002      	str	r0, [sp, #8]
 8024c5a:	9203      	str	r2, [sp, #12]
 8024c5c:	42be      	cmp	r6, r7
 8024c5e:	d830      	bhi.n	8024cc2 <__ssputs_r+0x76>
 8024c60:	210c      	movs	r1, #12
 8024c62:	5e62      	ldrsh	r2, [r4, r1]
 8024c64:	2190      	movs	r1, #144	@ 0x90
 8024c66:	00c9      	lsls	r1, r1, #3
 8024c68:	420a      	tst	r2, r1
 8024c6a:	d028      	beq.n	8024cbe <__ssputs_r+0x72>
 8024c6c:	2003      	movs	r0, #3
 8024c6e:	6921      	ldr	r1, [r4, #16]
 8024c70:	1a5b      	subs	r3, r3, r1
 8024c72:	9301      	str	r3, [sp, #4]
 8024c74:	6963      	ldr	r3, [r4, #20]
 8024c76:	4343      	muls	r3, r0
 8024c78:	9801      	ldr	r0, [sp, #4]
 8024c7a:	0fdd      	lsrs	r5, r3, #31
 8024c7c:	18ed      	adds	r5, r5, r3
 8024c7e:	1c7b      	adds	r3, r7, #1
 8024c80:	181b      	adds	r3, r3, r0
 8024c82:	106d      	asrs	r5, r5, #1
 8024c84:	42ab      	cmp	r3, r5
 8024c86:	d900      	bls.n	8024c8a <__ssputs_r+0x3e>
 8024c88:	001d      	movs	r5, r3
 8024c8a:	0552      	lsls	r2, r2, #21
 8024c8c:	d528      	bpl.n	8024ce0 <__ssputs_r+0x94>
 8024c8e:	0029      	movs	r1, r5
 8024c90:	9802      	ldr	r0, [sp, #8]
 8024c92:	f7ff fa61 	bl	8024158 <_malloc_r>
 8024c96:	1e06      	subs	r6, r0, #0
 8024c98:	d02c      	beq.n	8024cf4 <__ssputs_r+0xa8>
 8024c9a:	9a01      	ldr	r2, [sp, #4]
 8024c9c:	6921      	ldr	r1, [r4, #16]
 8024c9e:	f7fd fff9 	bl	8022c94 <memcpy>
 8024ca2:	89a2      	ldrh	r2, [r4, #12]
 8024ca4:	4b18      	ldr	r3, [pc, #96]	@ (8024d08 <__ssputs_r+0xbc>)
 8024ca6:	401a      	ands	r2, r3
 8024ca8:	2380      	movs	r3, #128	@ 0x80
 8024caa:	4313      	orrs	r3, r2
 8024cac:	81a3      	strh	r3, [r4, #12]
 8024cae:	9b01      	ldr	r3, [sp, #4]
 8024cb0:	6126      	str	r6, [r4, #16]
 8024cb2:	18f6      	adds	r6, r6, r3
 8024cb4:	6026      	str	r6, [r4, #0]
 8024cb6:	003e      	movs	r6, r7
 8024cb8:	6165      	str	r5, [r4, #20]
 8024cba:	1aed      	subs	r5, r5, r3
 8024cbc:	60a5      	str	r5, [r4, #8]
 8024cbe:	42be      	cmp	r6, r7
 8024cc0:	d900      	bls.n	8024cc4 <__ssputs_r+0x78>
 8024cc2:	003e      	movs	r6, r7
 8024cc4:	0032      	movs	r2, r6
 8024cc6:	9903      	ldr	r1, [sp, #12]
 8024cc8:	6820      	ldr	r0, [r4, #0]
 8024cca:	f000 fb7e 	bl	80253ca <memmove>
 8024cce:	2000      	movs	r0, #0
 8024cd0:	68a3      	ldr	r3, [r4, #8]
 8024cd2:	1b9b      	subs	r3, r3, r6
 8024cd4:	60a3      	str	r3, [r4, #8]
 8024cd6:	6823      	ldr	r3, [r4, #0]
 8024cd8:	199b      	adds	r3, r3, r6
 8024cda:	6023      	str	r3, [r4, #0]
 8024cdc:	b005      	add	sp, #20
 8024cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ce0:	002a      	movs	r2, r5
 8024ce2:	9802      	ldr	r0, [sp, #8]
 8024ce4:	f000 fc05 	bl	80254f2 <_realloc_r>
 8024ce8:	1e06      	subs	r6, r0, #0
 8024cea:	d1e0      	bne.n	8024cae <__ssputs_r+0x62>
 8024cec:	6921      	ldr	r1, [r4, #16]
 8024cee:	9802      	ldr	r0, [sp, #8]
 8024cf0:	f7fe fe62 	bl	80239b8 <_free_r>
 8024cf4:	230c      	movs	r3, #12
 8024cf6:	2001      	movs	r0, #1
 8024cf8:	9a02      	ldr	r2, [sp, #8]
 8024cfa:	4240      	negs	r0, r0
 8024cfc:	6013      	str	r3, [r2, #0]
 8024cfe:	89a2      	ldrh	r2, [r4, #12]
 8024d00:	3334      	adds	r3, #52	@ 0x34
 8024d02:	4313      	orrs	r3, r2
 8024d04:	81a3      	strh	r3, [r4, #12]
 8024d06:	e7e9      	b.n	8024cdc <__ssputs_r+0x90>
 8024d08:	fffffb7f 	.word	0xfffffb7f

08024d0c <_svfiprintf_r>:
 8024d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d0e:	b0a1      	sub	sp, #132	@ 0x84
 8024d10:	9003      	str	r0, [sp, #12]
 8024d12:	001d      	movs	r5, r3
 8024d14:	898b      	ldrh	r3, [r1, #12]
 8024d16:	000f      	movs	r7, r1
 8024d18:	0016      	movs	r6, r2
 8024d1a:	061b      	lsls	r3, r3, #24
 8024d1c:	d511      	bpl.n	8024d42 <_svfiprintf_r+0x36>
 8024d1e:	690b      	ldr	r3, [r1, #16]
 8024d20:	2b00      	cmp	r3, #0
 8024d22:	d10e      	bne.n	8024d42 <_svfiprintf_r+0x36>
 8024d24:	2140      	movs	r1, #64	@ 0x40
 8024d26:	f7ff fa17 	bl	8024158 <_malloc_r>
 8024d2a:	6038      	str	r0, [r7, #0]
 8024d2c:	6138      	str	r0, [r7, #16]
 8024d2e:	2800      	cmp	r0, #0
 8024d30:	d105      	bne.n	8024d3e <_svfiprintf_r+0x32>
 8024d32:	230c      	movs	r3, #12
 8024d34:	9a03      	ldr	r2, [sp, #12]
 8024d36:	6013      	str	r3, [r2, #0]
 8024d38:	2001      	movs	r0, #1
 8024d3a:	4240      	negs	r0, r0
 8024d3c:	e0cf      	b.n	8024ede <_svfiprintf_r+0x1d2>
 8024d3e:	2340      	movs	r3, #64	@ 0x40
 8024d40:	617b      	str	r3, [r7, #20]
 8024d42:	2300      	movs	r3, #0
 8024d44:	ac08      	add	r4, sp, #32
 8024d46:	6163      	str	r3, [r4, #20]
 8024d48:	3320      	adds	r3, #32
 8024d4a:	7663      	strb	r3, [r4, #25]
 8024d4c:	3310      	adds	r3, #16
 8024d4e:	76a3      	strb	r3, [r4, #26]
 8024d50:	9507      	str	r5, [sp, #28]
 8024d52:	0035      	movs	r5, r6
 8024d54:	782b      	ldrb	r3, [r5, #0]
 8024d56:	2b00      	cmp	r3, #0
 8024d58:	d001      	beq.n	8024d5e <_svfiprintf_r+0x52>
 8024d5a:	2b25      	cmp	r3, #37	@ 0x25
 8024d5c:	d148      	bne.n	8024df0 <_svfiprintf_r+0xe4>
 8024d5e:	1bab      	subs	r3, r5, r6
 8024d60:	9305      	str	r3, [sp, #20]
 8024d62:	42b5      	cmp	r5, r6
 8024d64:	d00b      	beq.n	8024d7e <_svfiprintf_r+0x72>
 8024d66:	0032      	movs	r2, r6
 8024d68:	0039      	movs	r1, r7
 8024d6a:	9803      	ldr	r0, [sp, #12]
 8024d6c:	f7ff ff6e 	bl	8024c4c <__ssputs_r>
 8024d70:	3001      	adds	r0, #1
 8024d72:	d100      	bne.n	8024d76 <_svfiprintf_r+0x6a>
 8024d74:	e0ae      	b.n	8024ed4 <_svfiprintf_r+0x1c8>
 8024d76:	6963      	ldr	r3, [r4, #20]
 8024d78:	9a05      	ldr	r2, [sp, #20]
 8024d7a:	189b      	adds	r3, r3, r2
 8024d7c:	6163      	str	r3, [r4, #20]
 8024d7e:	782b      	ldrb	r3, [r5, #0]
 8024d80:	2b00      	cmp	r3, #0
 8024d82:	d100      	bne.n	8024d86 <_svfiprintf_r+0x7a>
 8024d84:	e0a6      	b.n	8024ed4 <_svfiprintf_r+0x1c8>
 8024d86:	2201      	movs	r2, #1
 8024d88:	2300      	movs	r3, #0
 8024d8a:	4252      	negs	r2, r2
 8024d8c:	6062      	str	r2, [r4, #4]
 8024d8e:	a904      	add	r1, sp, #16
 8024d90:	3254      	adds	r2, #84	@ 0x54
 8024d92:	1852      	adds	r2, r2, r1
 8024d94:	1c6e      	adds	r6, r5, #1
 8024d96:	6023      	str	r3, [r4, #0]
 8024d98:	60e3      	str	r3, [r4, #12]
 8024d9a:	60a3      	str	r3, [r4, #8]
 8024d9c:	7013      	strb	r3, [r2, #0]
 8024d9e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8024da0:	4b54      	ldr	r3, [pc, #336]	@ (8024ef4 <_svfiprintf_r+0x1e8>)
 8024da2:	2205      	movs	r2, #5
 8024da4:	0018      	movs	r0, r3
 8024da6:	7831      	ldrb	r1, [r6, #0]
 8024da8:	9305      	str	r3, [sp, #20]
 8024daa:	f7fd ff68 	bl	8022c7e <memchr>
 8024dae:	1c75      	adds	r5, r6, #1
 8024db0:	2800      	cmp	r0, #0
 8024db2:	d11f      	bne.n	8024df4 <_svfiprintf_r+0xe8>
 8024db4:	6822      	ldr	r2, [r4, #0]
 8024db6:	06d3      	lsls	r3, r2, #27
 8024db8:	d504      	bpl.n	8024dc4 <_svfiprintf_r+0xb8>
 8024dba:	2353      	movs	r3, #83	@ 0x53
 8024dbc:	a904      	add	r1, sp, #16
 8024dbe:	185b      	adds	r3, r3, r1
 8024dc0:	2120      	movs	r1, #32
 8024dc2:	7019      	strb	r1, [r3, #0]
 8024dc4:	0713      	lsls	r3, r2, #28
 8024dc6:	d504      	bpl.n	8024dd2 <_svfiprintf_r+0xc6>
 8024dc8:	2353      	movs	r3, #83	@ 0x53
 8024dca:	a904      	add	r1, sp, #16
 8024dcc:	185b      	adds	r3, r3, r1
 8024dce:	212b      	movs	r1, #43	@ 0x2b
 8024dd0:	7019      	strb	r1, [r3, #0]
 8024dd2:	7833      	ldrb	r3, [r6, #0]
 8024dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8024dd6:	d016      	beq.n	8024e06 <_svfiprintf_r+0xfa>
 8024dd8:	0035      	movs	r5, r6
 8024dda:	2100      	movs	r1, #0
 8024ddc:	200a      	movs	r0, #10
 8024dde:	68e3      	ldr	r3, [r4, #12]
 8024de0:	782a      	ldrb	r2, [r5, #0]
 8024de2:	1c6e      	adds	r6, r5, #1
 8024de4:	3a30      	subs	r2, #48	@ 0x30
 8024de6:	2a09      	cmp	r2, #9
 8024de8:	d950      	bls.n	8024e8c <_svfiprintf_r+0x180>
 8024dea:	2900      	cmp	r1, #0
 8024dec:	d111      	bne.n	8024e12 <_svfiprintf_r+0x106>
 8024dee:	e017      	b.n	8024e20 <_svfiprintf_r+0x114>
 8024df0:	3501      	adds	r5, #1
 8024df2:	e7af      	b.n	8024d54 <_svfiprintf_r+0x48>
 8024df4:	9b05      	ldr	r3, [sp, #20]
 8024df6:	6822      	ldr	r2, [r4, #0]
 8024df8:	1ac0      	subs	r0, r0, r3
 8024dfa:	2301      	movs	r3, #1
 8024dfc:	4083      	lsls	r3, r0
 8024dfe:	4313      	orrs	r3, r2
 8024e00:	002e      	movs	r6, r5
 8024e02:	6023      	str	r3, [r4, #0]
 8024e04:	e7cc      	b.n	8024da0 <_svfiprintf_r+0x94>
 8024e06:	9b07      	ldr	r3, [sp, #28]
 8024e08:	1d19      	adds	r1, r3, #4
 8024e0a:	681b      	ldr	r3, [r3, #0]
 8024e0c:	9107      	str	r1, [sp, #28]
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	db01      	blt.n	8024e16 <_svfiprintf_r+0x10a>
 8024e12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024e14:	e004      	b.n	8024e20 <_svfiprintf_r+0x114>
 8024e16:	425b      	negs	r3, r3
 8024e18:	60e3      	str	r3, [r4, #12]
 8024e1a:	2302      	movs	r3, #2
 8024e1c:	4313      	orrs	r3, r2
 8024e1e:	6023      	str	r3, [r4, #0]
 8024e20:	782b      	ldrb	r3, [r5, #0]
 8024e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8024e24:	d10c      	bne.n	8024e40 <_svfiprintf_r+0x134>
 8024e26:	786b      	ldrb	r3, [r5, #1]
 8024e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8024e2a:	d134      	bne.n	8024e96 <_svfiprintf_r+0x18a>
 8024e2c:	9b07      	ldr	r3, [sp, #28]
 8024e2e:	3502      	adds	r5, #2
 8024e30:	1d1a      	adds	r2, r3, #4
 8024e32:	681b      	ldr	r3, [r3, #0]
 8024e34:	9207      	str	r2, [sp, #28]
 8024e36:	2b00      	cmp	r3, #0
 8024e38:	da01      	bge.n	8024e3e <_svfiprintf_r+0x132>
 8024e3a:	2301      	movs	r3, #1
 8024e3c:	425b      	negs	r3, r3
 8024e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e40:	4e2d      	ldr	r6, [pc, #180]	@ (8024ef8 <_svfiprintf_r+0x1ec>)
 8024e42:	2203      	movs	r2, #3
 8024e44:	0030      	movs	r0, r6
 8024e46:	7829      	ldrb	r1, [r5, #0]
 8024e48:	f7fd ff19 	bl	8022c7e <memchr>
 8024e4c:	2800      	cmp	r0, #0
 8024e4e:	d006      	beq.n	8024e5e <_svfiprintf_r+0x152>
 8024e50:	2340      	movs	r3, #64	@ 0x40
 8024e52:	1b80      	subs	r0, r0, r6
 8024e54:	4083      	lsls	r3, r0
 8024e56:	6822      	ldr	r2, [r4, #0]
 8024e58:	3501      	adds	r5, #1
 8024e5a:	4313      	orrs	r3, r2
 8024e5c:	6023      	str	r3, [r4, #0]
 8024e5e:	7829      	ldrb	r1, [r5, #0]
 8024e60:	2206      	movs	r2, #6
 8024e62:	4826      	ldr	r0, [pc, #152]	@ (8024efc <_svfiprintf_r+0x1f0>)
 8024e64:	1c6e      	adds	r6, r5, #1
 8024e66:	7621      	strb	r1, [r4, #24]
 8024e68:	f7fd ff09 	bl	8022c7e <memchr>
 8024e6c:	2800      	cmp	r0, #0
 8024e6e:	d038      	beq.n	8024ee2 <_svfiprintf_r+0x1d6>
 8024e70:	4b23      	ldr	r3, [pc, #140]	@ (8024f00 <_svfiprintf_r+0x1f4>)
 8024e72:	2b00      	cmp	r3, #0
 8024e74:	d122      	bne.n	8024ebc <_svfiprintf_r+0x1b0>
 8024e76:	2207      	movs	r2, #7
 8024e78:	9b07      	ldr	r3, [sp, #28]
 8024e7a:	3307      	adds	r3, #7
 8024e7c:	4393      	bics	r3, r2
 8024e7e:	3308      	adds	r3, #8
 8024e80:	9307      	str	r3, [sp, #28]
 8024e82:	6963      	ldr	r3, [r4, #20]
 8024e84:	9a04      	ldr	r2, [sp, #16]
 8024e86:	189b      	adds	r3, r3, r2
 8024e88:	6163      	str	r3, [r4, #20]
 8024e8a:	e762      	b.n	8024d52 <_svfiprintf_r+0x46>
 8024e8c:	4343      	muls	r3, r0
 8024e8e:	0035      	movs	r5, r6
 8024e90:	2101      	movs	r1, #1
 8024e92:	189b      	adds	r3, r3, r2
 8024e94:	e7a4      	b.n	8024de0 <_svfiprintf_r+0xd4>
 8024e96:	2300      	movs	r3, #0
 8024e98:	200a      	movs	r0, #10
 8024e9a:	0019      	movs	r1, r3
 8024e9c:	3501      	adds	r5, #1
 8024e9e:	6063      	str	r3, [r4, #4]
 8024ea0:	782a      	ldrb	r2, [r5, #0]
 8024ea2:	1c6e      	adds	r6, r5, #1
 8024ea4:	3a30      	subs	r2, #48	@ 0x30
 8024ea6:	2a09      	cmp	r2, #9
 8024ea8:	d903      	bls.n	8024eb2 <_svfiprintf_r+0x1a6>
 8024eaa:	2b00      	cmp	r3, #0
 8024eac:	d0c8      	beq.n	8024e40 <_svfiprintf_r+0x134>
 8024eae:	9109      	str	r1, [sp, #36]	@ 0x24
 8024eb0:	e7c6      	b.n	8024e40 <_svfiprintf_r+0x134>
 8024eb2:	4341      	muls	r1, r0
 8024eb4:	0035      	movs	r5, r6
 8024eb6:	2301      	movs	r3, #1
 8024eb8:	1889      	adds	r1, r1, r2
 8024eba:	e7f1      	b.n	8024ea0 <_svfiprintf_r+0x194>
 8024ebc:	aa07      	add	r2, sp, #28
 8024ebe:	9200      	str	r2, [sp, #0]
 8024ec0:	0021      	movs	r1, r4
 8024ec2:	003a      	movs	r2, r7
 8024ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8024f04 <_svfiprintf_r+0x1f8>)
 8024ec6:	9803      	ldr	r0, [sp, #12]
 8024ec8:	f7fc ffb2 	bl	8021e30 <_printf_float>
 8024ecc:	9004      	str	r0, [sp, #16]
 8024ece:	9b04      	ldr	r3, [sp, #16]
 8024ed0:	3301      	adds	r3, #1
 8024ed2:	d1d6      	bne.n	8024e82 <_svfiprintf_r+0x176>
 8024ed4:	89bb      	ldrh	r3, [r7, #12]
 8024ed6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024ed8:	065b      	lsls	r3, r3, #25
 8024eda:	d500      	bpl.n	8024ede <_svfiprintf_r+0x1d2>
 8024edc:	e72c      	b.n	8024d38 <_svfiprintf_r+0x2c>
 8024ede:	b021      	add	sp, #132	@ 0x84
 8024ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ee2:	aa07      	add	r2, sp, #28
 8024ee4:	9200      	str	r2, [sp, #0]
 8024ee6:	0021      	movs	r1, r4
 8024ee8:	003a      	movs	r2, r7
 8024eea:	4b06      	ldr	r3, [pc, #24]	@ (8024f04 <_svfiprintf_r+0x1f8>)
 8024eec:	9803      	ldr	r0, [sp, #12]
 8024eee:	f7fd fa4d 	bl	802238c <_printf_i>
 8024ef2:	e7eb      	b.n	8024ecc <_svfiprintf_r+0x1c0>
 8024ef4:	080298a8 	.word	0x080298a8
 8024ef8:	080298ae 	.word	0x080298ae
 8024efc:	080298b2 	.word	0x080298b2
 8024f00:	08021e31 	.word	0x08021e31
 8024f04:	08024c4d 	.word	0x08024c4d

08024f08 <__sfputc_r>:
 8024f08:	6893      	ldr	r3, [r2, #8]
 8024f0a:	b510      	push	{r4, lr}
 8024f0c:	3b01      	subs	r3, #1
 8024f0e:	6093      	str	r3, [r2, #8]
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	da04      	bge.n	8024f1e <__sfputc_r+0x16>
 8024f14:	6994      	ldr	r4, [r2, #24]
 8024f16:	42a3      	cmp	r3, r4
 8024f18:	db07      	blt.n	8024f2a <__sfputc_r+0x22>
 8024f1a:	290a      	cmp	r1, #10
 8024f1c:	d005      	beq.n	8024f2a <__sfputc_r+0x22>
 8024f1e:	6813      	ldr	r3, [r2, #0]
 8024f20:	1c58      	adds	r0, r3, #1
 8024f22:	6010      	str	r0, [r2, #0]
 8024f24:	7019      	strb	r1, [r3, #0]
 8024f26:	0008      	movs	r0, r1
 8024f28:	bd10      	pop	{r4, pc}
 8024f2a:	f7fd fd37 	bl	802299c <__swbuf_r>
 8024f2e:	0001      	movs	r1, r0
 8024f30:	e7f9      	b.n	8024f26 <__sfputc_r+0x1e>

08024f32 <__sfputs_r>:
 8024f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f34:	0006      	movs	r6, r0
 8024f36:	000f      	movs	r7, r1
 8024f38:	0014      	movs	r4, r2
 8024f3a:	18d5      	adds	r5, r2, r3
 8024f3c:	42ac      	cmp	r4, r5
 8024f3e:	d101      	bne.n	8024f44 <__sfputs_r+0x12>
 8024f40:	2000      	movs	r0, #0
 8024f42:	e007      	b.n	8024f54 <__sfputs_r+0x22>
 8024f44:	7821      	ldrb	r1, [r4, #0]
 8024f46:	003a      	movs	r2, r7
 8024f48:	0030      	movs	r0, r6
 8024f4a:	f7ff ffdd 	bl	8024f08 <__sfputc_r>
 8024f4e:	3401      	adds	r4, #1
 8024f50:	1c43      	adds	r3, r0, #1
 8024f52:	d1f3      	bne.n	8024f3c <__sfputs_r+0xa>
 8024f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024f58 <_vfiprintf_r>:
 8024f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f5a:	b0a1      	sub	sp, #132	@ 0x84
 8024f5c:	000f      	movs	r7, r1
 8024f5e:	0015      	movs	r5, r2
 8024f60:	001e      	movs	r6, r3
 8024f62:	9003      	str	r0, [sp, #12]
 8024f64:	2800      	cmp	r0, #0
 8024f66:	d004      	beq.n	8024f72 <_vfiprintf_r+0x1a>
 8024f68:	6a03      	ldr	r3, [r0, #32]
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	d101      	bne.n	8024f72 <_vfiprintf_r+0x1a>
 8024f6e:	f7fd fbab 	bl	80226c8 <__sinit>
 8024f72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024f74:	07db      	lsls	r3, r3, #31
 8024f76:	d405      	bmi.n	8024f84 <_vfiprintf_r+0x2c>
 8024f78:	89bb      	ldrh	r3, [r7, #12]
 8024f7a:	059b      	lsls	r3, r3, #22
 8024f7c:	d402      	bmi.n	8024f84 <_vfiprintf_r+0x2c>
 8024f7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024f80:	f7fd fe7b 	bl	8022c7a <__retarget_lock_acquire_recursive>
 8024f84:	89bb      	ldrh	r3, [r7, #12]
 8024f86:	071b      	lsls	r3, r3, #28
 8024f88:	d502      	bpl.n	8024f90 <_vfiprintf_r+0x38>
 8024f8a:	693b      	ldr	r3, [r7, #16]
 8024f8c:	2b00      	cmp	r3, #0
 8024f8e:	d113      	bne.n	8024fb8 <_vfiprintf_r+0x60>
 8024f90:	0039      	movs	r1, r7
 8024f92:	9803      	ldr	r0, [sp, #12]
 8024f94:	f7fd fd44 	bl	8022a20 <__swsetup_r>
 8024f98:	2800      	cmp	r0, #0
 8024f9a:	d00d      	beq.n	8024fb8 <_vfiprintf_r+0x60>
 8024f9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024f9e:	07db      	lsls	r3, r3, #31
 8024fa0:	d503      	bpl.n	8024faa <_vfiprintf_r+0x52>
 8024fa2:	2001      	movs	r0, #1
 8024fa4:	4240      	negs	r0, r0
 8024fa6:	b021      	add	sp, #132	@ 0x84
 8024fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024faa:	89bb      	ldrh	r3, [r7, #12]
 8024fac:	059b      	lsls	r3, r3, #22
 8024fae:	d4f8      	bmi.n	8024fa2 <_vfiprintf_r+0x4a>
 8024fb0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024fb2:	f7fd fe63 	bl	8022c7c <__retarget_lock_release_recursive>
 8024fb6:	e7f4      	b.n	8024fa2 <_vfiprintf_r+0x4a>
 8024fb8:	2300      	movs	r3, #0
 8024fba:	ac08      	add	r4, sp, #32
 8024fbc:	6163      	str	r3, [r4, #20]
 8024fbe:	3320      	adds	r3, #32
 8024fc0:	7663      	strb	r3, [r4, #25]
 8024fc2:	3310      	adds	r3, #16
 8024fc4:	76a3      	strb	r3, [r4, #26]
 8024fc6:	9607      	str	r6, [sp, #28]
 8024fc8:	002e      	movs	r6, r5
 8024fca:	7833      	ldrb	r3, [r6, #0]
 8024fcc:	2b00      	cmp	r3, #0
 8024fce:	d001      	beq.n	8024fd4 <_vfiprintf_r+0x7c>
 8024fd0:	2b25      	cmp	r3, #37	@ 0x25
 8024fd2:	d148      	bne.n	8025066 <_vfiprintf_r+0x10e>
 8024fd4:	1b73      	subs	r3, r6, r5
 8024fd6:	9305      	str	r3, [sp, #20]
 8024fd8:	42ae      	cmp	r6, r5
 8024fda:	d00b      	beq.n	8024ff4 <_vfiprintf_r+0x9c>
 8024fdc:	002a      	movs	r2, r5
 8024fde:	0039      	movs	r1, r7
 8024fe0:	9803      	ldr	r0, [sp, #12]
 8024fe2:	f7ff ffa6 	bl	8024f32 <__sfputs_r>
 8024fe6:	3001      	adds	r0, #1
 8024fe8:	d100      	bne.n	8024fec <_vfiprintf_r+0x94>
 8024fea:	e0ae      	b.n	802514a <_vfiprintf_r+0x1f2>
 8024fec:	6963      	ldr	r3, [r4, #20]
 8024fee:	9a05      	ldr	r2, [sp, #20]
 8024ff0:	189b      	adds	r3, r3, r2
 8024ff2:	6163      	str	r3, [r4, #20]
 8024ff4:	7833      	ldrb	r3, [r6, #0]
 8024ff6:	2b00      	cmp	r3, #0
 8024ff8:	d100      	bne.n	8024ffc <_vfiprintf_r+0xa4>
 8024ffa:	e0a6      	b.n	802514a <_vfiprintf_r+0x1f2>
 8024ffc:	2201      	movs	r2, #1
 8024ffe:	2300      	movs	r3, #0
 8025000:	4252      	negs	r2, r2
 8025002:	6062      	str	r2, [r4, #4]
 8025004:	a904      	add	r1, sp, #16
 8025006:	3254      	adds	r2, #84	@ 0x54
 8025008:	1852      	adds	r2, r2, r1
 802500a:	1c75      	adds	r5, r6, #1
 802500c:	6023      	str	r3, [r4, #0]
 802500e:	60e3      	str	r3, [r4, #12]
 8025010:	60a3      	str	r3, [r4, #8]
 8025012:	7013      	strb	r3, [r2, #0]
 8025014:	65a3      	str	r3, [r4, #88]	@ 0x58
 8025016:	4b59      	ldr	r3, [pc, #356]	@ (802517c <_vfiprintf_r+0x224>)
 8025018:	2205      	movs	r2, #5
 802501a:	0018      	movs	r0, r3
 802501c:	7829      	ldrb	r1, [r5, #0]
 802501e:	9305      	str	r3, [sp, #20]
 8025020:	f7fd fe2d 	bl	8022c7e <memchr>
 8025024:	1c6e      	adds	r6, r5, #1
 8025026:	2800      	cmp	r0, #0
 8025028:	d11f      	bne.n	802506a <_vfiprintf_r+0x112>
 802502a:	6822      	ldr	r2, [r4, #0]
 802502c:	06d3      	lsls	r3, r2, #27
 802502e:	d504      	bpl.n	802503a <_vfiprintf_r+0xe2>
 8025030:	2353      	movs	r3, #83	@ 0x53
 8025032:	a904      	add	r1, sp, #16
 8025034:	185b      	adds	r3, r3, r1
 8025036:	2120      	movs	r1, #32
 8025038:	7019      	strb	r1, [r3, #0]
 802503a:	0713      	lsls	r3, r2, #28
 802503c:	d504      	bpl.n	8025048 <_vfiprintf_r+0xf0>
 802503e:	2353      	movs	r3, #83	@ 0x53
 8025040:	a904      	add	r1, sp, #16
 8025042:	185b      	adds	r3, r3, r1
 8025044:	212b      	movs	r1, #43	@ 0x2b
 8025046:	7019      	strb	r1, [r3, #0]
 8025048:	782b      	ldrb	r3, [r5, #0]
 802504a:	2b2a      	cmp	r3, #42	@ 0x2a
 802504c:	d016      	beq.n	802507c <_vfiprintf_r+0x124>
 802504e:	002e      	movs	r6, r5
 8025050:	2100      	movs	r1, #0
 8025052:	200a      	movs	r0, #10
 8025054:	68e3      	ldr	r3, [r4, #12]
 8025056:	7832      	ldrb	r2, [r6, #0]
 8025058:	1c75      	adds	r5, r6, #1
 802505a:	3a30      	subs	r2, #48	@ 0x30
 802505c:	2a09      	cmp	r2, #9
 802505e:	d950      	bls.n	8025102 <_vfiprintf_r+0x1aa>
 8025060:	2900      	cmp	r1, #0
 8025062:	d111      	bne.n	8025088 <_vfiprintf_r+0x130>
 8025064:	e017      	b.n	8025096 <_vfiprintf_r+0x13e>
 8025066:	3601      	adds	r6, #1
 8025068:	e7af      	b.n	8024fca <_vfiprintf_r+0x72>
 802506a:	9b05      	ldr	r3, [sp, #20]
 802506c:	6822      	ldr	r2, [r4, #0]
 802506e:	1ac0      	subs	r0, r0, r3
 8025070:	2301      	movs	r3, #1
 8025072:	4083      	lsls	r3, r0
 8025074:	4313      	orrs	r3, r2
 8025076:	0035      	movs	r5, r6
 8025078:	6023      	str	r3, [r4, #0]
 802507a:	e7cc      	b.n	8025016 <_vfiprintf_r+0xbe>
 802507c:	9b07      	ldr	r3, [sp, #28]
 802507e:	1d19      	adds	r1, r3, #4
 8025080:	681b      	ldr	r3, [r3, #0]
 8025082:	9107      	str	r1, [sp, #28]
 8025084:	2b00      	cmp	r3, #0
 8025086:	db01      	blt.n	802508c <_vfiprintf_r+0x134>
 8025088:	930b      	str	r3, [sp, #44]	@ 0x2c
 802508a:	e004      	b.n	8025096 <_vfiprintf_r+0x13e>
 802508c:	425b      	negs	r3, r3
 802508e:	60e3      	str	r3, [r4, #12]
 8025090:	2302      	movs	r3, #2
 8025092:	4313      	orrs	r3, r2
 8025094:	6023      	str	r3, [r4, #0]
 8025096:	7833      	ldrb	r3, [r6, #0]
 8025098:	2b2e      	cmp	r3, #46	@ 0x2e
 802509a:	d10c      	bne.n	80250b6 <_vfiprintf_r+0x15e>
 802509c:	7873      	ldrb	r3, [r6, #1]
 802509e:	2b2a      	cmp	r3, #42	@ 0x2a
 80250a0:	d134      	bne.n	802510c <_vfiprintf_r+0x1b4>
 80250a2:	9b07      	ldr	r3, [sp, #28]
 80250a4:	3602      	adds	r6, #2
 80250a6:	1d1a      	adds	r2, r3, #4
 80250a8:	681b      	ldr	r3, [r3, #0]
 80250aa:	9207      	str	r2, [sp, #28]
 80250ac:	2b00      	cmp	r3, #0
 80250ae:	da01      	bge.n	80250b4 <_vfiprintf_r+0x15c>
 80250b0:	2301      	movs	r3, #1
 80250b2:	425b      	negs	r3, r3
 80250b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80250b6:	4d32      	ldr	r5, [pc, #200]	@ (8025180 <_vfiprintf_r+0x228>)
 80250b8:	2203      	movs	r2, #3
 80250ba:	0028      	movs	r0, r5
 80250bc:	7831      	ldrb	r1, [r6, #0]
 80250be:	f7fd fdde 	bl	8022c7e <memchr>
 80250c2:	2800      	cmp	r0, #0
 80250c4:	d006      	beq.n	80250d4 <_vfiprintf_r+0x17c>
 80250c6:	2340      	movs	r3, #64	@ 0x40
 80250c8:	1b40      	subs	r0, r0, r5
 80250ca:	4083      	lsls	r3, r0
 80250cc:	6822      	ldr	r2, [r4, #0]
 80250ce:	3601      	adds	r6, #1
 80250d0:	4313      	orrs	r3, r2
 80250d2:	6023      	str	r3, [r4, #0]
 80250d4:	7831      	ldrb	r1, [r6, #0]
 80250d6:	2206      	movs	r2, #6
 80250d8:	482a      	ldr	r0, [pc, #168]	@ (8025184 <_vfiprintf_r+0x22c>)
 80250da:	1c75      	adds	r5, r6, #1
 80250dc:	7621      	strb	r1, [r4, #24]
 80250de:	f7fd fdce 	bl	8022c7e <memchr>
 80250e2:	2800      	cmp	r0, #0
 80250e4:	d040      	beq.n	8025168 <_vfiprintf_r+0x210>
 80250e6:	4b28      	ldr	r3, [pc, #160]	@ (8025188 <_vfiprintf_r+0x230>)
 80250e8:	2b00      	cmp	r3, #0
 80250ea:	d122      	bne.n	8025132 <_vfiprintf_r+0x1da>
 80250ec:	2207      	movs	r2, #7
 80250ee:	9b07      	ldr	r3, [sp, #28]
 80250f0:	3307      	adds	r3, #7
 80250f2:	4393      	bics	r3, r2
 80250f4:	3308      	adds	r3, #8
 80250f6:	9307      	str	r3, [sp, #28]
 80250f8:	6963      	ldr	r3, [r4, #20]
 80250fa:	9a04      	ldr	r2, [sp, #16]
 80250fc:	189b      	adds	r3, r3, r2
 80250fe:	6163      	str	r3, [r4, #20]
 8025100:	e762      	b.n	8024fc8 <_vfiprintf_r+0x70>
 8025102:	4343      	muls	r3, r0
 8025104:	002e      	movs	r6, r5
 8025106:	2101      	movs	r1, #1
 8025108:	189b      	adds	r3, r3, r2
 802510a:	e7a4      	b.n	8025056 <_vfiprintf_r+0xfe>
 802510c:	2300      	movs	r3, #0
 802510e:	200a      	movs	r0, #10
 8025110:	0019      	movs	r1, r3
 8025112:	3601      	adds	r6, #1
 8025114:	6063      	str	r3, [r4, #4]
 8025116:	7832      	ldrb	r2, [r6, #0]
 8025118:	1c75      	adds	r5, r6, #1
 802511a:	3a30      	subs	r2, #48	@ 0x30
 802511c:	2a09      	cmp	r2, #9
 802511e:	d903      	bls.n	8025128 <_vfiprintf_r+0x1d0>
 8025120:	2b00      	cmp	r3, #0
 8025122:	d0c8      	beq.n	80250b6 <_vfiprintf_r+0x15e>
 8025124:	9109      	str	r1, [sp, #36]	@ 0x24
 8025126:	e7c6      	b.n	80250b6 <_vfiprintf_r+0x15e>
 8025128:	4341      	muls	r1, r0
 802512a:	002e      	movs	r6, r5
 802512c:	2301      	movs	r3, #1
 802512e:	1889      	adds	r1, r1, r2
 8025130:	e7f1      	b.n	8025116 <_vfiprintf_r+0x1be>
 8025132:	aa07      	add	r2, sp, #28
 8025134:	9200      	str	r2, [sp, #0]
 8025136:	0021      	movs	r1, r4
 8025138:	003a      	movs	r2, r7
 802513a:	4b14      	ldr	r3, [pc, #80]	@ (802518c <_vfiprintf_r+0x234>)
 802513c:	9803      	ldr	r0, [sp, #12]
 802513e:	f7fc fe77 	bl	8021e30 <_printf_float>
 8025142:	9004      	str	r0, [sp, #16]
 8025144:	9b04      	ldr	r3, [sp, #16]
 8025146:	3301      	adds	r3, #1
 8025148:	d1d6      	bne.n	80250f8 <_vfiprintf_r+0x1a0>
 802514a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802514c:	07db      	lsls	r3, r3, #31
 802514e:	d405      	bmi.n	802515c <_vfiprintf_r+0x204>
 8025150:	89bb      	ldrh	r3, [r7, #12]
 8025152:	059b      	lsls	r3, r3, #22
 8025154:	d402      	bmi.n	802515c <_vfiprintf_r+0x204>
 8025156:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025158:	f7fd fd90 	bl	8022c7c <__retarget_lock_release_recursive>
 802515c:	89bb      	ldrh	r3, [r7, #12]
 802515e:	065b      	lsls	r3, r3, #25
 8025160:	d500      	bpl.n	8025164 <_vfiprintf_r+0x20c>
 8025162:	e71e      	b.n	8024fa2 <_vfiprintf_r+0x4a>
 8025164:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025166:	e71e      	b.n	8024fa6 <_vfiprintf_r+0x4e>
 8025168:	aa07      	add	r2, sp, #28
 802516a:	9200      	str	r2, [sp, #0]
 802516c:	0021      	movs	r1, r4
 802516e:	003a      	movs	r2, r7
 8025170:	4b06      	ldr	r3, [pc, #24]	@ (802518c <_vfiprintf_r+0x234>)
 8025172:	9803      	ldr	r0, [sp, #12]
 8025174:	f7fd f90a 	bl	802238c <_printf_i>
 8025178:	e7e3      	b.n	8025142 <_vfiprintf_r+0x1ea>
 802517a:	46c0      	nop			@ (mov r8, r8)
 802517c:	080298a8 	.word	0x080298a8
 8025180:	080298ae 	.word	0x080298ae
 8025184:	080298b2 	.word	0x080298b2
 8025188:	08021e31 	.word	0x08021e31
 802518c:	08024f33 	.word	0x08024f33

08025190 <__sflush_r>:
 8025190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025192:	220c      	movs	r2, #12
 8025194:	5e8b      	ldrsh	r3, [r1, r2]
 8025196:	0005      	movs	r5, r0
 8025198:	000c      	movs	r4, r1
 802519a:	071a      	lsls	r2, r3, #28
 802519c:	d456      	bmi.n	802524c <__sflush_r+0xbc>
 802519e:	684a      	ldr	r2, [r1, #4]
 80251a0:	2a00      	cmp	r2, #0
 80251a2:	dc02      	bgt.n	80251aa <__sflush_r+0x1a>
 80251a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80251a6:	2a00      	cmp	r2, #0
 80251a8:	dd4e      	ble.n	8025248 <__sflush_r+0xb8>
 80251aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80251ac:	2f00      	cmp	r7, #0
 80251ae:	d04b      	beq.n	8025248 <__sflush_r+0xb8>
 80251b0:	2200      	movs	r2, #0
 80251b2:	2080      	movs	r0, #128	@ 0x80
 80251b4:	682e      	ldr	r6, [r5, #0]
 80251b6:	602a      	str	r2, [r5, #0]
 80251b8:	001a      	movs	r2, r3
 80251ba:	0140      	lsls	r0, r0, #5
 80251bc:	6a21      	ldr	r1, [r4, #32]
 80251be:	4002      	ands	r2, r0
 80251c0:	4203      	tst	r3, r0
 80251c2:	d033      	beq.n	802522c <__sflush_r+0x9c>
 80251c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80251c6:	89a3      	ldrh	r3, [r4, #12]
 80251c8:	075b      	lsls	r3, r3, #29
 80251ca:	d506      	bpl.n	80251da <__sflush_r+0x4a>
 80251cc:	6863      	ldr	r3, [r4, #4]
 80251ce:	1ad2      	subs	r2, r2, r3
 80251d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80251d2:	2b00      	cmp	r3, #0
 80251d4:	d001      	beq.n	80251da <__sflush_r+0x4a>
 80251d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80251d8:	1ad2      	subs	r2, r2, r3
 80251da:	2300      	movs	r3, #0
 80251dc:	0028      	movs	r0, r5
 80251de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80251e0:	6a21      	ldr	r1, [r4, #32]
 80251e2:	47b8      	blx	r7
 80251e4:	89a2      	ldrh	r2, [r4, #12]
 80251e6:	1c43      	adds	r3, r0, #1
 80251e8:	d106      	bne.n	80251f8 <__sflush_r+0x68>
 80251ea:	6829      	ldr	r1, [r5, #0]
 80251ec:	291d      	cmp	r1, #29
 80251ee:	d846      	bhi.n	802527e <__sflush_r+0xee>
 80251f0:	4b29      	ldr	r3, [pc, #164]	@ (8025298 <__sflush_r+0x108>)
 80251f2:	410b      	asrs	r3, r1
 80251f4:	07db      	lsls	r3, r3, #31
 80251f6:	d442      	bmi.n	802527e <__sflush_r+0xee>
 80251f8:	2300      	movs	r3, #0
 80251fa:	6063      	str	r3, [r4, #4]
 80251fc:	6923      	ldr	r3, [r4, #16]
 80251fe:	6023      	str	r3, [r4, #0]
 8025200:	04d2      	lsls	r2, r2, #19
 8025202:	d505      	bpl.n	8025210 <__sflush_r+0x80>
 8025204:	1c43      	adds	r3, r0, #1
 8025206:	d102      	bne.n	802520e <__sflush_r+0x7e>
 8025208:	682b      	ldr	r3, [r5, #0]
 802520a:	2b00      	cmp	r3, #0
 802520c:	d100      	bne.n	8025210 <__sflush_r+0x80>
 802520e:	6560      	str	r0, [r4, #84]	@ 0x54
 8025210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025212:	602e      	str	r6, [r5, #0]
 8025214:	2900      	cmp	r1, #0
 8025216:	d017      	beq.n	8025248 <__sflush_r+0xb8>
 8025218:	0023      	movs	r3, r4
 802521a:	3344      	adds	r3, #68	@ 0x44
 802521c:	4299      	cmp	r1, r3
 802521e:	d002      	beq.n	8025226 <__sflush_r+0x96>
 8025220:	0028      	movs	r0, r5
 8025222:	f7fe fbc9 	bl	80239b8 <_free_r>
 8025226:	2300      	movs	r3, #0
 8025228:	6363      	str	r3, [r4, #52]	@ 0x34
 802522a:	e00d      	b.n	8025248 <__sflush_r+0xb8>
 802522c:	2301      	movs	r3, #1
 802522e:	0028      	movs	r0, r5
 8025230:	47b8      	blx	r7
 8025232:	0002      	movs	r2, r0
 8025234:	1c43      	adds	r3, r0, #1
 8025236:	d1c6      	bne.n	80251c6 <__sflush_r+0x36>
 8025238:	682b      	ldr	r3, [r5, #0]
 802523a:	2b00      	cmp	r3, #0
 802523c:	d0c3      	beq.n	80251c6 <__sflush_r+0x36>
 802523e:	2b1d      	cmp	r3, #29
 8025240:	d001      	beq.n	8025246 <__sflush_r+0xb6>
 8025242:	2b16      	cmp	r3, #22
 8025244:	d11a      	bne.n	802527c <__sflush_r+0xec>
 8025246:	602e      	str	r6, [r5, #0]
 8025248:	2000      	movs	r0, #0
 802524a:	e01e      	b.n	802528a <__sflush_r+0xfa>
 802524c:	690e      	ldr	r6, [r1, #16]
 802524e:	2e00      	cmp	r6, #0
 8025250:	d0fa      	beq.n	8025248 <__sflush_r+0xb8>
 8025252:	680f      	ldr	r7, [r1, #0]
 8025254:	600e      	str	r6, [r1, #0]
 8025256:	1bba      	subs	r2, r7, r6
 8025258:	9201      	str	r2, [sp, #4]
 802525a:	2200      	movs	r2, #0
 802525c:	079b      	lsls	r3, r3, #30
 802525e:	d100      	bne.n	8025262 <__sflush_r+0xd2>
 8025260:	694a      	ldr	r2, [r1, #20]
 8025262:	60a2      	str	r2, [r4, #8]
 8025264:	9b01      	ldr	r3, [sp, #4]
 8025266:	2b00      	cmp	r3, #0
 8025268:	ddee      	ble.n	8025248 <__sflush_r+0xb8>
 802526a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802526c:	0032      	movs	r2, r6
 802526e:	001f      	movs	r7, r3
 8025270:	0028      	movs	r0, r5
 8025272:	9b01      	ldr	r3, [sp, #4]
 8025274:	6a21      	ldr	r1, [r4, #32]
 8025276:	47b8      	blx	r7
 8025278:	2800      	cmp	r0, #0
 802527a:	dc07      	bgt.n	802528c <__sflush_r+0xfc>
 802527c:	89a2      	ldrh	r2, [r4, #12]
 802527e:	2340      	movs	r3, #64	@ 0x40
 8025280:	2001      	movs	r0, #1
 8025282:	4313      	orrs	r3, r2
 8025284:	b21b      	sxth	r3, r3
 8025286:	81a3      	strh	r3, [r4, #12]
 8025288:	4240      	negs	r0, r0
 802528a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802528c:	9b01      	ldr	r3, [sp, #4]
 802528e:	1836      	adds	r6, r6, r0
 8025290:	1a1b      	subs	r3, r3, r0
 8025292:	9301      	str	r3, [sp, #4]
 8025294:	e7e6      	b.n	8025264 <__sflush_r+0xd4>
 8025296:	46c0      	nop			@ (mov r8, r8)
 8025298:	dfbffffe 	.word	0xdfbffffe

0802529c <_fflush_r>:
 802529c:	690b      	ldr	r3, [r1, #16]
 802529e:	b570      	push	{r4, r5, r6, lr}
 80252a0:	0005      	movs	r5, r0
 80252a2:	000c      	movs	r4, r1
 80252a4:	2b00      	cmp	r3, #0
 80252a6:	d102      	bne.n	80252ae <_fflush_r+0x12>
 80252a8:	2500      	movs	r5, #0
 80252aa:	0028      	movs	r0, r5
 80252ac:	bd70      	pop	{r4, r5, r6, pc}
 80252ae:	2800      	cmp	r0, #0
 80252b0:	d004      	beq.n	80252bc <_fflush_r+0x20>
 80252b2:	6a03      	ldr	r3, [r0, #32]
 80252b4:	2b00      	cmp	r3, #0
 80252b6:	d101      	bne.n	80252bc <_fflush_r+0x20>
 80252b8:	f7fd fa06 	bl	80226c8 <__sinit>
 80252bc:	220c      	movs	r2, #12
 80252be:	5ea3      	ldrsh	r3, [r4, r2]
 80252c0:	2b00      	cmp	r3, #0
 80252c2:	d0f1      	beq.n	80252a8 <_fflush_r+0xc>
 80252c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80252c6:	07d2      	lsls	r2, r2, #31
 80252c8:	d404      	bmi.n	80252d4 <_fflush_r+0x38>
 80252ca:	059b      	lsls	r3, r3, #22
 80252cc:	d402      	bmi.n	80252d4 <_fflush_r+0x38>
 80252ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80252d0:	f7fd fcd3 	bl	8022c7a <__retarget_lock_acquire_recursive>
 80252d4:	0028      	movs	r0, r5
 80252d6:	0021      	movs	r1, r4
 80252d8:	f7ff ff5a 	bl	8025190 <__sflush_r>
 80252dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80252de:	0005      	movs	r5, r0
 80252e0:	07db      	lsls	r3, r3, #31
 80252e2:	d4e2      	bmi.n	80252aa <_fflush_r+0xe>
 80252e4:	89a3      	ldrh	r3, [r4, #12]
 80252e6:	059b      	lsls	r3, r3, #22
 80252e8:	d4df      	bmi.n	80252aa <_fflush_r+0xe>
 80252ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80252ec:	f7fd fcc6 	bl	8022c7c <__retarget_lock_release_recursive>
 80252f0:	e7db      	b.n	80252aa <_fflush_r+0xe>
	...

080252f4 <__swhatbuf_r>:
 80252f4:	b570      	push	{r4, r5, r6, lr}
 80252f6:	000e      	movs	r6, r1
 80252f8:	001d      	movs	r5, r3
 80252fa:	230e      	movs	r3, #14
 80252fc:	5ec9      	ldrsh	r1, [r1, r3]
 80252fe:	0014      	movs	r4, r2
 8025300:	b096      	sub	sp, #88	@ 0x58
 8025302:	2900      	cmp	r1, #0
 8025304:	da0c      	bge.n	8025320 <__swhatbuf_r+0x2c>
 8025306:	89b2      	ldrh	r2, [r6, #12]
 8025308:	2380      	movs	r3, #128	@ 0x80
 802530a:	0011      	movs	r1, r2
 802530c:	4019      	ands	r1, r3
 802530e:	421a      	tst	r2, r3
 8025310:	d114      	bne.n	802533c <__swhatbuf_r+0x48>
 8025312:	2380      	movs	r3, #128	@ 0x80
 8025314:	00db      	lsls	r3, r3, #3
 8025316:	2000      	movs	r0, #0
 8025318:	6029      	str	r1, [r5, #0]
 802531a:	6023      	str	r3, [r4, #0]
 802531c:	b016      	add	sp, #88	@ 0x58
 802531e:	bd70      	pop	{r4, r5, r6, pc}
 8025320:	466a      	mov	r2, sp
 8025322:	f000 f865 	bl	80253f0 <_fstat_r>
 8025326:	2800      	cmp	r0, #0
 8025328:	dbed      	blt.n	8025306 <__swhatbuf_r+0x12>
 802532a:	23f0      	movs	r3, #240	@ 0xf0
 802532c:	9901      	ldr	r1, [sp, #4]
 802532e:	021b      	lsls	r3, r3, #8
 8025330:	4019      	ands	r1, r3
 8025332:	4b04      	ldr	r3, [pc, #16]	@ (8025344 <__swhatbuf_r+0x50>)
 8025334:	18c9      	adds	r1, r1, r3
 8025336:	424b      	negs	r3, r1
 8025338:	4159      	adcs	r1, r3
 802533a:	e7ea      	b.n	8025312 <__swhatbuf_r+0x1e>
 802533c:	2100      	movs	r1, #0
 802533e:	2340      	movs	r3, #64	@ 0x40
 8025340:	e7e9      	b.n	8025316 <__swhatbuf_r+0x22>
 8025342:	46c0      	nop			@ (mov r8, r8)
 8025344:	ffffe000 	.word	0xffffe000

08025348 <__smakebuf_r>:
 8025348:	b5f0      	push	{r4, r5, r6, r7, lr}
 802534a:	2602      	movs	r6, #2
 802534c:	898b      	ldrh	r3, [r1, #12]
 802534e:	0005      	movs	r5, r0
 8025350:	000c      	movs	r4, r1
 8025352:	b085      	sub	sp, #20
 8025354:	4233      	tst	r3, r6
 8025356:	d007      	beq.n	8025368 <__smakebuf_r+0x20>
 8025358:	0023      	movs	r3, r4
 802535a:	3347      	adds	r3, #71	@ 0x47
 802535c:	6023      	str	r3, [r4, #0]
 802535e:	6123      	str	r3, [r4, #16]
 8025360:	2301      	movs	r3, #1
 8025362:	6163      	str	r3, [r4, #20]
 8025364:	b005      	add	sp, #20
 8025366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025368:	ab03      	add	r3, sp, #12
 802536a:	aa02      	add	r2, sp, #8
 802536c:	f7ff ffc2 	bl	80252f4 <__swhatbuf_r>
 8025370:	9f02      	ldr	r7, [sp, #8]
 8025372:	9001      	str	r0, [sp, #4]
 8025374:	0039      	movs	r1, r7
 8025376:	0028      	movs	r0, r5
 8025378:	f7fe feee 	bl	8024158 <_malloc_r>
 802537c:	2800      	cmp	r0, #0
 802537e:	d108      	bne.n	8025392 <__smakebuf_r+0x4a>
 8025380:	220c      	movs	r2, #12
 8025382:	5ea3      	ldrsh	r3, [r4, r2]
 8025384:	059a      	lsls	r2, r3, #22
 8025386:	d4ed      	bmi.n	8025364 <__smakebuf_r+0x1c>
 8025388:	2203      	movs	r2, #3
 802538a:	4393      	bics	r3, r2
 802538c:	431e      	orrs	r6, r3
 802538e:	81a6      	strh	r6, [r4, #12]
 8025390:	e7e2      	b.n	8025358 <__smakebuf_r+0x10>
 8025392:	2380      	movs	r3, #128	@ 0x80
 8025394:	89a2      	ldrh	r2, [r4, #12]
 8025396:	6020      	str	r0, [r4, #0]
 8025398:	4313      	orrs	r3, r2
 802539a:	81a3      	strh	r3, [r4, #12]
 802539c:	9b03      	ldr	r3, [sp, #12]
 802539e:	6120      	str	r0, [r4, #16]
 80253a0:	6167      	str	r7, [r4, #20]
 80253a2:	2b00      	cmp	r3, #0
 80253a4:	d00c      	beq.n	80253c0 <__smakebuf_r+0x78>
 80253a6:	0028      	movs	r0, r5
 80253a8:	230e      	movs	r3, #14
 80253aa:	5ee1      	ldrsh	r1, [r4, r3]
 80253ac:	f000 f832 	bl	8025414 <_isatty_r>
 80253b0:	2800      	cmp	r0, #0
 80253b2:	d005      	beq.n	80253c0 <__smakebuf_r+0x78>
 80253b4:	2303      	movs	r3, #3
 80253b6:	89a2      	ldrh	r2, [r4, #12]
 80253b8:	439a      	bics	r2, r3
 80253ba:	3b02      	subs	r3, #2
 80253bc:	4313      	orrs	r3, r2
 80253be:	81a3      	strh	r3, [r4, #12]
 80253c0:	89a3      	ldrh	r3, [r4, #12]
 80253c2:	9a01      	ldr	r2, [sp, #4]
 80253c4:	4313      	orrs	r3, r2
 80253c6:	81a3      	strh	r3, [r4, #12]
 80253c8:	e7cc      	b.n	8025364 <__smakebuf_r+0x1c>

080253ca <memmove>:
 80253ca:	b510      	push	{r4, lr}
 80253cc:	4288      	cmp	r0, r1
 80253ce:	d806      	bhi.n	80253de <memmove+0x14>
 80253d0:	2300      	movs	r3, #0
 80253d2:	429a      	cmp	r2, r3
 80253d4:	d008      	beq.n	80253e8 <memmove+0x1e>
 80253d6:	5ccc      	ldrb	r4, [r1, r3]
 80253d8:	54c4      	strb	r4, [r0, r3]
 80253da:	3301      	adds	r3, #1
 80253dc:	e7f9      	b.n	80253d2 <memmove+0x8>
 80253de:	188b      	adds	r3, r1, r2
 80253e0:	4298      	cmp	r0, r3
 80253e2:	d2f5      	bcs.n	80253d0 <memmove+0x6>
 80253e4:	3a01      	subs	r2, #1
 80253e6:	d200      	bcs.n	80253ea <memmove+0x20>
 80253e8:	bd10      	pop	{r4, pc}
 80253ea:	5c8b      	ldrb	r3, [r1, r2]
 80253ec:	5483      	strb	r3, [r0, r2]
 80253ee:	e7f9      	b.n	80253e4 <memmove+0x1a>

080253f0 <_fstat_r>:
 80253f0:	2300      	movs	r3, #0
 80253f2:	b570      	push	{r4, r5, r6, lr}
 80253f4:	4d06      	ldr	r5, [pc, #24]	@ (8025410 <_fstat_r+0x20>)
 80253f6:	0004      	movs	r4, r0
 80253f8:	0008      	movs	r0, r1
 80253fa:	0011      	movs	r1, r2
 80253fc:	602b      	str	r3, [r5, #0]
 80253fe:	f7ea fdbb 	bl	800ff78 <_fstat>
 8025402:	1c43      	adds	r3, r0, #1
 8025404:	d103      	bne.n	802540e <_fstat_r+0x1e>
 8025406:	682b      	ldr	r3, [r5, #0]
 8025408:	2b00      	cmp	r3, #0
 802540a:	d000      	beq.n	802540e <_fstat_r+0x1e>
 802540c:	6023      	str	r3, [r4, #0]
 802540e:	bd70      	pop	{r4, r5, r6, pc}
 8025410:	20003588 	.word	0x20003588

08025414 <_isatty_r>:
 8025414:	2300      	movs	r3, #0
 8025416:	b570      	push	{r4, r5, r6, lr}
 8025418:	4d06      	ldr	r5, [pc, #24]	@ (8025434 <_isatty_r+0x20>)
 802541a:	0004      	movs	r4, r0
 802541c:	0008      	movs	r0, r1
 802541e:	602b      	str	r3, [r5, #0]
 8025420:	f7ea fdb8 	bl	800ff94 <_isatty>
 8025424:	1c43      	adds	r3, r0, #1
 8025426:	d103      	bne.n	8025430 <_isatty_r+0x1c>
 8025428:	682b      	ldr	r3, [r5, #0]
 802542a:	2b00      	cmp	r3, #0
 802542c:	d000      	beq.n	8025430 <_isatty_r+0x1c>
 802542e:	6023      	str	r3, [r4, #0]
 8025430:	bd70      	pop	{r4, r5, r6, pc}
 8025432:	46c0      	nop			@ (mov r8, r8)
 8025434:	20003588 	.word	0x20003588

08025438 <_sbrk_r>:
 8025438:	2300      	movs	r3, #0
 802543a:	b570      	push	{r4, r5, r6, lr}
 802543c:	4d06      	ldr	r5, [pc, #24]	@ (8025458 <_sbrk_r+0x20>)
 802543e:	0004      	movs	r4, r0
 8025440:	0008      	movs	r0, r1
 8025442:	602b      	str	r3, [r5, #0]
 8025444:	f7ea fdba 	bl	800ffbc <_sbrk>
 8025448:	1c43      	adds	r3, r0, #1
 802544a:	d103      	bne.n	8025454 <_sbrk_r+0x1c>
 802544c:	682b      	ldr	r3, [r5, #0]
 802544e:	2b00      	cmp	r3, #0
 8025450:	d000      	beq.n	8025454 <_sbrk_r+0x1c>
 8025452:	6023      	str	r3, [r4, #0]
 8025454:	bd70      	pop	{r4, r5, r6, pc}
 8025456:	46c0      	nop			@ (mov r8, r8)
 8025458:	20003588 	.word	0x20003588

0802545c <__assert_func>:
 802545c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802545e:	0014      	movs	r4, r2
 8025460:	001a      	movs	r2, r3
 8025462:	4b09      	ldr	r3, [pc, #36]	@ (8025488 <__assert_func+0x2c>)
 8025464:	0005      	movs	r5, r0
 8025466:	681b      	ldr	r3, [r3, #0]
 8025468:	000e      	movs	r6, r1
 802546a:	68d8      	ldr	r0, [r3, #12]
 802546c:	4b07      	ldr	r3, [pc, #28]	@ (802548c <__assert_func+0x30>)
 802546e:	2c00      	cmp	r4, #0
 8025470:	d101      	bne.n	8025476 <__assert_func+0x1a>
 8025472:	4b07      	ldr	r3, [pc, #28]	@ (8025490 <__assert_func+0x34>)
 8025474:	001c      	movs	r4, r3
 8025476:	4907      	ldr	r1, [pc, #28]	@ (8025494 <__assert_func+0x38>)
 8025478:	9301      	str	r3, [sp, #4]
 802547a:	9402      	str	r4, [sp, #8]
 802547c:	002b      	movs	r3, r5
 802547e:	9600      	str	r6, [sp, #0]
 8025480:	f000 f866 	bl	8025550 <fiprintf>
 8025484:	f000 f874 	bl	8025570 <abort>
 8025488:	200003e0 	.word	0x200003e0
 802548c:	080298b9 	.word	0x080298b9
 8025490:	080298f4 	.word	0x080298f4
 8025494:	080298c6 	.word	0x080298c6

08025498 <_calloc_r>:
 8025498:	b570      	push	{r4, r5, r6, lr}
 802549a:	0c0b      	lsrs	r3, r1, #16
 802549c:	0c15      	lsrs	r5, r2, #16
 802549e:	2b00      	cmp	r3, #0
 80254a0:	d11e      	bne.n	80254e0 <_calloc_r+0x48>
 80254a2:	2d00      	cmp	r5, #0
 80254a4:	d10c      	bne.n	80254c0 <_calloc_r+0x28>
 80254a6:	b289      	uxth	r1, r1
 80254a8:	b294      	uxth	r4, r2
 80254aa:	434c      	muls	r4, r1
 80254ac:	0021      	movs	r1, r4
 80254ae:	f7fe fe53 	bl	8024158 <_malloc_r>
 80254b2:	1e05      	subs	r5, r0, #0
 80254b4:	d01a      	beq.n	80254ec <_calloc_r+0x54>
 80254b6:	0022      	movs	r2, r4
 80254b8:	2100      	movs	r1, #0
 80254ba:	f7fd fb0f 	bl	8022adc <memset>
 80254be:	e016      	b.n	80254ee <_calloc_r+0x56>
 80254c0:	1c2b      	adds	r3, r5, #0
 80254c2:	1c0c      	adds	r4, r1, #0
 80254c4:	b289      	uxth	r1, r1
 80254c6:	b292      	uxth	r2, r2
 80254c8:	434a      	muls	r2, r1
 80254ca:	b29b      	uxth	r3, r3
 80254cc:	b2a1      	uxth	r1, r4
 80254ce:	4359      	muls	r1, r3
 80254d0:	0c14      	lsrs	r4, r2, #16
 80254d2:	190c      	adds	r4, r1, r4
 80254d4:	0c23      	lsrs	r3, r4, #16
 80254d6:	d107      	bne.n	80254e8 <_calloc_r+0x50>
 80254d8:	0424      	lsls	r4, r4, #16
 80254da:	b292      	uxth	r2, r2
 80254dc:	4314      	orrs	r4, r2
 80254de:	e7e5      	b.n	80254ac <_calloc_r+0x14>
 80254e0:	2d00      	cmp	r5, #0
 80254e2:	d101      	bne.n	80254e8 <_calloc_r+0x50>
 80254e4:	1c14      	adds	r4, r2, #0
 80254e6:	e7ed      	b.n	80254c4 <_calloc_r+0x2c>
 80254e8:	230c      	movs	r3, #12
 80254ea:	6003      	str	r3, [r0, #0]
 80254ec:	2500      	movs	r5, #0
 80254ee:	0028      	movs	r0, r5
 80254f0:	bd70      	pop	{r4, r5, r6, pc}

080254f2 <_realloc_r>:
 80254f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80254f4:	0006      	movs	r6, r0
 80254f6:	000c      	movs	r4, r1
 80254f8:	0015      	movs	r5, r2
 80254fa:	2900      	cmp	r1, #0
 80254fc:	d105      	bne.n	802550a <_realloc_r+0x18>
 80254fe:	0011      	movs	r1, r2
 8025500:	f7fe fe2a 	bl	8024158 <_malloc_r>
 8025504:	0004      	movs	r4, r0
 8025506:	0020      	movs	r0, r4
 8025508:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802550a:	2a00      	cmp	r2, #0
 802550c:	d103      	bne.n	8025516 <_realloc_r+0x24>
 802550e:	f7fe fa53 	bl	80239b8 <_free_r>
 8025512:	2400      	movs	r4, #0
 8025514:	e7f7      	b.n	8025506 <_realloc_r+0x14>
 8025516:	f000 f832 	bl	802557e <_malloc_usable_size_r>
 802551a:	0007      	movs	r7, r0
 802551c:	4285      	cmp	r5, r0
 802551e:	d802      	bhi.n	8025526 <_realloc_r+0x34>
 8025520:	0843      	lsrs	r3, r0, #1
 8025522:	42ab      	cmp	r3, r5
 8025524:	d3ef      	bcc.n	8025506 <_realloc_r+0x14>
 8025526:	0029      	movs	r1, r5
 8025528:	0030      	movs	r0, r6
 802552a:	f7fe fe15 	bl	8024158 <_malloc_r>
 802552e:	9001      	str	r0, [sp, #4]
 8025530:	2800      	cmp	r0, #0
 8025532:	d0ee      	beq.n	8025512 <_realloc_r+0x20>
 8025534:	002a      	movs	r2, r5
 8025536:	42bd      	cmp	r5, r7
 8025538:	d900      	bls.n	802553c <_realloc_r+0x4a>
 802553a:	003a      	movs	r2, r7
 802553c:	0021      	movs	r1, r4
 802553e:	9801      	ldr	r0, [sp, #4]
 8025540:	f7fd fba8 	bl	8022c94 <memcpy>
 8025544:	0021      	movs	r1, r4
 8025546:	0030      	movs	r0, r6
 8025548:	f7fe fa36 	bl	80239b8 <_free_r>
 802554c:	9c01      	ldr	r4, [sp, #4]
 802554e:	e7da      	b.n	8025506 <_realloc_r+0x14>

08025550 <fiprintf>:
 8025550:	b40e      	push	{r1, r2, r3}
 8025552:	b517      	push	{r0, r1, r2, r4, lr}
 8025554:	4c05      	ldr	r4, [pc, #20]	@ (802556c <fiprintf+0x1c>)
 8025556:	ab05      	add	r3, sp, #20
 8025558:	cb04      	ldmia	r3!, {r2}
 802555a:	0001      	movs	r1, r0
 802555c:	6820      	ldr	r0, [r4, #0]
 802555e:	9301      	str	r3, [sp, #4]
 8025560:	f7ff fcfa 	bl	8024f58 <_vfiprintf_r>
 8025564:	bc1e      	pop	{r1, r2, r3, r4}
 8025566:	bc08      	pop	{r3}
 8025568:	b003      	add	sp, #12
 802556a:	4718      	bx	r3
 802556c:	200003e0 	.word	0x200003e0

08025570 <abort>:
 8025570:	2006      	movs	r0, #6
 8025572:	b510      	push	{r4, lr}
 8025574:	f000 f834 	bl	80255e0 <raise>
 8025578:	2001      	movs	r0, #1
 802557a:	f7ea fcc9 	bl	800ff10 <_exit>

0802557e <_malloc_usable_size_r>:
 802557e:	1f0b      	subs	r3, r1, #4
 8025580:	681b      	ldr	r3, [r3, #0]
 8025582:	1f18      	subs	r0, r3, #4
 8025584:	2b00      	cmp	r3, #0
 8025586:	da01      	bge.n	802558c <_malloc_usable_size_r+0xe>
 8025588:	580b      	ldr	r3, [r1, r0]
 802558a:	18c0      	adds	r0, r0, r3
 802558c:	4770      	bx	lr

0802558e <_raise_r>:
 802558e:	b570      	push	{r4, r5, r6, lr}
 8025590:	0004      	movs	r4, r0
 8025592:	000d      	movs	r5, r1
 8025594:	291f      	cmp	r1, #31
 8025596:	d904      	bls.n	80255a2 <_raise_r+0x14>
 8025598:	2316      	movs	r3, #22
 802559a:	6003      	str	r3, [r0, #0]
 802559c:	2001      	movs	r0, #1
 802559e:	4240      	negs	r0, r0
 80255a0:	bd70      	pop	{r4, r5, r6, pc}
 80255a2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80255a4:	2b00      	cmp	r3, #0
 80255a6:	d004      	beq.n	80255b2 <_raise_r+0x24>
 80255a8:	008a      	lsls	r2, r1, #2
 80255aa:	189b      	adds	r3, r3, r2
 80255ac:	681a      	ldr	r2, [r3, #0]
 80255ae:	2a00      	cmp	r2, #0
 80255b0:	d108      	bne.n	80255c4 <_raise_r+0x36>
 80255b2:	0020      	movs	r0, r4
 80255b4:	f000 f830 	bl	8025618 <_getpid_r>
 80255b8:	002a      	movs	r2, r5
 80255ba:	0001      	movs	r1, r0
 80255bc:	0020      	movs	r0, r4
 80255be:	f000 f819 	bl	80255f4 <_kill_r>
 80255c2:	e7ed      	b.n	80255a0 <_raise_r+0x12>
 80255c4:	2a01      	cmp	r2, #1
 80255c6:	d009      	beq.n	80255dc <_raise_r+0x4e>
 80255c8:	1c51      	adds	r1, r2, #1
 80255ca:	d103      	bne.n	80255d4 <_raise_r+0x46>
 80255cc:	2316      	movs	r3, #22
 80255ce:	6003      	str	r3, [r0, #0]
 80255d0:	2001      	movs	r0, #1
 80255d2:	e7e5      	b.n	80255a0 <_raise_r+0x12>
 80255d4:	2100      	movs	r1, #0
 80255d6:	0028      	movs	r0, r5
 80255d8:	6019      	str	r1, [r3, #0]
 80255da:	4790      	blx	r2
 80255dc:	2000      	movs	r0, #0
 80255de:	e7df      	b.n	80255a0 <_raise_r+0x12>

080255e0 <raise>:
 80255e0:	b510      	push	{r4, lr}
 80255e2:	4b03      	ldr	r3, [pc, #12]	@ (80255f0 <raise+0x10>)
 80255e4:	0001      	movs	r1, r0
 80255e6:	6818      	ldr	r0, [r3, #0]
 80255e8:	f7ff ffd1 	bl	802558e <_raise_r>
 80255ec:	bd10      	pop	{r4, pc}
 80255ee:	46c0      	nop			@ (mov r8, r8)
 80255f0:	200003e0 	.word	0x200003e0

080255f4 <_kill_r>:
 80255f4:	2300      	movs	r3, #0
 80255f6:	b570      	push	{r4, r5, r6, lr}
 80255f8:	4d06      	ldr	r5, [pc, #24]	@ (8025614 <_kill_r+0x20>)
 80255fa:	0004      	movs	r4, r0
 80255fc:	0008      	movs	r0, r1
 80255fe:	0011      	movs	r1, r2
 8025600:	602b      	str	r3, [r5, #0]
 8025602:	f7ea fc75 	bl	800fef0 <_kill>
 8025606:	1c43      	adds	r3, r0, #1
 8025608:	d103      	bne.n	8025612 <_kill_r+0x1e>
 802560a:	682b      	ldr	r3, [r5, #0]
 802560c:	2b00      	cmp	r3, #0
 802560e:	d000      	beq.n	8025612 <_kill_r+0x1e>
 8025610:	6023      	str	r3, [r4, #0]
 8025612:	bd70      	pop	{r4, r5, r6, pc}
 8025614:	20003588 	.word	0x20003588

08025618 <_getpid_r>:
 8025618:	b510      	push	{r4, lr}
 802561a:	f7ea fc63 	bl	800fee4 <_getpid>
 802561e:	bd10      	pop	{r4, pc}

08025620 <expf>:
 8025620:	b570      	push	{r4, r5, r6, lr}
 8025622:	1c04      	adds	r4, r0, #0
 8025624:	f000 f8e6 	bl	80257f4 <__ieee754_expf>
 8025628:	1c05      	adds	r5, r0, #0
 802562a:	1c20      	adds	r0, r4, #0
 802562c:	f000 f83c 	bl	80256a8 <finitef>
 8025630:	2800      	cmp	r0, #0
 8025632:	d00b      	beq.n	802564c <expf+0x2c>
 8025634:	490c      	ldr	r1, [pc, #48]	@ (8025668 <expf+0x48>)
 8025636:	1c20      	adds	r0, r4, #0
 8025638:	f7da ff8e 	bl	8000558 <__aeabi_fcmpgt>
 802563c:	2800      	cmp	r0, #0
 802563e:	d007      	beq.n	8025650 <expf+0x30>
 8025640:	f7fd faf0 	bl	8022c24 <__errno>
 8025644:	25ff      	movs	r5, #255	@ 0xff
 8025646:	2322      	movs	r3, #34	@ 0x22
 8025648:	05ed      	lsls	r5, r5, #23
 802564a:	6003      	str	r3, [r0, #0]
 802564c:	1c28      	adds	r0, r5, #0
 802564e:	bd70      	pop	{r4, r5, r6, pc}
 8025650:	4906      	ldr	r1, [pc, #24]	@ (802566c <expf+0x4c>)
 8025652:	1c20      	adds	r0, r4, #0
 8025654:	f7da ff6c 	bl	8000530 <__aeabi_fcmplt>
 8025658:	2800      	cmp	r0, #0
 802565a:	d0f7      	beq.n	802564c <expf+0x2c>
 802565c:	f7fd fae2 	bl	8022c24 <__errno>
 8025660:	2322      	movs	r3, #34	@ 0x22
 8025662:	2500      	movs	r5, #0
 8025664:	6003      	str	r3, [r0, #0]
 8025666:	e7f1      	b.n	802564c <expf+0x2c>
 8025668:	42b17217 	.word	0x42b17217
 802566c:	c2cff1b5 	.word	0xc2cff1b5

08025670 <sqrtf>:
 8025670:	b570      	push	{r4, r5, r6, lr}
 8025672:	1c05      	adds	r5, r0, #0
 8025674:	f000 f822 	bl	80256bc <__ieee754_sqrtf>
 8025678:	1c29      	adds	r1, r5, #0
 802567a:	1c04      	adds	r4, r0, #0
 802567c:	1c28      	adds	r0, r5, #0
 802567e:	f7db ff71 	bl	8001564 <__aeabi_fcmpun>
 8025682:	2800      	cmp	r0, #0
 8025684:	d10e      	bne.n	80256a4 <sqrtf+0x34>
 8025686:	2100      	movs	r1, #0
 8025688:	1c28      	adds	r0, r5, #0
 802568a:	f7da ff51 	bl	8000530 <__aeabi_fcmplt>
 802568e:	2800      	cmp	r0, #0
 8025690:	d008      	beq.n	80256a4 <sqrtf+0x34>
 8025692:	f7fd fac7 	bl	8022c24 <__errno>
 8025696:	2321      	movs	r3, #33	@ 0x21
 8025698:	2100      	movs	r1, #0
 802569a:	6003      	str	r3, [r0, #0]
 802569c:	1c08      	adds	r0, r1, #0
 802569e:	f7db fa99 	bl	8000bd4 <__aeabi_fdiv>
 80256a2:	1c04      	adds	r4, r0, #0
 80256a4:	1c20      	adds	r0, r4, #0
 80256a6:	bd70      	pop	{r4, r5, r6, pc}

080256a8 <finitef>:
 80256a8:	22ff      	movs	r2, #255	@ 0xff
 80256aa:	0043      	lsls	r3, r0, #1
 80256ac:	085b      	lsrs	r3, r3, #1
 80256ae:	2001      	movs	r0, #1
 80256b0:	05d2      	lsls	r2, r2, #23
 80256b2:	4293      	cmp	r3, r2
 80256b4:	db00      	blt.n	80256b8 <finitef+0x10>
 80256b6:	2000      	movs	r0, #0
 80256b8:	4770      	bx	lr
	...

080256bc <__ieee754_sqrtf>:
 80256bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80256be:	0003      	movs	r3, r0
 80256c0:	0042      	lsls	r2, r0, #1
 80256c2:	1c04      	adds	r4, r0, #0
 80256c4:	20ff      	movs	r0, #255	@ 0xff
 80256c6:	0852      	lsrs	r2, r2, #1
 80256c8:	05c0      	lsls	r0, r0, #23
 80256ca:	4282      	cmp	r2, r0
 80256cc:	d30a      	bcc.n	80256e4 <__ieee754_sqrtf+0x28>
 80256ce:	1c21      	adds	r1, r4, #0
 80256d0:	1c20      	adds	r0, r4, #0
 80256d2:	f7db fc65 	bl	8000fa0 <__aeabi_fmul>
 80256d6:	1c01      	adds	r1, r0, #0
 80256d8:	1c20      	adds	r0, r4, #0
 80256da:	f7db f8f1 	bl	80008c0 <__aeabi_fadd>
 80256de:	1c04      	adds	r4, r0, #0
 80256e0:	1c20      	adds	r0, r4, #0
 80256e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80256e4:	2a00      	cmp	r2, #0
 80256e6:	d0fb      	beq.n	80256e0 <__ieee754_sqrtf+0x24>
 80256e8:	2c00      	cmp	r4, #0
 80256ea:	da07      	bge.n	80256fc <__ieee754_sqrtf+0x40>
 80256ec:	1c21      	adds	r1, r4, #0
 80256ee:	1c20      	adds	r0, r4, #0
 80256f0:	f7db fd94 	bl	800121c <__aeabi_fsub>
 80256f4:	1c01      	adds	r1, r0, #0
 80256f6:	f7db fa6d 	bl	8000bd4 <__aeabi_fdiv>
 80256fa:	e7f0      	b.n	80256de <__ieee754_sqrtf+0x22>
 80256fc:	0022      	movs	r2, r4
 80256fe:	15e1      	asrs	r1, r4, #23
 8025700:	4002      	ands	r2, r0
 8025702:	4204      	tst	r4, r0
 8025704:	d046      	beq.n	8025794 <__ieee754_sqrtf+0xd8>
 8025706:	2280      	movs	r2, #128	@ 0x80
 8025708:	000f      	movs	r7, r1
 802570a:	025b      	lsls	r3, r3, #9
 802570c:	0a5b      	lsrs	r3, r3, #9
 802570e:	0412      	lsls	r2, r2, #16
 8025710:	3f7f      	subs	r7, #127	@ 0x7f
 8025712:	4313      	orrs	r3, r2
 8025714:	07c9      	lsls	r1, r1, #31
 8025716:	d400      	bmi.n	802571a <__ieee754_sqrtf+0x5e>
 8025718:	005b      	lsls	r3, r3, #1
 802571a:	2400      	movs	r4, #0
 802571c:	2180      	movs	r1, #128	@ 0x80
 802571e:	2019      	movs	r0, #25
 8025720:	0026      	movs	r6, r4
 8025722:	107f      	asrs	r7, r7, #1
 8025724:	005b      	lsls	r3, r3, #1
 8025726:	0449      	lsls	r1, r1, #17
 8025728:	1875      	adds	r5, r6, r1
 802572a:	001a      	movs	r2, r3
 802572c:	429d      	cmp	r5, r3
 802572e:	dc02      	bgt.n	8025736 <__ieee754_sqrtf+0x7a>
 8025730:	186e      	adds	r6, r5, r1
 8025732:	1b5a      	subs	r2, r3, r5
 8025734:	1864      	adds	r4, r4, r1
 8025736:	3801      	subs	r0, #1
 8025738:	0053      	lsls	r3, r2, #1
 802573a:	0849      	lsrs	r1, r1, #1
 802573c:	2800      	cmp	r0, #0
 802573e:	d1f3      	bne.n	8025728 <__ieee754_sqrtf+0x6c>
 8025740:	2a00      	cmp	r2, #0
 8025742:	d019      	beq.n	8025778 <__ieee754_sqrtf+0xbc>
 8025744:	4d17      	ldr	r5, [pc, #92]	@ (80257a4 <__ieee754_sqrtf+0xe8>)
 8025746:	4e18      	ldr	r6, [pc, #96]	@ (80257a8 <__ieee754_sqrtf+0xec>)
 8025748:	6828      	ldr	r0, [r5, #0]
 802574a:	6831      	ldr	r1, [r6, #0]
 802574c:	682b      	ldr	r3, [r5, #0]
 802574e:	9301      	str	r3, [sp, #4]
 8025750:	f7db fd64 	bl	800121c <__aeabi_fsub>
 8025754:	1c01      	adds	r1, r0, #0
 8025756:	9801      	ldr	r0, [sp, #4]
 8025758:	f7da fef4 	bl	8000544 <__aeabi_fcmple>
 802575c:	2800      	cmp	r0, #0
 802575e:	d00b      	beq.n	8025778 <__ieee754_sqrtf+0xbc>
 8025760:	6828      	ldr	r0, [r5, #0]
 8025762:	6831      	ldr	r1, [r6, #0]
 8025764:	f7db f8ac 	bl	80008c0 <__aeabi_fadd>
 8025768:	682d      	ldr	r5, [r5, #0]
 802576a:	1c01      	adds	r1, r0, #0
 802576c:	1c28      	adds	r0, r5, #0
 802576e:	f7da fedf 	bl	8000530 <__aeabi_fcmplt>
 8025772:	2800      	cmp	r0, #0
 8025774:	d011      	beq.n	802579a <__ieee754_sqrtf+0xde>
 8025776:	3402      	adds	r4, #2
 8025778:	23fc      	movs	r3, #252	@ 0xfc
 802577a:	1064      	asrs	r4, r4, #1
 802577c:	059b      	lsls	r3, r3, #22
 802577e:	18e3      	adds	r3, r4, r3
 8025780:	05fc      	lsls	r4, r7, #23
 8025782:	18e4      	adds	r4, r4, r3
 8025784:	e7ac      	b.n	80256e0 <__ieee754_sqrtf+0x24>
 8025786:	005b      	lsls	r3, r3, #1
 8025788:	3201      	adds	r2, #1
 802578a:	4203      	tst	r3, r0
 802578c:	d0fb      	beq.n	8025786 <__ieee754_sqrtf+0xca>
 802578e:	3a01      	subs	r2, #1
 8025790:	1a89      	subs	r1, r1, r2
 8025792:	e7b8      	b.n	8025706 <__ieee754_sqrtf+0x4a>
 8025794:	2080      	movs	r0, #128	@ 0x80
 8025796:	0400      	lsls	r0, r0, #16
 8025798:	e7f7      	b.n	802578a <__ieee754_sqrtf+0xce>
 802579a:	2301      	movs	r3, #1
 802579c:	3401      	adds	r4, #1
 802579e:	439c      	bics	r4, r3
 80257a0:	e7ea      	b.n	8025778 <__ieee754_sqrtf+0xbc>
 80257a2:	46c0      	nop			@ (mov r8, r8)
 80257a4:	20000434 	.word	0x20000434
 80257a8:	20000430 	.word	0x20000430

080257ac <roundf>:
 80257ac:	0dc3      	lsrs	r3, r0, #23
 80257ae:	b2db      	uxtb	r3, r3
 80257b0:	3b7f      	subs	r3, #127	@ 0x7f
 80257b2:	0002      	movs	r2, r0
 80257b4:	b510      	push	{r4, lr}
 80257b6:	2b16      	cmp	r3, #22
 80257b8:	dc13      	bgt.n	80257e2 <roundf+0x36>
 80257ba:	2b00      	cmp	r3, #0
 80257bc:	da07      	bge.n	80257ce <roundf+0x22>
 80257be:	0fc2      	lsrs	r2, r0, #31
 80257c0:	07d0      	lsls	r0, r2, #31
 80257c2:	3301      	adds	r3, #1
 80257c4:	d102      	bne.n	80257cc <roundf+0x20>
 80257c6:	23fe      	movs	r3, #254	@ 0xfe
 80257c8:	059b      	lsls	r3, r3, #22
 80257ca:	4318      	orrs	r0, r3
 80257cc:	bd10      	pop	{r4, pc}
 80257ce:	4908      	ldr	r1, [pc, #32]	@ (80257f0 <roundf+0x44>)
 80257d0:	4119      	asrs	r1, r3
 80257d2:	4208      	tst	r0, r1
 80257d4:	d0fa      	beq.n	80257cc <roundf+0x20>
 80257d6:	2080      	movs	r0, #128	@ 0x80
 80257d8:	03c0      	lsls	r0, r0, #15
 80257da:	4118      	asrs	r0, r3
 80257dc:	1880      	adds	r0, r0, r2
 80257de:	4388      	bics	r0, r1
 80257e0:	e7f4      	b.n	80257cc <roundf+0x20>
 80257e2:	2b80      	cmp	r3, #128	@ 0x80
 80257e4:	d1f2      	bne.n	80257cc <roundf+0x20>
 80257e6:	1c01      	adds	r1, r0, #0
 80257e8:	f7db f86a 	bl	80008c0 <__aeabi_fadd>
 80257ec:	e7ee      	b.n	80257cc <roundf+0x20>
 80257ee:	46c0      	nop			@ (mov r8, r8)
 80257f0:	007fffff 	.word	0x007fffff

080257f4 <__ieee754_expf>:
 80257f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80257f6:	21ff      	movs	r1, #255	@ 0xff
 80257f8:	0043      	lsls	r3, r0, #1
 80257fa:	1c04      	adds	r4, r0, #0
 80257fc:	085b      	lsrs	r3, r3, #1
 80257fe:	05c9      	lsls	r1, r1, #23
 8025800:	428b      	cmp	r3, r1
 8025802:	d904      	bls.n	802580e <__ieee754_expf+0x1a>
 8025804:	1c01      	adds	r1, r0, #0
 8025806:	1c20      	adds	r0, r4, #0
 8025808:	f7db f85a 	bl	80008c0 <__aeabi_fadd>
 802580c:	e00d      	b.n	802582a <__ieee754_expf+0x36>
 802580e:	0fc6      	lsrs	r6, r0, #31
 8025810:	428b      	cmp	r3, r1
 8025812:	d104      	bne.n	802581e <__ieee754_expf+0x2a>
 8025814:	2e00      	cmp	r6, #0
 8025816:	d000      	beq.n	802581a <__ieee754_expf+0x26>
 8025818:	e0ba      	b.n	8025990 <__ieee754_expf+0x19c>
 802581a:	1c20      	adds	r0, r4, #0
 802581c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802581e:	495d      	ldr	r1, [pc, #372]	@ (8025994 <__ieee754_expf+0x1a0>)
 8025820:	4288      	cmp	r0, r1
 8025822:	dd04      	ble.n	802582e <__ieee754_expf+0x3a>
 8025824:	2000      	movs	r0, #0
 8025826:	f000 f8f1 	bl	8025a0c <__math_oflowf>
 802582a:	1c04      	adds	r4, r0, #0
 802582c:	e7f5      	b.n	802581a <__ieee754_expf+0x26>
 802582e:	2800      	cmp	r0, #0
 8025830:	da06      	bge.n	8025840 <__ieee754_expf+0x4c>
 8025832:	4a59      	ldr	r2, [pc, #356]	@ (8025998 <__ieee754_expf+0x1a4>)
 8025834:	4293      	cmp	r3, r2
 8025836:	d903      	bls.n	8025840 <__ieee754_expf+0x4c>
 8025838:	2000      	movs	r0, #0
 802583a:	f000 f8e1 	bl	8025a00 <__math_uflowf>
 802583e:	e7f4      	b.n	802582a <__ieee754_expf+0x36>
 8025840:	4a56      	ldr	r2, [pc, #344]	@ (802599c <__ieee754_expf+0x1a8>)
 8025842:	4293      	cmp	r3, r2
 8025844:	d96e      	bls.n	8025924 <__ieee754_expf+0x130>
 8025846:	4a56      	ldr	r2, [pc, #344]	@ (80259a0 <__ieee754_expf+0x1ac>)
 8025848:	00b5      	lsls	r5, r6, #2
 802584a:	4293      	cmp	r3, r2
 802584c:	d84e      	bhi.n	80258ec <__ieee754_expf+0xf8>
 802584e:	4b55      	ldr	r3, [pc, #340]	@ (80259a4 <__ieee754_expf+0x1b0>)
 8025850:	1c20      	adds	r0, r4, #0
 8025852:	5959      	ldr	r1, [r3, r5]
 8025854:	f7db fce2 	bl	800121c <__aeabi_fsub>
 8025858:	4b53      	ldr	r3, [pc, #332]	@ (80259a8 <__ieee754_expf+0x1b4>)
 802585a:	1c07      	adds	r7, r0, #0
 802585c:	595b      	ldr	r3, [r3, r5]
 802585e:	2501      	movs	r5, #1
 8025860:	1bad      	subs	r5, r5, r6
 8025862:	9300      	str	r3, [sp, #0]
 8025864:	1bad      	subs	r5, r5, r6
 8025866:	9900      	ldr	r1, [sp, #0]
 8025868:	1c38      	adds	r0, r7, #0
 802586a:	f7db fcd7 	bl	800121c <__aeabi_fsub>
 802586e:	1c04      	adds	r4, r0, #0
 8025870:	1c21      	adds	r1, r4, #0
 8025872:	1c20      	adds	r0, r4, #0
 8025874:	f7db fb94 	bl	8000fa0 <__aeabi_fmul>
 8025878:	494c      	ldr	r1, [pc, #304]	@ (80259ac <__ieee754_expf+0x1b8>)
 802587a:	1c06      	adds	r6, r0, #0
 802587c:	f7db fb90 	bl	8000fa0 <__aeabi_fmul>
 8025880:	494b      	ldr	r1, [pc, #300]	@ (80259b0 <__ieee754_expf+0x1bc>)
 8025882:	f7db fccb 	bl	800121c <__aeabi_fsub>
 8025886:	1c31      	adds	r1, r6, #0
 8025888:	f7db fb8a 	bl	8000fa0 <__aeabi_fmul>
 802588c:	4949      	ldr	r1, [pc, #292]	@ (80259b4 <__ieee754_expf+0x1c0>)
 802588e:	f7db f817 	bl	80008c0 <__aeabi_fadd>
 8025892:	1c31      	adds	r1, r6, #0
 8025894:	f7db fb84 	bl	8000fa0 <__aeabi_fmul>
 8025898:	4947      	ldr	r1, [pc, #284]	@ (80259b8 <__ieee754_expf+0x1c4>)
 802589a:	f7db fcbf 	bl	800121c <__aeabi_fsub>
 802589e:	1c31      	adds	r1, r6, #0
 80258a0:	f7db fb7e 	bl	8000fa0 <__aeabi_fmul>
 80258a4:	4945      	ldr	r1, [pc, #276]	@ (80259bc <__ieee754_expf+0x1c8>)
 80258a6:	f7db f80b 	bl	80008c0 <__aeabi_fadd>
 80258aa:	1c31      	adds	r1, r6, #0
 80258ac:	f7db fb78 	bl	8000fa0 <__aeabi_fmul>
 80258b0:	1c01      	adds	r1, r0, #0
 80258b2:	1c20      	adds	r0, r4, #0
 80258b4:	f7db fcb2 	bl	800121c <__aeabi_fsub>
 80258b8:	1c01      	adds	r1, r0, #0
 80258ba:	1c06      	adds	r6, r0, #0
 80258bc:	1c20      	adds	r0, r4, #0
 80258be:	f7db fb6f 	bl	8000fa0 <__aeabi_fmul>
 80258c2:	9001      	str	r0, [sp, #4]
 80258c4:	2d00      	cmp	r5, #0
 80258c6:	d140      	bne.n	802594a <__ieee754_expf+0x156>
 80258c8:	2180      	movs	r1, #128	@ 0x80
 80258ca:	1c30      	adds	r0, r6, #0
 80258cc:	05c9      	lsls	r1, r1, #23
 80258ce:	f7db fca5 	bl	800121c <__aeabi_fsub>
 80258d2:	1c01      	adds	r1, r0, #0
 80258d4:	9801      	ldr	r0, [sp, #4]
 80258d6:	f7db f97d 	bl	8000bd4 <__aeabi_fdiv>
 80258da:	1c21      	adds	r1, r4, #0
 80258dc:	f7db fc9e 	bl	800121c <__aeabi_fsub>
 80258e0:	1c01      	adds	r1, r0, #0
 80258e2:	20fe      	movs	r0, #254	@ 0xfe
 80258e4:	0580      	lsls	r0, r0, #22
 80258e6:	f7db fc99 	bl	800121c <__aeabi_fsub>
 80258ea:	e79e      	b.n	802582a <__ieee754_expf+0x36>
 80258ec:	4934      	ldr	r1, [pc, #208]	@ (80259c0 <__ieee754_expf+0x1cc>)
 80258ee:	1c20      	adds	r0, r4, #0
 80258f0:	f7db fb56 	bl	8000fa0 <__aeabi_fmul>
 80258f4:	4b33      	ldr	r3, [pc, #204]	@ (80259c4 <__ieee754_expf+0x1d0>)
 80258f6:	5959      	ldr	r1, [r3, r5]
 80258f8:	f7da ffe2 	bl	80008c0 <__aeabi_fadd>
 80258fc:	f7db fe48 	bl	8001590 <__aeabi_f2iz>
 8025900:	0005      	movs	r5, r0
 8025902:	f7db fe65 	bl	80015d0 <__aeabi_i2f>
 8025906:	4930      	ldr	r1, [pc, #192]	@ (80259c8 <__ieee754_expf+0x1d4>)
 8025908:	1c06      	adds	r6, r0, #0
 802590a:	f7db fb49 	bl	8000fa0 <__aeabi_fmul>
 802590e:	1c01      	adds	r1, r0, #0
 8025910:	1c20      	adds	r0, r4, #0
 8025912:	f7db fc83 	bl	800121c <__aeabi_fsub>
 8025916:	492d      	ldr	r1, [pc, #180]	@ (80259cc <__ieee754_expf+0x1d8>)
 8025918:	1c07      	adds	r7, r0, #0
 802591a:	1c30      	adds	r0, r6, #0
 802591c:	f7db fb40 	bl	8000fa0 <__aeabi_fmul>
 8025920:	9000      	str	r0, [sp, #0]
 8025922:	e7a0      	b.n	8025866 <__ieee754_expf+0x72>
 8025924:	22d0      	movs	r2, #208	@ 0xd0
 8025926:	0592      	lsls	r2, r2, #22
 8025928:	4293      	cmp	r3, r2
 802592a:	d20c      	bcs.n	8025946 <__ieee754_expf+0x152>
 802592c:	4928      	ldr	r1, [pc, #160]	@ (80259d0 <__ieee754_expf+0x1dc>)
 802592e:	1c20      	adds	r0, r4, #0
 8025930:	f7da ffc6 	bl	80008c0 <__aeabi_fadd>
 8025934:	21fe      	movs	r1, #254	@ 0xfe
 8025936:	0589      	lsls	r1, r1, #22
 8025938:	f7da fe0e 	bl	8000558 <__aeabi_fcmpgt>
 802593c:	1e05      	subs	r5, r0, #0
 802593e:	d097      	beq.n	8025870 <__ieee754_expf+0x7c>
 8025940:	21fe      	movs	r1, #254	@ 0xfe
 8025942:	0589      	lsls	r1, r1, #22
 8025944:	e75f      	b.n	8025806 <__ieee754_expf+0x12>
 8025946:	2500      	movs	r5, #0
 8025948:	e792      	b.n	8025870 <__ieee754_expf+0x7c>
 802594a:	2080      	movs	r0, #128	@ 0x80
 802594c:	1c31      	adds	r1, r6, #0
 802594e:	05c0      	lsls	r0, r0, #23
 8025950:	f7db fc64 	bl	800121c <__aeabi_fsub>
 8025954:	1c01      	adds	r1, r0, #0
 8025956:	9801      	ldr	r0, [sp, #4]
 8025958:	f7db f93c 	bl	8000bd4 <__aeabi_fdiv>
 802595c:	1c01      	adds	r1, r0, #0
 802595e:	9800      	ldr	r0, [sp, #0]
 8025960:	f7db fc5c 	bl	800121c <__aeabi_fsub>
 8025964:	1c39      	adds	r1, r7, #0
 8025966:	f7db fc59 	bl	800121c <__aeabi_fsub>
 802596a:	1c01      	adds	r1, r0, #0
 802596c:	20fe      	movs	r0, #254	@ 0xfe
 802596e:	0580      	lsls	r0, r0, #22
 8025970:	f7db fc54 	bl	800121c <__aeabi_fsub>
 8025974:	002b      	movs	r3, r5
 8025976:	337d      	adds	r3, #125	@ 0x7d
 8025978:	db02      	blt.n	8025980 <__ieee754_expf+0x18c>
 802597a:	05ec      	lsls	r4, r5, #23
 802597c:	1824      	adds	r4, r4, r0
 802597e:	e74c      	b.n	802581a <__ieee754_expf+0x26>
 8025980:	21d8      	movs	r1, #216	@ 0xd8
 8025982:	3564      	adds	r5, #100	@ 0x64
 8025984:	05ed      	lsls	r5, r5, #23
 8025986:	1828      	adds	r0, r5, r0
 8025988:	0509      	lsls	r1, r1, #20
 802598a:	f7db fb09 	bl	8000fa0 <__aeabi_fmul>
 802598e:	e74c      	b.n	802582a <__ieee754_expf+0x36>
 8025990:	2400      	movs	r4, #0
 8025992:	e742      	b.n	802581a <__ieee754_expf+0x26>
 8025994:	42b17217 	.word	0x42b17217
 8025998:	42cff1b5 	.word	0x42cff1b5
 802599c:	3eb17218 	.word	0x3eb17218
 80259a0:	3f851591 	.word	0x3f851591
 80259a4:	08029900 	.word	0x08029900
 80259a8:	080298f8 	.word	0x080298f8
 80259ac:	3331bb4c 	.word	0x3331bb4c
 80259b0:	35ddea0e 	.word	0x35ddea0e
 80259b4:	388ab355 	.word	0x388ab355
 80259b8:	3b360b61 	.word	0x3b360b61
 80259bc:	3e2aaaab 	.word	0x3e2aaaab
 80259c0:	3fb8aa3b 	.word	0x3fb8aa3b
 80259c4:	08029908 	.word	0x08029908
 80259c8:	3f317180 	.word	0x3f317180
 80259cc:	3717f7d1 	.word	0x3717f7d1
 80259d0:	7149f2ca 	.word	0x7149f2ca

080259d4 <with_errnof>:
 80259d4:	b570      	push	{r4, r5, r6, lr}
 80259d6:	000d      	movs	r5, r1
 80259d8:	1c04      	adds	r4, r0, #0
 80259da:	f7fd f923 	bl	8022c24 <__errno>
 80259de:	6005      	str	r5, [r0, #0]
 80259e0:	1c20      	adds	r0, r4, #0
 80259e2:	bd70      	pop	{r4, r5, r6, pc}

080259e4 <xflowf>:
 80259e4:	b510      	push	{r4, lr}
 80259e6:	1c0b      	adds	r3, r1, #0
 80259e8:	2800      	cmp	r0, #0
 80259ea:	d002      	beq.n	80259f2 <xflowf+0xe>
 80259ec:	2380      	movs	r3, #128	@ 0x80
 80259ee:	061b      	lsls	r3, r3, #24
 80259f0:	18cb      	adds	r3, r1, r3
 80259f2:	1c18      	adds	r0, r3, #0
 80259f4:	f7db fad4 	bl	8000fa0 <__aeabi_fmul>
 80259f8:	2122      	movs	r1, #34	@ 0x22
 80259fa:	f7ff ffeb 	bl	80259d4 <with_errnof>
 80259fe:	bd10      	pop	{r4, pc}

08025a00 <__math_uflowf>:
 8025a00:	2180      	movs	r1, #128	@ 0x80
 8025a02:	b510      	push	{r4, lr}
 8025a04:	0549      	lsls	r1, r1, #21
 8025a06:	f7ff ffed 	bl	80259e4 <xflowf>
 8025a0a:	bd10      	pop	{r4, pc}

08025a0c <__math_oflowf>:
 8025a0c:	21e0      	movs	r1, #224	@ 0xe0
 8025a0e:	b510      	push	{r4, lr}
 8025a10:	05c9      	lsls	r1, r1, #23
 8025a12:	f7ff ffe7 	bl	80259e4 <xflowf>
 8025a16:	bd10      	pop	{r4, pc}

08025a18 <_init>:
 8025a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a1a:	46c0      	nop			@ (mov r8, r8)
 8025a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025a1e:	bc08      	pop	{r3}
 8025a20:	469e      	mov	lr, r3
 8025a22:	4770      	bx	lr

08025a24 <_fini>:
 8025a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a26:	46c0      	nop			@ (mov r8, r8)
 8025a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025a2a:	bc08      	pop	{r3}
 8025a2c:	469e      	mov	lr, r3
 8025a2e:	4770      	bx	lr
