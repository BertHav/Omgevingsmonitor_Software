
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002358c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003190  08023650  08023650  00024650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080267e0  080267e0  00028428  2**0
                  CONTENTS
  4 .ARM          00000008  080267e0  080267e0  000277e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080267e8  080267e8  00028428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080267e8  080267e8  000277e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080267ec  080267ec  000277ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000428  20000000  080267f0  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fb8  20000428  08026c18  00028428  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200033e0  08026c18  000293e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003417a  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000937b  00000000  00000000  0005c5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad8  00000000  00000000  00065948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fca  00000000  00000000  00068420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b7c  00000000  00000000  0006a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041bf7  00000000  00000000  0008cf66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a09c2  00000000  00000000  000ceb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016f51f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae90  00000000  00000000  0016f5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017a460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017a4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017ca49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000428 	.word	0x20000428
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023634 	.word	0x08023634

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000042c 	.word	0x2000042c
 8000104:	08023634 	.word	0x08023634

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080259c0 	.word	0x080259c0
 8000e0c:	08025a00 	.word	0x08025a00
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08025a3c 	.word	0x08025a3c
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000028 	.word	0x20000028

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00b fdec 	bl	800f248 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000618 	.word	0x20000618

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f002 ff4c 	bl	8006528 <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f002 ffa9 	bl	80065ec <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	20000570 	.word	0x20000570
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000574 	.word	0x20000574

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f003 ff29 	bl	8007534 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000658 	.word	0x20000658
 8003730:	0808000c 	.word	0x0808000c
 8003734:	20000664 	.word	0x20000664
 8003738:	20000668 	.word	0x20000668

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f003 fef3 	bl	8007534 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	2000066c 	.word	0x2000066c
 800379c:	08080090 	.word	0x08080090
 80037a0:	2000068c 	.word	0x2000068c
 80037a4:	20000690 	.word	0x20000690

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000624 	.word	0x20000624

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000624 	.word	0x20000624

08003800 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <setMic+0x28>)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <setMic+0x28>)
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <setMic+0x28>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000624 	.word	0x20000624

0800382c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	0002      	movs	r2, r0
 8003834:	1dbb      	adds	r3, r7, #6
 8003836:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd fec7 	bl	80015d0 <__aeabi_i2f>
 8003842:	1c03      	adds	r3, r0, #0
 8003844:	490d      	ldr	r1, [pc, #52]	@ (800387c <setPM2p5+0x50>)
 8003846:	1c18      	adds	r0, r3, #0
 8003848:	f7fd f9c4 	bl	8000bd4 <__aeabi_fdiv>
 800384c:	1c03      	adds	r3, r0, #0
 800384e:	1c1a      	adds	r2, r3, #0
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <setPM2p5+0x54>)
 8003852:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <setPM2p5+0x54>)
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <setPM2p5+0x54>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	1c19      	adds	r1, r3, #0
 800385e:	1c10      	adds	r0, r2, #0
 8003860:	f7fc fe7a 	bl	8000558 <__aeabi_fcmpgt>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d100      	bne.n	800386a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8003868:	e003      	b.n	8003872 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <setPM2p5+0x54>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <setPM2p5+0x54>)
 8003870:	60da      	str	r2, [r3, #12]
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	41200000 	.word	0x41200000
 8003880:	20000624 	.word	0x20000624

08003884 <setPM10>:

void setPM10(uint16_t PM10) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	0002      	movs	r2, r0
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe9b 	bl	80015d0 <__aeabi_i2f>
 800389a:	1c03      	adds	r3, r0, #0
 800389c:	490d      	ldr	r1, [pc, #52]	@ (80038d4 <setPM10+0x50>)
 800389e:	1c18      	adds	r0, r3, #0
 80038a0:	f7fd f998 	bl	8000bd4 <__aeabi_fdiv>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	1c1a      	adds	r2, r3, #0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <setPM10+0x54>)
 80038aa:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <setPM10+0x54>)
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <setPM10+0x54>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	1c19      	adds	r1, r3, #0
 80038b6:	1c10      	adds	r0, r2, #0
 80038b8:	f7fc fe4e 	bl	8000558 <__aeabi_fcmpgt>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d100      	bne.n	80038c2 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038c0:	e003      	b.n	80038ca <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <setPM10+0x54>)
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <setPM10+0x54>)
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	41200000 	.word	0x41200000
 80038d8:	20000624 	.word	0x20000624

080038dc <setNOx>:

void setNOx(uint16_t nox) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <setNOx+0x30>)
 80038ea:	1dba      	adds	r2, r7, #6
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setNOx+0x30>)
 80038f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d903      	bls.n	8003904 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <setNOx+0x30>)
 80038fe:	1dba      	adds	r2, r7, #6
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000624 	.word	0x20000624

08003910 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003914:	f005 fd5a 	bl	80093cc <sen5x_Get_sen5x_enable_state>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d008      	beq.n	800392e <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800392a:	2200      	movs	r2, #0
 800392c:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.VOCIndexmax = 0;
 800392e:	4b03      	ldr	r3, [pc, #12]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003930:	2200      	movs	r2, #0
 8003932:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000624 	.word	0x20000624

08003940 <SetConfigMode>:

void SetConfigMode(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <SetConfigMode+0x30>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4053      	eors	r3, r2
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <SetConfigMode+0x34>)
 8003954:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <SetConfigMode+0x38>)
 8003956:	0019      	movs	r1, r3
 8003958:	2003      	movs	r0, #3
 800395a:	f00b f831 	bl	800e9c0 <CreateLine>
  }
  ReconfigSet = true;
 800395e:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SetConfigMode+0x30>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <SetConfigMode+0x3c>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000054f 	.word	0x2000054f
 8003974:	08023650 	.word	0x08023650
 8003978:	08023670 	.word	0x08023670
 800397c:	200001f7 	.word	0x200001f7

08003980 <GetReconfigMode>:

bool GetReconfigMode() {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <GetReconfigMode+0x10>)
 8003986:	781b      	ldrb	r3, [r3, #0]
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	2000054f 	.word	0x2000054f

08003994 <ESP_GetUID>:

void ESP_GetUID(){
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003998:	f00b fca0 	bl	800f2dc <HAL_GetUIDw0>
 800399c:	0002      	movs	r2, r0
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <ESP_GetUID+0x28>)
 80039a0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039a2:	f00b fca5 	bl	800f2f0 <HAL_GetUIDw1>
 80039a6:	0002      	movs	r2, r0
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <ESP_GetUID+0x28>)
 80039aa:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ac:	f00b fcaa 	bl	800f304 <HAL_GetUIDw2>
 80039b0:	0002      	movs	r2, r0
 80039b2:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <ESP_GetUID+0x28>)
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000558 	.word	0x20000558

080039c0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039c8:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <ESP_Init+0x2c>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <ESP_Init+0x30>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80039d4:	f7ff ffde 	bl	8003994 <ESP_GetUID>
  beurs = checkEEprom();
 80039d8:	f7ff fe7a 	bl	80036d0 <checkEEprom>
 80039dc:	0003      	movs	r3, r0
 80039de:	001a      	movs	r2, r3
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ESP_Init+0x34>)
 80039e2:	701a      	strb	r2, [r3, #0]
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000444 	.word	0x20000444
 80039f0:	20000030 	.word	0x20000030
 80039f4:	20000552 	.word	0x20000552

080039f8 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	000a      	movs	r2, r1
 8003a02:	1cbb      	adds	r3, r7, #2
 8003a04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <ESP_Send+0x54>)
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	250f      	movs	r5, #15
 8003a0c:	197c      	adds	r4, r7, r5
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0019      	movs	r1, r3
 8003a16:	f013 ff41 	bl	801789c <HAL_UART_Transmit_DMA>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <ESP_Send+0x58>)
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <ESP_Send+0x5c>)
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f00a ffc7 	bl	800e9c0 <CreateLine>
    return false;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e006      	b.n	8003a44 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <ESP_Send+0x60>)
 8003a3a:	4908      	ldr	r1, [pc, #32]	@ (8003a5c <ESP_Send+0x64>)
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f00a ffbf 	bl	800e9c0 <CreateLine>
#endif
  return true;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	20000444 	.word	0x20000444
 8003a50:	08023674 	.word	0x08023674
 8003a54:	08023694 	.word	0x08023694
 8003a58:	08023698 	.word	0x08023698
 8003a5c:	08023670 	.word	0x08023670

08003a60 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	000a      	movs	r2, r1
 8003a6a:	1cbb      	adds	r3, r7, #2
 8003a6c:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003a6e:	4b45      	ldr	r3, [pc, #276]	@ (8003b84 <ESP_Receive+0x124>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003a74:	260f      	movs	r6, #15
 8003a76:	19bb      	adds	r3, r7, r6
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a7c:	4b42      	ldr	r3, [pc, #264]	@ (8003b88 <ESP_Receive+0x128>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	250e      	movs	r5, #14
 8003a82:	197c      	adds	r4, r7, r5
 8003a84:	1cbb      	adds	r3, r7, #2
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	f013 ff96 	bl	80179bc <HAL_UART_Receive_DMA>
 8003a90:	0003      	movs	r3, r0
 8003a92:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a94:	002c      	movs	r4, r5
 8003a96:	193b      	adds	r3, r7, r4
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d100      	bne.n	8003aa0 <ESP_Receive+0x40>
 8003a9e:	e06c      	b.n	8003b7a <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003aa0:	4b39      	ldr	r3, [pc, #228]	@ (8003b88 <ESP_Receive+0x128>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2284      	movs	r2, #132	@ 0x84
 8003aa6:	589b      	ldr	r3, [r3, r2]
 8003aa8:	4a38      	ldr	r2, [pc, #224]	@ (8003b8c <ESP_Receive+0x12c>)
 8003aaa:	4939      	ldr	r1, [pc, #228]	@ (8003b90 <ESP_Receive+0x130>)
 8003aac:	2001      	movs	r0, #1
 8003aae:	f00a ff87 	bl	800e9c0 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d008      	beq.n	8003ace <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003abc:	4a35      	ldr	r2, [pc, #212]	@ (8003b94 <ESP_Receive+0x134>)
 8003abe:	4b34      	ldr	r3, [pc, #208]	@ (8003b90 <ESP_Receive+0x130>)
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f00a ff7c 	bl	800e9c0 <CreateLine>
      reset = true;
 8003ac8:	19bb      	adds	r3, r7, r6
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003ace:	230e      	movs	r3, #14
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d005      	beq.n	8003ae6 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003ada:	4a2f      	ldr	r2, [pc, #188]	@ (8003b98 <ESP_Receive+0x138>)
 8003adc:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <ESP_Receive+0x130>)
 8003ade:	0019      	movs	r1, r3
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f00a ff6d 	bl	800e9c0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003ae6:	230e      	movs	r3, #14
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2204      	movs	r2, #4
 8003aee:	4013      	ands	r3, r2
 8003af0:	d005      	beq.n	8003afe <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003af2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b9c <ESP_Receive+0x13c>)
 8003af4:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <ESP_Receive+0x130>)
 8003af6:	0019      	movs	r1, r3
 8003af8:	2001      	movs	r0, #1
 8003afa:	f00a ff61 	bl	800e9c0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003afe:	230e      	movs	r3, #14
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2208      	movs	r2, #8
 8003b06:	4013      	ands	r3, r2
 8003b08:	d005      	beq.n	8003b16 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b0a:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <ESP_Receive+0x140>)
 8003b0c:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <ESP_Receive+0x130>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	2001      	movs	r0, #1
 8003b12:	f00a ff55 	bl	800e9c0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b16:	230e      	movs	r3, #14
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d005      	beq.n	8003b2e <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b22:	4a20      	ldr	r2, [pc, #128]	@ (8003ba4 <ESP_Receive+0x144>)
 8003b24:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <ESP_Receive+0x130>)
 8003b26:	0019      	movs	r1, r3
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f00a ff49 	bl	800e9c0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b2e:	230e      	movs	r3, #14
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2220      	movs	r2, #32
 8003b36:	4013      	ands	r3, r2
 8003b38:	d005      	beq.n	8003b46 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <ESP_Receive+0x148>)
 8003b3c:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <ESP_Receive+0x130>)
 8003b3e:	0019      	movs	r1, r3
 8003b40:	2001      	movs	r0, #1
 8003b42:	f00a ff3d 	bl	800e9c0 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b46:	230e      	movs	r3, #14
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2240      	movs	r2, #64	@ 0x40
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d005      	beq.n	8003b5e <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b52:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <ESP_Receive+0x14c>)
 8003b54:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <ESP_Receive+0x130>)
 8003b56:	0019      	movs	r1, r3
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f00a ff31 	bl	800e9c0 <CreateLine>
    }
#endif
    if (reset) {
 8003b5e:	230f      	movs	r3, #15
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <ESP_Receive+0x110>
      SetAllREDLED();
 8003b68:	f009 fea8 	bl	800d8bc <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003b6c:	f00c f835 	bl	800fbda <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003b70:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <ESP_Receive+0x124>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
    return false;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <ESP_Receive+0x11c>
  }
  return true;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b005      	add	sp, #20
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b84:	20000448 	.word	0x20000448
 8003b88:	20000444 	.word	0x20000444
 8003b8c:	080236a8 	.word	0x080236a8
 8003b90:	08023694 	.word	0x08023694
 8003b94:	080236d8 	.word	0x080236d8
 8003b98:	080236fc 	.word	0x080236fc
 8003b9c:	08023720 	.word	0x08023720
 8003ba0:	08023744 	.word	0x08023744
 8003ba4:	08023768 	.word	0x08023768
 8003ba8:	08023794 	.word	0x08023794
 8003bac:	080237c4 	.word	0x080237c4

08003bb0 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bb8:	4b39      	ldr	r3, [pc, #228]	@ (8003ca0 <HAL_UART_ErrorCallback+0xf0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d16b      	bne.n	8003c9a <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2284      	movs	r2, #132	@ 0x84
 8003bc6:	589b      	ldr	r3, [r3, r2]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d065      	beq.n	8003c98 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2284      	movs	r2, #132	@ 0x84
 8003bd0:	589b      	ldr	r3, [r3, r2]
 8003bd2:	4a34      	ldr	r2, [pc, #208]	@ (8003ca4 <HAL_UART_ErrorCallback+0xf4>)
 8003bd4:	4934      	ldr	r1, [pc, #208]	@ (8003ca8 <HAL_UART_ErrorCallback+0xf8>)
 8003bd6:	2003      	movs	r0, #3
 8003bd8:	f00a fef2 	bl	800e9c0 <CreateLine>
    switch (huart->ErrorCode) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2284      	movs	r2, #132	@ 0x84
 8003be0:	589b      	ldr	r3, [r3, r2]
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d851      	bhi.n	8003c8a <HAL_UART_ErrorCallback+0xda>
 8003be6:	009a      	lsls	r2, r3, #2
 8003be8:	4b30      	ldr	r3, [pc, #192]	@ (8003cac <HAL_UART_ErrorCallback+0xfc>)
 8003bea:	18d3      	adds	r3, r2, r3
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb0 <HAL_UART_ErrorCallback+0x100>)
 8003bf2:	4b30      	ldr	r3, [pc, #192]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f00a fee2 	bl	800e9c0 <CreateLine>
        break;
 8003bfc:	e04d      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb8 <HAL_UART_ErrorCallback+0x108>)
 8003c00:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c02:	0019      	movs	r1, r3
 8003c04:	2001      	movs	r0, #1
 8003c06:	f00a fedb 	bl	800e9c0 <CreateLine>
        break;
 8003c0a:	e046      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cbc <HAL_UART_ErrorCallback+0x10c>)
 8003c0e:	4b29      	ldr	r3, [pc, #164]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c10:	0019      	movs	r1, r3
 8003c12:	2001      	movs	r0, #1
 8003c14:	f00a fed4 	bl	800e9c0 <CreateLine>
        break;
 8003c18:	e03f      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c1a:	4a29      	ldr	r2, [pc, #164]	@ (8003cc0 <HAL_UART_ErrorCallback+0x110>)
 8003c1c:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c1e:	0019      	movs	r1, r3
 8003c20:	2001      	movs	r0, #1
 8003c22:	f00a fecd 	bl	800e9c0 <CreateLine>
        break;
 8003c26:	e038      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c28:	4a26      	ldr	r2, [pc, #152]	@ (8003cc4 <HAL_UART_ErrorCallback+0x114>)
 8003c2a:	4b22      	ldr	r3, [pc, #136]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f00a fec6 	bl	800e9c0 <CreateLine>
        break;
 8003c34:	e031      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003c36:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <HAL_UART_ErrorCallback+0x118>)
 8003c38:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f00a febf 	bl	800e9c0 <CreateLine>
        break;
 8003c42:	e02a      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003c44:	4a21      	ldr	r2, [pc, #132]	@ (8003ccc <HAL_UART_ErrorCallback+0x11c>)
 8003c46:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c48:	0019      	movs	r1, r3
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f00a feb8 	bl	800e9c0 <CreateLine>
        break;
 8003c50:	e023      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003c52:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd0 <HAL_UART_ErrorCallback+0x120>)
 8003c54:	4b17      	ldr	r3, [pc, #92]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c56:	0019      	movs	r1, r3
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f00a feb1 	bl	800e9c0 <CreateLine>
        break;
 8003c5e:	e01c      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003c60:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd4 <HAL_UART_ErrorCallback+0x124>)
 8003c62:	4b14      	ldr	r3, [pc, #80]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c64:	0019      	movs	r1, r3
 8003c66:	2001      	movs	r0, #1
 8003c68:	f00a feaa 	bl	800e9c0 <CreateLine>
        break;
 8003c6c:	e015      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd8 <HAL_UART_ErrorCallback+0x128>)
 8003c70:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c72:	0019      	movs	r1, r3
 8003c74:	2001      	movs	r0, #1
 8003c76:	f00a fea3 	bl	800e9c0 <CreateLine>
        break;
 8003c7a:	e00e      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003c7c:	4a17      	ldr	r2, [pc, #92]	@ (8003cdc <HAL_UART_ErrorCallback+0x12c>)
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	2001      	movs	r0, #1
 8003c84:	f00a fe9c 	bl	800e9c0 <CreateLine>
        break;
 8003c88:	e007      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003c8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <HAL_UART_ErrorCallback+0x130>)
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00a fe95 	bl	800e9c0 <CreateLine>
 8003c96:	e000      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      return;
 8003c98:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000444 	.word	0x20000444
 8003ca4:	080237f4 	.word	0x080237f4
 8003ca8:	08023670 	.word	0x08023670
 8003cac:	08025b08 	.word	0x08025b08
 8003cb0:	08023824 	.word	0x08023824
 8003cb4:	08023694 	.word	0x08023694
 8003cb8:	08023858 	.word	0x08023858
 8003cbc:	08023884 	.word	0x08023884
 8003cc0:	080238b8 	.word	0x080238b8
 8003cc4:	080238e4 	.word	0x080238e4
 8003cc8:	0802390c 	.word	0x0802390c
 8003ccc:	0802393c 	.word	0x0802393c
 8003cd0:	08023974 	.word	0x08023974
 8003cd4:	080239ac 	.word	0x080239ac
 8003cd8:	080239d4 	.word	0x080239d4
 8003cdc:	080239fc 	.word	0x080239fc
 8003ce0:	08023a28 	.word	0x08023a28

08003ce4 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e010      	b.n	8003d16 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1898      	adds	r0, r3, r2
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	18d3      	adds	r3, r2, r3
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	001a      	movs	r2, r3
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <uint8ArrayToString+0x44>)
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	f01c fbb0 	bl	8020470 <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b0b      	cmp	r3, #11
 8003d1a:	ddeb      	ble.n	8003cf4 <uint8ArrayToString+0x10>
  }
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b004      	add	sp, #16
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	08023a4c 	.word	0x08023a4c

08003d2c <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b089      	sub	sp, #36	@ 0x24
 8003d30:	af04      	add	r7, sp, #16
 8003d32:	6039      	str	r1, [r7, #0]
 8003d34:	0011      	movs	r1, r2
 8003d36:	1dfb      	adds	r3, r7, #7
 8003d38:	1c02      	adds	r2, r0, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	1dbb      	adds	r3, r7, #6
 8003d3e:	1c0a      	adds	r2, r1, #0
 8003d40:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d42:	4b20      	ldr	r3, [pc, #128]	@ (8003dc4 <CreateMessage+0x98>)
 8003d44:	4820      	ldr	r0, [pc, #128]	@ (8003dc8 <CreateMessage+0x9c>)
 8003d46:	220c      	movs	r2, #12
 8003d48:	0019      	movs	r1, r3
 8003d4a:	f003 fbf3 	bl	8007534 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dcc <CreateMessage+0xa0>)
 8003d50:	481f      	ldr	r0, [pc, #124]	@ (8003dd0 <CreateMessage+0xa4>)
 8003d52:	220c      	movs	r2, #12
 8003d54:	0019      	movs	r1, r3
 8003d56:	f003 fbed 	bl	8007534 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <CreateMessage+0xa8>)
 8003d5c:	481e      	ldr	r0, [pc, #120]	@ (8003dd8 <CreateMessage+0xac>)
 8003d5e:	220c      	movs	r2, #12
 8003d60:	0019      	movs	r1, r3
 8003d62:	f003 fbe7 	bl	8007534 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d66:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <CreateMessage+0xb0>)
 8003d68:	481d      	ldr	r0, [pc, #116]	@ (8003de0 <CreateMessage+0xb4>)
 8003d6a:	220c      	movs	r2, #12
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	f003 fbe1 	bl	8007534 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003d72:	4b1c      	ldr	r3, [pc, #112]	@ (8003de4 <CreateMessage+0xb8>)
 8003d74:	481c      	ldr	r0, [pc, #112]	@ (8003de8 <CreateMessage+0xbc>)
 8003d76:	220c      	movs	r2, #12
 8003d78:	0019      	movs	r1, r3
 8003d7a:	f003 fbdb 	bl	8007534 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <CreateMessage+0xc0>)
 8003d80:	481b      	ldr	r0, [pc, #108]	@ (8003df0 <CreateMessage+0xc4>)
 8003d82:	220c      	movs	r2, #12
 8003d84:	0019      	movs	r1, r3
 8003d86:	f003 fbd5 	bl	8007534 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003df4 <CreateMessage+0xc8>)
 8003d8c:	481a      	ldr	r0, [pc, #104]	@ (8003df8 <CreateMessage+0xcc>)
 8003d8e:	220c      	movs	r2, #12
 8003d90:	0019      	movs	r1, r3
 8003d92:	f003 fbcf 	bl	8007534 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003d96:	4b19      	ldr	r3, [pc, #100]	@ (8003dfc <CreateMessage+0xd0>)
 8003d98:	4819      	ldr	r0, [pc, #100]	@ (8003e00 <CreateMessage+0xd4>)
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	f003 fbc9 	bl	8007534 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003da2:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <CreateMessage+0xd8>)
 8003da4:	4818      	ldr	r0, [pc, #96]	@ (8003e08 <CreateMessage+0xdc>)
 8003da6:	220c      	movs	r2, #12
 8003da8:	0019      	movs	r1, r3
 8003daa:	f003 fbc3 	bl	8007534 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003dae:	f7ff fcc5 	bl	800373c <checkName>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d02e      	beq.n	8003e14 <CreateMessage+0xe8>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003db6:	4b15      	ldr	r3, [pc, #84]	@ (8003e0c <CreateMessage+0xe0>)
 8003db8:	4815      	ldr	r0, [pc, #84]	@ (8003e10 <CreateMessage+0xe4>)
 8003dba:	2220      	movs	r2, #32
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	f003 fbb9 	bl	8007534 <ReadUint8ArrayEEprom>
 8003dc2:	e02d      	b.n	8003e20 <CreateMessage+0xf4>
 8003dc4:	20000694 	.word	0x20000694
 8003dc8:	0808000c 	.word	0x0808000c
 8003dcc:	200006a0 	.word	0x200006a0
 8003dd0:	08080018 	.word	0x08080018
 8003dd4:	200006ac 	.word	0x200006ac
 8003dd8:	08080048 	.word	0x08080048
 8003ddc:	200006b8 	.word	0x200006b8
 8003de0:	08080030 	.word	0x08080030
 8003de4:	200006c4 	.word	0x200006c4
 8003de8:	0808006c 	.word	0x0808006c
 8003dec:	200006d0 	.word	0x200006d0
 8003df0:	08080078 	.word	0x08080078
 8003df4:	200006dc 	.word	0x200006dc
 8003df8:	08080024 	.word	0x08080024
 8003dfc:	200006e8 	.word	0x200006e8
 8003e00:	08080054 	.word	0x08080054
 8003e04:	200006f4 	.word	0x200006f4
 8003e08:	08080060 	.word	0x08080060
 8003e0c:	20000700 	.word	0x20000700
 8003e10:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e14:	4bef      	ldr	r3, [pc, #956]	@ (80041d4 <CreateMessage+0x4a8>)
 8003e16:	4af0      	ldr	r2, [pc, #960]	@ (80041d8 <CreateMessage+0x4ac>)
 8003e18:	6811      	ldr	r1, [r2, #0]
 8003e1a:	6019      	str	r1, [r3, #0]
 8003e1c:	7912      	ldrb	r2, [r2, #4]
 8003e1e:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e20:	f7ff fc32 	bl	8003688 <setCharges>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0
  uint16_t index = 0;
 8003e24:	260e      	movs	r6, #14
 8003e26:	19bb      	adds	r3, r7, r6
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e2c:	19bb      	adds	r3, r7, r6
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	4bea      	ldr	r3, [pc, #936]	@ (80041dc <CreateMessage+0x4b0>)
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	4aea      	ldr	r2, [pc, #936]	@ (80041e0 <CreateMessage+0x4b4>)
 8003e36:	0011      	movs	r1, r2
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f01c fb19 	bl	8020470 <siprintf>

  uint8ArrayToString(Buffer, tempConfig);
 8003e3e:	4ae9      	ldr	r2, [pc, #932]	@ (80041e4 <CreateMessage+0x4b8>)
 8003e40:	4be9      	ldr	r3, [pc, #932]	@ (80041e8 <CreateMessage+0x4bc>)
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff ff4d 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e4a:	4be8      	ldr	r3, [pc, #928]	@ (80041ec <CreateMessage+0x4c0>)
 8003e4c:	689c      	ldr	r4, [r3, #8]
 8003e4e:	4be8      	ldr	r3, [pc, #928]	@ (80041f0 <CreateMessage+0x4c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	1c18      	adds	r0, r3, #0
 8003e54:	f7ff fb06 	bl	8003464 <__aeabi_f2d>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	000b      	movs	r3, r1
 8003e5c:	4ddd      	ldr	r5, [pc, #884]	@ (80041d4 <CreateMessage+0x4a8>)
 8003e5e:	49e5      	ldr	r1, [pc, #916]	@ (80041f4 <CreateMessage+0x4c8>)
 8003e60:	48e5      	ldr	r0, [pc, #916]	@ (80041f8 <CreateMessage+0x4cc>)
 8003e62:	9202      	str	r2, [sp, #8]
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	4be0      	ldr	r3, [pc, #896]	@ (80041e8 <CreateMessage+0x4bc>)
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	002b      	movs	r3, r5
 8003e6c:	0022      	movs	r2, r4
 8003e6e:	f01c faff 	bl	8020470 <siprintf>
  index = strlen(message);
 8003e72:	4bda      	ldr	r3, [pc, #872]	@ (80041dc <CreateMessage+0x4b0>)
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7fc f979 	bl	800016c <strlen>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	19bb      	adds	r3, r7, r6
 8003e7e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <CreateMessage+0x190>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003e88:	4bd4      	ldr	r3, [pc, #848]	@ (80041dc <CreateMessage+0x4b0>)
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fc f96e 	bl	800016c <strlen>
 8003e90:	0003      	movs	r3, r0
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	4bd1      	ldr	r3, [pc, #836]	@ (80041dc <CreateMessage+0x4b0>)
 8003e96:	0011      	movs	r1, r2
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff fdad 	bl	80039f8 <ESP_Send>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	001a      	movs	r2, r3
 8003ea2:	4bd6      	ldr	r3, [pc, #856]	@ (80041fc <CreateMessage+0x4d0>)
 8003ea4:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003ea6:	4bd6      	ldr	r3, [pc, #856]	@ (8004200 <CreateMessage+0x4d4>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	001a      	movs	r2, r3
 8003eac:	4bd3      	ldr	r3, [pc, #844]	@ (80041fc <CreateMessage+0x4d0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	1e5a      	subs	r2, r3, #1
 8003eb4:	4193      	sbcs	r3, r2
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4bd1      	ldr	r3, [pc, #836]	@ (8004200 <CreateMessage+0x4d4>)
 8003eba:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003ebc:	4ad1      	ldr	r2, [pc, #836]	@ (8004204 <CreateMessage+0x4d8>)
 8003ebe:	4bca      	ldr	r3, [pc, #808]	@ (80041e8 <CreateMessage+0x4bc>)
 8003ec0:	0011      	movs	r1, r2
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7ff ff0e 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003ec8:	4bc8      	ldr	r3, [pc, #800]	@ (80041ec <CreateMessage+0x4c0>)
 8003eca:	689c      	ldr	r4, [r3, #8]
 8003ecc:	4bc8      	ldr	r3, [pc, #800]	@ (80041f0 <CreateMessage+0x4c4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	1c18      	adds	r0, r3, #0
 8003ed2:	f7ff fac7 	bl	8003464 <__aeabi_f2d>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	000b      	movs	r3, r1
 8003eda:	4dbe      	ldr	r5, [pc, #760]	@ (80041d4 <CreateMessage+0x4a8>)
 8003edc:	49ca      	ldr	r1, [pc, #808]	@ (8004208 <CreateMessage+0x4dc>)
 8003ede:	48bf      	ldr	r0, [pc, #764]	@ (80041dc <CreateMessage+0x4b0>)
 8003ee0:	9202      	str	r2, [sp, #8]
 8003ee2:	9303      	str	r3, [sp, #12]
 8003ee4:	4bc0      	ldr	r3, [pc, #768]	@ (80041e8 <CreateMessage+0x4bc>)
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	002b      	movs	r3, r5
 8003eea:	0022      	movs	r2, r4
 8003eec:	f01c fac0 	bl	8020470 <siprintf>
  index += strlen(message);
 8003ef0:	4bba      	ldr	r3, [pc, #744]	@ (80041dc <CreateMessage+0x4b0>)
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7fc f93a 	bl	800016c <strlen>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	b299      	uxth	r1, r3
 8003efc:	220e      	movs	r2, #14
 8003efe:	18bb      	adds	r3, r7, r2
 8003f00:	18ba      	adds	r2, r7, r2
 8003f02:	8812      	ldrh	r2, [r2, #0]
 8003f04:	188a      	adds	r2, r1, r2
 8003f06:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f08:	1dbb      	adds	r3, r7, #6
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d019      	beq.n	8003f44 <CreateMessage+0x218>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f10:	4bb2      	ldr	r3, [pc, #712]	@ (80041dc <CreateMessage+0x4b0>)
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fc f92a 	bl	800016c <strlen>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	4baf      	ldr	r3, [pc, #700]	@ (80041dc <CreateMessage+0x4b0>)
 8003f1e:	0011      	movs	r1, r2
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff fd69 	bl	80039f8 <ESP_Send>
 8003f26:	0003      	movs	r3, r0
 8003f28:	001a      	movs	r2, r3
 8003f2a:	4bb4      	ldr	r3, [pc, #720]	@ (80041fc <CreateMessage+0x4d0>)
 8003f2c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f2e:	4bb4      	ldr	r3, [pc, #720]	@ (8004200 <CreateMessage+0x4d4>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	001a      	movs	r2, r3
 8003f34:	4bb1      	ldr	r3, [pc, #708]	@ (80041fc <CreateMessage+0x4d0>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	1e5a      	subs	r2, r3, #1
 8003f3c:	4193      	sbcs	r3, r2
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4baf      	ldr	r3, [pc, #700]	@ (8004200 <CreateMessage+0x4d4>)
 8003f42:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, soundConfig);
 8003f44:	4ab1      	ldr	r2, [pc, #708]	@ (800420c <CreateMessage+0x4e0>)
 8003f46:	4ba8      	ldr	r3, [pc, #672]	@ (80041e8 <CreateMessage+0x4bc>)
 8003f48:	0011      	movs	r1, r2
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff feca 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8003f50:	4ba6      	ldr	r3, [pc, #664]	@ (80041ec <CreateMessage+0x4c0>)
 8003f52:	689c      	ldr	r4, [r3, #8]
 8003f54:	4ba6      	ldr	r3, [pc, #664]	@ (80041f0 <CreateMessage+0x4c4>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	1c18      	adds	r0, r3, #0
 8003f5a:	f7ff fa83 	bl	8003464 <__aeabi_f2d>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	000b      	movs	r3, r1
 8003f62:	4d9c      	ldr	r5, [pc, #624]	@ (80041d4 <CreateMessage+0x4a8>)
 8003f64:	49aa      	ldr	r1, [pc, #680]	@ (8004210 <CreateMessage+0x4e4>)
 8003f66:	489d      	ldr	r0, [pc, #628]	@ (80041dc <CreateMessage+0x4b0>)
 8003f68:	9202      	str	r2, [sp, #8]
 8003f6a:	9303      	str	r3, [sp, #12]
 8003f6c:	4b9e      	ldr	r3, [pc, #632]	@ (80041e8 <CreateMessage+0x4bc>)
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	002b      	movs	r3, r5
 8003f72:	0022      	movs	r2, r4
 8003f74:	f01c fa7c 	bl	8020470 <siprintf>
  index += strlen(message);
 8003f78:	4b98      	ldr	r3, [pc, #608]	@ (80041dc <CreateMessage+0x4b0>)
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7fc f8f6 	bl	800016c <strlen>
 8003f80:	0003      	movs	r3, r0
 8003f82:	b299      	uxth	r1, r3
 8003f84:	220e      	movs	r2, #14
 8003f86:	18bb      	adds	r3, r7, r2
 8003f88:	18ba      	adds	r2, r7, r2
 8003f8a:	8812      	ldrh	r2, [r2, #0]
 8003f8c:	188a      	adds	r2, r1, r2
 8003f8e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f90:	1dbb      	adds	r3, r7, #6
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d019      	beq.n	8003fcc <CreateMessage+0x2a0>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f98:	4b90      	ldr	r3, [pc, #576]	@ (80041dc <CreateMessage+0x4b0>)
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7fc f8e6 	bl	800016c <strlen>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	4b8d      	ldr	r3, [pc, #564]	@ (80041dc <CreateMessage+0x4b0>)
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff fd25 	bl	80039f8 <ESP_Send>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	4b92      	ldr	r3, [pc, #584]	@ (80041fc <CreateMessage+0x4d0>)
 8003fb4:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fb6:	4b92      	ldr	r3, [pc, #584]	@ (8004200 <CreateMessage+0x4d4>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	001a      	movs	r2, r3
 8003fbc:	4b8f      	ldr	r3, [pc, #572]	@ (80041fc <CreateMessage+0x4d0>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	4193      	sbcs	r3, r2
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	4b8d      	ldr	r3, [pc, #564]	@ (8004200 <CreateMessage+0x4d4>)
 8003fca:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003fcc:	4a91      	ldr	r2, [pc, #580]	@ (8004214 <CreateMessage+0x4e8>)
 8003fce:	4b86      	ldr	r3, [pc, #536]	@ (80041e8 <CreateMessage+0x4bc>)
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7ff fe86 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003fd8:	4b84      	ldr	r3, [pc, #528]	@ (80041ec <CreateMessage+0x4c0>)
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	4b84      	ldr	r3, [pc, #528]	@ (80041f0 <CreateMessage+0x4c4>)
 8003fde:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003fe0:	4c7c      	ldr	r4, [pc, #496]	@ (80041d4 <CreateMessage+0x4a8>)
 8003fe2:	498d      	ldr	r1, [pc, #564]	@ (8004218 <CreateMessage+0x4ec>)
 8003fe4:	487d      	ldr	r0, [pc, #500]	@ (80041dc <CreateMessage+0x4b0>)
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	4b7f      	ldr	r3, [pc, #508]	@ (80041e8 <CreateMessage+0x4bc>)
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0023      	movs	r3, r4
 8003fee:	f01c fa3f 	bl	8020470 <siprintf>
  index += strlen(message);
 8003ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80041dc <CreateMessage+0x4b0>)
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7fc f8b9 	bl	800016c <strlen>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	b299      	uxth	r1, r3
 8003ffe:	220e      	movs	r2, #14
 8004000:	18bb      	adds	r3, r7, r2
 8004002:	18ba      	adds	r2, r7, r2
 8004004:	8812      	ldrh	r2, [r2, #0]
 8004006:	188a      	adds	r2, r1, r2
 8004008:	801a      	strh	r2, [r3, #0]
  if (send) {
 800400a:	1dbb      	adds	r3, r7, #6
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d019      	beq.n	8004046 <CreateMessage+0x31a>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004012:	4b72      	ldr	r3, [pc, #456]	@ (80041dc <CreateMessage+0x4b0>)
 8004014:	0018      	movs	r0, r3
 8004016:	f7fc f8a9 	bl	800016c <strlen>
 800401a:	0003      	movs	r3, r0
 800401c:	b29a      	uxth	r2, r3
 800401e:	4b6f      	ldr	r3, [pc, #444]	@ (80041dc <CreateMessage+0x4b0>)
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff fce8 	bl	80039f8 <ESP_Send>
 8004028:	0003      	movs	r3, r0
 800402a:	001a      	movs	r2, r3
 800402c:	4b73      	ldr	r3, [pc, #460]	@ (80041fc <CreateMessage+0x4d0>)
 800402e:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004030:	4b73      	ldr	r3, [pc, #460]	@ (8004200 <CreateMessage+0x4d4>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	001a      	movs	r2, r3
 8004036:	4b71      	ldr	r3, [pc, #452]	@ (80041fc <CreateMessage+0x4d0>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	4013      	ands	r3, r2
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	4193      	sbcs	r3, r2
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4b6f      	ldr	r3, [pc, #444]	@ (8004200 <CreateMessage+0x4d4>)
 8004044:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8004046:	1dfb      	adds	r3, r7, #7
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2201      	movs	r2, #1
 800404c:	4053      	eors	r3, r2
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d100      	bne.n	8004056 <CreateMessage+0x32a>
 8004054:	e168      	b.n	8004328 <CreateMessage+0x5fc>
    uint8ArrayToString(Buffer, batteryConfig);
 8004056:	4a71      	ldr	r2, [pc, #452]	@ (800421c <CreateMessage+0x4f0>)
 8004058:	4b63      	ldr	r3, [pc, #396]	@ (80041e8 <CreateMessage+0x4bc>)
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fe41 	bl	8003ce4 <uint8ArrayToString>
    sprintf(&message[0], ",{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8004062:	4b62      	ldr	r3, [pc, #392]	@ (80041ec <CreateMessage+0x4c0>)
 8004064:	689c      	ldr	r4, [r3, #8]
 8004066:	4b6e      	ldr	r3, [pc, #440]	@ (8004220 <CreateMessage+0x4f4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1c18      	adds	r0, r3, #0
 800406c:	f7ff f9fa 	bl	8003464 <__aeabi_f2d>
 8004070:	0002      	movs	r2, r0
 8004072:	000b      	movs	r3, r1
 8004074:	4d57      	ldr	r5, [pc, #348]	@ (80041d4 <CreateMessage+0x4a8>)
 8004076:	496b      	ldr	r1, [pc, #428]	@ (8004224 <CreateMessage+0x4f8>)
 8004078:	4858      	ldr	r0, [pc, #352]	@ (80041dc <CreateMessage+0x4b0>)
 800407a:	9202      	str	r2, [sp, #8]
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	4b5a      	ldr	r3, [pc, #360]	@ (80041e8 <CreateMessage+0x4bc>)
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	002b      	movs	r3, r5
 8004084:	0022      	movs	r2, r4
 8004086:	f01c f9f3 	bl	8020470 <siprintf>
    index += strlen(message);
 800408a:	4b54      	ldr	r3, [pc, #336]	@ (80041dc <CreateMessage+0x4b0>)
 800408c:	0018      	movs	r0, r3
 800408e:	f7fc f86d 	bl	800016c <strlen>
 8004092:	0003      	movs	r3, r0
 8004094:	b299      	uxth	r1, r3
 8004096:	220e      	movs	r2, #14
 8004098:	18bb      	adds	r3, r7, r2
 800409a:	18ba      	adds	r2, r7, r2
 800409c:	8812      	ldrh	r2, [r2, #0]
 800409e:	188a      	adds	r2, r1, r2
 80040a0:	801a      	strh	r2, [r3, #0]
    if (send) {
 80040a2:	1dbb      	adds	r3, r7, #6
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d019      	beq.n	80040de <CreateMessage+0x3b2>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80040aa:	4b4c      	ldr	r3, [pc, #304]	@ (80041dc <CreateMessage+0x4b0>)
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7fc f85d 	bl	800016c <strlen>
 80040b2:	0003      	movs	r3, r0
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	4b49      	ldr	r3, [pc, #292]	@ (80041dc <CreateMessage+0x4b0>)
 80040b8:	0011      	movs	r1, r2
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7ff fc9c 	bl	80039f8 <ESP_Send>
 80040c0:	0003      	movs	r3, r0
 80040c2:	001a      	movs	r2, r3
 80040c4:	4b4d      	ldr	r3, [pc, #308]	@ (80041fc <CreateMessage+0x4d0>)
 80040c6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80040c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004200 <CreateMessage+0x4d4>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	001a      	movs	r2, r3
 80040ce:	4b4b      	ldr	r3, [pc, #300]	@ (80041fc <CreateMessage+0x4d0>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4013      	ands	r3, r2
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	4193      	sbcs	r3, r2
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b49      	ldr	r3, [pc, #292]	@ (8004200 <CreateMessage+0x4d4>)
 80040dc:	701a      	strb	r2, [r3, #0]
    }

    uint8ArrayToString(Buffer, solarConfig);
 80040de:	4a52      	ldr	r2, [pc, #328]	@ (8004228 <CreateMessage+0x4fc>)
 80040e0:	4b41      	ldr	r3, [pc, #260]	@ (80041e8 <CreateMessage+0x4bc>)
 80040e2:	0011      	movs	r1, r2
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff fdfd 	bl	8003ce4 <uint8ArrayToString>
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 80040ea:	4b40      	ldr	r3, [pc, #256]	@ (80041ec <CreateMessage+0x4c0>)
 80040ec:	689c      	ldr	r4, [r3, #8]
 80040ee:	4b4f      	ldr	r3, [pc, #316]	@ (800422c <CreateMessage+0x500>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1c18      	adds	r0, r3, #0
 80040f4:	f7ff f9b6 	bl	8003464 <__aeabi_f2d>
 80040f8:	0002      	movs	r2, r0
 80040fa:	000b      	movs	r3, r1
 80040fc:	4d35      	ldr	r5, [pc, #212]	@ (80041d4 <CreateMessage+0x4a8>)
 80040fe:	494c      	ldr	r1, [pc, #304]	@ (8004230 <CreateMessage+0x504>)
 8004100:	4836      	ldr	r0, [pc, #216]	@ (80041dc <CreateMessage+0x4b0>)
 8004102:	9202      	str	r2, [sp, #8]
 8004104:	9303      	str	r3, [sp, #12]
 8004106:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <CreateMessage+0x4bc>)
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	002b      	movs	r3, r5
 800410c:	0022      	movs	r2, r4
 800410e:	f01c f9af 	bl	8020470 <siprintf>
    index += strlen(message);
 8004112:	4b32      	ldr	r3, [pc, #200]	@ (80041dc <CreateMessage+0x4b0>)
 8004114:	0018      	movs	r0, r3
 8004116:	f7fc f829 	bl	800016c <strlen>
 800411a:	0003      	movs	r3, r0
 800411c:	b299      	uxth	r1, r3
 800411e:	220e      	movs	r2, #14
 8004120:	18bb      	adds	r3, r7, r2
 8004122:	18ba      	adds	r2, r7, r2
 8004124:	8812      	ldrh	r2, [r2, #0]
 8004126:	188a      	adds	r2, r1, r2
 8004128:	801a      	strh	r2, [r3, #0]
    if (send) {
 800412a:	1dbb      	adds	r3, r7, #6
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d019      	beq.n	8004166 <CreateMessage+0x43a>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8004132:	4b2a      	ldr	r3, [pc, #168]	@ (80041dc <CreateMessage+0x4b0>)
 8004134:	0018      	movs	r0, r3
 8004136:	f7fc f819 	bl	800016c <strlen>
 800413a:	0003      	movs	r3, r0
 800413c:	b29a      	uxth	r2, r3
 800413e:	4b27      	ldr	r3, [pc, #156]	@ (80041dc <CreateMessage+0x4b0>)
 8004140:	0011      	movs	r1, r2
 8004142:	0018      	movs	r0, r3
 8004144:	f7ff fc58 	bl	80039f8 <ESP_Send>
 8004148:	0003      	movs	r3, r0
 800414a:	001a      	movs	r2, r3
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <CreateMessage+0x4d0>)
 800414e:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004150:	4b2b      	ldr	r3, [pc, #172]	@ (8004200 <CreateMessage+0x4d4>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	001a      	movs	r2, r3
 8004156:	4b29      	ldr	r3, [pc, #164]	@ (80041fc <CreateMessage+0x4d0>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	4013      	ands	r3, r2
 800415c:	1e5a      	subs	r2, r3, #1
 800415e:	4193      	sbcs	r3, r2
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4b27      	ldr	r3, [pc, #156]	@ (8004200 <CreateMessage+0x4d4>)
 8004164:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8004166:	4b33      	ldr	r3, [pc, #204]	@ (8004234 <CreateMessage+0x508>)
 8004168:	791b      	ldrb	r3, [r3, #4]
 800416a:	2b35      	cmp	r3, #53	@ 0x35
 800416c:	d000      	beq.n	8004170 <CreateMessage+0x444>
 800416e:	e078      	b.n	8004262 <CreateMessage+0x536>
 8004170:	f002 fa90 	bl	8006694 <Check_USB_PowerOn>
 8004174:	1e03      	subs	r3, r0, #0
 8004176:	d074      	beq.n	8004262 <CreateMessage+0x536>
      uint8ArrayToString(Buffer, noxConfig);
 8004178:	4a2f      	ldr	r2, [pc, #188]	@ (8004238 <CreateMessage+0x50c>)
 800417a:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <CreateMessage+0x4bc>)
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f7ff fdb0 	bl	8003ce4 <uint8ArrayToString>
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004184:	4b19      	ldr	r3, [pc, #100]	@ (80041ec <CreateMessage+0x4c0>)
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <CreateMessage+0x4c4>)
 800418a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800418c:	4c11      	ldr	r4, [pc, #68]	@ (80041d4 <CreateMessage+0x4a8>)
 800418e:	492b      	ldr	r1, [pc, #172]	@ (800423c <CreateMessage+0x510>)
 8004190:	4812      	ldr	r0, [pc, #72]	@ (80041dc <CreateMessage+0x4b0>)
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <CreateMessage+0x4bc>)
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	0023      	movs	r3, r4
 800419a:	f01c f969 	bl	8020470 <siprintf>
      index += strlen(message);
 800419e:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <CreateMessage+0x4b0>)
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7fb ffe3 	bl	800016c <strlen>
 80041a6:	0003      	movs	r3, r0
 80041a8:	b299      	uxth	r1, r3
 80041aa:	220e      	movs	r2, #14
 80041ac:	18bb      	adds	r3, r7, r2
 80041ae:	18ba      	adds	r2, r7, r2
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	188a      	adds	r2, r1, r2
 80041b4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80041b6:	1dbb      	adds	r3, r7, #6
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d051      	beq.n	8004262 <CreateMessage+0x536>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80041be:	4b07      	ldr	r3, [pc, #28]	@ (80041dc <CreateMessage+0x4b0>)
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fb ffd3 	bl	800016c <strlen>
 80041c6:	0003      	movs	r3, r0
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <CreateMessage+0x4b0>)
 80041cc:	0011      	movs	r1, r2
 80041ce:	0018      	movs	r0, r3
 80041d0:	e036      	b.n	8004240 <CreateMessage+0x514>
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	20000700 	.word	0x20000700
 80041d8:	08025a9c 	.word	0x08025a9c
 80041dc:	20000578 	.word	0x20000578
 80041e0:	08023a54 	.word	0x08023a54
 80041e4:	20000694 	.word	0x20000694
 80041e8:	20000720 	.word	0x20000720
 80041ec:	20000558 	.word	0x20000558
 80041f0:	20000624 	.word	0x20000624
 80041f4:	08023a58 	.word	0x08023a58
 80041f8:	20000579 	.word	0x20000579
 80041fc:	20000739 	.word	0x20000739
 8004200:	20000031 	.word	0x20000031
 8004204:	200006a0 	.word	0x200006a0
 8004208:	08023aac 	.word	0x08023aac
 800420c:	200006ac 	.word	0x200006ac
 8004210:	08023b04 	.word	0x08023b04
 8004214:	200006b8 	.word	0x200006b8
 8004218:	08023b60 	.word	0x08023b60
 800421c:	200006c4 	.word	0x200006c4
 8004220:	20000570 	.word	0x20000570
 8004224:	08023bb4 	.word	0x08023bb4
 8004228:	200006d0 	.word	0x200006d0
 800422c:	20000574 	.word	0x20000574
 8004230:	08023c14 	.word	0x08023c14
 8004234:	20000c88 	.word	0x20000c88
 8004238:	200006dc 	.word	0x200006dc
 800423c:	08023c74 	.word	0x08023c74
 8004240:	f7ff fbda 	bl	80039f8 <ESP_Send>
 8004244:	0003      	movs	r3, r0
 8004246:	001a      	movs	r2, r3
 8004248:	4b65      	ldr	r3, [pc, #404]	@ (80043e0 <CreateMessage+0x6b4>)
 800424a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800424c:	4b65      	ldr	r3, [pc, #404]	@ (80043e4 <CreateMessage+0x6b8>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	001a      	movs	r2, r3
 8004252:	4b63      	ldr	r3, [pc, #396]	@ (80043e0 <CreateMessage+0x6b4>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	4013      	ands	r3, r2
 8004258:	1e5a      	subs	r2, r3, #1
 800425a:	4193      	sbcs	r3, r2
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4b61      	ldr	r3, [pc, #388]	@ (80043e4 <CreateMessage+0x6b8>)
 8004260:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 8004262:	f005 f8b3 	bl	80093cc <sen5x_Get_sen5x_enable_state>
 8004266:	1e03      	subs	r3, r0, #0
 8004268:	d078      	beq.n	800435c <CreateMessage+0x630>
      uint8ArrayToString(Buffer, PM2Config);
 800426a:	4a5f      	ldr	r2, [pc, #380]	@ (80043e8 <CreateMessage+0x6bc>)
 800426c:	4b5f      	ldr	r3, [pc, #380]	@ (80043ec <CreateMessage+0x6c0>)
 800426e:	0011      	movs	r1, r2
 8004270:	0018      	movs	r0, r3
 8004272:	f7ff fd37 	bl	8003ce4 <uint8ArrayToString>
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8004276:	4b5e      	ldr	r3, [pc, #376]	@ (80043f0 <CreateMessage+0x6c4>)
 8004278:	689c      	ldr	r4, [r3, #8]
 800427a:	4b5e      	ldr	r3, [pc, #376]	@ (80043f4 <CreateMessage+0x6c8>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	1c18      	adds	r0, r3, #0
 8004280:	f7ff f8f0 	bl	8003464 <__aeabi_f2d>
 8004284:	0002      	movs	r2, r0
 8004286:	000b      	movs	r3, r1
 8004288:	4d5b      	ldr	r5, [pc, #364]	@ (80043f8 <CreateMessage+0x6cc>)
 800428a:	495c      	ldr	r1, [pc, #368]	@ (80043fc <CreateMessage+0x6d0>)
 800428c:	485c      	ldr	r0, [pc, #368]	@ (8004400 <CreateMessage+0x6d4>)
 800428e:	9202      	str	r2, [sp, #8]
 8004290:	9303      	str	r3, [sp, #12]
 8004292:	4b56      	ldr	r3, [pc, #344]	@ (80043ec <CreateMessage+0x6c0>)
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	002b      	movs	r3, r5
 8004298:	0022      	movs	r2, r4
 800429a:	f01c f8e9 	bl	8020470 <siprintf>
      index += strlen(message);
 800429e:	4b58      	ldr	r3, [pc, #352]	@ (8004400 <CreateMessage+0x6d4>)
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fb ff63 	bl	800016c <strlen>
 80042a6:	0003      	movs	r3, r0
 80042a8:	b299      	uxth	r1, r3
 80042aa:	220e      	movs	r2, #14
 80042ac:	18bb      	adds	r3, r7, r2
 80042ae:	18ba      	adds	r2, r7, r2
 80042b0:	8812      	ldrh	r2, [r2, #0]
 80042b2:	188a      	adds	r2, r1, r2
 80042b4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80042b6:	1dbb      	adds	r3, r7, #6
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d019      	beq.n	80042f2 <CreateMessage+0x5c6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80042be:	4b50      	ldr	r3, [pc, #320]	@ (8004400 <CreateMessage+0x6d4>)
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7fb ff53 	bl	800016c <strlen>
 80042c6:	0003      	movs	r3, r0
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004400 <CreateMessage+0x6d4>)
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7ff fb92 	bl	80039f8 <ESP_Send>
 80042d4:	0003      	movs	r3, r0
 80042d6:	001a      	movs	r2, r3
 80042d8:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <CreateMessage+0x6b4>)
 80042da:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80042dc:	4b41      	ldr	r3, [pc, #260]	@ (80043e4 <CreateMessage+0x6b8>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	001a      	movs	r2, r3
 80042e2:	4b3f      	ldr	r3, [pc, #252]	@ (80043e0 <CreateMessage+0x6b4>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	4013      	ands	r3, r2
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	4193      	sbcs	r3, r2
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b3d      	ldr	r3, [pc, #244]	@ (80043e4 <CreateMessage+0x6b8>)
 80042f0:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 80042f2:	4a44      	ldr	r2, [pc, #272]	@ (8004404 <CreateMessage+0x6d8>)
 80042f4:	4b3d      	ldr	r3, [pc, #244]	@ (80043ec <CreateMessage+0x6c0>)
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff fcf3 	bl	8003ce4 <uint8ArrayToString>
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 80042fe:	4b3c      	ldr	r3, [pc, #240]	@ (80043f0 <CreateMessage+0x6c4>)
 8004300:	689c      	ldr	r4, [r3, #8]
 8004302:	4b3c      	ldr	r3, [pc, #240]	@ (80043f4 <CreateMessage+0x6c8>)
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	1c18      	adds	r0, r3, #0
 8004308:	f7ff f8ac 	bl	8003464 <__aeabi_f2d>
 800430c:	0002      	movs	r2, r0
 800430e:	000b      	movs	r3, r1
 8004310:	4d39      	ldr	r5, [pc, #228]	@ (80043f8 <CreateMessage+0x6cc>)
 8004312:	493d      	ldr	r1, [pc, #244]	@ (8004408 <CreateMessage+0x6dc>)
 8004314:	483a      	ldr	r0, [pc, #232]	@ (8004400 <CreateMessage+0x6d4>)
 8004316:	9202      	str	r2, [sp, #8]
 8004318:	9303      	str	r3, [sp, #12]
 800431a:	4b34      	ldr	r3, [pc, #208]	@ (80043ec <CreateMessage+0x6c0>)
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	002b      	movs	r3, r5
 8004320:	0022      	movs	r2, r4
 8004322:	f01c f8a5 	bl	8020470 <siprintf>
 8004326:	e019      	b.n	800435c <CreateMessage+0x630>
//        retstat &= status;
//      }
    }
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8004328:	4a38      	ldr	r2, [pc, #224]	@ (800440c <CreateMessage+0x6e0>)
 800432a:	4b30      	ldr	r3, [pc, #192]	@ (80043ec <CreateMessage+0x6c0>)
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f7ff fcd8 	bl	8003ce4 <uint8ArrayToString>
    sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8004334:	4b2e      	ldr	r3, [pc, #184]	@ (80043f0 <CreateMessage+0x6c4>)
 8004336:	689c      	ldr	r4, [r3, #8]
 8004338:	4b35      	ldr	r3, [pc, #212]	@ (8004410 <CreateMessage+0x6e4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	1c18      	adds	r0, r3, #0
 800433e:	f7ff f891 	bl	8003464 <__aeabi_f2d>
 8004342:	0002      	movs	r2, r0
 8004344:	000b      	movs	r3, r1
 8004346:	4d2c      	ldr	r5, [pc, #176]	@ (80043f8 <CreateMessage+0x6cc>)
 8004348:	4932      	ldr	r1, [pc, #200]	@ (8004414 <CreateMessage+0x6e8>)
 800434a:	482d      	ldr	r0, [pc, #180]	@ (8004400 <CreateMessage+0x6d4>)
 800434c:	9202      	str	r2, [sp, #8]
 800434e:	9303      	str	r3, [sp, #12]
 8004350:	4b26      	ldr	r3, [pc, #152]	@ (80043ec <CreateMessage+0x6c0>)
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	002b      	movs	r3, r5
 8004356:	0022      	movs	r2, r4
 8004358:	f01c f88a 	bl	8020470 <siprintf>
    }


    sprintf(&message[0], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  sprintf(&message[strlen(message)], "]");
 800435c:	4b28      	ldr	r3, [pc, #160]	@ (8004400 <CreateMessage+0x6d4>)
 800435e:	0018      	movs	r0, r3
 8004360:	f7fb ff04 	bl	800016c <strlen>
 8004364:	0002      	movs	r2, r0
 8004366:	4b26      	ldr	r3, [pc, #152]	@ (8004400 <CreateMessage+0x6d4>)
 8004368:	18d3      	adds	r3, r2, r3
 800436a:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <CreateMessage+0x6ec>)
 800436c:	0011      	movs	r1, r2
 800436e:	0018      	movs	r0, r3
 8004370:	f01c f87e 	bl	8020470 <siprintf>
  index += strlen(message);
 8004374:	4b22      	ldr	r3, [pc, #136]	@ (8004400 <CreateMessage+0x6d4>)
 8004376:	0018      	movs	r0, r3
 8004378:	f7fb fef8 	bl	800016c <strlen>
 800437c:	0003      	movs	r3, r0
 800437e:	b299      	uxth	r1, r3
 8004380:	220e      	movs	r2, #14
 8004382:	18bb      	adds	r3, r7, r2
 8004384:	18ba      	adds	r2, r7, r2
 8004386:	8812      	ldrh	r2, [r2, #0]
 8004388:	188a      	adds	r2, r1, r2
 800438a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d019      	beq.n	80043c8 <CreateMessage+0x69c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004394:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <CreateMessage+0x6d4>)
 8004396:	0018      	movs	r0, r3
 8004398:	f7fb fee8 	bl	800016c <strlen>
 800439c:	0003      	movs	r3, r0
 800439e:	b29a      	uxth	r2, r3
 80043a0:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <CreateMessage+0x6d4>)
 80043a2:	0011      	movs	r1, r2
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7ff fb27 	bl	80039f8 <ESP_Send>
 80043aa:	0003      	movs	r3, r0
 80043ac:	001a      	movs	r2, r3
 80043ae:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <CreateMessage+0x6b4>)
 80043b0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80043b2:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <CreateMessage+0x6b8>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	001a      	movs	r2, r3
 80043b8:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <CreateMessage+0x6b4>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	4013      	ands	r3, r2
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	4193      	sbcs	r3, r2
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <CreateMessage+0x6b8>)
 80043c6:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80043c8:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <CreateMessage+0x6b8>)
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	701a      	strb	r2, [r3, #0]
  return index;
 80043d0:	230e      	movs	r3, #14
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	881b      	ldrh	r3, [r3, #0]
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b005      	add	sp, #20
 80043dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	20000739 	.word	0x20000739
 80043e4:	20000031 	.word	0x20000031
 80043e8:	200006e8 	.word	0x200006e8
 80043ec:	20000720 	.word	0x20000720
 80043f0:	20000558 	.word	0x20000558
 80043f4:	20000624 	.word	0x20000624
 80043f8:	20000700 	.word	0x20000700
 80043fc:	08023cc8 	.word	0x08023cc8
 8004400:	20000578 	.word	0x20000578
 8004404:	200006f4 	.word	0x200006f4
 8004408:	08023d24 	.word	0x08023d24
 800440c:	200006c4 	.word	0x200006c4
 8004410:	20000570 	.word	0x20000570
 8004414:	08023d80 	.word	0x08023d80
 8004418:	08023dd8 	.word	0x08023dd8

0800441c <StartProg>:

void StartProg(){
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8004420:	2064      	movs	r0, #100	@ 0x64
 8004422:	f00a ff1b 	bl	800f25c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004426:	4b15      	ldr	r3, [pc, #84]	@ (800447c <StartProg+0x60>)
 8004428:	2200      	movs	r2, #0
 800442a:	2101      	movs	r1, #1
 800442c:	0018      	movs	r0, r3
 800442e:	f00c f99c 	bl	801076a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004432:	2064      	movs	r0, #100	@ 0x64
 8004434:	f00a ff12 	bl	800f25c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004438:	4b10      	ldr	r3, [pc, #64]	@ (800447c <StartProg+0x60>)
 800443a:	2200      	movs	r2, #0
 800443c:	2102      	movs	r1, #2
 800443e:	0018      	movs	r0, r3
 8004440:	f00c f993 	bl	801076a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004444:	23fa      	movs	r3, #250	@ 0xfa
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	0018      	movs	r0, r3
 800444a:	f00a ff07 	bl	800f25c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800444e:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <StartProg+0x60>)
 8004450:	2201      	movs	r2, #1
 8004452:	2101      	movs	r1, #1
 8004454:	0018      	movs	r0, r3
 8004456:	f00c f988 	bl	801076a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800445a:	23fa      	movs	r3, #250	@ 0xfa
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	0018      	movs	r0, r3
 8004460:	f00a fefc 	bl	800f25c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004464:	4b05      	ldr	r3, [pc, #20]	@ (800447c <StartProg+0x60>)
 8004466:	2201      	movs	r2, #1
 8004468:	2102      	movs	r1, #2
 800446a:	0018      	movs	r0, r3
 800446c:	f00c f97d 	bl	801076a <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004470:	2028      	movs	r0, #40	@ 0x28
 8004472:	f00a fef3 	bl	800f25c <HAL_Delay>
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	50001c00 	.word	0x50001c00

08004480 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004482:	b0d9      	sub	sp, #356	@ 0x164
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	0008      	movs	r0, r1
 800448a:	0011      	movs	r1, r2
 800448c:	4ba4      	ldr	r3, [pc, #656]	@ (8004720 <ParseBuffer+0x2a0>)
 800448e:	24b0      	movs	r4, #176	@ 0xb0
 8004490:	0064      	lsls	r4, r4, #1
 8004492:	191b      	adds	r3, r3, r4
 8004494:	19db      	adds	r3, r3, r7
 8004496:	1c02      	adds	r2, r0, #0
 8004498:	801a      	strh	r2, [r3, #0]
 800449a:	4ba2      	ldr	r3, [pc, #648]	@ (8004724 <ParseBuffer+0x2a4>)
 800449c:	191b      	adds	r3, r3, r4
 800449e:	19db      	adds	r3, r3, r7
 80044a0:	1c0a      	adds	r2, r1, #0
 80044a2:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80044a4:	2380      	movs	r3, #128	@ 0x80
 80044a6:	005a      	lsls	r2, r3, #1
 80044a8:	2348      	movs	r3, #72	@ 0x48
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	2100      	movs	r1, #0
 80044ae:	0018      	movs	r0, r3
 80044b0:	f01c f922 	bl	80206f8 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80044b4:	2360      	movs	r3, #96	@ 0x60
 80044b6:	33ff      	adds	r3, #255	@ 0xff
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	2203      	movs	r2, #3
 80044bc:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80044be:	23ae      	movs	r3, #174	@ 0xae
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	e013      	b.n	80044f2 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80044ca:	20ae      	movs	r0, #174	@ 0xae
 80044cc:	0040      	lsls	r0, r0, #1
 80044ce:	183b      	adds	r3, r7, r0
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	18d2      	adds	r2, r2, r3
 80044d6:	183b      	adds	r3, r7, r0
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	7811      	ldrb	r1, [r2, #0]
 80044dc:	4a92      	ldr	r2, [pc, #584]	@ (8004728 <ParseBuffer+0x2a8>)
 80044de:	24b0      	movs	r4, #176	@ 0xb0
 80044e0:	0064      	lsls	r4, r4, #1
 80044e2:	1912      	adds	r2, r2, r4
 80044e4:	19d2      	adds	r2, r2, r7
 80044e6:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80044e8:	183b      	adds	r3, r7, r0
 80044ea:	881a      	ldrh	r2, [r3, #0]
 80044ec:	183b      	adds	r3, r7, r0
 80044ee:	3201      	adds	r2, #1
 80044f0:	801a      	strh	r2, [r3, #0]
 80044f2:	23ae      	movs	r3, #174	@ 0xae
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	18fa      	adds	r2, r7, r3
 80044f8:	4b89      	ldr	r3, [pc, #548]	@ (8004720 <ParseBuffer+0x2a0>)
 80044fa:	21b0      	movs	r1, #176	@ 0xb0
 80044fc:	0049      	lsls	r1, r1, #1
 80044fe:	185b      	adds	r3, r3, r1
 8004500:	19db      	adds	r3, r3, r7
 8004502:	8812      	ldrh	r2, [r2, #0]
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d3df      	bcc.n	80044ca <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800450a:	4b85      	ldr	r3, [pc, #532]	@ (8004720 <ParseBuffer+0x2a0>)
 800450c:	185b      	adds	r3, r3, r1
 800450e:	19db      	adds	r3, r3, r7
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	4a85      	ldr	r2, [pc, #532]	@ (8004728 <ParseBuffer+0x2a8>)
 8004514:	1852      	adds	r2, r2, r1
 8004516:	19d2      	adds	r2, r2, r7
 8004518:	2100      	movs	r1, #0
 800451a:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 800451c:	f00a faca 	bl	800eab4 <GetVerboseLevel>
 8004520:	0003      	movs	r3, r0
 8004522:	2b03      	cmp	r3, #3
 8004524:	d106      	bne.n	8004534 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 8004526:	2348      	movs	r3, #72	@ 0x48
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	4a80      	ldr	r2, [pc, #512]	@ (800472c <ParseBuffer+0x2ac>)
 800452c:	4980      	ldr	r1, [pc, #512]	@ (8004730 <ParseBuffer+0x2b0>)
 800452e:	2003      	movs	r0, #3
 8004530:	f00a fa46 	bl	800e9c0 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	26ac      	movs	r6, #172	@ 0xac
 8004538:	0076      	lsls	r6, r6, #1
 800453a:	19ba      	adds	r2, r7, r6
 800453c:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 800453e:	4b7d      	ldr	r3, [pc, #500]	@ (8004734 <ParseBuffer+0x2b4>)
 8004540:	25b0      	movs	r5, #176	@ 0xb0
 8004542:	006d      	lsls	r5, r5, #1
 8004544:	195b      	adds	r3, r3, r5
 8004546:	19db      	adds	r3, r3, r7
 8004548:	4a7b      	ldr	r2, [pc, #492]	@ (8004738 <ParseBuffer+0x2b8>)
 800454a:	8811      	ldrh	r1, [r2, #0]
 800454c:	8019      	strh	r1, [r3, #0]
 800454e:	7892      	ldrb	r2, [r2, #2]
 8004550:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004552:	4b7a      	ldr	r3, [pc, #488]	@ (800473c <ParseBuffer+0x2bc>)
 8004554:	195b      	adds	r3, r3, r5
 8004556:	19db      	adds	r3, r3, r7
 8004558:	4a79      	ldr	r2, [pc, #484]	@ (8004740 <ParseBuffer+0x2c0>)
 800455a:	6811      	ldr	r1, [r2, #0]
 800455c:	6019      	str	r1, [r3, #0]
 800455e:	8892      	ldrh	r2, [r2, #4]
 8004560:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004562:	4b78      	ldr	r3, [pc, #480]	@ (8004744 <ParseBuffer+0x2c4>)
 8004564:	195b      	adds	r3, r3, r5
 8004566:	19db      	adds	r3, r3, r7
 8004568:	4a77      	ldr	r2, [pc, #476]	@ (8004748 <ParseBuffer+0x2c8>)
 800456a:	6811      	ldr	r1, [r2, #0]
 800456c:	6019      	str	r1, [r3, #0]
 800456e:	7912      	ldrb	r2, [r2, #4]
 8004570:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004572:	4b76      	ldr	r3, [pc, #472]	@ (800474c <ParseBuffer+0x2cc>)
 8004574:	195b      	adds	r3, r3, r5
 8004576:	19db      	adds	r3, r3, r7
 8004578:	4a75      	ldr	r2, [pc, #468]	@ (8004750 <ParseBuffer+0x2d0>)
 800457a:	6811      	ldr	r1, [r2, #0]
 800457c:	6019      	str	r1, [r3, #0]
 800457e:	8892      	ldrh	r2, [r2, #4]
 8004580:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004582:	4b74      	ldr	r3, [pc, #464]	@ (8004754 <ParseBuffer+0x2d4>)
 8004584:	195b      	adds	r3, r3, r5
 8004586:	19db      	adds	r3, r3, r7
 8004588:	223e      	movs	r2, #62	@ 0x3e
 800458a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800458c:	4b72      	ldr	r3, [pc, #456]	@ (8004758 <ParseBuffer+0x2d8>)
 800458e:	195b      	adds	r3, r3, r5
 8004590:	19db      	adds	r3, r3, r7
 8004592:	4a72      	ldr	r2, [pc, #456]	@ (800475c <ParseBuffer+0x2dc>)
 8004594:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004596:	c313      	stmia	r3!, {r0, r1, r4}
 8004598:	8811      	ldrh	r1, [r2, #0]
 800459a:	8019      	strh	r1, [r3, #0]
 800459c:	7892      	ldrb	r2, [r2, #2]
 800459e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80045a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004760 <ParseBuffer+0x2e0>)
 80045a2:	195b      	adds	r3, r3, r5
 80045a4:	19db      	adds	r3, r3, r7
 80045a6:	4a6f      	ldr	r2, [pc, #444]	@ (8004764 <ParseBuffer+0x2e4>)
 80045a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045aa:	c313      	stmia	r3!, {r0, r1, r4}
 80045ac:	8812      	ldrh	r2, [r2, #0]
 80045ae:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80045b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004724 <ParseBuffer+0x2a4>)
 80045b2:	195b      	adds	r3, r3, r5
 80045b4:	19db      	adds	r3, r3, r7
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80045bc:	2344      	movs	r3, #68	@ 0x44
 80045be:	18fa      	adds	r2, r7, r3
 80045c0:	2348      	movs	r3, #72	@ 0x48
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	0011      	movs	r1, r2
 80045c6:	0018      	movs	r0, r3
 80045c8:	f01c f8d1 	bl	802076e <strstr>
 80045cc:	0003      	movs	r3, r0
 80045ce:	19ba      	adds	r2, r7, r6
 80045d0:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80045d2:	4b54      	ldr	r3, [pc, #336]	@ (8004724 <ParseBuffer+0x2a4>)
 80045d4:	22b0      	movs	r2, #176	@ 0xb0
 80045d6:	0052      	lsls	r2, r2, #1
 80045d8:	189b      	adds	r3, r3, r2
 80045da:	19db      	adds	r3, r3, r7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10c      	bne.n	80045fc <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80045e2:	232c      	movs	r3, #44	@ 0x2c
 80045e4:	18fa      	adds	r2, r7, r3
 80045e6:	2348      	movs	r3, #72	@ 0x48
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	0011      	movs	r1, r2
 80045ec:	0018      	movs	r0, r3
 80045ee:	f01c f8be 	bl	802076e <strstr>
 80045f2:	0003      	movs	r3, r0
 80045f4:	22ac      	movs	r2, #172	@ 0xac
 80045f6:	0052      	lsls	r2, r2, #1
 80045f8:	18ba      	adds	r2, r7, r2
 80045fa:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80045fc:	4b49      	ldr	r3, [pc, #292]	@ (8004724 <ParseBuffer+0x2a4>)
 80045fe:	22b0      	movs	r2, #176	@ 0xb0
 8004600:	0052      	lsls	r2, r2, #1
 8004602:	189b      	adds	r3, r3, r2
 8004604:	19db      	adds	r3, r3, r7
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d10c      	bne.n	8004626 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 800460c:	2328      	movs	r3, #40	@ 0x28
 800460e:	18fa      	adds	r2, r7, r3
 8004610:	2348      	movs	r3, #72	@ 0x48
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	0011      	movs	r1, r2
 8004616:	0018      	movs	r0, r3
 8004618:	f01c f8a9 	bl	802076e <strstr>
 800461c:	0003      	movs	r3, r0
 800461e:	22ac      	movs	r2, #172	@ 0xac
 8004620:	0052      	lsls	r2, r2, #1
 8004622:	18ba      	adds	r2, r7, r2
 8004624:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004626:	4b3f      	ldr	r3, [pc, #252]	@ (8004724 <ParseBuffer+0x2a4>)
 8004628:	22b0      	movs	r2, #176	@ 0xb0
 800462a:	0052      	lsls	r2, r2, #1
 800462c:	189b      	adds	r3, r3, r2
 800462e:	19db      	adds	r3, r3, r7
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b05      	cmp	r3, #5
 8004634:	d10c      	bne.n	8004650 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 8004636:	2308      	movs	r3, #8
 8004638:	18fa      	adds	r2, r7, r3
 800463a:	2348      	movs	r3, #72	@ 0x48
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f01c f894 	bl	802076e <strstr>
 8004646:	0003      	movs	r3, r0
 8004648:	22ac      	movs	r2, #172	@ 0xac
 800464a:	0052      	lsls	r2, r2, #1
 800464c:	18ba      	adds	r2, r7, r2
 800464e:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004650:	233c      	movs	r3, #60	@ 0x3c
 8004652:	18fa      	adds	r2, r7, r3
 8004654:	2448      	movs	r4, #72	@ 0x48
 8004656:	193b      	adds	r3, r7, r4
 8004658:	0011      	movs	r1, r2
 800465a:	0018      	movs	r0, r3
 800465c:	f01c f887 	bl	802076e <strstr>
 8004660:	0003      	movs	r3, r0
 8004662:	22aa      	movs	r2, #170	@ 0xaa
 8004664:	0052      	lsls	r2, r2, #1
 8004666:	18ba      	adds	r2, r7, r2
 8004668:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800466a:	2318      	movs	r3, #24
 800466c:	18fa      	adds	r2, r7, r3
 800466e:	193b      	adds	r3, r7, r4
 8004670:	0011      	movs	r1, r2
 8004672:	0018      	movs	r0, r3
 8004674:	f01c f87b 	bl	802076e <strstr>
 8004678:	0003      	movs	r3, r0
 800467a:	22a8      	movs	r2, #168	@ 0xa8
 800467c:	0052      	lsls	r2, r2, #1
 800467e:	18ba      	adds	r2, r7, r2
 8004680:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004682:	4a39      	ldr	r2, [pc, #228]	@ (8004768 <ParseBuffer+0x2e8>)
 8004684:	193b      	adds	r3, r7, r4
 8004686:	0011      	movs	r1, r2
 8004688:	0018      	movs	r0, r3
 800468a:	f01c f870 	bl	802076e <strstr>
 800468e:	0003      	movs	r3, r0
 8004690:	22a6      	movs	r2, #166	@ 0xa6
 8004692:	0052      	lsls	r2, r2, #1
 8004694:	18ba      	adds	r2, r7, r2
 8004696:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004698:	2334      	movs	r3, #52	@ 0x34
 800469a:	18fa      	adds	r2, r7, r3
 800469c:	193b      	adds	r3, r7, r4
 800469e:	0011      	movs	r1, r2
 80046a0:	0018      	movs	r0, r3
 80046a2:	f01c f864 	bl	802076e <strstr>
 80046a6:	0003      	movs	r3, r0
 80046a8:	22a4      	movs	r2, #164	@ 0xa4
 80046aa:	0052      	lsls	r2, r2, #1
 80046ac:	18ba      	adds	r2, r7, r2
 80046ae:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80046b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <ParseBuffer+0x2a0>)
 80046b2:	21b0      	movs	r1, #176	@ 0xb0
 80046b4:	0049      	lsls	r1, r1, #1
 80046b6:	185b      	adds	r3, r3, r1
 80046b8:	19db      	adds	r3, r3, r7
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d800      	bhi.n	80046c2 <ParseBuffer+0x242>
 80046c0:	e0c1      	b.n	8004846 <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80046c2:	22ac      	movs	r2, #172	@ 0xac
 80046c4:	0052      	lsls	r2, r2, #1
 80046c6:	18bb      	adds	r3, r7, r2
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d054      	beq.n	8004778 <ParseBuffer+0x2f8>
 80046ce:	18bb      	adds	r3, r7, r2
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b4f      	cmp	r3, #79	@ 0x4f
 80046d6:	d14f      	bne.n	8004778 <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80046d8:	2360      	movs	r3, #96	@ 0x60
 80046da:	33ff      	adds	r3, #255	@ 0xff
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <ParseBuffer+0x2ec>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b12      	cmp	r3, #18
 80046e8:	d146      	bne.n	8004778 <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80046ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <ParseBuffer+0x2a0>)
 80046ec:	185b      	adds	r3, r3, r1
 80046ee:	19db      	adds	r3, r3, r7
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80046f4:	d10b      	bne.n	800470e <ParseBuffer+0x28e>
 80046f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <ParseBuffer+0x2a8>)
 80046f8:	185b      	adds	r3, r3, r1
 80046fa:	19db      	adds	r3, r3, r7
 80046fc:	2221      	movs	r2, #33	@ 0x21
 80046fe:	5c9b      	ldrb	r3, [r3, r2]
 8004700:	2b32      	cmp	r3, #50	@ 0x32
 8004702:	d104      	bne.n	800470e <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004704:	193b      	adds	r3, r7, r4
 8004706:	0018      	movs	r0, r3
 8004708:	f002 f930 	bl	800696c <ParseTime>
 800470c:	e034      	b.n	8004778 <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 800470e:	4a18      	ldr	r2, [pc, #96]	@ (8004770 <ParseBuffer+0x2f0>)
 8004710:	4b18      	ldr	r3, [pc, #96]	@ (8004774 <ParseBuffer+0x2f4>)
 8004712:	0019      	movs	r1, r3
 8004714:	2001      	movs	r0, #1
 8004716:	f00a f953 	bl	800e9c0 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800471a:	2306      	movs	r3, #6
 800471c:	e097      	b.n	800484e <ParseBuffer+0x3ce>
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	fffffea2 	.word	0xfffffea2
 8004724:	fffffea1 	.word	0xfffffea1
 8004728:	fffffee8 	.word	0xfffffee8
 800472c:	08023ddc 	.word	0x08023ddc
 8004730:	08023670 	.word	0x08023670
 8004734:	fffffee4 	.word	0xfffffee4
 8004738:	08023e08 	.word	0x08023e08
 800473c:	fffffedc 	.word	0xfffffedc
 8004740:	08023e0c 	.word	0x08023e0c
 8004744:	fffffed4 	.word	0xfffffed4
 8004748:	08023e14 	.word	0x08023e14
 800474c:	fffffecc 	.word	0xfffffecc
 8004750:	08023e1c 	.word	0x08023e1c
 8004754:	fffffec8 	.word	0xfffffec8
 8004758:	fffffeb8 	.word	0xfffffeb8
 800475c:	08023e24 	.word	0x08023e24
 8004760:	fffffea8 	.word	0xfffffea8
 8004764:	08023e34 	.word	0x08023e34
 8004768:	08025a7c 	.word	0x08025a7c
 800476c:	2000061e 	.word	0x2000061e
 8004770:	08023df4 	.word	0x08023df4
 8004774:	08023694 	.word	0x08023694
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004778:	22ac      	movs	r2, #172	@ 0xac
 800477a:	0052      	lsls	r2, r2, #1
 800477c:	18bb      	adds	r3, r7, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <ParseBuffer+0x318>
 8004784:	18bb      	adds	r3, r7, r2
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b72      	cmp	r3, #114	@ 0x72
 800478c:	d104      	bne.n	8004798 <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 800478e:	2360      	movs	r3, #96	@ 0x60
 8004790:	33ff      	adds	r3, #255	@ 0xff
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	2202      	movs	r2, #2
 8004796:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004798:	22ac      	movs	r2, #172	@ 0xac
 800479a:	0052      	lsls	r2, r2, #1
 800479c:	18bb      	adds	r3, r7, r2
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <ParseBuffer+0x338>
 80047a4:	18bb      	adds	r3, r7, r2
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80047ac:	d104      	bne.n	80047b8 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 80047ae:	2360      	movs	r3, #96	@ 0x60
 80047b0:	33ff      	adds	r3, #255	@ 0xff
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	2205      	movs	r2, #5
 80047b6:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80047b8:	22ac      	movs	r2, #172	@ 0xac
 80047ba:	0052      	lsls	r2, r2, #1
 80047bc:	18bb      	adds	r3, r7, r2
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <ParseBuffer+0x358>
 80047c4:	18bb      	adds	r3, r7, r2
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80047cc:	d104      	bne.n	80047d8 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 80047ce:	2360      	movs	r3, #96	@ 0x60
 80047d0:	33ff      	adds	r3, #255	@ 0xff
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	220b      	movs	r2, #11
 80047d6:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80047d8:	22aa      	movs	r2, #170	@ 0xaa
 80047da:	0052      	lsls	r2, r2, #1
 80047dc:	18bb      	adds	r3, r7, r2
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d004      	beq.n	80047ee <ParseBuffer+0x36e>
 80047e4:	18bb      	adds	r3, r7, r2
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b45      	cmp	r3, #69	@ 0x45
 80047ec:	d00a      	beq.n	8004804 <ParseBuffer+0x384>
 80047ee:	22a4      	movs	r2, #164	@ 0xa4
 80047f0:	0052      	lsls	r2, r2, #1
 80047f2:	18bb      	adds	r3, r7, r2
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <ParseBuffer+0x38e>
 80047fa:	18bb      	adds	r3, r7, r2
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b46      	cmp	r3, #70	@ 0x46
 8004802:	d104      	bne.n	800480e <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004804:	2360      	movs	r3, #96	@ 0x60
 8004806:	33ff      	adds	r3, #255	@ 0xff
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	2201      	movs	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800480e:	22a8      	movs	r2, #168	@ 0xa8
 8004810:	0052      	lsls	r2, r2, #1
 8004812:	18bb      	adds	r3, r7, r2
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <ParseBuffer+0x3aa>
 800481a:	18bb      	adds	r3, r7, r2
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b57      	cmp	r3, #87	@ 0x57
 8004822:	d102      	bne.n	800482a <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004824:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <ParseBuffer+0x3d8>)
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800482a:	22a6      	movs	r2, #166	@ 0xa6
 800482c:	0052      	lsls	r2, r2, #1
 800482e:	18bb      	adds	r3, r7, r2
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <ParseBuffer+0x3c6>
 8004836:	18bb      	adds	r3, r7, r2
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b32      	cmp	r3, #50	@ 0x32
 800483e:	d102      	bne.n	8004846 <ParseBuffer+0x3c6>
      beurs = true;
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <ParseBuffer+0x3dc>)
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004846:	2360      	movs	r3, #96	@ 0x60
 8004848:	33ff      	adds	r3, #255	@ 0xff
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]

}
 800484e:	0018      	movs	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	b059      	add	sp, #356	@ 0x164
 8004854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	20000550 	.word	0x20000550
 800485c:	20000552 	.word	0x20000552

08004860 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <PollAwake+0x34>)
 8004868:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0018      	movs	r0, r3
 800486e:	f7fb fc7d 	bl	800016c <strlen>
 8004872:	0003      	movs	r3, r0
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0011      	movs	r1, r2
 800487a:	0018      	movs	r0, r3
 800487c:	f7ff f8bc 	bl	80039f8 <ESP_Send>
 8004880:	1e03      	subs	r3, r0, #0
 8004882:	d001      	beq.n	8004888 <PollAwake+0x28>
    return true;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <PollAwake+0x2a>
  }
  else{
    return false;
 8004888:	2300      	movs	r3, #0
  }
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b002      	add	sp, #8
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	08023e44 	.word	0x08023e44

08004898 <RFPower>:

bool RFPower(){
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800489e:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <RFPower+0x34>)
 80048a0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7fb fc61 	bl	800016c <strlen>
 80048aa:	0003      	movs	r3, r0
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0011      	movs	r1, r2
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff f8a0 	bl	80039f8 <ESP_Send>
 80048b8:	1e03      	subs	r3, r0, #0
 80048ba:	d001      	beq.n	80048c0 <RFPower+0x28>
    return true;
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <RFPower+0x2a>
  }
  else{
    return false;
 80048c0:	2300      	movs	r3, #0
  }
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	08023e4c 	.word	0x08023e4c

080048d0 <CheckRFPower>:

bool CheckRFPower(){
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80048d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <CheckRFPower+0x34>)
 80048d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fb fc45 	bl	800016c <strlen>
 80048e2:	0003      	movs	r3, r0
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0011      	movs	r1, r2
 80048ea:	0018      	movs	r0, r3
 80048ec:	f7ff f884 	bl	80039f8 <ESP_Send>
 80048f0:	1e03      	subs	r3, r0, #0
 80048f2:	d001      	beq.n	80048f8 <CheckRFPower+0x28>
    return true;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <CheckRFPower+0x2a>
  }
  else{
    return false;
 80048f8:	2300      	movs	r3, #0
  }
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	08023e5c 	.word	0x08023e5c

08004908 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800490e:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <ATRestore+0x34>)
 8004910:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0018      	movs	r0, r3
 8004916:	f7fb fc29 	bl	800016c <strlen>
 800491a:	0003      	movs	r3, r0
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0011      	movs	r1, r2
 8004922:	0018      	movs	r0, r3
 8004924:	f7ff f868 	bl	80039f8 <ESP_Send>
 8004928:	1e03      	subs	r3, r0, #0
 800492a:	d001      	beq.n	8004930 <ATRestore+0x28>
    return true;
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <ATRestore+0x2a>
  }
  else{
    return false;
 8004930:	2300      	movs	r3, #0
  }
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	08023e6c 	.word	0x08023e6c

08004940 <CWINIT>:

bool CWINIT(){
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004946:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <CWINIT+0x34>)
 8004948:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	0018      	movs	r0, r3
 800494e:	f7fb fc0d 	bl	800016c <strlen>
 8004952:	0003      	movs	r3, r0
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0011      	movs	r1, r2
 800495a:	0018      	movs	r0, r3
 800495c:	f7ff f84c 	bl	80039f8 <ESP_Send>
 8004960:	1e03      	subs	r3, r0, #0
 8004962:	d001      	beq.n	8004968 <CWINIT+0x28>
    return true;
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <CWINIT+0x2a>
  }
  else{
    return false;
 8004968:	2300      	movs	r3, #0
  }
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b002      	add	sp, #8
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	08023e7c 	.word	0x08023e7c

08004978 <CWMODE1>:

bool CWMODE1(){
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800497e:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <CWMODE1+0x34>)
 8004980:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fb fbf1 	bl	800016c <strlen>
 800498a:	0003      	movs	r3, r0
 800498c:	b29a      	uxth	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0011      	movs	r1, r2
 8004992:	0018      	movs	r0, r3
 8004994:	f7ff f830 	bl	80039f8 <ESP_Send>
 8004998:	1e03      	subs	r3, r0, #0
 800499a:	d001      	beq.n	80049a0 <CWMODE1+0x28>
    return true;
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <CWMODE1+0x2a>
  }
  else{
    return false;
 80049a0:	2300      	movs	r3, #0
  }
}
 80049a2:	0018      	movs	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b002      	add	sp, #8
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	08023e8c 	.word	0x08023e8c

080049b0 <CWMODE2>:

bool CWMODE2(){
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80049b6:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <CWMODE2+0x34>)
 80049b8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f7fb fbd5 	bl	800016c <strlen>
 80049c2:	0003      	movs	r3, r0
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	0011      	movs	r1, r2
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7ff f814 	bl	80039f8 <ESP_Send>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d001      	beq.n	80049d8 <CWMODE2+0x28>
    return true;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <CWMODE2+0x2a>
  }
  else{
    return false;
 80049d8:	2300      	movs	r3, #0
  }
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b002      	add	sp, #8
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	08023e9c 	.word	0x08023e9c

080049e8 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80049ee:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <CWAUTOCONN+0x34>)
 80049f0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7fb fbb9 	bl	800016c <strlen>
 80049fa:	0003      	movs	r3, r0
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0011      	movs	r1, r2
 8004a02:	0018      	movs	r0, r3
 8004a04:	f7fe fff8 	bl	80039f8 <ESP_Send>
 8004a08:	1e03      	subs	r3, r0, #0
 8004a0a:	d001      	beq.n	8004a10 <CWAUTOCONN+0x28>
    return true;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004a10:	2300      	movs	r3, #0
  }
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b002      	add	sp, #8
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	08023eac 	.word	0x08023eac

08004a20 <CWJAP>:

bool CWJAP(){
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a22:	46c6      	mov	lr, r8
 8004a24:	b500      	push	{lr}
 8004a26:	b0a2      	sub	sp, #136	@ 0x88
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	466b      	mov	r3, sp
 8004a2c:	4698      	mov	r8, r3
  beursTest = true;
 8004a2e:	4b39      	ldr	r3, [pc, #228]	@ (8004b14 <CWJAP+0xf4>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004a34:	2618      	movs	r6, #24
 8004a36:	19bb      	adds	r3, r7, r6
 8004a38:	2264      	movs	r2, #100	@ 0x64
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f01b fe5b 	bl	80206f8 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004a42:	4b35      	ldr	r3, [pc, #212]	@ (8004b18 <CWJAP+0xf8>)
 8004a44:	4a35      	ldr	r2, [pc, #212]	@ (8004b1c <CWJAP+0xfc>)
 8004a46:	4936      	ldr	r1, [pc, #216]	@ (8004b20 <CWJAP+0x100>)
 8004a48:	19b8      	adds	r0, r7, r6
 8004a4a:	f01b fd11 	bl	8020470 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004a4e:	19bb      	adds	r3, r7, r6
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7fb fb8b 	bl	800016c <strlen>
 8004a56:	0002      	movs	r2, r0
 8004a58:	216f      	movs	r1, #111	@ 0x6f
 8004a5a:	0030      	movs	r0, r6
 8004a5c:	180b      	adds	r3, r1, r0
 8004a5e:	19db      	adds	r3, r3, r7
 8004a60:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004a62:	180b      	adds	r3, r1, r0
 8004a64:	19db      	adds	r3, r3, r7
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	1e5a      	subs	r2, r3, #1
 8004a6c:	2180      	movs	r1, #128	@ 0x80
 8004a6e:	1879      	adds	r1, r7, r1
 8004a70:	600a      	str	r2, [r1, #0]
 8004a72:	001a      	movs	r2, r3
 8004a74:	60ba      	str	r2, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	60fa      	str	r2, [r7, #12]
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	0002      	movs	r2, r0
 8004a80:	0f52      	lsrs	r2, r2, #29
 8004a82:	000e      	movs	r6, r1
 8004a84:	00f6      	lsls	r6, r6, #3
 8004a86:	617e      	str	r6, [r7, #20]
 8004a88:	697e      	ldr	r6, [r7, #20]
 8004a8a:	4316      	orrs	r6, r2
 8004a8c:	617e      	str	r6, [r7, #20]
 8004a8e:	0002      	movs	r2, r0
 8004a90:	00d2      	lsls	r2, r2, #3
 8004a92:	613a      	str	r2, [r7, #16]
 8004a94:	001a      	movs	r2, r3
 8004a96:	603a      	str	r2, [r7, #0]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	6838      	ldr	r0, [r7, #0]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	0002      	movs	r2, r0
 8004aa2:	0f52      	lsrs	r2, r2, #29
 8004aa4:	000e      	movs	r6, r1
 8004aa6:	00f5      	lsls	r5, r6, #3
 8004aa8:	4315      	orrs	r5, r2
 8004aaa:	0002      	movs	r2, r0
 8004aac:	00d4      	lsls	r4, r2, #3
 8004aae:	3307      	adds	r3, #7
 8004ab0:	08db      	lsrs	r3, r3, #3
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	466a      	mov	r2, sp
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	469d      	mov	sp, r3
 8004aba:	466b      	mov	r3, sp
 8004abc:	3300      	adds	r3, #0
 8004abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004ac0:	246f      	movs	r4, #111	@ 0x6f
 8004ac2:	2518      	movs	r5, #24
 8004ac4:	1963      	adds	r3, r4, r5
 8004ac6:	19db      	adds	r3, r3, r7
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	001a      	movs	r2, r3
 8004ace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f01b fe10 	bl	80206f8 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004ad8:	1963      	adds	r3, r4, r5
 8004ada:	19db      	adds	r3, r3, r7
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	1979      	adds	r1, r7, r5
 8004ae0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f01b fe2f 	bl	8020746 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004ae8:	1963      	adds	r3, r4, r5
 8004aea:	19db      	adds	r3, r3, r7
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af2:	0011      	movs	r1, r2
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7fe ff7f 	bl	80039f8 <ESP_Send>
 8004afa:	1e03      	subs	r3, r0, #0
 8004afc:	d001      	beq.n	8004b02 <CWJAP+0xe2>
    return true;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <CWJAP+0xe4>
  }
  else{
    return false;
 8004b02:	2300      	movs	r3, #0
 8004b04:	46c5      	mov	sp, r8
  }
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b022      	add	sp, #136	@ 0x88
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	46b8      	mov	r8, r7
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	20000551 	.word	0x20000551
 8004b18:	08025a88 	.word	0x08025a88
 8004b1c:	08025a7c 	.word	0x08025a7c
 8004b20:	08023ec0 	.word	0x08023ec0

08004b24 <CWMODE3>:

bool CWMODE3(){
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <CWMODE3+0x34>)
 8004b2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7fb fb1b 	bl	800016c <strlen>
 8004b36:	0003      	movs	r3, r0
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0011      	movs	r1, r2
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7fe ff5a 	bl	80039f8 <ESP_Send>
 8004b44:	1e03      	subs	r3, r0, #0
 8004b46:	d001      	beq.n	8004b4c <CWMODE3+0x28>
    return true;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <CWMODE3+0x2a>
  }
  else{
    return false;
 8004b4c:	2300      	movs	r3, #0
  }
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	08023ed8 	.word	0x08023ed8

08004b5c <CWSTATE>:

bool CWSTATE(){
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004b62:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <CWSTATE+0x34>)
 8004b64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fb faff 	bl	800016c <strlen>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0011      	movs	r1, r2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7fe ff3e 	bl	80039f8 <ESP_Send>
 8004b7c:	1e03      	subs	r3, r0, #0
 8004b7e:	d001      	beq.n	8004b84 <CWSTATE+0x28>
    return true;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004b84:	2300      	movs	r3, #0
  }
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b002      	add	sp, #8
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	08023ee8 	.word	0x08023ee8

08004b94 <CWSAP>:

bool CWSAP(){
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <CWSAP+0x34>)
 8004b9c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7fb fae3 	bl	800016c <strlen>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0011      	movs	r1, r2
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7fe ff22 	bl	80039f8 <ESP_Send>
 8004bb4:	1e03      	subs	r3, r0, #0
 8004bb6:	d001      	beq.n	8004bbc <CWSAP+0x28>
    return true;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <CWSAP+0x2a>
  }
  else{
    return false;
 8004bbc:	2300      	movs	r3, #0
  }
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b002      	add	sp, #8
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	08023ef8 	.word	0x08023ef8

08004bcc <CIPMUX>:

bool CIPMUX(){
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <CIPMUX+0x34>)
 8004bd4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7fb fac7 	bl	800016c <strlen>
 8004bde:	0003      	movs	r3, r0
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	0011      	movs	r1, r2
 8004be6:	0018      	movs	r0, r3
 8004be8:	f7fe ff06 	bl	80039f8 <ESP_Send>
 8004bec:	1e03      	subs	r3, r0, #0
 8004bee:	d001      	beq.n	8004bf4 <CIPMUX+0x28>
    return true;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004bf4:	2300      	movs	r3, #0
  }
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	08023f1c 	.word	0x08023f1c

08004c04 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <WEBSERVER+0x34>)
 8004c0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fb faab 	bl	800016c <strlen>
 8004c16:	0003      	movs	r3, r0
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0011      	movs	r1, r2
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7fe feea 	bl	80039f8 <ESP_Send>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d001      	beq.n	8004c2c <WEBSERVER+0x28>
    return true;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004c2c:	2300      	movs	r3, #0
  }
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b002      	add	sp, #8
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	08023f2c 	.word	0x08023f2c

08004c3c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004c42:	1cfb      	adds	r3, r7, #3
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004c48:	4b26      	ldr	r3, [pc, #152]	@ (8004ce4 <HTTPCPOST+0xa8>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	1dbc      	adds	r4, r7, #6
 8004c4e:	1cf9      	adds	r1, r7, #3
 8004c50:	2200      	movs	r2, #0
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7ff f86a 	bl	8003d2c <CreateMessage>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004c5c:	4b21      	ldr	r3, [pc, #132]	@ (8004ce4 <HTTPCPOST+0xa8>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004c64:	1dbb      	adds	r3, r7, #6
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce8 <HTTPCPOST+0xac>)
 8004c6a:	4920      	ldr	r1, [pc, #128]	@ (8004cec <HTTPCPOST+0xb0>)
 8004c6c:	4820      	ldr	r0, [pc, #128]	@ (8004cf0 <HTTPCPOST+0xb4>)
 8004c6e:	f01b fbff 	bl	8020470 <siprintf>
 8004c72:	e015      	b.n	8004ca0 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004c74:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HTTPCPOST+0xb8>)
 8004c76:	4820      	ldr	r0, [pc, #128]	@ (8004cf8 <HTTPCPOST+0xbc>)
 8004c78:	220c      	movs	r2, #12
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	f002 fc5a 	bl	8007534 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004c80:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf4 <HTTPCPOST+0xb8>)
 8004c82:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <HTTPCPOST+0xc0>)
 8004c84:	0011      	movs	r1, r2
 8004c86:	0018      	movs	r0, r3
 8004c88:	f7ff f82c 	bl	8003ce4 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004c8c:	1dbb      	adds	r3, r7, #6
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	4c1a      	ldr	r4, [pc, #104]	@ (8004cfc <HTTPCPOST+0xc0>)
 8004c92:	4a1b      	ldr	r2, [pc, #108]	@ (8004d00 <HTTPCPOST+0xc4>)
 8004c94:	491b      	ldr	r1, [pc, #108]	@ (8004d04 <HTTPCPOST+0xc8>)
 8004c96:	4816      	ldr	r0, [pc, #88]	@ (8004cf0 <HTTPCPOST+0xb4>)
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	0023      	movs	r3, r4
 8004c9c:	f01b fbe8 	bl	8020470 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004ca0:	4b13      	ldr	r3, [pc, #76]	@ (8004cf0 <HTTPCPOST+0xb4>)
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7fb fa62 	bl	800016c <strlen>
 8004ca8:	0002      	movs	r2, r0
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	8818      	ldrh	r0, [r3, #0]
 8004cb2:	1cfb      	adds	r3, r7, #3
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	4a14      	ldr	r2, [pc, #80]	@ (8004d08 <HTTPCPOST+0xcc>)
 8004cb8:	4914      	ldr	r1, [pc, #80]	@ (8004d0c <HTTPCPOST+0xd0>)
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	2003      	movs	r0, #3
 8004cc0:	f009 fe7e 	bl	800e9c0 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004cc4:	1d3b      	adds	r3, r7, #4
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <HTTPCPOST+0xb4>)
 8004cca:	0011      	movs	r1, r2
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7fe fe93 	bl	80039f8 <ESP_Send>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d001      	beq.n	8004cda <HTTPCPOST+0x9e>
    return true;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004cda:	2300      	movs	r3, #0
  }
}
 8004cdc:	0018      	movs	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b003      	add	sp, #12
 8004ce2:	bd90      	pop	{r4, r7, pc}
 8004ce4:	20000552 	.word	0x20000552
 8004ce8:	08025aa4 	.word	0x08025aa4
 8004cec:	08023f44 	.word	0x08023f44
 8004cf0:	20000578 	.word	0x20000578
 8004cf4:	2000073c 	.word	0x2000073c
 8004cf8:	08080000 	.word	0x08080000
 8004cfc:	20000748 	.word	0x20000748
 8004d00:	08025ae0 	.word	0x08025ae0
 8004d04:	08023f7c 	.word	0x08023f7c
 8004d08:	08023fbc 	.word	0x08023fbc
 8004d0c:	08023670 	.word	0x08023670

08004d10 <SENDDATA>:

bool SENDDATA(){
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af02      	add	r7, sp, #8
  bool result = false;
 8004d16:	1dfb      	adds	r3, r7, #7
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d58 <SENDDATA+0x48>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	1df9      	adds	r1, r7, #7
 8004d22:	2201      	movs	r2, #1
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7ff f801 	bl	8003d2c <CreateMessage>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <SENDDATA+0x4c>)
 8004d30:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004d32:	1dfb      	adds	r3, r7, #7
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	0018      	movs	r0, r3
 8004d38:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <SENDDATA+0x4c>)
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <SENDDATA+0x50>)
 8004d3e:	4909      	ldr	r1, [pc, #36]	@ (8004d64 <SENDDATA+0x54>)
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	0003      	movs	r3, r0
 8004d44:	2003      	movs	r0, #3
 8004d46:	f009 fe3b 	bl	800e9c0 <CreateLine>
  return result;
 8004d4a:	1dfb      	adds	r3, r7, #7
 8004d4c:	781b      	ldrb	r3, [r3, #0]
}
 8004d4e:	0018      	movs	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b002      	add	sp, #8
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	20000552 	.word	0x20000552
 8004d5c:	2000056c 	.word	0x2000056c
 8004d60:	08024018 	.word	0x08024018
 8004d64:	08023670 	.word	0x08023670

08004d68 <SLEEP>:

bool SLEEP(){
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <SLEEP+0x34>)
 8004d70:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7fb f9f9 	bl	800016c <strlen>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0011      	movs	r1, r2
 8004d82:	0018      	movs	r0, r3
 8004d84:	f7fe fe38 	bl	80039f8 <ESP_Send>
 8004d88:	1e03      	subs	r3, r0, #0
 8004d8a:	d001      	beq.n	8004d90 <SLEEP+0x28>
    return true;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <SLEEP+0x2a>
  }
  else{
    return false;
 8004d90:	2300      	movs	r3, #0
  }
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b002      	add	sp, #8
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	08024054 	.word	0x08024054

08004da0 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004da6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ddc <CIPSNTPCFG+0x3c>)
 8004da8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fb f9dd 	bl	800016c <strlen>
 8004db2:	0003      	movs	r3, r0
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0011      	movs	r1, r2
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7fe fe1c 	bl	80039f8 <ESP_Send>
 8004dc0:	1e03      	subs	r3, r0, #0
 8004dc2:	d006      	beq.n	8004dd2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004dc4:	23fa      	movs	r3, #250	@ 0xfa
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f00a fa47 	bl	800f25c <HAL_Delay>
    return true;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004dd2:	2300      	movs	r3, #0
  }
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b002      	add	sp, #8
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08024064 	.word	0x08024064

08004de0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <CIPSNTPTIME+0x34>)
 8004de8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7fb f9bd 	bl	800016c <strlen>
 8004df2:	0003      	movs	r3, r0
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0011      	movs	r1, r2
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7fe fdfc 	bl	80039f8 <ESP_Send>
 8004e00:	1e03      	subs	r3, r0, #0
 8004e02:	d001      	beq.n	8004e08 <CIPSNTPTIME+0x28>
    return true;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004e08:	2300      	movs	r3, #0
  }
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b002      	add	sp, #8
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	080240b4 	.word	0x080240b4

08004e18 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <CIPSNTPINTV+0x34>)
 8004e20:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7fb f9a1 	bl	800016c <strlen>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	0011      	movs	r1, r2
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7fe fde0 	bl	80039f8 <ESP_Send>
 8004e38:	1e03      	subs	r3, r0, #0
 8004e3a:	d001      	beq.n	8004e40 <CIPSNTPINTV+0x28>
    return true;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004e40:	2300      	movs	r3, #0
  }
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b002      	add	sp, #8
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	080240c8 	.word	0x080240c8

08004e50 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004e50:	b5b0      	push	{r4, r5, r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	0002      	movs	r2, r0
 8004e58:	1dfb      	adds	r3, r7, #7
 8004e5a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004e5c:	4b6c      	ldr	r3, [pc, #432]	@ (8005010 <DMA_ProcessBuffer+0x1c0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	200e      	movs	r0, #14
 8004e66:	183b      	adds	r3, r7, r0
 8004e68:	2180      	movs	r1, #128	@ 0x80
 8004e6a:	0049      	lsls	r1, r1, #1
 8004e6c:	1a8a      	subs	r2, r1, r2
 8004e6e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004e70:	230d      	movs	r3, #13
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	2203      	movs	r2, #3
 8004e76:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004e78:	183b      	adds	r3, r7, r0
 8004e7a:	881a      	ldrh	r2, [r3, #0]
 8004e7c:	2380      	movs	r3, #128	@ 0x80
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d903      	bls.n	8004e8c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004e84:	183b      	adds	r3, r7, r0
 8004e86:	2280      	movs	r2, #128	@ 0x80
 8004e88:	0052      	lsls	r2, r2, #1
 8004e8a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004e8c:	4b61      	ldr	r3, [pc, #388]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	001a      	movs	r2, r3
 8004e94:	230e      	movs	r3, #14
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d131      	bne.n	8004f02 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8005018 <DMA_ProcessBuffer+0x1c8>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b14      	cmp	r3, #20
 8004ea4:	d91b      	bls.n	8004ede <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8005018 <DMA_ProcessBuffer+0x1c8>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004eac:	4b5b      	ldr	r3, [pc, #364]	@ (800501c <DMA_ProcessBuffer+0x1cc>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d107      	bne.n	8004ec4 <DMA_ProcessBuffer+0x74>
 8004eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8005020 <DMA_ProcessBuffer+0x1d0>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004ebc:	230d      	movs	r3, #13
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004ec4:	4b55      	ldr	r3, [pc, #340]	@ (800501c <DMA_ProcessBuffer+0x1cc>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d103      	bne.n	8004ed4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004ecc:	4b55      	ldr	r3, [pc, #340]	@ (8005024 <DMA_ProcessBuffer+0x1d4>)
 8004ece:	220b      	movs	r2, #11
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e016      	b.n	8004f02 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004ed4:	230d      	movs	r3, #13
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	2206      	movs	r2, #6
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e011      	b.n	8004f02 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004ede:	4b4e      	ldr	r3, [pc, #312]	@ (8005018 <DMA_ProcessBuffer+0x1c8>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8005018 <DMA_ProcessBuffer+0x1c8>)
 8004ee8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004eea:	f00a f9ad 	bl	800f248 <HAL_GetTick>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	33f5      	adds	r3, #245	@ 0xf5
 8004ef2:	33ff      	adds	r3, #255	@ 0xff
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8005028 <DMA_ProcessBuffer+0x1d8>)
 8004ef8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004efa:	230d      	movs	r3, #13
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	2204      	movs	r2, #4
 8004f00:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004f02:	4b44      	ldr	r3, [pc, #272]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	001a      	movs	r2, r3
 8004f0a:	210e      	movs	r1, #14
 8004f0c:	187b      	adds	r3, r7, r1
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d100      	bne.n	8004f16 <DMA_ProcessBuffer+0xc6>
 8004f14:	e075      	b.n	8005002 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004f16:	4b40      	ldr	r3, [pc, #256]	@ (8005018 <DMA_ProcessBuffer+0x1c8>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004f1c:	4b43      	ldr	r3, [pc, #268]	@ (800502c <DMA_ProcessBuffer+0x1dc>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4b3c      	ldr	r3, [pc, #240]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d109      	bne.n	8004f40 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	4b3e      	ldr	r3, [pc, #248]	@ (800502c <DMA_ProcessBuffer+0x1dc>)
 8004f34:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004f36:	230d      	movs	r3, #13
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	220a      	movs	r2, #10
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e060      	b.n	8005002 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004f40:	4b3a      	ldr	r3, [pc, #232]	@ (800502c <DMA_ProcessBuffer+0x1dc>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	001a      	movs	r2, r3
 8004f48:	210e      	movs	r1, #14
 8004f4a:	187b      	adds	r3, r7, r1
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004f52:	187b      	adds	r3, r7, r1
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	4b34      	ldr	r3, [pc, #208]	@ (800502c <DMA_ProcessBuffer+0x1dc>)
 8004f5a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004f5c:	230d      	movs	r3, #13
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	220a      	movs	r2, #10
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	e04d      	b.n	8005002 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004f66:	4b2b      	ldr	r3, [pc, #172]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	210e      	movs	r1, #14
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d917      	bls.n	8004fa8 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004f78:	4b26      	ldr	r3, [pc, #152]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	001a      	movs	r2, r3
 8004f80:	4b2b      	ldr	r3, [pc, #172]	@ (8005030 <DMA_ProcessBuffer+0x1e0>)
 8004f82:	18d0      	adds	r0, r2, r3
 8004f84:	4b23      	ldr	r3, [pc, #140]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	187b      	adds	r3, r7, r1
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	b299      	uxth	r1, r3
 8004f94:	230d      	movs	r3, #13
 8004f96:	18fc      	adds	r4, r7, r3
 8004f98:	1dfb      	adds	r3, r7, #7
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	f7ff fa6f 	bl	8004480 <ParseBuffer>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	7023      	strb	r3, [r4, #0]
 8004fa6:	e026      	b.n	8004ff6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	001a      	movs	r2, r3
 8004fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8005030 <DMA_ProcessBuffer+0x1e0>)
 8004fb2:	18d0      	adds	r0, r2, r3
 8004fb4:	4b17      	ldr	r3, [pc, #92]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	001a      	movs	r2, r3
 8004fbc:	2380      	movs	r3, #128	@ 0x80
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	b299      	uxth	r1, r3
 8004fc4:	250d      	movs	r5, #13
 8004fc6:	197c      	adds	r4, r7, r5
 8004fc8:	1dfb      	adds	r3, r7, #7
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	001a      	movs	r2, r3
 8004fce:	f7ff fa57 	bl	8004480 <ParseBuffer>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004fd6:	210e      	movs	r1, #14
 8004fd8:	187b      	adds	r3, r7, r1
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004fe0:	197c      	adds	r4, r7, r5
 8004fe2:	1dfb      	adds	r3, r7, #7
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	187b      	adds	r3, r7, r1
 8004fe8:	8819      	ldrh	r1, [r3, #0]
 8004fea:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <DMA_ProcessBuffer+0x1e0>)
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7ff fa47 	bl	8004480 <ParseBuffer>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004ff6:	230e      	movs	r3, #14
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <DMA_ProcessBuffer+0x1c4>)
 8005000:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8005002:	230d      	movs	r3, #13
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b004      	add	sp, #16
 800500e:	bdb0      	pop	{r4, r5, r7, pc}
 8005010:	20001f24 	.word	0x20001f24
 8005014:	20000761 	.word	0x20000761
 8005018:	2000061c 	.word	0x2000061c
 800501c:	2000061e 	.word	0x2000061e
 8005020:	20000000 	.word	0x20000000
 8005024:	20000030 	.word	0x20000030
 8005028:	20000618 	.word	0x20000618
 800502c:	20000762 	.word	0x20000762
 8005030:	2000044c 	.word	0x2000044c

08005034 <clearDMABuffer>:

void clearDMABuffer(){
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	005a      	lsls	r2, r3, #1
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <clearDMABuffer+0x18>)
 800503e:	2100      	movs	r1, #0
 8005040:	0018      	movs	r0, r3
 8005042:	f01b fb59 	bl	80206f8 <memset>
}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	2000044c 	.word	0x2000044c

08005050 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	0002      	movs	r2, r0
 8005058:	1dfb      	adds	r3, r7, #7
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	1dbb      	adds	r3, r7, #6
 800505e:	1c0a      	adds	r2, r1, #0
 8005060:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005062:	210f      	movs	r1, #15
 8005064:	187b      	adds	r3, r7, r1
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800506a:	1dbb      	adds	r3, r7, #6
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d105      	bne.n	800507e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005072:	187b      	adds	r3, r7, r1
 8005074:	1dfa      	adds	r2, r7, #7
 8005076:	7812      	ldrb	r2, [r2, #0]
 8005078:	4251      	negs	r1, r2
 800507a:	414a      	adcs	r2, r1
 800507c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800507e:	1dbb      	adds	r3, r7, #6
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8005086:	230f      	movs	r3, #15
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	1dfa      	adds	r2, r7, #7
 800508c:	7812      	ldrb	r2, [r2, #0]
 800508e:	3a02      	subs	r2, #2
 8005090:	4251      	negs	r1, r2
 8005092:	414a      	adcs	r2, r1
 8005094:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8005096:	1dbb      	adds	r3, r7, #6
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d107      	bne.n	80050ae <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800509e:	230f      	movs	r3, #15
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	1dfa      	adds	r2, r7, #7
 80050a4:	7812      	ldrb	r2, [r2, #0]
 80050a6:	3a05      	subs	r2, #5
 80050a8:	4251      	negs	r1, r2
 80050aa:	414a      	adcs	r2, r1
 80050ac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 80050ae:	1dbb      	adds	r3, r7, #6
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	d107      	bne.n	80050c6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80050b6:	230f      	movs	r3, #15
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	1dfa      	adds	r2, r7, #7
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	3a0b      	subs	r2, #11
 80050c0:	4251      	negs	r1, r2
 80050c2:	414a      	adcs	r2, r1
 80050c4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80050c6:	230f      	movs	r3, #15
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	781b      	ldrb	r3, [r3, #0]
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b004      	add	sp, #16
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <AT_Send>:

bool AT_Send(AT_Commands state){
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	0002      	movs	r2, r0
 80050dc:	1dfb      	adds	r3, r7, #7
 80050de:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80050e0:	230f      	movs	r3, #15
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
  switch (state){
 80050e8:	1dfb      	adds	r3, r7, #7
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b14      	cmp	r3, #20
 80050ee:	d900      	bls.n	80050f2 <AT_Send+0x1e>
 80050f0:	e19e      	b.n	8005430 <AT_Send+0x35c>
 80050f2:	009a      	lsls	r2, r3, #2
 80050f4:	4bd2      	ldr	r3, [pc, #840]	@ (8005440 <AT_Send+0x36c>)
 80050f6:	18d3      	adds	r3, r2, r3
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80050fc:	4bd1      	ldr	r3, [pc, #836]	@ (8005444 <AT_Send+0x370>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	0018      	movs	r0, r3
 8005102:	f009 fc07 	bl	800e914 <TimestampIsReached>
 8005106:	1e03      	subs	r3, r0, #0
 8005108:	d100      	bne.n	800510c <AT_Send+0x38>
 800510a:	e190      	b.n	800542e <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 800510c:	4ace      	ldr	r2, [pc, #824]	@ (8005448 <AT_Send+0x374>)
 800510e:	4bcf      	ldr	r3, [pc, #828]	@ (800544c <AT_Send+0x378>)
 8005110:	0019      	movs	r1, r3
 8005112:	2003      	movs	r0, #3
 8005114:	f009 fc54 	bl	800e9c0 <CreateLine>
    ATCommandSend = PollAwake();
 8005118:	230f      	movs	r3, #15
 800511a:	18fc      	adds	r4, r7, r3
 800511c:	f7ff fba0 	bl	8004860 <PollAwake>
 8005120:	0003      	movs	r3, r0
 8005122:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005124:	f00a f890 	bl	800f248 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	3332      	adds	r3, #50	@ 0x32
 800512c:	001a      	movs	r2, r3
 800512e:	4bc5      	ldr	r3, [pc, #788]	@ (8005444 <AT_Send+0x370>)
 8005130:	601a      	str	r2, [r3, #0]
  }
  break;
 8005132:	e17c      	b.n	800542e <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005134:	4ac6      	ldr	r2, [pc, #792]	@ (8005450 <AT_Send+0x37c>)
 8005136:	4bc5      	ldr	r3, [pc, #788]	@ (800544c <AT_Send+0x378>)
 8005138:	0019      	movs	r1, r3
 800513a:	2003      	movs	r0, #3
 800513c:	f009 fc40 	bl	800e9c0 <CreateLine>
    ATCommandSend = RFPower();
 8005140:	230f      	movs	r3, #15
 8005142:	18fc      	adds	r4, r7, r3
 8005144:	f7ff fba8 	bl	8004898 <RFPower>
 8005148:	0003      	movs	r3, r0
 800514a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800514c:	f00a f87c 	bl	800f248 <HAL_GetTick>
 8005150:	0003      	movs	r3, r0
 8005152:	330a      	adds	r3, #10
 8005154:	001a      	movs	r2, r3
 8005156:	4bbb      	ldr	r3, [pc, #748]	@ (8005444 <AT_Send+0x370>)
 8005158:	601a      	str	r2, [r3, #0]
    break;
 800515a:	e169      	b.n	8005430 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800515c:	4abd      	ldr	r2, [pc, #756]	@ (8005454 <AT_Send+0x380>)
 800515e:	4bbb      	ldr	r3, [pc, #748]	@ (800544c <AT_Send+0x378>)
 8005160:	0019      	movs	r1, r3
 8005162:	2003      	movs	r0, #3
 8005164:	f009 fc2c 	bl	800e9c0 <CreateLine>
    ATCommandSend = CheckRFPower();
 8005168:	230f      	movs	r3, #15
 800516a:	18fc      	adds	r4, r7, r3
 800516c:	f7ff fbb0 	bl	80048d0 <CheckRFPower>
 8005170:	0003      	movs	r3, r0
 8005172:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005174:	f00a f868 	bl	800f248 <HAL_GetTick>
 8005178:	0003      	movs	r3, r0
 800517a:	330a      	adds	r3, #10
 800517c:	001a      	movs	r2, r3
 800517e:	4bb1      	ldr	r3, [pc, #708]	@ (8005444 <AT_Send+0x370>)
 8005180:	601a      	str	r2, [r3, #0]
    break;
 8005182:	e155      	b.n	8005430 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005184:	4ab4      	ldr	r2, [pc, #720]	@ (8005458 <AT_Send+0x384>)
 8005186:	4bb1      	ldr	r3, [pc, #708]	@ (800544c <AT_Send+0x378>)
 8005188:	0019      	movs	r1, r3
 800518a:	2003      	movs	r0, #3
 800518c:	f009 fc18 	bl	800e9c0 <CreateLine>
    ATCommandSend = ATRestore();
 8005190:	230f      	movs	r3, #15
 8005192:	18fc      	adds	r4, r7, r3
 8005194:	f7ff fbb8 	bl	8004908 <ATRestore>
 8005198:	0003      	movs	r3, r0
 800519a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800519c:	f00a f854 	bl	800f248 <HAL_GetTick>
 80051a0:	0003      	movs	r3, r0
 80051a2:	3332      	adds	r3, #50	@ 0x32
 80051a4:	001a      	movs	r2, r3
 80051a6:	4ba7      	ldr	r3, [pc, #668]	@ (8005444 <AT_Send+0x370>)
 80051a8:	601a      	str	r2, [r3, #0]
    break;
 80051aa:	e141      	b.n	8005430 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80051ac:	4aab      	ldr	r2, [pc, #684]	@ (800545c <AT_Send+0x388>)
 80051ae:	4ba7      	ldr	r3, [pc, #668]	@ (800544c <AT_Send+0x378>)
 80051b0:	0019      	movs	r1, r3
 80051b2:	2003      	movs	r0, #3
 80051b4:	f009 fc04 	bl	800e9c0 <CreateLine>
    ATCommandSend = CWINIT();
 80051b8:	230f      	movs	r3, #15
 80051ba:	18fc      	adds	r4, r7, r3
 80051bc:	f7ff fbc0 	bl	8004940 <CWINIT>
 80051c0:	0003      	movs	r3, r0
 80051c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051c4:	f00a f840 	bl	800f248 <HAL_GetTick>
 80051c8:	0003      	movs	r3, r0
 80051ca:	33f5      	adds	r3, #245	@ 0xf5
 80051cc:	33ff      	adds	r3, #255	@ 0xff
 80051ce:	001a      	movs	r2, r3
 80051d0:	4b9c      	ldr	r3, [pc, #624]	@ (8005444 <AT_Send+0x370>)
 80051d2:	601a      	str	r2, [r3, #0]
    break;
 80051d4:	e12c      	b.n	8005430 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 80051d6:	4aa2      	ldr	r2, [pc, #648]	@ (8005460 <AT_Send+0x38c>)
 80051d8:	4b9c      	ldr	r3, [pc, #624]	@ (800544c <AT_Send+0x378>)
 80051da:	0019      	movs	r1, r3
 80051dc:	2003      	movs	r0, #3
 80051de:	f009 fbef 	bl	800e9c0 <CreateLine>
    ATCommandSend = CWSTATE();
 80051e2:	230f      	movs	r3, #15
 80051e4:	18fc      	adds	r4, r7, r3
 80051e6:	f7ff fcb9 	bl	8004b5c <CWSTATE>
 80051ea:	0003      	movs	r3, r0
 80051ec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051ee:	f00a f82b 	bl	800f248 <HAL_GetTick>
 80051f2:	0003      	movs	r3, r0
 80051f4:	33f5      	adds	r3, #245	@ 0xf5
 80051f6:	33ff      	adds	r3, #255	@ 0xff
 80051f8:	001a      	movs	r2, r3
 80051fa:	4b92      	ldr	r3, [pc, #584]	@ (8005444 <AT_Send+0x370>)
 80051fc:	601a      	str	r2, [r3, #0]
    break;
 80051fe:	e117      	b.n	8005430 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8005200:	4a98      	ldr	r2, [pc, #608]	@ (8005464 <AT_Send+0x390>)
 8005202:	4b92      	ldr	r3, [pc, #584]	@ (800544c <AT_Send+0x378>)
 8005204:	0019      	movs	r1, r3
 8005206:	2003      	movs	r0, #3
 8005208:	f009 fbda 	bl	800e9c0 <CreateLine>
    ATCommandSend = CWMODE1();
 800520c:	230f      	movs	r3, #15
 800520e:	18fc      	adds	r4, r7, r3
 8005210:	f7ff fbb2 	bl	8004978 <CWMODE1>
 8005214:	0003      	movs	r3, r0
 8005216:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005218:	f00a f816 	bl	800f248 <HAL_GetTick>
 800521c:	0003      	movs	r3, r0
 800521e:	330a      	adds	r3, #10
 8005220:	001a      	movs	r2, r3
 8005222:	4b88      	ldr	r3, [pc, #544]	@ (8005444 <AT_Send+0x370>)
 8005224:	601a      	str	r2, [r3, #0]
    break;
 8005226:	e103      	b.n	8005430 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8005228:	4a8e      	ldr	r2, [pc, #568]	@ (8005464 <AT_Send+0x390>)
 800522a:	4b88      	ldr	r3, [pc, #544]	@ (800544c <AT_Send+0x378>)
 800522c:	0019      	movs	r1, r3
 800522e:	2003      	movs	r0, #3
 8005230:	f009 fbc6 	bl	800e9c0 <CreateLine>
    ATCommandSend = CWMODE2();
 8005234:	230f      	movs	r3, #15
 8005236:	18fc      	adds	r4, r7, r3
 8005238:	f7ff fbba 	bl	80049b0 <CWMODE2>
 800523c:	0003      	movs	r3, r0
 800523e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005240:	f00a f802 	bl	800f248 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	330a      	adds	r3, #10
 8005248:	001a      	movs	r2, r3
 800524a:	4b7e      	ldr	r3, [pc, #504]	@ (8005444 <AT_Send+0x370>)
 800524c:	601a      	str	r2, [r3, #0]
    break;
 800524e:	e0ef      	b.n	8005430 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005250:	4a85      	ldr	r2, [pc, #532]	@ (8005468 <AT_Send+0x394>)
 8005252:	4b7e      	ldr	r3, [pc, #504]	@ (800544c <AT_Send+0x378>)
 8005254:	0019      	movs	r1, r3
 8005256:	2003      	movs	r0, #3
 8005258:	f009 fbb2 	bl	800e9c0 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800525c:	230f      	movs	r3, #15
 800525e:	18fc      	adds	r4, r7, r3
 8005260:	f7ff fbc2 	bl	80049e8 <CWAUTOCONN>
 8005264:	0003      	movs	r3, r0
 8005266:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005268:	f009 ffee 	bl	800f248 <HAL_GetTick>
 800526c:	0003      	movs	r3, r0
 800526e:	330a      	adds	r3, #10
 8005270:	001a      	movs	r2, r3
 8005272:	4b74      	ldr	r3, [pc, #464]	@ (8005444 <AT_Send+0x370>)
 8005274:	601a      	str	r2, [r3, #0]
    break;
 8005276:	e0db      	b.n	8005430 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005278:	4a7c      	ldr	r2, [pc, #496]	@ (800546c <AT_Send+0x398>)
 800527a:	4b74      	ldr	r3, [pc, #464]	@ (800544c <AT_Send+0x378>)
 800527c:	0019      	movs	r1, r3
 800527e:	2003      	movs	r0, #3
 8005280:	f009 fb9e 	bl	800e9c0 <CreateLine>
    ATCommandSend = CWJAP();
 8005284:	230f      	movs	r3, #15
 8005286:	18fc      	adds	r4, r7, r3
 8005288:	f7ff fbca 	bl	8004a20 <CWJAP>
 800528c:	0003      	movs	r3, r0
 800528e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005290:	f009 ffda 	bl	800f248 <HAL_GetTick>
 8005294:	0003      	movs	r3, r0
 8005296:	3332      	adds	r3, #50	@ 0x32
 8005298:	001a      	movs	r2, r3
 800529a:	4b6a      	ldr	r3, [pc, #424]	@ (8005444 <AT_Send+0x370>)
 800529c:	601a      	str	r2, [r3, #0]
    break;
 800529e:	e0c7      	b.n	8005430 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80052a0:	4a73      	ldr	r2, [pc, #460]	@ (8005470 <AT_Send+0x39c>)
 80052a2:	4b6a      	ldr	r3, [pc, #424]	@ (800544c <AT_Send+0x378>)
 80052a4:	0019      	movs	r1, r3
 80052a6:	2003      	movs	r0, #3
 80052a8:	f009 fb8a 	bl	800e9c0 <CreateLine>
    ATCommandSend = CWMODE3();
 80052ac:	230f      	movs	r3, #15
 80052ae:	18fc      	adds	r4, r7, r3
 80052b0:	f7ff fc38 	bl	8004b24 <CWMODE3>
 80052b4:	0003      	movs	r3, r0
 80052b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052b8:	f009 ffc6 	bl	800f248 <HAL_GetTick>
 80052bc:	0003      	movs	r3, r0
 80052be:	330a      	adds	r3, #10
 80052c0:	001a      	movs	r2, r3
 80052c2:	4b60      	ldr	r3, [pc, #384]	@ (8005444 <AT_Send+0x370>)
 80052c4:	601a      	str	r2, [r3, #0]
    break;
 80052c6:	e0b3      	b.n	8005430 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80052c8:	4a6a      	ldr	r2, [pc, #424]	@ (8005474 <AT_Send+0x3a0>)
 80052ca:	4b60      	ldr	r3, [pc, #384]	@ (800544c <AT_Send+0x378>)
 80052cc:	0019      	movs	r1, r3
 80052ce:	2003      	movs	r0, #3
 80052d0:	f009 fb76 	bl	800e9c0 <CreateLine>
    ATCommandSend = CWSAP();
 80052d4:	230f      	movs	r3, #15
 80052d6:	18fc      	adds	r4, r7, r3
 80052d8:	f7ff fc5c 	bl	8004b94 <CWSAP>
 80052dc:	0003      	movs	r3, r0
 80052de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052e0:	f009 ffb2 	bl	800f248 <HAL_GetTick>
 80052e4:	0003      	movs	r3, r0
 80052e6:	330a      	adds	r3, #10
 80052e8:	001a      	movs	r2, r3
 80052ea:	4b56      	ldr	r3, [pc, #344]	@ (8005444 <AT_Send+0x370>)
 80052ec:	601a      	str	r2, [r3, #0]
    break;
 80052ee:	e09f      	b.n	8005430 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80052f0:	4a61      	ldr	r2, [pc, #388]	@ (8005478 <AT_Send+0x3a4>)
 80052f2:	4b56      	ldr	r3, [pc, #344]	@ (800544c <AT_Send+0x378>)
 80052f4:	0019      	movs	r1, r3
 80052f6:	2003      	movs	r0, #3
 80052f8:	f009 fb62 	bl	800e9c0 <CreateLine>
    ATCommandSend = CIPMUX();
 80052fc:	230f      	movs	r3, #15
 80052fe:	18fc      	adds	r4, r7, r3
 8005300:	f7ff fc64 	bl	8004bcc <CIPMUX>
 8005304:	0003      	movs	r3, r0
 8005306:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005308:	f009 ff9e 	bl	800f248 <HAL_GetTick>
 800530c:	0003      	movs	r3, r0
 800530e:	330a      	adds	r3, #10
 8005310:	001a      	movs	r2, r3
 8005312:	4b4c      	ldr	r3, [pc, #304]	@ (8005444 <AT_Send+0x370>)
 8005314:	601a      	str	r2, [r3, #0]
    break;
 8005316:	e08b      	b.n	8005430 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8005318:	4a58      	ldr	r2, [pc, #352]	@ (800547c <AT_Send+0x3a8>)
 800531a:	4b4c      	ldr	r3, [pc, #304]	@ (800544c <AT_Send+0x378>)
 800531c:	0019      	movs	r1, r3
 800531e:	2003      	movs	r0, #3
 8005320:	f009 fb4e 	bl	800e9c0 <CreateLine>
    ATCommandSend = WEBSERVER();
 8005324:	230f      	movs	r3, #15
 8005326:	18fc      	adds	r4, r7, r3
 8005328:	f7ff fc6c 	bl	8004c04 <WEBSERVER>
 800532c:	0003      	movs	r3, r0
 800532e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005330:	f009 ff8a 	bl	800f248 <HAL_GetTick>
 8005334:	0003      	movs	r3, r0
 8005336:	330a      	adds	r3, #10
 8005338:	001a      	movs	r2, r3
 800533a:	4b42      	ldr	r3, [pc, #264]	@ (8005444 <AT_Send+0x370>)
 800533c:	601a      	str	r2, [r3, #0]
    break;
 800533e:	e077      	b.n	8005430 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005340:	230f      	movs	r3, #15
 8005342:	18fc      	adds	r4, r7, r3
 8005344:	f7ff fc7a 	bl	8004c3c <HTTPCPOST>
 8005348:	0003      	movs	r3, r0
 800534a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800534c:	f009 ff7c 	bl	800f248 <HAL_GetTick>
 8005350:	0003      	movs	r3, r0
 8005352:	33f5      	adds	r3, #245	@ 0xf5
 8005354:	33ff      	adds	r3, #255	@ 0xff
 8005356:	001a      	movs	r2, r3
 8005358:	4b3a      	ldr	r3, [pc, #232]	@ (8005444 <AT_Send+0x370>)
 800535a:	601a      	str	r2, [r3, #0]
    break;
 800535c:	e068      	b.n	8005430 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800535e:	4a48      	ldr	r2, [pc, #288]	@ (8005480 <AT_Send+0x3ac>)
 8005360:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <AT_Send+0x378>)
 8005362:	0019      	movs	r1, r3
 8005364:	2003      	movs	r0, #3
 8005366:	f009 fb2b 	bl	800e9c0 <CreateLine>
    ATCommandSend = SENDDATA();
 800536a:	230f      	movs	r3, #15
 800536c:	18fc      	adds	r4, r7, r3
 800536e:	f7ff fccf 	bl	8004d10 <SENDDATA>
 8005372:	0003      	movs	r3, r0
 8005374:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005376:	f009 ff67 	bl	800f248 <HAL_GetTick>
 800537a:	0003      	movs	r3, r0
 800537c:	33f5      	adds	r3, #245	@ 0xf5
 800537e:	33ff      	adds	r3, #255	@ 0xff
 8005380:	001a      	movs	r2, r3
 8005382:	4b30      	ldr	r3, [pc, #192]	@ (8005444 <AT_Send+0x370>)
 8005384:	601a      	str	r2, [r3, #0]
    break;
 8005386:	e053      	b.n	8005430 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005388:	4a3e      	ldr	r2, [pc, #248]	@ (8005484 <AT_Send+0x3b0>)
 800538a:	4b30      	ldr	r3, [pc, #192]	@ (800544c <AT_Send+0x378>)
 800538c:	0019      	movs	r1, r3
 800538e:	2003      	movs	r0, #3
 8005390:	f009 fb16 	bl	800e9c0 <CreateLine>
    ATCommandSend = SLEEP();
 8005394:	230f      	movs	r3, #15
 8005396:	18fc      	adds	r4, r7, r3
 8005398:	f7ff fce6 	bl	8004d68 <SLEEP>
 800539c:	0003      	movs	r3, r0
 800539e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053a0:	f009 ff52 	bl	800f248 <HAL_GetTick>
 80053a4:	0003      	movs	r3, r0
 80053a6:	330a      	adds	r3, #10
 80053a8:	001a      	movs	r2, r3
 80053aa:	4b26      	ldr	r3, [pc, #152]	@ (8005444 <AT_Send+0x370>)
 80053ac:	601a      	str	r2, [r3, #0]
    break;
 80053ae:	e03f      	b.n	8005430 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80053b0:	4a35      	ldr	r2, [pc, #212]	@ (8005488 <AT_Send+0x3b4>)
 80053b2:	4b26      	ldr	r3, [pc, #152]	@ (800544c <AT_Send+0x378>)
 80053b4:	0019      	movs	r1, r3
 80053b6:	2003      	movs	r0, #3
 80053b8:	f009 fb02 	bl	800e9c0 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80053bc:	230f      	movs	r3, #15
 80053be:	18fc      	adds	r4, r7, r3
 80053c0:	f7ff fcee 	bl	8004da0 <CIPSNTPCFG>
 80053c4:	0003      	movs	r3, r0
 80053c6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053c8:	f009 ff3e 	bl	800f248 <HAL_GetTick>
 80053cc:	0003      	movs	r3, r0
 80053ce:	330a      	adds	r3, #10
 80053d0:	001a      	movs	r2, r3
 80053d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005444 <AT_Send+0x370>)
 80053d4:	601a      	str	r2, [r3, #0]
    break;
 80053d6:	e02b      	b.n	8005430 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80053d8:	4a2c      	ldr	r2, [pc, #176]	@ (800548c <AT_Send+0x3b8>)
 80053da:	4b1c      	ldr	r3, [pc, #112]	@ (800544c <AT_Send+0x378>)
 80053dc:	0019      	movs	r1, r3
 80053de:	2003      	movs	r0, #3
 80053e0:	f009 faee 	bl	800e9c0 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80053e4:	230f      	movs	r3, #15
 80053e6:	18fc      	adds	r4, r7, r3
 80053e8:	f7ff fcfa 	bl	8004de0 <CIPSNTPTIME>
 80053ec:	0003      	movs	r3, r0
 80053ee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80053f0:	f009 ff2a 	bl	800f248 <HAL_GetTick>
 80053f4:	0003      	movs	r3, r0
 80053f6:	33f5      	adds	r3, #245	@ 0xf5
 80053f8:	33ff      	adds	r3, #255	@ 0xff
 80053fa:	001a      	movs	r2, r3
 80053fc:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <AT_Send+0x370>)
 80053fe:	601a      	str	r2, [r3, #0]
    break;
 8005400:	e016      	b.n	8005430 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8005402:	4a23      	ldr	r2, [pc, #140]	@ (8005490 <AT_Send+0x3bc>)
 8005404:	4b11      	ldr	r3, [pc, #68]	@ (800544c <AT_Send+0x378>)
 8005406:	0019      	movs	r1, r3
 8005408:	2003      	movs	r0, #3
 800540a:	f009 fad9 	bl	800e9c0 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800540e:	230f      	movs	r3, #15
 8005410:	18fc      	adds	r4, r7, r3
 8005412:	f7ff fd01 	bl	8004e18 <CIPSNTPINTV>
 8005416:	0003      	movs	r3, r0
 8005418:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800541a:	f009 ff15 	bl	800f248 <HAL_GetTick>
 800541e:	0003      	movs	r3, r0
 8005420:	330a      	adds	r3, #10
 8005422:	001a      	movs	r2, r3
 8005424:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <AT_Send+0x370>)
 8005426:	601a      	str	r2, [r3, #0]
    break;
 8005428:	e002      	b.n	8005430 <AT_Send+0x35c>

  case AT_END:
    break;
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	e000      	b.n	8005430 <AT_Send+0x35c>
  break;
 800542e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005430:	230f      	movs	r3, #15
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	781b      	ldrb	r3, [r3, #0]
}
 8005436:	0018      	movs	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	b005      	add	sp, #20
 800543c:	bd90      	pop	{r4, r7, pc}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	08025b3c 	.word	0x08025b3c
 8005444:	20000618 	.word	0x20000618
 8005448:	080240e0 	.word	0x080240e0
 800544c:	08023670 	.word	0x08023670
 8005450:	080240ec 	.word	0x080240ec
 8005454:	08024100 	.word	0x08024100
 8005458:	08024114 	.word	0x08024114
 800545c:	08024124 	.word	0x08024124
 8005460:	08024138 	.word	0x08024138
 8005464:	08024150 	.word	0x08024150
 8005468:	08024168 	.word	0x08024168
 800546c:	08024180 	.word	0x08024180
 8005470:	08024194 	.word	0x08024194
 8005474:	080241b0 	.word	0x080241b0
 8005478:	080241cc 	.word	0x080241cc
 800547c:	080241e8 	.word	0x080241e8
 8005480:	08024204 	.word	0x08024204
 8005484:	08024214 	.word	0x08024214
 8005488:	08024238 	.word	0x08024238
 800548c:	0802424c 	.word	0x0802424c
 8005490:	08024264 	.word	0x08024264

08005494 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800549a:	1dfb      	adds	r3, r7, #7
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80054a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005698 <ESP_WakeTest+0x204>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d900      	bls.n	80054aa <ESP_WakeTest+0x16>
 80054a8:	e0d9      	b.n	800565e <ESP_WakeTest+0x1ca>
 80054aa:	009a      	lsls	r2, r3, #2
 80054ac:	4b7b      	ldr	r3, [pc, #492]	@ (800569c <ESP_WakeTest+0x208>)
 80054ae:	18d3      	adds	r3, r2, r3
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80054b4:	4b7a      	ldr	r3, [pc, #488]	@ (80056a0 <ESP_WakeTest+0x20c>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2201      	movs	r2, #1
 80054ba:	4053      	eors	r3, r2
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d036      	beq.n	8005530 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80054c2:	2380      	movs	r3, #128	@ 0x80
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	4877      	ldr	r0, [pc, #476]	@ (80056a4 <ESP_WakeTest+0x210>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	0019      	movs	r1, r3
 80054cc:	f00b f94d 	bl	801076a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80054d0:	2032      	movs	r0, #50	@ 0x32
 80054d2:	f009 fec3 	bl	800f25c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80054d6:	2380      	movs	r3, #128	@ 0x80
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4872      	ldr	r0, [pc, #456]	@ (80056a4 <ESP_WakeTest+0x210>)
 80054dc:	2201      	movs	r2, #1
 80054de:	0019      	movs	r1, r3
 80054e0:	f00b f943 	bl	801076a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054e4:	200a      	movs	r0, #10
 80054e6:	f009 feb9 	bl	800f25c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80054ea:	4b6f      	ldr	r3, [pc, #444]	@ (80056a8 <ESP_WakeTest+0x214>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	2101      	movs	r1, #1
 80054f0:	0018      	movs	r0, r3
 80054f2:	f00b f93a 	bl	801076a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054f6:	200a      	movs	r0, #10
 80054f8:	f009 feb0 	bl	800f25c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80054fc:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <ESP_WakeTest+0x214>)
 80054fe:	2201      	movs	r2, #1
 8005500:	2102      	movs	r1, #2
 8005502:	0018      	movs	r0, r3
 8005504:	f00b f931 	bl	801076a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005508:	200a      	movs	r0, #10
 800550a:	f009 fea7 	bl	800f25c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800550e:	4b66      	ldr	r3, [pc, #408]	@ (80056a8 <ESP_WakeTest+0x214>)
 8005510:	2201      	movs	r2, #1
 8005512:	2101      	movs	r1, #1
 8005514:	0018      	movs	r0, r3
 8005516:	f00b f928 	bl	801076a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800551a:	f009 fe95 	bl	800f248 <HAL_GetTick>
 800551e:	0003      	movs	r3, r0
 8005520:	22af      	movs	r2, #175	@ 0xaf
 8005522:	0092      	lsls	r2, r2, #2
 8005524:	189a      	adds	r2, r3, r2
 8005526:	4b61      	ldr	r3, [pc, #388]	@ (80056ac <ESP_WakeTest+0x218>)
 8005528:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800552a:	4b5d      	ldr	r3, [pc, #372]	@ (80056a0 <ESP_WakeTest+0x20c>)
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005530:	2380      	movs	r3, #128	@ 0x80
 8005532:	005a      	lsls	r2, r3, #1
 8005534:	4b5e      	ldr	r3, [pc, #376]	@ (80056b0 <ESP_WakeTest+0x21c>)
 8005536:	0011      	movs	r1, r2
 8005538:	0018      	movs	r0, r3
 800553a:	f7fe fa91 	bl	8003a60 <ESP_Receive>
 800553e:	1e03      	subs	r3, r0, #0
 8005540:	d100      	bne.n	8005544 <ESP_WakeTest+0xb0>
 8005542:	e09f      	b.n	8005684 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005544:	4b54      	ldr	r3, [pc, #336]	@ (8005698 <ESP_WakeTest+0x204>)
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
      }
      break;
 800554a:	e09b      	b.n	8005684 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800554c:	4b57      	ldr	r3, [pc, #348]	@ (80056ac <ESP_WakeTest+0x218>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	0018      	movs	r0, r3
 8005552:	f009 f9df 	bl	800e914 <TimestampIsReached>
 8005556:	1e03      	subs	r3, r0, #0
 8005558:	d100      	bne.n	800555c <ESP_WakeTest+0xc8>
 800555a:	e095      	b.n	8005688 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800555c:	4b55      	ldr	r3, [pc, #340]	@ (80056b4 <ESP_WakeTest+0x220>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	1dfc      	adds	r4, r7, #7
 8005562:	0018      	movs	r0, r3
 8005564:	f7ff fdb6 	bl	80050d4 <AT_Send>
 8005568:	0003      	movs	r3, r0
 800556a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800556c:	1dfb      	adds	r3, r7, #7
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d100      	bne.n	8005576 <ESP_WakeTest+0xe2>
 8005574:	e088      	b.n	8005688 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005576:	4b48      	ldr	r3, [pc, #288]	@ (8005698 <ESP_WakeTest+0x204>)
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800557c:	e084      	b.n	8005688 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800557e:	4b4b      	ldr	r3, [pc, #300]	@ (80056ac <ESP_WakeTest+0x218>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	0018      	movs	r0, r3
 8005584:	f009 f9c6 	bl	800e914 <TimestampIsReached>
 8005588:	1e03      	subs	r3, r0, #0
 800558a:	d100      	bne.n	800558e <ESP_WakeTest+0xfa>
 800558c:	e07e      	b.n	800568c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800558e:	4b4a      	ldr	r3, [pc, #296]	@ (80056b8 <ESP_WakeTest+0x224>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	0018      	movs	r0, r3
 8005594:	f7ff fc5c 	bl	8004e50 <DMA_ProcessBuffer>
 8005598:	0003      	movs	r3, r0
 800559a:	001a      	movs	r2, r3
 800559c:	4b47      	ldr	r3, [pc, #284]	@ (80056bc <ESP_WakeTest+0x228>)
 800559e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80055a0:	4b46      	ldr	r3, [pc, #280]	@ (80056bc <ESP_WakeTest+0x228>)
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	4b44      	ldr	r3, [pc, #272]	@ (80056b8 <ESP_WakeTest+0x224>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	1dbc      	adds	r4, r7, #6
 80055aa:	0019      	movs	r1, r3
 80055ac:	0010      	movs	r0, r2
 80055ae:	f7ff fd4f 	bl	8005050 <ATCompare>
 80055b2:	0003      	movs	r3, r0
 80055b4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80055b6:	4b41      	ldr	r3, [pc, #260]	@ (80056bc <ESP_WakeTest+0x228>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d102      	bne.n	80055c4 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80055be:	4b36      	ldr	r3, [pc, #216]	@ (8005698 <ESP_WakeTest+0x204>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80055c4:	4b3d      	ldr	r3, [pc, #244]	@ (80056bc <ESP_WakeTest+0x228>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b07      	cmp	r3, #7
 80055ca:	d104      	bne.n	80055d6 <ESP_WakeTest+0x142>
          StartProg();
 80055cc:	f7fe ff26 	bl	800441c <StartProg>
          TestState = ESP_TEST_BOOT;
 80055d0:	4b31      	ldr	r3, [pc, #196]	@ (8005698 <ESP_WakeTest+0x204>)
 80055d2:	2205      	movs	r2, #5
 80055d4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80055d6:	4b39      	ldr	r3, [pc, #228]	@ (80056bc <ESP_WakeTest+0x228>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d109      	bne.n	80055f2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80055de:	f009 fe33 	bl	800f248 <HAL_GetTick>
 80055e2:	0003      	movs	r3, r0
 80055e4:	3332      	adds	r3, #50	@ 0x32
 80055e6:	001a      	movs	r2, r3
 80055e8:	4b30      	ldr	r3, [pc, #192]	@ (80056ac <ESP_WakeTest+0x218>)
 80055ea:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80055ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005698 <ESP_WakeTest+0x204>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80055f2:	1dbb      	adds	r3, r7, #6
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d048      	beq.n	800568c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80055fa:	4b27      	ldr	r3, [pc, #156]	@ (8005698 <ESP_WakeTest+0x204>)
 80055fc:	2203      	movs	r2, #3
 80055fe:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005600:	e044      	b.n	800568c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005602:	4b2f      	ldr	r3, [pc, #188]	@ (80056c0 <ESP_WakeTest+0x22c>)
 8005604:	22fa      	movs	r2, #250	@ 0xfa
 8005606:	0112      	lsls	r2, r2, #4
 8005608:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 800560a:	f007 ff35 	bl	800d478 <Calculate_LED_ON>
 800560e:	0003      	movs	r3, r0
 8005610:	001a      	movs	r2, r3
 8005612:	4b2b      	ldr	r3, [pc, #172]	@ (80056c0 <ESP_WakeTest+0x22c>)
 8005614:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005616:	4b2a      	ldr	r3, [pc, #168]	@ (80056c0 <ESP_WakeTest+0x22c>)
 8005618:	22fa      	movs	r2, #250	@ 0xfa
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800561e:	4b1e      	ldr	r3, [pc, #120]	@ (8005698 <ESP_WakeTest+0x204>)
 8005620:	2204      	movs	r2, #4
 8005622:	701a      	strb	r2, [r3, #0]

      break;
 8005624:	e033      	b.n	800568e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005626:	4b27      	ldr	r3, [pc, #156]	@ (80056c4 <ESP_WakeTest+0x230>)
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800562c:	4b1c      	ldr	r3, [pc, #112]	@ (80056a0 <ESP_WakeTest+0x20c>)
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005632:	4b1d      	ldr	r3, [pc, #116]	@ (80056a8 <ESP_WakeTest+0x214>)
 8005634:	2200      	movs	r2, #0
 8005636:	2101      	movs	r1, #1
 8005638:	0018      	movs	r0, r3
 800563a:	f00b f896 	bl	801076a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800563e:	2380      	movs	r3, #128	@ 0x80
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	4818      	ldr	r0, [pc, #96]	@ (80056a4 <ESP_WakeTest+0x210>)
 8005644:	2200      	movs	r2, #0
 8005646:	0019      	movs	r1, r3
 8005648:	f00b f88f 	bl	801076a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800564c:	4b16      	ldr	r3, [pc, #88]	@ (80056a8 <ESP_WakeTest+0x214>)
 800564e:	2200      	movs	r2, #0
 8005650:	2102      	movs	r1, #2
 8005652:	0018      	movs	r0, r3
 8005654:	f00b f889 	bl	801076a <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005658:	f003 f8d2 	bl	8008800 <SetESPMeasurementDone>
      break;
 800565c:	e017      	b.n	800568e <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800565e:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <ESP_WakeTest+0x204>)
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]
      break;
 8005664:	e013      	b.n	800568e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005666:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <ESP_WakeTest+0x22c>)
 8005668:	22fa      	movs	r2, #250	@ 0xfa
 800566a:	0112      	lsls	r2, r2, #4
 800566c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800566e:	4b14      	ldr	r3, [pc, #80]	@ (80056c0 <ESP_WakeTest+0x22c>)
 8005670:	22fa      	movs	r2, #250	@ 0xfa
 8005672:	0112      	lsls	r2, r2, #4
 8005674:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005676:	f007 feff 	bl	800d478 <Calculate_LED_ON>
 800567a:	0003      	movs	r3, r0
 800567c:	001a      	movs	r2, r3
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <ESP_WakeTest+0x22c>)
 8005680:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005682:	e004      	b.n	800568e <ESP_WakeTest+0x1fa>
      break;
 8005684:	46c0      	nop			@ (mov r8, r8)
 8005686:	e002      	b.n	800568e <ESP_WakeTest+0x1fa>
      break;
 8005688:	46c0      	nop			@ (mov r8, r8)
 800568a:	e000      	b.n	800568e <ESP_WakeTest+0x1fa>
      break;
 800568c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800568e:	46c0      	nop			@ (mov r8, r8)
 8005690:	46bd      	mov	sp, r7
 8005692:	b003      	add	sp, #12
 8005694:	bd90      	pop	{r4, r7, pc}
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	20000620 	.word	0x20000620
 800569c:	08025b90 	.word	0x08025b90
 80056a0:	2000054c 	.word	0x2000054c
 80056a4:	50000800 	.word	0x50000800
 80056a8:	50001c00 	.word	0x50001c00
 80056ac:	20000618 	.word	0x20000618
 80056b0:	2000044c 	.word	0x2000044c
 80056b4:	2000061e 	.word	0x2000061e
 80056b8:	2000061d 	.word	0x2000061d
 80056bc:	20000032 	.word	0x20000032
 80056c0:	40000400 	.word	0x40000400
 80056c4:	20000000 	.word	0x20000000

080056c8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80056ce:	1dfb      	adds	r3, r7, #7
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80056d4:	4be2      	ldr	r3, [pc, #904]	@ (8005a60 <ESP_Upkeep+0x398>)
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	4be2      	ldr	r3, [pc, #904]	@ (8005a64 <ESP_Upkeep+0x39c>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d024      	beq.n	800572a <ESP_Upkeep+0x62>
 80056e0:	f009 f9e8 	bl	800eab4 <GetVerboseLevel>
 80056e4:	0003      	movs	r3, r0
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d11f      	bne.n	800572a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80056ea:	4bdd      	ldr	r3, [pc, #884]	@ (8005a60 <ESP_Upkeep+0x398>)
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	4bdd      	ldr	r3, [pc, #884]	@ (8005a64 <ESP_Upkeep+0x39c>)
 80056f0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80056f2:	4bdc      	ldr	r3, [pc, #880]	@ (8005a64 <ESP_Upkeep+0x39c>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d103      	bne.n	8005702 <ESP_Upkeep+0x3a>
 80056fa:	4bdb      	ldr	r3, [pc, #876]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b0e      	cmp	r3, #14
 8005700:	d013      	beq.n	800572a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005702:	4bd8      	ldr	r3, [pc, #864]	@ (8005a64 <ESP_Upkeep+0x39c>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	001d      	movs	r5, r3
 8005708:	4bd7      	ldr	r3, [pc, #860]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	0018      	movs	r0, r3
 800570e:	4bd7      	ldr	r3, [pc, #860]	@ (8005a6c <ESP_Upkeep+0x3a4>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	001c      	movs	r4, r3
 8005714:	4bd6      	ldr	r3, [pc, #856]	@ (8005a70 <ESP_Upkeep+0x3a8>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	4ad6      	ldr	r2, [pc, #856]	@ (8005a74 <ESP_Upkeep+0x3ac>)
 800571a:	49d7      	ldr	r1, [pc, #860]	@ (8005a78 <ESP_Upkeep+0x3b0>)
 800571c:	9302      	str	r3, [sp, #8]
 800571e:	9401      	str	r4, [sp, #4]
 8005720:	9000      	str	r0, [sp, #0]
 8005722:	002b      	movs	r3, r5
 8005724:	2003      	movs	r0, #3
 8005726:	f009 f94b 	bl	800e9c0 <CreateLine>
    }
  }
  switch (EspState) {
 800572a:	4bcd      	ldr	r3, [pc, #820]	@ (8005a60 <ESP_Upkeep+0x398>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b0f      	cmp	r3, #15
 8005730:	d901      	bls.n	8005736 <ESP_Upkeep+0x6e>
 8005732:	f000 fc32 	bl	8005f9a <ESP_Upkeep+0x8d2>
 8005736:	009a      	lsls	r2, r3, #2
 8005738:	4bd0      	ldr	r3, [pc, #832]	@ (8005a7c <ESP_Upkeep+0x3b4>)
 800573a:	18d3      	adds	r3, r2, r3
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005740:	4bc7      	ldr	r3, [pc, #796]	@ (8005a60 <ESP_Upkeep+0x398>)
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
      break;
 8005746:	f000 fc41 	bl	8005fcc <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800574a:	f003 fab9 	bl	8008cc0 <DisableConnectedDevices>
      SetESPIndicator();
 800574e:	f008 f825 	bl	800d79c <SetESPIndicator>
      if(!EspTurnedOn){
 8005752:	4bcb      	ldr	r3, [pc, #812]	@ (8005a80 <ESP_Upkeep+0x3b8>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2201      	movs	r2, #1
 8005758:	4053      	eors	r3, r2
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d036      	beq.n	80057ce <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005760:	2380      	movs	r3, #128	@ 0x80
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	48c7      	ldr	r0, [pc, #796]	@ (8005a84 <ESP_Upkeep+0x3bc>)
 8005766:	2200      	movs	r2, #0
 8005768:	0019      	movs	r1, r3
 800576a:	f00a fffe 	bl	801076a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800576e:	2001      	movs	r0, #1
 8005770:	f009 fd74 	bl	800f25c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	48c2      	ldr	r0, [pc, #776]	@ (8005a84 <ESP_Upkeep+0x3bc>)
 800577a:	2201      	movs	r2, #1
 800577c:	0019      	movs	r1, r3
 800577e:	f00a fff4 	bl	801076a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005782:	2001      	movs	r0, #1
 8005784:	f009 fd6a 	bl	800f25c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005788:	4bbf      	ldr	r3, [pc, #764]	@ (8005a88 <ESP_Upkeep+0x3c0>)
 800578a:	2200      	movs	r2, #0
 800578c:	2101      	movs	r1, #1
 800578e:	0018      	movs	r0, r3
 8005790:	f00a ffeb 	bl	801076a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005794:	2001      	movs	r0, #1
 8005796:	f009 fd61 	bl	800f25c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800579a:	4bbb      	ldr	r3, [pc, #748]	@ (8005a88 <ESP_Upkeep+0x3c0>)
 800579c:	2201      	movs	r2, #1
 800579e:	2102      	movs	r1, #2
 80057a0:	0018      	movs	r0, r3
 80057a2:	f00a ffe2 	bl	801076a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80057a6:	2001      	movs	r0, #1
 80057a8:	f009 fd58 	bl	800f25c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80057ac:	4bb6      	ldr	r3, [pc, #728]	@ (8005a88 <ESP_Upkeep+0x3c0>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	2101      	movs	r1, #1
 80057b2:	0018      	movs	r0, r3
 80057b4:	f00a ffd9 	bl	801076a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80057b8:	f009 fd46 	bl	800f248 <HAL_GetTick>
 80057bc:	0003      	movs	r3, r0
 80057be:	22af      	movs	r2, #175	@ 0xaf
 80057c0:	0092      	lsls	r2, r2, #2
 80057c2:	189a      	adds	r2, r3, r2
 80057c4:	4bb1      	ldr	r3, [pc, #708]	@ (8005a8c <ESP_Upkeep+0x3c4>)
 80057c6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80057c8:	4bad      	ldr	r3, [pc, #692]	@ (8005a80 <ESP_Upkeep+0x3b8>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80057ce:	2380      	movs	r3, #128	@ 0x80
 80057d0:	005a      	lsls	r2, r3, #1
 80057d2:	4baf      	ldr	r3, [pc, #700]	@ (8005a90 <ESP_Upkeep+0x3c8>)
 80057d4:	0011      	movs	r1, r2
 80057d6:	0018      	movs	r0, r3
 80057d8:	f7fe f942 	bl	8003a60 <ESP_Receive>
 80057dc:	1e03      	subs	r3, r0, #0
 80057de:	d101      	bne.n	80057e4 <ESP_Upkeep+0x11c>
 80057e0:	f000 fbe7 	bl	8005fb2 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80057e4:	4b9e      	ldr	r3, [pc, #632]	@ (8005a60 <ESP_Upkeep+0x398>)
 80057e6:	220f      	movs	r2, #15
 80057e8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80057ea:	f009 fd2d 	bl	800f248 <HAL_GetTick>
 80057ee:	0003      	movs	r3, r0
 80057f0:	22fa      	movs	r2, #250	@ 0xfa
 80057f2:	00d2      	lsls	r2, r2, #3
 80057f4:	189a      	adds	r2, r3, r2
 80057f6:	4ba7      	ldr	r3, [pc, #668]	@ (8005a94 <ESP_Upkeep+0x3cc>)
 80057f8:	601a      	str	r2, [r3, #0]
      }
      break;
 80057fa:	f000 fbda 	bl	8005fb2 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80057fe:	2001      	movs	r0, #1
 8005800:	f7ff fb26 	bl	8004e50 <DMA_ProcessBuffer>
 8005804:	0003      	movs	r3, r0
 8005806:	001a      	movs	r2, r3
 8005808:	4ba3      	ldr	r3, [pc, #652]	@ (8005a98 <ESP_Upkeep+0x3d0>)
 800580a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800580c:	4ba2      	ldr	r3, [pc, #648]	@ (8005a98 <ESP_Upkeep+0x3d0>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	1dbc      	adds	r4, r7, #6
 8005812:	2101      	movs	r1, #1
 8005814:	0018      	movs	r0, r3
 8005816:	f7ff fc1b 	bl	8005050 <ATCompare>
 800581a:	0003      	movs	r3, r0
 800581c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800581e:	1dbb      	adds	r3, r7, #6
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <ESP_Upkeep+0x170>
 8005826:	4b9b      	ldr	r3, [pc, #620]	@ (8005a94 <ESP_Upkeep+0x3cc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	0018      	movs	r0, r3
 800582c:	f009 f872 	bl	800e914 <TimestampIsReached>
 8005830:	1e03      	subs	r3, r0, #0
 8005832:	d101      	bne.n	8005838 <ESP_Upkeep+0x170>
 8005834:	f000 fbbf 	bl	8005fb6 <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 8005838:	4b89      	ldr	r3, [pc, #548]	@ (8005a60 <ESP_Upkeep+0x398>)
 800583a:	220b      	movs	r2, #11
 800583c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800583e:	f000 fbba 	bl	8005fb6 <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005842:	4b96      	ldr	r3, [pc, #600]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 8005844:	2209      	movs	r2, #9
 8005846:	2114      	movs	r1, #20
 8005848:	0018      	movs	r0, r3
 800584a:	f01a ff55 	bl	80206f8 <memset>
      if(!InitIsDone || WifiReset){
 800584e:	4b94      	ldr	r3, [pc, #592]	@ (8005aa0 <ESP_Upkeep+0x3d8>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	4053      	eors	r3, r2
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <ESP_Upkeep+0x19c>
 800585c:	4b91      	ldr	r3, [pc, #580]	@ (8005aa4 <ESP_Upkeep+0x3dc>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01a      	beq.n	800589a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005864:	4b8d      	ldr	r3, [pc, #564]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 8005866:	4a90      	ldr	r2, [pc, #576]	@ (8005aa8 <ESP_Upkeep+0x3e0>)
 8005868:	6811      	ldr	r1, [r2, #0]
 800586a:	6019      	str	r1, [r3, #0]
 800586c:	8891      	ldrh	r1, [r2, #4]
 800586e:	8099      	strh	r1, [r3, #4]
 8005870:	7992      	ldrb	r2, [r2, #6]
 8005872:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005874:	4b7a      	ldr	r3, [pc, #488]	@ (8005a60 <ESP_Upkeep+0x398>)
 8005876:	2204      	movs	r2, #4
 8005878:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800587a:	4b8c      	ldr	r3, [pc, #560]	@ (8005aac <ESP_Upkeep+0x3e4>)
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005880:	4b7a      	ldr	r3, [pc, #488]	@ (8005a6c <ESP_Upkeep+0x3a4>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005886:	4b89      	ldr	r3, [pc, #548]	@ (8005aac <ESP_Upkeep+0x3e4>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	001a      	movs	r2, r3
 800588c:	4b83      	ldr	r3, [pc, #524]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 800588e:	5c9a      	ldrb	r2, [r3, r2]
 8005890:	4b75      	ldr	r3, [pc, #468]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 8005892:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005894:	4b76      	ldr	r3, [pc, #472]	@ (8005a70 <ESP_Upkeep+0x3a8>)
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800589a:	4b81      	ldr	r3, [pc, #516]	@ (8005aa0 <ESP_Upkeep+0x3d8>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01f      	beq.n	80058e2 <ESP_Upkeep+0x21a>
 80058a2:	4b83      	ldr	r3, [pc, #524]	@ (8005ab0 <ESP_Upkeep+0x3e8>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2201      	movs	r2, #1
 80058a8:	4053      	eors	r3, r2
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d018      	beq.n	80058e2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80058b0:	4b7a      	ldr	r3, [pc, #488]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 80058b2:	4a80      	ldr	r2, [pc, #512]	@ (8005ab4 <ESP_Upkeep+0x3ec>)
 80058b4:	6811      	ldr	r1, [r2, #0]
 80058b6:	6019      	str	r1, [r3, #0]
 80058b8:	8892      	ldrh	r2, [r2, #4]
 80058ba:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80058bc:	4b68      	ldr	r3, [pc, #416]	@ (8005a60 <ESP_Upkeep+0x398>)
 80058be:	2204      	movs	r2, #4
 80058c0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80058c2:	4b7a      	ldr	r3, [pc, #488]	@ (8005aac <ESP_Upkeep+0x3e4>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80058c8:	4b68      	ldr	r3, [pc, #416]	@ (8005a6c <ESP_Upkeep+0x3a4>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80058ce:	4b77      	ldr	r3, [pc, #476]	@ (8005aac <ESP_Upkeep+0x3e4>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	001a      	movs	r2, r3
 80058d4:	4b71      	ldr	r3, [pc, #452]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 80058d6:	5c9a      	ldrb	r2, [r3, r2]
 80058d8:	4b63      	ldr	r3, [pc, #396]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 80058da:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058dc:	4b64      	ldr	r3, [pc, #400]	@ (8005a70 <ESP_Upkeep+0x3a8>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80058e2:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa0 <ESP_Upkeep+0x3d8>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d021      	beq.n	800592e <ESP_Upkeep+0x266>
 80058ea:	4b71      	ldr	r3, [pc, #452]	@ (8005ab0 <ESP_Upkeep+0x3e8>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01d      	beq.n	800592e <ESP_Upkeep+0x266>
 80058f2:	4b71      	ldr	r3, [pc, #452]	@ (8005ab8 <ESP_Upkeep+0x3f0>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2201      	movs	r2, #1
 80058f8:	4053      	eors	r3, r2
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d016      	beq.n	800592e <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005900:	4b6e      	ldr	r3, [pc, #440]	@ (8005abc <ESP_Upkeep+0x3f4>)
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	4b65      	ldr	r3, [pc, #404]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 8005906:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005908:	4b55      	ldr	r3, [pc, #340]	@ (8005a60 <ESP_Upkeep+0x398>)
 800590a:	2204      	movs	r2, #4
 800590c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800590e:	4b67      	ldr	r3, [pc, #412]	@ (8005aac <ESP_Upkeep+0x3e4>)
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005914:	4b55      	ldr	r3, [pc, #340]	@ (8005a6c <ESP_Upkeep+0x3a4>)
 8005916:	2204      	movs	r2, #4
 8005918:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800591a:	4b64      	ldr	r3, [pc, #400]	@ (8005aac <ESP_Upkeep+0x3e4>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	001a      	movs	r2, r3
 8005920:	4b5e      	ldr	r3, [pc, #376]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 8005922:	5c9a      	ldrb	r2, [r3, r2]
 8005924:	4b50      	ldr	r3, [pc, #320]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 8005926:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005928:	4b51      	ldr	r3, [pc, #324]	@ (8005a70 <ESP_Upkeep+0x3a8>)
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800592e:	4b5c      	ldr	r3, [pc, #368]	@ (8005aa0 <ESP_Upkeep+0x3d8>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02c      	beq.n	8005990 <ESP_Upkeep+0x2c8>
 8005936:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab0 <ESP_Upkeep+0x3e8>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d028      	beq.n	8005990 <ESP_Upkeep+0x2c8>
 800593e:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab8 <ESP_Upkeep+0x3f0>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d024      	beq.n	8005990 <ESP_Upkeep+0x2c8>
 8005946:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac0 <ESP_Upkeep+0x3f8>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2201      	movs	r2, #1
 800594c:	4053      	eors	r3, r2
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01d      	beq.n	8005990 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005954:	4b51      	ldr	r3, [pc, #324]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 8005956:	4a5b      	ldr	r2, [pc, #364]	@ (8005ac4 <ESP_Upkeep+0x3fc>)
 8005958:	8811      	ldrh	r1, [r2, #0]
 800595a:	8019      	strh	r1, [r3, #0]
 800595c:	7892      	ldrb	r2, [r2, #2]
 800595e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005960:	4b3f      	ldr	r3, [pc, #252]	@ (8005a60 <ESP_Upkeep+0x398>)
 8005962:	2204      	movs	r2, #4
 8005964:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005966:	4b51      	ldr	r3, [pc, #324]	@ (8005aac <ESP_Upkeep+0x3e4>)
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800596c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a6c <ESP_Upkeep+0x3a4>)
 800596e:	2202      	movs	r2, #2
 8005970:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005972:	f009 fc69 	bl	800f248 <HAL_GetTick>
 8005976:	0002      	movs	r2, r0
 8005978:	4b53      	ldr	r3, [pc, #332]	@ (8005ac8 <ESP_Upkeep+0x400>)
 800597a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800597c:	4b4b      	ldr	r3, [pc, #300]	@ (8005aac <ESP_Upkeep+0x3e4>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	001a      	movs	r2, r3
 8005982:	4b46      	ldr	r3, [pc, #280]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 8005984:	5c9a      	ldrb	r2, [r3, r2]
 8005986:	4b38      	ldr	r3, [pc, #224]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 8005988:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800598a:	4b39      	ldr	r3, [pc, #228]	@ (8005a70 <ESP_Upkeep+0x3a8>)
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005990:	4b43      	ldr	r3, [pc, #268]	@ (8005aa0 <ESP_Upkeep+0x3d8>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d027      	beq.n	80059e8 <ESP_Upkeep+0x320>
 8005998:	4b45      	ldr	r3, [pc, #276]	@ (8005ab0 <ESP_Upkeep+0x3e8>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d023      	beq.n	80059e8 <ESP_Upkeep+0x320>
 80059a0:	4b45      	ldr	r3, [pc, #276]	@ (8005ab8 <ESP_Upkeep+0x3f0>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01f      	beq.n	80059e8 <ESP_Upkeep+0x320>
 80059a8:	4b45      	ldr	r3, [pc, #276]	@ (8005ac0 <ESP_Upkeep+0x3f8>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80059b0:	4b46      	ldr	r3, [pc, #280]	@ (8005acc <ESP_Upkeep+0x404>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b39      	ldr	r3, [pc, #228]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 80059b6:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059b8:	4b29      	ldr	r3, [pc, #164]	@ (8005a60 <ESP_Upkeep+0x398>)
 80059ba:	2204      	movs	r2, #4
 80059bc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059be:	4b3b      	ldr	r3, [pc, #236]	@ (8005aac <ESP_Upkeep+0x3e4>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80059c4:	4b29      	ldr	r3, [pc, #164]	@ (8005a6c <ESP_Upkeep+0x3a4>)
 80059c6:	2205      	movs	r2, #5
 80059c8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80059ca:	f009 fc3d 	bl	800f248 <HAL_GetTick>
 80059ce:	0002      	movs	r2, r0
 80059d0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac8 <ESP_Upkeep+0x400>)
 80059d2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059d4:	4b35      	ldr	r3, [pc, #212]	@ (8005aac <ESP_Upkeep+0x3e4>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	001a      	movs	r2, r3
 80059da:	4b30      	ldr	r3, [pc, #192]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 80059dc:	5c9a      	ldrb	r2, [r3, r2]
 80059de:	4b22      	ldr	r3, [pc, #136]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 80059e0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059e2:	4b23      	ldr	r3, [pc, #140]	@ (8005a70 <ESP_Upkeep+0x3a8>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80059e8:	4b39      	ldr	r3, [pc, #228]	@ (8005ad0 <ESP_Upkeep+0x408>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d100      	bne.n	80059f2 <ESP_Upkeep+0x32a>
 80059f0:	e2e3      	b.n	8005fba <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80059f2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 80059f4:	4a37      	ldr	r2, [pc, #220]	@ (8005ad4 <ESP_Upkeep+0x40c>)
 80059f6:	6811      	ldr	r1, [r2, #0]
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	7912      	ldrb	r2, [r2, #4]
 80059fc:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80059fe:	4a36      	ldr	r2, [pc, #216]	@ (8005ad8 <ESP_Upkeep+0x410>)
 8005a00:	4b1d      	ldr	r3, [pc, #116]	@ (8005a78 <ESP_Upkeep+0x3b0>)
 8005a02:	0019      	movs	r1, r3
 8005a04:	2003      	movs	r0, #3
 8005a06:	f008 ffdb 	bl	800e9c0 <CreateLine>
        DisableConnectedDevices();
 8005a0a:	f003 f959 	bl	8008cc0 <DisableConnectedDevices>
        usblog = false;
 8005a0e:	4b33      	ldr	r3, [pc, #204]	@ (8005adc <ESP_Upkeep+0x414>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005a14:	4b12      	ldr	r3, [pc, #72]	@ (8005a60 <ESP_Upkeep+0x398>)
 8005a16:	2204      	movs	r2, #4
 8005a18:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a1a:	4b24      	ldr	r3, [pc, #144]	@ (8005aac <ESP_Upkeep+0x3e4>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005a20:	4b12      	ldr	r3, [pc, #72]	@ (8005a6c <ESP_Upkeep+0x3a4>)
 8005a22:	2203      	movs	r2, #3
 8005a24:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005a26:	4b21      	ldr	r3, [pc, #132]	@ (8005aac <ESP_Upkeep+0x3e4>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	001a      	movs	r2, r3
 8005a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a9c <ESP_Upkeep+0x3d4>)
 8005a2e:	5c9a      	ldrb	r2, [r3, r2]
 8005a30:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 8005a32:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a34:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <ESP_Upkeep+0x3a8>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005a3a:	e2be      	b.n	8005fba <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <ESP_Upkeep+0x3a0>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	1dfc      	adds	r4, r7, #7
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7ff fb46 	bl	80050d4 <AT_Send>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005a4c:	1dfb      	adds	r3, r7, #7
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d100      	bne.n	8005a56 <ESP_Upkeep+0x38e>
 8005a54:	e2b3      	b.n	8005fbe <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005a56:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <ESP_Upkeep+0x398>)
 8005a58:	2203      	movs	r2, #3
 8005a5a:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005a5c:	e2af      	b.n	8005fbe <ESP_Upkeep+0x8f6>
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	20000030 	.word	0x20000030
 8005a64:	20000002 	.word	0x20000002
 8005a68:	2000061e 	.word	0x2000061e
 8005a6c:	2000061f 	.word	0x2000061f
 8005a70:	2000061d 	.word	0x2000061d
 8005a74:	08024284 	.word	0x08024284
 8005a78:	08023670 	.word	0x08023670
 8005a7c:	08025ba8 	.word	0x08025ba8
 8005a80:	2000054c 	.word	0x2000054c
 8005a84:	50000800 	.word	0x50000800
 8005a88:	50001c00 	.word	0x50001c00
 8005a8c:	20000618 	.word	0x20000618
 8005a90:	2000044c 	.word	0x2000044c
 8005a94:	20000764 	.word	0x20000764
 8005a98:	20000033 	.word	0x20000033
 8005a9c:	20000608 	.word	0x20000608
 8005aa0:	2000054d 	.word	0x2000054d
 8005aa4:	2000054e 	.word	0x2000054e
 8005aa8:	20000004 	.word	0x20000004
 8005aac:	20000612 	.word	0x20000612
 8005ab0:	20000550 	.word	0x20000550
 8005ab4:	20000014 	.word	0x20000014
 8005ab8:	20000551 	.word	0x20000551
 8005abc:	20000010 	.word	0x20000010
 8005ac0:	20000001 	.word	0x20000001
 8005ac4:	2000000c 	.word	0x2000000c
 8005ac8:	20000564 	.word	0x20000564
 8005acc:	20000024 	.word	0x20000024
 8005ad0:	2000054f 	.word	0x2000054f
 8005ad4:	2000001c 	.word	0x2000001c
 8005ad8:	080242b0 	.word	0x080242b0
 8005adc:	200001f7 	.word	0x200001f7

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ae0:	4bc9      	ldr	r3, [pc, #804]	@ (8005e08 <ESP_Upkeep+0x740>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <ESP_Upkeep+0x430>
 8005ae8:	4bc8      	ldr	r3, [pc, #800]	@ (8005e0c <ESP_Upkeep+0x744>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d003      	beq.n	8005af8 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005af0:	4bc7      	ldr	r3, [pc, #796]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005af2:	220b      	movs	r2, #11
 8005af4:	701a      	strb	r2, [r3, #0]
        break;
 8005af6:	e269      	b.n	8005fcc <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005af8:	4bc6      	ldr	r3, [pc, #792]	@ (8005e14 <ESP_Upkeep+0x74c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f008 ff09 	bl	800e914 <TimestampIsReached>
 8005b02:	1e03      	subs	r3, r0, #0
 8005b04:	d100      	bne.n	8005b08 <ESP_Upkeep+0x440>
 8005b06:	e25c      	b.n	8005fc2 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005b08:	4bc3      	ldr	r3, [pc, #780]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7ff f99f 	bl	8004e50 <DMA_ProcessBuffer>
 8005b12:	0003      	movs	r3, r0
 8005b14:	001a      	movs	r2, r3
 8005b16:	4bc1      	ldr	r3, [pc, #772]	@ (8005e1c <ESP_Upkeep+0x754>)
 8005b18:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005b1a:	4bc0      	ldr	r3, [pc, #768]	@ (8005e1c <ESP_Upkeep+0x754>)
 8005b1c:	781a      	ldrb	r2, [r3, #0]
 8005b1e:	4bbe      	ldr	r3, [pc, #760]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	1d7c      	adds	r4, r7, #5
 8005b24:	0019      	movs	r1, r3
 8005b26:	0010      	movs	r0, r2
 8005b28:	f7ff fa92 	bl	8005050 <ATCompare>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005b30:	4bba      	ldr	r3, [pc, #744]	@ (8005e1c <ESP_Upkeep+0x754>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d138      	bne.n	8005baa <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005b38:	4bb9      	ldr	r3, [pc, #740]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b0f      	cmp	r3, #15
 8005b3e:	d108      	bne.n	8005b52 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005b40:	4bb7      	ldr	r3, [pc, #732]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005b42:	220e      	movs	r2, #14
 8005b44:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005b46:	4bb4      	ldr	r3, [pc, #720]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005b48:	2202      	movs	r2, #2
 8005b4a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005b4c:	4bb5      	ldr	r3, [pc, #724]	@ (8005e24 <ESP_Upkeep+0x75c>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005b52:	4baf      	ldr	r3, [pc, #700]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005b54:	2204      	movs	r2, #4
 8005b56:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005b58:	4bb3      	ldr	r3, [pc, #716]	@ (8005e28 <ESP_Upkeep+0x760>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	4bb1      	ldr	r3, [pc, #708]	@ (8005e28 <ESP_Upkeep+0x760>)
 8005b62:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005b64:	4bb0      	ldr	r3, [pc, #704]	@ (8005e28 <ESP_Upkeep+0x760>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d91e      	bls.n	8005baa <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005b6c:	f009 fb6c 	bl	800f248 <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	4aae      	ldr	r2, [pc, #696]	@ (8005e2c <ESP_Upkeep+0x764>)
 8005b74:	189a      	adds	r2, r3, r2
 8005b76:	4ba7      	ldr	r3, [pc, #668]	@ (8005e14 <ESP_Upkeep+0x74c>)
 8005b78:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005b7a:	4bad      	ldr	r3, [pc, #692]	@ (8005e30 <ESP_Upkeep+0x768>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005b80:	f7ff fa58 	bl	8005034 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b84:	f009 fb60 	bl	800f248 <HAL_GetTick>
 8005b88:	0002      	movs	r2, r0
 8005b8a:	4baa      	ldr	r3, [pc, #680]	@ (8005e34 <ESP_Upkeep+0x76c>)
 8005b8c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005b8e:	4ba9      	ldr	r3, [pc, #676]	@ (8005e34 <ESP_Upkeep+0x76c>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4ba9      	ldr	r3, [pc, #676]	@ (8005e38 <ESP_Upkeep+0x770>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	4aa8      	ldr	r2, [pc, #672]	@ (8005e3c <ESP_Upkeep+0x774>)
 8005b9a:	49a9      	ldr	r1, [pc, #676]	@ (8005e40 <ESP_Upkeep+0x778>)
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f008 ff0f 	bl	800e9c0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005ba4:	220d      	movs	r2, #13
 8005ba6:	701a      	strb	r2, [r3, #0]
            break;
 8005ba8:	e210      	b.n	8005fcc <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005baa:	4b9c      	ldr	r3, [pc, #624]	@ (8005e1c <ESP_Upkeep+0x754>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d106      	bne.n	8005bc0 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005bb2:	f009 fb49 	bl	800f248 <HAL_GetTick>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	330a      	adds	r3, #10
 8005bba:	001a      	movs	r2, r3
 8005bbc:	4b95      	ldr	r3, [pc, #596]	@ (8005e14 <ESP_Upkeep+0x74c>)
 8005bbe:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005bc0:	4b96      	ldr	r3, [pc, #600]	@ (8005e1c <ESP_Upkeep+0x754>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b0a      	cmp	r3, #10
 8005bc6:	d106      	bne.n	8005bd6 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005bc8:	f009 fb3e 	bl	800f248 <HAL_GetTick>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	330a      	adds	r3, #10
 8005bd0:	001a      	movs	r2, r3
 8005bd2:	4b90      	ldr	r3, [pc, #576]	@ (8005e14 <ESP_Upkeep+0x74c>)
 8005bd4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005bd6:	4b91      	ldr	r3, [pc, #580]	@ (8005e1c <ESP_Upkeep+0x754>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b06      	cmp	r3, #6
 8005bdc:	d14b      	bne.n	8005c76 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005bde:	4b99      	ldr	r3, [pc, #612]	@ (8005e44 <ESP_Upkeep+0x77c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4b97      	ldr	r3, [pc, #604]	@ (8005e44 <ESP_Upkeep+0x77c>)
 8005be8:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005bea:	4a97      	ldr	r2, [pc, #604]	@ (8005e48 <ESP_Upkeep+0x780>)
 8005bec:	4b94      	ldr	r3, [pc, #592]	@ (8005e40 <ESP_Upkeep+0x778>)
 8005bee:	0019      	movs	r1, r3
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f008 fee5 	bl	800e9c0 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005bf6:	4b93      	ldr	r3, [pc, #588]	@ (8005e44 <ESP_Upkeep+0x77c>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d924      	bls.n	8005c48 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005bfe:	f009 fb23 	bl	800f248 <HAL_GetTick>
 8005c02:	0003      	movs	r3, r0
 8005c04:	4a91      	ldr	r2, [pc, #580]	@ (8005e4c <ESP_Upkeep+0x784>)
 8005c06:	189a      	adds	r2, r3, r2
 8005c08:	4b82      	ldr	r3, [pc, #520]	@ (8005e14 <ESP_Upkeep+0x74c>)
 8005c0a:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005c0c:	4b88      	ldr	r3, [pc, #544]	@ (8005e30 <ESP_Upkeep+0x768>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005c12:	f7ff fa0f 	bl	8005034 <clearDMABuffer>
            stop = HAL_GetTick();
 8005c16:	f009 fb17 	bl	800f248 <HAL_GetTick>
 8005c1a:	0002      	movs	r2, r0
 8005c1c:	4b85      	ldr	r3, [pc, #532]	@ (8005e34 <ESP_Upkeep+0x76c>)
 8005c1e:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005c20:	4b84      	ldr	r3, [pc, #528]	@ (8005e34 <ESP_Upkeep+0x76c>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b84      	ldr	r3, [pc, #528]	@ (8005e38 <ESP_Upkeep+0x770>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	4a89      	ldr	r2, [pc, #548]	@ (8005e50 <ESP_Upkeep+0x788>)
 8005c2c:	4984      	ldr	r1, [pc, #528]	@ (8005e40 <ESP_Upkeep+0x778>)
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f008 fec6 	bl	800e9c0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005c34:	4b76      	ldr	r3, [pc, #472]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005c36:	220d      	movs	r2, #13
 8005c38:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005c3a:	4b79      	ldr	r3, [pc, #484]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005c3c:	2214      	movs	r2, #20
 8005c3e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005c40:	4b75      	ldr	r3, [pc, #468]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
            break;
 8005c46:	e1c1      	b.n	8005fcc <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005c48:	4b75      	ldr	r3, [pc, #468]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b0f      	cmp	r3, #15
 8005c4e:	d003      	beq.n	8005c58 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005c50:	4b6f      	ldr	r3, [pc, #444]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005c52:	2204      	movs	r2, #4
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e00e      	b.n	8005c76 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005c58:	4b71      	ldr	r3, [pc, #452]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005c5a:	220e      	movs	r2, #14
 8005c5c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005c5e:	4b71      	ldr	r3, [pc, #452]	@ (8005e24 <ESP_Upkeep+0x75c>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	4b6f      	ldr	r3, [pc, #444]	@ (8005e24 <ESP_Upkeep+0x75c>)
 8005c68:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c6a:	4b6b      	ldr	r3, [pc, #428]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005c70:	4b67      	ldr	r3, [pc, #412]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005c72:	2204      	movs	r2, #4
 8005c74:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005c76:	1d7b      	adds	r3, r7, #5
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d100      	bne.n	8005c80 <ESP_Upkeep+0x5b8>
 8005c7e:	e1a0      	b.n	8005fc2 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005c80:	4b63      	ldr	r3, [pc, #396]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005c82:	2205      	movs	r2, #5
 8005c84:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005c86:	e19c      	b.n	8005fc2 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005c88:	4b66      	ldr	r3, [pc, #408]	@ (8005e24 <ESP_Upkeep+0x75c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4b64      	ldr	r3, [pc, #400]	@ (8005e24 <ESP_Upkeep+0x75c>)
 8005c92:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005c94:	4b63      	ldr	r3, [pc, #396]	@ (8005e24 <ESP_Upkeep+0x75c>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	001a      	movs	r2, r3
 8005c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e54 <ESP_Upkeep+0x78c>)
 8005c9c:	5c9a      	ldrb	r2, [r3, r2]
 8005c9e:	4b60      	ldr	r3, [pc, #384]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005ca0:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005ca2:	4b5f      	ldr	r3, [pc, #380]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d102      	bne.n	8005cb0 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005caa:	4b5b      	ldr	r3, [pc, #364]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005cb0:	4b5b      	ldr	r3, [pc, #364]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b0e      	cmp	r3, #14
 8005cb6:	d102      	bne.n	8005cbe <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005cb8:	4b57      	ldr	r3, [pc, #348]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005cba:	2202      	movs	r2, #2
 8005cbc:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005cbe:	4b58      	ldr	r3, [pc, #352]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b0e      	cmp	r3, #14
 8005cc4:	d006      	beq.n	8005cd4 <ESP_Upkeep+0x60c>
 8005cc6:	4b56      	ldr	r3, [pc, #344]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d002      	beq.n	8005cd4 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005cce:	4b52      	ldr	r3, [pc, #328]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005cd4:	4b52      	ldr	r3, [pc, #328]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b11      	cmp	r3, #17
 8005cda:	d102      	bne.n	8005ce2 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e18 <ESP_Upkeep+0x750>)
 8005cde:	2205      	movs	r2, #5
 8005ce0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8005e20 <ESP_Upkeep+0x758>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b14      	cmp	r3, #20
 8005cee:	d000      	beq.n	8005cf2 <ESP_Upkeep+0x62a>
 8005cf0:	e169      	b.n	8005fc6 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005cf2:	4b46      	ldr	r3, [pc, #280]	@ (8005e0c <ESP_Upkeep+0x744>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d124      	bne.n	8005d44 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005cfa:	f009 faa5 	bl	800f248 <HAL_GetTick>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	4a4a      	ldr	r2, [pc, #296]	@ (8005e2c <ESP_Upkeep+0x764>)
 8005d02:	189a      	adds	r2, r3, r2
 8005d04:	4b43      	ldr	r3, [pc, #268]	@ (8005e14 <ESP_Upkeep+0x74c>)
 8005d06:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005d08:	f7ff f994 	bl	8005034 <clearDMABuffer>
          stop = HAL_GetTick();
 8005d0c:	f009 fa9c 	bl	800f248 <HAL_GetTick>
 8005d10:	0002      	movs	r2, r0
 8005d12:	4b48      	ldr	r3, [pc, #288]	@ (8005e34 <ESP_Upkeep+0x76c>)
 8005d14:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005d16:	4b47      	ldr	r3, [pc, #284]	@ (8005e34 <ESP_Upkeep+0x76c>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4b47      	ldr	r3, [pc, #284]	@ (8005e38 <ESP_Upkeep+0x770>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	4a4d      	ldr	r2, [pc, #308]	@ (8005e58 <ESP_Upkeep+0x790>)
 8005d22:	494e      	ldr	r1, [pc, #312]	@ (8005e5c <ESP_Upkeep+0x794>)
 8005d24:	2002      	movs	r0, #2
 8005d26:	f008 fe4b 	bl	800e9c0 <CreateLine>
          ResetdBAmax();
 8005d2a:	f002 ffe7 	bl	8008cfc <ResetdBAmax>
          resetMaxMeasurementValues();
 8005d2e:	f7fd fdef 	bl	8003910 <resetMaxMeasurementValues>
          showTime();
 8005d32:	f000 fcdf 	bl	80066f4 <showTime>
          ESPTransmitDone = true;
 8005d36:	4b3e      	ldr	r3, [pc, #248]	@ (8005e30 <ESP_Upkeep+0x768>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005d3c:	4b34      	ldr	r3, [pc, #208]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005d3e:	220d      	movs	r2, #13
 8005d40:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005d42:	e140      	b.n	8005fc6 <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005d44:	4b31      	ldr	r3, [pc, #196]	@ (8005e0c <ESP_Upkeep+0x744>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b05      	cmp	r3, #5
 8005d4a:	d12c      	bne.n	8005da6 <ESP_Upkeep+0x6de>
            setTime = false;
 8005d4c:	4b44      	ldr	r3, [pc, #272]	@ (8005e60 <ESP_Upkeep+0x798>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005d52:	f009 fa79 	bl	800f248 <HAL_GetTick>
 8005d56:	0003      	movs	r3, r0
 8005d58:	4a42      	ldr	r2, [pc, #264]	@ (8005e64 <ESP_Upkeep+0x79c>)
 8005d5a:	189a      	adds	r2, r3, r2
 8005d5c:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <ESP_Upkeep+0x7a0>)
 8005d5e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005d60:	4b41      	ldr	r3, [pc, #260]	@ (8005e68 <ESP_Upkeep+0x7a0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a41      	ldr	r2, [pc, #260]	@ (8005e6c <ESP_Upkeep+0x7a4>)
 8005d66:	493d      	ldr	r1, [pc, #244]	@ (8005e5c <ESP_Upkeep+0x794>)
 8005d68:	2002      	movs	r0, #2
 8005d6a:	f008 fe29 	bl	800e9c0 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005d6e:	4b40      	ldr	r3, [pc, #256]	@ (8005e70 <ESP_Upkeep+0x7a8>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b28      	ldr	r3, [pc, #160]	@ (8005e14 <ESP_Upkeep+0x74c>)
 8005d74:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005d76:	f7ff f95d 	bl	8005034 <clearDMABuffer>
            stop = HAL_GetTick();
 8005d7a:	f009 fa65 	bl	800f248 <HAL_GetTick>
 8005d7e:	0002      	movs	r2, r0
 8005d80:	4b2c      	ldr	r3, [pc, #176]	@ (8005e34 <ESP_Upkeep+0x76c>)
 8005d82:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005d84:	4b2b      	ldr	r3, [pc, #172]	@ (8005e34 <ESP_Upkeep+0x76c>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	4b2b      	ldr	r3, [pc, #172]	@ (8005e38 <ESP_Upkeep+0x770>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	4a39      	ldr	r2, [pc, #228]	@ (8005e74 <ESP_Upkeep+0x7ac>)
 8005d90:	4932      	ldr	r1, [pc, #200]	@ (8005e5c <ESP_Upkeep+0x794>)
 8005d92:	2002      	movs	r0, #2
 8005d94:	f008 fe14 	bl	800e9c0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d98:	4b1d      	ldr	r3, [pc, #116]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005d9a:	220d      	movs	r2, #13
 8005d9c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e0c <ESP_Upkeep+0x744>)
 8005da0:	2202      	movs	r2, #2
 8005da2:	701a      	strb	r2, [r3, #0]
    break;
 8005da4:	e10f      	b.n	8005fc6 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005da6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005da8:	2209      	movs	r2, #9
 8005daa:	701a      	strb	r2, [r3, #0]
    break;
 8005dac:	e10b      	b.n	8005fc6 <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005dae:	4b32      	ldr	r3, [pc, #200]	@ (8005e78 <ESP_Upkeep+0x7b0>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005db4:	4b31      	ldr	r3, [pc, #196]	@ (8005e7c <ESP_Upkeep+0x7b4>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	2101      	movs	r1, #1
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f00a fcd5 	bl	801076a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f009 fa4b 	bl	800f25c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005dc6:	2380      	movs	r3, #128	@ 0x80
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	482d      	ldr	r0, [pc, #180]	@ (8005e80 <ESP_Upkeep+0x7b8>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	0019      	movs	r1, r3
 8005dd0:	f00a fccb 	bl	801076a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	f009 fa41 	bl	800f25c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005dda:	4b28      	ldr	r3, [pc, #160]	@ (8005e7c <ESP_Upkeep+0x7b4>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2102      	movs	r1, #2
 8005de0:	0018      	movs	r0, r3
 8005de2:	f00a fcc2 	bl	801076a <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005de6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e10 <ESP_Upkeep+0x748>)
 8005de8:	2209      	movs	r2, #9
 8005dea:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005dec:	f002 ff3e 	bl	8008c6c <EnabledConnectedDevices>
      HAL_Delay(1);
 8005df0:	2001      	movs	r0, #1
 8005df2:	f009 fa33 	bl	800f25c <HAL_Delay>
      ResetESPIndicator();
 8005df6:	f007 fce9 	bl	800d7cc <ResetESPIndicator>
      errorcntr = 0;
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005e28 <ESP_Upkeep+0x760>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005e00:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <ESP_Upkeep+0x77c>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
      break;
 8005e06:	e0e1      	b.n	8005fcc <ESP_Upkeep+0x904>
 8005e08:	2000054f 	.word	0x2000054f
 8005e0c:	2000061f 	.word	0x2000061f
 8005e10:	20000030 	.word	0x20000030
 8005e14:	20000618 	.word	0x20000618
 8005e18:	2000061d 	.word	0x2000061d
 8005e1c:	20000033 	.word	0x20000033
 8005e20:	2000061e 	.word	0x2000061e
 8005e24:	20000612 	.word	0x20000612
 8005e28:	20000613 	.word	0x20000613
 8005e2c:	0003a980 	.word	0x0003a980
 8005e30:	20000554 	.word	0x20000554
 8005e34:	20000568 	.word	0x20000568
 8005e38:	20000564 	.word	0x20000564
 8005e3c:	080242e0 	.word	0x080242e0
 8005e40:	08023694 	.word	0x08023694
 8005e44:	20000614 	.word	0x20000614
 8005e48:	08024314 	.word	0x08024314
 8005e4c:	0000c350 	.word	0x0000c350
 8005e50:	08024350 	.word	0x08024350
 8005e54:	20000608 	.word	0x20000608
 8005e58:	08024380 	.word	0x08024380
 8005e5c:	08024398 	.word	0x08024398
 8005e60:	20000001 	.word	0x20000001
 8005e64:	047e7c4f 	.word	0x047e7c4f
 8005e68:	20000028 	.word	0x20000028
 8005e6c:	0802439c 	.word	0x0802439c
 8005e70:	2000002c 	.word	0x2000002c
 8005e74:	080243e0 	.word	0x080243e0
 8005e78:	2000054c 	.word	0x2000054c
 8005e7c:	50001c00 	.word	0x50001c00
 8005e80:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005e84:	4b54      	ldr	r3, [pc, #336]	@ (8005fd8 <ESP_Upkeep+0x910>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f008 fd43 	bl	800e914 <TimestampIsReached>
 8005e8e:	1e03      	subs	r3, r0, #0
 8005e90:	d103      	bne.n	8005e9a <ESP_Upkeep+0x7d2>
 8005e92:	4b52      	ldr	r3, [pc, #328]	@ (8005fdc <ESP_Upkeep+0x914>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d043      	beq.n	8005f22 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005e9a:	4b51      	ldr	r3, [pc, #324]	@ (8005fe0 <ESP_Upkeep+0x918>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005ea0:	4b50      	ldr	r3, [pc, #320]	@ (8005fe4 <ESP_Upkeep+0x91c>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe8 <ESP_Upkeep+0x920>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005eae:	4b4f      	ldr	r3, [pc, #316]	@ (8005fec <ESP_Upkeep+0x924>)
 8005eb0:	220b      	movs	r2, #11
 8005eb2:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8005fe4 <ESP_Upkeep+0x91c>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d108      	bne.n	8005ece <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8005ff0 <ESP_Upkeep+0x928>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ff4 <ESP_Upkeep+0x92c>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005ec8:	4b48      	ldr	r3, [pc, #288]	@ (8005fec <ESP_Upkeep+0x924>)
 8005eca:	220b      	movs	r2, #11
 8005ecc:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005ece:	4b45      	ldr	r3, [pc, #276]	@ (8005fe4 <ESP_Upkeep+0x91c>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d102      	bne.n	8005edc <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005ed6:	4b45      	ldr	r3, [pc, #276]	@ (8005fec <ESP_Upkeep+0x924>)
 8005ed8:	2202      	movs	r2, #2
 8005eda:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005edc:	4b41      	ldr	r3, [pc, #260]	@ (8005fe4 <ESP_Upkeep+0x91c>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d108      	bne.n	8005ef6 <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005ee4:	4b41      	ldr	r3, [pc, #260]	@ (8005fec <ESP_Upkeep+0x924>)
 8005ee6:	220e      	movs	r2, #14
 8005ee8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005eea:	4a43      	ldr	r2, [pc, #268]	@ (8005ff8 <ESP_Upkeep+0x930>)
 8005eec:	4b43      	ldr	r3, [pc, #268]	@ (8005ffc <ESP_Upkeep+0x934>)
 8005eee:	0019      	movs	r1, r3
 8005ef0:	2002      	movs	r0, #2
 8005ef2:	f008 fd65 	bl	800e9c0 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fe4 <ESP_Upkeep+0x91c>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d105      	bne.n	8005f0a <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005efe:	4b3b      	ldr	r3, [pc, #236]	@ (8005fec <ESP_Upkeep+0x924>)
 8005f00:	220b      	movs	r2, #11
 8005f02:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005f04:	4b3e      	ldr	r3, [pc, #248]	@ (8006000 <ESP_Upkeep+0x938>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f0a:	4b34      	ldr	r3, [pc, #208]	@ (8005fdc <ESP_Upkeep+0x914>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d020      	beq.n	8005f54 <ESP_Upkeep+0x88c>
 8005f12:	4b34      	ldr	r3, [pc, #208]	@ (8005fe4 <ESP_Upkeep+0x91c>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d01c      	beq.n	8005f54 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005f1a:	4b34      	ldr	r3, [pc, #208]	@ (8005fec <ESP_Upkeep+0x924>)
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f20:	e018      	b.n	8005f54 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005f22:	4b38      	ldr	r3, [pc, #224]	@ (8006004 <ESP_Upkeep+0x93c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f008 fcf4 	bl	800e914 <TimestampIsReached>
 8005f2c:	1e03      	subs	r3, r0, #0
 8005f2e:	d04c      	beq.n	8005fca <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005f30:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe4 <ESP_Upkeep+0x91c>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d148      	bne.n	8005fca <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005f38:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe4 <ESP_Upkeep+0x91c>)
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8005fec <ESP_Upkeep+0x924>)
 8005f40:	2202      	movs	r2, #2
 8005f42:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005f44:	4b24      	ldr	r3, [pc, #144]	@ (8005fd8 <ESP_Upkeep+0x910>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b2f      	ldr	r3, [pc, #188]	@ (8006008 <ESP_Upkeep+0x940>)
 8005f4a:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800600c <ESP_Upkeep+0x944>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005f52:	e03a      	b.n	8005fca <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f54:	46c0      	nop			@ (mov r8, r8)
      break;
 8005f56:	e038      	b.n	8005fca <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005f58:	4b2d      	ldr	r3, [pc, #180]	@ (8006010 <ESP_Upkeep+0x948>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	4053      	eors	r3, r2
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005f66:	4a24      	ldr	r2, [pc, #144]	@ (8005ff8 <ESP_Upkeep+0x930>)
 8005f68:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <ESP_Upkeep+0x934>)
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	2002      	movs	r0, #2
 8005f6e:	f008 fd27 	bl	800e9c0 <CreateLine>
        msgdone = true;
 8005f72:	4b27      	ldr	r3, [pc, #156]	@ (8006010 <ESP_Upkeep+0x948>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005f78:	f017 f9a6 	bl	801d2c8 <GetUsbRxPointer>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f000 f8c0 	bl	8006104 <Process_PC_Config>
      break;
 8005f84:	e022      	b.n	8005fcc <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005f86:	4a23      	ldr	r2, [pc, #140]	@ (8006014 <ESP_Upkeep+0x94c>)
 8005f88:	4b23      	ldr	r3, [pc, #140]	@ (8006018 <ESP_Upkeep+0x950>)
 8005f8a:	0019      	movs	r1, r3
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	f008 fd17 	bl	800e9c0 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005f92:	4b16      	ldr	r3, [pc, #88]	@ (8005fec <ESP_Upkeep+0x924>)
 8005f94:	2202      	movs	r2, #2
 8005f96:	701a      	strb	r2, [r3, #0]
      break;
 8005f98:	e018      	b.n	8005fcc <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005f9a:	4a20      	ldr	r2, [pc, #128]	@ (800601c <ESP_Upkeep+0x954>)
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006018 <ESP_Upkeep+0x950>)
 8005f9e:	0019      	movs	r1, r3
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	f008 fd0d 	bl	800e9c0 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005fa6:	4b11      	ldr	r3, [pc, #68]	@ (8005fec <ESP_Upkeep+0x924>)
 8005fa8:	2207      	movs	r2, #7
 8005faa:	701a      	strb	r2, [r3, #0]
      break;
 8005fac:	e00e      	b.n	8005fcc <ESP_Upkeep+0x904>
      break;
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	e00c      	b.n	8005fcc <ESP_Upkeep+0x904>
      break;
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	e00a      	b.n	8005fcc <ESP_Upkeep+0x904>
        break;
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	e008      	b.n	8005fcc <ESP_Upkeep+0x904>
    break;
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	e006      	b.n	8005fcc <ESP_Upkeep+0x904>
    break;
 8005fbe:	46c0      	nop			@ (mov r8, r8)
 8005fc0:	e004      	b.n	8005fcc <ESP_Upkeep+0x904>
      break;
 8005fc2:	46c0      	nop			@ (mov r8, r8)
 8005fc4:	e002      	b.n	8005fcc <ESP_Upkeep+0x904>
    break;
 8005fc6:	46c0      	nop			@ (mov r8, r8)
 8005fc8:	e000      	b.n	8005fcc <ESP_Upkeep+0x904>
      break;
 8005fca:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005fcc:	4b07      	ldr	r3, [pc, #28]	@ (8005fec <ESP_Upkeep+0x924>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b002      	add	sp, #8
 8005fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fd8:	20000618 	.word	0x20000618
 8005fdc:	2000054f 	.word	0x2000054f
 8005fe0:	20000554 	.word	0x20000554
 8005fe4:	2000061f 	.word	0x2000061f
 8005fe8:	2000054d 	.word	0x2000054d
 8005fec:	20000030 	.word	0x20000030
 8005ff0:	20000550 	.word	0x20000550
 8005ff4:	20000552 	.word	0x20000552
 8005ff8:	08024400 	.word	0x08024400
 8005ffc:	08024398 	.word	0x08024398
 8006000:	20000551 	.word	0x20000551
 8006004:	20000028 	.word	0x20000028
 8006008:	2000002c 	.word	0x2000002c
 800600c:	20000001 	.word	0x20000001
 8006010:	20000553 	.word	0x20000553
 8006014:	08024418 	.word	0x08024418
 8006018:	08023694 	.word	0x08023694
 800601c:	0802442c 	.word	0x0802442c

08006020 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8006028:	4b09      	ldr	r3, [pc, #36]	@ (8006050 <I2CSensors_Init+0x30>)
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 800602e:	4a09      	ldr	r2, [pc, #36]	@ (8006054 <I2CSensors_Init+0x34>)
 8006030:	4b09      	ldr	r3, [pc, #36]	@ (8006058 <I2CSensors_Init+0x38>)
 8006032:	0011      	movs	r1, r2
 8006034:	0018      	movs	r0, r3
 8006036:	f008 fe27 	bl	800ec88 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 800603a:	4a06      	ldr	r2, [pc, #24]	@ (8006054 <I2CSensors_Init+0x34>)
 800603c:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <I2CSensors_Init+0x38>)
 800603e:	0011      	movs	r1, r2
 8006040:	0018      	movs	r0, r3
 8006042:	f005 fdb1 	bl	800bba8 <SGP_Init>
}
 8006046:	46c0      	nop			@ (mov r8, r8)
 8006048:	46bd      	mov	sp, r7
 800604a:	b002      	add	sp, #8
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	20000768 	.word	0x20000768
 8006054:	080060b1 	.word	0x080060b1
 8006058:	0800605d 	.word	0x0800605d

0800605c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800605c:	b5b0      	push	{r4, r5, r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6039      	str	r1, [r7, #0]
 8006064:	0011      	movs	r1, r2
 8006066:	1dfb      	adds	r3, r7, #7
 8006068:	1c02      	adds	r2, r0, #0
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	1dbb      	adds	r3, r7, #6
 800606e:	1c0a      	adds	r2, r1, #0
 8006070:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006072:	4b0e      	ldr	r3, [pc, #56]	@ (80060ac <ReadI2C+0x50>)
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	1dfb      	adds	r3, r7, #7
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	18db      	adds	r3, r3, r3
 800607e:	b299      	uxth	r1, r3
 8006080:	1dbb      	adds	r3, r7, #6
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	250f      	movs	r5, #15
 8006088:	197c      	adds	r4, r7, r5
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	f00a ff52 	bl	8010f34 <HAL_I2C_Master_Receive_DMA>
 8006090:	0003      	movs	r3, r0
 8006092:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006094:	197b      	adds	r3, r7, r5
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <ReadI2C+0x44>
        return false;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <ReadI2C+0x46>
    }
    return true;
 80060a0:	2301      	movs	r3, #1
}
 80060a2:	0018      	movs	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b004      	add	sp, #16
 80060a8:	bdb0      	pop	{r4, r5, r7, pc}
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	20000768 	.word	0x20000768

080060b0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80060b0:	b5b0      	push	{r4, r5, r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6039      	str	r1, [r7, #0]
 80060b8:	0011      	movs	r1, r2
 80060ba:	1dfb      	adds	r3, r7, #7
 80060bc:	1c02      	adds	r2, r0, #0
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	1dbb      	adds	r3, r7, #6
 80060c2:	1c0a      	adds	r2, r1, #0
 80060c4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80060c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006100 <WriteI2C+0x50>)
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	1dfb      	adds	r3, r7, #7
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	18db      	adds	r3, r3, r3
 80060d2:	b299      	uxth	r1, r3
 80060d4:	1dbb      	adds	r3, r7, #6
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	250f      	movs	r5, #15
 80060dc:	197c      	adds	r4, r7, r5
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	f00a fe22 	bl	8010d28 <HAL_I2C_Master_Transmit_DMA>
 80060e4:	0003      	movs	r3, r0
 80060e6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80060e8:	197b      	adds	r3, r7, r5
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <WriteI2C+0x44>
        return false;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e000      	b.n	80060f6 <WriteI2C+0x46>
    }
    return true;
 80060f4:	2301      	movs	r3, #1
}
 80060f6:	0018      	movs	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b004      	add	sp, #16
 80060fc:	bdb0      	pop	{r4, r5, r7, pc}
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	20000768 	.word	0x20000768

08006104 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b0c3      	sub	sp, #268	@ 0x10c
 8006108:	af3e      	add	r7, sp, #248	@ 0xf8
 800610a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800610c:	f017 f8fc 	bl	801d308 <GetUsbRxDataSize>
 8006110:	0003      	movs	r3, r0
 8006112:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b05      	cmp	r3, #5
 8006118:	d971      	bls.n	80061fe <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2123      	movs	r1, #35	@ 0x23
 800611e:	0018      	movs	r0, r3
 8006120:	f01a faf2 	bl	8020708 <strchr>
 8006124:	0003      	movs	r3, r0
 8006126:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d065      	beq.n	80061fa <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	785a      	ldrb	r2, [r3, #1]
 8006132:	4b34      	ldr	r3, [pc, #208]	@ (8006204 <Process_PC_Config+0x100>)
 8006134:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	789a      	ldrb	r2, [r3, #2]
 800613a:	4b32      	ldr	r3, [pc, #200]	@ (8006204 <Process_PC_Config+0x100>)
 800613c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800613e:	4b31      	ldr	r3, [pc, #196]	@ (8006204 <Process_PC_Config+0x100>)
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	3305      	adds	r3, #5
 8006144:	001a      	movs	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4293      	cmp	r3, r2
 800614a:	d351      	bcc.n	80061f0 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1cd9      	adds	r1, r3, #3
 8006150:	4b2c      	ldr	r3, [pc, #176]	@ (8006204 <Process_PC_Config+0x100>)
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	001a      	movs	r2, r3
 8006156:	4b2c      	ldr	r3, [pc, #176]	@ (8006208 <Process_PC_Config+0x104>)
 8006158:	0018      	movs	r0, r3
 800615a:	f01a fba9 	bl	80208b0 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800615e:	4b29      	ldr	r3, [pc, #164]	@ (8006204 <Process_PC_Config+0x100>)
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	3303      	adds	r3, #3
 8006164:	001a      	movs	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	189b      	adds	r3, r3, r2
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	b21a      	sxth	r2, r3
 8006170:	4b24      	ldr	r3, [pc, #144]	@ (8006204 <Process_PC_Config+0x100>)
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	3304      	adds	r3, #4
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	18cb      	adds	r3, r1, r3
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	b21b      	sxth	r3, r3
 800617e:	4313      	orrs	r3, r2
 8006180:	b21b      	sxth	r3, r3
 8006182:	b299      	uxth	r1, r3
 8006184:	4a1f      	ldr	r2, [pc, #124]	@ (8006204 <Process_PC_Config+0x100>)
 8006186:	2381      	movs	r3, #129	@ 0x81
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 800618c:	4a1d      	ldr	r2, [pc, #116]	@ (8006204 <Process_PC_Config+0x100>)
 800618e:	2381      	movs	r3, #129	@ 0x81
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	5ad4      	ldrh	r4, [r2, r3]
 8006194:	4b1b      	ldr	r3, [pc, #108]	@ (8006204 <Process_PC_Config+0x100>)
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	3303      	adds	r3, #3
 800619a:	b29a      	uxth	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	0011      	movs	r1, r2
 80061a0:	0018      	movs	r0, r3
 80061a2:	f000 f975 	bl	8006490 <CRC16_ARC>
 80061a6:	0003      	movs	r3, r0
 80061a8:	429c      	cmp	r4, r3
 80061aa:	d007      	beq.n	80061bc <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80061ac:	4b15      	ldr	r3, [pc, #84]	@ (8006204 <Process_PC_Config+0x100>)
 80061ae:	785a      	ldrb	r2, [r3, #1]
 80061b0:	4b15      	ldr	r3, [pc, #84]	@ (8006208 <Process_PC_Config+0x104>)
 80061b2:	0019      	movs	r1, r3
 80061b4:	2001      	movs	r0, #1
 80061b6:	f000 f919 	bl	80063ec <Create_Message>
 80061ba:	e016      	b.n	80061ea <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80061bc:	4c11      	ldr	r4, [pc, #68]	@ (8006204 <Process_PC_Config+0x100>)
 80061be:	466b      	mov	r3, sp
 80061c0:	0018      	movs	r0, r3
 80061c2:	0023      	movs	r3, r4
 80061c4:	3310      	adds	r3, #16
 80061c6:	22f4      	movs	r2, #244	@ 0xf4
 80061c8:	0019      	movs	r1, r3
 80061ca:	f01a fb71 	bl	80208b0 <memcpy>
 80061ce:	6820      	ldr	r0, [r4, #0]
 80061d0:	6861      	ldr	r1, [r4, #4]
 80061d2:	68a2      	ldr	r2, [r4, #8]
 80061d4:	68e3      	ldr	r3, [r4, #12]
 80061d6:	f000 f819 	bl	800620c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80061da:	4b0a      	ldr	r3, [pc, #40]	@ (8006204 <Process_PC_Config+0x100>)
 80061dc:	7818      	ldrb	r0, [r3, #0]
 80061de:	4b09      	ldr	r3, [pc, #36]	@ (8006204 <Process_PC_Config+0x100>)
 80061e0:	785a      	ldrb	r2, [r3, #1]
 80061e2:	4b09      	ldr	r3, [pc, #36]	@ (8006208 <Process_PC_Config+0x104>)
 80061e4:	0019      	movs	r1, r3
 80061e6:	f000 f901 	bl	80063ec <Create_Message>
                }
                ResetUsbRxDataSize();
 80061ea:	f017 f875 	bl	801d2d8 <ResetUsbRxDataSize>
                return;
 80061ee:	e006      	b.n	80061fe <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f017 f892 	bl	801d31c <GetUsbRxNextChunk>
 80061f8:	e001      	b.n	80061fe <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80061fa:	f017 f86d 	bl	801d2d8 <ResetUsbRxDataSize>
        }
    }
}
 80061fe:	46bd      	mov	sp, r7
 8006200:	b005      	add	sp, #20
 8006202:	bd90      	pop	{r4, r7, pc}
 8006204:	2000076c 	.word	0x2000076c
 8006208:	2000076e 	.word	0x2000076e

0800620c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 800620c:	b084      	sub	sp, #16
 800620e:	b5b0      	push	{r4, r5, r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	2518      	movs	r5, #24
 8006216:	197c      	adds	r4, r7, r5
 8006218:	6020      	str	r0, [r4, #0]
 800621a:	6061      	str	r1, [r4, #4]
 800621c:	60a2      	str	r2, [r4, #8]
 800621e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006220:	197b      	adds	r3, r7, r5
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2bfe      	cmp	r3, #254	@ 0xfe
 8006226:	d100      	bne.n	800622a <ProcessCmd+0x1e>
 8006228:	e09c      	b.n	8006364 <ProcessCmd+0x158>
 800622a:	dd00      	ble.n	800622e <ProcessCmd+0x22>
 800622c:	e0bc      	b.n	80063a8 <ProcessCmd+0x19c>
 800622e:	2b0c      	cmp	r3, #12
 8006230:	dc0a      	bgt.n	8006248 <ProcessCmd+0x3c>
 8006232:	2b00      	cmp	r3, #0
 8006234:	da00      	bge.n	8006238 <ProcessCmd+0x2c>
 8006236:	e0b7      	b.n	80063a8 <ProcessCmd+0x19c>
 8006238:	2b0c      	cmp	r3, #12
 800623a:	d900      	bls.n	800623e <ProcessCmd+0x32>
 800623c:	e0b4      	b.n	80063a8 <ProcessCmd+0x19c>
 800623e:	009a      	lsls	r2, r3, #2
 8006240:	4b5d      	ldr	r3, [pc, #372]	@ (80063b8 <ProcessCmd+0x1ac>)
 8006242:	18d3      	adds	r3, r2, r3
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	469f      	mov	pc, r3
 8006248:	2bfd      	cmp	r3, #253	@ 0xfd
 800624a:	d100      	bne.n	800624e <ProcessCmd+0x42>
 800624c:	e084      	b.n	8006358 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 800624e:	e0ab      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006250:	2118      	movs	r1, #24
 8006252:	187b      	adds	r3, r7, r1
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	001a      	movs	r2, r3
 8006258:	187b      	adds	r3, r7, r1
 800625a:	1c99      	adds	r1, r3, #2
 800625c:	4857      	ldr	r0, [pc, #348]	@ (80063bc <ProcessCmd+0x1b0>)
 800625e:	230c      	movs	r3, #12
 8006260:	f001 f94c 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 8006264:	e0a0      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006266:	2118      	movs	r1, #24
 8006268:	187b      	adds	r3, r7, r1
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	001a      	movs	r2, r3
 800626e:	187b      	adds	r3, r7, r1
 8006270:	1c99      	adds	r1, r3, #2
 8006272:	4853      	ldr	r0, [pc, #332]	@ (80063c0 <ProcessCmd+0x1b4>)
 8006274:	230c      	movs	r3, #12
 8006276:	f001 f941 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 800627a:	e095      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800627c:	2118      	movs	r1, #24
 800627e:	187b      	adds	r3, r7, r1
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	001a      	movs	r2, r3
 8006284:	187b      	adds	r3, r7, r1
 8006286:	1c99      	adds	r1, r3, #2
 8006288:	484e      	ldr	r0, [pc, #312]	@ (80063c4 <ProcessCmd+0x1b8>)
 800628a:	230c      	movs	r3, #12
 800628c:	f001 f936 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 8006290:	e08a      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006292:	2118      	movs	r1, #24
 8006294:	187b      	adds	r3, r7, r1
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	001a      	movs	r2, r3
 800629a:	187b      	adds	r3, r7, r1
 800629c:	1c99      	adds	r1, r3, #2
 800629e:	484a      	ldr	r0, [pc, #296]	@ (80063c8 <ProcessCmd+0x1bc>)
 80062a0:	230c      	movs	r3, #12
 80062a2:	f001 f92b 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 80062a6:	e07f      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062a8:	2118      	movs	r1, #24
 80062aa:	187b      	adds	r3, r7, r1
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	001a      	movs	r2, r3
 80062b0:	187b      	adds	r3, r7, r1
 80062b2:	1c99      	adds	r1, r3, #2
 80062b4:	4845      	ldr	r0, [pc, #276]	@ (80063cc <ProcessCmd+0x1c0>)
 80062b6:	230c      	movs	r3, #12
 80062b8:	f001 f920 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 80062bc:	e074      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062be:	2118      	movs	r1, #24
 80062c0:	187b      	adds	r3, r7, r1
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	001a      	movs	r2, r3
 80062c6:	187b      	adds	r3, r7, r1
 80062c8:	1c99      	adds	r1, r3, #2
 80062ca:	4841      	ldr	r0, [pc, #260]	@ (80063d0 <ProcessCmd+0x1c4>)
 80062cc:	230c      	movs	r3, #12
 80062ce:	f001 f915 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 80062d2:	e069      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062d4:	2118      	movs	r1, #24
 80062d6:	187b      	adds	r3, r7, r1
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	001a      	movs	r2, r3
 80062dc:	187b      	adds	r3, r7, r1
 80062de:	1c99      	adds	r1, r3, #2
 80062e0:	483c      	ldr	r0, [pc, #240]	@ (80063d4 <ProcessCmd+0x1c8>)
 80062e2:	230c      	movs	r3, #12
 80062e4:	f001 f90a 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 80062e8:	e05e      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80062ea:	2118      	movs	r1, #24
 80062ec:	187b      	adds	r3, r7, r1
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	001a      	movs	r2, r3
 80062f2:	187b      	adds	r3, r7, r1
 80062f4:	1c99      	adds	r1, r3, #2
 80062f6:	4838      	ldr	r0, [pc, #224]	@ (80063d8 <ProcessCmd+0x1cc>)
 80062f8:	2320      	movs	r3, #32
 80062fa:	f001 f8ff 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 80062fe:	e053      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006300:	2118      	movs	r1, #24
 8006302:	187b      	adds	r3, r7, r1
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	001a      	movs	r2, r3
 8006308:	187b      	adds	r3, r7, r1
 800630a:	1c99      	adds	r1, r3, #2
 800630c:	4833      	ldr	r0, [pc, #204]	@ (80063dc <ProcessCmd+0x1d0>)
 800630e:	230c      	movs	r3, #12
 8006310:	f001 f8f4 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 8006314:	e048      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006316:	2118      	movs	r1, #24
 8006318:	187b      	adds	r3, r7, r1
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	001a      	movs	r2, r3
 800631e:	187b      	adds	r3, r7, r1
 8006320:	1c99      	adds	r1, r3, #2
 8006322:	482f      	ldr	r0, [pc, #188]	@ (80063e0 <ProcessCmd+0x1d4>)
 8006324:	230c      	movs	r3, #12
 8006326:	f001 f8e9 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 800632a:	e03d      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800632c:	2118      	movs	r1, #24
 800632e:	187b      	adds	r3, r7, r1
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	001a      	movs	r2, r3
 8006334:	187b      	adds	r3, r7, r1
 8006336:	1c99      	adds	r1, r3, #2
 8006338:	482a      	ldr	r0, [pc, #168]	@ (80063e4 <ProcessCmd+0x1d8>)
 800633a:	230c      	movs	r3, #12
 800633c:	f001 f8de 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 8006340:	e032      	b.n	80063a8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006342:	2118      	movs	r1, #24
 8006344:	187b      	adds	r3, r7, r1
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	001a      	movs	r2, r3
 800634a:	187b      	adds	r3, r7, r1
 800634c:	1c99      	adds	r1, r3, #2
 800634e:	4826      	ldr	r0, [pc, #152]	@ (80063e8 <ProcessCmd+0x1dc>)
 8006350:	230c      	movs	r3, #12
 8006352:	f001 f8d3 	bl	80074fc <WriteUint8ArrayEepromSafe>
        break;
 8006356:	e027      	b.n	80063a8 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006358:	4b18      	ldr	r3, [pc, #96]	@ (80063bc <ProcessCmd+0x1b0>)
 800635a:	21bc      	movs	r1, #188	@ 0xbc
 800635c:	0018      	movs	r0, r3
 800635e:	f001 f912 	bl	8007586 <ClearEEprom>
        break;
 8006362:	e021      	b.n	80063a8 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006364:	2118      	movs	r1, #24
 8006366:	187b      	adds	r3, r7, r1
 8006368:	789b      	ldrb	r3, [r3, #2]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	b21a      	sxth	r2, r3
 800636e:	187b      	adds	r3, r7, r1
 8006370:	78db      	ldrb	r3, [r3, #3]
 8006372:	b21b      	sxth	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b21a      	sxth	r2, r3
 8006378:	1dbb      	adds	r3, r7, #6
 800637a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800637c:	1dbb      	adds	r3, r7, #6
 800637e:	881a      	ldrh	r2, [r3, #0]
 8006380:	23c0      	movs	r3, #192	@ 0xc0
 8006382:	015b      	lsls	r3, r3, #5
 8006384:	429a      	cmp	r2, r3
 8006386:	d207      	bcs.n	8006398 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006388:	1dbb      	adds	r3, r7, #6
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	4a0b      	ldr	r2, [pc, #44]	@ (80063bc <ProcessCmd+0x1b0>)
 800638e:	0019      	movs	r1, r3
 8006390:	0010      	movs	r0, r2
 8006392:	f001 f8f8 	bl	8007586 <ClearEEprom>
            break;
 8006396:	e006      	b.n	80063a6 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006398:	23c0      	movs	r3, #192	@ 0xc0
 800639a:	015b      	lsls	r3, r3, #5
 800639c:	4a07      	ldr	r2, [pc, #28]	@ (80063bc <ProcessCmd+0x1b0>)
 800639e:	0019      	movs	r1, r3
 80063a0:	0010      	movs	r0, r2
 80063a2:	f001 f8f0 	bl	8007586 <ClearEEprom>
            break;
 80063a6:	46c0      	nop			@ (mov r8, r8)
}
 80063a8:	46c0      	nop			@ (mov r8, r8)
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b002      	add	sp, #8
 80063ae:	bcb0      	pop	{r4, r5, r7}
 80063b0:	bc08      	pop	{r3}
 80063b2:	b004      	add	sp, #16
 80063b4:	4718      	bx	r3
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	08025be8 	.word	0x08025be8
 80063bc:	08080000 	.word	0x08080000
 80063c0:	0808000c 	.word	0x0808000c
 80063c4:	08080018 	.word	0x08080018
 80063c8:	08080024 	.word	0x08080024
 80063cc:	08080030 	.word	0x08080030
 80063d0:	0808003c 	.word	0x0808003c
 80063d4:	08080048 	.word	0x08080048
 80063d8:	08080090 	.word	0x08080090
 80063dc:	08080078 	.word	0x08080078
 80063e0:	0808006c 	.word	0x0808006c
 80063e4:	08080060 	.word	0x08080060
 80063e8:	08080054 	.word	0x08080054

080063ec <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80063ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6039      	str	r1, [r7, #0]
 80063f4:	0011      	movs	r1, r2
 80063f6:	1dfb      	adds	r3, r7, #7
 80063f8:	1c02      	adds	r2, r0, #0
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	1dbb      	adds	r3, r7, #6
 80063fe:	1c0a      	adds	r2, r1, #0
 8006400:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8006402:	2223      	movs	r2, #35	@ 0x23
 8006404:	4b20      	ldr	r3, [pc, #128]	@ (8006488 <Create_Message+0x9c>)
 8006406:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8006408:	4b1f      	ldr	r3, [pc, #124]	@ (8006488 <Create_Message+0x9c>)
 800640a:	1dfa      	adds	r2, r7, #7
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8006410:	4b1d      	ldr	r3, [pc, #116]	@ (8006488 <Create_Message+0x9c>)
 8006412:	1dba      	adds	r2, r7, #6
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8006418:	1dbb      	adds	r3, r7, #6
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	4b1b      	ldr	r3, [pc, #108]	@ (800648c <Create_Message+0xa0>)
 8006420:	0018      	movs	r0, r3
 8006422:	f01a fa45 	bl	80208b0 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8006426:	1dbb      	adds	r3, r7, #6
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	b29a      	uxth	r2, r3
 800642c:	250e      	movs	r5, #14
 800642e:	197b      	adds	r3, r7, r5
 8006430:	3203      	adds	r2, #3
 8006432:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006434:	260c      	movs	r6, #12
 8006436:	19bc      	adds	r4, r7, r6
 8006438:	197b      	adds	r3, r7, r5
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <Create_Message+0x9c>)
 800643e:	0011      	movs	r1, r2
 8006440:	0018      	movs	r0, r3
 8006442:	f000 f825 	bl	8006490 <CRC16_ARC>
 8006446:	0003      	movs	r3, r0
 8006448:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800644a:	0030      	movs	r0, r6
 800644c:	183b      	adds	r3, r7, r0
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	b29a      	uxth	r2, r3
 8006454:	197b      	adds	r3, r7, r5
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b2d1      	uxtb	r1, r2
 800645a:	4a0b      	ldr	r2, [pc, #44]	@ (8006488 <Create_Message+0x9c>)
 800645c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800645e:	197b      	adds	r3, r7, r5
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	183a      	adds	r2, r7, r0
 8006466:	8812      	ldrh	r2, [r2, #0]
 8006468:	b2d1      	uxtb	r1, r2
 800646a:	4a07      	ldr	r2, [pc, #28]	@ (8006488 <Create_Message+0x9c>)
 800646c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800646e:	197b      	adds	r3, r7, r5
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	3302      	adds	r3, #2
 8006474:	b29a      	uxth	r2, r3
 8006476:	4b04      	ldr	r3, [pc, #16]	@ (8006488 <Create_Message+0x9c>)
 8006478:	0011      	movs	r1, r2
 800647a:	0018      	movs	r0, r3
 800647c:	f016 feea 	bl	801d254 <CDC_Transmit_FS>
}
 8006480:	46c0      	nop			@ (mov r8, r8)
 8006482:	46bd      	mov	sp, r7
 8006484:	b005      	add	sp, #20
 8006486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006488:	20000870 	.word	0x20000870
 800648c:	20000873 	.word	0x20000873

08006490 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	000a      	movs	r2, r1
 800649a:	1cbb      	adds	r3, r7, #2
 800649c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800649e:	2316      	movs	r3, #22
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	2200      	movs	r2, #0
 80064a4:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	e02e      	b.n	800650a <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	18d3      	adds	r3, r2, r3
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	0019      	movs	r1, r3
 80064b6:	2216      	movs	r2, #22
 80064b8:	18bb      	adds	r3, r7, r2
 80064ba:	18ba      	adds	r2, r7, r2
 80064bc:	8812      	ldrh	r2, [r2, #0]
 80064be:	404a      	eors	r2, r1
 80064c0:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e01a      	b.n	80064fe <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80064c8:	2116      	movs	r1, #22
 80064ca:	187b      	adds	r3, r7, r1
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	2201      	movs	r2, #1
 80064d0:	4013      	ands	r3, r2
 80064d2:	d00b      	beq.n	80064ec <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80064d4:	187b      	adds	r3, r7, r1
 80064d6:	187a      	adds	r2, r7, r1
 80064d8:	8812      	ldrh	r2, [r2, #0]
 80064da:	0852      	lsrs	r2, r2, #1
 80064dc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80064de:	187b      	adds	r3, r7, r1
 80064e0:	187a      	adds	r2, r7, r1
 80064e2:	8812      	ldrh	r2, [r2, #0]
 80064e4:	490f      	ldr	r1, [pc, #60]	@ (8006524 <CRC16_ARC+0x94>)
 80064e6:	404a      	eors	r2, r1
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	e005      	b.n	80064f8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80064ec:	2216      	movs	r2, #22
 80064ee:	18bb      	adds	r3, r7, r2
 80064f0:	18ba      	adds	r2, r7, r2
 80064f2:	8812      	ldrh	r2, [r2, #0]
 80064f4:	0852      	lsrs	r2, r2, #1
 80064f6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b07      	cmp	r3, #7
 8006502:	dde1      	ble.n	80064c8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	3301      	adds	r3, #1
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	1cbb      	adds	r3, r7, #2
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	429a      	cmp	r2, r3
 8006512:	dbcb      	blt.n	80064ac <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8006514:	2316      	movs	r3, #22
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	881b      	ldrh	r3, [r3, #0]
}
 800651a:	0018      	movs	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	b006      	add	sp, #24
 8006520:	bd80      	pop	{r7, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	ffffa001 	.word	0xffffa001

08006528 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 800652c:	4b26      	ldr	r3, [pc, #152]	@ (80065c8 <ReadBatteryVoltage+0xa0>)
 800652e:	4a27      	ldr	r2, [pc, #156]	@ (80065cc <ReadBatteryVoltage+0xa4>)
 8006530:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006532:	4b25      	ldr	r3, [pc, #148]	@ (80065c8 <ReadBatteryVoltage+0xa0>)
 8006534:	2280      	movs	r2, #128	@ 0x80
 8006536:	0152      	lsls	r2, r2, #5
 8006538:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800653a:	4a23      	ldr	r2, [pc, #140]	@ (80065c8 <ReadBatteryVoltage+0xa0>)
 800653c:	4b24      	ldr	r3, [pc, #144]	@ (80065d0 <ReadBatteryVoltage+0xa8>)
 800653e:	0011      	movs	r1, r2
 8006540:	0018      	movs	r0, r3
 8006542:	f009 f959 	bl	800f7f8 <HAL_ADC_ConfigChannel>
 8006546:	1e03      	subs	r3, r0, #0
 8006548:	d001      	beq.n	800654e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800654a:	f002 f8a3 	bl	8008694 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800654e:	4b20      	ldr	r3, [pc, #128]	@ (80065d0 <ReadBatteryVoltage+0xa8>)
 8006550:	0018      	movs	r0, r3
 8006552:	f009 f855 	bl	800f600 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006556:	4b1e      	ldr	r3, [pc, #120]	@ (80065d0 <ReadBatteryVoltage+0xa8>)
 8006558:	2101      	movs	r1, #1
 800655a:	0018      	movs	r0, r3
 800655c:	f009 f8a4 	bl	800f6a8 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006560:	4b1b      	ldr	r3, [pc, #108]	@ (80065d0 <ReadBatteryVoltage+0xa8>)
 8006562:	0018      	movs	r0, r3
 8006564:	f009 f93c 	bl	800f7e0 <HAL_ADC_GetValue>
 8006568:	0002      	movs	r2, r0
 800656a:	4b1a      	ldr	r3, [pc, #104]	@ (80065d4 <ReadBatteryVoltage+0xac>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4353      	muls	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	4919      	ldr	r1, [pc, #100]	@ (80065d8 <ReadBatteryVoltage+0xb0>)
 8006574:	0018      	movs	r0, r3
 8006576:	f7f9 fe15 	bl	80001a4 <__udivsi3>
 800657a:	0003      	movs	r3, r0
 800657c:	001a      	movs	r2, r3
 800657e:	4b17      	ldr	r3, [pc, #92]	@ (80065dc <ReadBatteryVoltage+0xb4>)
 8006580:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006582:	4b16      	ldr	r3, [pc, #88]	@ (80065dc <ReadBatteryVoltage+0xb4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	0018      	movs	r0, r3
 8006588:	f7fb f86e 	bl	8001668 <__aeabi_ui2f>
 800658c:	1c03      	adds	r3, r0, #0
 800658e:	4914      	ldr	r1, [pc, #80]	@ (80065e0 <ReadBatteryVoltage+0xb8>)
 8006590:	1c18      	adds	r0, r3, #0
 8006592:	f7fa fb1f 	bl	8000bd4 <__aeabi_fdiv>
 8006596:	1c03      	adds	r3, r0, #0
 8006598:	1c1a      	adds	r2, r3, #0
 800659a:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <ReadBatteryVoltage+0xbc>)
 800659c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800659e:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <ReadBatteryVoltage+0xa0>)
 80065a0:	4a0a      	ldr	r2, [pc, #40]	@ (80065cc <ReadBatteryVoltage+0xa4>)
 80065a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80065a4:	4b08      	ldr	r3, [pc, #32]	@ (80065c8 <ReadBatteryVoltage+0xa0>)
 80065a6:	4a10      	ldr	r2, [pc, #64]	@ (80065e8 <ReadBatteryVoltage+0xc0>)
 80065a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80065aa:	4a07      	ldr	r2, [pc, #28]	@ (80065c8 <ReadBatteryVoltage+0xa0>)
 80065ac:	4b08      	ldr	r3, [pc, #32]	@ (80065d0 <ReadBatteryVoltage+0xa8>)
 80065ae:	0011      	movs	r1, r2
 80065b0:	0018      	movs	r0, r3
 80065b2:	f009 f921 	bl	800f7f8 <HAL_ADC_ConfigChannel>
 80065b6:	1e03      	subs	r3, r0, #0
 80065b8:	d001      	beq.n	80065be <ReadBatteryVoltage+0x96>
    Error_Handler();
 80065ba:	f002 f86b 	bl	8008694 <Error_Handler>
  }
  return trueValue;
 80065be:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <ReadBatteryVoltage+0xbc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 }
 80065c2:	1c18      	adds	r0, r3, #0
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000978 	.word	0x20000978
 80065cc:	38004000 	.word	0x38004000
 80065d0:	200009b4 	.word	0x200009b4
 80065d4:	20000034 	.word	0x20000034
 80065d8:	00000fff 	.word	0x00000fff
 80065dc:	20000980 	.word	0x20000980
 80065e0:	447a0000 	.word	0x447a0000
 80065e4:	20000984 	.word	0x20000984
 80065e8:	00001001 	.word	0x00001001

080065ec <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80065f0:	4b21      	ldr	r3, [pc, #132]	@ (8006678 <ReadSolarVoltage+0x8c>)
 80065f2:	4a22      	ldr	r2, [pc, #136]	@ (800667c <ReadSolarVoltage+0x90>)
 80065f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80065f6:	4b20      	ldr	r3, [pc, #128]	@ (8006678 <ReadSolarVoltage+0x8c>)
 80065f8:	2280      	movs	r2, #128	@ 0x80
 80065fa:	0152      	lsls	r2, r2, #5
 80065fc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80065fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006678 <ReadSolarVoltage+0x8c>)
 8006600:	4b1f      	ldr	r3, [pc, #124]	@ (8006680 <ReadSolarVoltage+0x94>)
 8006602:	0011      	movs	r1, r2
 8006604:	0018      	movs	r0, r3
 8006606:	f009 f8f7 	bl	800f7f8 <HAL_ADC_ConfigChannel>
 800660a:	1e03      	subs	r3, r0, #0
 800660c:	d001      	beq.n	8006612 <ReadSolarVoltage+0x26>
    Error_Handler();
 800660e:	f002 f841 	bl	8008694 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006612:	4b1b      	ldr	r3, [pc, #108]	@ (8006680 <ReadSolarVoltage+0x94>)
 8006614:	0018      	movs	r0, r3
 8006616:	f008 fff3 	bl	800f600 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800661a:	4b19      	ldr	r3, [pc, #100]	@ (8006680 <ReadSolarVoltage+0x94>)
 800661c:	2101      	movs	r1, #1
 800661e:	0018      	movs	r0, r3
 8006620:	f009 f842 	bl	800f6a8 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006624:	4b16      	ldr	r3, [pc, #88]	@ (8006680 <ReadSolarVoltage+0x94>)
 8006626:	0018      	movs	r0, r3
 8006628:	f009 f8da 	bl	800f7e0 <HAL_ADC_GetValue>
 800662c:	0002      	movs	r2, r0
 800662e:	4b15      	ldr	r3, [pc, #84]	@ (8006684 <ReadSolarVoltage+0x98>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	435a      	muls	r2, r3
 8006634:	0013      	movs	r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	189b      	adds	r3, r3, r2
 800663a:	4913      	ldr	r1, [pc, #76]	@ (8006688 <ReadSolarVoltage+0x9c>)
 800663c:	0018      	movs	r0, r3
 800663e:	f7f9 fdb1 	bl	80001a4 <__udivsi3>
 8006642:	0003      	movs	r3, r0
 8006644:	001a      	movs	r2, r3
 8006646:	4b11      	ldr	r3, [pc, #68]	@ (800668c <ReadSolarVoltage+0xa0>)
 8006648:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800664a:	4b0b      	ldr	r3, [pc, #44]	@ (8006678 <ReadSolarVoltage+0x8c>)
 800664c:	4a0b      	ldr	r2, [pc, #44]	@ (800667c <ReadSolarVoltage+0x90>)
 800664e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006650:	4b09      	ldr	r3, [pc, #36]	@ (8006678 <ReadSolarVoltage+0x8c>)
 8006652:	4a0f      	ldr	r2, [pc, #60]	@ (8006690 <ReadSolarVoltage+0xa4>)
 8006654:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006656:	4a08      	ldr	r2, [pc, #32]	@ (8006678 <ReadSolarVoltage+0x8c>)
 8006658:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <ReadSolarVoltage+0x94>)
 800665a:	0011      	movs	r1, r2
 800665c:	0018      	movs	r0, r3
 800665e:	f009 f8cb 	bl	800f7f8 <HAL_ADC_ConfigChannel>
 8006662:	1e03      	subs	r3, r0, #0
 8006664:	d001      	beq.n	800666a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006666:	f002 f815 	bl	8008694 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800666a:	4b08      	ldr	r3, [pc, #32]	@ (800668c <ReadSolarVoltage+0xa0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 }
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	46c0      	nop			@ (mov r8, r8)
 8006678:	20000978 	.word	0x20000978
 800667c:	3c008000 	.word	0x3c008000
 8006680:	200009b4 	.word	0x200009b4
 8006684:	20000034 	.word	0x20000034
 8006688:	00000fff 	.word	0x00000fff
 800668c:	20000988 	.word	0x20000988
 8006690:	00001001 	.word	0x00001001

08006694 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006698:	23a0      	movs	r3, #160	@ 0xa0
 800669a:	05db      	lsls	r3, r3, #23
 800669c:	2180      	movs	r1, #128	@ 0x80
 800669e:	0018      	movs	r0, r3
 80066a0:	f00a f846 	bl	8010730 <HAL_GPIO_ReadPin>
 80066a4:	0003      	movs	r3, r0
 80066a6:	1e5a      	subs	r2, r3, #1
 80066a8:	4193      	sbcs	r3, r2
 80066aa:	b2db      	uxtb	r3, r3
}
 80066ac:	0018      	movs	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80066b2:	b580      	push	{r7, lr}
 80066b4:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 80066b6:	2380      	movs	r3, #128	@ 0x80
 80066b8:	021a      	lsls	r2, r3, #8
 80066ba:	23a0      	movs	r3, #160	@ 0xa0
 80066bc:	05db      	lsls	r3, r3, #23
 80066be:	0011      	movs	r1, r2
 80066c0:	0018      	movs	r0, r3
 80066c2:	f00a f835 	bl	8010730 <HAL_GPIO_ReadPin>
 80066c6:	0003      	movs	r3, r0
 80066c8:	1e5a      	subs	r2, r3, #1
 80066ca:	4193      	sbcs	r3, r2
 80066cc:	b2db      	uxtb	r3, r3
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80066d8:	4b05      	ldr	r3, [pc, #20]	@ (80066f0 <UserButton_Pressed+0x1c>)
 80066da:	2104      	movs	r1, #4
 80066dc:	0018      	movs	r0, r3
 80066de:	f00a f827 	bl	8010730 <HAL_GPIO_ReadPin>
 80066e2:	0003      	movs	r3, r0
 80066e4:	425a      	negs	r2, r3
 80066e6:	4153      	adcs	r3, r2
 80066e8:	b2db      	uxtb	r3, r3
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	50000c00 	.word	0x50000c00

080066f4 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80066f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f6:	46d6      	mov	lr, sl
 80066f8:	464f      	mov	r7, r9
 80066fa:	4646      	mov	r6, r8
 80066fc:	b5c0      	push	{r6, r7, lr}
 80066fe:	b08e      	sub	sp, #56	@ 0x38
 8006700:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8006702:	4b21      	ldr	r3, [pc, #132]	@ (8006788 <showTime+0x94>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d036      	beq.n	8006778 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800670a:	003a      	movs	r2, r7
 800670c:	1d3b      	adds	r3, r7, #4
 800670e:	0011      	movs	r1, r2
 8006710:	0018      	movs	r0, r3
 8006712:	f000 fa2b 	bl	8006b6c <RTC_GetTime>
  UpdateSystemUptime();
 8006716:	f000 f83f 	bl	8006798 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800671a:	003b      	movs	r3, r7
 800671c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800671e:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006720:	003b      	movs	r3, r7
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006726:	4b19      	ldr	r3, [pc, #100]	@ (800678c <showTime+0x98>)
 8006728:	0092      	lsls	r2, r2, #2
 800672a:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800672c:	003b      	movs	r3, r7
 800672e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006730:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006732:	1d3b      	adds	r3, r7, #4
 8006734:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006736:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006738:	1d3b      	adds	r3, r7, #4
 800673a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800673c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006742:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006744:	4b12      	ldr	r3, [pc, #72]	@ (8006790 <showTime+0x9c>)
 8006746:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006748:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800674a:	4b11      	ldr	r3, [pc, #68]	@ (8006790 <showTime+0x9c>)
 800674c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800674e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006750:	4b0f      	ldr	r3, [pc, #60]	@ (8006790 <showTime+0x9c>)
 8006752:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006754:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006756:	4b0e      	ldr	r3, [pc, #56]	@ (8006790 <showTime+0x9c>)
 8006758:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800675a:	480e      	ldr	r0, [pc, #56]	@ (8006794 <showTime+0xa0>)
 800675c:	9306      	str	r3, [sp, #24]
 800675e:	4643      	mov	r3, r8
 8006760:	9305      	str	r3, [sp, #20]
 8006762:	4663      	mov	r3, ip
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	9603      	str	r6, [sp, #12]
 8006768:	9502      	str	r5, [sp, #8]
 800676a:	9401      	str	r4, [sp, #4]
 800676c:	9100      	str	r1, [sp, #0]
 800676e:	4653      	mov	r3, sl
 8006770:	4649      	mov	r1, r9
 8006772:	f019 fe0d 	bl	8020390 <iprintf>
 8006776:	e000      	b.n	800677a <showTime+0x86>
    return;
 8006778:	46c0      	nop			@ (mov r8, r8)
}
 800677a:	46bd      	mov	sp, r7
 800677c:	b006      	add	sp, #24
 800677e:	bce0      	pop	{r5, r6, r7}
 8006780:	46ba      	mov	sl, r7
 8006782:	46b1      	mov	r9, r6
 8006784:	46a8      	mov	r8, r5
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006788:	20000998 	.word	0x20000998
 800678c:	20000054 	.word	0x20000054
 8006790:	2000098c 	.word	0x2000098c
 8006794:	080244a8 	.word	0x080244a8

08006798 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800679e:	003a      	movs	r2, r7
 80067a0:	1d3b      	adds	r3, r7, #4
 80067a2:	0011      	movs	r1, r2
 80067a4:	0018      	movs	r0, r3
 80067a6:	f000 f9e1 	bl	8006b6c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80067aa:	1d3a      	adds	r2, r7, #4
 80067ac:	003b      	movs	r3, r7
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f000 fba7 	bl	8006f04 <makeTime>
 80067b6:	0002      	movs	r2, r0
 80067b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006834 <UpdateSystemUptime+0x9c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	213c      	movs	r1, #60	@ 0x3c
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7f9 fd71 	bl	80002b0 <__aeabi_uidivmod>
 80067ce:	000b      	movs	r3, r1
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4b19      	ldr	r3, [pc, #100]	@ (8006838 <UpdateSystemUptime+0xa0>)
 80067d4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	213c      	movs	r1, #60	@ 0x3c
 80067da:	0018      	movs	r0, r3
 80067dc:	f7f9 fce2 	bl	80001a4 <__udivsi3>
 80067e0:	0003      	movs	r3, r0
 80067e2:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	213c      	movs	r1, #60	@ 0x3c
 80067e8:	0018      	movs	r0, r3
 80067ea:	f7f9 fd61 	bl	80002b0 <__aeabi_uidivmod>
 80067ee:	000b      	movs	r3, r1
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <UpdateSystemUptime+0xa0>)
 80067f4:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	213c      	movs	r1, #60	@ 0x3c
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7f9 fcd2 	bl	80001a4 <__udivsi3>
 8006800:	0003      	movs	r3, r0
 8006802:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2118      	movs	r1, #24
 8006808:	0018      	movs	r0, r3
 800680a:	f7f9 fd51 	bl	80002b0 <__aeabi_uidivmod>
 800680e:	000b      	movs	r3, r1
 8006810:	b2da      	uxtb	r2, r3
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <UpdateSystemUptime+0xa0>)
 8006814:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2118      	movs	r1, #24
 800681a:	0018      	movs	r0, r3
 800681c:	f7f9 fcc2 	bl	80001a4 <__udivsi3>
 8006820:	0003      	movs	r3, r0
 8006822:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	b29a      	uxth	r2, r3
 8006828:	4b03      	ldr	r3, [pc, #12]	@ (8006838 <UpdateSystemUptime+0xa0>)
 800682a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800682c:	46c0      	nop			@ (mov r8, r8)
 800682e:	46bd      	mov	sp, r7
 8006830:	b008      	add	sp, #32
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000998 	.word	0x20000998
 8006838:	2000098c 	.word	0x2000098c

0800683c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	0008      	movs	r0, r1
 8006846:	0011      	movs	r1, r2
 8006848:	1cfb      	adds	r3, r7, #3
 800684a:	1c02      	adds	r2, r0, #0
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	1cbb      	adds	r3, r7, #2
 8006850:	1c0a      	adds	r2, r1, #0
 8006852:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006854:	230e      	movs	r3, #14
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800685c:	230f      	movs	r3, #15
 800685e:	18fb      	adds	r3, r7, r3
 8006860:	1cfa      	adds	r2, r7, #3
 8006862:	7812      	ldrb	r2, [r2, #0]
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e015      	b.n	8006894 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006868:	200f      	movs	r0, #15
 800686a:	183b      	adds	r3, r7, r0
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	18d2      	adds	r2, r2, r3
 8006872:	240e      	movs	r4, #14
 8006874:	193b      	adds	r3, r7, r4
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	7811      	ldrb	r1, [r2, #0]
 800687a:	2208      	movs	r2, #8
 800687c:	18ba      	adds	r2, r7, r2
 800687e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006880:	193b      	adds	r3, r7, r4
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	193b      	adds	r3, r7, r4
 8006886:	3201      	adds	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800688a:	183b      	adds	r3, r7, r0
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	183b      	adds	r3, r7, r0
 8006890:	3201      	adds	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	200f      	movs	r0, #15
 8006896:	183a      	adds	r2, r7, r0
 8006898:	1cbb      	adds	r3, r7, #2
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d9e2      	bls.n	8006868 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80068a2:	230e      	movs	r3, #14
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2208      	movs	r2, #8
 80068aa:	18ba      	adds	r2, r7, r2
 80068ac:	2100      	movs	r1, #0
 80068ae:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80068b0:	1cfb      	adds	r3, r7, #3
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b13      	cmp	r3, #19
 80068b6:	d849      	bhi.n	800694c <aBuff2int+0x110>
    if (start == 17) { //month
 80068b8:	1cfb      	adds	r3, r7, #3
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b11      	cmp	r3, #17
 80068be:	d122      	bne.n	8006906 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80068c0:	183b      	adds	r3, r7, r0
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e018      	b.n	80068fa <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80068c8:	240f      	movs	r4, #15
 80068ca:	193b      	adds	r3, r7, r4
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	4b25      	ldr	r3, [pc, #148]	@ (8006964 <aBuff2int+0x128>)
 80068d0:	0092      	lsls	r2, r2, #2
 80068d2:	58d2      	ldr	r2, [r2, r3]
 80068d4:	2308      	movs	r3, #8
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	0011      	movs	r1, r2
 80068da:	0018      	movs	r0, r3
 80068dc:	f7f9 fc3c 	bl	8000158 <strcmp>
 80068e0:	1e03      	subs	r3, r0, #0
 80068e2:	d104      	bne.n	80068ee <aBuff2int+0xb2>
          return i+1;
 80068e4:	193b      	adds	r3, r7, r4
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	e035      	b.n	800695a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80068ee:	210f      	movs	r1, #15
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	781a      	ldrb	r2, [r3, #0]
 80068f4:	187b      	adds	r3, r7, r1
 80068f6:	3201      	adds	r2, #1
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	230f      	movs	r3, #15
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b0b      	cmp	r3, #11
 8006902:	d9e1      	bls.n	80068c8 <aBuff2int+0x8c>
 8006904:	e022      	b.n	800694c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006906:	230f      	movs	r3, #15
 8006908:	18fb      	adds	r3, r7, r3
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	e018      	b.n	8006942 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006910:	240f      	movs	r4, #15
 8006912:	193b      	adds	r3, r7, r4
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <aBuff2int+0x12c>)
 8006918:	0092      	lsls	r2, r2, #2
 800691a:	58d2      	ldr	r2, [r2, r3]
 800691c:	2308      	movs	r3, #8
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	0011      	movs	r1, r2
 8006922:	0018      	movs	r0, r3
 8006924:	f7f9 fc18 	bl	8000158 <strcmp>
 8006928:	1e03      	subs	r3, r0, #0
 800692a:	d104      	bne.n	8006936 <aBuff2int+0xfa>
          return i+1;
 800692c:	193b      	adds	r3, r7, r4
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	e011      	b.n	800695a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006936:	210f      	movs	r1, #15
 8006938:	187b      	adds	r3, r7, r1
 800693a:	781a      	ldrb	r2, [r3, #0]
 800693c:	187b      	adds	r3, r7, r1
 800693e:	3201      	adds	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	230f      	movs	r3, #15
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b06      	cmp	r3, #6
 800694a:	d9e1      	bls.n	8006910 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800694c:	2308      	movs	r3, #8
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	0018      	movs	r0, r3
 8006952:	f018 f942 	bl	801ebda <atoi>
 8006956:	0003      	movs	r3, r0
 8006958:	b2db      	uxtb	r3, r3
}
 800695a:	0018      	movs	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	b005      	add	sp, #20
 8006960:	bd90      	pop	{r4, r7, pc}
 8006962:	46c0      	nop			@ (mov r8, r8)
 8006964:	20000054 	.word	0x20000054
 8006968:	20000038 	.word	0x20000038

0800696c <ParseTime>:

void ParseTime(char* buffer) {
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	b08b      	sub	sp, #44	@ 0x2c
 8006970:	af02      	add	r7, sp, #8
 8006972:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006974:	2408      	movs	r4, #8
 8006976:	193a      	adds	r2, r7, r4
 8006978:	260c      	movs	r6, #12
 800697a:	19bb      	adds	r3, r7, r6
 800697c:	0011      	movs	r1, r2
 800697e:	0018      	movs	r0, r3
 8006980:	f000 f8f4 	bl	8006b6c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2219      	movs	r2, #25
 8006988:	2118      	movs	r1, #24
 800698a:	0018      	movs	r0, r3
 800698c:	f7ff ff56 	bl	800683c <aBuff2int>
 8006990:	0003      	movs	r3, r0
 8006992:	001a      	movs	r2, r3
 8006994:	19bb      	adds	r3, r7, r6
 8006996:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	221c      	movs	r2, #28
 800699c:	211b      	movs	r1, #27
 800699e:	0018      	movs	r0, r3
 80069a0:	f7ff ff4c 	bl	800683c <aBuff2int>
 80069a4:	0003      	movs	r3, r0
 80069a6:	001a      	movs	r2, r3
 80069a8:	19bb      	adds	r3, r7, r6
 80069aa:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	221f      	movs	r2, #31
 80069b0:	211e      	movs	r1, #30
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7ff ff42 	bl	800683c <aBuff2int>
 80069b8:	0003      	movs	r3, r0
 80069ba:	001a      	movs	r2, r3
 80069bc:	19bb      	adds	r3, r7, r6
 80069be:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2224      	movs	r2, #36	@ 0x24
 80069c4:	2123      	movs	r1, #35	@ 0x23
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7ff ff38 	bl	800683c <aBuff2int>
 80069cc:	0003      	movs	r3, r0
 80069ce:	001a      	movs	r2, r3
 80069d0:	0025      	movs	r5, r4
 80069d2:	197b      	adds	r3, r7, r5
 80069d4:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2213      	movs	r2, #19
 80069da:	2111      	movs	r1, #17
 80069dc:	0018      	movs	r0, r3
 80069de:	f7ff ff2d 	bl	800683c <aBuff2int>
 80069e2:	0003      	movs	r3, r0
 80069e4:	001a      	movs	r2, r3
 80069e6:	197b      	adds	r3, r7, r5
 80069e8:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2216      	movs	r2, #22
 80069ee:	2115      	movs	r1, #21
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff ff23 	bl	800683c <aBuff2int>
 80069f6:	0003      	movs	r3, r0
 80069f8:	001a      	movs	r2, r3
 80069fa:	197b      	adds	r3, r7, r5
 80069fc:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	220f      	movs	r2, #15
 8006a02:	210d      	movs	r1, #13
 8006a04:	0018      	movs	r0, r3
 8006a06:	f7ff ff19 	bl	800683c <aBuff2int>
 8006a0a:	0003      	movs	r3, r0
 8006a0c:	001a      	movs	r2, r3
 8006a0e:	197b      	adds	r3, r7, r5
 8006a10:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006a12:	19bb      	adds	r3, r7, r6
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	001c      	movs	r4, r3
 8006a18:	19bb      	adds	r3, r7, r6
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	19bb      	adds	r3, r7, r6
 8006a20:	789b      	ldrb	r3, [r3, #2]
 8006a22:	4a1c      	ldr	r2, [pc, #112]	@ (8006a94 <ParseTime+0x128>)
 8006a24:	491c      	ldr	r1, [pc, #112]	@ (8006a98 <ParseTime+0x12c>)
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	9000      	str	r0, [sp, #0]
 8006a2a:	0023      	movs	r3, r4
 8006a2c:	2003      	movs	r0, #3
 8006a2e:	f007 ffc7 	bl	800e9c0 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006a32:	197b      	adds	r3, r7, r5
 8006a34:	789b      	ldrb	r3, [r3, #2]
 8006a36:	001c      	movs	r4, r3
 8006a38:	197b      	adds	r3, r7, r5
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	197b      	adds	r3, r7, r5
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <ParseTime+0x130>)
 8006a44:	4914      	ldr	r1, [pc, #80]	@ (8006a98 <ParseTime+0x12c>)
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	9000      	str	r0, [sp, #0]
 8006a4a:	0023      	movs	r3, r4
 8006a4c:	2003      	movs	r0, #3
 8006a4e:	f007 ffb7 	bl	800e9c0 <CreateLine>
  RTC_SetTime(&currentTime);
 8006a52:	19bb      	adds	r3, r7, r6
 8006a54:	0018      	movs	r0, r3
 8006a56:	f000 f825 	bl	8006aa4 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006a5a:	197b      	adds	r3, r7, r5
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f000 f847 	bl	8006af0 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006a62:	197b      	adds	r3, r7, r5
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d101      	bne.n	8006a6e <ParseTime+0x102>
    reset_fanCleaningDone();
 8006a6a:	f002 fd99 	bl	80095a0 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <ParseTime+0x134>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006a76:	230c      	movs	r3, #12
 8006a78:	18fa      	adds	r2, r7, r3
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	0011      	movs	r1, r2
 8006a80:	0018      	movs	r0, r3
 8006a82:	f000 fa3f 	bl	8006f04 <makeTime>
 8006a86:	0002      	movs	r2, r0
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <ParseTime+0x134>)
 8006a8a:	601a      	str	r2, [r3, #0]
  }
}
 8006a8c:	46c0      	nop			@ (mov r8, r8)
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b009      	add	sp, #36	@ 0x24
 8006a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a94:	08024500 	.word	0x08024500
 8006a98:	08024538 	.word	0x08024538
 8006a9c:	0802453c 	.word	0x0802453c
 8006aa0:	20000998 	.word	0x20000998

08006aa4 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006abe:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <RTC_SetTime+0x40>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f00f fcde 	bl	8016488 <HAL_RTC_SetTime>
 8006acc:	1e03      	subs	r3, r0, #0
 8006ace:	d005      	beq.n	8006adc <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8006ad0:	4a05      	ldr	r2, [pc, #20]	@ (8006ae8 <RTC_SetTime+0x44>)
 8006ad2:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <RTC_SetTime+0x48>)
 8006ad4:	0019      	movs	r1, r3
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	f007 ff72 	bl	800e9c0 <CreateLine>
    }
}
 8006adc:	46c0      	nop			@ (mov r8, r8)
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b002      	add	sp, #8
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000994 	.word	0x20000994
 8006ae8:	08024570 	.word	0x08024570
 8006aec:	0802458c 	.word	0x0802458c

08006af0 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006af8:	4b16      	ldr	r3, [pc, #88]	@ (8006b54 <RTC_SetDate+0x64>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	0018      	movs	r0, r3
 8006b02:	f00f fdc9 	bl	8016698 <HAL_RTC_SetDate>
 8006b06:	1e03      	subs	r3, r0, #0
 8006b08:	d005      	beq.n	8006b16 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8006b0a:	4a13      	ldr	r2, [pc, #76]	@ (8006b58 <RTC_SetDate+0x68>)
 8006b0c:	4b13      	ldr	r3, [pc, #76]	@ (8006b5c <RTC_SetDate+0x6c>)
 8006b0e:	0019      	movs	r1, r3
 8006b10:	2001      	movs	r0, #1
 8006b12:	f007 ff55 	bl	800e9c0 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8006b16:	4b0f      	ldr	r3, [pc, #60]	@ (8006b54 <RTC_SetDate+0x64>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	f010 f901 	bl	8016d24 <HAL_RTCEx_BKUPRead>
 8006b22:	0003      	movs	r3, r0
 8006b24:	4a0e      	ldr	r2, [pc, #56]	@ (8006b60 <RTC_SetDate+0x70>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d010      	beq.n	8006b4c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8006b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8006b64 <RTC_SetDate+0x74>)
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <RTC_SetDate+0x78>)
 8006b2e:	0019      	movs	r1, r3
 8006b30:	2003      	movs	r0, #3
 8006b32:	f007 ff45 	bl	800e9c0 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006b36:	f00e fc27 	bl	8015388 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8006b3a:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <RTC_SetDate+0x64>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a08      	ldr	r2, [pc, #32]	@ (8006b60 <RTC_SetDate+0x70>)
 8006b40:	2101      	movs	r1, #1
 8006b42:	0018      	movs	r0, r3
 8006b44:	f010 f8d6 	bl	8016cf4 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006b48:	f00e fc2c 	bl	80153a4 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006b4c:	46c0      	nop			@ (mov r8, r8)
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b002      	add	sp, #8
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000994 	.word	0x20000994
 8006b58:	08024590 	.word	0x08024590
 8006b5c:	0802458c 	.word	0x0802458c
 8006b60:	0000bebe 	.word	0x0000bebe
 8006b64:	080245ac 	.word	0x080245ac
 8006b68:	08024538 	.word	0x08024538

08006b6c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006b76:	250f      	movs	r5, #15
 8006b78:	197b      	adds	r3, r7, r5
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006b7e:	230e      	movs	r3, #14
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006b86:	260c      	movs	r6, #12
 8006b88:	19bc      	adds	r4, r7, r6
 8006b8a:	f006 ffa7 	bl	800dadc <powerCheck>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006b92:	19bb      	adds	r3, r7, r6
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006b9a:	197b      	adds	r3, r7, r5
 8006b9c:	781a      	ldrb	r2, [r3, #0]
 8006b9e:	197b      	adds	r3, r7, r5
 8006ba0:	3201      	adds	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006ba4:	230d      	movs	r3, #13
 8006ba6:	18fb      	adds	r3, r7, r3
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e039      	b.n	8006c22 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006bae:	4b23      	ldr	r3, [pc, #140]	@ (8006c3c <RTC_GetTime+0xd0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f00f fd10 	bl	80165dc <HAL_RTC_GetTime>
 8006bbc:	1e03      	subs	r3, r0, #0
 8006bbe:	d005      	beq.n	8006bcc <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8006c40 <RTC_GetTime+0xd4>)
 8006bc2:	4b20      	ldr	r3, [pc, #128]	@ (8006c44 <RTC_GetTime+0xd8>)
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f007 fefa 	bl	800e9c0 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8006c3c <RTC_GetTime+0xd0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f00f fdf3 	bl	80167c0 <HAL_RTC_GetDate>
 8006bda:	1e03      	subs	r3, r0, #0
 8006bdc:	d005      	beq.n	8006bea <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8006bde:	4a1a      	ldr	r2, [pc, #104]	@ (8006c48 <RTC_GetTime+0xdc>)
 8006be0:	4b18      	ldr	r3, [pc, #96]	@ (8006c44 <RTC_GetTime+0xd8>)
 8006be2:	0019      	movs	r1, r3
 8006be4:	2001      	movs	r0, #1
 8006be6:	f007 feeb 	bl	800e9c0 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8006bea:	230c      	movs	r3, #12
 8006bec:	18fb      	adds	r3, r7, r3
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d110      	bne.n	8006c16 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	210e      	movs	r1, #14
 8006bfa:	187a      	adds	r2, r7, r1
 8006bfc:	7812      	ldrb	r2, [r2, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d018      	beq.n	8006c34 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8006c02:	187b      	adds	r3, r7, r1
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	7812      	ldrb	r2, [r2, #0]
 8006c08:	701a      	strb	r2, [r3, #0]
        t++;
 8006c0a:	210f      	movs	r1, #15
 8006c0c:	187b      	adds	r3, r7, r1
 8006c0e:	781a      	ldrb	r2, [r3, #0]
 8006c10:	187b      	adds	r3, r7, r1
 8006c12:	3201      	adds	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8006c16:	210d      	movs	r1, #13
 8006c18:	187b      	adds	r3, r7, r1
 8006c1a:	781a      	ldrb	r2, [r3, #0]
 8006c1c:	187b      	adds	r3, r7, r1
 8006c1e:	3201      	adds	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	230d      	movs	r3, #13
 8006c24:	18fa      	adds	r2, r7, r3
 8006c26:	230f      	movs	r3, #15
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	7812      	ldrb	r2, [r2, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d3bd      	bcc.n	8006bae <RTC_GetTime+0x42>
 8006c32:	e000      	b.n	8006c36 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006c34:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b005      	add	sp, #20
 8006c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3c:	20000994 	.word	0x20000994
 8006c40:	080245c4 	.word	0x080245c4
 8006c44:	0802458c 	.word	0x0802458c
 8006c48:	080245e0 	.word	0x080245e0

08006c4c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006c52:	003a      	movs	r2, r7
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	0011      	movs	r1, r2
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7ff ff87 	bl	8006b6c <RTC_GetTime>
  return currentDate.WeekDay;
 8006c5e:	003b      	movs	r3, r7
 8006c60:	781b      	ldrb	r3, [r3, #0]
}
 8006c62:	0018      	movs	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b006      	add	sp, #24
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <getPosixTime>:

uint32_t getPosixTime(void) {
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b086      	sub	sp, #24
 8006c6e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006c70:	003a      	movs	r2, r7
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	0011      	movs	r1, r2
 8006c76:	0018      	movs	r0, r3
 8006c78:	f7ff ff78 	bl	8006b6c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006c7c:	1d3a      	adds	r2, r7, #4
 8006c7e:	003b      	movs	r3, r7
 8006c80:	0011      	movs	r1, r2
 8006c82:	0018      	movs	r0, r3
 8006c84:	f000 f93e 	bl	8006f04 <makeTime>
 8006c88:	0003      	movs	r3, r0
}
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b006      	add	sp, #24
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c96:	b08d      	sub	sp, #52	@ 0x34
 8006c98:	af04      	add	r7, sp, #16
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006c9e:	240c      	movs	r4, #12
 8006ca0:	193a      	adds	r2, r7, r4
 8006ca2:	2508      	movs	r5, #8
 8006ca4:	1979      	adds	r1, r7, r5
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f000 f9f5 	bl	8007098 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006cae:	002a      	movs	r2, r5
 8006cb0:	18bb      	adds	r3, r7, r2
 8006cb2:	789b      	ldrb	r3, [r3, #2]
 8006cb4:	001e      	movs	r6, r3
 8006cb6:	18bb      	adds	r3, r7, r2
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	469c      	mov	ip, r3
 8006cbc:	18bb      	adds	r3, r7, r2
 8006cbe:	78db      	ldrb	r3, [r3, #3]
 8006cc0:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006cc2:	0021      	movs	r1, r4
 8006cc4:	187b      	adds	r3, r7, r1
 8006cc6:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006cc8:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006cce:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006cd0:	187b      	adds	r3, r7, r1
 8006cd2:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006cd4:	4906      	ldr	r1, [pc, #24]	@ (8006cf0 <getUTCfromPosixTime+0x5c>)
 8006cd6:	6838      	ldr	r0, [r7, #0]
 8006cd8:	9303      	str	r3, [sp, #12]
 8006cda:	9502      	str	r5, [sp, #8]
 8006cdc:	9401      	str	r4, [sp, #4]
 8006cde:	9200      	str	r2, [sp, #0]
 8006ce0:	4663      	mov	r3, ip
 8006ce2:	0032      	movs	r2, r6
 8006ce4:	f019 fbc4 	bl	8020470 <siprintf>
}
 8006ce8:	46c0      	nop			@ (mov r8, r8)
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b009      	add	sp, #36	@ 0x24
 8006cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf0:	080245fc 	.word	0x080245fc

08006cf4 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006cfc:	4b10      	ldr	r3, [pc, #64]	@ (8006d40 <RTC_SetWakeUpTimer+0x4c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f00f ff5b 	bl	8016bbc <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006d06:	4b0e      	ldr	r3, [pc, #56]	@ (8006d40 <RTC_SetWakeUpTimer+0x4c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	22ff      	movs	r2, #255	@ 0xff
 8006d10:	401a      	ands	r2, r3
 8006d12:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <RTC_SetWakeUpTimer+0x4c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	490a      	ldr	r1, [pc, #40]	@ (8006d44 <RTC_SetWakeUpTimer+0x50>)
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d48 <RTC_SetWakeUpTimer+0x54>)
 8006d20:	2280      	movs	r2, #128	@ 0x80
 8006d22:	0352      	lsls	r2, r2, #13
 8006d24:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006d26:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <RTC_SetWakeUpTimer+0x4c>)
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	2204      	movs	r2, #4
 8006d30:	0019      	movs	r1, r3
 8006d32:	f00f fe6b 	bl	8016a0c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	20000994 	.word	0x20000994
 8006d44:	fffffb7f 	.word	0xfffffb7f
 8006d48:	40010400 	.word	0x40010400

08006d4c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006d50:	4a0b      	ldr	r2, [pc, #44]	@ (8006d80 <Enter_Standby_Mode+0x34>)
 8006d52:	4b0c      	ldr	r3, [pc, #48]	@ (8006d84 <Enter_Standby_Mode+0x38>)
 8006d54:	0019      	movs	r1, r3
 8006d56:	2003      	movs	r0, #3
 8006d58:	f007 fe32 	bl	800e9c0 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006d5c:	2064      	movs	r0, #100	@ 0x64
 8006d5e:	f008 fa7d 	bl	800f25c <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006d62:	4b09      	ldr	r3, [pc, #36]	@ (8006d88 <Enter_Standby_Mode+0x3c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	0018      	movs	r0, r3
 8006d68:	f00f ff28 	bl	8016bbc <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8006d6c:	f000 febc 	bl	8007ae8 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8006d70:	f008 fa98 	bl	800f2a4 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8006d74:	f00e fb82 	bl	801547c <HAL_PWR_EnterSTANDBYMode>
}
 8006d78:	46c0      	nop			@ (mov r8, r8)
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	46c0      	nop			@ (mov r8, r8)
 8006d80:	08024650 	.word	0x08024650
 8006d84:	08024538 	.word	0x08024538
 8006d88:	20000994 	.word	0x20000994

08006d8c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	0002      	movs	r2, r0
 8006d94:	1dbb      	adds	r3, r7, #6
 8006d96:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006d98:	4b47      	ldr	r3, [pc, #284]	@ (8006eb8 <Enter_Stop_Mode+0x12c>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006da0:	f002 fbd2 	bl	8009548 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006da4:	f7ff fbc0 	bl	8006528 <ReadBatteryVoltage>
 8006da8:	1c03      	adds	r3, r0, #0
 8006daa:	1c18      	adds	r0, r3, #0
 8006dac:	f7fc fb5a 	bl	8003464 <__aeabi_f2d>
 8006db0:	0002      	movs	r2, r0
 8006db2:	000b      	movs	r3, r1
 8006db4:	4841      	ldr	r0, [pc, #260]	@ (8006ebc <Enter_Stop_Mode+0x130>)
 8006db6:	4942      	ldr	r1, [pc, #264]	@ (8006ec0 <Enter_Stop_Mode+0x134>)
 8006db8:	9200      	str	r2, [sp, #0]
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	0002      	movs	r2, r0
 8006dbe:	2002      	movs	r0, #2
 8006dc0:	f007 fdfe 	bl	800e9c0 <CreateLine>
  powerDisplay(powerCheck());
 8006dc4:	f006 fe8a 	bl	800dadc <powerCheck>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f006 fea2 	bl	800db14 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006dd0:	1dbb      	adds	r3, r7, #6
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ec4 <Enter_Stop_Mode+0x138>)
 8006dd6:	493c      	ldr	r1, [pc, #240]	@ (8006ec8 <Enter_Stop_Mode+0x13c>)
 8006dd8:	2003      	movs	r0, #3
 8006dda:	f007 fdf1 	bl	800e9c0 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006dde:	f7ff ff44 	bl	8006c6a <getPosixTime>
 8006de2:	0002      	movs	r2, r0
 8006de4:	1dbb      	adds	r3, r7, #6
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	18d3      	adds	r3, r2, r3
 8006dea:	4a38      	ldr	r2, [pc, #224]	@ (8006ecc <Enter_Stop_Mode+0x140>)
 8006dec:	0011      	movs	r1, r2
 8006dee:	0018      	movs	r0, r3
 8006df0:	f7ff ff50 	bl	8006c94 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006df4:	4b35      	ldr	r3, [pc, #212]	@ (8006ecc <Enter_Stop_Mode+0x140>)
 8006df6:	4a36      	ldr	r2, [pc, #216]	@ (8006ed0 <Enter_Stop_Mode+0x144>)
 8006df8:	4931      	ldr	r1, [pc, #196]	@ (8006ec0 <Enter_Stop_Mode+0x134>)
 8006dfa:	2002      	movs	r0, #2
 8006dfc:	f007 fde0 	bl	800e9c0 <CreateLine>
  HAL_Delay(100);
 8006e00:	2064      	movs	r0, #100	@ 0x64
 8006e02:	f008 fa2b 	bl	800f25c <HAL_Delay>
  HAL_SuspendTick();
 8006e06:	f008 fa4d 	bl	800f2a4 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006e0a:	1dbb      	adds	r3, r7, #6
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f7ff ff70 	bl	8006cf4 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006e14:	2101      	movs	r1, #1
 8006e16:	2001      	movs	r0, #1
 8006e18:	f00e fad4 	bl	80153c4 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006e1c:	f001 faf4 	bl	8008408 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006e20:	f008 fa4e 	bl	800f2c0 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006e24:	1dbb      	adds	r3, r7, #6
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f002 fb0b 	bl	8009444 <sen5x_enable>
 8006e2e:	1e03      	subs	r3, r0, #0
 8006e30:	d01e      	beq.n	8006e70 <Enter_Stop_Mode+0xe4>
    showTime();
 8006e32:	f7ff fc5f 	bl	80066f4 <showTime>
    set_light_on_state();
 8006e36:	f003 f84d 	bl	8009ed4 <set_light_on_state>
    if (!userToggle) {
 8006e3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ed4 <Enter_Stop_Mode+0x148>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4053      	eors	r3, r2
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d013      	beq.n	8006e70 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006e48:	201c      	movs	r0, #28
 8006e4a:	f7ff ff53 	bl	8006cf4 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec4 <Enter_Stop_Mode+0x138>)
 8006e50:	491d      	ldr	r1, [pc, #116]	@ (8006ec8 <Enter_Stop_Mode+0x13c>)
 8006e52:	231c      	movs	r3, #28
 8006e54:	2003      	movs	r0, #3
 8006e56:	f007 fdb3 	bl	800e9c0 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	f00e fab1 	bl	80153c4 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006e62:	f001 fad1 	bl	8008408 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8006e66:	f008 fa2b 	bl	800f2c0 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	f002 fac8 	bl	8009400 <setsen5xReadTimer>
    }
  }
  showTime();
 8006e70:	f7ff fc40 	bl	80066f4 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006e74:	f001 ff5e 	bl	8008d34 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006e78:	f004 fe8c 	bl	800bb94 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f002 fad1 	bl	8009424 <setsen5xSamplecounter>
  setESPTimeStamp(4500);
 8006e82:	4b15      	ldr	r3, [pc, #84]	@ (8006ed8 <Enter_Stop_Mode+0x14c>)
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7fc fbed 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	f004 fe70 	bl	800bb70 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006e90:	2000      	movs	r0, #0
 8006e92:	f007 ff59 	bl	800ed48 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006e96:	2000      	movs	r0, #0
 8006e98:	f001 ff3a 	bl	8008d10 <setMICTimeStamp>
  ESPTransmitDone = false;
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006edc <Enter_Stop_Mode+0x150>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 3000;
 8006ea2:	f008 f9d1 	bl	800f248 <HAL_GetTick>
 8006ea6:	0003      	movs	r3, r0
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8006ee0 <Enter_Stop_Mode+0x154>)
 8006eaa:	189a      	adds	r2, r3, r2
 8006eac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <Enter_Stop_Mode+0x158>)
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	46c0      	nop			@ (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000c85 	.word	0x20000c85
 8006ebc:	08024674 	.word	0x08024674
 8006ec0:	0802468c 	.word	0x0802468c
 8006ec4:	08024690 	.word	0x08024690
 8006ec8:	08024538 	.word	0x08024538
 8006ecc:	2000099c 	.word	0x2000099c
 8006ed0:	080246b4 	.word	0x080246b4
 8006ed4:	20001c1e 	.word	0x20001c1e
 8006ed8:	00001194 	.word	0x00001194
 8006edc:	20000554 	.word	0x20000554
 8006ee0:	00000bb8 	.word	0x00000bb8
 8006ee4:	20000be8 	.word	0x20000be8

08006ee8 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	@ (8006f00 <InitClock+0x18>)
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	601a      	str	r2, [r3, #0]
}
 8006ef6:	46c0      	nop			@ (mov r8, r8)
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b002      	add	sp, #8
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			@ (mov r8, r8)
 8006f00:	20000994 	.word	0x20000994

08006f04 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	78db      	ldrb	r3, [r3, #3]
 8006f12:	001a      	movs	r2, r3
 8006f14:	0013      	movs	r3, r2
 8006f16:	025b      	lsls	r3, r3, #9
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	189b      	adds	r3, r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	189b      	adds	r3, r3, r2
 8006f22:	011a      	lsls	r2, r3, #4
 8006f24:	1ad2      	subs	r2, r2, r3
 8006f26:	01d3      	lsls	r3, r2, #7
 8006f28:	001a      	movs	r2, r3
 8006f2a:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e028      	b.n	8006f84 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4a53      	ldr	r2, [pc, #332]	@ (8007084 <makeTime+0x180>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	db21      	blt.n	8006f7e <makeTime+0x7a>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4a52      	ldr	r2, [pc, #328]	@ (8007088 <makeTime+0x184>)
 8006f3e:	4694      	mov	ip, r2
 8006f40:	4463      	add	r3, ip
 8006f42:	001a      	movs	r2, r3
 8006f44:	2303      	movs	r3, #3
 8006f46:	4013      	ands	r3, r2
 8006f48:	d119      	bne.n	8006f7e <makeTime+0x7a>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8007088 <makeTime+0x184>)
 8006f4e:	4694      	mov	ip, r2
 8006f50:	4463      	add	r3, ip
 8006f52:	2164      	movs	r1, #100	@ 0x64
 8006f54:	0018      	movs	r0, r3
 8006f56:	f7f9 fa95 	bl	8000484 <__aeabi_idivmod>
 8006f5a:	1e0b      	subs	r3, r1, #0
 8006f5c:	d10a      	bne.n	8006f74 <makeTime+0x70>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a49      	ldr	r2, [pc, #292]	@ (8007088 <makeTime+0x184>)
 8006f62:	4694      	mov	ip, r2
 8006f64:	4463      	add	r3, ip
 8006f66:	22c8      	movs	r2, #200	@ 0xc8
 8006f68:	0051      	lsls	r1, r2, #1
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f7f9 fa8a 	bl	8000484 <__aeabi_idivmod>
 8006f70:	1e0b      	subs	r3, r1, #0
 8006f72:	d104      	bne.n	8006f7e <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4a45      	ldr	r2, [pc, #276]	@ (800708c <makeTime+0x188>)
 8006f78:	4694      	mov	ip, r2
 8006f7a:	4463      	add	r3, ip
 8006f7c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	78db      	ldrb	r3, [r3, #3]
 8006f88:	001a      	movs	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	dbd0      	blt.n	8006f32 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006f90:	2301      	movs	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e03c      	b.n	8007010 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d125      	bne.n	8006fe8 <makeTime+0xe4>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	78db      	ldrb	r3, [r3, #3]
 8006fa0:	4a39      	ldr	r2, [pc, #228]	@ (8007088 <makeTime+0x184>)
 8006fa2:	4694      	mov	ip, r2
 8006fa4:	4463      	add	r3, ip
 8006fa6:	001a      	movs	r2, r3
 8006fa8:	2303      	movs	r3, #3
 8006faa:	4013      	ands	r3, r2
 8006fac:	d11c      	bne.n	8006fe8 <makeTime+0xe4>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	78db      	ldrb	r3, [r3, #3]
 8006fb2:	4a35      	ldr	r2, [pc, #212]	@ (8007088 <makeTime+0x184>)
 8006fb4:	4694      	mov	ip, r2
 8006fb6:	4463      	add	r3, ip
 8006fb8:	2164      	movs	r1, #100	@ 0x64
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7f9 fa62 	bl	8000484 <__aeabi_idivmod>
 8006fc0:	1e0b      	subs	r3, r1, #0
 8006fc2:	d10b      	bne.n	8006fdc <makeTime+0xd8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	78db      	ldrb	r3, [r3, #3]
 8006fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8007088 <makeTime+0x184>)
 8006fca:	4694      	mov	ip, r2
 8006fcc:	4463      	add	r3, ip
 8006fce:	22c8      	movs	r2, #200	@ 0xc8
 8006fd0:	0051      	lsls	r1, r2, #1
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7f9 fa56 	bl	8000484 <__aeabi_idivmod>
 8006fd8:	1e0b      	subs	r3, r1, #0
 8006fda:	d105      	bne.n	8006fe8 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4a2c      	ldr	r2, [pc, #176]	@ (8007090 <makeTime+0x18c>)
 8006fe0:	4694      	mov	ip, r2
 8006fe2:	4463      	add	r3, ip
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	e010      	b.n	800700a <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	4a29      	ldr	r2, [pc, #164]	@ (8007094 <makeTime+0x190>)
 8006fee:	5cd3      	ldrb	r3, [r2, r3]
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	0013      	movs	r3, r2
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	189b      	adds	r3, r3, r2
 8006ff8:	011a      	lsls	r2, r3, #4
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	0113      	lsls	r3, r2, #4
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	01db      	lsls	r3, r3, #7
 8007002:	001a      	movs	r2, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	189b      	adds	r3, r3, r2
 8007008:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	001a      	movs	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4293      	cmp	r3, r2
 800701a:	dbbc      	blt.n	8006f96 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	789b      	ldrb	r3, [r3, #2]
 8007020:	3b01      	subs	r3, #1
 8007022:	001a      	movs	r2, r3
 8007024:	0013      	movs	r3, r2
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	189b      	adds	r3, r3, r2
 800702a:	011a      	lsls	r2, r3, #4
 800702c:	1ad2      	subs	r2, r2, r3
 800702e:	0113      	lsls	r3, r2, #4
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	01db      	lsls	r3, r3, #7
 8007034:	001a      	movs	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	189b      	adds	r3, r3, r2
 800703a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	001a      	movs	r2, r3
 8007042:	0013      	movs	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	011a      	lsls	r2, r3, #4
 800704a:	1ad2      	subs	r2, r2, r3
 800704c:	0113      	lsls	r3, r2, #4
 800704e:	001a      	movs	r2, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	189b      	adds	r3, r3, r2
 8007054:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	001a      	movs	r2, r3
 800705c:	0013      	movs	r3, r2
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	001a      	movs	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	189b      	adds	r3, r3, r2
 800706a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	789b      	ldrb	r3, [r3, #2]
 8007070:	001a      	movs	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	189b      	adds	r3, r3, r2
 8007076:	60bb      	str	r3, [r7, #8]
  return seconds;
 8007078:	68bb      	ldr	r3, [r7, #8]
}
 800707a:	0018      	movs	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	b004      	add	sp, #16
 8007080:	bd80      	pop	{r7, pc}
 8007082:	46c0      	nop			@ (mov r8, r8)
 8007084:	fffff84f 	.word	0xfffff84f
 8007088:	000007b2 	.word	0x000007b2
 800708c:	00015180 	.word	0x00015180
 8007090:	00263b80 	.word	0x00263b80
 8007094:	08025c1c 	.word	0x08025c1c

08007098 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007098:	b590      	push	{r4, r7, lr}
 800709a:	b089      	sub	sp, #36	@ 0x24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	213c      	movs	r1, #60	@ 0x3c
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7f9 f8ff 	bl	80002b0 <__aeabi_uidivmod>
 80070b2:	000b      	movs	r3, r1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	213c      	movs	r1, #60	@ 0x3c
 80070be:	0018      	movs	r0, r3
 80070c0:	f7f9 f870 	bl	80001a4 <__udivsi3>
 80070c4:	0003      	movs	r3, r0
 80070c6:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	213c      	movs	r1, #60	@ 0x3c
 80070cc:	0018      	movs	r0, r3
 80070ce:	f7f9 f8ef 	bl	80002b0 <__aeabi_uidivmod>
 80070d2:	000b      	movs	r3, r1
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	213c      	movs	r1, #60	@ 0x3c
 80070de:	0018      	movs	r0, r3
 80070e0:	f7f9 f860 	bl	80001a4 <__udivsi3>
 80070e4:	0003      	movs	r3, r0
 80070e6:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2118      	movs	r1, #24
 80070ec:	0018      	movs	r0, r3
 80070ee:	f7f9 f8df 	bl	80002b0 <__aeabi_uidivmod>
 80070f2:	000b      	movs	r3, r1
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2118      	movs	r1, #24
 80070fe:	0018      	movs	r0, r3
 8007100:	f7f9 f850 	bl	80001a4 <__udivsi3>
 8007104:	0003      	movs	r3, r0
 8007106:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	3b01      	subs	r3, #1
 800710c:	2107      	movs	r1, #7
 800710e:	0018      	movs	r0, r3
 8007110:	f7f9 f8ce 	bl	80002b0 <__aeabi_uidivmod>
 8007114:	000b      	movs	r3, r1
 8007116:	b2db      	uxtb	r3, r3
 8007118:	3301      	adds	r3, #1
 800711a:	b2da      	uxtb	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	701a      	strb	r2, [r3, #0]
  year = 0;
 8007120:	231f      	movs	r3, #31
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
  days = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800712c:	e005      	b.n	800713a <breakPosixTime+0xa2>
    year++;
 800712e:	211f      	movs	r1, #31
 8007130:	187b      	adds	r3, r7, r1
 8007132:	781a      	ldrb	r2, [r3, #0]
 8007134:	187b      	adds	r3, r7, r1
 8007136:	3201      	adds	r2, #1
 8007138:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800713a:	241f      	movs	r4, #31
 800713c:	193b      	adds	r3, r7, r4
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	4a64      	ldr	r2, [pc, #400]	@ (80072d4 <breakPosixTime+0x23c>)
 8007142:	4694      	mov	ip, r2
 8007144:	4463      	add	r3, ip
 8007146:	001a      	movs	r2, r3
 8007148:	2303      	movs	r3, #3
 800714a:	4013      	ands	r3, r2
 800714c:	d119      	bne.n	8007182 <breakPosixTime+0xea>
 800714e:	193b      	adds	r3, r7, r4
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	4a60      	ldr	r2, [pc, #384]	@ (80072d4 <breakPosixTime+0x23c>)
 8007154:	4694      	mov	ip, r2
 8007156:	4463      	add	r3, ip
 8007158:	2164      	movs	r1, #100	@ 0x64
 800715a:	0018      	movs	r0, r3
 800715c:	f7f9 f992 	bl	8000484 <__aeabi_idivmod>
 8007160:	1e0b      	subs	r3, r1, #0
 8007162:	d10b      	bne.n	800717c <breakPosixTime+0xe4>
 8007164:	193b      	adds	r3, r7, r4
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	4a5a      	ldr	r2, [pc, #360]	@ (80072d4 <breakPosixTime+0x23c>)
 800716a:	4694      	mov	ip, r2
 800716c:	4463      	add	r3, ip
 800716e:	22c8      	movs	r2, #200	@ 0xc8
 8007170:	0051      	lsls	r1, r2, #1
 8007172:	0018      	movs	r0, r3
 8007174:	f7f9 f986 	bl	8000484 <__aeabi_idivmod>
 8007178:	1e0b      	subs	r3, r1, #0
 800717a:	d102      	bne.n	8007182 <breakPosixTime+0xea>
 800717c:	23b7      	movs	r3, #183	@ 0xb7
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	e001      	b.n	8007186 <breakPosixTime+0xee>
 8007182:	236e      	movs	r3, #110	@ 0x6e
 8007184:	33ff      	adds	r3, #255	@ 0xff
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	18d3      	adds	r3, r2, r3
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	429a      	cmp	r2, r3
 8007192:	d9cc      	bls.n	800712e <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	241f      	movs	r4, #31
 8007198:	193a      	adds	r2, r7, r4
 800719a:	7812      	ldrb	r2, [r2, #0]
 800719c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800719e:	193b      	adds	r3, r7, r4
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	4a4c      	ldr	r2, [pc, #304]	@ (80072d4 <breakPosixTime+0x23c>)
 80071a4:	4694      	mov	ip, r2
 80071a6:	4463      	add	r3, ip
 80071a8:	001a      	movs	r2, r3
 80071aa:	2303      	movs	r3, #3
 80071ac:	4013      	ands	r3, r2
 80071ae:	d119      	bne.n	80071e4 <breakPosixTime+0x14c>
 80071b0:	193b      	adds	r3, r7, r4
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	4a47      	ldr	r2, [pc, #284]	@ (80072d4 <breakPosixTime+0x23c>)
 80071b6:	4694      	mov	ip, r2
 80071b8:	4463      	add	r3, ip
 80071ba:	2164      	movs	r1, #100	@ 0x64
 80071bc:	0018      	movs	r0, r3
 80071be:	f7f9 f961 	bl	8000484 <__aeabi_idivmod>
 80071c2:	1e0b      	subs	r3, r1, #0
 80071c4:	d10b      	bne.n	80071de <breakPosixTime+0x146>
 80071c6:	193b      	adds	r3, r7, r4
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	4a42      	ldr	r2, [pc, #264]	@ (80072d4 <breakPosixTime+0x23c>)
 80071cc:	4694      	mov	ip, r2
 80071ce:	4463      	add	r3, ip
 80071d0:	22c8      	movs	r2, #200	@ 0xc8
 80071d2:	0051      	lsls	r1, r2, #1
 80071d4:	0018      	movs	r0, r3
 80071d6:	f7f9 f955 	bl	8000484 <__aeabi_idivmod>
 80071da:	1e0b      	subs	r3, r1, #0
 80071dc:	d102      	bne.n	80071e4 <breakPosixTime+0x14c>
 80071de:	23b7      	movs	r3, #183	@ 0xb7
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	e001      	b.n	80071e8 <breakPosixTime+0x150>
 80071e4:	236e      	movs	r3, #110	@ 0x6e
 80071e6:	33ff      	adds	r3, #255	@ 0xff
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	61bb      	str	r3, [r7, #24]

  days=0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]
  month=0;
 80071fa:	211e      	movs	r1, #30
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8007202:	231d      	movs	r3, #29
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	2200      	movs	r2, #0
 8007208:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800720a:	187b      	adds	r3, r7, r1
 800720c:	2200      	movs	r2, #0
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	e048      	b.n	80072a4 <breakPosixTime+0x20c>
    if (month==1) { // february
 8007212:	231e      	movs	r3, #30
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d12a      	bne.n	8007272 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800721c:	241f      	movs	r4, #31
 800721e:	193b      	adds	r3, r7, r4
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	4a2c      	ldr	r2, [pc, #176]	@ (80072d4 <breakPosixTime+0x23c>)
 8007224:	4694      	mov	ip, r2
 8007226:	4463      	add	r3, ip
 8007228:	001a      	movs	r2, r3
 800722a:	2303      	movs	r3, #3
 800722c:	4013      	ands	r3, r2
 800722e:	d11b      	bne.n	8007268 <breakPosixTime+0x1d0>
 8007230:	193b      	adds	r3, r7, r4
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4a27      	ldr	r2, [pc, #156]	@ (80072d4 <breakPosixTime+0x23c>)
 8007236:	4694      	mov	ip, r2
 8007238:	4463      	add	r3, ip
 800723a:	2164      	movs	r1, #100	@ 0x64
 800723c:	0018      	movs	r0, r3
 800723e:	f7f9 f921 	bl	8000484 <__aeabi_idivmod>
 8007242:	1e0b      	subs	r3, r1, #0
 8007244:	d10b      	bne.n	800725e <breakPosixTime+0x1c6>
 8007246:	193b      	adds	r3, r7, r4
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	4a22      	ldr	r2, [pc, #136]	@ (80072d4 <breakPosixTime+0x23c>)
 800724c:	4694      	mov	ip, r2
 800724e:	4463      	add	r3, ip
 8007250:	22c8      	movs	r2, #200	@ 0xc8
 8007252:	0051      	lsls	r1, r2, #1
 8007254:	0018      	movs	r0, r3
 8007256:	f7f9 f915 	bl	8000484 <__aeabi_idivmod>
 800725a:	1e0b      	subs	r3, r1, #0
 800725c:	d104      	bne.n	8007268 <breakPosixTime+0x1d0>
        monthLength=29;
 800725e:	231d      	movs	r3, #29
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	221d      	movs	r2, #29
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e00c      	b.n	8007282 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007268:	231d      	movs	r3, #29
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	221c      	movs	r2, #28
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	e007      	b.n	8007282 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007272:	231e      	movs	r3, #30
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	231d      	movs	r3, #29
 800727a:	18fb      	adds	r3, r7, r3
 800727c:	4916      	ldr	r1, [pc, #88]	@ (80072d8 <breakPosixTime+0x240>)
 800727e:	5c8a      	ldrb	r2, [r1, r2]
 8007280:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007282:	211d      	movs	r1, #29
 8007284:	187b      	adds	r3, r7, r1
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	429a      	cmp	r2, r3
 800728c:	d310      	bcc.n	80072b0 <breakPosixTime+0x218>
      time -= monthLength;
 800728e:	187b      	adds	r3, r7, r1
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007298:	211e      	movs	r1, #30
 800729a:	187b      	adds	r3, r7, r1
 800729c:	781a      	ldrb	r2, [r3, #0]
 800729e:	187b      	adds	r3, r7, r1
 80072a0:	3201      	adds	r2, #1
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	231e      	movs	r3, #30
 80072a6:	18fb      	adds	r3, r7, r3
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b0b      	cmp	r3, #11
 80072ac:	d9b1      	bls.n	8007212 <breakPosixTime+0x17a>
 80072ae:	e000      	b.n	80072b2 <breakPosixTime+0x21a>
    } else {
        break;
 80072b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 80072b2:	231e      	movs	r3, #30
 80072b4:	18fb      	adds	r3, r7, r3
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	3301      	adds	r3, #1
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	3301      	adds	r3, #1
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	709a      	strb	r2, [r3, #2]
}
 80072cc:	46c0      	nop			@ (mov r8, r8)
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b009      	add	sp, #36	@ 0x24
 80072d2:	bd90      	pop	{r4, r7, pc}
 80072d4:	000007b2 	.word	0x000007b2
 80072d8:	08025c1c 	.word	0x08025c1c

080072dc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80072e2:	003b      	movs	r3, r7
 80072e4:	0018      	movs	r0, r3
 80072e6:	2308      	movs	r3, #8
 80072e8:	001a      	movs	r2, r3
 80072ea:	2100      	movs	r1, #0
 80072ec:	f019 fa04 	bl	80206f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80072f0:	4b30      	ldr	r3, [pc, #192]	@ (80073b4 <MX_ADC_Init+0xd8>)
 80072f2:	4a31      	ldr	r2, [pc, #196]	@ (80073b8 <MX_ADC_Init+0xdc>)
 80072f4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80072f6:	4b2f      	ldr	r3, [pc, #188]	@ (80073b4 <MX_ADC_Init+0xd8>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80072fc:	4b2d      	ldr	r3, [pc, #180]	@ (80073b4 <MX_ADC_Init+0xd8>)
 80072fe:	22c0      	movs	r2, #192	@ 0xc0
 8007300:	0612      	lsls	r2, r2, #24
 8007302:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007304:	4b2b      	ldr	r3, [pc, #172]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007306:	2200      	movs	r2, #0
 8007308:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800730a:	4b2a      	ldr	r3, [pc, #168]	@ (80073b4 <MX_ADC_Init+0xd8>)
 800730c:	2200      	movs	r2, #0
 800730e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007310:	4b28      	ldr	r3, [pc, #160]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007312:	2201      	movs	r2, #1
 8007314:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007316:	4b27      	ldr	r3, [pc, #156]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007318:	2200      	movs	r2, #0
 800731a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800731c:	4b25      	ldr	r3, [pc, #148]	@ (80073b4 <MX_ADC_Init+0xd8>)
 800731e:	2220      	movs	r2, #32
 8007320:	2100      	movs	r1, #0
 8007322:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007324:	4b23      	ldr	r3, [pc, #140]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007326:	2221      	movs	r2, #33	@ 0x21
 8007328:	2101      	movs	r1, #1
 800732a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800732c:	4b21      	ldr	r3, [pc, #132]	@ (80073b4 <MX_ADC_Init+0xd8>)
 800732e:	2200      	movs	r2, #0
 8007330:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007332:	4b20      	ldr	r3, [pc, #128]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007334:	22c2      	movs	r2, #194	@ 0xc2
 8007336:	32ff      	adds	r2, #255	@ 0xff
 8007338:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800733a:	4b1e      	ldr	r3, [pc, #120]	@ (80073b4 <MX_ADC_Init+0xd8>)
 800733c:	222c      	movs	r2, #44	@ 0x2c
 800733e:	2100      	movs	r1, #0
 8007340:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007342:	4b1c      	ldr	r3, [pc, #112]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007344:	2204      	movs	r2, #4
 8007346:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007348:	4b1a      	ldr	r3, [pc, #104]	@ (80073b4 <MX_ADC_Init+0xd8>)
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800734e:	4b19      	ldr	r3, [pc, #100]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007350:	2200      	movs	r2, #0
 8007352:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007354:	4b17      	ldr	r3, [pc, #92]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007356:	2200      	movs	r2, #0
 8007358:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800735a:	4b16      	ldr	r3, [pc, #88]	@ (80073b4 <MX_ADC_Init+0xd8>)
 800735c:	2200      	movs	r2, #0
 800735e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007360:	4b14      	ldr	r3, [pc, #80]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007362:	0018      	movs	r0, r3
 8007364:	f007 ffd8 	bl	800f318 <HAL_ADC_Init>
 8007368:	1e03      	subs	r3, r0, #0
 800736a:	d001      	beq.n	8007370 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800736c:	f001 f992 	bl	8008694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007370:	003b      	movs	r3, r7
 8007372:	4a12      	ldr	r2, [pc, #72]	@ (80073bc <MX_ADC_Init+0xe0>)
 8007374:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007376:	003b      	movs	r3, r7
 8007378:	2280      	movs	r2, #128	@ 0x80
 800737a:	0152      	lsls	r2, r2, #5
 800737c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800737e:	003a      	movs	r2, r7
 8007380:	4b0c      	ldr	r3, [pc, #48]	@ (80073b4 <MX_ADC_Init+0xd8>)
 8007382:	0011      	movs	r1, r2
 8007384:	0018      	movs	r0, r3
 8007386:	f008 fa37 	bl	800f7f8 <HAL_ADC_ConfigChannel>
 800738a:	1e03      	subs	r3, r0, #0
 800738c:	d001      	beq.n	8007392 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800738e:	f001 f981 	bl	8008694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007392:	003b      	movs	r3, r7
 8007394:	4a0a      	ldr	r2, [pc, #40]	@ (80073c0 <MX_ADC_Init+0xe4>)
 8007396:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007398:	003a      	movs	r2, r7
 800739a:	4b06      	ldr	r3, [pc, #24]	@ (80073b4 <MX_ADC_Init+0xd8>)
 800739c:	0011      	movs	r1, r2
 800739e:	0018      	movs	r0, r3
 80073a0:	f008 fa2a 	bl	800f7f8 <HAL_ADC_ConfigChannel>
 80073a4:	1e03      	subs	r3, r0, #0
 80073a6:	d001      	beq.n	80073ac <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80073a8:	f001 f974 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80073ac:	46c0      	nop			@ (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b002      	add	sp, #8
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	200009b4 	.word	0x200009b4
 80073b8:	40012400 	.word	0x40012400
 80073bc:	38004000 	.word	0x38004000
 80073c0:	3c008000 	.word	0x3c008000

080073c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80073c4:	b590      	push	{r4, r7, lr}
 80073c6:	b089      	sub	sp, #36	@ 0x24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073cc:	240c      	movs	r4, #12
 80073ce:	193b      	adds	r3, r7, r4
 80073d0:	0018      	movs	r0, r3
 80073d2:	2314      	movs	r3, #20
 80073d4:	001a      	movs	r2, r3
 80073d6:	2100      	movs	r1, #0
 80073d8:	f019 f98e 	bl	80206f8 <memset>
  if(adcHandle->Instance==ADC1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a14      	ldr	r2, [pc, #80]	@ (8007434 <HAL_ADC_MspInit+0x70>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d121      	bne.n	800742a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80073e6:	4b14      	ldr	r3, [pc, #80]	@ (8007438 <HAL_ADC_MspInit+0x74>)
 80073e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ea:	4b13      	ldr	r3, [pc, #76]	@ (8007438 <HAL_ADC_MspInit+0x74>)
 80073ec:	2180      	movs	r1, #128	@ 0x80
 80073ee:	0089      	lsls	r1, r1, #2
 80073f0:	430a      	orrs	r2, r1
 80073f2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073f4:	4b10      	ldr	r3, [pc, #64]	@ (8007438 <HAL_ADC_MspInit+0x74>)
 80073f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007438 <HAL_ADC_MspInit+0x74>)
 80073fa:	2104      	movs	r1, #4
 80073fc:	430a      	orrs	r2, r1
 80073fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007400:	4b0d      	ldr	r3, [pc, #52]	@ (8007438 <HAL_ADC_MspInit+0x74>)
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	2204      	movs	r2, #4
 8007406:	4013      	ands	r3, r2
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800740c:	193b      	adds	r3, r7, r4
 800740e:	2230      	movs	r2, #48	@ 0x30
 8007410:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007412:	193b      	adds	r3, r7, r4
 8007414:	2203      	movs	r2, #3
 8007416:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007418:	193b      	adds	r3, r7, r4
 800741a:	2200      	movs	r2, #0
 800741c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800741e:	193b      	adds	r3, r7, r4
 8007420:	4a06      	ldr	r2, [pc, #24]	@ (800743c <HAL_ADC_MspInit+0x78>)
 8007422:	0019      	movs	r1, r3
 8007424:	0010      	movs	r0, r2
 8007426:	f009 f805 	bl	8010434 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800742a:	46c0      	nop			@ (mov r8, r8)
 800742c:	46bd      	mov	sp, r7
 800742e:	b009      	add	sp, #36	@ 0x24
 8007430:	bd90      	pop	{r4, r7, pc}
 8007432:	46c0      	nop			@ (mov r8, r8)
 8007434:	40012400 	.word	0x40012400
 8007438:	40021000 	.word	0x40021000
 800743c:	50000800 	.word	0x50000800

08007440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007446:	4b10      	ldr	r3, [pc, #64]	@ (8007488 <MX_DMA_Init+0x48>)
 8007448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800744a:	4b0f      	ldr	r3, [pc, #60]	@ (8007488 <MX_DMA_Init+0x48>)
 800744c:	2101      	movs	r1, #1
 800744e:	430a      	orrs	r2, r1
 8007450:	631a      	str	r2, [r3, #48]	@ 0x30
 8007452:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <MX_DMA_Init+0x48>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007456:	2201      	movs	r2, #1
 8007458:	4013      	ands	r3, r2
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	200a      	movs	r0, #10
 8007464:	f008 fb94 	bl	800fb90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007468:	200a      	movs	r0, #10
 800746a:	f008 fba6 	bl	800fbba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800746e:	2200      	movs	r2, #0
 8007470:	2103      	movs	r1, #3
 8007472:	200b      	movs	r0, #11
 8007474:	f008 fb8c 	bl	800fb90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007478:	200b      	movs	r0, #11
 800747a:	f008 fb9e 	bl	800fbba <HAL_NVIC_EnableIRQ>

}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	46bd      	mov	sp, r7
 8007482:	b002      	add	sp, #8
 8007484:	bd80      	pop	{r7, pc}
 8007486:	46c0      	nop			@ (mov r8, r8)
 8007488:	40021000 	.word	0x40021000

0800748c <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800748c:	b590      	push	{r4, r7, lr}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	1dbb      	adds	r3, r7, #6
 8007498:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800749a:	4b17      	ldr	r3, [pc, #92]	@ (80074f8 <WriteUint8ArrayEeprom+0x6c>)
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 80074a0:	f008 ff08 	bl	80102b4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 80074a4:	2316      	movs	r3, #22
 80074a6:	18fb      	adds	r3, r7, r3
 80074a8:	2200      	movs	r2, #0
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	e015      	b.n	80074da <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 80074ae:	4b12      	ldr	r3, [pc, #72]	@ (80074f8 <WriteUint8ArrayEeprom+0x6c>)
 80074b0:	6819      	ldr	r1, [r3, #0]
 80074b2:	2416      	movs	r4, #22
 80074b4:	193b      	adds	r3, r7, r4
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	18d3      	adds	r3, r2, r3
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	001a      	movs	r2, r3
 80074c0:	2000      	movs	r0, #0
 80074c2:	f008 ff5f 	bl	8010384 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 80074c6:	4b0c      	ldr	r3, [pc, #48]	@ (80074f8 <WriteUint8ArrayEeprom+0x6c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <WriteUint8ArrayEeprom+0x6c>)
 80074ce:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 80074d0:	193b      	adds	r3, r7, r4
 80074d2:	881a      	ldrh	r2, [r3, #0]
 80074d4:	193b      	adds	r3, r7, r4
 80074d6:	3201      	adds	r2, #1
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	2316      	movs	r3, #22
 80074dc:	18fa      	adds	r2, r7, r3
 80074de:	1dbb      	adds	r3, r7, #6
 80074e0:	8812      	ldrh	r2, [r2, #0]
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d3e2      	bcc.n	80074ae <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80074e8:	f008 ff12 	bl	8010310 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80074ec:	4b02      	ldr	r3, [pc, #8]	@ (80074f8 <WriteUint8ArrayEeprom+0x6c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
}
 80074f0:	0018      	movs	r0, r3
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b007      	add	sp, #28
 80074f6:	bd90      	pop	{r4, r7, pc}
 80074f8:	20000a10 	.word	0x20000a10

080074fc <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	0019      	movs	r1, r3
 8007508:	1dbb      	adds	r3, r7, #6
 800750a:	801a      	strh	r2, [r3, #0]
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	1c0a      	adds	r2, r1, #0
 8007510:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 8007512:	1dba      	adds	r2, r7, #6
 8007514:	1d3b      	adds	r3, r7, #4
 8007516:	8812      	ldrh	r2, [r2, #0]
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d806      	bhi.n	800752c <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800751e:	1dbb      	adds	r3, r7, #6
 8007520:	881a      	ldrh	r2, [r3, #0]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	0018      	movs	r0, r3
 8007528:	f7ff ffb0 	bl	800748c <WriteUint8ArrayEeprom>
    }
}
 800752c:	46c0      	nop			@ (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	b004      	add	sp, #16
 8007532:	bd80      	pop	{r7, pc}

08007534 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	1dbb      	adds	r3, r7, #6
 8007540:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007542:	2316      	movs	r3, #22
 8007544:	18fb      	adds	r3, r7, r3
 8007546:	2200      	movs	r2, #0
 8007548:	801a      	strh	r2, [r3, #0]
 800754a:	e010      	b.n	800756e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800754c:	2016      	movs	r0, #22
 800754e:	183b      	adds	r3, r7, r0
 8007550:	881a      	ldrh	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	18d3      	adds	r3, r2, r3
 8007556:	0019      	movs	r1, r3
 8007558:	183b      	adds	r3, r7, r0
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	18d3      	adds	r3, r2, r3
 8007560:	780a      	ldrb	r2, [r1, #0]
 8007562:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007564:	183b      	adds	r3, r7, r0
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	183b      	adds	r3, r7, r0
 800756a:	3201      	adds	r2, #1
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	2316      	movs	r3, #22
 8007570:	18fa      	adds	r2, r7, r3
 8007572:	1dbb      	adds	r3, r7, #6
 8007574:	8812      	ldrh	r2, [r2, #0]
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d3e7      	bcc.n	800754c <ReadUint8ArrayEEprom+0x18>
    }
}
 800757c:	46c0      	nop			@ (mov r8, r8)
 800757e:	46c0      	nop			@ (mov r8, r8)
 8007580:	46bd      	mov	sp, r7
 8007582:	b006      	add	sp, #24
 8007584:	bd80      	pop	{r7, pc}

08007586 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8007586:	b590      	push	{r4, r7, lr}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	000a      	movs	r2, r1
 8007590:	1cbb      	adds	r3, r7, #2
 8007592:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8007594:	f008 fe8e 	bl	80102b4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8007598:	230e      	movs	r3, #14
 800759a:	18fb      	adds	r3, r7, r3
 800759c:	2200      	movs	r2, #0
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e00c      	b.n	80075bc <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 80075a2:	240e      	movs	r4, #14
 80075a4:	193b      	adds	r3, r7, r4
 80075a6:	881a      	ldrh	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	18d3      	adds	r3, r2, r3
 80075ac:	0018      	movs	r0, r3
 80075ae:	f008 febd 	bl	801032c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 80075b2:	193b      	adds	r3, r7, r4
 80075b4:	193a      	adds	r2, r7, r4
 80075b6:	8812      	ldrh	r2, [r2, #0]
 80075b8:	3204      	adds	r2, #4
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	230e      	movs	r3, #14
 80075be:	18fa      	adds	r2, r7, r3
 80075c0:	1cbb      	adds	r3, r7, #2
 80075c2:	8812      	ldrh	r2, [r2, #0]
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d3eb      	bcc.n	80075a2 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80075ca:	f008 fea1 	bl	8010310 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 80075ce:	46c0      	nop			@ (mov r8, r8)
 80075d0:	46bd      	mov	sp, r7
 80075d2:	b005      	add	sp, #20
 80075d4:	bd90      	pop	{r4, r7, pc}
	...

080075d8 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80075e8:	d901      	bls.n	80075ee <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80075ea:	237f      	movs	r3, #127	@ 0x7f
 80075ec:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80075ee:	2017      	movs	r0, #23
 80075f0:	183b      	adds	r3, r7, r0
 80075f2:	490d      	ldr	r1, [pc, #52]	@ (8007628 <accessLUT10log10+0x50>)
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	188a      	adds	r2, r1, r2
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80075fc:	0001      	movs	r1, r0
 80075fe:	187b      	adds	r3, r7, r1
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2206      	movs	r2, #6
 8007604:	4113      	asrs	r3, r2
 8007606:	001a      	movs	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800760c:	187b      	adds	r3, r7, r1
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2106      	movs	r1, #6
 8007616:	408b      	lsls	r3, r1
 8007618:	1ad2      	subs	r2, r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	46c0      	nop			@ (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	b006      	add	sp, #24
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			@ (mov r8, r8)
 8007628:	08025c28 	.word	0x08025c28

0800762c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800762c:	b5b0      	push	{r4, r5, r7, lr}
 800762e:	b090      	sub	sp, #64	@ 0x40
 8007630:	af00      	add	r7, sp, #0
 8007632:	6138      	str	r0, [r7, #16]
 8007634:	6179      	str	r1, [r7, #20]
 8007636:	60fa      	str	r2, [r7, #12]
 8007638:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800763a:	2308      	movs	r3, #8
 800763c:	001a      	movs	r2, r3
 800763e:	3a20      	subs	r2, #32
 8007640:	2a00      	cmp	r2, #0
 8007642:	db03      	blt.n	800764c <efficient10log10+0x20>
 8007644:	2101      	movs	r1, #1
 8007646:	4091      	lsls	r1, r2
 8007648:	000d      	movs	r5, r1
 800764a:	e008      	b.n	800765e <efficient10log10+0x32>
 800764c:	2220      	movs	r2, #32
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	2101      	movs	r1, #1
 8007652:	40d1      	lsrs	r1, r2
 8007654:	000a      	movs	r2, r1
 8007656:	2100      	movs	r1, #0
 8007658:	4099      	lsls	r1, r3
 800765a:	000d      	movs	r5, r1
 800765c:	4315      	orrs	r5, r2
 800765e:	2201      	movs	r2, #1
 8007660:	409a      	lsls	r2, r3
 8007662:	0014      	movs	r4, r2
 8007664:	2201      	movs	r2, #1
 8007666:	4252      	negs	r2, r2
 8007668:	17d3      	asrs	r3, r2, #31
 800766a:	1912      	adds	r2, r2, r4
 800766c:	416b      	adcs	r3, r5
 800766e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007670:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8007672:	2336      	movs	r3, #54	@ 0x36
 8007674:	2208      	movs	r2, #8
 8007676:	189b      	adds	r3, r3, r2
 8007678:	19db      	adds	r3, r3, r7
 800767a:	2200      	movs	r2, #0
 800767c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800767e:	e017      	b.n	80076b0 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	07db      	lsls	r3, r3, #31
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	0852      	lsrs	r2, r2, #1
 8007688:	603a      	str	r2, [r7, #0]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	431a      	orrs	r2, r3
 800768e:	603a      	str	r2, [r7, #0]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	085b      	lsrs	r3, r3, #1
 8007694:	607b      	str	r3, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	687c      	ldr	r4, [r7, #4]
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	617c      	str	r4, [r7, #20]
        bShift++;
 800769e:	2136      	movs	r1, #54	@ 0x36
 80076a0:	2008      	movs	r0, #8
 80076a2:	180b      	adds	r3, r1, r0
 80076a4:	19db      	adds	r3, r3, r7
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	180b      	adds	r3, r1, r0
 80076aa:	19db      	adds	r3, r3, r7
 80076ac:	3201      	adds	r2, #1
 80076ae:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d8e3      	bhi.n	8007680 <efficient10log10+0x54>
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076bc:	429a      	cmp	r2, r3
 80076be:	d103      	bne.n	80076c8 <efficient10log10+0x9c>
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d8db      	bhi.n	8007680 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	2308      	movs	r3, #8
 80076cc:	3b01      	subs	r3, #1
 80076ce:	2101      	movs	r1, #1
 80076d0:	4099      	lsls	r1, r3
 80076d2:	000b      	movs	r3, r1
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80076e0:	231c      	movs	r3, #28
 80076e2:	2408      	movs	r4, #8
 80076e4:	191b      	adds	r3, r3, r4
 80076e6:	19da      	adds	r2, r3, r7
 80076e8:	2320      	movs	r3, #32
 80076ea:	191b      	adds	r3, r3, r4
 80076ec:	19d9      	adds	r1, r3, r7
 80076ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f0:	0018      	movs	r0, r3
 80076f2:	f7ff ff71 	bl	80075d8 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80076f6:	2215      	movs	r2, #21
 80076f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fa:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80076fc:	2036      	movs	r0, #54	@ 0x36
 80076fe:	1902      	adds	r2, r0, r4
 8007700:	19d2      	adds	r2, r2, r7
 8007702:	8812      	ldrh	r2, [r2, #0]
 8007704:	2103      	movs	r1, #3
 8007706:	434a      	muls	r2, r1
 8007708:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800770a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800770c:	0021      	movs	r1, r4
 800770e:	1843      	adds	r3, r0, r1
 8007710:	19db      	adds	r3, r3, r7
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	2201      	movs	r2, #1
 8007716:	4353      	muls	r3, r2
 8007718:	2203      	movs	r2, #3
 800771a:	4113      	asrs	r3, r2
 800771c:	001a      	movs	r2, r3
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007722:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007724:	2314      	movs	r3, #20
 8007726:	185b      	adds	r3, r3, r1
 8007728:	19da      	adds	r2, r3, r7
 800772a:	2318      	movs	r3, #24
 800772c:	185b      	adds	r3, r3, r1
 800772e:	19db      	adds	r3, r3, r7
 8007730:	0011      	movs	r1, r2
 8007732:	0018      	movs	r0, r3
 8007734:	f000 f80a 	bl	800774c <correctIntFracNumber>
    integerPart[0] = intPart;
 8007738:	6a3a      	ldr	r2, [r7, #32]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	46c0      	nop			@ (mov r8, r8)
 8007746:	46bd      	mov	sp, r7
 8007748:	b010      	add	sp, #64	@ 0x40
 800774a:	bdb0      	pop	{r4, r5, r7, pc}

0800774c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8007756:	e00a      	b.n	800776e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3b0a      	subs	r3, #10
 8007768:	001a      	movs	r2, r3
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b09      	cmp	r3, #9
 8007774:	dcf0      	bgt.n	8007758 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8007776:	e00a      	b.n	800778e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	1e5a      	subs	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	330a      	adds	r3, #10
 8007788:	001a      	movs	r2, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3309      	adds	r3, #9
 8007794:	dbf0      	blt.n	8007778 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	da0f      	bge.n	80077be <correctIntFracNumber+0x72>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dd0b      	ble.n	80077be <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3b0a      	subs	r3, #10
 80077b6:	001a      	movs	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80077bc:	e012      	b.n	80077e4 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dd0e      	ble.n	80077e4 <correctIntFracNumber+0x98>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da0a      	bge.n	80077e4 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	1e5a      	subs	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330a      	adds	r3, #10
 80077de:	001a      	movs	r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	46c0      	nop			@ (mov r8, r8)
 80077e6:	46bd      	mov	sp, r7
 80077e8:	b002      	add	sp, #8
 80077ea:	bd80      	pop	{r7, pc}

080077ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80077ec:	b590      	push	{r4, r7, lr}
 80077ee:	b08b      	sub	sp, #44	@ 0x2c
 80077f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f2:	2414      	movs	r4, #20
 80077f4:	193b      	adds	r3, r7, r4
 80077f6:	0018      	movs	r0, r3
 80077f8:	2314      	movs	r3, #20
 80077fa:	001a      	movs	r2, r3
 80077fc:	2100      	movs	r1, #0
 80077fe:	f018 ff7b 	bl	80206f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007802:	4b8a      	ldr	r3, [pc, #552]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007806:	4b89      	ldr	r3, [pc, #548]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007808:	2104      	movs	r1, #4
 800780a:	430a      	orrs	r2, r1
 800780c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800780e:	4b87      	ldr	r3, [pc, #540]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007812:	2204      	movs	r2, #4
 8007814:	4013      	ands	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800781a:	4b84      	ldr	r3, [pc, #528]	@ (8007a2c <MX_GPIO_Init+0x240>)
 800781c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781e:	4b83      	ldr	r3, [pc, #524]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007820:	2180      	movs	r1, #128	@ 0x80
 8007822:	430a      	orrs	r2, r1
 8007824:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007826:	4b81      	ldr	r3, [pc, #516]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	2280      	movs	r2, #128	@ 0x80
 800782c:	4013      	ands	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007832:	4b7e      	ldr	r3, [pc, #504]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007836:	4b7d      	ldr	r3, [pc, #500]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007838:	2101      	movs	r1, #1
 800783a:	430a      	orrs	r2, r1
 800783c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800783e:	4b7b      	ldr	r3, [pc, #492]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007842:	2201      	movs	r2, #1
 8007844:	4013      	ands	r3, r2
 8007846:	60bb      	str	r3, [r7, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800784a:	4b78      	ldr	r3, [pc, #480]	@ (8007a2c <MX_GPIO_Init+0x240>)
 800784c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784e:	4b77      	ldr	r3, [pc, #476]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007850:	2102      	movs	r1, #2
 8007852:	430a      	orrs	r2, r1
 8007854:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007856:	4b75      	ldr	r3, [pc, #468]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785a:	2202      	movs	r2, #2
 800785c:	4013      	ands	r3, r2
 800785e:	607b      	str	r3, [r7, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007862:	4b72      	ldr	r3, [pc, #456]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007866:	4b71      	ldr	r3, [pc, #452]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007868:	2108      	movs	r1, #8
 800786a:	430a      	orrs	r2, r1
 800786c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800786e:	4b6f      	ldr	r3, [pc, #444]	@ (8007a2c <MX_GPIO_Init+0x240>)
 8007870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007872:	2208      	movs	r2, #8
 8007874:	4013      	ands	r3, r2
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800787a:	4b6d      	ldr	r3, [pc, #436]	@ (8007a30 <MX_GPIO_Init+0x244>)
 800787c:	2201      	movs	r2, #1
 800787e:	2101      	movs	r1, #1
 8007880:	0018      	movs	r0, r3
 8007882:	f008 ff72 	bl	801076a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8007886:	4b6a      	ldr	r3, [pc, #424]	@ (8007a30 <MX_GPIO_Init+0x244>)
 8007888:	2200      	movs	r2, #0
 800788a:	2102      	movs	r1, #2
 800788c:	0018      	movs	r0, r3
 800788e:	f008 ff6c 	bl	801076a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007892:	4968      	ldr	r1, [pc, #416]	@ (8007a34 <MX_GPIO_Init+0x248>)
 8007894:	4b68      	ldr	r3, [pc, #416]	@ (8007a38 <MX_GPIO_Init+0x24c>)
 8007896:	2201      	movs	r2, #1
 8007898:	0018      	movs	r0, r3
 800789a:	f008 ff66 	bl	801076a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800789e:	2380      	movs	r3, #128	@ 0x80
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	4866      	ldr	r0, [pc, #408]	@ (8007a3c <MX_GPIO_Init+0x250>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	0019      	movs	r1, r3
 80078a8:	f008 ff5f 	bl	801076a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80078ac:	2380      	movs	r3, #128	@ 0x80
 80078ae:	015b      	lsls	r3, r3, #5
 80078b0:	4862      	ldr	r0, [pc, #392]	@ (8007a3c <MX_GPIO_Init+0x250>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	0019      	movs	r1, r3
 80078b6:	f008 ff58 	bl	801076a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80078ba:	193b      	adds	r3, r7, r4
 80078bc:	4a60      	ldr	r2, [pc, #384]	@ (8007a40 <MX_GPIO_Init+0x254>)
 80078be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078c0:	193b      	adds	r3, r7, r4
 80078c2:	2203      	movs	r2, #3
 80078c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c6:	193b      	adds	r3, r7, r4
 80078c8:	2200      	movs	r2, #0
 80078ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078cc:	193b      	adds	r3, r7, r4
 80078ce:	4a5b      	ldr	r2, [pc, #364]	@ (8007a3c <MX_GPIO_Init+0x250>)
 80078d0:	0019      	movs	r1, r3
 80078d2:	0010      	movs	r0, r2
 80078d4:	f008 fdae 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80078d8:	193b      	adds	r3, r7, r4
 80078da:	2203      	movs	r2, #3
 80078dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078de:	193b      	adds	r3, r7, r4
 80078e0:	2201      	movs	r2, #1
 80078e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e4:	193b      	adds	r3, r7, r4
 80078e6:	2200      	movs	r2, #0
 80078e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ea:	193b      	adds	r3, r7, r4
 80078ec:	2200      	movs	r2, #0
 80078ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80078f0:	193b      	adds	r3, r7, r4
 80078f2:	4a4f      	ldr	r2, [pc, #316]	@ (8007a30 <MX_GPIO_Init+0x244>)
 80078f4:	0019      	movs	r1, r3
 80078f6:	0010      	movs	r0, r2
 80078f8:	f008 fd9c 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80078fc:	193b      	adds	r3, r7, r4
 80078fe:	2270      	movs	r2, #112	@ 0x70
 8007900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007902:	193b      	adds	r3, r7, r4
 8007904:	2203      	movs	r2, #3
 8007906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007908:	193b      	adds	r3, r7, r4
 800790a:	2200      	movs	r2, #0
 800790c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800790e:	193a      	adds	r2, r7, r4
 8007910:	23a0      	movs	r3, #160	@ 0xa0
 8007912:	05db      	lsls	r3, r3, #23
 8007914:	0011      	movs	r1, r2
 8007916:	0018      	movs	r0, r3
 8007918:	f008 fd8c 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800791c:	193b      	adds	r3, r7, r4
 800791e:	22c0      	movs	r2, #192	@ 0xc0
 8007920:	0052      	lsls	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007924:	193b      	adds	r3, r7, r4
 8007926:	2200      	movs	r2, #0
 8007928:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792a:	193b      	adds	r3, r7, r4
 800792c:	2200      	movs	r2, #0
 800792e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007930:	193a      	adds	r2, r7, r4
 8007932:	23a0      	movs	r3, #160	@ 0xa0
 8007934:	05db      	lsls	r3, r3, #23
 8007936:	0011      	movs	r1, r2
 8007938:	0018      	movs	r0, r3
 800793a:	f008 fd7b 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800793e:	193b      	adds	r3, r7, r4
 8007940:	4a3c      	ldr	r2, [pc, #240]	@ (8007a34 <MX_GPIO_Init+0x248>)
 8007942:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007944:	193b      	adds	r3, r7, r4
 8007946:	2201      	movs	r2, #1
 8007948:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794a:	193b      	adds	r3, r7, r4
 800794c:	2200      	movs	r2, #0
 800794e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007950:	193b      	adds	r3, r7, r4
 8007952:	2200      	movs	r2, #0
 8007954:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007956:	193b      	adds	r3, r7, r4
 8007958:	4a37      	ldr	r2, [pc, #220]	@ (8007a38 <MX_GPIO_Init+0x24c>)
 800795a:	0019      	movs	r1, r3
 800795c:	0010      	movs	r0, r2
 800795e:	f008 fd69 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8007962:	193b      	adds	r3, r7, r4
 8007964:	4a37      	ldr	r2, [pc, #220]	@ (8007a44 <MX_GPIO_Init+0x258>)
 8007966:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007968:	193b      	adds	r3, r7, r4
 800796a:	2203      	movs	r2, #3
 800796c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800796e:	193b      	adds	r3, r7, r4
 8007970:	2200      	movs	r2, #0
 8007972:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007974:	193b      	adds	r3, r7, r4
 8007976:	4a30      	ldr	r2, [pc, #192]	@ (8007a38 <MX_GPIO_Init+0x24c>)
 8007978:	0019      	movs	r1, r3
 800797a:	0010      	movs	r0, r2
 800797c:	f008 fd5a 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007980:	0021      	movs	r1, r4
 8007982:	187b      	adds	r3, r7, r1
 8007984:	2280      	movs	r2, #128	@ 0x80
 8007986:	0092      	lsls	r2, r2, #2
 8007988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800798a:	000c      	movs	r4, r1
 800798c:	193b      	adds	r3, r7, r4
 800798e:	2200      	movs	r2, #0
 8007990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007992:	193b      	adds	r3, r7, r4
 8007994:	2200      	movs	r2, #0
 8007996:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007998:	193b      	adds	r3, r7, r4
 800799a:	4a28      	ldr	r2, [pc, #160]	@ (8007a3c <MX_GPIO_Init+0x250>)
 800799c:	0019      	movs	r1, r3
 800799e:	0010      	movs	r0, r2
 80079a0:	f008 fd48 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80079a4:	193b      	adds	r3, r7, r4
 80079a6:	2280      	movs	r2, #128	@ 0x80
 80079a8:	0212      	lsls	r2, r2, #8
 80079aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80079ac:	193b      	adds	r3, r7, r4
 80079ae:	2288      	movs	r2, #136	@ 0x88
 80079b0:	0352      	lsls	r2, r2, #13
 80079b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079b4:	193b      	adds	r3, r7, r4
 80079b6:	2200      	movs	r2, #0
 80079b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80079ba:	193a      	adds	r2, r7, r4
 80079bc:	23a0      	movs	r3, #160	@ 0xa0
 80079be:	05db      	lsls	r3, r3, #23
 80079c0:	0011      	movs	r1, r2
 80079c2:	0018      	movs	r0, r3
 80079c4:	f008 fd36 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 80079c8:	0021      	movs	r1, r4
 80079ca:	187b      	adds	r3, r7, r1
 80079cc:	22c0      	movs	r2, #192	@ 0xc0
 80079ce:	0152      	lsls	r2, r2, #5
 80079d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079d2:	000c      	movs	r4, r1
 80079d4:	193b      	adds	r3, r7, r4
 80079d6:	2201      	movs	r2, #1
 80079d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079da:	193b      	adds	r3, r7, r4
 80079dc:	2200      	movs	r2, #0
 80079de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079e0:	193b      	adds	r3, r7, r4
 80079e2:	2200      	movs	r2, #0
 80079e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079e6:	193b      	adds	r3, r7, r4
 80079e8:	4a14      	ldr	r2, [pc, #80]	@ (8007a3c <MX_GPIO_Init+0x250>)
 80079ea:	0019      	movs	r1, r3
 80079ec:	0010      	movs	r0, r2
 80079ee:	f008 fd21 	bl	8010434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80079f2:	0021      	movs	r1, r4
 80079f4:	187b      	adds	r3, r7, r1
 80079f6:	2204      	movs	r2, #4
 80079f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079fa:	187b      	adds	r3, r7, r1
 80079fc:	2200      	movs	r2, #0
 80079fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a00:	187b      	adds	r3, r7, r1
 8007a02:	2201      	movs	r2, #1
 8007a04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007a06:	187b      	adds	r3, r7, r1
 8007a08:	4a0f      	ldr	r2, [pc, #60]	@ (8007a48 <MX_GPIO_Init+0x25c>)
 8007a0a:	0019      	movs	r1, r3
 8007a0c:	0010      	movs	r0, r2
 8007a0e:	f008 fd11 	bl	8010434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007a12:	2200      	movs	r2, #0
 8007a14:	2100      	movs	r1, #0
 8007a16:	2007      	movs	r0, #7
 8007a18:	f008 f8ba 	bl	800fb90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007a1c:	2007      	movs	r0, #7
 8007a1e:	f008 f8cc 	bl	800fbba <HAL_NVIC_EnableIRQ>

}
 8007a22:	46c0      	nop			@ (mov r8, r8)
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b00b      	add	sp, #44	@ 0x2c
 8007a28:	bd90      	pop	{r4, r7, pc}
 8007a2a:	46c0      	nop			@ (mov r8, r8)
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	50001c00 	.word	0x50001c00
 8007a34:	00000301 	.word	0x00000301
 8007a38:	50000400 	.word	0x50000400
 8007a3c:	50000800 	.word	0x50000800
 8007a40:	0000200c 	.word	0x0000200c
 8007a44:	0000403e 	.word	0x0000403e
 8007a48:	50000c00 	.word	0x50000c00

08007a4c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f00f fa60 	bl	8016f20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2108      	movs	r1, #8
 8007a64:	0018      	movs	r0, r3
 8007a66:	f00f fa5b 	bl	8016f20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	210c      	movs	r1, #12
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f00f fa56 	bl	8016f20 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007a74:	2380      	movs	r3, #128	@ 0x80
 8007a76:	05db      	lsls	r3, r3, #23
 8007a78:	22fa      	movs	r2, #250	@ 0xfa
 8007a7a:	0112      	lsls	r2, r2, #4
 8007a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007a7e:	2380      	movs	r3, #128	@ 0x80
 8007a80:	05db      	lsls	r3, r3, #23
 8007a82:	22fa      	movs	r2, #250	@ 0xfa
 8007a84:	0112      	lsls	r2, r2, #4
 8007a86:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007a88:	2380      	movs	r3, #128	@ 0x80
 8007a8a:	05db      	lsls	r3, r3, #23
 8007a8c:	22fa      	movs	r2, #250	@ 0xfa
 8007a8e:	0112      	lsls	r2, r2, #4
 8007a90:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007a92:	2380      	movs	r3, #128	@ 0x80
 8007a94:	05db      	lsls	r3, r3, #23
 8007a96:	22fa      	movs	r2, #250	@ 0xfa
 8007a98:	0112      	lsls	r2, r2, #4
 8007a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f00f fa3d 	bl	8016f20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2104      	movs	r1, #4
 8007aaa:	0018      	movs	r0, r3
 8007aac:	f00f fa38 	bl	8016f20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2108      	movs	r1, #8
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f00f fa33 	bl	8016f20 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007aba:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae4 <GPIO_InitPWMLEDs+0x98>)
 8007abc:	22fa      	movs	r2, #250	@ 0xfa
 8007abe:	0112      	lsls	r2, r2, #4
 8007ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007ac2:	4b08      	ldr	r3, [pc, #32]	@ (8007ae4 <GPIO_InitPWMLEDs+0x98>)
 8007ac4:	22fa      	movs	r2, #250	@ 0xfa
 8007ac6:	0112      	lsls	r2, r2, #4
 8007ac8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007aca:	4b06      	ldr	r3, [pc, #24]	@ (8007ae4 <GPIO_InitPWMLEDs+0x98>)
 8007acc:	22fa      	movs	r2, #250	@ 0xfa
 8007ace:	0112      	lsls	r2, r2, #4
 8007ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007ad2:	4b04      	ldr	r3, [pc, #16]	@ (8007ae4 <GPIO_InitPWMLEDs+0x98>)
 8007ad4:	22fa      	movs	r2, #250	@ 0xfa
 8007ad6:	0112      	lsls	r2, r2, #4
 8007ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007ada:	46c0      	nop			@ (mov r8, r8)
 8007adc:	46bd      	mov	sp, r7
 8007ade:	b002      	add	sp, #8
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	46c0      	nop			@ (mov r8, r8)
 8007ae4:	40000400 	.word	0x40000400

08007ae8 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aee:	1d3b      	adds	r3, r7, #4
 8007af0:	0018      	movs	r0, r3
 8007af2:	2314      	movs	r3, #20
 8007af4:	001a      	movs	r2, r3
 8007af6:	2100      	movs	r1, #0
 8007af8:	f018 fdfe 	bl	80206f8 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8007afc:	1d3b      	adds	r3, r7, #4
 8007afe:	2205      	movs	r2, #5
 8007b00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b02:	1d3b      	adds	r3, r7, #4
 8007b04:	2203      	movs	r2, #3
 8007b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b08:	1d3b      	adds	r3, r7, #4
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b0e:	1d3a      	adds	r2, r7, #4
 8007b10:	23a0      	movs	r3, #160	@ 0xa0
 8007b12:	05db      	lsls	r3, r3, #23
 8007b14:	0011      	movs	r1, r2
 8007b16:	0018      	movs	r0, r3
 8007b18:	f008 fc8c 	bl	8010434 <HAL_GPIO_Init>
}
 8007b1c:	46c0      	nop			@ (mov r8, r8)
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b006      	add	sp, #24
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007b28:	4b1b      	ldr	r3, [pc, #108]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8007b9c <MX_I2C1_Init+0x78>)
 8007b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b30:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba0 <MX_I2C1_Init+0x7c>)
 8007b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007b34:	4b18      	ldr	r3, [pc, #96]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b3a:	4b17      	ldr	r3, [pc, #92]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b40:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007b46:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007b4c:	4b12      	ldr	r3, [pc, #72]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b52:	4b11      	ldr	r3, [pc, #68]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b58:	4b0f      	ldr	r3, [pc, #60]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b60:	0018      	movs	r0, r3
 8007b62:	f008 fe3b 	bl	80107dc <HAL_I2C_Init>
 8007b66:	1e03      	subs	r3, r0, #0
 8007b68:	d001      	beq.n	8007b6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007b6a:	f000 fd93 	bl	8008694 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b70:	2100      	movs	r1, #0
 8007b72:	0018      	movs	r0, r3
 8007b74:	f00b fa0c 	bl	8012f90 <HAL_I2CEx_ConfigAnalogFilter>
 8007b78:	1e03      	subs	r3, r0, #0
 8007b7a:	d001      	beq.n	8007b80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007b7c:	f000 fd8a 	bl	8008694 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007b80:	4b05      	ldr	r3, [pc, #20]	@ (8007b98 <MX_I2C1_Init+0x74>)
 8007b82:	2100      	movs	r1, #0
 8007b84:	0018      	movs	r0, r3
 8007b86:	f00b fa4f 	bl	8013028 <HAL_I2CEx_ConfigDigitalFilter>
 8007b8a:	1e03      	subs	r3, r0, #0
 8007b8c:	d001      	beq.n	8007b92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007b8e:	f000 fd81 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007b92:	46c0      	nop			@ (mov r8, r8)
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000a14 	.word	0x20000a14
 8007b9c:	40005400 	.word	0x40005400
 8007ba0:	00503d58 	.word	0x00503d58

08007ba4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007baa:	4a1c      	ldr	r2, [pc, #112]	@ (8007c1c <MX_I2C2_Init+0x78>)
 8007bac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007bae:	4b1a      	ldr	r3, [pc, #104]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c20 <MX_I2C2_Init+0x7c>)
 8007bb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007bb4:	4b18      	ldr	r3, [pc, #96]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007bba:	4b17      	ldr	r3, [pc, #92]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007bc0:	4b15      	ldr	r3, [pc, #84]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007bc6:	4b14      	ldr	r3, [pc, #80]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007bcc:	4b12      	ldr	r3, [pc, #72]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007bd2:	4b11      	ldr	r3, [pc, #68]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007bde:	4b0e      	ldr	r3, [pc, #56]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007be0:	0018      	movs	r0, r3
 8007be2:	f008 fdfb 	bl	80107dc <HAL_I2C_Init>
 8007be6:	1e03      	subs	r3, r0, #0
 8007be8:	d001      	beq.n	8007bee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007bea:	f000 fd53 	bl	8008694 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007bee:	4b0a      	ldr	r3, [pc, #40]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f00b f9cc 	bl	8012f90 <HAL_I2CEx_ConfigAnalogFilter>
 8007bf8:	1e03      	subs	r3, r0, #0
 8007bfa:	d001      	beq.n	8007c00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007bfc:	f000 fd4a 	bl	8008694 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007c00:	4b05      	ldr	r3, [pc, #20]	@ (8007c18 <MX_I2C2_Init+0x74>)
 8007c02:	2100      	movs	r1, #0
 8007c04:	0018      	movs	r0, r3
 8007c06:	f00b fa0f 	bl	8013028 <HAL_I2CEx_ConfigDigitalFilter>
 8007c0a:	1e03      	subs	r3, r0, #0
 8007c0c:	d001      	beq.n	8007c12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007c0e:	f000 fd41 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007c12:	46c0      	nop			@ (mov r8, r8)
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000a68 	.word	0x20000a68
 8007c1c:	40005800 	.word	0x40005800
 8007c20:	00503d58 	.word	0x00503d58

08007c24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007c24:	b590      	push	{r4, r7, lr}
 8007c26:	b08b      	sub	sp, #44	@ 0x2c
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c2c:	2414      	movs	r4, #20
 8007c2e:	193b      	adds	r3, r7, r4
 8007c30:	0018      	movs	r0, r3
 8007c32:	2314      	movs	r3, #20
 8007c34:	001a      	movs	r2, r3
 8007c36:	2100      	movs	r1, #0
 8007c38:	f018 fd5e 	bl	80206f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a5d      	ldr	r2, [pc, #372]	@ (8007db8 <HAL_I2C_MspInit+0x194>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d000      	beq.n	8007c48 <HAL_I2C_MspInit+0x24>
 8007c46:	e083      	b.n	8007d50 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c48:	4b5c      	ldr	r3, [pc, #368]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007c4e:	2102      	movs	r1, #2
 8007c50:	430a      	orrs	r2, r1
 8007c52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007c54:	4b59      	ldr	r3, [pc, #356]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	2202      	movs	r2, #2
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c60:	0021      	movs	r1, r4
 8007c62:	187b      	adds	r3, r7, r1
 8007c64:	22c0      	movs	r2, #192	@ 0xc0
 8007c66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c68:	187b      	adds	r3, r7, r1
 8007c6a:	2212      	movs	r2, #18
 8007c6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6e:	187b      	adds	r3, r7, r1
 8007c70:	2200      	movs	r2, #0
 8007c72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c74:	187b      	adds	r3, r7, r1
 8007c76:	2203      	movs	r2, #3
 8007c78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007c7a:	187b      	adds	r3, r7, r1
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c80:	187b      	adds	r3, r7, r1
 8007c82:	4a4f      	ldr	r2, [pc, #316]	@ (8007dc0 <HAL_I2C_MspInit+0x19c>)
 8007c84:	0019      	movs	r1, r3
 8007c86:	0010      	movs	r0, r2
 8007c88:	f008 fbd4 	bl	8010434 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c90:	4b4a      	ldr	r3, [pc, #296]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007c92:	2180      	movs	r1, #128	@ 0x80
 8007c94:	0389      	lsls	r1, r1, #14
 8007c96:	430a      	orrs	r2, r1
 8007c98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8007c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8007dc8 <HAL_I2C_MspInit+0x1a4>)
 8007c9e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007ca0:	4b48      	ldr	r3, [pc, #288]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007ca2:	2206      	movs	r2, #6
 8007ca4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ca6:	4b47      	ldr	r3, [pc, #284]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cac:	4b45      	ldr	r3, [pc, #276]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007cb2:	4b44      	ldr	r3, [pc, #272]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007cb4:	2280      	movs	r2, #128	@ 0x80
 8007cb6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007cb8:	4b42      	ldr	r3, [pc, #264]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007cbe:	4b41      	ldr	r3, [pc, #260]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007cca:	4b3e      	ldr	r3, [pc, #248]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f007 ff92 	bl	800fbfc <HAL_DMA_Init>
 8007cd8:	1e03      	subs	r3, r0, #0
 8007cda:	d001      	beq.n	8007ce0 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007cdc:	f000 fcda 	bl	8008694 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a38      	ldr	r2, [pc, #224]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007ce4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007ce6:	4b37      	ldr	r3, [pc, #220]	@ (8007dc4 <HAL_I2C_MspInit+0x1a0>)
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007cec:	4b37      	ldr	r3, [pc, #220]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007cee:	4a38      	ldr	r2, [pc, #224]	@ (8007dd0 <HAL_I2C_MspInit+0x1ac>)
 8007cf0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007cf2:	4b36      	ldr	r3, [pc, #216]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007cf4:	2206      	movs	r2, #6
 8007cf6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007cf8:	4b34      	ldr	r3, [pc, #208]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007cfa:	2210      	movs	r2, #16
 8007cfc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cfe:	4b33      	ldr	r3, [pc, #204]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d04:	4b31      	ldr	r3, [pc, #196]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d06:	2280      	movs	r2, #128	@ 0x80
 8007d08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d0a:	4b30      	ldr	r3, [pc, #192]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d10:	4b2e      	ldr	r3, [pc, #184]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007d16:	4b2d      	ldr	r3, [pc, #180]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007d22:	4b2a      	ldr	r3, [pc, #168]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d24:	0018      	movs	r0, r3
 8007d26:	f007 ff69 	bl	800fbfc <HAL_DMA_Init>
 8007d2a:	1e03      	subs	r3, r0, #0
 8007d2c:	d001      	beq.n	8007d32 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007d2e:	f000 fcb1 	bl	8008694 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a25      	ldr	r2, [pc, #148]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d36:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d38:	4b24      	ldr	r3, [pc, #144]	@ (8007dcc <HAL_I2C_MspInit+0x1a8>)
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	2017      	movs	r0, #23
 8007d44:	f007 ff24 	bl	800fb90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007d48:	2017      	movs	r0, #23
 8007d4a:	f007 ff36 	bl	800fbba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007d4e:	e02e      	b.n	8007dae <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd4 <HAL_I2C_MspInit+0x1b0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d129      	bne.n	8007dae <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d5a:	4b18      	ldr	r3, [pc, #96]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5e:	4b17      	ldr	r3, [pc, #92]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007d60:	2102      	movs	r1, #2
 8007d62:	430a      	orrs	r2, r1
 8007d64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d66:	4b15      	ldr	r3, [pc, #84]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007d72:	2114      	movs	r1, #20
 8007d74:	187b      	adds	r3, r7, r1
 8007d76:	22c0      	movs	r2, #192	@ 0xc0
 8007d78:	0112      	lsls	r2, r2, #4
 8007d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d7c:	187b      	adds	r3, r7, r1
 8007d7e:	2212      	movs	r2, #18
 8007d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d82:	187b      	adds	r3, r7, r1
 8007d84:	2200      	movs	r2, #0
 8007d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d88:	187b      	adds	r3, r7, r1
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007d8e:	187b      	adds	r3, r7, r1
 8007d90:	2206      	movs	r2, #6
 8007d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d94:	187b      	adds	r3, r7, r1
 8007d96:	4a0a      	ldr	r2, [pc, #40]	@ (8007dc0 <HAL_I2C_MspInit+0x19c>)
 8007d98:	0019      	movs	r1, r3
 8007d9a:	0010      	movs	r0, r2
 8007d9c:	f008 fb4a 	bl	8010434 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007da0:	4b06      	ldr	r3, [pc, #24]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <HAL_I2C_MspInit+0x198>)
 8007da6:	2180      	movs	r1, #128	@ 0x80
 8007da8:	03c9      	lsls	r1, r1, #15
 8007daa:	430a      	orrs	r2, r1
 8007dac:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007dae:	46c0      	nop			@ (mov r8, r8)
 8007db0:	46bd      	mov	sp, r7
 8007db2:	b00b      	add	sp, #44	@ 0x2c
 8007db4:	bd90      	pop	{r4, r7, pc}
 8007db6:	46c0      	nop			@ (mov r8, r8)
 8007db8:	40005400 	.word	0x40005400
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	50000400 	.word	0x50000400
 8007dc4:	20000abc 	.word	0x20000abc
 8007dc8:	40020030 	.word	0x40020030
 8007dcc:	20000b04 	.word	0x20000b04
 8007dd0:	4002001c 	.word	0x4002001c
 8007dd4:	40005800 	.word	0x40005800

08007dd8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007ddc:	4b10      	ldr	r3, [pc, #64]	@ (8007e20 <MX_I2S2_Init+0x48>)
 8007dde:	4a11      	ldr	r2, [pc, #68]	@ (8007e24 <MX_I2S2_Init+0x4c>)
 8007de0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007de2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e20 <MX_I2S2_Init+0x48>)
 8007de4:	22c0      	movs	r2, #192	@ 0xc0
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007dea:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <MX_I2S2_Init+0x48>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007df0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <MX_I2S2_Init+0x48>)
 8007df2:	2203      	movs	r2, #3
 8007df4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007df6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <MX_I2S2_Init+0x48>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007dfc:	4b08      	ldr	r3, [pc, #32]	@ (8007e20 <MX_I2S2_Init+0x48>)
 8007dfe:	22fa      	movs	r2, #250	@ 0xfa
 8007e00:	0192      	lsls	r2, r2, #6
 8007e02:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <MX_I2S2_Init+0x48>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007e0a:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <MX_I2S2_Init+0x48>)
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f00b f957 	bl	80130c0 <HAL_I2S_Init>
 8007e12:	1e03      	subs	r3, r0, #0
 8007e14:	d001      	beq.n	8007e1a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007e16:	f000 fc3d 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007e1a:	46c0      	nop			@ (mov r8, r8)
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000b4c 	.word	0x20000b4c
 8007e24:	40003800 	.word	0x40003800

08007e28 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007e28:	b590      	push	{r4, r7, lr}
 8007e2a:	b089      	sub	sp, #36	@ 0x24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e30:	240c      	movs	r4, #12
 8007e32:	193b      	adds	r3, r7, r4
 8007e34:	0018      	movs	r0, r3
 8007e36:	2314      	movs	r3, #20
 8007e38:	001a      	movs	r2, r3
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	f018 fc5c 	bl	80206f8 <memset>
  if(i2sHandle->Instance==SPI2)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a2d      	ldr	r2, [pc, #180]	@ (8007efc <HAL_I2S_MspInit+0xd4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d154      	bne.n	8007ef4 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8007f00 <HAL_I2S_MspInit+0xd8>)
 8007e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8007f00 <HAL_I2S_MspInit+0xd8>)
 8007e50:	2180      	movs	r1, #128	@ 0x80
 8007e52:	01c9      	lsls	r1, r1, #7
 8007e54:	430a      	orrs	r2, r1
 8007e56:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e58:	4b29      	ldr	r3, [pc, #164]	@ (8007f00 <HAL_I2S_MspInit+0xd8>)
 8007e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5c:	4b28      	ldr	r3, [pc, #160]	@ (8007f00 <HAL_I2S_MspInit+0xd8>)
 8007e5e:	2102      	movs	r1, #2
 8007e60:	430a      	orrs	r2, r1
 8007e62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007e64:	4b26      	ldr	r3, [pc, #152]	@ (8007f00 <HAL_I2S_MspInit+0xd8>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e68:	2202      	movs	r2, #2
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	60bb      	str	r3, [r7, #8]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007e70:	193b      	adds	r3, r7, r4
 8007e72:	22b0      	movs	r2, #176	@ 0xb0
 8007e74:	0212      	lsls	r2, r2, #8
 8007e76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e78:	0021      	movs	r1, r4
 8007e7a:	187b      	adds	r3, r7, r1
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e80:	187b      	adds	r3, r7, r1
 8007e82:	2200      	movs	r2, #0
 8007e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e86:	187b      	adds	r3, r7, r1
 8007e88:	2200      	movs	r2, #0
 8007e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007e8c:	187b      	adds	r3, r7, r1
 8007e8e:	2200      	movs	r2, #0
 8007e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e92:	187b      	adds	r3, r7, r1
 8007e94:	4a1b      	ldr	r2, [pc, #108]	@ (8007f04 <HAL_I2S_MspInit+0xdc>)
 8007e96:	0019      	movs	r1, r3
 8007e98:	0010      	movs	r0, r2
 8007e9a:	f008 facb 	bl	8010434 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f0c <HAL_I2S_MspInit+0xe4>)
 8007ea2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007ea4:	4b18      	ldr	r3, [pc, #96]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007eaa:	4b17      	ldr	r3, [pc, #92]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007eb0:	4b15      	ldr	r3, [pc, #84]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007eb6:	4b14      	ldr	r3, [pc, #80]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007eb8:	2280      	movs	r2, #128	@ 0x80
 8007eba:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007ebc:	4b12      	ldr	r3, [pc, #72]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007ebe:	2280      	movs	r2, #128	@ 0x80
 8007ec0:	0052      	lsls	r2, r2, #1
 8007ec2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007ec4:	4b10      	ldr	r3, [pc, #64]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007ec6:	2280      	movs	r2, #128	@ 0x80
 8007ec8:	00d2      	lsls	r2, r2, #3
 8007eca:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007ece:	2220      	movs	r2, #32
 8007ed0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007eda:	0018      	movs	r0, r3
 8007edc:	f007 fe8e 	bl	800fbfc <HAL_DMA_Init>
 8007ee0:	1e03      	subs	r3, r0, #0
 8007ee2:	d001      	beq.n	8007ee8 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007ee4:	f000 fbd6 	bl	8008694 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a07      	ldr	r2, [pc, #28]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8007eee:	4b06      	ldr	r3, [pc, #24]	@ (8007f08 <HAL_I2S_MspInit+0xe0>)
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007ef4:	46c0      	nop			@ (mov r8, r8)
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	b009      	add	sp, #36	@ 0x24
 8007efa:	bd90      	pop	{r4, r7, pc}
 8007efc:	40003800 	.word	0x40003800
 8007f00:	40021000 	.word	0x40021000
 8007f04:	50000400 	.word	0x50000400
 8007f08:	20000b88 	.word	0x20000b88
 8007f0c:	40020044 	.word	0x40020044

08007f10 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  testDone = true;
 8007f14:	4b1e      	ldr	r3, [pc, #120]	@ (8007f90 <SetTestDone+0x80>)
 8007f16:	2201      	movs	r2, #1
 8007f18:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8007f1a:	23fa      	movs	r3, #250	@ 0xfa
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f007 f99c 	bl	800f25c <HAL_Delay>
  SetDBLED(false, false, true);
 8007f24:	2201      	movs	r2, #1
 8007f26:	2100      	movs	r1, #0
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f005 fb21 	bl	800d570 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007f2e:	4a19      	ldr	r2, [pc, #100]	@ (8007f94 <SetTestDone+0x84>)
 8007f30:	23fa      	movs	r3, #250	@ 0xfa
 8007f32:	0119      	lsls	r1, r3, #4
 8007f34:	23fa      	movs	r3, #250	@ 0xfa
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f005 fae5 	bl	800d508 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007f3e:	4a15      	ldr	r2, [pc, #84]	@ (8007f94 <SetTestDone+0x84>)
 8007f40:	23fa      	movs	r3, #250	@ 0xfa
 8007f42:	0119      	lsls	r1, r3, #4
 8007f44:	23fa      	movs	r3, #250	@ 0xfa
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f005 fb5b 	bl	800d604 <SetVocLED>
  HAL_Delay(500);
 8007f4e:	23fa      	movs	r3, #250	@ 0xfa
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	0018      	movs	r0, r3
 8007f54:	f007 f982 	bl	800f25c <HAL_Delay>
  SetDBLED(false, false, false);
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f005 fb07 	bl	800d570 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007f62:	23fa      	movs	r3, #250	@ 0xfa
 8007f64:	011a      	lsls	r2, r3, #4
 8007f66:	23fa      	movs	r3, #250	@ 0xfa
 8007f68:	0119      	lsls	r1, r3, #4
 8007f6a:	23fa      	movs	r3, #250	@ 0xfa
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f005 faca 	bl	800d508 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007f74:	23fa      	movs	r3, #250	@ 0xfa
 8007f76:	011a      	lsls	r2, r3, #4
 8007f78:	23fa      	movs	r3, #250	@ 0xfa
 8007f7a:	0119      	lsls	r1, r3, #4
 8007f7c:	23fa      	movs	r3, #250	@ 0xfa
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	0018      	movs	r0, r3
 8007f82:	f005 fb3f 	bl	800d604 <SetVocLED>
  InitDone();
 8007f86:	f005 fa13 	bl	800d3b0 <InitDone>
}
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000bd0 	.word	0x20000bd0
 8007f94:	00000bb8 	.word	0x00000bb8

08007f98 <FlashLEDs>:

void FlashLEDs(){
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007f9e:	1dfb      	adds	r3, r7, #7
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	e021      	b.n	8007fea <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	2101      	movs	r1, #1
 8007faa:	2001      	movs	r0, #1
 8007fac:	f005 fae0 	bl	800d570 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007fb0:	4a12      	ldr	r2, [pc, #72]	@ (8007ffc <FlashLEDs+0x64>)
 8007fb2:	23fa      	movs	r3, #250	@ 0xfa
 8007fb4:	0119      	lsls	r1, r3, #4
 8007fb6:	23fa      	movs	r3, #250	@ 0xfa
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f005 faa4 	bl	800d508 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8007ffc <FlashLEDs+0x64>)
 8007fc2:	23fa      	movs	r3, #250	@ 0xfa
 8007fc4:	0119      	lsls	r1, r3, #4
 8007fc6:	23fa      	movs	r3, #250	@ 0xfa
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f005 fb1a 	bl	800d604 <SetVocLED>
    HAL_Delay(250);
 8007fd0:	20fa      	movs	r0, #250	@ 0xfa
 8007fd2:	f007 f943 	bl	800f25c <HAL_Delay>
    SetLEDsOff();
 8007fd6:	f005 fc55 	bl	800d884 <SetLEDsOff>
    HAL_Delay(250);
 8007fda:	20fa      	movs	r0, #250	@ 0xfa
 8007fdc:	f007 f93e 	bl	800f25c <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007fe0:	1dfb      	adds	r3, r7, #7
 8007fe2:	781a      	ldrb	r2, [r3, #0]
 8007fe4:	1dfb      	adds	r3, r7, #7
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	1dfb      	adds	r3, r7, #7
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d9d9      	bls.n	8007fa6 <FlashLEDs+0xe>
  }
}
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	46c0      	nop			@ (mov r8, r8)
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	b002      	add	sp, #8
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	00000bb8 	.word	0x00000bb8

08008000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008006:	f007 f8b9 	bl	800f17c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800800a:	f000 f9fd 	bl	8008408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800800e:	f7ff fbed 	bl	80077ec <MX_GPIO_Init>
  MX_DMA_Init();
 8008012:	f7ff fa15 	bl	8007440 <MX_DMA_Init>
  MX_I2C1_Init();
 8008016:	f7ff fd85 	bl	8007b24 <MX_I2C1_Init>
  MX_I2S2_Init();
 800801a:	f7ff fedd 	bl	8007dd8 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800801e:	f006 fadd 	bl	800e5dc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8008022:	f7ff fdbf 	bl	8007ba4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8008026:	f006 f8d1 	bl	800e1cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800802a:	f006 f943 	bl	800e2b4 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800802e:	f006 fb09 	bl	800e644 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8008032:	f7ff f953 	bl	80072dc <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8008036:	f015 f86d 	bl	801d114 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800803a:	f001 f939 	bl	80092b0 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800803e:	f006 fa97 	bl	800e570 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8008042:	f006 f9b5 	bl	800e3b0 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8008046:	4aca      	ldr	r2, [pc, #808]	@ (8008370 <main+0x370>)
 8008048:	4bca      	ldr	r3, [pc, #808]	@ (8008374 <main+0x374>)
 800804a:	0011      	movs	r1, r2
 800804c:	0018      	movs	r0, r3
 800804e:	f7ff fcfd 	bl	8007a4c <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8008052:	f006 fd39 	bl	800eac8 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8008056:	f005 ff41 	bl	800dedc <Battery_Upkeep>
 800805a:	0003      	movs	r3, r0
 800805c:	001a      	movs	r2, r3
 800805e:	4bc6      	ldr	r3, [pc, #792]	@ (8008378 <main+0x378>)
 8008060:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8008062:	4bc5      	ldr	r3, [pc, #788]	@ (8008378 <main+0x378>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d113      	bne.n	8008092 <main+0x92>
    SetAllREDLED();
 800806a:	f005 fc27 	bl	800d8bc <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 800806e:	f7fe fa5b 	bl	8006528 <ReadBatteryVoltage>
 8008072:	1c03      	adds	r3, r0, #0
 8008074:	1c18      	adds	r0, r3, #0
 8008076:	f7fb f9f5 	bl	8003464 <__aeabi_f2d>
 800807a:	0002      	movs	r2, r0
 800807c:	000b      	movs	r3, r1
 800807e:	48bf      	ldr	r0, [pc, #764]	@ (800837c <main+0x37c>)
 8008080:	49bf      	ldr	r1, [pc, #764]	@ (8008380 <main+0x380>)
 8008082:	9200      	str	r2, [sp, #0]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	0002      	movs	r2, r0
 8008088:	2002      	movs	r0, #2
 800808a:	f006 fc99 	bl	800e9c0 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800808e:	f7fe fe5d 	bl	8006d4c <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8008092:	f7fe fb1f 	bl	80066d4 <UserButton_Pressed>
 8008096:	1e03      	subs	r3, r0, #0
 8008098:	d004      	beq.n	80080a4 <main+0xa4>
    EnableESPProg();
 800809a:	f015 f90b 	bl	801d2b4 <EnableESPProg>
    ESP_Programming = true;
 800809e:	4bb9      	ldr	r3, [pc, #740]	@ (8008384 <main+0x384>)
 80080a0:	2201      	movs	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 80080a4:	2003      	movs	r0, #3
 80080a6:	f006 fcf5 	bl	800ea94 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80080aa:	49b7      	ldr	r1, [pc, #732]	@ (8008388 <main+0x388>)
 80080ac:	4bb7      	ldr	r3, [pc, #732]	@ (800838c <main+0x38c>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	0018      	movs	r0, r3
 80080b2:	f00f fb95 	bl	80177e0 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 80080b6:	4bb6      	ldr	r3, [pc, #728]	@ (8008390 <main+0x390>)
 80080b8:	0018      	movs	r0, r3
 80080ba:	f7fe ff15 	bl	8006ee8 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 80080be:	4ab5      	ldr	r2, [pc, #724]	@ (8008394 <main+0x394>)
 80080c0:	49b5      	ldr	r1, [pc, #724]	@ (8008398 <main+0x398>)
 80080c2:	48b6      	ldr	r0, [pc, #728]	@ (800839c <main+0x39c>)
 80080c4:	230b      	movs	r3, #11
 80080c6:	f004 fae9 	bl	800c69c <soundInit>
 80080ca:	0003      	movs	r3, r0
 80080cc:	001a      	movs	r2, r3
 80080ce:	2301      	movs	r3, #1
 80080d0:	4053      	eors	r3, r2
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 80080d8:	4ab1      	ldr	r2, [pc, #708]	@ (80083a0 <main+0x3a0>)
 80080da:	4bb2      	ldr	r3, [pc, #712]	@ (80083a4 <main+0x3a4>)
 80080dc:	21fb      	movs	r1, #251	@ 0xfb
 80080de:	0018      	movs	r0, r3
 80080e0:	f006 fd26 	bl	800eb30 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 80080e4:	4bb0      	ldr	r3, [pc, #704]	@ (80083a8 <main+0x3a8>)
 80080e6:	4ab1      	ldr	r2, [pc, #708]	@ (80083ac <main+0x3ac>)
 80080e8:	49ab      	ldr	r1, [pc, #684]	@ (8008398 <main+0x398>)
 80080ea:	48b1      	ldr	r0, [pc, #708]	@ (80083b0 <main+0x3b0>)
 80080ec:	f000 fb92 	bl	8008814 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 80080f0:	f007 f8aa 	bl	800f248 <HAL_GetTick>
 80080f4:	0003      	movs	r3, r0
 80080f6:	4aaf      	ldr	r2, [pc, #700]	@ (80083b4 <main+0x3b4>)
 80080f8:	189a      	adds	r2, r3, r2
 80080fa:	4baf      	ldr	r3, [pc, #700]	@ (80083b8 <main+0x3b8>)
 80080fc:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 80080fe:	f7fe fac9 	bl	8006694 <Check_USB_PowerOn>
 8008102:	0003      	movs	r3, r0
 8008104:	1e5a      	subs	r2, r3, #1
 8008106:	4193      	sbcs	r3, r2
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2201      	movs	r2, #1
 800810c:	4053      	eors	r3, r2
 800810e:	b2db      	uxtb	r3, r3
 8008110:	1c1a      	adds	r2, r3, #0
 8008112:	2301      	movs	r3, #1
 8008114:	4013      	ands	r3, r2
 8008116:	b2da      	uxtb	r2, r3
 8008118:	4ba8      	ldr	r3, [pc, #672]	@ (80083bc <main+0x3bc>)
 800811a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800811c:	4ba8      	ldr	r3, [pc, #672]	@ (80083c0 <main+0x3c0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	0018      	movs	r0, r3
 8008122:	f006 fbf7 	bl	800e914 <TimestampIsReached>
 8008126:	1e03      	subs	r3, r0, #0
 8008128:	d00e      	beq.n	8008148 <main+0x148>
      charge = Battery_Upkeep();
 800812a:	f005 fed7 	bl	800dedc <Battery_Upkeep>
 800812e:	0003      	movs	r3, r0
 8008130:	001a      	movs	r2, r3
 8008132:	4b91      	ldr	r3, [pc, #580]	@ (8008378 <main+0x378>)
 8008134:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8008136:	f007 f887 	bl	800f248 <HAL_GetTick>
 800813a:	0003      	movs	r3, r0
 800813c:	4aa1      	ldr	r2, [pc, #644]	@ (80083c4 <main+0x3c4>)
 800813e:	189a      	adds	r2, r3, r2
 8008140:	4b9f      	ldr	r3, [pc, #636]	@ (80083c0 <main+0x3c0>)
 8008142:	601a      	str	r2, [r3, #0]
      showTime();
 8008144:	f7fe fad6 	bl	80066f4 <showTime>

    }
    configCheck();
 8008148:	f005 fd2c 	bl	800dba4 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 800814c:	4b9e      	ldr	r3, [pc, #632]	@ (80083c8 <main+0x3c8>)
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8008152:	4b89      	ldr	r3, [pc, #548]	@ (8008378 <main+0x378>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d003      	beq.n	8008162 <main+0x162>
 800815a:	4b87      	ldr	r3, [pc, #540]	@ (8008378 <main+0x378>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d104      	bne.n	800816c <main+0x16c>
          FlashLEDs();
 8008162:	f7ff ff19 	bl	8007f98 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8008166:	4b99      	ldr	r3, [pc, #612]	@ (80083cc <main+0x3cc>)
 8008168:	2200      	movs	r2, #0
 800816a:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800816c:	4b82      	ldr	r3, [pc, #520]	@ (8008378 <main+0x378>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d109      	bne.n	8008188 <main+0x188>
 8008174:	4b96      	ldr	r3, [pc, #600]	@ (80083d0 <main+0x3d0>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b09      	cmp	r3, #9
 800817a:	d105      	bne.n	8008188 <main+0x188>
          batteryEmpty = true;
 800817c:	4b95      	ldr	r3, [pc, #596]	@ (80083d4 <main+0x3d4>)
 800817e:	2201      	movs	r2, #1
 8008180:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8008182:	f7fe fde3 	bl	8006d4c <Enter_Standby_Mode>
 8008186:	e002      	b.n	800818e <main+0x18e>
        }
        else{
          batteryEmpty = false;
 8008188:	4b92      	ldr	r3, [pc, #584]	@ (80083d4 <main+0x3d4>)
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800818e:	4b92      	ldr	r3, [pc, #584]	@ (80083d8 <main+0x3d8>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d100      	bne.n	8008198 <main+0x198>
 8008196:	e0aa      	b.n	80082ee <main+0x2ee>
 8008198:	4b7a      	ldr	r3, [pc, #488]	@ (8008384 <main+0x384>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2201      	movs	r2, #1
 800819e:	4053      	eors	r3, r2
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d100      	bne.n	80081a8 <main+0x1a8>
 80081a6:	e0a2      	b.n	80082ee <main+0x2ee>
 80081a8:	4b8a      	ldr	r3, [pc, #552]	@ (80083d4 <main+0x3d4>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2201      	movs	r2, #1
 80081ae:	4053      	eors	r3, r2
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d100      	bne.n	80081b8 <main+0x1b8>
 80081b6:	e09a      	b.n	80082ee <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 80081b8:	4b80      	ldr	r3, [pc, #512]	@ (80083bc <main+0x3bc>)
 80081ba:	781a      	ldrb	r2, [r3, #0]
 80081bc:	4b87      	ldr	r3, [pc, #540]	@ (80083dc <main+0x3dc>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d020      	beq.n	8008206 <main+0x206>
        if (IsSGPPresent() && !usbPluggedIn) {
 80081c4:	f000 fab8 	bl	8008738 <IsSGPPresent>
 80081c8:	1e03      	subs	r3, r0, #0
 80081ca:	d009      	beq.n	80081e0 <main+0x1e0>
 80081cc:	4b83      	ldr	r3, [pc, #524]	@ (80083dc <main+0x3dc>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2201      	movs	r2, #1
 80081d2:	4053      	eors	r3, r2
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <main+0x1e0>
          SetVOCSensorDIS_ENA(true);
 80081da:	2001      	movs	r0, #1
 80081dc:	f000 fab6 	bl	800874c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 80081e0:	4b7f      	ldr	r3, [pc, #508]	@ (80083e0 <main+0x3e0>)
 80081e2:	791b      	ldrb	r3, [r3, #4]
 80081e4:	2b34      	cmp	r3, #52	@ 0x34
 80081e6:	d003      	beq.n	80081f0 <main+0x1f0>
 80081e8:	4b7d      	ldr	r3, [pc, #500]	@ (80083e0 <main+0x3e0>)
 80081ea:	791b      	ldrb	r3, [r3, #4]
 80081ec:	2b35      	cmp	r3, #53	@ 0x35
 80081ee:	d106      	bne.n	80081fe <main+0x1fe>
 80081f0:	4b7a      	ldr	r3, [pc, #488]	@ (80083dc <main+0x3dc>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <main+0x1fe>
          SetVOCSensorDIS_ENA(false);
 80081f8:	2000      	movs	r0, #0
 80081fa:	f000 faa7 	bl	800874c <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 80081fe:	4b77      	ldr	r3, [pc, #476]	@ (80083dc <main+0x3dc>)
 8008200:	781a      	ldrb	r2, [r3, #0]
 8008202:	4b6e      	ldr	r3, [pc, #440]	@ (80083bc <main+0x3bc>)
 8008204:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8008206:	4b77      	ldr	r3, [pc, #476]	@ (80083e4 <main+0x3e4>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d00d      	beq.n	800822a <main+0x22a>
 800820e:	4b75      	ldr	r3, [pc, #468]	@ (80083e4 <main+0x3e4>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d009      	beq.n	800822a <main+0x22a>
 8008216:	4b6d      	ldr	r3, [pc, #436]	@ (80083cc <main+0x3cc>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <main+0x22a>
        HIDSstate = HIDS_Upkeep();
 800821e:	f006 fef3 	bl	800f008 <HIDS_Upkeep>
 8008222:	0003      	movs	r3, r0
 8008224:	001a      	movs	r2, r3
 8008226:	4b70      	ldr	r3, [pc, #448]	@ (80083e8 <main+0x3e8>)
 8008228:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 800822a:	4b6f      	ldr	r3, [pc, #444]	@ (80083e8 <main+0x3e8>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d00d      	beq.n	800824e <main+0x24e>
 8008232:	4b6d      	ldr	r3, [pc, #436]	@ (80083e8 <main+0x3e8>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d009      	beq.n	800824e <main+0x24e>
 800823a:	4b64      	ldr	r3, [pc, #400]	@ (80083cc <main+0x3cc>)
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <main+0x24e>
        SGPstate = SGP_Upkeep();
 8008242:	f004 f891 	bl	800c368 <SGP_Upkeep>
 8008246:	0003      	movs	r3, r0
 8008248:	001a      	movs	r2, r3
 800824a:	4b66      	ldr	r3, [pc, #408]	@ (80083e4 <main+0x3e4>)
 800824c:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 800824e:	4b5f      	ldr	r3, [pc, #380]	@ (80083cc <main+0x3cc>)
 8008250:	78db      	ldrb	r3, [r3, #3]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <main+0x262>
        MICstate = Mic_Upkeep();
 8008256:	f000 ff17 	bl	8009088 <Mic_Upkeep>
 800825a:	0003      	movs	r3, r0
 800825c:	001a      	movs	r2, r3
 800825e:	4b63      	ldr	r3, [pc, #396]	@ (80083ec <main+0x3ec>)
 8008260:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8008262:	4b45      	ldr	r3, [pc, #276]	@ (8008378 <main+0x378>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d803      	bhi.n	8008272 <main+0x272>
 800826a:	4b57      	ldr	r3, [pc, #348]	@ (80083c8 <main+0x3c8>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d016      	beq.n	80082a0 <main+0x2a0>
 8008272:	4b56      	ldr	r3, [pc, #344]	@ (80083cc <main+0x3cc>)
 8008274:	789b      	ldrb	r3, [r3, #2]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d012      	beq.n	80082a0 <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800827a:	f001 f8a7 	bl	80093cc <sen5x_Get_sen5x_enable_state>
 800827e:	0003      	movs	r3, r0
 8008280:	001a      	movs	r2, r3
 8008282:	2301      	movs	r3, #1
 8008284:	4053      	eors	r3, r2
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d006      	beq.n	800829a <main+0x29a>
 800828c:	4b53      	ldr	r3, [pc, #332]	@ (80083dc <main+0x3dc>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <main+0x29a>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 8008294:	2000      	movs	r0, #0
 8008296:	f001 f8d5 	bl	8009444 <sen5x_enable>
        }
        sen5x_statemachine();
 800829a:	f001 fe59 	bl	8009f50 <sen5x_statemachine>
 800829e:	e020      	b.n	80082e2 <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 80082a0:	4b35      	ldr	r3, [pc, #212]	@ (8008378 <main+0x378>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d81c      	bhi.n	80082e2 <main+0x2e2>
 80082a8:	4b47      	ldr	r3, [pc, #284]	@ (80083c8 <main+0x3c8>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2201      	movs	r2, #1
 80082ae:	4053      	eors	r3, r2
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d015      	beq.n	80082e2 <main+0x2e2>
 80082b6:	4b45      	ldr	r3, [pc, #276]	@ (80083cc <main+0x3cc>)
 80082b8:	789b      	ldrb	r3, [r3, #2]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d011      	beq.n	80082e2 <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 80082be:	4a4c      	ldr	r2, [pc, #304]	@ (80083f0 <main+0x3f0>)
 80082c0:	4b2f      	ldr	r3, [pc, #188]	@ (8008380 <main+0x380>)
 80082c2:	0019      	movs	r1, r3
 80082c4:	2002      	movs	r0, #2
 80082c6:	f006 fb7b 	bl	800e9c0 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 80082ca:	4b40      	ldr	r3, [pc, #256]	@ (80083cc <main+0x3cc>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 80082d0:	4b48      	ldr	r3, [pc, #288]	@ (80083f4 <main+0x3f4>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 80082d6:	4b48      	ldr	r3, [pc, #288]	@ (80083f8 <main+0x3f8>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <main+0x2e2>
          sen5x_Power_Off();
 80082de:	f001 f933 	bl	8009548 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 80082e2:	f7fd f9f1 	bl	80056c8 <ESP_Upkeep>
 80082e6:	0003      	movs	r3, r0
 80082e8:	001a      	movs	r2, r3
 80082ea:	4b39      	ldr	r3, [pc, #228]	@ (80083d0 <main+0x3d0>)
 80082ec:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80082ee:	4b3a      	ldr	r3, [pc, #232]	@ (80083d8 <main+0x3d8>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2201      	movs	r2, #1
 80082f4:	4053      	eors	r3, r2
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00f      	beq.n	800831c <main+0x31c>
 80082fc:	4b21      	ldr	r3, [pc, #132]	@ (8008384 <main+0x384>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2201      	movs	r2, #1
 8008302:	4053      	eors	r3, r2
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <main+0x31c>
 800830a:	4b32      	ldr	r3, [pc, #200]	@ (80083d4 <main+0x3d4>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2201      	movs	r2, #1
 8008310:	4053      	eors	r3, r2
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <main+0x31c>
      Device_Test();  // for device with startup time
 8008318:	f000 fbc2 	bl	8008aa0 <Device_Test>
    }
    if (!usbPluggedIn) {
 800831c:	4b2f      	ldr	r3, [pc, #188]	@ (80083dc <main+0x3dc>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2201      	movs	r2, #1
 8008322:	4053      	eors	r3, r2
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d100      	bne.n	800832c <main+0x32c>
 800832a:	e6f7      	b.n	800811c <main+0x11c>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800832c:	4b33      	ldr	r3, [pc, #204]	@ (80083fc <main+0x3fc>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2201      	movs	r2, #1
 8008332:	4053      	eors	r3, r2
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d100      	bne.n	800833c <main+0x33c>
 800833a:	e6ef      	b.n	800811c <main+0x11c>
 800833c:	f000 fc2e 	bl	8008b9c <AllDevicesReady>
 8008340:	1e03      	subs	r3, r0, #0
 8008342:	d100      	bne.n	8008346 <main+0x346>
 8008344:	e6ea      	b.n	800811c <main+0x11c>
 8008346:	4b2e      	ldr	r3, [pc, #184]	@ (8008400 <main+0x400>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d100      	bne.n	8008350 <main+0x350>
 800834e:	e6e5      	b.n	800811c <main+0x11c>
        EnabledConnectedDevices();
 8008350:	f000 fc8c 	bl	8008c6c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8008354:	4b2b      	ldr	r3, [pc, #172]	@ (8008404 <main+0x404>)
 8008356:	789b      	ldrb	r3, [r3, #2]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <main+0x362>
 800835c:	23d7      	movs	r3, #215	@ 0xd7
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	e001      	b.n	8008366 <main+0x366>
 8008362:	23dc      	movs	r3, #220	@ 0xdc
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	0018      	movs	r0, r3
 8008368:	f7fe fd10 	bl	8006d8c <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 800836c:	e6d6      	b.n	800811c <main+0x11c>
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	20001c7c 	.word	0x20001c7c
 8008374:	20001c3c 	.word	0x20001c3c
 8008378:	20000bec 	.word	0x20000bec
 800837c:	080246d4 	.word	0x080246d4
 8008380:	080246ec 	.word	0x080246ec
 8008384:	20000bd1 	.word	0x20000bd1
 8008388:	20000bd8 	.word	0x20000bd8
 800838c:	20001db4 	.word	0x20001db4
 8008390:	20000c60 	.word	0x20000c60
 8008394:	20001cbc 	.word	0x20001cbc
 8008398:	20000b4c 	.word	0x20000b4c
 800839c:	20000b88 	.word	0x20000b88
 80083a0:	080246f0 	.word	0x080246f0
 80083a4:	08025cf8 	.word	0x08025cf8
 80083a8:	20001e6c 	.word	0x20001e6c
 80083ac:	200009b4 	.word	0x200009b4
 80083b0:	20000a14 	.word	0x20000a14
 80083b4:	000061a8 	.word	0x000061a8
 80083b8:	20000be8 	.word	0x20000be8
 80083bc:	20000bd3 	.word	0x20000bd3
 80083c0:	20000088 	.word	0x20000088
 80083c4:	0000c350 	.word	0x0000c350
 80083c8:	20000084 	.word	0x20000084
 80083cc:	20000bf0 	.word	0x20000bf0
 80083d0:	20000bd7 	.word	0x20000bd7
 80083d4:	20000bd2 	.word	0x20000bd2
 80083d8:	20000bd0 	.word	0x20000bd0
 80083dc:	20001c1d 	.word	0x20001c1d
 80083e0:	20000c88 	.word	0x20000c88
 80083e4:	20000bd4 	.word	0x20000bd4
 80083e8:	20000bd5 	.word	0x20000bd5
 80083ec:	20000bd6 	.word	0x20000bd6
 80083f0:	08024704 	.word	0x08024704
 80083f4:	20000c86 	.word	0x20000c86
 80083f8:	20000c85 	.word	0x20000c85
 80083fc:	20001c1e 	.word	0x20001c1e
 8008400:	20000554 	.word	0x20000554
 8008404:	20000bf4 	.word	0x20000bf4

08008408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008408:	b590      	push	{r4, r7, lr}
 800840a:	b09d      	sub	sp, #116	@ 0x74
 800840c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800840e:	2438      	movs	r4, #56	@ 0x38
 8008410:	193b      	adds	r3, r7, r4
 8008412:	0018      	movs	r0, r3
 8008414:	2338      	movs	r3, #56	@ 0x38
 8008416:	001a      	movs	r2, r3
 8008418:	2100      	movs	r1, #0
 800841a:	f018 f96d 	bl	80206f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800841e:	2324      	movs	r3, #36	@ 0x24
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	0018      	movs	r0, r3
 8008424:	2314      	movs	r3, #20
 8008426:	001a      	movs	r2, r3
 8008428:	2100      	movs	r1, #0
 800842a:	f018 f965 	bl	80206f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800842e:	003b      	movs	r3, r7
 8008430:	0018      	movs	r0, r3
 8008432:	2324      	movs	r3, #36	@ 0x24
 8008434:	001a      	movs	r2, r3
 8008436:	2100      	movs	r1, #0
 8008438:	f018 f95e 	bl	80206f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800843c:	4b34      	ldr	r3, [pc, #208]	@ (8008510 <SystemClock_Config+0x108>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a34      	ldr	r2, [pc, #208]	@ (8008514 <SystemClock_Config+0x10c>)
 8008442:	401a      	ands	r2, r3
 8008444:	4b32      	ldr	r3, [pc, #200]	@ (8008510 <SystemClock_Config+0x108>)
 8008446:	2180      	movs	r1, #128	@ 0x80
 8008448:	0109      	lsls	r1, r1, #4
 800844a:	430a      	orrs	r2, r1
 800844c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800844e:	f00c ff9b 	bl	8015388 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8008452:	4b31      	ldr	r3, [pc, #196]	@ (8008518 <SystemClock_Config+0x110>)
 8008454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008456:	4a2f      	ldr	r2, [pc, #188]	@ (8008514 <SystemClock_Config+0x10c>)
 8008458:	401a      	ands	r2, r3
 800845a:	4b2f      	ldr	r3, [pc, #188]	@ (8008518 <SystemClock_Config+0x110>)
 800845c:	2180      	movs	r1, #128	@ 0x80
 800845e:	0149      	lsls	r1, r1, #5
 8008460:	430a      	orrs	r2, r1
 8008462:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008464:	193b      	adds	r3, r7, r4
 8008466:	2226      	movs	r2, #38	@ 0x26
 8008468:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800846a:	193b      	adds	r3, r7, r4
 800846c:	2280      	movs	r2, #128	@ 0x80
 800846e:	0052      	lsls	r2, r2, #1
 8008470:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008472:	0021      	movs	r1, r4
 8008474:	187b      	adds	r3, r7, r1
 8008476:	2201      	movs	r2, #1
 8008478:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800847a:	187b      	adds	r3, r7, r1
 800847c:	2210      	movs	r2, #16
 800847e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008480:	187b      	adds	r3, r7, r1
 8008482:	2201      	movs	r2, #1
 8008484:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008486:	187b      	adds	r3, r7, r1
 8008488:	2200      	movs	r2, #0
 800848a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800848c:	187b      	adds	r3, r7, r1
 800848e:	0018      	movs	r0, r3
 8008490:	f00d f80a 	bl	80154a8 <HAL_RCC_OscConfig>
 8008494:	1e03      	subs	r3, r0, #0
 8008496:	d001      	beq.n	800849c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008498:	f000 f8fc 	bl	8008694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800849c:	2124      	movs	r1, #36	@ 0x24
 800849e:	187b      	adds	r3, r7, r1
 80084a0:	220f      	movs	r2, #15
 80084a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80084a4:	187b      	adds	r3, r7, r1
 80084a6:	2201      	movs	r2, #1
 80084a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084aa:	187b      	adds	r3, r7, r1
 80084ac:	2200      	movs	r2, #0
 80084ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80084b0:	187b      	adds	r3, r7, r1
 80084b2:	2200      	movs	r2, #0
 80084b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80084b6:	187b      	adds	r3, r7, r1
 80084b8:	2200      	movs	r2, #0
 80084ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80084bc:	187b      	adds	r3, r7, r1
 80084be:	2100      	movs	r1, #0
 80084c0:	0018      	movs	r0, r3
 80084c2:	f00d fbc5 	bl	8015c50 <HAL_RCC_ClockConfig>
 80084c6:	1e03      	subs	r3, r0, #0
 80084c8:	d001      	beq.n	80084ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80084ca:	f000 f8e3 	bl	8008694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80084ce:	003b      	movs	r3, r7
 80084d0:	226d      	movs	r2, #109	@ 0x6d
 80084d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80084d4:	003b      	movs	r3, r7
 80084d6:	2200      	movs	r2, #0
 80084d8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80084da:	003b      	movs	r3, r7
 80084dc:	2200      	movs	r2, #0
 80084de:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80084e0:	003b      	movs	r3, r7
 80084e2:	2200      	movs	r2, #0
 80084e4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80084e6:	003b      	movs	r3, r7
 80084e8:	2280      	movs	r2, #128	@ 0x80
 80084ea:	0252      	lsls	r2, r2, #9
 80084ec:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80084ee:	003b      	movs	r3, r7
 80084f0:	2280      	movs	r2, #128	@ 0x80
 80084f2:	04d2      	lsls	r2, r2, #19
 80084f4:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80084f6:	003b      	movs	r3, r7
 80084f8:	0018      	movs	r0, r3
 80084fa:	f00d fdcd 	bl	8016098 <HAL_RCCEx_PeriphCLKConfig>
 80084fe:	1e03      	subs	r3, r0, #0
 8008500:	d001      	beq.n	8008506 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8008502:	f000 f8c7 	bl	8008694 <Error_Handler>
  }
}
 8008506:	46c0      	nop			@ (mov r8, r8)
 8008508:	46bd      	mov	sp, r7
 800850a:	b01d      	add	sp, #116	@ 0x74
 800850c:	bd90      	pop	{r4, r7, pc}
 800850e:	46c0      	nop			@ (mov r8, r8)
 8008510:	40007000 	.word	0x40007000
 8008514:	ffffe7ff 	.word	0xffffe7ff
 8008518:	40021000 	.word	0x40021000

0800851c <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 8008520:	4b2f      	ldr	r3, [pc, #188]	@ (80085e0 <check_cli_command+0xc4>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	3b61      	subs	r3, #97	@ 0x61
 8008526:	2b13      	cmp	r3, #19
 8008528:	d830      	bhi.n	800858c <check_cli_command+0x70>
 800852a:	009a      	lsls	r2, r3, #2
 800852c:	4b2d      	ldr	r3, [pc, #180]	@ (80085e4 <check_cli_command+0xc8>)
 800852e:	18d3      	adds	r3, r2, r3
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008534:	4b2c      	ldr	r3, [pc, #176]	@ (80085e8 <check_cli_command+0xcc>)
 8008536:	0018      	movs	r0, r3
 8008538:	f017 ff90 	bl	802045c <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800853c:	2003      	movs	r0, #3
 800853e:	f006 faa9 	bl	800ea94 <SetVerboseLevel>
      break;
 8008542:	e04a      	b.n	80085da <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008544:	f7fb f884 	bl	8003650 <forceNTPupdate>
    break;
 8008548:	e047      	b.n	80085da <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800854a:	4b28      	ldr	r3, [pc, #160]	@ (80085ec <check_cli_command+0xd0>)
 800854c:	0018      	movs	r0, r3
 800854e:	f017 ff85 	bl	802045c <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008552:	2002      	movs	r0, #2
 8008554:	f006 fa9e 	bl	800ea94 <SetVerboseLevel>
      break;
 8008558:	e03f      	b.n	80085da <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800855a:	4b25      	ldr	r3, [pc, #148]	@ (80085f0 <check_cli_command+0xd4>)
 800855c:	0018      	movs	r0, r3
 800855e:	f017 ff7d 	bl	802045c <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008562:	2001      	movs	r0, #1
 8008564:	f006 fa96 	bl	800ea94 <SetVerboseLevel>
      break;
 8008568:	e037      	b.n	80085da <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800856a:	4b22      	ldr	r3, [pc, #136]	@ (80085f4 <check_cli_command+0xd8>)
 800856c:	0018      	movs	r0, r3
 800856e:	f017 ff75 	bl	802045c <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8008572:	2000      	movs	r0, #0
 8008574:	f006 fa8e 	bl	800ea94 <SetVerboseLevel>
      break;
 8008578:	e02f      	b.n	80085da <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800857a:	f006 fe65 	bl	800f248 <HAL_GetTick>
 800857e:	0002      	movs	r2, r0
 8008580:	4b1d      	ldr	r3, [pc, #116]	@ (80085f8 <check_cli_command+0xdc>)
 8008582:	601a      	str	r2, [r3, #0]
      break;
 8008584:	e029      	b.n	80085da <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8008586:	f7fe f8b5 	bl	80066f4 <showTime>
      break;
 800858a:	e026      	b.n	80085da <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800858c:	4a1b      	ldr	r2, [pc, #108]	@ (80085fc <check_cli_command+0xe0>)
 800858e:	4b1c      	ldr	r3, [pc, #112]	@ (8008600 <check_cli_command+0xe4>)
 8008590:	0019      	movs	r1, r3
 8008592:	2001      	movs	r0, #1
 8008594:	f006 fa14 	bl	800e9c0 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008598:	4b1a      	ldr	r3, [pc, #104]	@ (8008604 <check_cli_command+0xe8>)
 800859a:	0018      	movs	r0, r3
 800859c:	f017 ff5e 	bl	802045c <puts>
      printf("a - VerboseLevel set to all\r\n");
 80085a0:	4b19      	ldr	r3, [pc, #100]	@ (8008608 <check_cli_command+0xec>)
 80085a2:	0018      	movs	r0, r3
 80085a4:	f017 ff5a 	bl	802045c <puts>
      printf("f - Force NTP time synchronization\r\n");
 80085a8:	4b18      	ldr	r3, [pc, #96]	@ (800860c <check_cli_command+0xf0>)
 80085aa:	0018      	movs	r0, r3
 80085ac:	f017 ff56 	bl	802045c <puts>
      printf("i - VerboseLevel set to info\r\n");
 80085b0:	4b17      	ldr	r3, [pc, #92]	@ (8008610 <check_cli_command+0xf4>)
 80085b2:	0018      	movs	r0, r3
 80085b4:	f017 ff52 	bl	802045c <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 80085b8:	4b16      	ldr	r3, [pc, #88]	@ (8008614 <check_cli_command+0xf8>)
 80085ba:	0018      	movs	r0, r3
 80085bc:	f017 ff4e 	bl	802045c <puts>
      printf("n - VerboseLevel set to none\r\n");
 80085c0:	4b15      	ldr	r3, [pc, #84]	@ (8008618 <check_cli_command+0xfc>)
 80085c2:	0018      	movs	r0, r3
 80085c4:	f017 ff4a 	bl	802045c <puts>
      printf("s - Start particle measurement\r\n");
 80085c8:	4b14      	ldr	r3, [pc, #80]	@ (800861c <check_cli_command+0x100>)
 80085ca:	0018      	movs	r0, r3
 80085cc:	f017 ff46 	bl	802045c <puts>
      printf("t - Show actual systemtime\r\n");
 80085d0:	4b13      	ldr	r3, [pc, #76]	@ (8008620 <check_cli_command+0x104>)
 80085d2:	0018      	movs	r0, r3
 80085d4:	f017 ff42 	bl	802045c <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 80085d8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80085da:	46c0      	nop			@ (mov r8, r8)
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000bd8 	.word	0x20000bd8
 80085e4:	08025ca8 	.word	0x08025ca8
 80085e8:	08024734 	.word	0x08024734
 80085ec:	08024750 	.word	0x08024750
 80085f0:	0802476c 	.word	0x0802476c
 80085f4:	0802478c 	.word	0x0802478c
 80085f8:	20000c9c 	.word	0x20000c9c
 80085fc:	080247a8 	.word	0x080247a8
 8008600:	080247d8 	.word	0x080247d8
 8008604:	080247dc 	.word	0x080247dc
 8008608:	080247f4 	.word	0x080247f4
 800860c:	08024814 	.word	0x08024814
 8008610:	08024838 	.word	0x08024838
 8008614:	08024858 	.word	0x08024858
 8008618:	0802487c 	.word	0x0802487c
 800861c:	0802489c 	.word	0x0802489c
 8008620:	080248bc 	.word	0x080248bc

08008624 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800862c:	4908      	ldr	r1, [pc, #32]	@ (8008650 <HAL_UART_RxCpltCallback+0x2c>)
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <HAL_UART_RxCpltCallback+0x30>)
 8008630:	2201      	movs	r2, #1
 8008632:	0018      	movs	r0, r3
 8008634:	f00f f8d4 	bl	80177e0 <HAL_UART_Receive_IT>
  check_cli_command();
 8008638:	f7ff ff70 	bl	800851c <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800863c:	4904      	ldr	r1, [pc, #16]	@ (8008650 <HAL_UART_RxCpltCallback+0x2c>)
 800863e:	4b05      	ldr	r3, [pc, #20]	@ (8008654 <HAL_UART_RxCpltCallback+0x30>)
 8008640:	2201      	movs	r2, #1
 8008642:	0018      	movs	r0, r3
 8008644:	f00f f8cc 	bl	80177e0 <HAL_UART_Receive_IT>
}
 8008648:	46c0      	nop			@ (mov r8, r8)
 800864a:	46bd      	mov	sp, r7
 800864c:	b002      	add	sp, #8
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000bd8 	.word	0x20000bd8
 8008654:	20001db4 	.word	0x20001db4

08008658 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	0002      	movs	r2, r0
 8008660:	1dbb      	adds	r3, r7, #6
 8008662:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008664:	1dbb      	adds	r3, r7, #6
 8008666:	881a      	ldrh	r2, [r3, #0]
 8008668:	2380      	movs	r3, #128	@ 0x80
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	429a      	cmp	r2, r3
 800866e:	d10b      	bne.n	8008688 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008670:	f005 fc48 	bl	800df04 <setuserToggle>
    if (GetPMSensorPresence()) {
 8008674:	f000 f84c 	bl	8008710 <GetPMSensorPresence>
 8008678:	1e03      	subs	r3, r0, #0
 800867a:	d005      	beq.n	8008688 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800867c:	4b04      	ldr	r3, [pc, #16]	@ (8008690 <HAL_GPIO_EXTI_Callback+0x38>)
 800867e:	2201      	movs	r2, #1
 8008680:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 8008682:	2000      	movs	r0, #0
 8008684:	f000 feac 	bl	80093e0 <sen5x_Set_sen5x_state>
    }
  }
}
 8008688:	46c0      	nop			@ (mov r8, r8)
 800868a:	46bd      	mov	sp, r7
 800868c:	b002      	add	sp, #8
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20000bf0 	.word	0x20000bf0

08008694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008698:	b672      	cpsid	i
}
 800869a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800869c:	4a05      	ldr	r2, [pc, #20]	@ (80086b4 <Error_Handler+0x20>)
 800869e:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <Error_Handler+0x24>)
 80086a0:	0019      	movs	r1, r3
 80086a2:	2001      	movs	r0, #1
 80086a4:	f006 f98c 	bl	800e9c0 <CreateLine>
    HAL_Delay(2500);
 80086a8:	4b04      	ldr	r3, [pc, #16]	@ (80086bc <Error_Handler+0x28>)
 80086aa:	0018      	movs	r0, r3
 80086ac:	f006 fdd6 	bl	800f25c <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 80086b0:	46c0      	nop			@ (mov r8, r8)
 80086b2:	e7f3      	b.n	800869c <Error_Handler+0x8>
 80086b4:	080248d8 	.word	0x080248d8
 80086b8:	080247d8 	.word	0x080247d8
 80086bc:	000009c4 	.word	0x000009c4

080086c0 <testInit>:
#include "display.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 80086c4:	4b10      	ldr	r3, [pc, #64]	@ (8008708 <testInit+0x48>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 80086ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008708 <testInit+0x48>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 80086d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <testInit+0x48>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 80086d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008708 <testInit+0x48>)
 80086d8:	2200      	movs	r2, #0
 80086da:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 80086dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008708 <testInit+0x48>)
 80086de:	2200      	movs	r2, #0
 80086e0:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 80086e2:	4b09      	ldr	r3, [pc, #36]	@ (8008708 <testInit+0x48>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 80086e8:	4b08      	ldr	r3, [pc, #32]	@ (800870c <testInit+0x4c>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 80086ee:	4b07      	ldr	r3, [pc, #28]	@ (800870c <testInit+0x4c>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 80086f4:	4b05      	ldr	r3, [pc, #20]	@ (800870c <testInit+0x4c>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 80086fa:	4b04      	ldr	r3, [pc, #16]	@ (800870c <testInit+0x4c>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	70da      	strb	r2, [r3, #3]
}
 8008700:	46c0      	nop			@ (mov r8, r8)
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	20000bf4 	.word	0x20000bf4
 800870c:	20000bf0 	.word	0x20000bf0

08008710 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8008714:	4b02      	ldr	r3, [pc, #8]	@ (8008720 <GetPMSensorPresence+0x10>)
 8008716:	789b      	ldrb	r3, [r3, #2]
}
 8008718:	0018      	movs	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	46c0      	nop			@ (mov r8, r8)
 8008720:	20000bf4 	.word	0x20000bf4

08008724 <DisablePMSensor>:

void DisablePMSensor() {
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 8008728:	4b02      	ldr	r3, [pc, #8]	@ (8008734 <DisablePMSensor+0x10>)
 800872a:	2200      	movs	r2, #0
 800872c:	709a      	strb	r2, [r3, #2]
}
 800872e:	46c0      	nop			@ (mov r8, r8)
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000bf4 	.word	0x20000bf4

08008738 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800873c:	4b02      	ldr	r3, [pc, #8]	@ (8008748 <IsSGPPresent+0x10>)
 800873e:	785b      	ldrb	r3, [r3, #1]
}
 8008740:	0018      	movs	r0, r3
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	46c0      	nop			@ (mov r8, r8)
 8008748:	20000bf4 	.word	0x20000bf4

0800874c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	0002      	movs	r2, r0
 8008754:	1dfb      	adds	r3, r7, #7
 8008756:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 8008758:	4b0b      	ldr	r3, [pc, #44]	@ (8008788 <SetVOCSensorDIS_ENA+0x3c>)
 800875a:	1dfa      	adds	r2, r7, #7
 800875c:	7812      	ldrb	r2, [r2, #0]
 800875e:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 8008760:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <SetVOCSensorDIS_ENA+0x40>)
 8008762:	1dfa      	adds	r2, r7, #7
 8008764:	7812      	ldrb	r2, [r2, #0]
 8008766:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 8008768:	1dfb      	adds	r3, r7, #7
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <SetVOCSensorDIS_ENA+0x28>
 8008770:	4b07      	ldr	r3, [pc, #28]	@ (8008790 <SetVOCSensorDIS_ENA+0x44>)
 8008772:	e000      	b.n	8008776 <SetVOCSensorDIS_ENA+0x2a>
 8008774:	4b07      	ldr	r3, [pc, #28]	@ (8008794 <SetVOCSensorDIS_ENA+0x48>)
 8008776:	4a08      	ldr	r2, [pc, #32]	@ (8008798 <SetVOCSensorDIS_ENA+0x4c>)
 8008778:	4908      	ldr	r1, [pc, #32]	@ (800879c <SetVOCSensorDIS_ENA+0x50>)
 800877a:	2003      	movs	r0, #3
 800877c:	f006 f920 	bl	800e9c0 <CreateLine>
}
 8008780:	46c0      	nop			@ (mov r8, r8)
 8008782:	46bd      	mov	sp, r7
 8008784:	b002      	add	sp, #8
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20000bf4 	.word	0x20000bf4
 800878c:	20000bf0 	.word	0x20000bf0
 8008790:	08024904 	.word	0x08024904
 8008794:	0802490c 	.word	0x0802490c
 8008798:	08024918 	.word	0x08024918
 800879c:	0802492c 	.word	0x0802492c

080087a0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 80087a4:	4b02      	ldr	r3, [pc, #8]	@ (80087b0 <IsPMSensorEnabled+0x10>)
 80087a6:	789b      	ldrb	r3, [r3, #2]
}
 80087a8:	0018      	movs	r0, r3
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	46c0      	nop			@ (mov r8, r8)
 80087b0:	20000bf0 	.word	0x20000bf0

080087b4 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	0002      	movs	r2, r0
 80087bc:	1dfb      	adds	r3, r7, #7
 80087be:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 80087c0:	4b05      	ldr	r3, [pc, #20]	@ (80087d8 <SetVOCSensorStatus+0x24>)
 80087c2:	795b      	ldrb	r3, [r3, #5]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 80087c8:	4b04      	ldr	r3, [pc, #16]	@ (80087dc <SetVOCSensorStatus+0x28>)
 80087ca:	1dfa      	adds	r2, r7, #7
 80087cc:	7812      	ldrb	r2, [r2, #0]
 80087ce:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 80087d0:	46c0      	nop			@ (mov r8, r8)
 80087d2:	46bd      	mov	sp, r7
 80087d4:	b002      	add	sp, #8
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000bf4 	.word	0x20000bf4
 80087dc:	20000bf0 	.word	0x20000bf0

080087e0 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	0002      	movs	r2, r0
 80087e8:	1dfb      	adds	r3, r7, #7
 80087ea:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 80087ec:	4b03      	ldr	r3, [pc, #12]	@ (80087fc <SetPMSensorStatus+0x1c>)
 80087ee:	1dfa      	adds	r2, r7, #7
 80087f0:	7812      	ldrb	r2, [r2, #0]
 80087f2:	709a      	strb	r2, [r3, #2]
}
 80087f4:	46c0      	nop			@ (mov r8, r8)
 80087f6:	46bd      	mov	sp, r7
 80087f8:	b002      	add	sp, #8
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20000bf0 	.word	0x20000bf0

08008800 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008804:	4b02      	ldr	r3, [pc, #8]	@ (8008810 <SetESPMeasurementDone+0x10>)
 8008806:	2201      	movs	r2, #1
 8008808:	711a      	strb	r2, [r3, #4]
}
 800880a:	46c0      	nop			@ (mov r8, r8)
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20000bf4 	.word	0x20000bf4

08008814 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
  testInit();
 8008822:	f7ff ff4d 	bl	80086c0 <testInit>
  I2CSensors_Init(sensorI2C);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	0018      	movs	r0, r3
 800882a:	f7fd fbf9 	bl	8006020 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800882e:	f006 faf9 	bl	800ee24 <HIDS_DeviceConnected>
 8008832:	0003      	movs	r3, r0
 8008834:	001a      	movs	r2, r3
 8008836:	2301      	movs	r3, #1
 8008838:	4053      	eors	r3, r2
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00c      	beq.n	800885a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8008840:	4a7f      	ldr	r2, [pc, #508]	@ (8008a40 <Device_Init+0x22c>)
 8008842:	4b80      	ldr	r3, [pc, #512]	@ (8008a44 <Device_Init+0x230>)
 8008844:	0019      	movs	r1, r3
 8008846:	2001      	movs	r0, #1
 8008848:	f006 f8ba 	bl	800e9c0 <CreateLine>
     SensorProbe.HT_Present = false;
 800884c:	4b7e      	ldr	r3, [pc, #504]	@ (8008a48 <Device_Init+0x234>)
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8008852:	4b7e      	ldr	r3, [pc, #504]	@ (8008a4c <Device_Init+0x238>)
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
 8008858:	e008      	b.n	800886c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800885a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a48 <Device_Init+0x234>)
 800885c:	2201      	movs	r2, #1
 800885e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008860:	4a7b      	ldr	r2, [pc, #492]	@ (8008a50 <Device_Init+0x23c>)
 8008862:	4b7c      	ldr	r3, [pc, #496]	@ (8008a54 <Device_Init+0x240>)
 8008864:	0019      	movs	r1, r3
 8008866:	2003      	movs	r0, #3
 8008868:	f006 f8aa 	bl	800e9c0 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800886c:	f003 fb72 	bl	800bf54 <SGP_DeviceConnected>
 8008870:	0003      	movs	r3, r0
 8008872:	001a      	movs	r2, r3
 8008874:	2301      	movs	r3, #1
 8008876:	4053      	eors	r3, r2
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00c      	beq.n	8008898 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 800887e:	4b72      	ldr	r3, [pc, #456]	@ (8008a48 <Device_Init+0x234>)
 8008880:	2200      	movs	r2, #0
 8008882:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008884:	4a74      	ldr	r2, [pc, #464]	@ (8008a58 <Device_Init+0x244>)
 8008886:	4b6f      	ldr	r3, [pc, #444]	@ (8008a44 <Device_Init+0x230>)
 8008888:	0019      	movs	r1, r3
 800888a:	2001      	movs	r0, #1
 800888c:	f006 f898 	bl	800e9c0 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008890:	4b6e      	ldr	r3, [pc, #440]	@ (8008a4c <Device_Init+0x238>)
 8008892:	2200      	movs	r2, #0
 8008894:	705a      	strb	r2, [r3, #1]
 8008896:	e00b      	b.n	80088b0 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008898:	4b6b      	ldr	r3, [pc, #428]	@ (8008a48 <Device_Init+0x234>)
 800889a:	2201      	movs	r2, #1
 800889c:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 800889e:	4b6a      	ldr	r3, [pc, #424]	@ (8008a48 <Device_Init+0x234>)
 80088a0:	2201      	movs	r2, #1
 80088a2:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 80088a4:	4a6d      	ldr	r2, [pc, #436]	@ (8008a5c <Device_Init+0x248>)
 80088a6:	4b6b      	ldr	r3, [pc, #428]	@ (8008a54 <Device_Init+0x240>)
 80088a8:	0019      	movs	r1, r3
 80088aa:	2003      	movs	r0, #3
 80088ac:	f006 f888 	bl	800e9c0 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 80088b0:	4b65      	ldr	r3, [pc, #404]	@ (8008a48 <Device_Init+0x234>)
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d009      	beq.n	80088cc <Device_Init+0xb8>
 80088b8:	4b63      	ldr	r3, [pc, #396]	@ (8008a48 <Device_Init+0x234>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <Device_Init+0xb8>
    SetDBLED(false, true, false);
 80088c0:	2200      	movs	r2, #0
 80088c2:	2101      	movs	r1, #1
 80088c4:	2000      	movs	r0, #0
 80088c6:	f004 fe53 	bl	800d570 <SetDBLED>
 80088ca:	e018      	b.n	80088fe <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	2001      	movs	r0, #1
 80088d2:	f004 fe4d 	bl	800d570 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80088d6:	4b62      	ldr	r3, [pc, #392]	@ (8008a60 <Device_Init+0x24c>)
 80088d8:	2200      	movs	r2, #0
 80088da:	2101      	movs	r1, #1
 80088dc:	0018      	movs	r0, r3
 80088de:	f007 ff44 	bl	801076a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80088e2:	2380      	movs	r3, #128	@ 0x80
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	485e      	ldr	r0, [pc, #376]	@ (8008a60 <Device_Init+0x24c>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	0019      	movs	r1, r3
 80088ec:	f007 ff3d 	bl	801076a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80088f0:	2380      	movs	r3, #128	@ 0x80
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	485a      	ldr	r0, [pc, #360]	@ (8008a60 <Device_Init+0x24c>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	0019      	movs	r1, r3
 80088fa:	f007 ff36 	bl	801076a <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 80088fe:	4b53      	ldr	r3, [pc, #332]	@ (8008a4c <Device_Init+0x238>)
 8008900:	78db      	ldrb	r3, [r3, #3]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d028      	beq.n	8008958 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 8008906:	4a57      	ldr	r2, [pc, #348]	@ (8008a64 <Device_Init+0x250>)
 8008908:	4b57      	ldr	r3, [pc, #348]	@ (8008a68 <Device_Init+0x254>)
 800890a:	0019      	movs	r1, r3
 800890c:	2002      	movs	r0, #2
 800890e:	f006 f857 	bl	800e9c0 <CreateLine>
    if (!enableMicrophone(true)) {
 8008912:	2001      	movs	r0, #1
 8008914:	f003 ff2a 	bl	800c76c <enableMicrophone>
 8008918:	0003      	movs	r3, r0
 800891a:	001a      	movs	r2, r3
 800891c:	2301      	movs	r3, #1
 800891e:	4053      	eors	r3, r2
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00c      	beq.n	8008940 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 8008926:	4a51      	ldr	r2, [pc, #324]	@ (8008a6c <Device_Init+0x258>)
 8008928:	4b46      	ldr	r3, [pc, #280]	@ (8008a44 <Device_Init+0x230>)
 800892a:	0019      	movs	r1, r3
 800892c:	2001      	movs	r0, #1
 800892e:	f006 f847 	bl	800e9c0 <CreateLine>
      SensorProbe.MIC_Present = false;
 8008932:	4b45      	ldr	r3, [pc, #276]	@ (8008a48 <Device_Init+0x234>)
 8008934:	2200      	movs	r2, #0
 8008936:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8008938:	4b44      	ldr	r3, [pc, #272]	@ (8008a4c <Device_Init+0x238>)
 800893a:	2200      	movs	r2, #0
 800893c:	70da      	strb	r2, [r3, #3]
 800893e:	e00b      	b.n	8008958 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 8008940:	4b41      	ldr	r3, [pc, #260]	@ (8008a48 <Device_Init+0x234>)
 8008942:	2201      	movs	r2, #1
 8008944:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008946:	4b41      	ldr	r3, [pc, #260]	@ (8008a4c <Device_Init+0x238>)
 8008948:	2201      	movs	r2, #1
 800894a:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800894c:	4a48      	ldr	r2, [pc, #288]	@ (8008a70 <Device_Init+0x25c>)
 800894e:	4b41      	ldr	r3, [pc, #260]	@ (8008a54 <Device_Init+0x240>)
 8008950:	0019      	movs	r1, r3
 8008952:	2003      	movs	r0, #3
 8008954:	f006 f834 	bl	800e9c0 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8008958:	f000 fe2c 	bl	80095b4 <probe_sen5x>
 800895c:	1e03      	subs	r3, r0, #0
 800895e:	d122      	bne.n	80089a6 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8008960:	4a44      	ldr	r2, [pc, #272]	@ (8008a74 <Device_Init+0x260>)
 8008962:	4b3c      	ldr	r3, [pc, #240]	@ (8008a54 <Device_Init+0x240>)
 8008964:	0019      	movs	r1, r3
 8008966:	2003      	movs	r0, #3
 8008968:	f006 f82a 	bl	800e9c0 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800896c:	4b36      	ldr	r3, [pc, #216]	@ (8008a48 <Device_Init+0x234>)
 800896e:	2201      	movs	r2, #1
 8008970:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008972:	4b36      	ldr	r3, [pc, #216]	@ (8008a4c <Device_Init+0x238>)
 8008974:	2201      	movs	r2, #1
 8008976:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8008978:	4b3f      	ldr	r3, [pc, #252]	@ (8008a78 <Device_Init+0x264>)
 800897a:	791b      	ldrb	r3, [r3, #4]
 800897c:	2b34      	cmp	r3, #52	@ 0x34
 800897e:	d003      	beq.n	8008988 <Device_Init+0x174>
 8008980:	4b3d      	ldr	r3, [pc, #244]	@ (8008a78 <Device_Init+0x264>)
 8008982:	791b      	ldrb	r3, [r3, #4]
 8008984:	2b35      	cmp	r3, #53	@ 0x35
 8008986:	d11c      	bne.n	80089c2 <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008988:	4a3c      	ldr	r2, [pc, #240]	@ (8008a7c <Device_Init+0x268>)
 800898a:	4b37      	ldr	r3, [pc, #220]	@ (8008a68 <Device_Init+0x254>)
 800898c:	0019      	movs	r1, r3
 800898e:	2002      	movs	r0, #2
 8008990:	f006 f816 	bl	800e9c0 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008994:	4b2d      	ldr	r3, [pc, #180]	@ (8008a4c <Device_Init+0x238>)
 8008996:	2200      	movs	r2, #0
 8008998:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800899a:	4b2b      	ldr	r3, [pc, #172]	@ (8008a48 <Device_Init+0x234>)
 800899c:	2200      	movs	r2, #0
 800899e:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 80089a0:	f003 fcbc 	bl	800c31c <SGP_SoftReset>
 80089a4:	e00d      	b.n	80089c2 <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 80089a6:	f000 fdcf 	bl	8009548 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 80089aa:	4a35      	ldr	r2, [pc, #212]	@ (8008a80 <Device_Init+0x26c>)
 80089ac:	4b29      	ldr	r3, [pc, #164]	@ (8008a54 <Device_Init+0x240>)
 80089ae:	0019      	movs	r1, r3
 80089b0:	2003      	movs	r0, #3
 80089b2:	f006 f805 	bl	800e9c0 <CreateLine>
    SensorProbe.PM_Present = false;
 80089b6:	4b24      	ldr	r3, [pc, #144]	@ (8008a48 <Device_Init+0x234>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 80089bc:	4b23      	ldr	r3, [pc, #140]	@ (8008a4c <Device_Init+0x238>)
 80089be:	2200      	movs	r2, #0
 80089c0:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 80089c2:	4b21      	ldr	r3, [pc, #132]	@ (8008a48 <Device_Init+0x234>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <Device_Init+0x1ba>
 80089ca:	4b2e      	ldr	r3, [pc, #184]	@ (8008a84 <Device_Init+0x270>)
 80089cc:	e000      	b.n	80089d0 <Device_Init+0x1bc>
 80089ce:	4b2e      	ldr	r3, [pc, #184]	@ (8008a88 <Device_Init+0x274>)
 80089d0:	4a2e      	ldr	r2, [pc, #184]	@ (8008a8c <Device_Init+0x278>)
 80089d2:	4925      	ldr	r1, [pc, #148]	@ (8008a68 <Device_Init+0x254>)
 80089d4:	2002      	movs	r0, #2
 80089d6:	f005 fff3 	bl	800e9c0 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 80089da:	4b1b      	ldr	r3, [pc, #108]	@ (8008a48 <Device_Init+0x234>)
 80089dc:	785b      	ldrb	r3, [r3, #1]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <Device_Init+0x1d2>
 80089e2:	4b28      	ldr	r3, [pc, #160]	@ (8008a84 <Device_Init+0x270>)
 80089e4:	e000      	b.n	80089e8 <Device_Init+0x1d4>
 80089e6:	4b28      	ldr	r3, [pc, #160]	@ (8008a88 <Device_Init+0x274>)
 80089e8:	4a29      	ldr	r2, [pc, #164]	@ (8008a90 <Device_Init+0x27c>)
 80089ea:	491f      	ldr	r1, [pc, #124]	@ (8008a68 <Device_Init+0x254>)
 80089ec:	2002      	movs	r0, #2
 80089ee:	f005 ffe7 	bl	800e9c0 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80089f2:	4b15      	ldr	r3, [pc, #84]	@ (8008a48 <Device_Init+0x234>)
 80089f4:	789b      	ldrb	r3, [r3, #2]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <Device_Init+0x1ea>
 80089fa:	4b22      	ldr	r3, [pc, #136]	@ (8008a84 <Device_Init+0x270>)
 80089fc:	e000      	b.n	8008a00 <Device_Init+0x1ec>
 80089fe:	4b22      	ldr	r3, [pc, #136]	@ (8008a88 <Device_Init+0x274>)
 8008a00:	4a24      	ldr	r2, [pc, #144]	@ (8008a94 <Device_Init+0x280>)
 8008a02:	4919      	ldr	r1, [pc, #100]	@ (8008a68 <Device_Init+0x254>)
 8008a04:	2002      	movs	r0, #2
 8008a06:	f005 ffdb 	bl	800e9c0 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a48 <Device_Init+0x234>)
 8008a0c:	78db      	ldrb	r3, [r3, #3]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <Device_Init+0x202>
 8008a12:	4b1c      	ldr	r3, [pc, #112]	@ (8008a84 <Device_Init+0x270>)
 8008a14:	e000      	b.n	8008a18 <Device_Init+0x204>
 8008a16:	4b1c      	ldr	r3, [pc, #112]	@ (8008a88 <Device_Init+0x274>)
 8008a18:	4a1f      	ldr	r2, [pc, #124]	@ (8008a98 <Device_Init+0x284>)
 8008a1a:	4913      	ldr	r1, [pc, #76]	@ (8008a68 <Device_Init+0x254>)
 8008a1c:	2002      	movs	r0, #2
 8008a1e:	f005 ffcf 	bl	800e9c0 <CreateLine>
  ESP_Init(espUart);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	0018      	movs	r0, r3
 8008a26:	f7fa ffcb 	bl	80039c0 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8008a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008a9c <Device_Init+0x288>)
 8008a2c:	4b09      	ldr	r3, [pc, #36]	@ (8008a54 <Device_Init+0x240>)
 8008a2e:	0019      	movs	r1, r3
 8008a30:	2003      	movs	r0, #3
 8008a32:	f005 ffc5 	bl	800e9c0 <CreateLine>
}
 8008a36:	46c0      	nop			@ (mov r8, r8)
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	b004      	add	sp, #16
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	46c0      	nop			@ (mov r8, r8)
 8008a40:	08024930 	.word	0x08024930
 8008a44:	08024960 	.word	0x08024960
 8008a48:	20000bf4 	.word	0x20000bf4
 8008a4c:	20000bf0 	.word	0x20000bf0
 8008a50:	08024964 	.word	0x08024964
 8008a54:	0802492c 	.word	0x0802492c
 8008a58:	08024990 	.word	0x08024990
 8008a5c:	080249ac 	.word	0x080249ac
 8008a60:	50000400 	.word	0x50000400
 8008a64:	080249c4 	.word	0x080249c4
 8008a68:	080249e8 	.word	0x080249e8
 8008a6c:	080249ec 	.word	0x080249ec
 8008a70:	08024a18 	.word	0x08024a18
 8008a74:	08024a44 	.word	0x08024a44
 8008a78:	20000c88 	.word	0x20000c88
 8008a7c:	08024a5c 	.word	0x08024a5c
 8008a80:	08024aac 	.word	0x08024aac
 8008a84:	08024ad0 	.word	0x08024ad0
 8008a88:	08024ad4 	.word	0x08024ad4
 8008a8c:	08024ad8 	.word	0x08024ad8
 8008a90:	08024af4 	.word	0x08024af4
 8008a94:	08024b10 	.word	0x08024b10
 8008a98:	08024b2c 	.word	0x08024b2c
 8008a9c:	08024b48 	.word	0x08024b48

08008aa0 <Device_Test>:

void Device_Test(){
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008aa4:	4b34      	ldr	r3, [pc, #208]	@ (8008b78 <Device_Test+0xd8>)
 8008aa6:	78db      	ldrb	r3, [r3, #3]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	4053      	eors	r3, r2
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d027      	beq.n	8008b02 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 8008ab2:	f000 fab9 	bl	8009028 <MIC_TestMeasurementDone>
 8008ab6:	1e03      	subs	r3, r0, #0
 8008ab8:	d011      	beq.n	8008ade <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 8008aba:	4b2f      	ldr	r3, [pc, #188]	@ (8008b78 <Device_Test+0xd8>)
 8008abc:	2201      	movs	r2, #1
 8008abe:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8008b7c <Device_Test+0xdc>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 8008ac6:	f004 fcd7 	bl	800d478 <Calculate_LED_ON>
 8008aca:	0003      	movs	r3, r0
 8008acc:	0019      	movs	r1, r3
 8008ace:	23fa      	movs	r3, #250	@ 0xfa
 8008ad0:	011a      	lsls	r2, r3, #4
 8008ad2:	23fa      	movs	r3, #250	@ 0xfa
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f004 fd16 	bl	800d508 <SetStatusLED>
 8008adc:	e011      	b.n	8008b02 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 8008ade:	f003 fe21 	bl	800c724 <micSettlingComplete>
 8008ae2:	1e03      	subs	r3, r0, #0
 8008ae4:	d00d      	beq.n	8008b02 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 8008ae6:	4b25      	ldr	r3, [pc, #148]	@ (8008b7c <Device_Test+0xdc>)
 8008ae8:	2201      	movs	r2, #1
 8008aea:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008aec:	f004 fcc4 	bl	800d478 <Calculate_LED_ON>
 8008af0:	0003      	movs	r3, r0
 8008af2:	0018      	movs	r0, r3
 8008af4:	23fa      	movs	r3, #250	@ 0xfa
 8008af6:	011a      	lsls	r2, r3, #4
 8008af8:	23fa      	movs	r3, #250	@ 0xfa
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	0019      	movs	r1, r3
 8008afe:	f004 fd03 	bl	800d508 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 8008b02:	4b1d      	ldr	r3, [pc, #116]	@ (8008b78 <Device_Test+0xd8>)
 8008b04:	791b      	ldrb	r3, [r3, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	4053      	eors	r3, r2
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 8008b10:	f7fc fcc0 	bl	8005494 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8008b14:	4b18      	ldr	r3, [pc, #96]	@ (8008b78 <Device_Test+0xd8>)
 8008b16:	791b      	ldrb	r3, [r3, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <Device_Test+0x84>
 8008b1c:	4b16      	ldr	r3, [pc, #88]	@ (8008b78 <Device_Test+0xd8>)
 8008b1e:	78db      	ldrb	r3, [r3, #3]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d106      	bne.n	8008b32 <Device_Test+0x92>
 8008b24:	4b16      	ldr	r3, [pc, #88]	@ (8008b80 <Device_Test+0xe0>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	0018      	movs	r0, r3
 8008b2a:	f005 fef3 	bl	800e914 <TimestampIsReached>
 8008b2e:	1e03      	subs	r3, r0, #0
 8008b30:	d01f      	beq.n	8008b72 <Device_Test+0xd2>
    Info("Test completed");
 8008b32:	4a14      	ldr	r2, [pc, #80]	@ (8008b84 <Device_Test+0xe4>)
 8008b34:	4b14      	ldr	r3, [pc, #80]	@ (8008b88 <Device_Test+0xe8>)
 8008b36:	0019      	movs	r1, r3
 8008b38:	2002      	movs	r0, #2
 8008b3a:	f005 ff41 	bl	800e9c0 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 8008b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b78 <Device_Test+0xd8>)
 8008b40:	791b      	ldrb	r3, [r3, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <Device_Test+0xaa>
 8008b46:	4b11      	ldr	r3, [pc, #68]	@ (8008b8c <Device_Test+0xec>)
 8008b48:	e000      	b.n	8008b4c <Device_Test+0xac>
 8008b4a:	4b11      	ldr	r3, [pc, #68]	@ (8008b90 <Device_Test+0xf0>)
 8008b4c:	4a11      	ldr	r2, [pc, #68]	@ (8008b94 <Device_Test+0xf4>)
 8008b4e:	490e      	ldr	r1, [pc, #56]	@ (8008b88 <Device_Test+0xe8>)
 8008b50:	2002      	movs	r0, #2
 8008b52:	f005 ff35 	bl	800e9c0 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 8008b56:	4b08      	ldr	r3, [pc, #32]	@ (8008b78 <Device_Test+0xd8>)
 8008b58:	78db      	ldrb	r3, [r3, #3]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <Device_Test+0xc2>
 8008b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b8c <Device_Test+0xec>)
 8008b60:	e000      	b.n	8008b64 <Device_Test+0xc4>
 8008b62:	4b0b      	ldr	r3, [pc, #44]	@ (8008b90 <Device_Test+0xf0>)
 8008b64:	4a0c      	ldr	r2, [pc, #48]	@ (8008b98 <Device_Test+0xf8>)
 8008b66:	4908      	ldr	r1, [pc, #32]	@ (8008b88 <Device_Test+0xe8>)
 8008b68:	2002      	movs	r0, #2
 8008b6a:	f005 ff29 	bl	800e9c0 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 8008b6e:	f7ff f9cf 	bl	8007f10 <SetTestDone>
  }
}
 8008b72:	46c0      	nop			@ (mov r8, r8)
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20000bf4 	.word	0x20000bf4
 8008b7c:	20000bf0 	.word	0x20000bf0
 8008b80:	20000be8 	.word	0x20000be8
 8008b84:	08024b6c 	.word	0x08024b6c
 8008b88:	080249e8 	.word	0x080249e8
 8008b8c:	08024b7c 	.word	0x08024b7c
 8008b90:	08024b84 	.word	0x08024b84
 8008b94:	08024b8c 	.word	0x08024b8c
 8008b98:	08024ba0 	.word	0x08024ba0

08008b9c <AllDevicesReady>:

bool AllDevicesReady() {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c4c <AllDevicesReady+0xb0>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f005 feb5 	bl	800e914 <TimestampIsReached>
 8008baa:	1e03      	subs	r3, r0, #0
 8008bac:	d04a      	beq.n	8008c44 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8008bae:	4b28      	ldr	r3, [pc, #160]	@ (8008c50 <AllDevicesReady+0xb4>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b06      	cmp	r3, #6
 8008bb4:	d102      	bne.n	8008bbc <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008bb6:	4b27      	ldr	r3, [pc, #156]	@ (8008c54 <AllDevicesReady+0xb8>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008bbc:	4b26      	ldr	r3, [pc, #152]	@ (8008c58 <AllDevicesReady+0xbc>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b07      	cmp	r3, #7
 8008bc2:	d006      	beq.n	8008bd2 <AllDevicesReady+0x36>
 8008bc4:	4b25      	ldr	r3, [pc, #148]	@ (8008c5c <AllDevicesReady+0xc0>)
 8008bc6:	795b      	ldrb	r3, [r3, #5]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	4053      	eors	r3, r2
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 8008bd2:	4b20      	ldr	r3, [pc, #128]	@ (8008c54 <AllDevicesReady+0xb8>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8008bd8:	4b21      	ldr	r3, [pc, #132]	@ (8008c60 <AllDevicesReady+0xc4>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d102      	bne.n	8008be6 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 8008be0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c54 <AllDevicesReady+0xb8>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8008be6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c64 <AllDevicesReady+0xc8>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d102      	bne.n	8008bf4 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 8008bee:	4b19      	ldr	r3, [pc, #100]	@ (8008c54 <AllDevicesReady+0xb8>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c68 <AllDevicesReady+0xcc>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b09      	cmp	r3, #9
 8008bfa:	d123      	bne.n	8008c44 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008bfc:	4b15      	ldr	r3, [pc, #84]	@ (8008c54 <AllDevicesReady+0xb8>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2201      	movs	r2, #1
 8008c02:	4053      	eors	r3, r2
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d016      	beq.n	8008c38 <AllDevicesReady+0x9c>
 8008c0a:	4b12      	ldr	r3, [pc, #72]	@ (8008c54 <AllDevicesReady+0xb8>)
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4053      	eors	r3, r2
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00f      	beq.n	8008c38 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008c18:	4b0e      	ldr	r3, [pc, #56]	@ (8008c54 <AllDevicesReady+0xb8>)
 8008c1a:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	4053      	eors	r3, r2
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d008      	beq.n	8008c38 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008c26:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <AllDevicesReady+0xb8>)
 8008c28:	78db      	ldrb	r3, [r3, #3]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4053      	eors	r3, r2
 8008c2e:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <AllDevicesReady+0x9c>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <AllDevicesReady+0x9e>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	1c1a      	adds	r2, r3, #0
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4013      	ands	r3, r2
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e000      	b.n	8008c46 <AllDevicesReady+0xaa>
    }
  }
  return false;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	0018      	movs	r0, r3
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	20000be8 	.word	0x20000be8
 8008c50:	20000bd5 	.word	0x20000bd5
 8008c54:	20000bf0 	.word	0x20000bf0
 8008c58:	20000bd4 	.word	0x20000bd4
 8008c5c:	20000bf4 	.word	0x20000bf4
 8008c60:	2000008d 	.word	0x2000008d
 8008c64:	20000bd6 	.word	0x20000bd6
 8008c68:	20000bd7 	.word	0x20000bd7

08008c6c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008c70:	4b11      	ldr	r3, [pc, #68]	@ (8008cb8 <EnabledConnectedDevices+0x4c>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8008c78:	4b10      	ldr	r3, [pc, #64]	@ (8008cbc <EnabledConnectedDevices+0x50>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb8 <EnabledConnectedDevices+0x4c>)
 8008c80:	785b      	ldrb	r3, [r3, #1]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <EnabledConnectedDevices+0x28>
 8008c86:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb8 <EnabledConnectedDevices+0x4c>)
 8008c88:	795b      	ldrb	r3, [r3, #5]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 8008c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8008cbc <EnabledConnectedDevices+0x50>)
 8008c90:	2201      	movs	r2, #1
 8008c92:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008c94:	4b08      	ldr	r3, [pc, #32]	@ (8008cb8 <EnabledConnectedDevices+0x4c>)
 8008c96:	789b      	ldrb	r3, [r3, #2]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8008c9c:	4b07      	ldr	r3, [pc, #28]	@ (8008cbc <EnabledConnectedDevices+0x50>)
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8008ca2:	4b05      	ldr	r3, [pc, #20]	@ (8008cb8 <EnabledConnectedDevices+0x4c>)
 8008ca4:	78db      	ldrb	r3, [r3, #3]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 8008caa:	4b04      	ldr	r3, [pc, #16]	@ (8008cbc <EnabledConnectedDevices+0x50>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	70da      	strb	r2, [r3, #3]
  }
}
 8008cb0:	46c0      	nop			@ (mov r8, r8)
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	46c0      	nop			@ (mov r8, r8)
 8008cb8:	20000bf4 	.word	0x20000bf4
 8008cbc:	20000bf0 	.word	0x20000bf0

08008cc0 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8008cf0 <DisableConnectedDevices+0x30>)
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <DisableConnectedDevices+0x34>)
 8008cc8:	0019      	movs	r1, r3
 8008cca:	2003      	movs	r0, #3
 8008ccc:	f005 fe78 	bl	800e9c0 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 8008cd0:	4b09      	ldr	r3, [pc, #36]	@ (8008cf8 <DisableConnectedDevices+0x38>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 8008cd6:	4b08      	ldr	r3, [pc, #32]	@ (8008cf8 <DisableConnectedDevices+0x38>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008cdc:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <DisableConnectedDevices+0x38>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 8008ce2:	4b05      	ldr	r3, [pc, #20]	@ (8008cf8 <DisableConnectedDevices+0x38>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	70da      	strb	r2, [r3, #3]
}
 8008ce8:	46c0      	nop			@ (mov r8, r8)
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	46c0      	nop			@ (mov r8, r8)
 8008cf0:	08024bb4 	.word	0x08024bb4
 8008cf4:	0802492c 	.word	0x0802492c
 8008cf8:	20000bf0 	.word	0x20000bf0

08008cfc <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 8008d00:	4b02      	ldr	r3, [pc, #8]	@ (8008d0c <ResetdBAmax+0x10>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
}
 8008d06:	46c0      	nop			@ (mov r8, r8)
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000c40 	.word	0x20000c40

08008d10 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 8008d18:	f006 fa96 	bl	800f248 <HAL_GetTick>
 8008d1c:	0002      	movs	r2, r0
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	18d2      	adds	r2, r2, r3
 8008d22:	4b03      	ldr	r3, [pc, #12]	@ (8008d30 <setMICTimeStamp+0x20>)
 8008d24:	601a      	str	r2, [r3, #0]
}
 8008d26:	46c0      	nop			@ (mov r8, r8)
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	b002      	add	sp, #8
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	46c0      	nop			@ (mov r8, r8)
 8008d30:	20000c48 	.word	0x20000c48

08008d34 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  counter = 0;
 8008d38:	4b05      	ldr	r3, [pc, #20]	@ (8008d50 <ResetDBACalculator+0x1c>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 8008d3e:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <ResetDBACalculator+0x20>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 8008d44:	4b04      	ldr	r3, [pc, #16]	@ (8008d58 <ResetDBACalculator+0x24>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]
}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000c44 	.word	0x20000c44
 8008d54:	2000008c 	.word	0x2000008c
 8008d58:	20000c45 	.word	0x20000c45

08008d5c <MIC_Print>:

void MIC_Print(void) {
 8008d5c:	b5b0      	push	{r4, r5, r7, lr}
 8008d5e:	b08a      	sub	sp, #40	@ 0x28
 8008d60:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8008d62:	4b9f      	ldr	r3, [pc, #636]	@ (8008fe0 <MIC_Print+0x284>)
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	4b9f      	ldr	r3, [pc, #636]	@ (8008fe4 <MIC_Print+0x288>)
 8008d68:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008d6a:	4b9f      	ldr	r3, [pc, #636]	@ (8008fe8 <MIC_Print+0x28c>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	001a      	movs	r2, r3
 8008d70:	4b9c      	ldr	r3, [pc, #624]	@ (8008fe4 <MIC_Print+0x288>)
 8008d72:	6819      	ldr	r1, [r3, #0]
 8008d74:	4b9d      	ldr	r3, [pc, #628]	@ (8008fec <MIC_Print+0x290>)
 8008d76:	0092      	lsls	r2, r2, #2
 8008d78:	50d1      	str	r1, [r2, r3]
  counter++;
 8008d7a:	4b9b      	ldr	r3, [pc, #620]	@ (8008fe8 <MIC_Print+0x28c>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	4b99      	ldr	r3, [pc, #612]	@ (8008fe8 <MIC_Print+0x28c>)
 8008d84:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008d86:	4b98      	ldr	r3, [pc, #608]	@ (8008fe8 <MIC_Print+0x28c>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b09      	cmp	r3, #9
 8008d8c:	d80b      	bhi.n	8008da6 <MIC_Print+0x4a>
 8008d8e:	4b98      	ldr	r3, [pc, #608]	@ (8008ff0 <MIC_Print+0x294>)
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2201      	movs	r2, #1
 8008d94:	4053      	eors	r3, r2
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d004      	beq.n	8008da6 <MIC_Print+0x4a>
    denominator = counter;
 8008d9c:	4b92      	ldr	r3, [pc, #584]	@ (8008fe8 <MIC_Print+0x28c>)
 8008d9e:	781a      	ldrb	r2, [r3, #0]
 8008da0:	4b94      	ldr	r3, [pc, #592]	@ (8008ff4 <MIC_Print+0x298>)
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	e005      	b.n	8008db2 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008da6:	4b93      	ldr	r3, [pc, #588]	@ (8008ff4 <MIC_Print+0x298>)
 8008da8:	220a      	movs	r2, #10
 8008daa:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008dac:	4b90      	ldr	r3, [pc, #576]	@ (8008ff0 <MIC_Print+0x294>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8008db2:	4b91      	ldr	r3, [pc, #580]	@ (8008ff8 <MIC_Print+0x29c>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008db8:	230f      	movs	r3, #15
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	701a      	strb	r2, [r3, #0]
 8008dc0:	e042      	b.n	8008e48 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 8008dc2:	240f      	movs	r4, #15
 8008dc4:	193b      	adds	r3, r7, r4
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	4b88      	ldr	r3, [pc, #544]	@ (8008fec <MIC_Print+0x290>)
 8008dca:	0092      	lsls	r2, r2, #2
 8008dcc:	58d2      	ldr	r2, [r2, r3]
 8008dce:	4b8a      	ldr	r3, [pc, #552]	@ (8008ff8 <MIC_Print+0x29c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	1c19      	adds	r1, r3, #0
 8008dd4:	1c10      	adds	r0, r2, #0
 8008dd6:	f7f7 fd73 	bl	80008c0 <__aeabi_fadd>
 8008dda:	1c03      	adds	r3, r0, #0
 8008ddc:	1c1a      	adds	r2, r3, #0
 8008dde:	4b86      	ldr	r3, [pc, #536]	@ (8008ff8 <MIC_Print+0x29c>)
 8008de0:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008de2:	193b      	adds	r3, r7, r4
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	4b81      	ldr	r3, [pc, #516]	@ (8008fec <MIC_Print+0x290>)
 8008de8:	0092      	lsls	r2, r2, #2
 8008dea:	58d2      	ldr	r2, [r2, r3]
 8008dec:	4b83      	ldr	r3, [pc, #524]	@ (8008ffc <MIC_Print+0x2a0>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	1c19      	adds	r1, r3, #0
 8008df2:	1c10      	adds	r0, r2, #0
 8008df4:	f7f7 fbb0 	bl	8000558 <__aeabi_fcmpgt>
 8008df8:	1e03      	subs	r3, r0, #0
 8008dfa:	d006      	beq.n	8008e0a <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008dfc:	193b      	adds	r3, r7, r4
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	4b7a      	ldr	r3, [pc, #488]	@ (8008fec <MIC_Print+0x290>)
 8008e02:	0092      	lsls	r2, r2, #2
 8008e04:	58d2      	ldr	r2, [r2, r3]
 8008e06:	4b7d      	ldr	r3, [pc, #500]	@ (8008ffc <MIC_Print+0x2a0>)
 8008e08:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8008ff8 <MIC_Print+0x29c>)
 8008e0c:	681c      	ldr	r4, [r3, #0]
 8008e0e:	4b79      	ldr	r3, [pc, #484]	@ (8008ff4 <MIC_Print+0x298>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	0018      	movs	r0, r3
 8008e14:	f7f8 fc28 	bl	8001668 <__aeabi_ui2f>
 8008e18:	1c03      	adds	r3, r0, #0
 8008e1a:	1c19      	adds	r1, r3, #0
 8008e1c:	1c20      	adds	r0, r4, #0
 8008e1e:	f7f7 fed9 	bl	8000bd4 <__aeabi_fdiv>
 8008e22:	1c03      	adds	r3, r0, #0
 8008e24:	1c1a      	adds	r2, r3, #0
 8008e26:	4b76      	ldr	r3, [pc, #472]	@ (8009000 <MIC_Print+0x2a4>)
 8008e28:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 8008e2a:	4b6e      	ldr	r3, [pc, #440]	@ (8008fe4 <MIC_Print+0x288>)
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	4b73      	ldr	r3, [pc, #460]	@ (8008ffc <MIC_Print+0x2a0>)
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	4b73      	ldr	r3, [pc, #460]	@ (8009000 <MIC_Print+0x2a4>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	1c1a      	adds	r2, r3, #0
 8008e38:	f7fa fce2 	bl	8003800 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008e3c:	210f      	movs	r1, #15
 8008e3e:	187b      	adds	r3, r7, r1
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	187b      	adds	r3, r7, r1
 8008e44:	3201      	adds	r2, #1
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	4b6a      	ldr	r3, [pc, #424]	@ (8008ff4 <MIC_Print+0x298>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	220f      	movs	r2, #15
 8008e4e:	18ba      	adds	r2, r7, r2
 8008e50:	7812      	ldrb	r2, [r2, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d3b5      	bcc.n	8008dc2 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008e56:	4b63      	ldr	r3, [pc, #396]	@ (8008fe4 <MIC_Print+0x288>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	1c18      	adds	r0, r3, #0
 8008e5c:	f7fa fb02 	bl	8003464 <__aeabi_f2d>
 8008e60:	6038      	str	r0, [r7, #0]
 8008e62:	6079      	str	r1, [r7, #4]
 8008e64:	4b65      	ldr	r3, [pc, #404]	@ (8008ffc <MIC_Print+0x2a0>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	1c18      	adds	r0, r3, #0
 8008e6a:	f7fa fafb 	bl	8003464 <__aeabi_f2d>
 8008e6e:	0004      	movs	r4, r0
 8008e70:	000d      	movs	r5, r1
 8008e72:	4b63      	ldr	r3, [pc, #396]	@ (8009000 <MIC_Print+0x2a4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	1c18      	adds	r0, r3, #0
 8008e78:	f7fa faf4 	bl	8003464 <__aeabi_f2d>
 8008e7c:	0002      	movs	r2, r0
 8008e7e:	000b      	movs	r3, r1
 8008e80:	4960      	ldr	r1, [pc, #384]	@ (8009004 <MIC_Print+0x2a8>)
 8008e82:	9204      	str	r2, [sp, #16]
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	9402      	str	r4, [sp, #8]
 8008e88:	9503      	str	r5, [sp, #12]
 8008e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8009008 <MIC_Print+0x2ac>)
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	0008      	movs	r0, r1
 8008e94:	f017 fa7c 	bl	8020390 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008e98:	4b53      	ldr	r3, [pc, #332]	@ (8008fe8 <MIC_Print+0x28c>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b0a      	cmp	r3, #10
 8008e9e:	d902      	bls.n	8008ea6 <MIC_Print+0x14a>
    counter = 0;
 8008ea0:	4b51      	ldr	r3, [pc, #324]	@ (8008fe8 <MIC_Print+0x28c>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8008fe4 <MIC_Print+0x288>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4958      	ldr	r1, [pc, #352]	@ (800900c <MIC_Print+0x2b0>)
 8008eac:	1c18      	adds	r0, r3, #0
 8008eae:	f7f7 fb5d 	bl	800056c <__aeabi_fcmpge>
 8008eb2:	1e03      	subs	r3, r0, #0
 8008eb4:	d004      	beq.n	8008ec0 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	2101      	movs	r1, #1
 8008eba:	2001      	movs	r0, #1
 8008ebc:	f004 fb58 	bl	800d570 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008ec0:	4b48      	ldr	r3, [pc, #288]	@ (8008fe4 <MIC_Print+0x288>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4952      	ldr	r1, [pc, #328]	@ (8009010 <MIC_Print+0x2b4>)
 8008ec6:	1c18      	adds	r0, r3, #0
 8008ec8:	f7f7 fb50 	bl	800056c <__aeabi_fcmpge>
 8008ecc:	1e03      	subs	r3, r0, #0
 8008ece:	d00c      	beq.n	8008eea <MIC_Print+0x18e>
 8008ed0:	4b44      	ldr	r3, [pc, #272]	@ (8008fe4 <MIC_Print+0x288>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	494d      	ldr	r1, [pc, #308]	@ (800900c <MIC_Print+0x2b0>)
 8008ed6:	1c18      	adds	r0, r3, #0
 8008ed8:	f7f7 fb2a 	bl	8000530 <__aeabi_fcmplt>
 8008edc:	1e03      	subs	r3, r0, #0
 8008ede:	d004      	beq.n	8008eea <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	2001      	movs	r0, #1
 8008ee6:	f004 fb43 	bl	800d570 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008eea:	4b3e      	ldr	r3, [pc, #248]	@ (8008fe4 <MIC_Print+0x288>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4949      	ldr	r1, [pc, #292]	@ (8009014 <MIC_Print+0x2b8>)
 8008ef0:	1c18      	adds	r0, r3, #0
 8008ef2:	f7f7 fb3b 	bl	800056c <__aeabi_fcmpge>
 8008ef6:	1e03      	subs	r3, r0, #0
 8008ef8:	d00c      	beq.n	8008f14 <MIC_Print+0x1b8>
 8008efa:	4b3a      	ldr	r3, [pc, #232]	@ (8008fe4 <MIC_Print+0x288>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4944      	ldr	r1, [pc, #272]	@ (8009010 <MIC_Print+0x2b4>)
 8008f00:	1c18      	adds	r0, r3, #0
 8008f02:	f7f7 fb15 	bl	8000530 <__aeabi_fcmplt>
 8008f06:	1e03      	subs	r3, r0, #0
 8008f08:	d004      	beq.n	8008f14 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	2001      	movs	r0, #1
 8008f10:	f004 fb2e 	bl	800d570 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008f14:	4b33      	ldr	r3, [pc, #204]	@ (8008fe4 <MIC_Print+0x288>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	493f      	ldr	r1, [pc, #252]	@ (8009018 <MIC_Print+0x2bc>)
 8008f1a:	1c18      	adds	r0, r3, #0
 8008f1c:	f7f7 fb26 	bl	800056c <__aeabi_fcmpge>
 8008f20:	1e03      	subs	r3, r0, #0
 8008f22:	d00c      	beq.n	8008f3e <MIC_Print+0x1e2>
 8008f24:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe4 <MIC_Print+0x288>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	493a      	ldr	r1, [pc, #232]	@ (8009014 <MIC_Print+0x2b8>)
 8008f2a:	1c18      	adds	r0, r3, #0
 8008f2c:	f7f7 fb00 	bl	8000530 <__aeabi_fcmplt>
 8008f30:	1e03      	subs	r3, r0, #0
 8008f32:	d004      	beq.n	8008f3e <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 8008f34:	2200      	movs	r2, #0
 8008f36:	2101      	movs	r1, #1
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f004 fb19 	bl	800d570 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008f3e:	4b29      	ldr	r3, [pc, #164]	@ (8008fe4 <MIC_Print+0x288>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4936      	ldr	r1, [pc, #216]	@ (800901c <MIC_Print+0x2c0>)
 8008f44:	1c18      	adds	r0, r3, #0
 8008f46:	f7f7 fb11 	bl	800056c <__aeabi_fcmpge>
 8008f4a:	1e03      	subs	r3, r0, #0
 8008f4c:	d00c      	beq.n	8008f68 <MIC_Print+0x20c>
 8008f4e:	4b25      	ldr	r3, [pc, #148]	@ (8008fe4 <MIC_Print+0x288>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4931      	ldr	r1, [pc, #196]	@ (8009018 <MIC_Print+0x2bc>)
 8008f54:	1c18      	adds	r0, r3, #0
 8008f56:	f7f7 faeb 	bl	8000530 <__aeabi_fcmplt>
 8008f5a:	1e03      	subs	r3, r0, #0
 8008f5c:	d004      	beq.n	8008f68 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 8008f5e:	2201      	movs	r2, #1
 8008f60:	2101      	movs	r1, #1
 8008f62:	2000      	movs	r0, #0
 8008f64:	f004 fb04 	bl	800d570 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008f68:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe4 <MIC_Print+0x288>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	492c      	ldr	r1, [pc, #176]	@ (8009020 <MIC_Print+0x2c4>)
 8008f6e:	1c18      	adds	r0, r3, #0
 8008f70:	f7f7 fafc 	bl	800056c <__aeabi_fcmpge>
 8008f74:	1e03      	subs	r3, r0, #0
 8008f76:	d00c      	beq.n	8008f92 <MIC_Print+0x236>
 8008f78:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe4 <MIC_Print+0x288>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4927      	ldr	r1, [pc, #156]	@ (800901c <MIC_Print+0x2c0>)
 8008f7e:	1c18      	adds	r0, r3, #0
 8008f80:	f7f7 fad6 	bl	8000530 <__aeabi_fcmplt>
 8008f84:	1e03      	subs	r3, r0, #0
 8008f86:	d004      	beq.n	8008f92 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 8008f88:	2201      	movs	r2, #1
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	f004 faef 	bl	800d570 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008f92:	4b14      	ldr	r3, [pc, #80]	@ (8008fe4 <MIC_Print+0x288>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4923      	ldr	r1, [pc, #140]	@ (8009024 <MIC_Print+0x2c8>)
 8008f98:	1c18      	adds	r0, r3, #0
 8008f9a:	f7f7 fae7 	bl	800056c <__aeabi_fcmpge>
 8008f9e:	1e03      	subs	r3, r0, #0
 8008fa0:	d00c      	beq.n	8008fbc <MIC_Print+0x260>
 8008fa2:	4b10      	ldr	r3, [pc, #64]	@ (8008fe4 <MIC_Print+0x288>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	491e      	ldr	r1, [pc, #120]	@ (8009020 <MIC_Print+0x2c4>)
 8008fa8:	1c18      	adds	r0, r3, #0
 8008faa:	f7f7 fac1 	bl	8000530 <__aeabi_fcmplt>
 8008fae:	1e03      	subs	r3, r0, #0
 8008fb0:	d004      	beq.n	8008fbc <MIC_Print+0x260>
    SetDBLED(true, false, true);
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	f004 fada 	bl	800d570 <SetDBLED>
  }
  if(dBA < 35){//off
 8008fbc:	4b09      	ldr	r3, [pc, #36]	@ (8008fe4 <MIC_Print+0x288>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4918      	ldr	r1, [pc, #96]	@ (8009024 <MIC_Print+0x2c8>)
 8008fc2:	1c18      	adds	r0, r3, #0
 8008fc4:	f7f7 fab4 	bl	8000530 <__aeabi_fcmplt>
 8008fc8:	1e03      	subs	r3, r0, #0
 8008fca:	d100      	bne.n	8008fce <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 8008fcc:	e004      	b.n	8008fd8 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f004 facc 	bl	800d570 <SetDBLED>
}
 8008fd8:	46c0      	nop			@ (mov r8, r8)
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	b004      	add	sp, #16
 8008fde:	bdb0      	pop	{r4, r5, r7, pc}
 8008fe0:	20000c3c 	.word	0x20000c3c
 8008fe4:	20000c08 	.word	0x20000c08
 8008fe8:	20000c44 	.word	0x20000c44
 8008fec:	20000c0c 	.word	0x20000c0c
 8008ff0:	20000c45 	.word	0x20000c45
 8008ff4:	2000008c 	.word	0x2000008c
 8008ff8:	20000c38 	.word	0x20000c38
 8008ffc:	20000c40 	.word	0x20000c40
 8009000:	20000c34 	.word	0x20000c34
 8009004:	08024bc8 	.word	0x08024bc8
 8009008:	20000bfc 	.word	0x20000bfc
 800900c:	42b40000 	.word	0x42b40000
 8009010:	42a00000 	.word	0x42a00000
 8009014:	428c0000 	.word	0x428c0000
 8009018:	42700000 	.word	0x42700000
 800901c:	42480000 	.word	0x42480000
 8009020:	42200000 	.word	0x42200000
 8009024:	420c0000 	.word	0x420c0000

08009028 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800902e:	4b11      	ldr	r3, [pc, #68]	@ (8009074 <MIC_TestMeasurementDone+0x4c>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4a10      	ldr	r2, [pc, #64]	@ (8009078 <MIC_TestMeasurementDone+0x50>)
 8009036:	4911      	ldr	r1, [pc, #68]	@ (800907c <MIC_TestMeasurementDone+0x54>)
 8009038:	2002      	movs	r0, #2
 800903a:	f005 fcc1 	bl	800e9c0 <CreateLine>
  if(DataReady) {
 800903e:	4b0d      	ldr	r3, [pc, #52]	@ (8009074 <MIC_TestMeasurementDone+0x4c>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d010      	beq.n	800906a <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8009048:	1dfb      	adds	r3, r7, #7
 800904a:	4a0d      	ldr	r2, [pc, #52]	@ (8009080 <MIC_TestMeasurementDone+0x58>)
 800904c:	7812      	ldrb	r2, [r2, #0]
 800904e:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8009050:	4b0b      	ldr	r3, [pc, #44]	@ (8009080 <MIC_TestMeasurementDone+0x58>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	4a0b      	ldr	r2, [pc, #44]	@ (8009084 <MIC_TestMeasurementDone+0x5c>)
 8009058:	4908      	ldr	r1, [pc, #32]	@ (800907c <MIC_TestMeasurementDone+0x54>)
 800905a:	2002      	movs	r0, #2
 800905c:	f005 fcb0 	bl	800e9c0 <CreateLine>
    ResetMICIndicator();
 8009060:	f004 fb74 	bl	800d74c <ResetMICIndicator>
    return Check;
 8009064:	1dfb      	adds	r3, r7, #7
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	e000      	b.n	800906c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800906a:	2300      	movs	r3, #0
}
 800906c:	0018      	movs	r0, r3
 800906e:	46bd      	mov	sp, r7
 8009070:	b002      	add	sp, #8
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20000d81 	.word	0x20000d81
 8009078:	08024c10 	.word	0x08024c10
 800907c:	08024c3c 	.word	0x08024c3c
 8009080:	20000d82 	.word	0x20000d82
 8009084:	08024c40 	.word	0x08024c40

08009088 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800908e:	4b78      	ldr	r3, [pc, #480]	@ (8009270 <Mic_Upkeep+0x1e8>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b03      	cmp	r3, #3
 8009094:	d100      	bne.n	8009098 <Mic_Upkeep+0x10>
 8009096:	e0b8      	b.n	800920a <Mic_Upkeep+0x182>
 8009098:	dd00      	ble.n	800909c <Mic_Upkeep+0x14>
 800909a:	e0d3      	b.n	8009244 <Mic_Upkeep+0x1bc>
 800909c:	2b02      	cmp	r3, #2
 800909e:	d037      	beq.n	8009110 <Mic_Upkeep+0x88>
 80090a0:	dd00      	ble.n	80090a4 <Mic_Upkeep+0x1c>
 80090a2:	e0cf      	b.n	8009244 <Mic_Upkeep+0x1bc>
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <Mic_Upkeep+0x26>
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d014      	beq.n	80090d6 <Mic_Upkeep+0x4e>
 80090ac:	e0ca      	b.n	8009244 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 80090ae:	2001      	movs	r0, #1
 80090b0:	f003 fb5c 	bl	800c76c <enableMicrophone>
 80090b4:	0003      	movs	r3, r0
 80090b6:	001a      	movs	r2, r3
 80090b8:	2301      	movs	r3, #1
 80090ba:	4053      	eors	r3, r2
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 80090c2:	4a6c      	ldr	r2, [pc, #432]	@ (8009274 <Mic_Upkeep+0x1ec>)
 80090c4:	4b6c      	ldr	r3, [pc, #432]	@ (8009278 <Mic_Upkeep+0x1f0>)
 80090c6:	217f      	movs	r1, #127	@ 0x7f
 80090c8:	0018      	movs	r0, r3
 80090ca:	f005 fd31 	bl	800eb30 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 80090ce:	4b68      	ldr	r3, [pc, #416]	@ (8009270 <Mic_Upkeep+0x1e8>)
 80090d0:	2201      	movs	r2, #1
 80090d2:	701a      	strb	r2, [r3, #0]
    break;
 80090d4:	e0c5      	b.n	8009262 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 80090d6:	f003 fb25 	bl	800c724 <micSettlingComplete>
 80090da:	1e03      	subs	r3, r0, #0
 80090dc:	d105      	bne.n	80090ea <Mic_Upkeep+0x62>
 80090de:	4b67      	ldr	r3, [pc, #412]	@ (800927c <Mic_Upkeep+0x1f4>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d100      	bne.n	80090ea <Mic_Upkeep+0x62>
 80090e8:	e0b6      	b.n	8009258 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 80090ea:	f003 fba9 	bl	800c840 <startSPLcalculation>
 80090ee:	0003      	movs	r3, r0
 80090f0:	001a      	movs	r2, r3
 80090f2:	2301      	movs	r3, #1
 80090f4:	4053      	eors	r3, r2
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80090fc:	4a5d      	ldr	r2, [pc, #372]	@ (8009274 <Mic_Upkeep+0x1ec>)
 80090fe:	4b5e      	ldr	r3, [pc, #376]	@ (8009278 <Mic_Upkeep+0x1f0>)
 8009100:	2188      	movs	r1, #136	@ 0x88
 8009102:	0018      	movs	r0, r3
 8009104:	f005 fd14 	bl	800eb30 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8009108:	4b59      	ldr	r3, [pc, #356]	@ (8009270 <Mic_Upkeep+0x1e8>)
 800910a:	2202      	movs	r2, #2
 800910c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800910e:	e0a3      	b.n	8009258 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8009110:	4b5b      	ldr	r3, [pc, #364]	@ (8009280 <Mic_Upkeep+0x1f8>)
 8009112:	2201      	movs	r2, #1
 8009114:	2101      	movs	r1, #1
 8009116:	0018      	movs	r0, r3
 8009118:	f003 f9e6 	bl	800c4e8 <getSoundData>
 800911c:	1e03      	subs	r3, r0, #0
 800911e:	d100      	bne.n	8009122 <Mic_Upkeep+0x9a>
 8009120:	e09c      	b.n	800925c <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8009122:	f003 fadf 	bl	800c6e4 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8009126:	4b56      	ldr	r3, [pc, #344]	@ (8009280 <Mic_Upkeep+0x1f8>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	001a      	movs	r2, r3
 800912c:	4b54      	ldr	r3, [pc, #336]	@ (8009280 <Mic_Upkeep+0x1f8>)
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	4954      	ldr	r1, [pc, #336]	@ (8009284 <Mic_Upkeep+0x1fc>)
 8009132:	0038      	movs	r0, r7
 8009134:	f017 f99c 	bl	8020470 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8009138:	4b51      	ldr	r3, [pc, #324]	@ (8009280 <Mic_Upkeep+0x1f8>)
 800913a:	89db      	ldrh	r3, [r3, #14]
 800913c:	001a      	movs	r2, r3
 800913e:	4b50      	ldr	r3, [pc, #320]	@ (8009280 <Mic_Upkeep+0x1f8>)
 8009140:	7c1b      	ldrb	r3, [r3, #16]
 8009142:	4951      	ldr	r1, [pc, #324]	@ (8009288 <Mic_Upkeep+0x200>)
 8009144:	4851      	ldr	r0, [pc, #324]	@ (800928c <Mic_Upkeep+0x204>)
 8009146:	f017 f993 	bl	8020470 <siprintf>
      dBValue = atof(dBbuffer);
 800914a:	003b      	movs	r3, r7
 800914c:	0018      	movs	r0, r3
 800914e:	f015 fd3f 	bl	801ebd0 <atof>
 8009152:	0002      	movs	r2, r0
 8009154:	000b      	movs	r3, r1
 8009156:	0010      	movs	r0, r2
 8009158:	0019      	movs	r1, r3
 800915a:	f7fa f9cb 	bl	80034f4 <__aeabi_d2f>
 800915e:	1c02      	adds	r2, r0, #0
 8009160:	4b4b      	ldr	r3, [pc, #300]	@ (8009290 <Mic_Upkeep+0x208>)
 8009162:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8009164:	4b4a      	ldr	r3, [pc, #296]	@ (8009290 <Mic_Upkeep+0x208>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	494a      	ldr	r1, [pc, #296]	@ (8009294 <Mic_Upkeep+0x20c>)
 800916a:	1c18      	adds	r0, r3, #0
 800916c:	f7f7 ff18 	bl	8000fa0 <__aeabi_fmul>
 8009170:	1c03      	adds	r3, r0, #0
 8009172:	1c18      	adds	r0, r3, #0
 8009174:	f7fa f976 	bl	8003464 <__aeabi_f2d>
 8009178:	2200      	movs	r2, #0
 800917a:	4b47      	ldr	r3, [pc, #284]	@ (8009298 <Mic_Upkeep+0x210>)
 800917c:	f7f8 fab6 	bl	80016ec <__aeabi_dadd>
 8009180:	0002      	movs	r2, r0
 8009182:	000b      	movs	r3, r1
 8009184:	0010      	movs	r0, r2
 8009186:	0019      	movs	r1, r3
 8009188:	f7fa f8de 	bl	8003348 <__aeabi_d2iz>
 800918c:	0003      	movs	r3, r0
 800918e:	0018      	movs	r0, r3
 8009190:	f7fa f916 	bl	80033c0 <__aeabi_i2d>
 8009194:	2200      	movs	r2, #0
 8009196:	4b41      	ldr	r3, [pc, #260]	@ (800929c <Mic_Upkeep+0x214>)
 8009198:	f7f8 fe0c 	bl	8001db4 <__aeabi_ddiv>
 800919c:	0002      	movs	r2, r0
 800919e:	000b      	movs	r3, r1
 80091a0:	0010      	movs	r0, r2
 80091a2:	0019      	movs	r1, r3
 80091a4:	f7fa f9a6 	bl	80034f4 <__aeabi_d2f>
 80091a8:	1c02      	adds	r2, r0, #0
 80091aa:	4b39      	ldr	r3, [pc, #228]	@ (8009290 <Mic_Upkeep+0x208>)
 80091ac:	601a      	str	r2, [r3, #0]
      MIC_Print();
 80091ae:	f7ff fdd5 	bl	8008d5c <MIC_Print>
      if (!startSPLcalculation()) {
 80091b2:	f003 fb45 	bl	800c840 <startSPLcalculation>
 80091b6:	0003      	movs	r3, r0
 80091b8:	001a      	movs	r2, r3
 80091ba:	2301      	movs	r3, #1
 80091bc:	4053      	eors	r3, r2
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 80091c4:	4a2b      	ldr	r2, [pc, #172]	@ (8009274 <Mic_Upkeep+0x1ec>)
 80091c6:	4b2c      	ldr	r3, [pc, #176]	@ (8009278 <Mic_Upkeep+0x1f0>)
 80091c8:	2198      	movs	r1, #152	@ 0x98
 80091ca:	0018      	movs	r0, r3
 80091cc:	f005 fcb0 	bl	800eb30 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 80091d0:	2000      	movs	r0, #0
 80091d2:	f003 facb 	bl	800c76c <enableMicrophone>
 80091d6:	0003      	movs	r3, r0
 80091d8:	001a      	movs	r2, r3
 80091da:	2301      	movs	r3, #1
 80091dc:	4053      	eors	r3, r2
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 80091e4:	4a23      	ldr	r2, [pc, #140]	@ (8009274 <Mic_Upkeep+0x1ec>)
 80091e6:	4b24      	ldr	r3, [pc, #144]	@ (8009278 <Mic_Upkeep+0x1f0>)
 80091e8:	219b      	movs	r1, #155	@ 0x9b
 80091ea:	0018      	movs	r0, r3
 80091ec:	f005 fca0 	bl	800eb30 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 80091f0:	f006 f82a 	bl	800f248 <HAL_GetTick>
 80091f4:	0003      	movs	r3, r0
 80091f6:	4a2a      	ldr	r2, [pc, #168]	@ (80092a0 <Mic_Upkeep+0x218>)
 80091f8:	189a      	adds	r2, r3, r2
 80091fa:	4b2a      	ldr	r3, [pc, #168]	@ (80092a4 <Mic_Upkeep+0x21c>)
 80091fc:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80091fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009270 <Mic_Upkeep+0x1e8>)
 8009200:	2203      	movs	r2, #3
 8009202:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8009204:	f004 faa2 	bl	800d74c <ResetMICIndicator>
    }
    break;
 8009208:	e028      	b.n	800925c <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800920a:	4b26      	ldr	r3, [pc, #152]	@ (80092a4 <Mic_Upkeep+0x21c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	0018      	movs	r0, r3
 8009210:	f005 fb80 	bl	800e914 <TimestampIsReached>
 8009214:	1e03      	subs	r3, r0, #0
 8009216:	d023      	beq.n	8009260 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8009218:	2001      	movs	r0, #1
 800921a:	f003 faa7 	bl	800c76c <enableMicrophone>
 800921e:	0003      	movs	r3, r0
 8009220:	001a      	movs	r2, r3
 8009222:	2301      	movs	r3, #1
 8009224:	4053      	eors	r3, r2
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800922c:	4a11      	ldr	r2, [pc, #68]	@ (8009274 <Mic_Upkeep+0x1ec>)
 800922e:	4b12      	ldr	r3, [pc, #72]	@ (8009278 <Mic_Upkeep+0x1f0>)
 8009230:	21a6      	movs	r1, #166	@ 0xa6
 8009232:	0018      	movs	r0, r3
 8009234:	f005 fc7c 	bl	800eb30 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8009238:	4b0d      	ldr	r3, [pc, #52]	@ (8009270 <Mic_Upkeep+0x1e8>)
 800923a:	2201      	movs	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800923e:	f004 fa43 	bl	800d6c8 <SetMICIndicator>
    }
    break;
 8009242:	e00d      	b.n	8009260 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8009244:	4a18      	ldr	r2, [pc, #96]	@ (80092a8 <Mic_Upkeep+0x220>)
 8009246:	4b19      	ldr	r3, [pc, #100]	@ (80092ac <Mic_Upkeep+0x224>)
 8009248:	0019      	movs	r1, r3
 800924a:	2003      	movs	r0, #3
 800924c:	f005 fbb8 	bl	800e9c0 <CreateLine>
    MicState = MIC_STATE_INIT;
 8009250:	4b07      	ldr	r3, [pc, #28]	@ (8009270 <Mic_Upkeep+0x1e8>)
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
    break;
 8009256:	e004      	b.n	8009262 <Mic_Upkeep+0x1da>
    break;
 8009258:	46c0      	nop			@ (mov r8, r8)
 800925a:	e002      	b.n	8009262 <Mic_Upkeep+0x1da>
    break;
 800925c:	46c0      	nop			@ (mov r8, r8)
 800925e:	e000      	b.n	8009262 <Mic_Upkeep+0x1da>
    break;
 8009260:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8009262:	4b03      	ldr	r3, [pc, #12]	@ (8009270 <Mic_Upkeep+0x1e8>)
 8009264:	781b      	ldrb	r3, [r3, #0]
}
 8009266:	0018      	movs	r0, r3
 8009268:	46bd      	mov	sp, r7
 800926a:	b002      	add	sp, #8
 800926c:	bd80      	pop	{r7, pc}
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	20000c5e 	.word	0x20000c5e
 8009274:	08024c58 	.word	0x08024c58
 8009278:	08025d00 	.word	0x08025d00
 800927c:	20000d81 	.word	0x20000d81
 8009280:	20000c4c 	.word	0x20000c4c
 8009284:	08024c74 	.word	0x08024c74
 8009288:	08024c7c 	.word	0x08024c7c
 800928c:	20000bfc 	.word	0x20000bfc
 8009290:	20000c3c 	.word	0x20000c3c
 8009294:	42c80000 	.word	0x42c80000
 8009298:	3fe00000 	.word	0x3fe00000
 800929c:	40590000 	.word	0x40590000
 80092a0:	000002f3 	.word	0x000002f3
 80092a4:	20000c48 	.word	0x20000c48
 80092a8:	08024c84 	.word	0x08024c84
 80092ac:	08024ca4 	.word	0x08024ca4

080092b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80092b6:	1d3b      	adds	r3, r7, #4
 80092b8:	0018      	movs	r0, r3
 80092ba:	2314      	movs	r3, #20
 80092bc:	001a      	movs	r2, r3
 80092be:	2100      	movs	r1, #0
 80092c0:	f017 fa1a 	bl	80206f8 <memset>
  RTC_DateTypeDef sDate = {0};
 80092c4:	003b      	movs	r3, r7
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80092ca:	4b2e      	ldr	r3, [pc, #184]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092cc:	4a2e      	ldr	r2, [pc, #184]	@ (8009388 <MX_RTC_Init+0xd8>)
 80092ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80092d0:	4b2c      	ldr	r3, [pc, #176]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80092d6:	4b2b      	ldr	r3, [pc, #172]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092d8:	227f      	movs	r2, #127	@ 0x7f
 80092da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80092dc:	4b29      	ldr	r3, [pc, #164]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092de:	22ff      	movs	r2, #255	@ 0xff
 80092e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80092e2:	4b28      	ldr	r3, [pc, #160]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80092e8:	4b26      	ldr	r3, [pc, #152]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80092ee:	4b25      	ldr	r3, [pc, #148]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80092f4:	4b23      	ldr	r3, [pc, #140]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80092fa:	4b22      	ldr	r3, [pc, #136]	@ (8009384 <MX_RTC_Init+0xd4>)
 80092fc:	0018      	movs	r0, r3
 80092fe:	f00d f827 	bl	8016350 <HAL_RTC_Init>
 8009302:	1e03      	subs	r3, r0, #0
 8009304:	d001      	beq.n	800930a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8009306:	f7ff f9c5 	bl	8008694 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800930a:	1d3b      	adds	r3, r7, #4
 800930c:	220d      	movs	r2, #13
 800930e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8009310:	1d3b      	adds	r3, r7, #4
 8009312:	2200      	movs	r2, #0
 8009314:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8009316:	1d3b      	adds	r3, r7, #4
 8009318:	2200      	movs	r2, #0
 800931a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800931c:	1d3b      	adds	r3, r7, #4
 800931e:	2200      	movs	r2, #0
 8009320:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009322:	1d3b      	adds	r3, r7, #4
 8009324:	2200      	movs	r2, #0
 8009326:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8009328:	1d39      	adds	r1, r7, #4
 800932a:	4b16      	ldr	r3, [pc, #88]	@ (8009384 <MX_RTC_Init+0xd4>)
 800932c:	2200      	movs	r2, #0
 800932e:	0018      	movs	r0, r3
 8009330:	f00d f8aa 	bl	8016488 <HAL_RTC_SetTime>
 8009334:	1e03      	subs	r3, r0, #0
 8009336:	d001      	beq.n	800933c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8009338:	f7ff f9ac 	bl	8008694 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800933c:	003b      	movs	r3, r7
 800933e:	2206      	movs	r2, #6
 8009340:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8009342:	003b      	movs	r3, r7
 8009344:	2211      	movs	r2, #17
 8009346:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8009348:	003b      	movs	r3, r7
 800934a:	2217      	movs	r2, #23
 800934c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800934e:	003b      	movs	r3, r7
 8009350:	2218      	movs	r2, #24
 8009352:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8009354:	0039      	movs	r1, r7
 8009356:	4b0b      	ldr	r3, [pc, #44]	@ (8009384 <MX_RTC_Init+0xd4>)
 8009358:	2200      	movs	r2, #0
 800935a:	0018      	movs	r0, r3
 800935c:	f00d f99c 	bl	8016698 <HAL_RTC_SetDate>
 8009360:	1e03      	subs	r3, r0, #0
 8009362:	d001      	beq.n	8009368 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8009364:	f7ff f996 	bl	8008694 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8009368:	4b06      	ldr	r3, [pc, #24]	@ (8009384 <MX_RTC_Init+0xd4>)
 800936a:	2200      	movs	r2, #0
 800936c:	2100      	movs	r1, #0
 800936e:	0018      	movs	r0, r3
 8009370:	f00d fb4c 	bl	8016a0c <HAL_RTCEx_SetWakeUpTimer_IT>
 8009374:	1e03      	subs	r3, r0, #0
 8009376:	d001      	beq.n	800937c <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8009378:	f7ff f98c 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800937c:	46c0      	nop			@ (mov r8, r8)
 800937e:	46bd      	mov	sp, r7
 8009380:	b006      	add	sp, #24
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000c60 	.word	0x20000c60
 8009388:	40002800 	.word	0x40002800

0800938c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a0a      	ldr	r2, [pc, #40]	@ (80093c4 <HAL_RTC_MspInit+0x38>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d10e      	bne.n	80093bc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800939e:	4b0a      	ldr	r3, [pc, #40]	@ (80093c8 <HAL_RTC_MspInit+0x3c>)
 80093a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80093a2:	4b09      	ldr	r3, [pc, #36]	@ (80093c8 <HAL_RTC_MspInit+0x3c>)
 80093a4:	2180      	movs	r1, #128	@ 0x80
 80093a6:	02c9      	lsls	r1, r1, #11
 80093a8:	430a      	orrs	r2, r1
 80093aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80093ac:	2200      	movs	r2, #0
 80093ae:	2100      	movs	r1, #0
 80093b0:	2002      	movs	r0, #2
 80093b2:	f006 fbed 	bl	800fb90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80093b6:	2002      	movs	r0, #2
 80093b8:	f006 fbff 	bl	800fbba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80093bc:	46c0      	nop			@ (mov r8, r8)
 80093be:	46bd      	mov	sp, r7
 80093c0:	b002      	add	sp, #8
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40002800 	.word	0x40002800
 80093c8:	40021000 	.word	0x40021000

080093cc <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoxi;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 80093d0:	4b02      	ldr	r3, [pc, #8]	@ (80093dc <sen5x_Get_sen5x_enable_state+0x10>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
}
 80093d4:	0018      	movs	r0, r3
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	20000c87 	.word	0x20000c87

080093e0 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	0002      	movs	r2, r0
 80093e8:	1dfb      	adds	r3, r7, #7
 80093ea:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 80093ec:	4b03      	ldr	r3, [pc, #12]	@ (80093fc <sen5x_Set_sen5x_state+0x1c>)
 80093ee:	1dfa      	adds	r2, r7, #7
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	701a      	strb	r2, [r3, #0]
}
 80093f4:	46c0      	nop			@ (mov r8, r8)
 80093f6:	46bd      	mov	sp, r7
 80093f8:	b002      	add	sp, #8
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20000c87 	.word	0x20000c87

08009400 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8009408:	f005 ff1e 	bl	800f248 <HAL_GetTick>
 800940c:	0002      	movs	r2, r0
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	18d2      	adds	r2, r2, r3
 8009412:	4b03      	ldr	r3, [pc, #12]	@ (8009420 <setsen5xReadTimer+0x20>)
 8009414:	601a      	str	r2, [r3, #0]
}
 8009416:	46c0      	nop			@ (mov r8, r8)
 8009418:	46bd      	mov	sp, r7
 800941a:	b002      	add	sp, #8
 800941c:	bd80      	pop	{r7, pc}
 800941e:	46c0      	nop			@ (mov r8, r8)
 8009420:	20000c9c 	.word	0x20000c9c

08009424 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	0002      	movs	r2, r0
 800942c:	1dfb      	adds	r3, r7, #7
 800942e:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8009430:	4b03      	ldr	r3, [pc, #12]	@ (8009440 <setsen5xSamplecounter+0x1c>)
 8009432:	2200      	movs	r2, #0
 8009434:	701a      	strb	r2, [r3, #0]
}
 8009436:	46c0      	nop			@ (mov r8, r8)
 8009438:	46bd      	mov	sp, r7
 800943a:	b002      	add	sp, #8
 800943c:	bd80      	pop	{r7, pc}
 800943e:	46c0      	nop			@ (mov r8, r8)
 8009440:	20000c90 	.word	0x20000c90

08009444 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800944c:	f7ff f9a8 	bl	80087a0 <IsPMSensorEnabled>
 8009450:	1e03      	subs	r3, r0, #0
 8009452:	d02c      	beq.n	80094ae <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 8009454:	4b1d      	ldr	r3, [pc, #116]	@ (80094cc <sen5x_enable+0x88>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	1e5a      	subs	r2, r3, #1
 800945a:	4193      	sbcs	r3, r2
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2201      	movs	r2, #1
 8009460:	4053      	eors	r3, r2
 8009462:	b2db      	uxtb	r3, r3
 8009464:	1c1a      	adds	r2, r3, #0
 8009466:	2301      	movs	r3, #1
 8009468:	4013      	ands	r3, r2
 800946a:	b2da      	uxtb	r2, r3
 800946c:	4b17      	ldr	r3, [pc, #92]	@ (80094cc <sen5x_enable+0x88>)
 800946e:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8009470:	4b16      	ldr	r3, [pc, #88]	@ (80094cc <sen5x_enable+0x88>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 8009478:	2000      	movs	r0, #0
 800947a:	f7ff ffc1 	bl	8009400 <setsen5xReadTimer>
 800947e:	e009      	b.n	8009494 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009480:	f005 fee2 	bl	800f248 <HAL_GetTick>
 8009484:	0002      	movs	r2, r0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2164      	movs	r1, #100	@ 0x64
 800948a:	434b      	muls	r3, r1
 800948c:	18d3      	adds	r3, r2, r3
 800948e:	0018      	movs	r0, r3
 8009490:	f7ff ffb6 	bl	8009400 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 8009494:	4b0d      	ldr	r3, [pc, #52]	@ (80094cc <sen5x_enable+0x88>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <sen5x_enable+0x5c>
 800949c:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <sen5x_enable+0x8c>)
 800949e:	e000      	b.n	80094a2 <sen5x_enable+0x5e>
 80094a0:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <sen5x_enable+0x90>)
 80094a2:	4a0d      	ldr	r2, [pc, #52]	@ (80094d8 <sen5x_enable+0x94>)
 80094a4:	490d      	ldr	r1, [pc, #52]	@ (80094dc <sen5x_enable+0x98>)
 80094a6:	2002      	movs	r0, #2
 80094a8:	f005 fa8a 	bl	800e9c0 <CreateLine>
 80094ac:	e005      	b.n	80094ba <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 80094ae:	4a0c      	ldr	r2, [pc, #48]	@ (80094e0 <sen5x_enable+0x9c>)
 80094b0:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <sen5x_enable+0x98>)
 80094b2:	0019      	movs	r1, r3
 80094b4:	2002      	movs	r0, #2
 80094b6:	f005 fa83 	bl	800e9c0 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 80094ba:	4b0a      	ldr	r3, [pc, #40]	@ (80094e4 <sen5x_enable+0xa0>)
 80094bc:	2201      	movs	r2, #1
 80094be:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 80094c0:	4b02      	ldr	r3, [pc, #8]	@ (80094cc <sen5x_enable+0x88>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
}
 80094c4:	0018      	movs	r0, r3
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b002      	add	sp, #8
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000c87 	.word	0x20000c87
 80094d0:	08024ca8 	.word	0x08024ca8
 80094d4:	08024cb0 	.word	0x08024cb0
 80094d8:	08024cbc 	.word	0x08024cbc
 80094dc:	08024cd8 	.word	0x08024cd8
 80094e0:	08024cdc 	.word	0x08024cdc
 80094e4:	2000008d 	.word	0x2000008d

080094e8 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80094ec:	2380      	movs	r3, #128	@ 0x80
 80094ee:	015b      	lsls	r3, r3, #5
 80094f0:	480f      	ldr	r0, [pc, #60]	@ (8009530 <sen5x_Power_On+0x48>)
 80094f2:	2201      	movs	r2, #1
 80094f4:	0019      	movs	r1, r3
 80094f6:	f007 f938 	bl	801076a <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 80094fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009534 <sen5x_Power_On+0x4c>)
 80094fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009538 <sen5x_Power_On+0x50>)
 80094fe:	0019      	movs	r1, r3
 8009500:	2003      	movs	r0, #3
 8009502:	f005 fa5d 	bl	800e9c0 <CreateLine>
  HAL_Delay(150);
 8009506:	2096      	movs	r0, #150	@ 0x96
 8009508:	f005 fea8 	bl	800f25c <HAL_Delay>
  if (sen5x_device_reset()) {
 800950c:	f001 f9d4 	bl	800a8b8 <sen5x_device_reset>
 8009510:	1e03      	subs	r3, r0, #0
 8009512:	d006      	beq.n	8009522 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 8009514:	4a09      	ldr	r2, [pc, #36]	@ (800953c <sen5x_Power_On+0x54>)
 8009516:	4b0a      	ldr	r3, [pc, #40]	@ (8009540 <sen5x_Power_On+0x58>)
 8009518:	0019      	movs	r1, r3
 800951a:	2001      	movs	r0, #1
 800951c:	f005 fa50 	bl	800e9c0 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 8009520:	e002      	b.n	8009528 <sen5x_Power_On+0x40>
    sen5x_On = true;
 8009522:	4b08      	ldr	r3, [pc, #32]	@ (8009544 <sen5x_Power_On+0x5c>)
 8009524:	2201      	movs	r2, #1
 8009526:	701a      	strb	r2, [r3, #0]
}
 8009528:	46c0      	nop			@ (mov r8, r8)
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	46c0      	nop			@ (mov r8, r8)
 8009530:	50000800 	.word	0x50000800
 8009534:	08024cfc 	.word	0x08024cfc
 8009538:	08024d18 	.word	0x08024d18
 800953c:	08024d1c 	.word	0x08024d1c
 8009540:	08024d44 	.word	0x08024d44
 8009544:	20000c85 	.word	0x20000c85

08009548 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800954c:	4b0e      	ldr	r3, [pc, #56]	@ (8009588 <sen5x_Power_Off+0x40>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d006      	beq.n	8009562 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 8009554:	4a0d      	ldr	r2, [pc, #52]	@ (800958c <sen5x_Power_Off+0x44>)
 8009556:	4b0e      	ldr	r3, [pc, #56]	@ (8009590 <sen5x_Power_Off+0x48>)
 8009558:	0019      	movs	r1, r3
 800955a:	2003      	movs	r0, #3
 800955c:	f005 fa30 	bl	800e9c0 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 8009560:	e00f      	b.n	8009582 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 8009562:	4a0c      	ldr	r2, [pc, #48]	@ (8009594 <sen5x_Power_Off+0x4c>)
 8009564:	4b0a      	ldr	r3, [pc, #40]	@ (8009590 <sen5x_Power_Off+0x48>)
 8009566:	0019      	movs	r1, r3
 8009568:	2003      	movs	r0, #3
 800956a:	f005 fa29 	bl	800e9c0 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800956e:	2380      	movs	r3, #128	@ 0x80
 8009570:	015b      	lsls	r3, r3, #5
 8009572:	4809      	ldr	r0, [pc, #36]	@ (8009598 <sen5x_Power_Off+0x50>)
 8009574:	2200      	movs	r2, #0
 8009576:	0019      	movs	r1, r3
 8009578:	f007 f8f7 	bl	801076a <HAL_GPIO_WritePin>
      sen5x_On = false;
 800957c:	4b07      	ldr	r3, [pc, #28]	@ (800959c <sen5x_Power_Off+0x54>)
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
}
 8009582:	46c0      	nop			@ (mov r8, r8)
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000c86 	.word	0x20000c86
 800958c:	08024d48 	.word	0x08024d48
 8009590:	08024d18 	.word	0x08024d18
 8009594:	08024d78 	.word	0x08024d78
 8009598:	50000800 	.word	0x50000800
 800959c:	20000c85 	.word	0x20000c85

080095a0 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 80095a4:	4b02      	ldr	r3, [pc, #8]	@ (80095b0 <reset_fanCleaningDone+0x10>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	701a      	strb	r2, [r3, #0]
}
 80095aa:	46c0      	nop			@ (mov r8, r8)
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000c84 	.word	0x20000c84

080095b4 <probe_sen5x>:

int16_t probe_sen5x(void) {
 80095b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b6:	b093      	sub	sp, #76	@ 0x4c
 80095b8:	af04      	add	r7, sp, #16
  int16_t error = 0;
 80095ba:	2436      	movs	r4, #54	@ 0x36
 80095bc:	193b      	adds	r3, r7, r4
 80095be:	2200      	movs	r2, #0
 80095c0:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 80095c2:	2335      	movs	r3, #53	@ 0x35
 80095c4:	18fb      	adds	r3, r7, r3
 80095c6:	2220      	movs	r2, #32
 80095c8:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 80095ca:	2334      	movs	r3, #52	@ 0x34
 80095cc:	18fb      	adds	r3, r7, r3
 80095ce:	2220      	movs	r2, #32
 80095d0:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 80095d2:	f7ff ff89 	bl	80094e8 <sen5x_Power_On>
  error = sen5x_device_reset();
 80095d6:	0025      	movs	r5, r4
 80095d8:	193c      	adds	r4, r7, r4
 80095da:	f001 f96d 	bl	800a8b8 <sen5x_device_reset>
 80095de:	0003      	movs	r3, r0
 80095e0:	8023      	strh	r3, [r4, #0]
  if (error) {
 80095e2:	002c      	movs	r4, r5
 80095e4:	193b      	adds	r3, r7, r4
 80095e6:	2200      	movs	r2, #0
 80095e8:	5e9b      	ldrsh	r3, [r3, r2]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00b      	beq.n	8009606 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80095ee:	193b      	adds	r3, r7, r4
 80095f0:	2200      	movs	r2, #0
 80095f2:	5e9b      	ldrsh	r3, [r3, r2]
 80095f4:	4a75      	ldr	r2, [pc, #468]	@ (80097cc <probe_sen5x+0x218>)
 80095f6:	4976      	ldr	r1, [pc, #472]	@ (80097d0 <probe_sen5x+0x21c>)
 80095f8:	2001      	movs	r0, #1
 80095fa:	f005 f9e1 	bl	800e9c0 <CreateLine>
      return error;
 80095fe:	193b      	adds	r3, r7, r4
 8009600:	2200      	movs	r2, #0
 8009602:	5e9b      	ldrsh	r3, [r3, r2]
 8009604:	e0de      	b.n	80097c4 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8009606:	2536      	movs	r5, #54	@ 0x36
 8009608:	197c      	adds	r4, r7, r5
 800960a:	2335      	movs	r3, #53	@ 0x35
 800960c:	18fb      	adds	r3, r7, r3
 800960e:	781a      	ldrb	r2, [r3, #0]
 8009610:	230c      	movs	r3, #12
 8009612:	18fb      	adds	r3, r7, r3
 8009614:	0011      	movs	r1, r2
 8009616:	0018      	movs	r0, r3
 8009618:	f001 f83a 	bl	800a690 <sen5x_get_serial_number>
 800961c:	0003      	movs	r3, r0
 800961e:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009620:	197b      	adds	r3, r7, r5
 8009622:	2200      	movs	r2, #0
 8009624:	5e9b      	ldrsh	r3, [r3, r2]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800962a:	197b      	adds	r3, r7, r5
 800962c:	2200      	movs	r2, #0
 800962e:	5e9a      	ldrsh	r2, [r3, r2]
 8009630:	4b68      	ldr	r3, [pc, #416]	@ (80097d4 <probe_sen5x+0x220>)
 8009632:	0011      	movs	r1, r2
 8009634:	0018      	movs	r0, r3
 8009636:	f016 feab 	bl	8020390 <iprintf>
      return error;
 800963a:	197b      	adds	r3, r7, r5
 800963c:	2200      	movs	r2, #0
 800963e:	5e9b      	ldrsh	r3, [r3, r2]
 8009640:	e0c0      	b.n	80097c4 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8009642:	230c      	movs	r3, #12
 8009644:	18fa      	adds	r2, r7, r3
 8009646:	4b64      	ldr	r3, [pc, #400]	@ (80097d8 <probe_sen5x+0x224>)
 8009648:	0011      	movs	r1, r2
 800964a:	0018      	movs	r0, r3
 800964c:	f016 fea0 	bl	8020390 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009650:	2536      	movs	r5, #54	@ 0x36
 8009652:	197c      	adds	r4, r7, r5
 8009654:	2334      	movs	r3, #52	@ 0x34
 8009656:	18fb      	adds	r3, r7, r3
 8009658:	781a      	ldrb	r2, [r3, #0]
 800965a:	4b60      	ldr	r3, [pc, #384]	@ (80097dc <probe_sen5x+0x228>)
 800965c:	0011      	movs	r1, r2
 800965e:	0018      	movs	r0, r3
 8009660:	f000 ffc0 	bl	800a5e4 <sen5x_get_product_name>
 8009664:	0003      	movs	r3, r0
 8009666:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009668:	197b      	adds	r3, r7, r5
 800966a:	2200      	movs	r2, #0
 800966c:	5e9b      	ldrsh	r3, [r3, r2]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8009672:	197b      	adds	r3, r7, r5
 8009674:	2200      	movs	r2, #0
 8009676:	5e9a      	ldrsh	r2, [r3, r2]
 8009678:	4b59      	ldr	r3, [pc, #356]	@ (80097e0 <probe_sen5x+0x22c>)
 800967a:	0011      	movs	r1, r2
 800967c:	0018      	movs	r0, r3
 800967e:	f016 fe87 	bl	8020390 <iprintf>
      return error;
 8009682:	197b      	adds	r3, r7, r5
 8009684:	2200      	movs	r2, #0
 8009686:	5e9b      	ldrsh	r3, [r3, r2]
 8009688:	e09c      	b.n	80097c4 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800968a:	4a54      	ldr	r2, [pc, #336]	@ (80097dc <probe_sen5x+0x228>)
 800968c:	4b55      	ldr	r3, [pc, #340]	@ (80097e4 <probe_sen5x+0x230>)
 800968e:	0011      	movs	r1, r2
 8009690:	0018      	movs	r0, r3
 8009692:	f016 fe7d 	bl	8020390 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8009696:	2636      	movs	r6, #54	@ 0x36
 8009698:	19bc      	adds	r4, r7, r6
 800969a:	2308      	movs	r3, #8
 800969c:	18fd      	adds	r5, r7, r3
 800969e:	2309      	movs	r3, #9
 80096a0:	18fa      	adds	r2, r7, r3
 80096a2:	230a      	movs	r3, #10
 80096a4:	18f9      	adds	r1, r7, r3
 80096a6:	230b      	movs	r3, #11
 80096a8:	18f8      	adds	r0, r7, r3
 80096aa:	1d7b      	adds	r3, r7, #5
 80096ac:	9302      	str	r3, [sp, #8]
 80096ae:	1dbb      	adds	r3, r7, #6
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	1dfb      	adds	r3, r7, #7
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	002b      	movs	r3, r5
 80096b8:	f001 f840 	bl	800a73c <sen5x_get_version>
 80096bc:	0003      	movs	r3, r0
 80096be:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 80096c0:	19bb      	adds	r3, r7, r6
 80096c2:	2200      	movs	r2, #0
 80096c4:	5e9b      	ldrsh	r3, [r3, r2]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00b      	beq.n	80096e2 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 80096ca:	19bb      	adds	r3, r7, r6
 80096cc:	2200      	movs	r2, #0
 80096ce:	5e9a      	ldrsh	r2, [r3, r2]
 80096d0:	4b45      	ldr	r3, [pc, #276]	@ (80097e8 <probe_sen5x+0x234>)
 80096d2:	0011      	movs	r1, r2
 80096d4:	0018      	movs	r0, r3
 80096d6:	f016 fe5b 	bl	8020390 <iprintf>
      return error;
 80096da:	19bb      	adds	r3, r7, r6
 80096dc:	2200      	movs	r2, #0
 80096de:	5e9b      	ldrsh	r3, [r3, r2]
 80096e0:	e070      	b.n	80097c4 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 80096e2:	230b      	movs	r3, #11
 80096e4:	18fb      	adds	r3, r7, r3
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	0019      	movs	r1, r3
 80096ea:	230a      	movs	r3, #10
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	001a      	movs	r2, r3
 80096f2:	2308      	movs	r3, #8
 80096f4:	18fb      	adds	r3, r7, r3
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	001c      	movs	r4, r3
 80096fa:	1dfb      	adds	r3, r7, #7
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	483b      	ldr	r0, [pc, #236]	@ (80097ec <probe_sen5x+0x238>)
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	0023      	movs	r3, r4
 8009704:	f016 fe44 	bl	8020390 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8009708:	2300      	movs	r3, #0
 800970a:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800970c:	262e      	movs	r6, #46	@ 0x2e
 800970e:	19bb      	adds	r3, r7, r6
 8009710:	2200      	movs	r2, #0
 8009712:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8009714:	232c      	movs	r3, #44	@ 0x2c
 8009716:	18fb      	adds	r3, r7, r3
 8009718:	2200      	movs	r2, #0
 800971a:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800971c:	4934      	ldr	r1, [pc, #208]	@ (80097f0 <probe_sen5x+0x23c>)
 800971e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009720:	f7f7 fc3e 	bl	8000fa0 <__aeabi_fmul>
 8009724:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8009726:	1c18      	adds	r0, r3, #0
 8009728:	f7f7 ff32 	bl	8001590 <__aeabi_f2iz>
 800972c:	0003      	movs	r3, r0
 800972e:	b218      	sxth	r0, r3
 8009730:	2536      	movs	r5, #54	@ 0x36
 8009732:	197c      	adds	r4, r7, r5
 8009734:	232c      	movs	r3, #44	@ 0x2c
 8009736:	18fb      	adds	r3, r7, r3
 8009738:	881a      	ldrh	r2, [r3, #0]
 800973a:	19bb      	adds	r3, r7, r6
 800973c:	2100      	movs	r1, #0
 800973e:	5e5b      	ldrsh	r3, [r3, r1]
 8009740:	0019      	movs	r1, r3
 8009742:	f000 feeb 	bl	800a51c <sen5x_set_temperature_offset_parameters>
 8009746:	0003      	movs	r3, r0
 8009748:	8023      	strh	r3, [r4, #0]
  if (error) {
 800974a:	197b      	adds	r3, r7, r5
 800974c:	2200      	movs	r2, #0
 800974e:	5e9b      	ldrsh	r3, [r3, r2]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00b      	beq.n	800976c <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8009754:	197b      	adds	r3, r7, r5
 8009756:	2200      	movs	r2, #0
 8009758:	5e9b      	ldrsh	r3, [r3, r2]
 800975a:	4a26      	ldr	r2, [pc, #152]	@ (80097f4 <probe_sen5x+0x240>)
 800975c:	491c      	ldr	r1, [pc, #112]	@ (80097d0 <probe_sen5x+0x21c>)
 800975e:	2001      	movs	r0, #1
 8009760:	f005 f92e 	bl	800e9c0 <CreateLine>
      return error;
 8009764:	197b      	adds	r3, r7, r5
 8009766:	2200      	movs	r2, #0
 8009768:	5e9b      	ldrsh	r3, [r3, r2]
 800976a:	e02b      	b.n	80097c4 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800976c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800976e:	f7f9 fe79 	bl	8003464 <__aeabi_f2d>
 8009772:	0002      	movs	r2, r0
 8009774:	000b      	movs	r3, r1
 8009776:	4820      	ldr	r0, [pc, #128]	@ (80097f8 <probe_sen5x+0x244>)
 8009778:	4920      	ldr	r1, [pc, #128]	@ (80097fc <probe_sen5x+0x248>)
 800977a:	9200      	str	r2, [sp, #0]
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	0002      	movs	r2, r0
 8009780:	2002      	movs	r0, #2
 8009782:	f005 f91d 	bl	800e9c0 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 8009786:	f7fc ff85 	bl	8006694 <Check_USB_PowerOn>
 800978a:	0003      	movs	r3, r0
 800978c:	001a      	movs	r2, r3
 800978e:	2301      	movs	r3, #1
 8009790:	4053      	eors	r3, r2
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00a      	beq.n	80097ae <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 8009798:	f7ff fed6 	bl	8009548 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800979c:	f005 fd54 	bl	800f248 <HAL_GetTick>
 80097a0:	0003      	movs	r3, r0
 80097a2:	22fa      	movs	r2, #250	@ 0xfa
 80097a4:	00d2      	lsls	r2, r2, #3
 80097a6:	189a      	adds	r2, r3, r2
 80097a8:	4b15      	ldr	r3, [pc, #84]	@ (8009800 <probe_sen5x+0x24c>)
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	e006      	b.n	80097bc <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 80097ae:	f005 fd4b 	bl	800f248 <HAL_GetTick>
 80097b2:	0003      	movs	r3, r0
 80097b4:	4a13      	ldr	r2, [pc, #76]	@ (8009804 <probe_sen5x+0x250>)
 80097b6:	189a      	adds	r2, r3, r2
 80097b8:	4b11      	ldr	r3, [pc, #68]	@ (8009800 <probe_sen5x+0x24c>)
 80097ba:	601a      	str	r2, [r3, #0]
  }
  return error;
 80097bc:	2336      	movs	r3, #54	@ 0x36
 80097be:	18fb      	adds	r3, r7, r3
 80097c0:	2200      	movs	r2, #0
 80097c2:	5e9b      	ldrsh	r3, [r3, r2]
}
 80097c4:	0018      	movs	r0, r3
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b00f      	add	sp, #60	@ 0x3c
 80097ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097cc:	08024d94 	.word	0x08024d94
 80097d0:	08024d44 	.word	0x08024d44
 80097d4:	08024dc0 	.word	0x08024dc0
 80097d8:	08024df0 	.word	0x08024df0
 80097dc:	20000c88 	.word	0x20000c88
 80097e0:	08024e04 	.word	0x08024e04
 80097e4:	08024e34 	.word	0x08024e34
 80097e8:	08024e48 	.word	0x08024e48
 80097ec:	08024e74 	.word	0x08024e74
 80097f0:	43480000 	.word	0x43480000
 80097f4:	08024e98 	.word	0x08024e98
 80097f8:	08024ed8 	.word	0x08024ed8
 80097fc:	08024cd8 	.word	0x08024cd8
 8009800:	20000c9c 	.word	0x20000c9c
 8009804:	00006d60 	.word	0x00006d60

08009808 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8009808:	b590      	push	{r4, r7, lr}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800980e:	1dbb      	adds	r3, r7, #6
 8009810:	2200      	movs	r2, #0
 8009812:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 8009814:	4b1b      	ldr	r3, [pc, #108]	@ (8009884 <sen5x_lightup_measurement+0x7c>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800981c:	4a1a      	ldr	r2, [pc, #104]	@ (8009888 <sen5x_lightup_measurement+0x80>)
 800981e:	4b1b      	ldr	r3, [pc, #108]	@ (800988c <sen5x_lightup_measurement+0x84>)
 8009820:	0019      	movs	r1, r3
 8009822:	2002      	movs	r0, #2
 8009824:	f005 f8cc 	bl	800e9c0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009828:	1dbc      	adds	r4, r7, #6
 800982a:	f000 fd03 	bl	800a234 <sen5x_start_measurement_without_pm>
 800982e:	0003      	movs	r3, r0
 8009830:	8023      	strh	r3, [r4, #0]
 8009832:	e00a      	b.n	800984a <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 8009834:	4a16      	ldr	r2, [pc, #88]	@ (8009890 <sen5x_lightup_measurement+0x88>)
 8009836:	4b15      	ldr	r3, [pc, #84]	@ (800988c <sen5x_lightup_measurement+0x84>)
 8009838:	0019      	movs	r1, r3
 800983a:	2002      	movs	r0, #2
 800983c:	f005 f8c0 	bl	800e9c0 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 8009840:	1dbc      	adds	r4, r7, #6
 8009842:	f000 fcc9 	bl	800a1d8 <sen5x_start_measurement>
 8009846:	0003      	movs	r3, r0
 8009848:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800984a:	1dbb      	adds	r3, r7, #6
 800984c:	2200      	movs	r2, #0
 800984e:	5e9b      	ldrsh	r3, [r3, r2]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d008      	beq.n	8009866 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009854:	1dbb      	adds	r3, r7, #6
 8009856:	2200      	movs	r2, #0
 8009858:	5e9b      	ldrsh	r3, [r3, r2]
 800985a:	4a0e      	ldr	r2, [pc, #56]	@ (8009894 <sen5x_lightup_measurement+0x8c>)
 800985c:	490e      	ldr	r1, [pc, #56]	@ (8009898 <sen5x_lightup_measurement+0x90>)
 800985e:	2001      	movs	r0, #1
 8009860:	f005 f8ae 	bl	800e9c0 <CreateLine>
 8009864:	e007      	b.n	8009876 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 8009866:	f7fc ff45 	bl	80066f4 <showTime>
    Info("sen5x_start_measurement executed");
 800986a:	4a0c      	ldr	r2, [pc, #48]	@ (800989c <sen5x_lightup_measurement+0x94>)
 800986c:	4b07      	ldr	r3, [pc, #28]	@ (800988c <sen5x_lightup_measurement+0x84>)
 800986e:	0019      	movs	r1, r3
 8009870:	2002      	movs	r0, #2
 8009872:	f005 f8a5 	bl	800e9c0 <CreateLine>
  }
  return error;
 8009876:	1dbb      	adds	r3, r7, #6
 8009878:	2200      	movs	r2, #0
 800987a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800987c:	0018      	movs	r0, r3
 800987e:	46bd      	mov	sp, r7
 8009880:	b003      	add	sp, #12
 8009882:	bd90      	pop	{r4, r7, pc}
 8009884:	20000c86 	.word	0x20000c86
 8009888:	08024f10 	.word	0x08024f10
 800988c:	08024cd8 	.word	0x08024cd8
 8009890:	08024f3c 	.word	0x08024f3c
 8009894:	08024f5c 	.word	0x08024f5c
 8009898:	08024d44 	.word	0x08024d44
 800989c:	08024f8c 	.word	0x08024f8c

080098a0 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
  int16_t error = 0;
 80098a6:	1dbb      	adds	r3, r7, #6
 80098a8:	2200      	movs	r2, #0
 80098aa:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 80098ac:	4b21      	ldr	r3, [pc, #132]	@ (8009934 <sen5x_extinguish_measurement+0x94>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01e      	beq.n	80098f2 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 80098b4:	4a20      	ldr	r2, [pc, #128]	@ (8009938 <sen5x_extinguish_measurement+0x98>)
 80098b6:	4b21      	ldr	r3, [pc, #132]	@ (800993c <sen5x_extinguish_measurement+0x9c>)
 80098b8:	0019      	movs	r1, r3
 80098ba:	2002      	movs	r0, #2
 80098bc:	f005 f880 	bl	800e9c0 <CreateLine>
    Info("PM measurement is disabled");
 80098c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009940 <sen5x_extinguish_measurement+0xa0>)
 80098c2:	4b1e      	ldr	r3, [pc, #120]	@ (800993c <sen5x_extinguish_measurement+0x9c>)
 80098c4:	0019      	movs	r1, r3
 80098c6:	2002      	movs	r0, #2
 80098c8:	f005 f87a 	bl	800e9c0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80098cc:	1dbc      	adds	r4, r7, #6
 80098ce:	f000 fcb1 	bl	800a234 <sen5x_start_measurement_without_pm>
 80098d2:	0003      	movs	r3, r0
 80098d4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098d6:	1dbb      	adds	r3, r7, #6
 80098d8:	2200      	movs	r2, #0
 80098da:	5e9b      	ldrsh	r3, [r3, r2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d022      	beq.n	8009926 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 80098e0:	1dbb      	adds	r3, r7, #6
 80098e2:	2200      	movs	r2, #0
 80098e4:	5e9b      	ldrsh	r3, [r3, r2]
 80098e6:	4a17      	ldr	r2, [pc, #92]	@ (8009944 <sen5x_extinguish_measurement+0xa4>)
 80098e8:	4917      	ldr	r1, [pc, #92]	@ (8009948 <sen5x_extinguish_measurement+0xa8>)
 80098ea:	2001      	movs	r0, #1
 80098ec:	f005 f868 	bl	800e9c0 <CreateLine>
 80098f0:	e019      	b.n	8009926 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 80098f2:	1dbc      	adds	r4, r7, #6
 80098f4:	f000 fccc 	bl	800a290 <sen5x_stop_measurement>
 80098f8:	0003      	movs	r3, r0
 80098fa:	8023      	strh	r3, [r4, #0]
    showTime();
 80098fc:	f7fc fefa 	bl	80066f4 <showTime>
    Info("sen5x_stop_measurement executed");
 8009900:	4a12      	ldr	r2, [pc, #72]	@ (800994c <sen5x_extinguish_measurement+0xac>)
 8009902:	4b0e      	ldr	r3, [pc, #56]	@ (800993c <sen5x_extinguish_measurement+0x9c>)
 8009904:	0019      	movs	r1, r3
 8009906:	2002      	movs	r0, #2
 8009908:	f005 f85a 	bl	800e9c0 <CreateLine>
    if (error) {
 800990c:	1dbb      	adds	r3, r7, #6
 800990e:	2200      	movs	r2, #0
 8009910:	5e9b      	ldrsh	r3, [r3, r2]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d007      	beq.n	8009926 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 8009916:	1dbb      	adds	r3, r7, #6
 8009918:	2200      	movs	r2, #0
 800991a:	5e9b      	ldrsh	r3, [r3, r2]
 800991c:	4a0c      	ldr	r2, [pc, #48]	@ (8009950 <sen5x_extinguish_measurement+0xb0>)
 800991e:	490a      	ldr	r1, [pc, #40]	@ (8009948 <sen5x_extinguish_measurement+0xa8>)
 8009920:	2001      	movs	r0, #1
 8009922:	f005 f84d 	bl	800e9c0 <CreateLine>
    }
  }
  return error;
 8009926:	1dbb      	adds	r3, r7, #6
 8009928:	2200      	movs	r2, #0
 800992a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800992c:	0018      	movs	r0, r3
 800992e:	46bd      	mov	sp, r7
 8009930:	b003      	add	sp, #12
 8009932:	bd90      	pop	{r4, r7, pc}
 8009934:	20000c86 	.word	0x20000c86
 8009938:	08024fb0 	.word	0x08024fb0
 800993c:	08024cd8 	.word	0x08024cd8
 8009940:	08024fe8 	.word	0x08024fe8
 8009944:	08025004 	.word	0x08025004
 8009948:	08024d44 	.word	0x08024d44
 800994c:	08025044 	.word	0x08025044
 8009950:	08025064 	.word	0x08025064

08009954 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8009954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009956:	b08d      	sub	sp, #52	@ 0x34
 8009958:	af04      	add	r7, sp, #16
 800995a:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800995c:	261e      	movs	r6, #30
 800995e:	19bb      	adds	r3, r7, r6
 8009960:	2200      	movs	r2, #0
 8009962:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009964:	19bc      	adds	r4, r7, r6
 8009966:	2316      	movs	r3, #22
 8009968:	18fd      	adds	r5, r7, r3
 800996a:	2318      	movs	r3, #24
 800996c:	18fa      	adds	r2, r7, r3
 800996e:	231a      	movs	r3, #26
 8009970:	18f9      	adds	r1, r7, r3
 8009972:	231c      	movs	r3, #28
 8009974:	18f8      	adds	r0, r7, r3
 8009976:	230e      	movs	r3, #14
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	9303      	str	r3, [sp, #12]
 800997c:	2310      	movs	r3, #16
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	2312      	movs	r3, #18
 8009984:	18fb      	adds	r3, r7, r3
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	2314      	movs	r3, #20
 800998a:	18fb      	adds	r3, r7, r3
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	002b      	movs	r3, r5
 8009990:	f000 fd00 	bl	800a394 <sen5x_read_measured_values>
 8009994:	0003      	movs	r3, r0
 8009996:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009998:	19bb      	adds	r3, r7, r6
 800999a:	2200      	movs	r2, #0
 800999c:	5e9b      	ldrsh	r3, [r3, r2]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <sen5x_read_measurement+0x56>
    return error;
 80099a2:	19bb      	adds	r3, r7, r6
 80099a4:	2200      	movs	r2, #0
 80099a6:	5e9b      	ldrsh	r3, [r3, r2]
 80099a8:	e02c      	b.n	8009a04 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 80099aa:	231c      	movs	r3, #28
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	881a      	ldrh	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 80099b4:	231a      	movs	r3, #26
 80099b6:	18fb      	adds	r3, r7, r3
 80099b8:	881a      	ldrh	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 80099be:	2318      	movs	r3, #24
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	881a      	ldrh	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 80099c8:	2316      	movs	r3, #22
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	881a      	ldrh	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 80099d2:	2314      	movs	r3, #20
 80099d4:	18fb      	adds	r3, r7, r3
 80099d6:	2200      	movs	r2, #0
 80099d8:	5e9a      	ldrsh	r2, [r3, r2]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 80099de:	2312      	movs	r3, #18
 80099e0:	18fb      	adds	r3, r7, r3
 80099e2:	2200      	movs	r2, #0
 80099e4:	5e9a      	ldrsh	r2, [r3, r2]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 80099ea:	2310      	movs	r3, #16
 80099ec:	18fb      	adds	r3, r7, r3
 80099ee:	2200      	movs	r2, #0
 80099f0:	5e9a      	ldrsh	r2, [r3, r2]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 80099f6:	230e      	movs	r3, #14
 80099f8:	18fb      	adds	r3, r7, r3
 80099fa:	2200      	movs	r2, #0
 80099fc:	5e9a      	ldrsh	r2, [r3, r2]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	81da      	strh	r2, [r3, #14]
  return 0;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	0018      	movs	r0, r3
 8009a06:	46bd      	mov	sp, r7
 8009a08:	b009      	add	sp, #36	@ 0x24
 8009a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a0c <sen5x_printvalues>:

void sen5x_printvalues(void) {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 8009a10:	4b69      	ldr	r3, [pc, #420]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	4a69      	ldr	r2, [pc, #420]	@ (8009bbc <sen5x_printvalues+0x1b0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d013      	beq.n	8009a42 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 8009a1a:	4b67      	ldr	r3, [pc, #412]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	0018      	movs	r0, r3
 8009a20:	f7f7 fdd6 	bl	80015d0 <__aeabi_i2f>
 8009a24:	1c03      	adds	r3, r0, #0
 8009a26:	4966      	ldr	r1, [pc, #408]	@ (8009bc0 <sen5x_printvalues+0x1b4>)
 8009a28:	1c18      	adds	r0, r3, #0
 8009a2a:	f7f7 f8d3 	bl	8000bd4 <__aeabi_fdiv>
 8009a2e:	1c03      	adds	r3, r0, #0
 8009a30:	1c18      	adds	r0, r3, #0
 8009a32:	f7f9 fd17 	bl	8003464 <__aeabi_f2d>
 8009a36:	0002      	movs	r2, r0
 8009a38:	000b      	movs	r3, r1
 8009a3a:	4962      	ldr	r1, [pc, #392]	@ (8009bc4 <sen5x_printvalues+0x1b8>)
 8009a3c:	0008      	movs	r0, r1
 8009a3e:	f016 fca7 	bl	8020390 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009a42:	4b5d      	ldr	r3, [pc, #372]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	4a5d      	ldr	r2, [pc, #372]	@ (8009bbc <sen5x_printvalues+0x1b0>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d013      	beq.n	8009a74 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009a4e:	885b      	ldrh	r3, [r3, #2]
 8009a50:	0018      	movs	r0, r3
 8009a52:	f7f7 fdbd 	bl	80015d0 <__aeabi_i2f>
 8009a56:	1c03      	adds	r3, r0, #0
 8009a58:	4959      	ldr	r1, [pc, #356]	@ (8009bc0 <sen5x_printvalues+0x1b4>)
 8009a5a:	1c18      	adds	r0, r3, #0
 8009a5c:	f7f7 f8ba 	bl	8000bd4 <__aeabi_fdiv>
 8009a60:	1c03      	adds	r3, r0, #0
 8009a62:	1c18      	adds	r0, r3, #0
 8009a64:	f7f9 fcfe 	bl	8003464 <__aeabi_f2d>
 8009a68:	0002      	movs	r2, r0
 8009a6a:	000b      	movs	r3, r1
 8009a6c:	4956      	ldr	r1, [pc, #344]	@ (8009bc8 <sen5x_printvalues+0x1bc>)
 8009a6e:	0008      	movs	r0, r1
 8009a70:	f016 fc8e 	bl	8020390 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009a74:	4b50      	ldr	r3, [pc, #320]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009a76:	889b      	ldrh	r3, [r3, #4]
 8009a78:	4a50      	ldr	r2, [pc, #320]	@ (8009bbc <sen5x_printvalues+0x1b0>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d013      	beq.n	8009aa6 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8009a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009a80:	889b      	ldrh	r3, [r3, #4]
 8009a82:	0018      	movs	r0, r3
 8009a84:	f7f7 fda4 	bl	80015d0 <__aeabi_i2f>
 8009a88:	1c03      	adds	r3, r0, #0
 8009a8a:	494d      	ldr	r1, [pc, #308]	@ (8009bc0 <sen5x_printvalues+0x1b4>)
 8009a8c:	1c18      	adds	r0, r3, #0
 8009a8e:	f7f7 f8a1 	bl	8000bd4 <__aeabi_fdiv>
 8009a92:	1c03      	adds	r3, r0, #0
 8009a94:	1c18      	adds	r0, r3, #0
 8009a96:	f7f9 fce5 	bl	8003464 <__aeabi_f2d>
 8009a9a:	0002      	movs	r2, r0
 8009a9c:	000b      	movs	r3, r1
 8009a9e:	494b      	ldr	r1, [pc, #300]	@ (8009bcc <sen5x_printvalues+0x1c0>)
 8009aa0:	0008      	movs	r0, r1
 8009aa2:	f016 fc75 	bl	8020390 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009aa6:	4b44      	ldr	r3, [pc, #272]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009aa8:	88db      	ldrh	r3, [r3, #6]
 8009aaa:	4a44      	ldr	r2, [pc, #272]	@ (8009bbc <sen5x_printvalues+0x1b0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d013      	beq.n	8009ad8 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009ab0:	4b41      	ldr	r3, [pc, #260]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009ab2:	88db      	ldrh	r3, [r3, #6]
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f7f7 fd8b 	bl	80015d0 <__aeabi_i2f>
 8009aba:	1c03      	adds	r3, r0, #0
 8009abc:	4940      	ldr	r1, [pc, #256]	@ (8009bc0 <sen5x_printvalues+0x1b4>)
 8009abe:	1c18      	adds	r0, r3, #0
 8009ac0:	f7f7 f888 	bl	8000bd4 <__aeabi_fdiv>
 8009ac4:	1c03      	adds	r3, r0, #0
 8009ac6:	1c18      	adds	r0, r3, #0
 8009ac8:	f7f9 fccc 	bl	8003464 <__aeabi_f2d>
 8009acc:	0002      	movs	r2, r0
 8009ace:	000b      	movs	r3, r1
 8009ad0:	493f      	ldr	r1, [pc, #252]	@ (8009bd0 <sen5x_printvalues+0x1c4>)
 8009ad2:	0008      	movs	r0, r1
 8009ad4:	f016 fc5c 	bl	8020390 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 8009ad8:	4b37      	ldr	r3, [pc, #220]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009ada:	2208      	movs	r2, #8
 8009adc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ade:	4a3d      	ldr	r2, [pc, #244]	@ (8009bd4 <sen5x_printvalues+0x1c8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d014      	beq.n	8009b0e <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009ae4:	4b34      	ldr	r3, [pc, #208]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009ae6:	2208      	movs	r2, #8
 8009ae8:	5e9b      	ldrsh	r3, [r3, r2]
 8009aea:	0018      	movs	r0, r3
 8009aec:	f7f7 fd70 	bl	80015d0 <__aeabi_i2f>
 8009af0:	1c03      	adds	r3, r0, #0
 8009af2:	4939      	ldr	r1, [pc, #228]	@ (8009bd8 <sen5x_printvalues+0x1cc>)
 8009af4:	1c18      	adds	r0, r3, #0
 8009af6:	f7f7 f86d 	bl	8000bd4 <__aeabi_fdiv>
 8009afa:	1c03      	adds	r3, r0, #0
 8009afc:	1c18      	adds	r0, r3, #0
 8009afe:	f7f9 fcb1 	bl	8003464 <__aeabi_f2d>
 8009b02:	0002      	movs	r2, r0
 8009b04:	000b      	movs	r3, r1
 8009b06:	4935      	ldr	r1, [pc, #212]	@ (8009bdc <sen5x_printvalues+0x1d0>)
 8009b08:	0008      	movs	r0, r1
 8009b0a:	f016 fc41 	bl	8020390 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 8009b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009b10:	220a      	movs	r2, #10
 8009b12:	5e9b      	ldrsh	r3, [r3, r2]
 8009b14:	4a2f      	ldr	r2, [pc, #188]	@ (8009bd4 <sen5x_printvalues+0x1c8>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d014      	beq.n	8009b44 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8009b1a:	4b27      	ldr	r3, [pc, #156]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009b1c:	220a      	movs	r2, #10
 8009b1e:	5e9b      	ldrsh	r3, [r3, r2]
 8009b20:	0018      	movs	r0, r3
 8009b22:	f7f7 fd55 	bl	80015d0 <__aeabi_i2f>
 8009b26:	1c03      	adds	r3, r0, #0
 8009b28:	492d      	ldr	r1, [pc, #180]	@ (8009be0 <sen5x_printvalues+0x1d4>)
 8009b2a:	1c18      	adds	r0, r3, #0
 8009b2c:	f7f7 f852 	bl	8000bd4 <__aeabi_fdiv>
 8009b30:	1c03      	adds	r3, r0, #0
 8009b32:	1c18      	adds	r0, r3, #0
 8009b34:	f7f9 fc96 	bl	8003464 <__aeabi_f2d>
 8009b38:	0002      	movs	r2, r0
 8009b3a:	000b      	movs	r3, r1
 8009b3c:	4929      	ldr	r1, [pc, #164]	@ (8009be4 <sen5x_printvalues+0x1d8>)
 8009b3e:	0008      	movs	r0, r1
 8009b40:	f016 fc26 	bl	8020390 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009b44:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009b46:	220c      	movs	r2, #12
 8009b48:	5e9b      	ldrsh	r3, [r3, r2]
 8009b4a:	4a22      	ldr	r2, [pc, #136]	@ (8009bd4 <sen5x_printvalues+0x1c8>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d014      	beq.n	8009b7a <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8009b50:	4b19      	ldr	r3, [pc, #100]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009b52:	220c      	movs	r2, #12
 8009b54:	5e9b      	ldrsh	r3, [r3, r2]
 8009b56:	0018      	movs	r0, r3
 8009b58:	f7f7 fd3a 	bl	80015d0 <__aeabi_i2f>
 8009b5c:	1c03      	adds	r3, r0, #0
 8009b5e:	4918      	ldr	r1, [pc, #96]	@ (8009bc0 <sen5x_printvalues+0x1b4>)
 8009b60:	1c18      	adds	r0, r3, #0
 8009b62:	f7f7 f837 	bl	8000bd4 <__aeabi_fdiv>
 8009b66:	1c03      	adds	r3, r0, #0
 8009b68:	1c18      	adds	r0, r3, #0
 8009b6a:	f7f9 fc7b 	bl	8003464 <__aeabi_f2d>
 8009b6e:	0002      	movs	r2, r0
 8009b70:	000b      	movs	r3, r1
 8009b72:	491d      	ldr	r1, [pc, #116]	@ (8009be8 <sen5x_printvalues+0x1dc>)
 8009b74:	0008      	movs	r0, r1
 8009b76:	f016 fc0b 	bl	8020390 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 8009b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009b7c:	220e      	movs	r2, #14
 8009b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8009b80:	4a14      	ldr	r2, [pc, #80]	@ (8009bd4 <sen5x_printvalues+0x1c8>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d014      	beq.n	8009bb0 <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009b86:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb8 <sen5x_printvalues+0x1ac>)
 8009b88:	220e      	movs	r2, #14
 8009b8a:	5e9b      	ldrsh	r3, [r3, r2]
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f7f7 fd1f 	bl	80015d0 <__aeabi_i2f>
 8009b92:	1c03      	adds	r3, r0, #0
 8009b94:	490a      	ldr	r1, [pc, #40]	@ (8009bc0 <sen5x_printvalues+0x1b4>)
 8009b96:	1c18      	adds	r0, r3, #0
 8009b98:	f7f7 f81c 	bl	8000bd4 <__aeabi_fdiv>
 8009b9c:	1c03      	adds	r3, r0, #0
 8009b9e:	1c18      	adds	r0, r3, #0
 8009ba0:	f7f9 fc60 	bl	8003464 <__aeabi_f2d>
 8009ba4:	0002      	movs	r2, r0
 8009ba6:	000b      	movs	r3, r1
 8009ba8:	4910      	ldr	r1, [pc, #64]	@ (8009bec <sen5x_printvalues+0x1e0>)
 8009baa:	0008      	movs	r0, r1
 8009bac:	f016 fbf0 	bl	8020390 <iprintf>
  }
}
 8009bb0:	46c0      	nop			@ (mov r8, r8)
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	46c0      	nop			@ (mov r8, r8)
 8009bb8:	20000ca0 	.word	0x20000ca0
 8009bbc:	0000ffff 	.word	0x0000ffff
 8009bc0:	41200000 	.word	0x41200000
 8009bc4:	08025094 	.word	0x08025094
 8009bc8:	080250c0 	.word	0x080250c0
 8009bcc:	080250ec 	.word	0x080250ec
 8009bd0:	08025118 	.word	0x08025118
 8009bd4:	00007fff 	.word	0x00007fff
 8009bd8:	42c80000 	.word	0x42c80000
 8009bdc:	08025144 	.word	0x08025144
 8009be0:	43480000 	.word	0x43480000
 8009be4:	08025168 	.word	0x08025168
 8009be8:	08025190 	.word	0x08025190
 8009bec:	080251a8 	.word	0x080251a8

08009bf0 <sen5xStore>:


void sen5xStore() {
 8009bf0:	b5b0      	push	{r4, r5, r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009bf4:	4b46      	ldr	r3, [pc, #280]	@ (8009d10 <sen5xStore+0x120>)
 8009bf6:	885b      	ldrh	r3, [r3, #2]
 8009bf8:	4a46      	ldr	r2, [pc, #280]	@ (8009d14 <sen5xStore+0x124>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00e      	beq.n	8009c1c <sen5xStore+0x2c>
    if (pm2p5 != sen5x_data.mass_concentration_pm2p5) {
 8009bfe:	4b44      	ldr	r3, [pc, #272]	@ (8009d10 <sen5xStore+0x120>)
 8009c00:	885a      	ldrh	r2, [r3, #2]
 8009c02:	4b45      	ldr	r3, [pc, #276]	@ (8009d18 <sen5xStore+0x128>)
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d008      	beq.n	8009c1c <sen5xStore+0x2c>
      pm2p5 = sen5x_data.mass_concentration_pm2p5;
 8009c0a:	4b41      	ldr	r3, [pc, #260]	@ (8009d10 <sen5xStore+0x120>)
 8009c0c:	885a      	ldrh	r2, [r3, #2]
 8009c0e:	4b42      	ldr	r3, [pc, #264]	@ (8009d18 <sen5xStore+0x128>)
 8009c10:	801a      	strh	r2, [r3, #0]
      setPM2p5(pm2p5);
 8009c12:	4b41      	ldr	r3, [pc, #260]	@ (8009d18 <sen5xStore+0x128>)
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	0018      	movs	r0, r3
 8009c18:	f7f9 fe08 	bl	800382c <setPM2p5>
    }
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8009d10 <sen5xStore+0x120>)
 8009c1e:	88db      	ldrh	r3, [r3, #6]
 8009c20:	4a3c      	ldr	r2, [pc, #240]	@ (8009d14 <sen5xStore+0x124>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d00e      	beq.n	8009c44 <sen5xStore+0x54>
    if (pm10p0 != sen5x_data.mass_concentration_pm10p0) {
 8009c26:	4b3a      	ldr	r3, [pc, #232]	@ (8009d10 <sen5xStore+0x120>)
 8009c28:	88da      	ldrh	r2, [r3, #6]
 8009c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8009d1c <sen5xStore+0x12c>)
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d008      	beq.n	8009c44 <sen5xStore+0x54>
      pm10p0 = sen5x_data.mass_concentration_pm10p0;
 8009c32:	4b37      	ldr	r3, [pc, #220]	@ (8009d10 <sen5xStore+0x120>)
 8009c34:	88da      	ldrh	r2, [r3, #6]
 8009c36:	4b39      	ldr	r3, [pc, #228]	@ (8009d1c <sen5xStore+0x12c>)
 8009c38:	801a      	strh	r2, [r3, #0]
      setPM10(pm10p0);
 8009c3a:	4b38      	ldr	r3, [pc, #224]	@ (8009d1c <sen5xStore+0x12c>)
 8009c3c:	881b      	ldrh	r3, [r3, #0]
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f7f9 fe20 	bl	8003884 <setPM10>
    }
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8009c44:	4b36      	ldr	r3, [pc, #216]	@ (8009d20 <sen5xStore+0x130>)
 8009c46:	791b      	ldrb	r3, [r3, #4]
 8009c48:	2b34      	cmp	r3, #52	@ 0x34
 8009c4a:	d003      	beq.n	8009c54 <sen5xStore+0x64>
 8009c4c:	4b34      	ldr	r3, [pc, #208]	@ (8009d20 <sen5xStore+0x130>)
 8009c4e:	791b      	ldrb	r3, [r3, #4]
 8009c50:	2b35      	cmp	r3, #53	@ 0x35
 8009c52:	d159      	bne.n	8009d08 <sen5xStore+0x118>
    if (!VOCNOx || usbPluggedIn) {
 8009c54:	4b33      	ldr	r3, [pc, #204]	@ (8009d24 <sen5xStore+0x134>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	4053      	eors	r3, r2
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d103      	bne.n	8009c6a <sen5xStore+0x7a>
 8009c62:	4b31      	ldr	r3, [pc, #196]	@ (8009d28 <sen5xStore+0x138>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d029      	beq.n	8009cbe <sen5xStore+0xce>
      if (sen5x_data.voc_index != 0x7fff) {
 8009c6a:	4b29      	ldr	r3, [pc, #164]	@ (8009d10 <sen5xStore+0x120>)
 8009c6c:	220c      	movs	r2, #12
 8009c6e:	5e9b      	ldrsh	r3, [r3, r2]
 8009c70:	4a2e      	ldr	r2, [pc, #184]	@ (8009d2c <sen5xStore+0x13c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d023      	beq.n	8009cbe <sen5xStore+0xce>
        if (s5xvoci != (sen5x_data.voc_index / 10)) {
 8009c76:	4b2e      	ldr	r3, [pc, #184]	@ (8009d30 <sen5xStore+0x140>)
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	001c      	movs	r4, r3
 8009c7c:	4b24      	ldr	r3, [pc, #144]	@ (8009d10 <sen5xStore+0x120>)
 8009c7e:	220c      	movs	r2, #12
 8009c80:	5e9b      	ldrsh	r3, [r3, r2]
 8009c82:	210a      	movs	r1, #10
 8009c84:	0018      	movs	r0, r3
 8009c86:	f7f6 fb17 	bl	80002b8 <__divsi3>
 8009c8a:	0003      	movs	r3, r0
 8009c8c:	b21b      	sxth	r3, r3
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d015      	beq.n	8009cbe <sen5xStore+0xce>
          s5xvoci = sen5x_data.voc_index / 10;
 8009c92:	4b1f      	ldr	r3, [pc, #124]	@ (8009d10 <sen5xStore+0x120>)
 8009c94:	220c      	movs	r2, #12
 8009c96:	5e9b      	ldrsh	r3, [r3, r2]
 8009c98:	210a      	movs	r1, #10
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	f7f6 fb0c 	bl	80002b8 <__divsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	b21b      	sxth	r3, r3
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	4b22      	ldr	r3, [pc, #136]	@ (8009d30 <sen5xStore+0x140>)
 8009ca8:	801a      	strh	r2, [r3, #0]
          SetVOCindicator(s5xvoci);
 8009caa:	4b21      	ldr	r3, [pc, #132]	@ (8009d30 <sen5xStore+0x140>)
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f003 fe32 	bl	800d918 <SetVOCindicator>
          setVOC(s5xvoci);
 8009cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8009d30 <sen5xStore+0x140>)
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	0018      	movs	r0, r3
 8009cba:	f7f9 fd87 	bl	80037cc <setVOC>
        }
      }
    }
    if (sen5x_data.nox_index != 0x7fff) {
 8009cbe:	4b14      	ldr	r3, [pc, #80]	@ (8009d10 <sen5xStore+0x120>)
 8009cc0:	220e      	movs	r2, #14
 8009cc2:	5e9b      	ldrsh	r3, [r3, r2]
 8009cc4:	4a19      	ldr	r2, [pc, #100]	@ (8009d2c <sen5xStore+0x13c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d01e      	beq.n	8009d08 <sen5xStore+0x118>
      if(s5xnoxi != sen5x_data.nox_index / 10) {
 8009cca:	4b1a      	ldr	r3, [pc, #104]	@ (8009d34 <sen5xStore+0x144>)
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	001c      	movs	r4, r3
 8009cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d10 <sen5xStore+0x120>)
 8009cd2:	220e      	movs	r2, #14
 8009cd4:	5e9b      	ldrsh	r3, [r3, r2]
 8009cd6:	210a      	movs	r1, #10
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f7f6 faed 	bl	80002b8 <__divsi3>
 8009cde:	0003      	movs	r3, r0
 8009ce0:	b21b      	sxth	r3, r3
 8009ce2:	429c      	cmp	r4, r3
 8009ce4:	d010      	beq.n	8009d08 <sen5xStore+0x118>
        s5xnoxi = sen5x_data.nox_index / 10;
 8009ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8009d10 <sen5xStore+0x120>)
 8009ce8:	220e      	movs	r2, #14
 8009cea:	5e9b      	ldrsh	r3, [r3, r2]
 8009cec:	210a      	movs	r1, #10
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f7f6 fae2 	bl	80002b8 <__divsi3>
 8009cf4:	0003      	movs	r3, r0
 8009cf6:	b21b      	sxth	r3, r3
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8009d34 <sen5xStore+0x144>)
 8009cfc:	801a      	strh	r2, [r3, #0]
        setNOx(s5xnoxi);
 8009cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009d34 <sen5xStore+0x144>)
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	0018      	movs	r0, r3
 8009d04:	f7f9 fdea 	bl	80038dc <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 8009d08:	46c0      	nop			@ (mov r8, r8)
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d0e:	46c0      	nop			@ (mov r8, r8)
 8009d10:	20000ca0 	.word	0x20000ca0
 8009d14:	0000ffff 	.word	0x0000ffff
 8009d18:	20000c92 	.word	0x20000c92
 8009d1c:	20000c94 	.word	0x20000c94
 8009d20:	20000c88 	.word	0x20000c88
 8009d24:	20000c86 	.word	0x20000c86
 8009d28:	20001c1d 	.word	0x20001c1d
 8009d2c:	00007fff 	.word	0x00007fff
 8009d30:	20000c96 	.word	0x20000c96
 8009d34:	20000c98 	.word	0x20000c98

08009d38 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af02      	add	r7, sp, #8
 8009d3e:	6039      	str	r1, [r7, #0]
 8009d40:	0011      	movs	r1, r2
 8009d42:	1dfb      	adds	r3, r7, #7
 8009d44:	1c02      	adds	r2, r0, #0
 8009d46:	701a      	strb	r2, [r3, #0]
 8009d48:	1d3b      	adds	r3, r7, #4
 8009d4a:	1c0a      	adds	r2, r1, #0
 8009d4c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009d4e:	1dfb      	adds	r3, r7, #7
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	18db      	adds	r3, r3, r3
 8009d56:	b299      	uxth	r1, r3
 8009d58:	1d3b      	adds	r3, r7, #4
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	4805      	ldr	r0, [pc, #20]	@ (8009d74 <sensirion_i2c_hal_read+0x3c>)
 8009d60:	2464      	movs	r4, #100	@ 0x64
 8009d62:	9400      	str	r4, [sp, #0]
 8009d64:	f006 fed8 	bl	8010b18 <HAL_I2C_Master_Receive>
 8009d68:	0003      	movs	r3, r0
 8009d6a:	b25b      	sxtb	r3, r3
}
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	b003      	add	sp, #12
 8009d72:	bd90      	pop	{r4, r7, pc}
 8009d74:	20000a68 	.word	0x20000a68

08009d78 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009d78:	b590      	push	{r4, r7, lr}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	6039      	str	r1, [r7, #0]
 8009d80:	0011      	movs	r1, r2
 8009d82:	1dfb      	adds	r3, r7, #7
 8009d84:	1c02      	adds	r2, r0, #0
 8009d86:	701a      	strb	r2, [r3, #0]
 8009d88:	1d3b      	adds	r3, r7, #4
 8009d8a:	1c0a      	adds	r2, r1, #0
 8009d8c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009d8e:	1dfb      	adds	r3, r7, #7
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	18db      	adds	r3, r3, r3
 8009d96:	b299      	uxth	r1, r3
 8009d98:	1d3b      	adds	r3, r7, #4
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	4805      	ldr	r0, [pc, #20]	@ (8009db4 <sensirion_i2c_hal_write+0x3c>)
 8009da0:	2464      	movs	r4, #100	@ 0x64
 8009da2:	9400      	str	r4, [sp, #0]
 8009da4:	f006 fdb0 	bl	8010908 <HAL_I2C_Master_Transmit>
 8009da8:	0003      	movs	r3, r0
 8009daa:	b25b      	sxtb	r3, r3
}
 8009dac:	0018      	movs	r0, r3
 8009dae:	46bd      	mov	sp, r7
 8009db0:	b003      	add	sp, #12
 8009db2:	bd90      	pop	{r4, r7, pc}
 8009db4:	20000a68 	.word	0x20000a68

08009db8 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	22fa      	movs	r2, #250	@ 0xfa
 8009dc4:	0091      	lsls	r1, r2, #2
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	f7f6 f9ec 	bl	80001a4 <__udivsi3>
 8009dcc:	0003      	movs	r3, r0
 8009dce:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	22fa      	movs	r2, #250	@ 0xfa
 8009dd4:	0091      	lsls	r1, r2, #2
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	f7f6 fa6a 	bl	80002b0 <__aeabi_uidivmod>
 8009ddc:	1e0b      	subs	r3, r1, #0
 8009dde:	d002      	beq.n	8009de6 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3301      	adds	r3, #1
 8009de4:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	0018      	movs	r0, r3
 8009dea:	f005 fa37 	bl	800f25c <HAL_Delay>
}
 8009dee:	46c0      	nop			@ (mov r8, r8)
 8009df0:	46bd      	mov	sp, r7
 8009df2:	b004      	add	sp, #16
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8009e02:	1d3b      	adds	r3, r7, #4
 8009e04:	0018      	movs	r0, r3
 8009e06:	f000 fd05 	bl	800a814 <sen5x_read_device_status>
 8009e0a:	1e03      	subs	r3, r0, #0
 8009e0c:	d007      	beq.n	8009e1e <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009e0e:	4a28      	ldr	r2, [pc, #160]	@ (8009eb0 <sen5x_check_for_errors+0xb8>)
 8009e10:	4b28      	ldr	r3, [pc, #160]	@ (8009eb4 <sen5x_check_for_errors+0xbc>)
 8009e12:	0019      	movs	r1, r3
 8009e14:	2001      	movs	r0, #1
 8009e16:	f004 fdd3 	bl	800e9c0 <CreateLine>
    return true;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e043      	b.n	8009ea6 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <sen5x_check_for_errors+0x30>
    return false;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e03e      	b.n	8009ea6 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	2380      	movs	r3, #128	@ 0x80
 8009e2c:	039b      	lsls	r3, r3, #14
 8009e2e:	4013      	ands	r3, r2
 8009e30:	d005      	beq.n	8009e3e <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 8009e32:	4a21      	ldr	r2, [pc, #132]	@ (8009eb8 <sen5x_check_for_errors+0xc0>)
 8009e34:	4b21      	ldr	r3, [pc, #132]	@ (8009ebc <sen5x_check_for_errors+0xc4>)
 8009e36:	0019      	movs	r1, r3
 8009e38:	2003      	movs	r0, #3
 8009e3a:	f004 fdc1 	bl	800e9c0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	2380      	movs	r3, #128	@ 0x80
 8009e42:	031b      	lsls	r3, r3, #12
 8009e44:	4013      	ands	r3, r2
 8009e46:	d005      	beq.n	8009e54 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009e48:	4a1d      	ldr	r2, [pc, #116]	@ (8009ec0 <sen5x_check_for_errors+0xc8>)
 8009e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8009ebc <sen5x_check_for_errors+0xc4>)
 8009e4c:	0019      	movs	r1, r3
 8009e4e:	2003      	movs	r0, #3
 8009e50:	f004 fdb6 	bl	800e9c0 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2280      	movs	r2, #128	@ 0x80
 8009e58:	4013      	ands	r3, r2
 8009e5a:	d005      	beq.n	8009e68 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009e5c:	4a19      	ldr	r2, [pc, #100]	@ (8009ec4 <sen5x_check_for_errors+0xcc>)
 8009e5e:	4b17      	ldr	r3, [pc, #92]	@ (8009ebc <sen5x_check_for_errors+0xc4>)
 8009e60:	0019      	movs	r1, r3
 8009e62:	2003      	movs	r0, #3
 8009e64:	f004 fdac 	bl	800e9c0 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2240      	movs	r2, #64	@ 0x40
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	d005      	beq.n	8009e7c <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009e70:	4a15      	ldr	r2, [pc, #84]	@ (8009ec8 <sen5x_check_for_errors+0xd0>)
 8009e72:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <sen5x_check_for_errors+0xc4>)
 8009e74:	0019      	movs	r1, r3
 8009e76:	2003      	movs	r0, #3
 8009e78:	f004 fda2 	bl	800e9c0 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	4013      	ands	r3, r2
 8009e82:	d005      	beq.n	8009e90 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009e84:	4a11      	ldr	r2, [pc, #68]	@ (8009ecc <sen5x_check_for_errors+0xd4>)
 8009e86:	4b0d      	ldr	r3, [pc, #52]	@ (8009ebc <sen5x_check_for_errors+0xc4>)
 8009e88:	0019      	movs	r1, r3
 8009e8a:	2003      	movs	r0, #3
 8009e8c:	f004 fd98 	bl	800e9c0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2210      	movs	r2, #16
 8009e94:	4013      	ands	r3, r2
 8009e96:	d005      	beq.n	8009ea4 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009e98:	4a0d      	ldr	r2, [pc, #52]	@ (8009ed0 <sen5x_check_for_errors+0xd8>)
 8009e9a:	4b08      	ldr	r3, [pc, #32]	@ (8009ebc <sen5x_check_for_errors+0xc4>)
 8009e9c:	0019      	movs	r1, r3
 8009e9e:	2003      	movs	r0, #3
 8009ea0:	f004 fd8e 	bl	800e9c0 <CreateLine>
  }
  return 1;
 8009ea4:	2301      	movs	r3, #1
}
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	b002      	add	sp, #8
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	46c0      	nop			@ (mov r8, r8)
 8009eb0:	080251c0 	.word	0x080251c0
 8009eb4:	08024d44 	.word	0x08024d44
 8009eb8:	080251ec 	.word	0x080251ec
 8009ebc:	08024d18 	.word	0x08024d18
 8009ec0:	0802520c 	.word	0x0802520c
 8009ec4:	08025228 	.word	0x08025228
 8009ec8:	0802524c 	.word	0x0802524c
 8009ecc:	0802526c 	.word	0x0802526c
 8009ed0:	08025280 	.word	0x08025280

08009ed4 <set_light_on_state>:

void set_light_on_state(void) {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009ed8:	4b15      	ldr	r3, [pc, #84]	@ (8009f30 <set_light_on_state+0x5c>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2201      	movs	r2, #1
 8009ede:	4053      	eors	r3, r2
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d008      	beq.n	8009ef8 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009ee6:	f7ff faff 	bl	80094e8 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009eea:	4a12      	ldr	r2, [pc, #72]	@ (8009f34 <set_light_on_state+0x60>)
 8009eec:	4b12      	ldr	r3, [pc, #72]	@ (8009f38 <set_light_on_state+0x64>)
 8009eee:	0019      	movs	r1, r3
 8009ef0:	2003      	movs	r0, #3
 8009ef2:	f004 fd65 	bl	800e9c0 <CreateLine>
 8009ef6:	e00a      	b.n	8009f0e <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009ef8:	f005 f9a6 	bl	800f248 <HAL_GetTick>
 8009efc:	0002      	movs	r2, r0
 8009efe:	4b0f      	ldr	r3, [pc, #60]	@ (8009f3c <set_light_on_state+0x68>)
 8009f00:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009f02:	4a0f      	ldr	r2, [pc, #60]	@ (8009f40 <set_light_on_state+0x6c>)
 8009f04:	4b0c      	ldr	r3, [pc, #48]	@ (8009f38 <set_light_on_state+0x64>)
 8009f06:	0019      	movs	r1, r3
 8009f08:	2003      	movs	r0, #3
 8009f0a:	f004 fd59 	bl	800e9c0 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009f0e:	f7ff fc7b 	bl	8009808 <sen5x_lightup_measurement>
 8009f12:	1e03      	subs	r3, r0, #0
 8009f14:	d005      	beq.n	8009f22 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009f16:	4a0b      	ldr	r2, [pc, #44]	@ (8009f44 <set_light_on_state+0x70>)
 8009f18:	4b0b      	ldr	r3, [pc, #44]	@ (8009f48 <set_light_on_state+0x74>)
 8009f1a:	0019      	movs	r1, r3
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	f004 fd4f 	bl	800e9c0 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009f22:	4b0a      	ldr	r3, [pc, #40]	@ (8009f4c <set_light_on_state+0x78>)
 8009f24:	2203      	movs	r2, #3
 8009f26:	701a      	strb	r2, [r3, #0]
}
 8009f28:	46c0      	nop			@ (mov r8, r8)
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	46c0      	nop			@ (mov r8, r8)
 8009f30:	20000c85 	.word	0x20000c85
 8009f34:	080252bc 	.word	0x080252bc
 8009f38:	08024d18 	.word	0x08024d18
 8009f3c:	20000c9c 	.word	0x20000c9c
 8009f40:	080252e8 	.word	0x080252e8
 8009f44:	08025300 	.word	0x08025300
 8009f48:	08024d44 	.word	0x08024d44
 8009f4c:	2000008d 	.word	0x2000008d

08009f50 <sen5x_statemachine>:

void sen5x_statemachine() {
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009f56:	1dfb      	adds	r3, r7, #7
 8009f58:	2200      	movs	r2, #0
 8009f5a:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009f5c:	4b88      	ldr	r3, [pc, #544]	@ (800a180 <sen5x_statemachine+0x230>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	0018      	movs	r0, r3
 8009f62:	f004 fcd7 	bl	800e914 <TimestampIsReached>
 8009f66:	1e03      	subs	r3, r0, #0
 8009f68:	d100      	bne.n	8009f6c <sen5x_statemachine+0x1c>
 8009f6a:	e105      	b.n	800a178 <sen5x_statemachine+0x228>
    switch (PMsamplesState) {
 8009f6c:	4b85      	ldr	r3, [pc, #532]	@ (800a184 <sen5x_statemachine+0x234>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b05      	cmp	r3, #5
 8009f72:	d900      	bls.n	8009f76 <sen5x_statemachine+0x26>
 8009f74:	e100      	b.n	800a178 <sen5x_statemachine+0x228>
 8009f76:	009a      	lsls	r2, r3, #2
 8009f78:	4b83      	ldr	r3, [pc, #524]	@ (800a188 <sen5x_statemachine+0x238>)
 8009f7a:	18d3      	adds	r3, r2, r3
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009f80:	4a82      	ldr	r2, [pc, #520]	@ (800a18c <sen5x_statemachine+0x23c>)
 8009f82:	4b83      	ldr	r3, [pc, #524]	@ (800a190 <sen5x_statemachine+0x240>)
 8009f84:	0019      	movs	r1, r3
 8009f86:	2001      	movs	r0, #1
 8009f88:	f004 fd1a 	bl	800e9c0 <CreateLine>
      SetPMSensorStatus(false);
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f7fe fc27 	bl	80087e0 <SetPMSensorStatus>
      DisablePMSensor();
 8009f92:	f7fe fbc7 	bl	8008724 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009f96:	f005 f957 	bl	800f248 <HAL_GetTick>
 8009f9a:	0003      	movs	r3, r0
 8009f9c:	4a7d      	ldr	r2, [pc, #500]	@ (800a194 <sen5x_statemachine+0x244>)
 8009f9e:	189a      	adds	r2, r3, r2
 8009fa0:	4b77      	ldr	r3, [pc, #476]	@ (800a180 <sen5x_statemachine+0x230>)
 8009fa2:	601a      	str	r2, [r3, #0]
      break;
 8009fa4:	e0e8      	b.n	800a178 <sen5x_statemachine+0x228>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009fa6:	f005 f94f 	bl	800f248 <HAL_GetTick>
 8009faa:	0003      	movs	r3, r0
 8009fac:	4a7a      	ldr	r2, [pc, #488]	@ (800a198 <sen5x_statemachine+0x248>)
 8009fae:	189a      	adds	r2, r3, r2
 8009fb0:	4b73      	ldr	r3, [pc, #460]	@ (800a180 <sen5x_statemachine+0x230>)
 8009fb2:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009fb4:	f7ff ff8e 	bl	8009ed4 <set_light_on_state>
      break;
 8009fb8:	e0de      	b.n	800a178 <sen5x_statemachine+0x228>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 8009fba:	4b72      	ldr	r3, [pc, #456]	@ (800a184 <sen5x_statemachine+0x234>)
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009fc0:	4b76      	ldr	r3, [pc, #472]	@ (800a19c <sen5x_statemachine+0x24c>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	d905      	bls.n	8009fd4 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 8009fc8:	4b6e      	ldr	r3, [pc, #440]	@ (800a184 <sen5x_statemachine+0x234>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009fce:	f7ff fabb 	bl	8009548 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 8009fd2:	e0ce      	b.n	800a172 <sen5x_statemachine+0x222>
        if (sen5x_check_for_errors()) {
 8009fd4:	f7ff ff10 	bl	8009df8 <sen5x_check_for_errors>
 8009fd8:	1e03      	subs	r3, r0, #0
 8009fda:	d021      	beq.n	800a020 <sen5x_statemachine+0xd0>
          if (sen5x_device_reset()) {
 8009fdc:	f000 fc6c 	bl	800a8b8 <sen5x_device_reset>
 8009fe0:	1e03      	subs	r3, r0, #0
 8009fe2:	d00f      	beq.n	800a004 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 8009fe4:	4a6e      	ldr	r2, [pc, #440]	@ (800a1a0 <sen5x_statemachine+0x250>)
 8009fe6:	4b6a      	ldr	r3, [pc, #424]	@ (800a190 <sen5x_statemachine+0x240>)
 8009fe8:	0019      	movs	r1, r3
 8009fea:	2001      	movs	r0, #1
 8009fec:	f004 fce8 	bl	800e9c0 <CreateLine>
            sen5xErrors++;
 8009ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800a19c <sen5x_statemachine+0x24c>)
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	4b68      	ldr	r3, [pc, #416]	@ (800a19c <sen5x_statemachine+0x24c>)
 8009ffa:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 8009ffc:	4b61      	ldr	r3, [pc, #388]	@ (800a184 <sen5x_statemachine+0x234>)
 8009ffe:	2203      	movs	r2, #3
 800a000:	701a      	strb	r2, [r3, #0]
 800a002:	e005      	b.n	800a010 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800a004:	4a67      	ldr	r2, [pc, #412]	@ (800a1a4 <sen5x_statemachine+0x254>)
 800a006:	4b68      	ldr	r3, [pc, #416]	@ (800a1a8 <sen5x_statemachine+0x258>)
 800a008:	0019      	movs	r1, r3
 800a00a:	2002      	movs	r0, #2
 800a00c:	f004 fcd8 	bl	800e9c0 <CreateLine>
          sen5xReadTimer = HAL_GetTick() + 200;
 800a010:	f005 f91a 	bl	800f248 <HAL_GetTick>
 800a014:	0003      	movs	r3, r0
 800a016:	33c8      	adds	r3, #200	@ 0xc8
 800a018:	001a      	movs	r2, r3
 800a01a:	4b59      	ldr	r3, [pc, #356]	@ (800a180 <sen5x_statemachine+0x230>)
 800a01c:	601a      	str	r2, [r3, #0]
      break;
 800a01e:	e0a8      	b.n	800a172 <sen5x_statemachine+0x222>
          if (sen5xErrors != 0) {
 800a020:	4b5e      	ldr	r3, [pc, #376]	@ (800a19c <sen5x_statemachine+0x24c>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d100      	bne.n	800a02a <sen5x_statemachine+0xda>
 800a028:	e0a3      	b.n	800a172 <sen5x_statemachine+0x222>
            sen5xErrors = 0;
 800a02a:	4b5c      	ldr	r3, [pc, #368]	@ (800a19c <sen5x_statemachine+0x24c>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800a030:	4a5e      	ldr	r2, [pc, #376]	@ (800a1ac <sen5x_statemachine+0x25c>)
 800a032:	4b5f      	ldr	r3, [pc, #380]	@ (800a1b0 <sen5x_statemachine+0x260>)
 800a034:	0019      	movs	r1, r3
 800a036:	2003      	movs	r0, #3
 800a038:	f004 fcc2 	bl	800e9c0 <CreateLine>
      break;
 800a03c:	e099      	b.n	800a172 <sen5x_statemachine+0x222>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800a03e:	1dfb      	adds	r3, r7, #7
 800a040:	0018      	movs	r0, r3
 800a042:	f000 f955 	bl	800a2f0 <sen5x_read_data_ready>
      if (data_ready) {
 800a046:	1dfb      	adds	r3, r7, #7
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d031      	beq.n	800a0b2 <sen5x_statemachine+0x162>
        SetPMIndicator();
 800a04e:	f003 fbd3 	bl	800d7f8 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800a052:	4b58      	ldr	r3, [pc, #352]	@ (800a1b4 <sen5x_statemachine+0x264>)
 800a054:	0018      	movs	r0, r3
 800a056:	f7ff fc7d 	bl	8009954 <sen5x_read_measurement>
 800a05a:	1e03      	subs	r3, r0, #0
 800a05c:	d00b      	beq.n	800a076 <sen5x_statemachine+0x126>
          Error("Error executing sen5x_read_measured_values()");
 800a05e:	4a56      	ldr	r2, [pc, #344]	@ (800a1b8 <sen5x_statemachine+0x268>)
 800a060:	4b4b      	ldr	r3, [pc, #300]	@ (800a190 <sen5x_statemachine+0x240>)
 800a062:	0019      	movs	r1, r3
 800a064:	2001      	movs	r0, #1
 800a066:	f004 fcab 	bl	800e9c0 <CreateLine>
          sen5xErrors++;
 800a06a:	4b4c      	ldr	r3, [pc, #304]	@ (800a19c <sen5x_statemachine+0x24c>)
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	3301      	adds	r3, #1
 800a070:	b2da      	uxtb	r2, r3
 800a072:	4b4a      	ldr	r3, [pc, #296]	@ (800a19c <sen5x_statemachine+0x24c>)
 800a074:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800a076:	4b51      	ldr	r3, [pc, #324]	@ (800a1bc <sen5x_statemachine+0x26c>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	3301      	adds	r3, #1
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	4b4f      	ldr	r3, [pc, #316]	@ (800a1bc <sen5x_statemachine+0x26c>)
 800a080:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800a082:	4b4e      	ldr	r3, [pc, #312]	@ (800a1bc <sen5x_statemachine+0x26c>)
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b1f      	cmp	r3, #31
 800a088:	d102      	bne.n	800a090 <sen5x_statemachine+0x140>
          sen5xSamples = 0;  // enable display on serial
 800a08a:	4b4c      	ldr	r3, [pc, #304]	@ (800a1bc <sen5x_statemachine+0x26c>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800a090:	4b4a      	ldr	r3, [pc, #296]	@ (800a1bc <sen5x_statemachine+0x26c>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d901      	bls.n	800a09c <sen5x_statemachine+0x14c>
          sen5xStore();
 800a098:	f7ff fdaa 	bl	8009bf0 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800a09c:	4b47      	ldr	r3, [pc, #284]	@ (800a1bc <sen5x_statemachine+0x26c>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d106      	bne.n	800a0b2 <sen5x_statemachine+0x162>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800a0a4:	f7ff fcb2 	bl	8009a0c <sen5x_printvalues>
#else
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
          HAL_Delay(1000);
 800a0a8:	23fa      	movs	r3, #250	@ 0xfa
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	f005 f8d5 	bl	800f25c <HAL_Delay>
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800a0b2:	4b43      	ldr	r3, [pc, #268]	@ (800a1c0 <sen5x_statemachine+0x270>)
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d103      	bne.n	800a0c2 <sen5x_statemachine+0x172>
 800a0ba:	4b40      	ldr	r3, [pc, #256]	@ (800a1bc <sen5x_statemachine+0x26c>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d959      	bls.n	800a176 <sen5x_statemachine+0x226>
        PMsamplesState = CLEAN_FAN;
 800a0c2:	4b30      	ldr	r3, [pc, #192]	@ (800a184 <sen5x_statemachine+0x234>)
 800a0c4:	2204      	movs	r2, #4
 800a0c6:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a0c8:	e055      	b.n	800a176 <sen5x_statemachine+0x226>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 800a0ca:	f7fc fdbf 	bl	8006c4c <RTC_GetWeekday>
 800a0ce:	0003      	movs	r3, r0
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d118      	bne.n	800a106 <sen5x_statemachine+0x1b6>
 800a0d4:	4b3b      	ldr	r3, [pc, #236]	@ (800a1c4 <sen5x_statemachine+0x274>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	4053      	eors	r3, r2
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d011      	beq.n	800a106 <sen5x_statemachine+0x1b6>
        sen5x_start_fan_cleaning();
 800a0e2:	f000 f9eb 	bl	800a4bc <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800a0e6:	4a38      	ldr	r2, [pc, #224]	@ (800a1c8 <sen5x_statemachine+0x278>)
 800a0e8:	4b2f      	ldr	r3, [pc, #188]	@ (800a1a8 <sen5x_statemachine+0x258>)
 800a0ea:	0019      	movs	r1, r3
 800a0ec:	2002      	movs	r0, #2
 800a0ee:	f004 fc67 	bl	800e9c0 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 800a0f2:	f005 f8a9 	bl	800f248 <HAL_GetTick>
 800a0f6:	0003      	movs	r3, r0
 800a0f8:	4a34      	ldr	r2, [pc, #208]	@ (800a1cc <sen5x_statemachine+0x27c>)
 800a0fa:	189a      	adds	r2, r3, r2
 800a0fc:	4b20      	ldr	r3, [pc, #128]	@ (800a180 <sen5x_statemachine+0x230>)
 800a0fe:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800a100:	4b30      	ldr	r3, [pc, #192]	@ (800a1c4 <sen5x_statemachine+0x274>)
 800a102:	2201      	movs	r2, #1
 800a104:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 800a106:	4b1f      	ldr	r3, [pc, #124]	@ (800a184 <sen5x_statemachine+0x234>)
 800a108:	2205      	movs	r2, #5
 800a10a:	701a      	strb	r2, [r3, #0]
      break;
 800a10c:	e034      	b.n	800a178 <sen5x_statemachine+0x228>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800a10e:	4b2c      	ldr	r3, [pc, #176]	@ (800a1c0 <sen5x_statemachine+0x270>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2201      	movs	r2, #1
 800a114:	4053      	eors	r3, r2
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01c      	beq.n	800a156 <sen5x_statemachine+0x206>
 800a11c:	4b2c      	ldr	r3, [pc, #176]	@ (800a1d0 <sen5x_statemachine+0x280>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2201      	movs	r2, #1
 800a122:	4053      	eors	r3, r2
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d015      	beq.n	800a156 <sen5x_statemachine+0x206>
        if (sen5x_extinguish_measurement()) {
 800a12a:	f7ff fbb9 	bl	80098a0 <sen5x_extinguish_measurement>
 800a12e:	1e03      	subs	r3, r0, #0
 800a130:	d005      	beq.n	800a13e <sen5x_statemachine+0x1ee>
          Error("Error executing sen5x_extinguish_measurement()");
 800a132:	4a28      	ldr	r2, [pc, #160]	@ (800a1d4 <sen5x_statemachine+0x284>)
 800a134:	4b16      	ldr	r3, [pc, #88]	@ (800a190 <sen5x_statemachine+0x240>)
 800a136:	0019      	movs	r1, r3
 800a138:	2001      	movs	r0, #1
 800a13a:	f004 fc41 	bl	800e9c0 <CreateLine>
        }
        sen5xSamples = 0;
 800a13e:	4b1f      	ldr	r3, [pc, #124]	@ (800a1bc <sen5x_statemachine+0x26c>)
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800a144:	f7ff fa00 	bl	8009548 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800a148:	2000      	movs	r0, #0
 800a14a:	f7fe fb49 	bl	80087e0 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800a14e:	4b0d      	ldr	r3, [pc, #52]	@ (800a184 <sen5x_statemachine+0x234>)
 800a150:	2201      	movs	r2, #1
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	e002      	b.n	800a15c <sen5x_statemachine+0x20c>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800a156:	4b0b      	ldr	r3, [pc, #44]	@ (800a184 <sen5x_statemachine+0x234>)
 800a158:	2203      	movs	r2, #3
 800a15a:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800a15c:	f003 fb72 	bl	800d844 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 800a160:	f005 f872 	bl	800f248 <HAL_GetTick>
 800a164:	0003      	movs	r3, r0
 800a166:	22fa      	movs	r2, #250	@ 0xfa
 800a168:	0092      	lsls	r2, r2, #2
 800a16a:	189a      	adds	r2, r3, r2
 800a16c:	4b04      	ldr	r3, [pc, #16]	@ (800a180 <sen5x_statemachine+0x230>)
 800a16e:	601a      	str	r2, [r3, #0]
    }
  }
}
 800a170:	e002      	b.n	800a178 <sen5x_statemachine+0x228>
      break;
 800a172:	46c0      	nop			@ (mov r8, r8)
 800a174:	e000      	b.n	800a178 <sen5x_statemachine+0x228>
      break;
 800a176:	46c0      	nop			@ (mov r8, r8)
}
 800a178:	46c0      	nop			@ (mov r8, r8)
 800a17a:	46bd      	mov	sp, r7
 800a17c:	b002      	add	sp, #8
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20000c9c 	.word	0x20000c9c
 800a184:	2000008d 	.word	0x2000008d
 800a188:	08025d0c 	.word	0x08025d0c
 800a18c:	0802532c 	.word	0x0802532c
 800a190:	08024d44 	.word	0x08024d44
 800a194:	002fefd8 	.word	0x002fefd8
 800a198:	00005910 	.word	0x00005910
 800a19c:	20000c91 	.word	0x20000c91
 800a1a0:	0802535c 	.word	0x0802535c
 800a1a4:	08025374 	.word	0x08025374
 800a1a8:	08024cd8 	.word	0x08024cd8
 800a1ac:	0802538c 	.word	0x0802538c
 800a1b0:	08024d18 	.word	0x08024d18
 800a1b4:	20000ca0 	.word	0x20000ca0
 800a1b8:	080253a0 	.word	0x080253a0
 800a1bc:	20000c90 	.word	0x20000c90
 800a1c0:	20001c1d 	.word	0x20001c1d
 800a1c4:	20000c84 	.word	0x20000c84
 800a1c8:	080253d0 	.word	0x080253d0
 800a1cc:	00002710 	.word	0x00002710
 800a1d0:	20001c1e 	.word	0x20001c1e
 800a1d4:	080253e8 	.word	0x080253e8

0800a1d8 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800a1d8:	b590      	push	{r4, r7, lr}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a1de:	1dbb      	adds	r3, r7, #6
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800a1e4:	1dbc      	adds	r4, r7, #6
 800a1e6:	1dbb      	adds	r3, r7, #6
 800a1e8:	8819      	ldrh	r1, [r3, #0]
 800a1ea:	003b      	movs	r3, r7
 800a1ec:	2221      	movs	r2, #33	@ 0x21
 800a1ee:	0018      	movs	r0, r3
 800a1f0:	f001 fb56 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a1f4:	0003      	movs	r3, r0
 800a1f6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a1f8:	1d3c      	adds	r4, r7, #4
 800a1fa:	1dbb      	adds	r3, r7, #6
 800a1fc:	881a      	ldrh	r2, [r3, #0]
 800a1fe:	003b      	movs	r3, r7
 800a200:	0019      	movs	r1, r3
 800a202:	2069      	movs	r0, #105	@ 0x69
 800a204:	f001 fbd0 	bl	800b9a8 <sensirion_i2c_write_data>
 800a208:	0003      	movs	r3, r0
 800a20a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a20c:	1d3b      	adds	r3, r7, #4
 800a20e:	2200      	movs	r2, #0
 800a210:	5e9b      	ldrsh	r3, [r3, r2]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <sen5x_start_measurement+0x46>
        return error;
 800a216:	1d3b      	adds	r3, r7, #4
 800a218:	2200      	movs	r2, #0
 800a21a:	5e9b      	ldrsh	r3, [r3, r2]
 800a21c:	e004      	b.n	800a228 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a21e:	4b04      	ldr	r3, [pc, #16]	@ (800a230 <sen5x_start_measurement+0x58>)
 800a220:	0018      	movs	r0, r3
 800a222:	f7ff fdc9 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a226:	2300      	movs	r3, #0
}
 800a228:	0018      	movs	r0, r3
 800a22a:	46bd      	mov	sp, r7
 800a22c:	b003      	add	sp, #12
 800a22e:	bd90      	pop	{r4, r7, pc}
 800a230:	0000c350 	.word	0x0000c350

0800a234 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a23a:	1dbb      	adds	r3, r7, #6
 800a23c:	2200      	movs	r2, #0
 800a23e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800a240:	1dbc      	adds	r4, r7, #6
 800a242:	1dbb      	adds	r3, r7, #6
 800a244:	8819      	ldrh	r1, [r3, #0]
 800a246:	003b      	movs	r3, r7
 800a248:	2237      	movs	r2, #55	@ 0x37
 800a24a:	0018      	movs	r0, r3
 800a24c:	f001 fb28 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a250:	0003      	movs	r3, r0
 800a252:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a254:	1d3c      	adds	r4, r7, #4
 800a256:	1dbb      	adds	r3, r7, #6
 800a258:	881a      	ldrh	r2, [r3, #0]
 800a25a:	003b      	movs	r3, r7
 800a25c:	0019      	movs	r1, r3
 800a25e:	2069      	movs	r0, #105	@ 0x69
 800a260:	f001 fba2 	bl	800b9a8 <sensirion_i2c_write_data>
 800a264:	0003      	movs	r3, r0
 800a266:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a268:	1d3b      	adds	r3, r7, #4
 800a26a:	2200      	movs	r2, #0
 800a26c:	5e9b      	ldrsh	r3, [r3, r2]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <sen5x_start_measurement_without_pm+0x46>
        return error;
 800a272:	1d3b      	adds	r3, r7, #4
 800a274:	2200      	movs	r2, #0
 800a276:	5e9b      	ldrsh	r3, [r3, r2]
 800a278:	e004      	b.n	800a284 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a27a:	4b04      	ldr	r3, [pc, #16]	@ (800a28c <sen5x_start_measurement_without_pm+0x58>)
 800a27c:	0018      	movs	r0, r3
 800a27e:	f7ff fd9b 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a282:	2300      	movs	r3, #0
}
 800a284:	0018      	movs	r0, r3
 800a286:	46bd      	mov	sp, r7
 800a288:	b003      	add	sp, #12
 800a28a:	bd90      	pop	{r4, r7, pc}
 800a28c:	0000c350 	.word	0x0000c350

0800a290 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800a290:	b590      	push	{r4, r7, lr}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a296:	1dbb      	adds	r3, r7, #6
 800a298:	2200      	movs	r2, #0
 800a29a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800a29c:	1dbc      	adds	r4, r7, #6
 800a29e:	2382      	movs	r3, #130	@ 0x82
 800a2a0:	005a      	lsls	r2, r3, #1
 800a2a2:	1dbb      	adds	r3, r7, #6
 800a2a4:	8819      	ldrh	r1, [r3, #0]
 800a2a6:	003b      	movs	r3, r7
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f001 faf9 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a2ae:	0003      	movs	r3, r0
 800a2b0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a2b2:	1d3c      	adds	r4, r7, #4
 800a2b4:	1dbb      	adds	r3, r7, #6
 800a2b6:	881a      	ldrh	r2, [r3, #0]
 800a2b8:	003b      	movs	r3, r7
 800a2ba:	0019      	movs	r1, r3
 800a2bc:	2069      	movs	r0, #105	@ 0x69
 800a2be:	f001 fb73 	bl	800b9a8 <sensirion_i2c_write_data>
 800a2c2:	0003      	movs	r3, r0
 800a2c4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2c6:	1d3b      	adds	r3, r7, #4
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	5e9b      	ldrsh	r3, [r3, r2]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <sen5x_stop_measurement+0x48>
        return error;
 800a2d0:	1d3b      	adds	r3, r7, #4
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	5e9b      	ldrsh	r3, [r3, r2]
 800a2d6:	e004      	b.n	800a2e2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a2d8:	4b04      	ldr	r3, [pc, #16]	@ (800a2ec <sen5x_stop_measurement+0x5c>)
 800a2da:	0018      	movs	r0, r3
 800a2dc:	f7ff fd6c 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b003      	add	sp, #12
 800a2e8:	bd90      	pop	{r4, r7, pc}
 800a2ea:	46c0      	nop			@ (mov r8, r8)
 800a2ec:	00030d40 	.word	0x00030d40

0800a2f0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800a2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800a2f8:	250e      	movs	r5, #14
 800a2fa:	197b      	adds	r3, r7, r5
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800a300:	197c      	adds	r4, r7, r5
 800a302:	4a22      	ldr	r2, [pc, #136]	@ (800a38c <sen5x_read_data_ready+0x9c>)
 800a304:	197b      	adds	r3, r7, r5
 800a306:	8819      	ldrh	r1, [r3, #0]
 800a308:	2308      	movs	r3, #8
 800a30a:	18fb      	adds	r3, r7, r3
 800a30c:	0018      	movs	r0, r3
 800a30e:	f001 fac7 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a312:	0003      	movs	r3, r0
 800a314:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a316:	260c      	movs	r6, #12
 800a318:	19bc      	adds	r4, r7, r6
 800a31a:	197b      	adds	r3, r7, r5
 800a31c:	881a      	ldrh	r2, [r3, #0]
 800a31e:	2308      	movs	r3, #8
 800a320:	18fb      	adds	r3, r7, r3
 800a322:	0019      	movs	r1, r3
 800a324:	2069      	movs	r0, #105	@ 0x69
 800a326:	f001 fb3f 	bl	800b9a8 <sensirion_i2c_write_data>
 800a32a:	0003      	movs	r3, r0
 800a32c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a32e:	19bb      	adds	r3, r7, r6
 800a330:	2200      	movs	r2, #0
 800a332:	5e9b      	ldrsh	r3, [r3, r2]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d003      	beq.n	800a340 <sen5x_read_data_ready+0x50>
        return error;
 800a338:	19bb      	adds	r3, r7, r6
 800a33a:	2200      	movs	r2, #0
 800a33c:	5e9b      	ldrsh	r3, [r3, r2]
 800a33e:	e020      	b.n	800a382 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a340:	4b13      	ldr	r3, [pc, #76]	@ (800a390 <sen5x_read_data_ready+0xa0>)
 800a342:	0018      	movs	r0, r3
 800a344:	f7ff fd38 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800a348:	250c      	movs	r5, #12
 800a34a:	197c      	adds	r4, r7, r5
 800a34c:	2308      	movs	r3, #8
 800a34e:	18fb      	adds	r3, r7, r3
 800a350:	2202      	movs	r2, #2
 800a352:	0019      	movs	r1, r3
 800a354:	2069      	movs	r0, #105	@ 0x69
 800a356:	f001 fb3f 	bl	800b9d8 <sensirion_i2c_read_data_inplace>
 800a35a:	0003      	movs	r3, r0
 800a35c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a35e:	197b      	adds	r3, r7, r5
 800a360:	2200      	movs	r2, #0
 800a362:	5e9b      	ldrsh	r3, [r3, r2]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <sen5x_read_data_ready+0x80>
        return error;
 800a368:	197b      	adds	r3, r7, r5
 800a36a:	2200      	movs	r2, #0
 800a36c:	5e9b      	ldrsh	r3, [r3, r2]
 800a36e:	e008      	b.n	800a382 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800a370:	2308      	movs	r3, #8
 800a372:	18fb      	adds	r3, r7, r3
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	1e5a      	subs	r2, r3, #1
 800a378:	4193      	sbcs	r3, r2
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a380:	2300      	movs	r3, #0
}
 800a382:	0018      	movs	r0, r3
 800a384:	46bd      	mov	sp, r7
 800a386:	b005      	add	sp, #20
 800a388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a38a:	46c0      	nop			@ (mov r8, r8)
 800a38c:	00000202 	.word	0x00000202
 800a390:	00004e20 	.word	0x00004e20

0800a394 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800a394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a396:	b08d      	sub	sp, #52	@ 0x34
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800a3a2:	252e      	movs	r5, #46	@ 0x2e
 800a3a4:	197b      	adds	r3, r7, r5
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800a3aa:	197c      	adds	r4, r7, r5
 800a3ac:	23f1      	movs	r3, #241	@ 0xf1
 800a3ae:	009a      	lsls	r2, r3, #2
 800a3b0:	197b      	adds	r3, r7, r5
 800a3b2:	8819      	ldrh	r1, [r3, #0]
 800a3b4:	2314      	movs	r3, #20
 800a3b6:	18fb      	adds	r3, r7, r3
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	f001 fa71 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a3be:	0003      	movs	r3, r0
 800a3c0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a3c2:	262c      	movs	r6, #44	@ 0x2c
 800a3c4:	19bc      	adds	r4, r7, r6
 800a3c6:	197b      	adds	r3, r7, r5
 800a3c8:	881a      	ldrh	r2, [r3, #0]
 800a3ca:	2314      	movs	r3, #20
 800a3cc:	18fb      	adds	r3, r7, r3
 800a3ce:	0019      	movs	r1, r3
 800a3d0:	2069      	movs	r0, #105	@ 0x69
 800a3d2:	f001 fae9 	bl	800b9a8 <sensirion_i2c_write_data>
 800a3d6:	0003      	movs	r3, r0
 800a3d8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3da:	19bb      	adds	r3, r7, r6
 800a3dc:	2200      	movs	r2, #0
 800a3de:	5e9b      	ldrsh	r3, [r3, r2]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d003      	beq.n	800a3ec <sen5x_read_measured_values+0x58>
        return error;
 800a3e4:	19bb      	adds	r3, r7, r6
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	5e9b      	ldrsh	r3, [r3, r2]
 800a3ea:	e060      	b.n	800a4ae <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a3ec:	4b32      	ldr	r3, [pc, #200]	@ (800a4b8 <sen5x_read_measured_values+0x124>)
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	f7ff fce2 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800a3f4:	252c      	movs	r5, #44	@ 0x2c
 800a3f6:	197c      	adds	r4, r7, r5
 800a3f8:	2314      	movs	r3, #20
 800a3fa:	18fb      	adds	r3, r7, r3
 800a3fc:	2210      	movs	r2, #16
 800a3fe:	0019      	movs	r1, r3
 800a400:	2069      	movs	r0, #105	@ 0x69
 800a402:	f001 fae9 	bl	800b9d8 <sensirion_i2c_read_data_inplace>
 800a406:	0003      	movs	r3, r0
 800a408:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a40a:	197b      	adds	r3, r7, r5
 800a40c:	2200      	movs	r2, #0
 800a40e:	5e9b      	ldrsh	r3, [r3, r2]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <sen5x_read_measured_values+0x88>
        return error;
 800a414:	197b      	adds	r3, r7, r5
 800a416:	2200      	movs	r2, #0
 800a418:	5e9b      	ldrsh	r3, [r3, r2]
 800a41a:	e048      	b.n	800a4ae <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800a41c:	2414      	movs	r4, #20
 800a41e:	193b      	adds	r3, r7, r4
 800a420:	0018      	movs	r0, r3
 800a422:	f000 fa79 	bl	800a918 <sensirion_common_bytes_to_uint16_t>
 800a426:	0003      	movs	r3, r0
 800a428:	001a      	movs	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800a42e:	193b      	adds	r3, r7, r4
 800a430:	3302      	adds	r3, #2
 800a432:	0018      	movs	r0, r3
 800a434:	f000 fa70 	bl	800a918 <sensirion_common_bytes_to_uint16_t>
 800a438:	0003      	movs	r3, r0
 800a43a:	001a      	movs	r2, r3
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800a440:	193b      	adds	r3, r7, r4
 800a442:	3304      	adds	r3, #4
 800a444:	0018      	movs	r0, r3
 800a446:	f000 fa67 	bl	800a918 <sensirion_common_bytes_to_uint16_t>
 800a44a:	0003      	movs	r3, r0
 800a44c:	001a      	movs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800a452:	193b      	adds	r3, r7, r4
 800a454:	3306      	adds	r3, #6
 800a456:	0018      	movs	r0, r3
 800a458:	f000 fa5e 	bl	800a918 <sensirion_common_bytes_to_uint16_t>
 800a45c:	0003      	movs	r3, r0
 800a45e:	001a      	movs	r2, r3
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800a464:	193b      	adds	r3, r7, r4
 800a466:	3308      	adds	r3, #8
 800a468:	0018      	movs	r0, r3
 800a46a:	f000 fa81 	bl	800a970 <sensirion_common_bytes_to_int16_t>
 800a46e:	0003      	movs	r3, r0
 800a470:	001a      	movs	r2, r3
 800a472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a474:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800a476:	193b      	adds	r3, r7, r4
 800a478:	330a      	adds	r3, #10
 800a47a:	0018      	movs	r0, r3
 800a47c:	f000 fa78 	bl	800a970 <sensirion_common_bytes_to_int16_t>
 800a480:	0003      	movs	r3, r0
 800a482:	001a      	movs	r2, r3
 800a484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a486:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800a488:	193b      	adds	r3, r7, r4
 800a48a:	330c      	adds	r3, #12
 800a48c:	0018      	movs	r0, r3
 800a48e:	f000 fa6f 	bl	800a970 <sensirion_common_bytes_to_int16_t>
 800a492:	0003      	movs	r3, r0
 800a494:	001a      	movs	r2, r3
 800a496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a498:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800a49a:	193b      	adds	r3, r7, r4
 800a49c:	330e      	adds	r3, #14
 800a49e:	0018      	movs	r0, r3
 800a4a0:	f000 fa66 	bl	800a970 <sensirion_common_bytes_to_int16_t>
 800a4a4:	0003      	movs	r3, r0
 800a4a6:	001a      	movs	r2, r3
 800a4a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4aa:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	b00d      	add	sp, #52	@ 0x34
 800a4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b6:	46c0      	nop			@ (mov r8, r8)
 800a4b8:	00004e20 	.word	0x00004e20

0800a4bc <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a4bc:	b590      	push	{r4, r7, lr}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a4c2:	1dbb      	adds	r3, r7, #6
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a4c8:	1dbc      	adds	r4, r7, #6
 800a4ca:	4a12      	ldr	r2, [pc, #72]	@ (800a514 <sen5x_start_fan_cleaning+0x58>)
 800a4cc:	1dbb      	adds	r3, r7, #6
 800a4ce:	8819      	ldrh	r1, [r3, #0]
 800a4d0:	003b      	movs	r3, r7
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f001 f9e4 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a4d8:	0003      	movs	r3, r0
 800a4da:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a4dc:	1d3c      	adds	r4, r7, #4
 800a4de:	1dbb      	adds	r3, r7, #6
 800a4e0:	881a      	ldrh	r2, [r3, #0]
 800a4e2:	003b      	movs	r3, r7
 800a4e4:	0019      	movs	r1, r3
 800a4e6:	2069      	movs	r0, #105	@ 0x69
 800a4e8:	f001 fa5e 	bl	800b9a8 <sensirion_i2c_write_data>
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a4f0:	1d3b      	adds	r3, r7, #4
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	5e9b      	ldrsh	r3, [r3, r2]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <sen5x_start_fan_cleaning+0x46>
        return error;
 800a4fa:	1d3b      	adds	r3, r7, #4
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	5e9b      	ldrsh	r3, [r3, r2]
 800a500:	e004      	b.n	800a50c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a502:	4b05      	ldr	r3, [pc, #20]	@ (800a518 <sen5x_start_fan_cleaning+0x5c>)
 800a504:	0018      	movs	r0, r3
 800a506:	f7ff fc57 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	0018      	movs	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	b003      	add	sp, #12
 800a512:	bd90      	pop	{r4, r7, pc}
 800a514:	00005607 	.word	0x00005607
 800a518:	00004e20 	.word	0x00004e20

0800a51c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	0004      	movs	r4, r0
 800a524:	0008      	movs	r0, r1
 800a526:	0011      	movs	r1, r2
 800a528:	1dbb      	adds	r3, r7, #6
 800a52a:	1c22      	adds	r2, r4, #0
 800a52c:	801a      	strh	r2, [r3, #0]
 800a52e:	1d3b      	adds	r3, r7, #4
 800a530:	1c02      	adds	r2, r0, #0
 800a532:	801a      	strh	r2, [r3, #0]
 800a534:	1cbb      	adds	r3, r7, #2
 800a536:	1c0a      	adds	r2, r1, #0
 800a538:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a53a:	2516      	movs	r5, #22
 800a53c:	197b      	adds	r3, r7, r5
 800a53e:	2200      	movs	r2, #0
 800a540:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a542:	197c      	adds	r4, r7, r5
 800a544:	4a25      	ldr	r2, [pc, #148]	@ (800a5dc <sen5x_set_temperature_offset_parameters+0xc0>)
 800a546:	197b      	adds	r3, r7, r5
 800a548:	8819      	ldrh	r1, [r3, #0]
 800a54a:	2608      	movs	r6, #8
 800a54c:	19bb      	adds	r3, r7, r6
 800a54e:	0018      	movs	r0, r3
 800a550:	f001 f9a6 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a554:	0003      	movs	r3, r0
 800a556:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a558:	197c      	adds	r4, r7, r5
 800a55a:	1dbb      	adds	r3, r7, #6
 800a55c:	2200      	movs	r2, #0
 800a55e:	5e9a      	ldrsh	r2, [r3, r2]
 800a560:	197b      	adds	r3, r7, r5
 800a562:	8819      	ldrh	r1, [r3, #0]
 800a564:	19bb      	adds	r3, r7, r6
 800a566:	0018      	movs	r0, r3
 800a568:	f001 fa05 	bl	800b976 <sensirion_i2c_add_int16_t_to_buffer>
 800a56c:	0003      	movs	r3, r0
 800a56e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a570:	197c      	adds	r4, r7, r5
 800a572:	1d3b      	adds	r3, r7, #4
 800a574:	2200      	movs	r2, #0
 800a576:	5e9a      	ldrsh	r2, [r3, r2]
 800a578:	197b      	adds	r3, r7, r5
 800a57a:	8819      	ldrh	r1, [r3, #0]
 800a57c:	19bb      	adds	r3, r7, r6
 800a57e:	0018      	movs	r0, r3
 800a580:	f001 f9f9 	bl	800b976 <sensirion_i2c_add_int16_t_to_buffer>
 800a584:	0003      	movs	r3, r0
 800a586:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a588:	197c      	adds	r4, r7, r5
 800a58a:	1cbb      	adds	r3, r7, #2
 800a58c:	881a      	ldrh	r2, [r3, #0]
 800a58e:	197b      	adds	r3, r7, r5
 800a590:	8819      	ldrh	r1, [r3, #0]
 800a592:	19bb      	adds	r3, r7, r6
 800a594:	0018      	movs	r0, r3
 800a596:	f001 f9af 	bl	800b8f8 <sensirion_i2c_add_uint16_t_to_buffer>
 800a59a:	0003      	movs	r3, r0
 800a59c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a59e:	2214      	movs	r2, #20
 800a5a0:	18bc      	adds	r4, r7, r2
 800a5a2:	197b      	adds	r3, r7, r5
 800a5a4:	881a      	ldrh	r2, [r3, #0]
 800a5a6:	19bb      	adds	r3, r7, r6
 800a5a8:	0019      	movs	r1, r3
 800a5aa:	2069      	movs	r0, #105	@ 0x69
 800a5ac:	f001 f9fc 	bl	800b9a8 <sensirion_i2c_write_data>
 800a5b0:	0003      	movs	r3, r0
 800a5b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a5b4:	2214      	movs	r2, #20
 800a5b6:	18bb      	adds	r3, r7, r2
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	5e5b      	ldrsh	r3, [r3, r1]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a5c0:	18bb      	adds	r3, r7, r2
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	5e9b      	ldrsh	r3, [r3, r2]
 800a5c6:	e004      	b.n	800a5d2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a5c8:	4b05      	ldr	r3, [pc, #20]	@ (800a5e0 <sen5x_set_temperature_offset_parameters+0xc4>)
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	f7ff fbf4 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b007      	add	sp, #28
 800a5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5da:	46c0      	nop			@ (mov r8, r8)
 800a5dc:	000060b2 	.word	0x000060b2
 800a5e0:	00004e20 	.word	0x00004e20

0800a5e4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e6:	b091      	sub	sp, #68	@ 0x44
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	000a      	movs	r2, r1
 800a5ee:	1cfb      	adds	r3, r7, #3
 800a5f0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a5f2:	253e      	movs	r5, #62	@ 0x3e
 800a5f4:	197b      	adds	r3, r7, r5
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a5fa:	197c      	adds	r4, r7, r5
 800a5fc:	4a22      	ldr	r2, [pc, #136]	@ (800a688 <sen5x_get_product_name+0xa4>)
 800a5fe:	197b      	adds	r3, r7, r5
 800a600:	8819      	ldrh	r1, [r3, #0]
 800a602:	230c      	movs	r3, #12
 800a604:	18fb      	adds	r3, r7, r3
 800a606:	0018      	movs	r0, r3
 800a608:	f001 f94a 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a60c:	0003      	movs	r3, r0
 800a60e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a610:	263c      	movs	r6, #60	@ 0x3c
 800a612:	19bc      	adds	r4, r7, r6
 800a614:	197b      	adds	r3, r7, r5
 800a616:	881a      	ldrh	r2, [r3, #0]
 800a618:	230c      	movs	r3, #12
 800a61a:	18fb      	adds	r3, r7, r3
 800a61c:	0019      	movs	r1, r3
 800a61e:	2069      	movs	r0, #105	@ 0x69
 800a620:	f001 f9c2 	bl	800b9a8 <sensirion_i2c_write_data>
 800a624:	0003      	movs	r3, r0
 800a626:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a628:	19bb      	adds	r3, r7, r6
 800a62a:	2200      	movs	r2, #0
 800a62c:	5e9b      	ldrsh	r3, [r3, r2]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <sen5x_get_product_name+0x56>
        return error;
 800a632:	19bb      	adds	r3, r7, r6
 800a634:	2200      	movs	r2, #0
 800a636:	5e9b      	ldrsh	r3, [r3, r2]
 800a638:	e021      	b.n	800a67e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a63a:	4b14      	ldr	r3, [pc, #80]	@ (800a68c <sen5x_get_product_name+0xa8>)
 800a63c:	0018      	movs	r0, r3
 800a63e:	f7ff fbbb 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a642:	253c      	movs	r5, #60	@ 0x3c
 800a644:	197c      	adds	r4, r7, r5
 800a646:	230c      	movs	r3, #12
 800a648:	18fb      	adds	r3, r7, r3
 800a64a:	2220      	movs	r2, #32
 800a64c:	0019      	movs	r1, r3
 800a64e:	2069      	movs	r0, #105	@ 0x69
 800a650:	f001 f9c2 	bl	800b9d8 <sensirion_i2c_read_data_inplace>
 800a654:	0003      	movs	r3, r0
 800a656:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a658:	197b      	adds	r3, r7, r5
 800a65a:	2200      	movs	r2, #0
 800a65c:	5e9b      	ldrsh	r3, [r3, r2]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <sen5x_get_product_name+0x86>
        return error;
 800a662:	197b      	adds	r3, r7, r5
 800a664:	2200      	movs	r2, #0
 800a666:	5e9b      	ldrsh	r3, [r3, r2]
 800a668:	e009      	b.n	800a67e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a66a:	1cfb      	adds	r3, r7, #3
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b29a      	uxth	r2, r3
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	230c      	movs	r3, #12
 800a674:	18fb      	adds	r3, r7, r3
 800a676:	0018      	movs	r0, r3
 800a678:	f000 f988 	bl	800a98c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	0018      	movs	r0, r3
 800a680:	46bd      	mov	sp, r7
 800a682:	b011      	add	sp, #68	@ 0x44
 800a684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a686:	46c0      	nop			@ (mov r8, r8)
 800a688:	0000d014 	.word	0x0000d014
 800a68c:	0000c350 	.word	0x0000c350

0800a690 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a692:	b091      	sub	sp, #68	@ 0x44
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	000a      	movs	r2, r1
 800a69a:	1cfb      	adds	r3, r7, #3
 800a69c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a69e:	253e      	movs	r5, #62	@ 0x3e
 800a6a0:	197b      	adds	r3, r7, r5
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a6a6:	197c      	adds	r4, r7, r5
 800a6a8:	4a22      	ldr	r2, [pc, #136]	@ (800a734 <sen5x_get_serial_number+0xa4>)
 800a6aa:	197b      	adds	r3, r7, r5
 800a6ac:	8819      	ldrh	r1, [r3, #0]
 800a6ae:	230c      	movs	r3, #12
 800a6b0:	18fb      	adds	r3, r7, r3
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	f001 f8f4 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a6b8:	0003      	movs	r3, r0
 800a6ba:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a6bc:	263c      	movs	r6, #60	@ 0x3c
 800a6be:	19bc      	adds	r4, r7, r6
 800a6c0:	197b      	adds	r3, r7, r5
 800a6c2:	881a      	ldrh	r2, [r3, #0]
 800a6c4:	230c      	movs	r3, #12
 800a6c6:	18fb      	adds	r3, r7, r3
 800a6c8:	0019      	movs	r1, r3
 800a6ca:	2069      	movs	r0, #105	@ 0x69
 800a6cc:	f001 f96c 	bl	800b9a8 <sensirion_i2c_write_data>
 800a6d0:	0003      	movs	r3, r0
 800a6d2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a6d4:	19bb      	adds	r3, r7, r6
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	5e9b      	ldrsh	r3, [r3, r2]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <sen5x_get_serial_number+0x56>
        return error;
 800a6de:	19bb      	adds	r3, r7, r6
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	5e9b      	ldrsh	r3, [r3, r2]
 800a6e4:	e021      	b.n	800a72a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a6e6:	4b14      	ldr	r3, [pc, #80]	@ (800a738 <sen5x_get_serial_number+0xa8>)
 800a6e8:	0018      	movs	r0, r3
 800a6ea:	f7ff fb65 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a6ee:	253c      	movs	r5, #60	@ 0x3c
 800a6f0:	197c      	adds	r4, r7, r5
 800a6f2:	230c      	movs	r3, #12
 800a6f4:	18fb      	adds	r3, r7, r3
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	0019      	movs	r1, r3
 800a6fa:	2069      	movs	r0, #105	@ 0x69
 800a6fc:	f001 f96c 	bl	800b9d8 <sensirion_i2c_read_data_inplace>
 800a700:	0003      	movs	r3, r0
 800a702:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a704:	197b      	adds	r3, r7, r5
 800a706:	2200      	movs	r2, #0
 800a708:	5e9b      	ldrsh	r3, [r3, r2]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <sen5x_get_serial_number+0x86>
        return error;
 800a70e:	197b      	adds	r3, r7, r5
 800a710:	2200      	movs	r2, #0
 800a712:	5e9b      	ldrsh	r3, [r3, r2]
 800a714:	e009      	b.n	800a72a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a716:	1cfb      	adds	r3, r7, #3
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	6879      	ldr	r1, [r7, #4]
 800a71e:	230c      	movs	r3, #12
 800a720:	18fb      	adds	r3, r7, r3
 800a722:	0018      	movs	r0, r3
 800a724:	f000 f932 	bl	800a98c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	0018      	movs	r0, r3
 800a72c:	46bd      	mov	sp, r7
 800a72e:	b011      	add	sp, #68	@ 0x44
 800a730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a732:	46c0      	nop			@ (mov r8, r8)
 800a734:	0000d033 	.word	0x0000d033
 800a738:	0000c350 	.word	0x0000c350

0800a73c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73e:	b089      	sub	sp, #36	@ 0x24
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a74a:	251e      	movs	r5, #30
 800a74c:	197b      	adds	r3, r7, r5
 800a74e:	2200      	movs	r2, #0
 800a750:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a752:	197c      	adds	r4, r7, r5
 800a754:	23d1      	movs	r3, #209	@ 0xd1
 800a756:	021a      	lsls	r2, r3, #8
 800a758:	197b      	adds	r3, r7, r5
 800a75a:	8819      	ldrh	r1, [r3, #0]
 800a75c:	2310      	movs	r3, #16
 800a75e:	18fb      	adds	r3, r7, r3
 800a760:	0018      	movs	r0, r3
 800a762:	f001 f89d 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a766:	0003      	movs	r3, r0
 800a768:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a76a:	261c      	movs	r6, #28
 800a76c:	19bc      	adds	r4, r7, r6
 800a76e:	197b      	adds	r3, r7, r5
 800a770:	881a      	ldrh	r2, [r3, #0]
 800a772:	2310      	movs	r3, #16
 800a774:	18fb      	adds	r3, r7, r3
 800a776:	0019      	movs	r1, r3
 800a778:	2069      	movs	r0, #105	@ 0x69
 800a77a:	f001 f915 	bl	800b9a8 <sensirion_i2c_write_data>
 800a77e:	0003      	movs	r3, r0
 800a780:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a782:	19bb      	adds	r3, r7, r6
 800a784:	2200      	movs	r2, #0
 800a786:	5e9b      	ldrsh	r3, [r3, r2]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <sen5x_get_version+0x58>
        return error;
 800a78c:	19bb      	adds	r3, r7, r6
 800a78e:	2200      	movs	r2, #0
 800a790:	5e9b      	ldrsh	r3, [r3, r2]
 800a792:	e038      	b.n	800a806 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a794:	4b1e      	ldr	r3, [pc, #120]	@ (800a810 <sen5x_get_version+0xd4>)
 800a796:	0018      	movs	r0, r3
 800a798:	f7ff fb0e 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a79c:	251c      	movs	r5, #28
 800a79e:	197c      	adds	r4, r7, r5
 800a7a0:	2310      	movs	r3, #16
 800a7a2:	18fb      	adds	r3, r7, r3
 800a7a4:	2208      	movs	r2, #8
 800a7a6:	0019      	movs	r1, r3
 800a7a8:	2069      	movs	r0, #105	@ 0x69
 800a7aa:	f001 f915 	bl	800b9d8 <sensirion_i2c_read_data_inplace>
 800a7ae:	0003      	movs	r3, r0
 800a7b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a7b2:	197b      	adds	r3, r7, r5
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	5e9b      	ldrsh	r3, [r3, r2]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <sen5x_get_version+0x88>
        return error;
 800a7bc:	197b      	adds	r3, r7, r5
 800a7be:	2200      	movs	r2, #0
 800a7c0:	5e9b      	ldrsh	r3, [r3, r2]
 800a7c2:	e020      	b.n	800a806 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a7c4:	2110      	movs	r1, #16
 800a7c6:	187b      	adds	r3, r7, r1
 800a7c8:	781a      	ldrb	r2, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a7ce:	187b      	adds	r3, r7, r1
 800a7d0:	785a      	ldrb	r2, [r3, #1]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a7d6:	187b      	adds	r3, r7, r1
 800a7d8:	789b      	ldrb	r3, [r3, #2]
 800a7da:	1e5a      	subs	r2, r3, #1
 800a7dc:	4193      	sbcs	r3, r2
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a7e4:	187b      	adds	r3, r7, r1
 800a7e6:	78da      	ldrb	r2, [r3, #3]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a7ec:	187b      	adds	r3, r7, r1
 800a7ee:	791a      	ldrb	r2, [r3, #4]
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a7f4:	187b      	adds	r3, r7, r1
 800a7f6:	795a      	ldrb	r2, [r3, #5]
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7fa:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a7fc:	187b      	adds	r3, r7, r1
 800a7fe:	799a      	ldrb	r2, [r3, #6]
 800a800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a802:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a804:	2300      	movs	r3, #0
}
 800a806:	0018      	movs	r0, r3
 800a808:	46bd      	mov	sp, r7
 800a80a:	b009      	add	sp, #36	@ 0x24
 800a80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a80e:	46c0      	nop			@ (mov r8, r8)
 800a810:	00004e20 	.word	0x00004e20

0800a814 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a81c:	2516      	movs	r5, #22
 800a81e:	197b      	adds	r3, r7, r5
 800a820:	2200      	movs	r2, #0
 800a822:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a824:	197c      	adds	r4, r7, r5
 800a826:	4a22      	ldr	r2, [pc, #136]	@ (800a8b0 <sen5x_read_device_status+0x9c>)
 800a828:	197b      	adds	r3, r7, r5
 800a82a:	8819      	ldrh	r1, [r3, #0]
 800a82c:	230c      	movs	r3, #12
 800a82e:	18fb      	adds	r3, r7, r3
 800a830:	0018      	movs	r0, r3
 800a832:	f001 f835 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a836:	0003      	movs	r3, r0
 800a838:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a83a:	2614      	movs	r6, #20
 800a83c:	19bc      	adds	r4, r7, r6
 800a83e:	197b      	adds	r3, r7, r5
 800a840:	881a      	ldrh	r2, [r3, #0]
 800a842:	230c      	movs	r3, #12
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	0019      	movs	r1, r3
 800a848:	2069      	movs	r0, #105	@ 0x69
 800a84a:	f001 f8ad 	bl	800b9a8 <sensirion_i2c_write_data>
 800a84e:	0003      	movs	r3, r0
 800a850:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a852:	19bb      	adds	r3, r7, r6
 800a854:	2200      	movs	r2, #0
 800a856:	5e9b      	ldrsh	r3, [r3, r2]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d003      	beq.n	800a864 <sen5x_read_device_status+0x50>
        return error;
 800a85c:	19bb      	adds	r3, r7, r6
 800a85e:	2200      	movs	r2, #0
 800a860:	5e9b      	ldrsh	r3, [r3, r2]
 800a862:	e020      	b.n	800a8a6 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a864:	4b13      	ldr	r3, [pc, #76]	@ (800a8b4 <sen5x_read_device_status+0xa0>)
 800a866:	0018      	movs	r0, r3
 800a868:	f7ff faa6 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a86c:	2514      	movs	r5, #20
 800a86e:	197c      	adds	r4, r7, r5
 800a870:	230c      	movs	r3, #12
 800a872:	18fb      	adds	r3, r7, r3
 800a874:	2204      	movs	r2, #4
 800a876:	0019      	movs	r1, r3
 800a878:	2069      	movs	r0, #105	@ 0x69
 800a87a:	f001 f8ad 	bl	800b9d8 <sensirion_i2c_read_data_inplace>
 800a87e:	0003      	movs	r3, r0
 800a880:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a882:	197b      	adds	r3, r7, r5
 800a884:	2200      	movs	r2, #0
 800a886:	5e9b      	ldrsh	r3, [r3, r2]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <sen5x_read_device_status+0x80>
        return error;
 800a88c:	197b      	adds	r3, r7, r5
 800a88e:	2200      	movs	r2, #0
 800a890:	5e9b      	ldrsh	r3, [r3, r2]
 800a892:	e008      	b.n	800a8a6 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a894:	230c      	movs	r3, #12
 800a896:	18fb      	adds	r3, r7, r3
 800a898:	0018      	movs	r0, r3
 800a89a:	f000 f850 	bl	800a93e <sensirion_common_bytes_to_uint32_t>
 800a89e:	0002      	movs	r2, r0
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	b007      	add	sp, #28
 800a8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ae:	46c0      	nop			@ (mov r8, r8)
 800a8b0:	0000d206 	.word	0x0000d206
 800a8b4:	00004e20 	.word	0x00004e20

0800a8b8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a8be:	1dbb      	adds	r3, r7, #6
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a8c4:	1dbc      	adds	r4, r7, #6
 800a8c6:	4a12      	ldr	r2, [pc, #72]	@ (800a910 <sen5x_device_reset+0x58>)
 800a8c8:	1dbb      	adds	r3, r7, #6
 800a8ca:	8819      	ldrh	r1, [r3, #0]
 800a8cc:	003b      	movs	r3, r7
 800a8ce:	0018      	movs	r0, r3
 800a8d0:	f000 ffe6 	bl	800b8a0 <sensirion_i2c_add_command_to_buffer>
 800a8d4:	0003      	movs	r3, r0
 800a8d6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a8d8:	1d3c      	adds	r4, r7, #4
 800a8da:	1dbb      	adds	r3, r7, #6
 800a8dc:	881a      	ldrh	r2, [r3, #0]
 800a8de:	003b      	movs	r3, r7
 800a8e0:	0019      	movs	r1, r3
 800a8e2:	2069      	movs	r0, #105	@ 0x69
 800a8e4:	f001 f860 	bl	800b9a8 <sensirion_i2c_write_data>
 800a8e8:	0003      	movs	r3, r0
 800a8ea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a8ec:	1d3b      	adds	r3, r7, #4
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	5e9b      	ldrsh	r3, [r3, r2]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <sen5x_device_reset+0x46>
        return error;
 800a8f6:	1d3b      	adds	r3, r7, #4
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	5e9b      	ldrsh	r3, [r3, r2]
 800a8fc:	e004      	b.n	800a908 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a8fe:	4b05      	ldr	r3, [pc, #20]	@ (800a914 <sen5x_device_reset+0x5c>)
 800a900:	0018      	movs	r0, r3
 800a902:	f7ff fa59 	bl	8009db8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a906:	2300      	movs	r3, #0
}
 800a908:	0018      	movs	r0, r3
 800a90a:	46bd      	mov	sp, r7
 800a90c:	b003      	add	sp, #12
 800a90e:	bd90      	pop	{r4, r7, pc}
 800a910:	0000d304 	.word	0x0000d304
 800a914:	00030d40 	.word	0x00030d40

0800a918 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	021b      	lsls	r3, r3, #8
 800a926:	b21a      	sxth	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3301      	adds	r3, #1
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	b21b      	sxth	r3, r3
 800a930:	4313      	orrs	r3, r2
 800a932:	b21b      	sxth	r3, r3
 800a934:	b29b      	uxth	r3, r3
}
 800a936:	0018      	movs	r0, r3
 800a938:	46bd      	mov	sp, r7
 800a93a:	b002      	add	sp, #8
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	061a      	lsls	r2, r3, #24
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	3301      	adds	r3, #1
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	041b      	lsls	r3, r3, #16
 800a954:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3302      	adds	r3, #2
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a95e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	3203      	adds	r2, #3
 800a964:	7812      	ldrb	r2, [r2, #0]
 800a966:	4313      	orrs	r3, r2
}
 800a968:	0018      	movs	r0, r3
 800a96a:	46bd      	mov	sp, r7
 800a96c:	b002      	add	sp, #8
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	0018      	movs	r0, r3
 800a97c:	f7ff ffcc 	bl	800a918 <sensirion_common_bytes_to_uint16_t>
 800a980:	0003      	movs	r3, r0
 800a982:	b21b      	sxth	r3, r3
}
 800a984:	0018      	movs	r0, r3
 800a986:	46bd      	mov	sp, r7
 800a988:	b002      	add	sp, #8
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	1dbb      	adds	r3, r7, #6
 800a998:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a99a:	2316      	movs	r3, #22
 800a99c:	18fb      	adds	r3, r7, r3
 800a99e:	2200      	movs	r2, #0
 800a9a0:	801a      	strh	r2, [r3, #0]
 800a9a2:	e00f      	b.n	800a9c4 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a9a4:	2016      	movs	r0, #22
 800a9a6:	183b      	adds	r3, r7, r0
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	18d2      	adds	r2, r2, r3
 800a9ae:	183b      	adds	r3, r7, r0
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	18cb      	adds	r3, r1, r3
 800a9b6:	7812      	ldrb	r2, [r2, #0]
 800a9b8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a9ba:	183b      	adds	r3, r7, r0
 800a9bc:	881a      	ldrh	r2, [r3, #0]
 800a9be:	183b      	adds	r3, r7, r0
 800a9c0:	3201      	adds	r2, #1
 800a9c2:	801a      	strh	r2, [r3, #0]
 800a9c4:	2316      	movs	r3, #22
 800a9c6:	18fa      	adds	r2, r7, r3
 800a9c8:	1dbb      	adds	r3, r7, #6
 800a9ca:	8812      	ldrh	r2, [r2, #0]
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d3e8      	bcc.n	800a9a4 <sensirion_common_copy_bytes+0x18>
    }
}
 800a9d2:	46c0      	nop			@ (mov r8, r8)
 800a9d4:	46c0      	nop			@ (mov r8, r8)
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	b006      	add	sp, #24
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d113      	bne.n	800aa22 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	22fe      	movs	r2, #254	@ 0xfe
 800a9fe:	0592      	lsls	r2, r2, #22
 800aa00:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4a1a      	ldr	r2, [pc, #104]	@ (800aa70 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800aa06:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4a1a      	ldr	r2, [pc, #104]	@ (800aa74 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800aa0c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4a19      	ldr	r2, [pc, #100]	@ (800aa78 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800aa12:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4a19      	ldr	r2, [pc, #100]	@ (800aa7c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800aa18:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	4a18      	ldr	r2, [pc, #96]	@ (800aa80 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800aa1e:	61da      	str	r2, [r3, #28]
 800aa20:	e011      	b.n	800aa46 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4a17      	ldr	r2, [pc, #92]	@ (800aa84 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800aa26:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4a17      	ldr	r2, [pc, #92]	@ (800aa88 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800aa2c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4a16      	ldr	r2, [pc, #88]	@ (800aa8c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800aa32:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a16      	ldr	r2, [pc, #88]	@ (800aa90 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800aa38:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	4a15      	ldr	r2, [pc, #84]	@ (800aa94 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800aa3e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4a15      	ldr	r2, [pc, #84]	@ (800aa98 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800aa44:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4a14      	ldr	r2, [pc, #80]	@ (800aa9c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800aa4a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4a14      	ldr	r2, [pc, #80]	@ (800aaa0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800aa50:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	4a12      	ldr	r2, [pc, #72]	@ (800aaa0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800aa56:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4a12      	ldr	r2, [pc, #72]	@ (800aaa4 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800aa5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	0018      	movs	r0, r3
 800aa62:	f000 f833 	bl	800aacc <GasIndexAlgorithm_reset>
}
 800aa66:	46c0      	nop			@ (mov r8, r8)
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	b004      	add	sp, #16
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	46c0      	nop			@ (mov r8, r8)
 800aa70:	00002710 	.word	0x00002710
 800aa74:	44340000 	.word	0x44340000
 800aa78:	46859800 	.word	0x46859800
 800aa7c:	46a05000 	.word	0x46a05000
 800aa80:	41f00000 	.word	0x41f00000
 800aa84:	42c80000 	.word	0x42c80000
 800aa88:	00004e20 	.word	0x00004e20
 800aa8c:	43340000 	.word	0x43340000
 800aa90:	4528c000 	.word	0x4528c000
 800aa94:	45a32000 	.word	0x45a32000
 800aa98:	43aa0000 	.word	0x43aa0000
 800aa9c:	43660000 	.word	0x43660000
 800aaa0:	41400000 	.word	0x41400000
 800aaa4:	42480000 	.word	0x42480000

0800aaa8 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800aab2:	4a05      	ldr	r2, [pc, #20]	@ (800aac8 <GasIndexAlgorithm_init+0x20>)
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	0018      	movs	r0, r3
 800aaba:	f7ff ff8f 	bl	800a9dc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800aabe:	46c0      	nop			@ (mov r8, r8)
 800aac0:	46bd      	mov	sp, r7
 800aac2:	b002      	add	sp, #8
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	46c0      	nop			@ (mov r8, r8)
 800aac8:	44610000 	.word	0x44610000

0800aacc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	0018      	movs	r0, r3
 800aaea:	f000 f805 	bl	800aaf8 <GasIndexAlgorithm__init_instances>
}
 800aaee:	46c0      	nop			@ (mov r8, r8)
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b002      	add	sp, #8
 800aaf4:	bd80      	pop	{r7, pc}
	...

0800aaf8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800aaf8:	b590      	push	{r4, r7, lr}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	0018      	movs	r0, r3
 800ab04:	f000 f8e8 	bl	800acd8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f000 f9a6 	bl	800ae5c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800ab10:	1c04      	adds	r4, r0, #0
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	0018      	movs	r0, r3
 800ab16:	f000 f9ab 	bl	800ae70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ab1a:	1c02      	adds	r2, r0, #0
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	1c21      	adds	r1, r4, #0
 800ab20:	0018      	movs	r0, r3
 800ab22:	f000 fc3b 	bl	800b39c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d107      	bne.n	800ab3e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800ab2e:	23fe      	movs	r3, #254	@ 0xfe
 800ab30:	059b      	lsls	r3, r3, #22
 800ab32:	4a0a      	ldr	r2, [pc, #40]	@ (800ab5c <GasIndexAlgorithm__init_instances+0x64>)
 800ab34:	490a      	ldr	r1, [pc, #40]	@ (800ab60 <GasIndexAlgorithm__init_instances+0x68>)
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fc86 	bl	800b448 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800ab3c:	e005      	b.n	800ab4a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800ab3e:	4b09      	ldr	r3, [pc, #36]	@ (800ab64 <GasIndexAlgorithm__init_instances+0x6c>)
 800ab40:	4a09      	ldr	r2, [pc, #36]	@ (800ab68 <GasIndexAlgorithm__init_instances+0x70>)
 800ab42:	490a      	ldr	r1, [pc, #40]	@ (800ab6c <GasIndexAlgorithm__init_instances+0x74>)
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fc7f 	bl	800b448 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	f000 fd35 	bl	800b5bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800ab52:	46c0      	nop			@ (mov r8, r8)
 800ab54:	46bd      	mov	sp, r7
 800ab56:	b003      	add	sp, #12
 800ab58:	bd90      	pop	{r4, r7, pc}
 800ab5a:	46c0      	nop			@ (mov r8, r8)
 800ab5c:	bc257a78 	.word	0xbc257a78
 800ab60:	44198000 	.word	0x44198000
 800ab64:	42c80000 	.word	0x42c80000
 800ab68:	bbd4fdf4 	.word	0xbbd4fdf4
 800ab6c:	43550000 	.word	0x43550000

0800ab70 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800ab70:	b590      	push	{r4, r7, lr}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab80:	4952      	ldr	r1, [pc, #328]	@ (800accc <GasIndexAlgorithm_process+0x15c>)
 800ab82:	1c18      	adds	r0, r3, #0
 800ab84:	f7f5 fcde 	bl	8000544 <__aeabi_fcmple>
 800ab88:	1e03      	subs	r3, r0, #0
 800ab8a:	d00c      	beq.n	800aba6 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	1c19      	adds	r1, r3, #0
 800ab96:	1c10      	adds	r0, r2, #0
 800ab98:	f7f5 fe92 	bl	80008c0 <__aeabi_fadd>
 800ab9c:	1c03      	adds	r3, r0, #0
 800ab9e:	1c1a      	adds	r2, r3, #0
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	631a      	str	r2, [r3, #48]	@ 0x30
 800aba4:	e080      	b.n	800aca8 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	dd25      	ble.n	800abf8 <GasIndexAlgorithm_process+0x88>
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	4a48      	ldr	r2, [pc, #288]	@ (800acd0 <GasIndexAlgorithm_process+0x160>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	dc21      	bgt.n	800abf8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	429a      	cmp	r2, r3
 800abbc:	dc04      	bgt.n	800abc8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	3301      	adds	r3, #1
 800abc4:	60bb      	str	r3, [r7, #8]
 800abc6:	e00d      	b.n	800abe4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	4a41      	ldr	r2, [pc, #260]	@ (800acd4 <GasIndexAlgorithm_process+0x164>)
 800abce:	4694      	mov	ip, r2
 800abd0:	4463      	add	r3, ip
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	dd05      	ble.n	800abe4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	4a3d      	ldr	r2, [pc, #244]	@ (800acd4 <GasIndexAlgorithm_process+0x164>)
 800abde:	4694      	mov	ip, r2
 800abe0:	4463      	add	r3, ip
 800abe2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	0018      	movs	r0, r3
 800abee:	f7f6 fcef 	bl	80015d0 <__aeabi_i2f>
 800abf2:	1c02      	adds	r2, r0, #0
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d005      	beq.n	800ac0c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	0018      	movs	r0, r3
 800ac04:	f000 f945 	bl	800ae92 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800ac08:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800ac0a:	d014      	beq.n	800ac36 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	1c11      	adds	r1, r2, #0
 800ac14:	0018      	movs	r0, r3
 800ac16:	f000 fbd1 	bl	800b3bc <GasIndexAlgorithm__mox_model__process>
 800ac1a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	1c11      	adds	r1, r2, #0
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f000 fc25 	bl	800b478 <GasIndexAlgorithm__sigmoid_scaled__process>
 800ac2e:	1c02      	adds	r2, r0, #0
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac34:	e003      	b.n	800ac3e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	689a      	ldr	r2, [r3, #8]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	1c11      	adds	r1, r2, #0
 800ac46:	0018      	movs	r0, r3
 800ac48:	f000 fcec 	bl	800b624 <GasIndexAlgorithm__adaptive_lowpass__process>
 800ac4c:	1c02      	adds	r2, r0, #0
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac56:	21fc      	movs	r1, #252	@ 0xfc
 800ac58:	0589      	lsls	r1, r1, #22
 800ac5a:	1c18      	adds	r0, r3, #0
 800ac5c:	f7f5 fc68 	bl	8000530 <__aeabi_fcmplt>
 800ac60:	1e03      	subs	r3, r0, #0
 800ac62:	d003      	beq.n	800ac6c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	22fc      	movs	r2, #252	@ 0xfc
 800ac68:	0592      	lsls	r2, r2, #22
 800ac6a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac70:	2100      	movs	r1, #0
 800ac72:	1c18      	adds	r0, r3, #0
 800ac74:	f7f5 fc70 	bl	8000558 <__aeabi_fcmpgt>
 800ac78:	1e03      	subs	r3, r0, #0
 800ac7a:	d015      	beq.n	800aca8 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	1c11      	adds	r1, r2, #0
 800ac84:	0018      	movs	r0, r3
 800ac86:	f000 fa4f 	bl	800b128 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	0018      	movs	r0, r3
 800ac8e:	f000 f8e5 	bl	800ae5c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800ac92:	1c04      	adds	r4, r0, #0
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	0018      	movs	r0, r3
 800ac98:	f000 f8ea 	bl	800ae70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ac9c:	1c02      	adds	r2, r0, #0
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	1c21      	adds	r1, r4, #0
 800aca2:	0018      	movs	r0, r3
 800aca4:	f000 fb7a 	bl	800b39c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acac:	21fc      	movs	r1, #252	@ 0xfc
 800acae:	0589      	lsls	r1, r1, #22
 800acb0:	1c18      	adds	r0, r3, #0
 800acb2:	f7f5 fe05 	bl	80008c0 <__aeabi_fadd>
 800acb6:	1c03      	adds	r3, r0, #0
 800acb8:	1c18      	adds	r0, r3, #0
 800acba:	f7f6 fc69 	bl	8001590 <__aeabi_f2iz>
 800acbe:	0002      	movs	r2, r0
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
    return;
 800acc4:	46c0      	nop			@ (mov r8, r8)
}
 800acc6:	46bd      	mov	sp, r7
 800acc8:	b005      	add	sp, #20
 800acca:	bd90      	pop	{r4, r7, pc}
 800accc:	42340000 	.word	0x42340000
 800acd0:	0000fde7 	.word	0x0000fde7
 800acd4:	00007fff 	.word	0x00007fff

0800acd8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800acd8:	b5b0      	push	{r4, r5, r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	223c      	movs	r2, #60	@ 0x3c
 800ace4:	2100      	movs	r1, #0
 800ace6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4952      	ldr	r1, [pc, #328]	@ (800ae4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ad02:	1c18      	adds	r0, r3, #0
 800ad04:	f7f5 ff66 	bl	8000bd4 <__aeabi_fdiv>
 800ad08:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ad0a:	2188      	movs	r1, #136	@ 0x88
 800ad0c:	05c9      	lsls	r1, r1, #23
 800ad0e:	1c18      	adds	r0, r3, #0
 800ad10:	f7f6 f946 	bl	8000fa0 <__aeabi_fmul>
 800ad14:	1c03      	adds	r3, r0, #0
 800ad16:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	494a      	ldr	r1, [pc, #296]	@ (800ae4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ad22:	1c18      	adds	r0, r3, #0
 800ad24:	f7f5 ff56 	bl	8000bd4 <__aeabi_fdiv>
 800ad28:	1c03      	adds	r3, r0, #0
 800ad2a:	1c19      	adds	r1, r3, #0
 800ad2c:	1c20      	adds	r0, r4, #0
 800ad2e:	f7f5 fdc7 	bl	80008c0 <__aeabi_fadd>
 800ad32:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ad34:	1c19      	adds	r1, r3, #0
 800ad36:	1c28      	adds	r0, r5, #0
 800ad38:	f7f5 ff4c 	bl	8000bd4 <__aeabi_fdiv>
 800ad3c:	1c03      	adds	r3, r0, #0
 800ad3e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	4940      	ldr	r1, [pc, #256]	@ (800ae4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ad4a:	1c18      	adds	r0, r3, #0
 800ad4c:	f7f5 ff42 	bl	8000bd4 <__aeabi_fdiv>
 800ad50:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ad52:	2185      	movs	r1, #133	@ 0x85
 800ad54:	05c9      	lsls	r1, r1, #23
 800ad56:	1c18      	adds	r0, r3, #0
 800ad58:	f7f6 f922 	bl	8000fa0 <__aeabi_fmul>
 800ad5c:	1c03      	adds	r3, r0, #0
 800ad5e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	4938      	ldr	r1, [pc, #224]	@ (800ae4c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ad6a:	1c18      	adds	r0, r3, #0
 800ad6c:	f7f5 ff32 	bl	8000bd4 <__aeabi_fdiv>
 800ad70:	1c03      	adds	r3, r0, #0
 800ad72:	1c19      	adds	r1, r3, #0
 800ad74:	1c20      	adds	r0, r4, #0
 800ad76:	f7f5 fda3 	bl	80008c0 <__aeabi_fadd>
 800ad7a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ad7c:	1c19      	adds	r1, r3, #0
 800ad7e:	1c28      	adds	r0, r5, #0
 800ad80:	f7f5 ff28 	bl	8000bd4 <__aeabi_fdiv>
 800ad84:	1c03      	adds	r3, r0, #0
 800ad86:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d118      	bne.n	800adc6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ad98:	2188      	movs	r1, #136	@ 0x88
 800ad9a:	05c9      	lsls	r1, r1, #23
 800ad9c:	1c18      	adds	r0, r3, #0
 800ad9e:	f7f6 f8ff 	bl	8000fa0 <__aeabi_fmul>
 800ada2:	1c03      	adds	r3, r0, #0
 800ada4:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800adaa:	4929      	ldr	r1, [pc, #164]	@ (800ae50 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800adac:	1c18      	adds	r0, r3, #0
 800adae:	f7f5 fd87 	bl	80008c0 <__aeabi_fadd>
 800adb2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800adb4:	1c19      	adds	r1, r3, #0
 800adb6:	1c20      	adds	r0, r4, #0
 800adb8:	f7f5 ff0c 	bl	8000bd4 <__aeabi_fdiv>
 800adbc:	1c03      	adds	r3, r0, #0
 800adbe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	655a      	str	r2, [r3, #84]	@ 0x54
 800adc4:	e017      	b.n	800adf6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800adca:	2188      	movs	r1, #136	@ 0x88
 800adcc:	05c9      	lsls	r1, r1, #23
 800adce:	1c18      	adds	r0, r3, #0
 800add0:	f7f6 f8e6 	bl	8000fa0 <__aeabi_fmul>
 800add4:	1c03      	adds	r3, r0, #0
 800add6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800addc:	491d      	ldr	r1, [pc, #116]	@ (800ae54 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800adde:	1c18      	adds	r0, r3, #0
 800ade0:	f7f5 fd6e 	bl	80008c0 <__aeabi_fadd>
 800ade4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ade6:	1c19      	adds	r1, r3, #0
 800ade8:	1c20      	adds	r0, r4, #0
 800adea:	f7f5 fef3 	bl	8000bd4 <__aeabi_fdiv>
 800adee:	1c03      	adds	r3, r0, #0
 800adf0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800adfa:	2185      	movs	r1, #133	@ 0x85
 800adfc:	05c9      	lsls	r1, r1, #23
 800adfe:	1c18      	adds	r0, r3, #0
 800ae00:	f7f6 f8ce 	bl	8000fa0 <__aeabi_fmul>
 800ae04:	1c03      	adds	r3, r0, #0
 800ae06:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4912      	ldr	r1, [pc, #72]	@ (800ae58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800ae0e:	1c18      	adds	r0, r3, #0
 800ae10:	f7f5 fd56 	bl	80008c0 <__aeabi_fadd>
 800ae14:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800ae16:	1c19      	adds	r1, r3, #0
 800ae18:	1c20      	adds	r0, r4, #0
 800ae1a:	f7f5 fedb 	bl	8000bd4 <__aeabi_fdiv>
 800ae1e:	1c03      	adds	r3, r0, #0
 800ae20:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800ae44:	46c0      	nop			@ (mov r8, r8)
 800ae46:	46bd      	mov	sp, r7
 800ae48:	b002      	add	sp, #8
 800ae4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ae4c:	45610000 	.word	0x45610000
 800ae50:	44960000 	.word	0x44960000
 800ae54:	41a00000 	.word	0x41a00000
 800ae58:	451c4000 	.word	0x451c4000

0800ae5c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800ae68:	1c18      	adds	r0, r3, #0
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	b002      	add	sp, #8
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800ae80:	1c19      	adds	r1, r3, #0
 800ae82:	1c10      	adds	r0, r2, #0
 800ae84:	f7f5 fd1c 	bl	80008c0 <__aeabi_fadd>
 800ae88:	1c03      	adds	r3, r0, #0
}
 800ae8a:	1c18      	adds	r0, r3, #0
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	b002      	add	sp, #8
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	223c      	movs	r2, #60	@ 0x3c
 800ae9e:	5c9b      	ldrb	r3, [r3, r2]
}
 800aea0:	0018      	movs	r0, r3
 800aea2:	46bd      	mov	sp, r7
 800aea4:	b002      	add	sp, #8
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800aea8:	b5b0      	push	{r4, r5, r7, lr}
 800aeaa:	b08c      	sub	sp, #48	@ 0x30
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800aeb4:	1c19      	adds	r1, r3, #0
 800aeb6:	4895      	ldr	r0, [pc, #596]	@ (800b10c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800aeb8:	f7f6 f9b0 	bl	800121c <__aeabi_fsub>
 800aebc:	1c03      	adds	r3, r0, #0
 800aebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aec4:	1c19      	adds	r1, r3, #0
 800aec6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aec8:	f7f5 fb46 	bl	8000558 <__aeabi_fcmpgt>
 800aecc:	1e03      	subs	r3, r0, #0
 800aece:	d00b      	beq.n	800aee8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800aed8:	1c19      	adds	r1, r3, #0
 800aeda:	1c10      	adds	r0, r2, #0
 800aedc:	f7f5 fcf0 	bl	80008c0 <__aeabi_fadd>
 800aee0:	1c03      	adds	r3, r0, #0
 800aee2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aeec:	1c19      	adds	r1, r3, #0
 800aeee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aef0:	f7f5 fb32 	bl	8000558 <__aeabi_fcmpgt>
 800aef4:	1e03      	subs	r3, r0, #0
 800aef6:	d00b      	beq.n	800af10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800af00:	1c19      	adds	r1, r3, #0
 800af02:	1c10      	adds	r0, r2, #0
 800af04:	f7f5 fcdc 	bl	80008c0 <__aeabi_fadd>
 800af08:	1c03      	adds	r3, r0, #0
 800af0a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6959      	ldr	r1, [r3, #20]
 800af14:	4a7e      	ldr	r2, [pc, #504]	@ (800b110 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	0018      	movs	r0, r3
 800af1a:	f000 f9f1 	bl	800b300 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	1c11      	adds	r1, r2, #0
 800af26:	0018      	movs	r0, r3
 800af28:	f000 f9fa 	bl	800b320 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800af2c:	1c03      	adds	r3, r0, #0
 800af2e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800af3c:	1c19      	adds	r1, r3, #0
 800af3e:	1c10      	adds	r0, r2, #0
 800af40:	f7f6 f96c 	bl	800121c <__aeabi_fsub>
 800af44:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800af46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af48:	1c18      	adds	r0, r3, #0
 800af4a:	f7f6 f829 	bl	8000fa0 <__aeabi_fmul>
 800af4e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800af50:	1c19      	adds	r1, r3, #0
 800af52:	1c20      	adds	r0, r4, #0
 800af54:	f7f5 fcb4 	bl	80008c0 <__aeabi_fadd>
 800af58:	1c03      	adds	r3, r0, #0
 800af5a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800af64:	1c19      	adds	r1, r3, #0
 800af66:	486b      	ldr	r0, [pc, #428]	@ (800b114 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800af68:	f7f6 f958 	bl	800121c <__aeabi_fsub>
 800af6c:	1c03      	adds	r3, r0, #0
 800af6e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	1c11      	adds	r1, r2, #0
 800af78:	0018      	movs	r0, r3
 800af7a:	f000 f9d1 	bl	800b320 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800af7e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800af80:	1c19      	adds	r1, r3, #0
 800af82:	1c28      	adds	r0, r5, #0
 800af84:	f7f6 f80c 	bl	8000fa0 <__aeabi_fmul>
 800af88:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800af8a:	1c19      	adds	r1, r3, #0
 800af8c:	1c20      	adds	r0, r4, #0
 800af8e:	f7f5 fc97 	bl	80008c0 <__aeabi_fadd>
 800af92:	1c03      	adds	r3, r0, #0
 800af94:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800af96:	4a60      	ldr	r2, [pc, #384]	@ (800b118 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800af98:	6a39      	ldr	r1, [r7, #32]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	0018      	movs	r0, r3
 800af9e:	f000 f9af 	bl	800b300 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	1c11      	adds	r1, r2, #0
 800afaa:	0018      	movs	r0, r3
 800afac:	f000 f9b8 	bl	800b320 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800afb0:	1c03      	adds	r3, r0, #0
 800afb2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800afb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afb6:	69f8      	ldr	r0, [r7, #28]
 800afb8:	f7f5 fff2 	bl	8000fa0 <__aeabi_fmul>
 800afbc:	1c03      	adds	r3, r0, #0
 800afbe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6999      	ldr	r1, [r3, #24]
 800afc8:	4a51      	ldr	r2, [pc, #324]	@ (800b110 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	0018      	movs	r0, r3
 800afce:	f000 f997 	bl	800b300 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	1c11      	adds	r1, r2, #0
 800afda:	0018      	movs	r0, r3
 800afdc:	f000 f9a0 	bl	800b320 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800afe0:	1c03      	adds	r3, r0, #0
 800afe2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800aff0:	1c19      	adds	r1, r3, #0
 800aff2:	1c10      	adds	r0, r2, #0
 800aff4:	f7f6 f912 	bl	800121c <__aeabi_fsub>
 800aff8:	1c03      	adds	r3, r0, #0
 800affa:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800affc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800affe:	69b8      	ldr	r0, [r7, #24]
 800b000:	f7f6 f90c 	bl	800121c <__aeabi_fsub>
 800b004:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800b006:	1c19      	adds	r1, r3, #0
 800b008:	1c28      	adds	r0, r5, #0
 800b00a:	f7f5 ffc9 	bl	8000fa0 <__aeabi_fmul>
 800b00e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800b010:	1c19      	adds	r1, r3, #0
 800b012:	1c20      	adds	r0, r4, #0
 800b014:	f7f5 fc54 	bl	80008c0 <__aeabi_fadd>
 800b018:	1c03      	adds	r3, r0, #0
 800b01a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800b024:	1c19      	adds	r1, r3, #0
 800b026:	483b      	ldr	r0, [pc, #236]	@ (800b114 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800b028:	f7f6 f8f8 	bl	800121c <__aeabi_fsub>
 800b02c:	1c03      	adds	r3, r0, #0
 800b02e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	1c11      	adds	r1, r2, #0
 800b038:	0018      	movs	r0, r3
 800b03a:	f000 f971 	bl	800b320 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b03e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800b040:	1c19      	adds	r1, r3, #0
 800b042:	1c28      	adds	r0, r5, #0
 800b044:	f7f5 ffac 	bl	8000fa0 <__aeabi_fmul>
 800b048:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800b04a:	1c19      	adds	r1, r3, #0
 800b04c:	1c20      	adds	r0, r4, #0
 800b04e:	f7f5 fc37 	bl	80008c0 <__aeabi_fadd>
 800b052:	1c03      	adds	r3, r0, #0
 800b054:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b056:	4a30      	ldr	r2, [pc, #192]	@ (800b118 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800b058:	6939      	ldr	r1, [r7, #16]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	0018      	movs	r0, r3
 800b05e:	f000 f94f 	bl	800b300 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	1c11      	adds	r1, r2, #0
 800b06a:	0018      	movs	r0, r3
 800b06c:	f000 f958 	bl	800b320 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b070:	1c03      	adds	r3, r0, #0
 800b072:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800b074:	6979      	ldr	r1, [r7, #20]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7f5 ff92 	bl	8000fa0 <__aeabi_fmul>
 800b07c:	1c03      	adds	r3, r0, #0
 800b07e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	4923      	ldr	r1, [pc, #140]	@ (800b11c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800b08e:	1c18      	adds	r0, r3, #0
 800b090:	f7f5 fda0 	bl	8000bd4 <__aeabi_fdiv>
 800b094:	1c03      	adds	r3, r0, #0
 800b096:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800b098:	69f9      	ldr	r1, [r7, #28]
 800b09a:	20fe      	movs	r0, #254	@ 0xfe
 800b09c:	0580      	lsls	r0, r0, #22
 800b09e:	f7f6 f8bd 	bl	800121c <__aeabi_fsub>
 800b0a2:	1c03      	adds	r3, r0, #0
 800b0a4:	491e      	ldr	r1, [pc, #120]	@ (800b120 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800b0a6:	1c18      	adds	r0, r3, #0
 800b0a8:	f7f5 ff7a 	bl	8000fa0 <__aeabi_fmul>
 800b0ac:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800b0ae:	491d      	ldr	r1, [pc, #116]	@ (800b124 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800b0b0:	1c18      	adds	r0, r3, #0
 800b0b2:	f7f6 f8b3 	bl	800121c <__aeabi_fsub>
 800b0b6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800b0b8:	1c19      	adds	r1, r3, #0
 800b0ba:	1c28      	adds	r0, r5, #0
 800b0bc:	f7f5 ff70 	bl	8000fa0 <__aeabi_fmul>
 800b0c0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b0c2:	1c19      	adds	r1, r3, #0
 800b0c4:	1c20      	adds	r0, r4, #0
 800b0c6:	f7f5 fbfb 	bl	80008c0 <__aeabi_fadd>
 800b0ca:	1c03      	adds	r3, r0, #0
 800b0cc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	1c18      	adds	r0, r3, #0
 800b0da:	f7f5 fa29 	bl	8000530 <__aeabi_fcmplt>
 800b0de:	1e03      	subs	r3, r0, #0
 800b0e0:	d002      	beq.n	800b0e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b0f0:	1c19      	adds	r1, r3, #0
 800b0f2:	1c10      	adds	r0, r2, #0
 800b0f4:	f7f5 fa30 	bl	8000558 <__aeabi_fcmpgt>
 800b0f8:	1e03      	subs	r3, r0, #0
 800b0fa:	d100      	bne.n	800b0fe <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800b0fc:	e002      	b.n	800b104 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b104:	46c0      	nop			@ (mov r8, r8)
 800b106:	46bd      	mov	sp, r7
 800b108:	b00c      	add	sp, #48	@ 0x30
 800b10a:	bdb0      	pop	{r4, r5, r7, pc}
 800b10c:	46fffe00 	.word	0x46fffe00
 800b110:	3c23d70a 	.word	0x3c23d70a
 800b114:	43ff0000 	.word	0x43ff0000
 800b118:	3db851ec 	.word	0x3db851ec
 800b11c:	42700000 	.word	0x42700000
 800b120:	3fa66666 	.word	0x3fa66666
 800b124:	3e99999a 	.word	0x3e99999a

0800b128 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800b128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	223c      	movs	r2, #60	@ 0x3c
 800b136:	5c9b      	ldrb	r3, [r3, r2]
 800b138:	2201      	movs	r2, #1
 800b13a:	4053      	eors	r3, r2
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	223c      	movs	r2, #60	@ 0x3c
 800b146:	2101      	movs	r1, #1
 800b148:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800b156:	e0c8      	b.n	800b2ea <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b15c:	4965      	ldr	r1, [pc, #404]	@ (800b2f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800b15e:	1c18      	adds	r0, r3, #0
 800b160:	f7f5 fa04 	bl	800056c <__aeabi_fcmpge>
 800b164:	1e03      	subs	r3, r0, #0
 800b166:	d107      	bne.n	800b178 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b16c:	4962      	ldr	r1, [pc, #392]	@ (800b2f8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800b16e:	1c18      	adds	r0, r3, #0
 800b170:	f7f5 f9e8 	bl	8000544 <__aeabi_fcmple>
 800b174:	1e03      	subs	r3, r0, #0
 800b176:	d00e      	beq.n	800b196 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b180:	1c19      	adds	r1, r3, #0
 800b182:	1c10      	adds	r0, r2, #0
 800b184:	f7f5 fb9c 	bl	80008c0 <__aeabi_fadd>
 800b188:	1c03      	adds	r3, r0, #0
 800b18a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b19a:	1c19      	adds	r1, r3, #0
 800b19c:	6838      	ldr	r0, [r7, #0]
 800b19e:	f7f6 f83d 	bl	800121c <__aeabi_fsub>
 800b1a2:	1c03      	adds	r3, r0, #0
 800b1a4:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f7ff fe7d 	bl	800aea8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b2:	1c19      	adds	r1, r3, #0
 800b1b4:	6838      	ldr	r0, [r7, #0]
 800b1b6:	f7f6 f831 	bl	800121c <__aeabi_fsub>
 800b1ba:	1c03      	adds	r3, r0, #0
 800b1bc:	2185      	movs	r1, #133	@ 0x85
 800b1be:	05c9      	lsls	r1, r1, #23
 800b1c0:	1c18      	adds	r0, r3, #0
 800b1c2:	f7f5 fd07 	bl	8000bd4 <__aeabi_fdiv>
 800b1c6:	1c03      	adds	r3, r0, #0
 800b1c8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f7f5 f9af 	bl	8000530 <__aeabi_fcmplt>
 800b1d2:	1e03      	subs	r3, r0, #0
 800b1d4:	d008      	beq.n	800b1e8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1da:	68f9      	ldr	r1, [r7, #12]
 800b1dc:	1c18      	adds	r0, r3, #0
 800b1de:	f7f6 f81d 	bl	800121c <__aeabi_fsub>
 800b1e2:	1c03      	adds	r3, r0, #0
 800b1e4:	617b      	str	r3, [r7, #20]
 800b1e6:	e007      	b.n	800b1f8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1ec:	1c19      	adds	r1, r3, #0
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7f5 fb66 	bl	80008c0 <__aeabi_fadd>
 800b1f4:	1c03      	adds	r3, r0, #0
 800b1f6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800b1f8:	23fe      	movs	r3, #254	@ 0xfe
 800b1fa:	059b      	lsls	r3, r3, #22
 800b1fc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800b1fe:	493f      	ldr	r1, [pc, #252]	@ (800b2fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b200:	6978      	ldr	r0, [r7, #20]
 800b202:	f7f5 f9a9 	bl	8000558 <__aeabi_fcmpgt>
 800b206:	1e03      	subs	r3, r0, #0
 800b208:	d010      	beq.n	800b22c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800b20a:	493c      	ldr	r1, [pc, #240]	@ (800b2fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b20c:	6978      	ldr	r0, [r7, #20]
 800b20e:	f7f5 fce1 	bl	8000bd4 <__aeabi_fdiv>
 800b212:	1c03      	adds	r3, r0, #0
 800b214:	1c1c      	adds	r4, r3, #0
 800b216:	4939      	ldr	r1, [pc, #228]	@ (800b2fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b218:	6978      	ldr	r0, [r7, #20]
 800b21a:	f7f5 fcdb 	bl	8000bd4 <__aeabi_fdiv>
 800b21e:	1c03      	adds	r3, r0, #0
 800b220:	1c19      	adds	r1, r3, #0
 800b222:	1c20      	adds	r0, r4, #0
 800b224:	f7f5 febc 	bl	8000fa0 <__aeabi_fmul>
 800b228:	1c03      	adds	r3, r0, #0
 800b22a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800b230:	1c19      	adds	r1, r3, #0
 800b232:	2085      	movs	r0, #133	@ 0x85
 800b234:	05c0      	lsls	r0, r0, #23
 800b236:	f7f5 fff1 	bl	800121c <__aeabi_fsub>
 800b23a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800b23c:	6939      	ldr	r1, [r7, #16]
 800b23e:	1c18      	adds	r0, r3, #0
 800b240:	f7f5 feae 	bl	8000fa0 <__aeabi_fmul>
 800b244:	1c03      	adds	r3, r0, #0
 800b246:	1c18      	adds	r0, r3, #0
 800b248:	f018 f820 	bl	802328c <sqrtf>
 800b24c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b256:	2185      	movs	r1, #133	@ 0x85
 800b258:	05c9      	lsls	r1, r1, #23
 800b25a:	6938      	ldr	r0, [r7, #16]
 800b25c:	f7f5 fea0 	bl	8000fa0 <__aeabi_fmul>
 800b260:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800b262:	1c19      	adds	r1, r3, #0
 800b264:	1c28      	adds	r0, r5, #0
 800b266:	f7f5 fcb5 	bl	8000bd4 <__aeabi_fdiv>
 800b26a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b26c:	1c19      	adds	r1, r3, #0
 800b26e:	1c20      	adds	r0, r4, #0
 800b270:	f7f5 fe96 	bl	8000fa0 <__aeabi_fmul>
 800b274:	1c03      	adds	r3, r0, #0
 800b276:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b27c:	68f9      	ldr	r1, [r7, #12]
 800b27e:	1c18      	adds	r0, r3, #0
 800b280:	f7f5 fe8e 	bl	8000fa0 <__aeabi_fmul>
 800b284:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800b286:	6939      	ldr	r1, [r7, #16]
 800b288:	1c18      	adds	r0, r3, #0
 800b28a:	f7f5 fca3 	bl	8000bd4 <__aeabi_fdiv>
 800b28e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800b290:	68f9      	ldr	r1, [r7, #12]
 800b292:	1c18      	adds	r0, r3, #0
 800b294:	f7f5 fe84 	bl	8000fa0 <__aeabi_fmul>
 800b298:	1c03      	adds	r3, r0, #0
             sqrtf(
 800b29a:	1c19      	adds	r1, r3, #0
 800b29c:	1c20      	adds	r0, r4, #0
 800b29e:	f7f5 fb0f 	bl	80008c0 <__aeabi_fadd>
 800b2a2:	1c03      	adds	r3, r0, #0
 800b2a4:	1c18      	adds	r0, r3, #0
 800b2a6:	f017 fff1 	bl	802328c <sqrtf>
 800b2aa:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b2ac:	1c19      	adds	r1, r3, #0
 800b2ae:	1c30      	adds	r0, r6, #0
 800b2b0:	f7f5 fe76 	bl	8000fa0 <__aeabi_fmul>
 800b2b4:	1c03      	adds	r3, r0, #0
 800b2b6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2c4:	68f9      	ldr	r1, [r7, #12]
 800b2c6:	1c18      	adds	r0, r3, #0
 800b2c8:	f7f5 fe6a 	bl	8000fa0 <__aeabi_fmul>
 800b2cc:	1c03      	adds	r3, r0, #0
 800b2ce:	2182      	movs	r1, #130	@ 0x82
 800b2d0:	05c9      	lsls	r1, r1, #23
 800b2d2:	1c18      	adds	r0, r3, #0
 800b2d4:	f7f5 fc7e 	bl	8000bd4 <__aeabi_fdiv>
 800b2d8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800b2da:	1c19      	adds	r1, r3, #0
 800b2dc:	1c20      	adds	r0, r4, #0
 800b2de:	f7f5 faef 	bl	80008c0 <__aeabi_fadd>
 800b2e2:	1c03      	adds	r3, r0, #0
 800b2e4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b2ea:	46c0      	nop			@ (mov r8, r8)
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	b007      	add	sp, #28
 800b2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f2:	46c0      	nop			@ (mov r8, r8)
 800b2f4:	42c80000 	.word	0x42c80000
 800b2f8:	c2c80000 	.word	0xc2c80000
 800b2fc:	44b40000 	.word	0x44b40000

0800b300 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b318:	46c0      	nop			@ (mov r8, r8)
 800b31a:	46bd      	mov	sp, r7
 800b31c:	b004      	add	sp, #16
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800b320:	b590      	push	{r4, r7, lr}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b332:	1c19      	adds	r1, r3, #0
 800b334:	6838      	ldr	r0, [r7, #0]
 800b336:	f7f5 ff71 	bl	800121c <__aeabi_fsub>
 800b33a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b33c:	1c19      	adds	r1, r3, #0
 800b33e:	1c20      	adds	r0, r4, #0
 800b340:	f7f5 fe2e 	bl	8000fa0 <__aeabi_fmul>
 800b344:	1c03      	adds	r3, r0, #0
 800b346:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800b348:	4912      	ldr	r1, [pc, #72]	@ (800b394 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7f5 f8f0 	bl	8000530 <__aeabi_fcmplt>
 800b350:	1e03      	subs	r3, r0, #0
 800b352:	d002      	beq.n	800b35a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800b354:	23fe      	movs	r3, #254	@ 0xfe
 800b356:	059b      	lsls	r3, r3, #22
 800b358:	e018      	b.n	800b38c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800b35a:	490f      	ldr	r1, [pc, #60]	@ (800b398 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7f5 f8fb 	bl	8000558 <__aeabi_fcmpgt>
 800b362:	1e03      	subs	r3, r0, #0
 800b364:	d001      	beq.n	800b36a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800b366:	2300      	movs	r3, #0
 800b368:	e010      	b.n	800b38c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	1c18      	adds	r0, r3, #0
 800b36e:	f017 ff65 	bl	802323c <expf>
 800b372:	1c03      	adds	r3, r0, #0
 800b374:	21fe      	movs	r1, #254	@ 0xfe
 800b376:	0589      	lsls	r1, r1, #22
 800b378:	1c18      	adds	r0, r3, #0
 800b37a:	f7f5 faa1 	bl	80008c0 <__aeabi_fadd>
 800b37e:	1c03      	adds	r3, r0, #0
 800b380:	1c19      	adds	r1, r3, #0
 800b382:	20fe      	movs	r0, #254	@ 0xfe
 800b384:	0580      	lsls	r0, r0, #22
 800b386:	f7f5 fc25 	bl	8000bd4 <__aeabi_fdiv>
 800b38a:	1c03      	adds	r3, r0, #0
    }
}
 800b38c:	1c18      	adds	r0, r3, #0
 800b38e:	46bd      	mov	sp, r7
 800b390:	b005      	add	sp, #20
 800b392:	bd90      	pop	{r4, r7, pc}
 800b394:	c2480000 	.word	0xc2480000
 800b398:	42480000 	.word	0x42480000

0800b39c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b3b4:	46c0      	nop			@ (mov r8, r8)
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	b004      	add	sp, #16
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800b3bc:	b590      	push	{r4, r7, lr}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d114      	bne.n	800b3f8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3d2:	1c19      	adds	r1, r3, #0
 800b3d4:	6838      	ldr	r0, [r7, #0]
 800b3d6:	f7f5 ff21 	bl	800121c <__aeabi_fsub>
 800b3da:	1c03      	adds	r3, r0, #0
 800b3dc:	4918      	ldr	r1, [pc, #96]	@ (800b440 <GasIndexAlgorithm__mox_model__process+0x84>)
 800b3de:	1c18      	adds	r0, r3, #0
 800b3e0:	f7f5 fbf8 	bl	8000bd4 <__aeabi_fdiv>
 800b3e4:	1c03      	adds	r3, r0, #0
 800b3e6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800b3ec:	1c19      	adds	r1, r3, #0
 800b3ee:	1c10      	adds	r0, r2, #0
 800b3f0:	f7f5 fdd6 	bl	8000fa0 <__aeabi_fmul>
 800b3f4:	1c03      	adds	r3, r0, #0
 800b3f6:	e01f      	b.n	800b438 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3fc:	1c19      	adds	r1, r3, #0
 800b3fe:	6838      	ldr	r0, [r7, #0]
 800b400:	f7f5 ff0c 	bl	800121c <__aeabi_fsub>
 800b404:	1c03      	adds	r3, r0, #0
 800b406:	1c1a      	adds	r2, r3, #0
 800b408:	2380      	movs	r3, #128	@ 0x80
 800b40a:	061b      	lsls	r3, r3, #24
 800b40c:	4053      	eors	r3, r2
 800b40e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b414:	490b      	ldr	r1, [pc, #44]	@ (800b444 <GasIndexAlgorithm__mox_model__process+0x88>)
 800b416:	1c18      	adds	r0, r3, #0
 800b418:	f7f5 fa52 	bl	80008c0 <__aeabi_fadd>
 800b41c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b41e:	1c19      	adds	r1, r3, #0
 800b420:	1c20      	adds	r0, r4, #0
 800b422:	f7f5 fbd7 	bl	8000bd4 <__aeabi_fdiv>
 800b426:	1c03      	adds	r3, r0, #0
 800b428:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800b42e:	1c19      	adds	r1, r3, #0
 800b430:	1c10      	adds	r0, r2, #0
 800b432:	f7f5 fdb5 	bl	8000fa0 <__aeabi_fmul>
 800b436:	1c03      	adds	r3, r0, #0
    }
}
 800b438:	1c18      	adds	r0, r3, #0
 800b43a:	46bd      	mov	sp, r7
 800b43c:	b003      	add	sp, #12
 800b43e:	bd90      	pop	{r4, r7, pc}
 800b440:	44fa0000 	.word	0x44fa0000
 800b444:	435c0000 	.word	0x435c0000

0800b448 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2180      	movs	r1, #128	@ 0x80
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2184      	movs	r1, #132	@ 0x84
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2188      	movs	r1, #136	@ 0x88
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	505a      	str	r2, [r3, r1]
}
 800b46e:	46c0      	nop			@ (mov r8, r8)
 800b470:	46bd      	mov	sp, r7
 800b472:	b004      	add	sp, #16
 800b474:	bd80      	pop	{r7, pc}
	...

0800b478 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800b478:	b590      	push	{r4, r7, lr}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2280      	movs	r2, #128	@ 0x80
 800b486:	589c      	ldr	r4, [r3, r2]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2284      	movs	r2, #132	@ 0x84
 800b48c:	589b      	ldr	r3, [r3, r2]
 800b48e:	1c19      	adds	r1, r3, #0
 800b490:	6838      	ldr	r0, [r7, #0]
 800b492:	f7f5 fec3 	bl	800121c <__aeabi_fsub>
 800b496:	1c03      	adds	r3, r0, #0
 800b498:	1c19      	adds	r1, r3, #0
 800b49a:	1c20      	adds	r0, r4, #0
 800b49c:	f7f5 fd80 	bl	8000fa0 <__aeabi_fmul>
 800b4a0:	1c03      	adds	r3, r0, #0
 800b4a2:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b4a4:	4940      	ldr	r1, [pc, #256]	@ (800b5a8 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b4a6:	68b8      	ldr	r0, [r7, #8]
 800b4a8:	f7f5 f842 	bl	8000530 <__aeabi_fcmplt>
 800b4ac:	1e03      	subs	r3, r0, #0
 800b4ae:	d001      	beq.n	800b4b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b4b0:	4b3e      	ldr	r3, [pc, #248]	@ (800b5ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b4b2:	e075      	b.n	800b5a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b4b4:	493e      	ldr	r1, [pc, #248]	@ (800b5b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b4b6:	68b8      	ldr	r0, [r7, #8]
 800b4b8:	f7f5 f84e 	bl	8000558 <__aeabi_fcmpgt>
 800b4bc:	1e03      	subs	r3, r0, #0
 800b4be:	d001      	beq.n	800b4c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e06d      	b.n	800b5a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6838      	ldr	r0, [r7, #0]
 800b4c8:	f7f5 f850 	bl	800056c <__aeabi_fcmpge>
 800b4cc:	1e03      	subs	r3, r0, #0
 800b4ce:	d047      	beq.n	800b560 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2288      	movs	r2, #136	@ 0x88
 800b4d4:	589b      	ldr	r3, [r3, r2]
 800b4d6:	21fe      	movs	r1, #254	@ 0xfe
 800b4d8:	0589      	lsls	r1, r1, #22
 800b4da:	1c18      	adds	r0, r3, #0
 800b4dc:	f7f5 f822 	bl	8000524 <__aeabi_fcmpeq>
 800b4e0:	1e03      	subs	r3, r0, #0
 800b4e2:	d00e      	beq.n	800b502 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	1c19      	adds	r1, r3, #0
 800b4ea:	20fe      	movs	r0, #254	@ 0xfe
 800b4ec:	0580      	lsls	r0, r0, #22
 800b4ee:	f7f5 fe95 	bl	800121c <__aeabi_fsub>
 800b4f2:	1c03      	adds	r3, r0, #0
 800b4f4:	492f      	ldr	r1, [pc, #188]	@ (800b5b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b4f6:	1c18      	adds	r0, r3, #0
 800b4f8:	f7f5 fd52 	bl	8000fa0 <__aeabi_fmul>
 800b4fc:	1c03      	adds	r3, r0, #0
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	e012      	b.n	800b528 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	492c      	ldr	r1, [pc, #176]	@ (800b5b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b508:	1c18      	adds	r0, r3, #0
 800b50a:	f7f5 fd49 	bl	8000fa0 <__aeabi_fmul>
 800b50e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b510:	1c19      	adds	r1, r3, #0
 800b512:	4826      	ldr	r0, [pc, #152]	@ (800b5ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b514:	f7f5 fe82 	bl	800121c <__aeabi_fsub>
 800b518:	1c03      	adds	r3, r0, #0
 800b51a:	2181      	movs	r1, #129	@ 0x81
 800b51c:	05c9      	lsls	r1, r1, #23
 800b51e:	1c18      	adds	r0, r3, #0
 800b520:	f7f5 fb58 	bl	8000bd4 <__aeabi_fdiv>
 800b524:	1c03      	adds	r3, r0, #0
 800b526:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b528:	4920      	ldr	r1, [pc, #128]	@ (800b5ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f7f5 f9c8 	bl	80008c0 <__aeabi_fadd>
 800b530:	1c03      	adds	r3, r0, #0
 800b532:	1c1c      	adds	r4, r3, #0
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	1c18      	adds	r0, r3, #0
 800b538:	f017 fe80 	bl	802323c <expf>
 800b53c:	1c03      	adds	r3, r0, #0
 800b53e:	21fe      	movs	r1, #254	@ 0xfe
 800b540:	0589      	lsls	r1, r1, #22
 800b542:	1c18      	adds	r0, r3, #0
 800b544:	f7f5 f9bc 	bl	80008c0 <__aeabi_fadd>
 800b548:	1c03      	adds	r3, r0, #0
 800b54a:	1c19      	adds	r1, r3, #0
 800b54c:	1c20      	adds	r0, r4, #0
 800b54e:	f7f5 fb41 	bl	8000bd4 <__aeabi_fdiv>
 800b552:	1c03      	adds	r3, r0, #0
 800b554:	68f9      	ldr	r1, [r7, #12]
 800b556:	1c18      	adds	r0, r3, #0
 800b558:	f7f5 fe60 	bl	800121c <__aeabi_fsub>
 800b55c:	1c03      	adds	r3, r0, #0
 800b55e:	e01f      	b.n	800b5a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2188      	movs	r1, #136	@ 0x88
 800b568:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b56a:	1c19      	adds	r1, r3, #0
 800b56c:	1c10      	adds	r0, r2, #0
 800b56e:	f7f5 fb31 	bl	8000bd4 <__aeabi_fdiv>
 800b572:	1c03      	adds	r3, r0, #0
 800b574:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	1c18      	adds	r0, r3, #0
 800b57a:	f017 fe5f 	bl	802323c <expf>
 800b57e:	1c03      	adds	r3, r0, #0
 800b580:	21fe      	movs	r1, #254	@ 0xfe
 800b582:	0589      	lsls	r1, r1, #22
 800b584:	1c18      	adds	r0, r3, #0
 800b586:	f7f5 f99b 	bl	80008c0 <__aeabi_fadd>
 800b58a:	1c03      	adds	r3, r0, #0
 800b58c:	1c19      	adds	r1, r3, #0
 800b58e:	4807      	ldr	r0, [pc, #28]	@ (800b5ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b590:	f7f5 fb20 	bl	8000bd4 <__aeabi_fdiv>
 800b594:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b596:	1c19      	adds	r1, r3, #0
 800b598:	1c20      	adds	r0, r4, #0
 800b59a:	f7f5 fd01 	bl	8000fa0 <__aeabi_fmul>
 800b59e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b5a0:	1c18      	adds	r0, r3, #0
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	b005      	add	sp, #20
 800b5a6:	bd90      	pop	{r4, r7, pc}
 800b5a8:	c2480000 	.word	0xc2480000
 800b5ac:	43fa0000 	.word	0x43fa0000
 800b5b0:	42480000 	.word	0x42480000
 800b5b4:	3f8041ab 	.word	0x3f8041ab
 800b5b8:	40a00000 	.word	0x40a00000

0800b5bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b5bc:	b590      	push	{r4, r7, lr}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	4913      	ldr	r1, [pc, #76]	@ (800b61c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b5ce:	1c18      	adds	r0, r3, #0
 800b5d0:	f7f5 f976 	bl	80008c0 <__aeabi_fadd>
 800b5d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b5d6:	1c19      	adds	r1, r3, #0
 800b5d8:	1c20      	adds	r0, r4, #0
 800b5da:	f7f5 fafb 	bl	8000bd4 <__aeabi_fdiv>
 800b5de:	1c03      	adds	r3, r0, #0
 800b5e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	228c      	movs	r2, #140	@ 0x8c
 800b5e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	490b      	ldr	r1, [pc, #44]	@ (800b620 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b5f2:	1c18      	adds	r0, r3, #0
 800b5f4:	f7f5 f964 	bl	80008c0 <__aeabi_fadd>
 800b5f8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b5fa:	1c19      	adds	r1, r3, #0
 800b5fc:	1c20      	adds	r0, r4, #0
 800b5fe:	f7f5 fae9 	bl	8000bd4 <__aeabi_fdiv>
 800b602:	1c03      	adds	r3, r0, #0
 800b604:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2290      	movs	r2, #144	@ 0x90
 800b60a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2294      	movs	r2, #148	@ 0x94
 800b610:	2100      	movs	r1, #0
 800b612:	5499      	strb	r1, [r3, r2]
}
 800b614:	46c0      	nop			@ (mov r8, r8)
 800b616:	46bd      	mov	sp, r7
 800b618:	b003      	add	sp, #12
 800b61a:	bd90      	pop	{r4, r7, pc}
 800b61c:	41a00000 	.word	0x41a00000
 800b620:	43fa0000 	.word	0x43fa0000

0800b624 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b624:	b590      	push	{r4, r7, lr}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2294      	movs	r2, #148	@ 0x94
 800b632:	5c9b      	ldrb	r3, [r3, r2]
 800b634:	2201      	movs	r2, #1
 800b636:	4053      	eors	r3, r2
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00f      	beq.n	800b65e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2198      	movs	r1, #152	@ 0x98
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	219c      	movs	r1, #156	@ 0x9c
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	21a0      	movs	r1, #160	@ 0xa0
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2294      	movs	r2, #148	@ 0x94
 800b65a:	2101      	movs	r1, #1
 800b65c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	228c      	movs	r2, #140	@ 0x8c
 800b662:	589b      	ldr	r3, [r3, r2]
 800b664:	1c19      	adds	r1, r3, #0
 800b666:	20fe      	movs	r0, #254	@ 0xfe
 800b668:	0580      	lsls	r0, r0, #22
 800b66a:	f7f5 fdd7 	bl	800121c <__aeabi_fsub>
 800b66e:	1c03      	adds	r3, r0, #0
 800b670:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2298      	movs	r2, #152	@ 0x98
 800b676:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b678:	1c19      	adds	r1, r3, #0
 800b67a:	f7f5 fc91 	bl	8000fa0 <__aeabi_fmul>
 800b67e:	1c03      	adds	r3, r0, #0
 800b680:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	228c      	movs	r2, #140	@ 0x8c
 800b686:	589b      	ldr	r3, [r3, r2]
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	1c18      	adds	r0, r3, #0
 800b68c:	f7f5 fc88 	bl	8000fa0 <__aeabi_fmul>
 800b690:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b692:	1c19      	adds	r1, r3, #0
 800b694:	1c20      	adds	r0, r4, #0
 800b696:	f7f5 f913 	bl	80008c0 <__aeabi_fadd>
 800b69a:	1c03      	adds	r3, r0, #0
 800b69c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2298      	movs	r2, #152	@ 0x98
 800b6a2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2290      	movs	r2, #144	@ 0x90
 800b6a8:	589b      	ldr	r3, [r3, r2]
 800b6aa:	1c19      	adds	r1, r3, #0
 800b6ac:	20fe      	movs	r0, #254	@ 0xfe
 800b6ae:	0580      	lsls	r0, r0, #22
 800b6b0:	f7f5 fdb4 	bl	800121c <__aeabi_fsub>
 800b6b4:	1c03      	adds	r3, r0, #0
 800b6b6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	229c      	movs	r2, #156	@ 0x9c
 800b6bc:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b6be:	1c19      	adds	r1, r3, #0
 800b6c0:	f7f5 fc6e 	bl	8000fa0 <__aeabi_fmul>
 800b6c4:	1c03      	adds	r3, r0, #0
 800b6c6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2290      	movs	r2, #144	@ 0x90
 800b6cc:	589b      	ldr	r3, [r3, r2]
 800b6ce:	6839      	ldr	r1, [r7, #0]
 800b6d0:	1c18      	adds	r0, r3, #0
 800b6d2:	f7f5 fc65 	bl	8000fa0 <__aeabi_fmul>
 800b6d6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b6d8:	1c19      	adds	r1, r3, #0
 800b6da:	1c20      	adds	r0, r4, #0
 800b6dc:	f7f5 f8f0 	bl	80008c0 <__aeabi_fadd>
 800b6e0:	1c03      	adds	r3, r0, #0
 800b6e2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	229c      	movs	r2, #156	@ 0x9c
 800b6e8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2298      	movs	r2, #152	@ 0x98
 800b6ee:	589a      	ldr	r2, [r3, r2]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	219c      	movs	r1, #156	@ 0x9c
 800b6f4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b6f6:	1c19      	adds	r1, r3, #0
 800b6f8:	1c10      	adds	r0, r2, #0
 800b6fa:	f7f5 fd8f 	bl	800121c <__aeabi_fsub>
 800b6fe:	1c03      	adds	r3, r0, #0
 800b700:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b702:	2100      	movs	r1, #0
 800b704:	6978      	ldr	r0, [r7, #20]
 800b706:	f7f4 ff13 	bl	8000530 <__aeabi_fcmplt>
 800b70a:	1e03      	subs	r3, r0, #0
 800b70c:	d004      	beq.n	800b718 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2280      	movs	r2, #128	@ 0x80
 800b712:	0612      	lsls	r2, r2, #24
 800b714:	4053      	eors	r3, r2
 800b716:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b718:	4923      	ldr	r1, [pc, #140]	@ (800b7a8 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b71a:	6978      	ldr	r0, [r7, #20]
 800b71c:	f7f5 fc40 	bl	8000fa0 <__aeabi_fmul>
 800b720:	1c03      	adds	r3, r0, #0
 800b722:	1c18      	adds	r0, r3, #0
 800b724:	f017 fd8a 	bl	802323c <expf>
 800b728:	1c03      	adds	r3, r0, #0
 800b72a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b72c:	491f      	ldr	r1, [pc, #124]	@ (800b7ac <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b72e:	6938      	ldr	r0, [r7, #16]
 800b730:	f7f5 fc36 	bl	8000fa0 <__aeabi_fmul>
 800b734:	1c03      	adds	r3, r0, #0
 800b736:	491e      	ldr	r1, [pc, #120]	@ (800b7b0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b738:	1c18      	adds	r0, r3, #0
 800b73a:	f7f5 f8c1 	bl	80008c0 <__aeabi_fadd>
 800b73e:	1c03      	adds	r3, r0, #0
 800b740:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685c      	ldr	r4, [r3, #4]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	68f9      	ldr	r1, [r7, #12]
 800b74c:	1c18      	adds	r0, r3, #0
 800b74e:	f7f5 f8b7 	bl	80008c0 <__aeabi_fadd>
 800b752:	1c03      	adds	r3, r0, #0
 800b754:	1c19      	adds	r1, r3, #0
 800b756:	1c20      	adds	r0, r4, #0
 800b758:	f7f5 fa3c 	bl	8000bd4 <__aeabi_fdiv>
 800b75c:	1c03      	adds	r3, r0, #0
 800b75e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	20fe      	movs	r0, #254	@ 0xfe
 800b764:	0580      	lsls	r0, r0, #22
 800b766:	f7f5 fd59 	bl	800121c <__aeabi_fsub>
 800b76a:	1c03      	adds	r3, r0, #0
 800b76c:	1c18      	adds	r0, r3, #0
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	22a0      	movs	r2, #160	@ 0xa0
 800b772:	589b      	ldr	r3, [r3, r2]
 800b774:	1c19      	adds	r1, r3, #0
 800b776:	f7f5 fc13 	bl	8000fa0 <__aeabi_fmul>
 800b77a:	1c03      	adds	r3, r0, #0
 800b77c:	1c1c      	adds	r4, r3, #0
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	68b8      	ldr	r0, [r7, #8]
 800b782:	f7f5 fc0d 	bl	8000fa0 <__aeabi_fmul>
 800b786:	1c03      	adds	r3, r0, #0
 800b788:	1c19      	adds	r1, r3, #0
 800b78a:	1c20      	adds	r0, r4, #0
 800b78c:	f7f5 f898 	bl	80008c0 <__aeabi_fadd>
 800b790:	1c03      	adds	r3, r0, #0
 800b792:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	22a0      	movs	r2, #160	@ 0xa0
 800b798:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	22a0      	movs	r2, #160	@ 0xa0
 800b79e:	589b      	ldr	r3, [r3, r2]
}
 800b7a0:	1c18      	adds	r0, r3, #0
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	b007      	add	sp, #28
 800b7a6:	bd90      	pop	{r4, r7, pc}
 800b7a8:	be4ccccd 	.word	0xbe4ccccd
 800b7ac:	43f00000 	.word	0x43f00000
 800b7b0:	41a00000 	.word	0x41a00000

0800b7b4 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	000a      	movs	r2, r1
 800b7be:	1cbb      	adds	r3, r7, #2
 800b7c0:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b7c2:	230d      	movs	r3, #13
 800b7c4:	18fb      	adds	r3, r7, r3
 800b7c6:	22ff      	movs	r2, #255	@ 0xff
 800b7c8:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b7ca:	230e      	movs	r3, #14
 800b7cc:	18fb      	adds	r3, r7, r3
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	e037      	b.n	800b844 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b7d4:	230e      	movs	r3, #14
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	18d3      	adds	r3, r2, r3
 800b7de:	7819      	ldrb	r1, [r3, #0]
 800b7e0:	220d      	movs	r2, #13
 800b7e2:	18bb      	adds	r3, r7, r2
 800b7e4:	18ba      	adds	r2, r7, r2
 800b7e6:	7812      	ldrb	r2, [r2, #0]
 800b7e8:	404a      	eors	r2, r1
 800b7ea:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b7ec:	230c      	movs	r3, #12
 800b7ee:	18fb      	adds	r3, r7, r3
 800b7f0:	2208      	movs	r2, #8
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	e01b      	b.n	800b82e <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b7f6:	210d      	movs	r1, #13
 800b7f8:	187b      	adds	r3, r7, r1
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	b25b      	sxtb	r3, r3
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	da09      	bge.n	800b816 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b802:	187b      	adds	r3, r7, r1
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	b25b      	sxtb	r3, r3
 800b80a:	2231      	movs	r2, #49	@ 0x31
 800b80c:	4053      	eors	r3, r2
 800b80e:	b25a      	sxtb	r2, r3
 800b810:	187b      	adds	r3, r7, r1
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	e005      	b.n	800b822 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b816:	230d      	movs	r3, #13
 800b818:	18fa      	adds	r2, r7, r3
 800b81a:	18fb      	adds	r3, r7, r3
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	18db      	adds	r3, r3, r3
 800b820:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b822:	220c      	movs	r2, #12
 800b824:	18bb      	adds	r3, r7, r2
 800b826:	18ba      	adds	r2, r7, r2
 800b828:	7812      	ldrb	r2, [r2, #0]
 800b82a:	3a01      	subs	r2, #1
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	230c      	movs	r3, #12
 800b830:	18fb      	adds	r3, r7, r3
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1de      	bne.n	800b7f6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b838:	220e      	movs	r2, #14
 800b83a:	18bb      	adds	r3, r7, r2
 800b83c:	18ba      	adds	r2, r7, r2
 800b83e:	8812      	ldrh	r2, [r2, #0]
 800b840:	3201      	adds	r2, #1
 800b842:	801a      	strh	r2, [r3, #0]
 800b844:	230e      	movs	r3, #14
 800b846:	18fa      	adds	r2, r7, r3
 800b848:	1cbb      	adds	r3, r7, #2
 800b84a:	8812      	ldrh	r2, [r2, #0]
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d3c0      	bcc.n	800b7d4 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b852:	230d      	movs	r3, #13
 800b854:	18fb      	adds	r3, r7, r3
 800b856:	781b      	ldrb	r3, [r3, #0]
}
 800b858:	0018      	movs	r0, r3
 800b85a:	46bd      	mov	sp, r7
 800b85c:	b004      	add	sp, #16
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	0008      	movs	r0, r1
 800b86a:	0011      	movs	r1, r2
 800b86c:	1cbb      	adds	r3, r7, #2
 800b86e:	1c02      	adds	r2, r0, #0
 800b870:	801a      	strh	r2, [r3, #0]
 800b872:	1c7b      	adds	r3, r7, #1
 800b874:	1c0a      	adds	r2, r1, #0
 800b876:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b878:	1cbb      	adds	r3, r7, #2
 800b87a:	881a      	ldrh	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	0011      	movs	r1, r2
 800b880:	0018      	movs	r0, r3
 800b882:	f7ff ff97 	bl	800b7b4 <sensirion_i2c_generate_crc>
 800b886:	0003      	movs	r3, r0
 800b888:	001a      	movs	r2, r3
 800b88a:	1c7b      	adds	r3, r7, #1
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	4293      	cmp	r3, r2
 800b890:	d001      	beq.n	800b896 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e000      	b.n	800b898 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b896:	2300      	movs	r3, #0
}
 800b898:	0018      	movs	r0, r3
 800b89a:	46bd      	mov	sp, r7
 800b89c:	b002      	add	sp, #8
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	0008      	movs	r0, r1
 800b8aa:	0011      	movs	r1, r2
 800b8ac:	1cbb      	adds	r3, r7, #2
 800b8ae:	1c02      	adds	r2, r0, #0
 800b8b0:	801a      	strh	r2, [r3, #0]
 800b8b2:	003b      	movs	r3, r7
 800b8b4:	1c0a      	adds	r2, r1, #0
 800b8b6:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b8b8:	003b      	movs	r3, r7
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	0a1b      	lsrs	r3, r3, #8
 800b8be:	b299      	uxth	r1, r3
 800b8c0:	1cbb      	adds	r3, r7, #2
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	1cba      	adds	r2, r7, #2
 800b8c6:	1c58      	adds	r0, r3, #1
 800b8c8:	8010      	strh	r0, [r2, #0]
 800b8ca:	001a      	movs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	189b      	adds	r3, r3, r2
 800b8d0:	b2ca      	uxtb	r2, r1
 800b8d2:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b8d4:	1cbb      	adds	r3, r7, #2
 800b8d6:	881b      	ldrh	r3, [r3, #0]
 800b8d8:	1cba      	adds	r2, r7, #2
 800b8da:	1c59      	adds	r1, r3, #1
 800b8dc:	8011      	strh	r1, [r2, #0]
 800b8de:	001a      	movs	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	189b      	adds	r3, r3, r2
 800b8e4:	003a      	movs	r2, r7
 800b8e6:	8812      	ldrh	r2, [r2, #0]
 800b8e8:	b2d2      	uxtb	r2, r2
 800b8ea:	701a      	strb	r2, [r3, #0]
    return offset;
 800b8ec:	1cbb      	adds	r3, r7, #2
 800b8ee:	881b      	ldrh	r3, [r3, #0]
}
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	b002      	add	sp, #8
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b8f8:	b590      	push	{r4, r7, lr}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	0008      	movs	r0, r1
 800b902:	0011      	movs	r1, r2
 800b904:	1cbb      	adds	r3, r7, #2
 800b906:	1c02      	adds	r2, r0, #0
 800b908:	801a      	strh	r2, [r3, #0]
 800b90a:	003b      	movs	r3, r7
 800b90c:	1c0a      	adds	r2, r1, #0
 800b90e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b910:	003b      	movs	r3, r7
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	0a1b      	lsrs	r3, r3, #8
 800b916:	b299      	uxth	r1, r3
 800b918:	1cbb      	adds	r3, r7, #2
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	1cba      	adds	r2, r7, #2
 800b91e:	1c58      	adds	r0, r3, #1
 800b920:	8010      	strh	r0, [r2, #0]
 800b922:	001a      	movs	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	189b      	adds	r3, r3, r2
 800b928:	b2ca      	uxtb	r2, r1
 800b92a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b92c:	1cbb      	adds	r3, r7, #2
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	1cba      	adds	r2, r7, #2
 800b932:	1c59      	adds	r1, r3, #1
 800b934:	8011      	strh	r1, [r2, #0]
 800b936:	001a      	movs	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	189b      	adds	r3, r3, r2
 800b93c:	003a      	movs	r2, r7
 800b93e:	8812      	ldrh	r2, [r2, #0]
 800b940:	b2d2      	uxtb	r2, r2
 800b942:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b944:	1cbb      	adds	r3, r7, #2
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	3b02      	subs	r3, #2
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b94e:	1cbb      	adds	r3, r7, #2
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	18d4      	adds	r4, r2, r3
 800b956:	2102      	movs	r1, #2
 800b958:	f7ff ff2c 	bl	800b7b4 <sensirion_i2c_generate_crc>
 800b95c:	0003      	movs	r3, r0
 800b95e:	7023      	strb	r3, [r4, #0]
    offset++;
 800b960:	1cbb      	adds	r3, r7, #2
 800b962:	881a      	ldrh	r2, [r3, #0]
 800b964:	1cbb      	adds	r3, r7, #2
 800b966:	3201      	adds	r2, #1
 800b968:	801a      	strh	r2, [r3, #0]

    return offset;
 800b96a:	1cbb      	adds	r3, r7, #2
 800b96c:	881b      	ldrh	r3, [r3, #0]
}
 800b96e:	0018      	movs	r0, r3
 800b970:	46bd      	mov	sp, r7
 800b972:	b003      	add	sp, #12
 800b974:	bd90      	pop	{r4, r7, pc}

0800b976 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b976:	b580      	push	{r7, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	0008      	movs	r0, r1
 800b980:	0011      	movs	r1, r2
 800b982:	1cbb      	adds	r3, r7, #2
 800b984:	1c02      	adds	r2, r0, #0
 800b986:	801a      	strh	r2, [r3, #0]
 800b988:	003b      	movs	r3, r7
 800b98a:	1c0a      	adds	r2, r1, #0
 800b98c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b98e:	003b      	movs	r3, r7
 800b990:	881a      	ldrh	r2, [r3, #0]
 800b992:	1cbb      	adds	r3, r7, #2
 800b994:	8819      	ldrh	r1, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	0018      	movs	r0, r3
 800b99a:	f7ff ffad 	bl	800b8f8 <sensirion_i2c_add_uint16_t_to_buffer>
 800b99e:	0003      	movs	r3, r0
}
 800b9a0:	0018      	movs	r0, r3
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	b002      	add	sp, #8
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6039      	str	r1, [r7, #0]
 800b9b0:	0011      	movs	r1, r2
 800b9b2:	1dfb      	adds	r3, r7, #7
 800b9b4:	1c02      	adds	r2, r0, #0
 800b9b6:	701a      	strb	r2, [r3, #0]
 800b9b8:	1d3b      	adds	r3, r7, #4
 800b9ba:	1c0a      	adds	r2, r1, #0
 800b9bc:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b9be:	1d3b      	adds	r3, r7, #4
 800b9c0:	881a      	ldrh	r2, [r3, #0]
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	1dfb      	adds	r3, r7, #7
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	0018      	movs	r0, r3
 800b9ca:	f7fe f9d5 	bl	8009d78 <sensirion_i2c_hal_write>
 800b9ce:	0003      	movs	r3, r0
}
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	b002      	add	sp, #8
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b9d8:	b5b0      	push	{r4, r5, r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6039      	str	r1, [r7, #0]
 800b9e0:	0011      	movs	r1, r2
 800b9e2:	1dfb      	adds	r3, r7, #7
 800b9e4:	1c02      	adds	r2, r0, #0
 800b9e6:	701a      	strb	r2, [r3, #0]
 800b9e8:	1d3b      	adds	r3, r7, #4
 800b9ea:	1c0a      	adds	r2, r1, #0
 800b9ec:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b9ee:	1d3b      	adds	r3, r7, #4
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	085b      	lsrs	r3, r3, #1
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	220a      	movs	r2, #10
 800b9f8:	18ba      	adds	r2, r7, r2
 800b9fa:	1c19      	adds	r1, r3, #0
 800b9fc:	1c0b      	adds	r3, r1, #0
 800b9fe:	18db      	adds	r3, r3, r3
 800ba00:	185b      	adds	r3, r3, r1
 800ba02:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800ba04:	1d3b      	adds	r3, r7, #4
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800ba12:	2304      	movs	r3, #4
 800ba14:	e06b      	b.n	800baee <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800ba16:	230a      	movs	r3, #10
 800ba18:	18fb      	adds	r3, r7, r3
 800ba1a:	881a      	ldrh	r2, [r3, #0]
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	1dfb      	adds	r3, r7, #7
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	0018      	movs	r0, r3
 800ba24:	f7fe f988 	bl	8009d38 <sensirion_i2c_hal_read>
 800ba28:	0003      	movs	r3, r0
 800ba2a:	001a      	movs	r2, r3
 800ba2c:	2108      	movs	r1, #8
 800ba2e:	187b      	adds	r3, r7, r1
 800ba30:	801a      	strh	r2, [r3, #0]
    if (error) {
 800ba32:	000a      	movs	r2, r1
 800ba34:	18bb      	adds	r3, r7, r2
 800ba36:	2100      	movs	r1, #0
 800ba38:	5e5b      	ldrsh	r3, [r3, r1]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800ba3e:	18bb      	adds	r3, r7, r2
 800ba40:	2200      	movs	r2, #0
 800ba42:	5e9b      	ldrsh	r3, [r3, r2]
 800ba44:	e053      	b.n	800baee <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800ba46:	230e      	movs	r3, #14
 800ba48:	18fb      	adds	r3, r7, r3
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	801a      	strh	r2, [r3, #0]
 800ba4e:	230c      	movs	r3, #12
 800ba50:	18fb      	adds	r3, r7, r3
 800ba52:	2200      	movs	r2, #0
 800ba54:	801a      	strh	r2, [r3, #0]
 800ba56:	e041      	b.n	800badc <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800ba58:	210e      	movs	r1, #14
 800ba5a:	187b      	adds	r3, r7, r1
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800ba62:	187b      	adds	r3, r7, r1
 800ba64:	881b      	ldrh	r3, [r3, #0]
 800ba66:	3302      	adds	r3, #2
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	001a      	movs	r2, r3
 800ba70:	2102      	movs	r1, #2
 800ba72:	f7ff fef5 	bl	800b860 <sensirion_i2c_check_crc>
 800ba76:	0003      	movs	r3, r0
 800ba78:	001a      	movs	r2, r3
 800ba7a:	2108      	movs	r1, #8
 800ba7c:	187b      	adds	r3, r7, r1
 800ba7e:	801a      	strh	r2, [r3, #0]
        if (error) {
 800ba80:	000a      	movs	r2, r1
 800ba82:	18bb      	adds	r3, r7, r2
 800ba84:	2100      	movs	r1, #0
 800ba86:	5e5b      	ldrsh	r3, [r3, r1]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d003      	beq.n	800ba94 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800ba8c:	18bb      	adds	r3, r7, r2
 800ba8e:	2200      	movs	r2, #0
 800ba90:	5e9b      	ldrsh	r3, [r3, r2]
 800ba92:	e02c      	b.n	800baee <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800ba94:	240e      	movs	r4, #14
 800ba96:	193b      	adds	r3, r7, r4
 800ba98:	881b      	ldrh	r3, [r3, #0]
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	18d2      	adds	r2, r2, r3
 800ba9e:	250c      	movs	r5, #12
 800baa0:	197b      	adds	r3, r7, r5
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	1979      	adds	r1, r7, r5
 800baa6:	1c58      	adds	r0, r3, #1
 800baa8:	8008      	strh	r0, [r1, #0]
 800baaa:	0019      	movs	r1, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	185b      	adds	r3, r3, r1
 800bab0:	7812      	ldrb	r2, [r2, #0]
 800bab2:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800bab4:	193b      	adds	r3, r7, r4
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	3301      	adds	r3, #1
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	18d2      	adds	r2, r2, r3
 800babe:	197b      	adds	r3, r7, r5
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	1979      	adds	r1, r7, r5
 800bac4:	1c58      	adds	r0, r3, #1
 800bac6:	8008      	strh	r0, [r1, #0]
 800bac8:	0019      	movs	r1, r3
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	185b      	adds	r3, r3, r1
 800bace:	7812      	ldrb	r2, [r2, #0]
 800bad0:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800bad2:	193b      	adds	r3, r7, r4
 800bad4:	193a      	adds	r2, r7, r4
 800bad6:	8812      	ldrh	r2, [r2, #0]
 800bad8:	3203      	adds	r2, #3
 800bada:	801a      	strh	r2, [r3, #0]
 800badc:	230e      	movs	r3, #14
 800bade:	18fa      	adds	r2, r7, r3
 800bae0:	230a      	movs	r3, #10
 800bae2:	18fb      	adds	r3, r7, r3
 800bae4:	8812      	ldrh	r2, [r2, #0]
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d3b5      	bcc.n	800ba58 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800baec:	2300      	movs	r3, #0
}
 800baee:	0018      	movs	r0, r3
 800baf0:	46bd      	mov	sp, r7
 800baf2:	b004      	add	sp, #16
 800baf4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800baf8 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800baf8:	b590      	push	{r4, r7, lr}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6039      	str	r1, [r7, #0]
 800bb00:	0011      	movs	r1, r2
 800bb02:	1dfb      	adds	r3, r7, #7
 800bb04:	1c02      	adds	r2, r0, #0
 800bb06:	701a      	strb	r2, [r3, #0]
 800bb08:	1dbb      	adds	r3, r7, #6
 800bb0a:	1c0a      	adds	r2, r1, #0
 800bb0c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800bb0e:	4b08      	ldr	r3, [pc, #32]	@ (800bb30 <ReadRegister+0x38>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d008      	beq.n	800bb28 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800bb16:	4b06      	ldr	r3, [pc, #24]	@ (800bb30 <ReadRegister+0x38>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	1dba      	adds	r2, r7, #6
 800bb1c:	7814      	ldrb	r4, [r2, #0]
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	1dfa      	adds	r2, r7, #7
 800bb22:	7810      	ldrb	r0, [r2, #0]
 800bb24:	0022      	movs	r2, r4
 800bb26:	4798      	blx	r3
  }
}
 800bb28:	46c0      	nop			@ (mov r8, r8)
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	b003      	add	sp, #12
 800bb2e:	bd90      	pop	{r4, r7, pc}
 800bb30:	20000cb4 	.word	0x20000cb4

0800bb34 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800bb34:	b590      	push	{r4, r7, lr}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6039      	str	r1, [r7, #0]
 800bb3c:	0011      	movs	r1, r2
 800bb3e:	1dfb      	adds	r3, r7, #7
 800bb40:	1c02      	adds	r2, r0, #0
 800bb42:	701a      	strb	r2, [r3, #0]
 800bb44:	1dbb      	adds	r3, r7, #6
 800bb46:	1c0a      	adds	r2, r1, #0
 800bb48:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800bb4a:	4b08      	ldr	r3, [pc, #32]	@ (800bb6c <WriteRegister+0x38>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d008      	beq.n	800bb64 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800bb52:	4b06      	ldr	r3, [pc, #24]	@ (800bb6c <WriteRegister+0x38>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	1dba      	adds	r2, r7, #6
 800bb58:	7814      	ldrb	r4, [r2, #0]
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	1dfa      	adds	r2, r7, #7
 800bb5e:	7810      	ldrb	r0, [r2, #0]
 800bb60:	0022      	movs	r2, r4
 800bb62:	4798      	blx	r3
  }
}
 800bb64:	46c0      	nop			@ (mov r8, r8)
 800bb66:	46bd      	mov	sp, r7
 800bb68:	b003      	add	sp, #12
 800bb6a:	bd90      	pop	{r4, r7, pc}
 800bb6c:	20000cb8 	.word	0x20000cb8

0800bb70 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800bb78:	f003 fb66 	bl	800f248 <HAL_GetTick>
 800bb7c:	0002      	movs	r2, r0
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	18d2      	adds	r2, r2, r3
 800bb82:	4b03      	ldr	r3, [pc, #12]	@ (800bb90 <setSGP40TimeStamp+0x20>)
 800bb84:	601a      	str	r2, [r3, #0]
}
 800bb86:	46c0      	nop			@ (mov r8, r8)
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	b002      	add	sp, #8
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	46c0      	nop			@ (mov r8, r8)
 800bb90:	20000cc8 	.word	0x20000cc8

0800bb94 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800bb98:	4b02      	ldr	r3, [pc, #8]	@ (800bba4 <ResetSGP40samplecounter+0x10>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	701a      	strb	r2, [r3, #0]
}
 800bb9e:	46c0      	nop			@ (mov r8, r8)
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	20000cc6 	.word	0x20000cc6

0800bba8 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800bbb2:	4b07      	ldr	r3, [pc, #28]	@ (800bbd0 <SGP_Init+0x28>)
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800bbb8:	4b06      	ldr	r3, [pc, #24]	@ (800bbd4 <SGP_Init+0x2c>)
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800bbbe:	4b06      	ldr	r3, [pc, #24]	@ (800bbd8 <SGP_Init+0x30>)
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	0018      	movs	r0, r3
 800bbc4:	f7fe ff70 	bl	800aaa8 <GasIndexAlgorithm_init>
}
 800bbc8:	46c0      	nop			@ (mov r8, r8)
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	b002      	add	sp, #8
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20000cb4 	.word	0x20000cb4
 800bbd4:	20000cb8 	.word	0x20000cb8
 800bbd8:	20000cd0 	.word	0x20000cd0

0800bbdc <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800bbe0:	4b07      	ldr	r3, [pc, #28]	@ (800bc00 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d004      	beq.n	800bbf2 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800bbe8:	4b06      	ldr	r3, [pc, #24]	@ (800bc04 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800bbea:	22fe      	movs	r2, #254	@ 0xfe
 800bbec:	0592      	lsls	r2, r2, #22
 800bbee:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800bbf0:	e002      	b.n	800bbf8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800bbf2:	4b04      	ldr	r3, [pc, #16]	@ (800bc04 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800bbf4:	4a04      	ldr	r2, [pc, #16]	@ (800bc08 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800bbf6:	605a      	str	r2, [r3, #4]
}
 800bbf8:	46c0      	nop			@ (mov r8, r8)
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	46c0      	nop			@ (mov r8, r8)
 800bc00:	20001c1d 	.word	0x20001c1d
 800bc04:	20000cd0 	.word	0x20000cd0
 800bc08:	44610000 	.word	0x44610000

0800bc0c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800bc10:	4b13      	ldr	r3, [pc, #76]	@ (800bc60 <SGP_StartMeasurement+0x54>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00d      	beq.n	800bc34 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bc18:	4b12      	ldr	r3, [pc, #72]	@ (800bc64 <SGP_StartMeasurement+0x58>)
 800bc1a:	2208      	movs	r2, #8
 800bc1c:	0019      	movs	r1, r3
 800bc1e:	2059      	movs	r0, #89	@ 0x59
 800bc20:	f7ff ff88 	bl	800bb34 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bc24:	f003 fb10 	bl	800f248 <HAL_GetTick>
 800bc28:	0003      	movs	r3, r0
 800bc2a:	331e      	adds	r3, #30
 800bc2c:	001a      	movs	r2, r3
 800bc2e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc68 <SGP_StartMeasurement+0x5c>)
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	e00c      	b.n	800bc4e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bc34:	4b0d      	ldr	r3, [pc, #52]	@ (800bc6c <SGP_StartMeasurement+0x60>)
 800bc36:	2208      	movs	r2, #8
 800bc38:	0019      	movs	r1, r3
 800bc3a:	2059      	movs	r0, #89	@ 0x59
 800bc3c:	f7ff ff7a 	bl	800bb34 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800bc40:	f003 fb02 	bl	800f248 <HAL_GetTick>
 800bc44:	0003      	movs	r3, r0
 800bc46:	33aa      	adds	r3, #170	@ 0xaa
 800bc48:	001a      	movs	r2, r3
 800bc4a:	4b09      	ldr	r3, [pc, #36]	@ (800bc70 <SGP_StartMeasurement+0x64>)
 800bc4c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800bc4e:	4b09      	ldr	r3, [pc, #36]	@ (800bc74 <SGP_StartMeasurement+0x68>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800bc54:	4b08      	ldr	r3, [pc, #32]	@ (800bc78 <SGP_StartMeasurement+0x6c>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	701a      	strb	r2, [r3, #0]
}
 800bc5a:	46c0      	nop			@ (mov r8, r8)
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20000d78 	.word	0x20000d78
 800bc64:	200000a0 	.word	0x200000a0
 800bc68:	200000b4 	.word	0x200000b4
 800bc6c:	20000098 	.word	0x20000098
 800bc70:	200000ac 	.word	0x200000ac
 800bc74:	20000ccc 	.word	0x20000ccc
 800bc78:	20000ccd 	.word	0x20000ccd

0800bc7c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800bc80:	4b04      	ldr	r3, [pc, #16]	@ (800bc94 <SGP_HeatedUp+0x18>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	0018      	movs	r0, r3
 800bc86:	f002 fe45 	bl	800e914 <TimestampIsReached>
 800bc8a:	0003      	movs	r3, r0
}
 800bc8c:	0018      	movs	r0, r3
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	46c0      	nop			@ (mov r8, r8)
 800bc94:	200000ac 	.word	0x200000ac

0800bc98 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800bc9c:	4b04      	ldr	r3, [pc, #16]	@ (800bcb0 <SGP_MeasurementReady+0x18>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	0018      	movs	r0, r3
 800bca2:	f002 fe37 	bl	800e914 <TimestampIsReached>
 800bca6:	0003      	movs	r3, r0
}
 800bca8:	0018      	movs	r0, r3
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	46c0      	nop			@ (mov r8, r8)
 800bcb0:	200000b4 	.word	0x200000b4

0800bcb4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800bcb8:	4b04      	ldr	r3, [pc, #16]	@ (800bccc <SGP_MeasurementDone+0x18>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	f002 fe29 	bl	800e914 <TimestampIsReached>
 800bcc2:	0003      	movs	r3, r0
}
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	46c0      	nop			@ (mov r8, r8)
 800bccc:	200000b0 	.word	0x200000b0

0800bcd0 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bcd4:	4b04      	ldr	r3, [pc, #16]	@ (800bce8 <SGP_TurnHeaterOff+0x18>)
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	0019      	movs	r1, r3
 800bcda:	2059      	movs	r0, #89	@ 0x59
 800bcdc:	f7ff ff2a 	bl	800bb34 <WriteRegister>
}
 800bce0:	46c0      	nop			@ (mov r8, r8)
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	46c0      	nop			@ (mov r8, r8)
 800bce8:	20000090 	.word	0x20000090

0800bcec <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800bcec:	b590      	push	{r4, r7, lr}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af02      	add	r7, sp, #8
 800bcf2:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800bcf4:	f7ff ffc2 	bl	800bc7c <SGP_HeatedUp>
 800bcf8:	1e03      	subs	r3, r0, #0
 800bcfa:	d032      	beq.n	800bd62 <SGP_GetMeasurementValues+0x76>
 800bcfc:	4b7f      	ldr	r3, [pc, #508]	@ (800befc <SGP_GetMeasurementValues+0x210>)
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2201      	movs	r2, #1
 800bd02:	4053      	eors	r3, r2
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d02b      	beq.n	800bd62 <SGP_GetMeasurementValues+0x76>
 800bd0a:	4b7d      	ldr	r3, [pc, #500]	@ (800bf00 <SGP_GetMeasurementValues+0x214>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	4053      	eors	r3, r2
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d024      	beq.n	800bd62 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800bd18:	4b78      	ldr	r3, [pc, #480]	@ (800befc <SGP_GetMeasurementValues+0x210>)
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800bd1e:	4b79      	ldr	r3, [pc, #484]	@ (800bf04 <SGP_GetMeasurementValues+0x218>)
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00d      	beq.n	800bd42 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bd26:	4b78      	ldr	r3, [pc, #480]	@ (800bf08 <SGP_GetMeasurementValues+0x21c>)
 800bd28:	2208      	movs	r2, #8
 800bd2a:	0019      	movs	r1, r3
 800bd2c:	2059      	movs	r0, #89	@ 0x59
 800bd2e:	f7ff ff01 	bl	800bb34 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bd32:	f003 fa89 	bl	800f248 <HAL_GetTick>
 800bd36:	0003      	movs	r3, r0
 800bd38:	331e      	adds	r3, #30
 800bd3a:	001a      	movs	r2, r3
 800bd3c:	4b73      	ldr	r3, [pc, #460]	@ (800bf0c <SGP_GetMeasurementValues+0x220>)
 800bd3e:	601a      	str	r2, [r3, #0]
 800bd40:	e00c      	b.n	800bd5c <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bd42:	4b73      	ldr	r3, [pc, #460]	@ (800bf10 <SGP_GetMeasurementValues+0x224>)
 800bd44:	2208      	movs	r2, #8
 800bd46:	0019      	movs	r1, r3
 800bd48:	2059      	movs	r0, #89	@ 0x59
 800bd4a:	f7ff fef3 	bl	800bb34 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bd4e:	f003 fa7b 	bl	800f248 <HAL_GetTick>
 800bd52:	0003      	movs	r3, r0
 800bd54:	331e      	adds	r3, #30
 800bd56:	001a      	movs	r2, r3
 800bd58:	4b6c      	ldr	r3, [pc, #432]	@ (800bf0c <SGP_GetMeasurementValues+0x220>)
 800bd5a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800bd5c:	4b68      	ldr	r3, [pc, #416]	@ (800bf00 <SGP_GetMeasurementValues+0x214>)
 800bd5e:	2201      	movs	r2, #1
 800bd60:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800bd62:	4b66      	ldr	r3, [pc, #408]	@ (800befc <SGP_GetMeasurementValues+0x210>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d100      	bne.n	800bd6c <SGP_GetMeasurementValues+0x80>
 800bd6a:	e0ab      	b.n	800bec4 <SGP_GetMeasurementValues+0x1d8>
 800bd6c:	f7ff ff94 	bl	800bc98 <SGP_MeasurementReady>
 800bd70:	1e03      	subs	r3, r0, #0
 800bd72:	d100      	bne.n	800bd76 <SGP_GetMeasurementValues+0x8a>
 800bd74:	e0a6      	b.n	800bec4 <SGP_GetMeasurementValues+0x1d8>
 800bd76:	4b67      	ldr	r3, [pc, #412]	@ (800bf14 <SGP_GetMeasurementValues+0x228>)
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	4053      	eors	r3, r2
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d100      	bne.n	800bd86 <SGP_GetMeasurementValues+0x9a>
 800bd84:	e09e      	b.n	800bec4 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800bd86:	4b63      	ldr	r3, [pc, #396]	@ (800bf14 <SGP_GetMeasurementValues+0x228>)
 800bd88:	2201      	movs	r2, #1
 800bd8a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800bd8c:	4b62      	ldr	r3, [pc, #392]	@ (800bf18 <SGP_GetMeasurementValues+0x22c>)
 800bd8e:	2203      	movs	r2, #3
 800bd90:	0019      	movs	r1, r3
 800bd92:	2059      	movs	r0, #89	@ 0x59
 800bd94:	f7ff feb0 	bl	800baf8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800bd98:	4b5f      	ldr	r3, [pc, #380]	@ (800bf18 <SGP_GetMeasurementValues+0x22c>)
 800bd9a:	2203      	movs	r2, #3
 800bd9c:	2103      	movs	r1, #3
 800bd9e:	0018      	movs	r0, r3
 800bda0:	f000 f918 	bl	800bfd4 <CheckCRC>
 800bda4:	0003      	movs	r3, r0
 800bda6:	001a      	movs	r2, r3
 800bda8:	2301      	movs	r3, #1
 800bdaa:	4053      	eors	r3, r2
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d02a      	beq.n	800be08 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800bdb2:	4a5a      	ldr	r2, [pc, #360]	@ (800bf1c <SGP_GetMeasurementValues+0x230>)
 800bdb4:	4b5a      	ldr	r3, [pc, #360]	@ (800bf20 <SGP_GetMeasurementValues+0x234>)
 800bdb6:	0019      	movs	r1, r3
 800bdb8:	2001      	movs	r0, #1
 800bdba:	f002 fe01 	bl	800e9c0 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800bdbe:	4a59      	ldr	r2, [pc, #356]	@ (800bf24 <SGP_GetMeasurementValues+0x238>)
 800bdc0:	4b59      	ldr	r3, [pc, #356]	@ (800bf28 <SGP_GetMeasurementValues+0x23c>)
 800bdc2:	0019      	movs	r1, r3
 800bdc4:	2002      	movs	r0, #2
 800bdc6:	f002 fdfb 	bl	800e9c0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800bdca:	230f      	movs	r3, #15
 800bdcc:	18fb      	adds	r3, r7, r3
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
 800bdd2:	e012      	b.n	800bdfa <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800bdd4:	240f      	movs	r4, #15
 800bdd6:	193b      	adds	r3, r7, r4
 800bdd8:	7818      	ldrb	r0, [r3, #0]
 800bdda:	193b      	adds	r3, r7, r4
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	4a4e      	ldr	r2, [pc, #312]	@ (800bf18 <SGP_GetMeasurementValues+0x22c>)
 800bde0:	5cd3      	ldrb	r3, [r2, r3]
 800bde2:	4a52      	ldr	r2, [pc, #328]	@ (800bf2c <SGP_GetMeasurementValues+0x240>)
 800bde4:	4952      	ldr	r1, [pc, #328]	@ (800bf30 <SGP_GetMeasurementValues+0x244>)
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	0003      	movs	r3, r0
 800bdea:	2003      	movs	r0, #3
 800bdec:	f002 fde8 	bl	800e9c0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800bdf0:	193b      	adds	r3, r7, r4
 800bdf2:	781a      	ldrb	r2, [r3, #0]
 800bdf4:	193b      	adds	r3, r7, r4
 800bdf6:	3201      	adds	r2, #1
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	230f      	movs	r3, #15
 800bdfc:	18fb      	adds	r3, r7, r3
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b02      	cmp	r3, #2
 800be02:	d9e7      	bls.n	800bdd4 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800be04:	2300      	movs	r3, #0
 800be06:	e075      	b.n	800bef4 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800be08:	f003 fa1e 	bl	800f248 <HAL_GetTick>
 800be0c:	0003      	movs	r3, r0
 800be0e:	22fa      	movs	r2, #250	@ 0xfa
 800be10:	0092      	lsls	r2, r2, #2
 800be12:	189a      	adds	r2, r3, r2
 800be14:	4b47      	ldr	r3, [pc, #284]	@ (800bf34 <SGP_GetMeasurementValues+0x248>)
 800be16:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800be18:	f7ff ff5a 	bl	800bcd0 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800be1c:	4b46      	ldr	r3, [pc, #280]	@ (800bf38 <SGP_GetMeasurementValues+0x24c>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	3301      	adds	r3, #1
 800be22:	b2da      	uxtb	r2, r3
 800be24:	4b44      	ldr	r3, [pc, #272]	@ (800bf38 <SGP_GetMeasurementValues+0x24c>)
 800be26:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800be28:	4b43      	ldr	r3, [pc, #268]	@ (800bf38 <SGP_GetMeasurementValues+0x24c>)
 800be2a:	781a      	ldrb	r2, [r3, #0]
 800be2c:	4b43      	ldr	r3, [pc, #268]	@ (800bf3c <SGP_GetMeasurementValues+0x250>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d347      	bcc.n	800bec4 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800be34:	4b38      	ldr	r3, [pc, #224]	@ (800bf18 <SGP_GetMeasurementValues+0x22c>)
 800be36:	785b      	ldrb	r3, [r3, #1]
 800be38:	021b      	lsls	r3, r3, #8
 800be3a:	b21a      	sxth	r2, r3
 800be3c:	4b36      	ldr	r3, [pc, #216]	@ (800bf18 <SGP_GetMeasurementValues+0x22c>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	b21b      	sxth	r3, r3
 800be42:	4313      	orrs	r3, r2
 800be44:	b21a      	sxth	r2, r3
 800be46:	240c      	movs	r4, #12
 800be48:	193b      	adds	r3, r7, r4
 800be4a:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800be4c:	2300      	movs	r3, #0
 800be4e:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800be50:	193b      	adds	r3, r7, r4
 800be52:	8819      	ldrh	r1, [r3, #0]
 800be54:	2308      	movs	r3, #8
 800be56:	18fa      	adds	r2, r7, r3
 800be58:	4b39      	ldr	r3, [pc, #228]	@ (800bf40 <SGP_GetMeasurementValues+0x254>)
 800be5a:	0018      	movs	r0, r3
 800be5c:	f7fe fe88 	bl	800ab70 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800be66:	4b37      	ldr	r3, [pc, #220]	@ (800bf44 <SGP_GetMeasurementValues+0x258>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	3301      	adds	r3, #1
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	4b35      	ldr	r3, [pc, #212]	@ (800bf44 <SGP_GetMeasurementValues+0x258>)
 800be70:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800be72:	4b34      	ldr	r3, [pc, #208]	@ (800bf44 <SGP_GetMeasurementValues+0x258>)
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d10d      	bne.n	800be96 <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800be7a:	193b      	adds	r3, r7, r4
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	4a32      	ldr	r2, [pc, #200]	@ (800bf48 <SGP_GetMeasurementValues+0x25c>)
 800be80:	492b      	ldr	r1, [pc, #172]	@ (800bf30 <SGP_GetMeasurementValues+0x244>)
 800be82:	2003      	movs	r0, #3
 800be84:	f002 fd9c 	bl	800e9c0 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4a30      	ldr	r2, [pc, #192]	@ (800bf4c <SGP_GetMeasurementValues+0x260>)
 800be8c:	4928      	ldr	r1, [pc, #160]	@ (800bf30 <SGP_GetMeasurementValues+0x244>)
 800be8e:	2003      	movs	r0, #3
 800be90:	f002 fd96 	bl	800e9c0 <CreateLine>
 800be94:	e006      	b.n	800bea4 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800be96:	4b2b      	ldr	r3, [pc, #172]	@ (800bf44 <SGP_GetMeasurementValues+0x258>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	2b0b      	cmp	r3, #11
 800be9c:	d102      	bne.n	800bea4 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800be9e:	4b29      	ldr	r3, [pc, #164]	@ (800bf44 <SGP_GetMeasurementValues+0x258>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	0018      	movs	r0, r3
 800beaa:	f001 fd35 	bl	800d918 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800beae:	4b22      	ldr	r3, [pc, #136]	@ (800bf38 <SGP_GetMeasurementValues+0x24c>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800beb4:	4b13      	ldr	r3, [pc, #76]	@ (800bf04 <SGP_GetMeasurementValues+0x218>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800beba:	4b11      	ldr	r3, [pc, #68]	@ (800bf00 <SGP_GetMeasurementValues+0x214>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	701a      	strb	r2, [r3, #0]
      return true;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e017      	b.n	800bef4 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bec4:	f7ff fef6 	bl	800bcb4 <SGP_MeasurementDone>
 800bec8:	1e03      	subs	r3, r0, #0
 800beca:	d012      	beq.n	800bef2 <SGP_GetMeasurementValues+0x206>
 800becc:	4b0b      	ldr	r3, [pc, #44]	@ (800befc <SGP_GetMeasurementValues+0x210>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00e      	beq.n	800bef2 <SGP_GetMeasurementValues+0x206>
 800bed4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf14 <SGP_GetMeasurementValues+0x228>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00a      	beq.n	800bef2 <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bedc:	4a1c      	ldr	r2, [pc, #112]	@ (800bf50 <SGP_GetMeasurementValues+0x264>)
 800bede:	4b14      	ldr	r3, [pc, #80]	@ (800bf30 <SGP_GetMeasurementValues+0x244>)
 800bee0:	0019      	movs	r1, r3
 800bee2:	2003      	movs	r0, #3
 800bee4:	f002 fd6c 	bl	800e9c0 <CreateLine>
    SGP_StartMeasurement();
 800bee8:	f7ff fe90 	bl	800bc0c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800beec:	4b04      	ldr	r3, [pc, #16]	@ (800bf00 <SGP_GetMeasurementValues+0x214>)
 800beee:	2200      	movs	r2, #0
 800bef0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	0018      	movs	r0, r3
 800bef6:	46bd      	mov	sp, r7
 800bef8:	b005      	add	sp, #20
 800befa:	bd90      	pop	{r4, r7, pc}
 800befc:	20000ccc 	.word	0x20000ccc
 800bf00:	20000d79 	.word	0x20000d79
 800bf04:	20000d78 	.word	0x20000d78
 800bf08:	200000a0 	.word	0x200000a0
 800bf0c:	200000b4 	.word	0x200000b4
 800bf10:	20000098 	.word	0x20000098
 800bf14:	20000ccd 	.word	0x20000ccd
 800bf18:	20000cbc 	.word	0x20000cbc
 800bf1c:	08025418 	.word	0x08025418
 800bf20:	08025440 	.word	0x08025440
 800bf24:	08025444 	.word	0x08025444
 800bf28:	08025464 	.word	0x08025464
 800bf2c:	08025468 	.word	0x08025468
 800bf30:	08025488 	.word	0x08025488
 800bf34:	200000b0 	.word	0x200000b0
 800bf38:	20000cc5 	.word	0x20000cc5
 800bf3c:	200000aa 	.word	0x200000aa
 800bf40:	20000cd0 	.word	0x20000cd0
 800bf44:	20000cc6 	.word	0x20000cc6
 800bf48:	0802548c 	.word	0x0802548c
 800bf4c:	080254a8 	.word	0x080254a8
 800bf50:	080254c4 	.word	0x080254c4

0800bf54 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bf5a:	4b1a      	ldr	r3, [pc, #104]	@ (800bfc4 <SGP_DeviceConnected+0x70>)
 800bf5c:	2202      	movs	r2, #2
 800bf5e:	0019      	movs	r1, r3
 800bf60:	2059      	movs	r0, #89	@ 0x59
 800bf62:	f7ff fde7 	bl	800bb34 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bf66:	2001      	movs	r0, #1
 800bf68:	f003 f978 	bl	800f25c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bf6c:	4b16      	ldr	r3, [pc, #88]	@ (800bfc8 <SGP_DeviceConnected+0x74>)
 800bf6e:	2209      	movs	r2, #9
 800bf70:	0019      	movs	r1, r3
 800bf72:	2059      	movs	r0, #89	@ 0x59
 800bf74:	f7ff fdc0 	bl	800baf8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bf78:	1dfb      	adds	r3, r7, #7
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	701a      	strb	r2, [r3, #0]
 800bf7e:	e011      	b.n	800bfa4 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bf80:	1dfb      	adds	r3, r7, #7
 800bf82:	7818      	ldrb	r0, [r3, #0]
 800bf84:	1dfb      	adds	r3, r7, #7
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	4a0f      	ldr	r2, [pc, #60]	@ (800bfc8 <SGP_DeviceConnected+0x74>)
 800bf8a:	5cd3      	ldrb	r3, [r2, r3]
 800bf8c:	4a0f      	ldr	r2, [pc, #60]	@ (800bfcc <SGP_DeviceConnected+0x78>)
 800bf8e:	4910      	ldr	r1, [pc, #64]	@ (800bfd0 <SGP_DeviceConnected+0x7c>)
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	0003      	movs	r3, r0
 800bf94:	2002      	movs	r0, #2
 800bf96:	f002 fd13 	bl	800e9c0 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bf9a:	1dfb      	adds	r3, r7, #7
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	1dfb      	adds	r3, r7, #7
 800bfa0:	3201      	adds	r2, #1
 800bfa2:	701a      	strb	r2, [r3, #0]
 800bfa4:	1dfb      	adds	r3, r7, #7
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	2b08      	cmp	r3, #8
 800bfaa:	d9e9      	bls.n	800bf80 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bfac:	4b06      	ldr	r3, [pc, #24]	@ (800bfc8 <SGP_DeviceConnected+0x74>)
 800bfae:	2203      	movs	r2, #3
 800bfb0:	2109      	movs	r1, #9
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	f000 f80e 	bl	800bfd4 <CheckCRC>
 800bfb8:	0003      	movs	r3, r0
}
 800bfba:	0018      	movs	r0, r3
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	b002      	add	sp, #8
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	46c0      	nop			@ (mov r8, r8)
 800bfc4:	20000094 	.word	0x20000094
 800bfc8:	20000cbc 	.word	0x20000cbc
 800bfcc:	080254e4 	.word	0x080254e4
 800bfd0:	08025464 	.word	0x08025464

0800bfd4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd6:	b08f      	sub	sp, #60	@ 0x3c
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6278      	str	r0, [r7, #36]	@ 0x24
 800bfdc:	0008      	movs	r0, r1
 800bfde:	0011      	movs	r1, r2
 800bfe0:	2323      	movs	r3, #35	@ 0x23
 800bfe2:	18fb      	adds	r3, r7, r3
 800bfe4:	1c02      	adds	r2, r0, #0
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	2322      	movs	r3, #34	@ 0x22
 800bfea:	18fb      	adds	r3, r7, r3
 800bfec:	1c0a      	adds	r2, r1, #0
 800bfee:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bff0:	2317      	movs	r3, #23
 800bff2:	2220      	movs	r2, #32
 800bff4:	189b      	adds	r3, r3, r2
 800bff6:	19db      	adds	r3, r3, r7
 800bff8:	2200      	movs	r2, #0
 800bffa:	701a      	strb	r2, [r3, #0]
 800bffc:	e09f      	b.n	800c13e <CheckCRC+0x16a>
 800bffe:	466b      	mov	r3, sp
 800c000:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800c002:	2322      	movs	r3, #34	@ 0x22
 800c004:	18fb      	adds	r3, r7, r3
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	001a      	movs	r2, r3
 800c00a:	3a01      	subs	r2, #1
 800c00c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c00e:	60bb      	str	r3, [r7, #8]
 800c010:	2200      	movs	r2, #0
 800c012:	60fa      	str	r2, [r7, #12]
 800c014:	68b8      	ldr	r0, [r7, #8]
 800c016:	68f9      	ldr	r1, [r7, #12]
 800c018:	0002      	movs	r2, r0
 800c01a:	0f52      	lsrs	r2, r2, #29
 800c01c:	000c      	movs	r4, r1
 800c01e:	00e4      	lsls	r4, r4, #3
 800c020:	61fc      	str	r4, [r7, #28]
 800c022:	69fc      	ldr	r4, [r7, #28]
 800c024:	4314      	orrs	r4, r2
 800c026:	61fc      	str	r4, [r7, #28]
 800c028:	0002      	movs	r2, r0
 800c02a:	00d2      	lsls	r2, r2, #3
 800c02c:	61ba      	str	r2, [r7, #24]
 800c02e:	603b      	str	r3, [r7, #0]
 800c030:	2200      	movs	r2, #0
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	6838      	ldr	r0, [r7, #0]
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	0002      	movs	r2, r0
 800c03a:	0f52      	lsrs	r2, r2, #29
 800c03c:	000c      	movs	r4, r1
 800c03e:	00e4      	lsls	r4, r4, #3
 800c040:	617c      	str	r4, [r7, #20]
 800c042:	697c      	ldr	r4, [r7, #20]
 800c044:	4314      	orrs	r4, r2
 800c046:	617c      	str	r4, [r7, #20]
 800c048:	0002      	movs	r2, r0
 800c04a:	00d2      	lsls	r2, r2, #3
 800c04c:	613a      	str	r2, [r7, #16]
 800c04e:	3307      	adds	r3, #7
 800c050:	08db      	lsrs	r3, r3, #3
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	466a      	mov	r2, sp
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	469d      	mov	sp, r3
 800c05a:	466b      	mov	r3, sp
 800c05c:	3300      	adds	r3, #0
 800c05e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800c060:	2316      	movs	r3, #22
 800c062:	2220      	movs	r2, #32
 800c064:	189b      	adds	r3, r3, r2
 800c066:	19db      	adds	r3, r3, r7
 800c068:	2200      	movs	r2, #0
 800c06a:	701a      	strb	r2, [r3, #0]
 800c06c:	e01e      	b.n	800c0ac <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800c06e:	2317      	movs	r3, #23
 800c070:	2220      	movs	r2, #32
 800c072:	189b      	adds	r3, r3, r2
 800c074:	19db      	adds	r3, r3, r7
 800c076:	781a      	ldrb	r2, [r3, #0]
 800c078:	2116      	movs	r1, #22
 800c07a:	2320      	movs	r3, #32
 800c07c:	18cb      	adds	r3, r1, r3
 800c07e:	19db      	adds	r3, r3, r7
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	18d3      	adds	r3, r2, r3
 800c084:	001a      	movs	r2, r3
 800c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c088:	189a      	adds	r2, r3, r2
 800c08a:	0008      	movs	r0, r1
 800c08c:	2320      	movs	r3, #32
 800c08e:	18cb      	adds	r3, r1, r3
 800c090:	19db      	adds	r3, r3, r7
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	7811      	ldrb	r1, [r2, #0]
 800c096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c098:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800c09a:	2320      	movs	r3, #32
 800c09c:	18c3      	adds	r3, r0, r3
 800c09e:	19db      	adds	r3, r3, r7
 800c0a0:	781a      	ldrb	r2, [r3, #0]
 800c0a2:	2320      	movs	r3, #32
 800c0a4:	18c3      	adds	r3, r0, r3
 800c0a6:	19db      	adds	r3, r3, r7
 800c0a8:	3201      	adds	r2, #1
 800c0aa:	701a      	strb	r2, [r3, #0]
 800c0ac:	2316      	movs	r3, #22
 800c0ae:	2220      	movs	r2, #32
 800c0b0:	189b      	adds	r3, r3, r2
 800c0b2:	19da      	adds	r2, r3, r7
 800c0b4:	2322      	movs	r3, #34	@ 0x22
 800c0b6:	18fb      	adds	r3, r7, r3
 800c0b8:	7812      	ldrb	r2, [r2, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d3d6      	bcc.n	800c06e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800c0c0:	2417      	movs	r4, #23
 800c0c2:	2320      	movs	r3, #32
 800c0c4:	18e3      	adds	r3, r4, r3
 800c0c6:	19db      	adds	r3, r3, r7
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	2322      	movs	r3, #34	@ 0x22
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	18d3      	adds	r3, r2, r3
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0d6:	18d2      	adds	r2, r2, r3
 800c0d8:	250b      	movs	r5, #11
 800c0da:	2320      	movs	r3, #32
 800c0dc:	18eb      	adds	r3, r5, r3
 800c0de:	19db      	adds	r3, r3, r7
 800c0e0:	7812      	ldrb	r2, [r2, #0]
 800c0e2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800c0e4:	2322      	movs	r3, #34	@ 0x22
 800c0e6:	18fb      	adds	r3, r7, r3
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f0:	0011      	movs	r1, r2
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	f000 f838 	bl	800c168 <CalculateCRC>
 800c0f8:	0003      	movs	r3, r0
 800c0fa:	001a      	movs	r2, r3
 800c0fc:	2320      	movs	r3, #32
 800c0fe:	18eb      	adds	r3, r5, r3
 800c100:	19db      	adds	r3, r3, r7
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	4293      	cmp	r3, r2
 800c106:	d00c      	beq.n	800c122 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800c108:	2320      	movs	r3, #32
 800c10a:	18e3      	adds	r3, r4, r3
 800c10c:	19db      	adds	r3, r3, r7
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	3301      	adds	r3, #1
 800c112:	4a13      	ldr	r2, [pc, #76]	@ (800c160 <CheckCRC+0x18c>)
 800c114:	4913      	ldr	r1, [pc, #76]	@ (800c164 <CheckCRC+0x190>)
 800c116:	2001      	movs	r0, #1
 800c118:	f002 fc52 	bl	800e9c0 <CreateLine>
      return false;
 800c11c:	2300      	movs	r3, #0
 800c11e:	46b5      	mov	sp, r6
 800c120:	e019      	b.n	800c156 <CheckCRC+0x182>
 800c122:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800c124:	2217      	movs	r2, #23
 800c126:	2320      	movs	r3, #32
 800c128:	18d3      	adds	r3, r2, r3
 800c12a:	19db      	adds	r3, r3, r7
 800c12c:	2120      	movs	r1, #32
 800c12e:	1852      	adds	r2, r2, r1
 800c130:	19d1      	adds	r1, r2, r7
 800c132:	2222      	movs	r2, #34	@ 0x22
 800c134:	18ba      	adds	r2, r7, r2
 800c136:	7809      	ldrb	r1, [r1, #0]
 800c138:	7812      	ldrb	r2, [r2, #0]
 800c13a:	188a      	adds	r2, r1, r2
 800c13c:	701a      	strb	r2, [r3, #0]
 800c13e:	2317      	movs	r3, #23
 800c140:	2220      	movs	r2, #32
 800c142:	189b      	adds	r3, r3, r2
 800c144:	19da      	adds	r2, r3, r7
 800c146:	2323      	movs	r3, #35	@ 0x23
 800c148:	18fb      	adds	r3, r7, r3
 800c14a:	7812      	ldrb	r2, [r2, #0]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d200      	bcs.n	800c154 <CheckCRC+0x180>
 800c152:	e754      	b.n	800bffe <CheckCRC+0x2a>
    }
  }
  return true;
 800c154:	2301      	movs	r3, #1
}
 800c156:	0018      	movs	r0, r3
 800c158:	46bd      	mov	sp, r7
 800c15a:	b00f      	add	sp, #60	@ 0x3c
 800c15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c15e:	46c0      	nop			@ (mov r8, r8)
 800c160:	08025504 	.word	0x08025504
 800c164:	08025440 	.word	0x08025440

0800c168 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	000a      	movs	r2, r1
 800c172:	1cfb      	adds	r3, r7, #3
 800c174:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800c176:	230f      	movs	r3, #15
 800c178:	18fb      	adds	r3, r7, r3
 800c17a:	22ff      	movs	r2, #255	@ 0xff
 800c17c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800c17e:	230e      	movs	r3, #14
 800c180:	18fb      	adds	r3, r7, r3
 800c182:	2200      	movs	r2, #0
 800c184:	701a      	strb	r2, [r3, #0]
 800c186:	e037      	b.n	800c1f8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800c188:	230e      	movs	r3, #14
 800c18a:	18fb      	adds	r3, r7, r3
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	18d3      	adds	r3, r2, r3
 800c192:	7819      	ldrb	r1, [r3, #0]
 800c194:	220f      	movs	r2, #15
 800c196:	18bb      	adds	r3, r7, r2
 800c198:	18ba      	adds	r2, r7, r2
 800c19a:	7812      	ldrb	r2, [r2, #0]
 800c19c:	404a      	eors	r2, r1
 800c19e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800c1a0:	230d      	movs	r3, #13
 800c1a2:	18fb      	adds	r3, r7, r3
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	e01b      	b.n	800c1e2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800c1aa:	210f      	movs	r1, #15
 800c1ac:	187b      	adds	r3, r7, r1
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	b25b      	sxtb	r3, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	da09      	bge.n	800c1ca <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800c1b6:	187b      	adds	r3, r7, r1
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	b25b      	sxtb	r3, r3
 800c1be:	2231      	movs	r2, #49	@ 0x31
 800c1c0:	4053      	eors	r3, r2
 800c1c2:	b25a      	sxtb	r2, r3
 800c1c4:	187b      	adds	r3, r7, r1
 800c1c6:	701a      	strb	r2, [r3, #0]
 800c1c8:	e005      	b.n	800c1d6 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800c1ca:	230f      	movs	r3, #15
 800c1cc:	18fa      	adds	r2, r7, r3
 800c1ce:	18fb      	adds	r3, r7, r3
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	18db      	adds	r3, r3, r3
 800c1d4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800c1d6:	210d      	movs	r1, #13
 800c1d8:	187b      	adds	r3, r7, r1
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	187b      	adds	r3, r7, r1
 800c1de:	3201      	adds	r2, #1
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	230d      	movs	r3, #13
 800c1e4:	18fb      	adds	r3, r7, r3
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	2b07      	cmp	r3, #7
 800c1ea:	d9de      	bls.n	800c1aa <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800c1ec:	210e      	movs	r1, #14
 800c1ee:	187b      	adds	r3, r7, r1
 800c1f0:	781a      	ldrb	r2, [r3, #0]
 800c1f2:	187b      	adds	r3, r7, r1
 800c1f4:	3201      	adds	r2, #1
 800c1f6:	701a      	strb	r2, [r3, #0]
 800c1f8:	230e      	movs	r3, #14
 800c1fa:	18fa      	adds	r2, r7, r3
 800c1fc:	1cfb      	adds	r3, r7, #3
 800c1fe:	7812      	ldrb	r2, [r2, #0]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	429a      	cmp	r2, r3
 800c204:	d3c0      	bcc.n	800c188 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800c206:	230f      	movs	r3, #15
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	781b      	ldrb	r3, [r3, #0]
}
 800c20c:	0018      	movs	r0, r3
 800c20e:	46bd      	mov	sp, r7
 800c210:	b004      	add	sp, #16
 800c212:	bd80      	pop	{r7, pc}

0800c214 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4936      	ldr	r1, [pc, #216]	@ (800c2fc <SGP_SetHT+0xe8>)
 800c224:	1c18      	adds	r0, r3, #0
 800c226:	f7f4 fb4b 	bl	80008c0 <__aeabi_fadd>
 800c22a:	1c03      	adds	r3, r0, #0
 800c22c:	4934      	ldr	r1, [pc, #208]	@ (800c300 <SGP_SetHT+0xec>)
 800c22e:	1c18      	adds	r0, r3, #0
 800c230:	f7f4 fcd0 	bl	8000bd4 <__aeabi_fdiv>
 800c234:	1c03      	adds	r3, r0, #0
 800c236:	4933      	ldr	r1, [pc, #204]	@ (800c304 <SGP_SetHT+0xf0>)
 800c238:	1c18      	adds	r0, r3, #0
 800c23a:	f7f4 feb1 	bl	8000fa0 <__aeabi_fmul>
 800c23e:	1c03      	adds	r3, r0, #0
 800c240:	1c18      	adds	r0, r3, #0
 800c242:	f7f4 f9eb 	bl	800061c <__aeabi_f2uiz>
 800c246:	0003      	movs	r3, r0
 800c248:	b29a      	uxth	r2, r3
 800c24a:	4b2f      	ldr	r3, [pc, #188]	@ (800c308 <SGP_SetHT+0xf4>)
 800c24c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	492e      	ldr	r1, [pc, #184]	@ (800c30c <SGP_SetHT+0xf8>)
 800c254:	1c18      	adds	r0, r3, #0
 800c256:	f7f4 fcbd 	bl	8000bd4 <__aeabi_fdiv>
 800c25a:	1c03      	adds	r3, r0, #0
 800c25c:	4929      	ldr	r1, [pc, #164]	@ (800c304 <SGP_SetHT+0xf0>)
 800c25e:	1c18      	adds	r0, r3, #0
 800c260:	f7f4 fe9e 	bl	8000fa0 <__aeabi_fmul>
 800c264:	1c03      	adds	r3, r0, #0
 800c266:	1c18      	adds	r0, r3, #0
 800c268:	f7f4 f9d8 	bl	800061c <__aeabi_f2uiz>
 800c26c:	0003      	movs	r3, r0
 800c26e:	b29a      	uxth	r2, r3
 800c270:	4b27      	ldr	r3, [pc, #156]	@ (800c310 <SGP_SetHT+0xfc>)
 800c272:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800c274:	4b26      	ldr	r3, [pc, #152]	@ (800c310 <SGP_SetHT+0xfc>)
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	0a1b      	lsrs	r3, r3, #8
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	4b25      	ldr	r3, [pc, #148]	@ (800c314 <SGP_SetHT+0x100>)
 800c280:	709a      	strb	r2, [r3, #2]
 800c282:	4b24      	ldr	r3, [pc, #144]	@ (800c314 <SGP_SetHT+0x100>)
 800c284:	789a      	ldrb	r2, [r3, #2]
 800c286:	210c      	movs	r1, #12
 800c288:	187b      	adds	r3, r7, r1
 800c28a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800c28c:	4b20      	ldr	r3, [pc, #128]	@ (800c310 <SGP_SetHT+0xfc>)
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	b2da      	uxtb	r2, r3
 800c292:	4b20      	ldr	r3, [pc, #128]	@ (800c314 <SGP_SetHT+0x100>)
 800c294:	70da      	strb	r2, [r3, #3]
 800c296:	4b1f      	ldr	r3, [pc, #124]	@ (800c314 <SGP_SetHT+0x100>)
 800c298:	78da      	ldrb	r2, [r3, #3]
 800c29a:	187b      	adds	r3, r7, r1
 800c29c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800c29e:	187b      	adds	r3, r7, r1
 800c2a0:	2102      	movs	r1, #2
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	f7ff ff60 	bl	800c168 <CalculateCRC>
 800c2a8:	0003      	movs	r3, r0
 800c2aa:	001a      	movs	r2, r3
 800c2ac:	4b19      	ldr	r3, [pc, #100]	@ (800c314 <SGP_SetHT+0x100>)
 800c2ae:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800c2b0:	4b15      	ldr	r3, [pc, #84]	@ (800c308 <SGP_SetHT+0xf4>)
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	0a1b      	lsrs	r3, r3, #8
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	4b16      	ldr	r3, [pc, #88]	@ (800c314 <SGP_SetHT+0x100>)
 800c2bc:	715a      	strb	r2, [r3, #5]
 800c2be:	4b15      	ldr	r3, [pc, #84]	@ (800c314 <SGP_SetHT+0x100>)
 800c2c0:	795a      	ldrb	r2, [r3, #5]
 800c2c2:	2108      	movs	r1, #8
 800c2c4:	187b      	adds	r3, r7, r1
 800c2c6:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800c2c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c308 <SGP_SetHT+0xf4>)
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	4b11      	ldr	r3, [pc, #68]	@ (800c314 <SGP_SetHT+0x100>)
 800c2d0:	719a      	strb	r2, [r3, #6]
 800c2d2:	4b10      	ldr	r3, [pc, #64]	@ (800c314 <SGP_SetHT+0x100>)
 800c2d4:	799a      	ldrb	r2, [r3, #6]
 800c2d6:	187b      	adds	r3, r7, r1
 800c2d8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800c2da:	187b      	adds	r3, r7, r1
 800c2dc:	2102      	movs	r1, #2
 800c2de:	0018      	movs	r0, r3
 800c2e0:	f7ff ff42 	bl	800c168 <CalculateCRC>
 800c2e4:	0003      	movs	r3, r0
 800c2e6:	001a      	movs	r2, r3
 800c2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c314 <SGP_SetHT+0x100>)
 800c2ea:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800c2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c318 <SGP_SetHT+0x104>)
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	701a      	strb	r2, [r3, #0]
}
 800c2f2:	46c0      	nop			@ (mov r8, r8)
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	b004      	add	sp, #16
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	46c0      	nop			@ (mov r8, r8)
 800c2fc:	42340000 	.word	0x42340000
 800c300:	432f0000 	.word	0x432f0000
 800c304:	477fff00 	.word	0x477fff00
 800c308:	20000d76 	.word	0x20000d76
 800c30c:	42c80000 	.word	0x42c80000
 800c310:	20000d74 	.word	0x20000d74
 800c314:	200000a0 	.word	0x200000a0
 800c318:	20000d78 	.word	0x20000d78

0800c31c <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800c320:	4a09      	ldr	r2, [pc, #36]	@ (800c348 <SGP_SoftReset+0x2c>)
 800c322:	4b0a      	ldr	r3, [pc, #40]	@ (800c34c <SGP_SoftReset+0x30>)
 800c324:	0019      	movs	r1, r3
 800c326:	2003      	movs	r0, #3
 800c328:	f002 fb4a 	bl	800e9c0 <CreateLine>
  SGP_TurnHeaterOff();
 800c32c:	f7ff fcd0 	bl	800bcd0 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800c330:	200a      	movs	r0, #10
 800c332:	f002 ff93 	bl	800f25c <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c336:	4b06      	ldr	r3, [pc, #24]	@ (800c350 <SGP_SoftReset+0x34>)
 800c338:	2202      	movs	r2, #2
 800c33a:	0019      	movs	r1, r3
 800c33c:	2059      	movs	r0, #89	@ 0x59
 800c33e:	f7ff fbf9 	bl	800bb34 <WriteRegister>
}
 800c342:	46c0      	nop			@ (mov r8, r8)
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	080255ac 	.word	0x080255ac
 800c34c:	08025488 	.word	0x08025488
 800c350:	200000a8 	.word	0x200000a8

0800c354 <ResetVOCresult>:

void ResetVOCresult(void) {
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c358:	4b02      	ldr	r3, [pc, #8]	@ (800c364 <ResetVOCresult+0x10>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
}
 800c35e:	46c0      	nop			@ (mov r8, r8)
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20000d7c 	.word	0x20000d7c

0800c368 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c368:	b580      	push	{r7, lr}
 800c36a:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c36c:	4b37      	ldr	r3, [pc, #220]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2b07      	cmp	r3, #7
 800c372:	d85f      	bhi.n	800c434 <SGP_Upkeep+0xcc>
 800c374:	009a      	lsls	r2, r3, #2
 800c376:	4b36      	ldr	r3, [pc, #216]	@ (800c450 <SGP_Upkeep+0xe8>)
 800c378:	18d3      	adds	r3, r2, r3
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c37e:	4a35      	ldr	r2, [pc, #212]	@ (800c454 <SGP_Upkeep+0xec>)
 800c380:	4b35      	ldr	r3, [pc, #212]	@ (800c458 <SGP_Upkeep+0xf0>)
 800c382:	0019      	movs	r1, r3
 800c384:	2003      	movs	r0, #3
 800c386:	f002 fb1b 	bl	800e9c0 <CreateLine>
    break;
 800c38a:	e05a      	b.n	800c442 <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c38c:	f7ff ffe2 	bl	800c354 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c390:	4b2e      	ldr	r3, [pc, #184]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c392:	2201      	movs	r2, #1
 800c394:	701a      	strb	r2, [r3, #0]
    break;
 800c396:	e054      	b.n	800c442 <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c398:	f7ff fc38 	bl	800bc0c <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c39c:	f001 f966 	bl	800d66c <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c3a0:	4b2a      	ldr	r3, [pc, #168]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	701a      	strb	r2, [r3, #0]
    break;
 800c3a6:	e04c      	b.n	800c442 <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c3a8:	4b2c      	ldr	r3, [pc, #176]	@ (800c45c <SGP_Upkeep+0xf4>)
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	f7ff fc9e 	bl	800bcec <SGP_GetMeasurementValues>
 800c3b0:	1e03      	subs	r3, r0, #0
 800c3b2:	d043      	beq.n	800c43c <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c3b4:	4b25      	ldr	r3, [pc, #148]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c3b6:	2203      	movs	r2, #3
 800c3b8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c3ba:	e03f      	b.n	800c43c <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c3bc:	4b27      	ldr	r3, [pc, #156]	@ (800c45c <SGP_Upkeep+0xf4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	f7f7 fa02 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c3c8:	4b20      	ldr	r3, [pc, #128]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c3ca:	2206      	movs	r2, #6
 800c3cc:	701a      	strb	r2, [r3, #0]
    break;
 800c3ce:	e038      	b.n	800c442 <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c3d0:	4b1e      	ldr	r3, [pc, #120]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c3d2:	2207      	movs	r2, #7
 800c3d4:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c3d6:	4b22      	ldr	r3, [pc, #136]	@ (800c460 <SGP_Upkeep+0xf8>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d112      	bne.n	800c404 <SGP_Upkeep+0x9c>
 800c3de:	4b21      	ldr	r3, [pc, #132]	@ (800c464 <SGP_Upkeep+0xfc>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	4053      	eors	r3, r2
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00b      	beq.n	800c404 <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c3ec:	4b1e      	ldr	r3, [pc, #120]	@ (800c468 <SGP_Upkeep+0x100>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d004      	beq.n	800c3fe <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c3f4:	f7ff ff92 	bl	800c31c <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f7fc f9db 	bl	80087b4 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c3fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c468 <SGP_Upkeep+0x100>)
 800c400:	2201      	movs	r2, #1
 800c402:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c404:	f002 ff20 	bl	800f248 <HAL_GetTick>
 800c408:	0003      	movs	r3, r0
 800c40a:	22c8      	movs	r2, #200	@ 0xc8
 800c40c:	0092      	lsls	r2, r2, #2
 800c40e:	189a      	adds	r2, r3, r2
 800c410:	4b16      	ldr	r3, [pc, #88]	@ (800c46c <SGP_Upkeep+0x104>)
 800c412:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c414:	f001 f942 	bl	800d69c <ResetMeasurementIndicator>
  break;
 800c418:	e013      	b.n	800c442 <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c41a:	4b14      	ldr	r3, [pc, #80]	@ (800c46c <SGP_Upkeep+0x104>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	0018      	movs	r0, r3
 800c420:	f002 fa78 	bl	800e914 <TimestampIsReached>
 800c424:	1e03      	subs	r3, r0, #0
 800c426:	d00b      	beq.n	800c440 <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c428:	f7ff fbd8 	bl	800bbdc <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c42c:	4b07      	ldr	r3, [pc, #28]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c42e:	2200      	movs	r2, #0
 800c430:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c432:	e005      	b.n	800c440 <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c434:	4b05      	ldr	r3, [pc, #20]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c436:	2200      	movs	r2, #0
 800c438:	701a      	strb	r2, [r3, #0]
    break;
 800c43a:	e002      	b.n	800c442 <SGP_Upkeep+0xda>
    break;
 800c43c:	46c0      	nop			@ (mov r8, r8)
 800c43e:	e000      	b.n	800c442 <SGP_Upkeep+0xda>
    break;
 800c440:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c442:	4b02      	ldr	r3, [pc, #8]	@ (800c44c <SGP_Upkeep+0xe4>)
 800c444:	781b      	ldrb	r3, [r3, #0]
}
 800c446:	0018      	movs	r0, r3
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	20000d80 	.word	0x20000d80
 800c450:	08025d24 	.word	0x08025d24
 800c454:	080255c4 	.word	0x080255c4
 800c458:	08025488 	.word	0x08025488
 800c45c:	20000d7c 	.word	0x20000d7c
 800c460:	20000cc6 	.word	0x20000cc6
 800c464:	20001c1d 	.word	0x20001c1d
 800c468:	20000cb0 	.word	0x20000cb0
 800c46c:	20000cc8 	.word	0x20000cc8

0800c470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	0002      	movs	r2, r0
 800c478:	1dfb      	adds	r3, r7, #7
 800c47a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c47c:	1dfb      	adds	r3, r7, #7
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	2b7f      	cmp	r3, #127	@ 0x7f
 800c482:	d809      	bhi.n	800c498 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c484:	1dfb      	adds	r3, r7, #7
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	001a      	movs	r2, r3
 800c48a:	231f      	movs	r3, #31
 800c48c:	401a      	ands	r2, r3
 800c48e:	4b04      	ldr	r3, [pc, #16]	@ (800c4a0 <__NVIC_EnableIRQ+0x30>)
 800c490:	2101      	movs	r1, #1
 800c492:	4091      	lsls	r1, r2
 800c494:	000a      	movs	r2, r1
 800c496:	601a      	str	r2, [r3, #0]
  }
}
 800c498:	46c0      	nop			@ (mov r8, r8)
 800c49a:	46bd      	mov	sp, r7
 800c49c:	b002      	add	sp, #8
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	e000e100 	.word	0xe000e100

0800c4a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	0002      	movs	r2, r0
 800c4ac:	1dfb      	adds	r3, r7, #7
 800c4ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c4b0:	1dfb      	adds	r3, r7, #7
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4b6:	d810      	bhi.n	800c4da <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c4b8:	1dfb      	adds	r3, r7, #7
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	001a      	movs	r2, r3
 800c4be:	231f      	movs	r3, #31
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	4908      	ldr	r1, [pc, #32]	@ (800c4e4 <__NVIC_DisableIRQ+0x40>)
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	409a      	lsls	r2, r3
 800c4c8:	0013      	movs	r3, r2
 800c4ca:	2280      	movs	r2, #128	@ 0x80
 800c4cc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c4ce:	f3bf 8f4f 	dsb	sy
}
 800c4d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c4d4:	f3bf 8f6f 	isb	sy
}
 800c4d8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c4da:	46c0      	nop			@ (mov r8, r8)
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	b002      	add	sp, #8
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	46c0      	nop			@ (mov r8, r8)
 800c4e4:	e000e100 	.word	0xe000e100

0800c4e8 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c4e8:	b5b0      	push	{r4, r5, r7, lr}
 800c4ea:	b088      	sub	sp, #32
 800c4ec:	af02      	add	r7, sp, #8
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	0008      	movs	r0, r1
 800c4f2:	0011      	movs	r1, r2
 800c4f4:	1cfb      	adds	r3, r7, #3
 800c4f6:	1c02      	adds	r2, r0, #0
 800c4f8:	701a      	strb	r2, [r3, #0]
 800c4fa:	1cbb      	adds	r3, r7, #2
 800c4fc:	1c0a      	adds	r2, r1, #0
 800c4fe:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c500:	4b5b      	ldr	r3, [pc, #364]	@ (800c670 <getSoundData+0x188>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2201      	movs	r2, #1
 800c508:	4053      	eors	r3, r2
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d107      	bne.n	800c520 <getSoundData+0x38>
 800c510:	4b58      	ldr	r3, [pc, #352]	@ (800c674 <getSoundData+0x18c>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2201      	movs	r2, #1
 800c518:	4053      	eors	r3, r2
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <getSoundData+0x3c>
    {
        return false;
 800c520:	2300      	movs	r3, #0
 800c522:	e0a0      	b.n	800c666 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c524:	4b54      	ldr	r3, [pc, #336]	@ (800c678 <getSoundData+0x190>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d005      	beq.n	800c53a <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c52e:	4b53      	ldr	r3, [pc, #332]	@ (800c67c <getSoundData+0x194>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	b25b      	sxtb	r3, r3
 800c534:	0018      	movs	r0, r3
 800c536:	f7ff ffb5 	bl	800c4a4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c53a:	f3bf 8f4f 	dsb	sy
}
 800c53e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c540:	f3bf 8f6f 	isb	sy
}
 800c544:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c546:	1cfb      	adds	r3, r7, #3
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d04c      	beq.n	800c5e8 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c54e:	4b4c      	ldr	r3, [pc, #304]	@ (800c680 <getSoundData+0x198>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d11b      	bne.n	800c58e <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c562:	2300      	movs	r3, #0
 800c564:	617b      	str	r3, [r7, #20]
 800c566:	e00e      	b.n	800c586 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	18d3      	adds	r3, r2, r3
 800c56e:	3302      	adds	r3, #2
 800c570:	2200      	movs	r2, #0
 800c572:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	18d3      	adds	r3, r2, r3
 800c57a:	3308      	adds	r3, #8
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	3301      	adds	r3, #1
 800c584:	617b      	str	r3, [r7, #20]
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b05      	cmp	r3, #5
 800c58a:	d9ed      	bls.n	800c568 <getSoundData+0x80>
 800c58c:	e02c      	b.n	800c5e8 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	1c59      	adds	r1, r3, #1
 800c594:	4b3b      	ldr	r3, [pc, #236]	@ (800c684 <getSoundData+0x19c>)
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	4b3b      	ldr	r3, [pc, #236]	@ (800c688 <getSoundData+0x1a0>)
 800c59a:	681c      	ldr	r4, [r3, #0]
 800c59c:	4b38      	ldr	r3, [pc, #224]	@ (800c680 <getSoundData+0x198>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	0023      	movs	r3, r4
 800c5a4:	f000 fde8 	bl	800d178 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	613b      	str	r3, [r7, #16]
 800c5ac:	e019      	b.n	800c5e2 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	18d3      	adds	r3, r2, r3
 800c5b4:	1c98      	adds	r0, r3, #2
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c5be:	4b33      	ldr	r3, [pc, #204]	@ (800c68c <getSoundData+0x1a4>)
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	0092      	lsls	r2, r2, #2
 800c5c4:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c5c6:	4b32      	ldr	r3, [pc, #200]	@ (800c690 <getSoundData+0x1a8>)
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	0092      	lsls	r2, r2, #2
 800c5cc:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c5ce:	4b2c      	ldr	r3, [pc, #176]	@ (800c680 <getSoundData+0x198>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	0013      	movs	r3, r2
 800c5d6:	0022      	movs	r2, r4
 800c5d8:	f000 fdce 	bl	800d178 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	613b      	str	r3, [r7, #16]
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2b05      	cmp	r3, #5
 800c5e6:	d9e2      	bls.n	800c5ae <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c5e8:	1cbb      	adds	r3, r7, #2
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d028      	beq.n	800c642 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c5f0:	240e      	movs	r4, #14
 800c5f2:	193b      	adds	r3, r7, r4
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c5f8:	250d      	movs	r5, #13
 800c5fa:	197b      	adds	r3, r7, r5
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c600:	4b24      	ldr	r3, [pc, #144]	@ (800c694 <getSoundData+0x1ac>)
 800c602:	6818      	ldr	r0, [r3, #0]
 800c604:	4924      	ldr	r1, [pc, #144]	@ (800c698 <getSoundData+0x1b0>)
 800c606:	197b      	adds	r3, r7, r5
 800c608:	193a      	adds	r2, r7, r4
 800c60a:	f000 fe59 	bl	800d2c0 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c60e:	193b      	adds	r3, r7, r4
 800c610:	881a      	ldrh	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	21ff      	movs	r1, #255	@ 0xff
 800c616:	4011      	ands	r1, r2
 800c618:	000c      	movs	r4, r1
 800c61a:	7b99      	ldrb	r1, [r3, #14]
 800c61c:	2000      	movs	r0, #0
 800c61e:	4001      	ands	r1, r0
 800c620:	1c08      	adds	r0, r1, #0
 800c622:	1c21      	adds	r1, r4, #0
 800c624:	4301      	orrs	r1, r0
 800c626:	7399      	strb	r1, [r3, #14]
 800c628:	0a12      	lsrs	r2, r2, #8
 800c62a:	b290      	uxth	r0, r2
 800c62c:	7bda      	ldrb	r2, [r3, #15]
 800c62e:	2100      	movs	r1, #0
 800c630:	400a      	ands	r2, r1
 800c632:	1c11      	adds	r1, r2, #0
 800c634:	1c02      	adds	r2, r0, #0
 800c636:	430a      	orrs	r2, r1
 800c638:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c63a:	197b      	adds	r3, r7, r5
 800c63c:	781a      	ldrb	r2, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c642:	f000 f86f 	bl	800c724 <micSettlingComplete>
 800c646:	0003      	movs	r3, r0
 800c648:	001a      	movs	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c64e:	4b0a      	ldr	r3, [pc, #40]	@ (800c678 <getSoundData+0x190>)
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d005      	beq.n	800c664 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c658:	4b08      	ldr	r3, [pc, #32]	@ (800c67c <getSoundData+0x194>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	b25b      	sxtb	r3, r3
 800c65e:	0018      	movs	r0, r3
 800c660:	f7ff ff06 	bl	800c470 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c664:	2301      	movs	r3, #1
}
 800c666:	0018      	movs	r0, r3
 800c668:	46bd      	mov	sp, r7
 800c66a:	b006      	add	sp, #24
 800c66c:	bdb0      	pop	{r4, r5, r7, pc}
 800c66e:	46c0      	nop			@ (mov r8, r8)
 800c670:	20000d82 	.word	0x20000d82
 800c674:	20000d85 	.word	0x20000d85
 800c678:	20000d84 	.word	0x20000d84
 800c67c:	200017d4 	.word	0x200017d4
 800c680:	20001810 	.word	0x20001810
 800c684:	200017d8 	.word	0x200017d8
 800c688:	200017dc 	.word	0x200017dc
 800c68c:	200017e0 	.word	0x200017e0
 800c690:	200017f8 	.word	0x200017f8
 800c694:	20000d8c 	.word	0x20000d8c
 800c698:	3b5c7333 	.word	0x3b5c7333

0800c69c <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
 800c6a8:	001a      	movs	r2, r3
 800c6aa:	1cfb      	adds	r3, r7, #3
 800c6ac:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c6ae:	4b09      	ldr	r3, [pc, #36]	@ (800c6d4 <soundInit+0x38>)
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c6b4:	4b08      	ldr	r3, [pc, #32]	@ (800c6d8 <soundInit+0x3c>)
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c6ba:	4b08      	ldr	r3, [pc, #32]	@ (800c6dc <soundInit+0x40>)
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c6c0:	4b07      	ldr	r3, [pc, #28]	@ (800c6e0 <soundInit+0x44>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	569a      	ldrsb	r2, [r3, r2]
 800c6c6:	4b06      	ldr	r3, [pc, #24]	@ (800c6e0 <soundInit+0x44>)
 800c6c8:	701a      	strb	r2, [r3, #0]

    return true;
 800c6ca:	2301      	movs	r3, #1
}
 800c6cc:	0018      	movs	r0, r3
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	b004      	add	sp, #16
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	200017cc 	.word	0x200017cc
 800c6d8:	200017c8 	.word	0x200017c8
 800c6dc:	200017d0 	.word	0x200017d0
 800c6e0:	200017d4 	.word	0x200017d4

0800c6e4 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c6e8:	4b02      	ldr	r3, [pc, #8]	@ (800c6f4 <clearMaximumAmplitude+0x10>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
}
 800c6ee:	46c0      	nop			@ (mov r8, r8)
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	20000d8c 	.word	0x20000d8c

0800c6f8 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c6fc:	4b08      	ldr	r3, [pc, #32]	@ (800c720 <startMicSettlingPeriod+0x28>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2200      	movs	r2, #0
 800c704:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c706:	4b06      	ldr	r3, [pc, #24]	@ (800c720 <startMicSettlingPeriod+0x28>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	0018      	movs	r0, r3
 800c70c:	f00a fb60 	bl	8016dd0 <HAL_TIM_Base_Start>
 800c710:	1e03      	subs	r3, r0, #0
 800c712:	d001      	beq.n	800c718 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c714:	2300      	movs	r3, #0
 800c716:	e000      	b.n	800c71a <startMicSettlingPeriod+0x22>
    }
    return true;
 800c718:	2301      	movs	r3, #1
}
 800c71a:	0018      	movs	r0, r3
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	200017c8 	.word	0x200017c8

0800c724 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c72a:	4b0e      	ldr	r3, [pc, #56]	@ (800c764 <micSettlingComplete+0x40>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	2201      	movs	r2, #1
 800c734:	401a      	ands	r2, r3
 800c736:	1dfb      	adds	r3, r7, #7
 800c738:	3a01      	subs	r2, #1
 800c73a:	4251      	negs	r1, r2
 800c73c:	414a      	adcs	r2, r1
 800c73e:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c740:	1dfb      	adds	r3, r7, #7
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d007      	beq.n	800c758 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c748:	4b06      	ldr	r3, [pc, #24]	@ (800c764 <micSettlingComplete+0x40>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	0018      	movs	r0, r3
 800c74e:	f00a fb89 	bl	8016e64 <HAL_TIM_Base_Stop>
      DataReady = true;
 800c752:	4b05      	ldr	r3, [pc, #20]	@ (800c768 <micSettlingComplete+0x44>)
 800c754:	2201      	movs	r2, #1
 800c756:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c758:	1dfb      	adds	r3, r7, #7
 800c75a:	781b      	ldrb	r3, [r3, #0]
}
 800c75c:	0018      	movs	r0, r3
 800c75e:	46bd      	mov	sp, r7
 800c760:	b002      	add	sp, #8
 800c762:	bd80      	pop	{r7, pc}
 800c764:	200017c8 	.word	0x200017c8
 800c768:	20000d81 	.word	0x20000d81

0800c76c <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	0002      	movs	r2, r0
 800c774:	1dfb      	adds	r3, r7, #7
 800c776:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c778:	4b29      	ldr	r3, [pc, #164]	@ (800c820 <enableMicrophone+0xb4>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	1dfa      	adds	r2, r7, #7
 800c780:	7812      	ldrb	r2, [r2, #0]
 800c782:	429a      	cmp	r2, r3
 800c784:	d101      	bne.n	800c78a <enableMicrophone+0x1e>
    {
        return true;
 800c786:	2301      	movs	r3, #1
 800c788:	e045      	b.n	800c816 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c78a:	1dfb      	adds	r3, r7, #7
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d025      	beq.n	800c7de <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c792:	f7ff ffb1 	bl	800c6f8 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c796:	4b23      	ldr	r3, [pc, #140]	@ (800c824 <enableMicrophone+0xb8>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2280      	movs	r2, #128	@ 0x80
 800c79c:	0092      	lsls	r2, r2, #2
 800c79e:	4922      	ldr	r1, [pc, #136]	@ (800c828 <enableMicrophone+0xbc>)
 800c7a0:	0018      	movs	r0, r3
 800c7a2:	f006 fd7f 	bl	80132a4 <HAL_I2S_Receive_DMA>
 800c7a6:	1e03      	subs	r3, r0, #0
 800c7a8:	d001      	beq.n	800c7ae <enableMicrophone+0x42>
        {
            return false;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e033      	b.n	800c816 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c7ae:	f7ff ff99 	bl	800c6e4 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c7b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c82c <enableMicrophone+0xc0>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c7b8:	4b1d      	ldr	r3, [pc, #116]	@ (800c830 <enableMicrophone+0xc4>)
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	b25b      	sxtb	r3, r3
 800c7be:	0018      	movs	r0, r3
 800c7c0:	f7ff fe56 	bl	800c470 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c7c4:	4b1b      	ldr	r3, [pc, #108]	@ (800c834 <enableMicrophone+0xc8>)
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c7ca:	4b15      	ldr	r3, [pc, #84]	@ (800c820 <enableMicrophone+0xb4>)
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c7d0:	4b19      	ldr	r3, [pc, #100]	@ (800c838 <enableMicrophone+0xcc>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c7d6:	4b19      	ldr	r3, [pc, #100]	@ (800c83c <enableMicrophone+0xd0>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	701a      	strb	r2, [r3, #0]
 800c7dc:	e01a      	b.n	800c814 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c7de:	4b14      	ldr	r3, [pc, #80]	@ (800c830 <enableMicrophone+0xc4>)
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	b25b      	sxtb	r3, r3
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	f7ff fe5d 	bl	800c4a4 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c7ea:	4b12      	ldr	r3, [pc, #72]	@ (800c834 <enableMicrophone+0xc8>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c7f0:	4b11      	ldr	r3, [pc, #68]	@ (800c838 <enableMicrophone+0xcc>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c7f6:	4b11      	ldr	r3, [pc, #68]	@ (800c83c <enableMicrophone+0xd0>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c7fc:	4b09      	ldr	r3, [pc, #36]	@ (800c824 <enableMicrophone+0xb8>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	0018      	movs	r0, r3
 800c802:	f006 fe11 	bl	8013428 <HAL_I2S_DMAStop>
 800c806:	1e03      	subs	r3, r0, #0
 800c808:	d001      	beq.n	800c80e <enableMicrophone+0xa2>
        {
            return false;
 800c80a:	2300      	movs	r3, #0
 800c80c:	e003      	b.n	800c816 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c80e:	4b04      	ldr	r3, [pc, #16]	@ (800c820 <enableMicrophone+0xb4>)
 800c810:	2200      	movs	r2, #0
 800c812:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c814:	2301      	movs	r3, #1
}
 800c816:	0018      	movs	r0, r3
 800c818:	46bd      	mov	sp, r7
 800c81a:	b002      	add	sp, #8
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	46c0      	nop			@ (mov r8, r8)
 800c820:	20000d82 	.word	0x20000d82
 800c824:	200017cc 	.word	0x200017cc
 800c828:	20000dc8 	.word	0x20000dc8
 800c82c:	20000d88 	.word	0x20000d88
 800c830:	200017d4 	.word	0x200017d4
 800c834:	20000d84 	.word	0x20000d84
 800c838:	20000d83 	.word	0x20000d83
 800c83c:	20000d85 	.word	0x20000d85

0800c840 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c844:	4b0c      	ldr	r3, [pc, #48]	@ (800c878 <startSPLcalculation+0x38>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2201      	movs	r2, #1
 800c84c:	4053      	eors	r3, r2
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <startSPLcalculation+0x18>
    {
        return false;
 800c854:	2300      	movs	r3, #0
 800c856:	e00c      	b.n	800c872 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c858:	4b08      	ldr	r3, [pc, #32]	@ (800c87c <startSPLcalculation+0x3c>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <startSPLcalculation+0x26>
    {
        return true;
 800c862:	2301      	movs	r3, #1
 800c864:	e005      	b.n	800c872 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c866:	f000 fb63 	bl	800cf30 <resetSPLstate>
    SPLcalcEnabled = true;
 800c86a:	4b04      	ldr	r3, [pc, #16]	@ (800c87c <startSPLcalculation+0x3c>)
 800c86c:	2201      	movs	r2, #1
 800c86e:	701a      	strb	r2, [r3, #0]
    return true;
 800c870:	2301      	movs	r3, #1
}
 800c872:	0018      	movs	r0, r3
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	20000d82 	.word	0x20000d82
 800c87c:	20000d83 	.word	0x20000d83

0800c880 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c888:	4b05      	ldr	r3, [pc, #20]	@ (800c8a0 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d102      	bne.n	800c898 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c892:	2000      	movs	r0, #0
 800c894:	f000 f81a 	bl	800c8cc <processHalfDMAbuffer>
  }
}
 800c898:	46c0      	nop			@ (mov r8, r8)
 800c89a:	46bd      	mov	sp, r7
 800c89c:	b002      	add	sp, #8
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	200017cc 	.word	0x200017cc

0800c8a4 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c8ac:	4b06      	ldr	r3, [pc, #24]	@ (800c8c8 <HAL_I2S_RxCpltCallback+0x24>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d104      	bne.n	800c8c0 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c8b6:	2380      	movs	r3, #128	@ 0x80
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	0018      	movs	r0, r3
 800c8bc:	f000 f806 	bl	800c8cc <processHalfDMAbuffer>
  }
}
 800c8c0:	46c0      	nop			@ (mov r8, r8)
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	b002      	add	sp, #8
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	200017cc 	.word	0x200017cc

0800c8cc <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	005a      	lsls	r2, r3, #1
 800c8d8:	4b15      	ldr	r3, [pc, #84]	@ (800c930 <processHalfDMAbuffer+0x64>)
 800c8da:	18d3      	adds	r3, r2, r3
 800c8dc:	4a15      	ldr	r2, [pc, #84]	@ (800c934 <processHalfDMAbuffer+0x68>)
 800c8de:	2180      	movs	r1, #128	@ 0x80
 800c8e0:	0089      	lsls	r1, r1, #2
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	f000 fd35 	bl	800d352 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c8e8:	4b13      	ldr	r3, [pc, #76]	@ (800c938 <processHalfDMAbuffer+0x6c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	425a      	negs	r2, r3
 800c8ee:	4153      	adcs	r3, r2
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	4b11      	ldr	r3, [pc, #68]	@ (800c938 <processHalfDMAbuffer+0x6c>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2109      	movs	r1, #9
 800c8f8:	4299      	cmp	r1, r3
 800c8fa:	419b      	sbcs	r3, r3
 800c8fc:	425b      	negs	r3, r3
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	480c      	ldr	r0, [pc, #48]	@ (800c934 <processHalfDMAbuffer+0x68>)
 800c902:	2180      	movs	r1, #128	@ 0x80
 800c904:	f000 fb46 	bl	800cf94 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c908:	4b0b      	ldr	r3, [pc, #44]	@ (800c938 <processHalfDMAbuffer+0x6c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b09      	cmp	r3, #9
 800c90e:	d804      	bhi.n	800c91a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c910:	4b09      	ldr	r3, [pc, #36]	@ (800c938 <processHalfDMAbuffer+0x6c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	4b08      	ldr	r3, [pc, #32]	@ (800c938 <processHalfDMAbuffer+0x6c>)
 800c918:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c91a:	4b08      	ldr	r3, [pc, #32]	@ (800c93c <processHalfDMAbuffer+0x70>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c924:	f000 f826 	bl	800c974 <calculateSPLQ31>
    }
}
 800c928:	46c0      	nop			@ (mov r8, r8)
 800c92a:	46bd      	mov	sp, r7
 800c92c:	b002      	add	sp, #8
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20000dc8 	.word	0x20000dc8
 800c934:	200015c8 	.word	0x200015c8
 800c938:	20000d88 	.word	0x20000d88
 800c93c:	20000d83 	.word	0x20000d83

0800c940 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c948:	4b07      	ldr	r3, [pc, #28]	@ (800c968 <HAL_I2S_ErrorCallback+0x28>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d106      	bne.n	800c960 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c952:	4a06      	ldr	r2, [pc, #24]	@ (800c96c <HAL_I2S_ErrorCallback+0x2c>)
 800c954:	239e      	movs	r3, #158	@ 0x9e
 800c956:	0059      	lsls	r1, r3, #1
 800c958:	4b05      	ldr	r3, [pc, #20]	@ (800c970 <HAL_I2S_ErrorCallback+0x30>)
 800c95a:	0018      	movs	r0, r3
 800c95c:	f002 f8e8 	bl	800eb30 <errorHandler>
  }
}
 800c960:	46c0      	nop			@ (mov r8, r8)
 800c962:	46bd      	mov	sp, r7
 800c964:	b002      	add	sp, #8
 800c966:	bd80      	pop	{r7, pc}
 800c968:	200017cc 	.word	0x200017cc
 800c96c:	080255ec 	.word	0x080255ec
 800c970:	08025e14 	.word	0x08025e14

0800c974 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c976:	b0b3      	sub	sp, #204	@ 0xcc
 800c978:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c97a:	4ae2      	ldr	r2, [pc, #904]	@ (800cd04 <calculateSPLQ31+0x390>)
 800c97c:	2338      	movs	r3, #56	@ 0x38
 800c97e:	2030      	movs	r0, #48	@ 0x30
 800c980:	181b      	adds	r3, r3, r0
 800c982:	19d9      	adds	r1, r3, r7
 800c984:	2334      	movs	r3, #52	@ 0x34
 800c986:	181b      	adds	r3, r3, r0
 800c988:	19d8      	adds	r0, r3, r7
 800c98a:	2380      	movs	r3, #128	@ 0x80
 800c98c:	f000 fc36 	bl	800d1fc <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c992:	2b00      	cmp	r3, #0
 800c994:	da00      	bge.n	800c998 <calculateSPLQ31+0x24>
 800c996:	3301      	adds	r3, #1
 800c998:	105b      	asrs	r3, r3, #1
 800c99a:	001a      	movs	r2, r3
 800c99c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	da00      	bge.n	800c9a4 <calculateSPLQ31+0x30>
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	105b      	asrs	r3, r3, #1
 800c9a6:	18d3      	adds	r3, r2, r3
 800c9a8:	2188      	movs	r1, #136	@ 0x88
 800c9aa:	187a      	adds	r2, r7, r1
 800c9ac:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c9ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c9b0:	187b      	adds	r3, r7, r1
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	2284      	movs	r2, #132	@ 0x84
 800c9ba:	18b9      	adds	r1, r7, r2
 800c9bc:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c9be:	18bb      	adds	r3, r7, r2
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4ad1      	ldr	r2, [pc, #836]	@ (800cd08 <calculateSPLQ31+0x394>)
 800c9c4:	0019      	movs	r1, r3
 800c9c6:	0010      	movs	r0, r2
 800c9c8:	f000 fc58 	bl	800d27c <getPo2factor>
 800c9cc:	0003      	movs	r3, r0
 800c9ce:	2280      	movs	r2, #128	@ 0x80
 800c9d0:	18ba      	adds	r2, r7, r2
 800c9d2:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	2284      	movs	r2, #132	@ 0x84
 800c9d8:	2130      	movs	r1, #48	@ 0x30
 800c9da:	1852      	adds	r2, r2, r1
 800c9dc:	19d2      	adds	r2, r2, r7
 800c9de:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	2280      	movs	r2, #128	@ 0x80
 800c9e4:	1852      	adds	r2, r2, r1
 800c9e6:	19d2      	adds	r2, r2, r7
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	e032      	b.n	800ca52 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c9ec:	4ac5      	ldr	r2, [pc, #788]	@ (800cd04 <calculateSPLQ31+0x390>)
 800c9ee:	2680      	movs	r6, #128	@ 0x80
 800c9f0:	2330      	movs	r3, #48	@ 0x30
 800c9f2:	18f1      	adds	r1, r6, r3
 800c9f4:	19cb      	adds	r3, r1, r7
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	589a      	ldr	r2, [r3, r2]
 800c9fc:	2188      	movs	r1, #136	@ 0x88
 800c9fe:	1879      	adds	r1, r7, r1
 800ca00:	680b      	ldr	r3, [r1, #0]
 800ca02:	1ad2      	subs	r2, r2, r3
 800ca04:	2180      	movs	r1, #128	@ 0x80
 800ca06:	1879      	adds	r1, r7, r1
 800ca08:	680b      	ldr	r3, [r1, #0]
 800ca0a:	409a      	lsls	r2, r3
 800ca0c:	0011      	movs	r1, r2
 800ca0e:	4abf      	ldr	r2, [pc, #764]	@ (800cd0c <calculateSPLQ31+0x398>)
 800ca10:	2084      	movs	r0, #132	@ 0x84
 800ca12:	2330      	movs	r3, #48	@ 0x30
 800ca14:	18c3      	adds	r3, r0, r3
 800ca16:	19db      	adds	r3, r3, r7
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800ca1e:	2230      	movs	r2, #48	@ 0x30
 800ca20:	1883      	adds	r3, r0, r2
 800ca22:	19db      	adds	r3, r3, r7
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	3301      	adds	r3, #1
 800ca28:	49b8      	ldr	r1, [pc, #736]	@ (800cd0c <calculateSPLQ31+0x398>)
 800ca2a:	009a      	lsls	r2, r3, #2
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	5053      	str	r3, [r2, r1]
        count += 2;
 800ca30:	2230      	movs	r2, #48	@ 0x30
 800ca32:	1883      	adds	r3, r0, r2
 800ca34:	19db      	adds	r3, r3, r7
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	3302      	adds	r3, #2
 800ca3a:	0011      	movs	r1, r2
 800ca3c:	1882      	adds	r2, r0, r2
 800ca3e:	19d2      	adds	r2, r2, r7
 800ca40:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800ca42:	000a      	movs	r2, r1
 800ca44:	18b3      	adds	r3, r6, r2
 800ca46:	19db      	adds	r3, r3, r7
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	18b2      	adds	r2, r6, r2
 800ca4e:	19d2      	adds	r2, r2, r7
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	2380      	movs	r3, #128	@ 0x80
 800ca54:	2630      	movs	r6, #48	@ 0x30
 800ca56:	199b      	adds	r3, r3, r6
 800ca58:	19db      	adds	r3, r3, r7
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca5e:	d9c5      	bls.n	800c9ec <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800ca60:	4bab      	ldr	r3, [pc, #684]	@ (800cd10 <calculateSPLQ31+0x39c>)
 800ca62:	6818      	ldr	r0, [r3, #0]
 800ca64:	49a9      	ldr	r1, [pc, #676]	@ (800cd0c <calculateSPLQ31+0x398>)
 800ca66:	2301      	movs	r3, #1
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f011 fa77 	bl	801df5c <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800ca6e:	4aa9      	ldr	r2, [pc, #676]	@ (800cd14 <calculateSPLQ31+0x3a0>)
 800ca70:	2338      	movs	r3, #56	@ 0x38
 800ca72:	199b      	adds	r3, r3, r6
 800ca74:	19d9      	adds	r1, r3, r7
 800ca76:	2334      	movs	r3, #52	@ 0x34
 800ca78:	199b      	adds	r3, r3, r6
 800ca7a:	19d8      	adds	r0, r3, r7
 800ca7c:	237e      	movs	r3, #126	@ 0x7e
 800ca7e:	f000 fbbd 	bl	800d1fc <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800ca82:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ca84:	2380      	movs	r3, #128	@ 0x80
 800ca86:	061b      	lsls	r3, r3, #24
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d101      	bne.n	800ca90 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800ca8c:	4b9e      	ldr	r3, [pc, #632]	@ (800cd08 <calculateSPLQ31+0x394>)
 800ca8e:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800ca90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ca92:	2380      	movs	r3, #128	@ 0x80
 800ca94:	061b      	lsls	r3, r3, #24
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d101      	bne.n	800ca9e <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800ca9a:	4b9b      	ldr	r3, [pc, #620]	@ (800cd08 <calculateSPLQ31+0x394>)
 800ca9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800ca9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caa0:	17da      	asrs	r2, r3, #31
 800caa2:	189b      	adds	r3, r3, r2
 800caa4:	4053      	eors	r3, r2
 800caa6:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800caa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800caaa:	17da      	asrs	r2, r3, #31
 800caac:	189b      	adds	r3, r3, r2
 800caae:	4053      	eors	r3, r2
 800cab0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800cab2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cab4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cab6:	429a      	cmp	r2, r3
 800cab8:	dd01      	ble.n	800cabe <calculateSPLQ31+0x14a>
    {
        max = min;
 800caba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cabc:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800cabe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cac0:	3304      	adds	r3, #4
 800cac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800cac4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cac6:	4a90      	ldr	r2, [pc, #576]	@ (800cd08 <calculateSPLQ31+0x394>)
 800cac8:	0019      	movs	r1, r3
 800caca:	0010      	movs	r0, r2
 800cacc:	f000 fbd6 	bl	800d27c <getPo2factor>
 800cad0:	0003      	movs	r3, r0
 800cad2:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800cad4:	2302      	movs	r3, #2
 800cad6:	22ac      	movs	r2, #172	@ 0xac
 800cad8:	18ba      	adds	r2, r7, r2
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	e012      	b.n	800cb04 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800cade:	4a8b      	ldr	r2, [pc, #556]	@ (800cd0c <calculateSPLQ31+0x398>)
 800cae0:	20ac      	movs	r0, #172	@ 0xac
 800cae2:	183b      	adds	r3, r7, r0
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	589a      	ldr	r2, [r3, r2]
 800caea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800caec:	409a      	lsls	r2, r3
 800caee:	0011      	movs	r1, r2
 800caf0:	4a86      	ldr	r2, [pc, #536]	@ (800cd0c <calculateSPLQ31+0x398>)
 800caf2:	183b      	adds	r3, r7, r0
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800cafa:	183b      	adds	r3, r7, r0
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3301      	adds	r3, #1
 800cb00:	183a      	adds	r2, r7, r0
 800cb02:	6013      	str	r3, [r2, #0]
 800cb04:	23ac      	movs	r3, #172	@ 0xac
 800cb06:	18fb      	adds	r3, r7, r3
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb0c:	d9e7      	bls.n	800cade <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800cb0e:	4b7d      	ldr	r3, [pc, #500]	@ (800cd04 <calculateSPLQ31+0x390>)
 800cb10:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800cb12:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cb14:	4b7d      	ldr	r3, [pc, #500]	@ (800cd0c <calculateSPLQ31+0x398>)
 800cb16:	2240      	movs	r2, #64	@ 0x40
 800cb18:	0018      	movs	r0, r3
 800cb1a:	f011 ffc9 	bl	801eab0 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800cb1e:	2330      	movs	r3, #48	@ 0x30
 800cb20:	18fb      	adds	r3, r7, r3
 800cb22:	0018      	movs	r0, r3
 800cb24:	2330      	movs	r3, #48	@ 0x30
 800cb26:	001a      	movs	r2, r3
 800cb28:	2100      	movs	r1, #0
 800cb2a:	f013 fde5 	bl	80206f8 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2300      	movs	r3, #0
 800cb32:	21a0      	movs	r1, #160	@ 0xa0
 800cb34:	1879      	adds	r1, r7, r1
 800cb36:	600a      	str	r2, [r1, #0]
 800cb38:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	229c      	movs	r2, #156	@ 0x9c
 800cb3e:	18ba      	adds	r2, r7, r2
 800cb40:	6013      	str	r3, [r2, #0]
 800cb42:	e05b      	b.n	800cbfc <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800cb44:	269c      	movs	r6, #156	@ 0x9c
 800cb46:	19bb      	adds	r3, r7, r6
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	009a      	lsls	r2, r3, #2
 800cb4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb4e:	189b      	adds	r3, r3, r2
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	17db      	asrs	r3, r3, #31
 800cb56:	617b      	str	r3, [r7, #20]
 800cb58:	4b6f      	ldr	r3, [pc, #444]	@ (800cd18 <calculateSPLQ31+0x3a4>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	19bb      	adds	r3, r7, r6
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	18d3      	adds	r3, r2, r3
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	60bb      	str	r3, [r7, #8]
 800cb68:	2300      	movs	r3, #0
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6938      	ldr	r0, [r7, #16]
 800cb72:	6979      	ldr	r1, [r7, #20]
 800cb74:	f7f3 fd24 	bl	80005c0 <__aeabi_lmul>
 800cb78:	0002      	movs	r2, r0
 800cb7a:	000b      	movs	r3, r1
 800cb7c:	0010      	movs	r0, r2
 800cb7e:	0019      	movs	r1, r3
 800cb80:	23a0      	movs	r3, #160	@ 0xa0
 800cb82:	18fa      	adds	r2, r7, r3
 800cb84:	6853      	ldr	r3, [r2, #4]
 800cb86:	6812      	ldr	r2, [r2, #0]
 800cb88:	1812      	adds	r2, r2, r0
 800cb8a:	414b      	adcs	r3, r1
 800cb8c:	21a0      	movs	r1, #160	@ 0xa0
 800cb8e:	1879      	adds	r1, r7, r1
 800cb90:	600a      	str	r2, [r1, #0]
 800cb92:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800cb94:	4b61      	ldr	r3, [pc, #388]	@ (800cd1c <calculateSPLQ31+0x3a8>)
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	19bb      	adds	r3, r7, r6
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	18d3      	adds	r3, r2, r3
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	2b06      	cmp	r3, #6
 800cba2:	d025      	beq.n	800cbf0 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800cba4:	4b5d      	ldr	r3, [pc, #372]	@ (800cd1c <calculateSPLQ31+0x3a8>)
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	19bb      	adds	r3, r7, r6
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	18d3      	adds	r3, r2, r3
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	2230      	movs	r2, #48	@ 0x30
 800cbb2:	18ba      	adds	r2, r7, r2
 800cbb4:	00db      	lsls	r3, r3, #3
 800cbb6:	18d3      	adds	r3, r2, r3
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	6859      	ldr	r1, [r3, #4]
 800cbbc:	19bb      	adds	r3, r7, r6
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	009a      	lsls	r2, r3, #2
 800cbc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbc4:	189b      	adds	r3, r3, r2
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	603b      	str	r3, [r7, #0]
 800cbca:	17db      	asrs	r3, r3, #31
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	4b53      	ldr	r3, [pc, #332]	@ (800cd1c <calculateSPLQ31+0x3a8>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	19be      	adds	r6, r7, r6
 800cbd4:	6833      	ldr	r3, [r6, #0]
 800cbd6:	18d3      	adds	r3, r2, r3
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	001e      	movs	r6, r3
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	1880      	adds	r0, r0, r2
 800cbe2:	4159      	adcs	r1, r3
 800cbe4:	2330      	movs	r3, #48	@ 0x30
 800cbe6:	18fa      	adds	r2, r7, r3
 800cbe8:	00f3      	lsls	r3, r6, #3
 800cbea:	18d3      	adds	r3, r2, r3
 800cbec:	6018      	str	r0, [r3, #0]
 800cbee:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800cbf0:	229c      	movs	r2, #156	@ 0x9c
 800cbf2:	18bb      	adds	r3, r7, r2
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	18ba      	adds	r2, r7, r2
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	239c      	movs	r3, #156	@ 0x9c
 800cbfe:	18fb      	adds	r3, r7, r3
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b3f      	cmp	r3, #63	@ 0x3f
 800cc04:	d99e      	bls.n	800cb44 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800cc06:	2380      	movs	r3, #128	@ 0x80
 800cc08:	18fb      	adds	r3, r7, r3
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	001a      	movs	r2, r3
 800cc10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc12:	005b      	lsls	r3, r3, #1
 800cc14:	18d3      	adds	r3, r2, r3
 800cc16:	3b22      	subs	r3, #34	@ 0x22
 800cc18:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800cc1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc1c:	17da      	asrs	r2, r3, #31
 800cc1e:	189b      	adds	r3, r3, r2
 800cc20:	4053      	eors	r3, r2
 800cc22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800cc24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	da62      	bge.n	800ccf0 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800cc2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc2c:	3b20      	subs	r3, #32
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	db05      	blt.n	800cc3e <calculateSPLQ31+0x2ca>
 800cc32:	22a0      	movs	r2, #160	@ 0xa0
 800cc34:	18ba      	adds	r2, r7, r2
 800cc36:	6812      	ldr	r2, [r2, #0]
 800cc38:	409a      	lsls	r2, r3
 800cc3a:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc3c:	e010      	b.n	800cc60 <calculateSPLQ31+0x2ec>
 800cc3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc40:	2220      	movs	r2, #32
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	22a0      	movs	r2, #160	@ 0xa0
 800cc46:	18ba      	adds	r2, r7, r2
 800cc48:	6812      	ldr	r2, [r2, #0]
 800cc4a:	40da      	lsrs	r2, r3
 800cc4c:	0013      	movs	r3, r2
 800cc4e:	22a4      	movs	r2, #164	@ 0xa4
 800cc50:	18ba      	adds	r2, r7, r2
 800cc52:	6811      	ldr	r1, [r2, #0]
 800cc54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc56:	4091      	lsls	r1, r2
 800cc58:	6279      	str	r1, [r7, #36]	@ 0x24
 800cc5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc5c:	431a      	orrs	r2, r3
 800cc5e:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc60:	21a0      	movs	r1, #160	@ 0xa0
 800cc62:	187b      	adds	r3, r7, r1
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc68:	409a      	lsls	r2, r3
 800cc6a:	623a      	str	r2, [r7, #32]
 800cc6c:	6a3b      	ldr	r3, [r7, #32]
 800cc6e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800cc70:	187a      	adds	r2, r7, r1
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cc76:	2300      	movs	r3, #0
 800cc78:	2298      	movs	r2, #152	@ 0x98
 800cc7a:	18ba      	adds	r2, r7, r2
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	e031      	b.n	800cce4 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800cc80:	2330      	movs	r3, #48	@ 0x30
 800cc82:	18fa      	adds	r2, r7, r3
 800cc84:	2398      	movs	r3, #152	@ 0x98
 800cc86:	18fb      	adds	r3, r7, r3
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	18d3      	adds	r3, r2, r3
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cc94:	3920      	subs	r1, #32
 800cc96:	2900      	cmp	r1, #0
 800cc98:	db03      	blt.n	800cca2 <calculateSPLQ31+0x32e>
 800cc9a:	0010      	movs	r0, r2
 800cc9c:	4088      	lsls	r0, r1
 800cc9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cca0:	e00c      	b.n	800ccbc <calculateSPLQ31+0x348>
 800cca2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cca4:	2020      	movs	r0, #32
 800cca6:	1a41      	subs	r1, r0, r1
 800cca8:	0010      	movs	r0, r2
 800ccaa:	40c8      	lsrs	r0, r1
 800ccac:	0001      	movs	r1, r0
 800ccae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ccb0:	001c      	movs	r4, r3
 800ccb2:	4084      	lsls	r4, r0
 800ccb4:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800ccb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccb8:	4308      	orrs	r0, r1
 800ccba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ccbc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ccbe:	0013      	movs	r3, r2
 800ccc0:	408b      	lsls	r3, r1
 800ccc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccc4:	2330      	movs	r3, #48	@ 0x30
 800ccc6:	18fa      	adds	r2, r7, r3
 800ccc8:	2098      	movs	r0, #152	@ 0x98
 800ccca:	183b      	adds	r3, r7, r0
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	00db      	lsls	r3, r3, #3
 800ccd0:	18d3      	adds	r3, r2, r3
 800ccd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccd6:	6019      	str	r1, [r3, #0]
 800ccd8:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ccda:	183b      	adds	r3, r7, r0
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3301      	adds	r3, #1
 800cce0:	183a      	adds	r2, r7, r0
 800cce2:	6013      	str	r3, [r2, #0]
 800cce4:	2398      	movs	r3, #152	@ 0x98
 800cce6:	18fb      	adds	r3, r7, r3
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b05      	cmp	r3, #5
 800ccec:	d9c8      	bls.n	800cc80 <calculateSPLQ31+0x30c>
 800ccee:	e06b      	b.n	800cdc8 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800ccf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccf2:	3b20      	subs	r3, #32
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	db13      	blt.n	800cd20 <calculateSPLQ31+0x3ac>
 800ccf8:	22a4      	movs	r2, #164	@ 0xa4
 800ccfa:	18ba      	adds	r2, r7, r2
 800ccfc:	6812      	ldr	r2, [r2, #0]
 800ccfe:	40da      	lsrs	r2, r3
 800cd00:	61ba      	str	r2, [r7, #24]
 800cd02:	e01e      	b.n	800cd42 <calculateSPLQ31+0x3ce>
 800cd04:	200015c8 	.word	0x200015c8
 800cd08:	7fffffff 	.word	0x7fffffff
 800cd0c:	20001814 	.word	0x20001814
 800cd10:	200000b8 	.word	0x200000b8
 800cd14:	2000181c 	.word	0x2000181c
 800cd18:	200000bc 	.word	0x200000bc
 800cd1c:	200000c8 	.word	0x200000c8
 800cd20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd22:	2220      	movs	r2, #32
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	22a4      	movs	r2, #164	@ 0xa4
 800cd28:	18ba      	adds	r2, r7, r2
 800cd2a:	6812      	ldr	r2, [r2, #0]
 800cd2c:	409a      	lsls	r2, r3
 800cd2e:	0013      	movs	r3, r2
 800cd30:	22a0      	movs	r2, #160	@ 0xa0
 800cd32:	18ba      	adds	r2, r7, r2
 800cd34:	6811      	ldr	r1, [r2, #0]
 800cd36:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cd38:	40d1      	lsrs	r1, r2
 800cd3a:	61b9      	str	r1, [r7, #24]
 800cd3c:	69ba      	ldr	r2, [r7, #24]
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	61ba      	str	r2, [r7, #24]
 800cd42:	23a4      	movs	r3, #164	@ 0xa4
 800cd44:	18fb      	adds	r3, r7, r3
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd4a:	40da      	lsrs	r2, r3
 800cd4c:	61fa      	str	r2, [r7, #28]
 800cd4e:	69ba      	ldr	r2, [r7, #24]
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	21a0      	movs	r1, #160	@ 0xa0
 800cd54:	1879      	adds	r1, r7, r1
 800cd56:	600a      	str	r2, [r1, #0]
 800cd58:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	2294      	movs	r2, #148	@ 0x94
 800cd5e:	18ba      	adds	r2, r7, r2
 800cd60:	6013      	str	r3, [r2, #0]
 800cd62:	e02c      	b.n	800cdbe <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800cd64:	2330      	movs	r3, #48	@ 0x30
 800cd66:	18fa      	adds	r2, r7, r3
 800cd68:	2394      	movs	r3, #148	@ 0x94
 800cd6a:	18fb      	adds	r3, r7, r3
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	18d3      	adds	r3, r2, r3
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cd78:	3920      	subs	r1, #32
 800cd7a:	2900      	cmp	r1, #0
 800cd7c:	db03      	blt.n	800cd86 <calculateSPLQ31+0x412>
 800cd7e:	0018      	movs	r0, r3
 800cd80:	40c8      	lsrs	r0, r1
 800cd82:	0004      	movs	r4, r0
 800cd84:	e00a      	b.n	800cd9c <calculateSPLQ31+0x428>
 800cd86:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cd88:	2020      	movs	r0, #32
 800cd8a:	1a41      	subs	r1, r0, r1
 800cd8c:	0018      	movs	r0, r3
 800cd8e:	4088      	lsls	r0, r1
 800cd90:	0001      	movs	r1, r0
 800cd92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd94:	0016      	movs	r6, r2
 800cd96:	40c6      	lsrs	r6, r0
 800cd98:	0034      	movs	r4, r6
 800cd9a:	430c      	orrs	r4, r1
 800cd9c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cd9e:	40cb      	lsrs	r3, r1
 800cda0:	001d      	movs	r5, r3
 800cda2:	2330      	movs	r3, #48	@ 0x30
 800cda4:	18fa      	adds	r2, r7, r3
 800cda6:	2194      	movs	r1, #148	@ 0x94
 800cda8:	187b      	adds	r3, r7, r1
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	18d3      	adds	r3, r2, r3
 800cdb0:	601c      	str	r4, [r3, #0]
 800cdb2:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cdb4:	187b      	adds	r3, r7, r1
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	187a      	adds	r2, r7, r1
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	2394      	movs	r3, #148	@ 0x94
 800cdc0:	18fb      	adds	r3, r7, r3
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b05      	cmp	r3, #5
 800cdc6:	d9cd      	bls.n	800cd64 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800cdc8:	230f      	movs	r3, #15
 800cdca:	425d      	negs	r5, r3
 800cdcc:	2305      	movs	r3, #5
 800cdce:	425e      	negs	r6, r3
 800cdd0:	4b4a      	ldr	r3, [pc, #296]	@ (800cefc <calculateSPLQ31+0x588>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	4b4a      	ldr	r3, [pc, #296]	@ (800cf00 <calculateSPLQ31+0x58c>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	21a0      	movs	r1, #160	@ 0xa0
 800cdde:	1879      	adds	r1, r7, r1
 800cde0:	6808      	ldr	r0, [r1, #0]
 800cde2:	6849      	ldr	r1, [r1, #4]
 800cde4:	4c47      	ldr	r4, [pc, #284]	@ (800cf04 <calculateSPLQ31+0x590>)
 800cde6:	9403      	str	r4, [sp, #12]
 800cde8:	4c47      	ldr	r4, [pc, #284]	@ (800cf08 <calculateSPLQ31+0x594>)
 800cdea:	9402      	str	r4, [sp, #8]
 800cdec:	9301      	str	r3, [sp, #4]
 800cdee:	9200      	str	r2, [sp, #0]
 800cdf0:	0033      	movs	r3, r6
 800cdf2:	002a      	movs	r2, r5
 800cdf4:	f000 fa86 	bl	800d304 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	2290      	movs	r2, #144	@ 0x90
 800cdfc:	18ba      	adds	r2, r7, r2
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	e026      	b.n	800ce50 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800ce02:	2330      	movs	r3, #48	@ 0x30
 800ce04:	18fa      	adds	r2, r7, r3
 800ce06:	2490      	movs	r4, #144	@ 0x90
 800ce08:	193b      	adds	r3, r7, r4
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	00db      	lsls	r3, r3, #3
 800ce0e:	18d3      	adds	r3, r2, r3
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	6859      	ldr	r1, [r3, #4]
 800ce14:	230f      	movs	r3, #15
 800ce16:	425d      	negs	r5, r3
 800ce18:	2305      	movs	r3, #5
 800ce1a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800ce1c:	193b      	adds	r3, r7, r4
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	009a      	lsls	r2, r3, #2
 800ce22:	4b3a      	ldr	r3, [pc, #232]	@ (800cf0c <calculateSPLQ31+0x598>)
 800ce24:	18d3      	adds	r3, r2, r3
 800ce26:	193a      	adds	r2, r7, r4
 800ce28:	6812      	ldr	r2, [r2, #0]
 800ce2a:	0094      	lsls	r4, r2, #2
 800ce2c:	4a38      	ldr	r2, [pc, #224]	@ (800cf10 <calculateSPLQ31+0x59c>)
 800ce2e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800ce30:	9203      	str	r2, [sp, #12]
 800ce32:	9302      	str	r3, [sp, #8]
 800ce34:	2300      	movs	r3, #0
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	0033      	movs	r3, r6
 800ce3e:	002a      	movs	r2, r5
 800ce40:	f000 fa60 	bl	800d304 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ce44:	2490      	movs	r4, #144	@ 0x90
 800ce46:	193b      	adds	r3, r7, r4
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	193a      	adds	r2, r7, r4
 800ce4e:	6013      	str	r3, [r2, #0]
 800ce50:	2390      	movs	r3, #144	@ 0x90
 800ce52:	18fb      	adds	r3, r7, r3
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b05      	cmp	r3, #5
 800ce58:	d9d3      	bls.n	800ce02 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800ce5a:	4b2b      	ldr	r3, [pc, #172]	@ (800cf08 <calculateSPLQ31+0x594>)
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	4b2d      	ldr	r3, [pc, #180]	@ (800cf14 <calculateSPLQ31+0x5a0>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	18d2      	adds	r2, r2, r3
 800ce64:	4b2b      	ldr	r3, [pc, #172]	@ (800cf14 <calculateSPLQ31+0x5a0>)
 800ce66:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800ce68:	4b26      	ldr	r3, [pc, #152]	@ (800cf04 <calculateSPLQ31+0x590>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	4b2a      	ldr	r3, [pc, #168]	@ (800cf18 <calculateSPLQ31+0x5a4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	18d2      	adds	r2, r2, r3
 800ce72:	4b29      	ldr	r3, [pc, #164]	@ (800cf18 <calculateSPLQ31+0x5a4>)
 800ce74:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ce76:	2300      	movs	r3, #0
 800ce78:	228c      	movs	r2, #140	@ 0x8c
 800ce7a:	18ba      	adds	r2, r7, r2
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	e025      	b.n	800cecc <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800ce80:	4b22      	ldr	r3, [pc, #136]	@ (800cf0c <calculateSPLQ31+0x598>)
 800ce82:	208c      	movs	r0, #140	@ 0x8c
 800ce84:	183a      	adds	r2, r7, r0
 800ce86:	6812      	ldr	r2, [r2, #0]
 800ce88:	0092      	lsls	r2, r2, #2
 800ce8a:	58d2      	ldr	r2, [r2, r3]
 800ce8c:	4b23      	ldr	r3, [pc, #140]	@ (800cf1c <calculateSPLQ31+0x5a8>)
 800ce8e:	1839      	adds	r1, r7, r0
 800ce90:	6809      	ldr	r1, [r1, #0]
 800ce92:	0089      	lsls	r1, r1, #2
 800ce94:	58cb      	ldr	r3, [r1, r3]
 800ce96:	18d1      	adds	r1, r2, r3
 800ce98:	4b20      	ldr	r3, [pc, #128]	@ (800cf1c <calculateSPLQ31+0x5a8>)
 800ce9a:	183a      	adds	r2, r7, r0
 800ce9c:	6812      	ldr	r2, [r2, #0]
 800ce9e:	0092      	lsls	r2, r2, #2
 800cea0:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cea2:	4b1b      	ldr	r3, [pc, #108]	@ (800cf10 <calculateSPLQ31+0x59c>)
 800cea4:	183a      	adds	r2, r7, r0
 800cea6:	6812      	ldr	r2, [r2, #0]
 800cea8:	0092      	lsls	r2, r2, #2
 800ceaa:	58d2      	ldr	r2, [r2, r3]
 800ceac:	4b1c      	ldr	r3, [pc, #112]	@ (800cf20 <calculateSPLQ31+0x5ac>)
 800ceae:	1839      	adds	r1, r7, r0
 800ceb0:	6809      	ldr	r1, [r1, #0]
 800ceb2:	0089      	lsls	r1, r1, #2
 800ceb4:	58cb      	ldr	r3, [r1, r3]
 800ceb6:	18d1      	adds	r1, r2, r3
 800ceb8:	4b19      	ldr	r3, [pc, #100]	@ (800cf20 <calculateSPLQ31+0x5ac>)
 800ceba:	183a      	adds	r2, r7, r0
 800cebc:	6812      	ldr	r2, [r2, #0]
 800cebe:	0092      	lsls	r2, r2, #2
 800cec0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cec2:	183b      	adds	r3, r7, r0
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3301      	adds	r3, #1
 800cec8:	183a      	adds	r2, r7, r0
 800ceca:	6013      	str	r3, [r2, #0]
 800cecc:	238c      	movs	r3, #140	@ 0x8c
 800cece:	18fb      	adds	r3, r7, r3
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b05      	cmp	r3, #5
 800ced4:	d9d4      	bls.n	800ce80 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800ced6:	4b13      	ldr	r3, [pc, #76]	@ (800cf24 <calculateSPLQ31+0x5b0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	4b11      	ldr	r3, [pc, #68]	@ (800cf24 <calculateSPLQ31+0x5b0>)
 800cede:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cee0:	4b10      	ldr	r3, [pc, #64]	@ (800cf24 <calculateSPLQ31+0x5b0>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b0f      	cmp	r3, #15
 800cee6:	d905      	bls.n	800cef4 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cee8:	4b0f      	ldr	r3, [pc, #60]	@ (800cf28 <calculateSPLQ31+0x5b4>)
 800ceea:	2201      	movs	r2, #1
 800ceec:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ceee:	4b0f      	ldr	r3, [pc, #60]	@ (800cf2c <calculateSPLQ31+0x5b8>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	701a      	strb	r2, [r3, #0]
    }
}
 800cef4:	46c0      	nop			@ (mov r8, r8)
 800cef6:	46bd      	mov	sp, r7
 800cef8:	b02f      	add	sp, #188	@ 0xbc
 800cefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cefc:	200000c0 	.word	0x200000c0
 800cf00:	200000c4 	.word	0x200000c4
 800cf04:	20000d94 	.word	0x20000d94
 800cf08:	20000d90 	.word	0x20000d90
 800cf0c:	20000d98 	.word	0x20000d98
 800cf10:	20000db0 	.word	0x20000db0
 800cf14:	200017d8 	.word	0x200017d8
 800cf18:	200017dc 	.word	0x200017dc
 800cf1c:	200017e0 	.word	0x200017e0
 800cf20:	200017f8 	.word	0x200017f8
 800cf24:	20001810 	.word	0x20001810
 800cf28:	20000d85 	.word	0x20000d85
 800cf2c:	20000d83 	.word	0x20000d83

0800cf30 <resetSPLstate>:

static void resetSPLstate(void)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cf36:	4b11      	ldr	r3, [pc, #68]	@ (800cf7c <resetSPLstate+0x4c>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cf3c:	4b10      	ldr	r3, [pc, #64]	@ (800cf80 <resetSPLstate+0x50>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cf42:	4b10      	ldr	r3, [pc, #64]	@ (800cf84 <resetSPLstate+0x54>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	607b      	str	r3, [r7, #4]
 800cf4c:	e00c      	b.n	800cf68 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cf4e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf88 <resetSPLstate+0x58>)
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	0092      	lsls	r2, r2, #2
 800cf54:	2100      	movs	r1, #0
 800cf56:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cf58:	4b0c      	ldr	r3, [pc, #48]	@ (800cf8c <resetSPLstate+0x5c>)
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	0092      	lsls	r2, r2, #2
 800cf5e:	2100      	movs	r1, #0
 800cf60:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3301      	adds	r3, #1
 800cf66:	607b      	str	r3, [r7, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b05      	cmp	r3, #5
 800cf6c:	d9ef      	bls.n	800cf4e <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cf6e:	4b08      	ldr	r3, [pc, #32]	@ (800cf90 <resetSPLstate+0x60>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	701a      	strb	r2, [r3, #0]
}
 800cf74:	46c0      	nop			@ (mov r8, r8)
 800cf76:	46bd      	mov	sp, r7
 800cf78:	b002      	add	sp, #8
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	200017d8 	.word	0x200017d8
 800cf80:	200017dc 	.word	0x200017dc
 800cf84:	20001810 	.word	0x20001810
 800cf88:	200017e0 	.word	0x200017e0
 800cf8c:	200017f8 	.word	0x200017f8
 800cf90:	20000d85 	.word	0x20000d85

0800cf94 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cf94:	b5b0      	push	{r4, r5, r7, lr}
 800cf96:	b090      	sub	sp, #64	@ 0x40
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	0019      	movs	r1, r3
 800cfa0:	1dfb      	adds	r3, r7, #7
 800cfa2:	701a      	strb	r2, [r3, #0]
 800cfa4:	1dbb      	adds	r3, r7, #6
 800cfa6:	1c0a      	adds	r2, r1, #0
 800cfa8:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cfaa:	1dfb      	adds	r3, r7, #7
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d005      	beq.n	800cfbe <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cfb2:	4b3b      	ldr	r3, [pc, #236]	@ (800d0a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cfb8:	4b3a      	ldr	r3, [pc, #232]	@ (800d0a4 <getFilteredMaxAmplitudeQ31+0x110>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cfc6:	2305      	movs	r3, #5
 800cfc8:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cfca:	2300      	movs	r3, #0
 800cfcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfce:	e040      	b.n	800d052 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cfd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	18d3      	adds	r3, r2, r3
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfdc:	409a      	lsls	r2, r3
 800cfde:	0013      	movs	r3, r2
 800cfe0:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cfe2:	4b30      	ldr	r3, [pc, #192]	@ (800d0a4 <getFilteredMaxAmplitudeQ31+0x110>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	425a      	negs	r2, r3
 800cfe8:	4b2e      	ldr	r3, [pc, #184]	@ (800d0a4 <getFilteredMaxAmplitudeQ31+0x110>)
 800cfea:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cfec:	2418      	movs	r4, #24
 800cfee:	193a      	adds	r2, r7, r4
 800cff0:	492c      	ldr	r1, [pc, #176]	@ (800d0a4 <getFilteredMaxAmplitudeQ31+0x110>)
 800cff2:	231c      	movs	r3, #28
 800cff4:	18f8      	adds	r0, r7, r3
 800cff6:	2301      	movs	r3, #1
 800cff8:	f011 fdb2 	bl	801eb60 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cffc:	2514      	movs	r5, #20
 800cffe:	197a      	adds	r2, r7, r5
 800d000:	1939      	adds	r1, r7, r4
 800d002:	4829      	ldr	r0, [pc, #164]	@ (800d0a8 <getFilteredMaxAmplitudeQ31+0x114>)
 800d004:	2301      	movs	r3, #1
 800d006:	f011 fd79 	bl	801eafc <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800d00a:	2410      	movs	r4, #16
 800d00c:	193a      	adds	r2, r7, r4
 800d00e:	4924      	ldr	r1, [pc, #144]	@ (800d0a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d010:	4826      	ldr	r0, [pc, #152]	@ (800d0ac <getFilteredMaxAmplitudeQ31+0x118>)
 800d012:	2301      	movs	r3, #1
 800d014:	f011 fd72 	bl	801eafc <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800d018:	4a21      	ldr	r2, [pc, #132]	@ (800d0a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d01a:	1939      	adds	r1, r7, r4
 800d01c:	1978      	adds	r0, r7, r5
 800d01e:	2301      	movs	r3, #1
 800d020:	f011 fd9e 	bl	801eb60 <arm_add_q31>

        lastData = fx;
 800d024:	69fa      	ldr	r2, [r7, #28]
 800d026:	4b1f      	ldr	r3, [pc, #124]	@ (800d0a4 <getFilteredMaxAmplitudeQ31+0x110>)
 800d028:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800d02a:	4b1d      	ldr	r3, [pc, #116]	@ (800d0a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d030:	429a      	cmp	r2, r3
 800d032:	da03      	bge.n	800d03c <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800d034:	4b1a      	ldr	r3, [pc, #104]	@ (800d0a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d03a:	e007      	b.n	800d04c <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800d03c:	4b18      	ldr	r3, [pc, #96]	@ (800d0a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d042:	429a      	cmp	r2, r3
 800d044:	dd02      	ble.n	800d04c <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800d046:	4b16      	ldr	r3, [pc, #88]	@ (800d0a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800d04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d04e:	3301      	adds	r3, #1
 800d050:	637b      	str	r3, [r7, #52]	@ 0x34
 800d052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	429a      	cmp	r2, r3
 800d058:	d3ba      	bcc.n	800cfd0 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800d05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05c:	17da      	asrs	r2, r3, #31
 800d05e:	189b      	adds	r3, r3, r2
 800d060:	4053      	eors	r3, r2
 800d062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800d064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d066:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800d068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d200      	bcs.n	800d072 <getFilteredMaxAmplitudeQ31+0xde>
 800d070:	0013      	movs	r3, r2
 800d072:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800d074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d078:	40da      	lsrs	r2, r3
 800d07a:	0013      	movs	r3, r2
 800d07c:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800d07e:	1dbb      	adds	r3, r7, #6
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d007      	beq.n	800d096 <getFilteredMaxAmplitudeQ31+0x102>
 800d086:	4b0a      	ldr	r3, [pc, #40]	@ (800d0b0 <getFilteredMaxAmplitudeQ31+0x11c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6a3a      	ldr	r2, [r7, #32]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d902      	bls.n	800d096 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800d090:	4b07      	ldr	r3, [pc, #28]	@ (800d0b0 <getFilteredMaxAmplitudeQ31+0x11c>)
 800d092:	6a3a      	ldr	r2, [r7, #32]
 800d094:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800d096:	6a3b      	ldr	r3, [r7, #32]
}
 800d098:	0018      	movs	r0, r3
 800d09a:	46bd      	mov	sp, r7
 800d09c:	b010      	add	sp, #64	@ 0x40
 800d09e:	bdb0      	pop	{r4, r5, r7, pc}
 800d0a0:	20001c14 	.word	0x20001c14
 800d0a4:	20001c18 	.word	0x20001c18
 800d0a8:	08025e0c 	.word	0x08025e0c
 800d0ac:	08025e10 	.word	0x08025e10
 800d0b0:	20000d8c 	.word	0x20000d8c

0800d0b4 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800d0c0:	4913      	ldr	r1, [pc, #76]	@ (800d110 <floatToIntAndFrac2dp+0x5c>)
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f7f3 ff6c 	bl	8000fa0 <__aeabi_fmul>
 800d0c8:	1c03      	adds	r3, r0, #0
 800d0ca:	1c18      	adds	r0, r3, #0
 800d0cc:	f016 f97c 	bl	80233c8 <roundf>
 800d0d0:	1c03      	adds	r3, r0, #0
 800d0d2:	1c18      	adds	r0, r3, #0
 800d0d4:	f7f3 faa2 	bl	800061c <__aeabi_f2uiz>
 800d0d8:	0003      	movs	r3, r0
 800d0da:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	2164      	movs	r1, #100	@ 0x64
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	f7f3 f85f 	bl	80001a4 <__udivsi3>
 800d0e6:	0003      	movs	r3, r0
 800d0e8:	001a      	movs	r2, r3
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2164      	movs	r1, #100	@ 0x64
 800d0fa:	434b      	muls	r3, r1
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	b2da      	uxtb	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	701a      	strb	r2, [r3, #0]
}
 800d106:	46c0      	nop			@ (mov r8, r8)
 800d108:	46bd      	mov	sp, r7
 800d10a:	b006      	add	sp, #24
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	46c0      	nop			@ (mov r8, r8)
 800d110:	42c80000 	.word	0x42c80000

0800d114 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800d120:	4914      	ldr	r1, [pc, #80]	@ (800d174 <floatToIntAndFrac1dp+0x60>)
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f7f3 ff3c 	bl	8000fa0 <__aeabi_fmul>
 800d128:	1c03      	adds	r3, r0, #0
 800d12a:	1c18      	adds	r0, r3, #0
 800d12c:	f016 f94c 	bl	80233c8 <roundf>
 800d130:	1c03      	adds	r3, r0, #0
 800d132:	1c18      	adds	r0, r3, #0
 800d134:	f7f3 fa72 	bl	800061c <__aeabi_f2uiz>
 800d138:	0003      	movs	r3, r0
 800d13a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	210a      	movs	r1, #10
 800d140:	0018      	movs	r0, r3
 800d142:	f7f3 f82f 	bl	80001a4 <__udivsi3>
 800d146:	0003      	movs	r3, r0
 800d148:	001a      	movs	r2, r3
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	b2da      	uxtb	r2, r3
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	b2db      	uxtb	r3, r3
 800d158:	1c19      	adds	r1, r3, #0
 800d15a:	0089      	lsls	r1, r1, #2
 800d15c:	18cb      	adds	r3, r1, r3
 800d15e:	18db      	adds	r3, r3, r3
 800d160:	b2db      	uxtb	r3, r3
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	b2da      	uxtb	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	701a      	strb	r2, [r3, #0]
}
 800d16a:	46c0      	nop			@ (mov r8, r8)
 800d16c:	46bd      	mov	sp, r7
 800d16e:	b006      	add	sp, #24
 800d170:	bd80      	pop	{r7, pc}
 800d172:	46c0      	nop			@ (mov r8, r8)
 800d174:	41200000 	.word	0x41200000

0800d178 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800d178:	b590      	push	{r4, r7, lr}
 800d17a:	b087      	sub	sp, #28
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7f4 fa22 	bl	80015d0 <__aeabi_i2f>
 800d18c:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d18e:	6838      	ldr	r0, [r7, #0]
 800d190:	f7f4 fa1e 	bl	80015d0 <__aeabi_i2f>
 800d194:	1c03      	adds	r3, r0, #0
 800d196:	4918      	ldr	r1, [pc, #96]	@ (800d1f8 <sumToIntAverage+0x80>)
 800d198:	1c18      	adds	r0, r3, #0
 800d19a:	f7f3 fd1b 	bl	8000bd4 <__aeabi_fdiv>
 800d19e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d1a0:	1c19      	adds	r1, r3, #0
 800d1a2:	1c20      	adds	r0, r4, #0
 800d1a4:	f7f3 fb8c 	bl	80008c0 <__aeabi_fadd>
 800d1a8:	1c03      	adds	r3, r0, #0
 800d1aa:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d1ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1ae:	f7f4 fa5b 	bl	8001668 <__aeabi_ui2f>
 800d1b2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d1b4:	1c19      	adds	r1, r3, #0
 800d1b6:	1c20      	adds	r0, r4, #0
 800d1b8:	f7f3 fd0c 	bl	8000bd4 <__aeabi_fdiv>
 800d1bc:	1c03      	adds	r3, r0, #0
 800d1be:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	2310      	movs	r3, #16
 800d1c8:	18f9      	adds	r1, r7, r3
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	1c18      	adds	r0, r3, #0
 800d1ce:	f7ff ffa1 	bl	800d114 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	2bff      	cmp	r3, #255	@ 0xff
 800d1d6:	d906      	bls.n	800d1e6 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	22ff      	movs	r2, #255	@ 0xff
 800d1dc:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	2209      	movs	r2, #9
 800d1e2:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800d1e4:	e003      	b.n	800d1ee <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	701a      	strb	r2, [r3, #0]
}
 800d1ee:	46c0      	nop			@ (mov r8, r8)
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	b007      	add	sp, #28
 800d1f4:	bd90      	pop	{r4, r7, pc}
 800d1f6:	46c0      	nop			@ (mov r8, r8)
 800d1f8:	41200000 	.word	0x41200000

0800d1fc <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b086      	sub	sp, #24
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	2280      	movs	r2, #128	@ 0x80
 800d20e:	0612      	lsls	r2, r2, #24
 800d210:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	4a18      	ldr	r2, [pc, #96]	@ (800d278 <findMinMax+0x7c>)
 800d216:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d218:	2300      	movs	r3, #0
 800d21a:	617b      	str	r3, [r7, #20]
 800d21c:	e022      	b.n	800d264 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	18d3      	adds	r3, r2, r3
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	da06      	bge.n	800d23e <findMinMax+0x42>
        {
            min[0] = array[i];
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	18d3      	adds	r3, r2, r3
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	18d3      	adds	r3, r2, r3
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	dd06      	ble.n	800d25e <findMinMax+0x62>
        {
            max[0] = array[i];
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	18d3      	adds	r3, r2, r3
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	3301      	adds	r3, #1
 800d262:	617b      	str	r3, [r7, #20]
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d3d8      	bcc.n	800d21e <findMinMax+0x22>
        }
    }
}
 800d26c:	46c0      	nop			@ (mov r8, r8)
 800d26e:	46c0      	nop			@ (mov r8, r8)
 800d270:	46bd      	mov	sp, r7
 800d272:	b006      	add	sp, #24
 800d274:	bd80      	pop	{r7, pc}
 800d276:	46c0      	nop			@ (mov r8, r8)
 800d278:	7fffffff 	.word	0x7fffffff

0800d27c <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d302      	bcc.n	800d298 <getPo2factor+0x1c>
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d107      	bne.n	800d2a8 <getPo2factor+0x2c>
    {
        return 0;
 800d298:	2300      	movs	r3, #0
 800d29a:	e00d      	b.n	800d2b8 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	085b      	lsrs	r3, r3, #1
 800d2a0:	607b      	str	r3, [r7, #4]
        bitShift++;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d2f5      	bcs.n	800d29c <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
}
 800d2b8:	0018      	movs	r0, r3
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	b004      	add	sp, #16
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f7f4 f9ca 	bl	8001668 <__aeabi_ui2f>
 800d2d4:	1c03      	adds	r3, r0, #0
 800d2d6:	1c19      	adds	r1, r3, #0
 800d2d8:	68b8      	ldr	r0, [r7, #8]
 800d2da:	f7f3 fe61 	bl	8000fa0 <__aeabi_fmul>
 800d2de:	1c03      	adds	r3, r0, #0
 800d2e0:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	2310      	movs	r3, #16
 800d2ea:	18f9      	adds	r1, r7, r3
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	1c18      	adds	r0, r3, #0
 800d2f0:	f7ff fee0 	bl	800d0b4 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	801a      	strh	r2, [r3, #0]
}
 800d2fc:	46c0      	nop			@ (mov r8, r8)
 800d2fe:	46bd      	mov	sp, r7
 800d300:	b006      	add	sp, #24
 800d302:	bd80      	pop	{r7, pc}

0800d304 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60b8      	str	r0, [r7, #8]
 800d30c:	60f9      	str	r1, [r7, #12]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800d312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d314:	6a3a      	ldr	r2, [r7, #32]
 800d316:	68b8      	ldr	r0, [r7, #8]
 800d318:	68f9      	ldr	r1, [r7, #12]
 800d31a:	f7fa f987 	bl	800762c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800d31e:	6a3b      	ldr	r3, [r7, #32]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	18d2      	adds	r2, r2, r3
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	18d2      	adds	r2, r2, r3
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800d32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	18d2      	adds	r2, r2, r3
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	18d2      	adds	r2, r2, r3
 800d33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33c:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800d33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	0011      	movs	r1, r2
 800d344:	0018      	movs	r0, r3
 800d346:	f7fa fa01 	bl	800774c <correctIntFracNumber>
}
 800d34a:	46c0      	nop			@ (mov r8, r8)
 800d34c:	46bd      	mov	sp, r7
 800d34e:	b004      	add	sp, #16
 800d350:	bd80      	pop	{r7, pc}

0800d352 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b086      	sub	sp, #24
 800d356:	af00      	add	r7, sp, #0
 800d358:	60f8      	str	r0, [r7, #12]
 800d35a:	60b9      	str	r1, [r7, #8]
 800d35c:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d362:	2300      	movs	r3, #0
 800d364:	613b      	str	r3, [r7, #16]
 800d366:	e019      	b.n	800d39c <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	18d3      	adds	r3, r2, r3
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	3201      	adds	r2, #1
 800d378:	0052      	lsls	r2, r2, #1
 800d37a:	68f9      	ldr	r1, [r7, #12]
 800d37c:	188a      	adds	r2, r1, r2
 800d37e:	8812      	ldrh	r2, [r2, #0]
 800d380:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d382:	0019      	movs	r1, r3
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d38c:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d38e:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	3301      	adds	r3, #1
 800d394:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	3304      	adds	r3, #4
 800d39a:	613b      	str	r3, [r7, #16]
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d3e1      	bcc.n	800d368 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d3a4:	46c0      	nop			@ (mov r8, r8)
 800d3a6:	46c0      	nop			@ (mov r8, r8)
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	b006      	add	sp, #24
 800d3ac:	bd80      	pop	{r7, pc}
	...

0800d3b0 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	af00      	add	r7, sp, #0
  init = false;
 800d3b4:	4b02      	ldr	r3, [pc, #8]	@ (800d3c0 <InitDone+0x10>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	701a      	strb	r2, [r3, #0]
}
 800d3ba:	46c0      	nop			@ (mov r8, r8)
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	200000cc 	.word	0x200000cc

0800d3c4 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d3ca:	f7f9 f8ad 	bl	8006528 <ReadBatteryVoltage>
 800d3ce:	1c02      	adds	r2, r0, #0
 800d3d0:	4b25      	ldr	r3, [pc, #148]	@ (800d468 <batteryChargeCheck+0xa4>)
 800d3d2:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d3d4:	4b24      	ldr	r3, [pc, #144]	@ (800d468 <batteryChargeCheck+0xa4>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4924      	ldr	r1, [pc, #144]	@ (800d46c <batteryChargeCheck+0xa8>)
 800d3da:	1c18      	adds	r0, r3, #0
 800d3dc:	f7f3 f8a8 	bl	8000530 <__aeabi_fcmplt>
 800d3e0:	1e03      	subs	r3, r0, #0
 800d3e2:	d002      	beq.n	800d3ea <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d3e4:	1dfb      	adds	r3, r7, #7
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d3ea:	4b1f      	ldr	r3, [pc, #124]	@ (800d468 <batteryChargeCheck+0xa4>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	491f      	ldr	r1, [pc, #124]	@ (800d46c <batteryChargeCheck+0xa8>)
 800d3f0:	1c18      	adds	r0, r3, #0
 800d3f2:	f7f3 f8bb 	bl	800056c <__aeabi_fcmpge>
 800d3f6:	1e03      	subs	r3, r0, #0
 800d3f8:	d00d      	beq.n	800d416 <batteryChargeCheck+0x52>
 800d3fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d468 <batteryChargeCheck+0xa4>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	1c18      	adds	r0, r3, #0
 800d400:	f7f6 f830 	bl	8003464 <__aeabi_f2d>
 800d404:	4a1a      	ldr	r2, [pc, #104]	@ (800d470 <batteryChargeCheck+0xac>)
 800d406:	4b1b      	ldr	r3, [pc, #108]	@ (800d474 <batteryChargeCheck+0xb0>)
 800d408:	f7f3 f858 	bl	80004bc <__aeabi_dcmplt>
 800d40c:	1e03      	subs	r3, r0, #0
 800d40e:	d002      	beq.n	800d416 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d410:	1dfb      	adds	r3, r7, #7
 800d412:	2201      	movs	r2, #1
 800d414:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d416:	4b14      	ldr	r3, [pc, #80]	@ (800d468 <batteryChargeCheck+0xa4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	1c18      	adds	r0, r3, #0
 800d41c:	f7f6 f822 	bl	8003464 <__aeabi_f2d>
 800d420:	4a13      	ldr	r2, [pc, #76]	@ (800d470 <batteryChargeCheck+0xac>)
 800d422:	4b14      	ldr	r3, [pc, #80]	@ (800d474 <batteryChargeCheck+0xb0>)
 800d424:	f7f3 f868 	bl	80004f8 <__aeabi_dcmpge>
 800d428:	1e03      	subs	r3, r0, #0
 800d42a:	d00b      	beq.n	800d444 <batteryChargeCheck+0x80>
 800d42c:	4b0e      	ldr	r3, [pc, #56]	@ (800d468 <batteryChargeCheck+0xa4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2181      	movs	r1, #129	@ 0x81
 800d432:	05c9      	lsls	r1, r1, #23
 800d434:	1c18      	adds	r0, r3, #0
 800d436:	f7f3 f87b 	bl	8000530 <__aeabi_fcmplt>
 800d43a:	1e03      	subs	r3, r0, #0
 800d43c:	d002      	beq.n	800d444 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d43e:	1dfb      	adds	r3, r7, #7
 800d440:	2202      	movs	r2, #2
 800d442:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d444:	4b08      	ldr	r3, [pc, #32]	@ (800d468 <batteryChargeCheck+0xa4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2181      	movs	r1, #129	@ 0x81
 800d44a:	05c9      	lsls	r1, r1, #23
 800d44c:	1c18      	adds	r0, r3, #0
 800d44e:	f7f3 f88d 	bl	800056c <__aeabi_fcmpge>
 800d452:	1e03      	subs	r3, r0, #0
 800d454:	d002      	beq.n	800d45c <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d456:	1dfb      	adds	r3, r7, #7
 800d458:	2203      	movs	r2, #3
 800d45a:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d45c:	1dfb      	adds	r3, r7, #7
 800d45e:	781b      	ldrb	r3, [r3, #0]
}
 800d460:	0018      	movs	r0, r3
 800d462:	46bd      	mov	sp, r7
 800d464:	b002      	add	sp, #8
 800d466:	bd80      	pop	{r7, pc}
 800d468:	20001c2c 	.word	0x20001c2c
 800d46c:	40600000 	.word	0x40600000
 800d470:	9999999a 	.word	0x9999999a
 800d474:	400d9999 	.word	0x400d9999

0800d478 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d478:	b5b0      	push	{r4, r5, r7, lr}
 800d47a:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d47c:	f7f9 f8b6 	bl	80065ec <ReadSolarVoltage>
 800d480:	0003      	movs	r3, r0
 800d482:	001a      	movs	r2, r3
 800d484:	4b1a      	ldr	r3, [pc, #104]	@ (800d4f0 <Calculate_LED_ON+0x78>)
 800d486:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d488:	4b19      	ldr	r3, [pc, #100]	@ (800d4f0 <Calculate_LED_ON+0x78>)
 800d48a:	881b      	ldrh	r3, [r3, #0]
 800d48c:	4a19      	ldr	r2, [pc, #100]	@ (800d4f4 <Calculate_LED_ON+0x7c>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d802      	bhi.n	800d498 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d492:	4b17      	ldr	r3, [pc, #92]	@ (800d4f0 <Calculate_LED_ON+0x78>)
 800d494:	4a18      	ldr	r2, [pc, #96]	@ (800d4f8 <Calculate_LED_ON+0x80>)
 800d496:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d498:	4b15      	ldr	r3, [pc, #84]	@ (800d4f0 <Calculate_LED_ON+0x78>)
 800d49a:	881b      	ldrh	r3, [r3, #0]
 800d49c:	4a17      	ldr	r2, [pc, #92]	@ (800d4fc <Calculate_LED_ON+0x84>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d902      	bls.n	800d4a8 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d4a2:	4b13      	ldr	r3, [pc, #76]	@ (800d4f0 <Calculate_LED_ON+0x78>)
 800d4a4:	4a15      	ldr	r2, [pc, #84]	@ (800d4fc <Calculate_LED_ON+0x84>)
 800d4a6:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d4a8:	4b11      	ldr	r3, [pc, #68]	@ (800d4f0 <Calculate_LED_ON+0x78>)
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	f7f5 ff87 	bl	80033c0 <__aeabi_i2d>
 800d4b2:	0004      	movs	r4, r0
 800d4b4:	000d      	movs	r5, r1
 800d4b6:	4b0e      	ldr	r3, [pc, #56]	@ (800d4f0 <Calculate_LED_ON+0x78>)
 800d4b8:	881b      	ldrh	r3, [r3, #0]
 800d4ba:	001a      	movs	r2, r3
 800d4bc:	4b10      	ldr	r3, [pc, #64]	@ (800d500 <Calculate_LED_ON+0x88>)
 800d4be:	1a9b      	subs	r3, r3, r2
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	f7f5 ff7d 	bl	80033c0 <__aeabi_i2d>
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d504 <Calculate_LED_ON+0x8c>)
 800d4ca:	f7f5 f8b7 	bl	800263c <__aeabi_dmul>
 800d4ce:	0002      	movs	r2, r0
 800d4d0:	000b      	movs	r3, r1
 800d4d2:	0020      	movs	r0, r4
 800d4d4:	0029      	movs	r1, r5
 800d4d6:	f7f4 f909 	bl	80016ec <__aeabi_dadd>
 800d4da:	0002      	movs	r2, r0
 800d4dc:	000b      	movs	r3, r1
 800d4de:	0010      	movs	r0, r2
 800d4e0:	0019      	movs	r1, r3
 800d4e2:	f7f3 f8b3 	bl	800064c <__aeabi_d2uiz>
 800d4e6:	0003      	movs	r3, r0
 800d4e8:	b29b      	uxth	r3, r3
}
 800d4ea:	0018      	movs	r0, r3
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d4f0:	20001c30 	.word	0x20001c30
 800d4f4:	00000b53 	.word	0x00000b53
 800d4f8:	00000b54 	.word	0x00000b54
 800d4fc:	0000125c 	.word	0x0000125c
 800d500:	00000dee 	.word	0x00000dee
 800d504:	3ff80000 	.word	0x3ff80000

0800d508 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d508:	b590      	push	{r4, r7, lr}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	0004      	movs	r4, r0
 800d510:	0008      	movs	r0, r1
 800d512:	0011      	movs	r1, r2
 800d514:	1dbb      	adds	r3, r7, #6
 800d516:	1c22      	adds	r2, r4, #0
 800d518:	801a      	strh	r2, [r3, #0]
 800d51a:	1d3b      	adds	r3, r7, #4
 800d51c:	1c02      	adds	r2, r0, #0
 800d51e:	801a      	strh	r2, [r3, #0]
 800d520:	1cbb      	adds	r3, r7, #2
 800d522:	1c0a      	adds	r2, r1, #0
 800d524:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d526:	4b0f      	ldr	r3, [pc, #60]	@ (800d564 <SetStatusLED+0x5c>)
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d107      	bne.n	800d53e <SetStatusLED+0x36>
 800d52e:	4b0e      	ldr	r3, [pc, #56]	@ (800d568 <SetStatusLED+0x60>)
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d103      	bne.n	800d53e <SetStatusLED+0x36>
 800d536:	4b0d      	ldr	r3, [pc, #52]	@ (800d56c <SetStatusLED+0x64>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00e      	beq.n	800d55c <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d53e:	2380      	movs	r3, #128	@ 0x80
 800d540:	05db      	lsls	r3, r3, #23
 800d542:	1dba      	adds	r2, r7, #6
 800d544:	8812      	ldrh	r2, [r2, #0]
 800d546:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d548:	2380      	movs	r3, #128	@ 0x80
 800d54a:	05db      	lsls	r3, r3, #23
 800d54c:	1d3a      	adds	r2, r7, #4
 800d54e:	8812      	ldrh	r2, [r2, #0]
 800d550:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d552:	2380      	movs	r3, #128	@ 0x80
 800d554:	05db      	lsls	r3, r3, #23
 800d556:	1cba      	adds	r2, r7, #2
 800d558:	8812      	ldrh	r2, [r2, #0]
 800d55a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d55c:	46c0      	nop			@ (mov r8, r8)
 800d55e:	46bd      	mov	sp, r7
 800d560:	b003      	add	sp, #12
 800d562:	bd90      	pop	{r4, r7, pc}
 800d564:	20001c1d 	.word	0x20001c1d
 800d568:	200000cc 	.word	0x200000cc
 800d56c:	20001c1e 	.word	0x20001c1e

0800d570 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d570:	b590      	push	{r4, r7, lr}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	0004      	movs	r4, r0
 800d578:	0008      	movs	r0, r1
 800d57a:	0011      	movs	r1, r2
 800d57c:	1dfb      	adds	r3, r7, #7
 800d57e:	1c22      	adds	r2, r4, #0
 800d580:	701a      	strb	r2, [r3, #0]
 800d582:	1dbb      	adds	r3, r7, #6
 800d584:	1c02      	adds	r2, r0, #0
 800d586:	701a      	strb	r2, [r3, #0]
 800d588:	1d7b      	adds	r3, r7, #5
 800d58a:	1c0a      	adds	r2, r1, #0
 800d58c:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d58e:	4b19      	ldr	r3, [pc, #100]	@ (800d5f4 <SetDBLED+0x84>)
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d107      	bne.n	800d5a6 <SetDBLED+0x36>
 800d596:	4b18      	ldr	r3, [pc, #96]	@ (800d5f8 <SetDBLED+0x88>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d103      	bne.n	800d5a6 <SetDBLED+0x36>
 800d59e:	4b17      	ldr	r3, [pc, #92]	@ (800d5fc <SetDBLED+0x8c>)
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d022      	beq.n	800d5ec <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d5a6:	1dfb      	adds	r3, r7, #7
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	4053      	eors	r3, r2
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	001a      	movs	r2, r3
 800d5b2:	4b13      	ldr	r3, [pc, #76]	@ (800d600 <SetDBLED+0x90>)
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	0018      	movs	r0, r3
 800d5b8:	f003 f8d7 	bl	801076a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d5bc:	1dbb      	adds	r3, r7, #6
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	4053      	eors	r3, r2
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	001a      	movs	r2, r3
 800d5c8:	2380      	movs	r3, #128	@ 0x80
 800d5ca:	005b      	lsls	r3, r3, #1
 800d5cc:	480c      	ldr	r0, [pc, #48]	@ (800d600 <SetDBLED+0x90>)
 800d5ce:	0019      	movs	r1, r3
 800d5d0:	f003 f8cb 	bl	801076a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d5d4:	1d7b      	adds	r3, r7, #5
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	4053      	eors	r3, r2
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	001a      	movs	r2, r3
 800d5e0:	2380      	movs	r3, #128	@ 0x80
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4806      	ldr	r0, [pc, #24]	@ (800d600 <SetDBLED+0x90>)
 800d5e6:	0019      	movs	r1, r3
 800d5e8:	f003 f8bf 	bl	801076a <HAL_GPIO_WritePin>
  }
}
 800d5ec:	46c0      	nop			@ (mov r8, r8)
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	b003      	add	sp, #12
 800d5f2:	bd90      	pop	{r4, r7, pc}
 800d5f4:	20001c1d 	.word	0x20001c1d
 800d5f8:	200000cc 	.word	0x200000cc
 800d5fc:	20001c1e 	.word	0x20001c1e
 800d600:	50000400 	.word	0x50000400

0800d604 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	0004      	movs	r4, r0
 800d60c:	0008      	movs	r0, r1
 800d60e:	0011      	movs	r1, r2
 800d610:	1dbb      	adds	r3, r7, #6
 800d612:	1c22      	adds	r2, r4, #0
 800d614:	801a      	strh	r2, [r3, #0]
 800d616:	1d3b      	adds	r3, r7, #4
 800d618:	1c02      	adds	r2, r0, #0
 800d61a:	801a      	strh	r2, [r3, #0]
 800d61c:	1cbb      	adds	r3, r7, #2
 800d61e:	1c0a      	adds	r2, r1, #0
 800d620:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d622:	4b0e      	ldr	r3, [pc, #56]	@ (800d65c <SetVocLED+0x58>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d107      	bne.n	800d63a <SetVocLED+0x36>
 800d62a:	4b0d      	ldr	r3, [pc, #52]	@ (800d660 <SetVocLED+0x5c>)
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d103      	bne.n	800d63a <SetVocLED+0x36>
 800d632:	4b0c      	ldr	r3, [pc, #48]	@ (800d664 <SetVocLED+0x60>)
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00b      	beq.n	800d652 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d63a:	4b0b      	ldr	r3, [pc, #44]	@ (800d668 <SetVocLED+0x64>)
 800d63c:	1dba      	adds	r2, r7, #6
 800d63e:	8812      	ldrh	r2, [r2, #0]
 800d640:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d642:	4b09      	ldr	r3, [pc, #36]	@ (800d668 <SetVocLED+0x64>)
 800d644:	1d3a      	adds	r2, r7, #4
 800d646:	8812      	ldrh	r2, [r2, #0]
 800d648:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d64a:	4b07      	ldr	r3, [pc, #28]	@ (800d668 <SetVocLED+0x64>)
 800d64c:	1cba      	adds	r2, r7, #2
 800d64e:	8812      	ldrh	r2, [r2, #0]
 800d650:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d652:	46c0      	nop			@ (mov r8, r8)
 800d654:	46bd      	mov	sp, r7
 800d656:	b003      	add	sp, #12
 800d658:	bd90      	pop	{r4, r7, pc}
 800d65a:	46c0      	nop			@ (mov r8, r8)
 800d65c:	20001c1d 	.word	0x20001c1d
 800d660:	200000cc 	.word	0x200000cc
 800d664:	20001c1e 	.word	0x20001c1e
 800d668:	40000400 	.word	0x40000400

0800d66c <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d670:	4b08      	ldr	r3, [pc, #32]	@ (800d694 <SetMeasurementIndicator+0x28>)
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d103      	bne.n	800d680 <SetMeasurementIndicator+0x14>
 800d678:	4b07      	ldr	r3, [pc, #28]	@ (800d698 <SetMeasurementIndicator+0x2c>)
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d006      	beq.n	800d68e <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d680:	f7ff fefa 	bl	800d478 <Calculate_LED_ON>
 800d684:	0003      	movs	r3, r0
 800d686:	001a      	movs	r2, r3
 800d688:	2380      	movs	r3, #128	@ 0x80
 800d68a:	05db      	lsls	r3, r3, #23
 800d68c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d68e:	46c0      	nop			@ (mov r8, r8)
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20001c1d 	.word	0x20001c1d
 800d698:	20001c1e 	.word	0x20001c1e

0800d69c <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d69c:	b580      	push	{r7, lr}
 800d69e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d6a0:	4b07      	ldr	r3, [pc, #28]	@ (800d6c0 <ResetMeasurementIndicator+0x24>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d103      	bne.n	800d6b0 <ResetMeasurementIndicator+0x14>
 800d6a8:	4b06      	ldr	r3, [pc, #24]	@ (800d6c4 <ResetMeasurementIndicator+0x28>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d6b0:	2380      	movs	r3, #128	@ 0x80
 800d6b2:	05db      	lsls	r3, r3, #23
 800d6b4:	22fa      	movs	r2, #250	@ 0xfa
 800d6b6:	0112      	lsls	r2, r2, #4
 800d6b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d6ba:	46c0      	nop			@ (mov r8, r8)
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	20001c1d 	.word	0x20001c1d
 800d6c4:	20001c1e 	.word	0x20001c1e

0800d6c8 <SetMICIndicator>:
void SetMICIndicator(){
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d6cc:	4b19      	ldr	r3, [pc, #100]	@ (800d734 <SetMICIndicator+0x6c>)
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d103      	bne.n	800d6dc <SetMICIndicator+0x14>
 800d6d4:	4b18      	ldr	r3, [pc, #96]	@ (800d738 <SetMICIndicator+0x70>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d007      	beq.n	800d6ec <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d6dc:	f7ff fecc 	bl	800d478 <Calculate_LED_ON>
 800d6e0:	0003      	movs	r3, r0
 800d6e2:	001a      	movs	r2, r3
 800d6e4:	2380      	movs	r3, #128	@ 0x80
 800d6e6:	05db      	lsls	r3, r3, #23
 800d6e8:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800d6ea:	e01f      	b.n	800d72c <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800d6ec:	4b13      	ldr	r3, [pc, #76]	@ (800d73c <SetMICIndicator+0x74>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	1c18      	adds	r0, r3, #0
 800d6f2:	f7f5 feb7 	bl	8003464 <__aeabi_f2d>
 800d6f6:	4a12      	ldr	r2, [pc, #72]	@ (800d740 <SetMICIndicator+0x78>)
 800d6f8:	4b12      	ldr	r3, [pc, #72]	@ (800d744 <SetMICIndicator+0x7c>)
 800d6fa:	f7f2 fef3 	bl	80004e4 <__aeabi_dcmpgt>
 800d6fe:	1e03      	subs	r3, r0, #0
 800d700:	d00a      	beq.n	800d718 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d702:	f7ff feb9 	bl	800d478 <Calculate_LED_ON>
 800d706:	0003      	movs	r3, r0
 800d708:	001a      	movs	r2, r3
 800d70a:	2380      	movs	r3, #128	@ 0x80
 800d70c:	05db      	lsls	r3, r3, #23
 800d70e:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800d710:	4b0d      	ldr	r3, [pc, #52]	@ (800d748 <SetMICIndicator+0x80>)
 800d712:	2202      	movs	r2, #2
 800d714:	701a      	strb	r2, [r3, #0]
}
 800d716:	e009      	b.n	800d72c <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d718:	f7ff feae 	bl	800d478 <Calculate_LED_ON>
 800d71c:	0003      	movs	r3, r0
 800d71e:	001a      	movs	r2, r3
 800d720:	2380      	movs	r3, #128	@ 0x80
 800d722:	05db      	lsls	r3, r3, #23
 800d724:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800d726:	4b08      	ldr	r3, [pc, #32]	@ (800d748 <SetMICIndicator+0x80>)
 800d728:	2201      	movs	r2, #1
 800d72a:	701a      	strb	r2, [r3, #0]
}
 800d72c:	46c0      	nop			@ (mov r8, r8)
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	46c0      	nop			@ (mov r8, r8)
 800d734:	20001c1d 	.word	0x20001c1d
 800d738:	20001c1e 	.word	0x20001c1e
 800d73c:	20001c2c 	.word	0x20001c2c
 800d740:	9999999a 	.word	0x9999999a
 800d744:	400d9999 	.word	0x400d9999
 800d748:	20001c20 	.word	0x20001c20

0800d74c <ResetMICIndicator>:
void ResetMICIndicator(){
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d750:	4b0f      	ldr	r3, [pc, #60]	@ (800d790 <ResetMICIndicator+0x44>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d103      	bne.n	800d760 <ResetMICIndicator+0x14>
 800d758:	4b0e      	ldr	r3, [pc, #56]	@ (800d794 <ResetMICIndicator+0x48>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d005      	beq.n	800d76c <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d760:	2380      	movs	r3, #128	@ 0x80
 800d762:	05db      	lsls	r3, r3, #23
 800d764:	22fa      	movs	r2, #250	@ 0xfa
 800d766:	0112      	lsls	r2, r2, #4
 800d768:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d76a:	e00e      	b.n	800d78a <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800d76c:	4b0a      	ldr	r3, [pc, #40]	@ (800d798 <ResetMICIndicator+0x4c>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b02      	cmp	r3, #2
 800d772:	d105      	bne.n	800d780 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800d774:	2380      	movs	r3, #128	@ 0x80
 800d776:	05db      	lsls	r3, r3, #23
 800d778:	22fa      	movs	r2, #250	@ 0xfa
 800d77a:	0112      	lsls	r2, r2, #4
 800d77c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d77e:	e004      	b.n	800d78a <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800d780:	2380      	movs	r3, #128	@ 0x80
 800d782:	05db      	lsls	r3, r3, #23
 800d784:	22fa      	movs	r2, #250	@ 0xfa
 800d786:	0112      	lsls	r2, r2, #4
 800d788:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d78a:	46c0      	nop			@ (mov r8, r8)
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	20001c1d 	.word	0x20001c1d
 800d794:	20001c1e 	.word	0x20001c1e
 800d798:	20001c20 	.word	0x20001c20

0800d79c <SetESPIndicator>:
void SetESPIndicator(){
 800d79c:	b580      	push	{r7, lr}
 800d79e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d7a0:	4b08      	ldr	r3, [pc, #32]	@ (800d7c4 <SetESPIndicator+0x28>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d103      	bne.n	800d7b0 <SetESPIndicator+0x14>
 800d7a8:	4b07      	ldr	r3, [pc, #28]	@ (800d7c8 <SetESPIndicator+0x2c>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d006      	beq.n	800d7be <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d7b0:	f7ff fe62 	bl	800d478 <Calculate_LED_ON>
 800d7b4:	0003      	movs	r3, r0
 800d7b6:	001a      	movs	r2, r3
 800d7b8:	2380      	movs	r3, #128	@ 0x80
 800d7ba:	05db      	lsls	r3, r3, #23
 800d7bc:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d7be:	46c0      	nop			@ (mov r8, r8)
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	20001c1d 	.word	0x20001c1d
 800d7c8:	20001c1e 	.word	0x20001c1e

0800d7cc <ResetESPIndicator>:
void ResetESPIndicator(){
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d7d0:	4b07      	ldr	r3, [pc, #28]	@ (800d7f0 <ResetESPIndicator+0x24>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d103      	bne.n	800d7e0 <ResetESPIndicator+0x14>
 800d7d8:	4b06      	ldr	r3, [pc, #24]	@ (800d7f4 <ResetESPIndicator+0x28>)
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d004      	beq.n	800d7ea <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d7e0:	2380      	movs	r3, #128	@ 0x80
 800d7e2:	05db      	lsls	r3, r3, #23
 800d7e4:	22fa      	movs	r2, #250	@ 0xfa
 800d7e6:	0112      	lsls	r2, r2, #4
 800d7e8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d7ea:	46c0      	nop			@ (mov r8, r8)
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	20001c1d 	.word	0x20001c1d
 800d7f4:	20001c1e 	.word	0x20001c1e

0800d7f8 <SetPMIndicator>:

void SetPMIndicator() {
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d7fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d83c <SetPMIndicator+0x44>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d103      	bne.n	800d80c <SetPMIndicator+0x14>
 800d804:	4b0e      	ldr	r3, [pc, #56]	@ (800d840 <SetPMIndicator+0x48>)
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d014      	beq.n	800d836 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d80c:	f7ff fe34 	bl	800d478 <Calculate_LED_ON>
 800d810:	0003      	movs	r3, r0
 800d812:	001a      	movs	r2, r3
 800d814:	2380      	movs	r3, #128	@ 0x80
 800d816:	05db      	lsls	r3, r3, #23
 800d818:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d81a:	f7ff fe2d 	bl	800d478 <Calculate_LED_ON>
 800d81e:	0003      	movs	r3, r0
 800d820:	001a      	movs	r2, r3
 800d822:	2380      	movs	r3, #128	@ 0x80
 800d824:	05db      	lsls	r3, r3, #23
 800d826:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d828:	f7ff fe26 	bl	800d478 <Calculate_LED_ON>
 800d82c:	0003      	movs	r3, r0
 800d82e:	001a      	movs	r2, r3
 800d830:	2380      	movs	r3, #128	@ 0x80
 800d832:	05db      	lsls	r3, r3, #23
 800d834:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d836:	46c0      	nop			@ (mov r8, r8)
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	20001c1d 	.word	0x20001c1d
 800d840:	20001c1e 	.word	0x20001c1e

0800d844 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d844:	b580      	push	{r7, lr}
 800d846:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d848:	4b0c      	ldr	r3, [pc, #48]	@ (800d87c <ResetPMIndicator+0x38>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d103      	bne.n	800d858 <ResetPMIndicator+0x14>
 800d850:	4b0b      	ldr	r3, [pc, #44]	@ (800d880 <ResetPMIndicator+0x3c>)
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00e      	beq.n	800d876 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d858:	2380      	movs	r3, #128	@ 0x80
 800d85a:	05db      	lsls	r3, r3, #23
 800d85c:	22fa      	movs	r2, #250	@ 0xfa
 800d85e:	0112      	lsls	r2, r2, #4
 800d860:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d862:	2380      	movs	r3, #128	@ 0x80
 800d864:	05db      	lsls	r3, r3, #23
 800d866:	22fa      	movs	r2, #250	@ 0xfa
 800d868:	0112      	lsls	r2, r2, #4
 800d86a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d86c:	2380      	movs	r3, #128	@ 0x80
 800d86e:	05db      	lsls	r3, r3, #23
 800d870:	22fa      	movs	r2, #250	@ 0xfa
 800d872:	0112      	lsls	r2, r2, #4
 800d874:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d876:	46c0      	nop			@ (mov r8, r8)
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	20001c1d 	.word	0x20001c1d
 800d880:	20001c1e 	.word	0x20001c1e

0800d884 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d884:	b580      	push	{r7, lr}
 800d886:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d888:	23fa      	movs	r3, #250	@ 0xfa
 800d88a:	011a      	lsls	r2, r3, #4
 800d88c:	23fa      	movs	r3, #250	@ 0xfa
 800d88e:	0119      	lsls	r1, r3, #4
 800d890:	23fa      	movs	r3, #250	@ 0xfa
 800d892:	011b      	lsls	r3, r3, #4
 800d894:	0018      	movs	r0, r3
 800d896:	f7ff fe37 	bl	800d508 <SetStatusLED>
  SetDBLED(false,false,false);
 800d89a:	2200      	movs	r2, #0
 800d89c:	2100      	movs	r1, #0
 800d89e:	2000      	movs	r0, #0
 800d8a0:	f7ff fe66 	bl	800d570 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d8a4:	23fa      	movs	r3, #250	@ 0xfa
 800d8a6:	011a      	lsls	r2, r3, #4
 800d8a8:	23fa      	movs	r3, #250	@ 0xfa
 800d8aa:	0119      	lsls	r1, r3, #4
 800d8ac:	23fa      	movs	r3, #250	@ 0xfa
 800d8ae:	011b      	lsls	r3, r3, #4
 800d8b0:	0018      	movs	r0, r3
 800d8b2:	f7ff fea7 	bl	800d604 <SetVocLED>
return;
 800d8b6:	46c0      	nop			@ (mov r8, r8)
}
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <SetAllREDLED>:

void SetAllREDLED() {
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800d8c0:	2380      	movs	r3, #128	@ 0x80
 800d8c2:	05db      	lsls	r3, r3, #23
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800d8c8:	2380      	movs	r3, #128	@ 0x80
 800d8ca:	05db      	lsls	r3, r3, #23
 800d8cc:	22fa      	movs	r2, #250	@ 0xfa
 800d8ce:	0112      	lsls	r2, r2, #4
 800d8d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800d8d2:	2380      	movs	r3, #128	@ 0x80
 800d8d4:	05db      	lsls	r3, r3, #23
 800d8d6:	22fa      	movs	r2, #250	@ 0xfa
 800d8d8:	0112      	lsls	r2, r2, #4
 800d8da:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800d8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d910 <SetAllREDLED+0x54>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800d8e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d910 <SetAllREDLED+0x54>)
 800d8e4:	22fa      	movs	r2, #250	@ 0xfa
 800d8e6:	0112      	lsls	r2, r2, #4
 800d8e8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800d8ea:	4b09      	ldr	r3, [pc, #36]	@ (800d910 <SetAllREDLED+0x54>)
 800d8ec:	22fa      	movs	r2, #250	@ 0xfa
 800d8ee:	0112      	lsls	r2, r2, #4
 800d8f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800d8f2:	4b08      	ldr	r3, [pc, #32]	@ (800d914 <SetAllREDLED+0x58>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	2101      	movs	r1, #1
 800d8f8:	0018      	movs	r0, r3
 800d8fa:	f002 ff36 	bl	801076a <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d8fe:	23fa      	movs	r3, #250	@ 0xfa
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	0018      	movs	r0, r3
 800d904:	f001 fcaa 	bl	800f25c <HAL_Delay>
}
 800d908:	46c0      	nop			@ (mov r8, r8)
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	46c0      	nop			@ (mov r8, r8)
 800d910:	40000400 	.word	0x40000400
 800d914:	50000400 	.word	0x50000400

0800d918 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800d918:	b5b0      	push	{r4, r5, r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	0002      	movs	r2, r0
 800d920:	1dbb      	adds	r3, r7, #6
 800d922:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800d924:	1dbb      	adds	r3, r7, #6
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d05a      	beq.n	800d9e2 <SetVOCindicator+0xca>
 800d92c:	1dbb      	adds	r3, r7, #6
 800d92e:	881b      	ldrh	r3, [r3, #0]
 800d930:	2b64      	cmp	r3, #100	@ 0x64
 800d932:	d856      	bhi.n	800d9e2 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800d934:	1dbb      	adds	r3, r7, #6
 800d936:	881b      	ldrh	r3, [r3, #0]
 800d938:	0018      	movs	r0, r3
 800d93a:	f7f5 fd41 	bl	80033c0 <__aeabi_i2d>
 800d93e:	2200      	movs	r2, #0
 800d940:	4b5f      	ldr	r3, [pc, #380]	@ (800dac0 <SetVOCindicator+0x1a8>)
 800d942:	f7f4 fa37 	bl	8001db4 <__aeabi_ddiv>
 800d946:	0002      	movs	r2, r0
 800d948:	000b      	movs	r3, r1
 800d94a:	2000      	movs	r0, #0
 800d94c:	495d      	ldr	r1, [pc, #372]	@ (800dac4 <SetVOCindicator+0x1ac>)
 800d94e:	f7f5 f93d 	bl	8002bcc <__aeabi_dsub>
 800d952:	0002      	movs	r2, r0
 800d954:	000b      	movs	r3, r1
 800d956:	0014      	movs	r4, r2
 800d958:	001d      	movs	r5, r3
 800d95a:	4b5b      	ldr	r3, [pc, #364]	@ (800dac8 <SetVOCindicator+0x1b0>)
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	0018      	movs	r0, r3
 800d960:	f7f5 fd2e 	bl	80033c0 <__aeabi_i2d>
 800d964:	0002      	movs	r2, r0
 800d966:	000b      	movs	r3, r1
 800d968:	0020      	movs	r0, r4
 800d96a:	0029      	movs	r1, r5
 800d96c:	f7f4 fe66 	bl	800263c <__aeabi_dmul>
 800d970:	0002      	movs	r2, r0
 800d972:	000b      	movs	r3, r1
 800d974:	0010      	movs	r0, r2
 800d976:	0019      	movs	r1, r3
 800d978:	f7f2 fe68 	bl	800064c <__aeabi_d2uiz>
 800d97c:	0003      	movs	r3, r0
 800d97e:	b29a      	uxth	r2, r3
 800d980:	4b52      	ldr	r3, [pc, #328]	@ (800dacc <SetVOCindicator+0x1b4>)
 800d982:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800d984:	1dbb      	adds	r3, r7, #6
 800d986:	881b      	ldrh	r3, [r3, #0]
 800d988:	0018      	movs	r0, r3
 800d98a:	f7f5 fd19 	bl	80033c0 <__aeabi_i2d>
 800d98e:	2200      	movs	r2, #0
 800d990:	4b4b      	ldr	r3, [pc, #300]	@ (800dac0 <SetVOCindicator+0x1a8>)
 800d992:	f7f4 fa0f 	bl	8001db4 <__aeabi_ddiv>
 800d996:	0002      	movs	r2, r0
 800d998:	000b      	movs	r3, r1
 800d99a:	0014      	movs	r4, r2
 800d99c:	001d      	movs	r5, r3
 800d99e:	4b4a      	ldr	r3, [pc, #296]	@ (800dac8 <SetVOCindicator+0x1b0>)
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	0018      	movs	r0, r3
 800d9a4:	f7f5 fd0c 	bl	80033c0 <__aeabi_i2d>
 800d9a8:	0002      	movs	r2, r0
 800d9aa:	000b      	movs	r3, r1
 800d9ac:	0020      	movs	r0, r4
 800d9ae:	0029      	movs	r1, r5
 800d9b0:	f7f4 fe44 	bl	800263c <__aeabi_dmul>
 800d9b4:	0002      	movs	r2, r0
 800d9b6:	000b      	movs	r3, r1
 800d9b8:	0010      	movs	r0, r2
 800d9ba:	0019      	movs	r1, r3
 800d9bc:	f7f2 fe46 	bl	800064c <__aeabi_d2uiz>
 800d9c0:	0003      	movs	r3, r0
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	4b42      	ldr	r3, [pc, #264]	@ (800dad0 <SetVOCindicator+0x1b8>)
 800d9c6:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800d9c8:	4b3f      	ldr	r3, [pc, #252]	@ (800dac8 <SetVOCindicator+0x1b0>)
 800d9ca:	881a      	ldrh	r2, [r3, #0]
 800d9cc:	4b41      	ldr	r3, [pc, #260]	@ (800dad4 <SetVOCindicator+0x1bc>)
 800d9ce:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d9d0:	4b40      	ldr	r3, [pc, #256]	@ (800dad4 <SetVOCindicator+0x1bc>)
 800d9d2:	8818      	ldrh	r0, [r3, #0]
 800d9d4:	4b3d      	ldr	r3, [pc, #244]	@ (800dacc <SetVOCindicator+0x1b4>)
 800d9d6:	8819      	ldrh	r1, [r3, #0]
 800d9d8:	4b3d      	ldr	r3, [pc, #244]	@ (800dad0 <SetVOCindicator+0x1b8>)
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	001a      	movs	r2, r3
 800d9de:	f7ff fe11 	bl	800d604 <SetVocLED>
  }
  if(VOCi > 100){
 800d9e2:	1dbb      	adds	r3, r7, #6
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	2b64      	cmp	r3, #100	@ 0x64
 800d9e8:	d966      	bls.n	800dab8 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800d9ea:	1dbb      	adds	r3, r7, #6
 800d9ec:	881b      	ldrh	r3, [r3, #0]
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f7f5 fce6 	bl	80033c0 <__aeabi_i2d>
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	4b32      	ldr	r3, [pc, #200]	@ (800dac0 <SetVOCindicator+0x1a8>)
 800d9f8:	f7f5 f8e8 	bl	8002bcc <__aeabi_dsub>
 800d9fc:	0002      	movs	r2, r0
 800d9fe:	000b      	movs	r3, r1
 800da00:	0010      	movs	r0, r2
 800da02:	0019      	movs	r1, r3
 800da04:	2200      	movs	r2, #0
 800da06:	4b34      	ldr	r3, [pc, #208]	@ (800dad8 <SetVOCindicator+0x1c0>)
 800da08:	f7f4 f9d4 	bl	8001db4 <__aeabi_ddiv>
 800da0c:	0002      	movs	r2, r0
 800da0e:	000b      	movs	r3, r1
 800da10:	0014      	movs	r4, r2
 800da12:	001d      	movs	r5, r3
 800da14:	4b2c      	ldr	r3, [pc, #176]	@ (800dac8 <SetVOCindicator+0x1b0>)
 800da16:	881b      	ldrh	r3, [r3, #0]
 800da18:	0018      	movs	r0, r3
 800da1a:	f7f5 fcd1 	bl	80033c0 <__aeabi_i2d>
 800da1e:	0002      	movs	r2, r0
 800da20:	000b      	movs	r3, r1
 800da22:	0020      	movs	r0, r4
 800da24:	0029      	movs	r1, r5
 800da26:	f7f4 fe09 	bl	800263c <__aeabi_dmul>
 800da2a:	0002      	movs	r2, r0
 800da2c:	000b      	movs	r3, r1
 800da2e:	0010      	movs	r0, r2
 800da30:	0019      	movs	r1, r3
 800da32:	f7f2 fe0b 	bl	800064c <__aeabi_d2uiz>
 800da36:	0003      	movs	r3, r0
 800da38:	b29a      	uxth	r2, r3
 800da3a:	4b24      	ldr	r3, [pc, #144]	@ (800dacc <SetVOCindicator+0x1b4>)
 800da3c:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800da3e:	1dbb      	adds	r3, r7, #6
 800da40:	881b      	ldrh	r3, [r3, #0]
 800da42:	0018      	movs	r0, r3
 800da44:	f7f5 fcbc 	bl	80033c0 <__aeabi_i2d>
 800da48:	2200      	movs	r2, #0
 800da4a:	4b1d      	ldr	r3, [pc, #116]	@ (800dac0 <SetVOCindicator+0x1a8>)
 800da4c:	f7f5 f8be 	bl	8002bcc <__aeabi_dsub>
 800da50:	0002      	movs	r2, r0
 800da52:	000b      	movs	r3, r1
 800da54:	0010      	movs	r0, r2
 800da56:	0019      	movs	r1, r3
 800da58:	2200      	movs	r2, #0
 800da5a:	4b1f      	ldr	r3, [pc, #124]	@ (800dad8 <SetVOCindicator+0x1c0>)
 800da5c:	f7f4 f9aa 	bl	8001db4 <__aeabi_ddiv>
 800da60:	0002      	movs	r2, r0
 800da62:	000b      	movs	r3, r1
 800da64:	2000      	movs	r0, #0
 800da66:	4917      	ldr	r1, [pc, #92]	@ (800dac4 <SetVOCindicator+0x1ac>)
 800da68:	f7f5 f8b0 	bl	8002bcc <__aeabi_dsub>
 800da6c:	0002      	movs	r2, r0
 800da6e:	000b      	movs	r3, r1
 800da70:	0014      	movs	r4, r2
 800da72:	001d      	movs	r5, r3
 800da74:	4b14      	ldr	r3, [pc, #80]	@ (800dac8 <SetVOCindicator+0x1b0>)
 800da76:	881b      	ldrh	r3, [r3, #0]
 800da78:	0018      	movs	r0, r3
 800da7a:	f7f5 fca1 	bl	80033c0 <__aeabi_i2d>
 800da7e:	0002      	movs	r2, r0
 800da80:	000b      	movs	r3, r1
 800da82:	0020      	movs	r0, r4
 800da84:	0029      	movs	r1, r5
 800da86:	f7f4 fdd9 	bl	800263c <__aeabi_dmul>
 800da8a:	0002      	movs	r2, r0
 800da8c:	000b      	movs	r3, r1
 800da8e:	0010      	movs	r0, r2
 800da90:	0019      	movs	r1, r3
 800da92:	f7f2 fddb 	bl	800064c <__aeabi_d2uiz>
 800da96:	0003      	movs	r3, r0
 800da98:	b29a      	uxth	r2, r3
 800da9a:	4b0e      	ldr	r3, [pc, #56]	@ (800dad4 <SetVOCindicator+0x1bc>)
 800da9c:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800da9e:	4b0a      	ldr	r3, [pc, #40]	@ (800dac8 <SetVOCindicator+0x1b0>)
 800daa0:	881a      	ldrh	r2, [r3, #0]
 800daa2:	4b0b      	ldr	r3, [pc, #44]	@ (800dad0 <SetVOCindicator+0x1b8>)
 800daa4:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800daa6:	4b0b      	ldr	r3, [pc, #44]	@ (800dad4 <SetVOCindicator+0x1bc>)
 800daa8:	8818      	ldrh	r0, [r3, #0]
 800daaa:	4b08      	ldr	r3, [pc, #32]	@ (800dacc <SetVOCindicator+0x1b4>)
 800daac:	8819      	ldrh	r1, [r3, #0]
 800daae:	4b08      	ldr	r3, [pc, #32]	@ (800dad0 <SetVOCindicator+0x1b8>)
 800dab0:	881b      	ldrh	r3, [r3, #0]
 800dab2:	001a      	movs	r2, r3
 800dab4:	f7ff fda6 	bl	800d604 <SetVocLED>
  }

}
 800dab8:	46c0      	nop			@ (mov r8, r8)
 800daba:	46bd      	mov	sp, r7
 800dabc:	b002      	add	sp, #8
 800dabe:	bdb0      	pop	{r4, r5, r7, pc}
 800dac0:	40590000 	.word	0x40590000
 800dac4:	3ff00000 	.word	0x3ff00000
 800dac8:	200000ce 	.word	0x200000ce
 800dacc:	20001c32 	.word	0x20001c32
 800dad0:	20001c34 	.word	0x20001c34
 800dad4:	20001c36 	.word	0x20001c36
 800dad8:	40790000 	.word	0x40790000

0800dadc <powerCheck>:

Battery_Status powerCheck(){
 800dadc:	b590      	push	{r4, r7, lr}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800dae2:	f7f8 fdd7 	bl	8006694 <Check_USB_PowerOn>
 800dae6:	0003      	movs	r3, r0
 800dae8:	001a      	movs	r2, r3
 800daea:	2301      	movs	r3, #1
 800daec:	4053      	eors	r3, r2
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d005      	beq.n	800db00 <powerCheck+0x24>
    status = batteryChargeCheck();
 800daf4:	1dfc      	adds	r4, r7, #7
 800daf6:	f7ff fc65 	bl	800d3c4 <batteryChargeCheck>
 800dafa:	0003      	movs	r3, r0
 800dafc:	7023      	strb	r3, [r4, #0]
 800dafe:	e002      	b.n	800db06 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800db00:	1dfb      	adds	r3, r7, #7
 800db02:	2204      	movs	r2, #4
 800db04:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800db06:	1dfb      	adds	r3, r7, #7
 800db08:	781b      	ldrb	r3, [r3, #0]
}
 800db0a:	0018      	movs	r0, r3
 800db0c:	46bd      	mov	sp, r7
 800db0e:	b003      	add	sp, #12
 800db10:	bd90      	pop	{r4, r7, pc}
	...

0800db14 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	0002      	movs	r2, r0
 800db1c:	1dfb      	adds	r3, r7, #7
 800db1e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800db20:	1dfb      	adds	r3, r7, #7
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2b04      	cmp	r3, #4
 800db26:	d105      	bne.n	800db34 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800db28:	4a18      	ldr	r2, [pc, #96]	@ (800db8c <powerDisplay+0x78>)
 800db2a:	4b19      	ldr	r3, [pc, #100]	@ (800db90 <powerDisplay+0x7c>)
 800db2c:	0019      	movs	r1, r3
 800db2e:	2003      	movs	r0, #3
 800db30:	f000 ff46 	bl	800e9c0 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800db34:	1dfb      	adds	r3, r7, #7
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	2b03      	cmp	r3, #3
 800db3a:	d105      	bne.n	800db48 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800db3c:	4a15      	ldr	r2, [pc, #84]	@ (800db94 <powerDisplay+0x80>)
 800db3e:	4b14      	ldr	r3, [pc, #80]	@ (800db90 <powerDisplay+0x7c>)
 800db40:	0019      	movs	r1, r3
 800db42:	2003      	movs	r0, #3
 800db44:	f000 ff3c 	bl	800e9c0 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800db48:	1dfb      	adds	r3, r7, #7
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d105      	bne.n	800db5c <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800db50:	4a11      	ldr	r2, [pc, #68]	@ (800db98 <powerDisplay+0x84>)
 800db52:	4b0f      	ldr	r3, [pc, #60]	@ (800db90 <powerDisplay+0x7c>)
 800db54:	0019      	movs	r1, r3
 800db56:	2003      	movs	r0, #3
 800db58:	f000 ff32 	bl	800e9c0 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800db5c:	1dfb      	adds	r3, r7, #7
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	2b01      	cmp	r3, #1
 800db62:	d105      	bne.n	800db70 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800db64:	4a0d      	ldr	r2, [pc, #52]	@ (800db9c <powerDisplay+0x88>)
 800db66:	4b0a      	ldr	r3, [pc, #40]	@ (800db90 <powerDisplay+0x7c>)
 800db68:	0019      	movs	r1, r3
 800db6a:	2003      	movs	r0, #3
 800db6c:	f000 ff28 	bl	800e9c0 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800db70:	1dfb      	adds	r3, r7, #7
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d105      	bne.n	800db84 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800db78:	4a09      	ldr	r2, [pc, #36]	@ (800dba0 <powerDisplay+0x8c>)
 800db7a:	4b05      	ldr	r3, [pc, #20]	@ (800db90 <powerDisplay+0x7c>)
 800db7c:	0019      	movs	r1, r3
 800db7e:	2003      	movs	r0, #3
 800db80:	f000 ff1e 	bl	800e9c0 <CreateLine>
  }
}
 800db84:	46c0      	nop			@ (mov r8, r8)
 800db86:	46bd      	mov	sp, r7
 800db88:	b002      	add	sp, #8
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	0802560c 	.word	0x0802560c
 800db90:	08025630 	.word	0x08025630
 800db94:	08025634 	.word	0x08025634
 800db98:	0802564c 	.word	0x0802564c
 800db9c:	0802566c 	.word	0x0802566c
 800dba0:	08025684 	.word	0x08025684

0800dba4 <configCheck>:

void configCheck(){
 800dba4:	b590      	push	{r4, r7, lr}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800dbaa:	f7f8 fd82 	bl	80066b2 <BootButton_Pressed>
 800dbae:	1e03      	subs	r3, r0, #0
 800dbb0:	d007      	beq.n	800dbc2 <configCheck+0x1e>
 800dbb2:	f7f8 fd8f 	bl	80066d4 <UserButton_Pressed>
 800dbb6:	1e03      	subs	r3, r0, #0
 800dbb8:	d003      	beq.n	800dbc2 <configCheck+0x1e>
    configSet = true;
 800dbba:	4bb2      	ldr	r3, [pc, #712]	@ (800de84 <configCheck+0x2e0>)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	701a      	strb	r2, [r3, #0]
 800dbc0:	e00a      	b.n	800dbd8 <configCheck+0x34>
  }
  else{
    configSet = false;
 800dbc2:	4bb0      	ldr	r3, [pc, #704]	@ (800de84 <configCheck+0x2e0>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800dbc8:	f001 fb3e 	bl	800f248 <HAL_GetTick>
 800dbcc:	0003      	movs	r3, r0
 800dbce:	22fa      	movs	r2, #250	@ 0xfa
 800dbd0:	00d2      	lsls	r2, r2, #3
 800dbd2:	189a      	adds	r2, r3, r2
 800dbd4:	4bac      	ldr	r3, [pc, #688]	@ (800de88 <configCheck+0x2e4>)
 800dbd6:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800dbd8:	4baa      	ldr	r3, [pc, #680]	@ (800de84 <configCheck+0x2e0>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00d      	beq.n	800dbfc <configCheck+0x58>
 800dbe0:	4ba9      	ldr	r3, [pc, #676]	@ (800de88 <configCheck+0x2e4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	0018      	movs	r0, r3
 800dbe6:	f000 fe95 	bl	800e914 <TimestampIsReached>
 800dbea:	1e03      	subs	r3, r0, #0
 800dbec:	d006      	beq.n	800dbfc <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800dbee:	f7f5 fea7 	bl	8003940 <SetConfigMode>
    SetDBLED(true, true, true);
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	2001      	movs	r0, #1
 800dbf8:	f7ff fcba 	bl	800d570 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800dbfc:	f7f8 fd59 	bl	80066b2 <BootButton_Pressed>
 800dc00:	0003      	movs	r3, r0
 800dc02:	001a      	movs	r2, r3
 800dc04:	2301      	movs	r3, #1
 800dc06:	4053      	eors	r3, r2
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d054      	beq.n	800dcb8 <configCheck+0x114>
 800dc0e:	f7f8 fd61 	bl	80066d4 <UserButton_Pressed>
 800dc12:	1e03      	subs	r3, r0, #0
 800dc14:	d050      	beq.n	800dcb8 <configCheck+0x114>
 800dc16:	4b9d      	ldr	r3, [pc, #628]	@ (800de8c <configCheck+0x2e8>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	4053      	eors	r3, r2
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d049      	beq.n	800dcb8 <configCheck+0x114>
 800dc24:	f7f5 feac 	bl	8003980 <GetReconfigMode>
 800dc28:	0003      	movs	r3, r0
 800dc2a:	001a      	movs	r2, r3
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	4053      	eors	r3, r2
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d040      	beq.n	800dcb8 <configCheck+0x114>
    SetLEDsOff();
 800dc36:	f7ff fe25 	bl	800d884 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800dc3a:	4a95      	ldr	r2, [pc, #596]	@ (800de90 <configCheck+0x2ec>)
 800dc3c:	4994      	ldr	r1, [pc, #592]	@ (800de90 <configCheck+0x2ec>)
 800dc3e:	4b94      	ldr	r3, [pc, #592]	@ (800de90 <configCheck+0x2ec>)
 800dc40:	0018      	movs	r0, r3
 800dc42:	f7ff fcdf 	bl	800d604 <SetVocLED>
    HAL_Delay(1500);
 800dc46:	4b93      	ldr	r3, [pc, #588]	@ (800de94 <configCheck+0x2f0>)
 800dc48:	0018      	movs	r0, r3
 800dc4a:	f001 fb07 	bl	800f25c <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800dc4e:	23fa      	movs	r3, #250	@ 0xfa
 800dc50:	011a      	lsls	r2, r3, #4
 800dc52:	23fa      	movs	r3, #250	@ 0xfa
 800dc54:	0119      	lsls	r1, r3, #4
 800dc56:	23fa      	movs	r3, #250	@ 0xfa
 800dc58:	011b      	lsls	r3, r3, #4
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	f7ff fcd2 	bl	800d604 <SetVocLED>
    userToggle = !userToggle;
 800dc60:	4b8d      	ldr	r3, [pc, #564]	@ (800de98 <configCheck+0x2f4>)
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	1e5a      	subs	r2, r3, #1
 800dc66:	4193      	sbcs	r3, r2
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	4053      	eors	r3, r2
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	1c1a      	adds	r2, r3, #0
 800dc72:	2301      	movs	r3, #1
 800dc74:	4013      	ands	r3, r2
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	4b87      	ldr	r3, [pc, #540]	@ (800de98 <configCheck+0x2f4>)
 800dc7a:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800dc7c:	4b86      	ldr	r3, [pc, #536]	@ (800de98 <configCheck+0x2f4>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d001      	beq.n	800dc88 <configCheck+0xe4>
      EnabledConnectedDevices();
 800dc84:	f7fa fff2 	bl	8008c6c <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800dc88:	4b83      	ldr	r3, [pc, #524]	@ (800de98 <configCheck+0x2f4>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <configCheck+0xf0>
 800dc90:	4b82      	ldr	r3, [pc, #520]	@ (800de9c <configCheck+0x2f8>)
 800dc92:	e000      	b.n	800dc96 <configCheck+0xf2>
 800dc94:	4b82      	ldr	r3, [pc, #520]	@ (800dea0 <configCheck+0x2fc>)
 800dc96:	4a83      	ldr	r2, [pc, #524]	@ (800dea4 <configCheck+0x300>)
 800dc98:	4983      	ldr	r1, [pc, #524]	@ (800dea8 <configCheck+0x304>)
 800dc9a:	2003      	movs	r0, #3
 800dc9c:	f000 fe90 	bl	800e9c0 <CreateLine>
    userbuttonHeld = true;
 800dca0:	4b7a      	ldr	r3, [pc, #488]	@ (800de8c <configCheck+0x2e8>)
 800dca2:	2201      	movs	r2, #1
 800dca4:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800dca6:	f001 facf 	bl	800f248 <HAL_GetTick>
 800dcaa:	0003      	movs	r3, r0
 800dcac:	22fa      	movs	r2, #250	@ 0xfa
 800dcae:	00d2      	lsls	r2, r2, #3
 800dcb0:	189a      	adds	r2, r3, r2
 800dcb2:	4b7e      	ldr	r3, [pc, #504]	@ (800deac <configCheck+0x308>)
 800dcb4:	601a      	str	r2, [r3, #0]
 800dcb6:	e002      	b.n	800dcbe <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800dcb8:	4b74      	ldr	r3, [pc, #464]	@ (800de8c <configCheck+0x2e8>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800dcbe:	f7f8 fcf8 	bl	80066b2 <BootButton_Pressed>
 800dcc2:	0003      	movs	r3, r0
 800dcc4:	001a      	movs	r2, r3
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	4053      	eors	r3, r2
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d100      	bne.n	800dcd2 <configCheck+0x12e>
 800dcd0:	e0a4      	b.n	800de1c <configCheck+0x278>
 800dcd2:	4b6e      	ldr	r3, [pc, #440]	@ (800de8c <configCheck+0x2e8>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d100      	bne.n	800dcdc <configCheck+0x138>
 800dcda:	e09f      	b.n	800de1c <configCheck+0x278>
 800dcdc:	4b73      	ldr	r3, [pc, #460]	@ (800deac <configCheck+0x308>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	0018      	movs	r0, r3
 800dce2:	f000 fe17 	bl	800e914 <TimestampIsReached>
 800dce6:	1e03      	subs	r3, r0, #0
 800dce8:	d100      	bne.n	800dcec <configCheck+0x148>
 800dcea:	e097      	b.n	800de1c <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800dcec:	f7fa fd10 	bl	8008710 <GetPMSensorPresence>
 800dcf0:	1e03      	subs	r3, r0, #0
 800dcf2:	d100      	bne.n	800dcf6 <configCheck+0x152>
 800dcf4:	e082      	b.n	800ddfc <configCheck+0x258>
 800dcf6:	4b6e      	ldr	r3, [pc, #440]	@ (800deb0 <configCheck+0x30c>)
 800dcf8:	791b      	ldrb	r3, [r3, #4]
 800dcfa:	2b34      	cmp	r3, #52	@ 0x34
 800dcfc:	d004      	beq.n	800dd08 <configCheck+0x164>
 800dcfe:	4b6c      	ldr	r3, [pc, #432]	@ (800deb0 <configCheck+0x30c>)
 800dd00:	791b      	ldrb	r3, [r3, #4]
 800dd02:	2b35      	cmp	r3, #53	@ 0x35
 800dd04:	d000      	beq.n	800dd08 <configCheck+0x164>
 800dd06:	e079      	b.n	800ddfc <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800dd08:	4b6a      	ldr	r3, [pc, #424]	@ (800deb4 <configCheck+0x310>)
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	1e5a      	subs	r2, r3, #1
 800dd0e:	4193      	sbcs	r3, r2
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2201      	movs	r2, #1
 800dd14:	4053      	eors	r3, r2
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	1c1a      	adds	r2, r3, #0
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	4b64      	ldr	r3, [pc, #400]	@ (800deb4 <configCheck+0x310>)
 800dd22:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800dd24:	4b63      	ldr	r3, [pc, #396]	@ (800deb4 <configCheck+0x310>)
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d005      	beq.n	800dd38 <configCheck+0x194>
 800dd2c:	1dbc      	adds	r4, r7, #6
 800dd2e:	f7ff fba3 	bl	800d478 <Calculate_LED_ON>
 800dd32:	0003      	movs	r3, r0
 800dd34:	8023      	strh	r3, [r4, #0]
 800dd36:	e003      	b.n	800dd40 <configCheck+0x19c>
        else color = 4000;
 800dd38:	1dbb      	adds	r3, r7, #6
 800dd3a:	22fa      	movs	r2, #250	@ 0xfa
 800dd3c:	0112      	lsls	r2, r2, #4
 800dd3e:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800dd40:	4b5c      	ldr	r3, [pc, #368]	@ (800deb4 <configCheck+0x310>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <configCheck+0x1a8>
 800dd48:	4b5b      	ldr	r3, [pc, #364]	@ (800deb8 <configCheck+0x314>)
 800dd4a:	e000      	b.n	800dd4e <configCheck+0x1aa>
 800dd4c:	4b5b      	ldr	r3, [pc, #364]	@ (800debc <configCheck+0x318>)
 800dd4e:	4a5c      	ldr	r2, [pc, #368]	@ (800dec0 <configCheck+0x31c>)
 800dd50:	495c      	ldr	r1, [pc, #368]	@ (800dec4 <configCheck+0x320>)
 800dd52:	2002      	movs	r0, #2
 800dd54:	f000 fe34 	bl	800e9c0 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800dd58:	1d7b      	adds	r3, r7, #5
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	701a      	strb	r2, [r3, #0]
 800dd5e:	e028      	b.n	800ddb2 <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800dd60:	f7ff fb8a 	bl	800d478 <Calculate_LED_ON>
 800dd64:	0003      	movs	r3, r0
 800dd66:	001a      	movs	r2, r3
 800dd68:	4b57      	ldr	r3, [pc, #348]	@ (800dec8 <configCheck+0x324>)
 800dd6a:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800dd6c:	4b56      	ldr	r3, [pc, #344]	@ (800dec8 <configCheck+0x324>)
 800dd6e:	1dba      	adds	r2, r7, #6
 800dd70:	8812      	ldrh	r2, [r2, #0]
 800dd72:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800dd74:	4b54      	ldr	r3, [pc, #336]	@ (800dec8 <configCheck+0x324>)
 800dd76:	1dba      	adds	r2, r7, #6
 800dd78:	8812      	ldrh	r2, [r2, #0]
 800dd7a:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800dd7c:	23c8      	movs	r3, #200	@ 0xc8
 800dd7e:	005b      	lsls	r3, r3, #1
 800dd80:	0018      	movs	r0, r3
 800dd82:	f001 fa6b 	bl	800f25c <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800dd86:	4b50      	ldr	r3, [pc, #320]	@ (800dec8 <configCheck+0x324>)
 800dd88:	22fa      	movs	r2, #250	@ 0xfa
 800dd8a:	0112      	lsls	r2, r2, #4
 800dd8c:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800dd8e:	4b4e      	ldr	r3, [pc, #312]	@ (800dec8 <configCheck+0x324>)
 800dd90:	22fa      	movs	r2, #250	@ 0xfa
 800dd92:	0112      	lsls	r2, r2, #4
 800dd94:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800dd96:	4b4c      	ldr	r3, [pc, #304]	@ (800dec8 <configCheck+0x324>)
 800dd98:	22fa      	movs	r2, #250	@ 0xfa
 800dd9a:	0112      	lsls	r2, r2, #4
 800dd9c:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800dd9e:	23c8      	movs	r3, #200	@ 0xc8
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	0018      	movs	r0, r3
 800dda4:	f001 fa5a 	bl	800f25c <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800dda8:	1d7b      	adds	r3, r7, #5
 800ddaa:	781a      	ldrb	r2, [r3, #0]
 800ddac:	1d7b      	adds	r3, r7, #5
 800ddae:	3201      	adds	r2, #1
 800ddb0:	701a      	strb	r2, [r3, #0]
 800ddb2:	1d7b      	adds	r3, r7, #5
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d9d2      	bls.n	800dd60 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800ddba:	4b37      	ldr	r3, [pc, #220]	@ (800de98 <configCheck+0x2f4>)
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	1e5a      	subs	r2, r3, #1
 800ddc0:	4193      	sbcs	r3, r2
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	4053      	eors	r3, r2
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	1c1a      	adds	r2, r3, #0
 800ddcc:	2301      	movs	r3, #1
 800ddce:	4013      	ands	r3, r2
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	4b31      	ldr	r3, [pc, #196]	@ (800de98 <configCheck+0x2f4>)
 800ddd4:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800ddd6:	4b30      	ldr	r3, [pc, #192]	@ (800de98 <configCheck+0x2f4>)
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d001      	beq.n	800dde2 <configCheck+0x23e>
 800ddde:	4b36      	ldr	r3, [pc, #216]	@ (800deb8 <configCheck+0x314>)
 800dde0:	e000      	b.n	800dde4 <configCheck+0x240>
 800dde2:	4b36      	ldr	r3, [pc, #216]	@ (800debc <configCheck+0x318>)
 800dde4:	4a39      	ldr	r2, [pc, #228]	@ (800decc <configCheck+0x328>)
 800dde6:	4937      	ldr	r1, [pc, #220]	@ (800dec4 <configCheck+0x320>)
 800dde8:	2002      	movs	r0, #2
 800ddea:	f000 fde9 	bl	800e9c0 <CreateLine>
      if (usbPluggedIn) {
 800ddee:	4b38      	ldr	r3, [pc, #224]	@ (800ded0 <configCheck+0x32c>)
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d009      	beq.n	800de0a <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800ddf6:	f7fc f86d 	bl	8009ed4 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ddfa:	e006      	b.n	800de0a <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800ddfc:	4a35      	ldr	r2, [pc, #212]	@ (800ded4 <configCheck+0x330>)
 800ddfe:	4b31      	ldr	r3, [pc, #196]	@ (800dec4 <configCheck+0x320>)
 800de00:	0019      	movs	r1, r3
 800de02:	2002      	movs	r0, #2
 800de04:	f000 fddc 	bl	800e9c0 <CreateLine>
 800de08:	e000      	b.n	800de0c <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800de0a:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800de0c:	46c0      	nop			@ (mov r8, r8)
 800de0e:	f7f8 fc61 	bl	80066d4 <UserButton_Pressed>
 800de12:	1e03      	subs	r3, r0, #0
 800de14:	d1fb      	bne.n	800de0e <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800de16:	4b1d      	ldr	r3, [pc, #116]	@ (800de8c <configCheck+0x2e8>)
 800de18:	2200      	movs	r2, #0
 800de1a:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800de1c:	f7f8 fc49 	bl	80066b2 <BootButton_Pressed>
 800de20:	0003      	movs	r3, r0
 800de22:	001a      	movs	r2, r3
 800de24:	2301      	movs	r3, #1
 800de26:	4053      	eors	r3, r2
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00b      	beq.n	800de46 <configCheck+0x2a2>
 800de2e:	f7f8 fc51 	bl	80066d4 <UserButton_Pressed>
 800de32:	0003      	movs	r3, r0
 800de34:	001a      	movs	r2, r3
 800de36:	2301      	movs	r3, #1
 800de38:	4053      	eors	r3, r2
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <configCheck+0x2a2>
    userbuttonHeld = false;
 800de40:	4b12      	ldr	r3, [pc, #72]	@ (800de8c <configCheck+0x2e8>)
 800de42:	2200      	movs	r2, #0
 800de44:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800de46:	f7f8 fc25 	bl	8006694 <Check_USB_PowerOn>
 800de4a:	1e03      	subs	r3, r0, #0
 800de4c:	d003      	beq.n	800de56 <configCheck+0x2b2>
    usbPluggedIn = true;
 800de4e:	4b20      	ldr	r3, [pc, #128]	@ (800ded0 <configCheck+0x32c>)
 800de50:	2201      	movs	r2, #1
 800de52:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800de54:	e012      	b.n	800de7c <configCheck+0x2d8>
    if(!userToggle && !init){
 800de56:	4b10      	ldr	r3, [pc, #64]	@ (800de98 <configCheck+0x2f4>)
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	2201      	movs	r2, #1
 800de5c:	4053      	eors	r3, r2
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d008      	beq.n	800de76 <configCheck+0x2d2>
 800de64:	4b1c      	ldr	r3, [pc, #112]	@ (800ded8 <configCheck+0x334>)
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	2201      	movs	r2, #1
 800de6a:	4053      	eors	r3, r2
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <configCheck+0x2d2>
      SetLEDsOff();
 800de72:	f7ff fd07 	bl	800d884 <SetLEDsOff>
    usbPluggedIn = false;
 800de76:	4b16      	ldr	r3, [pc, #88]	@ (800ded0 <configCheck+0x32c>)
 800de78:	2200      	movs	r2, #0
 800de7a:	701a      	strb	r2, [r3, #0]
}
 800de7c:	46c0      	nop			@ (mov r8, r8)
 800de7e:	46bd      	mov	sp, r7
 800de80:	b003      	add	sp, #12
 800de82:	bd90      	pop	{r4, r7, pc}
 800de84:	20001c1c 	.word	0x20001c1c
 800de88:	20001c24 	.word	0x20001c24
 800de8c:	20001c1f 	.word	0x20001c1f
 800de90:	00000bb8 	.word	0x00000bb8
 800de94:	000005dc 	.word	0x000005dc
 800de98:	20001c1e 	.word	0x20001c1e
 800de9c:	080256a8 	.word	0x080256a8
 800dea0:	080256ac 	.word	0x080256ac
 800dea4:	080256b0 	.word	0x080256b0
 800dea8:	08025630 	.word	0x08025630
 800deac:	20001c28 	.word	0x20001c28
 800deb0:	20000c88 	.word	0x20000c88
 800deb4:	20000c86 	.word	0x20000c86
 800deb8:	080256d0 	.word	0x080256d0
 800debc:	080256d8 	.word	0x080256d8
 800dec0:	080256e4 	.word	0x080256e4
 800dec4:	08025704 	.word	0x08025704
 800dec8:	40000400 	.word	0x40000400
 800decc:	08025708 	.word	0x08025708
 800ded0:	20001c1d 	.word	0x20001c1d
 800ded4:	08025720 	.word	0x08025720
 800ded8:	200000cc 	.word	0x200000cc

0800dedc <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800dedc:	b590      	push	{r4, r7, lr}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800dee2:	1dfc      	adds	r4, r7, #7
 800dee4:	f7ff fdfa 	bl	800dadc <powerCheck>
 800dee8:	0003      	movs	r3, r0
 800deea:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800deec:	1dfb      	adds	r3, r7, #7
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	0018      	movs	r0, r3
 800def2:	f7ff fe0f 	bl	800db14 <powerDisplay>
  return status;
 800def6:	1dfb      	adds	r3, r7, #7
 800def8:	781b      	ldrb	r3, [r3, #0]
}
 800defa:	0018      	movs	r0, r3
 800defc:	46bd      	mov	sp, r7
 800defe:	b003      	add	sp, #12
 800df00:	bd90      	pop	{r4, r7, pc}
	...

0800df04 <setuserToggle>:

void setuserToggle(void) {
 800df04:	b580      	push	{r7, lr}
 800df06:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800df08:	f7ff fde8 	bl	800dadc <powerCheck>
 800df0c:	0003      	movs	r3, r0
 800df0e:	2b04      	cmp	r3, #4
 800df10:	d004      	beq.n	800df1c <setuserToggle+0x18>
    userToggle = true;
 800df12:	4b04      	ldr	r3, [pc, #16]	@ (800df24 <setuserToggle+0x20>)
 800df14:	2201      	movs	r2, #1
 800df16:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800df18:	f7fa fea8 	bl	8008c6c <EnabledConnectedDevices>
  }
}
 800df1c:	46c0      	nop			@ (mov r8, r8)
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	20001c1e 	.word	0x20001c1e

0800df28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800df2c:	4b07      	ldr	r3, [pc, #28]	@ (800df4c <HAL_MspInit+0x24>)
 800df2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df30:	4b06      	ldr	r3, [pc, #24]	@ (800df4c <HAL_MspInit+0x24>)
 800df32:	2101      	movs	r1, #1
 800df34:	430a      	orrs	r2, r1
 800df36:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800df38:	4b04      	ldr	r3, [pc, #16]	@ (800df4c <HAL_MspInit+0x24>)
 800df3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df3c:	4b03      	ldr	r3, [pc, #12]	@ (800df4c <HAL_MspInit+0x24>)
 800df3e:	2180      	movs	r1, #128	@ 0x80
 800df40:	0549      	lsls	r1, r1, #21
 800df42:	430a      	orrs	r2, r1
 800df44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800df46:	46c0      	nop			@ (mov r8, r8)
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	40021000 	.word	0x40021000

0800df50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800df54:	46c0      	nop			@ (mov r8, r8)
 800df56:	e7fd      	b.n	800df54 <NMI_Handler+0x4>

0800df58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800df5c:	46c0      	nop			@ (mov r8, r8)
 800df5e:	e7fd      	b.n	800df5c <HardFault_Handler+0x4>

0800df60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800df64:	46c0      	nop			@ (mov r8, r8)
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800df6e:	46c0      	nop			@ (mov r8, r8)
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800df78:	f001 f954 	bl	800f224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service ();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800df7c:	46c0      	nop			@ (mov r8, r8)
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
	...

0800df84 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800df88:	4b03      	ldr	r3, [pc, #12]	@ (800df98 <RTC_IRQHandler+0x14>)
 800df8a:	0018      	movs	r0, r3
 800df8c:	f008 fe7a 	bl	8016c84 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800df90:	46c0      	nop			@ (mov r8, r8)
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	46c0      	nop			@ (mov r8, r8)
 800df98:	20000c60 	.word	0x20000c60

0800df9c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800dfa0:	2380      	movs	r3, #128	@ 0x80
 800dfa2:	021b      	lsls	r3, r3, #8
 800dfa4:	0018      	movs	r0, r3
 800dfa6:	f002 fbfd 	bl	80107a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800dfaa:	46c0      	nop			@ (mov r8, r8)
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dfb4:	4b05      	ldr	r3, [pc, #20]	@ (800dfcc <DMA1_Channel2_3_IRQHandler+0x1c>)
 800dfb6:	0018      	movs	r0, r3
 800dfb8:	f001 ff85 	bl	800fec6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800dfbc:	4b04      	ldr	r3, [pc, #16]	@ (800dfd0 <DMA1_Channel2_3_IRQHandler+0x20>)
 800dfbe:	0018      	movs	r0, r3
 800dfc0:	f001 ff81 	bl	800fec6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800dfc4:	46c0      	nop			@ (mov r8, r8)
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	46c0      	nop			@ (mov r8, r8)
 800dfcc:	20000b04 	.word	0x20000b04
 800dfd0:	20000abc 	.word	0x20000abc

0800dfd4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800dfd8:	4b07      	ldr	r3, [pc, #28]	@ (800dff8 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800dfda:	0018      	movs	r0, r3
 800dfdc:	f001 ff73 	bl	800fec6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800dfe0:	4b06      	ldr	r3, [pc, #24]	@ (800dffc <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800dfe2:	0018      	movs	r0, r3
 800dfe4:	f001 ff6f 	bl	800fec6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800dfe8:	4b05      	ldr	r3, [pc, #20]	@ (800e000 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800dfea:	0018      	movs	r0, r3
 800dfec:	f001 ff6b 	bl	800fec6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800dff0:	46c0      	nop			@ (mov r8, r8)
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	46c0      	nop			@ (mov r8, r8)
 800dff8:	20000b88 	.word	0x20000b88
 800dffc:	20001f24 	.word	0x20001f24
 800e000:	20001f6c 	.word	0x20001f6c

0800e004 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800e008:	4b03      	ldr	r3, [pc, #12]	@ (800e018 <USART4_5_IRQHandler+0x14>)
 800e00a:	0018      	movs	r0, r3
 800e00c:	f009 fd34 	bl	8017a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800e010:	46c0      	nop			@ (mov r8, r8)
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	46c0      	nop			@ (mov r8, r8)
 800e018:	20001e6c 	.word	0x20001e6c

0800e01c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800e020:	4b09      	ldr	r3, [pc, #36]	@ (800e048 <I2C1_IRQHandler+0x2c>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	699a      	ldr	r2, [r3, #24]
 800e026:	23e0      	movs	r3, #224	@ 0xe0
 800e028:	00db      	lsls	r3, r3, #3
 800e02a:	4013      	ands	r3, r2
 800e02c:	d004      	beq.n	800e038 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800e02e:	4b06      	ldr	r3, [pc, #24]	@ (800e048 <I2C1_IRQHandler+0x2c>)
 800e030:	0018      	movs	r0, r3
 800e032:	f003 f89f 	bl	8011174 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800e036:	e003      	b.n	800e040 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800e038:	4b03      	ldr	r3, [pc, #12]	@ (800e048 <I2C1_IRQHandler+0x2c>)
 800e03a:	0018      	movs	r0, r3
 800e03c:	f003 f880 	bl	8011140 <HAL_I2C_EV_IRQHandler>
}
 800e040:	46c0      	nop			@ (mov r8, r8)
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	46c0      	nop			@ (mov r8, r8)
 800e048:	20000a14 	.word	0x20000a14

0800e04c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e050:	4b03      	ldr	r3, [pc, #12]	@ (800e060 <USART1_IRQHandler+0x14>)
 800e052:	0018      	movs	r0, r3
 800e054:	f009 fd10 	bl	8017a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e058:	46c0      	nop			@ (mov r8, r8)
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	46c0      	nop			@ (mov r8, r8)
 800e060:	20001db4 	.word	0x20001db4

0800e064 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800e068:	4b03      	ldr	r3, [pc, #12]	@ (800e078 <USB_IRQHandler+0x14>)
 800e06a:	0018      	movs	r0, r3
 800e06c:	f005 fc60 	bl	8013930 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800e070:	46c0      	nop			@ (mov r8, r8)
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	46c0      	nop			@ (mov r8, r8)
 800e078:	20002d80 	.word	0x20002d80

0800e07c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	af00      	add	r7, sp, #0
  return 1;
 800e080:	2301      	movs	r3, #1
}
 800e082:	0018      	movs	r0, r3
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <_kill>:

int _kill(int pid, int sig)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e092:	f012 fbd5 	bl	8020840 <__errno>
 800e096:	0003      	movs	r3, r0
 800e098:	2216      	movs	r2, #22
 800e09a:	601a      	str	r2, [r3, #0]
  return -1;
 800e09c:	2301      	movs	r3, #1
 800e09e:	425b      	negs	r3, r3
}
 800e0a0:	0018      	movs	r0, r3
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	b002      	add	sp, #8
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <_exit>:

void _exit (int status)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	425a      	negs	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	0011      	movs	r1, r2
 800e0b8:	0018      	movs	r0, r3
 800e0ba:	f7ff ffe5 	bl	800e088 <_kill>
  while (1) {}    /* Make sure we hang here */
 800e0be:	46c0      	nop			@ (mov r8, r8)
 800e0c0:	e7fd      	b.n	800e0be <_exit+0x16>

0800e0c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b086      	sub	sp, #24
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	60f8      	str	r0, [r7, #12]
 800e0ca:	60b9      	str	r1, [r7, #8]
 800e0cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	617b      	str	r3, [r7, #20]
 800e0d2:	e00a      	b.n	800e0ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e0d4:	e000      	b.n	800e0d8 <_read+0x16>
 800e0d6:	bf00      	nop
 800e0d8:	0001      	movs	r1, r0
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	1c5a      	adds	r2, r3, #1
 800e0de:	60ba      	str	r2, [r7, #8]
 800e0e0:	b2ca      	uxtb	r2, r1
 800e0e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	617b      	str	r3, [r7, #20]
 800e0ea:	697a      	ldr	r2, [r7, #20]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	dbf0      	blt.n	800e0d4 <_read+0x12>
  }

  return len;
 800e0f2:	687b      	ldr	r3, [r7, #4]
}
 800e0f4:	0018      	movs	r0, r3
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	b006      	add	sp, #24
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <_close>:
  }
  return len;
}

int _close(int file)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e104:	2301      	movs	r3, #1
 800e106:	425b      	negs	r3, r3
}
 800e108:	0018      	movs	r0, r3
 800e10a:	46bd      	mov	sp, r7
 800e10c:	b002      	add	sp, #8
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	2280      	movs	r2, #128	@ 0x80
 800e11e:	0192      	lsls	r2, r2, #6
 800e120:	605a      	str	r2, [r3, #4]
  return 0;
 800e122:	2300      	movs	r3, #0
}
 800e124:	0018      	movs	r0, r3
 800e126:	46bd      	mov	sp, r7
 800e128:	b002      	add	sp, #8
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <_isatty>:

int _isatty(int file)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e134:	2301      	movs	r3, #1
}
 800e136:	0018      	movs	r0, r3
 800e138:	46bd      	mov	sp, r7
 800e13a:	b002      	add	sp, #8
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	60b9      	str	r1, [r7, #8]
 800e148:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	0018      	movs	r0, r3
 800e14e:	46bd      	mov	sp, r7
 800e150:	b004      	add	sp, #16
 800e152:	bd80      	pop	{r7, pc}

0800e154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b086      	sub	sp, #24
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e15c:	4a14      	ldr	r2, [pc, #80]	@ (800e1b0 <_sbrk+0x5c>)
 800e15e:	4b15      	ldr	r3, [pc, #84]	@ (800e1b4 <_sbrk+0x60>)
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e168:	4b13      	ldr	r3, [pc, #76]	@ (800e1b8 <_sbrk+0x64>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d102      	bne.n	800e176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e170:	4b11      	ldr	r3, [pc, #68]	@ (800e1b8 <_sbrk+0x64>)
 800e172:	4a12      	ldr	r2, [pc, #72]	@ (800e1bc <_sbrk+0x68>)
 800e174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e176:	4b10      	ldr	r3, [pc, #64]	@ (800e1b8 <_sbrk+0x64>)
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	18d3      	adds	r3, r2, r3
 800e17e:	693a      	ldr	r2, [r7, #16]
 800e180:	429a      	cmp	r2, r3
 800e182:	d207      	bcs.n	800e194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e184:	f012 fb5c 	bl	8020840 <__errno>
 800e188:	0003      	movs	r3, r0
 800e18a:	220c      	movs	r2, #12
 800e18c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e18e:	2301      	movs	r3, #1
 800e190:	425b      	negs	r3, r3
 800e192:	e009      	b.n	800e1a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e194:	4b08      	ldr	r3, [pc, #32]	@ (800e1b8 <_sbrk+0x64>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e19a:	4b07      	ldr	r3, [pc, #28]	@ (800e1b8 <_sbrk+0x64>)
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	18d2      	adds	r2, r2, r3
 800e1a2:	4b05      	ldr	r3, [pc, #20]	@ (800e1b8 <_sbrk+0x64>)
 800e1a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
}
 800e1a8:	0018      	movs	r0, r3
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	b006      	add	sp, #24
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	20005000 	.word	0x20005000
 800e1b4:	00000400 	.word	0x00000400
 800e1b8:	20001c38 	.word	0x20001c38
 800e1bc:	200033e0 	.word	0x200033e0

0800e1c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e1c4:	46c0      	nop			@ (mov r8, r8)
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
	...

0800e1cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e1d2:	2310      	movs	r3, #16
 800e1d4:	18fb      	adds	r3, r7, r3
 800e1d6:	0018      	movs	r0, r3
 800e1d8:	2308      	movs	r3, #8
 800e1da:	001a      	movs	r2, r3
 800e1dc:	2100      	movs	r1, #0
 800e1de:	f012 fa8b 	bl	80206f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e1e2:	003b      	movs	r3, r7
 800e1e4:	0018      	movs	r0, r3
 800e1e6:	2310      	movs	r3, #16
 800e1e8:	001a      	movs	r2, r3
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	f012 fa84 	bl	80206f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e1f0:	4b2e      	ldr	r3, [pc, #184]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e1f2:	2280      	movs	r2, #128	@ 0x80
 800e1f4:	05d2      	lsls	r2, r2, #23
 800e1f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e1f8:	4b2c      	ldr	r3, [pc, #176]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e1fe:	4b2b      	ldr	r3, [pc, #172]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e200:	2200      	movs	r2, #0
 800e202:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800e204:	4b29      	ldr	r3, [pc, #164]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e206:	4a2a      	ldr	r2, [pc, #168]	@ (800e2b0 <MX_TIM2_Init+0xe4>)
 800e208:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e20a:	4b28      	ldr	r3, [pc, #160]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e210:	4b26      	ldr	r3, [pc, #152]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e212:	2200      	movs	r2, #0
 800e214:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e216:	4b25      	ldr	r3, [pc, #148]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e218:	0018      	movs	r0, r3
 800e21a:	f008 fe41 	bl	8016ea0 <HAL_TIM_PWM_Init>
 800e21e:	1e03      	subs	r3, r0, #0
 800e220:	d001      	beq.n	800e226 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800e222:	f7fa fa37 	bl	8008694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e226:	2110      	movs	r1, #16
 800e228:	187b      	adds	r3, r7, r1
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e22e:	187b      	adds	r3, r7, r1
 800e230:	2200      	movs	r2, #0
 800e232:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e234:	187a      	adds	r2, r7, r1
 800e236:	4b1d      	ldr	r3, [pc, #116]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e238:	0011      	movs	r1, r2
 800e23a:	0018      	movs	r0, r3
 800e23c:	f009 f94e 	bl	80174dc <HAL_TIMEx_MasterConfigSynchronization>
 800e240:	1e03      	subs	r3, r0, #0
 800e242:	d001      	beq.n	800e248 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800e244:	f7fa fa26 	bl	8008694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e248:	003b      	movs	r3, r7
 800e24a:	2260      	movs	r2, #96	@ 0x60
 800e24c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e24e:	003b      	movs	r3, r7
 800e250:	2200      	movs	r2, #0
 800e252:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e254:	003b      	movs	r3, r7
 800e256:	2200      	movs	r2, #0
 800e258:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e25a:	003b      	movs	r3, r7
 800e25c:	2200      	movs	r2, #0
 800e25e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e260:	0039      	movs	r1, r7
 800e262:	4b12      	ldr	r3, [pc, #72]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e264:	2200      	movs	r2, #0
 800e266:	0018      	movs	r0, r3
 800e268:	f008 feec 	bl	8017044 <HAL_TIM_PWM_ConfigChannel>
 800e26c:	1e03      	subs	r3, r0, #0
 800e26e:	d001      	beq.n	800e274 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800e270:	f7fa fa10 	bl	8008694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e274:	0039      	movs	r1, r7
 800e276:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e278:	2208      	movs	r2, #8
 800e27a:	0018      	movs	r0, r3
 800e27c:	f008 fee2 	bl	8017044 <HAL_TIM_PWM_ConfigChannel>
 800e280:	1e03      	subs	r3, r0, #0
 800e282:	d001      	beq.n	800e288 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800e284:	f7fa fa06 	bl	8008694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e288:	0039      	movs	r1, r7
 800e28a:	4b08      	ldr	r3, [pc, #32]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e28c:	220c      	movs	r2, #12
 800e28e:	0018      	movs	r0, r3
 800e290:	f008 fed8 	bl	8017044 <HAL_TIM_PWM_ConfigChannel>
 800e294:	1e03      	subs	r3, r0, #0
 800e296:	d001      	beq.n	800e29c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800e298:	f7fa f9fc 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e29c:	4b03      	ldr	r3, [pc, #12]	@ (800e2ac <MX_TIM2_Init+0xe0>)
 800e29e:	0018      	movs	r0, r3
 800e2a0:	f000 f8fe 	bl	800e4a0 <HAL_TIM_MspPostInit>

}
 800e2a4:	46c0      	nop			@ (mov r8, r8)
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	b006      	add	sp, #24
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	20001c3c 	.word	0x20001c3c
 800e2b0:	0000ffff 	.word	0x0000ffff

0800e2b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e2ba:	2310      	movs	r3, #16
 800e2bc:	18fb      	adds	r3, r7, r3
 800e2be:	0018      	movs	r0, r3
 800e2c0:	2308      	movs	r3, #8
 800e2c2:	001a      	movs	r2, r3
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	f012 fa17 	bl	80206f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e2ca:	003b      	movs	r3, r7
 800e2cc:	0018      	movs	r0, r3
 800e2ce:	2310      	movs	r3, #16
 800e2d0:	001a      	movs	r2, r3
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	f012 fa10 	bl	80206f8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e2d8:	4b32      	ldr	r3, [pc, #200]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e2da:	4a33      	ldr	r2, [pc, #204]	@ (800e3a8 <MX_TIM3_Init+0xf4>)
 800e2dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e2de:	4b31      	ldr	r3, [pc, #196]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e2e4:	4b2f      	ldr	r3, [pc, #188]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800e2ea:	4b2e      	ldr	r3, [pc, #184]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e2ec:	4a2f      	ldr	r2, [pc, #188]	@ (800e3ac <MX_TIM3_Init+0xf8>)
 800e2ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e2f0:	4b2c      	ldr	r3, [pc, #176]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e2f6:	4b2b      	ldr	r3, [pc, #172]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e2fc:	4b29      	ldr	r3, [pc, #164]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e2fe:	0018      	movs	r0, r3
 800e300:	f008 fdce 	bl	8016ea0 <HAL_TIM_PWM_Init>
 800e304:	1e03      	subs	r3, r0, #0
 800e306:	d001      	beq.n	800e30c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800e308:	f7fa f9c4 	bl	8008694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e30c:	2110      	movs	r1, #16
 800e30e:	187b      	adds	r3, r7, r1
 800e310:	2200      	movs	r2, #0
 800e312:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e314:	187b      	adds	r3, r7, r1
 800e316:	2200      	movs	r2, #0
 800e318:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e31a:	187a      	adds	r2, r7, r1
 800e31c:	4b21      	ldr	r3, [pc, #132]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e31e:	0011      	movs	r1, r2
 800e320:	0018      	movs	r0, r3
 800e322:	f009 f8db 	bl	80174dc <HAL_TIMEx_MasterConfigSynchronization>
 800e326:	1e03      	subs	r3, r0, #0
 800e328:	d001      	beq.n	800e32e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800e32a:	f7fa f9b3 	bl	8008694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e32e:	003b      	movs	r3, r7
 800e330:	2260      	movs	r2, #96	@ 0x60
 800e332:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e334:	003b      	movs	r3, r7
 800e336:	2200      	movs	r2, #0
 800e338:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e33a:	003b      	movs	r3, r7
 800e33c:	2200      	movs	r2, #0
 800e33e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e340:	003b      	movs	r3, r7
 800e342:	2200      	movs	r2, #0
 800e344:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e346:	0039      	movs	r1, r7
 800e348:	4b16      	ldr	r3, [pc, #88]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	0018      	movs	r0, r3
 800e34e:	f008 fe79 	bl	8017044 <HAL_TIM_PWM_ConfigChannel>
 800e352:	1e03      	subs	r3, r0, #0
 800e354:	d001      	beq.n	800e35a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800e356:	f7fa f99d 	bl	8008694 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800e35a:	4b12      	ldr	r3, [pc, #72]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e35c:	2104      	movs	r1, #4
 800e35e:	0018      	movs	r0, r3
 800e360:	f009 f91a 	bl	8017598 <HAL_TIMEx_RemapConfig>
 800e364:	1e03      	subs	r3, r0, #0
 800e366:	d001      	beq.n	800e36c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800e368:	f7fa f994 	bl	8008694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e36c:	0039      	movs	r1, r7
 800e36e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e370:	2204      	movs	r2, #4
 800e372:	0018      	movs	r0, r3
 800e374:	f008 fe66 	bl	8017044 <HAL_TIM_PWM_ConfigChannel>
 800e378:	1e03      	subs	r3, r0, #0
 800e37a:	d001      	beq.n	800e380 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800e37c:	f7fa f98a 	bl	8008694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e380:	0039      	movs	r1, r7
 800e382:	4b08      	ldr	r3, [pc, #32]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e384:	2208      	movs	r2, #8
 800e386:	0018      	movs	r0, r3
 800e388:	f008 fe5c 	bl	8017044 <HAL_TIM_PWM_ConfigChannel>
 800e38c:	1e03      	subs	r3, r0, #0
 800e38e:	d001      	beq.n	800e394 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800e390:	f7fa f980 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e394:	4b03      	ldr	r3, [pc, #12]	@ (800e3a4 <MX_TIM3_Init+0xf0>)
 800e396:	0018      	movs	r0, r3
 800e398:	f000 f882 	bl	800e4a0 <HAL_TIM_MspPostInit>

}
 800e39c:	46c0      	nop			@ (mov r8, r8)
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	b006      	add	sp, #24
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	20001c7c 	.word	0x20001c7c
 800e3a8:	40000400 	.word	0x40000400
 800e3ac:	0000ffff 	.word	0x0000ffff

0800e3b0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e3b6:	003b      	movs	r3, r7
 800e3b8:	0018      	movs	r0, r3
 800e3ba:	2308      	movs	r3, #8
 800e3bc:	001a      	movs	r2, r3
 800e3be:	2100      	movs	r1, #0
 800e3c0:	f012 f99a 	bl	80206f8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e3c4:	4b15      	ldr	r3, [pc, #84]	@ (800e41c <MX_TIM6_Init+0x6c>)
 800e3c6:	4a16      	ldr	r2, [pc, #88]	@ (800e420 <MX_TIM6_Init+0x70>)
 800e3c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800e3ca:	4b14      	ldr	r3, [pc, #80]	@ (800e41c <MX_TIM6_Init+0x6c>)
 800e3cc:	220a      	movs	r2, #10
 800e3ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3d0:	4b12      	ldr	r3, [pc, #72]	@ (800e41c <MX_TIM6_Init+0x6c>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800e3d6:	4b11      	ldr	r3, [pc, #68]	@ (800e41c <MX_TIM6_Init+0x6c>)
 800e3d8:	4a12      	ldr	r2, [pc, #72]	@ (800e424 <MX_TIM6_Init+0x74>)
 800e3da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e41c <MX_TIM6_Init+0x6c>)
 800e3de:	2200      	movs	r2, #0
 800e3e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e3e2:	4b0e      	ldr	r3, [pc, #56]	@ (800e41c <MX_TIM6_Init+0x6c>)
 800e3e4:	0018      	movs	r0, r3
 800e3e6:	f008 fcb3 	bl	8016d50 <HAL_TIM_Base_Init>
 800e3ea:	1e03      	subs	r3, r0, #0
 800e3ec:	d001      	beq.n	800e3f2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e3ee:	f7fa f951 	bl	8008694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3f2:	003b      	movs	r3, r7
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3f8:	003b      	movs	r3, r7
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e3fe:	003a      	movs	r2, r7
 800e400:	4b06      	ldr	r3, [pc, #24]	@ (800e41c <MX_TIM6_Init+0x6c>)
 800e402:	0011      	movs	r1, r2
 800e404:	0018      	movs	r0, r3
 800e406:	f009 f869 	bl	80174dc <HAL_TIMEx_MasterConfigSynchronization>
 800e40a:	1e03      	subs	r3, r0, #0
 800e40c:	d001      	beq.n	800e412 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800e40e:	f7fa f941 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e412:	46c0      	nop			@ (mov r8, r8)
 800e414:	46bd      	mov	sp, r7
 800e416:	b002      	add	sp, #8
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	46c0      	nop			@ (mov r8, r8)
 800e41c:	20001cbc 	.word	0x20001cbc
 800e420:	40001000 	.word	0x40001000
 800e424:	0000ffff 	.word	0x0000ffff

0800e428 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	2380      	movs	r3, #128	@ 0x80
 800e436:	05db      	lsls	r3, r3, #23
 800e438:	429a      	cmp	r2, r3
 800e43a:	d106      	bne.n	800e44a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e43c:	4b0a      	ldr	r3, [pc, #40]	@ (800e468 <HAL_TIM_PWM_MspInit+0x40>)
 800e43e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e440:	4b09      	ldr	r3, [pc, #36]	@ (800e468 <HAL_TIM_PWM_MspInit+0x40>)
 800e442:	2101      	movs	r1, #1
 800e444:	430a      	orrs	r2, r1
 800e446:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800e448:	e00a      	b.n	800e460 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4a07      	ldr	r2, [pc, #28]	@ (800e46c <HAL_TIM_PWM_MspInit+0x44>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d105      	bne.n	800e460 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e454:	4b04      	ldr	r3, [pc, #16]	@ (800e468 <HAL_TIM_PWM_MspInit+0x40>)
 800e456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e458:	4b03      	ldr	r3, [pc, #12]	@ (800e468 <HAL_TIM_PWM_MspInit+0x40>)
 800e45a:	2102      	movs	r1, #2
 800e45c:	430a      	orrs	r2, r1
 800e45e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e460:	46c0      	nop			@ (mov r8, r8)
 800e462:	46bd      	mov	sp, r7
 800e464:	b002      	add	sp, #8
 800e466:	bd80      	pop	{r7, pc}
 800e468:	40021000 	.word	0x40021000
 800e46c:	40000400 	.word	0x40000400

0800e470 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4a06      	ldr	r2, [pc, #24]	@ (800e498 <HAL_TIM_Base_MspInit+0x28>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d105      	bne.n	800e48e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e482:	4b06      	ldr	r3, [pc, #24]	@ (800e49c <HAL_TIM_Base_MspInit+0x2c>)
 800e484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e486:	4b05      	ldr	r3, [pc, #20]	@ (800e49c <HAL_TIM_Base_MspInit+0x2c>)
 800e488:	2110      	movs	r1, #16
 800e48a:	430a      	orrs	r2, r1
 800e48c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800e48e:	46c0      	nop			@ (mov r8, r8)
 800e490:	46bd      	mov	sp, r7
 800e492:	b002      	add	sp, #8
 800e494:	bd80      	pop	{r7, pc}
 800e496:	46c0      	nop			@ (mov r8, r8)
 800e498:	40001000 	.word	0x40001000
 800e49c:	40021000 	.word	0x40021000

0800e4a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e4a0:	b590      	push	{r4, r7, lr}
 800e4a2:	b08b      	sub	sp, #44	@ 0x2c
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4a8:	2414      	movs	r4, #20
 800e4aa:	193b      	adds	r3, r7, r4
 800e4ac:	0018      	movs	r0, r3
 800e4ae:	2314      	movs	r3, #20
 800e4b0:	001a      	movs	r2, r3
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	f012 f920 	bl	80206f8 <memset>
  if(timHandle->Instance==TIM2)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	2380      	movs	r3, #128	@ 0x80
 800e4be:	05db      	lsls	r3, r3, #23
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d123      	bne.n	800e50c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4c4:	4b27      	ldr	r3, [pc, #156]	@ (800e564 <HAL_TIM_MspPostInit+0xc4>)
 800e4c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c8:	4b26      	ldr	r3, [pc, #152]	@ (800e564 <HAL_TIM_MspPostInit+0xc4>)
 800e4ca:	2101      	movs	r1, #1
 800e4cc:	430a      	orrs	r2, r1
 800e4ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e4d0:	4b24      	ldr	r3, [pc, #144]	@ (800e564 <HAL_TIM_MspPostInit+0xc4>)
 800e4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	613b      	str	r3, [r7, #16]
 800e4da:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800e4dc:	0021      	movs	r1, r4
 800e4de:	187b      	adds	r3, r7, r1
 800e4e0:	220d      	movs	r2, #13
 800e4e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4e4:	187b      	adds	r3, r7, r1
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4ea:	187b      	adds	r3, r7, r1
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e4f0:	187b      	adds	r3, r7, r1
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800e4f6:	187b      	adds	r3, r7, r1
 800e4f8:	2202      	movs	r2, #2
 800e4fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4fc:	187a      	adds	r2, r7, r1
 800e4fe:	23a0      	movs	r3, #160	@ 0xa0
 800e500:	05db      	lsls	r3, r3, #23
 800e502:	0011      	movs	r1, r2
 800e504:	0018      	movs	r0, r3
 800e506:	f001 ff95 	bl	8010434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e50a:	e027      	b.n	800e55c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a15      	ldr	r2, [pc, #84]	@ (800e568 <HAL_TIM_MspPostInit+0xc8>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d122      	bne.n	800e55c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e516:	4b13      	ldr	r3, [pc, #76]	@ (800e564 <HAL_TIM_MspPostInit+0xc4>)
 800e518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e51a:	4b12      	ldr	r3, [pc, #72]	@ (800e564 <HAL_TIM_MspPostInit+0xc4>)
 800e51c:	2104      	movs	r1, #4
 800e51e:	430a      	orrs	r2, r1
 800e520:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e522:	4b10      	ldr	r3, [pc, #64]	@ (800e564 <HAL_TIM_MspPostInit+0xc4>)
 800e524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e526:	2204      	movs	r2, #4
 800e528:	4013      	ands	r3, r2
 800e52a:	60fb      	str	r3, [r7, #12]
 800e52c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800e52e:	2114      	movs	r1, #20
 800e530:	187b      	adds	r3, r7, r1
 800e532:	22e0      	movs	r2, #224	@ 0xe0
 800e534:	0052      	lsls	r2, r2, #1
 800e536:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e538:	187b      	adds	r3, r7, r1
 800e53a:	2202      	movs	r2, #2
 800e53c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e53e:	187b      	adds	r3, r7, r1
 800e540:	2200      	movs	r2, #0
 800e542:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e544:	187b      	adds	r3, r7, r1
 800e546:	2200      	movs	r2, #0
 800e548:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e54a:	187b      	adds	r3, r7, r1
 800e54c:	2202      	movs	r2, #2
 800e54e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e550:	187b      	adds	r3, r7, r1
 800e552:	4a06      	ldr	r2, [pc, #24]	@ (800e56c <HAL_TIM_MspPostInit+0xcc>)
 800e554:	0019      	movs	r1, r3
 800e556:	0010      	movs	r0, r2
 800e558:	f001 ff6c 	bl	8010434 <HAL_GPIO_Init>
}
 800e55c:	46c0      	nop			@ (mov r8, r8)
 800e55e:	46bd      	mov	sp, r7
 800e560:	b00b      	add	sp, #44	@ 0x2c
 800e562:	bd90      	pop	{r4, r7, pc}
 800e564:	40021000 	.word	0x40021000
 800e568:	40000400 	.word	0x40000400
 800e56c:	50000800 	.word	0x50000800

0800e570 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e574:	4b17      	ldr	r3, [pc, #92]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e576:	4a18      	ldr	r2, [pc, #96]	@ (800e5d8 <MX_LPUART1_UART_Init+0x68>)
 800e578:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e57a:	4b16      	ldr	r3, [pc, #88]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e57c:	22e1      	movs	r2, #225	@ 0xe1
 800e57e:	0252      	lsls	r2, r2, #9
 800e580:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e582:	4b14      	ldr	r3, [pc, #80]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e584:	2200      	movs	r2, #0
 800e586:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e588:	4b12      	ldr	r3, [pc, #72]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e58e:	4b11      	ldr	r3, [pc, #68]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e590:	2200      	movs	r2, #0
 800e592:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e594:	4b0f      	ldr	r3, [pc, #60]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e596:	220c      	movs	r2, #12
 800e598:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e59a:	4b0e      	ldr	r3, [pc, #56]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e5a8:	2218      	movs	r2, #24
 800e5aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e5ac:	4b09      	ldr	r3, [pc, #36]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e5ae:	2280      	movs	r2, #128	@ 0x80
 800e5b0:	0212      	lsls	r2, r2, #8
 800e5b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e5b4:	4b07      	ldr	r3, [pc, #28]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e5b6:	2280      	movs	r2, #128	@ 0x80
 800e5b8:	0152      	lsls	r2, r2, #5
 800e5ba:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e5bc:	4b05      	ldr	r3, [pc, #20]	@ (800e5d4 <MX_LPUART1_UART_Init+0x64>)
 800e5be:	0018      	movs	r0, r3
 800e5c0:	f009 f808 	bl	80175d4 <HAL_UART_Init>
 800e5c4:	1e03      	subs	r3, r0, #0
 800e5c6:	d001      	beq.n	800e5cc <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e5c8:	f7fa f864 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e5cc:	46c0      	nop			@ (mov r8, r8)
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	46c0      	nop			@ (mov r8, r8)
 800e5d4:	20001cfc 	.word	0x20001cfc
 800e5d8:	40004800 	.word	0x40004800

0800e5dc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e5e0:	4b16      	ldr	r3, [pc, #88]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e5e2:	4a17      	ldr	r2, [pc, #92]	@ (800e640 <MX_USART1_UART_Init+0x64>)
 800e5e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e5e6:	4b15      	ldr	r3, [pc, #84]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e5e8:	22e1      	movs	r2, #225	@ 0xe1
 800e5ea:	0252      	lsls	r2, r2, #9
 800e5ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e5ee:	4b13      	ldr	r3, [pc, #76]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e5f4:	4b11      	ldr	r3, [pc, #68]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e5fa:	4b10      	ldr	r3, [pc, #64]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e600:	4b0e      	ldr	r3, [pc, #56]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e602:	220c      	movs	r2, #12
 800e604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e606:	4b0d      	ldr	r3, [pc, #52]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e608:	2200      	movs	r2, #0
 800e60a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e60c:	4b0b      	ldr	r3, [pc, #44]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e60e:	2200      	movs	r2, #0
 800e610:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e612:	4b0a      	ldr	r3, [pc, #40]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e614:	2200      	movs	r2, #0
 800e616:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e618:	4b08      	ldr	r3, [pc, #32]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e61a:	2208      	movs	r2, #8
 800e61c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e61e:	4b07      	ldr	r3, [pc, #28]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e620:	2280      	movs	r2, #128	@ 0x80
 800e622:	0212      	lsls	r2, r2, #8
 800e624:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e626:	4b05      	ldr	r3, [pc, #20]	@ (800e63c <MX_USART1_UART_Init+0x60>)
 800e628:	0018      	movs	r0, r3
 800e62a:	f008 ffd3 	bl	80175d4 <HAL_UART_Init>
 800e62e:	1e03      	subs	r3, r0, #0
 800e630:	d001      	beq.n	800e636 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e632:	f7fa f82f 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e636:	46c0      	nop			@ (mov r8, r8)
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	20001db4 	.word	0x20001db4
 800e640:	40013800 	.word	0x40013800

0800e644 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e648:	4b14      	ldr	r3, [pc, #80]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e64a:	4a15      	ldr	r2, [pc, #84]	@ (800e6a0 <MX_USART4_UART_Init+0x5c>)
 800e64c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e64e:	4b13      	ldr	r3, [pc, #76]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e650:	22e1      	movs	r2, #225	@ 0xe1
 800e652:	0252      	lsls	r2, r2, #9
 800e654:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e656:	4b11      	ldr	r3, [pc, #68]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e658:	2200      	movs	r2, #0
 800e65a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e65c:	4b0f      	ldr	r3, [pc, #60]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e65e:	2200      	movs	r2, #0
 800e660:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e662:	4b0e      	ldr	r3, [pc, #56]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e664:	2200      	movs	r2, #0
 800e666:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e668:	4b0c      	ldr	r3, [pc, #48]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e66a:	220c      	movs	r2, #12
 800e66c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e66e:	4b0b      	ldr	r3, [pc, #44]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e670:	2200      	movs	r2, #0
 800e672:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e674:	4b09      	ldr	r3, [pc, #36]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e676:	2200      	movs	r2, #0
 800e678:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e67a:	4b08      	ldr	r3, [pc, #32]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e680:	4b06      	ldr	r3, [pc, #24]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e682:	2200      	movs	r2, #0
 800e684:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e686:	4b05      	ldr	r3, [pc, #20]	@ (800e69c <MX_USART4_UART_Init+0x58>)
 800e688:	0018      	movs	r0, r3
 800e68a:	f008 ffa3 	bl	80175d4 <HAL_UART_Init>
 800e68e:	1e03      	subs	r3, r0, #0
 800e690:	d001      	beq.n	800e696 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e692:	f7f9 ffff 	bl	8008694 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e696:	46c0      	nop			@ (mov r8, r8)
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	20001e6c 	.word	0x20001e6c
 800e6a0:	40004c00 	.word	0x40004c00

0800e6a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e6a4:	b590      	push	{r4, r7, lr}
 800e6a6:	b08d      	sub	sp, #52	@ 0x34
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6ac:	241c      	movs	r4, #28
 800e6ae:	193b      	adds	r3, r7, r4
 800e6b0:	0018      	movs	r0, r3
 800e6b2:	2314      	movs	r3, #20
 800e6b4:	001a      	movs	r2, r3
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	f012 f81e 	bl	80206f8 <memset>
  if(uartHandle->Instance==LPUART1)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a8b      	ldr	r2, [pc, #556]	@ (800e8f0 <HAL_UART_MspInit+0x24c>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d129      	bne.n	800e71a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e6c6:	4b8b      	ldr	r3, [pc, #556]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e6c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6ca:	4b8a      	ldr	r3, [pc, #552]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e6cc:	2180      	movs	r1, #128	@ 0x80
 800e6ce:	02c9      	lsls	r1, r1, #11
 800e6d0:	430a      	orrs	r2, r1
 800e6d2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e6d4:	4b87      	ldr	r3, [pc, #540]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e6d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d8:	4b86      	ldr	r3, [pc, #536]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e6da:	2104      	movs	r1, #4
 800e6dc:	430a      	orrs	r2, r1
 800e6de:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e6e0:	4b84      	ldr	r3, [pc, #528]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e4:	2204      	movs	r2, #4
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	61bb      	str	r3, [r7, #24]
 800e6ea:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e6ec:	0021      	movs	r1, r4
 800e6ee:	187b      	adds	r3, r7, r1
 800e6f0:	2203      	movs	r2, #3
 800e6f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6f4:	187b      	adds	r3, r7, r1
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6fa:	187b      	adds	r3, r7, r1
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e700:	187b      	adds	r3, r7, r1
 800e702:	2203      	movs	r2, #3
 800e704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e706:	187b      	adds	r3, r7, r1
 800e708:	2206      	movs	r2, #6
 800e70a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e70c:	187b      	adds	r3, r7, r1
 800e70e:	4a7a      	ldr	r2, [pc, #488]	@ (800e8f8 <HAL_UART_MspInit+0x254>)
 800e710:	0019      	movs	r1, r3
 800e712:	0010      	movs	r0, r2
 800e714:	f001 fe8e 	bl	8010434 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e718:	e0e5      	b.n	800e8e6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a77      	ldr	r2, [pc, #476]	@ (800e8fc <HAL_UART_MspInit+0x258>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d133      	bne.n	800e78c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e724:	4b73      	ldr	r3, [pc, #460]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e728:	4b72      	ldr	r3, [pc, #456]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e72a:	2180      	movs	r1, #128	@ 0x80
 800e72c:	01c9      	lsls	r1, r1, #7
 800e72e:	430a      	orrs	r2, r1
 800e730:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e732:	4b70      	ldr	r3, [pc, #448]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e736:	4b6f      	ldr	r3, [pc, #444]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e738:	2101      	movs	r1, #1
 800e73a:	430a      	orrs	r2, r1
 800e73c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e73e:	4b6d      	ldr	r3, [pc, #436]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e742:	2201      	movs	r2, #1
 800e744:	4013      	ands	r3, r2
 800e746:	617b      	str	r3, [r7, #20]
 800e748:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e74a:	211c      	movs	r1, #28
 800e74c:	187b      	adds	r3, r7, r1
 800e74e:	22c0      	movs	r2, #192	@ 0xc0
 800e750:	00d2      	lsls	r2, r2, #3
 800e752:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e754:	187b      	adds	r3, r7, r1
 800e756:	2202      	movs	r2, #2
 800e758:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e75a:	187b      	adds	r3, r7, r1
 800e75c:	2200      	movs	r2, #0
 800e75e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e760:	187b      	adds	r3, r7, r1
 800e762:	2203      	movs	r2, #3
 800e764:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e766:	187b      	adds	r3, r7, r1
 800e768:	2204      	movs	r2, #4
 800e76a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e76c:	187a      	adds	r2, r7, r1
 800e76e:	23a0      	movs	r3, #160	@ 0xa0
 800e770:	05db      	lsls	r3, r3, #23
 800e772:	0011      	movs	r1, r2
 800e774:	0018      	movs	r0, r3
 800e776:	f001 fe5d 	bl	8010434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e77a:	2200      	movs	r2, #0
 800e77c:	2100      	movs	r1, #0
 800e77e:	201b      	movs	r0, #27
 800e780:	f001 fa06 	bl	800fb90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e784:	201b      	movs	r0, #27
 800e786:	f001 fa18 	bl	800fbba <HAL_NVIC_EnableIRQ>
}
 800e78a:	e0ac      	b.n	800e8e6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a5b      	ldr	r2, [pc, #364]	@ (800e900 <HAL_UART_MspInit+0x25c>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d000      	beq.n	800e798 <HAL_UART_MspInit+0xf4>
 800e796:	e0a6      	b.n	800e8e6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e798:	4b56      	ldr	r3, [pc, #344]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e79a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e79c:	4b55      	ldr	r3, [pc, #340]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e79e:	2180      	movs	r1, #128	@ 0x80
 800e7a0:	0309      	lsls	r1, r1, #12
 800e7a2:	430a      	orrs	r2, r1
 800e7a4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7a6:	4b53      	ldr	r3, [pc, #332]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e7a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7aa:	4b52      	ldr	r3, [pc, #328]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e7ac:	2101      	movs	r1, #1
 800e7ae:	430a      	orrs	r2, r1
 800e7b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e7b2:	4b50      	ldr	r3, [pc, #320]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	4013      	ands	r3, r2
 800e7ba:	613b      	str	r3, [r7, #16]
 800e7bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e7be:	4b4d      	ldr	r3, [pc, #308]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7c2:	4b4c      	ldr	r3, [pc, #304]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e7c4:	2104      	movs	r1, #4
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e7ca:	4b4a      	ldr	r3, [pc, #296]	@ (800e8f4 <HAL_UART_MspInit+0x250>)
 800e7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ce:	2204      	movs	r2, #4
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e7d6:	241c      	movs	r4, #28
 800e7d8:	193b      	adds	r3, r7, r4
 800e7da:	2202      	movs	r2, #2
 800e7dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7de:	193b      	adds	r3, r7, r4
 800e7e0:	2202      	movs	r2, #2
 800e7e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7e4:	193b      	adds	r3, r7, r4
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7ea:	193b      	adds	r3, r7, r4
 800e7ec:	2203      	movs	r2, #3
 800e7ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e7f0:	193b      	adds	r3, r7, r4
 800e7f2:	2206      	movs	r2, #6
 800e7f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7f6:	193a      	adds	r2, r7, r4
 800e7f8:	23a0      	movs	r3, #160	@ 0xa0
 800e7fa:	05db      	lsls	r3, r3, #23
 800e7fc:	0011      	movs	r1, r2
 800e7fe:	0018      	movs	r0, r3
 800e800:	f001 fe18 	bl	8010434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e804:	0021      	movs	r1, r4
 800e806:	187b      	adds	r3, r7, r1
 800e808:	2280      	movs	r2, #128	@ 0x80
 800e80a:	00d2      	lsls	r2, r2, #3
 800e80c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e80e:	187b      	adds	r3, r7, r1
 800e810:	2202      	movs	r2, #2
 800e812:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e814:	187b      	adds	r3, r7, r1
 800e816:	2200      	movs	r2, #0
 800e818:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e81a:	187b      	adds	r3, r7, r1
 800e81c:	2203      	movs	r2, #3
 800e81e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e820:	187b      	adds	r3, r7, r1
 800e822:	2206      	movs	r2, #6
 800e824:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e826:	187b      	adds	r3, r7, r1
 800e828:	4a33      	ldr	r2, [pc, #204]	@ (800e8f8 <HAL_UART_MspInit+0x254>)
 800e82a:	0019      	movs	r1, r3
 800e82c:	0010      	movs	r0, r2
 800e82e:	f001 fe01 	bl	8010434 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e832:	4b34      	ldr	r3, [pc, #208]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e834:	4a34      	ldr	r2, [pc, #208]	@ (800e908 <HAL_UART_MspInit+0x264>)
 800e836:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e838:	4b32      	ldr	r3, [pc, #200]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e83a:	220c      	movs	r2, #12
 800e83c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e83e:	4b31      	ldr	r3, [pc, #196]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e840:	2200      	movs	r2, #0
 800e842:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e844:	4b2f      	ldr	r3, [pc, #188]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e846:	2200      	movs	r2, #0
 800e848:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e84a:	4b2e      	ldr	r3, [pc, #184]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e84c:	2280      	movs	r2, #128	@ 0x80
 800e84e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e850:	4b2c      	ldr	r3, [pc, #176]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e852:	2200      	movs	r2, #0
 800e854:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e856:	4b2b      	ldr	r3, [pc, #172]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e858:	2200      	movs	r2, #0
 800e85a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e85c:	4b29      	ldr	r3, [pc, #164]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e85e:	2220      	movs	r2, #32
 800e860:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e862:	4b28      	ldr	r3, [pc, #160]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e864:	2200      	movs	r2, #0
 800e866:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e868:	4b26      	ldr	r3, [pc, #152]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e86a:	0018      	movs	r0, r3
 800e86c:	f001 f9c6 	bl	800fbfc <HAL_DMA_Init>
 800e870:	1e03      	subs	r3, r0, #0
 800e872:	d001      	beq.n	800e878 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e874:	f7f9 ff0e 	bl	8008694 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4a22      	ldr	r2, [pc, #136]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e87c:	675a      	str	r2, [r3, #116]	@ 0x74
 800e87e:	4b21      	ldr	r3, [pc, #132]	@ (800e904 <HAL_UART_MspInit+0x260>)
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e884:	4b21      	ldr	r3, [pc, #132]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e886:	4a22      	ldr	r2, [pc, #136]	@ (800e910 <HAL_UART_MspInit+0x26c>)
 800e888:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e88a:	4b20      	ldr	r3, [pc, #128]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e88c:	220c      	movs	r2, #12
 800e88e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e890:	4b1e      	ldr	r3, [pc, #120]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e892:	2210      	movs	r2, #16
 800e894:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e896:	4b1d      	ldr	r3, [pc, #116]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e898:	2200      	movs	r2, #0
 800e89a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e89c:	4b1b      	ldr	r3, [pc, #108]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e89e:	2280      	movs	r2, #128	@ 0x80
 800e8a0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e8a2:	4b1a      	ldr	r3, [pc, #104]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e8a8:	4b18      	ldr	r3, [pc, #96]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e8ae:	4b17      	ldr	r3, [pc, #92]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e8b4:	4b15      	ldr	r3, [pc, #84]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e8ba:	4b14      	ldr	r3, [pc, #80]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e8bc:	0018      	movs	r0, r3
 800e8be:	f001 f99d 	bl	800fbfc <HAL_DMA_Init>
 800e8c2:	1e03      	subs	r3, r0, #0
 800e8c4:	d001      	beq.n	800e8ca <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e8c6:	f7f9 fee5 	bl	8008694 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4a0f      	ldr	r2, [pc, #60]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e8ce:	671a      	str	r2, [r3, #112]	@ 0x70
 800e8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800e90c <HAL_UART_MspInit+0x268>)
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2100      	movs	r1, #0
 800e8da:	200e      	movs	r0, #14
 800e8dc:	f001 f958 	bl	800fb90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e8e0:	200e      	movs	r0, #14
 800e8e2:	f001 f96a 	bl	800fbba <HAL_NVIC_EnableIRQ>
}
 800e8e6:	46c0      	nop			@ (mov r8, r8)
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	b00d      	add	sp, #52	@ 0x34
 800e8ec:	bd90      	pop	{r4, r7, pc}
 800e8ee:	46c0      	nop			@ (mov r8, r8)
 800e8f0:	40004800 	.word	0x40004800
 800e8f4:	40021000 	.word	0x40021000
 800e8f8:	50000800 	.word	0x50000800
 800e8fc:	40013800 	.word	0x40013800
 800e900:	40004c00 	.word	0x40004c00
 800e904:	20001f24 	.word	0x20001f24
 800e908:	4002006c 	.word	0x4002006c
 800e90c:	20001f6c 	.word	0x20001f6c
 800e910:	40020080 	.word	0x40020080

0800e914 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e914:	b580      	push	{r7, lr}
 800e916:	b086      	sub	sp, #24
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e91c:	f000 fc94 	bl	800f248 <HAL_GetTick>
 800e920:	0003      	movs	r3, r0
 800e922:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e924:	4b1c      	ldr	r3, [pc, #112]	@ (800e998 <TimestampIsReached+0x84>)
 800e926:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d307      	bcc.n	800e940 <TimestampIsReached+0x2c>
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d901      	bls.n	800e940 <TimestampIsReached+0x2c>
 800e93c:	2201      	movs	r2, #1
 800e93e:	e000      	b.n	800e942 <TimestampIsReached+0x2e>
 800e940:	2200      	movs	r2, #0
 800e942:	230f      	movs	r3, #15
 800e944:	18fb      	adds	r3, r7, r3
 800e946:	701a      	strb	r2, [r3, #0]
 800e948:	781a      	ldrb	r2, [r3, #0]
 800e94a:	2101      	movs	r1, #1
 800e94c:	400a      	ands	r2, r1
 800e94e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e950:	697a      	ldr	r2, [r7, #20]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	429a      	cmp	r2, r3
 800e956:	d207      	bcs.n	800e968 <TimestampIsReached+0x54>
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	693a      	ldr	r2, [r7, #16]
 800e960:	429a      	cmp	r2, r3
 800e962:	d201      	bcs.n	800e968 <TimestampIsReached+0x54>
 800e964:	2201      	movs	r2, #1
 800e966:	e000      	b.n	800e96a <TimestampIsReached+0x56>
 800e968:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e96a:	200e      	movs	r0, #14
 800e96c:	183b      	adds	r3, r7, r0
 800e96e:	701a      	strb	r2, [r3, #0]
 800e970:	781a      	ldrb	r2, [r3, #0]
 800e972:	2101      	movs	r1, #1
 800e974:	400a      	ands	r2, r1
 800e976:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e978:	230f      	movs	r3, #15
 800e97a:	18fb      	adds	r3, r7, r3
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d103      	bne.n	800e98a <TimestampIsReached+0x76>
 800e982:	183b      	adds	r3, r7, r0
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e98a:	2301      	movs	r3, #1
 800e98c:	e000      	b.n	800e990 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	0018      	movs	r0, r3
 800e992:	46bd      	mov	sp, r7
 800e994:	b006      	add	sp, #24
 800e996:	bd80      	pop	{r7, pc}
 800e998:	7fffffff 	.word	0x7fffffff

0800e99c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e9a4:	f000 fc50 	bl	800f248 <HAL_GetTick>
 800e9a8:	0002      	movs	r2, r0
 800e9aa:	4904      	ldr	r1, [pc, #16]	@ (800e9bc <AddTimestamp+0x20>)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	0018      	movs	r0, r3
 800e9b0:	f011 fd5e 	bl	8020470 <siprintf>
}
 800e9b4:	46c0      	nop			@ (mov r8, r8)
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	b002      	add	sp, #8
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	08025754 	.word	0x08025754

0800e9c0 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e9c0:	b40c      	push	{r2, r3}
 800e9c2:	b5b0      	push	{r4, r5, r7, lr}
 800e9c4:	b0a4      	sub	sp, #144	@ 0x90
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	0002      	movs	r2, r0
 800e9ca:	6039      	str	r1, [r7, #0]
 800e9cc:	1dfb      	adds	r3, r7, #7
 800e9ce:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e9d0:	4b23      	ldr	r3, [pc, #140]	@ (800ea60 <CreateLine+0xa0>)
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	1dfa      	adds	r2, r7, #7
 800e9d6:	7812      	ldrb	r2, [r2, #0]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d839      	bhi.n	800ea50 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e9dc:	683a      	ldr	r2, [r7, #0]
 800e9de:	4921      	ldr	r1, [pc, #132]	@ (800ea64 <CreateLine+0xa4>)
 800e9e0:	240c      	movs	r4, #12
 800e9e2:	193b      	adds	r3, r7, r4
 800e9e4:	0018      	movs	r0, r3
 800e9e6:	f011 fd43 	bl	8020470 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e9ea:	4b1d      	ldr	r3, [pc, #116]	@ (800ea60 <CreateLine+0xa0>)
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d909      	bls.n	800ea06 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e9f2:	193b      	adds	r3, r7, r4
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	f7f1 fbb9 	bl	800016c <strlen>
 800e9fa:	0002      	movs	r2, r0
 800e9fc:	193b      	adds	r3, r7, r4
 800e9fe:	189b      	adds	r3, r3, r2
 800ea00:	0018      	movs	r0, r3
 800ea02:	f7ff ffcb 	bl	800e99c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800ea06:	240c      	movs	r4, #12
 800ea08:	193b      	adds	r3, r7, r4
 800ea0a:	0018      	movs	r0, r3
 800ea0c:	f7f1 fbae 	bl	800016c <strlen>
 800ea10:	0003      	movs	r3, r0
 800ea12:	218c      	movs	r1, #140	@ 0x8c
 800ea14:	187a      	adds	r2, r7, r1
 800ea16:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800ea18:	239c      	movs	r3, #156	@ 0x9c
 800ea1a:	2508      	movs	r5, #8
 800ea1c:	195b      	adds	r3, r3, r5
 800ea1e:	19db      	adds	r3, r3, r7
 800ea20:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800ea22:	193a      	adds	r2, r7, r4
 800ea24:	187b      	adds	r3, r7, r1
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	18d0      	adds	r0, r2, r3
 800ea2a:	187b      	adds	r3, r7, r1
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2280      	movs	r2, #128	@ 0x80
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	0019      	movs	r1, r3
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	2298      	movs	r2, #152	@ 0x98
 800ea38:	1952      	adds	r2, r2, r5
 800ea3a:	19d2      	adds	r2, r2, r7
 800ea3c:	6812      	ldr	r2, [r2, #0]
 800ea3e:	f011 fdaf 	bl	80205a0 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800ea42:	193a      	adds	r2, r7, r4
 800ea44:	4b08      	ldr	r3, [pc, #32]	@ (800ea68 <CreateLine+0xa8>)
 800ea46:	0011      	movs	r1, r2
 800ea48:	0018      	movs	r0, r3
 800ea4a:	f011 fca1 	bl	8020390 <iprintf>
 800ea4e:	e000      	b.n	800ea52 <CreateLine+0x92>
    return;
 800ea50:	46c0      	nop			@ (mov r8, r8)
}
 800ea52:	46bd      	mov	sp, r7
 800ea54:	b024      	add	sp, #144	@ 0x90
 800ea56:	bcb0      	pop	{r4, r5, r7}
 800ea58:	bc08      	pop	{r3}
 800ea5a:	b002      	add	sp, #8
 800ea5c:	4718      	bx	r3
 800ea5e:	46c0      	nop			@ (mov r8, r8)
 800ea60:	200000d4 	.word	0x200000d4
 800ea64:	08025760 	.word	0x08025760
 800ea68:	08025764 	.word	0x08025764

0800ea6c <_write>:

int _write(int fd, void *buf, size_t count) {
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	68b9      	ldr	r1, [r7, #8]
 800ea7e:	4804      	ldr	r0, [pc, #16]	@ (800ea90 <_write+0x24>)
 800ea80:	2364      	movs	r3, #100	@ 0x64
 800ea82:	f008 fe0d 	bl	80176a0 <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800ea86:	687b      	ldr	r3, [r7, #4]
}
 800ea88:	0018      	movs	r0, r3
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	b004      	add	sp, #16
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	20001db4 	.word	0x20001db4

0800ea94 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	0002      	movs	r2, r0
 800ea9c:	1dfb      	adds	r3, r7, #7
 800ea9e:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800eaa0:	4b03      	ldr	r3, [pc, #12]	@ (800eab0 <SetVerboseLevel+0x1c>)
 800eaa2:	1dfa      	adds	r2, r7, #7
 800eaa4:	7812      	ldrb	r2, [r2, #0]
 800eaa6:	701a      	strb	r2, [r3, #0]
}
 800eaa8:	46c0      	nop			@ (mov r8, r8)
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	b002      	add	sp, #8
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	200000d4 	.word	0x200000d4

0800eab4 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800eab4:	b580      	push	{r7, lr}
 800eab6:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800eab8:	4b02      	ldr	r3, [pc, #8]	@ (800eac4 <GetVerboseLevel+0x10>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	0018      	movs	r0, r3
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	46c0      	nop			@ (mov r8, r8)
 800eac4:	200000d4 	.word	0x200000d4

0800eac8 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800eace:	4a0f      	ldr	r2, [pc, #60]	@ (800eb0c <BinaryReleaseInfo+0x44>)
 800ead0:	4b0f      	ldr	r3, [pc, #60]	@ (800eb10 <BinaryReleaseInfo+0x48>)
 800ead2:	0019      	movs	r1, r3
 800ead4:	2002      	movs	r0, #2
 800ead6:	f7ff ff73 	bl	800e9c0 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800eada:	480e      	ldr	r0, [pc, #56]	@ (800eb14 <BinaryReleaseInfo+0x4c>)
 800eadc:	4a0e      	ldr	r2, [pc, #56]	@ (800eb18 <BinaryReleaseInfo+0x50>)
 800eade:	490c      	ldr	r1, [pc, #48]	@ (800eb10 <BinaryReleaseInfo+0x48>)
 800eae0:	4b0e      	ldr	r3, [pc, #56]	@ (800eb1c <BinaryReleaseInfo+0x54>)
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	0003      	movs	r3, r0
 800eae6:	2002      	movs	r0, #2
 800eae8:	f7ff ff6a 	bl	800e9c0 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800eaec:	4b0c      	ldr	r3, [pc, #48]	@ (800eb20 <BinaryReleaseInfo+0x58>)
 800eaee:	4a0d      	ldr	r2, [pc, #52]	@ (800eb24 <BinaryReleaseInfo+0x5c>)
 800eaf0:	4907      	ldr	r1, [pc, #28]	@ (800eb10 <BinaryReleaseInfo+0x48>)
 800eaf2:	2002      	movs	r0, #2
 800eaf4:	f7ff ff64 	bl	800e9c0 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800eaf8:	4b0b      	ldr	r3, [pc, #44]	@ (800eb28 <BinaryReleaseInfo+0x60>)
 800eafa:	4a0c      	ldr	r2, [pc, #48]	@ (800eb2c <BinaryReleaseInfo+0x64>)
 800eafc:	4904      	ldr	r1, [pc, #16]	@ (800eb10 <BinaryReleaseInfo+0x48>)
 800eafe:	2002      	movs	r0, #2
 800eb00:	f7ff ff5e 	bl	800e9c0 <CreateLine>
}
 800eb04:	46c0      	nop			@ (mov r8, r8)
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	46c0      	nop			@ (mov r8, r8)
 800eb0c:	0802576c 	.word	0x0802576c
 800eb10:	08025798 	.word	0x08025798
 800eb14:	0802579c 	.word	0x0802579c
 800eb18:	080257a8 	.word	0x080257a8
 800eb1c:	080257bc 	.word	0x080257bc
 800eb20:	080257c8 	.word	0x080257c8
 800eb24:	080257d4 	.word	0x080257d4
 800eb28:	080257dc 	.word	0x080257dc
 800eb2c:	080257e4 	.word	0x080257e4

0800eb30 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	68f9      	ldr	r1, [r7, #12]
 800eb42:	4803      	ldr	r0, [pc, #12]	@ (800eb50 <errorHandler+0x20>)
 800eb44:	f011 fc24 	bl	8020390 <iprintf>
//    while (true)
//    {
//    }
}
 800eb48:	46c0      	nop			@ (mov r8, r8)
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	b004      	add	sp, #16
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	080257fc 	.word	0x080257fc

0800eb54 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800eb54:	b590      	push	{r4, r7, lr}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6039      	str	r1, [r7, #0]
 800eb5c:	0011      	movs	r1, r2
 800eb5e:	1dfb      	adds	r3, r7, #7
 800eb60:	1c02      	adds	r2, r0, #0
 800eb62:	701a      	strb	r2, [r3, #0]
 800eb64:	1dbb      	adds	r3, r7, #6
 800eb66:	1c0a      	adds	r2, r1, #0
 800eb68:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800eb6a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb94 <ReadRegister+0x40>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00a      	beq.n	800eb88 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800eb72:	4b08      	ldr	r3, [pc, #32]	@ (800eb94 <ReadRegister+0x40>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	1dba      	adds	r2, r7, #6
 800eb78:	7814      	ldrb	r4, [r2, #0]
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	1dfa      	adds	r2, r7, #7
 800eb7e:	7810      	ldrb	r0, [r2, #0]
 800eb80:	0022      	movs	r2, r4
 800eb82:	4798      	blx	r3
 800eb84:	0003      	movs	r3, r0
 800eb86:	e000      	b.n	800eb8a <ReadRegister+0x36>
	}
	return false;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	0018      	movs	r0, r3
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	b003      	add	sp, #12
 800eb90:	bd90      	pop	{r4, r7, pc}
 800eb92:	46c0      	nop			@ (mov r8, r8)
 800eb94:	20001fbc 	.word	0x20001fbc

0800eb98 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6039      	str	r1, [r7, #0]
 800eba0:	0011      	movs	r1, r2
 800eba2:	1dfb      	adds	r3, r7, #7
 800eba4:	1c02      	adds	r2, r0, #0
 800eba6:	701a      	strb	r2, [r3, #0]
 800eba8:	1dbb      	adds	r3, r7, #6
 800ebaa:	1c0a      	adds	r2, r1, #0
 800ebac:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ebae:	4b0a      	ldr	r3, [pc, #40]	@ (800ebd8 <WriteRegister+0x40>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00a      	beq.n	800ebcc <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800ebb6:	4b08      	ldr	r3, [pc, #32]	@ (800ebd8 <WriteRegister+0x40>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	1dba      	adds	r2, r7, #6
 800ebbc:	7814      	ldrb	r4, [r2, #0]
 800ebbe:	6839      	ldr	r1, [r7, #0]
 800ebc0:	1dfa      	adds	r2, r7, #7
 800ebc2:	7810      	ldrb	r0, [r2, #0]
 800ebc4:	0022      	movs	r2, r4
 800ebc6:	4798      	blx	r3
 800ebc8:	0003      	movs	r3, r0
 800ebca:	e000      	b.n	800ebce <WriteRegister+0x36>
  }
  return false;
 800ebcc:	2300      	movs	r3, #0
}
 800ebce:	0018      	movs	r0, r3
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	b003      	add	sp, #12
 800ebd4:	bd90      	pop	{r4, r7, pc}
 800ebd6:	46c0      	nop			@ (mov r8, r8)
 800ebd8:	20001fc0 	.word	0x20001fc0

0800ebdc <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	000a      	movs	r2, r1
 800ebe6:	1cfb      	adds	r3, r7, #3
 800ebe8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800ebea:	230f      	movs	r3, #15
 800ebec:	18fb      	adds	r3, r7, r3
 800ebee:	22ff      	movs	r2, #255	@ 0xff
 800ebf0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ebf2:	230e      	movs	r3, #14
 800ebf4:	18fb      	adds	r3, r7, r3
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	701a      	strb	r2, [r3, #0]
 800ebfa:	e037      	b.n	800ec6c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800ebfc:	230e      	movs	r3, #14
 800ebfe:	18fb      	adds	r3, r7, r3
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	18d3      	adds	r3, r2, r3
 800ec06:	7819      	ldrb	r1, [r3, #0]
 800ec08:	220f      	movs	r2, #15
 800ec0a:	18bb      	adds	r3, r7, r2
 800ec0c:	18ba      	adds	r2, r7, r2
 800ec0e:	7812      	ldrb	r2, [r2, #0]
 800ec10:	404a      	eors	r2, r1
 800ec12:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800ec14:	230d      	movs	r3, #13
 800ec16:	18fb      	adds	r3, r7, r3
 800ec18:	2200      	movs	r2, #0
 800ec1a:	701a      	strb	r2, [r3, #0]
 800ec1c:	e01b      	b.n	800ec56 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800ec1e:	210f      	movs	r1, #15
 800ec20:	187b      	adds	r3, r7, r1
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	b25b      	sxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	da09      	bge.n	800ec3e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800ec2a:	187b      	adds	r3, r7, r1
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	b25b      	sxtb	r3, r3
 800ec32:	2231      	movs	r2, #49	@ 0x31
 800ec34:	4053      	eors	r3, r2
 800ec36:	b25a      	sxtb	r2, r3
 800ec38:	187b      	adds	r3, r7, r1
 800ec3a:	701a      	strb	r2, [r3, #0]
 800ec3c:	e005      	b.n	800ec4a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800ec3e:	230f      	movs	r3, #15
 800ec40:	18fa      	adds	r2, r7, r3
 800ec42:	18fb      	adds	r3, r7, r3
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	18db      	adds	r3, r3, r3
 800ec48:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800ec4a:	210d      	movs	r1, #13
 800ec4c:	187b      	adds	r3, r7, r1
 800ec4e:	781a      	ldrb	r2, [r3, #0]
 800ec50:	187b      	adds	r3, r7, r1
 800ec52:	3201      	adds	r2, #1
 800ec54:	701a      	strb	r2, [r3, #0]
 800ec56:	230d      	movs	r3, #13
 800ec58:	18fb      	adds	r3, r7, r3
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	2b07      	cmp	r3, #7
 800ec5e:	d9de      	bls.n	800ec1e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800ec60:	210e      	movs	r1, #14
 800ec62:	187b      	adds	r3, r7, r1
 800ec64:	781a      	ldrb	r2, [r3, #0]
 800ec66:	187b      	adds	r3, r7, r1
 800ec68:	3201      	adds	r2, #1
 800ec6a:	701a      	strb	r2, [r3, #0]
 800ec6c:	230e      	movs	r3, #14
 800ec6e:	18fa      	adds	r2, r7, r3
 800ec70:	1cfb      	adds	r3, r7, #3
 800ec72:	7812      	ldrb	r2, [r2, #0]
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d3c0      	bcc.n	800ebfc <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800ec7a:	230f      	movs	r3, #15
 800ec7c:	18fb      	adds	r3, r7, r3
 800ec7e:	781b      	ldrb	r3, [r3, #0]
}
 800ec80:	0018      	movs	r0, r3
 800ec82:	46bd      	mov	sp, r7
 800ec84:	b004      	add	sp, #16
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800ec92:	4b0a      	ldr	r3, [pc, #40]	@ (800ecbc <HIDS_Init+0x34>)
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800ec98:	4b09      	ldr	r3, [pc, #36]	@ (800ecc0 <HIDS_Init+0x38>)
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800ec9e:	4b09      	ldr	r3, [pc, #36]	@ (800ecc4 <HIDS_Init+0x3c>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	0018      	movs	r0, r3
 800eca4:	f000 f840 	bl	800ed28 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800eca8:	4b07      	ldr	r3, [pc, #28]	@ (800ecc8 <HIDS_Init+0x40>)
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	0018      	movs	r0, r3
 800ecae:	f000 f82b 	bl	800ed08 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800ecb2:	46c0      	nop			@ (mov r8, r8)
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	b002      	add	sp, #8
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	46c0      	nop			@ (mov r8, r8)
 800ecbc:	20001fbc 	.word	0x20001fbc
 800ecc0:	20001fc0 	.word	0x20001fc0
 800ecc4:	200000d6 	.word	0x200000d6
 800ecc8:	200000d5 	.word	0x200000d5

0800eccc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800eccc:	b580      	push	{r7, lr}
 800ecce:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800ecd0:	f000 faba 	bl	800f248 <HAL_GetTick>
 800ecd4:	0002      	movs	r2, r0
 800ecd6:	4b08      	ldr	r3, [pc, #32]	@ (800ecf8 <HIDS_StartMeasurement+0x2c>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	18d2      	adds	r2, r2, r3
 800ecdc:	4b07      	ldr	r3, [pc, #28]	@ (800ecfc <HIDS_StartMeasurement+0x30>)
 800ecde:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800ece0:	4b07      	ldr	r3, [pc, #28]	@ (800ed00 <HIDS_StartMeasurement+0x34>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	0019      	movs	r1, r3
 800ece6:	2044      	movs	r0, #68	@ 0x44
 800ece8:	f7ff ff56 	bl	800eb98 <WriteRegister>
  MeasurementDone = false;
 800ecec:	4b05      	ldr	r3, [pc, #20]	@ (800ed04 <HIDS_StartMeasurement+0x38>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	701a      	strb	r2, [r3, #0]
}
 800ecf2:	46c0      	nop			@ (mov r8, r8)
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	200000dc 	.word	0x200000dc
 800ecfc:	200000d8 	.word	0x200000d8
 800ed00:	200000d6 	.word	0x200000d6
 800ed04:	20001fd2 	.word	0x20001fd2

0800ed08 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	0002      	movs	r2, r0
 800ed10:	1dfb      	adds	r3, r7, #7
 800ed12:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800ed14:	4b03      	ldr	r3, [pc, #12]	@ (800ed24 <HIDS_SetHeaterMode+0x1c>)
 800ed16:	1dfa      	adds	r2, r7, #7
 800ed18:	7812      	ldrb	r2, [r2, #0]
 800ed1a:	701a      	strb	r2, [r3, #0]
}
 800ed1c:	46c0      	nop			@ (mov r8, r8)
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	b002      	add	sp, #8
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	200000d5 	.word	0x200000d5

0800ed28 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	0002      	movs	r2, r0
 800ed30:	1dfb      	adds	r3, r7, #7
 800ed32:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800ed34:	4b03      	ldr	r3, [pc, #12]	@ (800ed44 <HIDS_SetMeasurementMode+0x1c>)
 800ed36:	1dfa      	adds	r2, r7, #7
 800ed38:	7812      	ldrb	r2, [r2, #0]
 800ed3a:	701a      	strb	r2, [r3, #0]
}
 800ed3c:	46c0      	nop			@ (mov r8, r8)
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	b002      	add	sp, #8
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	200000d6 	.word	0x200000d6

0800ed48 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800ed50:	f000 fa7a 	bl	800f248 <HAL_GetTick>
 800ed54:	0002      	movs	r2, r0
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	18d2      	adds	r2, r2, r3
 800ed5a:	4b03      	ldr	r3, [pc, #12]	@ (800ed68 <setHIDSTimeStamp+0x20>)
 800ed5c:	601a      	str	r2, [r3, #0]
}
 800ed5e:	46c0      	nop			@ (mov r8, r8)
 800ed60:	46bd      	mov	sp, r7
 800ed62:	b002      	add	sp, #8
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	46c0      	nop			@ (mov r8, r8)
 800ed68:	20001fd4 	.word	0x20001fd4

0800ed6c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800ed6c:	b590      	push	{r4, r7, lr}
 800ed6e:	b085      	sub	sp, #20
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	781a      	ldrb	r2, [r3, #0]
 800ed78:	210c      	movs	r1, #12
 800ed7a:	187b      	adds	r3, r7, r1
 800ed7c:	701a      	strb	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	785a      	ldrb	r2, [r3, #1]
 800ed82:	187b      	adds	r3, r7, r1
 800ed84:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800ed86:	240f      	movs	r4, #15
 800ed88:	193b      	adds	r3, r7, r4
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	7892      	ldrb	r2, [r2, #2]
 800ed8e:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800ed90:	187b      	adds	r3, r7, r1
 800ed92:	2102      	movs	r1, #2
 800ed94:	0018      	movs	r0, r3
 800ed96:	f7ff ff21 	bl	800ebdc <CalculateCRC>
 800ed9a:	0003      	movs	r3, r0
 800ed9c:	001a      	movs	r2, r3
 800ed9e:	193b      	adds	r3, r7, r4
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d007      	beq.n	800edb6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800eda6:	4a1a      	ldr	r2, [pc, #104]	@ (800ee10 <CheckCRC+0xa4>)
 800eda8:	4b1a      	ldr	r3, [pc, #104]	@ (800ee14 <CheckCRC+0xa8>)
 800edaa:	0019      	movs	r1, r3
 800edac:	2001      	movs	r0, #1
 800edae:	f7ff fe07 	bl	800e9c0 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800edb2:	2300      	movs	r3, #0
 800edb4:	e027      	b.n	800ee06 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	78da      	ldrb	r2, [r3, #3]
 800edba:	2108      	movs	r1, #8
 800edbc:	187b      	adds	r3, r7, r1
 800edbe:	701a      	strb	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	791a      	ldrb	r2, [r3, #4]
 800edc4:	187b      	adds	r3, r7, r1
 800edc6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800edc8:	240e      	movs	r4, #14
 800edca:	193b      	adds	r3, r7, r4
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	7952      	ldrb	r2, [r2, #5]
 800edd0:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800edd2:	187b      	adds	r3, r7, r1
 800edd4:	2102      	movs	r1, #2
 800edd6:	0018      	movs	r0, r3
 800edd8:	f7ff ff00 	bl	800ebdc <CalculateCRC>
 800eddc:	0003      	movs	r3, r0
 800edde:	001a      	movs	r2, r3
 800ede0:	193b      	adds	r3, r7, r4
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d00d      	beq.n	800ee04 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800ede8:	4a0b      	ldr	r2, [pc, #44]	@ (800ee18 <CheckCRC+0xac>)
 800edea:	4b0a      	ldr	r3, [pc, #40]	@ (800ee14 <CheckCRC+0xa8>)
 800edec:	0019      	movs	r1, r3
 800edee:	2001      	movs	r0, #1
 800edf0:	f7ff fde6 	bl	800e9c0 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800edf4:	4a09      	ldr	r2, [pc, #36]	@ (800ee1c <CheckCRC+0xb0>)
 800edf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ee20 <CheckCRC+0xb4>)
 800edf8:	217c      	movs	r1, #124	@ 0x7c
 800edfa:	0018      	movs	r0, r3
 800edfc:	f7ff fe98 	bl	800eb30 <errorHandler>
		return false;
 800ee00:	2300      	movs	r3, #0
 800ee02:	e000      	b.n	800ee06 <CheckCRC+0x9a>
	}
	return true;
 800ee04:	2301      	movs	r3, #1
}
 800ee06:	0018      	movs	r0, r3
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	b005      	add	sp, #20
 800ee0c:	bd90      	pop	{r4, r7, pc}
 800ee0e:	46c0      	nop			@ (mov r8, r8)
 800ee10:	08025848 	.word	0x08025848
 800ee14:	08025870 	.word	0x08025870
 800ee18:	08025874 	.word	0x08025874
 800ee1c:	080258a0 	.word	0x080258a0
 800ee20:	08025e6c 	.word	0x08025e6c

0800ee24 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800ee2a:	1dbb      	adds	r3, r7, #6
 800ee2c:	2289      	movs	r2, #137	@ 0x89
 800ee2e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800ee30:	1dbb      	adds	r3, r7, #6
 800ee32:	2201      	movs	r2, #1
 800ee34:	0019      	movs	r1, r3
 800ee36:	2044      	movs	r0, #68	@ 0x44
 800ee38:	f7ff feae 	bl	800eb98 <WriteRegister>
	HAL_Delay(30);
 800ee3c:	201e      	movs	r0, #30
 800ee3e:	f000 fa0d 	bl	800f25c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800ee42:	4b14      	ldr	r3, [pc, #80]	@ (800ee94 <HIDS_DeviceConnected+0x70>)
 800ee44:	2206      	movs	r2, #6
 800ee46:	0019      	movs	r1, r3
 800ee48:	2044      	movs	r0, #68	@ 0x44
 800ee4a:	f7ff fe83 	bl	800eb54 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800ee4e:	1dfb      	adds	r3, r7, #7
 800ee50:	2200      	movs	r2, #0
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	e011      	b.n	800ee7a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800ee56:	1dfb      	adds	r3, r7, #7
 800ee58:	7818      	ldrb	r0, [r3, #0]
 800ee5a:	1dfb      	adds	r3, r7, #7
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	4a0d      	ldr	r2, [pc, #52]	@ (800ee94 <HIDS_DeviceConnected+0x70>)
 800ee60:	5cd3      	ldrb	r3, [r2, r3]
 800ee62:	4a0d      	ldr	r2, [pc, #52]	@ (800ee98 <HIDS_DeviceConnected+0x74>)
 800ee64:	490d      	ldr	r1, [pc, #52]	@ (800ee9c <HIDS_DeviceConnected+0x78>)
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	0003      	movs	r3, r0
 800ee6a:	2002      	movs	r0, #2
 800ee6c:	f7ff fda8 	bl	800e9c0 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800ee70:	1dfb      	adds	r3, r7, #7
 800ee72:	781a      	ldrb	r2, [r3, #0]
 800ee74:	1dfb      	adds	r3, r7, #7
 800ee76:	3201      	adds	r2, #1
 800ee78:	701a      	strb	r2, [r3, #0]
 800ee7a:	1dfb      	adds	r3, r7, #7
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	2b05      	cmp	r3, #5
 800ee80:	d9e9      	bls.n	800ee56 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800ee82:	4b04      	ldr	r3, [pc, #16]	@ (800ee94 <HIDS_DeviceConnected+0x70>)
 800ee84:	0018      	movs	r0, r3
 800ee86:	f7ff ff71 	bl	800ed6c <CheckCRC>
 800ee8a:	0003      	movs	r3, r0
}
 800ee8c:	0018      	movs	r0, r3
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	b002      	add	sp, #8
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	20001fc4 	.word	0x20001fc4
 800ee98:	080258b8 	.word	0x080258b8
 800ee9c:	08025844 	.word	0x08025844

0800eea0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800eea0:	b580      	push	{r7, lr}
 800eea2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800eea4:	4b04      	ldr	r3, [pc, #16]	@ (800eeb8 <HIDS_MeasurementReady+0x18>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	0018      	movs	r0, r3
 800eeaa:	f7ff fd33 	bl	800e914 <TimestampIsReached>
 800eeae:	0003      	movs	r3, r0
}
 800eeb0:	0018      	movs	r0, r3
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	46c0      	nop			@ (mov r8, r8)
 800eeb8:	200000d8 	.word	0x200000d8

0800eebc <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800eec6:	4b41      	ldr	r3, [pc, #260]	@ (800efcc <HIDS_GetMeasurementValues+0x110>)
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <HIDS_GetMeasurementValues+0x16>
 800eece:	2301      	movs	r3, #1
 800eed0:	e077      	b.n	800efc2 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800eed2:	f7ff ffe5 	bl	800eea0 <HIDS_MeasurementReady>
 800eed6:	0003      	movs	r3, r0
 800eed8:	001a      	movs	r2, r3
 800eeda:	2301      	movs	r3, #1
 800eedc:	4053      	eors	r3, r2
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <HIDS_GetMeasurementValues+0x2c>
 800eee4:	2300      	movs	r3, #0
 800eee6:	e06c      	b.n	800efc2 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800eee8:	4b39      	ldr	r3, [pc, #228]	@ (800efd0 <HIDS_GetMeasurementValues+0x114>)
 800eeea:	2206      	movs	r2, #6
 800eeec:	0019      	movs	r1, r3
 800eeee:	2044      	movs	r0, #68	@ 0x44
 800eef0:	f7ff fe30 	bl	800eb54 <ReadRegister>
 800eef4:	0003      	movs	r3, r0
 800eef6:	001a      	movs	r2, r3
 800eef8:	2301      	movs	r3, #1
 800eefa:	4053      	eors	r3, r2
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d005      	beq.n	800ef0e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800ef02:	4a34      	ldr	r2, [pc, #208]	@ (800efd4 <HIDS_GetMeasurementValues+0x118>)
 800ef04:	4b34      	ldr	r3, [pc, #208]	@ (800efd8 <HIDS_GetMeasurementValues+0x11c>)
 800ef06:	0019      	movs	r1, r3
 800ef08:	2001      	movs	r0, #1
 800ef0a:	f7ff fd59 	bl	800e9c0 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800ef0e:	4b30      	ldr	r3, [pc, #192]	@ (800efd0 <HIDS_GetMeasurementValues+0x114>)
 800ef10:	0018      	movs	r0, r3
 800ef12:	f7ff ff2b 	bl	800ed6c <CheckCRC>
 800ef16:	0003      	movs	r3, r0
 800ef18:	001a      	movs	r2, r3
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	4053      	eors	r3, r2
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d001      	beq.n	800ef28 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800ef24:	2300      	movs	r3, #0
 800ef26:	e04c      	b.n	800efc2 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800ef28:	4b29      	ldr	r3, [pc, #164]	@ (800efd0 <HIDS_GetMeasurementValues+0x114>)
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	021b      	lsls	r3, r3, #8
 800ef2e:	4a28      	ldr	r2, [pc, #160]	@ (800efd0 <HIDS_GetMeasurementValues+0x114>)
 800ef30:	7852      	ldrb	r2, [r2, #1]
 800ef32:	4313      	orrs	r3, r2
 800ef34:	22af      	movs	r2, #175	@ 0xaf
 800ef36:	4353      	muls	r3, r2
 800ef38:	0018      	movs	r0, r3
 800ef3a:	f7f4 fa41 	bl	80033c0 <__aeabi_i2d>
 800ef3e:	2200      	movs	r2, #0
 800ef40:	4b26      	ldr	r3, [pc, #152]	@ (800efdc <HIDS_GetMeasurementValues+0x120>)
 800ef42:	f7f2 ff37 	bl	8001db4 <__aeabi_ddiv>
 800ef46:	0002      	movs	r2, r0
 800ef48:	000b      	movs	r3, r1
 800ef4a:	0010      	movs	r0, r2
 800ef4c:	0019      	movs	r1, r3
 800ef4e:	f7f4 fad1 	bl	80034f4 <__aeabi_d2f>
 800ef52:	1c03      	adds	r3, r0, #0
 800ef54:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800ef56:	4922      	ldr	r1, [pc, #136]	@ (800efe0 <HIDS_GetMeasurementValues+0x124>)
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7f2 f95f 	bl	800121c <__aeabi_fsub>
 800ef5e:	1c03      	adds	r3, r0, #0
 800ef60:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ef62:	4b1b      	ldr	r3, [pc, #108]	@ (800efd0 <HIDS_GetMeasurementValues+0x114>)
 800ef64:	78db      	ldrb	r3, [r3, #3]
 800ef66:	021b      	lsls	r3, r3, #8
 800ef68:	4a19      	ldr	r2, [pc, #100]	@ (800efd0 <HIDS_GetMeasurementValues+0x114>)
 800ef6a:	7912      	ldrb	r2, [r2, #4]
 800ef6c:	431a      	orrs	r2, r3
 800ef6e:	0013      	movs	r3, r2
 800ef70:	015b      	lsls	r3, r3, #5
 800ef72:	1a9b      	subs	r3, r3, r2
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	189b      	adds	r3, r3, r2
 800ef78:	0018      	movs	r0, r3
 800ef7a:	f7f4 fa21 	bl	80033c0 <__aeabi_i2d>
 800ef7e:	2200      	movs	r2, #0
 800ef80:	4b16      	ldr	r3, [pc, #88]	@ (800efdc <HIDS_GetMeasurementValues+0x120>)
 800ef82:	f7f2 ff17 	bl	8001db4 <__aeabi_ddiv>
 800ef86:	0002      	movs	r2, r0
 800ef88:	000b      	movs	r3, r1
 800ef8a:	0010      	movs	r0, r2
 800ef8c:	0019      	movs	r1, r3
 800ef8e:	f7f4 fab1 	bl	80034f4 <__aeabi_d2f>
 800ef92:	1c03      	adds	r3, r0, #0
 800ef94:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800ef96:	4913      	ldr	r1, [pc, #76]	@ (800efe4 <HIDS_GetMeasurementValues+0x128>)
 800ef98:	68b8      	ldr	r0, [r7, #8]
 800ef9a:	f7f2 f93f 	bl	800121c <__aeabi_fsub>
 800ef9e:	1c03      	adds	r3, r0, #0
 800efa0:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	0011      	movs	r1, r2
 800efb4:	0018      	movs	r0, r3
 800efb6:	f7fd f92d 	bl	800c214 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800efba:	4b04      	ldr	r3, [pc, #16]	@ (800efcc <HIDS_GetMeasurementValues+0x110>)
 800efbc:	2201      	movs	r2, #1
 800efbe:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800efc0:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800efc2:	0018      	movs	r0, r3
 800efc4:	46bd      	mov	sp, r7
 800efc6:	b004      	add	sp, #16
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	46c0      	nop			@ (mov r8, r8)
 800efcc:	20001fd2 	.word	0x20001fd2
 800efd0:	20001fcc 	.word	0x20001fcc
 800efd4:	080258d8 	.word	0x080258d8
 800efd8:	08025870 	.word	0x08025870
 800efdc:	40efffe0 	.word	0x40efffe0
 800efe0:	42340000 	.word	0x42340000
 800efe4:	40c00000 	.word	0x40c00000

0800efe8 <ResetHIDSresults>:

void ResetHIDSresults() {
 800efe8:	b580      	push	{r7, lr}
 800efea:	af00      	add	r7, sp, #0
  humid = 0.0;
 800efec:	4b04      	ldr	r3, [pc, #16]	@ (800f000 <ResetHIDSresults+0x18>)
 800efee:	2200      	movs	r2, #0
 800eff0:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800eff2:	4b04      	ldr	r3, [pc, #16]	@ (800f004 <ResetHIDSresults+0x1c>)
 800eff4:	2200      	movs	r2, #0
 800eff6:	601a      	str	r2, [r3, #0]
}
 800eff8:	46c0      	nop			@ (mov r8, r8)
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	46c0      	nop			@ (mov r8, r8)
 800f000:	20001fb4 	.word	0x20001fb4
 800f004:	20001fb8 	.word	0x20001fb8

0800f008 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800f008:	b5b0      	push	{r4, r5, r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800f00e:	4b3c      	ldr	r3, [pc, #240]	@ (800f100 <HIDS_Upkeep+0xf8>)
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	2b06      	cmp	r3, #6
 800f014:	d868      	bhi.n	800f0e8 <HIDS_Upkeep+0xe0>
 800f016:	009a      	lsls	r2, r3, #2
 800f018:	4b3a      	ldr	r3, [pc, #232]	@ (800f104 <HIDS_Upkeep+0xfc>)
 800f01a:	18d3      	adds	r3, r2, r3
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800f020:	4a39      	ldr	r2, [pc, #228]	@ (800f108 <HIDS_Upkeep+0x100>)
 800f022:	4b3a      	ldr	r3, [pc, #232]	@ (800f10c <HIDS_Upkeep+0x104>)
 800f024:	0019      	movs	r1, r3
 800f026:	2003      	movs	r0, #3
 800f028:	f7ff fcca 	bl	800e9c0 <CreateLine>
      break;
 800f02c:	e063      	b.n	800f0f6 <HIDS_Upkeep+0xee>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800f02e:	f7ff ffdb 	bl	800efe8 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800f032:	4b33      	ldr	r3, [pc, #204]	@ (800f100 <HIDS_Upkeep+0xf8>)
 800f034:	2201      	movs	r2, #1
 800f036:	701a      	strb	r2, [r3, #0]
      break;
 800f038:	e05d      	b.n	800f0f6 <HIDS_Upkeep+0xee>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800f03a:	f7fe fb17 	bl	800d66c <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800f03e:	f7ff fe45 	bl	800eccc <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800f042:	4b2f      	ldr	r3, [pc, #188]	@ (800f100 <HIDS_Upkeep+0xf8>)
 800f044:	2202      	movs	r2, #2
 800f046:	701a      	strb	r2, [r3, #0]
      break;
 800f048:	e055      	b.n	800f0f6 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800f04a:	4a31      	ldr	r2, [pc, #196]	@ (800f110 <HIDS_Upkeep+0x108>)
 800f04c:	4b31      	ldr	r3, [pc, #196]	@ (800f114 <HIDS_Upkeep+0x10c>)
 800f04e:	0011      	movs	r1, r2
 800f050:	0018      	movs	r0, r3
 800f052:	f7ff ff33 	bl	800eebc <HIDS_GetMeasurementValues>
 800f056:	1e03      	subs	r3, r0, #0
 800f058:	d04a      	beq.n	800f0f0 <HIDS_Upkeep+0xe8>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800f05a:	4b29      	ldr	r3, [pc, #164]	@ (800f100 <HIDS_Upkeep+0xf8>)
 800f05c:	2203      	movs	r2, #3
 800f05e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f060:	e046      	b.n	800f0f0 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800f062:	4b2c      	ldr	r3, [pc, #176]	@ (800f114 <HIDS_Upkeep+0x10c>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	1c18      	adds	r0, r3, #0
 800f068:	f7f4 f9fc 	bl	8003464 <__aeabi_f2d>
 800f06c:	0004      	movs	r4, r0
 800f06e:	000d      	movs	r5, r1
 800f070:	4b27      	ldr	r3, [pc, #156]	@ (800f110 <HIDS_Upkeep+0x108>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	1c18      	adds	r0, r3, #0
 800f076:	f7f4 f9f5 	bl	8003464 <__aeabi_f2d>
 800f07a:	0002      	movs	r2, r0
 800f07c:	000b      	movs	r3, r1
 800f07e:	4826      	ldr	r0, [pc, #152]	@ (800f118 <HIDS_Upkeep+0x110>)
 800f080:	4922      	ldr	r1, [pc, #136]	@ (800f10c <HIDS_Upkeep+0x104>)
 800f082:	9202      	str	r2, [sp, #8]
 800f084:	9303      	str	r3, [sp, #12]
 800f086:	9400      	str	r4, [sp, #0]
 800f088:	9501      	str	r5, [sp, #4]
 800f08a:	0002      	movs	r2, r0
 800f08c:	2003      	movs	r0, #3
 800f08e:	f7ff fc97 	bl	800e9c0 <CreateLine>
      setHIDS(temp, humid);
 800f092:	4b1f      	ldr	r3, [pc, #124]	@ (800f110 <HIDS_Upkeep+0x108>)
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	4b1f      	ldr	r3, [pc, #124]	@ (800f114 <HIDS_Upkeep+0x10c>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	1c19      	adds	r1, r3, #0
 800f09c:	1c10      	adds	r0, r2, #0
 800f09e:	f7f4 fb83 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 800f0a2:	f7fe fafb 	bl	800d69c <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 800f0a6:	f000 f8cf 	bl	800f248 <HAL_GetTick>
 800f0aa:	0004      	movs	r4, r0
 800f0ac:	f7f7 faf2 	bl	8006694 <Check_USB_PowerOn>
 800f0b0:	1e03      	subs	r3, r0, #0
 800f0b2:	d103      	bne.n	800f0bc <HIDS_Upkeep+0xb4>
 800f0b4:	4b19      	ldr	r3, [pc, #100]	@ (800f11c <HIDS_Upkeep+0x114>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d001      	beq.n	800f0c0 <HIDS_Upkeep+0xb8>
 800f0bc:	4b18      	ldr	r3, [pc, #96]	@ (800f120 <HIDS_Upkeep+0x118>)
 800f0be:	e001      	b.n	800f0c4 <HIDS_Upkeep+0xbc>
 800f0c0:	23fa      	movs	r3, #250	@ 0xfa
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	191a      	adds	r2, r3, r4
 800f0c6:	4b17      	ldr	r3, [pc, #92]	@ (800f124 <HIDS_Upkeep+0x11c>)
 800f0c8:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800f0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f100 <HIDS_Upkeep+0xf8>)
 800f0cc:	2206      	movs	r2, #6
 800f0ce:	701a      	strb	r2, [r3, #0]
      break;
 800f0d0:	e011      	b.n	800f0f6 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800f0d2:	4b14      	ldr	r3, [pc, #80]	@ (800f124 <HIDS_Upkeep+0x11c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	0018      	movs	r0, r3
 800f0d8:	f7ff fc1c 	bl	800e914 <TimestampIsReached>
 800f0dc:	1e03      	subs	r3, r0, #0
 800f0de:	d009      	beq.n	800f0f4 <HIDS_Upkeep+0xec>
        HIDSState = HIDS_STATE_INIT;
 800f0e0:	4b07      	ldr	r3, [pc, #28]	@ (800f100 <HIDS_Upkeep+0xf8>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f0e6:	e005      	b.n	800f0f4 <HIDS_Upkeep+0xec>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800f0e8:	4b05      	ldr	r3, [pc, #20]	@ (800f100 <HIDS_Upkeep+0xf8>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	701a      	strb	r2, [r3, #0]
      break;
 800f0ee:	e002      	b.n	800f0f6 <HIDS_Upkeep+0xee>
      break;
 800f0f0:	46c0      	nop			@ (mov r8, r8)
 800f0f2:	e000      	b.n	800f0f6 <HIDS_Upkeep+0xee>
      break;
 800f0f4:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800f0f6:	4b02      	ldr	r3, [pc, #8]	@ (800f100 <HIDS_Upkeep+0xf8>)
 800f0f8:	781b      	ldrb	r3, [r3, #0]
}
 800f0fa:	0018      	movs	r0, r3
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bdb0      	pop	{r4, r5, r7, pc}
 800f100:	20001fd8 	.word	0x20001fd8
 800f104:	08025e50 	.word	0x08025e50
 800f108:	0802590c 	.word	0x0802590c
 800f10c:	08025940 	.word	0x08025940
 800f110:	20001fb8 	.word	0x20001fb8
 800f114:	20001fb4 	.word	0x20001fb4
 800f118:	08025944 	.word	0x08025944
 800f11c:	20001c1e 	.word	0x20001c1e
 800f120:	00002710 	.word	0x00002710
 800f124:	20001fd4 	.word	0x20001fd4

0800f128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800f128:	480d      	ldr	r0, [pc, #52]	@ (800f160 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800f12a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800f12c:	f7ff f848 	bl	800e1c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f130:	480c      	ldr	r0, [pc, #48]	@ (800f164 <LoopForever+0x6>)
  ldr r1, =_edata
 800f132:	490d      	ldr	r1, [pc, #52]	@ (800f168 <LoopForever+0xa>)
  ldr r2, =_sidata
 800f134:	4a0d      	ldr	r2, [pc, #52]	@ (800f16c <LoopForever+0xe>)
  movs r3, #0
 800f136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f138:	e002      	b.n	800f140 <LoopCopyDataInit>

0800f13a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f13a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f13c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f13e:	3304      	adds	r3, #4

0800f140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f144:	d3f9      	bcc.n	800f13a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f146:	4a0a      	ldr	r2, [pc, #40]	@ (800f170 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f148:	4c0a      	ldr	r4, [pc, #40]	@ (800f174 <LoopForever+0x16>)
  movs r3, #0
 800f14a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f14c:	e001      	b.n	800f152 <LoopFillZerobss>

0800f14e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f14e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f150:	3204      	adds	r2, #4

0800f152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f154:	d3fb      	bcc.n	800f14e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f156:	f011 fb79 	bl	802084c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f15a:	f7f8 ff51 	bl	8008000 <main>

0800f15e <LoopForever>:

LoopForever:
    b LoopForever
 800f15e:	e7fe      	b.n	800f15e <LoopForever>
   ldr   r0, =_estack
 800f160:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800f164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f168:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 800f16c:	080267f0 	.word	0x080267f0
  ldr r2, =_sbss
 800f170:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 800f174:	200033e0 	.word	0x200033e0

0800f178 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f178:	e7fe      	b.n	800f178 <ADC1_COMP_IRQHandler>
	...

0800f17c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f182:	1dfb      	adds	r3, r7, #7
 800f184:	2200      	movs	r2, #0
 800f186:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800f188:	4b0b      	ldr	r3, [pc, #44]	@ (800f1b8 <HAL_Init+0x3c>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	4b0a      	ldr	r3, [pc, #40]	@ (800f1b8 <HAL_Init+0x3c>)
 800f18e:	2140      	movs	r1, #64	@ 0x40
 800f190:	430a      	orrs	r2, r1
 800f192:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f194:	2003      	movs	r0, #3
 800f196:	f000 f811 	bl	800f1bc <HAL_InitTick>
 800f19a:	1e03      	subs	r3, r0, #0
 800f19c:	d003      	beq.n	800f1a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800f19e:	1dfb      	adds	r3, r7, #7
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	701a      	strb	r2, [r3, #0]
 800f1a4:	e001      	b.n	800f1aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f1a6:	f7fe febf 	bl	800df28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f1aa:	1dfb      	adds	r3, r7, #7
 800f1ac:	781b      	ldrb	r3, [r3, #0]
}
 800f1ae:	0018      	movs	r0, r3
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	b002      	add	sp, #8
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	46c0      	nop			@ (mov r8, r8)
 800f1b8:	40022000 	.word	0x40022000

0800f1bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f1bc:	b590      	push	{r4, r7, lr}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f1c4:	4b14      	ldr	r3, [pc, #80]	@ (800f218 <HAL_InitTick+0x5c>)
 800f1c6:	681c      	ldr	r4, [r3, #0]
 800f1c8:	4b14      	ldr	r3, [pc, #80]	@ (800f21c <HAL_InitTick+0x60>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	0019      	movs	r1, r3
 800f1ce:	23fa      	movs	r3, #250	@ 0xfa
 800f1d0:	0098      	lsls	r0, r3, #2
 800f1d2:	f7f0 ffe7 	bl	80001a4 <__udivsi3>
 800f1d6:	0003      	movs	r3, r0
 800f1d8:	0019      	movs	r1, r3
 800f1da:	0020      	movs	r0, r4
 800f1dc:	f7f0 ffe2 	bl	80001a4 <__udivsi3>
 800f1e0:	0003      	movs	r3, r0
 800f1e2:	0018      	movs	r0, r3
 800f1e4:	f000 fcfd 	bl	800fbe2 <HAL_SYSTICK_Config>
 800f1e8:	1e03      	subs	r3, r0, #0
 800f1ea:	d001      	beq.n	800f1f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e00f      	b.n	800f210 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d80b      	bhi.n	800f20e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f1f6:	6879      	ldr	r1, [r7, #4]
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	425b      	negs	r3, r3
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	0018      	movs	r0, r3
 800f200:	f000 fcc6 	bl	800fb90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f204:	4b06      	ldr	r3, [pc, #24]	@ (800f220 <HAL_InitTick+0x64>)
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f20a:	2300      	movs	r3, #0
 800f20c:	e000      	b.n	800f210 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800f20e:	2301      	movs	r3, #1
}
 800f210:	0018      	movs	r0, r3
 800f212:	46bd      	mov	sp, r7
 800f214:	b003      	add	sp, #12
 800f216:	bd90      	pop	{r4, r7, pc}
 800f218:	200000d0 	.word	0x200000d0
 800f21c:	200000e4 	.word	0x200000e4
 800f220:	200000e0 	.word	0x200000e0

0800f224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f228:	4b05      	ldr	r3, [pc, #20]	@ (800f240 <HAL_IncTick+0x1c>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	001a      	movs	r2, r3
 800f22e:	4b05      	ldr	r3, [pc, #20]	@ (800f244 <HAL_IncTick+0x20>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	18d2      	adds	r2, r2, r3
 800f234:	4b03      	ldr	r3, [pc, #12]	@ (800f244 <HAL_IncTick+0x20>)
 800f236:	601a      	str	r2, [r3, #0]
}
 800f238:	46c0      	nop			@ (mov r8, r8)
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	46c0      	nop			@ (mov r8, r8)
 800f240:	200000e4 	.word	0x200000e4
 800f244:	20001fdc 	.word	0x20001fdc

0800f248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	af00      	add	r7, sp, #0
  return uwTick;
 800f24c:	4b02      	ldr	r3, [pc, #8]	@ (800f258 <HAL_GetTick+0x10>)
 800f24e:	681b      	ldr	r3, [r3, #0]
}
 800f250:	0018      	movs	r0, r3
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	46c0      	nop			@ (mov r8, r8)
 800f258:	20001fdc 	.word	0x20001fdc

0800f25c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f264:	f7ff fff0 	bl	800f248 <HAL_GetTick>
 800f268:	0003      	movs	r3, r0
 800f26a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	3301      	adds	r3, #1
 800f274:	d005      	beq.n	800f282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f276:	4b0a      	ldr	r3, [pc, #40]	@ (800f2a0 <HAL_Delay+0x44>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	001a      	movs	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	189b      	adds	r3, r3, r2
 800f280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f282:	46c0      	nop			@ (mov r8, r8)
 800f284:	f7ff ffe0 	bl	800f248 <HAL_GetTick>
 800f288:	0002      	movs	r2, r0
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	429a      	cmp	r2, r3
 800f292:	d8f7      	bhi.n	800f284 <HAL_Delay+0x28>
  {
  }
}
 800f294:	46c0      	nop			@ (mov r8, r8)
 800f296:	46c0      	nop			@ (mov r8, r8)
 800f298:	46bd      	mov	sp, r7
 800f29a:	b004      	add	sp, #16
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	46c0      	nop			@ (mov r8, r8)
 800f2a0:	200000e4 	.word	0x200000e4

0800f2a4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800f2a8:	4b04      	ldr	r3, [pc, #16]	@ (800f2bc <HAL_SuspendTick+0x18>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	4b03      	ldr	r3, [pc, #12]	@ (800f2bc <HAL_SuspendTick+0x18>)
 800f2ae:	2102      	movs	r1, #2
 800f2b0:	438a      	bics	r2, r1
 800f2b2:	601a      	str	r2, [r3, #0]
}
 800f2b4:	46c0      	nop			@ (mov r8, r8)
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	46c0      	nop			@ (mov r8, r8)
 800f2bc:	e000e010 	.word	0xe000e010

0800f2c0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800f2c4:	4b04      	ldr	r3, [pc, #16]	@ (800f2d8 <HAL_ResumeTick+0x18>)
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	4b03      	ldr	r3, [pc, #12]	@ (800f2d8 <HAL_ResumeTick+0x18>)
 800f2ca:	2102      	movs	r1, #2
 800f2cc:	430a      	orrs	r2, r1
 800f2ce:	601a      	str	r2, [r3, #0]
}
 800f2d0:	46c0      	nop			@ (mov r8, r8)
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	46c0      	nop			@ (mov r8, r8)
 800f2d8:	e000e010 	.word	0xe000e010

0800f2dc <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800f2e0:	4b02      	ldr	r3, [pc, #8]	@ (800f2ec <HAL_GetUIDw0+0x10>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
}
 800f2e4:	0018      	movs	r0, r3
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	46c0      	nop			@ (mov r8, r8)
 800f2ec:	1ff80050 	.word	0x1ff80050

0800f2f0 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800f2f4:	4b02      	ldr	r3, [pc, #8]	@ (800f300 <HAL_GetUIDw1+0x10>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
}
 800f2f8:	0018      	movs	r0, r3
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	46c0      	nop			@ (mov r8, r8)
 800f300:	1ff80054 	.word	0x1ff80054

0800f304 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800f308:	4b02      	ldr	r3, [pc, #8]	@ (800f314 <HAL_GetUIDw2+0x10>)
 800f30a:	681b      	ldr	r3, [r3, #0]
}
 800f30c:	0018      	movs	r0, r3
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	46c0      	nop			@ (mov r8, r8)
 800f314:	1ff80064 	.word	0x1ff80064

0800f318 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d101      	bne.n	800f32a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800f326:	2301      	movs	r3, #1
 800f328:	e159      	b.n	800f5de <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d10a      	bne.n	800f348 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2250      	movs	r2, #80	@ 0x50
 800f33c:	2100      	movs	r1, #0
 800f33e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	0018      	movs	r0, r3
 800f344:	f7f8 f83e 	bl	80073c4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f34c:	2210      	movs	r2, #16
 800f34e:	4013      	ands	r3, r2
 800f350:	2b10      	cmp	r3, #16
 800f352:	d005      	beq.n	800f360 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	2204      	movs	r2, #4
 800f35c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f35e:	d00b      	beq.n	800f378 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f364:	2210      	movs	r2, #16
 800f366:	431a      	orrs	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2250      	movs	r2, #80	@ 0x50
 800f370:	2100      	movs	r1, #0
 800f372:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f374:	2301      	movs	r3, #1
 800f376:	e132      	b.n	800f5de <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f37c:	4a9a      	ldr	r2, [pc, #616]	@ (800f5e8 <HAL_ADC_Init+0x2d0>)
 800f37e:	4013      	ands	r3, r2
 800f380:	2202      	movs	r2, #2
 800f382:	431a      	orrs	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	2203      	movs	r2, #3
 800f390:	4013      	ands	r3, r2
 800f392:	2b01      	cmp	r3, #1
 800f394:	d108      	bne.n	800f3a8 <HAL_ADC_Init+0x90>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2201      	movs	r2, #1
 800f39e:	4013      	ands	r3, r2
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d101      	bne.n	800f3a8 <HAL_ADC_Init+0x90>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e000      	b.n	800f3aa <HAL_ADC_Init+0x92>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d149      	bne.n	800f442 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	23c0      	movs	r3, #192	@ 0xc0
 800f3b4:	061b      	lsls	r3, r3, #24
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d00b      	beq.n	800f3d2 <HAL_ADC_Init+0xba>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	2380      	movs	r3, #128	@ 0x80
 800f3c0:	05db      	lsls	r3, r3, #23
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d005      	beq.n	800f3d2 <HAL_ADC_Init+0xba>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685a      	ldr	r2, [r3, #4]
 800f3ca:	2380      	movs	r3, #128	@ 0x80
 800f3cc:	061b      	lsls	r3, r3, #24
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d111      	bne.n	800f3f6 <HAL_ADC_Init+0xde>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	691a      	ldr	r2, [r3, #16]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	0092      	lsls	r2, r2, #2
 800f3de:	0892      	lsrs	r2, r2, #2
 800f3e0:	611a      	str	r2, [r3, #16]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	6919      	ldr	r1, [r3, #16]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	685a      	ldr	r2, [r3, #4]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	430a      	orrs	r2, r1
 800f3f2:	611a      	str	r2, [r3, #16]
 800f3f4:	e014      	b.n	800f420 <HAL_ADC_Init+0x108>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	691a      	ldr	r2, [r3, #16]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	0092      	lsls	r2, r2, #2
 800f402:	0892      	lsrs	r2, r2, #2
 800f404:	611a      	str	r2, [r3, #16]
 800f406:	4b79      	ldr	r3, [pc, #484]	@ (800f5ec <HAL_ADC_Init+0x2d4>)
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	4b78      	ldr	r3, [pc, #480]	@ (800f5ec <HAL_ADC_Init+0x2d4>)
 800f40c:	4978      	ldr	r1, [pc, #480]	@ (800f5f0 <HAL_ADC_Init+0x2d8>)
 800f40e:	400a      	ands	r2, r1
 800f410:	601a      	str	r2, [r3, #0]
 800f412:	4b76      	ldr	r3, [pc, #472]	@ (800f5ec <HAL_ADC_Init+0x2d4>)
 800f414:	6819      	ldr	r1, [r3, #0]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	685a      	ldr	r2, [r3, #4]
 800f41a:	4b74      	ldr	r3, [pc, #464]	@ (800f5ec <HAL_ADC_Init+0x2d4>)
 800f41c:	430a      	orrs	r2, r1
 800f41e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68da      	ldr	r2, [r3, #12]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2118      	movs	r1, #24
 800f42c:	438a      	bics	r2, r1
 800f42e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68d9      	ldr	r1, [r3, #12]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	689a      	ldr	r2, [r3, #8]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	430a      	orrs	r2, r1
 800f440:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800f442:	4b6a      	ldr	r3, [pc, #424]	@ (800f5ec <HAL_ADC_Init+0x2d4>)
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	4b69      	ldr	r3, [pc, #420]	@ (800f5ec <HAL_ADC_Init+0x2d4>)
 800f448:	496a      	ldr	r1, [pc, #424]	@ (800f5f4 <HAL_ADC_Init+0x2dc>)
 800f44a:	400a      	ands	r2, r1
 800f44c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800f44e:	4b67      	ldr	r3, [pc, #412]	@ (800f5ec <HAL_ADC_Init+0x2d4>)
 800f450:	6819      	ldr	r1, [r3, #0]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f456:	065a      	lsls	r2, r3, #25
 800f458:	4b64      	ldr	r3, [pc, #400]	@ (800f5ec <HAL_ADC_Init+0x2d4>)
 800f45a:	430a      	orrs	r2, r1
 800f45c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	689a      	ldr	r2, [r3, #8]
 800f464:	2380      	movs	r3, #128	@ 0x80
 800f466:	055b      	lsls	r3, r3, #21
 800f468:	4013      	ands	r3, r2
 800f46a:	d108      	bne.n	800f47e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	689a      	ldr	r2, [r3, #8]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2180      	movs	r1, #128	@ 0x80
 800f478:	0549      	lsls	r1, r1, #21
 800f47a:	430a      	orrs	r2, r1
 800f47c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	68da      	ldr	r2, [r3, #12]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	495b      	ldr	r1, [pc, #364]	@ (800f5f8 <HAL_ADC_Init+0x2e0>)
 800f48a:	400a      	ands	r2, r1
 800f48c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	68d9      	ldr	r1, [r3, #12]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d101      	bne.n	800f4a4 <HAL_ADC_Init+0x18c>
 800f4a0:	2304      	movs	r3, #4
 800f4a2:	e000      	b.n	800f4a6 <HAL_ADC_Init+0x18e>
 800f4a4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f4a6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2020      	movs	r0, #32
 800f4ac:	5c1b      	ldrb	r3, [r3, r0]
 800f4ae:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f4b0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	202c      	movs	r0, #44	@ 0x2c
 800f4b6:	5c1b      	ldrb	r3, [r3, r0]
 800f4b8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f4ba:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f4c0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	699b      	ldr	r3, [r3, #24]
 800f4c6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800f4c8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	69db      	ldr	r3, [r3, #28]
 800f4ce:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f4d0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	430a      	orrs	r2, r1
 800f4d8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4de:	23c2      	movs	r3, #194	@ 0xc2
 800f4e0:	33ff      	adds	r3, #255	@ 0xff
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d00b      	beq.n	800f4fe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	68d9      	ldr	r1, [r3, #12]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f4f4:	431a      	orrs	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	430a      	orrs	r2, r1
 800f4fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2221      	movs	r2, #33	@ 0x21
 800f502:	5c9b      	ldrb	r3, [r3, r2]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d11a      	bne.n	800f53e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2220      	movs	r2, #32
 800f50c:	5c9b      	ldrb	r3, [r3, r2]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d109      	bne.n	800f526 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	68da      	ldr	r2, [r3, #12]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2180      	movs	r1, #128	@ 0x80
 800f51e:	0249      	lsls	r1, r1, #9
 800f520:	430a      	orrs	r2, r1
 800f522:	60da      	str	r2, [r3, #12]
 800f524:	e00b      	b.n	800f53e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f52a:	2220      	movs	r2, #32
 800f52c:	431a      	orrs	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f536:	2201      	movs	r2, #1
 800f538:	431a      	orrs	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f542:	2b01      	cmp	r3, #1
 800f544:	d11f      	bne.n	800f586 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	691a      	ldr	r2, [r3, #16]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	492a      	ldr	r1, [pc, #168]	@ (800f5fc <HAL_ADC_Init+0x2e4>)
 800f552:	400a      	ands	r2, r1
 800f554:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	6919      	ldr	r1, [r3, #16]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f564:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f56a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	430a      	orrs	r2, r1
 800f572:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	691a      	ldr	r2, [r3, #16]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2101      	movs	r1, #1
 800f580:	430a      	orrs	r2, r1
 800f582:	611a      	str	r2, [r3, #16]
 800f584:	e00e      	b.n	800f5a4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	2201      	movs	r2, #1
 800f58e:	4013      	ands	r3, r2
 800f590:	2b01      	cmp	r3, #1
 800f592:	d107      	bne.n	800f5a4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	691a      	ldr	r2, [r3, #16]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2101      	movs	r1, #1
 800f5a0:	438a      	bics	r2, r1
 800f5a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	695a      	ldr	r2, [r3, #20]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2107      	movs	r1, #7
 800f5b0:	438a      	bics	r2, r1
 800f5b2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	6959      	ldr	r1, [r3, #20]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	430a      	orrs	r2, r1
 800f5c4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5d0:	2203      	movs	r2, #3
 800f5d2:	4393      	bics	r3, r2
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	431a      	orrs	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	0018      	movs	r0, r3
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	b002      	add	sp, #8
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	46c0      	nop			@ (mov r8, r8)
 800f5e8:	fffffefd 	.word	0xfffffefd
 800f5ec:	40012708 	.word	0x40012708
 800f5f0:	ffc3ffff 	.word	0xffc3ffff
 800f5f4:	fdffffff 	.word	0xfdffffff
 800f5f8:	fffe0219 	.word	0xfffe0219
 800f5fc:	fffffc03 	.word	0xfffffc03

0800f600 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f600:	b590      	push	{r4, r7, lr}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f608:	230f      	movs	r3, #15
 800f60a:	18fb      	adds	r3, r7, r3
 800f60c:	2200      	movs	r2, #0
 800f60e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	689b      	ldr	r3, [r3, #8]
 800f616:	2204      	movs	r2, #4
 800f618:	4013      	ands	r3, r2
 800f61a:	d138      	bne.n	800f68e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2250      	movs	r2, #80	@ 0x50
 800f620:	5c9b      	ldrb	r3, [r3, r2]
 800f622:	2b01      	cmp	r3, #1
 800f624:	d101      	bne.n	800f62a <HAL_ADC_Start+0x2a>
 800f626:	2302      	movs	r3, #2
 800f628:	e038      	b.n	800f69c <HAL_ADC_Start+0x9c>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2250      	movs	r2, #80	@ 0x50
 800f62e:	2101      	movs	r1, #1
 800f630:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	69db      	ldr	r3, [r3, #28]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d007      	beq.n	800f64a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f63a:	230f      	movs	r3, #15
 800f63c:	18fc      	adds	r4, r7, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	0018      	movs	r0, r3
 800f642:	f000 f95f 	bl	800f904 <ADC_Enable>
 800f646:	0003      	movs	r3, r0
 800f648:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f64a:	230f      	movs	r3, #15
 800f64c:	18fb      	adds	r3, r7, r3
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d120      	bne.n	800f696 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f658:	4a12      	ldr	r2, [pc, #72]	@ (800f6a4 <HAL_ADC_Start+0xa4>)
 800f65a:	4013      	ands	r3, r2
 800f65c:	2280      	movs	r2, #128	@ 0x80
 800f65e:	0052      	lsls	r2, r2, #1
 800f660:	431a      	orrs	r2, r3
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2200      	movs	r2, #0
 800f66a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2250      	movs	r2, #80	@ 0x50
 800f670:	2100      	movs	r1, #0
 800f672:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	221c      	movs	r2, #28
 800f67a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	689a      	ldr	r2, [r3, #8]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	2104      	movs	r1, #4
 800f688:	430a      	orrs	r2, r1
 800f68a:	609a      	str	r2, [r3, #8]
 800f68c:	e003      	b.n	800f696 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f68e:	230f      	movs	r3, #15
 800f690:	18fb      	adds	r3, r7, r3
 800f692:	2202      	movs	r2, #2
 800f694:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f696:	230f      	movs	r3, #15
 800f698:	18fb      	adds	r3, r7, r3
 800f69a:	781b      	ldrb	r3, [r3, #0]
}
 800f69c:	0018      	movs	r0, r3
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	b005      	add	sp, #20
 800f6a2:	bd90      	pop	{r4, r7, pc}
 800f6a4:	fffff0fe 	.word	0xfffff0fe

0800f6a8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	695b      	ldr	r3, [r3, #20]
 800f6be:	2b08      	cmp	r3, #8
 800f6c0:	d102      	bne.n	800f6c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f6c2:	2308      	movs	r3, #8
 800f6c4:	60fb      	str	r3, [r7, #12]
 800f6c6:	e014      	b.n	800f6f2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	4013      	ands	r3, r2
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d10b      	bne.n	800f6ee <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6da:	2220      	movs	r2, #32
 800f6dc:	431a      	orrs	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2250      	movs	r2, #80	@ 0x50
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e072      	b.n	800f7d4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f6ee:	230c      	movs	r3, #12
 800f6f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f6f2:	f7ff fda9 	bl	800f248 <HAL_GetTick>
 800f6f6:	0003      	movs	r3, r0
 800f6f8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f6fa:	e01f      	b.n	800f73c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	3301      	adds	r3, #1
 800f700:	d01c      	beq.n	800f73c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d007      	beq.n	800f718 <HAL_ADC_PollForConversion+0x70>
 800f708:	f7ff fd9e 	bl	800f248 <HAL_GetTick>
 800f70c:	0002      	movs	r2, r0
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	683a      	ldr	r2, [r7, #0]
 800f714:	429a      	cmp	r2, r3
 800f716:	d211      	bcs.n	800f73c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	68fa      	ldr	r2, [r7, #12]
 800f720:	4013      	ands	r3, r2
 800f722:	d10b      	bne.n	800f73c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f728:	2204      	movs	r2, #4
 800f72a:	431a      	orrs	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2250      	movs	r2, #80	@ 0x50
 800f734:	2100      	movs	r1, #0
 800f736:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f738:	2303      	movs	r3, #3
 800f73a:	e04b      	b.n	800f7d4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	4013      	ands	r3, r2
 800f746:	d0d9      	beq.n	800f6fc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f74c:	2280      	movs	r2, #128	@ 0x80
 800f74e:	0092      	lsls	r2, r2, #2
 800f750:	431a      	orrs	r2, r3
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	68da      	ldr	r2, [r3, #12]
 800f75c:	23c0      	movs	r3, #192	@ 0xc0
 800f75e:	011b      	lsls	r3, r3, #4
 800f760:	4013      	ands	r3, r2
 800f762:	d12e      	bne.n	800f7c2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2220      	movs	r2, #32
 800f768:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d129      	bne.n	800f7c2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2208      	movs	r2, #8
 800f776:	4013      	ands	r3, r2
 800f778:	2b08      	cmp	r3, #8
 800f77a:	d122      	bne.n	800f7c2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	2204      	movs	r2, #4
 800f784:	4013      	ands	r3, r2
 800f786:	d110      	bne.n	800f7aa <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	685a      	ldr	r2, [r3, #4]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	210c      	movs	r1, #12
 800f794:	438a      	bics	r2, r1
 800f796:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f79c:	4a0f      	ldr	r2, [pc, #60]	@ (800f7dc <HAL_ADC_PollForConversion+0x134>)
 800f79e:	4013      	ands	r3, r2
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	431a      	orrs	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	655a      	str	r2, [r3, #84]	@ 0x54
 800f7a8:	e00b      	b.n	800f7c2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7ae:	2220      	movs	r2, #32
 800f7b0:	431a      	orrs	r2, r3
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	431a      	orrs	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	699b      	ldr	r3, [r3, #24]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d103      	bne.n	800f7d2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	220c      	movs	r2, #12
 800f7d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	b004      	add	sp, #16
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	fffffefe 	.word	0xfffffefe

0800f7e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f7ee:	0018      	movs	r0, r3
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	b002      	add	sp, #8
 800f7f4:	bd80      	pop	{r7, pc}
	...

0800f7f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2250      	movs	r2, #80	@ 0x50
 800f806:	5c9b      	ldrb	r3, [r3, r2]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d101      	bne.n	800f810 <HAL_ADC_ConfigChannel+0x18>
 800f80c:	2302      	movs	r3, #2
 800f80e:	e06c      	b.n	800f8ea <HAL_ADC_ConfigChannel+0xf2>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2250      	movs	r2, #80	@ 0x50
 800f814:	2101      	movs	r1, #1
 800f816:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	2204      	movs	r2, #4
 800f820:	4013      	ands	r3, r2
 800f822:	d00b      	beq.n	800f83c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f828:	2220      	movs	r2, #32
 800f82a:	431a      	orrs	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2250      	movs	r2, #80	@ 0x50
 800f834:	2100      	movs	r1, #0
 800f836:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f838:	2301      	movs	r3, #1
 800f83a:	e056      	b.n	800f8ea <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	4a2c      	ldr	r2, [pc, #176]	@ (800f8f4 <HAL_ADC_ConfigChannel+0xfc>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d028      	beq.n	800f898 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	035b      	lsls	r3, r3, #13
 800f852:	0b5a      	lsrs	r2, r3, #13
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	430a      	orrs	r2, r1
 800f85a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	2380      	movs	r3, #128	@ 0x80
 800f862:	02db      	lsls	r3, r3, #11
 800f864:	4013      	ands	r3, r2
 800f866:	d009      	beq.n	800f87c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f868:	4b23      	ldr	r3, [pc, #140]	@ (800f8f8 <HAL_ADC_ConfigChannel+0x100>)
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	4b22      	ldr	r3, [pc, #136]	@ (800f8f8 <HAL_ADC_ConfigChannel+0x100>)
 800f86e:	2180      	movs	r1, #128	@ 0x80
 800f870:	0409      	lsls	r1, r1, #16
 800f872:	430a      	orrs	r2, r1
 800f874:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f876:	200a      	movs	r0, #10
 800f878:	f000 f8ac 	bl	800f9d4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	2380      	movs	r3, #128	@ 0x80
 800f882:	029b      	lsls	r3, r3, #10
 800f884:	4013      	ands	r3, r2
 800f886:	d02b      	beq.n	800f8e0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f888:	4b1b      	ldr	r3, [pc, #108]	@ (800f8f8 <HAL_ADC_ConfigChannel+0x100>)
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	4b1a      	ldr	r3, [pc, #104]	@ (800f8f8 <HAL_ADC_ConfigChannel+0x100>)
 800f88e:	2180      	movs	r1, #128	@ 0x80
 800f890:	03c9      	lsls	r1, r1, #15
 800f892:	430a      	orrs	r2, r1
 800f894:	601a      	str	r2, [r3, #0]
 800f896:	e023      	b.n	800f8e0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	035b      	lsls	r3, r3, #13
 800f8a4:	0b5b      	lsrs	r3, r3, #13
 800f8a6:	43d9      	mvns	r1, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	400a      	ands	r2, r1
 800f8ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	2380      	movs	r3, #128	@ 0x80
 800f8b6:	02db      	lsls	r3, r3, #11
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	d005      	beq.n	800f8c8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f8bc:	4b0e      	ldr	r3, [pc, #56]	@ (800f8f8 <HAL_ADC_ConfigChannel+0x100>)
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	4b0d      	ldr	r3, [pc, #52]	@ (800f8f8 <HAL_ADC_ConfigChannel+0x100>)
 800f8c2:	490e      	ldr	r1, [pc, #56]	@ (800f8fc <HAL_ADC_ConfigChannel+0x104>)
 800f8c4:	400a      	ands	r2, r1
 800f8c6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	2380      	movs	r3, #128	@ 0x80
 800f8ce:	029b      	lsls	r3, r3, #10
 800f8d0:	4013      	ands	r3, r2
 800f8d2:	d005      	beq.n	800f8e0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f8d4:	4b08      	ldr	r3, [pc, #32]	@ (800f8f8 <HAL_ADC_ConfigChannel+0x100>)
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	4b07      	ldr	r3, [pc, #28]	@ (800f8f8 <HAL_ADC_ConfigChannel+0x100>)
 800f8da:	4909      	ldr	r1, [pc, #36]	@ (800f900 <HAL_ADC_ConfigChannel+0x108>)
 800f8dc:	400a      	ands	r2, r1
 800f8de:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2250      	movs	r2, #80	@ 0x50
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	0018      	movs	r0, r3
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	b002      	add	sp, #8
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	46c0      	nop			@ (mov r8, r8)
 800f8f4:	00001001 	.word	0x00001001
 800f8f8:	40012708 	.word	0x40012708
 800f8fc:	ff7fffff 	.word	0xff7fffff
 800f900:	ffbfffff 	.word	0xffbfffff

0800f904 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f90c:	2300      	movs	r3, #0
 800f90e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	2203      	movs	r2, #3
 800f918:	4013      	ands	r3, r2
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d108      	bne.n	800f930 <ADC_Enable+0x2c>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2201      	movs	r2, #1
 800f926:	4013      	ands	r3, r2
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d101      	bne.n	800f930 <ADC_Enable+0x2c>
 800f92c:	2301      	movs	r3, #1
 800f92e:	e000      	b.n	800f932 <ADC_Enable+0x2e>
 800f930:	2300      	movs	r3, #0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d146      	bne.n	800f9c4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	4a24      	ldr	r2, [pc, #144]	@ (800f9d0 <ADC_Enable+0xcc>)
 800f93e:	4013      	ands	r3, r2
 800f940:	d00d      	beq.n	800f95e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f946:	2210      	movs	r2, #16
 800f948:	431a      	orrs	r2, r3
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f952:	2201      	movs	r2, #1
 800f954:	431a      	orrs	r2, r3
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	e033      	b.n	800f9c6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	689a      	ldr	r2, [r3, #8]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2101      	movs	r1, #1
 800f96a:	430a      	orrs	r2, r1
 800f96c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f96e:	2001      	movs	r0, #1
 800f970:	f000 f830 	bl	800f9d4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f974:	f7ff fc68 	bl	800f248 <HAL_GetTick>
 800f978:	0003      	movs	r3, r0
 800f97a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f97c:	e01b      	b.n	800f9b6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f97e:	f7ff fc63 	bl	800f248 <HAL_GetTick>
 800f982:	0002      	movs	r2, r0
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	2b0a      	cmp	r3, #10
 800f98a:	d914      	bls.n	800f9b6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2201      	movs	r2, #1
 800f994:	4013      	ands	r3, r2
 800f996:	2b01      	cmp	r3, #1
 800f998:	d00d      	beq.n	800f9b6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f99e:	2210      	movs	r2, #16
 800f9a0:	431a      	orrs	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	431a      	orrs	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e007      	b.n	800f9c6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	4013      	ands	r3, r2
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d1dc      	bne.n	800f97e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f9c4:	2300      	movs	r3, #0
}
 800f9c6:	0018      	movs	r0, r3
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	b004      	add	sp, #16
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	46c0      	nop			@ (mov r8, r8)
 800f9d0:	80000017 	.word	0x80000017

0800f9d4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f9dc:	4b0b      	ldr	r3, [pc, #44]	@ (800fa0c <ADC_DelayMicroSecond+0x38>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	490b      	ldr	r1, [pc, #44]	@ (800fa10 <ADC_DelayMicroSecond+0x3c>)
 800f9e2:	0018      	movs	r0, r3
 800f9e4:	f7f0 fbde 	bl	80001a4 <__udivsi3>
 800f9e8:	0003      	movs	r3, r0
 800f9ea:	001a      	movs	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	4353      	muls	r3, r2
 800f9f0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f9f2:	e002      	b.n	800f9fa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d1f9      	bne.n	800f9f4 <ADC_DelayMicroSecond+0x20>
  }
}
 800fa00:	46c0      	nop			@ (mov r8, r8)
 800fa02:	46c0      	nop			@ (mov r8, r8)
 800fa04:	46bd      	mov	sp, r7
 800fa06:	b004      	add	sp, #16
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	46c0      	nop			@ (mov r8, r8)
 800fa0c:	200000d0 	.word	0x200000d0
 800fa10:	000f4240 	.word	0x000f4240

0800fa14 <__NVIC_EnableIRQ>:
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	0002      	movs	r2, r0
 800fa1c:	1dfb      	adds	r3, r7, #7
 800fa1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800fa20:	1dfb      	adds	r3, r7, #7
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	2b7f      	cmp	r3, #127	@ 0x7f
 800fa26:	d809      	bhi.n	800fa3c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fa28:	1dfb      	adds	r3, r7, #7
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	001a      	movs	r2, r3
 800fa2e:	231f      	movs	r3, #31
 800fa30:	401a      	ands	r2, r3
 800fa32:	4b04      	ldr	r3, [pc, #16]	@ (800fa44 <__NVIC_EnableIRQ+0x30>)
 800fa34:	2101      	movs	r1, #1
 800fa36:	4091      	lsls	r1, r2
 800fa38:	000a      	movs	r2, r1
 800fa3a:	601a      	str	r2, [r3, #0]
}
 800fa3c:	46c0      	nop			@ (mov r8, r8)
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	b002      	add	sp, #8
 800fa42:	bd80      	pop	{r7, pc}
 800fa44:	e000e100 	.word	0xe000e100

0800fa48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fa48:	b590      	push	{r4, r7, lr}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	0002      	movs	r2, r0
 800fa50:	6039      	str	r1, [r7, #0]
 800fa52:	1dfb      	adds	r3, r7, #7
 800fa54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800fa56:	1dfb      	adds	r3, r7, #7
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800fa5c:	d828      	bhi.n	800fab0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fa5e:	4a2f      	ldr	r2, [pc, #188]	@ (800fb1c <__NVIC_SetPriority+0xd4>)
 800fa60:	1dfb      	adds	r3, r7, #7
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	b25b      	sxtb	r3, r3
 800fa66:	089b      	lsrs	r3, r3, #2
 800fa68:	33c0      	adds	r3, #192	@ 0xc0
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	589b      	ldr	r3, [r3, r2]
 800fa6e:	1dfa      	adds	r2, r7, #7
 800fa70:	7812      	ldrb	r2, [r2, #0]
 800fa72:	0011      	movs	r1, r2
 800fa74:	2203      	movs	r2, #3
 800fa76:	400a      	ands	r2, r1
 800fa78:	00d2      	lsls	r2, r2, #3
 800fa7a:	21ff      	movs	r1, #255	@ 0xff
 800fa7c:	4091      	lsls	r1, r2
 800fa7e:	000a      	movs	r2, r1
 800fa80:	43d2      	mvns	r2, r2
 800fa82:	401a      	ands	r2, r3
 800fa84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	019b      	lsls	r3, r3, #6
 800fa8a:	22ff      	movs	r2, #255	@ 0xff
 800fa8c:	401a      	ands	r2, r3
 800fa8e:	1dfb      	adds	r3, r7, #7
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	0018      	movs	r0, r3
 800fa94:	2303      	movs	r3, #3
 800fa96:	4003      	ands	r3, r0
 800fa98:	00db      	lsls	r3, r3, #3
 800fa9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fa9c:	481f      	ldr	r0, [pc, #124]	@ (800fb1c <__NVIC_SetPriority+0xd4>)
 800fa9e:	1dfb      	adds	r3, r7, #7
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	b25b      	sxtb	r3, r3
 800faa4:	089b      	lsrs	r3, r3, #2
 800faa6:	430a      	orrs	r2, r1
 800faa8:	33c0      	adds	r3, #192	@ 0xc0
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800faae:	e031      	b.n	800fb14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fab0:	4a1b      	ldr	r2, [pc, #108]	@ (800fb20 <__NVIC_SetPriority+0xd8>)
 800fab2:	1dfb      	adds	r3, r7, #7
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	0019      	movs	r1, r3
 800fab8:	230f      	movs	r3, #15
 800faba:	400b      	ands	r3, r1
 800fabc:	3b08      	subs	r3, #8
 800fabe:	089b      	lsrs	r3, r3, #2
 800fac0:	3306      	adds	r3, #6
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	18d3      	adds	r3, r2, r3
 800fac6:	3304      	adds	r3, #4
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	1dfa      	adds	r2, r7, #7
 800facc:	7812      	ldrb	r2, [r2, #0]
 800face:	0011      	movs	r1, r2
 800fad0:	2203      	movs	r2, #3
 800fad2:	400a      	ands	r2, r1
 800fad4:	00d2      	lsls	r2, r2, #3
 800fad6:	21ff      	movs	r1, #255	@ 0xff
 800fad8:	4091      	lsls	r1, r2
 800fada:	000a      	movs	r2, r1
 800fadc:	43d2      	mvns	r2, r2
 800fade:	401a      	ands	r2, r3
 800fae0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	019b      	lsls	r3, r3, #6
 800fae6:	22ff      	movs	r2, #255	@ 0xff
 800fae8:	401a      	ands	r2, r3
 800faea:	1dfb      	adds	r3, r7, #7
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	0018      	movs	r0, r3
 800faf0:	2303      	movs	r3, #3
 800faf2:	4003      	ands	r3, r0
 800faf4:	00db      	lsls	r3, r3, #3
 800faf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800faf8:	4809      	ldr	r0, [pc, #36]	@ (800fb20 <__NVIC_SetPriority+0xd8>)
 800fafa:	1dfb      	adds	r3, r7, #7
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	001c      	movs	r4, r3
 800fb00:	230f      	movs	r3, #15
 800fb02:	4023      	ands	r3, r4
 800fb04:	3b08      	subs	r3, #8
 800fb06:	089b      	lsrs	r3, r3, #2
 800fb08:	430a      	orrs	r2, r1
 800fb0a:	3306      	adds	r3, #6
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	18c3      	adds	r3, r0, r3
 800fb10:	3304      	adds	r3, #4
 800fb12:	601a      	str	r2, [r3, #0]
}
 800fb14:	46c0      	nop			@ (mov r8, r8)
 800fb16:	46bd      	mov	sp, r7
 800fb18:	b003      	add	sp, #12
 800fb1a:	bd90      	pop	{r4, r7, pc}
 800fb1c:	e000e100 	.word	0xe000e100
 800fb20:	e000ed00 	.word	0xe000ed00

0800fb24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800fb28:	f3bf 8f4f 	dsb	sy
}
 800fb2c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fb2e:	4b04      	ldr	r3, [pc, #16]	@ (800fb40 <__NVIC_SystemReset+0x1c>)
 800fb30:	4a04      	ldr	r2, [pc, #16]	@ (800fb44 <__NVIC_SystemReset+0x20>)
 800fb32:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fb34:	f3bf 8f4f 	dsb	sy
}
 800fb38:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800fb3a:	46c0      	nop			@ (mov r8, r8)
 800fb3c:	e7fd      	b.n	800fb3a <__NVIC_SystemReset+0x16>
 800fb3e:	46c0      	nop			@ (mov r8, r8)
 800fb40:	e000ed00 	.word	0xe000ed00
 800fb44:	05fa0004 	.word	0x05fa0004

0800fb48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	1e5a      	subs	r2, r3, #1
 800fb54:	2380      	movs	r3, #128	@ 0x80
 800fb56:	045b      	lsls	r3, r3, #17
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d301      	bcc.n	800fb60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e010      	b.n	800fb82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fb60:	4b0a      	ldr	r3, [pc, #40]	@ (800fb8c <SysTick_Config+0x44>)
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	3a01      	subs	r2, #1
 800fb66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fb68:	2301      	movs	r3, #1
 800fb6a:	425b      	negs	r3, r3
 800fb6c:	2103      	movs	r1, #3
 800fb6e:	0018      	movs	r0, r3
 800fb70:	f7ff ff6a 	bl	800fa48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fb74:	4b05      	ldr	r3, [pc, #20]	@ (800fb8c <SysTick_Config+0x44>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fb7a:	4b04      	ldr	r3, [pc, #16]	@ (800fb8c <SysTick_Config+0x44>)
 800fb7c:	2207      	movs	r2, #7
 800fb7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	0018      	movs	r0, r3
 800fb84:	46bd      	mov	sp, r7
 800fb86:	b002      	add	sp, #8
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	46c0      	nop			@ (mov r8, r8)
 800fb8c:	e000e010 	.word	0xe000e010

0800fb90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60b9      	str	r1, [r7, #8]
 800fb98:	607a      	str	r2, [r7, #4]
 800fb9a:	210f      	movs	r1, #15
 800fb9c:	187b      	adds	r3, r7, r1
 800fb9e:	1c02      	adds	r2, r0, #0
 800fba0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800fba2:	68ba      	ldr	r2, [r7, #8]
 800fba4:	187b      	adds	r3, r7, r1
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	b25b      	sxtb	r3, r3
 800fbaa:	0011      	movs	r1, r2
 800fbac:	0018      	movs	r0, r3
 800fbae:	f7ff ff4b 	bl	800fa48 <__NVIC_SetPriority>
}
 800fbb2:	46c0      	nop			@ (mov r8, r8)
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	b004      	add	sp, #16
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b082      	sub	sp, #8
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	0002      	movs	r2, r0
 800fbc2:	1dfb      	adds	r3, r7, #7
 800fbc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fbc6:	1dfb      	adds	r3, r7, #7
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	b25b      	sxtb	r3, r3
 800fbcc:	0018      	movs	r0, r3
 800fbce:	f7ff ff21 	bl	800fa14 <__NVIC_EnableIRQ>
}
 800fbd2:	46c0      	nop			@ (mov r8, r8)
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	b002      	add	sp, #8
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800fbde:	f7ff ffa1 	bl	800fb24 <__NVIC_SystemReset>

0800fbe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b082      	sub	sp, #8
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	0018      	movs	r0, r3
 800fbee:	f7ff ffab 	bl	800fb48 <SysTick_Config>
 800fbf2:	0003      	movs	r3, r0
}
 800fbf4:	0018      	movs	r0, r3
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	b002      	add	sp, #8
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d101      	bne.n	800fc0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e061      	b.n	800fcd2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4a32      	ldr	r2, [pc, #200]	@ (800fcdc <HAL_DMA_Init+0xe0>)
 800fc14:	4694      	mov	ip, r2
 800fc16:	4463      	add	r3, ip
 800fc18:	2114      	movs	r1, #20
 800fc1a:	0018      	movs	r0, r3
 800fc1c:	f7f0 fac2 	bl	80001a4 <__udivsi3>
 800fc20:	0003      	movs	r3, r0
 800fc22:	009a      	lsls	r2, r3, #2
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	4a2d      	ldr	r2, [pc, #180]	@ (800fce0 <HAL_DMA_Init+0xe4>)
 800fc2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2225      	movs	r2, #37	@ 0x25
 800fc32:	2102      	movs	r1, #2
 800fc34:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	4a28      	ldr	r2, [pc, #160]	@ (800fce4 <HAL_DMA_Init+0xe8>)
 800fc42:	4013      	ands	r3, r2
 800fc44:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800fc4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fc5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fc66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6a1b      	ldr	r3, [r3, #32]
 800fc6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	4313      	orrs	r3, r2
 800fc72:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	689a      	ldr	r2, [r3, #8]
 800fc80:	2380      	movs	r3, #128	@ 0x80
 800fc82:	01db      	lsls	r3, r3, #7
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d018      	beq.n	800fcba <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800fc88:	4b17      	ldr	r3, [pc, #92]	@ (800fce8 <HAL_DMA_Init+0xec>)
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc90:	211c      	movs	r1, #28
 800fc92:	400b      	ands	r3, r1
 800fc94:	210f      	movs	r1, #15
 800fc96:	4099      	lsls	r1, r3
 800fc98:	000b      	movs	r3, r1
 800fc9a:	43d9      	mvns	r1, r3
 800fc9c:	4b12      	ldr	r3, [pc, #72]	@ (800fce8 <HAL_DMA_Init+0xec>)
 800fc9e:	400a      	ands	r2, r1
 800fca0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800fca2:	4b11      	ldr	r3, [pc, #68]	@ (800fce8 <HAL_DMA_Init+0xec>)
 800fca4:	6819      	ldr	r1, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	685a      	ldr	r2, [r3, #4]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcae:	201c      	movs	r0, #28
 800fcb0:	4003      	ands	r3, r0
 800fcb2:	409a      	lsls	r2, r3
 800fcb4:	4b0c      	ldr	r3, [pc, #48]	@ (800fce8 <HAL_DMA_Init+0xec>)
 800fcb6:	430a      	orrs	r2, r1
 800fcb8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2225      	movs	r2, #37	@ 0x25
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2224      	movs	r2, #36	@ 0x24
 800fccc:	2100      	movs	r1, #0
 800fcce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	0018      	movs	r0, r3
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	b004      	add	sp, #16
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	46c0      	nop			@ (mov r8, r8)
 800fcdc:	bffdfff8 	.word	0xbffdfff8
 800fce0:	40020000 	.word	0x40020000
 800fce4:	ffff800f 	.word	0xffff800f
 800fce8:	400200a8 	.word	0x400200a8

0800fcec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b086      	sub	sp, #24
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	607a      	str	r2, [r7, #4]
 800fcf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fcfa:	2317      	movs	r3, #23
 800fcfc:	18fb      	adds	r3, r7, r3
 800fcfe:	2200      	movs	r2, #0
 800fd00:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2224      	movs	r2, #36	@ 0x24
 800fd06:	5c9b      	ldrb	r3, [r3, r2]
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d101      	bne.n	800fd10 <HAL_DMA_Start_IT+0x24>
 800fd0c:	2302      	movs	r3, #2
 800fd0e:	e04f      	b.n	800fdb0 <HAL_DMA_Start_IT+0xc4>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2224      	movs	r2, #36	@ 0x24
 800fd14:	2101      	movs	r1, #1
 800fd16:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2225      	movs	r2, #37	@ 0x25
 800fd1c:	5c9b      	ldrb	r3, [r3, r2]
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d13a      	bne.n	800fd9a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2225      	movs	r2, #37	@ 0x25
 800fd28:	2102      	movs	r1, #2
 800fd2a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2101      	movs	r1, #1
 800fd3e:	438a      	bics	r2, r1
 800fd40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	68b9      	ldr	r1, [r7, #8]
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f000 f976 	bl	801003a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d008      	beq.n	800fd68 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	210e      	movs	r1, #14
 800fd62:	430a      	orrs	r2, r1
 800fd64:	601a      	str	r2, [r3, #0]
 800fd66:	e00f      	b.n	800fd88 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2104      	movs	r1, #4
 800fd74:	438a      	bics	r2, r1
 800fd76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	210a      	movs	r1, #10
 800fd84:	430a      	orrs	r2, r1
 800fd86:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2101      	movs	r1, #1
 800fd94:	430a      	orrs	r2, r1
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	e007      	b.n	800fdaa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2224      	movs	r2, #36	@ 0x24
 800fd9e:	2100      	movs	r1, #0
 800fda0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800fda2:	2317      	movs	r3, #23
 800fda4:	18fb      	adds	r3, r7, r3
 800fda6:	2202      	movs	r2, #2
 800fda8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800fdaa:	2317      	movs	r3, #23
 800fdac:	18fb      	adds	r3, r7, r3
 800fdae:	781b      	ldrb	r3, [r3, #0]
}
 800fdb0:	0018      	movs	r0, r3
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	b006      	add	sp, #24
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdc0:	230f      	movs	r3, #15
 800fdc2:	18fb      	adds	r3, r7, r3
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2225      	movs	r2, #37	@ 0x25
 800fdcc:	5c9b      	ldrb	r3, [r3, r2]
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	2b02      	cmp	r3, #2
 800fdd2:	d008      	beq.n	800fde6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2204      	movs	r2, #4
 800fdd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2224      	movs	r2, #36	@ 0x24
 800fdde:	2100      	movs	r1, #0
 800fde0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	e024      	b.n	800fe30 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	210e      	movs	r1, #14
 800fdf2:	438a      	bics	r2, r1
 800fdf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2101      	movs	r1, #1
 800fe02:	438a      	bics	r2, r1
 800fe04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe0a:	221c      	movs	r2, #28
 800fe0c:	401a      	ands	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe12:	2101      	movs	r1, #1
 800fe14:	4091      	lsls	r1, r2
 800fe16:	000a      	movs	r2, r1
 800fe18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2225      	movs	r2, #37	@ 0x25
 800fe1e:	2101      	movs	r1, #1
 800fe20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2224      	movs	r2, #36	@ 0x24
 800fe26:	2100      	movs	r1, #0
 800fe28:	5499      	strb	r1, [r3, r2]

    return status;
 800fe2a:	230f      	movs	r3, #15
 800fe2c:	18fb      	adds	r3, r7, r3
 800fe2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fe30:	0018      	movs	r0, r3
 800fe32:	46bd      	mov	sp, r7
 800fe34:	b004      	add	sp, #16
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe40:	210f      	movs	r1, #15
 800fe42:	187b      	adds	r3, r7, r1
 800fe44:	2200      	movs	r2, #0
 800fe46:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2225      	movs	r2, #37	@ 0x25
 800fe4c:	5c9b      	ldrb	r3, [r3, r2]
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	2b02      	cmp	r3, #2
 800fe52:	d006      	beq.n	800fe62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2204      	movs	r2, #4
 800fe58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800fe5a:	187b      	adds	r3, r7, r1
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	701a      	strb	r2, [r3, #0]
 800fe60:	e02a      	b.n	800feb8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	210e      	movs	r1, #14
 800fe6e:	438a      	bics	r2, r1
 800fe70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2101      	movs	r1, #1
 800fe7e:	438a      	bics	r2, r1
 800fe80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe86:	221c      	movs	r2, #28
 800fe88:	401a      	ands	r2, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe8e:	2101      	movs	r1, #1
 800fe90:	4091      	lsls	r1, r2
 800fe92:	000a      	movs	r2, r1
 800fe94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2225      	movs	r2, #37	@ 0x25
 800fe9a:	2101      	movs	r1, #1
 800fe9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2224      	movs	r2, #36	@ 0x24
 800fea2:	2100      	movs	r1, #0
 800fea4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d004      	beq.n	800feb8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	0010      	movs	r0, r2
 800feb6:	4798      	blx	r3
    }
  }
  return status;
 800feb8:	230f      	movs	r3, #15
 800feba:	18fb      	adds	r3, r7, r3
 800febc:	781b      	ldrb	r3, [r3, #0]
}
 800febe:	0018      	movs	r0, r3
 800fec0:	46bd      	mov	sp, r7
 800fec2:	b004      	add	sp, #16
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b084      	sub	sp, #16
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fee2:	221c      	movs	r2, #28
 800fee4:	4013      	ands	r3, r2
 800fee6:	2204      	movs	r2, #4
 800fee8:	409a      	lsls	r2, r3
 800feea:	0013      	movs	r3, r2
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	4013      	ands	r3, r2
 800fef0:	d026      	beq.n	800ff40 <HAL_DMA_IRQHandler+0x7a>
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	2204      	movs	r2, #4
 800fef6:	4013      	ands	r3, r2
 800fef8:	d022      	beq.n	800ff40 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2220      	movs	r2, #32
 800ff02:	4013      	ands	r3, r2
 800ff04:	d107      	bne.n	800ff16 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2104      	movs	r1, #4
 800ff12:	438a      	bics	r2, r1
 800ff14:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff1a:	221c      	movs	r2, #28
 800ff1c:	401a      	ands	r2, r3
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff22:	2104      	movs	r1, #4
 800ff24:	4091      	lsls	r1, r2
 800ff26:	000a      	movs	r2, r1
 800ff28:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d100      	bne.n	800ff34 <HAL_DMA_IRQHandler+0x6e>
 800ff32:	e071      	b.n	8010018 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	0010      	movs	r0, r2
 800ff3c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800ff3e:	e06b      	b.n	8010018 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff44:	221c      	movs	r2, #28
 800ff46:	4013      	ands	r3, r2
 800ff48:	2202      	movs	r2, #2
 800ff4a:	409a      	lsls	r2, r3
 800ff4c:	0013      	movs	r3, r2
 800ff4e:	68fa      	ldr	r2, [r7, #12]
 800ff50:	4013      	ands	r3, r2
 800ff52:	d02d      	beq.n	800ffb0 <HAL_DMA_IRQHandler+0xea>
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	2202      	movs	r2, #2
 800ff58:	4013      	ands	r3, r2
 800ff5a:	d029      	beq.n	800ffb0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2220      	movs	r2, #32
 800ff64:	4013      	ands	r3, r2
 800ff66:	d10b      	bne.n	800ff80 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	210a      	movs	r1, #10
 800ff74:	438a      	bics	r2, r1
 800ff76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2225      	movs	r2, #37	@ 0x25
 800ff7c:	2101      	movs	r1, #1
 800ff7e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff84:	221c      	movs	r2, #28
 800ff86:	401a      	ands	r2, r3
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff8c:	2102      	movs	r1, #2
 800ff8e:	4091      	lsls	r1, r2
 800ff90:	000a      	movs	r2, r1
 800ff92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2224      	movs	r2, #36	@ 0x24
 800ff98:	2100      	movs	r1, #0
 800ff9a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d039      	beq.n	8010018 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	0010      	movs	r0, r2
 800ffac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800ffae:	e033      	b.n	8010018 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffb4:	221c      	movs	r2, #28
 800ffb6:	4013      	ands	r3, r2
 800ffb8:	2208      	movs	r2, #8
 800ffba:	409a      	lsls	r2, r3
 800ffbc:	0013      	movs	r3, r2
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	d02a      	beq.n	801001a <HAL_DMA_IRQHandler+0x154>
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	2208      	movs	r2, #8
 800ffc8:	4013      	ands	r3, r2
 800ffca:	d026      	beq.n	801001a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	210e      	movs	r1, #14
 800ffd8:	438a      	bics	r2, r1
 800ffda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffe0:	221c      	movs	r2, #28
 800ffe2:	401a      	ands	r2, r3
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffe8:	2101      	movs	r1, #1
 800ffea:	4091      	lsls	r1, r2
 800ffec:	000a      	movs	r2, r1
 800ffee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2201      	movs	r2, #1
 800fff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2225      	movs	r2, #37	@ 0x25
 800fffa:	2101      	movs	r1, #1
 800fffc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2224      	movs	r2, #36	@ 0x24
 8010002:	2100      	movs	r1, #0
 8010004:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801000a:	2b00      	cmp	r3, #0
 801000c:	d005      	beq.n	801001a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	0010      	movs	r0, r2
 8010016:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8010018:	46c0      	nop			@ (mov r8, r8)
 801001a:	46c0      	nop			@ (mov r8, r8)
}
 801001c:	46bd      	mov	sp, r7
 801001e:	b004      	add	sp, #16
 8010020:	bd80      	pop	{r7, pc}

08010022 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8010022:	b580      	push	{r7, lr}
 8010024:	b082      	sub	sp, #8
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2225      	movs	r2, #37	@ 0x25
 801002e:	5c9b      	ldrb	r3, [r3, r2]
 8010030:	b2db      	uxtb	r3, r3
}
 8010032:	0018      	movs	r0, r3
 8010034:	46bd      	mov	sp, r7
 8010036:	b002      	add	sp, #8
 8010038:	bd80      	pop	{r7, pc}

0801003a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b084      	sub	sp, #16
 801003e:	af00      	add	r7, sp, #0
 8010040:	60f8      	str	r0, [r7, #12]
 8010042:	60b9      	str	r1, [r7, #8]
 8010044:	607a      	str	r2, [r7, #4]
 8010046:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801004c:	221c      	movs	r2, #28
 801004e:	401a      	ands	r2, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010054:	2101      	movs	r1, #1
 8010056:	4091      	lsls	r1, r2
 8010058:	000a      	movs	r2, r1
 801005a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	683a      	ldr	r2, [r7, #0]
 8010062:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	2b10      	cmp	r3, #16
 801006a:	d108      	bne.n	801007e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801007c:	e007      	b.n	801008e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	60da      	str	r2, [r3, #12]
}
 801008e:	46c0      	nop			@ (mov r8, r8)
 8010090:	46bd      	mov	sp, r7
 8010092:	b004      	add	sp, #16
 8010094:	bd80      	pop	{r7, pc}
	...

08010098 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80100a0:	f7ff f8d2 	bl	800f248 <HAL_GetTick>
 80100a4:	0003      	movs	r3, r0
 80100a6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80100a8:	e00f      	b.n	80100ca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	3301      	adds	r3, #1
 80100ae:	d00c      	beq.n	80100ca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d007      	beq.n	80100c6 <FLASH_WaitForLastOperation+0x2e>
 80100b6:	f7ff f8c7 	bl	800f248 <HAL_GetTick>
 80100ba:	0002      	movs	r2, r0
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	1ad3      	subs	r3, r2, r3
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d201      	bcs.n	80100ca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80100c6:	2303      	movs	r3, #3
 80100c8:	e052      	b.n	8010170 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80100ca:	4b2b      	ldr	r3, [pc, #172]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 80100cc:	699b      	ldr	r3, [r3, #24]
 80100ce:	2201      	movs	r2, #1
 80100d0:	4013      	ands	r3, r2
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d0e9      	beq.n	80100aa <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80100d6:	4b28      	ldr	r3, [pc, #160]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 80100d8:	699b      	ldr	r3, [r3, #24]
 80100da:	2202      	movs	r2, #2
 80100dc:	4013      	ands	r3, r2
 80100de:	2b02      	cmp	r3, #2
 80100e0:	d102      	bne.n	80100e8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80100e2:	4b25      	ldr	r3, [pc, #148]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 80100e4:	2202      	movs	r2, #2
 80100e6:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80100e8:	4b23      	ldr	r3, [pc, #140]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 80100ea:	699a      	ldr	r2, [r3, #24]
 80100ec:	2380      	movs	r3, #128	@ 0x80
 80100ee:	005b      	lsls	r3, r3, #1
 80100f0:	401a      	ands	r2, r3
 80100f2:	2380      	movs	r3, #128	@ 0x80
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d035      	beq.n	8010166 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80100fa:	4b1f      	ldr	r3, [pc, #124]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 80100fc:	699a      	ldr	r2, [r3, #24]
 80100fe:	2380      	movs	r3, #128	@ 0x80
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8010104:	2380      	movs	r3, #128	@ 0x80
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	429a      	cmp	r2, r3
 801010a:	d02c      	beq.n	8010166 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 801010c:	4b1a      	ldr	r3, [pc, #104]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 801010e:	699a      	ldr	r2, [r3, #24]
 8010110:	2380      	movs	r3, #128	@ 0x80
 8010112:	00db      	lsls	r3, r3, #3
 8010114:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8010116:	2380      	movs	r3, #128	@ 0x80
 8010118:	00db      	lsls	r3, r3, #3
 801011a:	429a      	cmp	r2, r3
 801011c:	d023      	beq.n	8010166 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801011e:	4b16      	ldr	r3, [pc, #88]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 8010120:	699a      	ldr	r2, [r3, #24]
 8010122:	2380      	movs	r3, #128	@ 0x80
 8010124:	011b      	lsls	r3, r3, #4
 8010126:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8010128:	2380      	movs	r3, #128	@ 0x80
 801012a:	011b      	lsls	r3, r3, #4
 801012c:	429a      	cmp	r2, r3
 801012e:	d01a      	beq.n	8010166 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8010130:	4b11      	ldr	r3, [pc, #68]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 8010132:	699a      	ldr	r2, [r3, #24]
 8010134:	2380      	movs	r3, #128	@ 0x80
 8010136:	019b      	lsls	r3, r3, #6
 8010138:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801013a:	2380      	movs	r3, #128	@ 0x80
 801013c:	019b      	lsls	r3, r3, #6
 801013e:	429a      	cmp	r2, r3
 8010140:	d011      	beq.n	8010166 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8010142:	4b0d      	ldr	r3, [pc, #52]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 8010144:	699a      	ldr	r2, [r3, #24]
 8010146:	2380      	movs	r3, #128	@ 0x80
 8010148:	029b      	lsls	r3, r3, #10
 801014a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 801014c:	2380      	movs	r3, #128	@ 0x80
 801014e:	029b      	lsls	r3, r3, #10
 8010150:	429a      	cmp	r2, r3
 8010152:	d008      	beq.n	8010166 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8010154:	4b08      	ldr	r3, [pc, #32]	@ (8010178 <FLASH_WaitForLastOperation+0xe0>)
 8010156:	699a      	ldr	r2, [r3, #24]
 8010158:	2380      	movs	r3, #128	@ 0x80
 801015a:	025b      	lsls	r3, r3, #9
 801015c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801015e:	2380      	movs	r3, #128	@ 0x80
 8010160:	025b      	lsls	r3, r3, #9
 8010162:	429a      	cmp	r2, r3
 8010164:	d103      	bne.n	801016e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8010166:	f000 f809 	bl	801017c <FLASH_SetErrorCode>
    return HAL_ERROR;
 801016a:	2301      	movs	r3, #1
 801016c:	e000      	b.n	8010170 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 801016e:	2300      	movs	r3, #0
}
 8010170:	0018      	movs	r0, r3
 8010172:	46bd      	mov	sp, r7
 8010174:	b004      	add	sp, #16
 8010176:	bd80      	pop	{r7, pc}
 8010178:	40022000 	.word	0x40022000

0801017c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8010182:	2300      	movs	r3, #0
 8010184:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010186:	4b49      	ldr	r3, [pc, #292]	@ (80102ac <FLASH_SetErrorCode+0x130>)
 8010188:	699a      	ldr	r2, [r3, #24]
 801018a:	2380      	movs	r3, #128	@ 0x80
 801018c:	005b      	lsls	r3, r3, #1
 801018e:	401a      	ands	r2, r3
 8010190:	2380      	movs	r3, #128	@ 0x80
 8010192:	005b      	lsls	r3, r3, #1
 8010194:	429a      	cmp	r2, r3
 8010196:	d10a      	bne.n	80101ae <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010198:	4b45      	ldr	r3, [pc, #276]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 801019a:	695b      	ldr	r3, [r3, #20]
 801019c:	2202      	movs	r2, #2
 801019e:	431a      	orrs	r2, r3
 80101a0:	4b43      	ldr	r3, [pc, #268]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 80101a2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2280      	movs	r2, #128	@ 0x80
 80101a8:	0052      	lsls	r2, r2, #1
 80101aa:	4313      	orrs	r3, r2
 80101ac:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80101ae:	4b3f      	ldr	r3, [pc, #252]	@ (80102ac <FLASH_SetErrorCode+0x130>)
 80101b0:	699a      	ldr	r2, [r3, #24]
 80101b2:	2380      	movs	r3, #128	@ 0x80
 80101b4:	009b      	lsls	r3, r3, #2
 80101b6:	401a      	ands	r2, r3
 80101b8:	2380      	movs	r3, #128	@ 0x80
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	429a      	cmp	r2, r3
 80101be:	d10a      	bne.n	80101d6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80101c0:	4b3b      	ldr	r3, [pc, #236]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 80101c2:	695b      	ldr	r3, [r3, #20]
 80101c4:	2201      	movs	r2, #1
 80101c6:	431a      	orrs	r2, r3
 80101c8:	4b39      	ldr	r3, [pc, #228]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 80101ca:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2280      	movs	r2, #128	@ 0x80
 80101d0:	0092      	lsls	r2, r2, #2
 80101d2:	4313      	orrs	r3, r2
 80101d4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80101d6:	4b35      	ldr	r3, [pc, #212]	@ (80102ac <FLASH_SetErrorCode+0x130>)
 80101d8:	699a      	ldr	r2, [r3, #24]
 80101da:	2380      	movs	r3, #128	@ 0x80
 80101dc:	00db      	lsls	r3, r3, #3
 80101de:	401a      	ands	r2, r3
 80101e0:	2380      	movs	r3, #128	@ 0x80
 80101e2:	00db      	lsls	r3, r3, #3
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d10a      	bne.n	80101fe <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80101e8:	4b31      	ldr	r3, [pc, #196]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 80101ea:	695b      	ldr	r3, [r3, #20]
 80101ec:	2208      	movs	r2, #8
 80101ee:	431a      	orrs	r2, r3
 80101f0:	4b2f      	ldr	r3, [pc, #188]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 80101f2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2280      	movs	r2, #128	@ 0x80
 80101f8:	00d2      	lsls	r2, r2, #3
 80101fa:	4313      	orrs	r3, r2
 80101fc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80101fe:	4b2b      	ldr	r3, [pc, #172]	@ (80102ac <FLASH_SetErrorCode+0x130>)
 8010200:	699a      	ldr	r2, [r3, #24]
 8010202:	2380      	movs	r3, #128	@ 0x80
 8010204:	011b      	lsls	r3, r3, #4
 8010206:	401a      	ands	r2, r3
 8010208:	2380      	movs	r3, #128	@ 0x80
 801020a:	011b      	lsls	r3, r3, #4
 801020c:	429a      	cmp	r2, r3
 801020e:	d10a      	bne.n	8010226 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8010210:	4b27      	ldr	r3, [pc, #156]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 8010212:	695b      	ldr	r3, [r3, #20]
 8010214:	2204      	movs	r2, #4
 8010216:	431a      	orrs	r2, r3
 8010218:	4b25      	ldr	r3, [pc, #148]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 801021a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2280      	movs	r2, #128	@ 0x80
 8010220:	0112      	lsls	r2, r2, #4
 8010222:	4313      	orrs	r3, r2
 8010224:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8010226:	4b21      	ldr	r3, [pc, #132]	@ (80102ac <FLASH_SetErrorCode+0x130>)
 8010228:	699a      	ldr	r2, [r3, #24]
 801022a:	2380      	movs	r3, #128	@ 0x80
 801022c:	019b      	lsls	r3, r3, #6
 801022e:	401a      	ands	r2, r3
 8010230:	2380      	movs	r3, #128	@ 0x80
 8010232:	019b      	lsls	r3, r3, #6
 8010234:	429a      	cmp	r2, r3
 8010236:	d10a      	bne.n	801024e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8010238:	4b1d      	ldr	r3, [pc, #116]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 801023a:	695b      	ldr	r3, [r3, #20]
 801023c:	2210      	movs	r2, #16
 801023e:	431a      	orrs	r2, r3
 8010240:	4b1b      	ldr	r3, [pc, #108]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 8010242:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2280      	movs	r2, #128	@ 0x80
 8010248:	0192      	lsls	r2, r2, #6
 801024a:	4313      	orrs	r3, r2
 801024c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 801024e:	4b17      	ldr	r3, [pc, #92]	@ (80102ac <FLASH_SetErrorCode+0x130>)
 8010250:	699a      	ldr	r2, [r3, #24]
 8010252:	2380      	movs	r3, #128	@ 0x80
 8010254:	029b      	lsls	r3, r3, #10
 8010256:	401a      	ands	r2, r3
 8010258:	2380      	movs	r3, #128	@ 0x80
 801025a:	029b      	lsls	r3, r3, #10
 801025c:	429a      	cmp	r2, r3
 801025e:	d109      	bne.n	8010274 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8010260:	4b13      	ldr	r3, [pc, #76]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 8010262:	695b      	ldr	r3, [r3, #20]
 8010264:	2220      	movs	r2, #32
 8010266:	431a      	orrs	r2, r3
 8010268:	4b11      	ldr	r3, [pc, #68]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 801026a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2220      	movs	r2, #32
 8010270:	4313      	orrs	r3, r2
 8010272:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8010274:	4b0d      	ldr	r3, [pc, #52]	@ (80102ac <FLASH_SetErrorCode+0x130>)
 8010276:	699a      	ldr	r2, [r3, #24]
 8010278:	2380      	movs	r3, #128	@ 0x80
 801027a:	025b      	lsls	r3, r3, #9
 801027c:	401a      	ands	r2, r3
 801027e:	2380      	movs	r3, #128	@ 0x80
 8010280:	025b      	lsls	r3, r3, #9
 8010282:	429a      	cmp	r2, r3
 8010284:	d10a      	bne.n	801029c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8010286:	4b0a      	ldr	r3, [pc, #40]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 8010288:	695b      	ldr	r3, [r3, #20]
 801028a:	2240      	movs	r2, #64	@ 0x40
 801028c:	431a      	orrs	r2, r3
 801028e:	4b08      	ldr	r3, [pc, #32]	@ (80102b0 <FLASH_SetErrorCode+0x134>)
 8010290:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2280      	movs	r2, #128	@ 0x80
 8010296:	0252      	lsls	r2, r2, #9
 8010298:	4313      	orrs	r3, r2
 801029a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 801029c:	4b03      	ldr	r3, [pc, #12]	@ (80102ac <FLASH_SetErrorCode+0x130>)
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	619a      	str	r2, [r3, #24]
}  
 80102a2:	46c0      	nop			@ (mov r8, r8)
 80102a4:	46bd      	mov	sp, r7
 80102a6:	b002      	add	sp, #8
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	46c0      	nop			@ (mov r8, r8)
 80102ac:	40022000 	.word	0x40022000
 80102b0:	20001fe0 	.word	0x20001fe0

080102b4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b084      	sub	sp, #16
 80102b8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80102ba:	4b12      	ldr	r3, [pc, #72]	@ (8010304 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	2201      	movs	r2, #1
 80102c0:	4013      	ands	r3, r2
 80102c2:	d019      	beq.n	80102f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102c4:	f3ef 8310 	mrs	r3, PRIMASK
 80102c8:	607b      	str	r3, [r7, #4]
  return(result);
 80102ca:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80102cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80102ce:	b672      	cpsid	i
}
 80102d0:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80102d2:	4b0c      	ldr	r3, [pc, #48]	@ (8010304 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80102d4:	4a0c      	ldr	r2, [pc, #48]	@ (8010308 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80102d6:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80102d8:	4b0a      	ldr	r3, [pc, #40]	@ (8010304 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80102da:	4a0c      	ldr	r2, [pc, #48]	@ (801030c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80102dc:	60da      	str	r2, [r3, #12]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	f383 8810 	msr	PRIMASK, r3
}
 80102e8:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80102ea:	4b06      	ldr	r3, [pc, #24]	@ (8010304 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	2201      	movs	r2, #1
 80102f0:	4013      	ands	r3, r2
 80102f2:	d001      	beq.n	80102f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80102f4:	2301      	movs	r3, #1
 80102f6:	e000      	b.n	80102fa <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80102f8:	2300      	movs	r3, #0
}
 80102fa:	0018      	movs	r0, r3
 80102fc:	46bd      	mov	sp, r7
 80102fe:	b004      	add	sp, #16
 8010300:	bd80      	pop	{r7, pc}
 8010302:	46c0      	nop			@ (mov r8, r8)
 8010304:	40022000 	.word	0x40022000
 8010308:	89abcdef 	.word	0x89abcdef
 801030c:	02030405 	.word	0x02030405

08010310 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8010314:	4b04      	ldr	r3, [pc, #16]	@ (8010328 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8010316:	685a      	ldr	r2, [r3, #4]
 8010318:	4b03      	ldr	r3, [pc, #12]	@ (8010328 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801031a:	2101      	movs	r1, #1
 801031c:	430a      	orrs	r2, r1
 801031e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8010320:	2300      	movs	r3, #0
}
 8010322:	0018      	movs	r0, r3
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	40022000 	.word	0x40022000

0801032c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 801032c:	b5b0      	push	{r4, r5, r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010334:	250f      	movs	r5, #15
 8010336:	197b      	adds	r3, r7, r5
 8010338:	2200      	movs	r2, #0
 801033a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801033c:	197c      	adds	r4, r7, r5
 801033e:	4b0f      	ldr	r3, [pc, #60]	@ (801037c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010340:	0018      	movs	r0, r3
 8010342:	f7ff fea9 	bl	8010098 <FLASH_WaitForLastOperation>
 8010346:	0003      	movs	r3, r0
 8010348:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801034a:	0029      	movs	r1, r5
 801034c:	187b      	adds	r3, r7, r1
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d10c      	bne.n	801036e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010354:	4b0a      	ldr	r3, [pc, #40]	@ (8010380 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8010356:	2200      	movs	r2, #0
 8010358:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2200      	movs	r2, #0
 801035e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010360:	187c      	adds	r4, r7, r1
 8010362:	4b06      	ldr	r3, [pc, #24]	@ (801037c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010364:	0018      	movs	r0, r3
 8010366:	f7ff fe97 	bl	8010098 <FLASH_WaitForLastOperation>
 801036a:	0003      	movs	r3, r0
 801036c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 801036e:	230f      	movs	r3, #15
 8010370:	18fb      	adds	r3, r7, r3
 8010372:	781b      	ldrb	r3, [r3, #0]
}  
 8010374:	0018      	movs	r0, r3
 8010376:	46bd      	mov	sp, r7
 8010378:	b004      	add	sp, #16
 801037a:	bdb0      	pop	{r4, r5, r7, pc}
 801037c:	0000c350 	.word	0x0000c350
 8010380:	20001fe0 	.word	0x20001fe0

08010384 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8010384:	b5b0      	push	{r4, r5, r7, lr}
 8010386:	b086      	sub	sp, #24
 8010388:	af00      	add	r7, sp, #0
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	60b9      	str	r1, [r7, #8]
 801038e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010390:	2317      	movs	r3, #23
 8010392:	18fb      	adds	r3, r7, r3
 8010394:	2201      	movs	r2, #1
 8010396:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010398:	4b24      	ldr	r3, [pc, #144]	@ (801042c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801039a:	7c1b      	ldrb	r3, [r3, #16]
 801039c:	2b01      	cmp	r3, #1
 801039e:	d101      	bne.n	80103a4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80103a0:	2302      	movs	r3, #2
 80103a2:	e03e      	b.n	8010422 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80103a4:	4b21      	ldr	r3, [pc, #132]	@ (801042c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80103a6:	2201      	movs	r2, #1
 80103a8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80103aa:	2517      	movs	r5, #23
 80103ac:	197c      	adds	r4, r7, r5
 80103ae:	4b20      	ldr	r3, [pc, #128]	@ (8010430 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80103b0:	0018      	movs	r0, r3
 80103b2:	f7ff fe71 	bl	8010098 <FLASH_WaitForLastOperation>
 80103b6:	0003      	movs	r3, r0
 80103b8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80103ba:	197b      	adds	r3, r7, r5
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d129      	bne.n	8010416 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80103c2:	4b1a      	ldr	r3, [pc, #104]	@ (801042c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b02      	cmp	r3, #2
 80103cc:	d103      	bne.n	80103d6 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	e013      	b.n	80103fe <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d104      	bne.n	80103e6 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	b292      	uxth	r2, r2
 80103e2:	801a      	strh	r2, [r3, #0]
 80103e4:	e00b      	b.n	80103fe <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d104      	bne.n	80103f6 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	b2d2      	uxtb	r2, r2
 80103f2:	701a      	strb	r2, [r3, #0]
 80103f4:	e003      	b.n	80103fe <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80103f6:	2317      	movs	r3, #23
 80103f8:	18fb      	adds	r3, r7, r3
 80103fa:	2201      	movs	r2, #1
 80103fc:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80103fe:	2217      	movs	r2, #23
 8010400:	18bb      	adds	r3, r7, r2
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d106      	bne.n	8010416 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010408:	18bc      	adds	r4, r7, r2
 801040a:	4b09      	ldr	r3, [pc, #36]	@ (8010430 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 801040c:	0018      	movs	r0, r3
 801040e:	f7ff fe43 	bl	8010098 <FLASH_WaitForLastOperation>
 8010412:	0003      	movs	r3, r0
 8010414:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010416:	4b05      	ldr	r3, [pc, #20]	@ (801042c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010418:	2200      	movs	r2, #0
 801041a:	741a      	strb	r2, [r3, #16]

  return status;
 801041c:	2317      	movs	r3, #23
 801041e:	18fb      	adds	r3, r7, r3
 8010420:	781b      	ldrb	r3, [r3, #0]
}
 8010422:	0018      	movs	r0, r3
 8010424:	46bd      	mov	sp, r7
 8010426:	b006      	add	sp, #24
 8010428:	bdb0      	pop	{r4, r5, r7, pc}
 801042a:	46c0      	nop			@ (mov r8, r8)
 801042c:	20001fe0 	.word	0x20001fe0
 8010430:	0000c350 	.word	0x0000c350

08010434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801043e:	2300      	movs	r3, #0
 8010440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010442:	2300      	movs	r3, #0
 8010444:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8010446:	2300      	movs	r3, #0
 8010448:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801044a:	e155      	b.n	80106f8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2101      	movs	r1, #1
 8010452:	697a      	ldr	r2, [r7, #20]
 8010454:	4091      	lsls	r1, r2
 8010456:	000a      	movs	r2, r1
 8010458:	4013      	ands	r3, r2
 801045a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d100      	bne.n	8010464 <HAL_GPIO_Init+0x30>
 8010462:	e146      	b.n	80106f2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	2203      	movs	r2, #3
 801046a:	4013      	ands	r3, r2
 801046c:	2b01      	cmp	r3, #1
 801046e:	d005      	beq.n	801047c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	2203      	movs	r2, #3
 8010476:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010478:	2b02      	cmp	r3, #2
 801047a:	d130      	bne.n	80104de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	689b      	ldr	r3, [r3, #8]
 8010480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	005b      	lsls	r3, r3, #1
 8010486:	2203      	movs	r2, #3
 8010488:	409a      	lsls	r2, r3
 801048a:	0013      	movs	r3, r2
 801048c:	43da      	mvns	r2, r3
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	4013      	ands	r3, r2
 8010492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	68da      	ldr	r2, [r3, #12]
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	005b      	lsls	r3, r3, #1
 801049c:	409a      	lsls	r2, r3
 801049e:	0013      	movs	r3, r2
 80104a0:	693a      	ldr	r2, [r7, #16]
 80104a2:	4313      	orrs	r3, r2
 80104a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	693a      	ldr	r2, [r7, #16]
 80104aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80104b2:	2201      	movs	r2, #1
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	409a      	lsls	r2, r3
 80104b8:	0013      	movs	r3, r2
 80104ba:	43da      	mvns	r2, r3
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	4013      	ands	r3, r2
 80104c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	091b      	lsrs	r3, r3, #4
 80104c8:	2201      	movs	r2, #1
 80104ca:	401a      	ands	r2, r3
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	409a      	lsls	r2, r3
 80104d0:	0013      	movs	r3, r2
 80104d2:	693a      	ldr	r2, [r7, #16]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	2203      	movs	r2, #3
 80104e4:	4013      	ands	r3, r2
 80104e6:	2b03      	cmp	r3, #3
 80104e8:	d017      	beq.n	801051a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	005b      	lsls	r3, r3, #1
 80104f4:	2203      	movs	r2, #3
 80104f6:	409a      	lsls	r2, r3
 80104f8:	0013      	movs	r3, r2
 80104fa:	43da      	mvns	r2, r3
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	4013      	ands	r3, r2
 8010500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	689a      	ldr	r2, [r3, #8]
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	005b      	lsls	r3, r3, #1
 801050a:	409a      	lsls	r2, r3
 801050c:	0013      	movs	r3, r2
 801050e:	693a      	ldr	r2, [r7, #16]
 8010510:	4313      	orrs	r3, r2
 8010512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	693a      	ldr	r2, [r7, #16]
 8010518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	2203      	movs	r2, #3
 8010520:	4013      	ands	r3, r2
 8010522:	2b02      	cmp	r3, #2
 8010524:	d123      	bne.n	801056e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	08da      	lsrs	r2, r3, #3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	3208      	adds	r2, #8
 801052e:	0092      	lsls	r2, r2, #2
 8010530:	58d3      	ldr	r3, [r2, r3]
 8010532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	2207      	movs	r2, #7
 8010538:	4013      	ands	r3, r2
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	220f      	movs	r2, #15
 801053e:	409a      	lsls	r2, r3
 8010540:	0013      	movs	r3, r2
 8010542:	43da      	mvns	r2, r3
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	4013      	ands	r3, r2
 8010548:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	691a      	ldr	r2, [r3, #16]
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	2107      	movs	r1, #7
 8010552:	400b      	ands	r3, r1
 8010554:	009b      	lsls	r3, r3, #2
 8010556:	409a      	lsls	r2, r3
 8010558:	0013      	movs	r3, r2
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	4313      	orrs	r3, r2
 801055e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	08da      	lsrs	r2, r3, #3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3208      	adds	r2, #8
 8010568:	0092      	lsls	r2, r2, #2
 801056a:	6939      	ldr	r1, [r7, #16]
 801056c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	005b      	lsls	r3, r3, #1
 8010578:	2203      	movs	r2, #3
 801057a:	409a      	lsls	r2, r3
 801057c:	0013      	movs	r3, r2
 801057e:	43da      	mvns	r2, r3
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	4013      	ands	r3, r2
 8010584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	2203      	movs	r2, #3
 801058c:	401a      	ands	r2, r3
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	005b      	lsls	r3, r3, #1
 8010592:	409a      	lsls	r2, r3
 8010594:	0013      	movs	r3, r2
 8010596:	693a      	ldr	r2, [r7, #16]
 8010598:	4313      	orrs	r3, r2
 801059a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	693a      	ldr	r2, [r7, #16]
 80105a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	685a      	ldr	r2, [r3, #4]
 80105a6:	23c0      	movs	r3, #192	@ 0xc0
 80105a8:	029b      	lsls	r3, r3, #10
 80105aa:	4013      	ands	r3, r2
 80105ac:	d100      	bne.n	80105b0 <HAL_GPIO_Init+0x17c>
 80105ae:	e0a0      	b.n	80106f2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80105b0:	4b57      	ldr	r3, [pc, #348]	@ (8010710 <HAL_GPIO_Init+0x2dc>)
 80105b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80105b4:	4b56      	ldr	r3, [pc, #344]	@ (8010710 <HAL_GPIO_Init+0x2dc>)
 80105b6:	2101      	movs	r1, #1
 80105b8:	430a      	orrs	r2, r1
 80105ba:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80105bc:	4a55      	ldr	r2, [pc, #340]	@ (8010714 <HAL_GPIO_Init+0x2e0>)
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	089b      	lsrs	r3, r3, #2
 80105c2:	3302      	adds	r3, #2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	589b      	ldr	r3, [r3, r2]
 80105c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	2203      	movs	r2, #3
 80105ce:	4013      	ands	r3, r2
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	220f      	movs	r2, #15
 80105d4:	409a      	lsls	r2, r3
 80105d6:	0013      	movs	r3, r2
 80105d8:	43da      	mvns	r2, r3
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	4013      	ands	r3, r2
 80105de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	23a0      	movs	r3, #160	@ 0xa0
 80105e4:	05db      	lsls	r3, r3, #23
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d01f      	beq.n	801062a <HAL_GPIO_Init+0x1f6>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4a4a      	ldr	r2, [pc, #296]	@ (8010718 <HAL_GPIO_Init+0x2e4>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d019      	beq.n	8010626 <HAL_GPIO_Init+0x1f2>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4a49      	ldr	r2, [pc, #292]	@ (801071c <HAL_GPIO_Init+0x2e8>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d013      	beq.n	8010622 <HAL_GPIO_Init+0x1ee>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4a48      	ldr	r2, [pc, #288]	@ (8010720 <HAL_GPIO_Init+0x2ec>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d00d      	beq.n	801061e <HAL_GPIO_Init+0x1ea>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4a47      	ldr	r2, [pc, #284]	@ (8010724 <HAL_GPIO_Init+0x2f0>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d007      	beq.n	801061a <HAL_GPIO_Init+0x1e6>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4a46      	ldr	r2, [pc, #280]	@ (8010728 <HAL_GPIO_Init+0x2f4>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d101      	bne.n	8010616 <HAL_GPIO_Init+0x1e2>
 8010612:	2305      	movs	r3, #5
 8010614:	e00a      	b.n	801062c <HAL_GPIO_Init+0x1f8>
 8010616:	2306      	movs	r3, #6
 8010618:	e008      	b.n	801062c <HAL_GPIO_Init+0x1f8>
 801061a:	2304      	movs	r3, #4
 801061c:	e006      	b.n	801062c <HAL_GPIO_Init+0x1f8>
 801061e:	2303      	movs	r3, #3
 8010620:	e004      	b.n	801062c <HAL_GPIO_Init+0x1f8>
 8010622:	2302      	movs	r3, #2
 8010624:	e002      	b.n	801062c <HAL_GPIO_Init+0x1f8>
 8010626:	2301      	movs	r3, #1
 8010628:	e000      	b.n	801062c <HAL_GPIO_Init+0x1f8>
 801062a:	2300      	movs	r3, #0
 801062c:	697a      	ldr	r2, [r7, #20]
 801062e:	2103      	movs	r1, #3
 8010630:	400a      	ands	r2, r1
 8010632:	0092      	lsls	r2, r2, #2
 8010634:	4093      	lsls	r3, r2
 8010636:	693a      	ldr	r2, [r7, #16]
 8010638:	4313      	orrs	r3, r2
 801063a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801063c:	4935      	ldr	r1, [pc, #212]	@ (8010714 <HAL_GPIO_Init+0x2e0>)
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	089b      	lsrs	r3, r3, #2
 8010642:	3302      	adds	r3, #2
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	693a      	ldr	r2, [r7, #16]
 8010648:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801064a:	4b38      	ldr	r3, [pc, #224]	@ (801072c <HAL_GPIO_Init+0x2f8>)
 801064c:	689b      	ldr	r3, [r3, #8]
 801064e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	43da      	mvns	r2, r3
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	4013      	ands	r3, r2
 8010658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	685a      	ldr	r2, [r3, #4]
 801065e:	2380      	movs	r3, #128	@ 0x80
 8010660:	035b      	lsls	r3, r3, #13
 8010662:	4013      	ands	r3, r2
 8010664:	d003      	beq.n	801066e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8010666:	693a      	ldr	r2, [r7, #16]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	4313      	orrs	r3, r2
 801066c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 801066e:	4b2f      	ldr	r3, [pc, #188]	@ (801072c <HAL_GPIO_Init+0x2f8>)
 8010670:	693a      	ldr	r2, [r7, #16]
 8010672:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010674:	4b2d      	ldr	r3, [pc, #180]	@ (801072c <HAL_GPIO_Init+0x2f8>)
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	43da      	mvns	r2, r3
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	4013      	ands	r3, r2
 8010682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	2380      	movs	r3, #128	@ 0x80
 801068a:	039b      	lsls	r3, r3, #14
 801068c:	4013      	ands	r3, r2
 801068e:	d003      	beq.n	8010698 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8010690:	693a      	ldr	r2, [r7, #16]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	4313      	orrs	r3, r2
 8010696:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010698:	4b24      	ldr	r3, [pc, #144]	@ (801072c <HAL_GPIO_Init+0x2f8>)
 801069a:	693a      	ldr	r2, [r7, #16]
 801069c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801069e:	4b23      	ldr	r3, [pc, #140]	@ (801072c <HAL_GPIO_Init+0x2f8>)
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	43da      	mvns	r2, r3
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	4013      	ands	r3, r2
 80106ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	685a      	ldr	r2, [r3, #4]
 80106b2:	2380      	movs	r3, #128	@ 0x80
 80106b4:	029b      	lsls	r3, r3, #10
 80106b6:	4013      	ands	r3, r2
 80106b8:	d003      	beq.n	80106c2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80106ba:	693a      	ldr	r2, [r7, #16]
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	4313      	orrs	r3, r2
 80106c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80106c2:	4b1a      	ldr	r3, [pc, #104]	@ (801072c <HAL_GPIO_Init+0x2f8>)
 80106c4:	693a      	ldr	r2, [r7, #16]
 80106c6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80106c8:	4b18      	ldr	r3, [pc, #96]	@ (801072c <HAL_GPIO_Init+0x2f8>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	43da      	mvns	r2, r3
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	4013      	ands	r3, r2
 80106d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	2380      	movs	r3, #128	@ 0x80
 80106de:	025b      	lsls	r3, r3, #9
 80106e0:	4013      	ands	r3, r2
 80106e2:	d003      	beq.n	80106ec <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80106e4:	693a      	ldr	r2, [r7, #16]
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	4313      	orrs	r3, r2
 80106ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80106ec:	4b0f      	ldr	r3, [pc, #60]	@ (801072c <HAL_GPIO_Init+0x2f8>)
 80106ee:	693a      	ldr	r2, [r7, #16]
 80106f0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	3301      	adds	r3, #1
 80106f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	40da      	lsrs	r2, r3
 8010700:	1e13      	subs	r3, r2, #0
 8010702:	d000      	beq.n	8010706 <HAL_GPIO_Init+0x2d2>
 8010704:	e6a2      	b.n	801044c <HAL_GPIO_Init+0x18>
  }
}
 8010706:	46c0      	nop			@ (mov r8, r8)
 8010708:	46c0      	nop			@ (mov r8, r8)
 801070a:	46bd      	mov	sp, r7
 801070c:	b006      	add	sp, #24
 801070e:	bd80      	pop	{r7, pc}
 8010710:	40021000 	.word	0x40021000
 8010714:	40010000 	.word	0x40010000
 8010718:	50000400 	.word	0x50000400
 801071c:	50000800 	.word	0x50000800
 8010720:	50000c00 	.word	0x50000c00
 8010724:	50001000 	.word	0x50001000
 8010728:	50001c00 	.word	0x50001c00
 801072c:	40010400 	.word	0x40010400

08010730 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	000a      	movs	r2, r1
 801073a:	1cbb      	adds	r3, r7, #2
 801073c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	691b      	ldr	r3, [r3, #16]
 8010742:	1cba      	adds	r2, r7, #2
 8010744:	8812      	ldrh	r2, [r2, #0]
 8010746:	4013      	ands	r3, r2
 8010748:	d004      	beq.n	8010754 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801074a:	230f      	movs	r3, #15
 801074c:	18fb      	adds	r3, r7, r3
 801074e:	2201      	movs	r2, #1
 8010750:	701a      	strb	r2, [r3, #0]
 8010752:	e003      	b.n	801075c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010754:	230f      	movs	r3, #15
 8010756:	18fb      	adds	r3, r7, r3
 8010758:	2200      	movs	r2, #0
 801075a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 801075c:	230f      	movs	r3, #15
 801075e:	18fb      	adds	r3, r7, r3
 8010760:	781b      	ldrb	r3, [r3, #0]
}
 8010762:	0018      	movs	r0, r3
 8010764:	46bd      	mov	sp, r7
 8010766:	b004      	add	sp, #16
 8010768:	bd80      	pop	{r7, pc}

0801076a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801076a:	b580      	push	{r7, lr}
 801076c:	b082      	sub	sp, #8
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	0008      	movs	r0, r1
 8010774:	0011      	movs	r1, r2
 8010776:	1cbb      	adds	r3, r7, #2
 8010778:	1c02      	adds	r2, r0, #0
 801077a:	801a      	strh	r2, [r3, #0]
 801077c:	1c7b      	adds	r3, r7, #1
 801077e:	1c0a      	adds	r2, r1, #0
 8010780:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010782:	1c7b      	adds	r3, r7, #1
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d004      	beq.n	8010794 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 801078a:	1cbb      	adds	r3, r7, #2
 801078c:	881a      	ldrh	r2, [r3, #0]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8010792:	e003      	b.n	801079c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8010794:	1cbb      	adds	r3, r7, #2
 8010796:	881a      	ldrh	r2, [r3, #0]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801079c:	46c0      	nop			@ (mov r8, r8)
 801079e:	46bd      	mov	sp, r7
 80107a0:	b002      	add	sp, #8
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	0002      	movs	r2, r0
 80107ac:	1dbb      	adds	r3, r7, #6
 80107ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80107b0:	4b09      	ldr	r3, [pc, #36]	@ (80107d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80107b2:	695b      	ldr	r3, [r3, #20]
 80107b4:	1dba      	adds	r2, r7, #6
 80107b6:	8812      	ldrh	r2, [r2, #0]
 80107b8:	4013      	ands	r3, r2
 80107ba:	d008      	beq.n	80107ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80107bc:	4b06      	ldr	r3, [pc, #24]	@ (80107d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80107be:	1dba      	adds	r2, r7, #6
 80107c0:	8812      	ldrh	r2, [r2, #0]
 80107c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80107c4:	1dbb      	adds	r3, r7, #6
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	0018      	movs	r0, r3
 80107ca:	f7f7 ff45 	bl	8008658 <HAL_GPIO_EXTI_Callback>
  }
}
 80107ce:	46c0      	nop			@ (mov r8, r8)
 80107d0:	46bd      	mov	sp, r7
 80107d2:	b002      	add	sp, #8
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	46c0      	nop			@ (mov r8, r8)
 80107d8:	40010400 	.word	0x40010400

080107dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d101      	bne.n	80107ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80107ea:	2301      	movs	r3, #1
 80107ec:	e082      	b.n	80108f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2241      	movs	r2, #65	@ 0x41
 80107f2:	5c9b      	ldrb	r3, [r3, r2]
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d107      	bne.n	801080a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2240      	movs	r2, #64	@ 0x40
 80107fe:	2100      	movs	r1, #0
 8010800:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	0018      	movs	r0, r3
 8010806:	f7f7 fa0d 	bl	8007c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2241      	movs	r2, #65	@ 0x41
 801080e:	2124      	movs	r1, #36	@ 0x24
 8010810:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2101      	movs	r1, #1
 801081e:	438a      	bics	r2, r1
 8010820:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	685a      	ldr	r2, [r3, #4]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	4934      	ldr	r1, [pc, #208]	@ (80108fc <HAL_I2C_Init+0x120>)
 801082c:	400a      	ands	r2, r1
 801082e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	689a      	ldr	r2, [r3, #8]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4931      	ldr	r1, [pc, #196]	@ (8010900 <HAL_I2C_Init+0x124>)
 801083c:	400a      	ands	r2, r1
 801083e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	2b01      	cmp	r3, #1
 8010846:	d108      	bne.n	801085a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	689a      	ldr	r2, [r3, #8]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2180      	movs	r1, #128	@ 0x80
 8010852:	0209      	lsls	r1, r1, #8
 8010854:	430a      	orrs	r2, r1
 8010856:	609a      	str	r2, [r3, #8]
 8010858:	e007      	b.n	801086a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	689a      	ldr	r2, [r3, #8]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	2184      	movs	r1, #132	@ 0x84
 8010864:	0209      	lsls	r1, r1, #8
 8010866:	430a      	orrs	r2, r1
 8010868:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	68db      	ldr	r3, [r3, #12]
 801086e:	2b02      	cmp	r3, #2
 8010870:	d104      	bne.n	801087c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2280      	movs	r2, #128	@ 0x80
 8010878:	0112      	lsls	r2, r2, #4
 801087a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	685a      	ldr	r2, [r3, #4]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	491f      	ldr	r1, [pc, #124]	@ (8010904 <HAL_I2C_Init+0x128>)
 8010888:	430a      	orrs	r2, r1
 801088a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	68da      	ldr	r2, [r3, #12]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	491a      	ldr	r1, [pc, #104]	@ (8010900 <HAL_I2C_Init+0x124>)
 8010898:	400a      	ands	r2, r1
 801089a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	691a      	ldr	r2, [r3, #16]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	695b      	ldr	r3, [r3, #20]
 80108a4:	431a      	orrs	r2, r3
 80108a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	699b      	ldr	r3, [r3, #24]
 80108ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	430a      	orrs	r2, r1
 80108b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	69d9      	ldr	r1, [r3, #28]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a1a      	ldr	r2, [r3, #32]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	430a      	orrs	r2, r1
 80108c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2101      	movs	r1, #1
 80108d2:	430a      	orrs	r2, r1
 80108d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2241      	movs	r2, #65	@ 0x41
 80108e0:	2120      	movs	r1, #32
 80108e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2200      	movs	r2, #0
 80108e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2242      	movs	r2, #66	@ 0x42
 80108ee:	2100      	movs	r1, #0
 80108f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	0018      	movs	r0, r3
 80108f6:	46bd      	mov	sp, r7
 80108f8:	b002      	add	sp, #8
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	f0ffffff 	.word	0xf0ffffff
 8010900:	ffff7fff 	.word	0xffff7fff
 8010904:	02008000 	.word	0x02008000

08010908 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010908:	b590      	push	{r4, r7, lr}
 801090a:	b089      	sub	sp, #36	@ 0x24
 801090c:	af02      	add	r7, sp, #8
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	0008      	movs	r0, r1
 8010912:	607a      	str	r2, [r7, #4]
 8010914:	0019      	movs	r1, r3
 8010916:	230a      	movs	r3, #10
 8010918:	18fb      	adds	r3, r7, r3
 801091a:	1c02      	adds	r2, r0, #0
 801091c:	801a      	strh	r2, [r3, #0]
 801091e:	2308      	movs	r3, #8
 8010920:	18fb      	adds	r3, r7, r3
 8010922:	1c0a      	adds	r2, r1, #0
 8010924:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2241      	movs	r2, #65	@ 0x41
 801092a:	5c9b      	ldrb	r3, [r3, r2]
 801092c:	b2db      	uxtb	r3, r3
 801092e:	2b20      	cmp	r3, #32
 8010930:	d000      	beq.n	8010934 <HAL_I2C_Master_Transmit+0x2c>
 8010932:	e0e7      	b.n	8010b04 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2240      	movs	r2, #64	@ 0x40
 8010938:	5c9b      	ldrb	r3, [r3, r2]
 801093a:	2b01      	cmp	r3, #1
 801093c:	d101      	bne.n	8010942 <HAL_I2C_Master_Transmit+0x3a>
 801093e:	2302      	movs	r3, #2
 8010940:	e0e1      	b.n	8010b06 <HAL_I2C_Master_Transmit+0x1fe>
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2240      	movs	r2, #64	@ 0x40
 8010946:	2101      	movs	r1, #1
 8010948:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801094a:	f7fe fc7d 	bl	800f248 <HAL_GetTick>
 801094e:	0003      	movs	r3, r0
 8010950:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010952:	2380      	movs	r3, #128	@ 0x80
 8010954:	0219      	lsls	r1, r3, #8
 8010956:	68f8      	ldr	r0, [r7, #12]
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	2319      	movs	r3, #25
 801095e:	2201      	movs	r2, #1
 8010960:	f001 ff98 	bl	8012894 <I2C_WaitOnFlagUntilTimeout>
 8010964:	1e03      	subs	r3, r0, #0
 8010966:	d001      	beq.n	801096c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010968:	2301      	movs	r3, #1
 801096a:	e0cc      	b.n	8010b06 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2241      	movs	r2, #65	@ 0x41
 8010970:	2121      	movs	r1, #33	@ 0x21
 8010972:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2242      	movs	r2, #66	@ 0x42
 8010978:	2110      	movs	r1, #16
 801097a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2200      	movs	r2, #0
 8010980:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2208      	movs	r2, #8
 801098c:	18ba      	adds	r2, r7, r2
 801098e:	8812      	ldrh	r2, [r2, #0]
 8010990:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2200      	movs	r2, #0
 8010996:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801099c:	b29b      	uxth	r3, r3
 801099e:	2bff      	cmp	r3, #255	@ 0xff
 80109a0:	d911      	bls.n	80109c6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	22ff      	movs	r2, #255	@ 0xff
 80109a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109ac:	b2da      	uxtb	r2, r3
 80109ae:	2380      	movs	r3, #128	@ 0x80
 80109b0:	045c      	lsls	r4, r3, #17
 80109b2:	230a      	movs	r3, #10
 80109b4:	18fb      	adds	r3, r7, r3
 80109b6:	8819      	ldrh	r1, [r3, #0]
 80109b8:	68f8      	ldr	r0, [r7, #12]
 80109ba:	4b55      	ldr	r3, [pc, #340]	@ (8010b10 <HAL_I2C_Master_Transmit+0x208>)
 80109bc:	9300      	str	r3, [sp, #0]
 80109be:	0023      	movs	r3, r4
 80109c0:	f002 f9ba 	bl	8012d38 <I2C_TransferConfig>
 80109c4:	e075      	b.n	8010ab2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	2380      	movs	r3, #128	@ 0x80
 80109d8:	049c      	lsls	r4, r3, #18
 80109da:	230a      	movs	r3, #10
 80109dc:	18fb      	adds	r3, r7, r3
 80109de:	8819      	ldrh	r1, [r3, #0]
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	4b4b      	ldr	r3, [pc, #300]	@ (8010b10 <HAL_I2C_Master_Transmit+0x208>)
 80109e4:	9300      	str	r3, [sp, #0]
 80109e6:	0023      	movs	r3, r4
 80109e8:	f002 f9a6 	bl	8012d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80109ec:	e061      	b.n	8010ab2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80109ee:	697a      	ldr	r2, [r7, #20]
 80109f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	0018      	movs	r0, r3
 80109f6:	f001 ff9b 	bl	8012930 <I2C_WaitOnTXISFlagUntilTimeout>
 80109fa:	1e03      	subs	r3, r0, #0
 80109fc:	d001      	beq.n	8010a02 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80109fe:	2301      	movs	r3, #1
 8010a00:	e081      	b.n	8010b06 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a06:	781a      	ldrb	r2, [r3, #0]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a12:	1c5a      	adds	r2, r3, #1
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d03a      	beq.n	8010ab2 <HAL_I2C_Master_Transmit+0x1aa>
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d136      	bne.n	8010ab2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a46:	68f8      	ldr	r0, [r7, #12]
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	9300      	str	r3, [sp, #0]
 8010a4c:	0013      	movs	r3, r2
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2180      	movs	r1, #128	@ 0x80
 8010a52:	f001 ff1f 	bl	8012894 <I2C_WaitOnFlagUntilTimeout>
 8010a56:	1e03      	subs	r3, r0, #0
 8010a58:	d001      	beq.n	8010a5e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e053      	b.n	8010b06 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	2bff      	cmp	r3, #255	@ 0xff
 8010a66:	d911      	bls.n	8010a8c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	22ff      	movs	r2, #255	@ 0xff
 8010a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a72:	b2da      	uxtb	r2, r3
 8010a74:	2380      	movs	r3, #128	@ 0x80
 8010a76:	045c      	lsls	r4, r3, #17
 8010a78:	230a      	movs	r3, #10
 8010a7a:	18fb      	adds	r3, r7, r3
 8010a7c:	8819      	ldrh	r1, [r3, #0]
 8010a7e:	68f8      	ldr	r0, [r7, #12]
 8010a80:	2300      	movs	r3, #0
 8010a82:	9300      	str	r3, [sp, #0]
 8010a84:	0023      	movs	r3, r4
 8010a86:	f002 f957 	bl	8012d38 <I2C_TransferConfig>
 8010a8a:	e012      	b.n	8010ab2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a9a:	b2da      	uxtb	r2, r3
 8010a9c:	2380      	movs	r3, #128	@ 0x80
 8010a9e:	049c      	lsls	r4, r3, #18
 8010aa0:	230a      	movs	r3, #10
 8010aa2:	18fb      	adds	r3, r7, r3
 8010aa4:	8819      	ldrh	r1, [r3, #0]
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	0023      	movs	r3, r4
 8010aae:	f002 f943 	bl	8012d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d198      	bne.n	80109ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010abc:	697a      	ldr	r2, [r7, #20]
 8010abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	0018      	movs	r0, r3
 8010ac4:	f001 ff7a 	bl	80129bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8010ac8:	1e03      	subs	r3, r0, #0
 8010aca:	d001      	beq.n	8010ad0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010acc:	2301      	movs	r3, #1
 8010ace:	e01a      	b.n	8010b06 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	685a      	ldr	r2, [r3, #4]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	490c      	ldr	r1, [pc, #48]	@ (8010b14 <HAL_I2C_Master_Transmit+0x20c>)
 8010ae4:	400a      	ands	r2, r1
 8010ae6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2241      	movs	r2, #65	@ 0x41
 8010aec:	2120      	movs	r1, #32
 8010aee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2242      	movs	r2, #66	@ 0x42
 8010af4:	2100      	movs	r1, #0
 8010af6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2240      	movs	r2, #64	@ 0x40
 8010afc:	2100      	movs	r1, #0
 8010afe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010b00:	2300      	movs	r3, #0
 8010b02:	e000      	b.n	8010b06 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010b04:	2302      	movs	r3, #2
  }
}
 8010b06:	0018      	movs	r0, r3
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	b007      	add	sp, #28
 8010b0c:	bd90      	pop	{r4, r7, pc}
 8010b0e:	46c0      	nop			@ (mov r8, r8)
 8010b10:	80002000 	.word	0x80002000
 8010b14:	fe00e800 	.word	0xfe00e800

08010b18 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8010b18:	b590      	push	{r4, r7, lr}
 8010b1a:	b089      	sub	sp, #36	@ 0x24
 8010b1c:	af02      	add	r7, sp, #8
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	0008      	movs	r0, r1
 8010b22:	607a      	str	r2, [r7, #4]
 8010b24:	0019      	movs	r1, r3
 8010b26:	230a      	movs	r3, #10
 8010b28:	18fb      	adds	r3, r7, r3
 8010b2a:	1c02      	adds	r2, r0, #0
 8010b2c:	801a      	strh	r2, [r3, #0]
 8010b2e:	2308      	movs	r3, #8
 8010b30:	18fb      	adds	r3, r7, r3
 8010b32:	1c0a      	adds	r2, r1, #0
 8010b34:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2241      	movs	r2, #65	@ 0x41
 8010b3a:	5c9b      	ldrb	r3, [r3, r2]
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	2b20      	cmp	r3, #32
 8010b40:	d000      	beq.n	8010b44 <HAL_I2C_Master_Receive+0x2c>
 8010b42:	e0e8      	b.n	8010d16 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2240      	movs	r2, #64	@ 0x40
 8010b48:	5c9b      	ldrb	r3, [r3, r2]
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	d101      	bne.n	8010b52 <HAL_I2C_Master_Receive+0x3a>
 8010b4e:	2302      	movs	r3, #2
 8010b50:	e0e2      	b.n	8010d18 <HAL_I2C_Master_Receive+0x200>
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2240      	movs	r2, #64	@ 0x40
 8010b56:	2101      	movs	r1, #1
 8010b58:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010b5a:	f7fe fb75 	bl	800f248 <HAL_GetTick>
 8010b5e:	0003      	movs	r3, r0
 8010b60:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010b62:	2380      	movs	r3, #128	@ 0x80
 8010b64:	0219      	lsls	r1, r3, #8
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	2319      	movs	r3, #25
 8010b6e:	2201      	movs	r2, #1
 8010b70:	f001 fe90 	bl	8012894 <I2C_WaitOnFlagUntilTimeout>
 8010b74:	1e03      	subs	r3, r0, #0
 8010b76:	d001      	beq.n	8010b7c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e0cd      	b.n	8010d18 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2241      	movs	r2, #65	@ 0x41
 8010b80:	2122      	movs	r1, #34	@ 0x22
 8010b82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2242      	movs	r2, #66	@ 0x42
 8010b88:	2110      	movs	r1, #16
 8010b8a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2208      	movs	r2, #8
 8010b9c:	18ba      	adds	r2, r7, r2
 8010b9e:	8812      	ldrh	r2, [r2, #0]
 8010ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	2bff      	cmp	r3, #255	@ 0xff
 8010bb0:	d911      	bls.n	8010bd6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	22ff      	movs	r2, #255	@ 0xff
 8010bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bbc:	b2da      	uxtb	r2, r3
 8010bbe:	2380      	movs	r3, #128	@ 0x80
 8010bc0:	045c      	lsls	r4, r3, #17
 8010bc2:	230a      	movs	r3, #10
 8010bc4:	18fb      	adds	r3, r7, r3
 8010bc6:	8819      	ldrh	r1, [r3, #0]
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	4b55      	ldr	r3, [pc, #340]	@ (8010d20 <HAL_I2C_Master_Receive+0x208>)
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	0023      	movs	r3, r4
 8010bd0:	f002 f8b2 	bl	8012d38 <I2C_TransferConfig>
 8010bd4:	e076      	b.n	8010cc4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	2380      	movs	r3, #128	@ 0x80
 8010be8:	049c      	lsls	r4, r3, #18
 8010bea:	230a      	movs	r3, #10
 8010bec:	18fb      	adds	r3, r7, r3
 8010bee:	8819      	ldrh	r1, [r3, #0]
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8010d20 <HAL_I2C_Master_Receive+0x208>)
 8010bf4:	9300      	str	r3, [sp, #0]
 8010bf6:	0023      	movs	r3, r4
 8010bf8:	f002 f89e 	bl	8012d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010bfc:	e062      	b.n	8010cc4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010bfe:	697a      	ldr	r2, [r7, #20]
 8010c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	0018      	movs	r0, r3
 8010c06:	f001 ff1d 	bl	8012a44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010c0a:	1e03      	subs	r3, r0, #0
 8010c0c:	d001      	beq.n	8010c12 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e082      	b.n	8010d18 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c1c:	b2d2      	uxtb	r2, r2
 8010c1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c24:	1c5a      	adds	r2, r3, #1
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	b29a      	uxth	r2, r3
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d03a      	beq.n	8010cc4 <HAL_I2C_Master_Receive+0x1ac>
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d136      	bne.n	8010cc4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	9300      	str	r3, [sp, #0]
 8010c5e:	0013      	movs	r3, r2
 8010c60:	2200      	movs	r2, #0
 8010c62:	2180      	movs	r1, #128	@ 0x80
 8010c64:	f001 fe16 	bl	8012894 <I2C_WaitOnFlagUntilTimeout>
 8010c68:	1e03      	subs	r3, r0, #0
 8010c6a:	d001      	beq.n	8010c70 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e053      	b.n	8010d18 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	2bff      	cmp	r3, #255	@ 0xff
 8010c78:	d911      	bls.n	8010c9e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	22ff      	movs	r2, #255	@ 0xff
 8010c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	2380      	movs	r3, #128	@ 0x80
 8010c88:	045c      	lsls	r4, r3, #17
 8010c8a:	230a      	movs	r3, #10
 8010c8c:	18fb      	adds	r3, r7, r3
 8010c8e:	8819      	ldrh	r1, [r3, #0]
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	2300      	movs	r3, #0
 8010c94:	9300      	str	r3, [sp, #0]
 8010c96:	0023      	movs	r3, r4
 8010c98:	f002 f84e 	bl	8012d38 <I2C_TransferConfig>
 8010c9c:	e012      	b.n	8010cc4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cac:	b2da      	uxtb	r2, r3
 8010cae:	2380      	movs	r3, #128	@ 0x80
 8010cb0:	049c      	lsls	r4, r3, #18
 8010cb2:	230a      	movs	r3, #10
 8010cb4:	18fb      	adds	r3, r7, r3
 8010cb6:	8819      	ldrh	r1, [r3, #0]
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	2300      	movs	r3, #0
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	0023      	movs	r3, r4
 8010cc0:	f002 f83a 	bl	8012d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d197      	bne.n	8010bfe <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010cce:	697a      	ldr	r2, [r7, #20]
 8010cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	0018      	movs	r0, r3
 8010cd6:	f001 fe71 	bl	80129bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8010cda:	1e03      	subs	r3, r0, #0
 8010cdc:	d001      	beq.n	8010ce2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e01a      	b.n	8010d18 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2220      	movs	r2, #32
 8010ce8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	685a      	ldr	r2, [r3, #4]
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	490b      	ldr	r1, [pc, #44]	@ (8010d24 <HAL_I2C_Master_Receive+0x20c>)
 8010cf6:	400a      	ands	r2, r1
 8010cf8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2241      	movs	r2, #65	@ 0x41
 8010cfe:	2120      	movs	r1, #32
 8010d00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2242      	movs	r2, #66	@ 0x42
 8010d06:	2100      	movs	r1, #0
 8010d08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2240      	movs	r2, #64	@ 0x40
 8010d0e:	2100      	movs	r1, #0
 8010d10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010d12:	2300      	movs	r3, #0
 8010d14:	e000      	b.n	8010d18 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8010d16:	2302      	movs	r3, #2
  }
}
 8010d18:	0018      	movs	r0, r3
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	b007      	add	sp, #28
 8010d1e:	bd90      	pop	{r4, r7, pc}
 8010d20:	80002400 	.word	0x80002400
 8010d24:	fe00e800 	.word	0xfe00e800

08010d28 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010d28:	b5b0      	push	{r4, r5, r7, lr}
 8010d2a:	b088      	sub	sp, #32
 8010d2c:	af02      	add	r7, sp, #8
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	0008      	movs	r0, r1
 8010d32:	607a      	str	r2, [r7, #4]
 8010d34:	0019      	movs	r1, r3
 8010d36:	230a      	movs	r3, #10
 8010d38:	18fb      	adds	r3, r7, r3
 8010d3a:	1c02      	adds	r2, r0, #0
 8010d3c:	801a      	strh	r2, [r3, #0]
 8010d3e:	2308      	movs	r3, #8
 8010d40:	18fb      	adds	r3, r7, r3
 8010d42:	1c0a      	adds	r2, r1, #0
 8010d44:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2241      	movs	r2, #65	@ 0x41
 8010d4a:	5c9b      	ldrb	r3, [r3, r2]
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	2b20      	cmp	r3, #32
 8010d50:	d000      	beq.n	8010d54 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8010d52:	e0dd      	b.n	8010f10 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	699a      	ldr	r2, [r3, #24]
 8010d5a:	2380      	movs	r3, #128	@ 0x80
 8010d5c:	021b      	lsls	r3, r3, #8
 8010d5e:	401a      	ands	r2, r3
 8010d60:	2380      	movs	r3, #128	@ 0x80
 8010d62:	021b      	lsls	r3, r3, #8
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d101      	bne.n	8010d6c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010d68:	2302      	movs	r3, #2
 8010d6a:	e0d2      	b.n	8010f12 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2240      	movs	r2, #64	@ 0x40
 8010d70:	5c9b      	ldrb	r3, [r3, r2]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d101      	bne.n	8010d7a <HAL_I2C_Master_Transmit_DMA+0x52>
 8010d76:	2302      	movs	r3, #2
 8010d78:	e0cb      	b.n	8010f12 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2240      	movs	r2, #64	@ 0x40
 8010d7e:	2101      	movs	r1, #1
 8010d80:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2241      	movs	r2, #65	@ 0x41
 8010d86:	2121      	movs	r1, #33	@ 0x21
 8010d88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2242      	movs	r2, #66	@ 0x42
 8010d8e:	2110      	movs	r1, #16
 8010d90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2200      	movs	r2, #0
 8010d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2208      	movs	r2, #8
 8010da2:	18ba      	adds	r2, r7, r2
 8010da4:	8812      	ldrh	r2, [r2, #0]
 8010da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	4a5c      	ldr	r2, [pc, #368]	@ (8010f1c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010dac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	4a5b      	ldr	r2, [pc, #364]	@ (8010f20 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8010db2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	2bff      	cmp	r3, #255	@ 0xff
 8010dbc:	d906      	bls.n	8010dcc <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	22ff      	movs	r2, #255	@ 0xff
 8010dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010dc4:	2380      	movs	r3, #128	@ 0x80
 8010dc6:	045b      	lsls	r3, r3, #17
 8010dc8:	617b      	str	r3, [r7, #20]
 8010dca:	e007      	b.n	8010ddc <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010dd6:	2380      	movs	r3, #128	@ 0x80
 8010dd8:	049b      	lsls	r3, r3, #18
 8010dda:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d100      	bne.n	8010de6 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8010de4:	e078      	b.n	8010ed8 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d023      	beq.n	8010e36 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010df2:	4a4c      	ldr	r2, [pc, #304]	@ (8010f24 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010df4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dfa:	4a4b      	ldr	r2, [pc, #300]	@ (8010f28 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010dfc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e02:	2200      	movs	r2, #0
 8010e04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010e12:	6879      	ldr	r1, [r7, #4]
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	3328      	adds	r3, #40	@ 0x28
 8010e1a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010e20:	2513      	movs	r5, #19
 8010e22:	197c      	adds	r4, r7, r5
 8010e24:	f7fe ff62 	bl	800fcec <HAL_DMA_Start_IT>
 8010e28:	0003      	movs	r3, r0
 8010e2a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010e2c:	197b      	adds	r3, r7, r5
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d13d      	bne.n	8010eb0 <HAL_I2C_Master_Transmit_DMA+0x188>
 8010e34:	e013      	b.n	8010e5e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2241      	movs	r2, #65	@ 0x41
 8010e3a:	2120      	movs	r1, #32
 8010e3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2242      	movs	r2, #66	@ 0x42
 8010e42:	2100      	movs	r1, #0
 8010e44:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e4a:	2280      	movs	r2, #128	@ 0x80
 8010e4c:	431a      	orrs	r2, r3
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2240      	movs	r2, #64	@ 0x40
 8010e56:	2100      	movs	r1, #0
 8010e58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e059      	b.n	8010f12 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e62:	b2da      	uxtb	r2, r3
 8010e64:	697c      	ldr	r4, [r7, #20]
 8010e66:	230a      	movs	r3, #10
 8010e68:	18fb      	adds	r3, r7, r3
 8010e6a:	8819      	ldrh	r1, [r3, #0]
 8010e6c:	68f8      	ldr	r0, [r7, #12]
 8010e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8010f2c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010e70:	9300      	str	r3, [sp, #0]
 8010e72:	0023      	movs	r3, r4
 8010e74:	f001 ff60 	bl	8012d38 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	b29a      	uxth	r2, r3
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2240      	movs	r2, #64	@ 0x40
 8010e8e:	2100      	movs	r1, #0
 8010e90:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2110      	movs	r1, #16
 8010e96:	0018      	movs	r0, r3
 8010e98:	f001 ff88 	bl	8012dac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	681a      	ldr	r2, [r3, #0]
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2180      	movs	r1, #128	@ 0x80
 8010ea8:	01c9      	lsls	r1, r1, #7
 8010eaa:	430a      	orrs	r2, r1
 8010eac:	601a      	str	r2, [r3, #0]
 8010eae:	e02d      	b.n	8010f0c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2241      	movs	r2, #65	@ 0x41
 8010eb4:	2120      	movs	r1, #32
 8010eb6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2242      	movs	r2, #66	@ 0x42
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ec4:	2210      	movs	r2, #16
 8010ec6:	431a      	orrs	r2, r3
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2240      	movs	r2, #64	@ 0x40
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	e01c      	b.n	8010f12 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	4a15      	ldr	r2, [pc, #84]	@ (8010f30 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010edc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ee2:	b2da      	uxtb	r2, r3
 8010ee4:	2380      	movs	r3, #128	@ 0x80
 8010ee6:	049c      	lsls	r4, r3, #18
 8010ee8:	230a      	movs	r3, #10
 8010eea:	18fb      	adds	r3, r7, r3
 8010eec:	8819      	ldrh	r1, [r3, #0]
 8010eee:	68f8      	ldr	r0, [r7, #12]
 8010ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8010f2c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	0023      	movs	r3, r4
 8010ef6:	f001 ff1f 	bl	8012d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2240      	movs	r2, #64	@ 0x40
 8010efe:	2100      	movs	r1, #0
 8010f00:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2101      	movs	r1, #1
 8010f06:	0018      	movs	r0, r3
 8010f08:	f001 ff50 	bl	8012dac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	e000      	b.n	8010f12 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010f10:	2302      	movs	r3, #2
  }
}
 8010f12:	0018      	movs	r0, r3
 8010f14:	46bd      	mov	sp, r7
 8010f16:	b006      	add	sp, #24
 8010f18:	bdb0      	pop	{r4, r5, r7, pc}
 8010f1a:	46c0      	nop			@ (mov r8, r8)
 8010f1c:	ffff0000 	.word	0xffff0000
 8010f20:	0801172d 	.word	0x0801172d
 8010f24:	080126e5 	.word	0x080126e5
 8010f28:	08012825 	.word	0x08012825
 8010f2c:	80002000 	.word	0x80002000
 8010f30:	080112d9 	.word	0x080112d9

08010f34 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010f34:	b5b0      	push	{r4, r5, r7, lr}
 8010f36:	b088      	sub	sp, #32
 8010f38:	af02      	add	r7, sp, #8
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	0008      	movs	r0, r1
 8010f3e:	607a      	str	r2, [r7, #4]
 8010f40:	0019      	movs	r1, r3
 8010f42:	230a      	movs	r3, #10
 8010f44:	18fb      	adds	r3, r7, r3
 8010f46:	1c02      	adds	r2, r0, #0
 8010f48:	801a      	strh	r2, [r3, #0]
 8010f4a:	2308      	movs	r3, #8
 8010f4c:	18fb      	adds	r3, r7, r3
 8010f4e:	1c0a      	adds	r2, r1, #0
 8010f50:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2241      	movs	r2, #65	@ 0x41
 8010f56:	5c9b      	ldrb	r3, [r3, r2]
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	2b20      	cmp	r3, #32
 8010f5c:	d000      	beq.n	8010f60 <HAL_I2C_Master_Receive_DMA+0x2c>
 8010f5e:	e0dd      	b.n	801111c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	699a      	ldr	r2, [r3, #24]
 8010f66:	2380      	movs	r3, #128	@ 0x80
 8010f68:	021b      	lsls	r3, r3, #8
 8010f6a:	401a      	ands	r2, r3
 8010f6c:	2380      	movs	r3, #128	@ 0x80
 8010f6e:	021b      	lsls	r3, r3, #8
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d101      	bne.n	8010f78 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010f74:	2302      	movs	r3, #2
 8010f76:	e0d2      	b.n	801111e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2240      	movs	r2, #64	@ 0x40
 8010f7c:	5c9b      	ldrb	r3, [r3, r2]
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	d101      	bne.n	8010f86 <HAL_I2C_Master_Receive_DMA+0x52>
 8010f82:	2302      	movs	r3, #2
 8010f84:	e0cb      	b.n	801111e <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2240      	movs	r2, #64	@ 0x40
 8010f8a:	2101      	movs	r1, #1
 8010f8c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2241      	movs	r2, #65	@ 0x41
 8010f92:	2122      	movs	r1, #34	@ 0x22
 8010f94:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2242      	movs	r2, #66	@ 0x42
 8010f9a:	2110      	movs	r1, #16
 8010f9c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2208      	movs	r2, #8
 8010fae:	18ba      	adds	r2, r7, r2
 8010fb0:	8812      	ldrh	r2, [r2, #0]
 8010fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8011128 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	4a5b      	ldr	r2, [pc, #364]	@ (801112c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010fbe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	2bff      	cmp	r3, #255	@ 0xff
 8010fc8:	d906      	bls.n	8010fd8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	22ff      	movs	r2, #255	@ 0xff
 8010fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010fd0:	2380      	movs	r3, #128	@ 0x80
 8010fd2:	045b      	lsls	r3, r3, #17
 8010fd4:	617b      	str	r3, [r7, #20]
 8010fd6:	e007      	b.n	8010fe8 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010fe2:	2380      	movs	r3, #128	@ 0x80
 8010fe4:	049b      	lsls	r3, r3, #18
 8010fe6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d100      	bne.n	8010ff2 <HAL_I2C_Master_Receive_DMA+0xbe>
 8010ff0:	e078      	b.n	80110e4 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d023      	beq.n	8011042 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ffe:	4a4c      	ldr	r2, [pc, #304]	@ (8011130 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8011000:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011006:	4a4b      	ldr	r2, [pc, #300]	@ (8011134 <HAL_I2C_Master_Receive_DMA+0x200>)
 8011008:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801100e:	2200      	movs	r2, #0
 8011010:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011016:	2200      	movs	r2, #0
 8011018:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	3324      	adds	r3, #36	@ 0x24
 8011024:	0019      	movs	r1, r3
 8011026:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801102c:	2513      	movs	r5, #19
 801102e:	197c      	adds	r4, r7, r5
 8011030:	f7fe fe5c 	bl	800fcec <HAL_DMA_Start_IT>
 8011034:	0003      	movs	r3, r0
 8011036:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8011038:	197b      	adds	r3, r7, r5
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d13d      	bne.n	80110bc <HAL_I2C_Master_Receive_DMA+0x188>
 8011040:	e013      	b.n	801106a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2241      	movs	r2, #65	@ 0x41
 8011046:	2120      	movs	r1, #32
 8011048:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2242      	movs	r2, #66	@ 0x42
 801104e:	2100      	movs	r1, #0
 8011050:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011056:	2280      	movs	r2, #128	@ 0x80
 8011058:	431a      	orrs	r2, r3
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2240      	movs	r2, #64	@ 0x40
 8011062:	2100      	movs	r1, #0
 8011064:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8011066:	2301      	movs	r3, #1
 8011068:	e059      	b.n	801111e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801106e:	b2da      	uxtb	r2, r3
 8011070:	697c      	ldr	r4, [r7, #20]
 8011072:	230a      	movs	r3, #10
 8011074:	18fb      	adds	r3, r7, r3
 8011076:	8819      	ldrh	r1, [r3, #0]
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	4b2f      	ldr	r3, [pc, #188]	@ (8011138 <HAL_I2C_Master_Receive_DMA+0x204>)
 801107c:	9300      	str	r3, [sp, #0]
 801107e:	0023      	movs	r3, r4
 8011080:	f001 fe5a 	bl	8012d38 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011088:	b29a      	uxth	r2, r3
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801108e:	1ad3      	subs	r3, r2, r3
 8011090:	b29a      	uxth	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2240      	movs	r2, #64	@ 0x40
 801109a:	2100      	movs	r1, #0
 801109c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2110      	movs	r1, #16
 80110a2:	0018      	movs	r0, r3
 80110a4:	f001 fe82 	bl	8012dac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2180      	movs	r1, #128	@ 0x80
 80110b4:	0209      	lsls	r1, r1, #8
 80110b6:	430a      	orrs	r2, r1
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	e02d      	b.n	8011118 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2241      	movs	r2, #65	@ 0x41
 80110c0:	2120      	movs	r1, #32
 80110c2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2242      	movs	r2, #66	@ 0x42
 80110c8:	2100      	movs	r1, #0
 80110ca:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110d0:	2210      	movs	r2, #16
 80110d2:	431a      	orrs	r2, r3
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2240      	movs	r2, #64	@ 0x40
 80110dc:	2100      	movs	r1, #0
 80110de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80110e0:	2301      	movs	r3, #1
 80110e2:	e01c      	b.n	801111e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	4a15      	ldr	r2, [pc, #84]	@ (801113c <HAL_I2C_Master_Receive_DMA+0x208>)
 80110e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110ee:	b2da      	uxtb	r2, r3
 80110f0:	2380      	movs	r3, #128	@ 0x80
 80110f2:	049c      	lsls	r4, r3, #18
 80110f4:	230a      	movs	r3, #10
 80110f6:	18fb      	adds	r3, r7, r3
 80110f8:	8819      	ldrh	r1, [r3, #0]
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	4b0e      	ldr	r3, [pc, #56]	@ (8011138 <HAL_I2C_Master_Receive_DMA+0x204>)
 80110fe:	9300      	str	r3, [sp, #0]
 8011100:	0023      	movs	r3, r4
 8011102:	f001 fe19 	bl	8012d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2240      	movs	r2, #64	@ 0x40
 801110a:	2100      	movs	r1, #0
 801110c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2101      	movs	r1, #1
 8011112:	0018      	movs	r0, r3
 8011114:	f001 fe4a 	bl	8012dac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8011118:	2300      	movs	r3, #0
 801111a:	e000      	b.n	801111e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801111c:	2302      	movs	r3, #2
  }
}
 801111e:	0018      	movs	r0, r3
 8011120:	46bd      	mov	sp, r7
 8011122:	b006      	add	sp, #24
 8011124:	bdb0      	pop	{r4, r5, r7, pc}
 8011126:	46c0      	nop			@ (mov r8, r8)
 8011128:	ffff0000 	.word	0xffff0000
 801112c:	0801172d 	.word	0x0801172d
 8011130:	08012785 	.word	0x08012785
 8011134:	08012825 	.word	0x08012825
 8011138:	80002400 	.word	0x80002400
 801113c:	080112d9 	.word	0x080112d9

08011140 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801115c:	2b00      	cmp	r3, #0
 801115e:	d005      	beq.n	801116c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011164:	68ba      	ldr	r2, [r7, #8]
 8011166:	68f9      	ldr	r1, [r7, #12]
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	4798      	blx	r3
  }
}
 801116c:	46c0      	nop			@ (mov r8, r8)
 801116e:	46bd      	mov	sp, r7
 8011170:	b004      	add	sp, #16
 8011172:	bd80      	pop	{r7, pc}

08011174 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b086      	sub	sp, #24
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	699b      	ldr	r3, [r3, #24]
 8011182:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801118c:	697a      	ldr	r2, [r7, #20]
 801118e:	2380      	movs	r3, #128	@ 0x80
 8011190:	005b      	lsls	r3, r3, #1
 8011192:	4013      	ands	r3, r2
 8011194:	d00e      	beq.n	80111b4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	2280      	movs	r2, #128	@ 0x80
 801119a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801119c:	d00a      	beq.n	80111b4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111a2:	2201      	movs	r2, #1
 80111a4:	431a      	orrs	r2, r3
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2280      	movs	r2, #128	@ 0x80
 80111b0:	0052      	lsls	r2, r2, #1
 80111b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80111b4:	697a      	ldr	r2, [r7, #20]
 80111b6:	2380      	movs	r3, #128	@ 0x80
 80111b8:	00db      	lsls	r3, r3, #3
 80111ba:	4013      	ands	r3, r2
 80111bc:	d00e      	beq.n	80111dc <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	2280      	movs	r2, #128	@ 0x80
 80111c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80111c4:	d00a      	beq.n	80111dc <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111ca:	2208      	movs	r2, #8
 80111cc:	431a      	orrs	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	2280      	movs	r2, #128	@ 0x80
 80111d8:	00d2      	lsls	r2, r2, #3
 80111da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80111dc:	697a      	ldr	r2, [r7, #20]
 80111de:	2380      	movs	r3, #128	@ 0x80
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	4013      	ands	r3, r2
 80111e4:	d00e      	beq.n	8011204 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	2280      	movs	r2, #128	@ 0x80
 80111ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80111ec:	d00a      	beq.n	8011204 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111f2:	2202      	movs	r2, #2
 80111f4:	431a      	orrs	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2280      	movs	r2, #128	@ 0x80
 8011200:	0092      	lsls	r2, r2, #2
 8011202:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011208:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	220b      	movs	r2, #11
 801120e:	4013      	ands	r3, r2
 8011210:	d005      	beq.n	801121e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8011212:	68fa      	ldr	r2, [r7, #12]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	0011      	movs	r1, r2
 8011218:	0018      	movs	r0, r3
 801121a:	f001 f915 	bl	8012448 <I2C_ITError>
  }
}
 801121e:	46c0      	nop			@ (mov r8, r8)
 8011220:	46bd      	mov	sp, r7
 8011222:	b006      	add	sp, #24
 8011224:	bd80      	pop	{r7, pc}

08011226 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b082      	sub	sp, #8
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801122e:	46c0      	nop			@ (mov r8, r8)
 8011230:	46bd      	mov	sp, r7
 8011232:	b002      	add	sp, #8
 8011234:	bd80      	pop	{r7, pc}

08011236 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011236:	b580      	push	{r7, lr}
 8011238:	b082      	sub	sp, #8
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801123e:	46c0      	nop			@ (mov r8, r8)
 8011240:	46bd      	mov	sp, r7
 8011242:	b002      	add	sp, #8
 8011244:	bd80      	pop	{r7, pc}

08011246 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011246:	b580      	push	{r7, lr}
 8011248:	b082      	sub	sp, #8
 801124a:	af00      	add	r7, sp, #0
 801124c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801124e:	46c0      	nop			@ (mov r8, r8)
 8011250:	46bd      	mov	sp, r7
 8011252:	b002      	add	sp, #8
 8011254:	bd80      	pop	{r7, pc}

08011256 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011256:	b580      	push	{r7, lr}
 8011258:	b082      	sub	sp, #8
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801125e:	46c0      	nop			@ (mov r8, r8)
 8011260:	46bd      	mov	sp, r7
 8011262:	b002      	add	sp, #8
 8011264:	bd80      	pop	{r7, pc}

08011266 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b082      	sub	sp, #8
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	0008      	movs	r0, r1
 8011270:	0011      	movs	r1, r2
 8011272:	1cfb      	adds	r3, r7, #3
 8011274:	1c02      	adds	r2, r0, #0
 8011276:	701a      	strb	r2, [r3, #0]
 8011278:	003b      	movs	r3, r7
 801127a:	1c0a      	adds	r2, r1, #0
 801127c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801127e:	46c0      	nop			@ (mov r8, r8)
 8011280:	46bd      	mov	sp, r7
 8011282:	b002      	add	sp, #8
 8011284:	bd80      	pop	{r7, pc}

08011286 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011286:	b580      	push	{r7, lr}
 8011288:	b082      	sub	sp, #8
 801128a:	af00      	add	r7, sp, #0
 801128c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 801128e:	46c0      	nop			@ (mov r8, r8)
 8011290:	46bd      	mov	sp, r7
 8011292:	b002      	add	sp, #8
 8011294:	bd80      	pop	{r7, pc}

08011296 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011296:	b580      	push	{r7, lr}
 8011298:	b082      	sub	sp, #8
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801129e:	46c0      	nop			@ (mov r8, r8)
 80112a0:	46bd      	mov	sp, r7
 80112a2:	b002      	add	sp, #8
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b082      	sub	sp, #8
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80112ae:	46c0      	nop			@ (mov r8, r8)
 80112b0:	46bd      	mov	sp, r7
 80112b2:	b002      	add	sp, #8
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80112b6:	b580      	push	{r7, lr}
 80112b8:	b082      	sub	sp, #8
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80112be:	46c0      	nop			@ (mov r8, r8)
 80112c0:	46bd      	mov	sp, r7
 80112c2:	b002      	add	sp, #8
 80112c4:	bd80      	pop	{r7, pc}

080112c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b082      	sub	sp, #8
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80112ce:	46c0      	nop			@ (mov r8, r8)
 80112d0:	46bd      	mov	sp, r7
 80112d2:	b002      	add	sp, #8
 80112d4:	bd80      	pop	{r7, pc}
	...

080112d8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80112d8:	b590      	push	{r4, r7, lr}
 80112da:	b089      	sub	sp, #36	@ 0x24
 80112dc:	af02      	add	r7, sp, #8
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2240      	movs	r2, #64	@ 0x40
 80112ec:	5c9b      	ldrb	r3, [r3, r2]
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	d101      	bne.n	80112f6 <I2C_Master_ISR_IT+0x1e>
 80112f2:	2302      	movs	r3, #2
 80112f4:	e113      	b.n	801151e <I2C_Master_ISR_IT+0x246>
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2240      	movs	r2, #64	@ 0x40
 80112fa:	2101      	movs	r1, #1
 80112fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	2210      	movs	r2, #16
 8011302:	4013      	ands	r3, r2
 8011304:	d012      	beq.n	801132c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2210      	movs	r2, #16
 801130a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801130c:	d00e      	beq.n	801132c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	2210      	movs	r2, #16
 8011314:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801131a:	2204      	movs	r2, #4
 801131c:	431a      	orrs	r2, r3
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	0018      	movs	r0, r3
 8011326:	f001 f9ba 	bl	801269e <I2C_Flush_TXDR>
 801132a:	e0e5      	b.n	80114f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801132c:	697b      	ldr	r3, [r7, #20]
 801132e:	2204      	movs	r2, #4
 8011330:	4013      	ands	r3, r2
 8011332:	d021      	beq.n	8011378 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2204      	movs	r2, #4
 8011338:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801133a:	d01d      	beq.n	8011378 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	2204      	movs	r2, #4
 8011340:	4393      	bics	r3, r2
 8011342:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801134e:	b2d2      	uxtb	r2, r2
 8011350:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011356:	1c5a      	adds	r2, r3, #1
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011360:	3b01      	subs	r3, #1
 8011362:	b29a      	uxth	r2, r3
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801136c:	b29b      	uxth	r3, r3
 801136e:	3b01      	subs	r3, #1
 8011370:	b29a      	uxth	r2, r3
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011376:	e0bf      	b.n	80114f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	2202      	movs	r2, #2
 801137c:	4013      	ands	r3, r2
 801137e:	d01c      	beq.n	80113ba <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2202      	movs	r2, #2
 8011384:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011386:	d018      	beq.n	80113ba <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801138c:	781a      	ldrb	r2, [r3, #0]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011398:	1c5a      	adds	r2, r3, #1
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113a2:	3b01      	subs	r3, #1
 80113a4:	b29a      	uxth	r2, r3
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	3b01      	subs	r3, #1
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80113b8:	e09e      	b.n	80114f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	2280      	movs	r2, #128	@ 0x80
 80113be:	4013      	ands	r3, r2
 80113c0:	d100      	bne.n	80113c4 <I2C_Master_ISR_IT+0xec>
 80113c2:	e069      	b.n	8011498 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2240      	movs	r2, #64	@ 0x40
 80113c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80113ca:	d065      	beq.n	8011498 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d04a      	beq.n	801146c <I2C_Master_ISR_IT+0x194>
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d146      	bne.n	801146c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	b29a      	uxth	r2, r3
 80113e6:	2112      	movs	r1, #18
 80113e8:	187b      	adds	r3, r7, r1
 80113ea:	0592      	lsls	r2, r2, #22
 80113ec:	0d92      	lsrs	r2, r2, #22
 80113ee:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	2bff      	cmp	r3, #255	@ 0xff
 80113f8:	d910      	bls.n	801141c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	22ff      	movs	r2, #255	@ 0xff
 80113fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011404:	b2da      	uxtb	r2, r3
 8011406:	2380      	movs	r3, #128	@ 0x80
 8011408:	045c      	lsls	r4, r3, #17
 801140a:	187b      	adds	r3, r7, r1
 801140c:	8819      	ldrh	r1, [r3, #0]
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	2300      	movs	r3, #0
 8011412:	9300      	str	r3, [sp, #0]
 8011414:	0023      	movs	r3, r4
 8011416:	f001 fc8f 	bl	8012d38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801141a:	e03c      	b.n	8011496 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011420:	b29a      	uxth	r2, r3
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801142a:	4a3f      	ldr	r2, [pc, #252]	@ (8011528 <I2C_Master_ISR_IT+0x250>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d00e      	beq.n	801144e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011434:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801143a:	2312      	movs	r3, #18
 801143c:	18fb      	adds	r3, r7, r3
 801143e:	8819      	ldrh	r1, [r3, #0]
 8011440:	68f8      	ldr	r0, [r7, #12]
 8011442:	2300      	movs	r3, #0
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	0023      	movs	r3, r4
 8011448:	f001 fc76 	bl	8012d38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801144c:	e023      	b.n	8011496 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011452:	b2da      	uxtb	r2, r3
 8011454:	2380      	movs	r3, #128	@ 0x80
 8011456:	049c      	lsls	r4, r3, #18
 8011458:	2312      	movs	r3, #18
 801145a:	18fb      	adds	r3, r7, r3
 801145c:	8819      	ldrh	r1, [r3, #0]
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	2300      	movs	r3, #0
 8011462:	9300      	str	r3, [sp, #0]
 8011464:	0023      	movs	r3, r4
 8011466:	f001 fc67 	bl	8012d38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801146a:	e014      	b.n	8011496 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	685a      	ldr	r2, [r3, #4]
 8011472:	2380      	movs	r3, #128	@ 0x80
 8011474:	049b      	lsls	r3, r3, #18
 8011476:	401a      	ands	r2, r3
 8011478:	2380      	movs	r3, #128	@ 0x80
 801147a:	049b      	lsls	r3, r3, #18
 801147c:	429a      	cmp	r2, r3
 801147e:	d004      	beq.n	801148a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	0018      	movs	r0, r3
 8011484:	f000 fcf4 	bl	8011e70 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011488:	e036      	b.n	80114f8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2140      	movs	r1, #64	@ 0x40
 801148e:	0018      	movs	r0, r3
 8011490:	f000 ffda 	bl	8012448 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011494:	e030      	b.n	80114f8 <I2C_Master_ISR_IT+0x220>
 8011496:	e02f      	b.n	80114f8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	2240      	movs	r2, #64	@ 0x40
 801149c:	4013      	ands	r3, r2
 801149e:	d02b      	beq.n	80114f8 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2240      	movs	r2, #64	@ 0x40
 80114a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80114a6:	d027      	beq.n	80114f8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d11d      	bne.n	80114ee <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	685a      	ldr	r2, [r3, #4]
 80114b8:	2380      	movs	r3, #128	@ 0x80
 80114ba:	049b      	lsls	r3, r3, #18
 80114bc:	401a      	ands	r2, r3
 80114be:	2380      	movs	r3, #128	@ 0x80
 80114c0:	049b      	lsls	r3, r3, #18
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d018      	beq.n	80114f8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114ca:	4a17      	ldr	r2, [pc, #92]	@ (8011528 <I2C_Master_ISR_IT+0x250>)
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d109      	bne.n	80114e4 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	685a      	ldr	r2, [r3, #4]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2180      	movs	r1, #128	@ 0x80
 80114dc:	01c9      	lsls	r1, r1, #7
 80114de:	430a      	orrs	r2, r1
 80114e0:	605a      	str	r2, [r3, #4]
 80114e2:	e009      	b.n	80114f8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	0018      	movs	r0, r3
 80114e8:	f000 fcc2 	bl	8011e70 <I2C_ITMasterSeqCplt>
 80114ec:	e004      	b.n	80114f8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2140      	movs	r1, #64	@ 0x40
 80114f2:	0018      	movs	r0, r3
 80114f4:	f000 ffa8 	bl	8012448 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	2220      	movs	r2, #32
 80114fc:	4013      	ands	r3, r2
 80114fe:	d009      	beq.n	8011514 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2220      	movs	r2, #32
 8011504:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011506:	d005      	beq.n	8011514 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011508:	697a      	ldr	r2, [r7, #20]
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	0011      	movs	r1, r2
 801150e:	0018      	movs	r0, r3
 8011510:	f000 fd54 	bl	8011fbc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2240      	movs	r2, #64	@ 0x40
 8011518:	2100      	movs	r1, #0
 801151a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	0018      	movs	r0, r3
 8011520:	46bd      	mov	sp, r7
 8011522:	b007      	add	sp, #28
 8011524:	bd90      	pop	{r4, r7, pc}
 8011526:	46c0      	nop			@ (mov r8, r8)
 8011528:	ffff0000 	.word	0xffff0000

0801152c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801153c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2240      	movs	r2, #64	@ 0x40
 8011546:	5c9b      	ldrb	r3, [r3, r2]
 8011548:	2b01      	cmp	r3, #1
 801154a:	d101      	bne.n	8011550 <I2C_Slave_ISR_IT+0x24>
 801154c:	2302      	movs	r3, #2
 801154e:	e0e6      	b.n	801171e <I2C_Slave_ISR_IT+0x1f2>
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2240      	movs	r2, #64	@ 0x40
 8011554:	2101      	movs	r1, #1
 8011556:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	2220      	movs	r2, #32
 801155c:	4013      	ands	r3, r2
 801155e:	d009      	beq.n	8011574 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2220      	movs	r2, #32
 8011564:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011566:	d005      	beq.n	8011574 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011568:	693a      	ldr	r2, [r7, #16]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	0011      	movs	r1, r2
 801156e:	0018      	movs	r0, r3
 8011570:	f000 fdf2 	bl	8012158 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	2210      	movs	r2, #16
 8011578:	4013      	ands	r3, r2
 801157a:	d052      	beq.n	8011622 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2210      	movs	r2, #16
 8011580:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011582:	d04e      	beq.n	8011622 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011588:	b29b      	uxth	r3, r3
 801158a:	2b00      	cmp	r3, #0
 801158c:	d12d      	bne.n	80115ea <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2241      	movs	r2, #65	@ 0x41
 8011592:	5c9b      	ldrb	r3, [r3, r2]
 8011594:	b2db      	uxtb	r3, r3
 8011596:	2b28      	cmp	r3, #40	@ 0x28
 8011598:	d10b      	bne.n	80115b2 <I2C_Slave_ISR_IT+0x86>
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	2380      	movs	r3, #128	@ 0x80
 801159e:	049b      	lsls	r3, r3, #18
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d106      	bne.n	80115b2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80115a4:	693a      	ldr	r2, [r7, #16]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	0011      	movs	r1, r2
 80115aa:	0018      	movs	r0, r3
 80115ac:	f000 fef4 	bl	8012398 <I2C_ITListenCplt>
 80115b0:	e036      	b.n	8011620 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2241      	movs	r2, #65	@ 0x41
 80115b6:	5c9b      	ldrb	r3, [r3, r2]
 80115b8:	b2db      	uxtb	r3, r3
 80115ba:	2b29      	cmp	r3, #41	@ 0x29
 80115bc:	d110      	bne.n	80115e0 <I2C_Slave_ISR_IT+0xb4>
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	4a59      	ldr	r2, [pc, #356]	@ (8011728 <I2C_Slave_ISR_IT+0x1fc>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d00c      	beq.n	80115e0 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	2210      	movs	r2, #16
 80115cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	0018      	movs	r0, r3
 80115d2:	f001 f864 	bl	801269e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	0018      	movs	r0, r3
 80115da:	f000 fc8b 	bl	8011ef4 <I2C_ITSlaveSeqCplt>
 80115de:	e01f      	b.n	8011620 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2210      	movs	r2, #16
 80115e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80115e8:	e091      	b.n	801170e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2210      	movs	r2, #16
 80115f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115f6:	2204      	movs	r2, #4
 80115f8:	431a      	orrs	r2, r3
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d005      	beq.n	8011610 <I2C_Slave_ISR_IT+0xe4>
 8011604:	697a      	ldr	r2, [r7, #20]
 8011606:	2380      	movs	r3, #128	@ 0x80
 8011608:	045b      	lsls	r3, r3, #17
 801160a:	429a      	cmp	r2, r3
 801160c:	d000      	beq.n	8011610 <I2C_Slave_ISR_IT+0xe4>
 801160e:	e07e      	b.n	801170e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	0011      	movs	r1, r2
 8011618:	0018      	movs	r0, r3
 801161a:	f000 ff15 	bl	8012448 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801161e:	e076      	b.n	801170e <I2C_Slave_ISR_IT+0x1e2>
 8011620:	e075      	b.n	801170e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	2204      	movs	r2, #4
 8011626:	4013      	ands	r3, r2
 8011628:	d02f      	beq.n	801168a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2204      	movs	r2, #4
 801162e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011630:	d02b      	beq.n	801168a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011636:	b29b      	uxth	r3, r3
 8011638:	2b00      	cmp	r3, #0
 801163a:	d018      	beq.n	801166e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011646:	b2d2      	uxtb	r2, r2
 8011648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801164e:	1c5a      	adds	r2, r3, #1
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011658:	3b01      	subs	r3, #1
 801165a:	b29a      	uxth	r2, r3
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011664:	b29b      	uxth	r3, r3
 8011666:	3b01      	subs	r3, #1
 8011668:	b29a      	uxth	r2, r3
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011672:	b29b      	uxth	r3, r3
 8011674:	2b00      	cmp	r3, #0
 8011676:	d14c      	bne.n	8011712 <I2C_Slave_ISR_IT+0x1e6>
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	4a2b      	ldr	r2, [pc, #172]	@ (8011728 <I2C_Slave_ISR_IT+0x1fc>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d048      	beq.n	8011712 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	0018      	movs	r0, r3
 8011684:	f000 fc36 	bl	8011ef4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011688:	e043      	b.n	8011712 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	2208      	movs	r2, #8
 801168e:	4013      	ands	r3, r2
 8011690:	d00a      	beq.n	80116a8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2208      	movs	r2, #8
 8011696:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011698:	d006      	beq.n	80116a8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801169a:	693a      	ldr	r2, [r7, #16]
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	0011      	movs	r1, r2
 80116a0:	0018      	movs	r0, r3
 80116a2:	f000 fb41 	bl	8011d28 <I2C_ITAddrCplt>
 80116a6:	e035      	b.n	8011714 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	2202      	movs	r2, #2
 80116ac:	4013      	ands	r3, r2
 80116ae:	d031      	beq.n	8011714 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2202      	movs	r2, #2
 80116b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80116b6:	d02d      	beq.n	8011714 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116bc:	b29b      	uxth	r3, r3
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d018      	beq.n	80116f4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116c6:	781a      	ldrb	r2, [r3, #0]
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116d2:	1c5a      	adds	r2, r3, #1
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116dc:	b29b      	uxth	r3, r3
 80116de:	3b01      	subs	r3, #1
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116ea:	3b01      	subs	r3, #1
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80116f2:	e00f      	b.n	8011714 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80116f4:	697a      	ldr	r2, [r7, #20]
 80116f6:	2380      	movs	r3, #128	@ 0x80
 80116f8:	045b      	lsls	r3, r3, #17
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d002      	beq.n	8011704 <I2C_Slave_ISR_IT+0x1d8>
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d107      	bne.n	8011714 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	0018      	movs	r0, r3
 8011708:	f000 fbf4 	bl	8011ef4 <I2C_ITSlaveSeqCplt>
 801170c:	e002      	b.n	8011714 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801170e:	46c0      	nop			@ (mov r8, r8)
 8011710:	e000      	b.n	8011714 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8011712:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2240      	movs	r2, #64	@ 0x40
 8011718:	2100      	movs	r1, #0
 801171a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801171c:	2300      	movs	r3, #0
}
 801171e:	0018      	movs	r0, r3
 8011720:	46bd      	mov	sp, r7
 8011722:	b006      	add	sp, #24
 8011724:	bd80      	pop	{r7, pc}
 8011726:	46c0      	nop			@ (mov r8, r8)
 8011728:	ffff0000 	.word	0xffff0000

0801172c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 801172c:	b590      	push	{r4, r7, lr}
 801172e:	b089      	sub	sp, #36	@ 0x24
 8011730:	af02      	add	r7, sp, #8
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2240      	movs	r2, #64	@ 0x40
 801173c:	5c9b      	ldrb	r3, [r3, r2]
 801173e:	2b01      	cmp	r3, #1
 8011740:	d101      	bne.n	8011746 <I2C_Master_ISR_DMA+0x1a>
 8011742:	2302      	movs	r3, #2
 8011744:	e0e7      	b.n	8011916 <I2C_Master_ISR_DMA+0x1ea>
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2240      	movs	r2, #64	@ 0x40
 801174a:	2101      	movs	r1, #1
 801174c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	2210      	movs	r2, #16
 8011752:	4013      	ands	r3, r2
 8011754:	d017      	beq.n	8011786 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2210      	movs	r2, #16
 801175a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801175c:	d013      	beq.n	8011786 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2210      	movs	r2, #16
 8011764:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801176a:	2204      	movs	r2, #4
 801176c:	431a      	orrs	r2, r3
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2120      	movs	r1, #32
 8011776:	0018      	movs	r0, r3
 8011778:	f001 fb18 	bl	8012dac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	0018      	movs	r0, r3
 8011780:	f000 ff8d 	bl	801269e <I2C_Flush_TXDR>
 8011784:	e0c2      	b.n	801190c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	2280      	movs	r2, #128	@ 0x80
 801178a:	4013      	ands	r3, r2
 801178c:	d100      	bne.n	8011790 <I2C_Master_ISR_DMA+0x64>
 801178e:	e07c      	b.n	801188a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2240      	movs	r2, #64	@ 0x40
 8011794:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011796:	d100      	bne.n	801179a <I2C_Master_ISR_DMA+0x6e>
 8011798:	e077      	b.n	801188a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2140      	movs	r1, #64	@ 0x40
 80117a6:	438a      	bics	r2, r1
 80117a8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d055      	beq.n	8011860 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	2312      	movs	r3, #18
 80117be:	18fb      	adds	r3, r7, r3
 80117c0:	0592      	lsls	r2, r2, #22
 80117c2:	0d92      	lsrs	r2, r2, #22
 80117c4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	2bff      	cmp	r3, #255	@ 0xff
 80117ce:	d906      	bls.n	80117de <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	22ff      	movs	r2, #255	@ 0xff
 80117d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80117d6:	2380      	movs	r3, #128	@ 0x80
 80117d8:	045b      	lsls	r3, r3, #17
 80117da:	617b      	str	r3, [r7, #20]
 80117dc:	e010      	b.n	8011800 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ec:	4a4c      	ldr	r2, [pc, #304]	@ (8011920 <I2C_Master_ISR_DMA+0x1f4>)
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d003      	beq.n	80117fa <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117f6:	617b      	str	r3, [r7, #20]
 80117f8:	e002      	b.n	8011800 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80117fa:	2380      	movs	r3, #128	@ 0x80
 80117fc:	049b      	lsls	r3, r3, #18
 80117fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011804:	b2da      	uxtb	r2, r3
 8011806:	697c      	ldr	r4, [r7, #20]
 8011808:	2312      	movs	r3, #18
 801180a:	18fb      	adds	r3, r7, r3
 801180c:	8819      	ldrh	r1, [r3, #0]
 801180e:	68f8      	ldr	r0, [r7, #12]
 8011810:	2300      	movs	r3, #0
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	0023      	movs	r3, r4
 8011816:	f001 fa8f 	bl	8012d38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801181e:	b29a      	uxth	r2, r3
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011824:	1ad3      	subs	r3, r2, r3
 8011826:	b29a      	uxth	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	2241      	movs	r2, #65	@ 0x41
 8011830:	5c9b      	ldrb	r3, [r3, r2]
 8011832:	b2db      	uxtb	r3, r3
 8011834:	2b22      	cmp	r3, #34	@ 0x22
 8011836:	d109      	bne.n	801184c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	681a      	ldr	r2, [r3, #0]
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2180      	movs	r1, #128	@ 0x80
 8011844:	0209      	lsls	r1, r1, #8
 8011846:	430a      	orrs	r2, r1
 8011848:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801184a:	e05f      	b.n	801190c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2180      	movs	r1, #128	@ 0x80
 8011858:	01c9      	lsls	r1, r1, #7
 801185a:	430a      	orrs	r2, r1
 801185c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801185e:	e055      	b.n	801190c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	685a      	ldr	r2, [r3, #4]
 8011866:	2380      	movs	r3, #128	@ 0x80
 8011868:	049b      	lsls	r3, r3, #18
 801186a:	401a      	ands	r2, r3
 801186c:	2380      	movs	r3, #128	@ 0x80
 801186e:	049b      	lsls	r3, r3, #18
 8011870:	429a      	cmp	r2, r3
 8011872:	d004      	beq.n	801187e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	0018      	movs	r0, r3
 8011878:	f000 fafa 	bl	8011e70 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 801187c:	e046      	b.n	801190c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2140      	movs	r1, #64	@ 0x40
 8011882:	0018      	movs	r0, r3
 8011884:	f000 fde0 	bl	8012448 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011888:	e040      	b.n	801190c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	2240      	movs	r2, #64	@ 0x40
 801188e:	4013      	ands	r3, r2
 8011890:	d02c      	beq.n	80118ec <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2240      	movs	r2, #64	@ 0x40
 8011896:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011898:	d028      	beq.n	80118ec <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801189e:	b29b      	uxth	r3, r3
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d11d      	bne.n	80118e0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	685a      	ldr	r2, [r3, #4]
 80118aa:	2380      	movs	r3, #128	@ 0x80
 80118ac:	049b      	lsls	r3, r3, #18
 80118ae:	401a      	ands	r2, r3
 80118b0:	2380      	movs	r3, #128	@ 0x80
 80118b2:	049b      	lsls	r3, r3, #18
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d028      	beq.n	801190a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118bc:	4a18      	ldr	r2, [pc, #96]	@ (8011920 <I2C_Master_ISR_DMA+0x1f4>)
 80118be:	4293      	cmp	r3, r2
 80118c0:	d109      	bne.n	80118d6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	685a      	ldr	r2, [r3, #4]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2180      	movs	r1, #128	@ 0x80
 80118ce:	01c9      	lsls	r1, r1, #7
 80118d0:	430a      	orrs	r2, r1
 80118d2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80118d4:	e019      	b.n	801190a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	0018      	movs	r0, r3
 80118da:	f000 fac9 	bl	8011e70 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80118de:	e014      	b.n	801190a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2140      	movs	r1, #64	@ 0x40
 80118e4:	0018      	movs	r0, r3
 80118e6:	f000 fdaf 	bl	8012448 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80118ea:	e00e      	b.n	801190a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	2220      	movs	r2, #32
 80118f0:	4013      	ands	r3, r2
 80118f2:	d00b      	beq.n	801190c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2220      	movs	r2, #32
 80118f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80118fa:	d007      	beq.n	801190c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80118fc:	68ba      	ldr	r2, [r7, #8]
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	0011      	movs	r1, r2
 8011902:	0018      	movs	r0, r3
 8011904:	f000 fb5a 	bl	8011fbc <I2C_ITMasterCplt>
 8011908:	e000      	b.n	801190c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 801190a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2240      	movs	r2, #64	@ 0x40
 8011910:	2100      	movs	r1, #0
 8011912:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011914:	2300      	movs	r3, #0
}
 8011916:	0018      	movs	r0, r3
 8011918:	46bd      	mov	sp, r7
 801191a:	b007      	add	sp, #28
 801191c:	bd90      	pop	{r4, r7, pc}
 801191e:	46c0      	nop			@ (mov r8, r8)
 8011920:	ffff0000 	.word	0xffff0000

08011924 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011924:	b590      	push	{r4, r7, lr}
 8011926:	b089      	sub	sp, #36	@ 0x24
 8011928:	af02      	add	r7, sp, #8
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8011930:	4b88      	ldr	r3, [pc, #544]	@ (8011b54 <I2C_Mem_ISR_DMA+0x230>)
 8011932:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2240      	movs	r2, #64	@ 0x40
 8011938:	5c9b      	ldrb	r3, [r3, r2]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d101      	bne.n	8011942 <I2C_Mem_ISR_DMA+0x1e>
 801193e:	2302      	movs	r3, #2
 8011940:	e104      	b.n	8011b4c <I2C_Mem_ISR_DMA+0x228>
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2240      	movs	r2, #64	@ 0x40
 8011946:	2101      	movs	r1, #1
 8011948:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	2210      	movs	r2, #16
 801194e:	4013      	ands	r3, r2
 8011950:	d017      	beq.n	8011982 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2210      	movs	r2, #16
 8011956:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011958:	d013      	beq.n	8011982 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2210      	movs	r2, #16
 8011960:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011966:	2204      	movs	r2, #4
 8011968:	431a      	orrs	r2, r3
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2120      	movs	r1, #32
 8011972:	0018      	movs	r0, r3
 8011974:	f001 fa1a 	bl	8012dac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	0018      	movs	r0, r3
 801197c:	f000 fe8f 	bl	801269e <I2C_Flush_TXDR>
 8011980:	e0df      	b.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	2202      	movs	r2, #2
 8011986:	4013      	ands	r3, r2
 8011988:	d00d      	beq.n	80119a6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2202      	movs	r2, #2
 801198e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011990:	d009      	beq.n	80119a6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801199a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2201      	movs	r2, #1
 80119a0:	4252      	negs	r2, r2
 80119a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80119a4:	e0cd      	b.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	2280      	movs	r2, #128	@ 0x80
 80119aa:	4013      	ands	r3, r2
 80119ac:	d05e      	beq.n	8011a6c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2240      	movs	r2, #64	@ 0x40
 80119b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80119b4:	d05a      	beq.n	8011a6c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	2110      	movs	r1, #16
 80119ba:	0018      	movs	r0, r3
 80119bc:	f001 f9f6 	bl	8012dac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d04a      	beq.n	8011a60 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	2bff      	cmp	r3, #255	@ 0xff
 80119d2:	d910      	bls.n	80119f6 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	22ff      	movs	r2, #255	@ 0xff
 80119d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119de:	b299      	uxth	r1, r3
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119e4:	b2da      	uxtb	r2, r3
 80119e6:	2380      	movs	r3, #128	@ 0x80
 80119e8:	045b      	lsls	r3, r3, #17
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	2400      	movs	r4, #0
 80119ee:	9400      	str	r4, [sp, #0]
 80119f0:	f001 f9a2 	bl	8012d38 <I2C_TransferConfig>
 80119f4:	e011      	b.n	8011a1a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a04:	b299      	uxth	r1, r3
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a0a:	b2da      	uxtb	r2, r3
 8011a0c:	2380      	movs	r3, #128	@ 0x80
 8011a0e:	049b      	lsls	r3, r3, #18
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	2400      	movs	r4, #0
 8011a14:	9400      	str	r4, [sp, #0]
 8011a16:	f001 f98f 	bl	8012d38 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	b29a      	uxth	r2, r3
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2241      	movs	r2, #65	@ 0x41
 8011a30:	5c9b      	ldrb	r3, [r3, r2]
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b22      	cmp	r3, #34	@ 0x22
 8011a36:	d109      	bne.n	8011a4c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	2180      	movs	r1, #128	@ 0x80
 8011a44:	0209      	lsls	r1, r1, #8
 8011a46:	430a      	orrs	r2, r1
 8011a48:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011a4a:	e07a      	b.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2180      	movs	r1, #128	@ 0x80
 8011a58:	01c9      	lsls	r1, r1, #7
 8011a5a:	430a      	orrs	r2, r1
 8011a5c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011a5e:	e070      	b.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2140      	movs	r1, #64	@ 0x40
 8011a64:	0018      	movs	r0, r3
 8011a66:	f000 fcef 	bl	8012448 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011a6a:	e06a      	b.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	2240      	movs	r2, #64	@ 0x40
 8011a70:	4013      	ands	r3, r2
 8011a72:	d058      	beq.n	8011b26 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2240      	movs	r2, #64	@ 0x40
 8011a78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011a7a:	d054      	beq.n	8011b26 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2241      	movs	r2, #65	@ 0x41
 8011a80:	5c9b      	ldrb	r3, [r3, r2]
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	2b22      	cmp	r3, #34	@ 0x22
 8011a86:	d101      	bne.n	8011a8c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8011a88:	4b33      	ldr	r3, [pc, #204]	@ (8011b58 <I2C_Mem_ISR_DMA+0x234>)
 8011a8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	2bff      	cmp	r3, #255	@ 0xff
 8011a94:	d911      	bls.n	8011aba <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	22ff      	movs	r2, #255	@ 0xff
 8011a9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011aa0:	b299      	uxth	r1, r3
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011aa6:	b2da      	uxtb	r2, r3
 8011aa8:	2380      	movs	r3, #128	@ 0x80
 8011aaa:	045c      	lsls	r4, r3, #17
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	0023      	movs	r3, r4
 8011ab4:	f001 f940 	bl	8012d38 <I2C_TransferConfig>
 8011ab8:	e012      	b.n	8011ae0 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ac8:	b299      	uxth	r1, r3
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	2380      	movs	r3, #128	@ 0x80
 8011ad2:	049c      	lsls	r4, r3, #18
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	0023      	movs	r3, r4
 8011adc:	f001 f92c 	bl	8012d38 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	2241      	movs	r2, #65	@ 0x41
 8011af6:	5c9b      	ldrb	r3, [r3, r2]
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b22      	cmp	r3, #34	@ 0x22
 8011afc:	d109      	bne.n	8011b12 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	681a      	ldr	r2, [r3, #0]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2180      	movs	r1, #128	@ 0x80
 8011b0a:	0209      	lsls	r1, r1, #8
 8011b0c:	430a      	orrs	r2, r1
 8011b0e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011b10:	e017      	b.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	681a      	ldr	r2, [r3, #0]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2180      	movs	r1, #128	@ 0x80
 8011b1e:	01c9      	lsls	r1, r1, #7
 8011b20:	430a      	orrs	r2, r1
 8011b22:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011b24:	e00d      	b.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	2220      	movs	r2, #32
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	d009      	beq.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2220      	movs	r2, #32
 8011b32:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b34:	d005      	beq.n	8011b42 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011b36:	68ba      	ldr	r2, [r7, #8]
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	0011      	movs	r1, r2
 8011b3c:	0018      	movs	r0, r3
 8011b3e:	f000 fa3d 	bl	8011fbc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2240      	movs	r2, #64	@ 0x40
 8011b46:	2100      	movs	r1, #0
 8011b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	0018      	movs	r0, r3
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	b007      	add	sp, #28
 8011b52:	bd90      	pop	{r4, r7, pc}
 8011b54:	80002000 	.word	0x80002000
 8011b58:	80002400 	.word	0x80002400

08011b5c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b088      	sub	sp, #32
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b6c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2240      	movs	r2, #64	@ 0x40
 8011b76:	5c9b      	ldrb	r3, [r3, r2]
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d101      	bne.n	8011b80 <I2C_Slave_ISR_DMA+0x24>
 8011b7c:	2302      	movs	r3, #2
 8011b7e:	e0cd      	b.n	8011d1c <I2C_Slave_ISR_DMA+0x1c0>
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2240      	movs	r2, #64	@ 0x40
 8011b84:	2101      	movs	r1, #1
 8011b86:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	2220      	movs	r2, #32
 8011b8c:	4013      	ands	r3, r2
 8011b8e:	d009      	beq.n	8011ba4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2220      	movs	r2, #32
 8011b94:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b96:	d005      	beq.n	8011ba4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8011b98:	68ba      	ldr	r2, [r7, #8]
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	0011      	movs	r1, r2
 8011b9e:	0018      	movs	r0, r3
 8011ba0:	f000 fada 	bl	8012158 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	2210      	movs	r2, #16
 8011ba8:	4013      	ands	r3, r2
 8011baa:	d100      	bne.n	8011bae <I2C_Slave_ISR_DMA+0x52>
 8011bac:	e0a3      	b.n	8011cf6 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2210      	movs	r2, #16
 8011bb2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011bb4:	d100      	bne.n	8011bb8 <I2C_Slave_ISR_DMA+0x5c>
 8011bb6:	e09e      	b.n	8011cf6 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	2380      	movs	r3, #128	@ 0x80
 8011bbc:	01db      	lsls	r3, r3, #7
 8011bbe:	4013      	ands	r3, r2
 8011bc0:	d105      	bne.n	8011bce <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	2380      	movs	r3, #128	@ 0x80
 8011bc6:	021b      	lsls	r3, r3, #8
 8011bc8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011bca:	d100      	bne.n	8011bce <I2C_Slave_ISR_DMA+0x72>
 8011bcc:	e08c      	b.n	8011ce8 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00c      	beq.n	8011bf0 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	2380      	movs	r3, #128	@ 0x80
 8011bda:	021b      	lsls	r3, r3, #8
 8011bdc:	4013      	ands	r3, r2
 8011bde:	d007      	beq.n	8011bf0 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d101      	bne.n	8011bf0 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011bec:	2301      	movs	r3, #1
 8011bee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d00c      	beq.n	8011c12 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	2380      	movs	r3, #128	@ 0x80
 8011bfc:	01db      	lsls	r3, r3, #7
 8011bfe:	4013      	ands	r3, r2
 8011c00:	d007      	beq.n	8011c12 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d101      	bne.n	8011c12 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8011c12:	69fb      	ldr	r3, [r7, #28]
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d12d      	bne.n	8011c74 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2241      	movs	r2, #65	@ 0x41
 8011c1c:	5c9b      	ldrb	r3, [r3, r2]
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	2b28      	cmp	r3, #40	@ 0x28
 8011c22:	d10b      	bne.n	8011c3c <I2C_Slave_ISR_DMA+0xe0>
 8011c24:	69ba      	ldr	r2, [r7, #24]
 8011c26:	2380      	movs	r3, #128	@ 0x80
 8011c28:	049b      	lsls	r3, r3, #18
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d106      	bne.n	8011c3c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8011c2e:	68ba      	ldr	r2, [r7, #8]
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	0011      	movs	r1, r2
 8011c34:	0018      	movs	r0, r3
 8011c36:	f000 fbaf 	bl	8012398 <I2C_ITListenCplt>
 8011c3a:	e054      	b.n	8011ce6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2241      	movs	r2, #65	@ 0x41
 8011c40:	5c9b      	ldrb	r3, [r3, r2]
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	2b29      	cmp	r3, #41	@ 0x29
 8011c46:	d110      	bne.n	8011c6a <I2C_Slave_ISR_DMA+0x10e>
 8011c48:	69bb      	ldr	r3, [r7, #24]
 8011c4a:	4a36      	ldr	r2, [pc, #216]	@ (8011d24 <I2C_Slave_ISR_DMA+0x1c8>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d00c      	beq.n	8011c6a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	2210      	movs	r2, #16
 8011c56:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	0018      	movs	r0, r3
 8011c5c:	f000 fd1f 	bl	801269e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	0018      	movs	r0, r3
 8011c64:	f000 f946 	bl	8011ef4 <I2C_ITSlaveSeqCplt>
 8011c68:	e03d      	b.n	8011ce6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2210      	movs	r2, #16
 8011c70:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8011c72:	e03e      	b.n	8011cf2 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2210      	movs	r2, #16
 8011c7a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c80:	2204      	movs	r2, #4
 8011c82:	431a      	orrs	r2, r3
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8011c88:	2317      	movs	r3, #23
 8011c8a:	18fb      	adds	r3, r7, r3
 8011c8c:	68fa      	ldr	r2, [r7, #12]
 8011c8e:	2141      	movs	r1, #65	@ 0x41
 8011c90:	5c52      	ldrb	r2, [r2, r1]
 8011c92:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011c94:	69bb      	ldr	r3, [r7, #24]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d004      	beq.n	8011ca4 <I2C_Slave_ISR_DMA+0x148>
 8011c9a:	69ba      	ldr	r2, [r7, #24]
 8011c9c:	2380      	movs	r3, #128	@ 0x80
 8011c9e:	045b      	lsls	r3, r3, #17
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d126      	bne.n	8011cf2 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011ca4:	2217      	movs	r2, #23
 8011ca6:	18bb      	adds	r3, r7, r2
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	2b21      	cmp	r3, #33	@ 0x21
 8011cac:	d003      	beq.n	8011cb6 <I2C_Slave_ISR_DMA+0x15a>
 8011cae:	18bb      	adds	r3, r7, r2
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	2b29      	cmp	r3, #41	@ 0x29
 8011cb4:	d103      	bne.n	8011cbe <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2221      	movs	r2, #33	@ 0x21
 8011cba:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cbc:	e00b      	b.n	8011cd6 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011cbe:	2217      	movs	r2, #23
 8011cc0:	18bb      	adds	r3, r7, r2
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	2b22      	cmp	r3, #34	@ 0x22
 8011cc6:	d003      	beq.n	8011cd0 <I2C_Slave_ISR_DMA+0x174>
 8011cc8:	18bb      	adds	r3, r7, r2
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cce:	d102      	bne.n	8011cd6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	2222      	movs	r2, #34	@ 0x22
 8011cd4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	0011      	movs	r1, r2
 8011cde:	0018      	movs	r0, r3
 8011ce0:	f000 fbb2 	bl	8012448 <I2C_ITError>
      if (treatdmanack == 1U)
 8011ce4:	e005      	b.n	8011cf2 <I2C_Slave_ISR_DMA+0x196>
 8011ce6:	e004      	b.n	8011cf2 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2210      	movs	r2, #16
 8011cee:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011cf0:	e00f      	b.n	8011d12 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8011cf2:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011cf4:	e00d      	b.n	8011d12 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	2208      	movs	r2, #8
 8011cfa:	4013      	ands	r3, r2
 8011cfc:	d009      	beq.n	8011d12 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2208      	movs	r2, #8
 8011d02:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011d04:	d005      	beq.n	8011d12 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8011d06:	68ba      	ldr	r2, [r7, #8]
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	0011      	movs	r1, r2
 8011d0c:	0018      	movs	r0, r3
 8011d0e:	f000 f80b 	bl	8011d28 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2240      	movs	r2, #64	@ 0x40
 8011d16:	2100      	movs	r1, #0
 8011d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011d1a:	2300      	movs	r3, #0
}
 8011d1c:	0018      	movs	r0, r3
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	b008      	add	sp, #32
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	ffff0000 	.word	0xffff0000

08011d28 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011d28:	b5b0      	push	{r4, r5, r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2241      	movs	r2, #65	@ 0x41
 8011d36:	5c9b      	ldrb	r3, [r3, r2]
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	001a      	movs	r2, r3
 8011d3c:	2328      	movs	r3, #40	@ 0x28
 8011d3e:	4013      	ands	r3, r2
 8011d40:	2b28      	cmp	r3, #40	@ 0x28
 8011d42:	d000      	beq.n	8011d46 <I2C_ITAddrCplt+0x1e>
 8011d44:	e088      	b.n	8011e58 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	699b      	ldr	r3, [r3, #24]
 8011d4c:	0c1b      	lsrs	r3, r3, #16
 8011d4e:	b2da      	uxtb	r2, r3
 8011d50:	250f      	movs	r5, #15
 8011d52:	197b      	adds	r3, r7, r5
 8011d54:	2101      	movs	r1, #1
 8011d56:	400a      	ands	r2, r1
 8011d58:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	699b      	ldr	r3, [r3, #24]
 8011d60:	0c1b      	lsrs	r3, r3, #16
 8011d62:	b29a      	uxth	r2, r3
 8011d64:	200c      	movs	r0, #12
 8011d66:	183b      	adds	r3, r7, r0
 8011d68:	21fe      	movs	r1, #254	@ 0xfe
 8011d6a:	400a      	ands	r2, r1
 8011d6c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	240a      	movs	r4, #10
 8011d78:	193b      	adds	r3, r7, r4
 8011d7a:	0592      	lsls	r2, r2, #22
 8011d7c:	0d92      	lsrs	r2, r2, #22
 8011d7e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	2308      	movs	r3, #8
 8011d8a:	18fb      	adds	r3, r7, r3
 8011d8c:	21fe      	movs	r1, #254	@ 0xfe
 8011d8e:	400a      	ands	r2, r1
 8011d90:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	2b02      	cmp	r3, #2
 8011d98:	d148      	bne.n	8011e2c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8011d9a:	0021      	movs	r1, r4
 8011d9c:	187b      	adds	r3, r7, r1
 8011d9e:	881b      	ldrh	r3, [r3, #0]
 8011da0:	09db      	lsrs	r3, r3, #7
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	183b      	adds	r3, r7, r0
 8011da6:	881b      	ldrh	r3, [r3, #0]
 8011da8:	4053      	eors	r3, r2
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	001a      	movs	r2, r3
 8011dae:	2306      	movs	r3, #6
 8011db0:	4013      	ands	r3, r2
 8011db2:	d120      	bne.n	8011df6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8011db4:	183b      	adds	r3, r7, r0
 8011db6:	187a      	adds	r2, r7, r1
 8011db8:	8812      	ldrh	r2, [r2, #0]
 8011dba:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011dc0:	1c5a      	adds	r2, r3, #1
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011dca:	2b02      	cmp	r3, #2
 8011dcc:	d14c      	bne.n	8011e68 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	2208      	movs	r2, #8
 8011dda:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2240      	movs	r2, #64	@ 0x40
 8011de0:	2100      	movs	r1, #0
 8011de2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011de4:	183b      	adds	r3, r7, r0
 8011de6:	881a      	ldrh	r2, [r3, #0]
 8011de8:	197b      	adds	r3, r7, r5
 8011dea:	7819      	ldrb	r1, [r3, #0]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	0018      	movs	r0, r3
 8011df0:	f7ff fa39 	bl	8011266 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011df4:	e038      	b.n	8011e68 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011df6:	240c      	movs	r4, #12
 8011df8:	193b      	adds	r3, r7, r4
 8011dfa:	2208      	movs	r2, #8
 8011dfc:	18ba      	adds	r2, r7, r2
 8011dfe:	8812      	ldrh	r2, [r2, #0]
 8011e00:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011e02:	2380      	movs	r3, #128	@ 0x80
 8011e04:	021a      	lsls	r2, r3, #8
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	0011      	movs	r1, r2
 8011e0a:	0018      	movs	r0, r3
 8011e0c:	f001 f85c 	bl	8012ec8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2240      	movs	r2, #64	@ 0x40
 8011e14:	2100      	movs	r1, #0
 8011e16:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011e18:	193b      	adds	r3, r7, r4
 8011e1a:	881a      	ldrh	r2, [r3, #0]
 8011e1c:	230f      	movs	r3, #15
 8011e1e:	18fb      	adds	r3, r7, r3
 8011e20:	7819      	ldrb	r1, [r3, #0]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	0018      	movs	r0, r3
 8011e26:	f7ff fa1e 	bl	8011266 <HAL_I2C_AddrCallback>
}
 8011e2a:	e01d      	b.n	8011e68 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011e2c:	2380      	movs	r3, #128	@ 0x80
 8011e2e:	021a      	lsls	r2, r3, #8
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	0011      	movs	r1, r2
 8011e34:	0018      	movs	r0, r3
 8011e36:	f001 f847 	bl	8012ec8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2240      	movs	r2, #64	@ 0x40
 8011e3e:	2100      	movs	r1, #0
 8011e40:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011e42:	230c      	movs	r3, #12
 8011e44:	18fb      	adds	r3, r7, r3
 8011e46:	881a      	ldrh	r2, [r3, #0]
 8011e48:	230f      	movs	r3, #15
 8011e4a:	18fb      	adds	r3, r7, r3
 8011e4c:	7819      	ldrb	r1, [r3, #0]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	0018      	movs	r0, r3
 8011e52:	f7ff fa08 	bl	8011266 <HAL_I2C_AddrCallback>
}
 8011e56:	e007      	b.n	8011e68 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2208      	movs	r2, #8
 8011e5e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2240      	movs	r2, #64	@ 0x40
 8011e64:	2100      	movs	r1, #0
 8011e66:	5499      	strb	r1, [r3, r2]
}
 8011e68:	46c0      	nop			@ (mov r8, r8)
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	b004      	add	sp, #16
 8011e6e:	bdb0      	pop	{r4, r5, r7, pc}

08011e70 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2242      	movs	r2, #66	@ 0x42
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2241      	movs	r2, #65	@ 0x41
 8011e84:	5c9b      	ldrb	r3, [r3, r2]
 8011e86:	b2db      	uxtb	r3, r3
 8011e88:	2b21      	cmp	r3, #33	@ 0x21
 8011e8a:	d117      	bne.n	8011ebc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2241      	movs	r2, #65	@ 0x41
 8011e90:	2120      	movs	r1, #32
 8011e92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2211      	movs	r2, #17
 8011e98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2101      	movs	r1, #1
 8011ea4:	0018      	movs	r0, r3
 8011ea6:	f001 f80f 	bl	8012ec8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2240      	movs	r2, #64	@ 0x40
 8011eae:	2100      	movs	r1, #0
 8011eb0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	0018      	movs	r0, r3
 8011eb6:	f7ff f9b6 	bl	8011226 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011eba:	e016      	b.n	8011eea <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2241      	movs	r2, #65	@ 0x41
 8011ec0:	2120      	movs	r1, #32
 8011ec2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2212      	movs	r2, #18
 8011ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2102      	movs	r1, #2
 8011ed4:	0018      	movs	r0, r3
 8011ed6:	f000 fff7 	bl	8012ec8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2240      	movs	r2, #64	@ 0x40
 8011ede:	2100      	movs	r1, #0
 8011ee0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	0018      	movs	r0, r3
 8011ee6:	f7ff f9a6 	bl	8011236 <HAL_I2C_MasterRxCpltCallback>
}
 8011eea:	46c0      	nop			@ (mov r8, r8)
 8011eec:	46bd      	mov	sp, r7
 8011eee:	b002      	add	sp, #8
 8011ef0:	bd80      	pop	{r7, pc}
	...

08011ef4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2242      	movs	r2, #66	@ 0x42
 8011f08:	2100      	movs	r1, #0
 8011f0a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011f0c:	68fa      	ldr	r2, [r7, #12]
 8011f0e:	2380      	movs	r3, #128	@ 0x80
 8011f10:	01db      	lsls	r3, r3, #7
 8011f12:	4013      	ands	r3, r2
 8011f14:	d008      	beq.n	8011f28 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	681a      	ldr	r2, [r3, #0]
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4924      	ldr	r1, [pc, #144]	@ (8011fb4 <I2C_ITSlaveSeqCplt+0xc0>)
 8011f22:	400a      	ands	r2, r1
 8011f24:	601a      	str	r2, [r3, #0]
 8011f26:	e00c      	b.n	8011f42 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011f28:	68fa      	ldr	r2, [r7, #12]
 8011f2a:	2380      	movs	r3, #128	@ 0x80
 8011f2c:	021b      	lsls	r3, r3, #8
 8011f2e:	4013      	ands	r3, r2
 8011f30:	d007      	beq.n	8011f42 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	491e      	ldr	r1, [pc, #120]	@ (8011fb8 <I2C_ITSlaveSeqCplt+0xc4>)
 8011f3e:	400a      	ands	r2, r1
 8011f40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2241      	movs	r2, #65	@ 0x41
 8011f46:	5c9b      	ldrb	r3, [r3, r2]
 8011f48:	b2db      	uxtb	r3, r3
 8011f4a:	2b29      	cmp	r3, #41	@ 0x29
 8011f4c:	d114      	bne.n	8011f78 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2241      	movs	r2, #65	@ 0x41
 8011f52:	2128      	movs	r1, #40	@ 0x28
 8011f54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2221      	movs	r2, #33	@ 0x21
 8011f5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2101      	movs	r1, #1
 8011f60:	0018      	movs	r0, r3
 8011f62:	f000 ffb1 	bl	8012ec8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2240      	movs	r2, #64	@ 0x40
 8011f6a:	2100      	movs	r1, #0
 8011f6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	0018      	movs	r0, r3
 8011f72:	f7ff f968 	bl	8011246 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011f76:	e019      	b.n	8011fac <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2241      	movs	r2, #65	@ 0x41
 8011f7c:	5c9b      	ldrb	r3, [r3, r2]
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f82:	d113      	bne.n	8011fac <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2241      	movs	r2, #65	@ 0x41
 8011f88:	2128      	movs	r1, #40	@ 0x28
 8011f8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2222      	movs	r2, #34	@ 0x22
 8011f90:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2102      	movs	r1, #2
 8011f96:	0018      	movs	r0, r3
 8011f98:	f000 ff96 	bl	8012ec8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2240      	movs	r2, #64	@ 0x40
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	0018      	movs	r0, r3
 8011fa8:	f7ff f955 	bl	8011256 <HAL_I2C_SlaveRxCpltCallback>
}
 8011fac:	46c0      	nop			@ (mov r8, r8)
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	b004      	add	sp, #16
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	ffffbfff 	.word	0xffffbfff
 8011fb8:	ffff7fff 	.word	0xffff7fff

08011fbc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b086      	sub	sp, #24
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	2220      	movs	r2, #32
 8011fd0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2241      	movs	r2, #65	@ 0x41
 8011fd6:	5c9b      	ldrb	r3, [r3, r2]
 8011fd8:	b2db      	uxtb	r3, r3
 8011fda:	2b21      	cmp	r3, #33	@ 0x21
 8011fdc:	d108      	bne.n	8011ff0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2101      	movs	r1, #1
 8011fe2:	0018      	movs	r0, r3
 8011fe4:	f000 ff70 	bl	8012ec8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2211      	movs	r2, #17
 8011fec:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fee:	e00d      	b.n	801200c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2241      	movs	r2, #65	@ 0x41
 8011ff4:	5c9b      	ldrb	r3, [r3, r2]
 8011ff6:	b2db      	uxtb	r3, r3
 8011ff8:	2b22      	cmp	r3, #34	@ 0x22
 8011ffa:	d107      	bne.n	801200c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2102      	movs	r1, #2
 8012000:	0018      	movs	r0, r3
 8012002:	f000 ff61 	bl	8012ec8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2212      	movs	r2, #18
 801200a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	685a      	ldr	r2, [r3, #4]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	494e      	ldr	r1, [pc, #312]	@ (8012150 <I2C_ITMasterCplt+0x194>)
 8012018:	400a      	ands	r2, r1
 801201a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2200      	movs	r2, #0
 8012020:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	4a4b      	ldr	r2, [pc, #300]	@ (8012154 <I2C_ITMasterCplt+0x198>)
 8012026:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	2210      	movs	r2, #16
 801202c:	4013      	ands	r3, r2
 801202e:	d009      	beq.n	8012044 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2210      	movs	r2, #16
 8012036:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801203c:	2204      	movs	r2, #4
 801203e:	431a      	orrs	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2241      	movs	r2, #65	@ 0x41
 8012048:	5c9b      	ldrb	r3, [r3, r2]
 801204a:	b2db      	uxtb	r3, r3
 801204c:	2b60      	cmp	r3, #96	@ 0x60
 801204e:	d109      	bne.n	8012064 <I2C_ITMasterCplt+0xa8>
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	2204      	movs	r2, #4
 8012054:	4013      	ands	r3, r2
 8012056:	d005      	beq.n	8012064 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801205e:	b2db      	uxtb	r3, r3
 8012060:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8012062:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	0018      	movs	r0, r3
 8012068:	f000 fb19 	bl	801269e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012070:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2241      	movs	r2, #65	@ 0x41
 8012076:	5c9b      	ldrb	r3, [r3, r2]
 8012078:	b2db      	uxtb	r3, r3
 801207a:	2b60      	cmp	r3, #96	@ 0x60
 801207c:	d002      	beq.n	8012084 <I2C_ITMasterCplt+0xc8>
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d007      	beq.n	8012094 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	0011      	movs	r1, r2
 801208c:	0018      	movs	r0, r3
 801208e:	f000 f9db 	bl	8012448 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8012092:	e058      	b.n	8012146 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2241      	movs	r2, #65	@ 0x41
 8012098:	5c9b      	ldrb	r3, [r3, r2]
 801209a:	b2db      	uxtb	r3, r3
 801209c:	2b21      	cmp	r3, #33	@ 0x21
 801209e:	d126      	bne.n	80120ee <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2241      	movs	r2, #65	@ 0x41
 80120a4:	2120      	movs	r1, #32
 80120a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2200      	movs	r2, #0
 80120ac:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2242      	movs	r2, #66	@ 0x42
 80120b2:	5c9b      	ldrb	r3, [r3, r2]
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	2b40      	cmp	r3, #64	@ 0x40
 80120b8:	d10c      	bne.n	80120d4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2242      	movs	r2, #66	@ 0x42
 80120be:	2100      	movs	r1, #0
 80120c0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2240      	movs	r2, #64	@ 0x40
 80120c6:	2100      	movs	r1, #0
 80120c8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	0018      	movs	r0, r3
 80120ce:	f7ff f8e2 	bl	8011296 <HAL_I2C_MemTxCpltCallback>
}
 80120d2:	e038      	b.n	8012146 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2242      	movs	r2, #66	@ 0x42
 80120d8:	2100      	movs	r1, #0
 80120da:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2240      	movs	r2, #64	@ 0x40
 80120e0:	2100      	movs	r1, #0
 80120e2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	0018      	movs	r0, r3
 80120e8:	f7ff f89d 	bl	8011226 <HAL_I2C_MasterTxCpltCallback>
}
 80120ec:	e02b      	b.n	8012146 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2241      	movs	r2, #65	@ 0x41
 80120f2:	5c9b      	ldrb	r3, [r3, r2]
 80120f4:	b2db      	uxtb	r3, r3
 80120f6:	2b22      	cmp	r3, #34	@ 0x22
 80120f8:	d125      	bne.n	8012146 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2241      	movs	r2, #65	@ 0x41
 80120fe:	2120      	movs	r1, #32
 8012100:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2200      	movs	r2, #0
 8012106:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2242      	movs	r2, #66	@ 0x42
 801210c:	5c9b      	ldrb	r3, [r3, r2]
 801210e:	b2db      	uxtb	r3, r3
 8012110:	2b40      	cmp	r3, #64	@ 0x40
 8012112:	d10c      	bne.n	801212e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2242      	movs	r2, #66	@ 0x42
 8012118:	2100      	movs	r1, #0
 801211a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2240      	movs	r2, #64	@ 0x40
 8012120:	2100      	movs	r1, #0
 8012122:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	0018      	movs	r0, r3
 8012128:	f7ff f8bd 	bl	80112a6 <HAL_I2C_MemRxCpltCallback>
}
 801212c:	e00b      	b.n	8012146 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2242      	movs	r2, #66	@ 0x42
 8012132:	2100      	movs	r1, #0
 8012134:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2240      	movs	r2, #64	@ 0x40
 801213a:	2100      	movs	r1, #0
 801213c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	0018      	movs	r0, r3
 8012142:	f7ff f878 	bl	8011236 <HAL_I2C_MasterRxCpltCallback>
}
 8012146:	46c0      	nop			@ (mov r8, r8)
 8012148:	46bd      	mov	sp, r7
 801214a:	b006      	add	sp, #24
 801214c:	bd80      	pop	{r7, pc}
 801214e:	46c0      	nop			@ (mov r8, r8)
 8012150:	fe00e800 	.word	0xfe00e800
 8012154:	ffff0000 	.word	0xffff0000

08012158 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b086      	sub	sp, #24
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801216e:	200f      	movs	r0, #15
 8012170:	183b      	adds	r3, r7, r0
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	2141      	movs	r1, #65	@ 0x41
 8012176:	5c52      	ldrb	r2, [r2, r1]
 8012178:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2220      	movs	r2, #32
 8012180:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8012182:	183b      	adds	r3, r7, r0
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	2b21      	cmp	r3, #33	@ 0x21
 8012188:	d003      	beq.n	8012192 <I2C_ITSlaveCplt+0x3a>
 801218a:	183b      	adds	r3, r7, r0
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	2b29      	cmp	r3, #41	@ 0x29
 8012190:	d109      	bne.n	80121a6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8012192:	4a7b      	ldr	r2, [pc, #492]	@ (8012380 <I2C_ITSlaveCplt+0x228>)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	0011      	movs	r1, r2
 8012198:	0018      	movs	r0, r3
 801219a:	f000 fe95 	bl	8012ec8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2221      	movs	r2, #33	@ 0x21
 80121a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80121a4:	e011      	b.n	80121ca <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80121a6:	220f      	movs	r2, #15
 80121a8:	18bb      	adds	r3, r7, r2
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	2b22      	cmp	r3, #34	@ 0x22
 80121ae:	d003      	beq.n	80121b8 <I2C_ITSlaveCplt+0x60>
 80121b0:	18bb      	adds	r3, r7, r2
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80121b6:	d108      	bne.n	80121ca <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80121b8:	4a72      	ldr	r2, [pc, #456]	@ (8012384 <I2C_ITSlaveCplt+0x22c>)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	0011      	movs	r1, r2
 80121be:	0018      	movs	r0, r3
 80121c0:	f000 fe82 	bl	8012ec8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2222      	movs	r2, #34	@ 0x22
 80121c8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	685a      	ldr	r2, [r3, #4]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2180      	movs	r1, #128	@ 0x80
 80121d6:	0209      	lsls	r1, r1, #8
 80121d8:	430a      	orrs	r2, r1
 80121da:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	685a      	ldr	r2, [r3, #4]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4968      	ldr	r1, [pc, #416]	@ (8012388 <I2C_ITSlaveCplt+0x230>)
 80121e8:	400a      	ands	r2, r1
 80121ea:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	0018      	movs	r0, r3
 80121f0:	f000 fa55 	bl	801269e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80121f4:	693a      	ldr	r2, [r7, #16]
 80121f6:	2380      	movs	r3, #128	@ 0x80
 80121f8:	01db      	lsls	r3, r3, #7
 80121fa:	4013      	ands	r3, r2
 80121fc:	d013      	beq.n	8012226 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	681a      	ldr	r2, [r3, #0]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	4960      	ldr	r1, [pc, #384]	@ (801238c <I2C_ITSlaveCplt+0x234>)
 801220a:	400a      	ands	r2, r1
 801220c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012212:	2b00      	cmp	r3, #0
 8012214:	d01f      	beq.n	8012256 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	b29a      	uxth	r2, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012224:	e017      	b.n	8012256 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8012226:	693a      	ldr	r2, [r7, #16]
 8012228:	2380      	movs	r3, #128	@ 0x80
 801222a:	021b      	lsls	r3, r3, #8
 801222c:	4013      	ands	r3, r2
 801222e:	d012      	beq.n	8012256 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4955      	ldr	r1, [pc, #340]	@ (8012390 <I2C_ITSlaveCplt+0x238>)
 801223c:	400a      	ands	r2, r1
 801223e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012244:	2b00      	cmp	r3, #0
 8012246:	d006      	beq.n	8012256 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	685b      	ldr	r3, [r3, #4]
 8012250:	b29a      	uxth	r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2204      	movs	r2, #4
 801225a:	4013      	ands	r3, r2
 801225c:	d020      	beq.n	80122a0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2204      	movs	r2, #4
 8012262:	4393      	bics	r3, r2
 8012264:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012270:	b2d2      	uxtb	r2, r2
 8012272:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012278:	1c5a      	adds	r2, r3, #1
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012282:	2b00      	cmp	r3, #0
 8012284:	d00c      	beq.n	80122a0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801228a:	3b01      	subs	r3, #1
 801228c:	b29a      	uxth	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012296:	b29b      	uxth	r3, r3
 8012298:	3b01      	subs	r3, #1
 801229a:	b29a      	uxth	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d005      	beq.n	80122b6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122ae:	2204      	movs	r2, #4
 80122b0:	431a      	orrs	r2, r3
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2242      	movs	r2, #66	@ 0x42
 80122ba:	2100      	movs	r1, #0
 80122bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2200      	movs	r2, #0
 80122c2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d013      	beq.n	80122f4 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	0011      	movs	r1, r2
 80122d4:	0018      	movs	r0, r3
 80122d6:	f000 f8b7 	bl	8012448 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2241      	movs	r2, #65	@ 0x41
 80122de:	5c9b      	ldrb	r3, [r3, r2]
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	2b28      	cmp	r3, #40	@ 0x28
 80122e4:	d147      	bne.n	8012376 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80122e6:	697a      	ldr	r2, [r7, #20]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	0011      	movs	r1, r2
 80122ec:	0018      	movs	r0, r3
 80122ee:	f000 f853 	bl	8012398 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80122f2:	e040      	b.n	8012376 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122f8:	4a26      	ldr	r2, [pc, #152]	@ (8012394 <I2C_ITSlaveCplt+0x23c>)
 80122fa:	4293      	cmp	r3, r2
 80122fc:	d016      	beq.n	801232c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	0018      	movs	r0, r3
 8012302:	f7ff fdf7 	bl	8011ef4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	4a22      	ldr	r2, [pc, #136]	@ (8012394 <I2C_ITSlaveCplt+0x23c>)
 801230a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2241      	movs	r2, #65	@ 0x41
 8012310:	2120      	movs	r1, #32
 8012312:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2240      	movs	r2, #64	@ 0x40
 801231e:	2100      	movs	r1, #0
 8012320:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	0018      	movs	r0, r3
 8012326:	f7fe ffae 	bl	8011286 <HAL_I2C_ListenCpltCallback>
}
 801232a:	e024      	b.n	8012376 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2241      	movs	r2, #65	@ 0x41
 8012330:	5c9b      	ldrb	r3, [r3, r2]
 8012332:	b2db      	uxtb	r3, r3
 8012334:	2b22      	cmp	r3, #34	@ 0x22
 8012336:	d10f      	bne.n	8012358 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2241      	movs	r2, #65	@ 0x41
 801233c:	2120      	movs	r1, #32
 801233e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2240      	movs	r2, #64	@ 0x40
 801234a:	2100      	movs	r1, #0
 801234c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	0018      	movs	r0, r3
 8012352:	f7fe ff80 	bl	8011256 <HAL_I2C_SlaveRxCpltCallback>
}
 8012356:	e00e      	b.n	8012376 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2241      	movs	r2, #65	@ 0x41
 801235c:	2120      	movs	r1, #32
 801235e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2240      	movs	r2, #64	@ 0x40
 801236a:	2100      	movs	r1, #0
 801236c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	0018      	movs	r0, r3
 8012372:	f7fe ff68 	bl	8011246 <HAL_I2C_SlaveTxCpltCallback>
}
 8012376:	46c0      	nop			@ (mov r8, r8)
 8012378:	46bd      	mov	sp, r7
 801237a:	b006      	add	sp, #24
 801237c:	bd80      	pop	{r7, pc}
 801237e:	46c0      	nop			@ (mov r8, r8)
 8012380:	00008001 	.word	0x00008001
 8012384:	00008002 	.word	0x00008002
 8012388:	fe00e800 	.word	0xfe00e800
 801238c:	ffffbfff 	.word	0xffffbfff
 8012390:	ffff7fff 	.word	0xffff7fff
 8012394:	ffff0000 	.word	0xffff0000

08012398 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	4a26      	ldr	r2, [pc, #152]	@ (8012440 <I2C_ITListenCplt+0xa8>)
 80123a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2200      	movs	r2, #0
 80123ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2241      	movs	r2, #65	@ 0x41
 80123b2:	2120      	movs	r1, #32
 80123b4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2242      	movs	r2, #66	@ 0x42
 80123ba:	2100      	movs	r1, #0
 80123bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	2204      	movs	r2, #4
 80123c8:	4013      	ands	r3, r2
 80123ca:	d022      	beq.n	8012412 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123d6:	b2d2      	uxtb	r2, r2
 80123d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123de:	1c5a      	adds	r2, r3, #1
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d012      	beq.n	8012412 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80123f0:	3b01      	subs	r3, #1
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	3b01      	subs	r3, #1
 8012400:	b29a      	uxth	r2, r3
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801240a:	2204      	movs	r2, #4
 801240c:	431a      	orrs	r2, r3
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012412:	4a0c      	ldr	r2, [pc, #48]	@ (8012444 <I2C_ITListenCplt+0xac>)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	0011      	movs	r1, r2
 8012418:	0018      	movs	r0, r3
 801241a:	f000 fd55 	bl	8012ec8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	2210      	movs	r2, #16
 8012424:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2240      	movs	r2, #64	@ 0x40
 801242a:	2100      	movs	r1, #0
 801242c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	0018      	movs	r0, r3
 8012432:	f7fe ff28 	bl	8011286 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8012436:	46c0      	nop			@ (mov r8, r8)
 8012438:	46bd      	mov	sp, r7
 801243a:	b002      	add	sp, #8
 801243c:	bd80      	pop	{r7, pc}
 801243e:	46c0      	nop			@ (mov r8, r8)
 8012440:	ffff0000 	.word	0xffff0000
 8012444:	00008003 	.word	0x00008003

08012448 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8012452:	200f      	movs	r0, #15
 8012454:	183b      	adds	r3, r7, r0
 8012456:	687a      	ldr	r2, [r7, #4]
 8012458:	2141      	movs	r1, #65	@ 0x41
 801245a:	5c52      	ldrb	r2, [r2, r1]
 801245c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2242      	movs	r2, #66	@ 0x42
 8012462:	2100      	movs	r1, #0
 8012464:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4a72      	ldr	r2, [pc, #456]	@ (8012634 <I2C_ITError+0x1ec>)
 801246a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2200      	movs	r2, #0
 8012470:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	431a      	orrs	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801247e:	183b      	adds	r3, r7, r0
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	2b28      	cmp	r3, #40	@ 0x28
 8012484:	d007      	beq.n	8012496 <I2C_ITError+0x4e>
 8012486:	183b      	adds	r3, r7, r0
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	2b29      	cmp	r3, #41	@ 0x29
 801248c:	d003      	beq.n	8012496 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801248e:	183b      	adds	r3, r7, r0
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	2b2a      	cmp	r3, #42	@ 0x2a
 8012494:	d10c      	bne.n	80124b0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2103      	movs	r1, #3
 801249a:	0018      	movs	r0, r3
 801249c:	f000 fd14 	bl	8012ec8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2241      	movs	r2, #65	@ 0x41
 80124a4:	2128      	movs	r1, #40	@ 0x28
 80124a6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	4a63      	ldr	r2, [pc, #396]	@ (8012638 <I2C_ITError+0x1f0>)
 80124ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80124ae:	e032      	b.n	8012516 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80124b0:	4a62      	ldr	r2, [pc, #392]	@ (801263c <I2C_ITError+0x1f4>)
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	0011      	movs	r1, r2
 80124b6:	0018      	movs	r0, r3
 80124b8:	f000 fd06 	bl	8012ec8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	0018      	movs	r0, r3
 80124c0:	f000 f8ed 	bl	801269e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2241      	movs	r2, #65	@ 0x41
 80124c8:	5c9b      	ldrb	r3, [r3, r2]
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	2b60      	cmp	r3, #96	@ 0x60
 80124ce:	d01f      	beq.n	8012510 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2241      	movs	r2, #65	@ 0x41
 80124d4:	2120      	movs	r1, #32
 80124d6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	699b      	ldr	r3, [r3, #24]
 80124de:	2220      	movs	r2, #32
 80124e0:	4013      	ands	r3, r2
 80124e2:	2b20      	cmp	r3, #32
 80124e4:	d114      	bne.n	8012510 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	699b      	ldr	r3, [r3, #24]
 80124ec:	2210      	movs	r2, #16
 80124ee:	4013      	ands	r3, r2
 80124f0:	2b10      	cmp	r3, #16
 80124f2:	d109      	bne.n	8012508 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2210      	movs	r2, #16
 80124fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012500:	2204      	movs	r2, #4
 8012502:	431a      	orrs	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2220      	movs	r2, #32
 801250e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2200      	movs	r2, #0
 8012514:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801251a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012520:	2b00      	cmp	r3, #0
 8012522:	d03b      	beq.n	801259c <I2C_ITError+0x154>
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	2b11      	cmp	r3, #17
 8012528:	d002      	beq.n	8012530 <I2C_ITError+0xe8>
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	2b21      	cmp	r3, #33	@ 0x21
 801252e:	d135      	bne.n	801259c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	2380      	movs	r3, #128	@ 0x80
 8012538:	01db      	lsls	r3, r3, #7
 801253a:	401a      	ands	r2, r3
 801253c:	2380      	movs	r3, #128	@ 0x80
 801253e:	01db      	lsls	r3, r3, #7
 8012540:	429a      	cmp	r2, r3
 8012542:	d107      	bne.n	8012554 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	493c      	ldr	r1, [pc, #240]	@ (8012640 <I2C_ITError+0x1f8>)
 8012550:	400a      	ands	r2, r1
 8012552:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012558:	0018      	movs	r0, r3
 801255a:	f7fd fd62 	bl	8010022 <HAL_DMA_GetState>
 801255e:	0003      	movs	r3, r0
 8012560:	2b01      	cmp	r3, #1
 8012562:	d016      	beq.n	8012592 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012568:	4a36      	ldr	r2, [pc, #216]	@ (8012644 <I2C_ITError+0x1fc>)
 801256a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2240      	movs	r2, #64	@ 0x40
 8012570:	2100      	movs	r1, #0
 8012572:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012578:	0018      	movs	r0, r3
 801257a:	f7fd fc5d 	bl	800fe38 <HAL_DMA_Abort_IT>
 801257e:	1e03      	subs	r3, r0, #0
 8012580:	d051      	beq.n	8012626 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801258c:	0018      	movs	r0, r3
 801258e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012590:	e049      	b.n	8012626 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	0018      	movs	r0, r3
 8012596:	f000 f859 	bl	801264c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801259a:	e044      	b.n	8012626 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d03b      	beq.n	801261c <I2C_ITError+0x1d4>
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	2b12      	cmp	r3, #18
 80125a8:	d002      	beq.n	80125b0 <I2C_ITError+0x168>
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	2b22      	cmp	r3, #34	@ 0x22
 80125ae:	d135      	bne.n	801261c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	681a      	ldr	r2, [r3, #0]
 80125b6:	2380      	movs	r3, #128	@ 0x80
 80125b8:	021b      	lsls	r3, r3, #8
 80125ba:	401a      	ands	r2, r3
 80125bc:	2380      	movs	r3, #128	@ 0x80
 80125be:	021b      	lsls	r3, r3, #8
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d107      	bne.n	80125d4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	491e      	ldr	r1, [pc, #120]	@ (8012648 <I2C_ITError+0x200>)
 80125d0:	400a      	ands	r2, r1
 80125d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80125d8:	0018      	movs	r0, r3
 80125da:	f7fd fd22 	bl	8010022 <HAL_DMA_GetState>
 80125de:	0003      	movs	r3, r0
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	d016      	beq.n	8012612 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80125e8:	4a16      	ldr	r2, [pc, #88]	@ (8012644 <I2C_ITError+0x1fc>)
 80125ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2240      	movs	r2, #64	@ 0x40
 80125f0:	2100      	movs	r1, #0
 80125f2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80125f8:	0018      	movs	r0, r3
 80125fa:	f7fd fc1d 	bl	800fe38 <HAL_DMA_Abort_IT>
 80125fe:	1e03      	subs	r3, r0, #0
 8012600:	d013      	beq.n	801262a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801260c:	0018      	movs	r0, r3
 801260e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012610:	e00b      	b.n	801262a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	0018      	movs	r0, r3
 8012616:	f000 f819 	bl	801264c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801261a:	e006      	b.n	801262a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	0018      	movs	r0, r3
 8012620:	f000 f814 	bl	801264c <I2C_TreatErrorCallback>
  }
}
 8012624:	e002      	b.n	801262c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012626:	46c0      	nop			@ (mov r8, r8)
 8012628:	e000      	b.n	801262c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801262a:	46c0      	nop			@ (mov r8, r8)
}
 801262c:	46c0      	nop			@ (mov r8, r8)
 801262e:	46bd      	mov	sp, r7
 8012630:	b004      	add	sp, #16
 8012632:	bd80      	pop	{r7, pc}
 8012634:	ffff0000 	.word	0xffff0000
 8012638:	0801152d 	.word	0x0801152d
 801263c:	00008003 	.word	0x00008003
 8012640:	ffffbfff 	.word	0xffffbfff
 8012644:	08012857 	.word	0x08012857
 8012648:	ffff7fff 	.word	0xffff7fff

0801264c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2241      	movs	r2, #65	@ 0x41
 8012658:	5c9b      	ldrb	r3, [r3, r2]
 801265a:	b2db      	uxtb	r3, r3
 801265c:	2b60      	cmp	r3, #96	@ 0x60
 801265e:	d10f      	bne.n	8012680 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2241      	movs	r2, #65	@ 0x41
 8012664:	2120      	movs	r1, #32
 8012666:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2200      	movs	r2, #0
 801266c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2240      	movs	r2, #64	@ 0x40
 8012672:	2100      	movs	r1, #0
 8012674:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	0018      	movs	r0, r3
 801267a:	f7fe fe24 	bl	80112c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801267e:	e00a      	b.n	8012696 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2240      	movs	r2, #64	@ 0x40
 801268a:	2100      	movs	r1, #0
 801268c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	0018      	movs	r0, r3
 8012692:	f7fe fe10 	bl	80112b6 <HAL_I2C_ErrorCallback>
}
 8012696:	46c0      	nop			@ (mov r8, r8)
 8012698:	46bd      	mov	sp, r7
 801269a:	b002      	add	sp, #8
 801269c:	bd80      	pop	{r7, pc}

0801269e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801269e:	b580      	push	{r7, lr}
 80126a0:	b082      	sub	sp, #8
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	699b      	ldr	r3, [r3, #24]
 80126ac:	2202      	movs	r2, #2
 80126ae:	4013      	ands	r3, r2
 80126b0:	2b02      	cmp	r3, #2
 80126b2:	d103      	bne.n	80126bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2200      	movs	r2, #0
 80126ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	699b      	ldr	r3, [r3, #24]
 80126c2:	2201      	movs	r2, #1
 80126c4:	4013      	ands	r3, r2
 80126c6:	2b01      	cmp	r3, #1
 80126c8:	d007      	beq.n	80126da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	699a      	ldr	r2, [r3, #24]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	2101      	movs	r1, #1
 80126d6:	430a      	orrs	r2, r1
 80126d8:	619a      	str	r2, [r3, #24]
  }
}
 80126da:	46c0      	nop			@ (mov r8, r8)
 80126dc:	46bd      	mov	sp, r7
 80126de:	b002      	add	sp, #8
 80126e0:	bd80      	pop	{r7, pc}
	...

080126e4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126f0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	681a      	ldr	r2, [r3, #0]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	4920      	ldr	r1, [pc, #128]	@ (8012780 <I2C_DMAMasterTransmitCplt+0x9c>)
 80126fe:	400a      	ands	r2, r1
 8012700:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012706:	b29b      	uxth	r3, r3
 8012708:	2b00      	cmp	r3, #0
 801270a:	d105      	bne.n	8012718 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	2120      	movs	r1, #32
 8012710:	0018      	movs	r0, r3
 8012712:	f000 fb4b 	bl	8012dac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012716:	e02e      	b.n	8012776 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801271c:	68fa      	ldr	r2, [r7, #12]
 801271e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012720:	189a      	adds	r2, r3, r2
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801272a:	b29b      	uxth	r3, r3
 801272c:	2bff      	cmp	r3, #255	@ 0xff
 801272e:	d903      	bls.n	8012738 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	22ff      	movs	r2, #255	@ 0xff
 8012734:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012736:	e004      	b.n	8012742 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801273c:	b29a      	uxth	r2, r3
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801274a:	0019      	movs	r1, r3
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	3328      	adds	r3, #40	@ 0x28
 8012752:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012758:	f7fd fac8 	bl	800fcec <HAL_DMA_Start_IT>
 801275c:	1e03      	subs	r3, r0, #0
 801275e:	d005      	beq.n	801276c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	2110      	movs	r1, #16
 8012764:	0018      	movs	r0, r3
 8012766:	f7ff fe6f 	bl	8012448 <I2C_ITError>
}
 801276a:	e004      	b.n	8012776 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2140      	movs	r1, #64	@ 0x40
 8012770:	0018      	movs	r0, r3
 8012772:	f000 fb1b 	bl	8012dac <I2C_Enable_IRQ>
}
 8012776:	46c0      	nop			@ (mov r8, r8)
 8012778:	46bd      	mov	sp, r7
 801277a:	b004      	add	sp, #16
 801277c:	bd80      	pop	{r7, pc}
 801277e:	46c0      	nop			@ (mov r8, r8)
 8012780:	ffffbfff 	.word	0xffffbfff

08012784 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b084      	sub	sp, #16
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012790:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	4920      	ldr	r1, [pc, #128]	@ (8012820 <I2C_DMAMasterReceiveCplt+0x9c>)
 801279e:	400a      	ands	r2, r1
 80127a0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d105      	bne.n	80127b8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2120      	movs	r1, #32
 80127b0:	0018      	movs	r0, r3
 80127b2:	f000 fafb 	bl	8012dac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80127b6:	e02e      	b.n	8012816 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127bc:	68fa      	ldr	r2, [r7, #12]
 80127be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80127c0:	189a      	adds	r2, r3, r2
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	2bff      	cmp	r3, #255	@ 0xff
 80127ce:	d903      	bls.n	80127d8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	22ff      	movs	r2, #255	@ 0xff
 80127d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80127d6:	e004      	b.n	80127e2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127dc:	b29a      	uxth	r2, r3
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	3324      	adds	r3, #36	@ 0x24
 80127ec:	0019      	movs	r1, r3
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127f2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80127f8:	f7fd fa78 	bl	800fcec <HAL_DMA_Start_IT>
 80127fc:	1e03      	subs	r3, r0, #0
 80127fe:	d005      	beq.n	801280c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2110      	movs	r1, #16
 8012804:	0018      	movs	r0, r3
 8012806:	f7ff fe1f 	bl	8012448 <I2C_ITError>
}
 801280a:	e004      	b.n	8012816 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	2140      	movs	r1, #64	@ 0x40
 8012810:	0018      	movs	r0, r3
 8012812:	f000 facb 	bl	8012dac <I2C_Enable_IRQ>
}
 8012816:	46c0      	nop			@ (mov r8, r8)
 8012818:	46bd      	mov	sp, r7
 801281a:	b004      	add	sp, #16
 801281c:	bd80      	pop	{r7, pc}
 801281e:	46c0      	nop			@ (mov r8, r8)
 8012820:	ffff7fff 	.word	0xffff7fff

08012824 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012830:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	685a      	ldr	r2, [r3, #4]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	2180      	movs	r1, #128	@ 0x80
 801283e:	0209      	lsls	r1, r1, #8
 8012840:	430a      	orrs	r2, r1
 8012842:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2110      	movs	r1, #16
 8012848:	0018      	movs	r0, r3
 801284a:	f7ff fdfd 	bl	8012448 <I2C_ITError>
}
 801284e:	46c0      	nop			@ (mov r8, r8)
 8012850:	46bd      	mov	sp, r7
 8012852:	b004      	add	sp, #16
 8012854:	bd80      	pop	{r7, pc}

08012856 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012856:	b580      	push	{r7, lr}
 8012858:	b084      	sub	sp, #16
 801285a:	af00      	add	r7, sp, #0
 801285c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012862:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012868:	2b00      	cmp	r3, #0
 801286a:	d003      	beq.n	8012874 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012870:	2200      	movs	r2, #0
 8012872:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012878:	2b00      	cmp	r3, #0
 801287a:	d003      	beq.n	8012884 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012880:	2200      	movs	r2, #0
 8012882:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	0018      	movs	r0, r3
 8012888:	f7ff fee0 	bl	801264c <I2C_TreatErrorCallback>
}
 801288c:	46c0      	nop			@ (mov r8, r8)
 801288e:	46bd      	mov	sp, r7
 8012890:	b004      	add	sp, #16
 8012892:	bd80      	pop	{r7, pc}

08012894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	603b      	str	r3, [r7, #0]
 80128a0:	1dfb      	adds	r3, r7, #7
 80128a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80128a4:	e030      	b.n	8012908 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	3301      	adds	r3, #1
 80128aa:	d02d      	beq.n	8012908 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80128ac:	f7fc fccc 	bl	800f248 <HAL_GetTick>
 80128b0:	0002      	movs	r2, r0
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	1ad3      	subs	r3, r2, r3
 80128b6:	683a      	ldr	r2, [r7, #0]
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d302      	bcc.n	80128c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d122      	bne.n	8012908 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	699b      	ldr	r3, [r3, #24]
 80128c8:	68ba      	ldr	r2, [r7, #8]
 80128ca:	4013      	ands	r3, r2
 80128cc:	68ba      	ldr	r2, [r7, #8]
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	425a      	negs	r2, r3
 80128d2:	4153      	adcs	r3, r2
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	001a      	movs	r2, r3
 80128d8:	1dfb      	adds	r3, r7, #7
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d113      	bne.n	8012908 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128e4:	2220      	movs	r2, #32
 80128e6:	431a      	orrs	r2, r3
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2241      	movs	r2, #65	@ 0x41
 80128f0:	2120      	movs	r1, #32
 80128f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2242      	movs	r2, #66	@ 0x42
 80128f8:	2100      	movs	r1, #0
 80128fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	2240      	movs	r2, #64	@ 0x40
 8012900:	2100      	movs	r1, #0
 8012902:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012904:	2301      	movs	r3, #1
 8012906:	e00f      	b.n	8012928 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	699b      	ldr	r3, [r3, #24]
 801290e:	68ba      	ldr	r2, [r7, #8]
 8012910:	4013      	ands	r3, r2
 8012912:	68ba      	ldr	r2, [r7, #8]
 8012914:	1ad3      	subs	r3, r2, r3
 8012916:	425a      	negs	r2, r3
 8012918:	4153      	adcs	r3, r2
 801291a:	b2db      	uxtb	r3, r3
 801291c:	001a      	movs	r2, r3
 801291e:	1dfb      	adds	r3, r7, #7
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	429a      	cmp	r2, r3
 8012924:	d0bf      	beq.n	80128a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012926:	2300      	movs	r3, #0
}
 8012928:	0018      	movs	r0, r3
 801292a:	46bd      	mov	sp, r7
 801292c:	b004      	add	sp, #16
 801292e:	bd80      	pop	{r7, pc}

08012930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801293c:	e032      	b.n	80129a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	68b9      	ldr	r1, [r7, #8]
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	0018      	movs	r0, r3
 8012946:	f000 f8ff 	bl	8012b48 <I2C_IsErrorOccurred>
 801294a:	1e03      	subs	r3, r0, #0
 801294c:	d001      	beq.n	8012952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801294e:	2301      	movs	r3, #1
 8012950:	e030      	b.n	80129b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	3301      	adds	r3, #1
 8012956:	d025      	beq.n	80129a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012958:	f7fc fc76 	bl	800f248 <HAL_GetTick>
 801295c:	0002      	movs	r2, r0
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	1ad3      	subs	r3, r2, r3
 8012962:	68ba      	ldr	r2, [r7, #8]
 8012964:	429a      	cmp	r2, r3
 8012966:	d302      	bcc.n	801296e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d11a      	bne.n	80129a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	699b      	ldr	r3, [r3, #24]
 8012974:	2202      	movs	r2, #2
 8012976:	4013      	ands	r3, r2
 8012978:	2b02      	cmp	r3, #2
 801297a:	d013      	beq.n	80129a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012980:	2220      	movs	r2, #32
 8012982:	431a      	orrs	r2, r3
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	2241      	movs	r2, #65	@ 0x41
 801298c:	2120      	movs	r1, #32
 801298e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	2242      	movs	r2, #66	@ 0x42
 8012994:	2100      	movs	r1, #0
 8012996:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2240      	movs	r2, #64	@ 0x40
 801299c:	2100      	movs	r1, #0
 801299e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80129a0:	2301      	movs	r3, #1
 80129a2:	e007      	b.n	80129b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	699b      	ldr	r3, [r3, #24]
 80129aa:	2202      	movs	r2, #2
 80129ac:	4013      	ands	r3, r2
 80129ae:	2b02      	cmp	r3, #2
 80129b0:	d1c5      	bne.n	801293e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80129b2:	2300      	movs	r3, #0
}
 80129b4:	0018      	movs	r0, r3
 80129b6:	46bd      	mov	sp, r7
 80129b8:	b004      	add	sp, #16
 80129ba:	bd80      	pop	{r7, pc}

080129bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b084      	sub	sp, #16
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	60b9      	str	r1, [r7, #8]
 80129c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80129c8:	e02f      	b.n	8012a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80129ca:	687a      	ldr	r2, [r7, #4]
 80129cc:	68b9      	ldr	r1, [r7, #8]
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	0018      	movs	r0, r3
 80129d2:	f000 f8b9 	bl	8012b48 <I2C_IsErrorOccurred>
 80129d6:	1e03      	subs	r3, r0, #0
 80129d8:	d001      	beq.n	80129de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80129da:	2301      	movs	r3, #1
 80129dc:	e02d      	b.n	8012a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80129de:	f7fc fc33 	bl	800f248 <HAL_GetTick>
 80129e2:	0002      	movs	r2, r0
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	1ad3      	subs	r3, r2, r3
 80129e8:	68ba      	ldr	r2, [r7, #8]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d302      	bcc.n	80129f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d11a      	bne.n	8012a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	699b      	ldr	r3, [r3, #24]
 80129fa:	2220      	movs	r2, #32
 80129fc:	4013      	ands	r3, r2
 80129fe:	2b20      	cmp	r3, #32
 8012a00:	d013      	beq.n	8012a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a06:	2220      	movs	r2, #32
 8012a08:	431a      	orrs	r2, r3
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2241      	movs	r2, #65	@ 0x41
 8012a12:	2120      	movs	r1, #32
 8012a14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2242      	movs	r2, #66	@ 0x42
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2240      	movs	r2, #64	@ 0x40
 8012a22:	2100      	movs	r1, #0
 8012a24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012a26:	2301      	movs	r3, #1
 8012a28:	e007      	b.n	8012a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	699b      	ldr	r3, [r3, #24]
 8012a30:	2220      	movs	r2, #32
 8012a32:	4013      	ands	r3, r2
 8012a34:	2b20      	cmp	r3, #32
 8012a36:	d1c8      	bne.n	80129ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012a38:	2300      	movs	r3, #0
}
 8012a3a:	0018      	movs	r0, r3
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	b004      	add	sp, #16
 8012a40:	bd80      	pop	{r7, pc}
	...

08012a44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	60f8      	str	r0, [r7, #12]
 8012a4c:	60b9      	str	r1, [r7, #8]
 8012a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012a50:	e06b      	b.n	8012b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	68b9      	ldr	r1, [r7, #8]
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	0018      	movs	r0, r3
 8012a5a:	f000 f875 	bl	8012b48 <I2C_IsErrorOccurred>
 8012a5e:	1e03      	subs	r3, r0, #0
 8012a60:	d001      	beq.n	8012a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012a62:	2301      	movs	r3, #1
 8012a64:	e069      	b.n	8012b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	699b      	ldr	r3, [r3, #24]
 8012a6c:	2220      	movs	r2, #32
 8012a6e:	4013      	ands	r3, r2
 8012a70:	2b20      	cmp	r3, #32
 8012a72:	d138      	bne.n	8012ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	699b      	ldr	r3, [r3, #24]
 8012a7a:	2204      	movs	r2, #4
 8012a7c:	4013      	ands	r3, r2
 8012a7e:	2b04      	cmp	r3, #4
 8012a80:	d105      	bne.n	8012a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d001      	beq.n	8012a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	e055      	b.n	8012b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	699b      	ldr	r3, [r3, #24]
 8012a94:	2210      	movs	r2, #16
 8012a96:	4013      	ands	r3, r2
 8012a98:	2b10      	cmp	r3, #16
 8012a9a:	d107      	bne.n	8012aac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	2210      	movs	r2, #16
 8012aa2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	2204      	movs	r2, #4
 8012aa8:	645a      	str	r2, [r3, #68]	@ 0x44
 8012aaa:	e002      	b.n	8012ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	2220      	movs	r2, #32
 8012ab8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	685a      	ldr	r2, [r3, #4]
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	491f      	ldr	r1, [pc, #124]	@ (8012b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8012ac6:	400a      	ands	r2, r1
 8012ac8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2241      	movs	r2, #65	@ 0x41
 8012ace:	2120      	movs	r1, #32
 8012ad0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2242      	movs	r2, #66	@ 0x42
 8012ad6:	2100      	movs	r1, #0
 8012ad8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2240      	movs	r2, #64	@ 0x40
 8012ade:	2100      	movs	r1, #0
 8012ae0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	e029      	b.n	8012b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ae6:	f7fc fbaf 	bl	800f248 <HAL_GetTick>
 8012aea:	0002      	movs	r2, r0
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	1ad3      	subs	r3, r2, r3
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d302      	bcc.n	8012afc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d116      	bne.n	8012b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	699b      	ldr	r3, [r3, #24]
 8012b02:	2204      	movs	r2, #4
 8012b04:	4013      	ands	r3, r2
 8012b06:	2b04      	cmp	r3, #4
 8012b08:	d00f      	beq.n	8012b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b0e:	2220      	movs	r2, #32
 8012b10:	431a      	orrs	r2, r3
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	2241      	movs	r2, #65	@ 0x41
 8012b1a:	2120      	movs	r1, #32
 8012b1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2240      	movs	r2, #64	@ 0x40
 8012b22:	2100      	movs	r1, #0
 8012b24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012b26:	2301      	movs	r3, #1
 8012b28:	e007      	b.n	8012b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	699b      	ldr	r3, [r3, #24]
 8012b30:	2204      	movs	r2, #4
 8012b32:	4013      	ands	r3, r2
 8012b34:	2b04      	cmp	r3, #4
 8012b36:	d18c      	bne.n	8012a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012b38:	2300      	movs	r3, #0
}
 8012b3a:	0018      	movs	r0, r3
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	b004      	add	sp, #16
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	46c0      	nop			@ (mov r8, r8)
 8012b44:	fe00e800 	.word	0xfe00e800

08012b48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b08a      	sub	sp, #40	@ 0x28
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012b54:	2327      	movs	r3, #39	@ 0x27
 8012b56:	18fb      	adds	r3, r7, r3
 8012b58:	2200      	movs	r2, #0
 8012b5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	699b      	ldr	r3, [r3, #24]
 8012b62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012b64:	2300      	movs	r3, #0
 8012b66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	2210      	movs	r2, #16
 8012b70:	4013      	ands	r3, r2
 8012b72:	d100      	bne.n	8012b76 <I2C_IsErrorOccurred+0x2e>
 8012b74:	e079      	b.n	8012c6a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2210      	movs	r2, #16
 8012b7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012b7e:	e057      	b.n	8012c30 <I2C_IsErrorOccurred+0xe8>
 8012b80:	2227      	movs	r2, #39	@ 0x27
 8012b82:	18bb      	adds	r3, r7, r2
 8012b84:	18ba      	adds	r2, r7, r2
 8012b86:	7812      	ldrb	r2, [r2, #0]
 8012b88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	d04f      	beq.n	8012c30 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012b90:	f7fc fb5a 	bl	800f248 <HAL_GetTick>
 8012b94:	0002      	movs	r2, r0
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	1ad3      	subs	r3, r2, r3
 8012b9a:	68ba      	ldr	r2, [r7, #8]
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d302      	bcc.n	8012ba6 <I2C_IsErrorOccurred+0x5e>
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d144      	bne.n	8012c30 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	685a      	ldr	r2, [r3, #4]
 8012bac:	2380      	movs	r3, #128	@ 0x80
 8012bae:	01db      	lsls	r3, r3, #7
 8012bb0:	4013      	ands	r3, r2
 8012bb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012bb4:	2013      	movs	r0, #19
 8012bb6:	183b      	adds	r3, r7, r0
 8012bb8:	68fa      	ldr	r2, [r7, #12]
 8012bba:	2142      	movs	r1, #66	@ 0x42
 8012bbc:	5c52      	ldrb	r2, [r2, r1]
 8012bbe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	699a      	ldr	r2, [r3, #24]
 8012bc6:	2380      	movs	r3, #128	@ 0x80
 8012bc8:	021b      	lsls	r3, r3, #8
 8012bca:	401a      	ands	r2, r3
 8012bcc:	2380      	movs	r3, #128	@ 0x80
 8012bce:	021b      	lsls	r3, r3, #8
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d126      	bne.n	8012c22 <I2C_IsErrorOccurred+0xda>
 8012bd4:	697a      	ldr	r2, [r7, #20]
 8012bd6:	2380      	movs	r3, #128	@ 0x80
 8012bd8:	01db      	lsls	r3, r3, #7
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d021      	beq.n	8012c22 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012bde:	183b      	adds	r3, r7, r0
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	2b20      	cmp	r3, #32
 8012be4:	d01d      	beq.n	8012c22 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	685a      	ldr	r2, [r3, #4]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2180      	movs	r1, #128	@ 0x80
 8012bf2:	01c9      	lsls	r1, r1, #7
 8012bf4:	430a      	orrs	r2, r1
 8012bf6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012bf8:	f7fc fb26 	bl	800f248 <HAL_GetTick>
 8012bfc:	0003      	movs	r3, r0
 8012bfe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012c00:	e00f      	b.n	8012c22 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8012c02:	f7fc fb21 	bl	800f248 <HAL_GetTick>
 8012c06:	0002      	movs	r2, r0
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	1ad3      	subs	r3, r2, r3
 8012c0c:	2b19      	cmp	r3, #25
 8012c0e:	d908      	bls.n	8012c22 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8012c10:	6a3b      	ldr	r3, [r7, #32]
 8012c12:	2220      	movs	r2, #32
 8012c14:	4313      	orrs	r3, r2
 8012c16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012c18:	2327      	movs	r3, #39	@ 0x27
 8012c1a:	18fb      	adds	r3, r7, r3
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	701a      	strb	r2, [r3, #0]

              break;
 8012c20:	e006      	b.n	8012c30 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	699b      	ldr	r3, [r3, #24]
 8012c28:	2220      	movs	r2, #32
 8012c2a:	4013      	ands	r3, r2
 8012c2c:	2b20      	cmp	r3, #32
 8012c2e:	d1e8      	bne.n	8012c02 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	699b      	ldr	r3, [r3, #24]
 8012c36:	2220      	movs	r2, #32
 8012c38:	4013      	ands	r3, r2
 8012c3a:	2b20      	cmp	r3, #32
 8012c3c:	d004      	beq.n	8012c48 <I2C_IsErrorOccurred+0x100>
 8012c3e:	2327      	movs	r3, #39	@ 0x27
 8012c40:	18fb      	adds	r3, r7, r3
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d09b      	beq.n	8012b80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012c48:	2327      	movs	r3, #39	@ 0x27
 8012c4a:	18fb      	adds	r3, r7, r3
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d103      	bne.n	8012c5a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2220      	movs	r2, #32
 8012c58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012c5a:	6a3b      	ldr	r3, [r7, #32]
 8012c5c:	2204      	movs	r2, #4
 8012c5e:	4313      	orrs	r3, r2
 8012c60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012c62:	2327      	movs	r3, #39	@ 0x27
 8012c64:	18fb      	adds	r3, r7, r3
 8012c66:	2201      	movs	r2, #1
 8012c68:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	699b      	ldr	r3, [r3, #24]
 8012c70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012c72:	69ba      	ldr	r2, [r7, #24]
 8012c74:	2380      	movs	r3, #128	@ 0x80
 8012c76:	005b      	lsls	r3, r3, #1
 8012c78:	4013      	ands	r3, r2
 8012c7a:	d00c      	beq.n	8012c96 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012c7c:	6a3b      	ldr	r3, [r7, #32]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	4313      	orrs	r3, r2
 8012c82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	2280      	movs	r2, #128	@ 0x80
 8012c8a:	0052      	lsls	r2, r2, #1
 8012c8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012c8e:	2327      	movs	r3, #39	@ 0x27
 8012c90:	18fb      	adds	r3, r7, r3
 8012c92:	2201      	movs	r2, #1
 8012c94:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012c96:	69ba      	ldr	r2, [r7, #24]
 8012c98:	2380      	movs	r3, #128	@ 0x80
 8012c9a:	00db      	lsls	r3, r3, #3
 8012c9c:	4013      	ands	r3, r2
 8012c9e:	d00c      	beq.n	8012cba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012ca0:	6a3b      	ldr	r3, [r7, #32]
 8012ca2:	2208      	movs	r2, #8
 8012ca4:	4313      	orrs	r3, r2
 8012ca6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2280      	movs	r2, #128	@ 0x80
 8012cae:	00d2      	lsls	r2, r2, #3
 8012cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012cb2:	2327      	movs	r3, #39	@ 0x27
 8012cb4:	18fb      	adds	r3, r7, r3
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012cba:	69ba      	ldr	r2, [r7, #24]
 8012cbc:	2380      	movs	r3, #128	@ 0x80
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	4013      	ands	r3, r2
 8012cc2:	d00c      	beq.n	8012cde <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012cc4:	6a3b      	ldr	r3, [r7, #32]
 8012cc6:	2202      	movs	r2, #2
 8012cc8:	4313      	orrs	r3, r2
 8012cca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	2280      	movs	r2, #128	@ 0x80
 8012cd2:	0092      	lsls	r2, r2, #2
 8012cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012cd6:	2327      	movs	r3, #39	@ 0x27
 8012cd8:	18fb      	adds	r3, r7, r3
 8012cda:	2201      	movs	r2, #1
 8012cdc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012cde:	2327      	movs	r3, #39	@ 0x27
 8012ce0:	18fb      	adds	r3, r7, r3
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d01d      	beq.n	8012d24 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	0018      	movs	r0, r3
 8012cec:	f7ff fcd7 	bl	801269e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	685a      	ldr	r2, [r3, #4]
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	490e      	ldr	r1, [pc, #56]	@ (8012d34 <I2C_IsErrorOccurred+0x1ec>)
 8012cfc:	400a      	ands	r2, r1
 8012cfe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012d04:	6a3b      	ldr	r3, [r7, #32]
 8012d06:	431a      	orrs	r2, r3
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2241      	movs	r2, #65	@ 0x41
 8012d10:	2120      	movs	r1, #32
 8012d12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	2242      	movs	r2, #66	@ 0x42
 8012d18:	2100      	movs	r1, #0
 8012d1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2240      	movs	r2, #64	@ 0x40
 8012d20:	2100      	movs	r1, #0
 8012d22:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8012d24:	2327      	movs	r3, #39	@ 0x27
 8012d26:	18fb      	adds	r3, r7, r3
 8012d28:	781b      	ldrb	r3, [r3, #0]
}
 8012d2a:	0018      	movs	r0, r3
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	b00a      	add	sp, #40	@ 0x28
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	46c0      	nop			@ (mov r8, r8)
 8012d34:	fe00e800 	.word	0xfe00e800

08012d38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012d38:	b590      	push	{r4, r7, lr}
 8012d3a:	b087      	sub	sp, #28
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	0008      	movs	r0, r1
 8012d42:	0011      	movs	r1, r2
 8012d44:	607b      	str	r3, [r7, #4]
 8012d46:	240a      	movs	r4, #10
 8012d48:	193b      	adds	r3, r7, r4
 8012d4a:	1c02      	adds	r2, r0, #0
 8012d4c:	801a      	strh	r2, [r3, #0]
 8012d4e:	2009      	movs	r0, #9
 8012d50:	183b      	adds	r3, r7, r0
 8012d52:	1c0a      	adds	r2, r1, #0
 8012d54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012d56:	193b      	adds	r3, r7, r4
 8012d58:	881b      	ldrh	r3, [r3, #0]
 8012d5a:	059b      	lsls	r3, r3, #22
 8012d5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012d5e:	183b      	adds	r3, r7, r0
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	0419      	lsls	r1, r3, #16
 8012d64:	23ff      	movs	r3, #255	@ 0xff
 8012d66:	041b      	lsls	r3, r3, #16
 8012d68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012d6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d72:	4313      	orrs	r3, r2
 8012d74:	005b      	lsls	r3, r3, #1
 8012d76:	085b      	lsrs	r3, r3, #1
 8012d78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d82:	0d51      	lsrs	r1, r2, #21
 8012d84:	2280      	movs	r2, #128	@ 0x80
 8012d86:	00d2      	lsls	r2, r2, #3
 8012d88:	400a      	ands	r2, r1
 8012d8a:	4907      	ldr	r1, [pc, #28]	@ (8012da8 <I2C_TransferConfig+0x70>)
 8012d8c:	430a      	orrs	r2, r1
 8012d8e:	43d2      	mvns	r2, r2
 8012d90:	401a      	ands	r2, r3
 8012d92:	0011      	movs	r1, r2
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	697a      	ldr	r2, [r7, #20]
 8012d9a:	430a      	orrs	r2, r1
 8012d9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012d9e:	46c0      	nop			@ (mov r8, r8)
 8012da0:	46bd      	mov	sp, r7
 8012da2:	b007      	add	sp, #28
 8012da4:	bd90      	pop	{r4, r7, pc}
 8012da6:	46c0      	nop			@ (mov r8, r8)
 8012da8:	03ff63ff 	.word	0x03ff63ff

08012dac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	000a      	movs	r2, r1
 8012db6:	1cbb      	adds	r3, r7, #2
 8012db8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8012ebc <I2C_Enable_IRQ+0x110>)
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d035      	beq.n	8012e34 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8012ec0 <I2C_Enable_IRQ+0x114>)
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d030      	beq.n	8012e34 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8012ec4 <I2C_Enable_IRQ+0x118>)
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d02b      	beq.n	8012e34 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012ddc:	1cbb      	adds	r3, r7, #2
 8012dde:	2200      	movs	r2, #0
 8012de0:	5e9b      	ldrsh	r3, [r3, r2]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	da03      	bge.n	8012dee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	22b8      	movs	r2, #184	@ 0xb8
 8012dea:	4313      	orrs	r3, r2
 8012dec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012dee:	1cbb      	adds	r3, r7, #2
 8012df0:	881b      	ldrh	r3, [r3, #0]
 8012df2:	2201      	movs	r2, #1
 8012df4:	4013      	ands	r3, r2
 8012df6:	d003      	beq.n	8012e00 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	22f2      	movs	r2, #242	@ 0xf2
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012e00:	1cbb      	adds	r3, r7, #2
 8012e02:	881b      	ldrh	r3, [r3, #0]
 8012e04:	2202      	movs	r2, #2
 8012e06:	4013      	ands	r3, r2
 8012e08:	d003      	beq.n	8012e12 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	22f4      	movs	r2, #244	@ 0xf4
 8012e0e:	4313      	orrs	r3, r2
 8012e10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012e12:	1cbb      	adds	r3, r7, #2
 8012e14:	881b      	ldrh	r3, [r3, #0]
 8012e16:	2b10      	cmp	r3, #16
 8012e18:	d103      	bne.n	8012e22 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2290      	movs	r2, #144	@ 0x90
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012e22:	1cbb      	adds	r3, r7, #2
 8012e24:	881b      	ldrh	r3, [r3, #0]
 8012e26:	2b20      	cmp	r3, #32
 8012e28:	d13c      	bne.n	8012ea4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2220      	movs	r2, #32
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012e32:	e037      	b.n	8012ea4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012e34:	1cbb      	adds	r3, r7, #2
 8012e36:	2200      	movs	r2, #0
 8012e38:	5e9b      	ldrsh	r3, [r3, r2]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	da03      	bge.n	8012e46 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	22b8      	movs	r2, #184	@ 0xb8
 8012e42:	4313      	orrs	r3, r2
 8012e44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012e46:	1cbb      	adds	r3, r7, #2
 8012e48:	881b      	ldrh	r3, [r3, #0]
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	4013      	ands	r3, r2
 8012e4e:	d003      	beq.n	8012e58 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	22f2      	movs	r2, #242	@ 0xf2
 8012e54:	4313      	orrs	r3, r2
 8012e56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012e58:	1cbb      	adds	r3, r7, #2
 8012e5a:	881b      	ldrh	r3, [r3, #0]
 8012e5c:	2202      	movs	r2, #2
 8012e5e:	4013      	ands	r3, r2
 8012e60:	d003      	beq.n	8012e6a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	22f4      	movs	r2, #244	@ 0xf4
 8012e66:	4313      	orrs	r3, r2
 8012e68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012e6a:	1cbb      	adds	r3, r7, #2
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	2b10      	cmp	r3, #16
 8012e70:	d103      	bne.n	8012e7a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	2290      	movs	r2, #144	@ 0x90
 8012e76:	4313      	orrs	r3, r2
 8012e78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012e7a:	1cbb      	adds	r3, r7, #2
 8012e7c:	881b      	ldrh	r3, [r3, #0]
 8012e7e:	2b20      	cmp	r3, #32
 8012e80:	d103      	bne.n	8012e8a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	2260      	movs	r2, #96	@ 0x60
 8012e86:	4313      	orrs	r3, r2
 8012e88:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ec4 <I2C_Enable_IRQ+0x118>)
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d007      	beq.n	8012ea4 <I2C_Enable_IRQ+0xf8>
 8012e94:	1cbb      	adds	r3, r7, #2
 8012e96:	881b      	ldrh	r3, [r3, #0]
 8012e98:	2b40      	cmp	r3, #64	@ 0x40
 8012e9a:	d103      	bne.n	8012ea4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2240      	movs	r2, #64	@ 0x40
 8012ea0:	4313      	orrs	r3, r2
 8012ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	6819      	ldr	r1, [r3, #0]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	68fa      	ldr	r2, [r7, #12]
 8012eb0:	430a      	orrs	r2, r1
 8012eb2:	601a      	str	r2, [r3, #0]
}
 8012eb4:	46c0      	nop			@ (mov r8, r8)
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	b004      	add	sp, #16
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	0801172d 	.word	0x0801172d
 8012ec0:	08011b5d 	.word	0x08011b5d
 8012ec4:	08011925 	.word	0x08011925

08012ec8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b084      	sub	sp, #16
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	000a      	movs	r2, r1
 8012ed2:	1cbb      	adds	r3, r7, #2
 8012ed4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012eda:	1cbb      	adds	r3, r7, #2
 8012edc:	881b      	ldrh	r3, [r3, #0]
 8012ede:	2201      	movs	r2, #1
 8012ee0:	4013      	ands	r3, r2
 8012ee2:	d010      	beq.n	8012f06 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2242      	movs	r2, #66	@ 0x42
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2241      	movs	r2, #65	@ 0x41
 8012ef0:	5c9b      	ldrb	r3, [r3, r2]
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	001a      	movs	r2, r3
 8012ef6:	2328      	movs	r3, #40	@ 0x28
 8012ef8:	4013      	ands	r3, r2
 8012efa:	2b28      	cmp	r3, #40	@ 0x28
 8012efc:	d003      	beq.n	8012f06 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	22b0      	movs	r2, #176	@ 0xb0
 8012f02:	4313      	orrs	r3, r2
 8012f04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012f06:	1cbb      	adds	r3, r7, #2
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	2202      	movs	r2, #2
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	d010      	beq.n	8012f32 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	2244      	movs	r2, #68	@ 0x44
 8012f14:	4313      	orrs	r3, r2
 8012f16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2241      	movs	r2, #65	@ 0x41
 8012f1c:	5c9b      	ldrb	r3, [r3, r2]
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	001a      	movs	r2, r3
 8012f22:	2328      	movs	r3, #40	@ 0x28
 8012f24:	4013      	ands	r3, r2
 8012f26:	2b28      	cmp	r3, #40	@ 0x28
 8012f28:	d003      	beq.n	8012f32 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	22b0      	movs	r2, #176	@ 0xb0
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012f32:	1cbb      	adds	r3, r7, #2
 8012f34:	2200      	movs	r2, #0
 8012f36:	5e9b      	ldrsh	r3, [r3, r2]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	da03      	bge.n	8012f44 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	22b8      	movs	r2, #184	@ 0xb8
 8012f40:	4313      	orrs	r3, r2
 8012f42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012f44:	1cbb      	adds	r3, r7, #2
 8012f46:	881b      	ldrh	r3, [r3, #0]
 8012f48:	2b10      	cmp	r3, #16
 8012f4a:	d103      	bne.n	8012f54 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2290      	movs	r2, #144	@ 0x90
 8012f50:	4313      	orrs	r3, r2
 8012f52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012f54:	1cbb      	adds	r3, r7, #2
 8012f56:	881b      	ldrh	r3, [r3, #0]
 8012f58:	2b20      	cmp	r3, #32
 8012f5a:	d103      	bne.n	8012f64 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2220      	movs	r2, #32
 8012f60:	4313      	orrs	r3, r2
 8012f62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012f64:	1cbb      	adds	r3, r7, #2
 8012f66:	881b      	ldrh	r3, [r3, #0]
 8012f68:	2b40      	cmp	r3, #64	@ 0x40
 8012f6a:	d103      	bne.n	8012f74 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2240      	movs	r2, #64	@ 0x40
 8012f70:	4313      	orrs	r3, r2
 8012f72:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	43d9      	mvns	r1, r3
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	400a      	ands	r2, r1
 8012f84:	601a      	str	r2, [r3, #0]
}
 8012f86:	46c0      	nop			@ (mov r8, r8)
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	b004      	add	sp, #16
 8012f8c:	bd80      	pop	{r7, pc}
	...

08012f90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2241      	movs	r2, #65	@ 0x41
 8012f9e:	5c9b      	ldrb	r3, [r3, r2]
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	2b20      	cmp	r3, #32
 8012fa4:	d138      	bne.n	8013018 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2240      	movs	r2, #64	@ 0x40
 8012faa:	5c9b      	ldrb	r3, [r3, r2]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d101      	bne.n	8012fb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012fb0:	2302      	movs	r3, #2
 8012fb2:	e032      	b.n	801301a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2240      	movs	r2, #64	@ 0x40
 8012fb8:	2101      	movs	r1, #1
 8012fba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2241      	movs	r2, #65	@ 0x41
 8012fc0:	2124      	movs	r1, #36	@ 0x24
 8012fc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	2101      	movs	r1, #1
 8012fd0:	438a      	bics	r2, r1
 8012fd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	681a      	ldr	r2, [r3, #0]
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	4911      	ldr	r1, [pc, #68]	@ (8013024 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012fe0:	400a      	ands	r2, r1
 8012fe2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	6819      	ldr	r1, [r3, #0]
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	683a      	ldr	r2, [r7, #0]
 8012ff0:	430a      	orrs	r2, r1
 8012ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	2101      	movs	r1, #1
 8013000:	430a      	orrs	r2, r1
 8013002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2241      	movs	r2, #65	@ 0x41
 8013008:	2120      	movs	r1, #32
 801300a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2240      	movs	r2, #64	@ 0x40
 8013010:	2100      	movs	r1, #0
 8013012:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013014:	2300      	movs	r3, #0
 8013016:	e000      	b.n	801301a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013018:	2302      	movs	r3, #2
  }
}
 801301a:	0018      	movs	r0, r3
 801301c:	46bd      	mov	sp, r7
 801301e:	b002      	add	sp, #8
 8013020:	bd80      	pop	{r7, pc}
 8013022:	46c0      	nop			@ (mov r8, r8)
 8013024:	ffffefff 	.word	0xffffefff

08013028 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b084      	sub	sp, #16
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2241      	movs	r2, #65	@ 0x41
 8013036:	5c9b      	ldrb	r3, [r3, r2]
 8013038:	b2db      	uxtb	r3, r3
 801303a:	2b20      	cmp	r3, #32
 801303c:	d139      	bne.n	80130b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2240      	movs	r2, #64	@ 0x40
 8013042:	5c9b      	ldrb	r3, [r3, r2]
 8013044:	2b01      	cmp	r3, #1
 8013046:	d101      	bne.n	801304c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8013048:	2302      	movs	r3, #2
 801304a:	e033      	b.n	80130b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2240      	movs	r2, #64	@ 0x40
 8013050:	2101      	movs	r1, #1
 8013052:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2241      	movs	r2, #65	@ 0x41
 8013058:	2124      	movs	r1, #36	@ 0x24
 801305a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	2101      	movs	r1, #1
 8013068:	438a      	bics	r2, r1
 801306a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	4a11      	ldr	r2, [pc, #68]	@ (80130bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8013078:	4013      	ands	r3, r2
 801307a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	021b      	lsls	r3, r3, #8
 8013080:	68fa      	ldr	r2, [r7, #12]
 8013082:	4313      	orrs	r3, r2
 8013084:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	681a      	ldr	r2, [r3, #0]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	2101      	movs	r1, #1
 801309a:	430a      	orrs	r2, r1
 801309c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2241      	movs	r2, #65	@ 0x41
 80130a2:	2120      	movs	r1, #32
 80130a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2240      	movs	r2, #64	@ 0x40
 80130aa:	2100      	movs	r1, #0
 80130ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	e000      	b.n	80130b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80130b2:	2302      	movs	r3, #2
  }
}
 80130b4:	0018      	movs	r0, r3
 80130b6:	46bd      	mov	sp, r7
 80130b8:	b004      	add	sp, #16
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	fffff0ff 	.word	0xfffff0ff

080130c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b088      	sub	sp, #32
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d101      	bne.n	80130d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80130ce:	2301      	movs	r3, #1
 80130d0:	e0e1      	b.n	8013296 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2235      	movs	r2, #53	@ 0x35
 80130d6:	5c9b      	ldrb	r3, [r3, r2]
 80130d8:	b2db      	uxtb	r3, r3
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d107      	bne.n	80130ee <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2234      	movs	r2, #52	@ 0x34
 80130e2:	2100      	movs	r1, #0
 80130e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	0018      	movs	r0, r3
 80130ea:	f7f4 fe9d 	bl	8007e28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2235      	movs	r2, #53	@ 0x35
 80130f2:	2102      	movs	r1, #2
 80130f4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	69da      	ldr	r2, [r3, #28]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	4967      	ldr	r1, [pc, #412]	@ (80132a0 <HAL_I2S_Init+0x1e0>)
 8013102:	400a      	ands	r2, r1
 8013104:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	2202      	movs	r2, #2
 801310c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	695b      	ldr	r3, [r3, #20]
 8013112:	2b02      	cmp	r3, #2
 8013114:	d073      	beq.n	80131fe <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d102      	bne.n	8013124 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 801311e:	2310      	movs	r3, #16
 8013120:	617b      	str	r3, [r7, #20]
 8013122:	e001      	b.n	8013128 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8013124:	2320      	movs	r3, #32
 8013126:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	689b      	ldr	r3, [r3, #8]
 801312c:	2b20      	cmp	r3, #32
 801312e:	d802      	bhi.n	8013136 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	005b      	lsls	r3, r3, #1
 8013134:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8013136:	f002 fed3 	bl	8015ee0 <HAL_RCC_GetSysClockFreq>
 801313a:	0003      	movs	r3, r0
 801313c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	691a      	ldr	r2, [r3, #16]
 8013142:	2380      	movs	r3, #128	@ 0x80
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	429a      	cmp	r2, r3
 8013148:	d131      	bne.n	80131ae <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d016      	beq.n	8013180 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	009b      	lsls	r3, r3, #2
 8013156:	0019      	movs	r1, r3
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f7ed f823 	bl	80001a4 <__udivsi3>
 801315e:	0003      	movs	r3, r0
 8013160:	001a      	movs	r2, r3
 8013162:	0013      	movs	r3, r2
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	189b      	adds	r3, r3, r2
 8013168:	005b      	lsls	r3, r3, #1
 801316a:	001a      	movs	r2, r3
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	695b      	ldr	r3, [r3, #20]
 8013170:	0019      	movs	r1, r3
 8013172:	0010      	movs	r0, r2
 8013174:	f7ed f816 	bl	80001a4 <__udivsi3>
 8013178:	0003      	movs	r3, r0
 801317a:	3305      	adds	r3, #5
 801317c:	613b      	str	r3, [r7, #16]
 801317e:	e02a      	b.n	80131d6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	00db      	lsls	r3, r3, #3
 8013184:	0019      	movs	r1, r3
 8013186:	68f8      	ldr	r0, [r7, #12]
 8013188:	f7ed f80c 	bl	80001a4 <__udivsi3>
 801318c:	0003      	movs	r3, r0
 801318e:	001a      	movs	r2, r3
 8013190:	0013      	movs	r3, r2
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	189b      	adds	r3, r3, r2
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	001a      	movs	r2, r3
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	695b      	ldr	r3, [r3, #20]
 801319e:	0019      	movs	r1, r3
 80131a0:	0010      	movs	r0, r2
 80131a2:	f7ec ffff 	bl	80001a4 <__udivsi3>
 80131a6:	0003      	movs	r3, r0
 80131a8:	3305      	adds	r3, #5
 80131aa:	613b      	str	r3, [r7, #16]
 80131ac:	e013      	b.n	80131d6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80131ae:	6979      	ldr	r1, [r7, #20]
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f7ec fff7 	bl	80001a4 <__udivsi3>
 80131b6:	0003      	movs	r3, r0
 80131b8:	001a      	movs	r2, r3
 80131ba:	0013      	movs	r3, r2
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	189b      	adds	r3, r3, r2
 80131c0:	005b      	lsls	r3, r3, #1
 80131c2:	001a      	movs	r2, r3
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	695b      	ldr	r3, [r3, #20]
 80131c8:	0019      	movs	r1, r3
 80131ca:	0010      	movs	r0, r2
 80131cc:	f7ec ffea 	bl	80001a4 <__udivsi3>
 80131d0:	0003      	movs	r3, r0
 80131d2:	3305      	adds	r3, #5
 80131d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	210a      	movs	r1, #10
 80131da:	0018      	movs	r0, r3
 80131dc:	f7ec ffe2 	bl	80001a4 <__udivsi3>
 80131e0:	0003      	movs	r3, r0
 80131e2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	2201      	movs	r2, #1
 80131e8:	4013      	ands	r3, r2
 80131ea:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80131ec:	693a      	ldr	r2, [r7, #16]
 80131ee:	69bb      	ldr	r3, [r7, #24]
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	085b      	lsrs	r3, r3, #1
 80131f4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80131f6:	69bb      	ldr	r3, [r7, #24]
 80131f8:	021b      	lsls	r3, r3, #8
 80131fa:	61bb      	str	r3, [r7, #24]
 80131fc:	e003      	b.n	8013206 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80131fe:	2302      	movs	r3, #2
 8013200:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8013202:	2300      	movs	r3, #0
 8013204:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	2b01      	cmp	r3, #1
 801320a:	d902      	bls.n	8013212 <HAL_I2S_Init+0x152>
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	2bff      	cmp	r3, #255	@ 0xff
 8013210:	d907      	bls.n	8013222 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013216:	2210      	movs	r2, #16
 8013218:	431a      	orrs	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 801321e:	2301      	movs	r3, #1
 8013220:	e039      	b.n	8013296 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	691a      	ldr	r2, [r3, #16]
 8013226:	69bb      	ldr	r3, [r7, #24]
 8013228:	431a      	orrs	r2, r3
 801322a:	0011      	movs	r1, r2
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	69fa      	ldr	r2, [r7, #28]
 8013232:	430a      	orrs	r2, r1
 8013234:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	69db      	ldr	r3, [r3, #28]
 801323c:	4a18      	ldr	r2, [pc, #96]	@ (80132a0 <HAL_I2S_Init+0x1e0>)
 801323e:	401a      	ands	r2, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6859      	ldr	r1, [r3, #4]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	4319      	orrs	r1, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	68db      	ldr	r3, [r3, #12]
 801324e:	4319      	orrs	r1, r3
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	699b      	ldr	r3, [r3, #24]
 8013254:	430b      	orrs	r3, r1
 8013256:	431a      	orrs	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	2180      	movs	r1, #128	@ 0x80
 801325e:	0109      	lsls	r1, r1, #4
 8013260:	430a      	orrs	r2, r1
 8013262:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	689b      	ldr	r3, [r3, #8]
 8013268:	2b30      	cmp	r3, #48	@ 0x30
 801326a:	d003      	beq.n	8013274 <HAL_I2S_Init+0x1b4>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	689b      	ldr	r3, [r3, #8]
 8013270:	2bb0      	cmp	r3, #176	@ 0xb0
 8013272:	d108      	bne.n	8013286 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	69da      	ldr	r2, [r3, #28]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2180      	movs	r1, #128	@ 0x80
 8013280:	0149      	lsls	r1, r1, #5
 8013282:	430a      	orrs	r2, r1
 8013284:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2200      	movs	r2, #0
 801328a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2235      	movs	r2, #53	@ 0x35
 8013290:	2101      	movs	r1, #1
 8013292:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013294:	2300      	movs	r3, #0
}
 8013296:	0018      	movs	r0, r3
 8013298:	46bd      	mov	sp, r7
 801329a:	b008      	add	sp, #32
 801329c:	bd80      	pop	{r7, pc}
 801329e:	46c0      	nop			@ (mov r8, r8)
 80132a0:	fffff040 	.word	0xfffff040

080132a4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b086      	sub	sp, #24
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	1dbb      	adds	r3, r7, #6
 80132b0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d003      	beq.n	80132c0 <HAL_I2S_Receive_DMA+0x1c>
 80132b8:	1dbb      	adds	r3, r7, #6
 80132ba:	881b      	ldrh	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d101      	bne.n	80132c4 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80132c0:	2301      	movs	r3, #1
 80132c2:	e0a6      	b.n	8013412 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	2234      	movs	r2, #52	@ 0x34
 80132c8:	5c9b      	ldrb	r3, [r3, r2]
 80132ca:	b2db      	uxtb	r3, r3
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d101      	bne.n	80132d4 <HAL_I2S_Receive_DMA+0x30>
 80132d0:	2302      	movs	r3, #2
 80132d2:	e09e      	b.n	8013412 <HAL_I2S_Receive_DMA+0x16e>
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2234      	movs	r2, #52	@ 0x34
 80132d8:	2101      	movs	r1, #1
 80132da:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2235      	movs	r2, #53	@ 0x35
 80132e0:	5c9b      	ldrb	r3, [r3, r2]
 80132e2:	b2db      	uxtb	r3, r3
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d005      	beq.n	80132f4 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2234      	movs	r2, #52	@ 0x34
 80132ec:	2100      	movs	r1, #0
 80132ee:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80132f0:	2302      	movs	r3, #2
 80132f2:	e08e      	b.n	8013412 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2235      	movs	r2, #53	@ 0x35
 80132f8:	2104      	movs	r1, #4
 80132fa:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2200      	movs	r2, #0
 8013300:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	68ba      	ldr	r2, [r7, #8]
 8013306:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	69db      	ldr	r3, [r3, #28]
 801330e:	2207      	movs	r2, #7
 8013310:	4013      	ands	r3, r2
 8013312:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	2b03      	cmp	r3, #3
 8013318:	d002      	beq.n	8013320 <HAL_I2S_Receive_DMA+0x7c>
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	2b05      	cmp	r3, #5
 801331e:	d10c      	bne.n	801333a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8013320:	1dbb      	adds	r3, r7, #6
 8013322:	881b      	ldrh	r3, [r3, #0]
 8013324:	18db      	adds	r3, r3, r3
 8013326:	b29a      	uxth	r2, r3
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 801332c:	1dbb      	adds	r3, r7, #6
 801332e:	881b      	ldrh	r3, [r3, #0]
 8013330:	18db      	adds	r3, r3, r3
 8013332:	b29a      	uxth	r2, r3
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013338:	e007      	b.n	801334a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	1dba      	adds	r2, r7, #6
 801333e:	8812      	ldrh	r2, [r2, #0]
 8013340:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	1dba      	adds	r2, r7, #6
 8013346:	8812      	ldrh	r2, [r2, #0]
 8013348:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801334e:	4a33      	ldr	r2, [pc, #204]	@ (801341c <HAL_I2S_Receive_DMA+0x178>)
 8013350:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013356:	4a32      	ldr	r2, [pc, #200]	@ (8013420 <HAL_I2S_Receive_DMA+0x17c>)
 8013358:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801335e:	4a31      	ldr	r2, [pc, #196]	@ (8013424 <HAL_I2S_Receive_DMA+0x180>)
 8013360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	69da      	ldr	r2, [r3, #28]
 8013368:	23c0      	movs	r3, #192	@ 0xc0
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	401a      	ands	r2, r3
 801336e:	23c0      	movs	r3, #192	@ 0xc0
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	429a      	cmp	r2, r3
 8013374:	d10a      	bne.n	801338c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8013376:	2300      	movs	r3, #0
 8013378:	613b      	str	r3, [r7, #16]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	613b      	str	r3, [r7, #16]
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	689b      	ldr	r3, [r3, #8]
 8013388:	613b      	str	r3, [r7, #16]
 801338a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	330c      	adds	r3, #12
 8013396:	0019      	movs	r1, r3
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801339c:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80133a4:	f7fc fca2 	bl	800fcec <HAL_DMA_Start_IT>
 80133a8:	1e03      	subs	r3, r0, #0
 80133aa:	d00f      	beq.n	80133cc <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133b0:	2208      	movs	r2, #8
 80133b2:	431a      	orrs	r2, r3
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2235      	movs	r2, #53	@ 0x35
 80133bc:	2101      	movs	r1, #1
 80133be:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2234      	movs	r2, #52	@ 0x34
 80133c4:	2100      	movs	r1, #0
 80133c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80133c8:	2301      	movs	r3, #1
 80133ca:	e022      	b.n	8013412 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	69da      	ldr	r2, [r3, #28]
 80133d2:	2380      	movs	r3, #128	@ 0x80
 80133d4:	00db      	lsls	r3, r3, #3
 80133d6:	4013      	ands	r3, r2
 80133d8:	d108      	bne.n	80133ec <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	69da      	ldr	r2, [r3, #28]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2180      	movs	r1, #128	@ 0x80
 80133e6:	00c9      	lsls	r1, r1, #3
 80133e8:	430a      	orrs	r2, r1
 80133ea:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	2201      	movs	r2, #1
 80133f4:	4013      	ands	r3, r2
 80133f6:	d107      	bne.n	8013408 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	685a      	ldr	r2, [r3, #4]
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	2101      	movs	r1, #1
 8013404:	430a      	orrs	r2, r1
 8013406:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2234      	movs	r2, #52	@ 0x34
 801340c:	2100      	movs	r1, #0
 801340e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8013410:	2300      	movs	r3, #0
}
 8013412:	0018      	movs	r0, r3
 8013414:	46bd      	mov	sp, r7
 8013416:	b006      	add	sp, #24
 8013418:	bd80      	pop	{r7, pc}
 801341a:	46c0      	nop			@ (mov r8, r8)
 801341c:	08013605 	.word	0x08013605
 8013420:	080135c1 	.word	0x080135c1
 8013424:	08013623 	.word	0x08013623

08013428 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b086      	sub	sp, #24
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013430:	2317      	movs	r3, #23
 8013432:	18fb      	adds	r3, r7, r3
 8013434:	2200      	movs	r2, #0
 8013436:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	685a      	ldr	r2, [r3, #4]
 801343c:	2380      	movs	r3, #128	@ 0x80
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	429a      	cmp	r2, r3
 8013442:	d003      	beq.n	801344c <HAL_I2S_DMAStop+0x24>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d158      	bne.n	80134fe <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013450:	2b00      	cmp	r3, #0
 8013452:	d010      	beq.n	8013476 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013458:	0018      	movs	r0, r3
 801345a:	f7fc fcad 	bl	800fdb8 <HAL_DMA_Abort>
 801345e:	1e03      	subs	r3, r0, #0
 8013460:	d009      	beq.n	8013476 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013466:	2208      	movs	r2, #8
 8013468:	431a      	orrs	r2, r3
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801346e:	2317      	movs	r3, #23
 8013470:	18fb      	adds	r3, r7, r3
 8013472:	2201      	movs	r2, #1
 8013474:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	2364      	movs	r3, #100	@ 0x64
 801347a:	2201      	movs	r2, #1
 801347c:	2102      	movs	r1, #2
 801347e:	f000 f8f7 	bl	8013670 <I2S_WaitFlagStateUntilTimeout>
 8013482:	1e03      	subs	r3, r0, #0
 8013484:	d00d      	beq.n	80134a2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801348a:	2201      	movs	r2, #1
 801348c:	431a      	orrs	r2, r3
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	2235      	movs	r2, #53	@ 0x35
 8013496:	2101      	movs	r1, #1
 8013498:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801349a:	2317      	movs	r3, #23
 801349c:	18fb      	adds	r3, r7, r3
 801349e:	2201      	movs	r2, #1
 80134a0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	2364      	movs	r3, #100	@ 0x64
 80134a6:	2200      	movs	r2, #0
 80134a8:	2180      	movs	r1, #128	@ 0x80
 80134aa:	f000 f8e1 	bl	8013670 <I2S_WaitFlagStateUntilTimeout>
 80134ae:	1e03      	subs	r3, r0, #0
 80134b0:	d00d      	beq.n	80134ce <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134b6:	2201      	movs	r2, #1
 80134b8:	431a      	orrs	r2, r3
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2235      	movs	r2, #53	@ 0x35
 80134c2:	2101      	movs	r1, #1
 80134c4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80134c6:	2317      	movs	r3, #23
 80134c8:	18fb      	adds	r3, r7, r3
 80134ca:	2201      	movs	r2, #1
 80134cc:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	69da      	ldr	r2, [r3, #28]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4938      	ldr	r1, [pc, #224]	@ (80135bc <HAL_I2S_DMAStop+0x194>)
 80134da:	400a      	ands	r2, r1
 80134dc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80134de:	2300      	movs	r3, #0
 80134e0:	613b      	str	r3, [r7, #16]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	689b      	ldr	r3, [r3, #8]
 80134e8:	613b      	str	r3, [r7, #16]
 80134ea:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	685a      	ldr	r2, [r3, #4]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2102      	movs	r1, #2
 80134f8:	438a      	bics	r2, r1
 80134fa:	605a      	str	r2, [r3, #4]
 80134fc:	e053      	b.n	80135a6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	685a      	ldr	r2, [r3, #4]
 8013502:	23c0      	movs	r3, #192	@ 0xc0
 8013504:	009b      	lsls	r3, r3, #2
 8013506:	429a      	cmp	r2, r3
 8013508:	d005      	beq.n	8013516 <HAL_I2S_DMAStop+0xee>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	685a      	ldr	r2, [r3, #4]
 801350e:	2380      	movs	r3, #128	@ 0x80
 8013510:	005b      	lsls	r3, r3, #1
 8013512:	429a      	cmp	r2, r3
 8013514:	d147      	bne.n	80135a6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801351a:	2b00      	cmp	r3, #0
 801351c:	d010      	beq.n	8013540 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013522:	0018      	movs	r0, r3
 8013524:	f7fc fc48 	bl	800fdb8 <HAL_DMA_Abort>
 8013528:	1e03      	subs	r3, r0, #0
 801352a:	d009      	beq.n	8013540 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013530:	2208      	movs	r2, #8
 8013532:	431a      	orrs	r2, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8013538:	2317      	movs	r3, #23
 801353a:	18fb      	adds	r3, r7, r3
 801353c:	2201      	movs	r2, #1
 801353e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	69da      	ldr	r2, [r3, #28]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	491c      	ldr	r1, [pc, #112]	@ (80135bc <HAL_I2S_DMAStop+0x194>)
 801354c:	400a      	ands	r2, r1
 801354e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8013550:	2300      	movs	r3, #0
 8013552:	60fb      	str	r3, [r7, #12]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	60fb      	str	r3, [r7, #12]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	689b      	ldr	r3, [r3, #8]
 8013562:	60fb      	str	r3, [r7, #12]
 8013564:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	685a      	ldr	r2, [r3, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	2101      	movs	r1, #1
 8013572:	438a      	bics	r2, r1
 8013574:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	685a      	ldr	r2, [r3, #4]
 801357a:	2380      	movs	r3, #128	@ 0x80
 801357c:	005b      	lsls	r3, r3, #1
 801357e:	429a      	cmp	r2, r3
 8013580:	d10e      	bne.n	80135a0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013586:	2240      	movs	r2, #64	@ 0x40
 8013588:	431a      	orrs	r2, r3
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2235      	movs	r2, #53	@ 0x35
 8013592:	2101      	movs	r1, #1
 8013594:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8013596:	2317      	movs	r3, #23
 8013598:	18fb      	adds	r3, r7, r3
 801359a:	2201      	movs	r2, #1
 801359c:	701a      	strb	r2, [r3, #0]
 801359e:	e002      	b.n	80135a6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2235      	movs	r2, #53	@ 0x35
 80135aa:	2101      	movs	r1, #1
 80135ac:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80135ae:	2317      	movs	r3, #23
 80135b0:	18fb      	adds	r3, r7, r3
 80135b2:	781b      	ldrb	r3, [r3, #0]
}
 80135b4:	0018      	movs	r0, r3
 80135b6:	46bd      	mov	sp, r7
 80135b8:	b006      	add	sp, #24
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	fffffbff 	.word	0xfffffbff

080135c0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135cc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	69db      	ldr	r3, [r3, #28]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d10e      	bne.n	80135f4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	685a      	ldr	r2, [r3, #4]
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2101      	movs	r1, #1
 80135e2:	438a      	bics	r2, r1
 80135e4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2200      	movs	r2, #0
 80135ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	2235      	movs	r2, #53	@ 0x35
 80135f0:	2101      	movs	r1, #1
 80135f2:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	0018      	movs	r0, r3
 80135f8:	f7f9 f954 	bl	800c8a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80135fc:	46c0      	nop			@ (mov r8, r8)
 80135fe:	46bd      	mov	sp, r7
 8013600:	b004      	add	sp, #16
 8013602:	bd80      	pop	{r7, pc}

08013604 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b084      	sub	sp, #16
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013610:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	0018      	movs	r0, r3
 8013616:	f7f9 f933 	bl	800c880 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801361a:	46c0      	nop			@ (mov r8, r8)
 801361c:	46bd      	mov	sp, r7
 801361e:	b004      	add	sp, #16
 8013620:	bd80      	pop	{r7, pc}

08013622 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8013622:	b580      	push	{r7, lr}
 8013624:	b084      	sub	sp, #16
 8013626:	af00      	add	r7, sp, #0
 8013628:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801362e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	685a      	ldr	r2, [r3, #4]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2103      	movs	r1, #3
 801363c:	438a      	bics	r2, r1
 801363e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	2200      	movs	r2, #0
 8013644:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2200      	movs	r2, #0
 801364a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	2235      	movs	r2, #53	@ 0x35
 8013650:	2101      	movs	r1, #1
 8013652:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013658:	2208      	movs	r2, #8
 801365a:	431a      	orrs	r2, r3
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	0018      	movs	r0, r3
 8013664:	f7f9 f96c 	bl	800c940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013668:	46c0      	nop			@ (mov r8, r8)
 801366a:	46bd      	mov	sp, r7
 801366c:	b004      	add	sp, #16
 801366e:	bd80      	pop	{r7, pc}

08013670 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b086      	sub	sp, #24
 8013674:	af00      	add	r7, sp, #0
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	603b      	str	r3, [r7, #0]
 801367c:	1dfb      	adds	r3, r7, #7
 801367e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8013680:	f7fb fde2 	bl	800f248 <HAL_GetTick>
 8013684:	0003      	movs	r3, r0
 8013686:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013688:	e017      	b.n	80136ba <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	3301      	adds	r3, #1
 801368e:	d014      	beq.n	80136ba <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8013690:	f7fb fdda 	bl	800f248 <HAL_GetTick>
 8013694:	0002      	movs	r2, r0
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	1ad3      	subs	r3, r2, r3
 801369a:	683a      	ldr	r2, [r7, #0]
 801369c:	429a      	cmp	r2, r3
 801369e:	d902      	bls.n	80136a6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d109      	bne.n	80136ba <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	2235      	movs	r2, #53	@ 0x35
 80136aa:	2101      	movs	r1, #1
 80136ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	2234      	movs	r2, #52	@ 0x34
 80136b2:	2100      	movs	r1, #0
 80136b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80136b6:	2303      	movs	r3, #3
 80136b8:	e00f      	b.n	80136da <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	689b      	ldr	r3, [r3, #8]
 80136c0:	68ba      	ldr	r2, [r7, #8]
 80136c2:	4013      	ands	r3, r2
 80136c4:	68ba      	ldr	r2, [r7, #8]
 80136c6:	1ad3      	subs	r3, r2, r3
 80136c8:	425a      	negs	r2, r3
 80136ca:	4153      	adcs	r3, r2
 80136cc:	b2db      	uxtb	r3, r3
 80136ce:	001a      	movs	r2, r3
 80136d0:	1dfb      	adds	r3, r7, #7
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d1d8      	bne.n	801368a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80136d8:	2300      	movs	r3, #0
}
 80136da:	0018      	movs	r0, r3
 80136dc:	46bd      	mov	sp, r7
 80136de:	b006      	add	sp, #24
 80136e0:	bd80      	pop	{r7, pc}
	...

080136e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80136e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136e6:	b08b      	sub	sp, #44	@ 0x2c
 80136e8:	af06      	add	r7, sp, #24
 80136ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d101      	bne.n	80136f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80136f2:	2301      	movs	r3, #1
 80136f4:	e0f0      	b.n	80138d8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	4a79      	ldr	r2, [pc, #484]	@ (80138e0 <HAL_PCD_Init+0x1fc>)
 80136fa:	5c9b      	ldrb	r3, [r3, r2]
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d108      	bne.n	8013714 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013702:	687a      	ldr	r2, [r7, #4]
 8013704:	23aa      	movs	r3, #170	@ 0xaa
 8013706:	009b      	lsls	r3, r3, #2
 8013708:	2100      	movs	r1, #0
 801370a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	0018      	movs	r0, r3
 8013710:	f009 ff4a 	bl	801d5a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	4a72      	ldr	r2, [pc, #456]	@ (80138e0 <HAL_PCD_Init+0x1fc>)
 8013718:	2103      	movs	r1, #3
 801371a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	0018      	movs	r0, r3
 8013722:	f005 fefd 	bl	8019520 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013726:	230f      	movs	r3, #15
 8013728:	18fb      	adds	r3, r7, r3
 801372a:	2200      	movs	r2, #0
 801372c:	701a      	strb	r2, [r3, #0]
 801372e:	e049      	b.n	80137c4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013730:	200f      	movs	r0, #15
 8013732:	183b      	adds	r3, r7, r0
 8013734:	781b      	ldrb	r3, [r3, #0]
 8013736:	6879      	ldr	r1, [r7, #4]
 8013738:	1c5a      	adds	r2, r3, #1
 801373a:	0013      	movs	r3, r2
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	189b      	adds	r3, r3, r2
 8013740:	00db      	lsls	r3, r3, #3
 8013742:	18cb      	adds	r3, r1, r3
 8013744:	3301      	adds	r3, #1
 8013746:	2201      	movs	r2, #1
 8013748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801374a:	183b      	adds	r3, r7, r0
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	6879      	ldr	r1, [r7, #4]
 8013750:	1c5a      	adds	r2, r3, #1
 8013752:	0013      	movs	r3, r2
 8013754:	009b      	lsls	r3, r3, #2
 8013756:	189b      	adds	r3, r3, r2
 8013758:	00db      	lsls	r3, r3, #3
 801375a:	183a      	adds	r2, r7, r0
 801375c:	7812      	ldrb	r2, [r2, #0]
 801375e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013760:	183b      	adds	r3, r7, r0
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	6879      	ldr	r1, [r7, #4]
 8013766:	1c5a      	adds	r2, r3, #1
 8013768:	0013      	movs	r3, r2
 801376a:	009b      	lsls	r3, r3, #2
 801376c:	189b      	adds	r3, r3, r2
 801376e:	00db      	lsls	r3, r3, #3
 8013770:	18cb      	adds	r3, r1, r3
 8013772:	3303      	adds	r3, #3
 8013774:	2200      	movs	r2, #0
 8013776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013778:	183b      	adds	r3, r7, r0
 801377a:	781a      	ldrb	r2, [r3, #0]
 801377c:	6879      	ldr	r1, [r7, #4]
 801377e:	0013      	movs	r3, r2
 8013780:	009b      	lsls	r3, r3, #2
 8013782:	189b      	adds	r3, r3, r2
 8013784:	00db      	lsls	r3, r3, #3
 8013786:	18cb      	adds	r3, r1, r3
 8013788:	3338      	adds	r3, #56	@ 0x38
 801378a:	2200      	movs	r2, #0
 801378c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801378e:	183b      	adds	r3, r7, r0
 8013790:	781a      	ldrb	r2, [r3, #0]
 8013792:	6879      	ldr	r1, [r7, #4]
 8013794:	0013      	movs	r3, r2
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	189b      	adds	r3, r3, r2
 801379a:	00db      	lsls	r3, r3, #3
 801379c:	18cb      	adds	r3, r1, r3
 801379e:	333c      	adds	r3, #60	@ 0x3c
 80137a0:	2200      	movs	r2, #0
 80137a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80137a4:	183b      	adds	r3, r7, r0
 80137a6:	781a      	ldrb	r2, [r3, #0]
 80137a8:	6879      	ldr	r1, [r7, #4]
 80137aa:	0013      	movs	r3, r2
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	189b      	adds	r3, r3, r2
 80137b0:	00db      	lsls	r3, r3, #3
 80137b2:	18cb      	adds	r3, r1, r3
 80137b4:	3340      	adds	r3, #64	@ 0x40
 80137b6:	2200      	movs	r2, #0
 80137b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80137ba:	183b      	adds	r3, r7, r0
 80137bc:	781a      	ldrb	r2, [r3, #0]
 80137be:	183b      	adds	r3, r7, r0
 80137c0:	3201      	adds	r2, #1
 80137c2:	701a      	strb	r2, [r3, #0]
 80137c4:	210f      	movs	r1, #15
 80137c6:	187b      	adds	r3, r7, r1
 80137c8:	781a      	ldrb	r2, [r3, #0]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d3ae      	bcc.n	8013730 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80137d2:	187b      	adds	r3, r7, r1
 80137d4:	2200      	movs	r2, #0
 80137d6:	701a      	strb	r2, [r3, #0]
 80137d8:	e056      	b.n	8013888 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80137da:	240f      	movs	r4, #15
 80137dc:	193b      	adds	r3, r7, r4
 80137de:	781a      	ldrb	r2, [r3, #0]
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	236a      	movs	r3, #106	@ 0x6a
 80137e4:	33ff      	adds	r3, #255	@ 0xff
 80137e6:	0019      	movs	r1, r3
 80137e8:	0013      	movs	r3, r2
 80137ea:	009b      	lsls	r3, r3, #2
 80137ec:	189b      	adds	r3, r3, r2
 80137ee:	00db      	lsls	r3, r3, #3
 80137f0:	18c3      	adds	r3, r0, r3
 80137f2:	185b      	adds	r3, r3, r1
 80137f4:	2200      	movs	r2, #0
 80137f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80137f8:	193b      	adds	r3, r7, r4
 80137fa:	781a      	ldrb	r2, [r3, #0]
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	23b4      	movs	r3, #180	@ 0xb4
 8013800:	0059      	lsls	r1, r3, #1
 8013802:	0013      	movs	r3, r2
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	189b      	adds	r3, r3, r2
 8013808:	00db      	lsls	r3, r3, #3
 801380a:	18c3      	adds	r3, r0, r3
 801380c:	185b      	adds	r3, r3, r1
 801380e:	193a      	adds	r2, r7, r4
 8013810:	7812      	ldrb	r2, [r2, #0]
 8013812:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013814:	193b      	adds	r3, r7, r4
 8013816:	781a      	ldrb	r2, [r3, #0]
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	236c      	movs	r3, #108	@ 0x6c
 801381c:	33ff      	adds	r3, #255	@ 0xff
 801381e:	0019      	movs	r1, r3
 8013820:	0013      	movs	r3, r2
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	189b      	adds	r3, r3, r2
 8013826:	00db      	lsls	r3, r3, #3
 8013828:	18c3      	adds	r3, r0, r3
 801382a:	185b      	adds	r3, r3, r1
 801382c:	2200      	movs	r2, #0
 801382e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013830:	193b      	adds	r3, r7, r4
 8013832:	781a      	ldrb	r2, [r3, #0]
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	23bc      	movs	r3, #188	@ 0xbc
 8013838:	0059      	lsls	r1, r3, #1
 801383a:	0013      	movs	r3, r2
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	189b      	adds	r3, r3, r2
 8013840:	00db      	lsls	r3, r3, #3
 8013842:	18c3      	adds	r3, r0, r3
 8013844:	185b      	adds	r3, r3, r1
 8013846:	2200      	movs	r2, #0
 8013848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801384a:	193b      	adds	r3, r7, r4
 801384c:	781a      	ldrb	r2, [r3, #0]
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	23be      	movs	r3, #190	@ 0xbe
 8013852:	0059      	lsls	r1, r3, #1
 8013854:	0013      	movs	r3, r2
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	189b      	adds	r3, r3, r2
 801385a:	00db      	lsls	r3, r3, #3
 801385c:	18c3      	adds	r3, r0, r3
 801385e:	185b      	adds	r3, r3, r1
 8013860:	2200      	movs	r2, #0
 8013862:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013864:	193b      	adds	r3, r7, r4
 8013866:	781a      	ldrb	r2, [r3, #0]
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	23c0      	movs	r3, #192	@ 0xc0
 801386c:	0059      	lsls	r1, r3, #1
 801386e:	0013      	movs	r3, r2
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	189b      	adds	r3, r3, r2
 8013874:	00db      	lsls	r3, r3, #3
 8013876:	18c3      	adds	r3, r0, r3
 8013878:	185b      	adds	r3, r3, r1
 801387a:	2200      	movs	r2, #0
 801387c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801387e:	193b      	adds	r3, r7, r4
 8013880:	781a      	ldrb	r2, [r3, #0]
 8013882:	193b      	adds	r3, r7, r4
 8013884:	3201      	adds	r2, #1
 8013886:	701a      	strb	r2, [r3, #0]
 8013888:	230f      	movs	r3, #15
 801388a:	18fb      	adds	r3, r7, r3
 801388c:	781a      	ldrb	r2, [r3, #0]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	429a      	cmp	r2, r3
 8013894:	d3a1      	bcc.n	80137da <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6818      	ldr	r0, [r3, #0]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	466a      	mov	r2, sp
 801389e:	0011      	movs	r1, r2
 80138a0:	001a      	movs	r2, r3
 80138a2:	3210      	adds	r2, #16
 80138a4:	ca70      	ldmia	r2!, {r4, r5, r6}
 80138a6:	c170      	stmia	r1!, {r4, r5, r6}
 80138a8:	ca30      	ldmia	r2!, {r4, r5}
 80138aa:	c130      	stmia	r1!, {r4, r5}
 80138ac:	6859      	ldr	r1, [r3, #4]
 80138ae:	689a      	ldr	r2, [r3, #8]
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	f005 fe4f 	bl	8019554 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2224      	movs	r2, #36	@ 0x24
 80138ba:	2100      	movs	r1, #0
 80138bc:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	4a07      	ldr	r2, [pc, #28]	@ (80138e0 <HAL_PCD_Init+0x1fc>)
 80138c2:	2101      	movs	r1, #1
 80138c4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	69db      	ldr	r3, [r3, #28]
 80138ca:	2b01      	cmp	r3, #1
 80138cc:	d103      	bne.n	80138d6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	0018      	movs	r0, r3
 80138d2:	f001 fd23 	bl	801531c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80138d6:	2300      	movs	r3, #0
}
 80138d8:	0018      	movs	r0, r3
 80138da:	46bd      	mov	sp, r7
 80138dc:	b005      	add	sp, #20
 80138de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138e0:	000002a9 	.word	0x000002a9

080138e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	23aa      	movs	r3, #170	@ 0xaa
 80138f0:	009b      	lsls	r3, r3, #2
 80138f2:	5cd3      	ldrb	r3, [r2, r3]
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	d101      	bne.n	80138fc <HAL_PCD_Start+0x18>
 80138f8:	2302      	movs	r3, #2
 80138fa:	e014      	b.n	8013926 <HAL_PCD_Start+0x42>
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	23aa      	movs	r3, #170	@ 0xaa
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	2101      	movs	r1, #1
 8013904:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	0018      	movs	r0, r3
 801390c:	f005 fdf2 	bl	80194f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	0018      	movs	r0, r3
 8013916:	f007 fdf5 	bl	801b504 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	23aa      	movs	r3, #170	@ 0xaa
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	2100      	movs	r1, #0
 8013922:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013924:	2300      	movs	r3, #0
}
 8013926:	0018      	movs	r0, r3
 8013928:	46bd      	mov	sp, r7
 801392a:	b002      	add	sp, #8
 801392c:	bd80      	pop	{r7, pc}
	...

08013930 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b084      	sub	sp, #16
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	0018      	movs	r0, r3
 801393e:	f007 fdf7 	bl	801b530 <USB_ReadInterrupts>
 8013942:	0003      	movs	r3, r0
 8013944:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8013946:	68fa      	ldr	r2, [r7, #12]
 8013948:	2380      	movs	r3, #128	@ 0x80
 801394a:	021b      	lsls	r3, r3, #8
 801394c:	4013      	ands	r3, r2
 801394e:	d004      	beq.n	801395a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	0018      	movs	r0, r3
 8013954:	f000 fb62 	bl	801401c <PCD_EP_ISR_Handler>

    return;
 8013958:	e11d      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801395a:	68fa      	ldr	r2, [r7, #12]
 801395c:	2380      	movs	r3, #128	@ 0x80
 801395e:	00db      	lsls	r3, r3, #3
 8013960:	4013      	ands	r3, r2
 8013962:	d015      	beq.n	8013990 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	2244      	movs	r2, #68	@ 0x44
 801396a:	5a9b      	ldrh	r3, [r3, r2]
 801396c:	b29a      	uxth	r2, r3
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	498a      	ldr	r1, [pc, #552]	@ (8013b9c <HAL_PCD_IRQHandler+0x26c>)
 8013974:	400a      	ands	r2, r1
 8013976:	b291      	uxth	r1, r2
 8013978:	2244      	movs	r2, #68	@ 0x44
 801397a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	0018      	movs	r0, r3
 8013980:	f009 fe95 	bl	801d6ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2100      	movs	r1, #0
 8013988:	0018      	movs	r0, r3
 801398a:	f000 f915 	bl	8013bb8 <HAL_PCD_SetAddress>

    return;
 801398e:	e102      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8013990:	68fa      	ldr	r2, [r7, #12]
 8013992:	2380      	movs	r3, #128	@ 0x80
 8013994:	01db      	lsls	r3, r3, #7
 8013996:	4013      	ands	r3, r2
 8013998:	d00c      	beq.n	80139b4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	2244      	movs	r2, #68	@ 0x44
 80139a0:	5a9b      	ldrh	r3, [r3, r2]
 80139a2:	b29a      	uxth	r2, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	497d      	ldr	r1, [pc, #500]	@ (8013ba0 <HAL_PCD_IRQHandler+0x270>)
 80139aa:	400a      	ands	r2, r1
 80139ac:	b291      	uxth	r1, r2
 80139ae:	2244      	movs	r2, #68	@ 0x44
 80139b0:	5299      	strh	r1, [r3, r2]

    return;
 80139b2:	e0f0      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80139b4:	68fa      	ldr	r2, [r7, #12]
 80139b6:	2380      	movs	r3, #128	@ 0x80
 80139b8:	019b      	lsls	r3, r3, #6
 80139ba:	4013      	ands	r3, r2
 80139bc:	d00c      	beq.n	80139d8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	2244      	movs	r2, #68	@ 0x44
 80139c4:	5a9b      	ldrh	r3, [r3, r2]
 80139c6:	b29a      	uxth	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	4975      	ldr	r1, [pc, #468]	@ (8013ba4 <HAL_PCD_IRQHandler+0x274>)
 80139ce:	400a      	ands	r2, r1
 80139d0:	b291      	uxth	r1, r2
 80139d2:	2244      	movs	r2, #68	@ 0x44
 80139d4:	5299      	strh	r1, [r3, r2]

    return;
 80139d6:	e0de      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80139d8:	68fa      	ldr	r2, [r7, #12]
 80139da:	2380      	movs	r3, #128	@ 0x80
 80139dc:	015b      	lsls	r3, r3, #5
 80139de:	4013      	ands	r3, r2
 80139e0:	d038      	beq.n	8013a54 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2240      	movs	r2, #64	@ 0x40
 80139e8:	5a9b      	ldrh	r3, [r3, r2]
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2104      	movs	r1, #4
 80139f2:	438a      	bics	r2, r1
 80139f4:	b291      	uxth	r1, r2
 80139f6:	2240      	movs	r2, #64	@ 0x40
 80139f8:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	2240      	movs	r2, #64	@ 0x40
 8013a00:	5a9b      	ldrh	r3, [r3, r2]
 8013a02:	b29a      	uxth	r2, r3
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	2108      	movs	r1, #8
 8013a0a:	438a      	bics	r2, r1
 8013a0c:	b291      	uxth	r1, r2
 8013a0e:	2240      	movs	r2, #64	@ 0x40
 8013a10:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	23b8      	movs	r3, #184	@ 0xb8
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	5cd3      	ldrb	r3, [r2, r3]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d109      	bne.n	8013a32 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	23b8      	movs	r3, #184	@ 0xb8
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	2100      	movs	r1, #0
 8013a26:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2100      	movs	r1, #0
 8013a2c:	0018      	movs	r0, r3
 8013a2e:	f001 fc9f 	bl	8015370 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	0018      	movs	r0, r3
 8013a36:	f009 fe7b 	bl	801d730 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2244      	movs	r2, #68	@ 0x44
 8013a40:	5a9b      	ldrh	r3, [r3, r2]
 8013a42:	b29a      	uxth	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	4957      	ldr	r1, [pc, #348]	@ (8013ba8 <HAL_PCD_IRQHandler+0x278>)
 8013a4a:	400a      	ands	r2, r1
 8013a4c:	b291      	uxth	r1, r2
 8013a4e:	2244      	movs	r2, #68	@ 0x44
 8013a50:	5299      	strh	r1, [r3, r2]

    return;
 8013a52:	e0a0      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	2380      	movs	r3, #128	@ 0x80
 8013a58:	011b      	lsls	r3, r3, #4
 8013a5a:	4013      	ands	r3, r2
 8013a5c:	d028      	beq.n	8013ab0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2240      	movs	r2, #64	@ 0x40
 8013a64:	5a9b      	ldrh	r3, [r3, r2]
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	2108      	movs	r1, #8
 8013a6e:	430a      	orrs	r2, r1
 8013a70:	b291      	uxth	r1, r2
 8013a72:	2240      	movs	r2, #64	@ 0x40
 8013a74:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	2244      	movs	r2, #68	@ 0x44
 8013a7c:	5a9b      	ldrh	r3, [r3, r2]
 8013a7e:	b29a      	uxth	r2, r3
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4949      	ldr	r1, [pc, #292]	@ (8013bac <HAL_PCD_IRQHandler+0x27c>)
 8013a86:	400a      	ands	r2, r1
 8013a88:	b291      	uxth	r1, r2
 8013a8a:	2244      	movs	r2, #68	@ 0x44
 8013a8c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	2240      	movs	r2, #64	@ 0x40
 8013a94:	5a9b      	ldrh	r3, [r3, r2]
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	2104      	movs	r1, #4
 8013a9e:	430a      	orrs	r2, r1
 8013aa0:	b291      	uxth	r1, r2
 8013aa2:	2240      	movs	r2, #64	@ 0x40
 8013aa4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	0018      	movs	r0, r3
 8013aaa:	f009 fe25 	bl	801d6f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013aae:	e072      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	2280      	movs	r2, #128	@ 0x80
 8013ab4:	4013      	ands	r3, r2
 8013ab6:	d046      	beq.n	8013b46 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	2244      	movs	r2, #68	@ 0x44
 8013abe:	5a9b      	ldrh	r3, [r3, r2]
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2180      	movs	r1, #128	@ 0x80
 8013ac8:	438a      	bics	r2, r1
 8013aca:	b291      	uxth	r1, r2
 8013acc:	2244      	movs	r2, #68	@ 0x44
 8013ace:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	23b8      	movs	r3, #184	@ 0xb8
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	5cd3      	ldrb	r3, [r2, r3]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d12f      	bne.n	8013b3c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2240      	movs	r2, #64	@ 0x40
 8013ae2:	5a9b      	ldrh	r3, [r3, r2]
 8013ae4:	b29a      	uxth	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2104      	movs	r1, #4
 8013aec:	430a      	orrs	r2, r1
 8013aee:	b291      	uxth	r1, r2
 8013af0:	2240      	movs	r2, #64	@ 0x40
 8013af2:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2240      	movs	r2, #64	@ 0x40
 8013afa:	5a9b      	ldrh	r3, [r3, r2]
 8013afc:	b29a      	uxth	r2, r3
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	2108      	movs	r1, #8
 8013b04:	430a      	orrs	r2, r1
 8013b06:	b291      	uxth	r1, r2
 8013b08:	2240      	movs	r2, #64	@ 0x40
 8013b0a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	23b8      	movs	r3, #184	@ 0xb8
 8013b10:	009b      	lsls	r3, r3, #2
 8013b12:	2101      	movs	r1, #1
 8013b14:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	2254      	movs	r2, #84	@ 0x54
 8013b1c:	5a9b      	ldrh	r3, [r3, r2]
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	089b      	lsrs	r3, r3, #2
 8013b22:	223c      	movs	r2, #60	@ 0x3c
 8013b24:	4013      	ands	r3, r2
 8013b26:	0019      	movs	r1, r3
 8013b28:	687a      	ldr	r2, [r7, #4]
 8013b2a:	23b9      	movs	r3, #185	@ 0xb9
 8013b2c:	009b      	lsls	r3, r3, #2
 8013b2e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2101      	movs	r1, #1
 8013b34:	0018      	movs	r0, r3
 8013b36:	f001 fc1b 	bl	8015370 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8013b3a:	e02c      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	0018      	movs	r0, r3
 8013b40:	f009 fdda 	bl	801d6f8 <HAL_PCD_SuspendCallback>
    return;
 8013b44:	e027      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8013b46:	68fa      	ldr	r2, [r7, #12]
 8013b48:	2380      	movs	r3, #128	@ 0x80
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	4013      	ands	r3, r2
 8013b4e:	d010      	beq.n	8013b72 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	2244      	movs	r2, #68	@ 0x44
 8013b56:	5a9b      	ldrh	r3, [r3, r2]
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	4914      	ldr	r1, [pc, #80]	@ (8013bb0 <HAL_PCD_IRQHandler+0x280>)
 8013b60:	400a      	ands	r2, r1
 8013b62:	b291      	uxth	r1, r2
 8013b64:	2244      	movs	r2, #68	@ 0x44
 8013b66:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	0018      	movs	r0, r3
 8013b6c:	f009 fd90 	bl	801d690 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013b70:	e011      	b.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8013b72:	68fa      	ldr	r2, [r7, #12]
 8013b74:	2380      	movs	r3, #128	@ 0x80
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	4013      	ands	r3, r2
 8013b7a:	d00c      	beq.n	8013b96 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2244      	movs	r2, #68	@ 0x44
 8013b82:	5a9b      	ldrh	r3, [r3, r2]
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	490a      	ldr	r1, [pc, #40]	@ (8013bb4 <HAL_PCD_IRQHandler+0x284>)
 8013b8c:	400a      	ands	r2, r1
 8013b8e:	b291      	uxth	r1, r2
 8013b90:	2244      	movs	r2, #68	@ 0x44
 8013b92:	5299      	strh	r1, [r3, r2]

    return;
 8013b94:	46c0      	nop			@ (mov r8, r8)
  }
}
 8013b96:	46bd      	mov	sp, r7
 8013b98:	b004      	add	sp, #16
 8013b9a:	bd80      	pop	{r7, pc}
 8013b9c:	fffffbff 	.word	0xfffffbff
 8013ba0:	ffffbfff 	.word	0xffffbfff
 8013ba4:	ffffdfff 	.word	0xffffdfff
 8013ba8:	ffffefff 	.word	0xffffefff
 8013bac:	fffff7ff 	.word	0xfffff7ff
 8013bb0:	fffffdff 	.word	0xfffffdff
 8013bb4:	fffffeff 	.word	0xfffffeff

08013bb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	000a      	movs	r2, r1
 8013bc2:	1cfb      	adds	r3, r7, #3
 8013bc4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	23aa      	movs	r3, #170	@ 0xaa
 8013bca:	009b      	lsls	r3, r3, #2
 8013bcc:	5cd3      	ldrb	r3, [r2, r3]
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d101      	bne.n	8013bd6 <HAL_PCD_SetAddress+0x1e>
 8013bd2:	2302      	movs	r3, #2
 8013bd4:	e017      	b.n	8013c06 <HAL_PCD_SetAddress+0x4e>
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	23aa      	movs	r3, #170	@ 0xaa
 8013bda:	009b      	lsls	r3, r3, #2
 8013bdc:	2101      	movs	r1, #1
 8013bde:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	1cfa      	adds	r2, r7, #3
 8013be4:	2124      	movs	r1, #36	@ 0x24
 8013be6:	7812      	ldrb	r2, [r2, #0]
 8013be8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681a      	ldr	r2, [r3, #0]
 8013bee:	1cfb      	adds	r3, r7, #3
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	0019      	movs	r1, r3
 8013bf4:	0010      	movs	r0, r2
 8013bf6:	f007 fc71 	bl	801b4dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013bfa:	687a      	ldr	r2, [r7, #4]
 8013bfc:	23aa      	movs	r3, #170	@ 0xaa
 8013bfe:	009b      	lsls	r3, r3, #2
 8013c00:	2100      	movs	r1, #0
 8013c02:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013c04:	2300      	movs	r3, #0
}
 8013c06:	0018      	movs	r0, r3
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	b002      	add	sp, #8
 8013c0c:	bd80      	pop	{r7, pc}

08013c0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8013c0e:	b590      	push	{r4, r7, lr}
 8013c10:	b085      	sub	sp, #20
 8013c12:	af00      	add	r7, sp, #0
 8013c14:	6078      	str	r0, [r7, #4]
 8013c16:	000c      	movs	r4, r1
 8013c18:	0010      	movs	r0, r2
 8013c1a:	0019      	movs	r1, r3
 8013c1c:	1cfb      	adds	r3, r7, #3
 8013c1e:	1c22      	adds	r2, r4, #0
 8013c20:	701a      	strb	r2, [r3, #0]
 8013c22:	003b      	movs	r3, r7
 8013c24:	1c02      	adds	r2, r0, #0
 8013c26:	801a      	strh	r2, [r3, #0]
 8013c28:	1cbb      	adds	r3, r7, #2
 8013c2a:	1c0a      	adds	r2, r1, #0
 8013c2c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013c2e:	230b      	movs	r3, #11
 8013c30:	18fb      	adds	r3, r7, r3
 8013c32:	2200      	movs	r2, #0
 8013c34:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013c36:	1cfb      	adds	r3, r7, #3
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	b25b      	sxtb	r3, r3
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	da0f      	bge.n	8013c60 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013c40:	1cfb      	adds	r3, r7, #3
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	2207      	movs	r2, #7
 8013c46:	4013      	ands	r3, r2
 8013c48:	1c5a      	adds	r2, r3, #1
 8013c4a:	0013      	movs	r3, r2
 8013c4c:	009b      	lsls	r3, r3, #2
 8013c4e:	189b      	adds	r3, r3, r2
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	687a      	ldr	r2, [r7, #4]
 8013c54:	18d3      	adds	r3, r2, r3
 8013c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	705a      	strb	r2, [r3, #1]
 8013c5e:	e00f      	b.n	8013c80 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013c60:	1cfb      	adds	r3, r7, #3
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	2207      	movs	r2, #7
 8013c66:	401a      	ands	r2, r3
 8013c68:	0013      	movs	r3, r2
 8013c6a:	009b      	lsls	r3, r3, #2
 8013c6c:	189b      	adds	r3, r3, r2
 8013c6e:	00db      	lsls	r3, r3, #3
 8013c70:	3369      	adds	r3, #105	@ 0x69
 8013c72:	33ff      	adds	r3, #255	@ 0xff
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	18d3      	adds	r3, r2, r3
 8013c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013c80:	1cfb      	adds	r3, r7, #3
 8013c82:	781b      	ldrb	r3, [r3, #0]
 8013c84:	2207      	movs	r2, #7
 8013c86:	4013      	ands	r3, r2
 8013c88:	b2da      	uxtb	r2, r3
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013c8e:	003b      	movs	r3, r7
 8013c90:	881a      	ldrh	r2, [r3, #0]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	1cba      	adds	r2, r7, #2
 8013c9a:	7812      	ldrb	r2, [r2, #0]
 8013c9c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8013c9e:	1cbb      	adds	r3, r7, #2
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	2b02      	cmp	r3, #2
 8013ca4:	d102      	bne.n	8013cac <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	23aa      	movs	r3, #170	@ 0xaa
 8013cb0:	009b      	lsls	r3, r3, #2
 8013cb2:	5cd3      	ldrb	r3, [r2, r3]
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d101      	bne.n	8013cbc <HAL_PCD_EP_Open+0xae>
 8013cb8:	2302      	movs	r3, #2
 8013cba:	e013      	b.n	8013ce4 <HAL_PCD_EP_Open+0xd6>
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	23aa      	movs	r3, #170	@ 0xaa
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	2101      	movs	r1, #1
 8013cc4:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	0011      	movs	r1, r2
 8013cce:	0018      	movs	r0, r3
 8013cd0:	f005 fc68 	bl	80195a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013cd4:	687a      	ldr	r2, [r7, #4]
 8013cd6:	23aa      	movs	r3, #170	@ 0xaa
 8013cd8:	009b      	lsls	r3, r3, #2
 8013cda:	2100      	movs	r1, #0
 8013cdc:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013cde:	230b      	movs	r3, #11
 8013ce0:	18fb      	adds	r3, r7, r3
 8013ce2:	781b      	ldrb	r3, [r3, #0]
}
 8013ce4:	0018      	movs	r0, r3
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	b005      	add	sp, #20
 8013cea:	bd90      	pop	{r4, r7, pc}

08013cec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	000a      	movs	r2, r1
 8013cf6:	1cfb      	adds	r3, r7, #3
 8013cf8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013cfa:	1cfb      	adds	r3, r7, #3
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	b25b      	sxtb	r3, r3
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	da0f      	bge.n	8013d24 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013d04:	1cfb      	adds	r3, r7, #3
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	2207      	movs	r2, #7
 8013d0a:	4013      	ands	r3, r2
 8013d0c:	1c5a      	adds	r2, r3, #1
 8013d0e:	0013      	movs	r3, r2
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	189b      	adds	r3, r3, r2
 8013d14:	00db      	lsls	r3, r3, #3
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	18d3      	adds	r3, r2, r3
 8013d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	2201      	movs	r2, #1
 8013d20:	705a      	strb	r2, [r3, #1]
 8013d22:	e00f      	b.n	8013d44 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013d24:	1cfb      	adds	r3, r7, #3
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	2207      	movs	r2, #7
 8013d2a:	401a      	ands	r2, r3
 8013d2c:	0013      	movs	r3, r2
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	189b      	adds	r3, r3, r2
 8013d32:	00db      	lsls	r3, r3, #3
 8013d34:	3369      	adds	r3, #105	@ 0x69
 8013d36:	33ff      	adds	r3, #255	@ 0xff
 8013d38:	687a      	ldr	r2, [r7, #4]
 8013d3a:	18d3      	adds	r3, r2, r3
 8013d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2200      	movs	r2, #0
 8013d42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8013d44:	1cfb      	adds	r3, r7, #3
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	2207      	movs	r2, #7
 8013d4a:	4013      	ands	r3, r2
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013d52:	687a      	ldr	r2, [r7, #4]
 8013d54:	23aa      	movs	r3, #170	@ 0xaa
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	5cd3      	ldrb	r3, [r2, r3]
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	d101      	bne.n	8013d62 <HAL_PCD_EP_Close+0x76>
 8013d5e:	2302      	movs	r3, #2
 8013d60:	e011      	b.n	8013d86 <HAL_PCD_EP_Close+0x9a>
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	23aa      	movs	r3, #170	@ 0xaa
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	2101      	movs	r1, #1
 8013d6a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	68fa      	ldr	r2, [r7, #12]
 8013d72:	0011      	movs	r1, r2
 8013d74:	0018      	movs	r0, r3
 8013d76:	f005 ffb7 	bl	8019ce8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	23aa      	movs	r3, #170	@ 0xaa
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	2100      	movs	r1, #0
 8013d82:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8013d84:	2300      	movs	r3, #0
}
 8013d86:	0018      	movs	r0, r3
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	b004      	add	sp, #16
 8013d8c:	bd80      	pop	{r7, pc}

08013d8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013d8e:	b580      	push	{r7, lr}
 8013d90:	b086      	sub	sp, #24
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	60f8      	str	r0, [r7, #12]
 8013d96:	607a      	str	r2, [r7, #4]
 8013d98:	603b      	str	r3, [r7, #0]
 8013d9a:	200b      	movs	r0, #11
 8013d9c:	183b      	adds	r3, r7, r0
 8013d9e:	1c0a      	adds	r2, r1, #0
 8013da0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013da2:	0001      	movs	r1, r0
 8013da4:	187b      	adds	r3, r7, r1
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	2207      	movs	r2, #7
 8013daa:	401a      	ands	r2, r3
 8013dac:	0013      	movs	r3, r2
 8013dae:	009b      	lsls	r3, r3, #2
 8013db0:	189b      	adds	r3, r3, r2
 8013db2:	00db      	lsls	r3, r3, #3
 8013db4:	3369      	adds	r3, #105	@ 0x69
 8013db6:	33ff      	adds	r3, #255	@ 0xff
 8013db8:	68fa      	ldr	r2, [r7, #12]
 8013dba:	18d3      	adds	r3, r2, r3
 8013dbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	687a      	ldr	r2, [r7, #4]
 8013dc2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	683a      	ldr	r2, [r7, #0]
 8013dc8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013dd6:	187b      	adds	r3, r7, r1
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	2207      	movs	r2, #7
 8013ddc:	4013      	ands	r3, r2
 8013dde:	b2da      	uxtb	r2, r3
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	697a      	ldr	r2, [r7, #20]
 8013dea:	0011      	movs	r1, r2
 8013dec:	0018      	movs	r0, r3
 8013dee:	f006 f93b 	bl	801a068 <USB_EPStartXfer>

  return HAL_OK;
 8013df2:	2300      	movs	r3, #0
}
 8013df4:	0018      	movs	r0, r3
 8013df6:	46bd      	mov	sp, r7
 8013df8:	b006      	add	sp, #24
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	000a      	movs	r2, r1
 8013e06:	1cfb      	adds	r3, r7, #3
 8013e08:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013e0a:	1cfb      	adds	r3, r7, #3
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	2207      	movs	r2, #7
 8013e10:	401a      	ands	r2, r3
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	23c2      	movs	r3, #194	@ 0xc2
 8013e16:	0059      	lsls	r1, r3, #1
 8013e18:	0013      	movs	r3, r2
 8013e1a:	009b      	lsls	r3, r3, #2
 8013e1c:	189b      	adds	r3, r3, r2
 8013e1e:	00db      	lsls	r3, r3, #3
 8013e20:	18c3      	adds	r3, r0, r3
 8013e22:	185b      	adds	r3, r3, r1
 8013e24:	681b      	ldr	r3, [r3, #0]
}
 8013e26:	0018      	movs	r0, r3
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	b002      	add	sp, #8
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013e2e:	b580      	push	{r7, lr}
 8013e30:	b086      	sub	sp, #24
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	60f8      	str	r0, [r7, #12]
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	603b      	str	r3, [r7, #0]
 8013e3a:	200b      	movs	r0, #11
 8013e3c:	183b      	adds	r3, r7, r0
 8013e3e:	1c0a      	adds	r2, r1, #0
 8013e40:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013e42:	183b      	adds	r3, r7, r0
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	2207      	movs	r2, #7
 8013e48:	4013      	ands	r3, r2
 8013e4a:	1c5a      	adds	r2, r3, #1
 8013e4c:	0013      	movs	r3, r2
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	189b      	adds	r3, r3, r2
 8013e52:	00db      	lsls	r3, r3, #3
 8013e54:	68fa      	ldr	r2, [r7, #12]
 8013e56:	18d3      	adds	r3, r2, r3
 8013e58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	687a      	ldr	r2, [r7, #4]
 8013e5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	683a      	ldr	r2, [r7, #0]
 8013e64:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	2224      	movs	r2, #36	@ 0x24
 8013e6a:	2101      	movs	r1, #1
 8013e6c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	683a      	ldr	r2, [r7, #0]
 8013e72:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	2200      	movs	r2, #0
 8013e78:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013e80:	183b      	adds	r3, r7, r0
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	2207      	movs	r2, #7
 8013e86:	4013      	ands	r3, r2
 8013e88:	b2da      	uxtb	r2, r3
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	697a      	ldr	r2, [r7, #20]
 8013e94:	0011      	movs	r1, r2
 8013e96:	0018      	movs	r0, r3
 8013e98:	f006 f8e6 	bl	801a068 <USB_EPStartXfer>

  return HAL_OK;
 8013e9c:	2300      	movs	r3, #0
}
 8013e9e:	0018      	movs	r0, r3
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	b006      	add	sp, #24
 8013ea4:	bd80      	pop	{r7, pc}

08013ea6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013ea6:	b580      	push	{r7, lr}
 8013ea8:	b084      	sub	sp, #16
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
 8013eae:	000a      	movs	r2, r1
 8013eb0:	1cfb      	adds	r3, r7, #3
 8013eb2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8013eb4:	1cfb      	adds	r3, r7, #3
 8013eb6:	781b      	ldrb	r3, [r3, #0]
 8013eb8:	2207      	movs	r2, #7
 8013eba:	401a      	ands	r2, r3
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d901      	bls.n	8013ec8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e046      	b.n	8013f56 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013ec8:	1cfb      	adds	r3, r7, #3
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	b25b      	sxtb	r3, r3
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	da0f      	bge.n	8013ef2 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013ed2:	1cfb      	adds	r3, r7, #3
 8013ed4:	781b      	ldrb	r3, [r3, #0]
 8013ed6:	2207      	movs	r2, #7
 8013ed8:	4013      	ands	r3, r2
 8013eda:	1c5a      	adds	r2, r3, #1
 8013edc:	0013      	movs	r3, r2
 8013ede:	009b      	lsls	r3, r3, #2
 8013ee0:	189b      	adds	r3, r3, r2
 8013ee2:	00db      	lsls	r3, r3, #3
 8013ee4:	687a      	ldr	r2, [r7, #4]
 8013ee6:	18d3      	adds	r3, r2, r3
 8013ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2201      	movs	r2, #1
 8013eee:	705a      	strb	r2, [r3, #1]
 8013ef0:	e00d      	b.n	8013f0e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013ef2:	1cfb      	adds	r3, r7, #3
 8013ef4:	781a      	ldrb	r2, [r3, #0]
 8013ef6:	0013      	movs	r3, r2
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	189b      	adds	r3, r3, r2
 8013efc:	00db      	lsls	r3, r3, #3
 8013efe:	3369      	adds	r3, #105	@ 0x69
 8013f00:	33ff      	adds	r3, #255	@ 0xff
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	18d3      	adds	r3, r2, r3
 8013f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	2201      	movs	r2, #1
 8013f12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013f14:	1cfb      	adds	r3, r7, #3
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	2207      	movs	r2, #7
 8013f1a:	4013      	ands	r3, r2
 8013f1c:	b2da      	uxtb	r2, r3
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	23aa      	movs	r3, #170	@ 0xaa
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	5cd3      	ldrb	r3, [r2, r3]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d101      	bne.n	8013f32 <HAL_PCD_EP_SetStall+0x8c>
 8013f2e:	2302      	movs	r3, #2
 8013f30:	e011      	b.n	8013f56 <HAL_PCD_EP_SetStall+0xb0>
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	23aa      	movs	r3, #170	@ 0xaa
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	2101      	movs	r1, #1
 8013f3a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	68fa      	ldr	r2, [r7, #12]
 8013f42:	0011      	movs	r1, r2
 8013f44:	0018      	movs	r0, r3
 8013f46:	f007 f9c7 	bl	801b2d8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	23aa      	movs	r3, #170	@ 0xaa
 8013f4e:	009b      	lsls	r3, r3, #2
 8013f50:	2100      	movs	r1, #0
 8013f52:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013f54:	2300      	movs	r3, #0
}
 8013f56:	0018      	movs	r0, r3
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	b004      	add	sp, #16
 8013f5c:	bd80      	pop	{r7, pc}

08013f5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b084      	sub	sp, #16
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
 8013f66:	000a      	movs	r2, r1
 8013f68:	1cfb      	adds	r3, r7, #3
 8013f6a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013f6c:	1cfb      	adds	r3, r7, #3
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	220f      	movs	r2, #15
 8013f72:	401a      	ands	r2, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	d901      	bls.n	8013f80 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	e048      	b.n	8014012 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013f80:	1cfb      	adds	r3, r7, #3
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	b25b      	sxtb	r3, r3
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	da0f      	bge.n	8013faa <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013f8a:	1cfb      	adds	r3, r7, #3
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	2207      	movs	r2, #7
 8013f90:	4013      	ands	r3, r2
 8013f92:	1c5a      	adds	r2, r3, #1
 8013f94:	0013      	movs	r3, r2
 8013f96:	009b      	lsls	r3, r3, #2
 8013f98:	189b      	adds	r3, r3, r2
 8013f9a:	00db      	lsls	r3, r3, #3
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	18d3      	adds	r3, r2, r3
 8013fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	705a      	strb	r2, [r3, #1]
 8013fa8:	e00f      	b.n	8013fca <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013faa:	1cfb      	adds	r3, r7, #3
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	2207      	movs	r2, #7
 8013fb0:	401a      	ands	r2, r3
 8013fb2:	0013      	movs	r3, r2
 8013fb4:	009b      	lsls	r3, r3, #2
 8013fb6:	189b      	adds	r3, r3, r2
 8013fb8:	00db      	lsls	r3, r3, #3
 8013fba:	3369      	adds	r3, #105	@ 0x69
 8013fbc:	33ff      	adds	r3, #255	@ 0xff
 8013fbe:	687a      	ldr	r2, [r7, #4]
 8013fc0:	18d3      	adds	r3, r2, r3
 8013fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013fd0:	1cfb      	adds	r3, r7, #3
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	2207      	movs	r2, #7
 8013fd6:	4013      	ands	r3, r2
 8013fd8:	b2da      	uxtb	r2, r3
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	23aa      	movs	r3, #170	@ 0xaa
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	5cd3      	ldrb	r3, [r2, r3]
 8013fe6:	2b01      	cmp	r3, #1
 8013fe8:	d101      	bne.n	8013fee <HAL_PCD_EP_ClrStall+0x90>
 8013fea:	2302      	movs	r3, #2
 8013fec:	e011      	b.n	8014012 <HAL_PCD_EP_ClrStall+0xb4>
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	23aa      	movs	r3, #170	@ 0xaa
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	2101      	movs	r1, #1
 8013ff6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	0011      	movs	r1, r2
 8014000:	0018      	movs	r0, r3
 8014002:	f007 f9b9 	bl	801b378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8014006:	687a      	ldr	r2, [r7, #4]
 8014008:	23aa      	movs	r3, #170	@ 0xaa
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	2100      	movs	r1, #0
 801400e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8014010:	2300      	movs	r3, #0
}
 8014012:	0018      	movs	r0, r3
 8014014:	46bd      	mov	sp, r7
 8014016:	b004      	add	sp, #16
 8014018:	bd80      	pop	{r7, pc}
	...

0801401c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 801401c:	b5b0      	push	{r4, r5, r7, lr}
 801401e:	b096      	sub	sp, #88	@ 0x58
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014024:	f000 fbec 	bl	8014800 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	204e      	movs	r0, #78	@ 0x4e
 801402e:	183b      	adds	r3, r7, r0
 8014030:	2144      	movs	r1, #68	@ 0x44
 8014032:	5a52      	ldrh	r2, [r2, r1]
 8014034:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8014036:	183b      	adds	r3, r7, r0
 8014038:	881b      	ldrh	r3, [r3, #0]
 801403a:	b2da      	uxtb	r2, r3
 801403c:	244d      	movs	r4, #77	@ 0x4d
 801403e:	193b      	adds	r3, r7, r4
 8014040:	210f      	movs	r1, #15
 8014042:	400a      	ands	r2, r1
 8014044:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8014046:	193b      	adds	r3, r7, r4
 8014048:	781b      	ldrb	r3, [r3, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d000      	beq.n	8014050 <PCD_EP_ISR_Handler+0x34>
 801404e:	e18f      	b.n	8014370 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8014050:	183b      	adds	r3, r7, r0
 8014052:	881b      	ldrh	r3, [r3, #0]
 8014054:	2210      	movs	r2, #16
 8014056:	4013      	ands	r3, r2
 8014058:	d155      	bne.n	8014106 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	881b      	ldrh	r3, [r3, #0]
 8014060:	b29a      	uxth	r2, r3
 8014062:	200e      	movs	r0, #14
 8014064:	183b      	adds	r3, r7, r0
 8014066:	49bb      	ldr	r1, [pc, #748]	@ (8014354 <PCD_EP_ISR_Handler+0x338>)
 8014068:	400a      	ands	r2, r1
 801406a:	801a      	strh	r2, [r3, #0]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	183a      	adds	r2, r7, r0
 8014072:	8812      	ldrh	r2, [r2, #0]
 8014074:	49b8      	ldr	r1, [pc, #736]	@ (8014358 <PCD_EP_ISR_Handler+0x33c>)
 8014076:	430a      	orrs	r2, r1
 8014078:	b292      	uxth	r2, r2
 801407a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	3328      	adds	r3, #40	@ 0x28
 8014080:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2250      	movs	r2, #80	@ 0x50
 8014088:	5a9b      	ldrh	r3, [r3, r2]
 801408a:	b29b      	uxth	r3, r3
 801408c:	001a      	movs	r2, r3
 801408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	00db      	lsls	r3, r3, #3
 8014094:	18d2      	adds	r2, r2, r3
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	18d3      	adds	r3, r2, r3
 801409c:	4aaf      	ldr	r2, [pc, #700]	@ (801435c <PCD_EP_ISR_Handler+0x340>)
 801409e:	4694      	mov	ip, r2
 80140a0:	4463      	add	r3, ip
 80140a2:	881b      	ldrh	r3, [r3, #0]
 80140a4:	059b      	lsls	r3, r3, #22
 80140a6:	0d9a      	lsrs	r2, r3, #22
 80140a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80140ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140ae:	695a      	ldr	r2, [r3, #20]
 80140b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140b2:	69db      	ldr	r3, [r3, #28]
 80140b4:	18d2      	adds	r2, r2, r3
 80140b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140b8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2100      	movs	r1, #0
 80140be:	0018      	movs	r0, r3
 80140c0:	f009 fac8 	bl	801d654 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2224      	movs	r2, #36	@ 0x24
 80140c8:	5c9b      	ldrb	r3, [r3, r2]
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d101      	bne.n	80140d4 <PCD_EP_ISR_Handler+0xb8>
 80140d0:	f000 fb96 	bl	8014800 <PCD_EP_ISR_Handler+0x7e4>
 80140d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140d6:	699b      	ldr	r3, [r3, #24]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d001      	beq.n	80140e0 <PCD_EP_ISR_Handler+0xc4>
 80140dc:	f000 fb90 	bl	8014800 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2224      	movs	r2, #36	@ 0x24
 80140e4:	5c9b      	ldrb	r3, [r3, r2]
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	2280      	movs	r2, #128	@ 0x80
 80140ea:	4252      	negs	r2, r2
 80140ec:	4313      	orrs	r3, r2
 80140ee:	b2da      	uxtb	r2, r3
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	0011      	movs	r1, r2
 80140f6:	224c      	movs	r2, #76	@ 0x4c
 80140f8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2224      	movs	r2, #36	@ 0x24
 80140fe:	2100      	movs	r1, #0
 8014100:	5499      	strb	r1, [r3, r2]
 8014102:	f000 fb7d 	bl	8014800 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	3369      	adds	r3, #105	@ 0x69
 801410a:	33ff      	adds	r3, #255	@ 0xff
 801410c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	214a      	movs	r1, #74	@ 0x4a
 8014114:	187b      	adds	r3, r7, r1
 8014116:	8812      	ldrh	r2, [r2, #0]
 8014118:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801411a:	187b      	adds	r3, r7, r1
 801411c:	881a      	ldrh	r2, [r3, #0]
 801411e:	2380      	movs	r3, #128	@ 0x80
 8014120:	011b      	lsls	r3, r3, #4
 8014122:	4013      	ands	r3, r2
 8014124:	d037      	beq.n	8014196 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2250      	movs	r2, #80	@ 0x50
 801412c:	5a9b      	ldrh	r3, [r3, r2]
 801412e:	b29b      	uxth	r3, r3
 8014130:	001a      	movs	r2, r3
 8014132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	00db      	lsls	r3, r3, #3
 8014138:	18d2      	adds	r2, r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	18d3      	adds	r3, r2, r3
 8014140:	4a87      	ldr	r2, [pc, #540]	@ (8014360 <PCD_EP_ISR_Handler+0x344>)
 8014142:	4694      	mov	ip, r2
 8014144:	4463      	add	r3, ip
 8014146:	881b      	ldrh	r3, [r3, #0]
 8014148:	059b      	lsls	r3, r3, #22
 801414a:	0d9a      	lsrs	r2, r3, #22
 801414c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801414e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6818      	ldr	r0, [r3, #0]
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	22ac      	movs	r2, #172	@ 0xac
 8014158:	0092      	lsls	r2, r2, #2
 801415a:	1899      	adds	r1, r3, r2
 801415c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801415e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8014160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014162:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8014164:	b29b      	uxth	r3, r3
 8014166:	f007 fa3a 	bl	801b5de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	881b      	ldrh	r3, [r3, #0]
 8014170:	b29a      	uxth	r2, r3
 8014172:	2010      	movs	r0, #16
 8014174:	183b      	adds	r3, r7, r0
 8014176:	497b      	ldr	r1, [pc, #492]	@ (8014364 <PCD_EP_ISR_Handler+0x348>)
 8014178:	400a      	ands	r2, r1
 801417a:	801a      	strh	r2, [r3, #0]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	183a      	adds	r2, r7, r0
 8014182:	8812      	ldrh	r2, [r2, #0]
 8014184:	2180      	movs	r1, #128	@ 0x80
 8014186:	430a      	orrs	r2, r1
 8014188:	b292      	uxth	r2, r2
 801418a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	0018      	movs	r0, r3
 8014190:	f009 fa2a 	bl	801d5e8 <HAL_PCD_SetupStageCallback>
 8014194:	e334      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8014196:	234a      	movs	r3, #74	@ 0x4a
 8014198:	18fb      	adds	r3, r7, r3
 801419a:	2200      	movs	r2, #0
 801419c:	5e9b      	ldrsh	r3, [r3, r2]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	db00      	blt.n	80141a4 <PCD_EP_ISR_Handler+0x188>
 80141a2:	e32d      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	881b      	ldrh	r3, [r3, #0]
 80141aa:	b29a      	uxth	r2, r3
 80141ac:	201e      	movs	r0, #30
 80141ae:	183b      	adds	r3, r7, r0
 80141b0:	496c      	ldr	r1, [pc, #432]	@ (8014364 <PCD_EP_ISR_Handler+0x348>)
 80141b2:	400a      	ands	r2, r1
 80141b4:	801a      	strh	r2, [r3, #0]
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	183a      	adds	r2, r7, r0
 80141bc:	8812      	ldrh	r2, [r2, #0]
 80141be:	2180      	movs	r1, #128	@ 0x80
 80141c0:	430a      	orrs	r2, r1
 80141c2:	b292      	uxth	r2, r2
 80141c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2250      	movs	r2, #80	@ 0x50
 80141cc:	5a9b      	ldrh	r3, [r3, r2]
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	001a      	movs	r2, r3
 80141d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	00db      	lsls	r3, r3, #3
 80141d8:	18d2      	adds	r2, r2, r3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	18d3      	adds	r3, r2, r3
 80141e0:	4a5f      	ldr	r2, [pc, #380]	@ (8014360 <PCD_EP_ISR_Handler+0x344>)
 80141e2:	4694      	mov	ip, r2
 80141e4:	4463      	add	r3, ip
 80141e6:	881b      	ldrh	r3, [r3, #0]
 80141e8:	059b      	lsls	r3, r3, #22
 80141ea:	0d9a      	lsrs	r2, r3, #22
 80141ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80141f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141f2:	69db      	ldr	r3, [r3, #28]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d01a      	beq.n	801422e <PCD_EP_ISR_Handler+0x212>
 80141f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141fa:	695b      	ldr	r3, [r3, #20]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d016      	beq.n	801422e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6818      	ldr	r0, [r3, #0]
 8014204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014206:	6959      	ldr	r1, [r3, #20]
 8014208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801420a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801420c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801420e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014210:	b29b      	uxth	r3, r3
 8014212:	f007 f9e4 	bl	801b5de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8014216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014218:	695a      	ldr	r2, [r3, #20]
 801421a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801421c:	69db      	ldr	r3, [r3, #28]
 801421e:	18d2      	adds	r2, r2, r3
 8014220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014222:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2100      	movs	r1, #0
 8014228:	0018      	movs	r0, r3
 801422a:	f009 f9f2 	bl	801d612 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681a      	ldr	r2, [r3, #0]
 8014232:	214a      	movs	r1, #74	@ 0x4a
 8014234:	187b      	adds	r3, r7, r1
 8014236:	8812      	ldrh	r2, [r2, #0]
 8014238:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801423a:	187b      	adds	r3, r7, r1
 801423c:	881a      	ldrh	r2, [r3, #0]
 801423e:	2380      	movs	r3, #128	@ 0x80
 8014240:	011b      	lsls	r3, r3, #4
 8014242:	4013      	ands	r3, r2
 8014244:	d000      	beq.n	8014248 <PCD_EP_ISR_Handler+0x22c>
 8014246:	e2db      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
 8014248:	187b      	adds	r3, r7, r1
 801424a:	881a      	ldrh	r2, [r3, #0]
 801424c:	23c0      	movs	r3, #192	@ 0xc0
 801424e:	019b      	lsls	r3, r3, #6
 8014250:	401a      	ands	r2, r3
 8014252:	23c0      	movs	r3, #192	@ 0xc0
 8014254:	019b      	lsls	r3, r3, #6
 8014256:	429a      	cmp	r2, r3
 8014258:	d100      	bne.n	801425c <PCD_EP_ISR_Handler+0x240>
 801425a:	e2d1      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	61bb      	str	r3, [r7, #24]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	2250      	movs	r2, #80	@ 0x50
 8014268:	5a9b      	ldrh	r3, [r3, r2]
 801426a:	b29b      	uxth	r3, r3
 801426c:	001a      	movs	r2, r3
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	189b      	adds	r3, r3, r2
 8014272:	61bb      	str	r3, [r7, #24]
 8014274:	69bb      	ldr	r3, [r7, #24]
 8014276:	4a3a      	ldr	r2, [pc, #232]	@ (8014360 <PCD_EP_ISR_Handler+0x344>)
 8014278:	4694      	mov	ip, r2
 801427a:	4463      	add	r3, ip
 801427c:	617b      	str	r3, [r7, #20]
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	881b      	ldrh	r3, [r3, #0]
 8014282:	b29b      	uxth	r3, r3
 8014284:	059b      	lsls	r3, r3, #22
 8014286:	0d9b      	lsrs	r3, r3, #22
 8014288:	b29a      	uxth	r2, r3
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	801a      	strh	r2, [r3, #0]
 801428e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014290:	691b      	ldr	r3, [r3, #16]
 8014292:	2b3e      	cmp	r3, #62	@ 0x3e
 8014294:	d91a      	bls.n	80142cc <PCD_EP_ISR_Handler+0x2b0>
 8014296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014298:	691b      	ldr	r3, [r3, #16]
 801429a:	095b      	lsrs	r3, r3, #5
 801429c:	647b      	str	r3, [r7, #68]	@ 0x44
 801429e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142a0:	691b      	ldr	r3, [r3, #16]
 80142a2:	221f      	movs	r2, #31
 80142a4:	4013      	ands	r3, r2
 80142a6:	d102      	bne.n	80142ae <PCD_EP_ISR_Handler+0x292>
 80142a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142aa:	3b01      	subs	r3, #1
 80142ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80142ae:	697b      	ldr	r3, [r7, #20]
 80142b0:	881b      	ldrh	r3, [r3, #0]
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	029b      	lsls	r3, r3, #10
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	4313      	orrs	r3, r2
 80142be:	b29b      	uxth	r3, r3
 80142c0:	4a25      	ldr	r2, [pc, #148]	@ (8014358 <PCD_EP_ISR_Handler+0x33c>)
 80142c2:	4313      	orrs	r3, r2
 80142c4:	b29a      	uxth	r2, r3
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	801a      	strh	r2, [r3, #0]
 80142ca:	e023      	b.n	8014314 <PCD_EP_ISR_Handler+0x2f8>
 80142cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142ce:	691b      	ldr	r3, [r3, #16]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d108      	bne.n	80142e6 <PCD_EP_ISR_Handler+0x2ca>
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	b29b      	uxth	r3, r3
 80142da:	4a1f      	ldr	r2, [pc, #124]	@ (8014358 <PCD_EP_ISR_Handler+0x33c>)
 80142dc:	4313      	orrs	r3, r2
 80142de:	b29a      	uxth	r2, r3
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	801a      	strh	r2, [r3, #0]
 80142e4:	e016      	b.n	8014314 <PCD_EP_ISR_Handler+0x2f8>
 80142e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142e8:	691b      	ldr	r3, [r3, #16]
 80142ea:	085b      	lsrs	r3, r3, #1
 80142ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80142ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142f0:	691b      	ldr	r3, [r3, #16]
 80142f2:	2201      	movs	r2, #1
 80142f4:	4013      	ands	r3, r2
 80142f6:	d002      	beq.n	80142fe <PCD_EP_ISR_Handler+0x2e2>
 80142f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142fa:	3301      	adds	r3, #1
 80142fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	881b      	ldrh	r3, [r3, #0]
 8014302:	b29a      	uxth	r2, r3
 8014304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014306:	b29b      	uxth	r3, r3
 8014308:	029b      	lsls	r3, r3, #10
 801430a:	b29b      	uxth	r3, r3
 801430c:	4313      	orrs	r3, r2
 801430e:	b29a      	uxth	r2, r3
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	881b      	ldrh	r3, [r3, #0]
 801431a:	b29a      	uxth	r2, r3
 801431c:	2012      	movs	r0, #18
 801431e:	183b      	adds	r3, r7, r0
 8014320:	4911      	ldr	r1, [pc, #68]	@ (8014368 <PCD_EP_ISR_Handler+0x34c>)
 8014322:	400a      	ands	r2, r1
 8014324:	801a      	strh	r2, [r3, #0]
 8014326:	183b      	adds	r3, r7, r0
 8014328:	183a      	adds	r2, r7, r0
 801432a:	8812      	ldrh	r2, [r2, #0]
 801432c:	2180      	movs	r1, #128	@ 0x80
 801432e:	0149      	lsls	r1, r1, #5
 8014330:	404a      	eors	r2, r1
 8014332:	801a      	strh	r2, [r3, #0]
 8014334:	183b      	adds	r3, r7, r0
 8014336:	183a      	adds	r2, r7, r0
 8014338:	8812      	ldrh	r2, [r2, #0]
 801433a:	2180      	movs	r1, #128	@ 0x80
 801433c:	0189      	lsls	r1, r1, #6
 801433e:	404a      	eors	r2, r1
 8014340:	801a      	strh	r2, [r3, #0]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	183a      	adds	r2, r7, r0
 8014348:	8812      	ldrh	r2, [r2, #0]
 801434a:	4908      	ldr	r1, [pc, #32]	@ (801436c <PCD_EP_ISR_Handler+0x350>)
 801434c:	430a      	orrs	r2, r1
 801434e:	b292      	uxth	r2, r2
 8014350:	801a      	strh	r2, [r3, #0]
 8014352:	e255      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
 8014354:	ffff8f0f 	.word	0xffff8f0f
 8014358:	ffff8000 	.word	0xffff8000
 801435c:	00000402 	.word	0x00000402
 8014360:	00000406 	.word	0x00000406
 8014364:	00000f8f 	.word	0x00000f8f
 8014368:	ffffbf8f 	.word	0xffffbf8f
 801436c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	001a      	movs	r2, r3
 8014376:	204d      	movs	r0, #77	@ 0x4d
 8014378:	183b      	adds	r3, r7, r0
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	009b      	lsls	r3, r3, #2
 801437e:	18d2      	adds	r2, r2, r3
 8014380:	214a      	movs	r1, #74	@ 0x4a
 8014382:	187b      	adds	r3, r7, r1
 8014384:	8812      	ldrh	r2, [r2, #0]
 8014386:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8014388:	187b      	adds	r3, r7, r1
 801438a:	2200      	movs	r2, #0
 801438c:	5e9b      	ldrsh	r3, [r3, r2]
 801438e:	2b00      	cmp	r3, #0
 8014390:	db00      	blt.n	8014394 <PCD_EP_ISR_Handler+0x378>
 8014392:	e0fa      	b.n	801458a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	001a      	movs	r2, r3
 801439a:	183b      	adds	r3, r7, r0
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	18d3      	adds	r3, r2, r3
 80143a2:	881b      	ldrh	r3, [r3, #0]
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	2448      	movs	r4, #72	@ 0x48
 80143a8:	193b      	adds	r3, r7, r4
 80143aa:	49d1      	ldr	r1, [pc, #836]	@ (80146f0 <PCD_EP_ISR_Handler+0x6d4>)
 80143ac:	400a      	ands	r2, r1
 80143ae:	801a      	strh	r2, [r3, #0]
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	001a      	movs	r2, r3
 80143b6:	183b      	adds	r3, r7, r0
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	009b      	lsls	r3, r3, #2
 80143bc:	18d3      	adds	r3, r2, r3
 80143be:	193a      	adds	r2, r7, r4
 80143c0:	8812      	ldrh	r2, [r2, #0]
 80143c2:	2180      	movs	r1, #128	@ 0x80
 80143c4:	430a      	orrs	r2, r1
 80143c6:	b292      	uxth	r2, r2
 80143c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80143ca:	183b      	adds	r3, r7, r0
 80143cc:	781a      	ldrb	r2, [r3, #0]
 80143ce:	0013      	movs	r3, r2
 80143d0:	009b      	lsls	r3, r3, #2
 80143d2:	189b      	adds	r3, r3, r2
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	3369      	adds	r3, #105	@ 0x69
 80143d8:	33ff      	adds	r3, #255	@ 0xff
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	18d3      	adds	r3, r2, r3
 80143de:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80143e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143e2:	7b1b      	ldrb	r3, [r3, #12]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d125      	bne.n	8014434 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2250      	movs	r2, #80	@ 0x50
 80143ee:	5a9b      	ldrh	r3, [r3, r2]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	001a      	movs	r2, r3
 80143f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	00db      	lsls	r3, r3, #3
 80143fa:	18d2      	adds	r2, r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	18d3      	adds	r3, r2, r3
 8014402:	4abc      	ldr	r2, [pc, #752]	@ (80146f4 <PCD_EP_ISR_Handler+0x6d8>)
 8014404:	4694      	mov	ip, r2
 8014406:	4463      	add	r3, ip
 8014408:	881a      	ldrh	r2, [r3, #0]
 801440a:	2450      	movs	r4, #80	@ 0x50
 801440c:	193b      	adds	r3, r7, r4
 801440e:	0592      	lsls	r2, r2, #22
 8014410:	0d92      	lsrs	r2, r2, #22
 8014412:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8014414:	193b      	adds	r3, r7, r4
 8014416:	881b      	ldrh	r3, [r3, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d100      	bne.n	801441e <PCD_EP_ISR_Handler+0x402>
 801441c:	e08d      	b.n	801453a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	6818      	ldr	r0, [r3, #0]
 8014422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014424:	6959      	ldr	r1, [r3, #20]
 8014426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014428:	88da      	ldrh	r2, [r3, #6]
 801442a:	193b      	adds	r3, r7, r4
 801442c:	881b      	ldrh	r3, [r3, #0]
 801442e:	f007 f8d6 	bl	801b5de <USB_ReadPMA>
 8014432:	e082      	b.n	801453a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8014434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014436:	78db      	ldrb	r3, [r3, #3]
 8014438:	2b02      	cmp	r3, #2
 801443a:	d10c      	bne.n	8014456 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801443c:	2350      	movs	r3, #80	@ 0x50
 801443e:	18fc      	adds	r4, r7, r3
 8014440:	234a      	movs	r3, #74	@ 0x4a
 8014442:	18fb      	adds	r3, r7, r3
 8014444:	881a      	ldrh	r2, [r3, #0]
 8014446:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	0018      	movs	r0, r3
 801444c:	f000 f9ec 	bl	8014828 <HAL_PCD_EP_DB_Receive>
 8014450:	0003      	movs	r3, r0
 8014452:	8023      	strh	r3, [r4, #0]
 8014454:	e071      	b.n	801453a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	001a      	movs	r2, r3
 801445c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801445e:	781b      	ldrb	r3, [r3, #0]
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	18d3      	adds	r3, r2, r3
 8014464:	881b      	ldrh	r3, [r3, #0]
 8014466:	b29a      	uxth	r2, r3
 8014468:	2052      	movs	r0, #82	@ 0x52
 801446a:	183b      	adds	r3, r7, r0
 801446c:	49a2      	ldr	r1, [pc, #648]	@ (80146f8 <PCD_EP_ISR_Handler+0x6dc>)
 801446e:	400a      	ands	r2, r1
 8014470:	801a      	strh	r2, [r3, #0]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	001a      	movs	r2, r3
 8014478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	009b      	lsls	r3, r3, #2
 801447e:	18d3      	adds	r3, r2, r3
 8014480:	183a      	adds	r2, r7, r0
 8014482:	8812      	ldrh	r2, [r2, #0]
 8014484:	499d      	ldr	r1, [pc, #628]	@ (80146fc <PCD_EP_ISR_Handler+0x6e0>)
 8014486:	430a      	orrs	r2, r1
 8014488:	b292      	uxth	r2, r2
 801448a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	001a      	movs	r2, r3
 8014492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	18d3      	adds	r3, r2, r3
 801449a:	881b      	ldrh	r3, [r3, #0]
 801449c:	b29b      	uxth	r3, r3
 801449e:	001a      	movs	r2, r3
 80144a0:	2380      	movs	r3, #128	@ 0x80
 80144a2:	01db      	lsls	r3, r3, #7
 80144a4:	4013      	ands	r3, r2
 80144a6:	d024      	beq.n	80144f2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2250      	movs	r2, #80	@ 0x50
 80144ae:	5a9b      	ldrh	r3, [r3, r2]
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	001a      	movs	r2, r3
 80144b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	00db      	lsls	r3, r3, #3
 80144ba:	18d2      	adds	r2, r2, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	18d3      	adds	r3, r2, r3
 80144c2:	4a8f      	ldr	r2, [pc, #572]	@ (8014700 <PCD_EP_ISR_Handler+0x6e4>)
 80144c4:	4694      	mov	ip, r2
 80144c6:	4463      	add	r3, ip
 80144c8:	881a      	ldrh	r2, [r3, #0]
 80144ca:	2450      	movs	r4, #80	@ 0x50
 80144cc:	193b      	adds	r3, r7, r4
 80144ce:	0592      	lsls	r2, r2, #22
 80144d0:	0d92      	lsrs	r2, r2, #22
 80144d2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80144d4:	193b      	adds	r3, r7, r4
 80144d6:	881b      	ldrh	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d02e      	beq.n	801453a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6818      	ldr	r0, [r3, #0]
 80144e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144e2:	6959      	ldr	r1, [r3, #20]
 80144e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144e6:	891a      	ldrh	r2, [r3, #8]
 80144e8:	193b      	adds	r3, r7, r4
 80144ea:	881b      	ldrh	r3, [r3, #0]
 80144ec:	f007 f877 	bl	801b5de <USB_ReadPMA>
 80144f0:	e023      	b.n	801453a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2250      	movs	r2, #80	@ 0x50
 80144f8:	5a9b      	ldrh	r3, [r3, r2]
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	001a      	movs	r2, r3
 80144fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	00db      	lsls	r3, r3, #3
 8014504:	18d2      	adds	r2, r2, r3
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	18d3      	adds	r3, r2, r3
 801450c:	4a79      	ldr	r2, [pc, #484]	@ (80146f4 <PCD_EP_ISR_Handler+0x6d8>)
 801450e:	4694      	mov	ip, r2
 8014510:	4463      	add	r3, ip
 8014512:	881a      	ldrh	r2, [r3, #0]
 8014514:	2450      	movs	r4, #80	@ 0x50
 8014516:	193b      	adds	r3, r7, r4
 8014518:	0592      	lsls	r2, r2, #22
 801451a:	0d92      	lsrs	r2, r2, #22
 801451c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801451e:	193b      	adds	r3, r7, r4
 8014520:	881b      	ldrh	r3, [r3, #0]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d009      	beq.n	801453a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6818      	ldr	r0, [r3, #0]
 801452a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801452c:	6959      	ldr	r1, [r3, #20]
 801452e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014530:	895a      	ldrh	r2, [r3, #10]
 8014532:	193b      	adds	r3, r7, r4
 8014534:	881b      	ldrh	r3, [r3, #0]
 8014536:	f007 f852 	bl	801b5de <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801453a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801453c:	69da      	ldr	r2, [r3, #28]
 801453e:	2150      	movs	r1, #80	@ 0x50
 8014540:	187b      	adds	r3, r7, r1
 8014542:	881b      	ldrh	r3, [r3, #0]
 8014544:	18d2      	adds	r2, r2, r3
 8014546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014548:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801454a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801454c:	695a      	ldr	r2, [r3, #20]
 801454e:	187b      	adds	r3, r7, r1
 8014550:	881b      	ldrh	r3, [r3, #0]
 8014552:	18d2      	adds	r2, r2, r3
 8014554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014556:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8014558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801455a:	699b      	ldr	r3, [r3, #24]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d005      	beq.n	801456c <PCD_EP_ISR_Handler+0x550>
 8014560:	187b      	adds	r3, r7, r1
 8014562:	881a      	ldrh	r2, [r3, #0]
 8014564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014566:	691b      	ldr	r3, [r3, #16]
 8014568:	429a      	cmp	r2, r3
 801456a:	d207      	bcs.n	801457c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801456c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801456e:	781a      	ldrb	r2, [r3, #0]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	0011      	movs	r1, r2
 8014574:	0018      	movs	r0, r3
 8014576:	f009 f84c 	bl	801d612 <HAL_PCD_DataOutStageCallback>
 801457a:	e006      	b.n	801458a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014582:	0011      	movs	r1, r2
 8014584:	0018      	movs	r0, r3
 8014586:	f005 fd6f 	bl	801a068 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801458a:	244a      	movs	r4, #74	@ 0x4a
 801458c:	193b      	adds	r3, r7, r4
 801458e:	881b      	ldrh	r3, [r3, #0]
 8014590:	2280      	movs	r2, #128	@ 0x80
 8014592:	4013      	ands	r3, r2
 8014594:	d100      	bne.n	8014598 <PCD_EP_ISR_Handler+0x57c>
 8014596:	e133      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8014598:	204d      	movs	r0, #77	@ 0x4d
 801459a:	183b      	adds	r3, r7, r0
 801459c:	781b      	ldrb	r3, [r3, #0]
 801459e:	1c5a      	adds	r2, r3, #1
 80145a0:	0013      	movs	r3, r2
 80145a2:	009b      	lsls	r3, r3, #2
 80145a4:	189b      	adds	r3, r3, r2
 80145a6:	00db      	lsls	r3, r3, #3
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	18d3      	adds	r3, r2, r3
 80145ac:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	001a      	movs	r2, r3
 80145b4:	183b      	adds	r3, r7, r0
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	009b      	lsls	r3, r3, #2
 80145ba:	18d3      	adds	r3, r2, r3
 80145bc:	881b      	ldrh	r3, [r3, #0]
 80145be:	b29a      	uxth	r2, r3
 80145c0:	2542      	movs	r5, #66	@ 0x42
 80145c2:	197b      	adds	r3, r7, r5
 80145c4:	494f      	ldr	r1, [pc, #316]	@ (8014704 <PCD_EP_ISR_Handler+0x6e8>)
 80145c6:	400a      	ands	r2, r1
 80145c8:	801a      	strh	r2, [r3, #0]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	001a      	movs	r2, r3
 80145d0:	183b      	adds	r3, r7, r0
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	18d3      	adds	r3, r2, r3
 80145d8:	197a      	adds	r2, r7, r5
 80145da:	8812      	ldrh	r2, [r2, #0]
 80145dc:	494a      	ldr	r1, [pc, #296]	@ (8014708 <PCD_EP_ISR_Handler+0x6ec>)
 80145de:	430a      	orrs	r2, r1
 80145e0:	b292      	uxth	r2, r2
 80145e2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80145e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145e6:	78db      	ldrb	r3, [r3, #3]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d000      	beq.n	80145ee <PCD_EP_ISR_Handler+0x5d2>
 80145ec:	e0af      	b.n	801474e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80145ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145f0:	2200      	movs	r2, #0
 80145f2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80145f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145f6:	7b1b      	ldrb	r3, [r3, #12]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d100      	bne.n	80145fe <PCD_EP_ISR_Handler+0x5e2>
 80145fc:	e09f      	b.n	801473e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80145fe:	193b      	adds	r3, r7, r4
 8014600:	881b      	ldrh	r3, [r3, #0]
 8014602:	2240      	movs	r2, #64	@ 0x40
 8014604:	4013      	ands	r3, r2
 8014606:	d046      	beq.n	8014696 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801460a:	785b      	ldrb	r3, [r3, #1]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d125      	bne.n	801465c <PCD_EP_ISR_Handler+0x640>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	627b      	str	r3, [r7, #36]	@ 0x24
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	2250      	movs	r2, #80	@ 0x50
 801461c:	5a9b      	ldrh	r3, [r3, r2]
 801461e:	b29b      	uxth	r3, r3
 8014620:	001a      	movs	r2, r3
 8014622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014624:	189b      	adds	r3, r3, r2
 8014626:	627b      	str	r3, [r7, #36]	@ 0x24
 8014628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801462a:	781b      	ldrb	r3, [r3, #0]
 801462c:	00da      	lsls	r2, r3, #3
 801462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014630:	18d3      	adds	r3, r2, r3
 8014632:	4a33      	ldr	r2, [pc, #204]	@ (8014700 <PCD_EP_ISR_Handler+0x6e4>)
 8014634:	4694      	mov	ip, r2
 8014636:	4463      	add	r3, ip
 8014638:	623b      	str	r3, [r7, #32]
 801463a:	6a3b      	ldr	r3, [r7, #32]
 801463c:	881b      	ldrh	r3, [r3, #0]
 801463e:	b29b      	uxth	r3, r3
 8014640:	059b      	lsls	r3, r3, #22
 8014642:	0d9b      	lsrs	r3, r3, #22
 8014644:	b29a      	uxth	r2, r3
 8014646:	6a3b      	ldr	r3, [r7, #32]
 8014648:	801a      	strh	r2, [r3, #0]
 801464a:	6a3b      	ldr	r3, [r7, #32]
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	b29b      	uxth	r3, r3
 8014650:	4a2d      	ldr	r2, [pc, #180]	@ (8014708 <PCD_EP_ISR_Handler+0x6ec>)
 8014652:	4313      	orrs	r3, r2
 8014654:	b29a      	uxth	r2, r3
 8014656:	6a3b      	ldr	r3, [r7, #32]
 8014658:	801a      	strh	r2, [r3, #0]
 801465a:	e070      	b.n	801473e <PCD_EP_ISR_Handler+0x722>
 801465c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801465e:	785b      	ldrb	r3, [r3, #1]
 8014660:	2b01      	cmp	r3, #1
 8014662:	d16c      	bne.n	801473e <PCD_EP_ISR_Handler+0x722>
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2250      	movs	r2, #80	@ 0x50
 8014670:	5a9b      	ldrh	r3, [r3, r2]
 8014672:	b29b      	uxth	r3, r3
 8014674:	001a      	movs	r2, r3
 8014676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014678:	189b      	adds	r3, r3, r2
 801467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	00da      	lsls	r2, r3, #3
 8014682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014684:	18d3      	adds	r3, r2, r3
 8014686:	4a1e      	ldr	r2, [pc, #120]	@ (8014700 <PCD_EP_ISR_Handler+0x6e4>)
 8014688:	4694      	mov	ip, r2
 801468a:	4463      	add	r3, ip
 801468c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014690:	2200      	movs	r2, #0
 8014692:	801a      	strh	r2, [r3, #0]
 8014694:	e053      	b.n	801473e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801469c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801469e:	785b      	ldrb	r3, [r3, #1]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d133      	bne.n	801470c <PCD_EP_ISR_Handler+0x6f0>
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	2250      	movs	r2, #80	@ 0x50
 80146b0:	5a9b      	ldrh	r3, [r3, r2]
 80146b2:	b29b      	uxth	r3, r3
 80146b4:	001a      	movs	r2, r3
 80146b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146b8:	189b      	adds	r3, r3, r2
 80146ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80146bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	00da      	lsls	r2, r3, #3
 80146c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146c4:	18d3      	adds	r3, r2, r3
 80146c6:	4a0b      	ldr	r2, [pc, #44]	@ (80146f4 <PCD_EP_ISR_Handler+0x6d8>)
 80146c8:	4694      	mov	ip, r2
 80146ca:	4463      	add	r3, ip
 80146cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80146ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	b29b      	uxth	r3, r3
 80146d4:	059b      	lsls	r3, r3, #22
 80146d6:	0d9b      	lsrs	r3, r3, #22
 80146d8:	b29a      	uxth	r2, r3
 80146da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146dc:	801a      	strh	r2, [r3, #0]
 80146de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146e0:	881b      	ldrh	r3, [r3, #0]
 80146e2:	b29b      	uxth	r3, r3
 80146e4:	4a08      	ldr	r2, [pc, #32]	@ (8014708 <PCD_EP_ISR_Handler+0x6ec>)
 80146e6:	4313      	orrs	r3, r2
 80146e8:	b29a      	uxth	r2, r3
 80146ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146ec:	801a      	strh	r2, [r3, #0]
 80146ee:	e026      	b.n	801473e <PCD_EP_ISR_Handler+0x722>
 80146f0:	00000f8f 	.word	0x00000f8f
 80146f4:	00000406 	.word	0x00000406
 80146f8:	ffff8f8f 	.word	0xffff8f8f
 80146fc:	ffff80c0 	.word	0xffff80c0
 8014700:	00000402 	.word	0x00000402
 8014704:	ffff8f0f 	.word	0xffff8f0f
 8014708:	ffff8000 	.word	0xffff8000
 801470c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801470e:	785b      	ldrb	r3, [r3, #1]
 8014710:	2b01      	cmp	r3, #1
 8014712:	d114      	bne.n	801473e <PCD_EP_ISR_Handler+0x722>
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2250      	movs	r2, #80	@ 0x50
 801471a:	5a9b      	ldrh	r3, [r3, r2]
 801471c:	b29b      	uxth	r3, r3
 801471e:	001a      	movs	r2, r3
 8014720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014722:	189b      	adds	r3, r3, r2
 8014724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	00da      	lsls	r2, r3, #3
 801472c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801472e:	18d3      	adds	r3, r2, r3
 8014730:	4a3b      	ldr	r2, [pc, #236]	@ (8014820 <PCD_EP_ISR_Handler+0x804>)
 8014732:	4694      	mov	ip, r2
 8014734:	4463      	add	r3, ip
 8014736:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801473a:	2200      	movs	r2, #0
 801473c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801473e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014740:	781a      	ldrb	r2, [r3, #0]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	0011      	movs	r1, r2
 8014746:	0018      	movs	r0, r3
 8014748:	f008 ff84 	bl	801d654 <HAL_PCD_DataInStageCallback>
 801474c:	e058      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801474e:	234a      	movs	r3, #74	@ 0x4a
 8014750:	18fb      	adds	r3, r7, r3
 8014752:	881a      	ldrh	r2, [r3, #0]
 8014754:	2380      	movs	r3, #128	@ 0x80
 8014756:	005b      	lsls	r3, r3, #1
 8014758:	4013      	ands	r3, r2
 801475a:	d149      	bne.n	80147f0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2250      	movs	r2, #80	@ 0x50
 8014762:	5a9b      	ldrh	r3, [r3, r2]
 8014764:	b29b      	uxth	r3, r3
 8014766:	001a      	movs	r2, r3
 8014768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	00db      	lsls	r3, r3, #3
 801476e:	18d2      	adds	r2, r2, r3
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	18d3      	adds	r3, r2, r3
 8014776:	4a2b      	ldr	r2, [pc, #172]	@ (8014824 <PCD_EP_ISR_Handler+0x808>)
 8014778:	4694      	mov	ip, r2
 801477a:	4463      	add	r3, ip
 801477c:	881a      	ldrh	r2, [r3, #0]
 801477e:	2140      	movs	r1, #64	@ 0x40
 8014780:	187b      	adds	r3, r7, r1
 8014782:	0592      	lsls	r2, r2, #22
 8014784:	0d92      	lsrs	r2, r2, #22
 8014786:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8014788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801478a:	699a      	ldr	r2, [r3, #24]
 801478c:	187b      	adds	r3, r7, r1
 801478e:	881b      	ldrh	r3, [r3, #0]
 8014790:	429a      	cmp	r2, r3
 8014792:	d907      	bls.n	80147a4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8014794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014796:	699a      	ldr	r2, [r3, #24]
 8014798:	187b      	adds	r3, r7, r1
 801479a:	881b      	ldrh	r3, [r3, #0]
 801479c:	1ad2      	subs	r2, r2, r3
 801479e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147a0:	619a      	str	r2, [r3, #24]
 80147a2:	e002      	b.n	80147aa <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80147a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147a6:	2200      	movs	r2, #0
 80147a8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80147aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147ac:	699b      	ldr	r3, [r3, #24]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d107      	bne.n	80147c2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80147b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147b4:	781a      	ldrb	r2, [r3, #0]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	0011      	movs	r1, r2
 80147ba:	0018      	movs	r0, r3
 80147bc:	f008 ff4a 	bl	801d654 <HAL_PCD_DataInStageCallback>
 80147c0:	e01e      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80147c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147c4:	695a      	ldr	r2, [r3, #20]
 80147c6:	2140      	movs	r1, #64	@ 0x40
 80147c8:	187b      	adds	r3, r7, r1
 80147ca:	881b      	ldrh	r3, [r3, #0]
 80147cc:	18d2      	adds	r2, r2, r3
 80147ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147d0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80147d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147d4:	69da      	ldr	r2, [r3, #28]
 80147d6:	187b      	adds	r3, r7, r1
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	18d2      	adds	r2, r2, r3
 80147dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147de:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80147e6:	0011      	movs	r1, r2
 80147e8:	0018      	movs	r0, r3
 80147ea:	f005 fc3d 	bl	801a068 <USB_EPStartXfer>
 80147ee:	e007      	b.n	8014800 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80147f0:	234a      	movs	r3, #74	@ 0x4a
 80147f2:	18fb      	adds	r3, r7, r3
 80147f4:	881a      	ldrh	r2, [r3, #0]
 80147f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	0018      	movs	r0, r3
 80147fc:	f000 f930 	bl	8014a60 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	2244      	movs	r2, #68	@ 0x44
 8014806:	5a9b      	ldrh	r3, [r3, r2]
 8014808:	b29b      	uxth	r3, r3
 801480a:	b21b      	sxth	r3, r3
 801480c:	2b00      	cmp	r3, #0
 801480e:	da01      	bge.n	8014814 <PCD_EP_ISR_Handler+0x7f8>
 8014810:	f7ff fc0a 	bl	8014028 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014814:	2300      	movs	r3, #0
}
 8014816:	0018      	movs	r0, r3
 8014818:	46bd      	mov	sp, r7
 801481a:	b016      	add	sp, #88	@ 0x58
 801481c:	bdb0      	pop	{r4, r5, r7, pc}
 801481e:	46c0      	nop			@ (mov r8, r8)
 8014820:	00000406 	.word	0x00000406
 8014824:	00000402 	.word	0x00000402

08014828 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014828:	b590      	push	{r4, r7, lr}
 801482a:	b089      	sub	sp, #36	@ 0x24
 801482c:	af00      	add	r7, sp, #0
 801482e:	60f8      	str	r0, [r7, #12]
 8014830:	60b9      	str	r1, [r7, #8]
 8014832:	1dbb      	adds	r3, r7, #6
 8014834:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014836:	1dbb      	adds	r3, r7, #6
 8014838:	881a      	ldrh	r2, [r3, #0]
 801483a:	2380      	movs	r3, #128	@ 0x80
 801483c:	01db      	lsls	r3, r3, #7
 801483e:	4013      	ands	r3, r2
 8014840:	d100      	bne.n	8014844 <HAL_PCD_EP_DB_Receive+0x1c>
 8014842:	e07d      	b.n	8014940 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2250      	movs	r2, #80	@ 0x50
 801484a:	5a9b      	ldrh	r3, [r3, r2]
 801484c:	b29b      	uxth	r3, r3
 801484e:	001a      	movs	r2, r3
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	781b      	ldrb	r3, [r3, #0]
 8014854:	00db      	lsls	r3, r3, #3
 8014856:	18d2      	adds	r2, r2, r3
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	18d3      	adds	r3, r2, r3
 801485e:	4a7a      	ldr	r2, [pc, #488]	@ (8014a48 <HAL_PCD_EP_DB_Receive+0x220>)
 8014860:	4694      	mov	ip, r2
 8014862:	4463      	add	r3, ip
 8014864:	881a      	ldrh	r2, [r3, #0]
 8014866:	211a      	movs	r1, #26
 8014868:	187b      	adds	r3, r7, r1
 801486a:	0592      	lsls	r2, r2, #22
 801486c:	0d92      	lsrs	r2, r2, #22
 801486e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	699a      	ldr	r2, [r3, #24]
 8014874:	187b      	adds	r3, r7, r1
 8014876:	881b      	ldrh	r3, [r3, #0]
 8014878:	429a      	cmp	r2, r3
 801487a:	d307      	bcc.n	801488c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	699a      	ldr	r2, [r3, #24]
 8014880:	187b      	adds	r3, r7, r1
 8014882:	881b      	ldrh	r3, [r3, #0]
 8014884:	1ad2      	subs	r2, r2, r3
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	619a      	str	r2, [r3, #24]
 801488a:	e002      	b.n	8014892 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	2200      	movs	r2, #0
 8014890:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	699b      	ldr	r3, [r3, #24]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d121      	bne.n	80148de <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	001a      	movs	r2, r3
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	009b      	lsls	r3, r3, #2
 80148a6:	18d3      	adds	r3, r2, r3
 80148a8:	881b      	ldrh	r3, [r3, #0]
 80148aa:	b29a      	uxth	r2, r3
 80148ac:	2018      	movs	r0, #24
 80148ae:	183b      	adds	r3, r7, r0
 80148b0:	4966      	ldr	r1, [pc, #408]	@ (8014a4c <HAL_PCD_EP_DB_Receive+0x224>)
 80148b2:	400a      	ands	r2, r1
 80148b4:	801a      	strh	r2, [r3, #0]
 80148b6:	183b      	adds	r3, r7, r0
 80148b8:	183a      	adds	r2, r7, r0
 80148ba:	8812      	ldrh	r2, [r2, #0]
 80148bc:	2180      	movs	r1, #128	@ 0x80
 80148be:	0189      	lsls	r1, r1, #6
 80148c0:	404a      	eors	r2, r1
 80148c2:	801a      	strh	r2, [r3, #0]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	001a      	movs	r2, r3
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	781b      	ldrb	r3, [r3, #0]
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	18d3      	adds	r3, r2, r3
 80148d2:	183a      	adds	r2, r7, r0
 80148d4:	8812      	ldrh	r2, [r2, #0]
 80148d6:	495e      	ldr	r1, [pc, #376]	@ (8014a50 <HAL_PCD_EP_DB_Receive+0x228>)
 80148d8:	430a      	orrs	r2, r1
 80148da:	b292      	uxth	r2, r2
 80148dc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80148de:	1dbb      	adds	r3, r7, #6
 80148e0:	881b      	ldrh	r3, [r3, #0]
 80148e2:	2240      	movs	r2, #64	@ 0x40
 80148e4:	4013      	ands	r3, r2
 80148e6:	d01a      	beq.n	801491e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	001a      	movs	r2, r3
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	009b      	lsls	r3, r3, #2
 80148f4:	18d3      	adds	r3, r2, r3
 80148f6:	881b      	ldrh	r3, [r3, #0]
 80148f8:	b29a      	uxth	r2, r3
 80148fa:	2016      	movs	r0, #22
 80148fc:	183b      	adds	r3, r7, r0
 80148fe:	4955      	ldr	r1, [pc, #340]	@ (8014a54 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014900:	400a      	ands	r2, r1
 8014902:	801a      	strh	r2, [r3, #0]
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	001a      	movs	r2, r3
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	18d3      	adds	r3, r2, r3
 8014912:	183a      	adds	r2, r7, r0
 8014914:	8812      	ldrh	r2, [r2, #0]
 8014916:	4950      	ldr	r1, [pc, #320]	@ (8014a58 <HAL_PCD_EP_DB_Receive+0x230>)
 8014918:	430a      	orrs	r2, r1
 801491a:	b292      	uxth	r2, r2
 801491c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801491e:	241a      	movs	r4, #26
 8014920:	193b      	adds	r3, r7, r4
 8014922:	881b      	ldrh	r3, [r3, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d100      	bne.n	801492a <HAL_PCD_EP_DB_Receive+0x102>
 8014928:	e086      	b.n	8014a38 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6818      	ldr	r0, [r3, #0]
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	6959      	ldr	r1, [r3, #20]
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	891a      	ldrh	r2, [r3, #8]
 8014936:	193b      	adds	r3, r7, r4
 8014938:	881b      	ldrh	r3, [r3, #0]
 801493a:	f006 fe50 	bl	801b5de <USB_ReadPMA>
 801493e:	e07b      	b.n	8014a38 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2250      	movs	r2, #80	@ 0x50
 8014946:	5a9b      	ldrh	r3, [r3, r2]
 8014948:	b29b      	uxth	r3, r3
 801494a:	001a      	movs	r2, r3
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	00db      	lsls	r3, r3, #3
 8014952:	18d2      	adds	r2, r2, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	18d3      	adds	r3, r2, r3
 801495a:	4a40      	ldr	r2, [pc, #256]	@ (8014a5c <HAL_PCD_EP_DB_Receive+0x234>)
 801495c:	4694      	mov	ip, r2
 801495e:	4463      	add	r3, ip
 8014960:	881a      	ldrh	r2, [r3, #0]
 8014962:	211a      	movs	r1, #26
 8014964:	187b      	adds	r3, r7, r1
 8014966:	0592      	lsls	r2, r2, #22
 8014968:	0d92      	lsrs	r2, r2, #22
 801496a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	699a      	ldr	r2, [r3, #24]
 8014970:	187b      	adds	r3, r7, r1
 8014972:	881b      	ldrh	r3, [r3, #0]
 8014974:	429a      	cmp	r2, r3
 8014976:	d307      	bcc.n	8014988 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	699a      	ldr	r2, [r3, #24]
 801497c:	187b      	adds	r3, r7, r1
 801497e:	881b      	ldrh	r3, [r3, #0]
 8014980:	1ad2      	subs	r2, r2, r3
 8014982:	68bb      	ldr	r3, [r7, #8]
 8014984:	619a      	str	r2, [r3, #24]
 8014986:	e002      	b.n	801498e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	2200      	movs	r2, #0
 801498c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	699b      	ldr	r3, [r3, #24]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d121      	bne.n	80149da <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	001a      	movs	r2, r3
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	781b      	ldrb	r3, [r3, #0]
 80149a0:	009b      	lsls	r3, r3, #2
 80149a2:	18d3      	adds	r3, r2, r3
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	b29a      	uxth	r2, r3
 80149a8:	201e      	movs	r0, #30
 80149aa:	183b      	adds	r3, r7, r0
 80149ac:	4927      	ldr	r1, [pc, #156]	@ (8014a4c <HAL_PCD_EP_DB_Receive+0x224>)
 80149ae:	400a      	ands	r2, r1
 80149b0:	801a      	strh	r2, [r3, #0]
 80149b2:	183b      	adds	r3, r7, r0
 80149b4:	183a      	adds	r2, r7, r0
 80149b6:	8812      	ldrh	r2, [r2, #0]
 80149b8:	2180      	movs	r1, #128	@ 0x80
 80149ba:	0189      	lsls	r1, r1, #6
 80149bc:	404a      	eors	r2, r1
 80149be:	801a      	strh	r2, [r3, #0]
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	001a      	movs	r2, r3
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	18d3      	adds	r3, r2, r3
 80149ce:	183a      	adds	r2, r7, r0
 80149d0:	8812      	ldrh	r2, [r2, #0]
 80149d2:	491f      	ldr	r1, [pc, #124]	@ (8014a50 <HAL_PCD_EP_DB_Receive+0x228>)
 80149d4:	430a      	orrs	r2, r1
 80149d6:	b292      	uxth	r2, r2
 80149d8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80149da:	1dbb      	adds	r3, r7, #6
 80149dc:	881b      	ldrh	r3, [r3, #0]
 80149de:	2240      	movs	r2, #64	@ 0x40
 80149e0:	4013      	ands	r3, r2
 80149e2:	d11a      	bne.n	8014a1a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	001a      	movs	r2, r3
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	009b      	lsls	r3, r3, #2
 80149f0:	18d3      	adds	r3, r2, r3
 80149f2:	881b      	ldrh	r3, [r3, #0]
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	201c      	movs	r0, #28
 80149f8:	183b      	adds	r3, r7, r0
 80149fa:	4916      	ldr	r1, [pc, #88]	@ (8014a54 <HAL_PCD_EP_DB_Receive+0x22c>)
 80149fc:	400a      	ands	r2, r1
 80149fe:	801a      	strh	r2, [r3, #0]
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	001a      	movs	r2, r3
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	18d3      	adds	r3, r2, r3
 8014a0e:	183a      	adds	r2, r7, r0
 8014a10:	8812      	ldrh	r2, [r2, #0]
 8014a12:	4911      	ldr	r1, [pc, #68]	@ (8014a58 <HAL_PCD_EP_DB_Receive+0x230>)
 8014a14:	430a      	orrs	r2, r1
 8014a16:	b292      	uxth	r2, r2
 8014a18:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014a1a:	241a      	movs	r4, #26
 8014a1c:	193b      	adds	r3, r7, r4
 8014a1e:	881b      	ldrh	r3, [r3, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d009      	beq.n	8014a38 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	6818      	ldr	r0, [r3, #0]
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	6959      	ldr	r1, [r3, #20]
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	895a      	ldrh	r2, [r3, #10]
 8014a30:	193b      	adds	r3, r7, r4
 8014a32:	881b      	ldrh	r3, [r3, #0]
 8014a34:	f006 fdd3 	bl	801b5de <USB_ReadPMA>
    }
  }

  return count;
 8014a38:	231a      	movs	r3, #26
 8014a3a:	18fb      	adds	r3, r7, r3
 8014a3c:	881b      	ldrh	r3, [r3, #0]
}
 8014a3e:	0018      	movs	r0, r3
 8014a40:	46bd      	mov	sp, r7
 8014a42:	b009      	add	sp, #36	@ 0x24
 8014a44:	bd90      	pop	{r4, r7, pc}
 8014a46:	46c0      	nop			@ (mov r8, r8)
 8014a48:	00000402 	.word	0x00000402
 8014a4c:	ffffbf8f 	.word	0xffffbf8f
 8014a50:	ffff8080 	.word	0xffff8080
 8014a54:	ffff8f8f 	.word	0xffff8f8f
 8014a58:	ffff80c0 	.word	0xffff80c0
 8014a5c:	00000406 	.word	0x00000406

08014a60 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b0a4      	sub	sp, #144	@ 0x90
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	1dbb      	adds	r3, r7, #6
 8014a6c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014a6e:	1dbb      	adds	r3, r7, #6
 8014a70:	881b      	ldrh	r3, [r3, #0]
 8014a72:	2240      	movs	r2, #64	@ 0x40
 8014a74:	4013      	ands	r3, r2
 8014a76:	d100      	bne.n	8014a7a <HAL_PCD_EP_DB_Transmit+0x1a>
 8014a78:	e1e4      	b.n	8014e44 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2250      	movs	r2, #80	@ 0x50
 8014a80:	5a9b      	ldrh	r3, [r3, r2]
 8014a82:	b29b      	uxth	r3, r3
 8014a84:	001a      	movs	r2, r3
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	00db      	lsls	r3, r3, #3
 8014a8c:	18d2      	adds	r2, r2, r3
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	18d3      	adds	r3, r2, r3
 8014a94:	4ad0      	ldr	r2, [pc, #832]	@ (8014dd8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014a96:	4694      	mov	ip, r2
 8014a98:	4463      	add	r3, ip
 8014a9a:	881a      	ldrh	r2, [r3, #0]
 8014a9c:	2186      	movs	r1, #134	@ 0x86
 8014a9e:	187b      	adds	r3, r7, r1
 8014aa0:	0592      	lsls	r2, r2, #22
 8014aa2:	0d92      	lsrs	r2, r2, #22
 8014aa4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	699a      	ldr	r2, [r3, #24]
 8014aaa:	187b      	adds	r3, r7, r1
 8014aac:	881b      	ldrh	r3, [r3, #0]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d907      	bls.n	8014ac2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	699a      	ldr	r2, [r3, #24]
 8014ab6:	187b      	adds	r3, r7, r1
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	1ad2      	subs	r2, r2, r3
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	619a      	str	r2, [r3, #24]
 8014ac0:	e002      	b.n	8014ac8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	699b      	ldr	r3, [r3, #24]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d000      	beq.n	8014ad2 <HAL_PCD_EP_DB_Transmit+0x72>
 8014ad0:	e0b5      	b.n	8014c3e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	785b      	ldrb	r3, [r3, #1]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d125      	bne.n	8014b26 <HAL_PCD_EP_DB_Transmit+0xc6>
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2250      	movs	r2, #80	@ 0x50
 8014ae6:	5a9b      	ldrh	r3, [r3, r2]
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	001a      	movs	r2, r3
 8014aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aee:	189b      	adds	r3, r3, r2
 8014af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	781b      	ldrb	r3, [r3, #0]
 8014af6:	00da      	lsls	r2, r3, #3
 8014af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014afa:	18d3      	adds	r3, r2, r3
 8014afc:	4ab6      	ldr	r2, [pc, #728]	@ (8014dd8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014afe:	4694      	mov	ip, r2
 8014b00:	4463      	add	r3, ip
 8014b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b06:	881b      	ldrh	r3, [r3, #0]
 8014b08:	b29b      	uxth	r3, r3
 8014b0a:	059b      	lsls	r3, r3, #22
 8014b0c:	0d9b      	lsrs	r3, r3, #22
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b12:	801a      	strh	r2, [r3, #0]
 8014b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b16:	881b      	ldrh	r3, [r3, #0]
 8014b18:	b29b      	uxth	r3, r3
 8014b1a:	4ab0      	ldr	r2, [pc, #704]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014b1c:	4313      	orrs	r3, r2
 8014b1e:	b29a      	uxth	r2, r3
 8014b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b22:	801a      	strh	r2, [r3, #0]
 8014b24:	e01b      	b.n	8014b5e <HAL_PCD_EP_DB_Transmit+0xfe>
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	785b      	ldrb	r3, [r3, #1]
 8014b2a:	2b01      	cmp	r3, #1
 8014b2c:	d117      	bne.n	8014b5e <HAL_PCD_EP_DB_Transmit+0xfe>
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	2250      	movs	r2, #80	@ 0x50
 8014b3a:	5a9b      	ldrh	r3, [r3, r2]
 8014b3c:	b29b      	uxth	r3, r3
 8014b3e:	001a      	movs	r2, r3
 8014b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b42:	189b      	adds	r3, r3, r2
 8014b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	00da      	lsls	r2, r3, #3
 8014b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b4e:	18d3      	adds	r3, r2, r3
 8014b50:	4aa1      	ldr	r2, [pc, #644]	@ (8014dd8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014b52:	4694      	mov	ip, r2
 8014b54:	4463      	add	r3, ip
 8014b56:	633b      	str	r3, [r7, #48]	@ 0x30
 8014b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	785b      	ldrb	r3, [r3, #1]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d125      	bne.n	8014bb8 <HAL_PCD_EP_DB_Transmit+0x158>
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	61fb      	str	r3, [r7, #28]
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2250      	movs	r2, #80	@ 0x50
 8014b78:	5a9b      	ldrh	r3, [r3, r2]
 8014b7a:	b29b      	uxth	r3, r3
 8014b7c:	001a      	movs	r2, r3
 8014b7e:	69fb      	ldr	r3, [r7, #28]
 8014b80:	189b      	adds	r3, r3, r2
 8014b82:	61fb      	str	r3, [r7, #28]
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	00da      	lsls	r2, r3, #3
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	18d3      	adds	r3, r2, r3
 8014b8e:	4a94      	ldr	r2, [pc, #592]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014b90:	4694      	mov	ip, r2
 8014b92:	4463      	add	r3, ip
 8014b94:	61bb      	str	r3, [r7, #24]
 8014b96:	69bb      	ldr	r3, [r7, #24]
 8014b98:	881b      	ldrh	r3, [r3, #0]
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	059b      	lsls	r3, r3, #22
 8014b9e:	0d9b      	lsrs	r3, r3, #22
 8014ba0:	b29a      	uxth	r2, r3
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	801a      	strh	r2, [r3, #0]
 8014ba6:	69bb      	ldr	r3, [r7, #24]
 8014ba8:	881b      	ldrh	r3, [r3, #0]
 8014baa:	b29b      	uxth	r3, r3
 8014bac:	4a8b      	ldr	r2, [pc, #556]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014bae:	4313      	orrs	r3, r2
 8014bb0:	b29a      	uxth	r2, r3
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	801a      	strh	r2, [r3, #0]
 8014bb6:	e018      	b.n	8014bea <HAL_PCD_EP_DB_Transmit+0x18a>
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	785b      	ldrb	r3, [r3, #1]
 8014bbc:	2b01      	cmp	r3, #1
 8014bbe:	d114      	bne.n	8014bea <HAL_PCD_EP_DB_Transmit+0x18a>
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	2250      	movs	r2, #80	@ 0x50
 8014bc6:	5a9b      	ldrh	r3, [r3, r2]
 8014bc8:	b29b      	uxth	r3, r3
 8014bca:	001a      	movs	r2, r3
 8014bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bce:	189b      	adds	r3, r3, r2
 8014bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	781b      	ldrb	r3, [r3, #0]
 8014bd6:	00da      	lsls	r2, r3, #3
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bda:	18d3      	adds	r3, r2, r3
 8014bdc:	4a80      	ldr	r2, [pc, #512]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014bde:	4694      	mov	ip, r2
 8014be0:	4463      	add	r3, ip
 8014be2:	623b      	str	r3, [r7, #32]
 8014be4:	6a3b      	ldr	r3, [r7, #32]
 8014be6:	2200      	movs	r2, #0
 8014be8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	781a      	ldrb	r2, [r3, #0]
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	0011      	movs	r1, r2
 8014bf2:	0018      	movs	r0, r3
 8014bf4:	f008 fd2e 	bl	801d654 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014bf8:	1dbb      	adds	r3, r7, #6
 8014bfa:	881a      	ldrh	r2, [r3, #0]
 8014bfc:	2380      	movs	r3, #128	@ 0x80
 8014bfe:	01db      	lsls	r3, r3, #7
 8014c00:	4013      	ands	r3, r2
 8014c02:	d100      	bne.n	8014c06 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8014c04:	e309      	b.n	801521a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	001a      	movs	r2, r3
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	18d3      	adds	r3, r2, r3
 8014c14:	881b      	ldrh	r3, [r3, #0]
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	2016      	movs	r0, #22
 8014c1a:	183b      	adds	r3, r7, r0
 8014c1c:	4971      	ldr	r1, [pc, #452]	@ (8014de4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8014c1e:	400a      	ands	r2, r1
 8014c20:	801a      	strh	r2, [r3, #0]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	001a      	movs	r2, r3
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	18d3      	adds	r3, r2, r3
 8014c30:	183a      	adds	r2, r7, r0
 8014c32:	8812      	ldrh	r2, [r2, #0]
 8014c34:	496c      	ldr	r1, [pc, #432]	@ (8014de8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014c36:	430a      	orrs	r2, r1
 8014c38:	b292      	uxth	r2, r2
 8014c3a:	801a      	strh	r2, [r3, #0]
 8014c3c:	e2ed      	b.n	801521a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014c3e:	1dbb      	adds	r3, r7, #6
 8014c40:	881a      	ldrh	r2, [r3, #0]
 8014c42:	2380      	movs	r3, #128	@ 0x80
 8014c44:	01db      	lsls	r3, r3, #7
 8014c46:	4013      	ands	r3, r2
 8014c48:	d01a      	beq.n	8014c80 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	001a      	movs	r2, r3
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	18d3      	adds	r3, r2, r3
 8014c58:	881b      	ldrh	r3, [r3, #0]
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	208a      	movs	r0, #138	@ 0x8a
 8014c5e:	183b      	adds	r3, r7, r0
 8014c60:	4960      	ldr	r1, [pc, #384]	@ (8014de4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8014c62:	400a      	ands	r2, r1
 8014c64:	801a      	strh	r2, [r3, #0]
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	001a      	movs	r2, r3
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	781b      	ldrb	r3, [r3, #0]
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	18d3      	adds	r3, r2, r3
 8014c74:	183a      	adds	r2, r7, r0
 8014c76:	8812      	ldrh	r2, [r2, #0]
 8014c78:	495b      	ldr	r1, [pc, #364]	@ (8014de8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014c7a:	430a      	orrs	r2, r1
 8014c7c:	b292      	uxth	r2, r2
 8014c7e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	2224      	movs	r2, #36	@ 0x24
 8014c84:	5c9b      	ldrb	r3, [r3, r2]
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d000      	beq.n	8014c8c <HAL_PCD_EP_DB_Transmit+0x22c>
 8014c8a:	e2c6      	b.n	801521a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	695a      	ldr	r2, [r3, #20]
 8014c90:	2186      	movs	r1, #134	@ 0x86
 8014c92:	187b      	adds	r3, r7, r1
 8014c94:	881b      	ldrh	r3, [r3, #0]
 8014c96:	18d2      	adds	r2, r2, r3
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	69da      	ldr	r2, [r3, #28]
 8014ca0:	187b      	adds	r3, r7, r1
 8014ca2:	881b      	ldrh	r3, [r3, #0]
 8014ca4:	18d2      	adds	r2, r2, r3
 8014ca6:	68bb      	ldr	r3, [r7, #8]
 8014ca8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	6a1a      	ldr	r2, [r3, #32]
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	691b      	ldr	r3, [r3, #16]
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	d30c      	bcc.n	8014cd0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	691b      	ldr	r3, [r3, #16]
 8014cba:	218c      	movs	r1, #140	@ 0x8c
 8014cbc:	187a      	adds	r2, r7, r1
 8014cbe:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	6a1a      	ldr	r2, [r3, #32]
 8014cc4:	187b      	adds	r3, r7, r1
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	1ad2      	subs	r2, r2, r3
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	621a      	str	r2, [r3, #32]
 8014cce:	e01a      	b.n	8014d06 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8014cd0:	68bb      	ldr	r3, [r7, #8]
 8014cd2:	6a1b      	ldr	r3, [r3, #32]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d10a      	bne.n	8014cee <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014cd8:	2386      	movs	r3, #134	@ 0x86
 8014cda:	18fb      	adds	r3, r7, r3
 8014cdc:	881b      	ldrh	r3, [r3, #0]
 8014cde:	228c      	movs	r2, #140	@ 0x8c
 8014ce0:	18ba      	adds	r2, r7, r2
 8014ce2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	2224      	movs	r2, #36	@ 0x24
 8014ce8:	2100      	movs	r1, #0
 8014cea:	5499      	strb	r1, [r3, r2]
 8014cec:	e00b      	b.n	8014d06 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	2224      	movs	r2, #36	@ 0x24
 8014cf2:	2100      	movs	r1, #0
 8014cf4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	6a1b      	ldr	r3, [r3, #32]
 8014cfa:	228c      	movs	r2, #140	@ 0x8c
 8014cfc:	18ba      	adds	r2, r7, r2
 8014cfe:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	2200      	movs	r2, #0
 8014d04:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	785b      	ldrb	r3, [r3, #1]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d000      	beq.n	8014d10 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8014d0e:	e06d      	b.n	8014dec <HAL_PCD_EP_DB_Transmit+0x38c>
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	2250      	movs	r2, #80	@ 0x50
 8014d1c:	5a9b      	ldrh	r3, [r3, r2]
 8014d1e:	b29b      	uxth	r3, r3
 8014d20:	001a      	movs	r2, r3
 8014d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d24:	189b      	adds	r3, r3, r2
 8014d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	00da      	lsls	r2, r3, #3
 8014d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d30:	18d3      	adds	r3, r2, r3
 8014d32:	4a29      	ldr	r2, [pc, #164]	@ (8014dd8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014d34:	4694      	mov	ip, r2
 8014d36:	4463      	add	r3, ip
 8014d38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d3c:	881b      	ldrh	r3, [r3, #0]
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	059b      	lsls	r3, r3, #22
 8014d42:	0d9b      	lsrs	r3, r3, #22
 8014d44:	b29a      	uxth	r2, r3
 8014d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d48:	801a      	strh	r2, [r3, #0]
 8014d4a:	228c      	movs	r2, #140	@ 0x8c
 8014d4c:	18bb      	adds	r3, r7, r2
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	2b3e      	cmp	r3, #62	@ 0x3e
 8014d52:	d91a      	bls.n	8014d8a <HAL_PCD_EP_DB_Transmit+0x32a>
 8014d54:	18bb      	adds	r3, r7, r2
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	095b      	lsrs	r3, r3, #5
 8014d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014d5c:	18bb      	adds	r3, r7, r2
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	221f      	movs	r2, #31
 8014d62:	4013      	ands	r3, r2
 8014d64:	d102      	bne.n	8014d6c <HAL_PCD_EP_DB_Transmit+0x30c>
 8014d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d68:	3b01      	subs	r3, #1
 8014d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d6e:	881b      	ldrh	r3, [r3, #0]
 8014d70:	b29a      	uxth	r2, r3
 8014d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	029b      	lsls	r3, r3, #10
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	4313      	orrs	r3, r2
 8014d7c:	b29b      	uxth	r3, r3
 8014d7e:	4a17      	ldr	r2, [pc, #92]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014d80:	4313      	orrs	r3, r2
 8014d82:	b29a      	uxth	r2, r3
 8014d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d86:	801a      	strh	r2, [r3, #0]
 8014d88:	e04f      	b.n	8014e2a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014d8a:	238c      	movs	r3, #140	@ 0x8c
 8014d8c:	18fb      	adds	r3, r7, r3
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d108      	bne.n	8014da6 <HAL_PCD_EP_DB_Transmit+0x346>
 8014d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d96:	881b      	ldrh	r3, [r3, #0]
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	4a10      	ldr	r2, [pc, #64]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014d9c:	4313      	orrs	r3, r2
 8014d9e:	b29a      	uxth	r2, r3
 8014da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014da2:	801a      	strh	r2, [r3, #0]
 8014da4:	e041      	b.n	8014e2a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014da6:	228c      	movs	r2, #140	@ 0x8c
 8014da8:	18bb      	adds	r3, r7, r2
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	085b      	lsrs	r3, r3, #1
 8014dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014db0:	18bb      	adds	r3, r7, r2
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2201      	movs	r2, #1
 8014db6:	4013      	ands	r3, r2
 8014db8:	d002      	beq.n	8014dc0 <HAL_PCD_EP_DB_Transmit+0x360>
 8014dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dc2:	881b      	ldrh	r3, [r3, #0]
 8014dc4:	b29a      	uxth	r2, r3
 8014dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	029b      	lsls	r3, r3, #10
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	4313      	orrs	r3, r2
 8014dd0:	b29a      	uxth	r2, r3
 8014dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dd4:	801a      	strh	r2, [r3, #0]
 8014dd6:	e028      	b.n	8014e2a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014dd8:	00000402 	.word	0x00000402
 8014ddc:	ffff8000 	.word	0xffff8000
 8014de0:	00000406 	.word	0x00000406
 8014de4:	ffff8f8f 	.word	0xffff8f8f
 8014de8:	ffffc080 	.word	0xffffc080
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	785b      	ldrb	r3, [r3, #1]
 8014df0:	2b01      	cmp	r3, #1
 8014df2:	d11a      	bne.n	8014e2a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	2250      	movs	r2, #80	@ 0x50
 8014e00:	5a9b      	ldrh	r3, [r3, r2]
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	001a      	movs	r2, r3
 8014e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e08:	189b      	adds	r3, r3, r2
 8014e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	00da      	lsls	r2, r3, #3
 8014e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e14:	18d3      	adds	r3, r2, r3
 8014e16:	4adb      	ldr	r2, [pc, #876]	@ (8015184 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014e18:	4694      	mov	ip, r2
 8014e1a:	4463      	add	r3, ip
 8014e1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8014e1e:	238c      	movs	r3, #140	@ 0x8c
 8014e20:	18fb      	adds	r3, r7, r3
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	b29a      	uxth	r2, r3
 8014e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e28:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	6818      	ldr	r0, [r3, #0]
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	6959      	ldr	r1, [r3, #20]
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	891a      	ldrh	r2, [r3, #8]
 8014e36:	238c      	movs	r3, #140	@ 0x8c
 8014e38:	18fb      	adds	r3, r7, r3
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	f006 fb85 	bl	801b54c <USB_WritePMA>
 8014e42:	e1ea      	b.n	801521a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	2250      	movs	r2, #80	@ 0x50
 8014e4a:	5a9b      	ldrh	r3, [r3, r2]
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	001a      	movs	r2, r3
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	00db      	lsls	r3, r3, #3
 8014e56:	18d2      	adds	r2, r2, r3
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	18d3      	adds	r3, r2, r3
 8014e5e:	4aca      	ldr	r2, [pc, #808]	@ (8015188 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014e60:	4694      	mov	ip, r2
 8014e62:	4463      	add	r3, ip
 8014e64:	881a      	ldrh	r2, [r3, #0]
 8014e66:	2186      	movs	r1, #134	@ 0x86
 8014e68:	187b      	adds	r3, r7, r1
 8014e6a:	0592      	lsls	r2, r2, #22
 8014e6c:	0d92      	lsrs	r2, r2, #22
 8014e6e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	699a      	ldr	r2, [r3, #24]
 8014e74:	187b      	adds	r3, r7, r1
 8014e76:	881b      	ldrh	r3, [r3, #0]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d307      	bcc.n	8014e8c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	699a      	ldr	r2, [r3, #24]
 8014e80:	187b      	adds	r3, r7, r1
 8014e82:	881b      	ldrh	r3, [r3, #0]
 8014e84:	1ad2      	subs	r2, r2, r3
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	619a      	str	r2, [r3, #24]
 8014e8a:	e002      	b.n	8014e92 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	699b      	ldr	r3, [r3, #24]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d000      	beq.n	8014e9c <HAL_PCD_EP_DB_Transmit+0x43c>
 8014e9a:	e0bb      	b.n	8015014 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	785b      	ldrb	r3, [r3, #1]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d125      	bne.n	8014ef0 <HAL_PCD_EP_DB_Transmit+0x490>
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	2250      	movs	r2, #80	@ 0x50
 8014eb0:	5a9b      	ldrh	r3, [r3, r2]
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	001a      	movs	r2, r3
 8014eb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014eb8:	189b      	adds	r3, r3, r2
 8014eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	00da      	lsls	r2, r3, #3
 8014ec2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014ec4:	18d3      	adds	r3, r2, r3
 8014ec6:	4aaf      	ldr	r2, [pc, #700]	@ (8015184 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014ec8:	4694      	mov	ip, r2
 8014eca:	4463      	add	r3, ip
 8014ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014ed0:	881b      	ldrh	r3, [r3, #0]
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	059b      	lsls	r3, r3, #22
 8014ed6:	0d9b      	lsrs	r3, r3, #22
 8014ed8:	b29a      	uxth	r2, r3
 8014eda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014edc:	801a      	strh	r2, [r3, #0]
 8014ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014ee0:	881b      	ldrh	r3, [r3, #0]
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	4aa9      	ldr	r2, [pc, #676]	@ (801518c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014ee6:	4313      	orrs	r3, r2
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014eec:	801a      	strh	r2, [r3, #0]
 8014eee:	e01b      	b.n	8014f28 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	785b      	ldrb	r3, [r3, #1]
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	d117      	bne.n	8014f28 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	667b      	str	r3, [r7, #100]	@ 0x64
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	2250      	movs	r2, #80	@ 0x50
 8014f04:	5a9b      	ldrh	r3, [r3, r2]
 8014f06:	b29b      	uxth	r3, r3
 8014f08:	001a      	movs	r2, r3
 8014f0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014f0c:	189b      	adds	r3, r3, r2
 8014f0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	00da      	lsls	r2, r3, #3
 8014f16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014f18:	18d3      	adds	r3, r2, r3
 8014f1a:	4a9a      	ldr	r2, [pc, #616]	@ (8015184 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014f1c:	4694      	mov	ip, r2
 8014f1e:	4463      	add	r3, ip
 8014f20:	663b      	str	r3, [r7, #96]	@ 0x60
 8014f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014f24:	2200      	movs	r2, #0
 8014f26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	785b      	ldrb	r3, [r3, #1]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d12b      	bne.n	8014f8e <HAL_PCD_EP_DB_Transmit+0x52e>
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	2250      	movs	r2, #80	@ 0x50
 8014f42:	5a9b      	ldrh	r3, [r3, r2]
 8014f44:	b29b      	uxth	r3, r3
 8014f46:	001a      	movs	r2, r3
 8014f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014f4a:	189b      	adds	r3, r3, r2
 8014f4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	00da      	lsls	r2, r3, #3
 8014f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014f56:	18d3      	adds	r3, r2, r3
 8014f58:	4a8b      	ldr	r2, [pc, #556]	@ (8015188 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014f5a:	4694      	mov	ip, r2
 8014f5c:	4463      	add	r3, ip
 8014f5e:	2180      	movs	r1, #128	@ 0x80
 8014f60:	187a      	adds	r2, r7, r1
 8014f62:	6013      	str	r3, [r2, #0]
 8014f64:	187b      	adds	r3, r7, r1
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	881b      	ldrh	r3, [r3, #0]
 8014f6a:	b29b      	uxth	r3, r3
 8014f6c:	059b      	lsls	r3, r3, #22
 8014f6e:	0d9b      	lsrs	r3, r3, #22
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	187b      	adds	r3, r7, r1
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	801a      	strh	r2, [r3, #0]
 8014f78:	187b      	adds	r3, r7, r1
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	881b      	ldrh	r3, [r3, #0]
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	4a82      	ldr	r2, [pc, #520]	@ (801518c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014f82:	4313      	orrs	r3, r2
 8014f84:	b29a      	uxth	r2, r3
 8014f86:	187b      	adds	r3, r7, r1
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	801a      	strh	r2, [r3, #0]
 8014f8c:	e018      	b.n	8014fc0 <HAL_PCD_EP_DB_Transmit+0x560>
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	785b      	ldrb	r3, [r3, #1]
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d114      	bne.n	8014fc0 <HAL_PCD_EP_DB_Transmit+0x560>
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	2250      	movs	r2, #80	@ 0x50
 8014f9c:	5a9b      	ldrh	r3, [r3, r2]
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	001a      	movs	r2, r3
 8014fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014fa4:	189b      	adds	r3, r3, r2
 8014fa6:	677b      	str	r3, [r7, #116]	@ 0x74
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	00da      	lsls	r2, r3, #3
 8014fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014fb0:	18d3      	adds	r3, r2, r3
 8014fb2:	4a75      	ldr	r2, [pc, #468]	@ (8015188 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014fb4:	4694      	mov	ip, r2
 8014fb6:	4463      	add	r3, ip
 8014fb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8014fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	781a      	ldrb	r2, [r3, #0]
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	0011      	movs	r1, r2
 8014fc8:	0018      	movs	r0, r3
 8014fca:	f008 fb43 	bl	801d654 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014fce:	1dbb      	adds	r3, r7, #6
 8014fd0:	881a      	ldrh	r2, [r3, #0]
 8014fd2:	2380      	movs	r3, #128	@ 0x80
 8014fd4:	01db      	lsls	r3, r3, #7
 8014fd6:	4013      	ands	r3, r2
 8014fd8:	d000      	beq.n	8014fdc <HAL_PCD_EP_DB_Transmit+0x57c>
 8014fda:	e11e      	b.n	801521a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	001a      	movs	r2, r3
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	009b      	lsls	r3, r3, #2
 8014fe8:	18d3      	adds	r3, r2, r3
 8014fea:	881b      	ldrh	r3, [r3, #0]
 8014fec:	b29a      	uxth	r2, r3
 8014fee:	2088      	movs	r0, #136	@ 0x88
 8014ff0:	183b      	adds	r3, r7, r0
 8014ff2:	4967      	ldr	r1, [pc, #412]	@ (8015190 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014ff4:	400a      	ands	r2, r1
 8014ff6:	801a      	strh	r2, [r3, #0]
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	001a      	movs	r2, r3
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	18d3      	adds	r3, r2, r3
 8015006:	183a      	adds	r2, r7, r0
 8015008:	8812      	ldrh	r2, [r2, #0]
 801500a:	4962      	ldr	r1, [pc, #392]	@ (8015194 <HAL_PCD_EP_DB_Transmit+0x734>)
 801500c:	430a      	orrs	r2, r1
 801500e:	b292      	uxth	r2, r2
 8015010:	801a      	strh	r2, [r3, #0]
 8015012:	e102      	b.n	801521a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8015014:	1dbb      	adds	r3, r7, #6
 8015016:	881a      	ldrh	r2, [r3, #0]
 8015018:	2380      	movs	r3, #128	@ 0x80
 801501a:	01db      	lsls	r3, r3, #7
 801501c:	4013      	ands	r3, r2
 801501e:	d11a      	bne.n	8015056 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	001a      	movs	r2, r3
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	009b      	lsls	r3, r3, #2
 801502c:	18d3      	adds	r3, r2, r3
 801502e:	881b      	ldrh	r3, [r3, #0]
 8015030:	b29a      	uxth	r2, r3
 8015032:	204e      	movs	r0, #78	@ 0x4e
 8015034:	183b      	adds	r3, r7, r0
 8015036:	4956      	ldr	r1, [pc, #344]	@ (8015190 <HAL_PCD_EP_DB_Transmit+0x730>)
 8015038:	400a      	ands	r2, r1
 801503a:	801a      	strh	r2, [r3, #0]
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	001a      	movs	r2, r3
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	009b      	lsls	r3, r3, #2
 8015048:	18d3      	adds	r3, r2, r3
 801504a:	183a      	adds	r2, r7, r0
 801504c:	8812      	ldrh	r2, [r2, #0]
 801504e:	4951      	ldr	r1, [pc, #324]	@ (8015194 <HAL_PCD_EP_DB_Transmit+0x734>)
 8015050:	430a      	orrs	r2, r1
 8015052:	b292      	uxth	r2, r2
 8015054:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	2224      	movs	r2, #36	@ 0x24
 801505a:	5c9b      	ldrb	r3, [r3, r2]
 801505c:	2b01      	cmp	r3, #1
 801505e:	d000      	beq.n	8015062 <HAL_PCD_EP_DB_Transmit+0x602>
 8015060:	e0db      	b.n	801521a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	695a      	ldr	r2, [r3, #20]
 8015066:	2186      	movs	r1, #134	@ 0x86
 8015068:	187b      	adds	r3, r7, r1
 801506a:	881b      	ldrh	r3, [r3, #0]
 801506c:	18d2      	adds	r2, r2, r3
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	69da      	ldr	r2, [r3, #28]
 8015076:	187b      	adds	r3, r7, r1
 8015078:	881b      	ldrh	r3, [r3, #0]
 801507a:	18d2      	adds	r2, r2, r3
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	6a1a      	ldr	r2, [r3, #32]
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	691b      	ldr	r3, [r3, #16]
 8015088:	429a      	cmp	r2, r3
 801508a:	d30c      	bcc.n	80150a6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	691b      	ldr	r3, [r3, #16]
 8015090:	218c      	movs	r1, #140	@ 0x8c
 8015092:	187a      	adds	r2, r7, r1
 8015094:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	6a1a      	ldr	r2, [r3, #32]
 801509a:	187b      	adds	r3, r7, r1
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	1ad2      	subs	r2, r2, r3
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	621a      	str	r2, [r3, #32]
 80150a4:	e01a      	b.n	80150dc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	6a1b      	ldr	r3, [r3, #32]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d10a      	bne.n	80150c4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80150ae:	2386      	movs	r3, #134	@ 0x86
 80150b0:	18fb      	adds	r3, r7, r3
 80150b2:	881b      	ldrh	r3, [r3, #0]
 80150b4:	228c      	movs	r2, #140	@ 0x8c
 80150b6:	18ba      	adds	r2, r7, r2
 80150b8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	2224      	movs	r2, #36	@ 0x24
 80150be:	2100      	movs	r1, #0
 80150c0:	5499      	strb	r1, [r3, r2]
 80150c2:	e00b      	b.n	80150dc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	6a1b      	ldr	r3, [r3, #32]
 80150c8:	228c      	movs	r2, #140	@ 0x8c
 80150ca:	18ba      	adds	r2, r7, r2
 80150cc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	2200      	movs	r2, #0
 80150d2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	2224      	movs	r2, #36	@ 0x24
 80150d8:	2100      	movs	r1, #0
 80150da:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	785b      	ldrb	r3, [r3, #1]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d000      	beq.n	80150ec <HAL_PCD_EP_DB_Transmit+0x68c>
 80150ea:	e06e      	b.n	80151ca <HAL_PCD_EP_DB_Transmit+0x76a>
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	2250      	movs	r2, #80	@ 0x50
 80150f8:	5a9b      	ldrh	r3, [r3, r2]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	001a      	movs	r2, r3
 80150fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015100:	189b      	adds	r3, r3, r2
 8015102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	00da      	lsls	r2, r3, #3
 801510a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801510c:	18d3      	adds	r3, r2, r3
 801510e:	4a1e      	ldr	r2, [pc, #120]	@ (8015188 <HAL_PCD_EP_DB_Transmit+0x728>)
 8015110:	4694      	mov	ip, r2
 8015112:	4463      	add	r3, ip
 8015114:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015118:	881b      	ldrh	r3, [r3, #0]
 801511a:	b29b      	uxth	r3, r3
 801511c:	059b      	lsls	r3, r3, #22
 801511e:	0d9b      	lsrs	r3, r3, #22
 8015120:	b29a      	uxth	r2, r3
 8015122:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015124:	801a      	strh	r2, [r3, #0]
 8015126:	228c      	movs	r2, #140	@ 0x8c
 8015128:	18bb      	adds	r3, r7, r2
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	2b3e      	cmp	r3, #62	@ 0x3e
 801512e:	d91a      	bls.n	8015166 <HAL_PCD_EP_DB_Transmit+0x706>
 8015130:	18bb      	adds	r3, r7, r2
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	095b      	lsrs	r3, r3, #5
 8015136:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015138:	18bb      	adds	r3, r7, r2
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	221f      	movs	r2, #31
 801513e:	4013      	ands	r3, r2
 8015140:	d102      	bne.n	8015148 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8015142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015144:	3b01      	subs	r3, #1
 8015146:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801514a:	881b      	ldrh	r3, [r3, #0]
 801514c:	b29a      	uxth	r2, r3
 801514e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015150:	b29b      	uxth	r3, r3
 8015152:	029b      	lsls	r3, r3, #10
 8015154:	b29b      	uxth	r3, r3
 8015156:	4313      	orrs	r3, r2
 8015158:	b29b      	uxth	r3, r3
 801515a:	4a0c      	ldr	r2, [pc, #48]	@ (801518c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801515c:	4313      	orrs	r3, r2
 801515e:	b29a      	uxth	r2, r3
 8015160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015162:	801a      	strh	r2, [r3, #0]
 8015164:	e04d      	b.n	8015202 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8015166:	238c      	movs	r3, #140	@ 0x8c
 8015168:	18fb      	adds	r3, r7, r3
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d113      	bne.n	8015198 <HAL_PCD_EP_DB_Transmit+0x738>
 8015170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015172:	881b      	ldrh	r3, [r3, #0]
 8015174:	b29b      	uxth	r3, r3
 8015176:	4a05      	ldr	r2, [pc, #20]	@ (801518c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8015178:	4313      	orrs	r3, r2
 801517a:	b29a      	uxth	r2, r3
 801517c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801517e:	801a      	strh	r2, [r3, #0]
 8015180:	e03f      	b.n	8015202 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8015182:	46c0      	nop			@ (mov r8, r8)
 8015184:	00000402 	.word	0x00000402
 8015188:	00000406 	.word	0x00000406
 801518c:	ffff8000 	.word	0xffff8000
 8015190:	ffff8f8f 	.word	0xffff8f8f
 8015194:	ffffc080 	.word	0xffffc080
 8015198:	228c      	movs	r2, #140	@ 0x8c
 801519a:	18bb      	adds	r3, r7, r2
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	085b      	lsrs	r3, r3, #1
 80151a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80151a2:	18bb      	adds	r3, r7, r2
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	2201      	movs	r2, #1
 80151a8:	4013      	ands	r3, r2
 80151aa:	d002      	beq.n	80151b2 <HAL_PCD_EP_DB_Transmit+0x752>
 80151ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80151ae:	3301      	adds	r3, #1
 80151b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80151b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80151b4:	881b      	ldrh	r3, [r3, #0]
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	029b      	lsls	r3, r3, #10
 80151be:	b29b      	uxth	r3, r3
 80151c0:	4313      	orrs	r3, r2
 80151c2:	b29a      	uxth	r2, r3
 80151c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80151c6:	801a      	strh	r2, [r3, #0]
 80151c8:	e01b      	b.n	8015202 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	785b      	ldrb	r3, [r3, #1]
 80151ce:	2b01      	cmp	r3, #1
 80151d0:	d117      	bne.n	8015202 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2250      	movs	r2, #80	@ 0x50
 80151d8:	5a9b      	ldrh	r3, [r3, r2]
 80151da:	b29b      	uxth	r3, r3
 80151dc:	001a      	movs	r2, r3
 80151de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80151e0:	189b      	adds	r3, r3, r2
 80151e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	00da      	lsls	r2, r3, #3
 80151ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80151ec:	18d3      	adds	r3, r2, r3
 80151ee:	4a21      	ldr	r2, [pc, #132]	@ (8015274 <HAL_PCD_EP_DB_Transmit+0x814>)
 80151f0:	4694      	mov	ip, r2
 80151f2:	4463      	add	r3, ip
 80151f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80151f6:	238c      	movs	r3, #140	@ 0x8c
 80151f8:	18fb      	adds	r3, r7, r3
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015200:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	6818      	ldr	r0, [r3, #0]
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	6959      	ldr	r1, [r3, #20]
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	895a      	ldrh	r2, [r3, #10]
 801520e:	238c      	movs	r3, #140	@ 0x8c
 8015210:	18fb      	adds	r3, r7, r3
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	b29b      	uxth	r3, r3
 8015216:	f006 f999 	bl	801b54c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	001a      	movs	r2, r3
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	009b      	lsls	r3, r3, #2
 8015226:	18d3      	adds	r3, r2, r3
 8015228:	881b      	ldrh	r3, [r3, #0]
 801522a:	b29a      	uxth	r2, r3
 801522c:	2014      	movs	r0, #20
 801522e:	183b      	adds	r3, r7, r0
 8015230:	4911      	ldr	r1, [pc, #68]	@ (8015278 <HAL_PCD_EP_DB_Transmit+0x818>)
 8015232:	400a      	ands	r2, r1
 8015234:	801a      	strh	r2, [r3, #0]
 8015236:	183b      	adds	r3, r7, r0
 8015238:	183a      	adds	r2, r7, r0
 801523a:	8812      	ldrh	r2, [r2, #0]
 801523c:	2110      	movs	r1, #16
 801523e:	404a      	eors	r2, r1
 8015240:	801a      	strh	r2, [r3, #0]
 8015242:	183b      	adds	r3, r7, r0
 8015244:	183a      	adds	r2, r7, r0
 8015246:	8812      	ldrh	r2, [r2, #0]
 8015248:	2120      	movs	r1, #32
 801524a:	404a      	eors	r2, r1
 801524c:	801a      	strh	r2, [r3, #0]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	001a      	movs	r2, r3
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	009b      	lsls	r3, r3, #2
 801525a:	18d3      	adds	r3, r2, r3
 801525c:	183a      	adds	r2, r7, r0
 801525e:	8812      	ldrh	r2, [r2, #0]
 8015260:	4906      	ldr	r1, [pc, #24]	@ (801527c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8015262:	430a      	orrs	r2, r1
 8015264:	b292      	uxth	r2, r2
 8015266:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8015268:	2300      	movs	r3, #0
}
 801526a:	0018      	movs	r0, r3
 801526c:	46bd      	mov	sp, r7
 801526e:	b024      	add	sp, #144	@ 0x90
 8015270:	bd80      	pop	{r7, pc}
 8015272:	46c0      	nop			@ (mov r8, r8)
 8015274:	00000406 	.word	0x00000406
 8015278:	ffff8fbf 	.word	0xffff8fbf
 801527c:	ffff8080 	.word	0xffff8080

08015280 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8015280:	b590      	push	{r4, r7, lr}
 8015282:	b087      	sub	sp, #28
 8015284:	af00      	add	r7, sp, #0
 8015286:	60f8      	str	r0, [r7, #12]
 8015288:	0008      	movs	r0, r1
 801528a:	0011      	movs	r1, r2
 801528c:	607b      	str	r3, [r7, #4]
 801528e:	240a      	movs	r4, #10
 8015290:	193b      	adds	r3, r7, r4
 8015292:	1c02      	adds	r2, r0, #0
 8015294:	801a      	strh	r2, [r3, #0]
 8015296:	2308      	movs	r3, #8
 8015298:	18fb      	adds	r3, r7, r3
 801529a:	1c0a      	adds	r2, r1, #0
 801529c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801529e:	0021      	movs	r1, r4
 80152a0:	187b      	adds	r3, r7, r1
 80152a2:	881b      	ldrh	r3, [r3, #0]
 80152a4:	2280      	movs	r2, #128	@ 0x80
 80152a6:	4013      	ands	r3, r2
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d00c      	beq.n	80152c8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80152ae:	187b      	adds	r3, r7, r1
 80152b0:	881b      	ldrh	r3, [r3, #0]
 80152b2:	2207      	movs	r2, #7
 80152b4:	4013      	ands	r3, r2
 80152b6:	1c5a      	adds	r2, r3, #1
 80152b8:	0013      	movs	r3, r2
 80152ba:	009b      	lsls	r3, r3, #2
 80152bc:	189b      	adds	r3, r3, r2
 80152be:	00db      	lsls	r3, r3, #3
 80152c0:	68fa      	ldr	r2, [r7, #12]
 80152c2:	18d3      	adds	r3, r2, r3
 80152c4:	617b      	str	r3, [r7, #20]
 80152c6:	e00b      	b.n	80152e0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80152c8:	230a      	movs	r3, #10
 80152ca:	18fb      	adds	r3, r7, r3
 80152cc:	881a      	ldrh	r2, [r3, #0]
 80152ce:	0013      	movs	r3, r2
 80152d0:	009b      	lsls	r3, r3, #2
 80152d2:	189b      	adds	r3, r3, r2
 80152d4:	00db      	lsls	r3, r3, #3
 80152d6:	3369      	adds	r3, #105	@ 0x69
 80152d8:	33ff      	adds	r3, #255	@ 0xff
 80152da:	68fa      	ldr	r2, [r7, #12]
 80152dc:	18d3      	adds	r3, r2, r3
 80152de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80152e0:	2308      	movs	r3, #8
 80152e2:	18fb      	adds	r3, r7, r3
 80152e4:	881b      	ldrh	r3, [r3, #0]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d107      	bne.n	80152fa <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	2200      	movs	r2, #0
 80152ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	b29a      	uxth	r2, r3
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	80da      	strh	r2, [r3, #6]
 80152f8:	e00b      	b.n	8015312 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	2201      	movs	r2, #1
 80152fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	b29a      	uxth	r2, r3
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	0c1b      	lsrs	r3, r3, #16
 801530c:	b29a      	uxth	r2, r3
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8015312:	2300      	movs	r3, #0
}
 8015314:	0018      	movs	r0, r3
 8015316:	46bd      	mov	sp, r7
 8015318:	b007      	add	sp, #28
 801531a:	bd90      	pop	{r4, r7, pc}

0801531c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	23ba      	movs	r3, #186	@ 0xba
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	2101      	movs	r1, #1
 8015332:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8015334:	687a      	ldr	r2, [r7, #4]
 8015336:	23b8      	movs	r3, #184	@ 0xb8
 8015338:	009b      	lsls	r3, r3, #2
 801533a:	2100      	movs	r1, #0
 801533c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2254      	movs	r2, #84	@ 0x54
 8015342:	5a9b      	ldrh	r3, [r3, r2]
 8015344:	b29b      	uxth	r3, r3
 8015346:	2201      	movs	r2, #1
 8015348:	4313      	orrs	r3, r2
 801534a:	b299      	uxth	r1, r3
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2254      	movs	r2, #84	@ 0x54
 8015350:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2254      	movs	r2, #84	@ 0x54
 8015356:	5a9b      	ldrh	r3, [r3, r2]
 8015358:	b29b      	uxth	r3, r3
 801535a:	2202      	movs	r2, #2
 801535c:	4313      	orrs	r3, r2
 801535e:	b299      	uxth	r1, r3
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2254      	movs	r2, #84	@ 0x54
 8015364:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015366:	2300      	movs	r3, #0
}
 8015368:	0018      	movs	r0, r3
 801536a:	46bd      	mov	sp, r7
 801536c:	b004      	add	sp, #16
 801536e:	bd80      	pop	{r7, pc}

08015370 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	000a      	movs	r2, r1
 801537a:	1cfb      	adds	r3, r7, #3
 801537c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801537e:	46c0      	nop			@ (mov r8, r8)
 8015380:	46bd      	mov	sp, r7
 8015382:	b002      	add	sp, #8
 8015384:	bd80      	pop	{r7, pc}
	...

08015388 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801538c:	4b04      	ldr	r3, [pc, #16]	@ (80153a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	4b03      	ldr	r3, [pc, #12]	@ (80153a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8015392:	2180      	movs	r1, #128	@ 0x80
 8015394:	0049      	lsls	r1, r1, #1
 8015396:	430a      	orrs	r2, r1
 8015398:	601a      	str	r2, [r3, #0]
}
 801539a:	46c0      	nop			@ (mov r8, r8)
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	40007000 	.word	0x40007000

080153a4 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80153a8:	4b04      	ldr	r3, [pc, #16]	@ (80153bc <HAL_PWR_DisableBkUpAccess+0x18>)
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	4b03      	ldr	r3, [pc, #12]	@ (80153bc <HAL_PWR_DisableBkUpAccess+0x18>)
 80153ae:	4904      	ldr	r1, [pc, #16]	@ (80153c0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80153b0:	400a      	ands	r2, r1
 80153b2:	601a      	str	r2, [r3, #0]
}
 80153b4:	46c0      	nop			@ (mov r8, r8)
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	46c0      	nop			@ (mov r8, r8)
 80153bc:	40007000 	.word	0x40007000
 80153c0:	fffffeff 	.word	0xfffffeff

080153c4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b086      	sub	sp, #24
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	000a      	movs	r2, r1
 80153ce:	1cfb      	adds	r3, r7, #3
 80153d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80153d2:	2300      	movs	r3, #0
 80153d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80153d6:	4b25      	ldr	r3, [pc, #148]	@ (801546c <HAL_PWR_EnterSTOPMode+0xa8>)
 80153d8:	681a      	ldr	r2, [r3, #0]
 80153da:	2380      	movs	r3, #128	@ 0x80
 80153dc:	009b      	lsls	r3, r3, #2
 80153de:	4013      	ands	r3, r2
 80153e0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80153e2:	4b23      	ldr	r3, [pc, #140]	@ (8015470 <HAL_PWR_EnterSTOPMode+0xac>)
 80153e4:	6a1b      	ldr	r3, [r3, #32]
 80153e6:	2201      	movs	r2, #1
 80153e8:	4013      	ands	r3, r2
 80153ea:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d008      	beq.n	8015404 <HAL_PWR_EnterSTOPMode+0x40>
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d005      	beq.n	8015404 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80153f8:	4b1c      	ldr	r3, [pc, #112]	@ (801546c <HAL_PWR_EnterSTOPMode+0xa8>)
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	4b1b      	ldr	r3, [pc, #108]	@ (801546c <HAL_PWR_EnterSTOPMode+0xa8>)
 80153fe:	491d      	ldr	r1, [pc, #116]	@ (8015474 <HAL_PWR_EnterSTOPMode+0xb0>)
 8015400:	400a      	ands	r2, r1
 8015402:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8015404:	4b19      	ldr	r3, [pc, #100]	@ (801546c <HAL_PWR_EnterSTOPMode+0xa8>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	2203      	movs	r2, #3
 801540e:	4393      	bics	r3, r2
 8015410:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8015412:	697a      	ldr	r2, [r7, #20]
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	4313      	orrs	r3, r2
 8015418:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801541a:	4b14      	ldr	r3, [pc, #80]	@ (801546c <HAL_PWR_EnterSTOPMode+0xa8>)
 801541c:	697a      	ldr	r2, [r7, #20]
 801541e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015420:	4b15      	ldr	r3, [pc, #84]	@ (8015478 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015422:	691a      	ldr	r2, [r3, #16]
 8015424:	4b14      	ldr	r3, [pc, #80]	@ (8015478 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015426:	2104      	movs	r1, #4
 8015428:	430a      	orrs	r2, r1
 801542a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801542c:	1cfb      	adds	r3, r7, #3
 801542e:	781b      	ldrb	r3, [r3, #0]
 8015430:	2b01      	cmp	r3, #1
 8015432:	d101      	bne.n	8015438 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8015434:	bf30      	wfi
 8015436:	e002      	b.n	801543e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8015438:	bf40      	sev
    __WFE();
 801543a:	bf20      	wfe
    __WFE();
 801543c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801543e:	4b0e      	ldr	r3, [pc, #56]	@ (8015478 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015440:	691a      	ldr	r2, [r3, #16]
 8015442:	4b0d      	ldr	r3, [pc, #52]	@ (8015478 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015444:	2104      	movs	r1, #4
 8015446:	438a      	bics	r2, r1
 8015448:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801544a:	693b      	ldr	r3, [r7, #16]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d009      	beq.n	8015464 <HAL_PWR_EnterSTOPMode+0xa0>
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d006      	beq.n	8015464 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8015456:	4b05      	ldr	r3, [pc, #20]	@ (801546c <HAL_PWR_EnterSTOPMode+0xa8>)
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	4b04      	ldr	r3, [pc, #16]	@ (801546c <HAL_PWR_EnterSTOPMode+0xa8>)
 801545c:	2180      	movs	r1, #128	@ 0x80
 801545e:	0089      	lsls	r1, r1, #2
 8015460:	430a      	orrs	r2, r1
 8015462:	601a      	str	r2, [r3, #0]
  }
}
 8015464:	46c0      	nop			@ (mov r8, r8)
 8015466:	46bd      	mov	sp, r7
 8015468:	b006      	add	sp, #24
 801546a:	bd80      	pop	{r7, pc}
 801546c:	40007000 	.word	0x40007000
 8015470:	40010000 	.word	0x40010000
 8015474:	fffffdff 	.word	0xfffffdff
 8015478:	e000ed00 	.word	0xe000ed00

0801547c <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8015480:	4b07      	ldr	r3, [pc, #28]	@ (80154a0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	4b06      	ldr	r3, [pc, #24]	@ (80154a0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8015486:	2102      	movs	r1, #2
 8015488:	430a      	orrs	r2, r1
 801548a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801548c:	4b05      	ldr	r3, [pc, #20]	@ (80154a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801548e:	691a      	ldr	r2, [r3, #16]
 8015490:	4b04      	ldr	r3, [pc, #16]	@ (80154a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8015492:	2104      	movs	r1, #4
 8015494:	430a      	orrs	r2, r1
 8015496:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8015498:	bf30      	wfi
}
 801549a:	46c0      	nop			@ (mov r8, r8)
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	40007000 	.word	0x40007000
 80154a4:	e000ed00 	.word	0xe000ed00

080154a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80154a8:	b5b0      	push	{r4, r5, r7, lr}
 80154aa:	b08a      	sub	sp, #40	@ 0x28
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d102      	bne.n	80154bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80154b6:	2301      	movs	r3, #1
 80154b8:	f000 fbbf 	bl	8015c3a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80154bc:	4bc9      	ldr	r3, [pc, #804]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80154be:	68db      	ldr	r3, [r3, #12]
 80154c0:	220c      	movs	r2, #12
 80154c2:	4013      	ands	r3, r2
 80154c4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80154c6:	4bc7      	ldr	r3, [pc, #796]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80154c8:	68da      	ldr	r2, [r3, #12]
 80154ca:	2380      	movs	r3, #128	@ 0x80
 80154cc:	025b      	lsls	r3, r3, #9
 80154ce:	4013      	ands	r3, r2
 80154d0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	2201      	movs	r2, #1
 80154d8:	4013      	ands	r3, r2
 80154da:	d100      	bne.n	80154de <HAL_RCC_OscConfig+0x36>
 80154dc:	e07e      	b.n	80155dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80154de:	69fb      	ldr	r3, [r7, #28]
 80154e0:	2b08      	cmp	r3, #8
 80154e2:	d007      	beq.n	80154f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	2b0c      	cmp	r3, #12
 80154e8:	d112      	bne.n	8015510 <HAL_RCC_OscConfig+0x68>
 80154ea:	69ba      	ldr	r2, [r7, #24]
 80154ec:	2380      	movs	r3, #128	@ 0x80
 80154ee:	025b      	lsls	r3, r3, #9
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d10d      	bne.n	8015510 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80154f4:	4bbb      	ldr	r3, [pc, #748]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80154f6:	681a      	ldr	r2, [r3, #0]
 80154f8:	2380      	movs	r3, #128	@ 0x80
 80154fa:	029b      	lsls	r3, r3, #10
 80154fc:	4013      	ands	r3, r2
 80154fe:	d100      	bne.n	8015502 <HAL_RCC_OscConfig+0x5a>
 8015500:	e06b      	b.n	80155da <HAL_RCC_OscConfig+0x132>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d167      	bne.n	80155da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801550a:	2301      	movs	r3, #1
 801550c:	f000 fb95 	bl	8015c3a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	685a      	ldr	r2, [r3, #4]
 8015514:	2380      	movs	r3, #128	@ 0x80
 8015516:	025b      	lsls	r3, r3, #9
 8015518:	429a      	cmp	r2, r3
 801551a:	d107      	bne.n	801552c <HAL_RCC_OscConfig+0x84>
 801551c:	4bb1      	ldr	r3, [pc, #708]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	4bb0      	ldr	r3, [pc, #704]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015522:	2180      	movs	r1, #128	@ 0x80
 8015524:	0249      	lsls	r1, r1, #9
 8015526:	430a      	orrs	r2, r1
 8015528:	601a      	str	r2, [r3, #0]
 801552a:	e027      	b.n	801557c <HAL_RCC_OscConfig+0xd4>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	685a      	ldr	r2, [r3, #4]
 8015530:	23a0      	movs	r3, #160	@ 0xa0
 8015532:	02db      	lsls	r3, r3, #11
 8015534:	429a      	cmp	r2, r3
 8015536:	d10e      	bne.n	8015556 <HAL_RCC_OscConfig+0xae>
 8015538:	4baa      	ldr	r3, [pc, #680]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	4ba9      	ldr	r3, [pc, #676]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801553e:	2180      	movs	r1, #128	@ 0x80
 8015540:	02c9      	lsls	r1, r1, #11
 8015542:	430a      	orrs	r2, r1
 8015544:	601a      	str	r2, [r3, #0]
 8015546:	4ba7      	ldr	r3, [pc, #668]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	4ba6      	ldr	r3, [pc, #664]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801554c:	2180      	movs	r1, #128	@ 0x80
 801554e:	0249      	lsls	r1, r1, #9
 8015550:	430a      	orrs	r2, r1
 8015552:	601a      	str	r2, [r3, #0]
 8015554:	e012      	b.n	801557c <HAL_RCC_OscConfig+0xd4>
 8015556:	4ba3      	ldr	r3, [pc, #652]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015558:	681a      	ldr	r2, [r3, #0]
 801555a:	4ba2      	ldr	r3, [pc, #648]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801555c:	49a2      	ldr	r1, [pc, #648]	@ (80157e8 <HAL_RCC_OscConfig+0x340>)
 801555e:	400a      	ands	r2, r1
 8015560:	601a      	str	r2, [r3, #0]
 8015562:	4ba0      	ldr	r3, [pc, #640]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	2380      	movs	r3, #128	@ 0x80
 8015568:	025b      	lsls	r3, r3, #9
 801556a:	4013      	ands	r3, r2
 801556c:	60fb      	str	r3, [r7, #12]
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	4b9c      	ldr	r3, [pc, #624]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015572:	681a      	ldr	r2, [r3, #0]
 8015574:	4b9b      	ldr	r3, [pc, #620]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015576:	499d      	ldr	r1, [pc, #628]	@ (80157ec <HAL_RCC_OscConfig+0x344>)
 8015578:	400a      	ands	r2, r1
 801557a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d015      	beq.n	80155b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015584:	f7f9 fe60 	bl	800f248 <HAL_GetTick>
 8015588:	0003      	movs	r3, r0
 801558a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801558c:	e009      	b.n	80155a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801558e:	f7f9 fe5b 	bl	800f248 <HAL_GetTick>
 8015592:	0002      	movs	r2, r0
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	1ad3      	subs	r3, r2, r3
 8015598:	2b64      	cmp	r3, #100	@ 0x64
 801559a:	d902      	bls.n	80155a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801559c:	2303      	movs	r3, #3
 801559e:	f000 fb4c 	bl	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80155a2:	4b90      	ldr	r3, [pc, #576]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80155a4:	681a      	ldr	r2, [r3, #0]
 80155a6:	2380      	movs	r3, #128	@ 0x80
 80155a8:	029b      	lsls	r3, r3, #10
 80155aa:	4013      	ands	r3, r2
 80155ac:	d0ef      	beq.n	801558e <HAL_RCC_OscConfig+0xe6>
 80155ae:	e015      	b.n	80155dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155b0:	f7f9 fe4a 	bl	800f248 <HAL_GetTick>
 80155b4:	0003      	movs	r3, r0
 80155b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80155b8:	e008      	b.n	80155cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80155ba:	f7f9 fe45 	bl	800f248 <HAL_GetTick>
 80155be:	0002      	movs	r2, r0
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	1ad3      	subs	r3, r2, r3
 80155c4:	2b64      	cmp	r3, #100	@ 0x64
 80155c6:	d901      	bls.n	80155cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80155c8:	2303      	movs	r3, #3
 80155ca:	e336      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80155cc:	4b85      	ldr	r3, [pc, #532]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80155ce:	681a      	ldr	r2, [r3, #0]
 80155d0:	2380      	movs	r3, #128	@ 0x80
 80155d2:	029b      	lsls	r3, r3, #10
 80155d4:	4013      	ands	r3, r2
 80155d6:	d1f0      	bne.n	80155ba <HAL_RCC_OscConfig+0x112>
 80155d8:	e000      	b.n	80155dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80155da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	2202      	movs	r2, #2
 80155e2:	4013      	ands	r3, r2
 80155e4:	d100      	bne.n	80155e8 <HAL_RCC_OscConfig+0x140>
 80155e6:	e099      	b.n	801571c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80155ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155f0:	2220      	movs	r2, #32
 80155f2:	4013      	ands	r3, r2
 80155f4:	d009      	beq.n	801560a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80155f6:	4b7b      	ldr	r3, [pc, #492]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	4b7a      	ldr	r3, [pc, #488]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80155fc:	2120      	movs	r1, #32
 80155fe:	430a      	orrs	r2, r1
 8015600:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8015602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015604:	2220      	movs	r2, #32
 8015606:	4393      	bics	r3, r2
 8015608:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801560a:	69fb      	ldr	r3, [r7, #28]
 801560c:	2b04      	cmp	r3, #4
 801560e:	d005      	beq.n	801561c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015610:	69fb      	ldr	r3, [r7, #28]
 8015612:	2b0c      	cmp	r3, #12
 8015614:	d13e      	bne.n	8015694 <HAL_RCC_OscConfig+0x1ec>
 8015616:	69bb      	ldr	r3, [r7, #24]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d13b      	bne.n	8015694 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801561c:	4b71      	ldr	r3, [pc, #452]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2204      	movs	r2, #4
 8015622:	4013      	ands	r3, r2
 8015624:	d004      	beq.n	8015630 <HAL_RCC_OscConfig+0x188>
 8015626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015628:	2b00      	cmp	r3, #0
 801562a:	d101      	bne.n	8015630 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801562c:	2301      	movs	r3, #1
 801562e:	e304      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015630:	4b6c      	ldr	r3, [pc, #432]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015632:	685b      	ldr	r3, [r3, #4]
 8015634:	4a6e      	ldr	r2, [pc, #440]	@ (80157f0 <HAL_RCC_OscConfig+0x348>)
 8015636:	4013      	ands	r3, r2
 8015638:	0019      	movs	r1, r3
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	691b      	ldr	r3, [r3, #16]
 801563e:	021a      	lsls	r2, r3, #8
 8015640:	4b68      	ldr	r3, [pc, #416]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015642:	430a      	orrs	r2, r1
 8015644:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015646:	4b67      	ldr	r3, [pc, #412]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	2209      	movs	r2, #9
 801564c:	4393      	bics	r3, r2
 801564e:	0019      	movs	r1, r3
 8015650:	4b64      	ldr	r3, [pc, #400]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015654:	430a      	orrs	r2, r1
 8015656:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015658:	f000 fc42 	bl	8015ee0 <HAL_RCC_GetSysClockFreq>
 801565c:	0001      	movs	r1, r0
 801565e:	4b61      	ldr	r3, [pc, #388]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015660:	68db      	ldr	r3, [r3, #12]
 8015662:	091b      	lsrs	r3, r3, #4
 8015664:	220f      	movs	r2, #15
 8015666:	4013      	ands	r3, r2
 8015668:	4a62      	ldr	r2, [pc, #392]	@ (80157f4 <HAL_RCC_OscConfig+0x34c>)
 801566a:	5cd3      	ldrb	r3, [r2, r3]
 801566c:	000a      	movs	r2, r1
 801566e:	40da      	lsrs	r2, r3
 8015670:	4b61      	ldr	r3, [pc, #388]	@ (80157f8 <HAL_RCC_OscConfig+0x350>)
 8015672:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8015674:	4b61      	ldr	r3, [pc, #388]	@ (80157fc <HAL_RCC_OscConfig+0x354>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	2513      	movs	r5, #19
 801567a:	197c      	adds	r4, r7, r5
 801567c:	0018      	movs	r0, r3
 801567e:	f7f9 fd9d 	bl	800f1bc <HAL_InitTick>
 8015682:	0003      	movs	r3, r0
 8015684:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8015686:	197b      	adds	r3, r7, r5
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d046      	beq.n	801571c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801568e:	197b      	adds	r3, r7, r5
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	e2d2      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8015694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015696:	2b00      	cmp	r3, #0
 8015698:	d027      	beq.n	80156ea <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801569a:	4b52      	ldr	r3, [pc, #328]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	2209      	movs	r2, #9
 80156a0:	4393      	bics	r3, r2
 80156a2:	0019      	movs	r1, r3
 80156a4:	4b4f      	ldr	r3, [pc, #316]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80156a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156a8:	430a      	orrs	r2, r1
 80156aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156ac:	f7f9 fdcc 	bl	800f248 <HAL_GetTick>
 80156b0:	0003      	movs	r3, r0
 80156b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80156b4:	e008      	b.n	80156c8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80156b6:	f7f9 fdc7 	bl	800f248 <HAL_GetTick>
 80156ba:	0002      	movs	r2, r0
 80156bc:	697b      	ldr	r3, [r7, #20]
 80156be:	1ad3      	subs	r3, r2, r3
 80156c0:	2b02      	cmp	r3, #2
 80156c2:	d901      	bls.n	80156c8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80156c4:	2303      	movs	r3, #3
 80156c6:	e2b8      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80156c8:	4b46      	ldr	r3, [pc, #280]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	2204      	movs	r2, #4
 80156ce:	4013      	ands	r3, r2
 80156d0:	d0f1      	beq.n	80156b6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80156d2:	4b44      	ldr	r3, [pc, #272]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	4a46      	ldr	r2, [pc, #280]	@ (80157f0 <HAL_RCC_OscConfig+0x348>)
 80156d8:	4013      	ands	r3, r2
 80156da:	0019      	movs	r1, r3
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	691b      	ldr	r3, [r3, #16]
 80156e0:	021a      	lsls	r2, r3, #8
 80156e2:	4b40      	ldr	r3, [pc, #256]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80156e4:	430a      	orrs	r2, r1
 80156e6:	605a      	str	r2, [r3, #4]
 80156e8:	e018      	b.n	801571c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80156ea:	4b3e      	ldr	r3, [pc, #248]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80156ec:	681a      	ldr	r2, [r3, #0]
 80156ee:	4b3d      	ldr	r3, [pc, #244]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80156f0:	2101      	movs	r1, #1
 80156f2:	438a      	bics	r2, r1
 80156f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156f6:	f7f9 fda7 	bl	800f248 <HAL_GetTick>
 80156fa:	0003      	movs	r3, r0
 80156fc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80156fe:	e008      	b.n	8015712 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015700:	f7f9 fda2 	bl	800f248 <HAL_GetTick>
 8015704:	0002      	movs	r2, r0
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	1ad3      	subs	r3, r2, r3
 801570a:	2b02      	cmp	r3, #2
 801570c:	d901      	bls.n	8015712 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801570e:	2303      	movs	r3, #3
 8015710:	e293      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015712:	4b34      	ldr	r3, [pc, #208]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2204      	movs	r2, #4
 8015718:	4013      	ands	r3, r2
 801571a:	d1f1      	bne.n	8015700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	2210      	movs	r2, #16
 8015722:	4013      	ands	r3, r2
 8015724:	d100      	bne.n	8015728 <HAL_RCC_OscConfig+0x280>
 8015726:	e0a2      	b.n	801586e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d140      	bne.n	80157b0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801572e:	4b2d      	ldr	r3, [pc, #180]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015730:	681a      	ldr	r2, [r3, #0]
 8015732:	2380      	movs	r3, #128	@ 0x80
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	4013      	ands	r3, r2
 8015738:	d005      	beq.n	8015746 <HAL_RCC_OscConfig+0x29e>
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	69db      	ldr	r3, [r3, #28]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d101      	bne.n	8015746 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8015742:	2301      	movs	r3, #1
 8015744:	e279      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015746:	4b27      	ldr	r3, [pc, #156]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	4a2d      	ldr	r2, [pc, #180]	@ (8015800 <HAL_RCC_OscConfig+0x358>)
 801574c:	4013      	ands	r3, r2
 801574e:	0019      	movs	r1, r3
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015754:	4b23      	ldr	r3, [pc, #140]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 8015756:	430a      	orrs	r2, r1
 8015758:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801575a:	4b22      	ldr	r3, [pc, #136]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	021b      	lsls	r3, r3, #8
 8015760:	0a19      	lsrs	r1, r3, #8
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	6a1b      	ldr	r3, [r3, #32]
 8015766:	061a      	lsls	r2, r3, #24
 8015768:	4b1e      	ldr	r3, [pc, #120]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801576a:	430a      	orrs	r2, r1
 801576c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015772:	0b5b      	lsrs	r3, r3, #13
 8015774:	3301      	adds	r3, #1
 8015776:	2280      	movs	r2, #128	@ 0x80
 8015778:	0212      	lsls	r2, r2, #8
 801577a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801577c:	4b19      	ldr	r3, [pc, #100]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 801577e:	68db      	ldr	r3, [r3, #12]
 8015780:	091b      	lsrs	r3, r3, #4
 8015782:	210f      	movs	r1, #15
 8015784:	400b      	ands	r3, r1
 8015786:	491b      	ldr	r1, [pc, #108]	@ (80157f4 <HAL_RCC_OscConfig+0x34c>)
 8015788:	5ccb      	ldrb	r3, [r1, r3]
 801578a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801578c:	4b1a      	ldr	r3, [pc, #104]	@ (80157f8 <HAL_RCC_OscConfig+0x350>)
 801578e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8015790:	4b1a      	ldr	r3, [pc, #104]	@ (80157fc <HAL_RCC_OscConfig+0x354>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	2513      	movs	r5, #19
 8015796:	197c      	adds	r4, r7, r5
 8015798:	0018      	movs	r0, r3
 801579a:	f7f9 fd0f 	bl	800f1bc <HAL_InitTick>
 801579e:	0003      	movs	r3, r0
 80157a0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80157a2:	197b      	adds	r3, r7, r5
 80157a4:	781b      	ldrb	r3, [r3, #0]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d061      	beq.n	801586e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80157aa:	197b      	adds	r3, r7, r5
 80157ac:	781b      	ldrb	r3, [r3, #0]
 80157ae:	e244      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	69db      	ldr	r3, [r3, #28]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d040      	beq.n	801583a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80157b8:	4b0a      	ldr	r3, [pc, #40]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	4b09      	ldr	r3, [pc, #36]	@ (80157e4 <HAL_RCC_OscConfig+0x33c>)
 80157be:	2180      	movs	r1, #128	@ 0x80
 80157c0:	0049      	lsls	r1, r1, #1
 80157c2:	430a      	orrs	r2, r1
 80157c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80157c6:	f7f9 fd3f 	bl	800f248 <HAL_GetTick>
 80157ca:	0003      	movs	r3, r0
 80157cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80157ce:	e019      	b.n	8015804 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80157d0:	f7f9 fd3a 	bl	800f248 <HAL_GetTick>
 80157d4:	0002      	movs	r2, r0
 80157d6:	697b      	ldr	r3, [r7, #20]
 80157d8:	1ad3      	subs	r3, r2, r3
 80157da:	2b02      	cmp	r3, #2
 80157dc:	d912      	bls.n	8015804 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80157de:	2303      	movs	r3, #3
 80157e0:	e22b      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
 80157e2:	46c0      	nop			@ (mov r8, r8)
 80157e4:	40021000 	.word	0x40021000
 80157e8:	fffeffff 	.word	0xfffeffff
 80157ec:	fffbffff 	.word	0xfffbffff
 80157f0:	ffffe0ff 	.word	0xffffe0ff
 80157f4:	08025e2c 	.word	0x08025e2c
 80157f8:	200000d0 	.word	0x200000d0
 80157fc:	200000e0 	.word	0x200000e0
 8015800:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015804:	4bca      	ldr	r3, [pc, #808]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015806:	681a      	ldr	r2, [r3, #0]
 8015808:	2380      	movs	r3, #128	@ 0x80
 801580a:	009b      	lsls	r3, r3, #2
 801580c:	4013      	ands	r3, r2
 801580e:	d0df      	beq.n	80157d0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015810:	4bc7      	ldr	r3, [pc, #796]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	4ac7      	ldr	r2, [pc, #796]	@ (8015b34 <HAL_RCC_OscConfig+0x68c>)
 8015816:	4013      	ands	r3, r2
 8015818:	0019      	movs	r1, r3
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801581e:	4bc4      	ldr	r3, [pc, #784]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015820:	430a      	orrs	r2, r1
 8015822:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015824:	4bc2      	ldr	r3, [pc, #776]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015826:	685b      	ldr	r3, [r3, #4]
 8015828:	021b      	lsls	r3, r3, #8
 801582a:	0a19      	lsrs	r1, r3, #8
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6a1b      	ldr	r3, [r3, #32]
 8015830:	061a      	lsls	r2, r3, #24
 8015832:	4bbf      	ldr	r3, [pc, #764]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015834:	430a      	orrs	r2, r1
 8015836:	605a      	str	r2, [r3, #4]
 8015838:	e019      	b.n	801586e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801583a:	4bbd      	ldr	r3, [pc, #756]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	4bbc      	ldr	r3, [pc, #752]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015840:	49bd      	ldr	r1, [pc, #756]	@ (8015b38 <HAL_RCC_OscConfig+0x690>)
 8015842:	400a      	ands	r2, r1
 8015844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015846:	f7f9 fcff 	bl	800f248 <HAL_GetTick>
 801584a:	0003      	movs	r3, r0
 801584c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801584e:	e008      	b.n	8015862 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015850:	f7f9 fcfa 	bl	800f248 <HAL_GetTick>
 8015854:	0002      	movs	r2, r0
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	1ad3      	subs	r3, r2, r3
 801585a:	2b02      	cmp	r3, #2
 801585c:	d901      	bls.n	8015862 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801585e:	2303      	movs	r3, #3
 8015860:	e1eb      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8015862:	4bb3      	ldr	r3, [pc, #716]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015864:	681a      	ldr	r2, [r3, #0]
 8015866:	2380      	movs	r3, #128	@ 0x80
 8015868:	009b      	lsls	r3, r3, #2
 801586a:	4013      	ands	r3, r2
 801586c:	d1f0      	bne.n	8015850 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	2208      	movs	r2, #8
 8015874:	4013      	ands	r3, r2
 8015876:	d036      	beq.n	80158e6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	695b      	ldr	r3, [r3, #20]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d019      	beq.n	80158b4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015880:	4bab      	ldr	r3, [pc, #684]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015882:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015884:	4baa      	ldr	r3, [pc, #680]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015886:	2101      	movs	r1, #1
 8015888:	430a      	orrs	r2, r1
 801588a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801588c:	f7f9 fcdc 	bl	800f248 <HAL_GetTick>
 8015890:	0003      	movs	r3, r0
 8015892:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015894:	e008      	b.n	80158a8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015896:	f7f9 fcd7 	bl	800f248 <HAL_GetTick>
 801589a:	0002      	movs	r2, r0
 801589c:	697b      	ldr	r3, [r7, #20]
 801589e:	1ad3      	subs	r3, r2, r3
 80158a0:	2b02      	cmp	r3, #2
 80158a2:	d901      	bls.n	80158a8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80158a4:	2303      	movs	r3, #3
 80158a6:	e1c8      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80158a8:	4ba1      	ldr	r3, [pc, #644]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80158aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158ac:	2202      	movs	r2, #2
 80158ae:	4013      	ands	r3, r2
 80158b0:	d0f1      	beq.n	8015896 <HAL_RCC_OscConfig+0x3ee>
 80158b2:	e018      	b.n	80158e6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80158b4:	4b9e      	ldr	r3, [pc, #632]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80158b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158b8:	4b9d      	ldr	r3, [pc, #628]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80158ba:	2101      	movs	r1, #1
 80158bc:	438a      	bics	r2, r1
 80158be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80158c0:	f7f9 fcc2 	bl	800f248 <HAL_GetTick>
 80158c4:	0003      	movs	r3, r0
 80158c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80158c8:	e008      	b.n	80158dc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80158ca:	f7f9 fcbd 	bl	800f248 <HAL_GetTick>
 80158ce:	0002      	movs	r2, r0
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	1ad3      	subs	r3, r2, r3
 80158d4:	2b02      	cmp	r3, #2
 80158d6:	d901      	bls.n	80158dc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80158d8:	2303      	movs	r3, #3
 80158da:	e1ae      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80158dc:	4b94      	ldr	r3, [pc, #592]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80158de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158e0:	2202      	movs	r2, #2
 80158e2:	4013      	ands	r3, r2
 80158e4:	d1f1      	bne.n	80158ca <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	2204      	movs	r2, #4
 80158ec:	4013      	ands	r3, r2
 80158ee:	d100      	bne.n	80158f2 <HAL_RCC_OscConfig+0x44a>
 80158f0:	e0ae      	b.n	8015a50 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80158f2:	2023      	movs	r0, #35	@ 0x23
 80158f4:	183b      	adds	r3, r7, r0
 80158f6:	2200      	movs	r2, #0
 80158f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80158fa:	4b8d      	ldr	r3, [pc, #564]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80158fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80158fe:	2380      	movs	r3, #128	@ 0x80
 8015900:	055b      	lsls	r3, r3, #21
 8015902:	4013      	ands	r3, r2
 8015904:	d109      	bne.n	801591a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015906:	4b8a      	ldr	r3, [pc, #552]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801590a:	4b89      	ldr	r3, [pc, #548]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 801590c:	2180      	movs	r1, #128	@ 0x80
 801590e:	0549      	lsls	r1, r1, #21
 8015910:	430a      	orrs	r2, r1
 8015912:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015914:	183b      	adds	r3, r7, r0
 8015916:	2201      	movs	r2, #1
 8015918:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801591a:	4b88      	ldr	r3, [pc, #544]	@ (8015b3c <HAL_RCC_OscConfig+0x694>)
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	2380      	movs	r3, #128	@ 0x80
 8015920:	005b      	lsls	r3, r3, #1
 8015922:	4013      	ands	r3, r2
 8015924:	d11a      	bne.n	801595c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015926:	4b85      	ldr	r3, [pc, #532]	@ (8015b3c <HAL_RCC_OscConfig+0x694>)
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	4b84      	ldr	r3, [pc, #528]	@ (8015b3c <HAL_RCC_OscConfig+0x694>)
 801592c:	2180      	movs	r1, #128	@ 0x80
 801592e:	0049      	lsls	r1, r1, #1
 8015930:	430a      	orrs	r2, r1
 8015932:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015934:	f7f9 fc88 	bl	800f248 <HAL_GetTick>
 8015938:	0003      	movs	r3, r0
 801593a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801593c:	e008      	b.n	8015950 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801593e:	f7f9 fc83 	bl	800f248 <HAL_GetTick>
 8015942:	0002      	movs	r2, r0
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	1ad3      	subs	r3, r2, r3
 8015948:	2b64      	cmp	r3, #100	@ 0x64
 801594a:	d901      	bls.n	8015950 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801594c:	2303      	movs	r3, #3
 801594e:	e174      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015950:	4b7a      	ldr	r3, [pc, #488]	@ (8015b3c <HAL_RCC_OscConfig+0x694>)
 8015952:	681a      	ldr	r2, [r3, #0]
 8015954:	2380      	movs	r3, #128	@ 0x80
 8015956:	005b      	lsls	r3, r3, #1
 8015958:	4013      	ands	r3, r2
 801595a:	d0f0      	beq.n	801593e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	689a      	ldr	r2, [r3, #8]
 8015960:	2380      	movs	r3, #128	@ 0x80
 8015962:	005b      	lsls	r3, r3, #1
 8015964:	429a      	cmp	r2, r3
 8015966:	d107      	bne.n	8015978 <HAL_RCC_OscConfig+0x4d0>
 8015968:	4b71      	ldr	r3, [pc, #452]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 801596a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801596c:	4b70      	ldr	r3, [pc, #448]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 801596e:	2180      	movs	r1, #128	@ 0x80
 8015970:	0049      	lsls	r1, r1, #1
 8015972:	430a      	orrs	r2, r1
 8015974:	651a      	str	r2, [r3, #80]	@ 0x50
 8015976:	e031      	b.n	80159dc <HAL_RCC_OscConfig+0x534>
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	689b      	ldr	r3, [r3, #8]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d10c      	bne.n	801599a <HAL_RCC_OscConfig+0x4f2>
 8015980:	4b6b      	ldr	r3, [pc, #428]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015982:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015984:	4b6a      	ldr	r3, [pc, #424]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015986:	496c      	ldr	r1, [pc, #432]	@ (8015b38 <HAL_RCC_OscConfig+0x690>)
 8015988:	400a      	ands	r2, r1
 801598a:	651a      	str	r2, [r3, #80]	@ 0x50
 801598c:	4b68      	ldr	r3, [pc, #416]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 801598e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015990:	4b67      	ldr	r3, [pc, #412]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015992:	496b      	ldr	r1, [pc, #428]	@ (8015b40 <HAL_RCC_OscConfig+0x698>)
 8015994:	400a      	ands	r2, r1
 8015996:	651a      	str	r2, [r3, #80]	@ 0x50
 8015998:	e020      	b.n	80159dc <HAL_RCC_OscConfig+0x534>
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	689a      	ldr	r2, [r3, #8]
 801599e:	23a0      	movs	r3, #160	@ 0xa0
 80159a0:	00db      	lsls	r3, r3, #3
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d10e      	bne.n	80159c4 <HAL_RCC_OscConfig+0x51c>
 80159a6:	4b62      	ldr	r3, [pc, #392]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80159a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80159aa:	4b61      	ldr	r3, [pc, #388]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80159ac:	2180      	movs	r1, #128	@ 0x80
 80159ae:	00c9      	lsls	r1, r1, #3
 80159b0:	430a      	orrs	r2, r1
 80159b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80159b4:	4b5e      	ldr	r3, [pc, #376]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80159b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80159b8:	4b5d      	ldr	r3, [pc, #372]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80159ba:	2180      	movs	r1, #128	@ 0x80
 80159bc:	0049      	lsls	r1, r1, #1
 80159be:	430a      	orrs	r2, r1
 80159c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80159c2:	e00b      	b.n	80159dc <HAL_RCC_OscConfig+0x534>
 80159c4:	4b5a      	ldr	r3, [pc, #360]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80159c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80159c8:	4b59      	ldr	r3, [pc, #356]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80159ca:	495b      	ldr	r1, [pc, #364]	@ (8015b38 <HAL_RCC_OscConfig+0x690>)
 80159cc:	400a      	ands	r2, r1
 80159ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80159d0:	4b57      	ldr	r3, [pc, #348]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80159d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80159d4:	4b56      	ldr	r3, [pc, #344]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 80159d6:	495a      	ldr	r1, [pc, #360]	@ (8015b40 <HAL_RCC_OscConfig+0x698>)
 80159d8:	400a      	ands	r2, r1
 80159da:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	689b      	ldr	r3, [r3, #8]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d015      	beq.n	8015a10 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80159e4:	f7f9 fc30 	bl	800f248 <HAL_GetTick>
 80159e8:	0003      	movs	r3, r0
 80159ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80159ec:	e009      	b.n	8015a02 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80159ee:	f7f9 fc2b 	bl	800f248 <HAL_GetTick>
 80159f2:	0002      	movs	r2, r0
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	1ad3      	subs	r3, r2, r3
 80159f8:	4a52      	ldr	r2, [pc, #328]	@ (8015b44 <HAL_RCC_OscConfig+0x69c>)
 80159fa:	4293      	cmp	r3, r2
 80159fc:	d901      	bls.n	8015a02 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80159fe:	2303      	movs	r3, #3
 8015a00:	e11b      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015a02:	4b4b      	ldr	r3, [pc, #300]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015a04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015a06:	2380      	movs	r3, #128	@ 0x80
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	4013      	ands	r3, r2
 8015a0c:	d0ef      	beq.n	80159ee <HAL_RCC_OscConfig+0x546>
 8015a0e:	e014      	b.n	8015a3a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015a10:	f7f9 fc1a 	bl	800f248 <HAL_GetTick>
 8015a14:	0003      	movs	r3, r0
 8015a16:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015a18:	e009      	b.n	8015a2e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015a1a:	f7f9 fc15 	bl	800f248 <HAL_GetTick>
 8015a1e:	0002      	movs	r2, r0
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	1ad3      	subs	r3, r2, r3
 8015a24:	4a47      	ldr	r2, [pc, #284]	@ (8015b44 <HAL_RCC_OscConfig+0x69c>)
 8015a26:	4293      	cmp	r3, r2
 8015a28:	d901      	bls.n	8015a2e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8015a2a:	2303      	movs	r3, #3
 8015a2c:	e105      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015a2e:	4b40      	ldr	r3, [pc, #256]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015a30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015a32:	2380      	movs	r3, #128	@ 0x80
 8015a34:	009b      	lsls	r3, r3, #2
 8015a36:	4013      	ands	r3, r2
 8015a38:	d1ef      	bne.n	8015a1a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015a3a:	2323      	movs	r3, #35	@ 0x23
 8015a3c:	18fb      	adds	r3, r7, r3
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	2b01      	cmp	r3, #1
 8015a42:	d105      	bne.n	8015a50 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015a44:	4b3a      	ldr	r3, [pc, #232]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015a48:	4b39      	ldr	r3, [pc, #228]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015a4a:	493f      	ldr	r1, [pc, #252]	@ (8015b48 <HAL_RCC_OscConfig+0x6a0>)
 8015a4c:	400a      	ands	r2, r1
 8015a4e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2220      	movs	r2, #32
 8015a56:	4013      	ands	r3, r2
 8015a58:	d049      	beq.n	8015aee <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	699b      	ldr	r3, [r3, #24]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d026      	beq.n	8015ab0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8015a62:	4b33      	ldr	r3, [pc, #204]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015a64:	689a      	ldr	r2, [r3, #8]
 8015a66:	4b32      	ldr	r3, [pc, #200]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015a68:	2101      	movs	r1, #1
 8015a6a:	430a      	orrs	r2, r1
 8015a6c:	609a      	str	r2, [r3, #8]
 8015a6e:	4b30      	ldr	r3, [pc, #192]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015a72:	4b2f      	ldr	r3, [pc, #188]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015a74:	2101      	movs	r1, #1
 8015a76:	430a      	orrs	r2, r1
 8015a78:	635a      	str	r2, [r3, #52]	@ 0x34
 8015a7a:	4b34      	ldr	r3, [pc, #208]	@ (8015b4c <HAL_RCC_OscConfig+0x6a4>)
 8015a7c:	6a1a      	ldr	r2, [r3, #32]
 8015a7e:	4b33      	ldr	r3, [pc, #204]	@ (8015b4c <HAL_RCC_OscConfig+0x6a4>)
 8015a80:	2180      	movs	r1, #128	@ 0x80
 8015a82:	0189      	lsls	r1, r1, #6
 8015a84:	430a      	orrs	r2, r1
 8015a86:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015a88:	f7f9 fbde 	bl	800f248 <HAL_GetTick>
 8015a8c:	0003      	movs	r3, r0
 8015a8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015a90:	e008      	b.n	8015aa4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015a92:	f7f9 fbd9 	bl	800f248 <HAL_GetTick>
 8015a96:	0002      	movs	r2, r0
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	1ad3      	subs	r3, r2, r3
 8015a9c:	2b02      	cmp	r3, #2
 8015a9e:	d901      	bls.n	8015aa4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8015aa0:	2303      	movs	r3, #3
 8015aa2:	e0ca      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015aa4:	4b22      	ldr	r3, [pc, #136]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015aa6:	689b      	ldr	r3, [r3, #8]
 8015aa8:	2202      	movs	r2, #2
 8015aaa:	4013      	ands	r3, r2
 8015aac:	d0f1      	beq.n	8015a92 <HAL_RCC_OscConfig+0x5ea>
 8015aae:	e01e      	b.n	8015aee <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8015ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015ab2:	689a      	ldr	r2, [r3, #8]
 8015ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015ab6:	2101      	movs	r1, #1
 8015ab8:	438a      	bics	r2, r1
 8015aba:	609a      	str	r2, [r3, #8]
 8015abc:	4b23      	ldr	r3, [pc, #140]	@ (8015b4c <HAL_RCC_OscConfig+0x6a4>)
 8015abe:	6a1a      	ldr	r2, [r3, #32]
 8015ac0:	4b22      	ldr	r3, [pc, #136]	@ (8015b4c <HAL_RCC_OscConfig+0x6a4>)
 8015ac2:	4923      	ldr	r1, [pc, #140]	@ (8015b50 <HAL_RCC_OscConfig+0x6a8>)
 8015ac4:	400a      	ands	r2, r1
 8015ac6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015ac8:	f7f9 fbbe 	bl	800f248 <HAL_GetTick>
 8015acc:	0003      	movs	r3, r0
 8015ace:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015ad0:	e008      	b.n	8015ae4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015ad2:	f7f9 fbb9 	bl	800f248 <HAL_GetTick>
 8015ad6:	0002      	movs	r2, r0
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	1ad3      	subs	r3, r2, r3
 8015adc:	2b02      	cmp	r3, #2
 8015ade:	d901      	bls.n	8015ae4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015ae0:	2303      	movs	r3, #3
 8015ae2:	e0aa      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015ae4:	4b12      	ldr	r3, [pc, #72]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015ae6:	689b      	ldr	r3, [r3, #8]
 8015ae8:	2202      	movs	r2, #2
 8015aea:	4013      	ands	r3, r2
 8015aec:	d1f1      	bne.n	8015ad2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d100      	bne.n	8015af8 <HAL_RCC_OscConfig+0x650>
 8015af6:	e09f      	b.n	8015c38 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015af8:	69fb      	ldr	r3, [r7, #28]
 8015afa:	2b0c      	cmp	r3, #12
 8015afc:	d100      	bne.n	8015b00 <HAL_RCC_OscConfig+0x658>
 8015afe:	e078      	b.n	8015bf2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b04:	2b02      	cmp	r3, #2
 8015b06:	d159      	bne.n	8015bbc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015b08:	4b09      	ldr	r3, [pc, #36]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	4b08      	ldr	r3, [pc, #32]	@ (8015b30 <HAL_RCC_OscConfig+0x688>)
 8015b0e:	4911      	ldr	r1, [pc, #68]	@ (8015b54 <HAL_RCC_OscConfig+0x6ac>)
 8015b10:	400a      	ands	r2, r1
 8015b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015b14:	f7f9 fb98 	bl	800f248 <HAL_GetTick>
 8015b18:	0003      	movs	r3, r0
 8015b1a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015b1c:	e01c      	b.n	8015b58 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015b1e:	f7f9 fb93 	bl	800f248 <HAL_GetTick>
 8015b22:	0002      	movs	r2, r0
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	1ad3      	subs	r3, r2, r3
 8015b28:	2b02      	cmp	r3, #2
 8015b2a:	d915      	bls.n	8015b58 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015b2c:	2303      	movs	r3, #3
 8015b2e:	e084      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
 8015b30:	40021000 	.word	0x40021000
 8015b34:	ffff1fff 	.word	0xffff1fff
 8015b38:	fffffeff 	.word	0xfffffeff
 8015b3c:	40007000 	.word	0x40007000
 8015b40:	fffffbff 	.word	0xfffffbff
 8015b44:	00001388 	.word	0x00001388
 8015b48:	efffffff 	.word	0xefffffff
 8015b4c:	40010000 	.word	0x40010000
 8015b50:	ffffdfff 	.word	0xffffdfff
 8015b54:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015b58:	4b3a      	ldr	r3, [pc, #232]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	2380      	movs	r3, #128	@ 0x80
 8015b5e:	049b      	lsls	r3, r3, #18
 8015b60:	4013      	ands	r3, r2
 8015b62:	d1dc      	bne.n	8015b1e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015b64:	4b37      	ldr	r3, [pc, #220]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	4a37      	ldr	r2, [pc, #220]	@ (8015c48 <HAL_RCC_OscConfig+0x7a0>)
 8015b6a:	4013      	ands	r3, r2
 8015b6c:	0019      	movs	r1, r3
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b76:	431a      	orrs	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b7c:	431a      	orrs	r2, r3
 8015b7e:	4b31      	ldr	r3, [pc, #196]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015b80:	430a      	orrs	r2, r1
 8015b82:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015b84:	4b2f      	ldr	r3, [pc, #188]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015b86:	681a      	ldr	r2, [r3, #0]
 8015b88:	4b2e      	ldr	r3, [pc, #184]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015b8a:	2180      	movs	r1, #128	@ 0x80
 8015b8c:	0449      	lsls	r1, r1, #17
 8015b8e:	430a      	orrs	r2, r1
 8015b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015b92:	f7f9 fb59 	bl	800f248 <HAL_GetTick>
 8015b96:	0003      	movs	r3, r0
 8015b98:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015b9a:	e008      	b.n	8015bae <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015b9c:	f7f9 fb54 	bl	800f248 <HAL_GetTick>
 8015ba0:	0002      	movs	r2, r0
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	1ad3      	subs	r3, r2, r3
 8015ba6:	2b02      	cmp	r3, #2
 8015ba8:	d901      	bls.n	8015bae <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8015baa:	2303      	movs	r3, #3
 8015bac:	e045      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015bae:	4b25      	ldr	r3, [pc, #148]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	2380      	movs	r3, #128	@ 0x80
 8015bb4:	049b      	lsls	r3, r3, #18
 8015bb6:	4013      	ands	r3, r2
 8015bb8:	d0f0      	beq.n	8015b9c <HAL_RCC_OscConfig+0x6f4>
 8015bba:	e03d      	b.n	8015c38 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015bbc:	4b21      	ldr	r3, [pc, #132]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015bbe:	681a      	ldr	r2, [r3, #0]
 8015bc0:	4b20      	ldr	r3, [pc, #128]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015bc2:	4922      	ldr	r1, [pc, #136]	@ (8015c4c <HAL_RCC_OscConfig+0x7a4>)
 8015bc4:	400a      	ands	r2, r1
 8015bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015bc8:	f7f9 fb3e 	bl	800f248 <HAL_GetTick>
 8015bcc:	0003      	movs	r3, r0
 8015bce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015bd0:	e008      	b.n	8015be4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015bd2:	f7f9 fb39 	bl	800f248 <HAL_GetTick>
 8015bd6:	0002      	movs	r2, r0
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	1ad3      	subs	r3, r2, r3
 8015bdc:	2b02      	cmp	r3, #2
 8015bde:	d901      	bls.n	8015be4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015be0:	2303      	movs	r3, #3
 8015be2:	e02a      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015be4:	4b17      	ldr	r3, [pc, #92]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	2380      	movs	r3, #128	@ 0x80
 8015bea:	049b      	lsls	r3, r3, #18
 8015bec:	4013      	ands	r3, r2
 8015bee:	d1f0      	bne.n	8015bd2 <HAL_RCC_OscConfig+0x72a>
 8015bf0:	e022      	b.n	8015c38 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bf6:	2b01      	cmp	r3, #1
 8015bf8:	d101      	bne.n	8015bfe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015bfa:	2301      	movs	r3, #1
 8015bfc:	e01d      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015bfe:	4b11      	ldr	r3, [pc, #68]	@ (8015c44 <HAL_RCC_OscConfig+0x79c>)
 8015c00:	68db      	ldr	r3, [r3, #12]
 8015c02:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015c04:	69ba      	ldr	r2, [r7, #24]
 8015c06:	2380      	movs	r3, #128	@ 0x80
 8015c08:	025b      	lsls	r3, r3, #9
 8015c0a:	401a      	ands	r2, r3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d10f      	bne.n	8015c34 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015c14:	69ba      	ldr	r2, [r7, #24]
 8015c16:	23f0      	movs	r3, #240	@ 0xf0
 8015c18:	039b      	lsls	r3, r3, #14
 8015c1a:	401a      	ands	r2, r3
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d107      	bne.n	8015c34 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8015c24:	69ba      	ldr	r2, [r7, #24]
 8015c26:	23c0      	movs	r3, #192	@ 0xc0
 8015c28:	041b      	lsls	r3, r3, #16
 8015c2a:	401a      	ands	r2, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d001      	beq.n	8015c38 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8015c34:	2301      	movs	r3, #1
 8015c36:	e000      	b.n	8015c3a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015c38:	2300      	movs	r3, #0
}
 8015c3a:	0018      	movs	r0, r3
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	b00a      	add	sp, #40	@ 0x28
 8015c40:	bdb0      	pop	{r4, r5, r7, pc}
 8015c42:	46c0      	nop			@ (mov r8, r8)
 8015c44:	40021000 	.word	0x40021000
 8015c48:	ff02ffff 	.word	0xff02ffff
 8015c4c:	feffffff 	.word	0xfeffffff

08015c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015c50:	b5b0      	push	{r4, r5, r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d101      	bne.n	8015c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015c60:	2301      	movs	r3, #1
 8015c62:	e128      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015c64:	4b96      	ldr	r3, [pc, #600]	@ (8015ec0 <HAL_RCC_ClockConfig+0x270>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	2201      	movs	r2, #1
 8015c6a:	4013      	ands	r3, r2
 8015c6c:	683a      	ldr	r2, [r7, #0]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d91e      	bls.n	8015cb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015c72:	4b93      	ldr	r3, [pc, #588]	@ (8015ec0 <HAL_RCC_ClockConfig+0x270>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	2201      	movs	r2, #1
 8015c78:	4393      	bics	r3, r2
 8015c7a:	0019      	movs	r1, r3
 8015c7c:	4b90      	ldr	r3, [pc, #576]	@ (8015ec0 <HAL_RCC_ClockConfig+0x270>)
 8015c7e:	683a      	ldr	r2, [r7, #0]
 8015c80:	430a      	orrs	r2, r1
 8015c82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015c84:	f7f9 fae0 	bl	800f248 <HAL_GetTick>
 8015c88:	0003      	movs	r3, r0
 8015c8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015c8c:	e009      	b.n	8015ca2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015c8e:	f7f9 fadb 	bl	800f248 <HAL_GetTick>
 8015c92:	0002      	movs	r2, r0
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	1ad3      	subs	r3, r2, r3
 8015c98:	4a8a      	ldr	r2, [pc, #552]	@ (8015ec4 <HAL_RCC_ClockConfig+0x274>)
 8015c9a:	4293      	cmp	r3, r2
 8015c9c:	d901      	bls.n	8015ca2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8015c9e:	2303      	movs	r3, #3
 8015ca0:	e109      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015ca2:	4b87      	ldr	r3, [pc, #540]	@ (8015ec0 <HAL_RCC_ClockConfig+0x270>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	4013      	ands	r3, r2
 8015caa:	683a      	ldr	r2, [r7, #0]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d1ee      	bne.n	8015c8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	2202      	movs	r2, #2
 8015cb6:	4013      	ands	r3, r2
 8015cb8:	d009      	beq.n	8015cce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015cba:	4b83      	ldr	r3, [pc, #524]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015cbc:	68db      	ldr	r3, [r3, #12]
 8015cbe:	22f0      	movs	r2, #240	@ 0xf0
 8015cc0:	4393      	bics	r3, r2
 8015cc2:	0019      	movs	r1, r3
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	689a      	ldr	r2, [r3, #8]
 8015cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015cca:	430a      	orrs	r2, r1
 8015ccc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	4013      	ands	r3, r2
 8015cd6:	d100      	bne.n	8015cda <HAL_RCC_ClockConfig+0x8a>
 8015cd8:	e089      	b.n	8015dee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	2b02      	cmp	r3, #2
 8015ce0:	d107      	bne.n	8015cf2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015ce2:	4b79      	ldr	r3, [pc, #484]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015ce4:	681a      	ldr	r2, [r3, #0]
 8015ce6:	2380      	movs	r3, #128	@ 0x80
 8015ce8:	029b      	lsls	r3, r3, #10
 8015cea:	4013      	ands	r3, r2
 8015cec:	d120      	bne.n	8015d30 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	e0e1      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	2b03      	cmp	r3, #3
 8015cf8:	d107      	bne.n	8015d0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015cfa:	4b73      	ldr	r3, [pc, #460]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015cfc:	681a      	ldr	r2, [r3, #0]
 8015cfe:	2380      	movs	r3, #128	@ 0x80
 8015d00:	049b      	lsls	r3, r3, #18
 8015d02:	4013      	ands	r3, r2
 8015d04:	d114      	bne.n	8015d30 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015d06:	2301      	movs	r3, #1
 8015d08:	e0d5      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	2b01      	cmp	r3, #1
 8015d10:	d106      	bne.n	8015d20 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015d12:	4b6d      	ldr	r3, [pc, #436]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2204      	movs	r2, #4
 8015d18:	4013      	ands	r3, r2
 8015d1a:	d109      	bne.n	8015d30 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	e0ca      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015d20:	4b69      	ldr	r3, [pc, #420]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015d22:	681a      	ldr	r2, [r3, #0]
 8015d24:	2380      	movs	r3, #128	@ 0x80
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	4013      	ands	r3, r2
 8015d2a:	d101      	bne.n	8015d30 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e0c2      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015d30:	4b65      	ldr	r3, [pc, #404]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015d32:	68db      	ldr	r3, [r3, #12]
 8015d34:	2203      	movs	r2, #3
 8015d36:	4393      	bics	r3, r2
 8015d38:	0019      	movs	r1, r3
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	685a      	ldr	r2, [r3, #4]
 8015d3e:	4b62      	ldr	r3, [pc, #392]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015d40:	430a      	orrs	r2, r1
 8015d42:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015d44:	f7f9 fa80 	bl	800f248 <HAL_GetTick>
 8015d48:	0003      	movs	r3, r0
 8015d4a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	685b      	ldr	r3, [r3, #4]
 8015d50:	2b02      	cmp	r3, #2
 8015d52:	d111      	bne.n	8015d78 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015d54:	e009      	b.n	8015d6a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015d56:	f7f9 fa77 	bl	800f248 <HAL_GetTick>
 8015d5a:	0002      	movs	r2, r0
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	1ad3      	subs	r3, r2, r3
 8015d60:	4a58      	ldr	r2, [pc, #352]	@ (8015ec4 <HAL_RCC_ClockConfig+0x274>)
 8015d62:	4293      	cmp	r3, r2
 8015d64:	d901      	bls.n	8015d6a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8015d66:	2303      	movs	r3, #3
 8015d68:	e0a5      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015d6a:	4b57      	ldr	r3, [pc, #348]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015d6c:	68db      	ldr	r3, [r3, #12]
 8015d6e:	220c      	movs	r2, #12
 8015d70:	4013      	ands	r3, r2
 8015d72:	2b08      	cmp	r3, #8
 8015d74:	d1ef      	bne.n	8015d56 <HAL_RCC_ClockConfig+0x106>
 8015d76:	e03a      	b.n	8015dee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	2b03      	cmp	r3, #3
 8015d7e:	d111      	bne.n	8015da4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015d80:	e009      	b.n	8015d96 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015d82:	f7f9 fa61 	bl	800f248 <HAL_GetTick>
 8015d86:	0002      	movs	r2, r0
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	1ad3      	subs	r3, r2, r3
 8015d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8015ec4 <HAL_RCC_ClockConfig+0x274>)
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d901      	bls.n	8015d96 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8015d92:	2303      	movs	r3, #3
 8015d94:	e08f      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015d96:	4b4c      	ldr	r3, [pc, #304]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015d98:	68db      	ldr	r3, [r3, #12]
 8015d9a:	220c      	movs	r2, #12
 8015d9c:	4013      	ands	r3, r2
 8015d9e:	2b0c      	cmp	r3, #12
 8015da0:	d1ef      	bne.n	8015d82 <HAL_RCC_ClockConfig+0x132>
 8015da2:	e024      	b.n	8015dee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	2b01      	cmp	r3, #1
 8015daa:	d11b      	bne.n	8015de4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015dac:	e009      	b.n	8015dc2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015dae:	f7f9 fa4b 	bl	800f248 <HAL_GetTick>
 8015db2:	0002      	movs	r2, r0
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	1ad3      	subs	r3, r2, r3
 8015db8:	4a42      	ldr	r2, [pc, #264]	@ (8015ec4 <HAL_RCC_ClockConfig+0x274>)
 8015dba:	4293      	cmp	r3, r2
 8015dbc:	d901      	bls.n	8015dc2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015dbe:	2303      	movs	r3, #3
 8015dc0:	e079      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015dc2:	4b41      	ldr	r3, [pc, #260]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015dc4:	68db      	ldr	r3, [r3, #12]
 8015dc6:	220c      	movs	r2, #12
 8015dc8:	4013      	ands	r3, r2
 8015dca:	2b04      	cmp	r3, #4
 8015dcc:	d1ef      	bne.n	8015dae <HAL_RCC_ClockConfig+0x15e>
 8015dce:	e00e      	b.n	8015dee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015dd0:	f7f9 fa3a 	bl	800f248 <HAL_GetTick>
 8015dd4:	0002      	movs	r2, r0
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	4a3a      	ldr	r2, [pc, #232]	@ (8015ec4 <HAL_RCC_ClockConfig+0x274>)
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	d901      	bls.n	8015de4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015de0:	2303      	movs	r3, #3
 8015de2:	e068      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015de4:	4b38      	ldr	r3, [pc, #224]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015de6:	68db      	ldr	r3, [r3, #12]
 8015de8:	220c      	movs	r2, #12
 8015dea:	4013      	ands	r3, r2
 8015dec:	d1f0      	bne.n	8015dd0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015dee:	4b34      	ldr	r3, [pc, #208]	@ (8015ec0 <HAL_RCC_ClockConfig+0x270>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	2201      	movs	r2, #1
 8015df4:	4013      	ands	r3, r2
 8015df6:	683a      	ldr	r2, [r7, #0]
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d21e      	bcs.n	8015e3a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015dfc:	4b30      	ldr	r3, [pc, #192]	@ (8015ec0 <HAL_RCC_ClockConfig+0x270>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	2201      	movs	r2, #1
 8015e02:	4393      	bics	r3, r2
 8015e04:	0019      	movs	r1, r3
 8015e06:	4b2e      	ldr	r3, [pc, #184]	@ (8015ec0 <HAL_RCC_ClockConfig+0x270>)
 8015e08:	683a      	ldr	r2, [r7, #0]
 8015e0a:	430a      	orrs	r2, r1
 8015e0c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015e0e:	f7f9 fa1b 	bl	800f248 <HAL_GetTick>
 8015e12:	0003      	movs	r3, r0
 8015e14:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015e16:	e009      	b.n	8015e2c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015e18:	f7f9 fa16 	bl	800f248 <HAL_GetTick>
 8015e1c:	0002      	movs	r2, r0
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	1ad3      	subs	r3, r2, r3
 8015e22:	4a28      	ldr	r2, [pc, #160]	@ (8015ec4 <HAL_RCC_ClockConfig+0x274>)
 8015e24:	4293      	cmp	r3, r2
 8015e26:	d901      	bls.n	8015e2c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015e28:	2303      	movs	r3, #3
 8015e2a:	e044      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015e2c:	4b24      	ldr	r3, [pc, #144]	@ (8015ec0 <HAL_RCC_ClockConfig+0x270>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	2201      	movs	r2, #1
 8015e32:	4013      	ands	r3, r2
 8015e34:	683a      	ldr	r2, [r7, #0]
 8015e36:	429a      	cmp	r2, r3
 8015e38:	d1ee      	bne.n	8015e18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	2204      	movs	r2, #4
 8015e40:	4013      	ands	r3, r2
 8015e42:	d009      	beq.n	8015e58 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015e44:	4b20      	ldr	r3, [pc, #128]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	4a20      	ldr	r2, [pc, #128]	@ (8015ecc <HAL_RCC_ClockConfig+0x27c>)
 8015e4a:	4013      	ands	r3, r2
 8015e4c:	0019      	movs	r1, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	68da      	ldr	r2, [r3, #12]
 8015e52:	4b1d      	ldr	r3, [pc, #116]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015e54:	430a      	orrs	r2, r1
 8015e56:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2208      	movs	r2, #8
 8015e5e:	4013      	ands	r3, r2
 8015e60:	d00a      	beq.n	8015e78 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8015e62:	4b19      	ldr	r3, [pc, #100]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015e64:	68db      	ldr	r3, [r3, #12]
 8015e66:	4a1a      	ldr	r2, [pc, #104]	@ (8015ed0 <HAL_RCC_ClockConfig+0x280>)
 8015e68:	4013      	ands	r3, r2
 8015e6a:	0019      	movs	r1, r3
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	691b      	ldr	r3, [r3, #16]
 8015e70:	00da      	lsls	r2, r3, #3
 8015e72:	4b15      	ldr	r3, [pc, #84]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015e74:	430a      	orrs	r2, r1
 8015e76:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015e78:	f000 f832 	bl	8015ee0 <HAL_RCC_GetSysClockFreq>
 8015e7c:	0001      	movs	r1, r0
 8015e7e:	4b12      	ldr	r3, [pc, #72]	@ (8015ec8 <HAL_RCC_ClockConfig+0x278>)
 8015e80:	68db      	ldr	r3, [r3, #12]
 8015e82:	091b      	lsrs	r3, r3, #4
 8015e84:	220f      	movs	r2, #15
 8015e86:	4013      	ands	r3, r2
 8015e88:	4a12      	ldr	r2, [pc, #72]	@ (8015ed4 <HAL_RCC_ClockConfig+0x284>)
 8015e8a:	5cd3      	ldrb	r3, [r2, r3]
 8015e8c:	000a      	movs	r2, r1
 8015e8e:	40da      	lsrs	r2, r3
 8015e90:	4b11      	ldr	r3, [pc, #68]	@ (8015ed8 <HAL_RCC_ClockConfig+0x288>)
 8015e92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015e94:	4b11      	ldr	r3, [pc, #68]	@ (8015edc <HAL_RCC_ClockConfig+0x28c>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	250b      	movs	r5, #11
 8015e9a:	197c      	adds	r4, r7, r5
 8015e9c:	0018      	movs	r0, r3
 8015e9e:	f7f9 f98d 	bl	800f1bc <HAL_InitTick>
 8015ea2:	0003      	movs	r3, r0
 8015ea4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8015ea6:	197b      	adds	r3, r7, r5
 8015ea8:	781b      	ldrb	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d002      	beq.n	8015eb4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8015eae:	197b      	adds	r3, r7, r5
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	e000      	b.n	8015eb6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8015eb4:	2300      	movs	r3, #0
}
 8015eb6:	0018      	movs	r0, r3
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	b004      	add	sp, #16
 8015ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8015ebe:	46c0      	nop			@ (mov r8, r8)
 8015ec0:	40022000 	.word	0x40022000
 8015ec4:	00001388 	.word	0x00001388
 8015ec8:	40021000 	.word	0x40021000
 8015ecc:	fffff8ff 	.word	0xfffff8ff
 8015ed0:	ffffc7ff 	.word	0xffffc7ff
 8015ed4:	08025e2c 	.word	0x08025e2c
 8015ed8:	200000d0 	.word	0x200000d0
 8015edc:	200000e0 	.word	0x200000e0

08015ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015ee0:	b5b0      	push	{r4, r5, r7, lr}
 8015ee2:	b08e      	sub	sp, #56	@ 0x38
 8015ee4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8015ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8016018 <HAL_RCC_GetSysClockFreq+0x138>)
 8015ee8:	68db      	ldr	r3, [r3, #12]
 8015eea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015eee:	230c      	movs	r3, #12
 8015ef0:	4013      	ands	r3, r2
 8015ef2:	2b0c      	cmp	r3, #12
 8015ef4:	d014      	beq.n	8015f20 <HAL_RCC_GetSysClockFreq+0x40>
 8015ef6:	d900      	bls.n	8015efa <HAL_RCC_GetSysClockFreq+0x1a>
 8015ef8:	e07b      	b.n	8015ff2 <HAL_RCC_GetSysClockFreq+0x112>
 8015efa:	2b04      	cmp	r3, #4
 8015efc:	d002      	beq.n	8015f04 <HAL_RCC_GetSysClockFreq+0x24>
 8015efe:	2b08      	cmp	r3, #8
 8015f00:	d00b      	beq.n	8015f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8015f02:	e076      	b.n	8015ff2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015f04:	4b44      	ldr	r3, [pc, #272]	@ (8016018 <HAL_RCC_GetSysClockFreq+0x138>)
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	2210      	movs	r2, #16
 8015f0a:	4013      	ands	r3, r2
 8015f0c:	d002      	beq.n	8015f14 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015f0e:	4b43      	ldr	r3, [pc, #268]	@ (801601c <HAL_RCC_GetSysClockFreq+0x13c>)
 8015f10:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015f12:	e07c      	b.n	801600e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015f14:	4b42      	ldr	r3, [pc, #264]	@ (8016020 <HAL_RCC_GetSysClockFreq+0x140>)
 8015f16:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015f18:	e079      	b.n	801600e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015f1a:	4b42      	ldr	r3, [pc, #264]	@ (8016024 <HAL_RCC_GetSysClockFreq+0x144>)
 8015f1c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015f1e:	e076      	b.n	801600e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f22:	0c9a      	lsrs	r2, r3, #18
 8015f24:	230f      	movs	r3, #15
 8015f26:	401a      	ands	r2, r3
 8015f28:	4b3f      	ldr	r3, [pc, #252]	@ (8016028 <HAL_RCC_GetSysClockFreq+0x148>)
 8015f2a:	5c9b      	ldrb	r3, [r3, r2]
 8015f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f30:	0d9a      	lsrs	r2, r3, #22
 8015f32:	2303      	movs	r3, #3
 8015f34:	4013      	ands	r3, r2
 8015f36:	3301      	adds	r3, #1
 8015f38:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015f3a:	4b37      	ldr	r3, [pc, #220]	@ (8016018 <HAL_RCC_GetSysClockFreq+0x138>)
 8015f3c:	68da      	ldr	r2, [r3, #12]
 8015f3e:	2380      	movs	r3, #128	@ 0x80
 8015f40:	025b      	lsls	r3, r3, #9
 8015f42:	4013      	ands	r3, r2
 8015f44:	d01a      	beq.n	8015f7c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f48:	61bb      	str	r3, [r7, #24]
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	61fb      	str	r3, [r7, #28]
 8015f4e:	4a35      	ldr	r2, [pc, #212]	@ (8016024 <HAL_RCC_GetSysClockFreq+0x144>)
 8015f50:	2300      	movs	r3, #0
 8015f52:	69b8      	ldr	r0, [r7, #24]
 8015f54:	69f9      	ldr	r1, [r7, #28]
 8015f56:	f7ea fb33 	bl	80005c0 <__aeabi_lmul>
 8015f5a:	0002      	movs	r2, r0
 8015f5c:	000b      	movs	r3, r1
 8015f5e:	0010      	movs	r0, r2
 8015f60:	0019      	movs	r1, r3
 8015f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f64:	613b      	str	r3, [r7, #16]
 8015f66:	2300      	movs	r3, #0
 8015f68:	617b      	str	r3, [r7, #20]
 8015f6a:	693a      	ldr	r2, [r7, #16]
 8015f6c:	697b      	ldr	r3, [r7, #20]
 8015f6e:	f7ea fb07 	bl	8000580 <__aeabi_uldivmod>
 8015f72:	0002      	movs	r2, r0
 8015f74:	000b      	movs	r3, r1
 8015f76:	0013      	movs	r3, r2
 8015f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8015f7a:	e037      	b.n	8015fec <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015f7c:	4b26      	ldr	r3, [pc, #152]	@ (8016018 <HAL_RCC_GetSysClockFreq+0x138>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2210      	movs	r2, #16
 8015f82:	4013      	ands	r3, r2
 8015f84:	d01a      	beq.n	8015fbc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f88:	60bb      	str	r3, [r7, #8]
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	60fb      	str	r3, [r7, #12]
 8015f8e:	4a23      	ldr	r2, [pc, #140]	@ (801601c <HAL_RCC_GetSysClockFreq+0x13c>)
 8015f90:	2300      	movs	r3, #0
 8015f92:	68b8      	ldr	r0, [r7, #8]
 8015f94:	68f9      	ldr	r1, [r7, #12]
 8015f96:	f7ea fb13 	bl	80005c0 <__aeabi_lmul>
 8015f9a:	0002      	movs	r2, r0
 8015f9c:	000b      	movs	r3, r1
 8015f9e:	0010      	movs	r0, r2
 8015fa0:	0019      	movs	r1, r3
 8015fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fa4:	603b      	str	r3, [r7, #0]
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	607b      	str	r3, [r7, #4]
 8015faa:	683a      	ldr	r2, [r7, #0]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f7ea fae7 	bl	8000580 <__aeabi_uldivmod>
 8015fb2:	0002      	movs	r2, r0
 8015fb4:	000b      	movs	r3, r1
 8015fb6:	0013      	movs	r3, r2
 8015fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8015fba:	e017      	b.n	8015fec <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fbe:	0018      	movs	r0, r3
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	0019      	movs	r1, r3
 8015fc4:	4a16      	ldr	r2, [pc, #88]	@ (8016020 <HAL_RCC_GetSysClockFreq+0x140>)
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	f7ea fafa 	bl	80005c0 <__aeabi_lmul>
 8015fcc:	0002      	movs	r2, r0
 8015fce:	000b      	movs	r3, r1
 8015fd0:	0010      	movs	r0, r2
 8015fd2:	0019      	movs	r1, r3
 8015fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fd6:	001c      	movs	r4, r3
 8015fd8:	2300      	movs	r3, #0
 8015fda:	001d      	movs	r5, r3
 8015fdc:	0022      	movs	r2, r4
 8015fde:	002b      	movs	r3, r5
 8015fe0:	f7ea face 	bl	8000580 <__aeabi_uldivmod>
 8015fe4:	0002      	movs	r2, r0
 8015fe6:	000b      	movs	r3, r1
 8015fe8:	0013      	movs	r3, r2
 8015fea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015fee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015ff0:	e00d      	b.n	801600e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015ff2:	4b09      	ldr	r3, [pc, #36]	@ (8016018 <HAL_RCC_GetSysClockFreq+0x138>)
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	0b5b      	lsrs	r3, r3, #13
 8015ff8:	2207      	movs	r2, #7
 8015ffa:	4013      	ands	r3, r2
 8015ffc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015ffe:	6a3b      	ldr	r3, [r7, #32]
 8016000:	3301      	adds	r3, #1
 8016002:	2280      	movs	r2, #128	@ 0x80
 8016004:	0212      	lsls	r2, r2, #8
 8016006:	409a      	lsls	r2, r3
 8016008:	0013      	movs	r3, r2
 801600a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801600c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8016010:	0018      	movs	r0, r3
 8016012:	46bd      	mov	sp, r7
 8016014:	b00e      	add	sp, #56	@ 0x38
 8016016:	bdb0      	pop	{r4, r5, r7, pc}
 8016018:	40021000 	.word	0x40021000
 801601c:	003d0900 	.word	0x003d0900
 8016020:	00f42400 	.word	0x00f42400
 8016024:	007a1200 	.word	0x007a1200
 8016028:	08025e44 	.word	0x08025e44

0801602c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016030:	4b02      	ldr	r3, [pc, #8]	@ (801603c <HAL_RCC_GetHCLKFreq+0x10>)
 8016032:	681b      	ldr	r3, [r3, #0]
}
 8016034:	0018      	movs	r0, r3
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}
 801603a:	46c0      	nop			@ (mov r8, r8)
 801603c:	200000d0 	.word	0x200000d0

08016040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8016044:	f7ff fff2 	bl	801602c <HAL_RCC_GetHCLKFreq>
 8016048:	0001      	movs	r1, r0
 801604a:	4b06      	ldr	r3, [pc, #24]	@ (8016064 <HAL_RCC_GetPCLK1Freq+0x24>)
 801604c:	68db      	ldr	r3, [r3, #12]
 801604e:	0a1b      	lsrs	r3, r3, #8
 8016050:	2207      	movs	r2, #7
 8016052:	4013      	ands	r3, r2
 8016054:	4a04      	ldr	r2, [pc, #16]	@ (8016068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8016056:	5cd3      	ldrb	r3, [r2, r3]
 8016058:	40d9      	lsrs	r1, r3
 801605a:	000b      	movs	r3, r1
}
 801605c:	0018      	movs	r0, r3
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	46c0      	nop			@ (mov r8, r8)
 8016064:	40021000 	.word	0x40021000
 8016068:	08025e3c 	.word	0x08025e3c

0801606c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8016070:	f7ff ffdc 	bl	801602c <HAL_RCC_GetHCLKFreq>
 8016074:	0001      	movs	r1, r0
 8016076:	4b06      	ldr	r3, [pc, #24]	@ (8016090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016078:	68db      	ldr	r3, [r3, #12]
 801607a:	0adb      	lsrs	r3, r3, #11
 801607c:	2207      	movs	r2, #7
 801607e:	4013      	ands	r3, r2
 8016080:	4a04      	ldr	r2, [pc, #16]	@ (8016094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8016082:	5cd3      	ldrb	r3, [r2, r3]
 8016084:	40d9      	lsrs	r1, r3
 8016086:	000b      	movs	r3, r1
}
 8016088:	0018      	movs	r0, r3
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	46c0      	nop			@ (mov r8, r8)
 8016090:	40021000 	.word	0x40021000
 8016094:	08025e3c 	.word	0x08025e3c

08016098 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b086      	sub	sp, #24
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80160a0:	2017      	movs	r0, #23
 80160a2:	183b      	adds	r3, r7, r0
 80160a4:	2200      	movs	r2, #0
 80160a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	2220      	movs	r2, #32
 80160ae:	4013      	ands	r3, r2
 80160b0:	d100      	bne.n	80160b4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80160b2:	e0c7      	b.n	8016244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80160b4:	4b9b      	ldr	r3, [pc, #620]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80160b8:	2380      	movs	r3, #128	@ 0x80
 80160ba:	055b      	lsls	r3, r3, #21
 80160bc:	4013      	ands	r3, r2
 80160be:	d109      	bne.n	80160d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80160c0:	4b98      	ldr	r3, [pc, #608]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80160c4:	4b97      	ldr	r3, [pc, #604]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160c6:	2180      	movs	r1, #128	@ 0x80
 80160c8:	0549      	lsls	r1, r1, #21
 80160ca:	430a      	orrs	r2, r1
 80160cc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80160ce:	183b      	adds	r3, r7, r0
 80160d0:	2201      	movs	r2, #1
 80160d2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80160d4:	4b94      	ldr	r3, [pc, #592]	@ (8016328 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80160d6:	681a      	ldr	r2, [r3, #0]
 80160d8:	2380      	movs	r3, #128	@ 0x80
 80160da:	005b      	lsls	r3, r3, #1
 80160dc:	4013      	ands	r3, r2
 80160de:	d11a      	bne.n	8016116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80160e0:	4b91      	ldr	r3, [pc, #580]	@ (8016328 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80160e2:	681a      	ldr	r2, [r3, #0]
 80160e4:	4b90      	ldr	r3, [pc, #576]	@ (8016328 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80160e6:	2180      	movs	r1, #128	@ 0x80
 80160e8:	0049      	lsls	r1, r1, #1
 80160ea:	430a      	orrs	r2, r1
 80160ec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80160ee:	f7f9 f8ab 	bl	800f248 <HAL_GetTick>
 80160f2:	0003      	movs	r3, r0
 80160f4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80160f6:	e008      	b.n	801610a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80160f8:	f7f9 f8a6 	bl	800f248 <HAL_GetTick>
 80160fc:	0002      	movs	r2, r0
 80160fe:	693b      	ldr	r3, [r7, #16]
 8016100:	1ad3      	subs	r3, r2, r3
 8016102:	2b64      	cmp	r3, #100	@ 0x64
 8016104:	d901      	bls.n	801610a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8016106:	2303      	movs	r3, #3
 8016108:	e107      	b.n	801631a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801610a:	4b87      	ldr	r3, [pc, #540]	@ (8016328 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801610c:	681a      	ldr	r2, [r3, #0]
 801610e:	2380      	movs	r3, #128	@ 0x80
 8016110:	005b      	lsls	r3, r3, #1
 8016112:	4013      	ands	r3, r2
 8016114:	d0f0      	beq.n	80160f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8016116:	4b83      	ldr	r3, [pc, #524]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016118:	681a      	ldr	r2, [r3, #0]
 801611a:	23c0      	movs	r3, #192	@ 0xc0
 801611c:	039b      	lsls	r3, r3, #14
 801611e:	4013      	ands	r3, r2
 8016120:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	685a      	ldr	r2, [r3, #4]
 8016126:	23c0      	movs	r3, #192	@ 0xc0
 8016128:	039b      	lsls	r3, r3, #14
 801612a:	4013      	ands	r3, r2
 801612c:	68fa      	ldr	r2, [r7, #12]
 801612e:	429a      	cmp	r2, r3
 8016130:	d013      	beq.n	801615a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	685a      	ldr	r2, [r3, #4]
 8016136:	23c0      	movs	r3, #192	@ 0xc0
 8016138:	029b      	lsls	r3, r3, #10
 801613a:	401a      	ands	r2, r3
 801613c:	23c0      	movs	r3, #192	@ 0xc0
 801613e:	029b      	lsls	r3, r3, #10
 8016140:	429a      	cmp	r2, r3
 8016142:	d10a      	bne.n	801615a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016144:	4b77      	ldr	r3, [pc, #476]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	2380      	movs	r3, #128	@ 0x80
 801614a:	029b      	lsls	r3, r3, #10
 801614c:	401a      	ands	r2, r3
 801614e:	2380      	movs	r3, #128	@ 0x80
 8016150:	029b      	lsls	r3, r3, #10
 8016152:	429a      	cmp	r2, r3
 8016154:	d101      	bne.n	801615a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8016156:	2301      	movs	r3, #1
 8016158:	e0df      	b.n	801631a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801615a:	4b72      	ldr	r3, [pc, #456]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801615c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801615e:	23c0      	movs	r3, #192	@ 0xc0
 8016160:	029b      	lsls	r3, r3, #10
 8016162:	4013      	ands	r3, r2
 8016164:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d03b      	beq.n	80161e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	685a      	ldr	r2, [r3, #4]
 8016170:	23c0      	movs	r3, #192	@ 0xc0
 8016172:	029b      	lsls	r3, r3, #10
 8016174:	4013      	ands	r3, r2
 8016176:	68fa      	ldr	r2, [r7, #12]
 8016178:	429a      	cmp	r2, r3
 801617a:	d033      	beq.n	80161e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	2220      	movs	r2, #32
 8016182:	4013      	ands	r3, r2
 8016184:	d02e      	beq.n	80161e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8016186:	4b67      	ldr	r3, [pc, #412]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801618a:	4a68      	ldr	r2, [pc, #416]	@ (801632c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801618c:	4013      	ands	r3, r2
 801618e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8016190:	4b64      	ldr	r3, [pc, #400]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016192:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016194:	4b63      	ldr	r3, [pc, #396]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016196:	2180      	movs	r1, #128	@ 0x80
 8016198:	0309      	lsls	r1, r1, #12
 801619a:	430a      	orrs	r2, r1
 801619c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801619e:	4b61      	ldr	r3, [pc, #388]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80161a2:	4b60      	ldr	r3, [pc, #384]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161a4:	4962      	ldr	r1, [pc, #392]	@ (8016330 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80161a6:	400a      	ands	r2, r1
 80161a8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80161aa:	4b5e      	ldr	r3, [pc, #376]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161ac:	68fa      	ldr	r2, [r7, #12]
 80161ae:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80161b0:	68fa      	ldr	r2, [r7, #12]
 80161b2:	2380      	movs	r3, #128	@ 0x80
 80161b4:	005b      	lsls	r3, r3, #1
 80161b6:	4013      	ands	r3, r2
 80161b8:	d014      	beq.n	80161e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80161ba:	f7f9 f845 	bl	800f248 <HAL_GetTick>
 80161be:	0003      	movs	r3, r0
 80161c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80161c2:	e009      	b.n	80161d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80161c4:	f7f9 f840 	bl	800f248 <HAL_GetTick>
 80161c8:	0002      	movs	r2, r0
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	1ad3      	subs	r3, r2, r3
 80161ce:	4a59      	ldr	r2, [pc, #356]	@ (8016334 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80161d0:	4293      	cmp	r3, r2
 80161d2:	d901      	bls.n	80161d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80161d4:	2303      	movs	r3, #3
 80161d6:	e0a0      	b.n	801631a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80161d8:	4b52      	ldr	r3, [pc, #328]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80161dc:	2380      	movs	r3, #128	@ 0x80
 80161de:	009b      	lsls	r3, r3, #2
 80161e0:	4013      	ands	r3, r2
 80161e2:	d0ef      	beq.n	80161c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	2220      	movs	r2, #32
 80161ea:	4013      	ands	r3, r2
 80161ec:	d01f      	beq.n	801622e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	685a      	ldr	r2, [r3, #4]
 80161f2:	23c0      	movs	r3, #192	@ 0xc0
 80161f4:	029b      	lsls	r3, r3, #10
 80161f6:	401a      	ands	r2, r3
 80161f8:	23c0      	movs	r3, #192	@ 0xc0
 80161fa:	029b      	lsls	r3, r3, #10
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d10c      	bne.n	801621a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8016200:	4b48      	ldr	r3, [pc, #288]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	4a4c      	ldr	r2, [pc, #304]	@ (8016338 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8016206:	4013      	ands	r3, r2
 8016208:	0019      	movs	r1, r3
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	685a      	ldr	r2, [r3, #4]
 801620e:	23c0      	movs	r3, #192	@ 0xc0
 8016210:	039b      	lsls	r3, r3, #14
 8016212:	401a      	ands	r2, r3
 8016214:	4b43      	ldr	r3, [pc, #268]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016216:	430a      	orrs	r2, r1
 8016218:	601a      	str	r2, [r3, #0]
 801621a:	4b42      	ldr	r3, [pc, #264]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801621c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	685a      	ldr	r2, [r3, #4]
 8016222:	23c0      	movs	r3, #192	@ 0xc0
 8016224:	029b      	lsls	r3, r3, #10
 8016226:	401a      	ands	r2, r3
 8016228:	4b3e      	ldr	r3, [pc, #248]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801622a:	430a      	orrs	r2, r1
 801622c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801622e:	2317      	movs	r3, #23
 8016230:	18fb      	adds	r3, r7, r3
 8016232:	781b      	ldrb	r3, [r3, #0]
 8016234:	2b01      	cmp	r3, #1
 8016236:	d105      	bne.n	8016244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016238:	4b3a      	ldr	r3, [pc, #232]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801623a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801623c:	4b39      	ldr	r3, [pc, #228]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801623e:	493f      	ldr	r1, [pc, #252]	@ (801633c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8016240:	400a      	ands	r2, r1
 8016242:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	2201      	movs	r2, #1
 801624a:	4013      	ands	r3, r2
 801624c:	d009      	beq.n	8016262 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801624e:	4b35      	ldr	r3, [pc, #212]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016252:	2203      	movs	r2, #3
 8016254:	4393      	bics	r3, r2
 8016256:	0019      	movs	r1, r3
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	689a      	ldr	r2, [r3, #8]
 801625c:	4b31      	ldr	r3, [pc, #196]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801625e:	430a      	orrs	r2, r1
 8016260:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	2202      	movs	r2, #2
 8016268:	4013      	ands	r3, r2
 801626a:	d009      	beq.n	8016280 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801626c:	4b2d      	ldr	r3, [pc, #180]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801626e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016270:	220c      	movs	r2, #12
 8016272:	4393      	bics	r3, r2
 8016274:	0019      	movs	r1, r3
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	68da      	ldr	r2, [r3, #12]
 801627a:	4b2a      	ldr	r3, [pc, #168]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801627c:	430a      	orrs	r2, r1
 801627e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	2204      	movs	r2, #4
 8016286:	4013      	ands	r3, r2
 8016288:	d009      	beq.n	801629e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801628a:	4b26      	ldr	r3, [pc, #152]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801628c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801628e:	4a2c      	ldr	r2, [pc, #176]	@ (8016340 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8016290:	4013      	ands	r3, r2
 8016292:	0019      	movs	r1, r3
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	691a      	ldr	r2, [r3, #16]
 8016298:	4b22      	ldr	r3, [pc, #136]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801629a:	430a      	orrs	r2, r1
 801629c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	2208      	movs	r2, #8
 80162a4:	4013      	ands	r3, r2
 80162a6:	d009      	beq.n	80162bc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80162a8:	4b1e      	ldr	r3, [pc, #120]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80162aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162ac:	4a25      	ldr	r2, [pc, #148]	@ (8016344 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80162ae:	4013      	ands	r3, r2
 80162b0:	0019      	movs	r1, r3
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	695a      	ldr	r2, [r3, #20]
 80162b6:	4b1b      	ldr	r3, [pc, #108]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80162b8:	430a      	orrs	r2, r1
 80162ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681a      	ldr	r2, [r3, #0]
 80162c0:	2380      	movs	r3, #128	@ 0x80
 80162c2:	005b      	lsls	r3, r3, #1
 80162c4:	4013      	ands	r3, r2
 80162c6:	d009      	beq.n	80162dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80162c8:	4b16      	ldr	r3, [pc, #88]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80162ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162cc:	4a17      	ldr	r2, [pc, #92]	@ (801632c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80162ce:	4013      	ands	r3, r2
 80162d0:	0019      	movs	r1, r3
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	699a      	ldr	r2, [r3, #24]
 80162d6:	4b13      	ldr	r3, [pc, #76]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80162d8:	430a      	orrs	r2, r1
 80162da:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	2240      	movs	r2, #64	@ 0x40
 80162e2:	4013      	ands	r3, r2
 80162e4:	d009      	beq.n	80162fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80162e6:	4b0f      	ldr	r3, [pc, #60]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80162e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162ea:	4a17      	ldr	r2, [pc, #92]	@ (8016348 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80162ec:	4013      	ands	r3, r2
 80162ee:	0019      	movs	r1, r3
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6a1a      	ldr	r2, [r3, #32]
 80162f4:	4b0b      	ldr	r3, [pc, #44]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80162f6:	430a      	orrs	r2, r1
 80162f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	2280      	movs	r2, #128	@ 0x80
 8016300:	4013      	ands	r3, r2
 8016302:	d009      	beq.n	8016318 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8016304:	4b07      	ldr	r3, [pc, #28]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016308:	4a10      	ldr	r2, [pc, #64]	@ (801634c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801630a:	4013      	ands	r3, r2
 801630c:	0019      	movs	r1, r3
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	69da      	ldr	r2, [r3, #28]
 8016312:	4b04      	ldr	r3, [pc, #16]	@ (8016324 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016314:	430a      	orrs	r2, r1
 8016316:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8016318:	2300      	movs	r3, #0
}
 801631a:	0018      	movs	r0, r3
 801631c:	46bd      	mov	sp, r7
 801631e:	b006      	add	sp, #24
 8016320:	bd80      	pop	{r7, pc}
 8016322:	46c0      	nop			@ (mov r8, r8)
 8016324:	40021000 	.word	0x40021000
 8016328:	40007000 	.word	0x40007000
 801632c:	fffcffff 	.word	0xfffcffff
 8016330:	fff7ffff 	.word	0xfff7ffff
 8016334:	00001388 	.word	0x00001388
 8016338:	ffcfffff 	.word	0xffcfffff
 801633c:	efffffff 	.word	0xefffffff
 8016340:	fffff3ff 	.word	0xfffff3ff
 8016344:	ffffcfff 	.word	0xffffcfff
 8016348:	fbffffff 	.word	0xfbffffff
 801634c:	fff3ffff 	.word	0xfff3ffff

08016350 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8016350:	b5b0      	push	{r4, r5, r7, lr}
 8016352:	b084      	sub	sp, #16
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8016358:	230f      	movs	r3, #15
 801635a:	18fb      	adds	r3, r7, r3
 801635c:	2201      	movs	r2, #1
 801635e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d101      	bne.n	801636a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8016366:	2301      	movs	r3, #1
 8016368:	e088      	b.n	801647c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2221      	movs	r2, #33	@ 0x21
 801636e:	5c9b      	ldrb	r3, [r3, r2]
 8016370:	b2db      	uxtb	r3, r3
 8016372:	2b00      	cmp	r3, #0
 8016374:	d107      	bne.n	8016386 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2220      	movs	r2, #32
 801637a:	2100      	movs	r1, #0
 801637c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	0018      	movs	r0, r3
 8016382:	f7f3 f803 	bl	800938c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2221      	movs	r2, #33	@ 0x21
 801638a:	2102      	movs	r1, #2
 801638c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	68db      	ldr	r3, [r3, #12]
 8016394:	2210      	movs	r2, #16
 8016396:	4013      	ands	r3, r2
 8016398:	2b10      	cmp	r3, #16
 801639a:	d05f      	beq.n	801645c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	22ca      	movs	r2, #202	@ 0xca
 80163a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2253      	movs	r2, #83	@ 0x53
 80163aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80163ac:	250f      	movs	r5, #15
 80163ae:	197c      	adds	r4, r7, r5
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	0018      	movs	r0, r3
 80163b4:	f000 fa7c 	bl	80168b0 <RTC_EnterInitMode>
 80163b8:	0003      	movs	r3, r0
 80163ba:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80163bc:	0028      	movs	r0, r5
 80163be:	183b      	adds	r3, r7, r0
 80163c0:	781b      	ldrb	r3, [r3, #0]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d12c      	bne.n	8016420 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	689a      	ldr	r2, [r3, #8]
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	492c      	ldr	r1, [pc, #176]	@ (8016484 <HAL_RTC_Init+0x134>)
 80163d2:	400a      	ands	r2, r1
 80163d4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	6899      	ldr	r1, [r3, #8]
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	685a      	ldr	r2, [r3, #4]
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	691b      	ldr	r3, [r3, #16]
 80163e4:	431a      	orrs	r2, r3
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	699b      	ldr	r3, [r3, #24]
 80163ea:	431a      	orrs	r2, r3
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	430a      	orrs	r2, r1
 80163f2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	68d2      	ldr	r2, [r2, #12]
 80163fc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	6919      	ldr	r1, [r3, #16]
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	689b      	ldr	r3, [r3, #8]
 8016408:	041a      	lsls	r2, r3, #16
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	430a      	orrs	r2, r1
 8016410:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8016412:	183c      	adds	r4, r7, r0
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	0018      	movs	r0, r3
 8016418:	f000 fa8e 	bl	8016938 <RTC_ExitInitMode>
 801641c:	0003      	movs	r3, r0
 801641e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8016420:	230f      	movs	r3, #15
 8016422:	18fb      	adds	r3, r7, r3
 8016424:	781b      	ldrb	r3, [r3, #0]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d113      	bne.n	8016452 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	2103      	movs	r1, #3
 8016436:	438a      	bics	r2, r1
 8016438:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	69da      	ldr	r2, [r3, #28]
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	695b      	ldr	r3, [r3, #20]
 8016448:	431a      	orrs	r2, r3
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	430a      	orrs	r2, r1
 8016450:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	22ff      	movs	r2, #255	@ 0xff
 8016458:	625a      	str	r2, [r3, #36]	@ 0x24
 801645a:	e003      	b.n	8016464 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801645c:	230f      	movs	r3, #15
 801645e:	18fb      	adds	r3, r7, r3
 8016460:	2200      	movs	r2, #0
 8016462:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8016464:	230f      	movs	r3, #15
 8016466:	18fb      	adds	r3, r7, r3
 8016468:	781b      	ldrb	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d103      	bne.n	8016476 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	2221      	movs	r2, #33	@ 0x21
 8016472:	2101      	movs	r1, #1
 8016474:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8016476:	230f      	movs	r3, #15
 8016478:	18fb      	adds	r3, r7, r3
 801647a:	781b      	ldrb	r3, [r3, #0]
}
 801647c:	0018      	movs	r0, r3
 801647e:	46bd      	mov	sp, r7
 8016480:	b004      	add	sp, #16
 8016482:	bdb0      	pop	{r4, r5, r7, pc}
 8016484:	ff8fffbf 	.word	0xff8fffbf

08016488 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016488:	b5b0      	push	{r4, r5, r7, lr}
 801648a:	b086      	sub	sp, #24
 801648c:	af00      	add	r7, sp, #0
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016494:	2300      	movs	r3, #0
 8016496:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	2220      	movs	r2, #32
 801649c:	5c9b      	ldrb	r3, [r3, r2]
 801649e:	2b01      	cmp	r3, #1
 80164a0:	d101      	bne.n	80164a6 <HAL_RTC_SetTime+0x1e>
 80164a2:	2302      	movs	r3, #2
 80164a4:	e092      	b.n	80165cc <HAL_RTC_SetTime+0x144>
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2220      	movs	r2, #32
 80164aa:	2101      	movs	r1, #1
 80164ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2221      	movs	r2, #33	@ 0x21
 80164b2:	2102      	movs	r1, #2
 80164b4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d125      	bne.n	8016508 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	689b      	ldr	r3, [r3, #8]
 80164c2:	2240      	movs	r2, #64	@ 0x40
 80164c4:	4013      	ands	r3, r2
 80164c6:	d102      	bne.n	80164ce <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	2200      	movs	r2, #0
 80164cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	781b      	ldrb	r3, [r3, #0]
 80164d2:	0018      	movs	r0, r3
 80164d4:	f000 fa5a 	bl	801698c <RTC_ByteToBcd2>
 80164d8:	0003      	movs	r3, r0
 80164da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	785b      	ldrb	r3, [r3, #1]
 80164e0:	0018      	movs	r0, r3
 80164e2:	f000 fa53 	bl	801698c <RTC_ByteToBcd2>
 80164e6:	0003      	movs	r3, r0
 80164e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80164ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	789b      	ldrb	r3, [r3, #2]
 80164f0:	0018      	movs	r0, r3
 80164f2:	f000 fa4b 	bl	801698c <RTC_ByteToBcd2>
 80164f6:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80164f8:	0022      	movs	r2, r4
 80164fa:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	78db      	ldrb	r3, [r3, #3]
 8016500:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016502:	4313      	orrs	r3, r2
 8016504:	617b      	str	r3, [r7, #20]
 8016506:	e017      	b.n	8016538 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	689b      	ldr	r3, [r3, #8]
 801650e:	2240      	movs	r2, #64	@ 0x40
 8016510:	4013      	ands	r3, r2
 8016512:	d102      	bne.n	801651a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	2200      	movs	r2, #0
 8016518:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	781b      	ldrb	r3, [r3, #0]
 801651e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	785b      	ldrb	r3, [r3, #1]
 8016524:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016526:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8016528:	68ba      	ldr	r2, [r7, #8]
 801652a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801652c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	78db      	ldrb	r3, [r3, #3]
 8016532:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016534:	4313      	orrs	r3, r2
 8016536:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	22ca      	movs	r2, #202	@ 0xca
 801653e:	625a      	str	r2, [r3, #36]	@ 0x24
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	2253      	movs	r2, #83	@ 0x53
 8016546:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016548:	2513      	movs	r5, #19
 801654a:	197c      	adds	r4, r7, r5
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	0018      	movs	r0, r3
 8016550:	f000 f9ae 	bl	80168b0 <RTC_EnterInitMode>
 8016554:	0003      	movs	r3, r0
 8016556:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016558:	0028      	movs	r0, r5
 801655a:	183b      	adds	r3, r7, r0
 801655c:	781b      	ldrb	r3, [r3, #0]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d120      	bne.n	80165a4 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	697a      	ldr	r2, [r7, #20]
 8016568:	491a      	ldr	r1, [pc, #104]	@ (80165d4 <HAL_RTC_SetTime+0x14c>)
 801656a:	400a      	ands	r2, r1
 801656c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	689a      	ldr	r2, [r3, #8]
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	4917      	ldr	r1, [pc, #92]	@ (80165d8 <HAL_RTC_SetTime+0x150>)
 801657a:	400a      	ands	r2, r1
 801657c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	6899      	ldr	r1, [r3, #8]
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	68da      	ldr	r2, [r3, #12]
 8016588:	68bb      	ldr	r3, [r7, #8]
 801658a:	691b      	ldr	r3, [r3, #16]
 801658c:	431a      	orrs	r2, r3
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	430a      	orrs	r2, r1
 8016594:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016596:	183c      	adds	r4, r7, r0
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	0018      	movs	r0, r3
 801659c:	f000 f9cc 	bl	8016938 <RTC_ExitInitMode>
 80165a0:	0003      	movs	r3, r0
 80165a2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80165a4:	2313      	movs	r3, #19
 80165a6:	18fb      	adds	r3, r7, r3
 80165a8:	781b      	ldrb	r3, [r3, #0]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d103      	bne.n	80165b6 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	2221      	movs	r2, #33	@ 0x21
 80165b2:	2101      	movs	r1, #1
 80165b4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	22ff      	movs	r2, #255	@ 0xff
 80165bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	2220      	movs	r2, #32
 80165c2:	2100      	movs	r1, #0
 80165c4:	5499      	strb	r1, [r3, r2]

  return status;
 80165c6:	2313      	movs	r3, #19
 80165c8:	18fb      	adds	r3, r7, r3
 80165ca:	781b      	ldrb	r3, [r3, #0]
}
 80165cc:	0018      	movs	r0, r3
 80165ce:	46bd      	mov	sp, r7
 80165d0:	b006      	add	sp, #24
 80165d2:	bdb0      	pop	{r4, r5, r7, pc}
 80165d4:	007f7f7f 	.word	0x007f7f7f
 80165d8:	fffbffff 	.word	0xfffbffff

080165dc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b086      	sub	sp, #24
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	60f8      	str	r0, [r7, #12]
 80165e4:	60b9      	str	r1, [r7, #8]
 80165e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80165e8:	2300      	movs	r3, #0
 80165ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80165f2:	68bb      	ldr	r3, [r7, #8]
 80165f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	691b      	ldr	r3, [r3, #16]
 80165fc:	045b      	lsls	r3, r3, #17
 80165fe:	0c5a      	lsrs	r2, r3, #17
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4a22      	ldr	r2, [pc, #136]	@ (8016694 <HAL_RTC_GetTime+0xb8>)
 801660c:	4013      	ands	r3, r2
 801660e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	0c1b      	lsrs	r3, r3, #16
 8016614:	b2db      	uxtb	r3, r3
 8016616:	223f      	movs	r2, #63	@ 0x3f
 8016618:	4013      	ands	r3, r2
 801661a:	b2da      	uxtb	r2, r3
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8016620:	697b      	ldr	r3, [r7, #20]
 8016622:	0a1b      	lsrs	r3, r3, #8
 8016624:	b2db      	uxtb	r3, r3
 8016626:	227f      	movs	r2, #127	@ 0x7f
 8016628:	4013      	ands	r3, r2
 801662a:	b2da      	uxtb	r2, r3
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	b2db      	uxtb	r3, r3
 8016634:	227f      	movs	r2, #127	@ 0x7f
 8016636:	4013      	ands	r3, r2
 8016638:	b2da      	uxtb	r2, r3
 801663a:	68bb      	ldr	r3, [r7, #8]
 801663c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801663e:	697b      	ldr	r3, [r7, #20]
 8016640:	0d9b      	lsrs	r3, r3, #22
 8016642:	b2db      	uxtb	r3, r3
 8016644:	2201      	movs	r2, #1
 8016646:	4013      	ands	r3, r2
 8016648:	b2da      	uxtb	r2, r3
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d11a      	bne.n	801668a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	781b      	ldrb	r3, [r3, #0]
 8016658:	0018      	movs	r0, r3
 801665a:	f000 f9b8 	bl	80169ce <RTC_Bcd2ToByte>
 801665e:	0003      	movs	r3, r0
 8016660:	001a      	movs	r2, r3
 8016662:	68bb      	ldr	r3, [r7, #8]
 8016664:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8016666:	68bb      	ldr	r3, [r7, #8]
 8016668:	785b      	ldrb	r3, [r3, #1]
 801666a:	0018      	movs	r0, r3
 801666c:	f000 f9af 	bl	80169ce <RTC_Bcd2ToByte>
 8016670:	0003      	movs	r3, r0
 8016672:	001a      	movs	r2, r3
 8016674:	68bb      	ldr	r3, [r7, #8]
 8016676:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	789b      	ldrb	r3, [r3, #2]
 801667c:	0018      	movs	r0, r3
 801667e:	f000 f9a6 	bl	80169ce <RTC_Bcd2ToByte>
 8016682:	0003      	movs	r3, r0
 8016684:	001a      	movs	r2, r3
 8016686:	68bb      	ldr	r3, [r7, #8]
 8016688:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801668a:	2300      	movs	r3, #0
}
 801668c:	0018      	movs	r0, r3
 801668e:	46bd      	mov	sp, r7
 8016690:	b006      	add	sp, #24
 8016692:	bd80      	pop	{r7, pc}
 8016694:	007f7f7f 	.word	0x007f7f7f

08016698 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016698:	b5b0      	push	{r4, r5, r7, lr}
 801669a:	b086      	sub	sp, #24
 801669c:	af00      	add	r7, sp, #0
 801669e:	60f8      	str	r0, [r7, #12]
 80166a0:	60b9      	str	r1, [r7, #8]
 80166a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80166a4:	2300      	movs	r3, #0
 80166a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2220      	movs	r2, #32
 80166ac:	5c9b      	ldrb	r3, [r3, r2]
 80166ae:	2b01      	cmp	r3, #1
 80166b0:	d101      	bne.n	80166b6 <HAL_RTC_SetDate+0x1e>
 80166b2:	2302      	movs	r3, #2
 80166b4:	e07e      	b.n	80167b4 <HAL_RTC_SetDate+0x11c>
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	2220      	movs	r2, #32
 80166ba:	2101      	movs	r1, #1
 80166bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	2221      	movs	r2, #33	@ 0x21
 80166c2:	2102      	movs	r1, #2
 80166c4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d10e      	bne.n	80166ea <HAL_RTC_SetDate+0x52>
 80166cc:	68bb      	ldr	r3, [r7, #8]
 80166ce:	785b      	ldrb	r3, [r3, #1]
 80166d0:	001a      	movs	r2, r3
 80166d2:	2310      	movs	r3, #16
 80166d4:	4013      	ands	r3, r2
 80166d6:	d008      	beq.n	80166ea <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	785b      	ldrb	r3, [r3, #1]
 80166dc:	2210      	movs	r2, #16
 80166de:	4393      	bics	r3, r2
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	330a      	adds	r3, #10
 80166e4:	b2da      	uxtb	r2, r3
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d11c      	bne.n	801672a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	78db      	ldrb	r3, [r3, #3]
 80166f4:	0018      	movs	r0, r3
 80166f6:	f000 f949 	bl	801698c <RTC_ByteToBcd2>
 80166fa:	0003      	movs	r3, r0
 80166fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80166fe:	68bb      	ldr	r3, [r7, #8]
 8016700:	785b      	ldrb	r3, [r3, #1]
 8016702:	0018      	movs	r0, r3
 8016704:	f000 f942 	bl	801698c <RTC_ByteToBcd2>
 8016708:	0003      	movs	r3, r0
 801670a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801670c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	789b      	ldrb	r3, [r3, #2]
 8016712:	0018      	movs	r0, r3
 8016714:	f000 f93a 	bl	801698c <RTC_ByteToBcd2>
 8016718:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801671a:	0022      	movs	r2, r4
 801671c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016724:	4313      	orrs	r3, r2
 8016726:	617b      	str	r3, [r7, #20]
 8016728:	e00e      	b.n	8016748 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	78db      	ldrb	r3, [r3, #3]
 801672e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	785b      	ldrb	r3, [r3, #1]
 8016734:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016736:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016738:	68ba      	ldr	r2, [r7, #8]
 801673a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801673c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	781b      	ldrb	r3, [r3, #0]
 8016742:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016744:	4313      	orrs	r3, r2
 8016746:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	22ca      	movs	r2, #202	@ 0xca
 801674e:	625a      	str	r2, [r3, #36]	@ 0x24
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	2253      	movs	r2, #83	@ 0x53
 8016756:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016758:	2513      	movs	r5, #19
 801675a:	197c      	adds	r4, r7, r5
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	0018      	movs	r0, r3
 8016760:	f000 f8a6 	bl	80168b0 <RTC_EnterInitMode>
 8016764:	0003      	movs	r3, r0
 8016766:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016768:	0028      	movs	r0, r5
 801676a:	183b      	adds	r3, r7, r0
 801676c:	781b      	ldrb	r3, [r3, #0]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d10c      	bne.n	801678c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	697a      	ldr	r2, [r7, #20]
 8016778:	4910      	ldr	r1, [pc, #64]	@ (80167bc <HAL_RTC_SetDate+0x124>)
 801677a:	400a      	ands	r2, r1
 801677c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801677e:	183c      	adds	r4, r7, r0
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	0018      	movs	r0, r3
 8016784:	f000 f8d8 	bl	8016938 <RTC_ExitInitMode>
 8016788:	0003      	movs	r3, r0
 801678a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801678c:	2313      	movs	r3, #19
 801678e:	18fb      	adds	r3, r7, r3
 8016790:	781b      	ldrb	r3, [r3, #0]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d103      	bne.n	801679e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	2221      	movs	r2, #33	@ 0x21
 801679a:	2101      	movs	r1, #1
 801679c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	22ff      	movs	r2, #255	@ 0xff
 80167a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2220      	movs	r2, #32
 80167aa:	2100      	movs	r1, #0
 80167ac:	5499      	strb	r1, [r3, r2]

  return status;
 80167ae:	2313      	movs	r3, #19
 80167b0:	18fb      	adds	r3, r7, r3
 80167b2:	781b      	ldrb	r3, [r3, #0]
}
 80167b4:	0018      	movs	r0, r3
 80167b6:	46bd      	mov	sp, r7
 80167b8:	b006      	add	sp, #24
 80167ba:	bdb0      	pop	{r4, r5, r7, pc}
 80167bc:	00ffff3f 	.word	0x00ffff3f

080167c0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b086      	sub	sp, #24
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	60f8      	str	r0, [r7, #12]
 80167c8:	60b9      	str	r1, [r7, #8]
 80167ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80167cc:	2300      	movs	r3, #0
 80167ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	4a21      	ldr	r2, [pc, #132]	@ (801685c <HAL_RTC_GetDate+0x9c>)
 80167d8:	4013      	ands	r3, r2
 80167da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80167dc:	697b      	ldr	r3, [r7, #20]
 80167de:	0c1b      	lsrs	r3, r3, #16
 80167e0:	b2da      	uxtb	r2, r3
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	0a1b      	lsrs	r3, r3, #8
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	221f      	movs	r2, #31
 80167ee:	4013      	ands	r3, r2
 80167f0:	b2da      	uxtb	r2, r3
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80167f6:	697b      	ldr	r3, [r7, #20]
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	223f      	movs	r2, #63	@ 0x3f
 80167fc:	4013      	ands	r3, r2
 80167fe:	b2da      	uxtb	r2, r3
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	0b5b      	lsrs	r3, r3, #13
 8016808:	b2db      	uxtb	r3, r3
 801680a:	2207      	movs	r2, #7
 801680c:	4013      	ands	r3, r2
 801680e:	b2da      	uxtb	r2, r3
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d11a      	bne.n	8016850 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801681a:	68bb      	ldr	r3, [r7, #8]
 801681c:	78db      	ldrb	r3, [r3, #3]
 801681e:	0018      	movs	r0, r3
 8016820:	f000 f8d5 	bl	80169ce <RTC_Bcd2ToByte>
 8016824:	0003      	movs	r3, r0
 8016826:	001a      	movs	r2, r3
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	785b      	ldrb	r3, [r3, #1]
 8016830:	0018      	movs	r0, r3
 8016832:	f000 f8cc 	bl	80169ce <RTC_Bcd2ToByte>
 8016836:	0003      	movs	r3, r0
 8016838:	001a      	movs	r2, r3
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	789b      	ldrb	r3, [r3, #2]
 8016842:	0018      	movs	r0, r3
 8016844:	f000 f8c3 	bl	80169ce <RTC_Bcd2ToByte>
 8016848:	0003      	movs	r3, r0
 801684a:	001a      	movs	r2, r3
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8016850:	2300      	movs	r3, #0
}
 8016852:	0018      	movs	r0, r3
 8016854:	46bd      	mov	sp, r7
 8016856:	b006      	add	sp, #24
 8016858:	bd80      	pop	{r7, pc}
 801685a:	46c0      	nop			@ (mov r8, r8)
 801685c:	00ffff3f 	.word	0x00ffff3f

08016860 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016868:	2300      	movs	r3, #0
 801686a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4a0e      	ldr	r2, [pc, #56]	@ (80168ac <HAL_RTC_WaitForSynchro+0x4c>)
 8016872:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016874:	f7f8 fce8 	bl	800f248 <HAL_GetTick>
 8016878:	0003      	movs	r3, r0
 801687a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801687c:	e00a      	b.n	8016894 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801687e:	f7f8 fce3 	bl	800f248 <HAL_GetTick>
 8016882:	0002      	movs	r2, r0
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	1ad2      	subs	r2, r2, r3
 8016888:	23fa      	movs	r3, #250	@ 0xfa
 801688a:	009b      	lsls	r3, r3, #2
 801688c:	429a      	cmp	r2, r3
 801688e:	d901      	bls.n	8016894 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8016890:	2303      	movs	r3, #3
 8016892:	e006      	b.n	80168a2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	68db      	ldr	r3, [r3, #12]
 801689a:	2220      	movs	r2, #32
 801689c:	4013      	ands	r3, r2
 801689e:	d0ee      	beq.n	801687e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80168a0:	2300      	movs	r3, #0
}
 80168a2:	0018      	movs	r0, r3
 80168a4:	46bd      	mov	sp, r7
 80168a6:	b004      	add	sp, #16
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	46c0      	nop			@ (mov r8, r8)
 80168ac:	0001ff5f 	.word	0x0001ff5f

080168b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b084      	sub	sp, #16
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80168b8:	2300      	movs	r3, #0
 80168ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80168bc:	230f      	movs	r3, #15
 80168be:	18fb      	adds	r3, r7, r3
 80168c0:	2200      	movs	r2, #0
 80168c2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	68db      	ldr	r3, [r3, #12]
 80168ca:	2240      	movs	r2, #64	@ 0x40
 80168cc:	4013      	ands	r3, r2
 80168ce:	d12c      	bne.n	801692a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	68da      	ldr	r2, [r3, #12]
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	2180      	movs	r1, #128	@ 0x80
 80168dc:	430a      	orrs	r2, r1
 80168de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80168e0:	f7f8 fcb2 	bl	800f248 <HAL_GetTick>
 80168e4:	0003      	movs	r3, r0
 80168e6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80168e8:	e014      	b.n	8016914 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80168ea:	f7f8 fcad 	bl	800f248 <HAL_GetTick>
 80168ee:	0002      	movs	r2, r0
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	1ad2      	subs	r2, r2, r3
 80168f4:	200f      	movs	r0, #15
 80168f6:	183b      	adds	r3, r7, r0
 80168f8:	1839      	adds	r1, r7, r0
 80168fa:	7809      	ldrb	r1, [r1, #0]
 80168fc:	7019      	strb	r1, [r3, #0]
 80168fe:	23fa      	movs	r3, #250	@ 0xfa
 8016900:	009b      	lsls	r3, r3, #2
 8016902:	429a      	cmp	r2, r3
 8016904:	d906      	bls.n	8016914 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2221      	movs	r2, #33	@ 0x21
 801690a:	2104      	movs	r1, #4
 801690c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801690e:	183b      	adds	r3, r7, r0
 8016910:	2201      	movs	r2, #1
 8016912:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	2240      	movs	r2, #64	@ 0x40
 801691c:	4013      	ands	r3, r2
 801691e:	d104      	bne.n	801692a <RTC_EnterInitMode+0x7a>
 8016920:	230f      	movs	r3, #15
 8016922:	18fb      	adds	r3, r7, r3
 8016924:	781b      	ldrb	r3, [r3, #0]
 8016926:	2b01      	cmp	r3, #1
 8016928:	d1df      	bne.n	80168ea <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801692a:	230f      	movs	r3, #15
 801692c:	18fb      	adds	r3, r7, r3
 801692e:	781b      	ldrb	r3, [r3, #0]
}
 8016930:	0018      	movs	r0, r3
 8016932:	46bd      	mov	sp, r7
 8016934:	b004      	add	sp, #16
 8016936:	bd80      	pop	{r7, pc}

08016938 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016938:	b590      	push	{r4, r7, lr}
 801693a:	b085      	sub	sp, #20
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016940:	240f      	movs	r4, #15
 8016942:	193b      	adds	r3, r7, r4
 8016944:	2200      	movs	r2, #0
 8016946:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	68da      	ldr	r2, [r3, #12]
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	2180      	movs	r1, #128	@ 0x80
 8016954:	438a      	bics	r2, r1
 8016956:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	689b      	ldr	r3, [r3, #8]
 801695e:	2220      	movs	r2, #32
 8016960:	4013      	ands	r3, r2
 8016962:	d10c      	bne.n	801697e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	0018      	movs	r0, r3
 8016968:	f7ff ff7a 	bl	8016860 <HAL_RTC_WaitForSynchro>
 801696c:	1e03      	subs	r3, r0, #0
 801696e:	d006      	beq.n	801697e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2221      	movs	r2, #33	@ 0x21
 8016974:	2104      	movs	r1, #4
 8016976:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8016978:	193b      	adds	r3, r7, r4
 801697a:	2201      	movs	r2, #1
 801697c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801697e:	230f      	movs	r3, #15
 8016980:	18fb      	adds	r3, r7, r3
 8016982:	781b      	ldrb	r3, [r3, #0]
}
 8016984:	0018      	movs	r0, r3
 8016986:	46bd      	mov	sp, r7
 8016988:	b005      	add	sp, #20
 801698a:	bd90      	pop	{r4, r7, pc}

0801698c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b084      	sub	sp, #16
 8016990:	af00      	add	r7, sp, #0
 8016992:	0002      	movs	r2, r0
 8016994:	1dfb      	adds	r3, r7, #7
 8016996:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8016998:	2300      	movs	r3, #0
 801699a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801699c:	e007      	b.n	80169ae <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	3301      	adds	r3, #1
 80169a2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80169a4:	1dfb      	adds	r3, r7, #7
 80169a6:	1dfa      	adds	r2, r7, #7
 80169a8:	7812      	ldrb	r2, [r2, #0]
 80169aa:	3a0a      	subs	r2, #10
 80169ac:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80169ae:	1dfb      	adds	r3, r7, #7
 80169b0:	781b      	ldrb	r3, [r3, #0]
 80169b2:	2b09      	cmp	r3, #9
 80169b4:	d8f3      	bhi.n	801699e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	011b      	lsls	r3, r3, #4
 80169bc:	b2da      	uxtb	r2, r3
 80169be:	1dfb      	adds	r3, r7, #7
 80169c0:	781b      	ldrb	r3, [r3, #0]
 80169c2:	4313      	orrs	r3, r2
 80169c4:	b2db      	uxtb	r3, r3
}
 80169c6:	0018      	movs	r0, r3
 80169c8:	46bd      	mov	sp, r7
 80169ca:	b004      	add	sp, #16
 80169cc:	bd80      	pop	{r7, pc}

080169ce <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80169ce:	b580      	push	{r7, lr}
 80169d0:	b084      	sub	sp, #16
 80169d2:	af00      	add	r7, sp, #0
 80169d4:	0002      	movs	r2, r0
 80169d6:	1dfb      	adds	r3, r7, #7
 80169d8:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80169da:	2300      	movs	r3, #0
 80169dc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80169de:	1dfb      	adds	r3, r7, #7
 80169e0:	781b      	ldrb	r3, [r3, #0]
 80169e2:	091b      	lsrs	r3, r3, #4
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	001a      	movs	r2, r3
 80169e8:	0013      	movs	r3, r2
 80169ea:	009b      	lsls	r3, r3, #2
 80169ec:	189b      	adds	r3, r3, r2
 80169ee:	005b      	lsls	r3, r3, #1
 80169f0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	b2da      	uxtb	r2, r3
 80169f6:	1dfb      	adds	r3, r7, #7
 80169f8:	781b      	ldrb	r3, [r3, #0]
 80169fa:	210f      	movs	r1, #15
 80169fc:	400b      	ands	r3, r1
 80169fe:	b2db      	uxtb	r3, r3
 8016a00:	18d3      	adds	r3, r2, r3
 8016a02:	b2db      	uxtb	r3, r3
}
 8016a04:	0018      	movs	r0, r3
 8016a06:	46bd      	mov	sp, r7
 8016a08:	b004      	add	sp, #16
 8016a0a:	bd80      	pop	{r7, pc}

08016a0c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b086      	sub	sp, #24
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	60f8      	str	r0, [r7, #12]
 8016a14:	60b9      	str	r1, [r7, #8]
 8016a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016a18:	4b64      	ldr	r3, [pc, #400]	@ (8016bac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	22fa      	movs	r2, #250	@ 0xfa
 8016a1e:	01d1      	lsls	r1, r2, #7
 8016a20:	0018      	movs	r0, r3
 8016a22:	f7e9 fbbf 	bl	80001a4 <__udivsi3>
 8016a26:	0003      	movs	r3, r0
 8016a28:	001a      	movs	r2, r3
 8016a2a:	0013      	movs	r3, r2
 8016a2c:	015b      	lsls	r3, r3, #5
 8016a2e:	1a9b      	subs	r3, r3, r2
 8016a30:	009b      	lsls	r3, r3, #2
 8016a32:	189b      	adds	r3, r3, r2
 8016a34:	00db      	lsls	r3, r3, #3
 8016a36:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	2220      	movs	r2, #32
 8016a3c:	5c9b      	ldrb	r3, [r3, r2]
 8016a3e:	2b01      	cmp	r3, #1
 8016a40:	d101      	bne.n	8016a46 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8016a42:	2302      	movs	r3, #2
 8016a44:	e0ad      	b.n	8016ba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2220      	movs	r2, #32
 8016a4a:	2101      	movs	r1, #1
 8016a4c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2221      	movs	r2, #33	@ 0x21
 8016a52:	2102      	movs	r1, #2
 8016a54:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	22ca      	movs	r2, #202	@ 0xca
 8016a5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2253      	movs	r2, #83	@ 0x53
 8016a64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	689a      	ldr	r2, [r3, #8]
 8016a6c:	2380      	movs	r3, #128	@ 0x80
 8016a6e:	00db      	lsls	r3, r3, #3
 8016a70:	4013      	ands	r3, r2
 8016a72:	d019      	beq.n	8016aa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	3b01      	subs	r3, #1
 8016a78:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d10d      	bne.n	8016a9c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	22ff      	movs	r2, #255	@ 0xff
 8016a86:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	2221      	movs	r2, #33	@ 0x21
 8016a8c:	2103      	movs	r1, #3
 8016a8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	2220      	movs	r2, #32
 8016a94:	2100      	movs	r1, #0
 8016a96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016a98:	2303      	movs	r3, #3
 8016a9a:	e082      	b.n	8016ba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	68db      	ldr	r3, [r3, #12]
 8016aa2:	2204      	movs	r2, #4
 8016aa4:	4013      	ands	r3, r2
 8016aa6:	d1e5      	bne.n	8016a74 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	689a      	ldr	r2, [r3, #8]
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	493f      	ldr	r1, [pc, #252]	@ (8016bb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8016ab4:	400a      	ands	r2, r1
 8016ab6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	22ff      	movs	r2, #255	@ 0xff
 8016ac0:	401a      	ands	r2, r3
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	493b      	ldr	r1, [pc, #236]	@ (8016bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8016ac8:	430a      	orrs	r2, r1
 8016aca:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016acc:	4b37      	ldr	r3, [pc, #220]	@ (8016bac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	22fa      	movs	r2, #250	@ 0xfa
 8016ad2:	01d1      	lsls	r1, r2, #7
 8016ad4:	0018      	movs	r0, r3
 8016ad6:	f7e9 fb65 	bl	80001a4 <__udivsi3>
 8016ada:	0003      	movs	r3, r0
 8016adc:	001a      	movs	r2, r3
 8016ade:	0013      	movs	r3, r2
 8016ae0:	015b      	lsls	r3, r3, #5
 8016ae2:	1a9b      	subs	r3, r3, r2
 8016ae4:	009b      	lsls	r3, r3, #2
 8016ae6:	189b      	adds	r3, r3, r2
 8016ae8:	00db      	lsls	r3, r3, #3
 8016aea:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	3b01      	subs	r3, #1
 8016af0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d10d      	bne.n	8016b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	22ff      	movs	r2, #255	@ 0xff
 8016afe:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	2221      	movs	r2, #33	@ 0x21
 8016b04:	2103      	movs	r1, #3
 8016b06:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	2220      	movs	r2, #32
 8016b0c:	2100      	movs	r1, #0
 8016b0e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016b10:	2303      	movs	r3, #3
 8016b12:	e046      	b.n	8016ba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	68db      	ldr	r3, [r3, #12]
 8016b1a:	2204      	movs	r2, #4
 8016b1c:	4013      	ands	r3, r2
 8016b1e:	d0e5      	beq.n	8016aec <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	689a      	ldr	r2, [r3, #8]
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	2107      	movs	r1, #7
 8016b2c:	438a      	bics	r2, r1
 8016b2e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	6899      	ldr	r1, [r3, #8]
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	687a      	ldr	r2, [r7, #4]
 8016b3c:	430a      	orrs	r2, r1
 8016b3e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	68ba      	ldr	r2, [r7, #8]
 8016b46:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8016b48:	4b1b      	ldr	r3, [pc, #108]	@ (8016bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8016bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016b4e:	2180      	movs	r1, #128	@ 0x80
 8016b50:	0349      	lsls	r1, r1, #13
 8016b52:	430a      	orrs	r2, r1
 8016b54:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8016b56:	4b18      	ldr	r3, [pc, #96]	@ (8016bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016b58:	689a      	ldr	r2, [r3, #8]
 8016b5a:	4b17      	ldr	r3, [pc, #92]	@ (8016bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016b5c:	2180      	movs	r1, #128	@ 0x80
 8016b5e:	0349      	lsls	r1, r1, #13
 8016b60:	430a      	orrs	r2, r1
 8016b62:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	689a      	ldr	r2, [r3, #8]
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	2180      	movs	r1, #128	@ 0x80
 8016b70:	01c9      	lsls	r1, r1, #7
 8016b72:	430a      	orrs	r2, r1
 8016b74:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	689a      	ldr	r2, [r3, #8]
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	2180      	movs	r1, #128	@ 0x80
 8016b82:	00c9      	lsls	r1, r1, #3
 8016b84:	430a      	orrs	r2, r1
 8016b86:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	22ff      	movs	r2, #255	@ 0xff
 8016b8e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	2221      	movs	r2, #33	@ 0x21
 8016b94:	2101      	movs	r1, #1
 8016b96:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	2220      	movs	r2, #32
 8016b9c:	2100      	movs	r1, #0
 8016b9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016ba0:	2300      	movs	r3, #0
}
 8016ba2:	0018      	movs	r0, r3
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	b006      	add	sp, #24
 8016ba8:	bd80      	pop	{r7, pc}
 8016baa:	46c0      	nop			@ (mov r8, r8)
 8016bac:	200000d0 	.word	0x200000d0
 8016bb0:	fffffbff 	.word	0xfffffbff
 8016bb4:	fffffb7f 	.word	0xfffffb7f
 8016bb8:	40010400 	.word	0x40010400

08016bbc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b084      	sub	sp, #16
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	2220      	movs	r2, #32
 8016bcc:	5c9b      	ldrb	r3, [r3, r2]
 8016bce:	2b01      	cmp	r3, #1
 8016bd0:	d101      	bne.n	8016bd6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8016bd2:	2302      	movs	r3, #2
 8016bd4:	e04e      	b.n	8016c74 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	2220      	movs	r2, #32
 8016bda:	2101      	movs	r1, #1
 8016bdc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2221      	movs	r2, #33	@ 0x21
 8016be2:	2102      	movs	r1, #2
 8016be4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	22ca      	movs	r2, #202	@ 0xca
 8016bec:	625a      	str	r2, [r3, #36]	@ 0x24
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	2253      	movs	r2, #83	@ 0x53
 8016bf4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	689a      	ldr	r2, [r3, #8]
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	491e      	ldr	r1, [pc, #120]	@ (8016c7c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8016c02:	400a      	ands	r2, r1
 8016c04:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	689a      	ldr	r2, [r3, #8]
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	491b      	ldr	r1, [pc, #108]	@ (8016c80 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8016c12:	400a      	ands	r2, r1
 8016c14:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016c16:	f7f8 fb17 	bl	800f248 <HAL_GetTick>
 8016c1a:	0003      	movs	r3, r0
 8016c1c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016c1e:	e016      	b.n	8016c4e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016c20:	f7f8 fb12 	bl	800f248 <HAL_GetTick>
 8016c24:	0002      	movs	r2, r0
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	1ad2      	subs	r2, r2, r3
 8016c2a:	23fa      	movs	r3, #250	@ 0xfa
 8016c2c:	009b      	lsls	r3, r3, #2
 8016c2e:	429a      	cmp	r2, r3
 8016c30:	d90d      	bls.n	8016c4e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	22ff      	movs	r2, #255	@ 0xff
 8016c38:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2221      	movs	r2, #33	@ 0x21
 8016c3e:	2103      	movs	r1, #3
 8016c40:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2220      	movs	r2, #32
 8016c46:	2100      	movs	r1, #0
 8016c48:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016c4a:	2303      	movs	r3, #3
 8016c4c:	e012      	b.n	8016c74 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	68db      	ldr	r3, [r3, #12]
 8016c54:	2204      	movs	r2, #4
 8016c56:	4013      	ands	r3, r2
 8016c58:	d0e2      	beq.n	8016c20 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	22ff      	movs	r2, #255	@ 0xff
 8016c60:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2221      	movs	r2, #33	@ 0x21
 8016c66:	2101      	movs	r1, #1
 8016c68:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2220      	movs	r2, #32
 8016c6e:	2100      	movs	r1, #0
 8016c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016c72:	2300      	movs	r3, #0
}
 8016c74:	0018      	movs	r0, r3
 8016c76:	46bd      	mov	sp, r7
 8016c78:	b004      	add	sp, #16
 8016c7a:	bd80      	pop	{r7, pc}
 8016c7c:	fffffbff 	.word	0xfffffbff
 8016c80:	ffffbfff 	.word	0xffffbfff

08016c84 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016c8c:	4b13      	ldr	r3, [pc, #76]	@ (8016cdc <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8016c8e:	2280      	movs	r2, #128	@ 0x80
 8016c90:	0352      	lsls	r2, r2, #13
 8016c92:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	689a      	ldr	r2, [r3, #8]
 8016c9a:	2380      	movs	r3, #128	@ 0x80
 8016c9c:	01db      	lsls	r3, r3, #7
 8016c9e:	4013      	ands	r3, r2
 8016ca0:	d014      	beq.n	8016ccc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	68da      	ldr	r2, [r3, #12]
 8016ca8:	2380      	movs	r3, #128	@ 0x80
 8016caa:	00db      	lsls	r3, r3, #3
 8016cac:	4013      	ands	r3, r2
 8016cae:	d00d      	beq.n	8016ccc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	68db      	ldr	r3, [r3, #12]
 8016cb6:	22ff      	movs	r2, #255	@ 0xff
 8016cb8:	401a      	ands	r2, r3
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	4908      	ldr	r1, [pc, #32]	@ (8016ce0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8016cc0:	430a      	orrs	r2, r1
 8016cc2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	0018      	movs	r0, r3
 8016cc8:	f000 f80c 	bl	8016ce4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2221      	movs	r2, #33	@ 0x21
 8016cd0:	2101      	movs	r1, #1
 8016cd2:	5499      	strb	r1, [r3, r2]
}
 8016cd4:	46c0      	nop			@ (mov r8, r8)
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	b002      	add	sp, #8
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	40010400 	.word	0x40010400
 8016ce0:	fffffb7f 	.word	0xfffffb7f

08016ce4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016cec:	46c0      	nop			@ (mov r8, r8)
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	b002      	add	sp, #8
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b086      	sub	sp, #24
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	60f8      	str	r0, [r7, #12]
 8016cfc:	60b9      	str	r1, [r7, #8]
 8016cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016d00:	2300      	movs	r3, #0
 8016d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	3350      	adds	r3, #80	@ 0x50
 8016d0a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	009b      	lsls	r3, r3, #2
 8016d10:	697a      	ldr	r2, [r7, #20]
 8016d12:	18d3      	adds	r3, r2, r3
 8016d14:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8016d16:	697b      	ldr	r3, [r7, #20]
 8016d18:	687a      	ldr	r2, [r7, #4]
 8016d1a:	601a      	str	r2, [r3, #0]
}
 8016d1c:	46c0      	nop			@ (mov r8, r8)
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	b006      	add	sp, #24
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b084      	sub	sp, #16
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	3350      	adds	r3, #80	@ 0x50
 8016d38:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	009b      	lsls	r3, r3, #2
 8016d3e:	68fa      	ldr	r2, [r7, #12]
 8016d40:	18d3      	adds	r3, r2, r3
 8016d42:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
}
 8016d48:	0018      	movs	r0, r3
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	b004      	add	sp, #16
 8016d4e:	bd80      	pop	{r7, pc}

08016d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d101      	bne.n	8016d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016d5e:	2301      	movs	r3, #1
 8016d60:	e032      	b.n	8016dc8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	2239      	movs	r2, #57	@ 0x39
 8016d66:	5c9b      	ldrb	r3, [r3, r2]
 8016d68:	b2db      	uxtb	r3, r3
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d107      	bne.n	8016d7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	2238      	movs	r2, #56	@ 0x38
 8016d72:	2100      	movs	r1, #0
 8016d74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	0018      	movs	r0, r3
 8016d7a:	f7f7 fb79 	bl	800e470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	2239      	movs	r2, #57	@ 0x39
 8016d82:	2102      	movs	r1, #2
 8016d84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	3304      	adds	r3, #4
 8016d8e:	0019      	movs	r1, r3
 8016d90:	0010      	movs	r0, r2
 8016d92:	f000 fa1d 	bl	80171d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	223e      	movs	r2, #62	@ 0x3e
 8016d9a:	2101      	movs	r1, #1
 8016d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	223a      	movs	r2, #58	@ 0x3a
 8016da2:	2101      	movs	r1, #1
 8016da4:	5499      	strb	r1, [r3, r2]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	223b      	movs	r2, #59	@ 0x3b
 8016daa:	2101      	movs	r1, #1
 8016dac:	5499      	strb	r1, [r3, r2]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	223c      	movs	r2, #60	@ 0x3c
 8016db2:	2101      	movs	r1, #1
 8016db4:	5499      	strb	r1, [r3, r2]
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	223d      	movs	r2, #61	@ 0x3d
 8016dba:	2101      	movs	r1, #1
 8016dbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	2239      	movs	r2, #57	@ 0x39
 8016dc2:	2101      	movs	r1, #1
 8016dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016dc6:	2300      	movs	r3, #0
}
 8016dc8:	0018      	movs	r0, r3
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	b002      	add	sp, #8
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2239      	movs	r2, #57	@ 0x39
 8016ddc:	5c9b      	ldrb	r3, [r3, r2]
 8016dde:	b2db      	uxtb	r3, r3
 8016de0:	2b01      	cmp	r3, #1
 8016de2:	d001      	beq.n	8016de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016de4:	2301      	movs	r3, #1
 8016de6:	e033      	b.n	8016e50 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2239      	movs	r2, #57	@ 0x39
 8016dec:	2102      	movs	r1, #2
 8016dee:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681a      	ldr	r2, [r3, #0]
 8016df4:	2380      	movs	r3, #128	@ 0x80
 8016df6:	05db      	lsls	r3, r3, #23
 8016df8:	429a      	cmp	r2, r3
 8016dfa:	d00e      	beq.n	8016e1a <HAL_TIM_Base_Start+0x4a>
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	4a15      	ldr	r2, [pc, #84]	@ (8016e58 <HAL_TIM_Base_Start+0x88>)
 8016e02:	4293      	cmp	r3, r2
 8016e04:	d009      	beq.n	8016e1a <HAL_TIM_Base_Start+0x4a>
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	4a14      	ldr	r2, [pc, #80]	@ (8016e5c <HAL_TIM_Base_Start+0x8c>)
 8016e0c:	4293      	cmp	r3, r2
 8016e0e:	d004      	beq.n	8016e1a <HAL_TIM_Base_Start+0x4a>
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	4a12      	ldr	r2, [pc, #72]	@ (8016e60 <HAL_TIM_Base_Start+0x90>)
 8016e16:	4293      	cmp	r3, r2
 8016e18:	d111      	bne.n	8016e3e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	689b      	ldr	r3, [r3, #8]
 8016e20:	2207      	movs	r2, #7
 8016e22:	4013      	ands	r3, r2
 8016e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	2b06      	cmp	r3, #6
 8016e2a:	d010      	beq.n	8016e4e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	681a      	ldr	r2, [r3, #0]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	2101      	movs	r1, #1
 8016e38:	430a      	orrs	r2, r1
 8016e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016e3c:	e007      	b.n	8016e4e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	681a      	ldr	r2, [r3, #0]
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2101      	movs	r1, #1
 8016e4a:	430a      	orrs	r2, r1
 8016e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016e4e:	2300      	movs	r3, #0
}
 8016e50:	0018      	movs	r0, r3
 8016e52:	46bd      	mov	sp, r7
 8016e54:	b004      	add	sp, #16
 8016e56:	bd80      	pop	{r7, pc}
 8016e58:	40000400 	.word	0x40000400
 8016e5c:	40010800 	.word	0x40010800
 8016e60:	40011400 	.word	0x40011400

08016e64 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b082      	sub	sp, #8
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	6a1b      	ldr	r3, [r3, #32]
 8016e72:	4a0a      	ldr	r2, [pc, #40]	@ (8016e9c <HAL_TIM_Base_Stop+0x38>)
 8016e74:	4013      	ands	r3, r2
 8016e76:	d107      	bne.n	8016e88 <HAL_TIM_Base_Stop+0x24>
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	681a      	ldr	r2, [r3, #0]
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2101      	movs	r1, #1
 8016e84:	438a      	bics	r2, r1
 8016e86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2239      	movs	r2, #57	@ 0x39
 8016e8c:	2101      	movs	r1, #1
 8016e8e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016e90:	2300      	movs	r3, #0
}
 8016e92:	0018      	movs	r0, r3
 8016e94:	46bd      	mov	sp, r7
 8016e96:	b002      	add	sp, #8
 8016e98:	bd80      	pop	{r7, pc}
 8016e9a:	46c0      	nop			@ (mov r8, r8)
 8016e9c:	00001111 	.word	0x00001111

08016ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d101      	bne.n	8016eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	e032      	b.n	8016f18 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	2239      	movs	r2, #57	@ 0x39
 8016eb6:	5c9b      	ldrb	r3, [r3, r2]
 8016eb8:	b2db      	uxtb	r3, r3
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d107      	bne.n	8016ece <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	2238      	movs	r2, #56	@ 0x38
 8016ec2:	2100      	movs	r1, #0
 8016ec4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	0018      	movs	r0, r3
 8016eca:	f7f7 faad 	bl	800e428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2239      	movs	r2, #57	@ 0x39
 8016ed2:	2102      	movs	r1, #2
 8016ed4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	681a      	ldr	r2, [r3, #0]
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	3304      	adds	r3, #4
 8016ede:	0019      	movs	r1, r3
 8016ee0:	0010      	movs	r0, r2
 8016ee2:	f000 f975 	bl	80171d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	223e      	movs	r2, #62	@ 0x3e
 8016eea:	2101      	movs	r1, #1
 8016eec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	223a      	movs	r2, #58	@ 0x3a
 8016ef2:	2101      	movs	r1, #1
 8016ef4:	5499      	strb	r1, [r3, r2]
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	223b      	movs	r2, #59	@ 0x3b
 8016efa:	2101      	movs	r1, #1
 8016efc:	5499      	strb	r1, [r3, r2]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	223c      	movs	r2, #60	@ 0x3c
 8016f02:	2101      	movs	r1, #1
 8016f04:	5499      	strb	r1, [r3, r2]
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	223d      	movs	r2, #61	@ 0x3d
 8016f0a:	2101      	movs	r1, #1
 8016f0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	2239      	movs	r2, #57	@ 0x39
 8016f12:	2101      	movs	r1, #1
 8016f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016f16:	2300      	movs	r3, #0
}
 8016f18:	0018      	movs	r0, r3
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	b002      	add	sp, #8
 8016f1e:	bd80      	pop	{r7, pc}

08016f20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b084      	sub	sp, #16
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016f2a:	683b      	ldr	r3, [r7, #0]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d108      	bne.n	8016f42 <HAL_TIM_PWM_Start+0x22>
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	223a      	movs	r2, #58	@ 0x3a
 8016f34:	5c9b      	ldrb	r3, [r3, r2]
 8016f36:	b2db      	uxtb	r3, r3
 8016f38:	3b01      	subs	r3, #1
 8016f3a:	1e5a      	subs	r2, r3, #1
 8016f3c:	4193      	sbcs	r3, r2
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	e01f      	b.n	8016f82 <HAL_TIM_PWM_Start+0x62>
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	2b04      	cmp	r3, #4
 8016f46:	d108      	bne.n	8016f5a <HAL_TIM_PWM_Start+0x3a>
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	223b      	movs	r2, #59	@ 0x3b
 8016f4c:	5c9b      	ldrb	r3, [r3, r2]
 8016f4e:	b2db      	uxtb	r3, r3
 8016f50:	3b01      	subs	r3, #1
 8016f52:	1e5a      	subs	r2, r3, #1
 8016f54:	4193      	sbcs	r3, r2
 8016f56:	b2db      	uxtb	r3, r3
 8016f58:	e013      	b.n	8016f82 <HAL_TIM_PWM_Start+0x62>
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	2b08      	cmp	r3, #8
 8016f5e:	d108      	bne.n	8016f72 <HAL_TIM_PWM_Start+0x52>
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	223c      	movs	r2, #60	@ 0x3c
 8016f64:	5c9b      	ldrb	r3, [r3, r2]
 8016f66:	b2db      	uxtb	r3, r3
 8016f68:	3b01      	subs	r3, #1
 8016f6a:	1e5a      	subs	r2, r3, #1
 8016f6c:	4193      	sbcs	r3, r2
 8016f6e:	b2db      	uxtb	r3, r3
 8016f70:	e007      	b.n	8016f82 <HAL_TIM_PWM_Start+0x62>
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	223d      	movs	r2, #61	@ 0x3d
 8016f76:	5c9b      	ldrb	r3, [r3, r2]
 8016f78:	b2db      	uxtb	r3, r3
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	1e5a      	subs	r2, r3, #1
 8016f7e:	4193      	sbcs	r3, r2
 8016f80:	b2db      	uxtb	r3, r3
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d001      	beq.n	8016f8a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016f86:	2301      	movs	r3, #1
 8016f88:	e052      	b.n	8017030 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d104      	bne.n	8016f9a <HAL_TIM_PWM_Start+0x7a>
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	223a      	movs	r2, #58	@ 0x3a
 8016f94:	2102      	movs	r1, #2
 8016f96:	5499      	strb	r1, [r3, r2]
 8016f98:	e013      	b.n	8016fc2 <HAL_TIM_PWM_Start+0xa2>
 8016f9a:	683b      	ldr	r3, [r7, #0]
 8016f9c:	2b04      	cmp	r3, #4
 8016f9e:	d104      	bne.n	8016faa <HAL_TIM_PWM_Start+0x8a>
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	223b      	movs	r2, #59	@ 0x3b
 8016fa4:	2102      	movs	r1, #2
 8016fa6:	5499      	strb	r1, [r3, r2]
 8016fa8:	e00b      	b.n	8016fc2 <HAL_TIM_PWM_Start+0xa2>
 8016faa:	683b      	ldr	r3, [r7, #0]
 8016fac:	2b08      	cmp	r3, #8
 8016fae:	d104      	bne.n	8016fba <HAL_TIM_PWM_Start+0x9a>
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	223c      	movs	r2, #60	@ 0x3c
 8016fb4:	2102      	movs	r1, #2
 8016fb6:	5499      	strb	r1, [r3, r2]
 8016fb8:	e003      	b.n	8016fc2 <HAL_TIM_PWM_Start+0xa2>
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	223d      	movs	r2, #61	@ 0x3d
 8016fbe:	2102      	movs	r1, #2
 8016fc0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	6839      	ldr	r1, [r7, #0]
 8016fc8:	2201      	movs	r2, #1
 8016fca:	0018      	movs	r0, r3
 8016fcc:	f000 fa62 	bl	8017494 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681a      	ldr	r2, [r3, #0]
 8016fd4:	2380      	movs	r3, #128	@ 0x80
 8016fd6:	05db      	lsls	r3, r3, #23
 8016fd8:	429a      	cmp	r2, r3
 8016fda:	d00e      	beq.n	8016ffa <HAL_TIM_PWM_Start+0xda>
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	4a15      	ldr	r2, [pc, #84]	@ (8017038 <HAL_TIM_PWM_Start+0x118>)
 8016fe2:	4293      	cmp	r3, r2
 8016fe4:	d009      	beq.n	8016ffa <HAL_TIM_PWM_Start+0xda>
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	4a14      	ldr	r2, [pc, #80]	@ (801703c <HAL_TIM_PWM_Start+0x11c>)
 8016fec:	4293      	cmp	r3, r2
 8016fee:	d004      	beq.n	8016ffa <HAL_TIM_PWM_Start+0xda>
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	4a12      	ldr	r2, [pc, #72]	@ (8017040 <HAL_TIM_PWM_Start+0x120>)
 8016ff6:	4293      	cmp	r3, r2
 8016ff8:	d111      	bne.n	801701e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	689b      	ldr	r3, [r3, #8]
 8017000:	2207      	movs	r2, #7
 8017002:	4013      	ands	r3, r2
 8017004:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	2b06      	cmp	r3, #6
 801700a:	d010      	beq.n	801702e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	681a      	ldr	r2, [r3, #0]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2101      	movs	r1, #1
 8017018:	430a      	orrs	r2, r1
 801701a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801701c:	e007      	b.n	801702e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	681a      	ldr	r2, [r3, #0]
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	2101      	movs	r1, #1
 801702a:	430a      	orrs	r2, r1
 801702c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801702e:	2300      	movs	r3, #0
}
 8017030:	0018      	movs	r0, r3
 8017032:	46bd      	mov	sp, r7
 8017034:	b004      	add	sp, #16
 8017036:	bd80      	pop	{r7, pc}
 8017038:	40000400 	.word	0x40000400
 801703c:	40010800 	.word	0x40010800
 8017040:	40011400 	.word	0x40011400

08017044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b086      	sub	sp, #24
 8017048:	af00      	add	r7, sp, #0
 801704a:	60f8      	str	r0, [r7, #12]
 801704c:	60b9      	str	r1, [r7, #8]
 801704e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017050:	2317      	movs	r3, #23
 8017052:	18fb      	adds	r3, r7, r3
 8017054:	2200      	movs	r2, #0
 8017056:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	2238      	movs	r2, #56	@ 0x38
 801705c:	5c9b      	ldrb	r3, [r3, r2]
 801705e:	2b01      	cmp	r3, #1
 8017060:	d101      	bne.n	8017066 <HAL_TIM_PWM_ConfigChannel+0x22>
 8017062:	2302      	movs	r3, #2
 8017064:	e0ad      	b.n	80171c2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	2238      	movs	r2, #56	@ 0x38
 801706a:	2101      	movs	r1, #1
 801706c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	2b0c      	cmp	r3, #12
 8017072:	d100      	bne.n	8017076 <HAL_TIM_PWM_ConfigChannel+0x32>
 8017074:	e076      	b.n	8017164 <HAL_TIM_PWM_ConfigChannel+0x120>
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	2b0c      	cmp	r3, #12
 801707a:	d900      	bls.n	801707e <HAL_TIM_PWM_ConfigChannel+0x3a>
 801707c:	e095      	b.n	80171aa <HAL_TIM_PWM_ConfigChannel+0x166>
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2b08      	cmp	r3, #8
 8017082:	d04e      	beq.n	8017122 <HAL_TIM_PWM_ConfigChannel+0xde>
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2b08      	cmp	r3, #8
 8017088:	d900      	bls.n	801708c <HAL_TIM_PWM_ConfigChannel+0x48>
 801708a:	e08e      	b.n	80171aa <HAL_TIM_PWM_ConfigChannel+0x166>
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d003      	beq.n	801709a <HAL_TIM_PWM_ConfigChannel+0x56>
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	2b04      	cmp	r3, #4
 8017096:	d021      	beq.n	80170dc <HAL_TIM_PWM_ConfigChannel+0x98>
 8017098:	e087      	b.n	80171aa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	68ba      	ldr	r2, [r7, #8]
 80170a0:	0011      	movs	r1, r2
 80170a2:	0018      	movs	r0, r3
 80170a4:	f000 f8f2 	bl	801728c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	699a      	ldr	r2, [r3, #24]
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	2108      	movs	r1, #8
 80170b4:	430a      	orrs	r2, r1
 80170b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	699a      	ldr	r2, [r3, #24]
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	2104      	movs	r1, #4
 80170c4:	438a      	bics	r2, r1
 80170c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	6999      	ldr	r1, [r3, #24]
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	68da      	ldr	r2, [r3, #12]
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	430a      	orrs	r2, r1
 80170d8:	619a      	str	r2, [r3, #24]
      break;
 80170da:	e06b      	b.n	80171b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	68ba      	ldr	r2, [r7, #8]
 80170e2:	0011      	movs	r1, r2
 80170e4:	0018      	movs	r0, r3
 80170e6:	f000 f90d 	bl	8017304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	699a      	ldr	r2, [r3, #24]
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	2180      	movs	r1, #128	@ 0x80
 80170f6:	0109      	lsls	r1, r1, #4
 80170f8:	430a      	orrs	r2, r1
 80170fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	699a      	ldr	r2, [r3, #24]
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	4931      	ldr	r1, [pc, #196]	@ (80171cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8017108:	400a      	ands	r2, r1
 801710a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	6999      	ldr	r1, [r3, #24]
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	68db      	ldr	r3, [r3, #12]
 8017116:	021a      	lsls	r2, r3, #8
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	430a      	orrs	r2, r1
 801711e:	619a      	str	r2, [r3, #24]
      break;
 8017120:	e048      	b.n	80171b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	68ba      	ldr	r2, [r7, #8]
 8017128:	0011      	movs	r1, r2
 801712a:	0018      	movs	r0, r3
 801712c:	f000 f92c 	bl	8017388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	69da      	ldr	r2, [r3, #28]
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	2108      	movs	r1, #8
 801713c:	430a      	orrs	r2, r1
 801713e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	69da      	ldr	r2, [r3, #28]
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	2104      	movs	r1, #4
 801714c:	438a      	bics	r2, r1
 801714e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	69d9      	ldr	r1, [r3, #28]
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	68da      	ldr	r2, [r3, #12]
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	430a      	orrs	r2, r1
 8017160:	61da      	str	r2, [r3, #28]
      break;
 8017162:	e027      	b.n	80171b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	68ba      	ldr	r2, [r7, #8]
 801716a:	0011      	movs	r1, r2
 801716c:	0018      	movs	r0, r3
 801716e:	f000 f94b 	bl	8017408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	69da      	ldr	r2, [r3, #28]
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	2180      	movs	r1, #128	@ 0x80
 801717e:	0109      	lsls	r1, r1, #4
 8017180:	430a      	orrs	r2, r1
 8017182:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	69da      	ldr	r2, [r3, #28]
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	490f      	ldr	r1, [pc, #60]	@ (80171cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8017190:	400a      	ands	r2, r1
 8017192:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	69d9      	ldr	r1, [r3, #28]
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	68db      	ldr	r3, [r3, #12]
 801719e:	021a      	lsls	r2, r3, #8
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	430a      	orrs	r2, r1
 80171a6:	61da      	str	r2, [r3, #28]
      break;
 80171a8:	e004      	b.n	80171b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80171aa:	2317      	movs	r3, #23
 80171ac:	18fb      	adds	r3, r7, r3
 80171ae:	2201      	movs	r2, #1
 80171b0:	701a      	strb	r2, [r3, #0]
      break;
 80171b2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	2238      	movs	r2, #56	@ 0x38
 80171b8:	2100      	movs	r1, #0
 80171ba:	5499      	strb	r1, [r3, r2]

  return status;
 80171bc:	2317      	movs	r3, #23
 80171be:	18fb      	adds	r3, r7, r3
 80171c0:	781b      	ldrb	r3, [r3, #0]
}
 80171c2:	0018      	movs	r0, r3
 80171c4:	46bd      	mov	sp, r7
 80171c6:	b006      	add	sp, #24
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	46c0      	nop			@ (mov r8, r8)
 80171cc:	fffffbff 	.word	0xfffffbff

080171d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b084      	sub	sp, #16
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
 80171d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	2380      	movs	r3, #128	@ 0x80
 80171e4:	05db      	lsls	r3, r3, #23
 80171e6:	429a      	cmp	r2, r3
 80171e8:	d00b      	beq.n	8017202 <TIM_Base_SetConfig+0x32>
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	4a23      	ldr	r2, [pc, #140]	@ (801727c <TIM_Base_SetConfig+0xac>)
 80171ee:	4293      	cmp	r3, r2
 80171f0:	d007      	beq.n	8017202 <TIM_Base_SetConfig+0x32>
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	4a22      	ldr	r2, [pc, #136]	@ (8017280 <TIM_Base_SetConfig+0xb0>)
 80171f6:	4293      	cmp	r3, r2
 80171f8:	d003      	beq.n	8017202 <TIM_Base_SetConfig+0x32>
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	4a21      	ldr	r2, [pc, #132]	@ (8017284 <TIM_Base_SetConfig+0xb4>)
 80171fe:	4293      	cmp	r3, r2
 8017200:	d108      	bne.n	8017214 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	2270      	movs	r2, #112	@ 0x70
 8017206:	4393      	bics	r3, r2
 8017208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	685b      	ldr	r3, [r3, #4]
 801720e:	68fa      	ldr	r2, [r7, #12]
 8017210:	4313      	orrs	r3, r2
 8017212:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017214:	687a      	ldr	r2, [r7, #4]
 8017216:	2380      	movs	r3, #128	@ 0x80
 8017218:	05db      	lsls	r3, r3, #23
 801721a:	429a      	cmp	r2, r3
 801721c:	d00b      	beq.n	8017236 <TIM_Base_SetConfig+0x66>
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	4a16      	ldr	r2, [pc, #88]	@ (801727c <TIM_Base_SetConfig+0xac>)
 8017222:	4293      	cmp	r3, r2
 8017224:	d007      	beq.n	8017236 <TIM_Base_SetConfig+0x66>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	4a15      	ldr	r2, [pc, #84]	@ (8017280 <TIM_Base_SetConfig+0xb0>)
 801722a:	4293      	cmp	r3, r2
 801722c:	d003      	beq.n	8017236 <TIM_Base_SetConfig+0x66>
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	4a14      	ldr	r2, [pc, #80]	@ (8017284 <TIM_Base_SetConfig+0xb4>)
 8017232:	4293      	cmp	r3, r2
 8017234:	d108      	bne.n	8017248 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	4a13      	ldr	r2, [pc, #76]	@ (8017288 <TIM_Base_SetConfig+0xb8>)
 801723a:	4013      	ands	r3, r2
 801723c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	68db      	ldr	r3, [r3, #12]
 8017242:	68fa      	ldr	r2, [r7, #12]
 8017244:	4313      	orrs	r3, r2
 8017246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	2280      	movs	r2, #128	@ 0x80
 801724c:	4393      	bics	r3, r2
 801724e:	001a      	movs	r2, r3
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	691b      	ldr	r3, [r3, #16]
 8017254:	4313      	orrs	r3, r2
 8017256:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	68fa      	ldr	r2, [r7, #12]
 801725c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	689a      	ldr	r2, [r3, #8]
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	681a      	ldr	r2, [r3, #0]
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	2201      	movs	r2, #1
 8017272:	615a      	str	r2, [r3, #20]
}
 8017274:	46c0      	nop			@ (mov r8, r8)
 8017276:	46bd      	mov	sp, r7
 8017278:	b004      	add	sp, #16
 801727a:	bd80      	pop	{r7, pc}
 801727c:	40000400 	.word	0x40000400
 8017280:	40010800 	.word	0x40010800
 8017284:	40011400 	.word	0x40011400
 8017288:	fffffcff 	.word	0xfffffcff

0801728c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6a1b      	ldr	r3, [r3, #32]
 801729a:	2201      	movs	r2, #1
 801729c:	4393      	bics	r3, r2
 801729e:	001a      	movs	r2, r3
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	6a1b      	ldr	r3, [r3, #32]
 80172a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	699b      	ldr	r3, [r3, #24]
 80172b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	2270      	movs	r2, #112	@ 0x70
 80172ba:	4393      	bics	r3, r2
 80172bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	2203      	movs	r2, #3
 80172c2:	4393      	bics	r3, r2
 80172c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	68fa      	ldr	r2, [r7, #12]
 80172cc:	4313      	orrs	r3, r2
 80172ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80172d0:	697b      	ldr	r3, [r7, #20]
 80172d2:	2202      	movs	r2, #2
 80172d4:	4393      	bics	r3, r2
 80172d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	689b      	ldr	r3, [r3, #8]
 80172dc:	697a      	ldr	r2, [r7, #20]
 80172de:	4313      	orrs	r3, r2
 80172e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	693a      	ldr	r2, [r7, #16]
 80172e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	68fa      	ldr	r2, [r7, #12]
 80172ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	685a      	ldr	r2, [r3, #4]
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	697a      	ldr	r2, [r7, #20]
 80172fa:	621a      	str	r2, [r3, #32]
}
 80172fc:	46c0      	nop			@ (mov r8, r8)
 80172fe:	46bd      	mov	sp, r7
 8017300:	b006      	add	sp, #24
 8017302:	bd80      	pop	{r7, pc}

08017304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b086      	sub	sp, #24
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	6a1b      	ldr	r3, [r3, #32]
 8017312:	2210      	movs	r2, #16
 8017314:	4393      	bics	r3, r2
 8017316:	001a      	movs	r2, r3
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6a1b      	ldr	r3, [r3, #32]
 8017320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	685b      	ldr	r3, [r3, #4]
 8017326:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	699b      	ldr	r3, [r3, #24]
 801732c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	4a13      	ldr	r2, [pc, #76]	@ (8017380 <TIM_OC2_SetConfig+0x7c>)
 8017332:	4013      	ands	r3, r2
 8017334:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	4a12      	ldr	r2, [pc, #72]	@ (8017384 <TIM_OC2_SetConfig+0x80>)
 801733a:	4013      	ands	r3, r2
 801733c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	021b      	lsls	r3, r3, #8
 8017344:	68fa      	ldr	r2, [r7, #12]
 8017346:	4313      	orrs	r3, r2
 8017348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801734a:	697b      	ldr	r3, [r7, #20]
 801734c:	2220      	movs	r2, #32
 801734e:	4393      	bics	r3, r2
 8017350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017352:	683b      	ldr	r3, [r7, #0]
 8017354:	689b      	ldr	r3, [r3, #8]
 8017356:	011b      	lsls	r3, r3, #4
 8017358:	697a      	ldr	r2, [r7, #20]
 801735a:	4313      	orrs	r3, r2
 801735c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	693a      	ldr	r2, [r7, #16]
 8017362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	68fa      	ldr	r2, [r7, #12]
 8017368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801736a:	683b      	ldr	r3, [r7, #0]
 801736c:	685a      	ldr	r2, [r3, #4]
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	697a      	ldr	r2, [r7, #20]
 8017376:	621a      	str	r2, [r3, #32]
}
 8017378:	46c0      	nop			@ (mov r8, r8)
 801737a:	46bd      	mov	sp, r7
 801737c:	b006      	add	sp, #24
 801737e:	bd80      	pop	{r7, pc}
 8017380:	ffff8fff 	.word	0xffff8fff
 8017384:	fffffcff 	.word	0xfffffcff

08017388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b086      	sub	sp, #24
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6a1b      	ldr	r3, [r3, #32]
 8017396:	4a1a      	ldr	r2, [pc, #104]	@ (8017400 <TIM_OC3_SetConfig+0x78>)
 8017398:	401a      	ands	r2, r3
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	6a1b      	ldr	r3, [r3, #32]
 80173a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	69db      	ldr	r3, [r3, #28]
 80173ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	2270      	movs	r2, #112	@ 0x70
 80173b4:	4393      	bics	r3, r2
 80173b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	2203      	movs	r2, #3
 80173bc:	4393      	bics	r3, r2
 80173be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80173c0:	683b      	ldr	r3, [r7, #0]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	68fa      	ldr	r2, [r7, #12]
 80173c6:	4313      	orrs	r3, r2
 80173c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	4a0d      	ldr	r2, [pc, #52]	@ (8017404 <TIM_OC3_SetConfig+0x7c>)
 80173ce:	4013      	ands	r3, r2
 80173d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80173d2:	683b      	ldr	r3, [r7, #0]
 80173d4:	689b      	ldr	r3, [r3, #8]
 80173d6:	021b      	lsls	r3, r3, #8
 80173d8:	697a      	ldr	r2, [r7, #20]
 80173da:	4313      	orrs	r3, r2
 80173dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	693a      	ldr	r2, [r7, #16]
 80173e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	68fa      	ldr	r2, [r7, #12]
 80173e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	685a      	ldr	r2, [r3, #4]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	697a      	ldr	r2, [r7, #20]
 80173f6:	621a      	str	r2, [r3, #32]
}
 80173f8:	46c0      	nop			@ (mov r8, r8)
 80173fa:	46bd      	mov	sp, r7
 80173fc:	b006      	add	sp, #24
 80173fe:	bd80      	pop	{r7, pc}
 8017400:	fffffeff 	.word	0xfffffeff
 8017404:	fffffdff 	.word	0xfffffdff

08017408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b086      	sub	sp, #24
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
 8017410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	6a1b      	ldr	r3, [r3, #32]
 8017416:	4a1b      	ldr	r2, [pc, #108]	@ (8017484 <TIM_OC4_SetConfig+0x7c>)
 8017418:	401a      	ands	r2, r3
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	6a1b      	ldr	r3, [r3, #32]
 8017422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	69db      	ldr	r3, [r3, #28]
 801742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	4a15      	ldr	r2, [pc, #84]	@ (8017488 <TIM_OC4_SetConfig+0x80>)
 8017434:	4013      	ands	r3, r2
 8017436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	4a14      	ldr	r2, [pc, #80]	@ (801748c <TIM_OC4_SetConfig+0x84>)
 801743c:	4013      	ands	r3, r2
 801743e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017440:	683b      	ldr	r3, [r7, #0]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	021b      	lsls	r3, r3, #8
 8017446:	68fa      	ldr	r2, [r7, #12]
 8017448:	4313      	orrs	r3, r2
 801744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801744c:	697b      	ldr	r3, [r7, #20]
 801744e:	4a10      	ldr	r2, [pc, #64]	@ (8017490 <TIM_OC4_SetConfig+0x88>)
 8017450:	4013      	ands	r3, r2
 8017452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	689b      	ldr	r3, [r3, #8]
 8017458:	031b      	lsls	r3, r3, #12
 801745a:	697a      	ldr	r2, [r7, #20]
 801745c:	4313      	orrs	r3, r2
 801745e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	693a      	ldr	r2, [r7, #16]
 8017464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	68fa      	ldr	r2, [r7, #12]
 801746a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	685a      	ldr	r2, [r3, #4]
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	697a      	ldr	r2, [r7, #20]
 8017478:	621a      	str	r2, [r3, #32]
}
 801747a:	46c0      	nop			@ (mov r8, r8)
 801747c:	46bd      	mov	sp, r7
 801747e:	b006      	add	sp, #24
 8017480:	bd80      	pop	{r7, pc}
 8017482:	46c0      	nop			@ (mov r8, r8)
 8017484:	ffffefff 	.word	0xffffefff
 8017488:	ffff8fff 	.word	0xffff8fff
 801748c:	fffffcff 	.word	0xfffffcff
 8017490:	ffffdfff 	.word	0xffffdfff

08017494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b086      	sub	sp, #24
 8017498:	af00      	add	r7, sp, #0
 801749a:	60f8      	str	r0, [r7, #12]
 801749c:	60b9      	str	r1, [r7, #8]
 801749e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	221f      	movs	r2, #31
 80174a4:	4013      	ands	r3, r2
 80174a6:	2201      	movs	r2, #1
 80174a8:	409a      	lsls	r2, r3
 80174aa:	0013      	movs	r3, r2
 80174ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	6a1b      	ldr	r3, [r3, #32]
 80174b2:	697a      	ldr	r2, [r7, #20]
 80174b4:	43d2      	mvns	r2, r2
 80174b6:	401a      	ands	r2, r3
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	6a1a      	ldr	r2, [r3, #32]
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	211f      	movs	r1, #31
 80174c4:	400b      	ands	r3, r1
 80174c6:	6879      	ldr	r1, [r7, #4]
 80174c8:	4099      	lsls	r1, r3
 80174ca:	000b      	movs	r3, r1
 80174cc:	431a      	orrs	r2, r3
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	621a      	str	r2, [r3, #32]
}
 80174d2:	46c0      	nop			@ (mov r8, r8)
 80174d4:	46bd      	mov	sp, r7
 80174d6:	b006      	add	sp, #24
 80174d8:	bd80      	pop	{r7, pc}
	...

080174dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b084      	sub	sp, #16
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2238      	movs	r2, #56	@ 0x38
 80174ea:	5c9b      	ldrb	r3, [r3, r2]
 80174ec:	2b01      	cmp	r3, #1
 80174ee:	d101      	bne.n	80174f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80174f0:	2302      	movs	r3, #2
 80174f2:	e047      	b.n	8017584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2238      	movs	r2, #56	@ 0x38
 80174f8:	2101      	movs	r1, #1
 80174fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	2239      	movs	r2, #57	@ 0x39
 8017500:	2102      	movs	r1, #2
 8017502:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	689b      	ldr	r3, [r3, #8]
 8017512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	2270      	movs	r2, #112	@ 0x70
 8017518:	4393      	bics	r3, r2
 801751a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801751c:	683b      	ldr	r3, [r7, #0]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	68fa      	ldr	r2, [r7, #12]
 8017522:	4313      	orrs	r3, r2
 8017524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	68fa      	ldr	r2, [r7, #12]
 801752c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681a      	ldr	r2, [r3, #0]
 8017532:	2380      	movs	r3, #128	@ 0x80
 8017534:	05db      	lsls	r3, r3, #23
 8017536:	429a      	cmp	r2, r3
 8017538:	d00e      	beq.n	8017558 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	4a13      	ldr	r2, [pc, #76]	@ (801758c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8017540:	4293      	cmp	r3, r2
 8017542:	d009      	beq.n	8017558 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	4a11      	ldr	r2, [pc, #68]	@ (8017590 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801754a:	4293      	cmp	r3, r2
 801754c:	d004      	beq.n	8017558 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	4a10      	ldr	r2, [pc, #64]	@ (8017594 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8017554:	4293      	cmp	r3, r2
 8017556:	d10c      	bne.n	8017572 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	2280      	movs	r2, #128	@ 0x80
 801755c:	4393      	bics	r3, r2
 801755e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	68ba      	ldr	r2, [r7, #8]
 8017566:	4313      	orrs	r3, r2
 8017568:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	68ba      	ldr	r2, [r7, #8]
 8017570:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2239      	movs	r2, #57	@ 0x39
 8017576:	2101      	movs	r1, #1
 8017578:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	2238      	movs	r2, #56	@ 0x38
 801757e:	2100      	movs	r1, #0
 8017580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017582:	2300      	movs	r3, #0
}
 8017584:	0018      	movs	r0, r3
 8017586:	46bd      	mov	sp, r7
 8017588:	b004      	add	sp, #16
 801758a:	bd80      	pop	{r7, pc}
 801758c:	40000400 	.word	0x40000400
 8017590:	40010800 	.word	0x40010800
 8017594:	40011400 	.word	0x40011400

08017598 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	2238      	movs	r2, #56	@ 0x38
 80175a6:	5c9b      	ldrb	r3, [r3, r2]
 80175a8:	2b01      	cmp	r3, #1
 80175aa:	d101      	bne.n	80175b0 <HAL_TIMEx_RemapConfig+0x18>
 80175ac:	2302      	movs	r3, #2
 80175ae:	e00c      	b.n	80175ca <HAL_TIMEx_RemapConfig+0x32>
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2238      	movs	r2, #56	@ 0x38
 80175b4:	2101      	movs	r1, #1
 80175b6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	683a      	ldr	r2, [r7, #0]
 80175be:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2238      	movs	r2, #56	@ 0x38
 80175c4:	2100      	movs	r1, #0
 80175c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80175c8:	2300      	movs	r3, #0
}
 80175ca:	0018      	movs	r0, r3
 80175cc:	46bd      	mov	sp, r7
 80175ce:	b002      	add	sp, #8
 80175d0:	bd80      	pop	{r7, pc}
	...

080175d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b082      	sub	sp, #8
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d101      	bne.n	80175e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80175e2:	2301      	movs	r3, #1
 80175e4:	e053      	b.n	801768e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d116      	bne.n	801761c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2278      	movs	r2, #120	@ 0x78
 80175f2:	2100      	movs	r1, #0
 80175f4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	0018      	movs	r0, r3
 80175fa:	f000 fd65 	bl	80180c8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	22b0      	movs	r2, #176	@ 0xb0
 8017602:	589b      	ldr	r3, [r3, r2]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d103      	bne.n	8017610 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	21b0      	movs	r1, #176	@ 0xb0
 801760c:	4a22      	ldr	r2, [pc, #136]	@ (8017698 <HAL_UART_Init+0xc4>)
 801760e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	22b0      	movs	r2, #176	@ 0xb0
 8017614:	589b      	ldr	r3, [r3, r2]
 8017616:	687a      	ldr	r2, [r7, #4]
 8017618:	0010      	movs	r0, r2
 801761a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2224      	movs	r2, #36	@ 0x24
 8017620:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	681a      	ldr	r2, [r3, #0]
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	2101      	movs	r1, #1
 801762e:	438a      	bics	r2, r1
 8017630:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	0018      	movs	r0, r3
 8017636:	f000 fd8b 	bl	8018150 <UART_SetConfig>
 801763a:	0003      	movs	r3, r0
 801763c:	2b01      	cmp	r3, #1
 801763e:	d101      	bne.n	8017644 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8017640:	2301      	movs	r3, #1
 8017642:	e024      	b.n	801768e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017648:	2b00      	cmp	r3, #0
 801764a:	d003      	beq.n	8017654 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	0018      	movs	r0, r3
 8017650:	f001 f81c 	bl	801868c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	685a      	ldr	r2, [r3, #4]
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	490f      	ldr	r1, [pc, #60]	@ (801769c <HAL_UART_Init+0xc8>)
 8017660:	400a      	ands	r2, r1
 8017662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	689a      	ldr	r2, [r3, #8]
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	212a      	movs	r1, #42	@ 0x2a
 8017670:	438a      	bics	r2, r1
 8017672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	681a      	ldr	r2, [r3, #0]
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	2101      	movs	r1, #1
 8017680:	430a      	orrs	r2, r1
 8017682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	0018      	movs	r0, r3
 8017688:	f001 f8b4 	bl	80187f4 <UART_CheckIdleState>
 801768c:	0003      	movs	r3, r0
}
 801768e:	0018      	movs	r0, r3
 8017690:	46bd      	mov	sp, r7
 8017692:	b002      	add	sp, #8
 8017694:	bd80      	pop	{r7, pc}
 8017696:	46c0      	nop			@ (mov r8, r8)
 8017698:	0800e6a5 	.word	0x0800e6a5
 801769c:	ffffb7ff 	.word	0xffffb7ff

080176a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b08a      	sub	sp, #40	@ 0x28
 80176a4:	af02      	add	r7, sp, #8
 80176a6:	60f8      	str	r0, [r7, #12]
 80176a8:	60b9      	str	r1, [r7, #8]
 80176aa:	603b      	str	r3, [r7, #0]
 80176ac:	1dbb      	adds	r3, r7, #6
 80176ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80176b4:	2b20      	cmp	r3, #32
 80176b6:	d000      	beq.n	80176ba <HAL_UART_Transmit+0x1a>
 80176b8:	e08c      	b.n	80177d4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80176ba:	68bb      	ldr	r3, [r7, #8]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d003      	beq.n	80176c8 <HAL_UART_Transmit+0x28>
 80176c0:	1dbb      	adds	r3, r7, #6
 80176c2:	881b      	ldrh	r3, [r3, #0]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d101      	bne.n	80176cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80176c8:	2301      	movs	r3, #1
 80176ca:	e084      	b.n	80177d6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	689a      	ldr	r2, [r3, #8]
 80176d0:	2380      	movs	r3, #128	@ 0x80
 80176d2:	015b      	lsls	r3, r3, #5
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d109      	bne.n	80176ec <HAL_UART_Transmit+0x4c>
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	691b      	ldr	r3, [r3, #16]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d105      	bne.n	80176ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	2201      	movs	r2, #1
 80176e4:	4013      	ands	r3, r2
 80176e6:	d001      	beq.n	80176ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80176e8:	2301      	movs	r3, #1
 80176ea:	e074      	b.n	80177d6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2284      	movs	r2, #132	@ 0x84
 80176f0:	2100      	movs	r1, #0
 80176f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	2221      	movs	r2, #33	@ 0x21
 80176f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80176fa:	f7f7 fda5 	bl	800f248 <HAL_GetTick>
 80176fe:	0003      	movs	r3, r0
 8017700:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	1dba      	adds	r2, r7, #6
 8017706:	2150      	movs	r1, #80	@ 0x50
 8017708:	8812      	ldrh	r2, [r2, #0]
 801770a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	1dba      	adds	r2, r7, #6
 8017710:	2152      	movs	r1, #82	@ 0x52
 8017712:	8812      	ldrh	r2, [r2, #0]
 8017714:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	689a      	ldr	r2, [r3, #8]
 801771a:	2380      	movs	r3, #128	@ 0x80
 801771c:	015b      	lsls	r3, r3, #5
 801771e:	429a      	cmp	r2, r3
 8017720:	d108      	bne.n	8017734 <HAL_UART_Transmit+0x94>
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	691b      	ldr	r3, [r3, #16]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d104      	bne.n	8017734 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801772a:	2300      	movs	r3, #0
 801772c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	61bb      	str	r3, [r7, #24]
 8017732:	e003      	b.n	801773c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017734:	68bb      	ldr	r3, [r7, #8]
 8017736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017738:	2300      	movs	r3, #0
 801773a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801773c:	e02f      	b.n	801779e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801773e:	697a      	ldr	r2, [r7, #20]
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	9300      	str	r3, [sp, #0]
 8017746:	0013      	movs	r3, r2
 8017748:	2200      	movs	r2, #0
 801774a:	2180      	movs	r1, #128	@ 0x80
 801774c:	f001 f8fa 	bl	8018944 <UART_WaitOnFlagUntilTimeout>
 8017750:	1e03      	subs	r3, r0, #0
 8017752:	d004      	beq.n	801775e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2220      	movs	r2, #32
 8017758:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801775a:	2303      	movs	r3, #3
 801775c:	e03b      	b.n	80177d6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801775e:	69fb      	ldr	r3, [r7, #28]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d10b      	bne.n	801777c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	881b      	ldrh	r3, [r3, #0]
 8017768:	001a      	movs	r2, r3
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	05d2      	lsls	r2, r2, #23
 8017770:	0dd2      	lsrs	r2, r2, #23
 8017772:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017774:	69bb      	ldr	r3, [r7, #24]
 8017776:	3302      	adds	r3, #2
 8017778:	61bb      	str	r3, [r7, #24]
 801777a:	e007      	b.n	801778c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801777c:	69fb      	ldr	r3, [r7, #28]
 801777e:	781a      	ldrb	r2, [r3, #0]
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017786:	69fb      	ldr	r3, [r7, #28]
 8017788:	3301      	adds	r3, #1
 801778a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	2252      	movs	r2, #82	@ 0x52
 8017790:	5a9b      	ldrh	r3, [r3, r2]
 8017792:	b29b      	uxth	r3, r3
 8017794:	3b01      	subs	r3, #1
 8017796:	b299      	uxth	r1, r3
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	2252      	movs	r2, #82	@ 0x52
 801779c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	2252      	movs	r2, #82	@ 0x52
 80177a2:	5a9b      	ldrh	r3, [r3, r2]
 80177a4:	b29b      	uxth	r3, r3
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d1c9      	bne.n	801773e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80177aa:	697a      	ldr	r2, [r7, #20]
 80177ac:	68f8      	ldr	r0, [r7, #12]
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	9300      	str	r3, [sp, #0]
 80177b2:	0013      	movs	r3, r2
 80177b4:	2200      	movs	r2, #0
 80177b6:	2140      	movs	r1, #64	@ 0x40
 80177b8:	f001 f8c4 	bl	8018944 <UART_WaitOnFlagUntilTimeout>
 80177bc:	1e03      	subs	r3, r0, #0
 80177be:	d004      	beq.n	80177ca <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	2220      	movs	r2, #32
 80177c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80177c6:	2303      	movs	r3, #3
 80177c8:	e005      	b.n	80177d6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	2220      	movs	r2, #32
 80177ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80177d0:	2300      	movs	r3, #0
 80177d2:	e000      	b.n	80177d6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80177d4:	2302      	movs	r3, #2
  }
}
 80177d6:	0018      	movs	r0, r3
 80177d8:	46bd      	mov	sp, r7
 80177da:	b008      	add	sp, #32
 80177dc:	bd80      	pop	{r7, pc}
	...

080177e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b088      	sub	sp, #32
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	60f8      	str	r0, [r7, #12]
 80177e8:	60b9      	str	r1, [r7, #8]
 80177ea:	1dbb      	adds	r3, r7, #6
 80177ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	2280      	movs	r2, #128	@ 0x80
 80177f2:	589b      	ldr	r3, [r3, r2]
 80177f4:	2b20      	cmp	r3, #32
 80177f6:	d14a      	bne.n	801788e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80177f8:	68bb      	ldr	r3, [r7, #8]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d003      	beq.n	8017806 <HAL_UART_Receive_IT+0x26>
 80177fe:	1dbb      	adds	r3, r7, #6
 8017800:	881b      	ldrh	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d101      	bne.n	801780a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8017806:	2301      	movs	r3, #1
 8017808:	e042      	b.n	8017890 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	689a      	ldr	r2, [r3, #8]
 801780e:	2380      	movs	r3, #128	@ 0x80
 8017810:	015b      	lsls	r3, r3, #5
 8017812:	429a      	cmp	r2, r3
 8017814:	d109      	bne.n	801782a <HAL_UART_Receive_IT+0x4a>
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	691b      	ldr	r3, [r3, #16]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d105      	bne.n	801782a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801781e:	68bb      	ldr	r3, [r7, #8]
 8017820:	2201      	movs	r2, #1
 8017822:	4013      	ands	r3, r2
 8017824:	d001      	beq.n	801782a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8017826:	2301      	movs	r3, #1
 8017828:	e032      	b.n	8017890 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	2200      	movs	r2, #0
 801782e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	4a18      	ldr	r2, [pc, #96]	@ (8017898 <HAL_UART_Receive_IT+0xb8>)
 8017836:	4293      	cmp	r3, r2
 8017838:	d020      	beq.n	801787c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	685a      	ldr	r2, [r3, #4]
 8017840:	2380      	movs	r3, #128	@ 0x80
 8017842:	041b      	lsls	r3, r3, #16
 8017844:	4013      	ands	r3, r2
 8017846:	d019      	beq.n	801787c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017848:	f3ef 8310 	mrs	r3, PRIMASK
 801784c:	613b      	str	r3, [r7, #16]
  return(result);
 801784e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017850:	61fb      	str	r3, [r7, #28]
 8017852:	2301      	movs	r3, #1
 8017854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	f383 8810 	msr	PRIMASK, r3
}
 801785c:	46c0      	nop			@ (mov r8, r8)
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	681a      	ldr	r2, [r3, #0]
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	2180      	movs	r1, #128	@ 0x80
 801786a:	04c9      	lsls	r1, r1, #19
 801786c:	430a      	orrs	r2, r1
 801786e:	601a      	str	r2, [r3, #0]
 8017870:	69fb      	ldr	r3, [r7, #28]
 8017872:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017874:	69bb      	ldr	r3, [r7, #24]
 8017876:	f383 8810 	msr	PRIMASK, r3
}
 801787a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801787c:	1dbb      	adds	r3, r7, #6
 801787e:	881a      	ldrh	r2, [r3, #0]
 8017880:	68b9      	ldr	r1, [r7, #8]
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	0018      	movs	r0, r3
 8017886:	f001 f8c7 	bl	8018a18 <UART_Start_Receive_IT>
 801788a:	0003      	movs	r3, r0
 801788c:	e000      	b.n	8017890 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801788e:	2302      	movs	r3, #2
  }
}
 8017890:	0018      	movs	r0, r3
 8017892:	46bd      	mov	sp, r7
 8017894:	b008      	add	sp, #32
 8017896:	bd80      	pop	{r7, pc}
 8017898:	40004800 	.word	0x40004800

0801789c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b088      	sub	sp, #32
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	1dbb      	adds	r3, r7, #6
 80178a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80178ae:	2b20      	cmp	r3, #32
 80178b0:	d000      	beq.n	80178b4 <HAL_UART_Transmit_DMA+0x18>
 80178b2:	e077      	b.n	80179a4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80178b4:	68bb      	ldr	r3, [r7, #8]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d003      	beq.n	80178c2 <HAL_UART_Transmit_DMA+0x26>
 80178ba:	1dbb      	adds	r3, r7, #6
 80178bc:	881b      	ldrh	r3, [r3, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d101      	bne.n	80178c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80178c2:	2301      	movs	r3, #1
 80178c4:	e06f      	b.n	80179a6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	689a      	ldr	r2, [r3, #8]
 80178ca:	2380      	movs	r3, #128	@ 0x80
 80178cc:	015b      	lsls	r3, r3, #5
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d109      	bne.n	80178e6 <HAL_UART_Transmit_DMA+0x4a>
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	691b      	ldr	r3, [r3, #16]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d105      	bne.n	80178e6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	2201      	movs	r2, #1
 80178de:	4013      	ands	r3, r2
 80178e0:	d001      	beq.n	80178e6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80178e2:	2301      	movs	r3, #1
 80178e4:	e05f      	b.n	80179a6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	68ba      	ldr	r2, [r7, #8]
 80178ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	1dba      	adds	r2, r7, #6
 80178f0:	2150      	movs	r1, #80	@ 0x50
 80178f2:	8812      	ldrh	r2, [r2, #0]
 80178f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	1dba      	adds	r2, r7, #6
 80178fa:	2152      	movs	r1, #82	@ 0x52
 80178fc:	8812      	ldrh	r2, [r2, #0]
 80178fe:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	2284      	movs	r2, #132	@ 0x84
 8017904:	2100      	movs	r1, #0
 8017906:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	2221      	movs	r2, #33	@ 0x21
 801790c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017912:	2b00      	cmp	r3, #0
 8017914:	d027      	beq.n	8017966 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801791a:	4a25      	ldr	r2, [pc, #148]	@ (80179b0 <HAL_UART_Transmit_DMA+0x114>)
 801791c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017922:	4a24      	ldr	r2, [pc, #144]	@ (80179b4 <HAL_UART_Transmit_DMA+0x118>)
 8017924:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801792a:	4a23      	ldr	r2, [pc, #140]	@ (80179b8 <HAL_UART_Transmit_DMA+0x11c>)
 801792c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017932:	2200      	movs	r2, #0
 8017934:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801793e:	0019      	movs	r1, r3
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	3328      	adds	r3, #40	@ 0x28
 8017946:	001a      	movs	r2, r3
 8017948:	1dbb      	adds	r3, r7, #6
 801794a:	881b      	ldrh	r3, [r3, #0]
 801794c:	f7f8 f9ce 	bl	800fcec <HAL_DMA_Start_IT>
 8017950:	1e03      	subs	r3, r0, #0
 8017952:	d008      	beq.n	8017966 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	2284      	movs	r2, #132	@ 0x84
 8017958:	2110      	movs	r1, #16
 801795a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	2220      	movs	r2, #32
 8017960:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8017962:	2301      	movs	r3, #1
 8017964:	e01f      	b.n	80179a6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	2240      	movs	r2, #64	@ 0x40
 801796c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801796e:	f3ef 8310 	mrs	r3, PRIMASK
 8017972:	613b      	str	r3, [r7, #16]
  return(result);
 8017974:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017976:	61fb      	str	r3, [r7, #28]
 8017978:	2301      	movs	r3, #1
 801797a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801797c:	697b      	ldr	r3, [r7, #20]
 801797e:	f383 8810 	msr	PRIMASK, r3
}
 8017982:	46c0      	nop			@ (mov r8, r8)
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	689a      	ldr	r2, [r3, #8]
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	2180      	movs	r1, #128	@ 0x80
 8017990:	430a      	orrs	r2, r1
 8017992:	609a      	str	r2, [r3, #8]
 8017994:	69fb      	ldr	r3, [r7, #28]
 8017996:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017998:	69bb      	ldr	r3, [r7, #24]
 801799a:	f383 8810 	msr	PRIMASK, r3
}
 801799e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80179a0:	2300      	movs	r3, #0
 80179a2:	e000      	b.n	80179a6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80179a4:	2302      	movs	r3, #2
  }
}
 80179a6:	0018      	movs	r0, r3
 80179a8:	46bd      	mov	sp, r7
 80179aa:	b008      	add	sp, #32
 80179ac:	bd80      	pop	{r7, pc}
 80179ae:	46c0      	nop			@ (mov r8, r8)
 80179b0:	08018dfd 	.word	0x08018dfd
 80179b4:	08018e99 	.word	0x08018e99
 80179b8:	08019039 	.word	0x08019039

080179bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b088      	sub	sp, #32
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	1dbb      	adds	r3, r7, #6
 80179c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	2280      	movs	r2, #128	@ 0x80
 80179ce:	589b      	ldr	r3, [r3, r2]
 80179d0:	2b20      	cmp	r3, #32
 80179d2:	d14a      	bne.n	8017a6a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d003      	beq.n	80179e2 <HAL_UART_Receive_DMA+0x26>
 80179da:	1dbb      	adds	r3, r7, #6
 80179dc:	881b      	ldrh	r3, [r3, #0]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d101      	bne.n	80179e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80179e2:	2301      	movs	r3, #1
 80179e4:	e042      	b.n	8017a6c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	689a      	ldr	r2, [r3, #8]
 80179ea:	2380      	movs	r3, #128	@ 0x80
 80179ec:	015b      	lsls	r3, r3, #5
 80179ee:	429a      	cmp	r2, r3
 80179f0:	d109      	bne.n	8017a06 <HAL_UART_Receive_DMA+0x4a>
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	691b      	ldr	r3, [r3, #16]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d105      	bne.n	8017a06 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	2201      	movs	r2, #1
 80179fe:	4013      	ands	r3, r2
 8017a00:	d001      	beq.n	8017a06 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8017a02:	2301      	movs	r3, #1
 8017a04:	e032      	b.n	8017a6c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	2200      	movs	r2, #0
 8017a0a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	4a18      	ldr	r2, [pc, #96]	@ (8017a74 <HAL_UART_Receive_DMA+0xb8>)
 8017a12:	4293      	cmp	r3, r2
 8017a14:	d020      	beq.n	8017a58 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	685a      	ldr	r2, [r3, #4]
 8017a1c:	2380      	movs	r3, #128	@ 0x80
 8017a1e:	041b      	lsls	r3, r3, #16
 8017a20:	4013      	ands	r3, r2
 8017a22:	d019      	beq.n	8017a58 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a24:	f3ef 8310 	mrs	r3, PRIMASK
 8017a28:	613b      	str	r3, [r7, #16]
  return(result);
 8017a2a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017a2c:	61fb      	str	r3, [r7, #28]
 8017a2e:	2301      	movs	r3, #1
 8017a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	f383 8810 	msr	PRIMASK, r3
}
 8017a38:	46c0      	nop			@ (mov r8, r8)
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	681a      	ldr	r2, [r3, #0]
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2180      	movs	r1, #128	@ 0x80
 8017a46:	04c9      	lsls	r1, r1, #19
 8017a48:	430a      	orrs	r2, r1
 8017a4a:	601a      	str	r2, [r3, #0]
 8017a4c:	69fb      	ldr	r3, [r7, #28]
 8017a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a50:	69bb      	ldr	r3, [r7, #24]
 8017a52:	f383 8810 	msr	PRIMASK, r3
}
 8017a56:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8017a58:	1dbb      	adds	r3, r7, #6
 8017a5a:	881a      	ldrh	r2, [r3, #0]
 8017a5c:	68b9      	ldr	r1, [r7, #8]
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	0018      	movs	r0, r3
 8017a62:	f001 f8a3 	bl	8018bac <UART_Start_Receive_DMA>
 8017a66:	0003      	movs	r3, r0
 8017a68:	e000      	b.n	8017a6c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017a6a:	2302      	movs	r3, #2
  }
}
 8017a6c:	0018      	movs	r0, r3
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	b008      	add	sp, #32
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	40004800 	.word	0x40004800

08017a78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017a78:	b590      	push	{r4, r7, lr}
 8017a7a:	b0ab      	sub	sp, #172	@ 0xac
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	69db      	ldr	r3, [r3, #28]
 8017a86:	22a4      	movs	r2, #164	@ 0xa4
 8017a88:	18b9      	adds	r1, r7, r2
 8017a8a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	20a0      	movs	r0, #160	@ 0xa0
 8017a94:	1839      	adds	r1, r7, r0
 8017a96:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	689b      	ldr	r3, [r3, #8]
 8017a9e:	219c      	movs	r1, #156	@ 0x9c
 8017aa0:	1879      	adds	r1, r7, r1
 8017aa2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017aa4:	0011      	movs	r1, r2
 8017aa6:	18bb      	adds	r3, r7, r2
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	4a9c      	ldr	r2, [pc, #624]	@ (8017d1c <HAL_UART_IRQHandler+0x2a4>)
 8017aac:	4013      	ands	r3, r2
 8017aae:	2298      	movs	r2, #152	@ 0x98
 8017ab0:	18bc      	adds	r4, r7, r2
 8017ab2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8017ab4:	18bb      	adds	r3, r7, r2
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d114      	bne.n	8017ae6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8017abc:	187b      	adds	r3, r7, r1
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2220      	movs	r2, #32
 8017ac2:	4013      	ands	r3, r2
 8017ac4:	d00f      	beq.n	8017ae6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017ac6:	183b      	adds	r3, r7, r0
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	2220      	movs	r2, #32
 8017acc:	4013      	ands	r3, r2
 8017ace:	d00a      	beq.n	8017ae6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d100      	bne.n	8017ada <HAL_UART_IRQHandler+0x62>
 8017ad8:	e2aa      	b.n	8018030 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017ade:	687a      	ldr	r2, [r7, #4]
 8017ae0:	0010      	movs	r0, r2
 8017ae2:	4798      	blx	r3
      }
      return;
 8017ae4:	e2a4      	b.n	8018030 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017ae6:	2398      	movs	r3, #152	@ 0x98
 8017ae8:	18fb      	adds	r3, r7, r3
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d100      	bne.n	8017af2 <HAL_UART_IRQHandler+0x7a>
 8017af0:	e11a      	b.n	8017d28 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8017af2:	239c      	movs	r3, #156	@ 0x9c
 8017af4:	18fb      	adds	r3, r7, r3
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	2201      	movs	r2, #1
 8017afa:	4013      	ands	r3, r2
 8017afc:	d106      	bne.n	8017b0c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8017afe:	23a0      	movs	r3, #160	@ 0xa0
 8017b00:	18fb      	adds	r3, r7, r3
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	4a86      	ldr	r2, [pc, #536]	@ (8017d20 <HAL_UART_IRQHandler+0x2a8>)
 8017b06:	4013      	ands	r3, r2
 8017b08:	d100      	bne.n	8017b0c <HAL_UART_IRQHandler+0x94>
 8017b0a:	e10d      	b.n	8017d28 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017b0c:	23a4      	movs	r3, #164	@ 0xa4
 8017b0e:	18fb      	adds	r3, r7, r3
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	2201      	movs	r2, #1
 8017b14:	4013      	ands	r3, r2
 8017b16:	d012      	beq.n	8017b3e <HAL_UART_IRQHandler+0xc6>
 8017b18:	23a0      	movs	r3, #160	@ 0xa0
 8017b1a:	18fb      	adds	r3, r7, r3
 8017b1c:	681a      	ldr	r2, [r3, #0]
 8017b1e:	2380      	movs	r3, #128	@ 0x80
 8017b20:	005b      	lsls	r3, r3, #1
 8017b22:	4013      	ands	r3, r2
 8017b24:	d00b      	beq.n	8017b3e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	2201      	movs	r2, #1
 8017b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2284      	movs	r2, #132	@ 0x84
 8017b32:	589b      	ldr	r3, [r3, r2]
 8017b34:	2201      	movs	r2, #1
 8017b36:	431a      	orrs	r2, r3
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2184      	movs	r1, #132	@ 0x84
 8017b3c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017b3e:	23a4      	movs	r3, #164	@ 0xa4
 8017b40:	18fb      	adds	r3, r7, r3
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	2202      	movs	r2, #2
 8017b46:	4013      	ands	r3, r2
 8017b48:	d011      	beq.n	8017b6e <HAL_UART_IRQHandler+0xf6>
 8017b4a:	239c      	movs	r3, #156	@ 0x9c
 8017b4c:	18fb      	adds	r3, r7, r3
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2201      	movs	r2, #1
 8017b52:	4013      	ands	r3, r2
 8017b54:	d00b      	beq.n	8017b6e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	2202      	movs	r2, #2
 8017b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2284      	movs	r2, #132	@ 0x84
 8017b62:	589b      	ldr	r3, [r3, r2]
 8017b64:	2204      	movs	r2, #4
 8017b66:	431a      	orrs	r2, r3
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2184      	movs	r1, #132	@ 0x84
 8017b6c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017b6e:	23a4      	movs	r3, #164	@ 0xa4
 8017b70:	18fb      	adds	r3, r7, r3
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	2204      	movs	r2, #4
 8017b76:	4013      	ands	r3, r2
 8017b78:	d011      	beq.n	8017b9e <HAL_UART_IRQHandler+0x126>
 8017b7a:	239c      	movs	r3, #156	@ 0x9c
 8017b7c:	18fb      	adds	r3, r7, r3
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	2201      	movs	r2, #1
 8017b82:	4013      	ands	r3, r2
 8017b84:	d00b      	beq.n	8017b9e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	2204      	movs	r2, #4
 8017b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2284      	movs	r2, #132	@ 0x84
 8017b92:	589b      	ldr	r3, [r3, r2]
 8017b94:	2202      	movs	r2, #2
 8017b96:	431a      	orrs	r2, r3
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	2184      	movs	r1, #132	@ 0x84
 8017b9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017b9e:	23a4      	movs	r3, #164	@ 0xa4
 8017ba0:	18fb      	adds	r3, r7, r3
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2208      	movs	r2, #8
 8017ba6:	4013      	ands	r3, r2
 8017ba8:	d017      	beq.n	8017bda <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017baa:	23a0      	movs	r3, #160	@ 0xa0
 8017bac:	18fb      	adds	r3, r7, r3
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	2220      	movs	r2, #32
 8017bb2:	4013      	ands	r3, r2
 8017bb4:	d105      	bne.n	8017bc2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8017bb6:	239c      	movs	r3, #156	@ 0x9c
 8017bb8:	18fb      	adds	r3, r7, r3
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	2201      	movs	r2, #1
 8017bbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017bc0:	d00b      	beq.n	8017bda <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	2208      	movs	r2, #8
 8017bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2284      	movs	r2, #132	@ 0x84
 8017bce:	589b      	ldr	r3, [r3, r2]
 8017bd0:	2208      	movs	r2, #8
 8017bd2:	431a      	orrs	r2, r3
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2184      	movs	r1, #132	@ 0x84
 8017bd8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017bda:	23a4      	movs	r3, #164	@ 0xa4
 8017bdc:	18fb      	adds	r3, r7, r3
 8017bde:	681a      	ldr	r2, [r3, #0]
 8017be0:	2380      	movs	r3, #128	@ 0x80
 8017be2:	011b      	lsls	r3, r3, #4
 8017be4:	4013      	ands	r3, r2
 8017be6:	d013      	beq.n	8017c10 <HAL_UART_IRQHandler+0x198>
 8017be8:	23a0      	movs	r3, #160	@ 0xa0
 8017bea:	18fb      	adds	r3, r7, r3
 8017bec:	681a      	ldr	r2, [r3, #0]
 8017bee:	2380      	movs	r3, #128	@ 0x80
 8017bf0:	04db      	lsls	r3, r3, #19
 8017bf2:	4013      	ands	r3, r2
 8017bf4:	d00c      	beq.n	8017c10 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	2280      	movs	r2, #128	@ 0x80
 8017bfc:	0112      	lsls	r2, r2, #4
 8017bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2284      	movs	r2, #132	@ 0x84
 8017c04:	589b      	ldr	r3, [r3, r2]
 8017c06:	2220      	movs	r2, #32
 8017c08:	431a      	orrs	r2, r3
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	2184      	movs	r1, #132	@ 0x84
 8017c0e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2284      	movs	r2, #132	@ 0x84
 8017c14:	589b      	ldr	r3, [r3, r2]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d100      	bne.n	8017c1c <HAL_UART_IRQHandler+0x1a4>
 8017c1a:	e20b      	b.n	8018034 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017c1c:	23a4      	movs	r3, #164	@ 0xa4
 8017c1e:	18fb      	adds	r3, r7, r3
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	2220      	movs	r2, #32
 8017c24:	4013      	ands	r3, r2
 8017c26:	d00e      	beq.n	8017c46 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017c28:	23a0      	movs	r3, #160	@ 0xa0
 8017c2a:	18fb      	adds	r3, r7, r3
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	2220      	movs	r2, #32
 8017c30:	4013      	ands	r3, r2
 8017c32:	d008      	beq.n	8017c46 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d004      	beq.n	8017c46 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017c40:	687a      	ldr	r2, [r7, #4]
 8017c42:	0010      	movs	r0, r2
 8017c44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	2284      	movs	r2, #132	@ 0x84
 8017c4a:	589b      	ldr	r3, [r3, r2]
 8017c4c:	2194      	movs	r1, #148	@ 0x94
 8017c4e:	187a      	adds	r2, r7, r1
 8017c50:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	689b      	ldr	r3, [r3, #8]
 8017c58:	2240      	movs	r2, #64	@ 0x40
 8017c5a:	4013      	ands	r3, r2
 8017c5c:	2b40      	cmp	r3, #64	@ 0x40
 8017c5e:	d004      	beq.n	8017c6a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017c60:	187b      	adds	r3, r7, r1
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	2228      	movs	r2, #40	@ 0x28
 8017c66:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017c68:	d04b      	beq.n	8017d02 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	0018      	movs	r0, r3
 8017c6e:	f001 f861 	bl	8018d34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	689b      	ldr	r3, [r3, #8]
 8017c78:	2240      	movs	r2, #64	@ 0x40
 8017c7a:	4013      	ands	r3, r2
 8017c7c:	2b40      	cmp	r3, #64	@ 0x40
 8017c7e:	d139      	bne.n	8017cf4 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c80:	f3ef 8310 	mrs	r3, PRIMASK
 8017c84:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8017c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017c88:	2090      	movs	r0, #144	@ 0x90
 8017c8a:	183a      	adds	r2, r7, r0
 8017c8c:	6013      	str	r3, [r2, #0]
 8017c8e:	2301      	movs	r3, #1
 8017c90:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017c94:	f383 8810 	msr	PRIMASK, r3
}
 8017c98:	46c0      	nop			@ (mov r8, r8)
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	689a      	ldr	r2, [r3, #8]
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	2140      	movs	r1, #64	@ 0x40
 8017ca6:	438a      	bics	r2, r1
 8017ca8:	609a      	str	r2, [r3, #8]
 8017caa:	183b      	adds	r3, r7, r0
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017cb2:	f383 8810 	msr	PRIMASK, r3
}
 8017cb6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d012      	beq.n	8017ce6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cc4:	4a17      	ldr	r2, [pc, #92]	@ (8017d24 <HAL_UART_IRQHandler+0x2ac>)
 8017cc6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ccc:	0018      	movs	r0, r3
 8017cce:	f7f8 f8b3 	bl	800fe38 <HAL_DMA_Abort_IT>
 8017cd2:	1e03      	subs	r3, r0, #0
 8017cd4:	d020      	beq.n	8017d18 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ce0:	0018      	movs	r0, r3
 8017ce2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017ce4:	e018      	b.n	8017d18 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2298      	movs	r2, #152	@ 0x98
 8017cea:	589b      	ldr	r3, [r3, r2]
 8017cec:	687a      	ldr	r2, [r7, #4]
 8017cee:	0010      	movs	r0, r2
 8017cf0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cf2:	e011      	b.n	8017d18 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2298      	movs	r2, #152	@ 0x98
 8017cf8:	589b      	ldr	r3, [r3, r2]
 8017cfa:	687a      	ldr	r2, [r7, #4]
 8017cfc:	0010      	movs	r0, r2
 8017cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d00:	e00a      	b.n	8017d18 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	2298      	movs	r2, #152	@ 0x98
 8017d06:	589b      	ldr	r3, [r3, r2]
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	0010      	movs	r0, r2
 8017d0c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	2284      	movs	r2, #132	@ 0x84
 8017d12:	2100      	movs	r1, #0
 8017d14:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8017d16:	e18d      	b.n	8018034 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d18:	46c0      	nop			@ (mov r8, r8)
    return;
 8017d1a:	e18b      	b.n	8018034 <HAL_UART_IRQHandler+0x5bc>
 8017d1c:	0000080f 	.word	0x0000080f
 8017d20:	04000120 	.word	0x04000120
 8017d24:	080190c1 	.word	0x080190c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017d2c:	2b01      	cmp	r3, #1
 8017d2e:	d000      	beq.n	8017d32 <HAL_UART_IRQHandler+0x2ba>
 8017d30:	e13d      	b.n	8017fae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017d32:	23a4      	movs	r3, #164	@ 0xa4
 8017d34:	18fb      	adds	r3, r7, r3
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	2210      	movs	r2, #16
 8017d3a:	4013      	ands	r3, r2
 8017d3c:	d100      	bne.n	8017d40 <HAL_UART_IRQHandler+0x2c8>
 8017d3e:	e136      	b.n	8017fae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017d40:	23a0      	movs	r3, #160	@ 0xa0
 8017d42:	18fb      	adds	r3, r7, r3
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	2210      	movs	r2, #16
 8017d48:	4013      	ands	r3, r2
 8017d4a:	d100      	bne.n	8017d4e <HAL_UART_IRQHandler+0x2d6>
 8017d4c:	e12f      	b.n	8017fae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	2210      	movs	r2, #16
 8017d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	689b      	ldr	r3, [r3, #8]
 8017d5c:	2240      	movs	r2, #64	@ 0x40
 8017d5e:	4013      	ands	r3, r2
 8017d60:	2b40      	cmp	r3, #64	@ 0x40
 8017d62:	d000      	beq.n	8017d66 <HAL_UART_IRQHandler+0x2ee>
 8017d64:	e0a2      	b.n	8017eac <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	685a      	ldr	r2, [r3, #4]
 8017d6e:	217e      	movs	r1, #126	@ 0x7e
 8017d70:	187b      	adds	r3, r7, r1
 8017d72:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8017d74:	187b      	adds	r3, r7, r1
 8017d76:	881b      	ldrh	r3, [r3, #0]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d100      	bne.n	8017d7e <HAL_UART_IRQHandler+0x306>
 8017d7c:	e15c      	b.n	8018038 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	2258      	movs	r2, #88	@ 0x58
 8017d82:	5a9b      	ldrh	r3, [r3, r2]
 8017d84:	187a      	adds	r2, r7, r1
 8017d86:	8812      	ldrh	r2, [r2, #0]
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	d300      	bcc.n	8017d8e <HAL_UART_IRQHandler+0x316>
 8017d8c:	e154      	b.n	8018038 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	187a      	adds	r2, r7, r1
 8017d92:	215a      	movs	r1, #90	@ 0x5a
 8017d94:	8812      	ldrh	r2, [r2, #0]
 8017d96:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	2220      	movs	r2, #32
 8017da2:	4013      	ands	r3, r2
 8017da4:	d16f      	bne.n	8017e86 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017da6:	f3ef 8310 	mrs	r3, PRIMASK
 8017daa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017dae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017db0:	2301      	movs	r3, #1
 8017db2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017db6:	f383 8810 	msr	PRIMASK, r3
}
 8017dba:	46c0      	nop			@ (mov r8, r8)
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	681a      	ldr	r2, [r3, #0]
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	49a0      	ldr	r1, [pc, #640]	@ (8018048 <HAL_UART_IRQHandler+0x5d0>)
 8017dc8:	400a      	ands	r2, r1
 8017dca:	601a      	str	r2, [r3, #0]
 8017dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dd2:	f383 8810 	msr	PRIMASK, r3
}
 8017dd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8017ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017de0:	677b      	str	r3, [r7, #116]	@ 0x74
 8017de2:	2301      	movs	r3, #1
 8017de4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017de8:	f383 8810 	msr	PRIMASK, r3
}
 8017dec:	46c0      	nop			@ (mov r8, r8)
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	689a      	ldr	r2, [r3, #8]
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	2101      	movs	r1, #1
 8017dfa:	438a      	bics	r2, r1
 8017dfc:	609a      	str	r2, [r3, #8]
 8017dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017e00:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017e04:	f383 8810 	msr	PRIMASK, r3
}
 8017e08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8017e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8017e14:	2301      	movs	r3, #1
 8017e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e1a:	f383 8810 	msr	PRIMASK, r3
}
 8017e1e:	46c0      	nop			@ (mov r8, r8)
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	689a      	ldr	r2, [r3, #8]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2140      	movs	r1, #64	@ 0x40
 8017e2c:	438a      	bics	r2, r1
 8017e2e:	609a      	str	r2, [r3, #8]
 8017e30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017e32:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e36:	f383 8810 	msr	PRIMASK, r3
}
 8017e3a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2280      	movs	r2, #128	@ 0x80
 8017e40:	2120      	movs	r1, #32
 8017e42:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2200      	movs	r2, #0
 8017e48:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8017e4e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017e54:	2301      	movs	r3, #1
 8017e56:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017e5a:	f383 8810 	msr	PRIMASK, r3
}
 8017e5e:	46c0      	nop			@ (mov r8, r8)
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	681a      	ldr	r2, [r3, #0]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	2110      	movs	r1, #16
 8017e6c:	438a      	bics	r2, r1
 8017e6e:	601a      	str	r2, [r3, #0]
 8017e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017e76:	f383 8810 	msr	PRIMASK, r3
}
 8017e7a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e80:	0018      	movs	r0, r3
 8017e82:	f7f7 ff99 	bl	800fdb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	2202      	movs	r2, #2
 8017e8a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	22ac      	movs	r2, #172	@ 0xac
 8017e90:	589b      	ldr	r3, [r3, r2]
 8017e92:	687a      	ldr	r2, [r7, #4]
 8017e94:	2158      	movs	r1, #88	@ 0x58
 8017e96:	5a51      	ldrh	r1, [r2, r1]
 8017e98:	687a      	ldr	r2, [r7, #4]
 8017e9a:	205a      	movs	r0, #90	@ 0x5a
 8017e9c:	5a12      	ldrh	r2, [r2, r0]
 8017e9e:	b292      	uxth	r2, r2
 8017ea0:	1a8a      	subs	r2, r1, r2
 8017ea2:	b291      	uxth	r1, r2
 8017ea4:	687a      	ldr	r2, [r7, #4]
 8017ea6:	0010      	movs	r0, r2
 8017ea8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017eaa:	e0c5      	b.n	8018038 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2258      	movs	r2, #88	@ 0x58
 8017eb0:	5a99      	ldrh	r1, [r3, r2]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	225a      	movs	r2, #90	@ 0x5a
 8017eb6:	5a9b      	ldrh	r3, [r3, r2]
 8017eb8:	b29a      	uxth	r2, r3
 8017eba:	208e      	movs	r0, #142	@ 0x8e
 8017ebc:	183b      	adds	r3, r7, r0
 8017ebe:	1a8a      	subs	r2, r1, r2
 8017ec0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	225a      	movs	r2, #90	@ 0x5a
 8017ec6:	5a9b      	ldrh	r3, [r3, r2]
 8017ec8:	b29b      	uxth	r3, r3
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d100      	bne.n	8017ed0 <HAL_UART_IRQHandler+0x458>
 8017ece:	e0b5      	b.n	801803c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017ed0:	183b      	adds	r3, r7, r0
 8017ed2:	881b      	ldrh	r3, [r3, #0]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d100      	bne.n	8017eda <HAL_UART_IRQHandler+0x462>
 8017ed8:	e0b0      	b.n	801803c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017eda:	f3ef 8310 	mrs	r3, PRIMASK
 8017ede:	60fb      	str	r3, [r7, #12]
  return(result);
 8017ee0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017ee2:	2488      	movs	r4, #136	@ 0x88
 8017ee4:	193a      	adds	r2, r7, r4
 8017ee6:	6013      	str	r3, [r2, #0]
 8017ee8:	2301      	movs	r3, #1
 8017eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017eec:	693b      	ldr	r3, [r7, #16]
 8017eee:	f383 8810 	msr	PRIMASK, r3
}
 8017ef2:	46c0      	nop			@ (mov r8, r8)
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	681a      	ldr	r2, [r3, #0]
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	4953      	ldr	r1, [pc, #332]	@ (801804c <HAL_UART_IRQHandler+0x5d4>)
 8017f00:	400a      	ands	r2, r1
 8017f02:	601a      	str	r2, [r3, #0]
 8017f04:	193b      	adds	r3, r7, r4
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	f383 8810 	msr	PRIMASK, r3
}
 8017f10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f12:	f3ef 8310 	mrs	r3, PRIMASK
 8017f16:	61bb      	str	r3, [r7, #24]
  return(result);
 8017f18:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017f1a:	2484      	movs	r4, #132	@ 0x84
 8017f1c:	193a      	adds	r2, r7, r4
 8017f1e:	6013      	str	r3, [r2, #0]
 8017f20:	2301      	movs	r3, #1
 8017f22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	f383 8810 	msr	PRIMASK, r3
}
 8017f2a:	46c0      	nop			@ (mov r8, r8)
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	689a      	ldr	r2, [r3, #8]
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	2101      	movs	r1, #1
 8017f38:	438a      	bics	r2, r1
 8017f3a:	609a      	str	r2, [r3, #8]
 8017f3c:	193b      	adds	r3, r7, r4
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f42:	6a3b      	ldr	r3, [r7, #32]
 8017f44:	f383 8810 	msr	PRIMASK, r3
}
 8017f48:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2280      	movs	r2, #128	@ 0x80
 8017f4e:	2120      	movs	r1, #32
 8017f50:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2200      	movs	r2, #0
 8017f56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8017f62:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017f66:	2480      	movs	r4, #128	@ 0x80
 8017f68:	193a      	adds	r2, r7, r4
 8017f6a:	6013      	str	r3, [r2, #0]
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f72:	f383 8810 	msr	PRIMASK, r3
}
 8017f76:	46c0      	nop			@ (mov r8, r8)
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	681a      	ldr	r2, [r3, #0]
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	2110      	movs	r1, #16
 8017f84:	438a      	bics	r2, r1
 8017f86:	601a      	str	r2, [r3, #0]
 8017f88:	193b      	adds	r3, r7, r4
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f90:	f383 8810 	msr	PRIMASK, r3
}
 8017f94:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	2202      	movs	r2, #2
 8017f9a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	22ac      	movs	r2, #172	@ 0xac
 8017fa0:	589b      	ldr	r3, [r3, r2]
 8017fa2:	183a      	adds	r2, r7, r0
 8017fa4:	8811      	ldrh	r1, [r2, #0]
 8017fa6:	687a      	ldr	r2, [r7, #4]
 8017fa8:	0010      	movs	r0, r2
 8017faa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017fac:	e046      	b.n	801803c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017fae:	23a4      	movs	r3, #164	@ 0xa4
 8017fb0:	18fb      	adds	r3, r7, r3
 8017fb2:	681a      	ldr	r2, [r3, #0]
 8017fb4:	2380      	movs	r3, #128	@ 0x80
 8017fb6:	035b      	lsls	r3, r3, #13
 8017fb8:	4013      	ands	r3, r2
 8017fba:	d012      	beq.n	8017fe2 <HAL_UART_IRQHandler+0x56a>
 8017fbc:	239c      	movs	r3, #156	@ 0x9c
 8017fbe:	18fb      	adds	r3, r7, r3
 8017fc0:	681a      	ldr	r2, [r3, #0]
 8017fc2:	2380      	movs	r3, #128	@ 0x80
 8017fc4:	03db      	lsls	r3, r3, #15
 8017fc6:	4013      	ands	r3, r2
 8017fc8:	d00b      	beq.n	8017fe2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	2280      	movs	r2, #128	@ 0x80
 8017fd0:	0352      	lsls	r2, r2, #13
 8017fd2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	22a8      	movs	r2, #168	@ 0xa8
 8017fd8:	589b      	ldr	r3, [r3, r2]
 8017fda:	687a      	ldr	r2, [r7, #4]
 8017fdc:	0010      	movs	r0, r2
 8017fde:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017fe0:	e02f      	b.n	8018042 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017fe2:	23a4      	movs	r3, #164	@ 0xa4
 8017fe4:	18fb      	adds	r3, r7, r3
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	2280      	movs	r2, #128	@ 0x80
 8017fea:	4013      	ands	r3, r2
 8017fec:	d00f      	beq.n	801800e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017fee:	23a0      	movs	r3, #160	@ 0xa0
 8017ff0:	18fb      	adds	r3, r7, r3
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	2280      	movs	r2, #128	@ 0x80
 8017ff6:	4013      	ands	r3, r2
 8017ff8:	d009      	beq.n	801800e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d01e      	beq.n	8018040 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018006:	687a      	ldr	r2, [r7, #4]
 8018008:	0010      	movs	r0, r2
 801800a:	4798      	blx	r3
    }
    return;
 801800c:	e018      	b.n	8018040 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801800e:	23a4      	movs	r3, #164	@ 0xa4
 8018010:	18fb      	adds	r3, r7, r3
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	2240      	movs	r2, #64	@ 0x40
 8018016:	4013      	ands	r3, r2
 8018018:	d013      	beq.n	8018042 <HAL_UART_IRQHandler+0x5ca>
 801801a:	23a0      	movs	r3, #160	@ 0xa0
 801801c:	18fb      	adds	r3, r7, r3
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	2240      	movs	r2, #64	@ 0x40
 8018022:	4013      	ands	r3, r2
 8018024:	d00d      	beq.n	8018042 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	0018      	movs	r0, r3
 801802a:	f001 f862 	bl	80190f2 <UART_EndTransmit_IT>
    return;
 801802e:	e008      	b.n	8018042 <HAL_UART_IRQHandler+0x5ca>
      return;
 8018030:	46c0      	nop			@ (mov r8, r8)
 8018032:	e006      	b.n	8018042 <HAL_UART_IRQHandler+0x5ca>
    return;
 8018034:	46c0      	nop			@ (mov r8, r8)
 8018036:	e004      	b.n	8018042 <HAL_UART_IRQHandler+0x5ca>
      return;
 8018038:	46c0      	nop			@ (mov r8, r8)
 801803a:	e002      	b.n	8018042 <HAL_UART_IRQHandler+0x5ca>
      return;
 801803c:	46c0      	nop			@ (mov r8, r8)
 801803e:	e000      	b.n	8018042 <HAL_UART_IRQHandler+0x5ca>
    return;
 8018040:	46c0      	nop			@ (mov r8, r8)
  }

}
 8018042:	46bd      	mov	sp, r7
 8018044:	b02b      	add	sp, #172	@ 0xac
 8018046:	bd90      	pop	{r4, r7, pc}
 8018048:	fffffeff 	.word	0xfffffeff
 801804c:	fffffedf 	.word	0xfffffedf

08018050 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018058:	46c0      	nop			@ (mov r8, r8)
 801805a:	46bd      	mov	sp, r7
 801805c:	b002      	add	sp, #8
 801805e:	bd80      	pop	{r7, pc}

08018060 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b082      	sub	sp, #8
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8018068:	46c0      	nop			@ (mov r8, r8)
 801806a:	46bd      	mov	sp, r7
 801806c:	b002      	add	sp, #8
 801806e:	bd80      	pop	{r7, pc}

08018070 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8018078:	46c0      	nop			@ (mov r8, r8)
 801807a:	46bd      	mov	sp, r7
 801807c:	b002      	add	sp, #8
 801807e:	bd80      	pop	{r7, pc}

08018080 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b082      	sub	sp, #8
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8018088:	46c0      	nop			@ (mov r8, r8)
 801808a:	46bd      	mov	sp, r7
 801808c:	b002      	add	sp, #8
 801808e:	bd80      	pop	{r7, pc}

08018090 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b082      	sub	sp, #8
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8018098:	46c0      	nop			@ (mov r8, r8)
 801809a:	46bd      	mov	sp, r7
 801809c:	b002      	add	sp, #8
 801809e:	bd80      	pop	{r7, pc}

080180a0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b082      	sub	sp, #8
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80180a8:	46c0      	nop			@ (mov r8, r8)
 80180aa:	46bd      	mov	sp, r7
 80180ac:	b002      	add	sp, #8
 80180ae:	bd80      	pop	{r7, pc}

080180b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b082      	sub	sp, #8
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
 80180b8:	000a      	movs	r2, r1
 80180ba:	1cbb      	adds	r3, r7, #2
 80180bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80180be:	46c0      	nop			@ (mov r8, r8)
 80180c0:	46bd      	mov	sp, r7
 80180c2:	b002      	add	sp, #8
 80180c4:	bd80      	pop	{r7, pc}
	...

080180c8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2188      	movs	r1, #136	@ 0x88
 80180d4:	4a14      	ldr	r2, [pc, #80]	@ (8018128 <UART_InitCallbacksToDefault+0x60>)
 80180d6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	218c      	movs	r1, #140	@ 0x8c
 80180dc:	4a13      	ldr	r2, [pc, #76]	@ (801812c <UART_InitCallbacksToDefault+0x64>)
 80180de:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2190      	movs	r1, #144	@ 0x90
 80180e4:	4a12      	ldr	r2, [pc, #72]	@ (8018130 <UART_InitCallbacksToDefault+0x68>)
 80180e6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	2194      	movs	r1, #148	@ 0x94
 80180ec:	4a11      	ldr	r2, [pc, #68]	@ (8018134 <UART_InitCallbacksToDefault+0x6c>)
 80180ee:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2198      	movs	r1, #152	@ 0x98
 80180f4:	4a10      	ldr	r2, [pc, #64]	@ (8018138 <UART_InitCallbacksToDefault+0x70>)
 80180f6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	219c      	movs	r1, #156	@ 0x9c
 80180fc:	4a0f      	ldr	r2, [pc, #60]	@ (801813c <UART_InitCallbacksToDefault+0x74>)
 80180fe:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	21a0      	movs	r1, #160	@ 0xa0
 8018104:	4a0e      	ldr	r2, [pc, #56]	@ (8018140 <UART_InitCallbacksToDefault+0x78>)
 8018106:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	21a4      	movs	r1, #164	@ 0xa4
 801810c:	4a0d      	ldr	r2, [pc, #52]	@ (8018144 <UART_InitCallbacksToDefault+0x7c>)
 801810e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	21a8      	movs	r1, #168	@ 0xa8
 8018114:	4a0c      	ldr	r2, [pc, #48]	@ (8018148 <UART_InitCallbacksToDefault+0x80>)
 8018116:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	21ac      	movs	r1, #172	@ 0xac
 801811c:	4a0b      	ldr	r2, [pc, #44]	@ (801814c <UART_InitCallbacksToDefault+0x84>)
 801811e:	505a      	str	r2, [r3, r1]

}
 8018120:	46c0      	nop			@ (mov r8, r8)
 8018122:	46bd      	mov	sp, r7
 8018124:	b002      	add	sp, #8
 8018126:	bd80      	pop	{r7, pc}
 8018128:	08018061 	.word	0x08018061
 801812c:	08018051 	.word	0x08018051
 8018130:	08018071 	.word	0x08018071
 8018134:	08008625 	.word	0x08008625
 8018138:	08003bb1 	.word	0x08003bb1
 801813c:	08018081 	.word	0x08018081
 8018140:	08018091 	.word	0x08018091
 8018144:	080180a1 	.word	0x080180a1
 8018148:	080194e5 	.word	0x080194e5
 801814c:	080180b1 	.word	0x080180b1

08018150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018150:	b5b0      	push	{r4, r5, r7, lr}
 8018152:	b08e      	sub	sp, #56	@ 0x38
 8018154:	af00      	add	r7, sp, #0
 8018156:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018158:	231a      	movs	r3, #26
 801815a:	2218      	movs	r2, #24
 801815c:	189b      	adds	r3, r3, r2
 801815e:	19db      	adds	r3, r3, r7
 8018160:	2200      	movs	r2, #0
 8018162:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018164:	69fb      	ldr	r3, [r7, #28]
 8018166:	689a      	ldr	r2, [r3, #8]
 8018168:	69fb      	ldr	r3, [r7, #28]
 801816a:	691b      	ldr	r3, [r3, #16]
 801816c:	431a      	orrs	r2, r3
 801816e:	69fb      	ldr	r3, [r7, #28]
 8018170:	695b      	ldr	r3, [r3, #20]
 8018172:	431a      	orrs	r2, r3
 8018174:	69fb      	ldr	r3, [r7, #28]
 8018176:	69db      	ldr	r3, [r3, #28]
 8018178:	4313      	orrs	r3, r2
 801817a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801817c:	69fb      	ldr	r3, [r7, #28]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	4ac3      	ldr	r2, [pc, #780]	@ (8018490 <UART_SetConfig+0x340>)
 8018184:	4013      	ands	r3, r2
 8018186:	0019      	movs	r1, r3
 8018188:	69fb      	ldr	r3, [r7, #28]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801818e:	430a      	orrs	r2, r1
 8018190:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018192:	69fb      	ldr	r3, [r7, #28]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	4abe      	ldr	r2, [pc, #760]	@ (8018494 <UART_SetConfig+0x344>)
 801819a:	4013      	ands	r3, r2
 801819c:	0019      	movs	r1, r3
 801819e:	69fb      	ldr	r3, [r7, #28]
 80181a0:	68da      	ldr	r2, [r3, #12]
 80181a2:	69fb      	ldr	r3, [r7, #28]
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	430a      	orrs	r2, r1
 80181a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80181aa:	69fb      	ldr	r3, [r7, #28]
 80181ac:	699b      	ldr	r3, [r3, #24]
 80181ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	4ab8      	ldr	r2, [pc, #736]	@ (8018498 <UART_SetConfig+0x348>)
 80181b6:	4293      	cmp	r3, r2
 80181b8:	d004      	beq.n	80181c4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80181ba:	69fb      	ldr	r3, [r7, #28]
 80181bc:	6a1b      	ldr	r3, [r3, #32]
 80181be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80181c0:	4313      	orrs	r3, r2
 80181c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80181c4:	69fb      	ldr	r3, [r7, #28]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	689b      	ldr	r3, [r3, #8]
 80181ca:	4ab4      	ldr	r2, [pc, #720]	@ (801849c <UART_SetConfig+0x34c>)
 80181cc:	4013      	ands	r3, r2
 80181ce:	0019      	movs	r1, r3
 80181d0:	69fb      	ldr	r3, [r7, #28]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80181d6:	430a      	orrs	r2, r1
 80181d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80181da:	69fb      	ldr	r3, [r7, #28]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	4ab0      	ldr	r2, [pc, #704]	@ (80184a0 <UART_SetConfig+0x350>)
 80181e0:	4293      	cmp	r3, r2
 80181e2:	d131      	bne.n	8018248 <UART_SetConfig+0xf8>
 80181e4:	4baf      	ldr	r3, [pc, #700]	@ (80184a4 <UART_SetConfig+0x354>)
 80181e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80181e8:	2203      	movs	r2, #3
 80181ea:	4013      	ands	r3, r2
 80181ec:	2b03      	cmp	r3, #3
 80181ee:	d01d      	beq.n	801822c <UART_SetConfig+0xdc>
 80181f0:	d823      	bhi.n	801823a <UART_SetConfig+0xea>
 80181f2:	2b02      	cmp	r3, #2
 80181f4:	d00c      	beq.n	8018210 <UART_SetConfig+0xc0>
 80181f6:	d820      	bhi.n	801823a <UART_SetConfig+0xea>
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d002      	beq.n	8018202 <UART_SetConfig+0xb2>
 80181fc:	2b01      	cmp	r3, #1
 80181fe:	d00e      	beq.n	801821e <UART_SetConfig+0xce>
 8018200:	e01b      	b.n	801823a <UART_SetConfig+0xea>
 8018202:	231b      	movs	r3, #27
 8018204:	2218      	movs	r2, #24
 8018206:	189b      	adds	r3, r3, r2
 8018208:	19db      	adds	r3, r3, r7
 801820a:	2201      	movs	r2, #1
 801820c:	701a      	strb	r2, [r3, #0]
 801820e:	e0b4      	b.n	801837a <UART_SetConfig+0x22a>
 8018210:	231b      	movs	r3, #27
 8018212:	2218      	movs	r2, #24
 8018214:	189b      	adds	r3, r3, r2
 8018216:	19db      	adds	r3, r3, r7
 8018218:	2202      	movs	r2, #2
 801821a:	701a      	strb	r2, [r3, #0]
 801821c:	e0ad      	b.n	801837a <UART_SetConfig+0x22a>
 801821e:	231b      	movs	r3, #27
 8018220:	2218      	movs	r2, #24
 8018222:	189b      	adds	r3, r3, r2
 8018224:	19db      	adds	r3, r3, r7
 8018226:	2204      	movs	r2, #4
 8018228:	701a      	strb	r2, [r3, #0]
 801822a:	e0a6      	b.n	801837a <UART_SetConfig+0x22a>
 801822c:	231b      	movs	r3, #27
 801822e:	2218      	movs	r2, #24
 8018230:	189b      	adds	r3, r3, r2
 8018232:	19db      	adds	r3, r3, r7
 8018234:	2208      	movs	r2, #8
 8018236:	701a      	strb	r2, [r3, #0]
 8018238:	e09f      	b.n	801837a <UART_SetConfig+0x22a>
 801823a:	231b      	movs	r3, #27
 801823c:	2218      	movs	r2, #24
 801823e:	189b      	adds	r3, r3, r2
 8018240:	19db      	adds	r3, r3, r7
 8018242:	2210      	movs	r2, #16
 8018244:	701a      	strb	r2, [r3, #0]
 8018246:	e098      	b.n	801837a <UART_SetConfig+0x22a>
 8018248:	69fb      	ldr	r3, [r7, #28]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	4a96      	ldr	r2, [pc, #600]	@ (80184a8 <UART_SetConfig+0x358>)
 801824e:	4293      	cmp	r3, r2
 8018250:	d131      	bne.n	80182b6 <UART_SetConfig+0x166>
 8018252:	4b94      	ldr	r3, [pc, #592]	@ (80184a4 <UART_SetConfig+0x354>)
 8018254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018256:	220c      	movs	r2, #12
 8018258:	4013      	ands	r3, r2
 801825a:	2b0c      	cmp	r3, #12
 801825c:	d01d      	beq.n	801829a <UART_SetConfig+0x14a>
 801825e:	d823      	bhi.n	80182a8 <UART_SetConfig+0x158>
 8018260:	2b08      	cmp	r3, #8
 8018262:	d00c      	beq.n	801827e <UART_SetConfig+0x12e>
 8018264:	d820      	bhi.n	80182a8 <UART_SetConfig+0x158>
 8018266:	2b00      	cmp	r3, #0
 8018268:	d002      	beq.n	8018270 <UART_SetConfig+0x120>
 801826a:	2b04      	cmp	r3, #4
 801826c:	d00e      	beq.n	801828c <UART_SetConfig+0x13c>
 801826e:	e01b      	b.n	80182a8 <UART_SetConfig+0x158>
 8018270:	231b      	movs	r3, #27
 8018272:	2218      	movs	r2, #24
 8018274:	189b      	adds	r3, r3, r2
 8018276:	19db      	adds	r3, r3, r7
 8018278:	2200      	movs	r2, #0
 801827a:	701a      	strb	r2, [r3, #0]
 801827c:	e07d      	b.n	801837a <UART_SetConfig+0x22a>
 801827e:	231b      	movs	r3, #27
 8018280:	2218      	movs	r2, #24
 8018282:	189b      	adds	r3, r3, r2
 8018284:	19db      	adds	r3, r3, r7
 8018286:	2202      	movs	r2, #2
 8018288:	701a      	strb	r2, [r3, #0]
 801828a:	e076      	b.n	801837a <UART_SetConfig+0x22a>
 801828c:	231b      	movs	r3, #27
 801828e:	2218      	movs	r2, #24
 8018290:	189b      	adds	r3, r3, r2
 8018292:	19db      	adds	r3, r3, r7
 8018294:	2204      	movs	r2, #4
 8018296:	701a      	strb	r2, [r3, #0]
 8018298:	e06f      	b.n	801837a <UART_SetConfig+0x22a>
 801829a:	231b      	movs	r3, #27
 801829c:	2218      	movs	r2, #24
 801829e:	189b      	adds	r3, r3, r2
 80182a0:	19db      	adds	r3, r3, r7
 80182a2:	2208      	movs	r2, #8
 80182a4:	701a      	strb	r2, [r3, #0]
 80182a6:	e068      	b.n	801837a <UART_SetConfig+0x22a>
 80182a8:	231b      	movs	r3, #27
 80182aa:	2218      	movs	r2, #24
 80182ac:	189b      	adds	r3, r3, r2
 80182ae:	19db      	adds	r3, r3, r7
 80182b0:	2210      	movs	r2, #16
 80182b2:	701a      	strb	r2, [r3, #0]
 80182b4:	e061      	b.n	801837a <UART_SetConfig+0x22a>
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	4a7c      	ldr	r2, [pc, #496]	@ (80184ac <UART_SetConfig+0x35c>)
 80182bc:	4293      	cmp	r3, r2
 80182be:	d106      	bne.n	80182ce <UART_SetConfig+0x17e>
 80182c0:	231b      	movs	r3, #27
 80182c2:	2218      	movs	r2, #24
 80182c4:	189b      	adds	r3, r3, r2
 80182c6:	19db      	adds	r3, r3, r7
 80182c8:	2200      	movs	r2, #0
 80182ca:	701a      	strb	r2, [r3, #0]
 80182cc:	e055      	b.n	801837a <UART_SetConfig+0x22a>
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	4a77      	ldr	r2, [pc, #476]	@ (80184b0 <UART_SetConfig+0x360>)
 80182d4:	4293      	cmp	r3, r2
 80182d6:	d106      	bne.n	80182e6 <UART_SetConfig+0x196>
 80182d8:	231b      	movs	r3, #27
 80182da:	2218      	movs	r2, #24
 80182dc:	189b      	adds	r3, r3, r2
 80182de:	19db      	adds	r3, r3, r7
 80182e0:	2200      	movs	r2, #0
 80182e2:	701a      	strb	r2, [r3, #0]
 80182e4:	e049      	b.n	801837a <UART_SetConfig+0x22a>
 80182e6:	69fb      	ldr	r3, [r7, #28]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	4a6b      	ldr	r2, [pc, #428]	@ (8018498 <UART_SetConfig+0x348>)
 80182ec:	4293      	cmp	r3, r2
 80182ee:	d13e      	bne.n	801836e <UART_SetConfig+0x21e>
 80182f0:	4b6c      	ldr	r3, [pc, #432]	@ (80184a4 <UART_SetConfig+0x354>)
 80182f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80182f4:	23c0      	movs	r3, #192	@ 0xc0
 80182f6:	011b      	lsls	r3, r3, #4
 80182f8:	4013      	ands	r3, r2
 80182fa:	22c0      	movs	r2, #192	@ 0xc0
 80182fc:	0112      	lsls	r2, r2, #4
 80182fe:	4293      	cmp	r3, r2
 8018300:	d027      	beq.n	8018352 <UART_SetConfig+0x202>
 8018302:	22c0      	movs	r2, #192	@ 0xc0
 8018304:	0112      	lsls	r2, r2, #4
 8018306:	4293      	cmp	r3, r2
 8018308:	d82a      	bhi.n	8018360 <UART_SetConfig+0x210>
 801830a:	2280      	movs	r2, #128	@ 0x80
 801830c:	0112      	lsls	r2, r2, #4
 801830e:	4293      	cmp	r3, r2
 8018310:	d011      	beq.n	8018336 <UART_SetConfig+0x1e6>
 8018312:	2280      	movs	r2, #128	@ 0x80
 8018314:	0112      	lsls	r2, r2, #4
 8018316:	4293      	cmp	r3, r2
 8018318:	d822      	bhi.n	8018360 <UART_SetConfig+0x210>
 801831a:	2b00      	cmp	r3, #0
 801831c:	d004      	beq.n	8018328 <UART_SetConfig+0x1d8>
 801831e:	2280      	movs	r2, #128	@ 0x80
 8018320:	00d2      	lsls	r2, r2, #3
 8018322:	4293      	cmp	r3, r2
 8018324:	d00e      	beq.n	8018344 <UART_SetConfig+0x1f4>
 8018326:	e01b      	b.n	8018360 <UART_SetConfig+0x210>
 8018328:	231b      	movs	r3, #27
 801832a:	2218      	movs	r2, #24
 801832c:	189b      	adds	r3, r3, r2
 801832e:	19db      	adds	r3, r3, r7
 8018330:	2200      	movs	r2, #0
 8018332:	701a      	strb	r2, [r3, #0]
 8018334:	e021      	b.n	801837a <UART_SetConfig+0x22a>
 8018336:	231b      	movs	r3, #27
 8018338:	2218      	movs	r2, #24
 801833a:	189b      	adds	r3, r3, r2
 801833c:	19db      	adds	r3, r3, r7
 801833e:	2202      	movs	r2, #2
 8018340:	701a      	strb	r2, [r3, #0]
 8018342:	e01a      	b.n	801837a <UART_SetConfig+0x22a>
 8018344:	231b      	movs	r3, #27
 8018346:	2218      	movs	r2, #24
 8018348:	189b      	adds	r3, r3, r2
 801834a:	19db      	adds	r3, r3, r7
 801834c:	2204      	movs	r2, #4
 801834e:	701a      	strb	r2, [r3, #0]
 8018350:	e013      	b.n	801837a <UART_SetConfig+0x22a>
 8018352:	231b      	movs	r3, #27
 8018354:	2218      	movs	r2, #24
 8018356:	189b      	adds	r3, r3, r2
 8018358:	19db      	adds	r3, r3, r7
 801835a:	2208      	movs	r2, #8
 801835c:	701a      	strb	r2, [r3, #0]
 801835e:	e00c      	b.n	801837a <UART_SetConfig+0x22a>
 8018360:	231b      	movs	r3, #27
 8018362:	2218      	movs	r2, #24
 8018364:	189b      	adds	r3, r3, r2
 8018366:	19db      	adds	r3, r3, r7
 8018368:	2210      	movs	r2, #16
 801836a:	701a      	strb	r2, [r3, #0]
 801836c:	e005      	b.n	801837a <UART_SetConfig+0x22a>
 801836e:	231b      	movs	r3, #27
 8018370:	2218      	movs	r2, #24
 8018372:	189b      	adds	r3, r3, r2
 8018374:	19db      	adds	r3, r3, r7
 8018376:	2210      	movs	r2, #16
 8018378:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801837a:	69fb      	ldr	r3, [r7, #28]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	4a46      	ldr	r2, [pc, #280]	@ (8018498 <UART_SetConfig+0x348>)
 8018380:	4293      	cmp	r3, r2
 8018382:	d000      	beq.n	8018386 <UART_SetConfig+0x236>
 8018384:	e09a      	b.n	80184bc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018386:	231b      	movs	r3, #27
 8018388:	2218      	movs	r2, #24
 801838a:	189b      	adds	r3, r3, r2
 801838c:	19db      	adds	r3, r3, r7
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	2b08      	cmp	r3, #8
 8018392:	d01d      	beq.n	80183d0 <UART_SetConfig+0x280>
 8018394:	dc20      	bgt.n	80183d8 <UART_SetConfig+0x288>
 8018396:	2b04      	cmp	r3, #4
 8018398:	d015      	beq.n	80183c6 <UART_SetConfig+0x276>
 801839a:	dc1d      	bgt.n	80183d8 <UART_SetConfig+0x288>
 801839c:	2b00      	cmp	r3, #0
 801839e:	d002      	beq.n	80183a6 <UART_SetConfig+0x256>
 80183a0:	2b02      	cmp	r3, #2
 80183a2:	d005      	beq.n	80183b0 <UART_SetConfig+0x260>
 80183a4:	e018      	b.n	80183d8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80183a6:	f7fd fe4b 	bl	8016040 <HAL_RCC_GetPCLK1Freq>
 80183aa:	0003      	movs	r3, r0
 80183ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80183ae:	e01c      	b.n	80183ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80183b0:	4b3c      	ldr	r3, [pc, #240]	@ (80184a4 <UART_SetConfig+0x354>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	2210      	movs	r2, #16
 80183b6:	4013      	ands	r3, r2
 80183b8:	d002      	beq.n	80183c0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80183ba:	4b3e      	ldr	r3, [pc, #248]	@ (80184b4 <UART_SetConfig+0x364>)
 80183bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80183be:	e014      	b.n	80183ea <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80183c0:	4b3d      	ldr	r3, [pc, #244]	@ (80184b8 <UART_SetConfig+0x368>)
 80183c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80183c4:	e011      	b.n	80183ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80183c6:	f7fd fd8b 	bl	8015ee0 <HAL_RCC_GetSysClockFreq>
 80183ca:	0003      	movs	r3, r0
 80183cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80183ce:	e00c      	b.n	80183ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80183d0:	2380      	movs	r3, #128	@ 0x80
 80183d2:	021b      	lsls	r3, r3, #8
 80183d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80183d6:	e008      	b.n	80183ea <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80183d8:	2300      	movs	r3, #0
 80183da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80183dc:	231a      	movs	r3, #26
 80183de:	2218      	movs	r2, #24
 80183e0:	189b      	adds	r3, r3, r2
 80183e2:	19db      	adds	r3, r3, r7
 80183e4:	2201      	movs	r2, #1
 80183e6:	701a      	strb	r2, [r3, #0]
        break;
 80183e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80183ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d100      	bne.n	80183f2 <UART_SetConfig+0x2a2>
 80183f0:	e133      	b.n	801865a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80183f2:	69fb      	ldr	r3, [r7, #28]
 80183f4:	685a      	ldr	r2, [r3, #4]
 80183f6:	0013      	movs	r3, r2
 80183f8:	005b      	lsls	r3, r3, #1
 80183fa:	189b      	adds	r3, r3, r2
 80183fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80183fe:	429a      	cmp	r2, r3
 8018400:	d305      	bcc.n	801840e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8018402:	69fb      	ldr	r3, [r7, #28]
 8018404:	685b      	ldr	r3, [r3, #4]
 8018406:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801840a:	429a      	cmp	r2, r3
 801840c:	d906      	bls.n	801841c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801840e:	231a      	movs	r3, #26
 8018410:	2218      	movs	r2, #24
 8018412:	189b      	adds	r3, r3, r2
 8018414:	19db      	adds	r3, r3, r7
 8018416:	2201      	movs	r2, #1
 8018418:	701a      	strb	r2, [r3, #0]
 801841a:	e11e      	b.n	801865a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801841c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801841e:	613b      	str	r3, [r7, #16]
 8018420:	2300      	movs	r3, #0
 8018422:	617b      	str	r3, [r7, #20]
 8018424:	6939      	ldr	r1, [r7, #16]
 8018426:	697a      	ldr	r2, [r7, #20]
 8018428:	000b      	movs	r3, r1
 801842a:	0e1b      	lsrs	r3, r3, #24
 801842c:	0010      	movs	r0, r2
 801842e:	0205      	lsls	r5, r0, #8
 8018430:	431d      	orrs	r5, r3
 8018432:	000b      	movs	r3, r1
 8018434:	021c      	lsls	r4, r3, #8
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	685b      	ldr	r3, [r3, #4]
 801843a:	085b      	lsrs	r3, r3, #1
 801843c:	60bb      	str	r3, [r7, #8]
 801843e:	2300      	movs	r3, #0
 8018440:	60fb      	str	r3, [r7, #12]
 8018442:	68b8      	ldr	r0, [r7, #8]
 8018444:	68f9      	ldr	r1, [r7, #12]
 8018446:	1900      	adds	r0, r0, r4
 8018448:	4169      	adcs	r1, r5
 801844a:	69fb      	ldr	r3, [r7, #28]
 801844c:	685b      	ldr	r3, [r3, #4]
 801844e:	603b      	str	r3, [r7, #0]
 8018450:	2300      	movs	r3, #0
 8018452:	607b      	str	r3, [r7, #4]
 8018454:	683a      	ldr	r2, [r7, #0]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	f7e8 f892 	bl	8000580 <__aeabi_uldivmod>
 801845c:	0002      	movs	r2, r0
 801845e:	000b      	movs	r3, r1
 8018460:	0013      	movs	r3, r2
 8018462:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018466:	23c0      	movs	r3, #192	@ 0xc0
 8018468:	009b      	lsls	r3, r3, #2
 801846a:	429a      	cmp	r2, r3
 801846c:	d309      	bcc.n	8018482 <UART_SetConfig+0x332>
 801846e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018470:	2380      	movs	r3, #128	@ 0x80
 8018472:	035b      	lsls	r3, r3, #13
 8018474:	429a      	cmp	r2, r3
 8018476:	d204      	bcs.n	8018482 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8018478:	69fb      	ldr	r3, [r7, #28]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801847e:	60da      	str	r2, [r3, #12]
 8018480:	e0eb      	b.n	801865a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8018482:	231a      	movs	r3, #26
 8018484:	2218      	movs	r2, #24
 8018486:	189b      	adds	r3, r3, r2
 8018488:	19db      	adds	r3, r3, r7
 801848a:	2201      	movs	r2, #1
 801848c:	701a      	strb	r2, [r3, #0]
 801848e:	e0e4      	b.n	801865a <UART_SetConfig+0x50a>
 8018490:	efff69f3 	.word	0xefff69f3
 8018494:	ffffcfff 	.word	0xffffcfff
 8018498:	40004800 	.word	0x40004800
 801849c:	fffff4ff 	.word	0xfffff4ff
 80184a0:	40013800 	.word	0x40013800
 80184a4:	40021000 	.word	0x40021000
 80184a8:	40004400 	.word	0x40004400
 80184ac:	40004c00 	.word	0x40004c00
 80184b0:	40005000 	.word	0x40005000
 80184b4:	003d0900 	.word	0x003d0900
 80184b8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80184bc:	69fb      	ldr	r3, [r7, #28]
 80184be:	69da      	ldr	r2, [r3, #28]
 80184c0:	2380      	movs	r3, #128	@ 0x80
 80184c2:	021b      	lsls	r3, r3, #8
 80184c4:	429a      	cmp	r2, r3
 80184c6:	d000      	beq.n	80184ca <UART_SetConfig+0x37a>
 80184c8:	e070      	b.n	80185ac <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80184ca:	231b      	movs	r3, #27
 80184cc:	2218      	movs	r2, #24
 80184ce:	189b      	adds	r3, r3, r2
 80184d0:	19db      	adds	r3, r3, r7
 80184d2:	781b      	ldrb	r3, [r3, #0]
 80184d4:	2b08      	cmp	r3, #8
 80184d6:	d822      	bhi.n	801851e <UART_SetConfig+0x3ce>
 80184d8:	009a      	lsls	r2, r3, #2
 80184da:	4b67      	ldr	r3, [pc, #412]	@ (8018678 <UART_SetConfig+0x528>)
 80184dc:	18d3      	adds	r3, r2, r3
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80184e2:	f7fd fdad 	bl	8016040 <HAL_RCC_GetPCLK1Freq>
 80184e6:	0003      	movs	r3, r0
 80184e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80184ea:	e021      	b.n	8018530 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80184ec:	f7fd fdbe 	bl	801606c <HAL_RCC_GetPCLK2Freq>
 80184f0:	0003      	movs	r3, r0
 80184f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80184f4:	e01c      	b.n	8018530 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80184f6:	4b61      	ldr	r3, [pc, #388]	@ (801867c <UART_SetConfig+0x52c>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	2210      	movs	r2, #16
 80184fc:	4013      	ands	r3, r2
 80184fe:	d002      	beq.n	8018506 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018500:	4b5f      	ldr	r3, [pc, #380]	@ (8018680 <UART_SetConfig+0x530>)
 8018502:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018504:	e014      	b.n	8018530 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8018506:	4b5f      	ldr	r3, [pc, #380]	@ (8018684 <UART_SetConfig+0x534>)
 8018508:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801850a:	e011      	b.n	8018530 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801850c:	f7fd fce8 	bl	8015ee0 <HAL_RCC_GetSysClockFreq>
 8018510:	0003      	movs	r3, r0
 8018512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018514:	e00c      	b.n	8018530 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018516:	2380      	movs	r3, #128	@ 0x80
 8018518:	021b      	lsls	r3, r3, #8
 801851a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801851c:	e008      	b.n	8018530 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801851e:	2300      	movs	r3, #0
 8018520:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018522:	231a      	movs	r3, #26
 8018524:	2218      	movs	r2, #24
 8018526:	189b      	adds	r3, r3, r2
 8018528:	19db      	adds	r3, r3, r7
 801852a:	2201      	movs	r2, #1
 801852c:	701a      	strb	r2, [r3, #0]
        break;
 801852e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018532:	2b00      	cmp	r3, #0
 8018534:	d100      	bne.n	8018538 <UART_SetConfig+0x3e8>
 8018536:	e090      	b.n	801865a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8018538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801853a:	005a      	lsls	r2, r3, #1
 801853c:	69fb      	ldr	r3, [r7, #28]
 801853e:	685b      	ldr	r3, [r3, #4]
 8018540:	085b      	lsrs	r3, r3, #1
 8018542:	18d2      	adds	r2, r2, r3
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	685b      	ldr	r3, [r3, #4]
 8018548:	0019      	movs	r1, r3
 801854a:	0010      	movs	r0, r2
 801854c:	f7e7 fe2a 	bl	80001a4 <__udivsi3>
 8018550:	0003      	movs	r3, r0
 8018552:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018556:	2b0f      	cmp	r3, #15
 8018558:	d921      	bls.n	801859e <UART_SetConfig+0x44e>
 801855a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801855c:	2380      	movs	r3, #128	@ 0x80
 801855e:	025b      	lsls	r3, r3, #9
 8018560:	429a      	cmp	r2, r3
 8018562:	d21c      	bcs.n	801859e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018566:	b29a      	uxth	r2, r3
 8018568:	200e      	movs	r0, #14
 801856a:	2418      	movs	r4, #24
 801856c:	1903      	adds	r3, r0, r4
 801856e:	19db      	adds	r3, r3, r7
 8018570:	210f      	movs	r1, #15
 8018572:	438a      	bics	r2, r1
 8018574:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018578:	085b      	lsrs	r3, r3, #1
 801857a:	b29b      	uxth	r3, r3
 801857c:	2207      	movs	r2, #7
 801857e:	4013      	ands	r3, r2
 8018580:	b299      	uxth	r1, r3
 8018582:	1903      	adds	r3, r0, r4
 8018584:	19db      	adds	r3, r3, r7
 8018586:	1902      	adds	r2, r0, r4
 8018588:	19d2      	adds	r2, r2, r7
 801858a:	8812      	ldrh	r2, [r2, #0]
 801858c:	430a      	orrs	r2, r1
 801858e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8018590:	69fb      	ldr	r3, [r7, #28]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	1902      	adds	r2, r0, r4
 8018596:	19d2      	adds	r2, r2, r7
 8018598:	8812      	ldrh	r2, [r2, #0]
 801859a:	60da      	str	r2, [r3, #12]
 801859c:	e05d      	b.n	801865a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801859e:	231a      	movs	r3, #26
 80185a0:	2218      	movs	r2, #24
 80185a2:	189b      	adds	r3, r3, r2
 80185a4:	19db      	adds	r3, r3, r7
 80185a6:	2201      	movs	r2, #1
 80185a8:	701a      	strb	r2, [r3, #0]
 80185aa:	e056      	b.n	801865a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80185ac:	231b      	movs	r3, #27
 80185ae:	2218      	movs	r2, #24
 80185b0:	189b      	adds	r3, r3, r2
 80185b2:	19db      	adds	r3, r3, r7
 80185b4:	781b      	ldrb	r3, [r3, #0]
 80185b6:	2b08      	cmp	r3, #8
 80185b8:	d822      	bhi.n	8018600 <UART_SetConfig+0x4b0>
 80185ba:	009a      	lsls	r2, r3, #2
 80185bc:	4b32      	ldr	r3, [pc, #200]	@ (8018688 <UART_SetConfig+0x538>)
 80185be:	18d3      	adds	r3, r2, r3
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80185c4:	f7fd fd3c 	bl	8016040 <HAL_RCC_GetPCLK1Freq>
 80185c8:	0003      	movs	r3, r0
 80185ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80185cc:	e021      	b.n	8018612 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80185ce:	f7fd fd4d 	bl	801606c <HAL_RCC_GetPCLK2Freq>
 80185d2:	0003      	movs	r3, r0
 80185d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80185d6:	e01c      	b.n	8018612 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80185d8:	4b28      	ldr	r3, [pc, #160]	@ (801867c <UART_SetConfig+0x52c>)
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2210      	movs	r2, #16
 80185de:	4013      	ands	r3, r2
 80185e0:	d002      	beq.n	80185e8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80185e2:	4b27      	ldr	r3, [pc, #156]	@ (8018680 <UART_SetConfig+0x530>)
 80185e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80185e6:	e014      	b.n	8018612 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80185e8:	4b26      	ldr	r3, [pc, #152]	@ (8018684 <UART_SetConfig+0x534>)
 80185ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80185ec:	e011      	b.n	8018612 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80185ee:	f7fd fc77 	bl	8015ee0 <HAL_RCC_GetSysClockFreq>
 80185f2:	0003      	movs	r3, r0
 80185f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80185f6:	e00c      	b.n	8018612 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80185f8:	2380      	movs	r3, #128	@ 0x80
 80185fa:	021b      	lsls	r3, r3, #8
 80185fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80185fe:	e008      	b.n	8018612 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8018600:	2300      	movs	r3, #0
 8018602:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018604:	231a      	movs	r3, #26
 8018606:	2218      	movs	r2, #24
 8018608:	189b      	adds	r3, r3, r2
 801860a:	19db      	adds	r3, r3, r7
 801860c:	2201      	movs	r2, #1
 801860e:	701a      	strb	r2, [r3, #0]
        break;
 8018610:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8018612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018614:	2b00      	cmp	r3, #0
 8018616:	d020      	beq.n	801865a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018618:	69fb      	ldr	r3, [r7, #28]
 801861a:	685b      	ldr	r3, [r3, #4]
 801861c:	085a      	lsrs	r2, r3, #1
 801861e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018620:	18d2      	adds	r2, r2, r3
 8018622:	69fb      	ldr	r3, [r7, #28]
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	0019      	movs	r1, r3
 8018628:	0010      	movs	r0, r2
 801862a:	f7e7 fdbb 	bl	80001a4 <__udivsi3>
 801862e:	0003      	movs	r3, r0
 8018630:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018634:	2b0f      	cmp	r3, #15
 8018636:	d90a      	bls.n	801864e <UART_SetConfig+0x4fe>
 8018638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801863a:	2380      	movs	r3, #128	@ 0x80
 801863c:	025b      	lsls	r3, r3, #9
 801863e:	429a      	cmp	r2, r3
 8018640:	d205      	bcs.n	801864e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018644:	b29a      	uxth	r2, r3
 8018646:	69fb      	ldr	r3, [r7, #28]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	60da      	str	r2, [r3, #12]
 801864c:	e005      	b.n	801865a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801864e:	231a      	movs	r3, #26
 8018650:	2218      	movs	r2, #24
 8018652:	189b      	adds	r3, r3, r2
 8018654:	19db      	adds	r3, r3, r7
 8018656:	2201      	movs	r2, #1
 8018658:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801865a:	69fb      	ldr	r3, [r7, #28]
 801865c:	2200      	movs	r2, #0
 801865e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8018660:	69fb      	ldr	r3, [r7, #28]
 8018662:	2200      	movs	r2, #0
 8018664:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8018666:	231a      	movs	r3, #26
 8018668:	2218      	movs	r2, #24
 801866a:	189b      	adds	r3, r3, r2
 801866c:	19db      	adds	r3, r3, r7
 801866e:	781b      	ldrb	r3, [r3, #0]
}
 8018670:	0018      	movs	r0, r3
 8018672:	46bd      	mov	sp, r7
 8018674:	b00e      	add	sp, #56	@ 0x38
 8018676:	bdb0      	pop	{r4, r5, r7, pc}
 8018678:	08025e78 	.word	0x08025e78
 801867c:	40021000 	.word	0x40021000
 8018680:	003d0900 	.word	0x003d0900
 8018684:	00f42400 	.word	0x00f42400
 8018688:	08025e9c 	.word	0x08025e9c

0801868c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b082      	sub	sp, #8
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018698:	2201      	movs	r2, #1
 801869a:	4013      	ands	r3, r2
 801869c:	d00b      	beq.n	80186b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	685b      	ldr	r3, [r3, #4]
 80186a4:	4a4a      	ldr	r2, [pc, #296]	@ (80187d0 <UART_AdvFeatureConfig+0x144>)
 80186a6:	4013      	ands	r3, r2
 80186a8:	0019      	movs	r1, r3
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	430a      	orrs	r2, r1
 80186b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186ba:	2202      	movs	r2, #2
 80186bc:	4013      	ands	r3, r2
 80186be:	d00b      	beq.n	80186d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	685b      	ldr	r3, [r3, #4]
 80186c6:	4a43      	ldr	r2, [pc, #268]	@ (80187d4 <UART_AdvFeatureConfig+0x148>)
 80186c8:	4013      	ands	r3, r2
 80186ca:	0019      	movs	r1, r3
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	430a      	orrs	r2, r1
 80186d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186dc:	2204      	movs	r2, #4
 80186de:	4013      	ands	r3, r2
 80186e0:	d00b      	beq.n	80186fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	685b      	ldr	r3, [r3, #4]
 80186e8:	4a3b      	ldr	r2, [pc, #236]	@ (80187d8 <UART_AdvFeatureConfig+0x14c>)
 80186ea:	4013      	ands	r3, r2
 80186ec:	0019      	movs	r1, r3
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	430a      	orrs	r2, r1
 80186f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186fe:	2208      	movs	r2, #8
 8018700:	4013      	ands	r3, r2
 8018702:	d00b      	beq.n	801871c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	685b      	ldr	r3, [r3, #4]
 801870a:	4a34      	ldr	r2, [pc, #208]	@ (80187dc <UART_AdvFeatureConfig+0x150>)
 801870c:	4013      	ands	r3, r2
 801870e:	0019      	movs	r1, r3
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	430a      	orrs	r2, r1
 801871a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018720:	2210      	movs	r2, #16
 8018722:	4013      	ands	r3, r2
 8018724:	d00b      	beq.n	801873e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	689b      	ldr	r3, [r3, #8]
 801872c:	4a2c      	ldr	r2, [pc, #176]	@ (80187e0 <UART_AdvFeatureConfig+0x154>)
 801872e:	4013      	ands	r3, r2
 8018730:	0019      	movs	r1, r3
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	430a      	orrs	r2, r1
 801873c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018742:	2220      	movs	r2, #32
 8018744:	4013      	ands	r3, r2
 8018746:	d00b      	beq.n	8018760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	689b      	ldr	r3, [r3, #8]
 801874e:	4a25      	ldr	r2, [pc, #148]	@ (80187e4 <UART_AdvFeatureConfig+0x158>)
 8018750:	4013      	ands	r3, r2
 8018752:	0019      	movs	r1, r3
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	430a      	orrs	r2, r1
 801875e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018764:	2240      	movs	r2, #64	@ 0x40
 8018766:	4013      	ands	r3, r2
 8018768:	d01d      	beq.n	80187a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	685b      	ldr	r3, [r3, #4]
 8018770:	4a1d      	ldr	r2, [pc, #116]	@ (80187e8 <UART_AdvFeatureConfig+0x15c>)
 8018772:	4013      	ands	r3, r2
 8018774:	0019      	movs	r1, r3
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	430a      	orrs	r2, r1
 8018780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018786:	2380      	movs	r3, #128	@ 0x80
 8018788:	035b      	lsls	r3, r3, #13
 801878a:	429a      	cmp	r2, r3
 801878c:	d10b      	bne.n	80187a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	685b      	ldr	r3, [r3, #4]
 8018794:	4a15      	ldr	r2, [pc, #84]	@ (80187ec <UART_AdvFeatureConfig+0x160>)
 8018796:	4013      	ands	r3, r2
 8018798:	0019      	movs	r1, r3
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	430a      	orrs	r2, r1
 80187a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187aa:	2280      	movs	r2, #128	@ 0x80
 80187ac:	4013      	ands	r3, r2
 80187ae:	d00b      	beq.n	80187c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	685b      	ldr	r3, [r3, #4]
 80187b6:	4a0e      	ldr	r2, [pc, #56]	@ (80187f0 <UART_AdvFeatureConfig+0x164>)
 80187b8:	4013      	ands	r3, r2
 80187ba:	0019      	movs	r1, r3
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	430a      	orrs	r2, r1
 80187c6:	605a      	str	r2, [r3, #4]
  }
}
 80187c8:	46c0      	nop			@ (mov r8, r8)
 80187ca:	46bd      	mov	sp, r7
 80187cc:	b002      	add	sp, #8
 80187ce:	bd80      	pop	{r7, pc}
 80187d0:	fffdffff 	.word	0xfffdffff
 80187d4:	fffeffff 	.word	0xfffeffff
 80187d8:	fffbffff 	.word	0xfffbffff
 80187dc:	ffff7fff 	.word	0xffff7fff
 80187e0:	ffffefff 	.word	0xffffefff
 80187e4:	ffffdfff 	.word	0xffffdfff
 80187e8:	ffefffff 	.word	0xffefffff
 80187ec:	ff9fffff 	.word	0xff9fffff
 80187f0:	fff7ffff 	.word	0xfff7ffff

080187f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b092      	sub	sp, #72	@ 0x48
 80187f8:	af02      	add	r7, sp, #8
 80187fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	2284      	movs	r2, #132	@ 0x84
 8018800:	2100      	movs	r1, #0
 8018802:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018804:	f7f6 fd20 	bl	800f248 <HAL_GetTick>
 8018808:	0003      	movs	r3, r0
 801880a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2208      	movs	r2, #8
 8018814:	4013      	ands	r3, r2
 8018816:	2b08      	cmp	r3, #8
 8018818:	d12c      	bne.n	8018874 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801881a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801881c:	2280      	movs	r2, #128	@ 0x80
 801881e:	0391      	lsls	r1, r2, #14
 8018820:	6878      	ldr	r0, [r7, #4]
 8018822:	4a46      	ldr	r2, [pc, #280]	@ (801893c <UART_CheckIdleState+0x148>)
 8018824:	9200      	str	r2, [sp, #0]
 8018826:	2200      	movs	r2, #0
 8018828:	f000 f88c 	bl	8018944 <UART_WaitOnFlagUntilTimeout>
 801882c:	1e03      	subs	r3, r0, #0
 801882e:	d021      	beq.n	8018874 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018830:	f3ef 8310 	mrs	r3, PRIMASK
 8018834:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018838:	63bb      	str	r3, [r7, #56]	@ 0x38
 801883a:	2301      	movs	r3, #1
 801883c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801883e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018840:	f383 8810 	msr	PRIMASK, r3
}
 8018844:	46c0      	nop			@ (mov r8, r8)
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	681a      	ldr	r2, [r3, #0]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	2180      	movs	r1, #128	@ 0x80
 8018852:	438a      	bics	r2, r1
 8018854:	601a      	str	r2, [r3, #0]
 8018856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801885a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801885c:	f383 8810 	msr	PRIMASK, r3
}
 8018860:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	2220      	movs	r2, #32
 8018866:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	2278      	movs	r2, #120	@ 0x78
 801886c:	2100      	movs	r1, #0
 801886e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018870:	2303      	movs	r3, #3
 8018872:	e05f      	b.n	8018934 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	2204      	movs	r2, #4
 801887c:	4013      	ands	r3, r2
 801887e:	2b04      	cmp	r3, #4
 8018880:	d146      	bne.n	8018910 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018884:	2280      	movs	r2, #128	@ 0x80
 8018886:	03d1      	lsls	r1, r2, #15
 8018888:	6878      	ldr	r0, [r7, #4]
 801888a:	4a2c      	ldr	r2, [pc, #176]	@ (801893c <UART_CheckIdleState+0x148>)
 801888c:	9200      	str	r2, [sp, #0]
 801888e:	2200      	movs	r2, #0
 8018890:	f000 f858 	bl	8018944 <UART_WaitOnFlagUntilTimeout>
 8018894:	1e03      	subs	r3, r0, #0
 8018896:	d03b      	beq.n	8018910 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018898:	f3ef 8310 	mrs	r3, PRIMASK
 801889c:	60fb      	str	r3, [r7, #12]
  return(result);
 801889e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80188a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80188a2:	2301      	movs	r3, #1
 80188a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188a6:	693b      	ldr	r3, [r7, #16]
 80188a8:	f383 8810 	msr	PRIMASK, r3
}
 80188ac:	46c0      	nop			@ (mov r8, r8)
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	681a      	ldr	r2, [r3, #0]
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	4921      	ldr	r1, [pc, #132]	@ (8018940 <UART_CheckIdleState+0x14c>)
 80188ba:	400a      	ands	r2, r1
 80188bc:	601a      	str	r2, [r3, #0]
 80188be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188c2:	697b      	ldr	r3, [r7, #20]
 80188c4:	f383 8810 	msr	PRIMASK, r3
}
 80188c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188ca:	f3ef 8310 	mrs	r3, PRIMASK
 80188ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80188d0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80188d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80188d4:	2301      	movs	r3, #1
 80188d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188d8:	69fb      	ldr	r3, [r7, #28]
 80188da:	f383 8810 	msr	PRIMASK, r3
}
 80188de:	46c0      	nop			@ (mov r8, r8)
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	689a      	ldr	r2, [r3, #8]
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	2101      	movs	r1, #1
 80188ec:	438a      	bics	r2, r1
 80188ee:	609a      	str	r2, [r3, #8]
 80188f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188f4:	6a3b      	ldr	r3, [r7, #32]
 80188f6:	f383 8810 	msr	PRIMASK, r3
}
 80188fa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2280      	movs	r2, #128	@ 0x80
 8018900:	2120      	movs	r1, #32
 8018902:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	2278      	movs	r2, #120	@ 0x78
 8018908:	2100      	movs	r1, #0
 801890a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801890c:	2303      	movs	r3, #3
 801890e:	e011      	b.n	8018934 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2220      	movs	r2, #32
 8018914:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	2280      	movs	r2, #128	@ 0x80
 801891a:	2120      	movs	r1, #32
 801891c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2200      	movs	r2, #0
 8018922:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2200      	movs	r2, #0
 8018928:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	2278      	movs	r2, #120	@ 0x78
 801892e:	2100      	movs	r1, #0
 8018930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018932:	2300      	movs	r3, #0
}
 8018934:	0018      	movs	r0, r3
 8018936:	46bd      	mov	sp, r7
 8018938:	b010      	add	sp, #64	@ 0x40
 801893a:	bd80      	pop	{r7, pc}
 801893c:	01ffffff 	.word	0x01ffffff
 8018940:	fffffedf 	.word	0xfffffedf

08018944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b084      	sub	sp, #16
 8018948:	af00      	add	r7, sp, #0
 801894a:	60f8      	str	r0, [r7, #12]
 801894c:	60b9      	str	r1, [r7, #8]
 801894e:	603b      	str	r3, [r7, #0]
 8018950:	1dfb      	adds	r3, r7, #7
 8018952:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018954:	e04b      	b.n	80189ee <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018956:	69bb      	ldr	r3, [r7, #24]
 8018958:	3301      	adds	r3, #1
 801895a:	d048      	beq.n	80189ee <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801895c:	f7f6 fc74 	bl	800f248 <HAL_GetTick>
 8018960:	0002      	movs	r2, r0
 8018962:	683b      	ldr	r3, [r7, #0]
 8018964:	1ad3      	subs	r3, r2, r3
 8018966:	69ba      	ldr	r2, [r7, #24]
 8018968:	429a      	cmp	r2, r3
 801896a:	d302      	bcc.n	8018972 <UART_WaitOnFlagUntilTimeout+0x2e>
 801896c:	69bb      	ldr	r3, [r7, #24]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d101      	bne.n	8018976 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8018972:	2303      	movs	r3, #3
 8018974:	e04b      	b.n	8018a0e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	2204      	movs	r2, #4
 801897e:	4013      	ands	r3, r2
 8018980:	d035      	beq.n	80189ee <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	69db      	ldr	r3, [r3, #28]
 8018988:	2208      	movs	r2, #8
 801898a:	4013      	ands	r3, r2
 801898c:	2b08      	cmp	r3, #8
 801898e:	d111      	bne.n	80189b4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2208      	movs	r2, #8
 8018996:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	0018      	movs	r0, r3
 801899c:	f000 f9ca 	bl	8018d34 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	2284      	movs	r2, #132	@ 0x84
 80189a4:	2108      	movs	r1, #8
 80189a6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	2278      	movs	r2, #120	@ 0x78
 80189ac:	2100      	movs	r1, #0
 80189ae:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80189b0:	2301      	movs	r3, #1
 80189b2:	e02c      	b.n	8018a0e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	69da      	ldr	r2, [r3, #28]
 80189ba:	2380      	movs	r3, #128	@ 0x80
 80189bc:	011b      	lsls	r3, r3, #4
 80189be:	401a      	ands	r2, r3
 80189c0:	2380      	movs	r3, #128	@ 0x80
 80189c2:	011b      	lsls	r3, r3, #4
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d112      	bne.n	80189ee <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	2280      	movs	r2, #128	@ 0x80
 80189ce:	0112      	lsls	r2, r2, #4
 80189d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	0018      	movs	r0, r3
 80189d6:	f000 f9ad 	bl	8018d34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	2284      	movs	r2, #132	@ 0x84
 80189de:	2120      	movs	r1, #32
 80189e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	2278      	movs	r2, #120	@ 0x78
 80189e6:	2100      	movs	r1, #0
 80189e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80189ea:	2303      	movs	r3, #3
 80189ec:	e00f      	b.n	8018a0e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	69db      	ldr	r3, [r3, #28]
 80189f4:	68ba      	ldr	r2, [r7, #8]
 80189f6:	4013      	ands	r3, r2
 80189f8:	68ba      	ldr	r2, [r7, #8]
 80189fa:	1ad3      	subs	r3, r2, r3
 80189fc:	425a      	negs	r2, r3
 80189fe:	4153      	adcs	r3, r2
 8018a00:	b2db      	uxtb	r3, r3
 8018a02:	001a      	movs	r2, r3
 8018a04:	1dfb      	adds	r3, r7, #7
 8018a06:	781b      	ldrb	r3, [r3, #0]
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d0a4      	beq.n	8018956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018a0c:	2300      	movs	r3, #0
}
 8018a0e:	0018      	movs	r0, r3
 8018a10:	46bd      	mov	sp, r7
 8018a12:	b004      	add	sp, #16
 8018a14:	bd80      	pop	{r7, pc}
	...

08018a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b090      	sub	sp, #64	@ 0x40
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	60f8      	str	r0, [r7, #12]
 8018a20:	60b9      	str	r1, [r7, #8]
 8018a22:	1dbb      	adds	r3, r7, #6
 8018a24:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	68ba      	ldr	r2, [r7, #8]
 8018a2a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	1dba      	adds	r2, r7, #6
 8018a30:	2158      	movs	r1, #88	@ 0x58
 8018a32:	8812      	ldrh	r2, [r2, #0]
 8018a34:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	1dba      	adds	r2, r7, #6
 8018a3a:	215a      	movs	r1, #90	@ 0x5a
 8018a3c:	8812      	ldrh	r2, [r2, #0]
 8018a3e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	2200      	movs	r2, #0
 8018a44:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	689a      	ldr	r2, [r3, #8]
 8018a4a:	2380      	movs	r3, #128	@ 0x80
 8018a4c:	015b      	lsls	r3, r3, #5
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	d10d      	bne.n	8018a6e <UART_Start_Receive_IT+0x56>
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	691b      	ldr	r3, [r3, #16]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d104      	bne.n	8018a64 <UART_Start_Receive_IT+0x4c>
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	225c      	movs	r2, #92	@ 0x5c
 8018a5e:	4950      	ldr	r1, [pc, #320]	@ (8018ba0 <UART_Start_Receive_IT+0x188>)
 8018a60:	5299      	strh	r1, [r3, r2]
 8018a62:	e02e      	b.n	8018ac2 <UART_Start_Receive_IT+0xaa>
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	225c      	movs	r2, #92	@ 0x5c
 8018a68:	21ff      	movs	r1, #255	@ 0xff
 8018a6a:	5299      	strh	r1, [r3, r2]
 8018a6c:	e029      	b.n	8018ac2 <UART_Start_Receive_IT+0xaa>
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	689b      	ldr	r3, [r3, #8]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d10d      	bne.n	8018a92 <UART_Start_Receive_IT+0x7a>
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	691b      	ldr	r3, [r3, #16]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d104      	bne.n	8018a88 <UART_Start_Receive_IT+0x70>
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	225c      	movs	r2, #92	@ 0x5c
 8018a82:	21ff      	movs	r1, #255	@ 0xff
 8018a84:	5299      	strh	r1, [r3, r2]
 8018a86:	e01c      	b.n	8018ac2 <UART_Start_Receive_IT+0xaa>
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	225c      	movs	r2, #92	@ 0x5c
 8018a8c:	217f      	movs	r1, #127	@ 0x7f
 8018a8e:	5299      	strh	r1, [r3, r2]
 8018a90:	e017      	b.n	8018ac2 <UART_Start_Receive_IT+0xaa>
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	689a      	ldr	r2, [r3, #8]
 8018a96:	2380      	movs	r3, #128	@ 0x80
 8018a98:	055b      	lsls	r3, r3, #21
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d10d      	bne.n	8018aba <UART_Start_Receive_IT+0xa2>
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	691b      	ldr	r3, [r3, #16]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d104      	bne.n	8018ab0 <UART_Start_Receive_IT+0x98>
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	225c      	movs	r2, #92	@ 0x5c
 8018aaa:	217f      	movs	r1, #127	@ 0x7f
 8018aac:	5299      	strh	r1, [r3, r2]
 8018aae:	e008      	b.n	8018ac2 <UART_Start_Receive_IT+0xaa>
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	225c      	movs	r2, #92	@ 0x5c
 8018ab4:	213f      	movs	r1, #63	@ 0x3f
 8018ab6:	5299      	strh	r1, [r3, r2]
 8018ab8:	e003      	b.n	8018ac2 <UART_Start_Receive_IT+0xaa>
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	225c      	movs	r2, #92	@ 0x5c
 8018abe:	2100      	movs	r1, #0
 8018ac0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	2284      	movs	r2, #132	@ 0x84
 8018ac6:	2100      	movs	r1, #0
 8018ac8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	2280      	movs	r2, #128	@ 0x80
 8018ace:	2122      	movs	r1, #34	@ 0x22
 8018ad0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8018ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018adc:	2301      	movs	r3, #1
 8018ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ae2:	f383 8810 	msr	PRIMASK, r3
}
 8018ae6:	46c0      	nop			@ (mov r8, r8)
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	689a      	ldr	r2, [r3, #8]
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	2101      	movs	r1, #1
 8018af4:	430a      	orrs	r2, r1
 8018af6:	609a      	str	r2, [r3, #8]
 8018af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018afa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018afe:	f383 8810 	msr	PRIMASK, r3
}
 8018b02:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	689a      	ldr	r2, [r3, #8]
 8018b08:	2380      	movs	r3, #128	@ 0x80
 8018b0a:	015b      	lsls	r3, r3, #5
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	d107      	bne.n	8018b20 <UART_Start_Receive_IT+0x108>
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	691b      	ldr	r3, [r3, #16]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d103      	bne.n	8018b20 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	4a22      	ldr	r2, [pc, #136]	@ (8018ba4 <UART_Start_Receive_IT+0x18c>)
 8018b1c:	669a      	str	r2, [r3, #104]	@ 0x68
 8018b1e:	e002      	b.n	8018b26 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	4a21      	ldr	r2, [pc, #132]	@ (8018ba8 <UART_Start_Receive_IT+0x190>)
 8018b24:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	691b      	ldr	r3, [r3, #16]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d019      	beq.n	8018b62 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8018b32:	61fb      	str	r3, [r7, #28]
  return(result);
 8018b34:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8018b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8018b38:	2301      	movs	r3, #1
 8018b3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b3c:	6a3b      	ldr	r3, [r7, #32]
 8018b3e:	f383 8810 	msr	PRIMASK, r3
}
 8018b42:	46c0      	nop			@ (mov r8, r8)
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	681a      	ldr	r2, [r3, #0]
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	2190      	movs	r1, #144	@ 0x90
 8018b50:	0049      	lsls	r1, r1, #1
 8018b52:	430a      	orrs	r2, r1
 8018b54:	601a      	str	r2, [r3, #0]
 8018b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b58:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b5c:	f383 8810 	msr	PRIMASK, r3
}
 8018b60:	e018      	b.n	8018b94 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b62:	f3ef 8310 	mrs	r3, PRIMASK
 8018b66:	613b      	str	r3, [r7, #16]
  return(result);
 8018b68:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018b6c:	2301      	movs	r3, #1
 8018b6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b70:	697b      	ldr	r3, [r7, #20]
 8018b72:	f383 8810 	msr	PRIMASK, r3
}
 8018b76:	46c0      	nop			@ (mov r8, r8)
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	681a      	ldr	r2, [r3, #0]
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	2120      	movs	r1, #32
 8018b84:	430a      	orrs	r2, r1
 8018b86:	601a      	str	r2, [r3, #0]
 8018b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b8c:	69bb      	ldr	r3, [r7, #24]
 8018b8e:	f383 8810 	msr	PRIMASK, r3
}
 8018b92:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8018b94:	2300      	movs	r3, #0
}
 8018b96:	0018      	movs	r0, r3
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	b010      	add	sp, #64	@ 0x40
 8018b9c:	bd80      	pop	{r7, pc}
 8018b9e:	46c0      	nop			@ (mov r8, r8)
 8018ba0:	000001ff 	.word	0x000001ff
 8018ba4:	08019319 	.word	0x08019319
 8018ba8:	0801914d 	.word	0x0801914d

08018bac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b090      	sub	sp, #64	@ 0x40
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	60f8      	str	r0, [r7, #12]
 8018bb4:	60b9      	str	r1, [r7, #8]
 8018bb6:	1dbb      	adds	r3, r7, #6
 8018bb8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	68ba      	ldr	r2, [r7, #8]
 8018bbe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	1dba      	adds	r2, r7, #6
 8018bc4:	2158      	movs	r1, #88	@ 0x58
 8018bc6:	8812      	ldrh	r2, [r2, #0]
 8018bc8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	2284      	movs	r2, #132	@ 0x84
 8018bce:	2100      	movs	r1, #0
 8018bd0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	2280      	movs	r2, #128	@ 0x80
 8018bd6:	2122      	movs	r1, #34	@ 0x22
 8018bd8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d028      	beq.n	8018c34 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018be6:	4a3e      	ldr	r2, [pc, #248]	@ (8018ce0 <UART_Start_Receive_DMA+0x134>)
 8018be8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bee:	4a3d      	ldr	r2, [pc, #244]	@ (8018ce4 <UART_Start_Receive_DMA+0x138>)
 8018bf0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bf6:	4a3c      	ldr	r2, [pc, #240]	@ (8018ce8 <UART_Start_Receive_DMA+0x13c>)
 8018bf8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bfe:	2200      	movs	r2, #0
 8018c00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	3324      	adds	r3, #36	@ 0x24
 8018c0c:	0019      	movs	r1, r3
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c12:	001a      	movs	r2, r3
 8018c14:	1dbb      	adds	r3, r7, #6
 8018c16:	881b      	ldrh	r3, [r3, #0]
 8018c18:	f7f7 f868 	bl	800fcec <HAL_DMA_Start_IT>
 8018c1c:	1e03      	subs	r3, r0, #0
 8018c1e:	d009      	beq.n	8018c34 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	2284      	movs	r2, #132	@ 0x84
 8018c24:	2110      	movs	r1, #16
 8018c26:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	2280      	movs	r2, #128	@ 0x80
 8018c2c:	2120      	movs	r1, #32
 8018c2e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8018c30:	2301      	movs	r3, #1
 8018c32:	e050      	b.n	8018cd6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	691b      	ldr	r3, [r3, #16]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d019      	beq.n	8018c70 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8018c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018c46:	2301      	movs	r3, #1
 8018c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c4c:	f383 8810 	msr	PRIMASK, r3
}
 8018c50:	46c0      	nop			@ (mov r8, r8)
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	681a      	ldr	r2, [r3, #0]
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	2180      	movs	r1, #128	@ 0x80
 8018c5e:	0049      	lsls	r1, r1, #1
 8018c60:	430a      	orrs	r2, r1
 8018c62:	601a      	str	r2, [r3, #0]
 8018c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c66:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c6a:	f383 8810 	msr	PRIMASK, r3
}
 8018c6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c70:	f3ef 8310 	mrs	r3, PRIMASK
 8018c74:	613b      	str	r3, [r7, #16]
  return(result);
 8018c76:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018c78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	f383 8810 	msr	PRIMASK, r3
}
 8018c84:	46c0      	nop			@ (mov r8, r8)
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	689a      	ldr	r2, [r3, #8]
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	2101      	movs	r1, #1
 8018c92:	430a      	orrs	r2, r1
 8018c94:	609a      	str	r2, [r3, #8]
 8018c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c9a:	69bb      	ldr	r3, [r7, #24]
 8018c9c:	f383 8810 	msr	PRIMASK, r3
}
 8018ca0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8018ca6:	61fb      	str	r3, [r7, #28]
  return(result);
 8018ca8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8018cac:	2301      	movs	r3, #1
 8018cae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cb0:	6a3b      	ldr	r3, [r7, #32]
 8018cb2:	f383 8810 	msr	PRIMASK, r3
}
 8018cb6:	46c0      	nop			@ (mov r8, r8)
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	689a      	ldr	r2, [r3, #8]
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	2140      	movs	r1, #64	@ 0x40
 8018cc4:	430a      	orrs	r2, r1
 8018cc6:	609a      	str	r2, [r3, #8]
 8018cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018cca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cce:	f383 8810 	msr	PRIMASK, r3
}
 8018cd2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8018cd4:	2300      	movs	r3, #0
}
 8018cd6:	0018      	movs	r0, r3
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	b010      	add	sp, #64	@ 0x40
 8018cdc:	bd80      	pop	{r7, pc}
 8018cde:	46c0      	nop			@ (mov r8, r8)
 8018ce0:	08018ebd 	.word	0x08018ebd
 8018ce4:	08018ff1 	.word	0x08018ff1
 8018ce8:	08019039 	.word	0x08019039

08018cec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b086      	sub	sp, #24
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8018cf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8018cfa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018cfc:	617b      	str	r3, [r7, #20]
 8018cfe:	2301      	movs	r3, #1
 8018d00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	f383 8810 	msr	PRIMASK, r3
}
 8018d08:	46c0      	nop			@ (mov r8, r8)
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	681a      	ldr	r2, [r3, #0]
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	21c0      	movs	r1, #192	@ 0xc0
 8018d16:	438a      	bics	r2, r1
 8018d18:	601a      	str	r2, [r3, #0]
 8018d1a:	697b      	ldr	r3, [r7, #20]
 8018d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d1e:	693b      	ldr	r3, [r7, #16]
 8018d20:	f383 8810 	msr	PRIMASK, r3
}
 8018d24:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	2220      	movs	r2, #32
 8018d2a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018d2c:	46c0      	nop			@ (mov r8, r8)
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	b006      	add	sp, #24
 8018d32:	bd80      	pop	{r7, pc}

08018d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b08e      	sub	sp, #56	@ 0x38
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8018d40:	617b      	str	r3, [r7, #20]
  return(result);
 8018d42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8018d46:	2301      	movs	r3, #1
 8018d48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d4a:	69bb      	ldr	r3, [r7, #24]
 8018d4c:	f383 8810 	msr	PRIMASK, r3
}
 8018d50:	46c0      	nop			@ (mov r8, r8)
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	681a      	ldr	r2, [r3, #0]
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	4926      	ldr	r1, [pc, #152]	@ (8018df8 <UART_EndRxTransfer+0xc4>)
 8018d5e:	400a      	ands	r2, r1
 8018d60:	601a      	str	r2, [r3, #0]
 8018d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018d64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d66:	69fb      	ldr	r3, [r7, #28]
 8018d68:	f383 8810 	msr	PRIMASK, r3
}
 8018d6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8018d72:	623b      	str	r3, [r7, #32]
  return(result);
 8018d74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8018d78:	2301      	movs	r3, #1
 8018d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d7e:	f383 8810 	msr	PRIMASK, r3
}
 8018d82:	46c0      	nop			@ (mov r8, r8)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	689a      	ldr	r2, [r3, #8]
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	2101      	movs	r1, #1
 8018d90:	438a      	bics	r2, r1
 8018d92:	609a      	str	r2, [r3, #8]
 8018d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d9a:	f383 8810 	msr	PRIMASK, r3
}
 8018d9e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018da4:	2b01      	cmp	r3, #1
 8018da6:	d118      	bne.n	8018dda <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018da8:	f3ef 8310 	mrs	r3, PRIMASK
 8018dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8018dae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018db2:	2301      	movs	r3, #1
 8018db4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	f383 8810 	msr	PRIMASK, r3
}
 8018dbc:	46c0      	nop			@ (mov r8, r8)
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	681a      	ldr	r2, [r3, #0]
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	2110      	movs	r1, #16
 8018dca:	438a      	bics	r2, r1
 8018dcc:	601a      	str	r2, [r3, #0]
 8018dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	f383 8810 	msr	PRIMASK, r3
}
 8018dd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	2280      	movs	r2, #128	@ 0x80
 8018dde:	2120      	movs	r1, #32
 8018de0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	2200      	movs	r2, #0
 8018de6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	2200      	movs	r2, #0
 8018dec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018dee:	46c0      	nop			@ (mov r8, r8)
 8018df0:	46bd      	mov	sp, r7
 8018df2:	b00e      	add	sp, #56	@ 0x38
 8018df4:	bd80      	pop	{r7, pc}
 8018df6:	46c0      	nop			@ (mov r8, r8)
 8018df8:	fffffedf 	.word	0xfffffedf

08018dfc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b08c      	sub	sp, #48	@ 0x30
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e08:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	2220      	movs	r2, #32
 8018e12:	4013      	ands	r3, r2
 8018e14:	d135      	bne.n	8018e82 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e18:	2252      	movs	r2, #82	@ 0x52
 8018e1a:	2100      	movs	r1, #0
 8018e1c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8018e22:	60fb      	str	r3, [r7, #12]
  return(result);
 8018e24:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e28:	2301      	movs	r3, #1
 8018e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e2c:	693b      	ldr	r3, [r7, #16]
 8018e2e:	f383 8810 	msr	PRIMASK, r3
}
 8018e32:	46c0      	nop			@ (mov r8, r8)
 8018e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	689a      	ldr	r2, [r3, #8]
 8018e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	2180      	movs	r1, #128	@ 0x80
 8018e40:	438a      	bics	r2, r1
 8018e42:	609a      	str	r2, [r3, #8]
 8018e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	f383 8810 	msr	PRIMASK, r3
}
 8018e4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e50:	f3ef 8310 	mrs	r3, PRIMASK
 8018e54:	61bb      	str	r3, [r7, #24]
  return(result);
 8018e56:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e5a:	2301      	movs	r3, #1
 8018e5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e5e:	69fb      	ldr	r3, [r7, #28]
 8018e60:	f383 8810 	msr	PRIMASK, r3
}
 8018e64:	46c0      	nop			@ (mov r8, r8)
 8018e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	681a      	ldr	r2, [r3, #0]
 8018e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	2140      	movs	r1, #64	@ 0x40
 8018e72:	430a      	orrs	r2, r1
 8018e74:	601a      	str	r2, [r3, #0]
 8018e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e7a:	6a3b      	ldr	r3, [r7, #32]
 8018e7c:	f383 8810 	msr	PRIMASK, r3
}
 8018e80:	e006      	b.n	8018e90 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8018e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e84:	228c      	movs	r2, #140	@ 0x8c
 8018e86:	589b      	ldr	r3, [r3, r2]
 8018e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018e8a:	0010      	movs	r0, r2
 8018e8c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018e8e:	46c0      	nop			@ (mov r8, r8)
 8018e90:	46c0      	nop			@ (mov r8, r8)
 8018e92:	46bd      	mov	sp, r7
 8018e94:	b00c      	add	sp, #48	@ 0x30
 8018e96:	bd80      	pop	{r7, pc}

08018e98 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b084      	sub	sp, #16
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ea4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	2288      	movs	r2, #136	@ 0x88
 8018eaa:	589b      	ldr	r3, [r3, r2]
 8018eac:	68fa      	ldr	r2, [r7, #12]
 8018eae:	0010      	movs	r0, r2
 8018eb0:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018eb2:	46c0      	nop			@ (mov r8, r8)
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	b004      	add	sp, #16
 8018eb8:	bd80      	pop	{r7, pc}
	...

08018ebc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b094      	sub	sp, #80	@ 0x50
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	2220      	movs	r2, #32
 8018ed2:	4013      	ands	r3, r2
 8018ed4:	d16f      	bne.n	8018fb6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8018ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ed8:	225a      	movs	r2, #90	@ 0x5a
 8018eda:	2100      	movs	r1, #0
 8018edc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ede:	f3ef 8310 	mrs	r3, PRIMASK
 8018ee2:	61bb      	str	r3, [r7, #24]
  return(result);
 8018ee4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018ee8:	2301      	movs	r3, #1
 8018eea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eec:	69fb      	ldr	r3, [r7, #28]
 8018eee:	f383 8810 	msr	PRIMASK, r3
}
 8018ef2:	46c0      	nop			@ (mov r8, r8)
 8018ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	681a      	ldr	r2, [r3, #0]
 8018efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	493b      	ldr	r1, [pc, #236]	@ (8018fec <UART_DMAReceiveCplt+0x130>)
 8018f00:	400a      	ands	r2, r1
 8018f02:	601a      	str	r2, [r3, #0]
 8018f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018f06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f08:	6a3b      	ldr	r3, [r7, #32]
 8018f0a:	f383 8810 	msr	PRIMASK, r3
}
 8018f0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f10:	f3ef 8310 	mrs	r3, PRIMASK
 8018f14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8018f1a:	2301      	movs	r3, #1
 8018f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f20:	f383 8810 	msr	PRIMASK, r3
}
 8018f24:	46c0      	nop			@ (mov r8, r8)
 8018f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	689a      	ldr	r2, [r3, #8]
 8018f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	2101      	movs	r1, #1
 8018f32:	438a      	bics	r2, r1
 8018f34:	609a      	str	r2, [r3, #8]
 8018f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f3c:	f383 8810 	msr	PRIMASK, r3
}
 8018f40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f42:	f3ef 8310 	mrs	r3, PRIMASK
 8018f46:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8018f4c:	2301      	movs	r3, #1
 8018f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f52:	f383 8810 	msr	PRIMASK, r3
}
 8018f56:	46c0      	nop			@ (mov r8, r8)
 8018f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	689a      	ldr	r2, [r3, #8]
 8018f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	2140      	movs	r1, #64	@ 0x40
 8018f64:	438a      	bics	r2, r1
 8018f66:	609a      	str	r2, [r3, #8]
 8018f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f6e:	f383 8810 	msr	PRIMASK, r3
}
 8018f72:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f76:	2280      	movs	r2, #128	@ 0x80
 8018f78:	2120      	movs	r1, #32
 8018f7a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018f80:	2b01      	cmp	r3, #1
 8018f82:	d118      	bne.n	8018fb6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f84:	f3ef 8310 	mrs	r3, PRIMASK
 8018f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8018f8a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f8e:	2301      	movs	r3, #1
 8018f90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f92:	693b      	ldr	r3, [r7, #16]
 8018f94:	f383 8810 	msr	PRIMASK, r3
}
 8018f98:	46c0      	nop			@ (mov r8, r8)
 8018f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	681a      	ldr	r2, [r3, #0]
 8018fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	2110      	movs	r1, #16
 8018fa6:	438a      	bics	r2, r1
 8018fa8:	601a      	str	r2, [r3, #0]
 8018faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fae:	697b      	ldr	r3, [r7, #20]
 8018fb0:	f383 8810 	msr	PRIMASK, r3
}
 8018fb4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018fb8:	2200      	movs	r2, #0
 8018fba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018fc0:	2b01      	cmp	r3, #1
 8018fc2:	d109      	bne.n	8018fd8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018fc6:	22ac      	movs	r2, #172	@ 0xac
 8018fc8:	589b      	ldr	r3, [r3, r2]
 8018fca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018fcc:	2158      	movs	r1, #88	@ 0x58
 8018fce:	5a51      	ldrh	r1, [r2, r1]
 8018fd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018fd2:	0010      	movs	r0, r2
 8018fd4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018fd6:	e005      	b.n	8018fe4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018fda:	2294      	movs	r2, #148	@ 0x94
 8018fdc:	589b      	ldr	r3, [r3, r2]
 8018fde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018fe0:	0010      	movs	r0, r2
 8018fe2:	4798      	blx	r3
}
 8018fe4:	46c0      	nop			@ (mov r8, r8)
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	b014      	add	sp, #80	@ 0x50
 8018fea:	bd80      	pop	{r7, pc}
 8018fec:	fffffeff 	.word	0xfffffeff

08018ff0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b084      	sub	sp, #16
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ffc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	2201      	movs	r2, #1
 8019002:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019008:	2b01      	cmp	r3, #1
 801900a:	d10b      	bne.n	8019024 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	22ac      	movs	r2, #172	@ 0xac
 8019010:	589b      	ldr	r3, [r3, r2]
 8019012:	68fa      	ldr	r2, [r7, #12]
 8019014:	2158      	movs	r1, #88	@ 0x58
 8019016:	5a52      	ldrh	r2, [r2, r1]
 8019018:	0852      	lsrs	r2, r2, #1
 801901a:	b291      	uxth	r1, r2
 801901c:	68fa      	ldr	r2, [r7, #12]
 801901e:	0010      	movs	r0, r2
 8019020:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8019022:	e005      	b.n	8019030 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	2290      	movs	r2, #144	@ 0x90
 8019028:	589b      	ldr	r3, [r3, r2]
 801902a:	68fa      	ldr	r2, [r7, #12]
 801902c:	0010      	movs	r0, r2
 801902e:	4798      	blx	r3
}
 8019030:	46c0      	nop			@ (mov r8, r8)
 8019032:	46bd      	mov	sp, r7
 8019034:	b004      	add	sp, #16
 8019036:	bd80      	pop	{r7, pc}

08019038 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b086      	sub	sp, #24
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019044:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8019046:	697b      	ldr	r3, [r7, #20]
 8019048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801904a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801904c:	697b      	ldr	r3, [r7, #20]
 801904e:	2280      	movs	r2, #128	@ 0x80
 8019050:	589b      	ldr	r3, [r3, r2]
 8019052:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8019054:	697b      	ldr	r3, [r7, #20]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	689b      	ldr	r3, [r3, #8]
 801905a:	2280      	movs	r2, #128	@ 0x80
 801905c:	4013      	ands	r3, r2
 801905e:	2b80      	cmp	r3, #128	@ 0x80
 8019060:	d10a      	bne.n	8019078 <UART_DMAError+0x40>
 8019062:	693b      	ldr	r3, [r7, #16]
 8019064:	2b21      	cmp	r3, #33	@ 0x21
 8019066:	d107      	bne.n	8019078 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	2252      	movs	r2, #82	@ 0x52
 801906c:	2100      	movs	r1, #0
 801906e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8019070:	697b      	ldr	r3, [r7, #20]
 8019072:	0018      	movs	r0, r3
 8019074:	f7ff fe3a 	bl	8018cec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8019078:	697b      	ldr	r3, [r7, #20]
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	689b      	ldr	r3, [r3, #8]
 801907e:	2240      	movs	r2, #64	@ 0x40
 8019080:	4013      	ands	r3, r2
 8019082:	2b40      	cmp	r3, #64	@ 0x40
 8019084:	d10a      	bne.n	801909c <UART_DMAError+0x64>
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	2b22      	cmp	r3, #34	@ 0x22
 801908a:	d107      	bne.n	801909c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801908c:	697b      	ldr	r3, [r7, #20]
 801908e:	225a      	movs	r2, #90	@ 0x5a
 8019090:	2100      	movs	r1, #0
 8019092:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8019094:	697b      	ldr	r3, [r7, #20]
 8019096:	0018      	movs	r0, r3
 8019098:	f7ff fe4c 	bl	8018d34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801909c:	697b      	ldr	r3, [r7, #20]
 801909e:	2284      	movs	r2, #132	@ 0x84
 80190a0:	589b      	ldr	r3, [r3, r2]
 80190a2:	2210      	movs	r2, #16
 80190a4:	431a      	orrs	r2, r3
 80190a6:	697b      	ldr	r3, [r7, #20]
 80190a8:	2184      	movs	r1, #132	@ 0x84
 80190aa:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80190ac:	697b      	ldr	r3, [r7, #20]
 80190ae:	2298      	movs	r2, #152	@ 0x98
 80190b0:	589b      	ldr	r3, [r3, r2]
 80190b2:	697a      	ldr	r2, [r7, #20]
 80190b4:	0010      	movs	r0, r2
 80190b6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80190b8:	46c0      	nop			@ (mov r8, r8)
 80190ba:	46bd      	mov	sp, r7
 80190bc:	b006      	add	sp, #24
 80190be:	bd80      	pop	{r7, pc}

080190c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	b084      	sub	sp, #16
 80190c4:	af00      	add	r7, sp, #0
 80190c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	225a      	movs	r2, #90	@ 0x5a
 80190d2:	2100      	movs	r1, #0
 80190d4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	2252      	movs	r2, #82	@ 0x52
 80190da:	2100      	movs	r1, #0
 80190dc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	2298      	movs	r2, #152	@ 0x98
 80190e2:	589b      	ldr	r3, [r3, r2]
 80190e4:	68fa      	ldr	r2, [r7, #12]
 80190e6:	0010      	movs	r0, r2
 80190e8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80190ea:	46c0      	nop			@ (mov r8, r8)
 80190ec:	46bd      	mov	sp, r7
 80190ee:	b004      	add	sp, #16
 80190f0:	bd80      	pop	{r7, pc}

080190f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80190f2:	b580      	push	{r7, lr}
 80190f4:	b086      	sub	sp, #24
 80190f6:	af00      	add	r7, sp, #0
 80190f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190fa:	f3ef 8310 	mrs	r3, PRIMASK
 80190fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8019100:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019102:	617b      	str	r3, [r7, #20]
 8019104:	2301      	movs	r3, #1
 8019106:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	f383 8810 	msr	PRIMASK, r3
}
 801910e:	46c0      	nop			@ (mov r8, r8)
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	681a      	ldr	r2, [r3, #0]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	2140      	movs	r1, #64	@ 0x40
 801911c:	438a      	bics	r2, r1
 801911e:	601a      	str	r2, [r3, #0]
 8019120:	697b      	ldr	r3, [r7, #20]
 8019122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019124:	693b      	ldr	r3, [r7, #16]
 8019126:	f383 8810 	msr	PRIMASK, r3
}
 801912a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	2220      	movs	r2, #32
 8019130:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2200      	movs	r2, #0
 8019136:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	228c      	movs	r2, #140	@ 0x8c
 801913c:	589b      	ldr	r3, [r3, r2]
 801913e:	687a      	ldr	r2, [r7, #4]
 8019140:	0010      	movs	r0, r2
 8019142:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019144:	46c0      	nop			@ (mov r8, r8)
 8019146:	46bd      	mov	sp, r7
 8019148:	b006      	add	sp, #24
 801914a:	bd80      	pop	{r7, pc}

0801914c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b094      	sub	sp, #80	@ 0x50
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019154:	204e      	movs	r0, #78	@ 0x4e
 8019156:	183b      	adds	r3, r7, r0
 8019158:	687a      	ldr	r2, [r7, #4]
 801915a:	215c      	movs	r1, #92	@ 0x5c
 801915c:	5a52      	ldrh	r2, [r2, r1]
 801915e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	2280      	movs	r2, #128	@ 0x80
 8019164:	589b      	ldr	r3, [r3, r2]
 8019166:	2b22      	cmp	r3, #34	@ 0x22
 8019168:	d000      	beq.n	801916c <UART_RxISR_8BIT+0x20>
 801916a:	e0c2      	b.n	80192f2 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019172:	214c      	movs	r1, #76	@ 0x4c
 8019174:	187b      	adds	r3, r7, r1
 8019176:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019178:	187b      	adds	r3, r7, r1
 801917a:	881b      	ldrh	r3, [r3, #0]
 801917c:	b2da      	uxtb	r2, r3
 801917e:	183b      	adds	r3, r7, r0
 8019180:	881b      	ldrh	r3, [r3, #0]
 8019182:	b2d9      	uxtb	r1, r3
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019188:	400a      	ands	r2, r1
 801918a:	b2d2      	uxtb	r2, r2
 801918c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019192:	1c5a      	adds	r2, r3, #1
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	225a      	movs	r2, #90	@ 0x5a
 801919c:	5a9b      	ldrh	r3, [r3, r2]
 801919e:	b29b      	uxth	r3, r3
 80191a0:	3b01      	subs	r3, #1
 80191a2:	b299      	uxth	r1, r3
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	225a      	movs	r2, #90	@ 0x5a
 80191a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	225a      	movs	r2, #90	@ 0x5a
 80191ae:	5a9b      	ldrh	r3, [r3, r2]
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d000      	beq.n	80191b8 <UART_RxISR_8BIT+0x6c>
 80191b6:	e0a4      	b.n	8019302 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191b8:	f3ef 8310 	mrs	r3, PRIMASK
 80191bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80191be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80191c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80191c2:	2301      	movs	r3, #1
 80191c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191c8:	f383 8810 	msr	PRIMASK, r3
}
 80191cc:	46c0      	nop			@ (mov r8, r8)
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	681a      	ldr	r2, [r3, #0]
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	494c      	ldr	r1, [pc, #304]	@ (801930c <UART_RxISR_8BIT+0x1c0>)
 80191da:	400a      	ands	r2, r1
 80191dc:	601a      	str	r2, [r3, #0]
 80191de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80191e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191e4:	f383 8810 	msr	PRIMASK, r3
}
 80191e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191ea:	f3ef 8310 	mrs	r3, PRIMASK
 80191ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80191f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80191f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80191f4:	2301      	movs	r3, #1
 80191f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191fa:	f383 8810 	msr	PRIMASK, r3
}
 80191fe:	46c0      	nop			@ (mov r8, r8)
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	689a      	ldr	r2, [r3, #8]
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	2101      	movs	r1, #1
 801920c:	438a      	bics	r2, r1
 801920e:	609a      	str	r2, [r3, #8]
 8019210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019212:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019216:	f383 8810 	msr	PRIMASK, r3
}
 801921a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	2280      	movs	r2, #128	@ 0x80
 8019220:	2120      	movs	r1, #32
 8019222:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	2200      	movs	r2, #0
 8019228:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	2200      	movs	r2, #0
 801922e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	4a36      	ldr	r2, [pc, #216]	@ (8019310 <UART_RxISR_8BIT+0x1c4>)
 8019236:	4293      	cmp	r3, r2
 8019238:	d01f      	beq.n	801927a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	685a      	ldr	r2, [r3, #4]
 8019240:	2380      	movs	r3, #128	@ 0x80
 8019242:	041b      	lsls	r3, r3, #16
 8019244:	4013      	ands	r3, r2
 8019246:	d018      	beq.n	801927a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019248:	f3ef 8310 	mrs	r3, PRIMASK
 801924c:	61bb      	str	r3, [r7, #24]
  return(result);
 801924e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019250:	643b      	str	r3, [r7, #64]	@ 0x40
 8019252:	2301      	movs	r3, #1
 8019254:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019256:	69fb      	ldr	r3, [r7, #28]
 8019258:	f383 8810 	msr	PRIMASK, r3
}
 801925c:	46c0      	nop			@ (mov r8, r8)
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	681a      	ldr	r2, [r3, #0]
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	492a      	ldr	r1, [pc, #168]	@ (8019314 <UART_RxISR_8BIT+0x1c8>)
 801926a:	400a      	ands	r2, r1
 801926c:	601a      	str	r2, [r3, #0]
 801926e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019270:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019272:	6a3b      	ldr	r3, [r7, #32]
 8019274:	f383 8810 	msr	PRIMASK, r3
}
 8019278:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801927e:	2b01      	cmp	r3, #1
 8019280:	d130      	bne.n	80192e4 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	2200      	movs	r2, #0
 8019286:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019288:	f3ef 8310 	mrs	r3, PRIMASK
 801928c:	60fb      	str	r3, [r7, #12]
  return(result);
 801928e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019292:	2301      	movs	r3, #1
 8019294:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019296:	693b      	ldr	r3, [r7, #16]
 8019298:	f383 8810 	msr	PRIMASK, r3
}
 801929c:	46c0      	nop			@ (mov r8, r8)
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	681a      	ldr	r2, [r3, #0]
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	2110      	movs	r1, #16
 80192aa:	438a      	bics	r2, r1
 80192ac:	601a      	str	r2, [r3, #0]
 80192ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192b2:	697b      	ldr	r3, [r7, #20]
 80192b4:	f383 8810 	msr	PRIMASK, r3
}
 80192b8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	69db      	ldr	r3, [r3, #28]
 80192c0:	2210      	movs	r2, #16
 80192c2:	4013      	ands	r3, r2
 80192c4:	2b10      	cmp	r3, #16
 80192c6:	d103      	bne.n	80192d0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	2210      	movs	r2, #16
 80192ce:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	22ac      	movs	r2, #172	@ 0xac
 80192d4:	589b      	ldr	r3, [r3, r2]
 80192d6:	687a      	ldr	r2, [r7, #4]
 80192d8:	2158      	movs	r1, #88	@ 0x58
 80192da:	5a51      	ldrh	r1, [r2, r1]
 80192dc:	687a      	ldr	r2, [r7, #4]
 80192de:	0010      	movs	r0, r2
 80192e0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80192e2:	e00e      	b.n	8019302 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	2294      	movs	r2, #148	@ 0x94
 80192e8:	589b      	ldr	r3, [r3, r2]
 80192ea:	687a      	ldr	r2, [r7, #4]
 80192ec:	0010      	movs	r0, r2
 80192ee:	4798      	blx	r3
}
 80192f0:	e007      	b.n	8019302 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	699a      	ldr	r2, [r3, #24]
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	2108      	movs	r1, #8
 80192fe:	430a      	orrs	r2, r1
 8019300:	619a      	str	r2, [r3, #24]
}
 8019302:	46c0      	nop			@ (mov r8, r8)
 8019304:	46bd      	mov	sp, r7
 8019306:	b014      	add	sp, #80	@ 0x50
 8019308:	bd80      	pop	{r7, pc}
 801930a:	46c0      	nop			@ (mov r8, r8)
 801930c:	fffffedf 	.word	0xfffffedf
 8019310:	40004800 	.word	0x40004800
 8019314:	fbffffff 	.word	0xfbffffff

08019318 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b094      	sub	sp, #80	@ 0x50
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019320:	204e      	movs	r0, #78	@ 0x4e
 8019322:	183b      	adds	r3, r7, r0
 8019324:	687a      	ldr	r2, [r7, #4]
 8019326:	215c      	movs	r1, #92	@ 0x5c
 8019328:	5a52      	ldrh	r2, [r2, r1]
 801932a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	2280      	movs	r2, #128	@ 0x80
 8019330:	589b      	ldr	r3, [r3, r2]
 8019332:	2b22      	cmp	r3, #34	@ 0x22
 8019334:	d000      	beq.n	8019338 <UART_RxISR_16BIT+0x20>
 8019336:	e0c2      	b.n	80194be <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801933e:	214c      	movs	r1, #76	@ 0x4c
 8019340:	187b      	adds	r3, r7, r1
 8019342:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019348:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801934a:	187b      	adds	r3, r7, r1
 801934c:	183a      	adds	r2, r7, r0
 801934e:	881b      	ldrh	r3, [r3, #0]
 8019350:	8812      	ldrh	r2, [r2, #0]
 8019352:	4013      	ands	r3, r2
 8019354:	b29a      	uxth	r2, r3
 8019356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019358:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801935e:	1c9a      	adds	r2, r3, #2
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	225a      	movs	r2, #90	@ 0x5a
 8019368:	5a9b      	ldrh	r3, [r3, r2]
 801936a:	b29b      	uxth	r3, r3
 801936c:	3b01      	subs	r3, #1
 801936e:	b299      	uxth	r1, r3
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	225a      	movs	r2, #90	@ 0x5a
 8019374:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	225a      	movs	r2, #90	@ 0x5a
 801937a:	5a9b      	ldrh	r3, [r3, r2]
 801937c:	b29b      	uxth	r3, r3
 801937e:	2b00      	cmp	r3, #0
 8019380:	d000      	beq.n	8019384 <UART_RxISR_16BIT+0x6c>
 8019382:	e0a4      	b.n	80194ce <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019384:	f3ef 8310 	mrs	r3, PRIMASK
 8019388:	623b      	str	r3, [r7, #32]
  return(result);
 801938a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801938c:	647b      	str	r3, [r7, #68]	@ 0x44
 801938e:	2301      	movs	r3, #1
 8019390:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019394:	f383 8810 	msr	PRIMASK, r3
}
 8019398:	46c0      	nop			@ (mov r8, r8)
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	681a      	ldr	r2, [r3, #0]
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	494c      	ldr	r1, [pc, #304]	@ (80194d8 <UART_RxISR_16BIT+0x1c0>)
 80193a6:	400a      	ands	r2, r1
 80193a8:	601a      	str	r2, [r3, #0]
 80193aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80193ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193b0:	f383 8810 	msr	PRIMASK, r3
}
 80193b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193b6:	f3ef 8310 	mrs	r3, PRIMASK
 80193ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80193bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80193be:	643b      	str	r3, [r7, #64]	@ 0x40
 80193c0:	2301      	movs	r3, #1
 80193c2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193c6:	f383 8810 	msr	PRIMASK, r3
}
 80193ca:	46c0      	nop			@ (mov r8, r8)
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	689a      	ldr	r2, [r3, #8]
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	2101      	movs	r1, #1
 80193d8:	438a      	bics	r2, r1
 80193da:	609a      	str	r2, [r3, #8]
 80193dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80193de:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193e2:	f383 8810 	msr	PRIMASK, r3
}
 80193e6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	2280      	movs	r2, #128	@ 0x80
 80193ec:	2120      	movs	r1, #32
 80193ee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2200      	movs	r2, #0
 80193f4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	2200      	movs	r2, #0
 80193fa:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4a36      	ldr	r2, [pc, #216]	@ (80194dc <UART_RxISR_16BIT+0x1c4>)
 8019402:	4293      	cmp	r3, r2
 8019404:	d01f      	beq.n	8019446 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	685a      	ldr	r2, [r3, #4]
 801940c:	2380      	movs	r3, #128	@ 0x80
 801940e:	041b      	lsls	r3, r3, #16
 8019410:	4013      	ands	r3, r2
 8019412:	d018      	beq.n	8019446 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019414:	f3ef 8310 	mrs	r3, PRIMASK
 8019418:	617b      	str	r3, [r7, #20]
  return(result);
 801941a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801941c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801941e:	2301      	movs	r3, #1
 8019420:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019422:	69bb      	ldr	r3, [r7, #24]
 8019424:	f383 8810 	msr	PRIMASK, r3
}
 8019428:	46c0      	nop			@ (mov r8, r8)
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	681a      	ldr	r2, [r3, #0]
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	492a      	ldr	r1, [pc, #168]	@ (80194e0 <UART_RxISR_16BIT+0x1c8>)
 8019436:	400a      	ands	r2, r1
 8019438:	601a      	str	r2, [r3, #0]
 801943a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801943c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801943e:	69fb      	ldr	r3, [r7, #28]
 8019440:	f383 8810 	msr	PRIMASK, r3
}
 8019444:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801944a:	2b01      	cmp	r3, #1
 801944c:	d130      	bne.n	80194b0 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	2200      	movs	r2, #0
 8019452:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019454:	f3ef 8310 	mrs	r3, PRIMASK
 8019458:	60bb      	str	r3, [r7, #8]
  return(result);
 801945a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801945c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801945e:	2301      	movs	r3, #1
 8019460:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	f383 8810 	msr	PRIMASK, r3
}
 8019468:	46c0      	nop			@ (mov r8, r8)
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	681a      	ldr	r2, [r3, #0]
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	2110      	movs	r1, #16
 8019476:	438a      	bics	r2, r1
 8019478:	601a      	str	r2, [r3, #0]
 801947a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801947c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801947e:	693b      	ldr	r3, [r7, #16]
 8019480:	f383 8810 	msr	PRIMASK, r3
}
 8019484:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	69db      	ldr	r3, [r3, #28]
 801948c:	2210      	movs	r2, #16
 801948e:	4013      	ands	r3, r2
 8019490:	2b10      	cmp	r3, #16
 8019492:	d103      	bne.n	801949c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	2210      	movs	r2, #16
 801949a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	22ac      	movs	r2, #172	@ 0xac
 80194a0:	589b      	ldr	r3, [r3, r2]
 80194a2:	687a      	ldr	r2, [r7, #4]
 80194a4:	2158      	movs	r1, #88	@ 0x58
 80194a6:	5a51      	ldrh	r1, [r2, r1]
 80194a8:	687a      	ldr	r2, [r7, #4]
 80194aa:	0010      	movs	r0, r2
 80194ac:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80194ae:	e00e      	b.n	80194ce <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2294      	movs	r2, #148	@ 0x94
 80194b4:	589b      	ldr	r3, [r3, r2]
 80194b6:	687a      	ldr	r2, [r7, #4]
 80194b8:	0010      	movs	r0, r2
 80194ba:	4798      	blx	r3
}
 80194bc:	e007      	b.n	80194ce <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	699a      	ldr	r2, [r3, #24]
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	2108      	movs	r1, #8
 80194ca:	430a      	orrs	r2, r1
 80194cc:	619a      	str	r2, [r3, #24]
}
 80194ce:	46c0      	nop			@ (mov r8, r8)
 80194d0:	46bd      	mov	sp, r7
 80194d2:	b014      	add	sp, #80	@ 0x50
 80194d4:	bd80      	pop	{r7, pc}
 80194d6:	46c0      	nop			@ (mov r8, r8)
 80194d8:	fffffedf 	.word	0xfffffedf
 80194dc:	40004800 	.word	0x40004800
 80194e0:	fbffffff 	.word	0xfbffffff

080194e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b082      	sub	sp, #8
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80194ec:	46c0      	nop			@ (mov r8, r8)
 80194ee:	46bd      	mov	sp, r7
 80194f0:	b002      	add	sp, #8
 80194f2:	bd80      	pop	{r7, pc}

080194f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b084      	sub	sp, #16
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	2244      	movs	r2, #68	@ 0x44
 8019500:	2100      	movs	r1, #0
 8019502:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019504:	4b05      	ldr	r3, [pc, #20]	@ (801951c <USB_EnableGlobalInt+0x28>)
 8019506:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	b299      	uxth	r1, r3
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2240      	movs	r2, #64	@ 0x40
 8019510:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019512:	2300      	movs	r3, #0
}
 8019514:	0018      	movs	r0, r3
 8019516:	46bd      	mov	sp, r7
 8019518:	b004      	add	sp, #16
 801951a:	bd80      	pop	{r7, pc}
 801951c:	0000bf80 	.word	0x0000bf80

08019520 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8019520:	b580      	push	{r7, lr}
 8019522:	b084      	sub	sp, #16
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019528:	4b09      	ldr	r3, [pc, #36]	@ (8019550 <USB_DisableGlobalInt+0x30>)
 801952a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	2240      	movs	r2, #64	@ 0x40
 8019530:	5a9b      	ldrh	r3, [r3, r2]
 8019532:	b29b      	uxth	r3, r3
 8019534:	68fa      	ldr	r2, [r7, #12]
 8019536:	b292      	uxth	r2, r2
 8019538:	43d2      	mvns	r2, r2
 801953a:	b292      	uxth	r2, r2
 801953c:	4013      	ands	r3, r2
 801953e:	b299      	uxth	r1, r3
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	2240      	movs	r2, #64	@ 0x40
 8019544:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019546:	2300      	movs	r3, #0
}
 8019548:	0018      	movs	r0, r3
 801954a:	46bd      	mov	sp, r7
 801954c:	b004      	add	sp, #16
 801954e:	bd80      	pop	{r7, pc}
 8019550:	0000bf80 	.word	0x0000bf80

08019554 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019554:	b084      	sub	sp, #16
 8019556:	b590      	push	{r4, r7, lr}
 8019558:	b083      	sub	sp, #12
 801955a:	af00      	add	r7, sp, #0
 801955c:	6078      	str	r0, [r7, #4]
 801955e:	2004      	movs	r0, #4
 8019560:	2410      	movs	r4, #16
 8019562:	1900      	adds	r0, r0, r4
 8019564:	2408      	movs	r4, #8
 8019566:	46a4      	mov	ip, r4
 8019568:	44bc      	add	ip, r7
 801956a:	4460      	add	r0, ip
 801956c:	6001      	str	r1, [r0, #0]
 801956e:	6042      	str	r2, [r0, #4]
 8019570:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	2240      	movs	r2, #64	@ 0x40
 8019576:	2101      	movs	r1, #1
 8019578:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	2240      	movs	r2, #64	@ 0x40
 801957e:	2100      	movs	r1, #0
 8019580:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	2244      	movs	r2, #68	@ 0x44
 8019586:	2100      	movs	r1, #0
 8019588:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	2250      	movs	r2, #80	@ 0x50
 801958e:	2100      	movs	r1, #0
 8019590:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019592:	2300      	movs	r3, #0
}
 8019594:	0018      	movs	r0, r3
 8019596:	46bd      	mov	sp, r7
 8019598:	b003      	add	sp, #12
 801959a:	bc90      	pop	{r4, r7}
 801959c:	bc08      	pop	{r3}
 801959e:	b004      	add	sp, #16
 80195a0:	4718      	bx	r3
	...

080195a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b09c      	sub	sp, #112	@ 0x70
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
 80195ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80195ae:	236f      	movs	r3, #111	@ 0x6f
 80195b0:	18fb      	adds	r3, r7, r3
 80195b2:	2200      	movs	r2, #0
 80195b4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80195b6:	687a      	ldr	r2, [r7, #4]
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	781b      	ldrb	r3, [r3, #0]
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	18d3      	adds	r3, r2, r3
 80195c0:	881b      	ldrh	r3, [r3, #0]
 80195c2:	b29a      	uxth	r2, r3
 80195c4:	236c      	movs	r3, #108	@ 0x6c
 80195c6:	18fb      	adds	r3, r7, r3
 80195c8:	49a3      	ldr	r1, [pc, #652]	@ (8019858 <USB_ActivateEndpoint+0x2b4>)
 80195ca:	400a      	ands	r2, r1
 80195cc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80195ce:	683b      	ldr	r3, [r7, #0]
 80195d0:	78db      	ldrb	r3, [r3, #3]
 80195d2:	2b03      	cmp	r3, #3
 80195d4:	d017      	beq.n	8019606 <USB_ActivateEndpoint+0x62>
 80195d6:	dc28      	bgt.n	801962a <USB_ActivateEndpoint+0x86>
 80195d8:	2b02      	cmp	r3, #2
 80195da:	d00e      	beq.n	80195fa <USB_ActivateEndpoint+0x56>
 80195dc:	dc25      	bgt.n	801962a <USB_ActivateEndpoint+0x86>
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d002      	beq.n	80195e8 <USB_ActivateEndpoint+0x44>
 80195e2:	2b01      	cmp	r3, #1
 80195e4:	d018      	beq.n	8019618 <USB_ActivateEndpoint+0x74>
 80195e6:	e020      	b.n	801962a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80195e8:	226c      	movs	r2, #108	@ 0x6c
 80195ea:	18bb      	adds	r3, r7, r2
 80195ec:	18ba      	adds	r2, r7, r2
 80195ee:	8812      	ldrh	r2, [r2, #0]
 80195f0:	2180      	movs	r1, #128	@ 0x80
 80195f2:	0089      	lsls	r1, r1, #2
 80195f4:	430a      	orrs	r2, r1
 80195f6:	801a      	strh	r2, [r3, #0]
      break;
 80195f8:	e01c      	b.n	8019634 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80195fa:	226c      	movs	r2, #108	@ 0x6c
 80195fc:	18bb      	adds	r3, r7, r2
 80195fe:	18ba      	adds	r2, r7, r2
 8019600:	8812      	ldrh	r2, [r2, #0]
 8019602:	801a      	strh	r2, [r3, #0]
      break;
 8019604:	e016      	b.n	8019634 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8019606:	226c      	movs	r2, #108	@ 0x6c
 8019608:	18bb      	adds	r3, r7, r2
 801960a:	18ba      	adds	r2, r7, r2
 801960c:	8812      	ldrh	r2, [r2, #0]
 801960e:	21c0      	movs	r1, #192	@ 0xc0
 8019610:	00c9      	lsls	r1, r1, #3
 8019612:	430a      	orrs	r2, r1
 8019614:	801a      	strh	r2, [r3, #0]
      break;
 8019616:	e00d      	b.n	8019634 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019618:	226c      	movs	r2, #108	@ 0x6c
 801961a:	18bb      	adds	r3, r7, r2
 801961c:	18ba      	adds	r2, r7, r2
 801961e:	8812      	ldrh	r2, [r2, #0]
 8019620:	2180      	movs	r1, #128	@ 0x80
 8019622:	00c9      	lsls	r1, r1, #3
 8019624:	430a      	orrs	r2, r1
 8019626:	801a      	strh	r2, [r3, #0]
      break;
 8019628:	e004      	b.n	8019634 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801962a:	236f      	movs	r3, #111	@ 0x6f
 801962c:	18fb      	adds	r3, r7, r3
 801962e:	2201      	movs	r2, #1
 8019630:	701a      	strb	r2, [r3, #0]
      break;
 8019632:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019634:	687a      	ldr	r2, [r7, #4]
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	781b      	ldrb	r3, [r3, #0]
 801963a:	009b      	lsls	r3, r3, #2
 801963c:	18d3      	adds	r3, r2, r3
 801963e:	226c      	movs	r2, #108	@ 0x6c
 8019640:	18ba      	adds	r2, r7, r2
 8019642:	8812      	ldrh	r2, [r2, #0]
 8019644:	4985      	ldr	r1, [pc, #532]	@ (801985c <USB_ActivateEndpoint+0x2b8>)
 8019646:	430a      	orrs	r2, r1
 8019648:	b292      	uxth	r2, r2
 801964a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801964c:	687a      	ldr	r2, [r7, #4]
 801964e:	683b      	ldr	r3, [r7, #0]
 8019650:	781b      	ldrb	r3, [r3, #0]
 8019652:	009b      	lsls	r3, r3, #2
 8019654:	18d3      	adds	r3, r2, r3
 8019656:	881b      	ldrh	r3, [r3, #0]
 8019658:	b29b      	uxth	r3, r3
 801965a:	b21b      	sxth	r3, r3
 801965c:	4a80      	ldr	r2, [pc, #512]	@ (8019860 <USB_ActivateEndpoint+0x2bc>)
 801965e:	4013      	ands	r3, r2
 8019660:	b21a      	sxth	r2, r3
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	781b      	ldrb	r3, [r3, #0]
 8019666:	b21b      	sxth	r3, r3
 8019668:	4313      	orrs	r3, r2
 801966a:	b21a      	sxth	r2, r3
 801966c:	2166      	movs	r1, #102	@ 0x66
 801966e:	187b      	adds	r3, r7, r1
 8019670:	801a      	strh	r2, [r3, #0]
 8019672:	687a      	ldr	r2, [r7, #4]
 8019674:	683b      	ldr	r3, [r7, #0]
 8019676:	781b      	ldrb	r3, [r3, #0]
 8019678:	009b      	lsls	r3, r3, #2
 801967a:	18d3      	adds	r3, r2, r3
 801967c:	187a      	adds	r2, r7, r1
 801967e:	8812      	ldrh	r2, [r2, #0]
 8019680:	4976      	ldr	r1, [pc, #472]	@ (801985c <USB_ActivateEndpoint+0x2b8>)
 8019682:	430a      	orrs	r2, r1
 8019684:	b292      	uxth	r2, r2
 8019686:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8019688:	683b      	ldr	r3, [r7, #0]
 801968a:	7b1b      	ldrb	r3, [r3, #12]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d000      	beq.n	8019692 <USB_ActivateEndpoint+0xee>
 8019690:	e178      	b.n	8019984 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8019692:	683b      	ldr	r3, [r7, #0]
 8019694:	785b      	ldrb	r3, [r3, #1]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d100      	bne.n	801969c <USB_ActivateEndpoint+0xf8>
 801969a:	e07a      	b.n	8019792 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	61bb      	str	r3, [r7, #24]
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	2250      	movs	r2, #80	@ 0x50
 80196a4:	5a9b      	ldrh	r3, [r3, r2]
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	001a      	movs	r2, r3
 80196aa:	69bb      	ldr	r3, [r7, #24]
 80196ac:	189b      	adds	r3, r3, r2
 80196ae:	61bb      	str	r3, [r7, #24]
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	781b      	ldrb	r3, [r3, #0]
 80196b4:	00da      	lsls	r2, r3, #3
 80196b6:	69bb      	ldr	r3, [r7, #24]
 80196b8:	18d3      	adds	r3, r2, r3
 80196ba:	2280      	movs	r2, #128	@ 0x80
 80196bc:	00d2      	lsls	r2, r2, #3
 80196be:	4694      	mov	ip, r2
 80196c0:	4463      	add	r3, ip
 80196c2:	617b      	str	r3, [r7, #20]
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	88db      	ldrh	r3, [r3, #6]
 80196c8:	085b      	lsrs	r3, r3, #1
 80196ca:	b29b      	uxth	r3, r3
 80196cc:	18db      	adds	r3, r3, r3
 80196ce:	b29a      	uxth	r2, r3
 80196d0:	697b      	ldr	r3, [r7, #20]
 80196d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80196d4:	687a      	ldr	r2, [r7, #4]
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	009b      	lsls	r3, r3, #2
 80196dc:	18d2      	adds	r2, r2, r3
 80196de:	2112      	movs	r1, #18
 80196e0:	187b      	adds	r3, r7, r1
 80196e2:	8812      	ldrh	r2, [r2, #0]
 80196e4:	801a      	strh	r2, [r3, #0]
 80196e6:	187b      	adds	r3, r7, r1
 80196e8:	881b      	ldrh	r3, [r3, #0]
 80196ea:	2240      	movs	r2, #64	@ 0x40
 80196ec:	4013      	ands	r3, r2
 80196ee:	d016      	beq.n	801971e <USB_ActivateEndpoint+0x17a>
 80196f0:	687a      	ldr	r2, [r7, #4]
 80196f2:	683b      	ldr	r3, [r7, #0]
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	009b      	lsls	r3, r3, #2
 80196f8:	18d3      	adds	r3, r2, r3
 80196fa:	881b      	ldrh	r3, [r3, #0]
 80196fc:	b29a      	uxth	r2, r3
 80196fe:	2010      	movs	r0, #16
 8019700:	183b      	adds	r3, r7, r0
 8019702:	4957      	ldr	r1, [pc, #348]	@ (8019860 <USB_ActivateEndpoint+0x2bc>)
 8019704:	400a      	ands	r2, r1
 8019706:	801a      	strh	r2, [r3, #0]
 8019708:	687a      	ldr	r2, [r7, #4]
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	781b      	ldrb	r3, [r3, #0]
 801970e:	009b      	lsls	r3, r3, #2
 8019710:	18d3      	adds	r3, r2, r3
 8019712:	183a      	adds	r2, r7, r0
 8019714:	8812      	ldrh	r2, [r2, #0]
 8019716:	4953      	ldr	r1, [pc, #332]	@ (8019864 <USB_ActivateEndpoint+0x2c0>)
 8019718:	430a      	orrs	r2, r1
 801971a:	b292      	uxth	r2, r2
 801971c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	78db      	ldrb	r3, [r3, #3]
 8019722:	2b01      	cmp	r3, #1
 8019724:	d01d      	beq.n	8019762 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019726:	687a      	ldr	r2, [r7, #4]
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	781b      	ldrb	r3, [r3, #0]
 801972c:	009b      	lsls	r3, r3, #2
 801972e:	18d3      	adds	r3, r2, r3
 8019730:	881b      	ldrh	r3, [r3, #0]
 8019732:	b29a      	uxth	r2, r3
 8019734:	200c      	movs	r0, #12
 8019736:	183b      	adds	r3, r7, r0
 8019738:	494b      	ldr	r1, [pc, #300]	@ (8019868 <USB_ActivateEndpoint+0x2c4>)
 801973a:	400a      	ands	r2, r1
 801973c:	801a      	strh	r2, [r3, #0]
 801973e:	183b      	adds	r3, r7, r0
 8019740:	183a      	adds	r2, r7, r0
 8019742:	8812      	ldrh	r2, [r2, #0]
 8019744:	2120      	movs	r1, #32
 8019746:	404a      	eors	r2, r1
 8019748:	801a      	strh	r2, [r3, #0]
 801974a:	687a      	ldr	r2, [r7, #4]
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	781b      	ldrb	r3, [r3, #0]
 8019750:	009b      	lsls	r3, r3, #2
 8019752:	18d3      	adds	r3, r2, r3
 8019754:	183a      	adds	r2, r7, r0
 8019756:	8812      	ldrh	r2, [r2, #0]
 8019758:	4940      	ldr	r1, [pc, #256]	@ (801985c <USB_ActivateEndpoint+0x2b8>)
 801975a:	430a      	orrs	r2, r1
 801975c:	b292      	uxth	r2, r2
 801975e:	801a      	strh	r2, [r3, #0]
 8019760:	e2b4      	b.n	8019ccc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	683b      	ldr	r3, [r7, #0]
 8019766:	781b      	ldrb	r3, [r3, #0]
 8019768:	009b      	lsls	r3, r3, #2
 801976a:	18d3      	adds	r3, r2, r3
 801976c:	881b      	ldrh	r3, [r3, #0]
 801976e:	b29a      	uxth	r2, r3
 8019770:	200e      	movs	r0, #14
 8019772:	183b      	adds	r3, r7, r0
 8019774:	493c      	ldr	r1, [pc, #240]	@ (8019868 <USB_ActivateEndpoint+0x2c4>)
 8019776:	400a      	ands	r2, r1
 8019778:	801a      	strh	r2, [r3, #0]
 801977a:	687a      	ldr	r2, [r7, #4]
 801977c:	683b      	ldr	r3, [r7, #0]
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	009b      	lsls	r3, r3, #2
 8019782:	18d3      	adds	r3, r2, r3
 8019784:	183a      	adds	r2, r7, r0
 8019786:	8812      	ldrh	r2, [r2, #0]
 8019788:	4934      	ldr	r1, [pc, #208]	@ (801985c <USB_ActivateEndpoint+0x2b8>)
 801978a:	430a      	orrs	r2, r1
 801978c:	b292      	uxth	r2, r2
 801978e:	801a      	strh	r2, [r3, #0]
 8019790:	e29c      	b.n	8019ccc <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	633b      	str	r3, [r7, #48]	@ 0x30
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	2250      	movs	r2, #80	@ 0x50
 801979a:	5a9b      	ldrh	r3, [r3, r2]
 801979c:	b29b      	uxth	r3, r3
 801979e:	001a      	movs	r2, r3
 80197a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197a2:	189b      	adds	r3, r3, r2
 80197a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80197a6:	683b      	ldr	r3, [r7, #0]
 80197a8:	781b      	ldrb	r3, [r3, #0]
 80197aa:	00da      	lsls	r2, r3, #3
 80197ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197ae:	18d3      	adds	r3, r2, r3
 80197b0:	4a2e      	ldr	r2, [pc, #184]	@ (801986c <USB_ActivateEndpoint+0x2c8>)
 80197b2:	4694      	mov	ip, r2
 80197b4:	4463      	add	r3, ip
 80197b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80197b8:	683b      	ldr	r3, [r7, #0]
 80197ba:	88db      	ldrh	r3, [r3, #6]
 80197bc:	085b      	lsrs	r3, r3, #1
 80197be:	b29b      	uxth	r3, r3
 80197c0:	18db      	adds	r3, r3, r3
 80197c2:	b29a      	uxth	r2, r3
 80197c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197c6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	2250      	movs	r2, #80	@ 0x50
 80197d0:	5a9b      	ldrh	r3, [r3, r2]
 80197d2:	b29b      	uxth	r3, r3
 80197d4:	001a      	movs	r2, r3
 80197d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197d8:	189b      	adds	r3, r3, r2
 80197da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80197dc:	683b      	ldr	r3, [r7, #0]
 80197de:	781b      	ldrb	r3, [r3, #0]
 80197e0:	00da      	lsls	r2, r3, #3
 80197e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197e4:	18d3      	adds	r3, r2, r3
 80197e6:	4a22      	ldr	r2, [pc, #136]	@ (8019870 <USB_ActivateEndpoint+0x2cc>)
 80197e8:	4694      	mov	ip, r2
 80197ea:	4463      	add	r3, ip
 80197ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80197ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197f0:	881b      	ldrh	r3, [r3, #0]
 80197f2:	b29b      	uxth	r3, r3
 80197f4:	059b      	lsls	r3, r3, #22
 80197f6:	0d9b      	lsrs	r3, r3, #22
 80197f8:	b29a      	uxth	r2, r3
 80197fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197fc:	801a      	strh	r2, [r3, #0]
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	691b      	ldr	r3, [r3, #16]
 8019802:	2b3e      	cmp	r3, #62	@ 0x3e
 8019804:	d91a      	bls.n	801983c <USB_ActivateEndpoint+0x298>
 8019806:	683b      	ldr	r3, [r7, #0]
 8019808:	691b      	ldr	r3, [r3, #16]
 801980a:	095b      	lsrs	r3, r3, #5
 801980c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801980e:	683b      	ldr	r3, [r7, #0]
 8019810:	691b      	ldr	r3, [r3, #16]
 8019812:	221f      	movs	r2, #31
 8019814:	4013      	ands	r3, r2
 8019816:	d102      	bne.n	801981e <USB_ActivateEndpoint+0x27a>
 8019818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801981a:	3b01      	subs	r3, #1
 801981c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019820:	881b      	ldrh	r3, [r3, #0]
 8019822:	b29a      	uxth	r2, r3
 8019824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019826:	b29b      	uxth	r3, r3
 8019828:	029b      	lsls	r3, r3, #10
 801982a:	b29b      	uxth	r3, r3
 801982c:	4313      	orrs	r3, r2
 801982e:	b29b      	uxth	r3, r3
 8019830:	4a10      	ldr	r2, [pc, #64]	@ (8019874 <USB_ActivateEndpoint+0x2d0>)
 8019832:	4313      	orrs	r3, r2
 8019834:	b29a      	uxth	r2, r3
 8019836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019838:	801a      	strh	r2, [r3, #0]
 801983a:	e034      	b.n	80198a6 <USB_ActivateEndpoint+0x302>
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	691b      	ldr	r3, [r3, #16]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d119      	bne.n	8019878 <USB_ActivateEndpoint+0x2d4>
 8019844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019846:	881b      	ldrh	r3, [r3, #0]
 8019848:	b29b      	uxth	r3, r3
 801984a:	4a0a      	ldr	r2, [pc, #40]	@ (8019874 <USB_ActivateEndpoint+0x2d0>)
 801984c:	4313      	orrs	r3, r2
 801984e:	b29a      	uxth	r2, r3
 8019850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019852:	801a      	strh	r2, [r3, #0]
 8019854:	e027      	b.n	80198a6 <USB_ActivateEndpoint+0x302>
 8019856:	46c0      	nop			@ (mov r8, r8)
 8019858:	ffff898f 	.word	0xffff898f
 801985c:	ffff8080 	.word	0xffff8080
 8019860:	ffff8f8f 	.word	0xffff8f8f
 8019864:	ffff80c0 	.word	0xffff80c0
 8019868:	ffff8fbf 	.word	0xffff8fbf
 801986c:	00000404 	.word	0x00000404
 8019870:	00000406 	.word	0x00000406
 8019874:	ffff8000 	.word	0xffff8000
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	691b      	ldr	r3, [r3, #16]
 801987c:	085b      	lsrs	r3, r3, #1
 801987e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019880:	683b      	ldr	r3, [r7, #0]
 8019882:	691b      	ldr	r3, [r3, #16]
 8019884:	2201      	movs	r2, #1
 8019886:	4013      	ands	r3, r2
 8019888:	d002      	beq.n	8019890 <USB_ActivateEndpoint+0x2ec>
 801988a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801988c:	3301      	adds	r3, #1
 801988e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019892:	881b      	ldrh	r3, [r3, #0]
 8019894:	b29a      	uxth	r2, r3
 8019896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019898:	b29b      	uxth	r3, r3
 801989a:	029b      	lsls	r3, r3, #10
 801989c:	b29b      	uxth	r3, r3
 801989e:	4313      	orrs	r3, r2
 80198a0:	b29a      	uxth	r2, r3
 80198a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80198a6:	687a      	ldr	r2, [r7, #4]
 80198a8:	683b      	ldr	r3, [r7, #0]
 80198aa:	781b      	ldrb	r3, [r3, #0]
 80198ac:	009b      	lsls	r3, r3, #2
 80198ae:	18d2      	adds	r2, r2, r3
 80198b0:	2122      	movs	r1, #34	@ 0x22
 80198b2:	187b      	adds	r3, r7, r1
 80198b4:	8812      	ldrh	r2, [r2, #0]
 80198b6:	801a      	strh	r2, [r3, #0]
 80198b8:	187b      	adds	r3, r7, r1
 80198ba:	881a      	ldrh	r2, [r3, #0]
 80198bc:	2380      	movs	r3, #128	@ 0x80
 80198be:	01db      	lsls	r3, r3, #7
 80198c0:	4013      	ands	r3, r2
 80198c2:	d016      	beq.n	80198f2 <USB_ActivateEndpoint+0x34e>
 80198c4:	687a      	ldr	r2, [r7, #4]
 80198c6:	683b      	ldr	r3, [r7, #0]
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	009b      	lsls	r3, r3, #2
 80198cc:	18d3      	adds	r3, r2, r3
 80198ce:	881b      	ldrh	r3, [r3, #0]
 80198d0:	b29a      	uxth	r2, r3
 80198d2:	2020      	movs	r0, #32
 80198d4:	183b      	adds	r3, r7, r0
 80198d6:	49dd      	ldr	r1, [pc, #884]	@ (8019c4c <USB_ActivateEndpoint+0x6a8>)
 80198d8:	400a      	ands	r2, r1
 80198da:	801a      	strh	r2, [r3, #0]
 80198dc:	687a      	ldr	r2, [r7, #4]
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	009b      	lsls	r3, r3, #2
 80198e4:	18d3      	adds	r3, r2, r3
 80198e6:	183a      	adds	r2, r7, r0
 80198e8:	8812      	ldrh	r2, [r2, #0]
 80198ea:	49d9      	ldr	r1, [pc, #868]	@ (8019c50 <USB_ActivateEndpoint+0x6ac>)
 80198ec:	430a      	orrs	r2, r1
 80198ee:	b292      	uxth	r2, r2
 80198f0:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d125      	bne.n	8019946 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80198fa:	687a      	ldr	r2, [r7, #4]
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	009b      	lsls	r3, r3, #2
 8019902:	18d3      	adds	r3, r2, r3
 8019904:	881b      	ldrh	r3, [r3, #0]
 8019906:	b29a      	uxth	r2, r3
 8019908:	201c      	movs	r0, #28
 801990a:	183b      	adds	r3, r7, r0
 801990c:	49d1      	ldr	r1, [pc, #836]	@ (8019c54 <USB_ActivateEndpoint+0x6b0>)
 801990e:	400a      	ands	r2, r1
 8019910:	801a      	strh	r2, [r3, #0]
 8019912:	183b      	adds	r3, r7, r0
 8019914:	183a      	adds	r2, r7, r0
 8019916:	8812      	ldrh	r2, [r2, #0]
 8019918:	2180      	movs	r1, #128	@ 0x80
 801991a:	0149      	lsls	r1, r1, #5
 801991c:	404a      	eors	r2, r1
 801991e:	801a      	strh	r2, [r3, #0]
 8019920:	183b      	adds	r3, r7, r0
 8019922:	183a      	adds	r2, r7, r0
 8019924:	8812      	ldrh	r2, [r2, #0]
 8019926:	2180      	movs	r1, #128	@ 0x80
 8019928:	0189      	lsls	r1, r1, #6
 801992a:	404a      	eors	r2, r1
 801992c:	801a      	strh	r2, [r3, #0]
 801992e:	687a      	ldr	r2, [r7, #4]
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	009b      	lsls	r3, r3, #2
 8019936:	18d3      	adds	r3, r2, r3
 8019938:	183a      	adds	r2, r7, r0
 801993a:	8812      	ldrh	r2, [r2, #0]
 801993c:	49c6      	ldr	r1, [pc, #792]	@ (8019c58 <USB_ActivateEndpoint+0x6b4>)
 801993e:	430a      	orrs	r2, r1
 8019940:	b292      	uxth	r2, r2
 8019942:	801a      	strh	r2, [r3, #0]
 8019944:	e1c2      	b.n	8019ccc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8019946:	687a      	ldr	r2, [r7, #4]
 8019948:	683b      	ldr	r3, [r7, #0]
 801994a:	781b      	ldrb	r3, [r3, #0]
 801994c:	009b      	lsls	r3, r3, #2
 801994e:	18d3      	adds	r3, r2, r3
 8019950:	881b      	ldrh	r3, [r3, #0]
 8019952:	b29a      	uxth	r2, r3
 8019954:	201e      	movs	r0, #30
 8019956:	183b      	adds	r3, r7, r0
 8019958:	49be      	ldr	r1, [pc, #760]	@ (8019c54 <USB_ActivateEndpoint+0x6b0>)
 801995a:	400a      	ands	r2, r1
 801995c:	801a      	strh	r2, [r3, #0]
 801995e:	183b      	adds	r3, r7, r0
 8019960:	183a      	adds	r2, r7, r0
 8019962:	8812      	ldrh	r2, [r2, #0]
 8019964:	2180      	movs	r1, #128	@ 0x80
 8019966:	0189      	lsls	r1, r1, #6
 8019968:	404a      	eors	r2, r1
 801996a:	801a      	strh	r2, [r3, #0]
 801996c:	687a      	ldr	r2, [r7, #4]
 801996e:	683b      	ldr	r3, [r7, #0]
 8019970:	781b      	ldrb	r3, [r3, #0]
 8019972:	009b      	lsls	r3, r3, #2
 8019974:	18d3      	adds	r3, r2, r3
 8019976:	183a      	adds	r2, r7, r0
 8019978:	8812      	ldrh	r2, [r2, #0]
 801997a:	49b7      	ldr	r1, [pc, #732]	@ (8019c58 <USB_ActivateEndpoint+0x6b4>)
 801997c:	430a      	orrs	r2, r1
 801997e:	b292      	uxth	r2, r2
 8019980:	801a      	strh	r2, [r3, #0]
 8019982:	e1a3      	b.n	8019ccc <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	78db      	ldrb	r3, [r3, #3]
 8019988:	2b02      	cmp	r3, #2
 801998a:	d117      	bne.n	80199bc <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801998c:	687a      	ldr	r2, [r7, #4]
 801998e:	683b      	ldr	r3, [r7, #0]
 8019990:	781b      	ldrb	r3, [r3, #0]
 8019992:	009b      	lsls	r3, r3, #2
 8019994:	18d3      	adds	r3, r2, r3
 8019996:	881b      	ldrh	r3, [r3, #0]
 8019998:	b29a      	uxth	r2, r3
 801999a:	2062      	movs	r0, #98	@ 0x62
 801999c:	183b      	adds	r3, r7, r0
 801999e:	49ab      	ldr	r1, [pc, #684]	@ (8019c4c <USB_ActivateEndpoint+0x6a8>)
 80199a0:	400a      	ands	r2, r1
 80199a2:	801a      	strh	r2, [r3, #0]
 80199a4:	687a      	ldr	r2, [r7, #4]
 80199a6:	683b      	ldr	r3, [r7, #0]
 80199a8:	781b      	ldrb	r3, [r3, #0]
 80199aa:	009b      	lsls	r3, r3, #2
 80199ac:	18d3      	adds	r3, r2, r3
 80199ae:	183a      	adds	r2, r7, r0
 80199b0:	8812      	ldrh	r2, [r2, #0]
 80199b2:	49aa      	ldr	r1, [pc, #680]	@ (8019c5c <USB_ActivateEndpoint+0x6b8>)
 80199b4:	430a      	orrs	r2, r1
 80199b6:	b292      	uxth	r2, r2
 80199b8:	801a      	strh	r2, [r3, #0]
 80199ba:	e016      	b.n	80199ea <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80199bc:	687a      	ldr	r2, [r7, #4]
 80199be:	683b      	ldr	r3, [r7, #0]
 80199c0:	781b      	ldrb	r3, [r3, #0]
 80199c2:	009b      	lsls	r3, r3, #2
 80199c4:	18d3      	adds	r3, r2, r3
 80199c6:	881b      	ldrh	r3, [r3, #0]
 80199c8:	b29a      	uxth	r2, r3
 80199ca:	2064      	movs	r0, #100	@ 0x64
 80199cc:	183b      	adds	r3, r7, r0
 80199ce:	49a4      	ldr	r1, [pc, #656]	@ (8019c60 <USB_ActivateEndpoint+0x6bc>)
 80199d0:	400a      	ands	r2, r1
 80199d2:	801a      	strh	r2, [r3, #0]
 80199d4:	687a      	ldr	r2, [r7, #4]
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	781b      	ldrb	r3, [r3, #0]
 80199da:	009b      	lsls	r3, r3, #2
 80199dc:	18d3      	adds	r3, r2, r3
 80199de:	183a      	adds	r2, r7, r0
 80199e0:	8812      	ldrh	r2, [r2, #0]
 80199e2:	499d      	ldr	r1, [pc, #628]	@ (8019c58 <USB_ActivateEndpoint+0x6b4>)
 80199e4:	430a      	orrs	r2, r1
 80199e6:	b292      	uxth	r2, r2
 80199e8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	2250      	movs	r2, #80	@ 0x50
 80199f2:	5a9b      	ldrh	r3, [r3, r2]
 80199f4:	b29b      	uxth	r3, r3
 80199f6:	001a      	movs	r2, r3
 80199f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80199fa:	189b      	adds	r3, r3, r2
 80199fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80199fe:	683b      	ldr	r3, [r7, #0]
 8019a00:	781b      	ldrb	r3, [r3, #0]
 8019a02:	00da      	lsls	r2, r3, #3
 8019a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019a06:	18d3      	adds	r3, r2, r3
 8019a08:	2280      	movs	r2, #128	@ 0x80
 8019a0a:	00d2      	lsls	r2, r2, #3
 8019a0c:	4694      	mov	ip, r2
 8019a0e:	4463      	add	r3, ip
 8019a10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019a12:	683b      	ldr	r3, [r7, #0]
 8019a14:	891b      	ldrh	r3, [r3, #8]
 8019a16:	085b      	lsrs	r3, r3, #1
 8019a18:	b29b      	uxth	r3, r3
 8019a1a:	18db      	adds	r3, r3, r3
 8019a1c:	b29a      	uxth	r2, r3
 8019a1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019a20:	801a      	strh	r2, [r3, #0]
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	657b      	str	r3, [r7, #84]	@ 0x54
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	2250      	movs	r2, #80	@ 0x50
 8019a2a:	5a9b      	ldrh	r3, [r3, r2]
 8019a2c:	b29b      	uxth	r3, r3
 8019a2e:	001a      	movs	r2, r3
 8019a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a32:	189b      	adds	r3, r3, r2
 8019a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8019a36:	683b      	ldr	r3, [r7, #0]
 8019a38:	781b      	ldrb	r3, [r3, #0]
 8019a3a:	00da      	lsls	r2, r3, #3
 8019a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a3e:	18d3      	adds	r3, r2, r3
 8019a40:	4a88      	ldr	r2, [pc, #544]	@ (8019c64 <USB_ActivateEndpoint+0x6c0>)
 8019a42:	4694      	mov	ip, r2
 8019a44:	4463      	add	r3, ip
 8019a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	895b      	ldrh	r3, [r3, #10]
 8019a4c:	085b      	lsrs	r3, r3, #1
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	18db      	adds	r3, r3, r3
 8019a52:	b29a      	uxth	r2, r3
 8019a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	785b      	ldrb	r3, [r3, #1]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d000      	beq.n	8019a62 <USB_ActivateEndpoint+0x4be>
 8019a60:	e087      	b.n	8019b72 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019a62:	687a      	ldr	r2, [r7, #4]
 8019a64:	683b      	ldr	r3, [r7, #0]
 8019a66:	781b      	ldrb	r3, [r3, #0]
 8019a68:	009b      	lsls	r3, r3, #2
 8019a6a:	18d2      	adds	r2, r2, r3
 8019a6c:	2140      	movs	r1, #64	@ 0x40
 8019a6e:	187b      	adds	r3, r7, r1
 8019a70:	8812      	ldrh	r2, [r2, #0]
 8019a72:	801a      	strh	r2, [r3, #0]
 8019a74:	187b      	adds	r3, r7, r1
 8019a76:	881a      	ldrh	r2, [r3, #0]
 8019a78:	2380      	movs	r3, #128	@ 0x80
 8019a7a:	01db      	lsls	r3, r3, #7
 8019a7c:	4013      	ands	r3, r2
 8019a7e:	d016      	beq.n	8019aae <USB_ActivateEndpoint+0x50a>
 8019a80:	687a      	ldr	r2, [r7, #4]
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	781b      	ldrb	r3, [r3, #0]
 8019a86:	009b      	lsls	r3, r3, #2
 8019a88:	18d3      	adds	r3, r2, r3
 8019a8a:	881b      	ldrh	r3, [r3, #0]
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	203e      	movs	r0, #62	@ 0x3e
 8019a90:	183b      	adds	r3, r7, r0
 8019a92:	496e      	ldr	r1, [pc, #440]	@ (8019c4c <USB_ActivateEndpoint+0x6a8>)
 8019a94:	400a      	ands	r2, r1
 8019a96:	801a      	strh	r2, [r3, #0]
 8019a98:	687a      	ldr	r2, [r7, #4]
 8019a9a:	683b      	ldr	r3, [r7, #0]
 8019a9c:	781b      	ldrb	r3, [r3, #0]
 8019a9e:	009b      	lsls	r3, r3, #2
 8019aa0:	18d3      	adds	r3, r2, r3
 8019aa2:	183a      	adds	r2, r7, r0
 8019aa4:	8812      	ldrh	r2, [r2, #0]
 8019aa6:	496a      	ldr	r1, [pc, #424]	@ (8019c50 <USB_ActivateEndpoint+0x6ac>)
 8019aa8:	430a      	orrs	r2, r1
 8019aaa:	b292      	uxth	r2, r2
 8019aac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019aae:	687a      	ldr	r2, [r7, #4]
 8019ab0:	683b      	ldr	r3, [r7, #0]
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	009b      	lsls	r3, r3, #2
 8019ab6:	18d2      	adds	r2, r2, r3
 8019ab8:	213c      	movs	r1, #60	@ 0x3c
 8019aba:	187b      	adds	r3, r7, r1
 8019abc:	8812      	ldrh	r2, [r2, #0]
 8019abe:	801a      	strh	r2, [r3, #0]
 8019ac0:	187b      	adds	r3, r7, r1
 8019ac2:	881b      	ldrh	r3, [r3, #0]
 8019ac4:	2240      	movs	r2, #64	@ 0x40
 8019ac6:	4013      	ands	r3, r2
 8019ac8:	d016      	beq.n	8019af8 <USB_ActivateEndpoint+0x554>
 8019aca:	687a      	ldr	r2, [r7, #4]
 8019acc:	683b      	ldr	r3, [r7, #0]
 8019ace:	781b      	ldrb	r3, [r3, #0]
 8019ad0:	009b      	lsls	r3, r3, #2
 8019ad2:	18d3      	adds	r3, r2, r3
 8019ad4:	881b      	ldrh	r3, [r3, #0]
 8019ad6:	b29a      	uxth	r2, r3
 8019ad8:	203a      	movs	r0, #58	@ 0x3a
 8019ada:	183b      	adds	r3, r7, r0
 8019adc:	495b      	ldr	r1, [pc, #364]	@ (8019c4c <USB_ActivateEndpoint+0x6a8>)
 8019ade:	400a      	ands	r2, r1
 8019ae0:	801a      	strh	r2, [r3, #0]
 8019ae2:	687a      	ldr	r2, [r7, #4]
 8019ae4:	683b      	ldr	r3, [r7, #0]
 8019ae6:	781b      	ldrb	r3, [r3, #0]
 8019ae8:	009b      	lsls	r3, r3, #2
 8019aea:	18d3      	adds	r3, r2, r3
 8019aec:	183a      	adds	r2, r7, r0
 8019aee:	8812      	ldrh	r2, [r2, #0]
 8019af0:	495d      	ldr	r1, [pc, #372]	@ (8019c68 <USB_ActivateEndpoint+0x6c4>)
 8019af2:	430a      	orrs	r2, r1
 8019af4:	b292      	uxth	r2, r2
 8019af6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019af8:	687a      	ldr	r2, [r7, #4]
 8019afa:	683b      	ldr	r3, [r7, #0]
 8019afc:	781b      	ldrb	r3, [r3, #0]
 8019afe:	009b      	lsls	r3, r3, #2
 8019b00:	18d3      	adds	r3, r2, r3
 8019b02:	881b      	ldrh	r3, [r3, #0]
 8019b04:	b29a      	uxth	r2, r3
 8019b06:	2038      	movs	r0, #56	@ 0x38
 8019b08:	183b      	adds	r3, r7, r0
 8019b0a:	4952      	ldr	r1, [pc, #328]	@ (8019c54 <USB_ActivateEndpoint+0x6b0>)
 8019b0c:	400a      	ands	r2, r1
 8019b0e:	801a      	strh	r2, [r3, #0]
 8019b10:	183b      	adds	r3, r7, r0
 8019b12:	183a      	adds	r2, r7, r0
 8019b14:	8812      	ldrh	r2, [r2, #0]
 8019b16:	2180      	movs	r1, #128	@ 0x80
 8019b18:	0149      	lsls	r1, r1, #5
 8019b1a:	404a      	eors	r2, r1
 8019b1c:	801a      	strh	r2, [r3, #0]
 8019b1e:	183b      	adds	r3, r7, r0
 8019b20:	183a      	adds	r2, r7, r0
 8019b22:	8812      	ldrh	r2, [r2, #0]
 8019b24:	2180      	movs	r1, #128	@ 0x80
 8019b26:	0189      	lsls	r1, r1, #6
 8019b28:	404a      	eors	r2, r1
 8019b2a:	801a      	strh	r2, [r3, #0]
 8019b2c:	687a      	ldr	r2, [r7, #4]
 8019b2e:	683b      	ldr	r3, [r7, #0]
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	009b      	lsls	r3, r3, #2
 8019b34:	18d3      	adds	r3, r2, r3
 8019b36:	183a      	adds	r2, r7, r0
 8019b38:	8812      	ldrh	r2, [r2, #0]
 8019b3a:	4947      	ldr	r1, [pc, #284]	@ (8019c58 <USB_ActivateEndpoint+0x6b4>)
 8019b3c:	430a      	orrs	r2, r1
 8019b3e:	b292      	uxth	r2, r2
 8019b40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019b42:	687a      	ldr	r2, [r7, #4]
 8019b44:	683b      	ldr	r3, [r7, #0]
 8019b46:	781b      	ldrb	r3, [r3, #0]
 8019b48:	009b      	lsls	r3, r3, #2
 8019b4a:	18d3      	adds	r3, r2, r3
 8019b4c:	881b      	ldrh	r3, [r3, #0]
 8019b4e:	b29a      	uxth	r2, r3
 8019b50:	2036      	movs	r0, #54	@ 0x36
 8019b52:	183b      	adds	r3, r7, r0
 8019b54:	4945      	ldr	r1, [pc, #276]	@ (8019c6c <USB_ActivateEndpoint+0x6c8>)
 8019b56:	400a      	ands	r2, r1
 8019b58:	801a      	strh	r2, [r3, #0]
 8019b5a:	687a      	ldr	r2, [r7, #4]
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	781b      	ldrb	r3, [r3, #0]
 8019b60:	009b      	lsls	r3, r3, #2
 8019b62:	18d3      	adds	r3, r2, r3
 8019b64:	183a      	adds	r2, r7, r0
 8019b66:	8812      	ldrh	r2, [r2, #0]
 8019b68:	493b      	ldr	r1, [pc, #236]	@ (8019c58 <USB_ActivateEndpoint+0x6b4>)
 8019b6a:	430a      	orrs	r2, r1
 8019b6c:	b292      	uxth	r2, r2
 8019b6e:	801a      	strh	r2, [r3, #0]
 8019b70:	e0ac      	b.n	8019ccc <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019b72:	687a      	ldr	r2, [r7, #4]
 8019b74:	683b      	ldr	r3, [r7, #0]
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	009b      	lsls	r3, r3, #2
 8019b7a:	18d2      	adds	r2, r2, r3
 8019b7c:	214e      	movs	r1, #78	@ 0x4e
 8019b7e:	187b      	adds	r3, r7, r1
 8019b80:	8812      	ldrh	r2, [r2, #0]
 8019b82:	801a      	strh	r2, [r3, #0]
 8019b84:	187b      	adds	r3, r7, r1
 8019b86:	881a      	ldrh	r2, [r3, #0]
 8019b88:	2380      	movs	r3, #128	@ 0x80
 8019b8a:	01db      	lsls	r3, r3, #7
 8019b8c:	4013      	ands	r3, r2
 8019b8e:	d016      	beq.n	8019bbe <USB_ActivateEndpoint+0x61a>
 8019b90:	687a      	ldr	r2, [r7, #4]
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	781b      	ldrb	r3, [r3, #0]
 8019b96:	009b      	lsls	r3, r3, #2
 8019b98:	18d3      	adds	r3, r2, r3
 8019b9a:	881b      	ldrh	r3, [r3, #0]
 8019b9c:	b29a      	uxth	r2, r3
 8019b9e:	204c      	movs	r0, #76	@ 0x4c
 8019ba0:	183b      	adds	r3, r7, r0
 8019ba2:	492a      	ldr	r1, [pc, #168]	@ (8019c4c <USB_ActivateEndpoint+0x6a8>)
 8019ba4:	400a      	ands	r2, r1
 8019ba6:	801a      	strh	r2, [r3, #0]
 8019ba8:	687a      	ldr	r2, [r7, #4]
 8019baa:	683b      	ldr	r3, [r7, #0]
 8019bac:	781b      	ldrb	r3, [r3, #0]
 8019bae:	009b      	lsls	r3, r3, #2
 8019bb0:	18d3      	adds	r3, r2, r3
 8019bb2:	183a      	adds	r2, r7, r0
 8019bb4:	8812      	ldrh	r2, [r2, #0]
 8019bb6:	4926      	ldr	r1, [pc, #152]	@ (8019c50 <USB_ActivateEndpoint+0x6ac>)
 8019bb8:	430a      	orrs	r2, r1
 8019bba:	b292      	uxth	r2, r2
 8019bbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019bbe:	687a      	ldr	r2, [r7, #4]
 8019bc0:	683b      	ldr	r3, [r7, #0]
 8019bc2:	781b      	ldrb	r3, [r3, #0]
 8019bc4:	009b      	lsls	r3, r3, #2
 8019bc6:	18d2      	adds	r2, r2, r3
 8019bc8:	214a      	movs	r1, #74	@ 0x4a
 8019bca:	187b      	adds	r3, r7, r1
 8019bcc:	8812      	ldrh	r2, [r2, #0]
 8019bce:	801a      	strh	r2, [r3, #0]
 8019bd0:	187b      	adds	r3, r7, r1
 8019bd2:	881b      	ldrh	r3, [r3, #0]
 8019bd4:	2240      	movs	r2, #64	@ 0x40
 8019bd6:	4013      	ands	r3, r2
 8019bd8:	d016      	beq.n	8019c08 <USB_ActivateEndpoint+0x664>
 8019bda:	687a      	ldr	r2, [r7, #4]
 8019bdc:	683b      	ldr	r3, [r7, #0]
 8019bde:	781b      	ldrb	r3, [r3, #0]
 8019be0:	009b      	lsls	r3, r3, #2
 8019be2:	18d3      	adds	r3, r2, r3
 8019be4:	881b      	ldrh	r3, [r3, #0]
 8019be6:	b29a      	uxth	r2, r3
 8019be8:	2048      	movs	r0, #72	@ 0x48
 8019bea:	183b      	adds	r3, r7, r0
 8019bec:	4917      	ldr	r1, [pc, #92]	@ (8019c4c <USB_ActivateEndpoint+0x6a8>)
 8019bee:	400a      	ands	r2, r1
 8019bf0:	801a      	strh	r2, [r3, #0]
 8019bf2:	687a      	ldr	r2, [r7, #4]
 8019bf4:	683b      	ldr	r3, [r7, #0]
 8019bf6:	781b      	ldrb	r3, [r3, #0]
 8019bf8:	009b      	lsls	r3, r3, #2
 8019bfa:	18d3      	adds	r3, r2, r3
 8019bfc:	183a      	adds	r2, r7, r0
 8019bfe:	8812      	ldrh	r2, [r2, #0]
 8019c00:	4919      	ldr	r1, [pc, #100]	@ (8019c68 <USB_ActivateEndpoint+0x6c4>)
 8019c02:	430a      	orrs	r2, r1
 8019c04:	b292      	uxth	r2, r2
 8019c06:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	78db      	ldrb	r3, [r3, #3]
 8019c0c:	2b01      	cmp	r3, #1
 8019c0e:	d02f      	beq.n	8019c70 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019c10:	687a      	ldr	r2, [r7, #4]
 8019c12:	683b      	ldr	r3, [r7, #0]
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	009b      	lsls	r3, r3, #2
 8019c18:	18d3      	adds	r3, r2, r3
 8019c1a:	881b      	ldrh	r3, [r3, #0]
 8019c1c:	b29a      	uxth	r2, r3
 8019c1e:	2044      	movs	r0, #68	@ 0x44
 8019c20:	183b      	adds	r3, r7, r0
 8019c22:	4912      	ldr	r1, [pc, #72]	@ (8019c6c <USB_ActivateEndpoint+0x6c8>)
 8019c24:	400a      	ands	r2, r1
 8019c26:	801a      	strh	r2, [r3, #0]
 8019c28:	183b      	adds	r3, r7, r0
 8019c2a:	183a      	adds	r2, r7, r0
 8019c2c:	8812      	ldrh	r2, [r2, #0]
 8019c2e:	2120      	movs	r1, #32
 8019c30:	404a      	eors	r2, r1
 8019c32:	801a      	strh	r2, [r3, #0]
 8019c34:	687a      	ldr	r2, [r7, #4]
 8019c36:	683b      	ldr	r3, [r7, #0]
 8019c38:	781b      	ldrb	r3, [r3, #0]
 8019c3a:	009b      	lsls	r3, r3, #2
 8019c3c:	18d3      	adds	r3, r2, r3
 8019c3e:	183a      	adds	r2, r7, r0
 8019c40:	8812      	ldrh	r2, [r2, #0]
 8019c42:	4905      	ldr	r1, [pc, #20]	@ (8019c58 <USB_ActivateEndpoint+0x6b4>)
 8019c44:	430a      	orrs	r2, r1
 8019c46:	b292      	uxth	r2, r2
 8019c48:	801a      	strh	r2, [r3, #0]
 8019c4a:	e028      	b.n	8019c9e <USB_ActivateEndpoint+0x6fa>
 8019c4c:	ffff8f8f 	.word	0xffff8f8f
 8019c50:	ffffc080 	.word	0xffffc080
 8019c54:	ffffbf8f 	.word	0xffffbf8f
 8019c58:	ffff8080 	.word	0xffff8080
 8019c5c:	ffff8180 	.word	0xffff8180
 8019c60:	ffff8e8f 	.word	0xffff8e8f
 8019c64:	00000404 	.word	0x00000404
 8019c68:	ffff80c0 	.word	0xffff80c0
 8019c6c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019c70:	687a      	ldr	r2, [r7, #4]
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	781b      	ldrb	r3, [r3, #0]
 8019c76:	009b      	lsls	r3, r3, #2
 8019c78:	18d3      	adds	r3, r2, r3
 8019c7a:	881b      	ldrh	r3, [r3, #0]
 8019c7c:	b29a      	uxth	r2, r3
 8019c7e:	2046      	movs	r0, #70	@ 0x46
 8019c80:	183b      	adds	r3, r7, r0
 8019c82:	4916      	ldr	r1, [pc, #88]	@ (8019cdc <USB_ActivateEndpoint+0x738>)
 8019c84:	400a      	ands	r2, r1
 8019c86:	801a      	strh	r2, [r3, #0]
 8019c88:	687a      	ldr	r2, [r7, #4]
 8019c8a:	683b      	ldr	r3, [r7, #0]
 8019c8c:	781b      	ldrb	r3, [r3, #0]
 8019c8e:	009b      	lsls	r3, r3, #2
 8019c90:	18d3      	adds	r3, r2, r3
 8019c92:	183a      	adds	r2, r7, r0
 8019c94:	8812      	ldrh	r2, [r2, #0]
 8019c96:	4912      	ldr	r1, [pc, #72]	@ (8019ce0 <USB_ActivateEndpoint+0x73c>)
 8019c98:	430a      	orrs	r2, r1
 8019c9a:	b292      	uxth	r2, r2
 8019c9c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019c9e:	687a      	ldr	r2, [r7, #4]
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	781b      	ldrb	r3, [r3, #0]
 8019ca4:	009b      	lsls	r3, r3, #2
 8019ca6:	18d3      	adds	r3, r2, r3
 8019ca8:	881b      	ldrh	r3, [r3, #0]
 8019caa:	b29a      	uxth	r2, r3
 8019cac:	2042      	movs	r0, #66	@ 0x42
 8019cae:	183b      	adds	r3, r7, r0
 8019cb0:	490c      	ldr	r1, [pc, #48]	@ (8019ce4 <USB_ActivateEndpoint+0x740>)
 8019cb2:	400a      	ands	r2, r1
 8019cb4:	801a      	strh	r2, [r3, #0]
 8019cb6:	687a      	ldr	r2, [r7, #4]
 8019cb8:	683b      	ldr	r3, [r7, #0]
 8019cba:	781b      	ldrb	r3, [r3, #0]
 8019cbc:	009b      	lsls	r3, r3, #2
 8019cbe:	18d3      	adds	r3, r2, r3
 8019cc0:	183a      	adds	r2, r7, r0
 8019cc2:	8812      	ldrh	r2, [r2, #0]
 8019cc4:	4906      	ldr	r1, [pc, #24]	@ (8019ce0 <USB_ActivateEndpoint+0x73c>)
 8019cc6:	430a      	orrs	r2, r1
 8019cc8:	b292      	uxth	r2, r2
 8019cca:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019ccc:	236f      	movs	r3, #111	@ 0x6f
 8019cce:	18fb      	adds	r3, r7, r3
 8019cd0:	781b      	ldrb	r3, [r3, #0]
}
 8019cd2:	0018      	movs	r0, r3
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	b01c      	add	sp, #112	@ 0x70
 8019cd8:	bd80      	pop	{r7, pc}
 8019cda:	46c0      	nop			@ (mov r8, r8)
 8019cdc:	ffff8fbf 	.word	0xffff8fbf
 8019ce0:	ffff8080 	.word	0xffff8080
 8019ce4:	ffffbf8f 	.word	0xffffbf8f

08019ce8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019ce8:	b580      	push	{r7, lr}
 8019cea:	b08c      	sub	sp, #48	@ 0x30
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
 8019cf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	7b1b      	ldrb	r3, [r3, #12]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d000      	beq.n	8019cfc <USB_DeactivateEndpoint+0x14>
 8019cfa:	e07e      	b.n	8019dfa <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	785b      	ldrb	r3, [r3, #1]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d03c      	beq.n	8019d7e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019d04:	687a      	ldr	r2, [r7, #4]
 8019d06:	683b      	ldr	r3, [r7, #0]
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	009b      	lsls	r3, r3, #2
 8019d0c:	18d2      	adds	r2, r2, r3
 8019d0e:	210c      	movs	r1, #12
 8019d10:	187b      	adds	r3, r7, r1
 8019d12:	8812      	ldrh	r2, [r2, #0]
 8019d14:	801a      	strh	r2, [r3, #0]
 8019d16:	187b      	adds	r3, r7, r1
 8019d18:	881b      	ldrh	r3, [r3, #0]
 8019d1a:	2240      	movs	r2, #64	@ 0x40
 8019d1c:	4013      	ands	r3, r2
 8019d1e:	d016      	beq.n	8019d4e <USB_DeactivateEndpoint+0x66>
 8019d20:	687a      	ldr	r2, [r7, #4]
 8019d22:	683b      	ldr	r3, [r7, #0]
 8019d24:	781b      	ldrb	r3, [r3, #0]
 8019d26:	009b      	lsls	r3, r3, #2
 8019d28:	18d3      	adds	r3, r2, r3
 8019d2a:	881b      	ldrh	r3, [r3, #0]
 8019d2c:	b29a      	uxth	r2, r3
 8019d2e:	200a      	movs	r0, #10
 8019d30:	183b      	adds	r3, r7, r0
 8019d32:	49c7      	ldr	r1, [pc, #796]	@ (801a050 <USB_DeactivateEndpoint+0x368>)
 8019d34:	400a      	ands	r2, r1
 8019d36:	801a      	strh	r2, [r3, #0]
 8019d38:	687a      	ldr	r2, [r7, #4]
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	009b      	lsls	r3, r3, #2
 8019d40:	18d3      	adds	r3, r2, r3
 8019d42:	183a      	adds	r2, r7, r0
 8019d44:	8812      	ldrh	r2, [r2, #0]
 8019d46:	49c3      	ldr	r1, [pc, #780]	@ (801a054 <USB_DeactivateEndpoint+0x36c>)
 8019d48:	430a      	orrs	r2, r1
 8019d4a:	b292      	uxth	r2, r2
 8019d4c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019d4e:	687a      	ldr	r2, [r7, #4]
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	781b      	ldrb	r3, [r3, #0]
 8019d54:	009b      	lsls	r3, r3, #2
 8019d56:	18d3      	adds	r3, r2, r3
 8019d58:	881b      	ldrh	r3, [r3, #0]
 8019d5a:	b29a      	uxth	r2, r3
 8019d5c:	2008      	movs	r0, #8
 8019d5e:	183b      	adds	r3, r7, r0
 8019d60:	49bd      	ldr	r1, [pc, #756]	@ (801a058 <USB_DeactivateEndpoint+0x370>)
 8019d62:	400a      	ands	r2, r1
 8019d64:	801a      	strh	r2, [r3, #0]
 8019d66:	687a      	ldr	r2, [r7, #4]
 8019d68:	683b      	ldr	r3, [r7, #0]
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	009b      	lsls	r3, r3, #2
 8019d6e:	18d3      	adds	r3, r2, r3
 8019d70:	183a      	adds	r2, r7, r0
 8019d72:	8812      	ldrh	r2, [r2, #0]
 8019d74:	49b9      	ldr	r1, [pc, #740]	@ (801a05c <USB_DeactivateEndpoint+0x374>)
 8019d76:	430a      	orrs	r2, r1
 8019d78:	b292      	uxth	r2, r2
 8019d7a:	801a      	strh	r2, [r3, #0]
 8019d7c:	e163      	b.n	801a046 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019d7e:	687a      	ldr	r2, [r7, #4]
 8019d80:	683b      	ldr	r3, [r7, #0]
 8019d82:	781b      	ldrb	r3, [r3, #0]
 8019d84:	009b      	lsls	r3, r3, #2
 8019d86:	18d2      	adds	r2, r2, r3
 8019d88:	2112      	movs	r1, #18
 8019d8a:	187b      	adds	r3, r7, r1
 8019d8c:	8812      	ldrh	r2, [r2, #0]
 8019d8e:	801a      	strh	r2, [r3, #0]
 8019d90:	187b      	adds	r3, r7, r1
 8019d92:	881a      	ldrh	r2, [r3, #0]
 8019d94:	2380      	movs	r3, #128	@ 0x80
 8019d96:	01db      	lsls	r3, r3, #7
 8019d98:	4013      	ands	r3, r2
 8019d9a:	d016      	beq.n	8019dca <USB_DeactivateEndpoint+0xe2>
 8019d9c:	687a      	ldr	r2, [r7, #4]
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	781b      	ldrb	r3, [r3, #0]
 8019da2:	009b      	lsls	r3, r3, #2
 8019da4:	18d3      	adds	r3, r2, r3
 8019da6:	881b      	ldrh	r3, [r3, #0]
 8019da8:	b29a      	uxth	r2, r3
 8019daa:	2010      	movs	r0, #16
 8019dac:	183b      	adds	r3, r7, r0
 8019dae:	49a8      	ldr	r1, [pc, #672]	@ (801a050 <USB_DeactivateEndpoint+0x368>)
 8019db0:	400a      	ands	r2, r1
 8019db2:	801a      	strh	r2, [r3, #0]
 8019db4:	687a      	ldr	r2, [r7, #4]
 8019db6:	683b      	ldr	r3, [r7, #0]
 8019db8:	781b      	ldrb	r3, [r3, #0]
 8019dba:	009b      	lsls	r3, r3, #2
 8019dbc:	18d3      	adds	r3, r2, r3
 8019dbe:	183a      	adds	r2, r7, r0
 8019dc0:	8812      	ldrh	r2, [r2, #0]
 8019dc2:	49a7      	ldr	r1, [pc, #668]	@ (801a060 <USB_DeactivateEndpoint+0x378>)
 8019dc4:	430a      	orrs	r2, r1
 8019dc6:	b292      	uxth	r2, r2
 8019dc8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019dca:	687a      	ldr	r2, [r7, #4]
 8019dcc:	683b      	ldr	r3, [r7, #0]
 8019dce:	781b      	ldrb	r3, [r3, #0]
 8019dd0:	009b      	lsls	r3, r3, #2
 8019dd2:	18d3      	adds	r3, r2, r3
 8019dd4:	881b      	ldrh	r3, [r3, #0]
 8019dd6:	b29a      	uxth	r2, r3
 8019dd8:	200e      	movs	r0, #14
 8019dda:	183b      	adds	r3, r7, r0
 8019ddc:	49a1      	ldr	r1, [pc, #644]	@ (801a064 <USB_DeactivateEndpoint+0x37c>)
 8019dde:	400a      	ands	r2, r1
 8019de0:	801a      	strh	r2, [r3, #0]
 8019de2:	687a      	ldr	r2, [r7, #4]
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	781b      	ldrb	r3, [r3, #0]
 8019de8:	009b      	lsls	r3, r3, #2
 8019dea:	18d3      	adds	r3, r2, r3
 8019dec:	183a      	adds	r2, r7, r0
 8019dee:	8812      	ldrh	r2, [r2, #0]
 8019df0:	499a      	ldr	r1, [pc, #616]	@ (801a05c <USB_DeactivateEndpoint+0x374>)
 8019df2:	430a      	orrs	r2, r1
 8019df4:	b292      	uxth	r2, r2
 8019df6:	801a      	strh	r2, [r3, #0]
 8019df8:	e125      	b.n	801a046 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019dfa:	683b      	ldr	r3, [r7, #0]
 8019dfc:	785b      	ldrb	r3, [r3, #1]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d000      	beq.n	8019e04 <USB_DeactivateEndpoint+0x11c>
 8019e02:	e090      	b.n	8019f26 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019e04:	687a      	ldr	r2, [r7, #4]
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	781b      	ldrb	r3, [r3, #0]
 8019e0a:	009b      	lsls	r3, r3, #2
 8019e0c:	18d2      	adds	r2, r2, r3
 8019e0e:	2120      	movs	r1, #32
 8019e10:	187b      	adds	r3, r7, r1
 8019e12:	8812      	ldrh	r2, [r2, #0]
 8019e14:	801a      	strh	r2, [r3, #0]
 8019e16:	187b      	adds	r3, r7, r1
 8019e18:	881a      	ldrh	r2, [r3, #0]
 8019e1a:	2380      	movs	r3, #128	@ 0x80
 8019e1c:	01db      	lsls	r3, r3, #7
 8019e1e:	4013      	ands	r3, r2
 8019e20:	d016      	beq.n	8019e50 <USB_DeactivateEndpoint+0x168>
 8019e22:	687a      	ldr	r2, [r7, #4]
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	781b      	ldrb	r3, [r3, #0]
 8019e28:	009b      	lsls	r3, r3, #2
 8019e2a:	18d3      	adds	r3, r2, r3
 8019e2c:	881b      	ldrh	r3, [r3, #0]
 8019e2e:	b29a      	uxth	r2, r3
 8019e30:	201e      	movs	r0, #30
 8019e32:	183b      	adds	r3, r7, r0
 8019e34:	4986      	ldr	r1, [pc, #536]	@ (801a050 <USB_DeactivateEndpoint+0x368>)
 8019e36:	400a      	ands	r2, r1
 8019e38:	801a      	strh	r2, [r3, #0]
 8019e3a:	687a      	ldr	r2, [r7, #4]
 8019e3c:	683b      	ldr	r3, [r7, #0]
 8019e3e:	781b      	ldrb	r3, [r3, #0]
 8019e40:	009b      	lsls	r3, r3, #2
 8019e42:	18d3      	adds	r3, r2, r3
 8019e44:	183a      	adds	r2, r7, r0
 8019e46:	8812      	ldrh	r2, [r2, #0]
 8019e48:	4985      	ldr	r1, [pc, #532]	@ (801a060 <USB_DeactivateEndpoint+0x378>)
 8019e4a:	430a      	orrs	r2, r1
 8019e4c:	b292      	uxth	r2, r2
 8019e4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019e50:	687a      	ldr	r2, [r7, #4]
 8019e52:	683b      	ldr	r3, [r7, #0]
 8019e54:	781b      	ldrb	r3, [r3, #0]
 8019e56:	009b      	lsls	r3, r3, #2
 8019e58:	18d2      	adds	r2, r2, r3
 8019e5a:	211c      	movs	r1, #28
 8019e5c:	187b      	adds	r3, r7, r1
 8019e5e:	8812      	ldrh	r2, [r2, #0]
 8019e60:	801a      	strh	r2, [r3, #0]
 8019e62:	187b      	adds	r3, r7, r1
 8019e64:	881b      	ldrh	r3, [r3, #0]
 8019e66:	2240      	movs	r2, #64	@ 0x40
 8019e68:	4013      	ands	r3, r2
 8019e6a:	d016      	beq.n	8019e9a <USB_DeactivateEndpoint+0x1b2>
 8019e6c:	687a      	ldr	r2, [r7, #4]
 8019e6e:	683b      	ldr	r3, [r7, #0]
 8019e70:	781b      	ldrb	r3, [r3, #0]
 8019e72:	009b      	lsls	r3, r3, #2
 8019e74:	18d3      	adds	r3, r2, r3
 8019e76:	881b      	ldrh	r3, [r3, #0]
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	201a      	movs	r0, #26
 8019e7c:	183b      	adds	r3, r7, r0
 8019e7e:	4974      	ldr	r1, [pc, #464]	@ (801a050 <USB_DeactivateEndpoint+0x368>)
 8019e80:	400a      	ands	r2, r1
 8019e82:	801a      	strh	r2, [r3, #0]
 8019e84:	687a      	ldr	r2, [r7, #4]
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	781b      	ldrb	r3, [r3, #0]
 8019e8a:	009b      	lsls	r3, r3, #2
 8019e8c:	18d3      	adds	r3, r2, r3
 8019e8e:	183a      	adds	r2, r7, r0
 8019e90:	8812      	ldrh	r2, [r2, #0]
 8019e92:	4970      	ldr	r1, [pc, #448]	@ (801a054 <USB_DeactivateEndpoint+0x36c>)
 8019e94:	430a      	orrs	r2, r1
 8019e96:	b292      	uxth	r2, r2
 8019e98:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019e9a:	687a      	ldr	r2, [r7, #4]
 8019e9c:	683b      	ldr	r3, [r7, #0]
 8019e9e:	781b      	ldrb	r3, [r3, #0]
 8019ea0:	009b      	lsls	r3, r3, #2
 8019ea2:	18d3      	adds	r3, r2, r3
 8019ea4:	881b      	ldrh	r3, [r3, #0]
 8019ea6:	b29a      	uxth	r2, r3
 8019ea8:	2018      	movs	r0, #24
 8019eaa:	183b      	adds	r3, r7, r0
 8019eac:	4968      	ldr	r1, [pc, #416]	@ (801a050 <USB_DeactivateEndpoint+0x368>)
 8019eae:	400a      	ands	r2, r1
 8019eb0:	801a      	strh	r2, [r3, #0]
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	683b      	ldr	r3, [r7, #0]
 8019eb6:	781b      	ldrb	r3, [r3, #0]
 8019eb8:	009b      	lsls	r3, r3, #2
 8019eba:	18d3      	adds	r3, r2, r3
 8019ebc:	183a      	adds	r2, r7, r0
 8019ebe:	8812      	ldrh	r2, [r2, #0]
 8019ec0:	4964      	ldr	r1, [pc, #400]	@ (801a054 <USB_DeactivateEndpoint+0x36c>)
 8019ec2:	430a      	orrs	r2, r1
 8019ec4:	b292      	uxth	r2, r2
 8019ec6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019ec8:	687a      	ldr	r2, [r7, #4]
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	781b      	ldrb	r3, [r3, #0]
 8019ece:	009b      	lsls	r3, r3, #2
 8019ed0:	18d3      	adds	r3, r2, r3
 8019ed2:	881b      	ldrh	r3, [r3, #0]
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	2016      	movs	r0, #22
 8019ed8:	183b      	adds	r3, r7, r0
 8019eda:	4962      	ldr	r1, [pc, #392]	@ (801a064 <USB_DeactivateEndpoint+0x37c>)
 8019edc:	400a      	ands	r2, r1
 8019ede:	801a      	strh	r2, [r3, #0]
 8019ee0:	687a      	ldr	r2, [r7, #4]
 8019ee2:	683b      	ldr	r3, [r7, #0]
 8019ee4:	781b      	ldrb	r3, [r3, #0]
 8019ee6:	009b      	lsls	r3, r3, #2
 8019ee8:	18d3      	adds	r3, r2, r3
 8019eea:	183a      	adds	r2, r7, r0
 8019eec:	8812      	ldrh	r2, [r2, #0]
 8019eee:	495b      	ldr	r1, [pc, #364]	@ (801a05c <USB_DeactivateEndpoint+0x374>)
 8019ef0:	430a      	orrs	r2, r1
 8019ef2:	b292      	uxth	r2, r2
 8019ef4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019ef6:	687a      	ldr	r2, [r7, #4]
 8019ef8:	683b      	ldr	r3, [r7, #0]
 8019efa:	781b      	ldrb	r3, [r3, #0]
 8019efc:	009b      	lsls	r3, r3, #2
 8019efe:	18d3      	adds	r3, r2, r3
 8019f00:	881b      	ldrh	r3, [r3, #0]
 8019f02:	b29a      	uxth	r2, r3
 8019f04:	2014      	movs	r0, #20
 8019f06:	183b      	adds	r3, r7, r0
 8019f08:	4953      	ldr	r1, [pc, #332]	@ (801a058 <USB_DeactivateEndpoint+0x370>)
 8019f0a:	400a      	ands	r2, r1
 8019f0c:	801a      	strh	r2, [r3, #0]
 8019f0e:	687a      	ldr	r2, [r7, #4]
 8019f10:	683b      	ldr	r3, [r7, #0]
 8019f12:	781b      	ldrb	r3, [r3, #0]
 8019f14:	009b      	lsls	r3, r3, #2
 8019f16:	18d3      	adds	r3, r2, r3
 8019f18:	183a      	adds	r2, r7, r0
 8019f1a:	8812      	ldrh	r2, [r2, #0]
 8019f1c:	494f      	ldr	r1, [pc, #316]	@ (801a05c <USB_DeactivateEndpoint+0x374>)
 8019f1e:	430a      	orrs	r2, r1
 8019f20:	b292      	uxth	r2, r2
 8019f22:	801a      	strh	r2, [r3, #0]
 8019f24:	e08f      	b.n	801a046 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019f26:	687a      	ldr	r2, [r7, #4]
 8019f28:	683b      	ldr	r3, [r7, #0]
 8019f2a:	781b      	ldrb	r3, [r3, #0]
 8019f2c:	009b      	lsls	r3, r3, #2
 8019f2e:	18d2      	adds	r2, r2, r3
 8019f30:	212e      	movs	r1, #46	@ 0x2e
 8019f32:	187b      	adds	r3, r7, r1
 8019f34:	8812      	ldrh	r2, [r2, #0]
 8019f36:	801a      	strh	r2, [r3, #0]
 8019f38:	187b      	adds	r3, r7, r1
 8019f3a:	881a      	ldrh	r2, [r3, #0]
 8019f3c:	2380      	movs	r3, #128	@ 0x80
 8019f3e:	01db      	lsls	r3, r3, #7
 8019f40:	4013      	ands	r3, r2
 8019f42:	d016      	beq.n	8019f72 <USB_DeactivateEndpoint+0x28a>
 8019f44:	687a      	ldr	r2, [r7, #4]
 8019f46:	683b      	ldr	r3, [r7, #0]
 8019f48:	781b      	ldrb	r3, [r3, #0]
 8019f4a:	009b      	lsls	r3, r3, #2
 8019f4c:	18d3      	adds	r3, r2, r3
 8019f4e:	881b      	ldrh	r3, [r3, #0]
 8019f50:	b29a      	uxth	r2, r3
 8019f52:	202c      	movs	r0, #44	@ 0x2c
 8019f54:	183b      	adds	r3, r7, r0
 8019f56:	493e      	ldr	r1, [pc, #248]	@ (801a050 <USB_DeactivateEndpoint+0x368>)
 8019f58:	400a      	ands	r2, r1
 8019f5a:	801a      	strh	r2, [r3, #0]
 8019f5c:	687a      	ldr	r2, [r7, #4]
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	781b      	ldrb	r3, [r3, #0]
 8019f62:	009b      	lsls	r3, r3, #2
 8019f64:	18d3      	adds	r3, r2, r3
 8019f66:	183a      	adds	r2, r7, r0
 8019f68:	8812      	ldrh	r2, [r2, #0]
 8019f6a:	493d      	ldr	r1, [pc, #244]	@ (801a060 <USB_DeactivateEndpoint+0x378>)
 8019f6c:	430a      	orrs	r2, r1
 8019f6e:	b292      	uxth	r2, r2
 8019f70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019f72:	687a      	ldr	r2, [r7, #4]
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	781b      	ldrb	r3, [r3, #0]
 8019f78:	009b      	lsls	r3, r3, #2
 8019f7a:	18d2      	adds	r2, r2, r3
 8019f7c:	212a      	movs	r1, #42	@ 0x2a
 8019f7e:	187b      	adds	r3, r7, r1
 8019f80:	8812      	ldrh	r2, [r2, #0]
 8019f82:	801a      	strh	r2, [r3, #0]
 8019f84:	187b      	adds	r3, r7, r1
 8019f86:	881b      	ldrh	r3, [r3, #0]
 8019f88:	2240      	movs	r2, #64	@ 0x40
 8019f8a:	4013      	ands	r3, r2
 8019f8c:	d016      	beq.n	8019fbc <USB_DeactivateEndpoint+0x2d4>
 8019f8e:	687a      	ldr	r2, [r7, #4]
 8019f90:	683b      	ldr	r3, [r7, #0]
 8019f92:	781b      	ldrb	r3, [r3, #0]
 8019f94:	009b      	lsls	r3, r3, #2
 8019f96:	18d3      	adds	r3, r2, r3
 8019f98:	881b      	ldrh	r3, [r3, #0]
 8019f9a:	b29a      	uxth	r2, r3
 8019f9c:	2028      	movs	r0, #40	@ 0x28
 8019f9e:	183b      	adds	r3, r7, r0
 8019fa0:	492b      	ldr	r1, [pc, #172]	@ (801a050 <USB_DeactivateEndpoint+0x368>)
 8019fa2:	400a      	ands	r2, r1
 8019fa4:	801a      	strh	r2, [r3, #0]
 8019fa6:	687a      	ldr	r2, [r7, #4]
 8019fa8:	683b      	ldr	r3, [r7, #0]
 8019faa:	781b      	ldrb	r3, [r3, #0]
 8019fac:	009b      	lsls	r3, r3, #2
 8019fae:	18d3      	adds	r3, r2, r3
 8019fb0:	183a      	adds	r2, r7, r0
 8019fb2:	8812      	ldrh	r2, [r2, #0]
 8019fb4:	4927      	ldr	r1, [pc, #156]	@ (801a054 <USB_DeactivateEndpoint+0x36c>)
 8019fb6:	430a      	orrs	r2, r1
 8019fb8:	b292      	uxth	r2, r2
 8019fba:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019fbc:	687a      	ldr	r2, [r7, #4]
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	009b      	lsls	r3, r3, #2
 8019fc4:	18d3      	adds	r3, r2, r3
 8019fc6:	881b      	ldrh	r3, [r3, #0]
 8019fc8:	b29a      	uxth	r2, r3
 8019fca:	2026      	movs	r0, #38	@ 0x26
 8019fcc:	183b      	adds	r3, r7, r0
 8019fce:	4920      	ldr	r1, [pc, #128]	@ (801a050 <USB_DeactivateEndpoint+0x368>)
 8019fd0:	400a      	ands	r2, r1
 8019fd2:	801a      	strh	r2, [r3, #0]
 8019fd4:	687a      	ldr	r2, [r7, #4]
 8019fd6:	683b      	ldr	r3, [r7, #0]
 8019fd8:	781b      	ldrb	r3, [r3, #0]
 8019fda:	009b      	lsls	r3, r3, #2
 8019fdc:	18d3      	adds	r3, r2, r3
 8019fde:	183a      	adds	r2, r7, r0
 8019fe0:	8812      	ldrh	r2, [r2, #0]
 8019fe2:	491f      	ldr	r1, [pc, #124]	@ (801a060 <USB_DeactivateEndpoint+0x378>)
 8019fe4:	430a      	orrs	r2, r1
 8019fe6:	b292      	uxth	r2, r2
 8019fe8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019fea:	687a      	ldr	r2, [r7, #4]
 8019fec:	683b      	ldr	r3, [r7, #0]
 8019fee:	781b      	ldrb	r3, [r3, #0]
 8019ff0:	009b      	lsls	r3, r3, #2
 8019ff2:	18d3      	adds	r3, r2, r3
 8019ff4:	881b      	ldrh	r3, [r3, #0]
 8019ff6:	b29a      	uxth	r2, r3
 8019ff8:	2024      	movs	r0, #36	@ 0x24
 8019ffa:	183b      	adds	r3, r7, r0
 8019ffc:	4916      	ldr	r1, [pc, #88]	@ (801a058 <USB_DeactivateEndpoint+0x370>)
 8019ffe:	400a      	ands	r2, r1
 801a000:	801a      	strh	r2, [r3, #0]
 801a002:	687a      	ldr	r2, [r7, #4]
 801a004:	683b      	ldr	r3, [r7, #0]
 801a006:	781b      	ldrb	r3, [r3, #0]
 801a008:	009b      	lsls	r3, r3, #2
 801a00a:	18d3      	adds	r3, r2, r3
 801a00c:	183a      	adds	r2, r7, r0
 801a00e:	8812      	ldrh	r2, [r2, #0]
 801a010:	4912      	ldr	r1, [pc, #72]	@ (801a05c <USB_DeactivateEndpoint+0x374>)
 801a012:	430a      	orrs	r2, r1
 801a014:	b292      	uxth	r2, r2
 801a016:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a018:	687a      	ldr	r2, [r7, #4]
 801a01a:	683b      	ldr	r3, [r7, #0]
 801a01c:	781b      	ldrb	r3, [r3, #0]
 801a01e:	009b      	lsls	r3, r3, #2
 801a020:	18d3      	adds	r3, r2, r3
 801a022:	881b      	ldrh	r3, [r3, #0]
 801a024:	b29a      	uxth	r2, r3
 801a026:	2022      	movs	r0, #34	@ 0x22
 801a028:	183b      	adds	r3, r7, r0
 801a02a:	490e      	ldr	r1, [pc, #56]	@ (801a064 <USB_DeactivateEndpoint+0x37c>)
 801a02c:	400a      	ands	r2, r1
 801a02e:	801a      	strh	r2, [r3, #0]
 801a030:	687a      	ldr	r2, [r7, #4]
 801a032:	683b      	ldr	r3, [r7, #0]
 801a034:	781b      	ldrb	r3, [r3, #0]
 801a036:	009b      	lsls	r3, r3, #2
 801a038:	18d3      	adds	r3, r2, r3
 801a03a:	183a      	adds	r2, r7, r0
 801a03c:	8812      	ldrh	r2, [r2, #0]
 801a03e:	4907      	ldr	r1, [pc, #28]	@ (801a05c <USB_DeactivateEndpoint+0x374>)
 801a040:	430a      	orrs	r2, r1
 801a042:	b292      	uxth	r2, r2
 801a044:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801a046:	2300      	movs	r3, #0
}
 801a048:	0018      	movs	r0, r3
 801a04a:	46bd      	mov	sp, r7
 801a04c:	b00c      	add	sp, #48	@ 0x30
 801a04e:	bd80      	pop	{r7, pc}
 801a050:	ffff8f8f 	.word	0xffff8f8f
 801a054:	ffff80c0 	.word	0xffff80c0
 801a058:	ffff8fbf 	.word	0xffff8fbf
 801a05c:	ffff8080 	.word	0xffff8080
 801a060:	ffffc080 	.word	0xffffc080
 801a064:	ffffbf8f 	.word	0xffffbf8f

0801a068 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a068:	b590      	push	{r4, r7, lr}
 801a06a:	b0c3      	sub	sp, #268	@ 0x10c
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
 801a070:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801a072:	683b      	ldr	r3, [r7, #0]
 801a074:	785b      	ldrb	r3, [r3, #1]
 801a076:	2b01      	cmp	r3, #1
 801a078:	d001      	beq.n	801a07e <USB_EPStartXfer+0x16>
 801a07a:	f000 fd2d 	bl	801aad8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801a07e:	683b      	ldr	r3, [r7, #0]
 801a080:	699a      	ldr	r2, [r3, #24]
 801a082:	683b      	ldr	r3, [r7, #0]
 801a084:	691b      	ldr	r3, [r3, #16]
 801a086:	429a      	cmp	r2, r3
 801a088:	d905      	bls.n	801a096 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801a08a:	683b      	ldr	r3, [r7, #0]
 801a08c:	691b      	ldr	r3, [r3, #16]
 801a08e:	1d7a      	adds	r2, r7, #5
 801a090:	32ff      	adds	r2, #255	@ 0xff
 801a092:	6013      	str	r3, [r2, #0]
 801a094:	e004      	b.n	801a0a0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801a096:	683b      	ldr	r3, [r7, #0]
 801a098:	699b      	ldr	r3, [r3, #24]
 801a09a:	1d7a      	adds	r2, r7, #5
 801a09c:	32ff      	adds	r2, #255	@ 0xff
 801a09e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801a0a0:	683b      	ldr	r3, [r7, #0]
 801a0a2:	7b1b      	ldrb	r3, [r3, #12]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d125      	bne.n	801a0f4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	6959      	ldr	r1, [r3, #20]
 801a0ac:	683b      	ldr	r3, [r7, #0]
 801a0ae:	88da      	ldrh	r2, [r3, #6]
 801a0b0:	1d7b      	adds	r3, r7, #5
 801a0b2:	33ff      	adds	r3, #255	@ 0xff
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	b29b      	uxth	r3, r3
 801a0b8:	6878      	ldr	r0, [r7, #4]
 801a0ba:	f001 fa47 	bl	801b54c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	613b      	str	r3, [r7, #16]
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	2250      	movs	r2, #80	@ 0x50
 801a0c6:	5a9b      	ldrh	r3, [r3, r2]
 801a0c8:	b29b      	uxth	r3, r3
 801a0ca:	001a      	movs	r2, r3
 801a0cc:	693b      	ldr	r3, [r7, #16]
 801a0ce:	189b      	adds	r3, r3, r2
 801a0d0:	613b      	str	r3, [r7, #16]
 801a0d2:	683b      	ldr	r3, [r7, #0]
 801a0d4:	781b      	ldrb	r3, [r3, #0]
 801a0d6:	00da      	lsls	r2, r3, #3
 801a0d8:	693b      	ldr	r3, [r7, #16]
 801a0da:	18d3      	adds	r3, r2, r3
 801a0dc:	4ad7      	ldr	r2, [pc, #860]	@ (801a43c <USB_EPStartXfer+0x3d4>)
 801a0de:	4694      	mov	ip, r2
 801a0e0:	4463      	add	r3, ip
 801a0e2:	60fb      	str	r3, [r7, #12]
 801a0e4:	1d7b      	adds	r3, r7, #5
 801a0e6:	33ff      	adds	r3, #255	@ 0xff
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	b29a      	uxth	r2, r3
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	801a      	strh	r2, [r3, #0]
 801a0f0:	f000 fccd 	bl	801aa8e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	78db      	ldrb	r3, [r3, #3]
 801a0f8:	2b02      	cmp	r3, #2
 801a0fa:	d000      	beq.n	801a0fe <USB_EPStartXfer+0x96>
 801a0fc:	e362      	b.n	801a7c4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801a0fe:	683b      	ldr	r3, [r7, #0]
 801a100:	6a1a      	ldr	r2, [r3, #32]
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	691b      	ldr	r3, [r3, #16]
 801a106:	429a      	cmp	r2, r3
 801a108:	d800      	bhi.n	801a10c <USB_EPStartXfer+0xa4>
 801a10a:	e309      	b.n	801a720 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801a10c:	687a      	ldr	r2, [r7, #4]
 801a10e:	683b      	ldr	r3, [r7, #0]
 801a110:	781b      	ldrb	r3, [r3, #0]
 801a112:	009b      	lsls	r3, r3, #2
 801a114:	18d3      	adds	r3, r2, r3
 801a116:	881b      	ldrh	r3, [r3, #0]
 801a118:	b29a      	uxth	r2, r3
 801a11a:	2056      	movs	r0, #86	@ 0x56
 801a11c:	183b      	adds	r3, r7, r0
 801a11e:	49c8      	ldr	r1, [pc, #800]	@ (801a440 <USB_EPStartXfer+0x3d8>)
 801a120:	400a      	ands	r2, r1
 801a122:	801a      	strh	r2, [r3, #0]
 801a124:	687a      	ldr	r2, [r7, #4]
 801a126:	683b      	ldr	r3, [r7, #0]
 801a128:	781b      	ldrb	r3, [r3, #0]
 801a12a:	009b      	lsls	r3, r3, #2
 801a12c:	18d3      	adds	r3, r2, r3
 801a12e:	183a      	adds	r2, r7, r0
 801a130:	8812      	ldrh	r2, [r2, #0]
 801a132:	49c4      	ldr	r1, [pc, #784]	@ (801a444 <USB_EPStartXfer+0x3dc>)
 801a134:	430a      	orrs	r2, r1
 801a136:	b292      	uxth	r2, r2
 801a138:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	6a1a      	ldr	r2, [r3, #32]
 801a13e:	1d7b      	adds	r3, r7, #5
 801a140:	33ff      	adds	r3, #255	@ 0xff
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	1ad2      	subs	r2, r2, r3
 801a146:	683b      	ldr	r3, [r7, #0]
 801a148:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a14a:	687a      	ldr	r2, [r7, #4]
 801a14c:	683b      	ldr	r3, [r7, #0]
 801a14e:	781b      	ldrb	r3, [r3, #0]
 801a150:	009b      	lsls	r3, r3, #2
 801a152:	18d3      	adds	r3, r2, r3
 801a154:	881b      	ldrh	r3, [r3, #0]
 801a156:	b29b      	uxth	r3, r3
 801a158:	001a      	movs	r2, r3
 801a15a:	2340      	movs	r3, #64	@ 0x40
 801a15c:	4013      	ands	r3, r2
 801a15e:	d100      	bne.n	801a162 <USB_EPStartXfer+0xfa>
 801a160:	e176      	b.n	801a450 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	633b      	str	r3, [r7, #48]	@ 0x30
 801a166:	683b      	ldr	r3, [r7, #0]
 801a168:	785b      	ldrb	r3, [r3, #1]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d000      	beq.n	801a170 <USB_EPStartXfer+0x108>
 801a16e:	e074      	b.n	801a25a <USB_EPStartXfer+0x1f2>
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	2250      	movs	r2, #80	@ 0x50
 801a178:	5a9b      	ldrh	r3, [r3, r2]
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	001a      	movs	r2, r3
 801a17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a180:	189b      	adds	r3, r3, r2
 801a182:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	781b      	ldrb	r3, [r3, #0]
 801a188:	00da      	lsls	r2, r3, #3
 801a18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a18c:	18d3      	adds	r3, r2, r3
 801a18e:	4aae      	ldr	r2, [pc, #696]	@ (801a448 <USB_EPStartXfer+0x3e0>)
 801a190:	4694      	mov	ip, r2
 801a192:	4463      	add	r3, ip
 801a194:	627b      	str	r3, [r7, #36]	@ 0x24
 801a196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a198:	881b      	ldrh	r3, [r3, #0]
 801a19a:	b29b      	uxth	r3, r3
 801a19c:	059b      	lsls	r3, r3, #22
 801a19e:	0d9b      	lsrs	r3, r3, #22
 801a1a0:	b29a      	uxth	r2, r3
 801a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1a4:	801a      	strh	r2, [r3, #0]
 801a1a6:	1d7b      	adds	r3, r7, #5
 801a1a8:	33ff      	adds	r3, #255	@ 0xff
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	2b3e      	cmp	r3, #62	@ 0x3e
 801a1ae:	d924      	bls.n	801a1fa <USB_EPStartXfer+0x192>
 801a1b0:	1d7b      	adds	r3, r7, #5
 801a1b2:	33ff      	adds	r3, #255	@ 0xff
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	095b      	lsrs	r3, r3, #5
 801a1b8:	1c7a      	adds	r2, r7, #1
 801a1ba:	32ff      	adds	r2, #255	@ 0xff
 801a1bc:	6013      	str	r3, [r2, #0]
 801a1be:	1d7b      	adds	r3, r7, #5
 801a1c0:	33ff      	adds	r3, #255	@ 0xff
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	221f      	movs	r2, #31
 801a1c6:	4013      	ands	r3, r2
 801a1c8:	d106      	bne.n	801a1d8 <USB_EPStartXfer+0x170>
 801a1ca:	1c7b      	adds	r3, r7, #1
 801a1cc:	33ff      	adds	r3, #255	@ 0xff
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	3b01      	subs	r3, #1
 801a1d2:	1c7a      	adds	r2, r7, #1
 801a1d4:	32ff      	adds	r2, #255	@ 0xff
 801a1d6:	6013      	str	r3, [r2, #0]
 801a1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1da:	881b      	ldrh	r3, [r3, #0]
 801a1dc:	b29a      	uxth	r2, r3
 801a1de:	1c7b      	adds	r3, r7, #1
 801a1e0:	33ff      	adds	r3, #255	@ 0xff
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	b29b      	uxth	r3, r3
 801a1e6:	029b      	lsls	r3, r3, #10
 801a1e8:	b29b      	uxth	r3, r3
 801a1ea:	4313      	orrs	r3, r2
 801a1ec:	b29b      	uxth	r3, r3
 801a1ee:	4a97      	ldr	r2, [pc, #604]	@ (801a44c <USB_EPStartXfer+0x3e4>)
 801a1f0:	4313      	orrs	r3, r2
 801a1f2:	b29a      	uxth	r2, r3
 801a1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1f6:	801a      	strh	r2, [r3, #0]
 801a1f8:	e04a      	b.n	801a290 <USB_EPStartXfer+0x228>
 801a1fa:	1d7b      	adds	r3, r7, #5
 801a1fc:	33ff      	adds	r3, #255	@ 0xff
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d108      	bne.n	801a216 <USB_EPStartXfer+0x1ae>
 801a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a206:	881b      	ldrh	r3, [r3, #0]
 801a208:	b29b      	uxth	r3, r3
 801a20a:	4a90      	ldr	r2, [pc, #576]	@ (801a44c <USB_EPStartXfer+0x3e4>)
 801a20c:	4313      	orrs	r3, r2
 801a20e:	b29a      	uxth	r2, r3
 801a210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a212:	801a      	strh	r2, [r3, #0]
 801a214:	e03c      	b.n	801a290 <USB_EPStartXfer+0x228>
 801a216:	1d7b      	adds	r3, r7, #5
 801a218:	33ff      	adds	r3, #255	@ 0xff
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	085b      	lsrs	r3, r3, #1
 801a21e:	1c7a      	adds	r2, r7, #1
 801a220:	32ff      	adds	r2, #255	@ 0xff
 801a222:	6013      	str	r3, [r2, #0]
 801a224:	1d7b      	adds	r3, r7, #5
 801a226:	33ff      	adds	r3, #255	@ 0xff
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	2201      	movs	r2, #1
 801a22c:	4013      	ands	r3, r2
 801a22e:	d006      	beq.n	801a23e <USB_EPStartXfer+0x1d6>
 801a230:	1c7b      	adds	r3, r7, #1
 801a232:	33ff      	adds	r3, #255	@ 0xff
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	3301      	adds	r3, #1
 801a238:	1c7a      	adds	r2, r7, #1
 801a23a:	32ff      	adds	r2, #255	@ 0xff
 801a23c:	6013      	str	r3, [r2, #0]
 801a23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a240:	881b      	ldrh	r3, [r3, #0]
 801a242:	b29a      	uxth	r2, r3
 801a244:	1c7b      	adds	r3, r7, #1
 801a246:	33ff      	adds	r3, #255	@ 0xff
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	029b      	lsls	r3, r3, #10
 801a24e:	b29b      	uxth	r3, r3
 801a250:	4313      	orrs	r3, r2
 801a252:	b29a      	uxth	r2, r3
 801a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a256:	801a      	strh	r2, [r3, #0]
 801a258:	e01a      	b.n	801a290 <USB_EPStartXfer+0x228>
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	785b      	ldrb	r3, [r3, #1]
 801a25e:	2b01      	cmp	r3, #1
 801a260:	d116      	bne.n	801a290 <USB_EPStartXfer+0x228>
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	2250      	movs	r2, #80	@ 0x50
 801a266:	5a9b      	ldrh	r3, [r3, r2]
 801a268:	b29b      	uxth	r3, r3
 801a26a:	001a      	movs	r2, r3
 801a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a26e:	189b      	adds	r3, r3, r2
 801a270:	633b      	str	r3, [r7, #48]	@ 0x30
 801a272:	683b      	ldr	r3, [r7, #0]
 801a274:	781b      	ldrb	r3, [r3, #0]
 801a276:	00da      	lsls	r2, r3, #3
 801a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a27a:	18d3      	adds	r3, r2, r3
 801a27c:	4a72      	ldr	r2, [pc, #456]	@ (801a448 <USB_EPStartXfer+0x3e0>)
 801a27e:	4694      	mov	ip, r2
 801a280:	4463      	add	r3, ip
 801a282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a284:	1d7b      	adds	r3, r7, #5
 801a286:	33ff      	adds	r3, #255	@ 0xff
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	b29a      	uxth	r2, r3
 801a28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a28e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a290:	2076      	movs	r0, #118	@ 0x76
 801a292:	183b      	adds	r3, r7, r0
 801a294:	683a      	ldr	r2, [r7, #0]
 801a296:	8952      	ldrh	r2, [r2, #10]
 801a298:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a29a:	683b      	ldr	r3, [r7, #0]
 801a29c:	6959      	ldr	r1, [r3, #20]
 801a29e:	1d7b      	adds	r3, r7, #5
 801a2a0:	33ff      	adds	r3, #255	@ 0xff
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	b29c      	uxth	r4, r3
 801a2a6:	183b      	adds	r3, r7, r0
 801a2a8:	881a      	ldrh	r2, [r3, #0]
 801a2aa:	6878      	ldr	r0, [r7, #4]
 801a2ac:	0023      	movs	r3, r4
 801a2ae:	f001 f94d 	bl	801b54c <USB_WritePMA>
            ep->xfer_buff += len;
 801a2b2:	683b      	ldr	r3, [r7, #0]
 801a2b4:	695a      	ldr	r2, [r3, #20]
 801a2b6:	1d7b      	adds	r3, r7, #5
 801a2b8:	33ff      	adds	r3, #255	@ 0xff
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	18d2      	adds	r2, r2, r3
 801a2be:	683b      	ldr	r3, [r7, #0]
 801a2c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	6a1a      	ldr	r2, [r3, #32]
 801a2c6:	683b      	ldr	r3, [r7, #0]
 801a2c8:	691b      	ldr	r3, [r3, #16]
 801a2ca:	429a      	cmp	r2, r3
 801a2cc:	d908      	bls.n	801a2e0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	6a1a      	ldr	r2, [r3, #32]
 801a2d2:	1d7b      	adds	r3, r7, #5
 801a2d4:	33ff      	adds	r3, #255	@ 0xff
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	1ad2      	subs	r2, r2, r3
 801a2da:	683b      	ldr	r3, [r7, #0]
 801a2dc:	621a      	str	r2, [r3, #32]
 801a2de:	e007      	b.n	801a2f0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801a2e0:	683b      	ldr	r3, [r7, #0]
 801a2e2:	6a1b      	ldr	r3, [r3, #32]
 801a2e4:	1d7a      	adds	r2, r7, #5
 801a2e6:	32ff      	adds	r2, #255	@ 0xff
 801a2e8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a2ea:	683b      	ldr	r3, [r7, #0]
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a2f0:	683b      	ldr	r3, [r7, #0]
 801a2f2:	785b      	ldrb	r3, [r3, #1]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d000      	beq.n	801a2fa <USB_EPStartXfer+0x292>
 801a2f8:	e070      	b.n	801a3dc <USB_EPStartXfer+0x374>
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	61bb      	str	r3, [r7, #24]
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	2250      	movs	r2, #80	@ 0x50
 801a302:	5a9b      	ldrh	r3, [r3, r2]
 801a304:	b29b      	uxth	r3, r3
 801a306:	001a      	movs	r2, r3
 801a308:	69bb      	ldr	r3, [r7, #24]
 801a30a:	189b      	adds	r3, r3, r2
 801a30c:	61bb      	str	r3, [r7, #24]
 801a30e:	683b      	ldr	r3, [r7, #0]
 801a310:	781b      	ldrb	r3, [r3, #0]
 801a312:	00da      	lsls	r2, r3, #3
 801a314:	69bb      	ldr	r3, [r7, #24]
 801a316:	18d3      	adds	r3, r2, r3
 801a318:	4a48      	ldr	r2, [pc, #288]	@ (801a43c <USB_EPStartXfer+0x3d4>)
 801a31a:	4694      	mov	ip, r2
 801a31c:	4463      	add	r3, ip
 801a31e:	617b      	str	r3, [r7, #20]
 801a320:	697b      	ldr	r3, [r7, #20]
 801a322:	881b      	ldrh	r3, [r3, #0]
 801a324:	b29b      	uxth	r3, r3
 801a326:	059b      	lsls	r3, r3, #22
 801a328:	0d9b      	lsrs	r3, r3, #22
 801a32a:	b29a      	uxth	r2, r3
 801a32c:	697b      	ldr	r3, [r7, #20]
 801a32e:	801a      	strh	r2, [r3, #0]
 801a330:	1d7b      	adds	r3, r7, #5
 801a332:	33ff      	adds	r3, #255	@ 0xff
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	2b3e      	cmp	r3, #62	@ 0x3e
 801a338:	d922      	bls.n	801a380 <USB_EPStartXfer+0x318>
 801a33a:	1d7b      	adds	r3, r7, #5
 801a33c:	33ff      	adds	r3, #255	@ 0xff
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	095b      	lsrs	r3, r3, #5
 801a342:	21fc      	movs	r1, #252	@ 0xfc
 801a344:	187a      	adds	r2, r7, r1
 801a346:	6013      	str	r3, [r2, #0]
 801a348:	1d7b      	adds	r3, r7, #5
 801a34a:	33ff      	adds	r3, #255	@ 0xff
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	221f      	movs	r2, #31
 801a350:	4013      	ands	r3, r2
 801a352:	d104      	bne.n	801a35e <USB_EPStartXfer+0x2f6>
 801a354:	187b      	adds	r3, r7, r1
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	3b01      	subs	r3, #1
 801a35a:	187a      	adds	r2, r7, r1
 801a35c:	6013      	str	r3, [r2, #0]
 801a35e:	697b      	ldr	r3, [r7, #20]
 801a360:	881b      	ldrh	r3, [r3, #0]
 801a362:	b29a      	uxth	r2, r3
 801a364:	23fc      	movs	r3, #252	@ 0xfc
 801a366:	18fb      	adds	r3, r7, r3
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	b29b      	uxth	r3, r3
 801a36c:	029b      	lsls	r3, r3, #10
 801a36e:	b29b      	uxth	r3, r3
 801a370:	4313      	orrs	r3, r2
 801a372:	b29b      	uxth	r3, r3
 801a374:	4a35      	ldr	r2, [pc, #212]	@ (801a44c <USB_EPStartXfer+0x3e4>)
 801a376:	4313      	orrs	r3, r2
 801a378:	b29a      	uxth	r2, r3
 801a37a:	697b      	ldr	r3, [r7, #20]
 801a37c:	801a      	strh	r2, [r3, #0]
 801a37e:	e04a      	b.n	801a416 <USB_EPStartXfer+0x3ae>
 801a380:	1d7b      	adds	r3, r7, #5
 801a382:	33ff      	adds	r3, #255	@ 0xff
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d108      	bne.n	801a39c <USB_EPStartXfer+0x334>
 801a38a:	697b      	ldr	r3, [r7, #20]
 801a38c:	881b      	ldrh	r3, [r3, #0]
 801a38e:	b29b      	uxth	r3, r3
 801a390:	4a2e      	ldr	r2, [pc, #184]	@ (801a44c <USB_EPStartXfer+0x3e4>)
 801a392:	4313      	orrs	r3, r2
 801a394:	b29a      	uxth	r2, r3
 801a396:	697b      	ldr	r3, [r7, #20]
 801a398:	801a      	strh	r2, [r3, #0]
 801a39a:	e03c      	b.n	801a416 <USB_EPStartXfer+0x3ae>
 801a39c:	1d7b      	adds	r3, r7, #5
 801a39e:	33ff      	adds	r3, #255	@ 0xff
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	085b      	lsrs	r3, r3, #1
 801a3a4:	21fc      	movs	r1, #252	@ 0xfc
 801a3a6:	187a      	adds	r2, r7, r1
 801a3a8:	6013      	str	r3, [r2, #0]
 801a3aa:	1d7b      	adds	r3, r7, #5
 801a3ac:	33ff      	adds	r3, #255	@ 0xff
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	2201      	movs	r2, #1
 801a3b2:	4013      	ands	r3, r2
 801a3b4:	d004      	beq.n	801a3c0 <USB_EPStartXfer+0x358>
 801a3b6:	187b      	adds	r3, r7, r1
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	3301      	adds	r3, #1
 801a3bc:	187a      	adds	r2, r7, r1
 801a3be:	6013      	str	r3, [r2, #0]
 801a3c0:	697b      	ldr	r3, [r7, #20]
 801a3c2:	881b      	ldrh	r3, [r3, #0]
 801a3c4:	b29a      	uxth	r2, r3
 801a3c6:	23fc      	movs	r3, #252	@ 0xfc
 801a3c8:	18fb      	adds	r3, r7, r3
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	029b      	lsls	r3, r3, #10
 801a3d0:	b29b      	uxth	r3, r3
 801a3d2:	4313      	orrs	r3, r2
 801a3d4:	b29a      	uxth	r2, r3
 801a3d6:	697b      	ldr	r3, [r7, #20]
 801a3d8:	801a      	strh	r2, [r3, #0]
 801a3da:	e01c      	b.n	801a416 <USB_EPStartXfer+0x3ae>
 801a3dc:	683b      	ldr	r3, [r7, #0]
 801a3de:	785b      	ldrb	r3, [r3, #1]
 801a3e0:	2b01      	cmp	r3, #1
 801a3e2:	d118      	bne.n	801a416 <USB_EPStartXfer+0x3ae>
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	623b      	str	r3, [r7, #32]
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2250      	movs	r2, #80	@ 0x50
 801a3ec:	5a9b      	ldrh	r3, [r3, r2]
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	001a      	movs	r2, r3
 801a3f2:	6a3b      	ldr	r3, [r7, #32]
 801a3f4:	189b      	adds	r3, r3, r2
 801a3f6:	623b      	str	r3, [r7, #32]
 801a3f8:	683b      	ldr	r3, [r7, #0]
 801a3fa:	781b      	ldrb	r3, [r3, #0]
 801a3fc:	00da      	lsls	r2, r3, #3
 801a3fe:	6a3b      	ldr	r3, [r7, #32]
 801a400:	18d3      	adds	r3, r2, r3
 801a402:	4a0e      	ldr	r2, [pc, #56]	@ (801a43c <USB_EPStartXfer+0x3d4>)
 801a404:	4694      	mov	ip, r2
 801a406:	4463      	add	r3, ip
 801a408:	61fb      	str	r3, [r7, #28]
 801a40a:	1d7b      	adds	r3, r7, #5
 801a40c:	33ff      	adds	r3, #255	@ 0xff
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	b29a      	uxth	r2, r3
 801a412:	69fb      	ldr	r3, [r7, #28]
 801a414:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a416:	2076      	movs	r0, #118	@ 0x76
 801a418:	183b      	adds	r3, r7, r0
 801a41a:	683a      	ldr	r2, [r7, #0]
 801a41c:	8912      	ldrh	r2, [r2, #8]
 801a41e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a420:	683b      	ldr	r3, [r7, #0]
 801a422:	6959      	ldr	r1, [r3, #20]
 801a424:	1d7b      	adds	r3, r7, #5
 801a426:	33ff      	adds	r3, #255	@ 0xff
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	b29c      	uxth	r4, r3
 801a42c:	183b      	adds	r3, r7, r0
 801a42e:	881a      	ldrh	r2, [r3, #0]
 801a430:	6878      	ldr	r0, [r7, #4]
 801a432:	0023      	movs	r3, r4
 801a434:	f001 f88a 	bl	801b54c <USB_WritePMA>
 801a438:	e329      	b.n	801aa8e <USB_EPStartXfer+0xa26>
 801a43a:	46c0      	nop			@ (mov r8, r8)
 801a43c:	00000402 	.word	0x00000402
 801a440:	ffff8f8f 	.word	0xffff8f8f
 801a444:	ffff8180 	.word	0xffff8180
 801a448:	00000406 	.word	0x00000406
 801a44c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a450:	683b      	ldr	r3, [r7, #0]
 801a452:	785b      	ldrb	r3, [r3, #1]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d000      	beq.n	801a45a <USB_EPStartXfer+0x3f2>
 801a458:	e070      	b.n	801a53c <USB_EPStartXfer+0x4d4>
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	2250      	movs	r2, #80	@ 0x50
 801a462:	5a9b      	ldrh	r3, [r3, r2]
 801a464:	b29b      	uxth	r3, r3
 801a466:	001a      	movs	r2, r3
 801a468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a46a:	189b      	adds	r3, r3, r2
 801a46c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a46e:	683b      	ldr	r3, [r7, #0]
 801a470:	781b      	ldrb	r3, [r3, #0]
 801a472:	00da      	lsls	r2, r3, #3
 801a474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a476:	18d3      	adds	r3, r2, r3
 801a478:	4acd      	ldr	r2, [pc, #820]	@ (801a7b0 <USB_EPStartXfer+0x748>)
 801a47a:	4694      	mov	ip, r2
 801a47c:	4463      	add	r3, ip
 801a47e:	647b      	str	r3, [r7, #68]	@ 0x44
 801a480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a482:	881b      	ldrh	r3, [r3, #0]
 801a484:	b29b      	uxth	r3, r3
 801a486:	059b      	lsls	r3, r3, #22
 801a488:	0d9b      	lsrs	r3, r3, #22
 801a48a:	b29a      	uxth	r2, r3
 801a48c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a48e:	801a      	strh	r2, [r3, #0]
 801a490:	1d7b      	adds	r3, r7, #5
 801a492:	33ff      	adds	r3, #255	@ 0xff
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	2b3e      	cmp	r3, #62	@ 0x3e
 801a498:	d922      	bls.n	801a4e0 <USB_EPStartXfer+0x478>
 801a49a:	1d7b      	adds	r3, r7, #5
 801a49c:	33ff      	adds	r3, #255	@ 0xff
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	095b      	lsrs	r3, r3, #5
 801a4a2:	21f8      	movs	r1, #248	@ 0xf8
 801a4a4:	187a      	adds	r2, r7, r1
 801a4a6:	6013      	str	r3, [r2, #0]
 801a4a8:	1d7b      	adds	r3, r7, #5
 801a4aa:	33ff      	adds	r3, #255	@ 0xff
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	221f      	movs	r2, #31
 801a4b0:	4013      	ands	r3, r2
 801a4b2:	d104      	bne.n	801a4be <USB_EPStartXfer+0x456>
 801a4b4:	187b      	adds	r3, r7, r1
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	3b01      	subs	r3, #1
 801a4ba:	187a      	adds	r2, r7, r1
 801a4bc:	6013      	str	r3, [r2, #0]
 801a4be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a4c0:	881b      	ldrh	r3, [r3, #0]
 801a4c2:	b29a      	uxth	r2, r3
 801a4c4:	23f8      	movs	r3, #248	@ 0xf8
 801a4c6:	18fb      	adds	r3, r7, r3
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	b29b      	uxth	r3, r3
 801a4cc:	029b      	lsls	r3, r3, #10
 801a4ce:	b29b      	uxth	r3, r3
 801a4d0:	4313      	orrs	r3, r2
 801a4d2:	b29b      	uxth	r3, r3
 801a4d4:	4ab7      	ldr	r2, [pc, #732]	@ (801a7b4 <USB_EPStartXfer+0x74c>)
 801a4d6:	4313      	orrs	r3, r2
 801a4d8:	b29a      	uxth	r2, r3
 801a4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a4dc:	801a      	strh	r2, [r3, #0]
 801a4de:	e04a      	b.n	801a576 <USB_EPStartXfer+0x50e>
 801a4e0:	1d7b      	adds	r3, r7, #5
 801a4e2:	33ff      	adds	r3, #255	@ 0xff
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d108      	bne.n	801a4fc <USB_EPStartXfer+0x494>
 801a4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a4ec:	881b      	ldrh	r3, [r3, #0]
 801a4ee:	b29b      	uxth	r3, r3
 801a4f0:	4ab0      	ldr	r2, [pc, #704]	@ (801a7b4 <USB_EPStartXfer+0x74c>)
 801a4f2:	4313      	orrs	r3, r2
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a4f8:	801a      	strh	r2, [r3, #0]
 801a4fa:	e03c      	b.n	801a576 <USB_EPStartXfer+0x50e>
 801a4fc:	1d7b      	adds	r3, r7, #5
 801a4fe:	33ff      	adds	r3, #255	@ 0xff
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	085b      	lsrs	r3, r3, #1
 801a504:	21f8      	movs	r1, #248	@ 0xf8
 801a506:	187a      	adds	r2, r7, r1
 801a508:	6013      	str	r3, [r2, #0]
 801a50a:	1d7b      	adds	r3, r7, #5
 801a50c:	33ff      	adds	r3, #255	@ 0xff
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	2201      	movs	r2, #1
 801a512:	4013      	ands	r3, r2
 801a514:	d004      	beq.n	801a520 <USB_EPStartXfer+0x4b8>
 801a516:	187b      	adds	r3, r7, r1
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	3301      	adds	r3, #1
 801a51c:	187a      	adds	r2, r7, r1
 801a51e:	6013      	str	r3, [r2, #0]
 801a520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a522:	881b      	ldrh	r3, [r3, #0]
 801a524:	b29a      	uxth	r2, r3
 801a526:	23f8      	movs	r3, #248	@ 0xf8
 801a528:	18fb      	adds	r3, r7, r3
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	b29b      	uxth	r3, r3
 801a52e:	029b      	lsls	r3, r3, #10
 801a530:	b29b      	uxth	r3, r3
 801a532:	4313      	orrs	r3, r2
 801a534:	b29a      	uxth	r2, r3
 801a536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a538:	801a      	strh	r2, [r3, #0]
 801a53a:	e01c      	b.n	801a576 <USB_EPStartXfer+0x50e>
 801a53c:	683b      	ldr	r3, [r7, #0]
 801a53e:	785b      	ldrb	r3, [r3, #1]
 801a540:	2b01      	cmp	r3, #1
 801a542:	d118      	bne.n	801a576 <USB_EPStartXfer+0x50e>
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	653b      	str	r3, [r7, #80]	@ 0x50
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	2250      	movs	r2, #80	@ 0x50
 801a54c:	5a9b      	ldrh	r3, [r3, r2]
 801a54e:	b29b      	uxth	r3, r3
 801a550:	001a      	movs	r2, r3
 801a552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a554:	189b      	adds	r3, r3, r2
 801a556:	653b      	str	r3, [r7, #80]	@ 0x50
 801a558:	683b      	ldr	r3, [r7, #0]
 801a55a:	781b      	ldrb	r3, [r3, #0]
 801a55c:	00da      	lsls	r2, r3, #3
 801a55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a560:	18d3      	adds	r3, r2, r3
 801a562:	4a93      	ldr	r2, [pc, #588]	@ (801a7b0 <USB_EPStartXfer+0x748>)
 801a564:	4694      	mov	ip, r2
 801a566:	4463      	add	r3, ip
 801a568:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a56a:	1d7b      	adds	r3, r7, #5
 801a56c:	33ff      	adds	r3, #255	@ 0xff
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	b29a      	uxth	r2, r3
 801a572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a574:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a576:	2076      	movs	r0, #118	@ 0x76
 801a578:	183b      	adds	r3, r7, r0
 801a57a:	683a      	ldr	r2, [r7, #0]
 801a57c:	8912      	ldrh	r2, [r2, #8]
 801a57e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a580:	683b      	ldr	r3, [r7, #0]
 801a582:	6959      	ldr	r1, [r3, #20]
 801a584:	1d7b      	adds	r3, r7, #5
 801a586:	33ff      	adds	r3, #255	@ 0xff
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	b29c      	uxth	r4, r3
 801a58c:	183b      	adds	r3, r7, r0
 801a58e:	881a      	ldrh	r2, [r3, #0]
 801a590:	6878      	ldr	r0, [r7, #4]
 801a592:	0023      	movs	r3, r4
 801a594:	f000 ffda 	bl	801b54c <USB_WritePMA>
            ep->xfer_buff += len;
 801a598:	683b      	ldr	r3, [r7, #0]
 801a59a:	695a      	ldr	r2, [r3, #20]
 801a59c:	1d7b      	adds	r3, r7, #5
 801a59e:	33ff      	adds	r3, #255	@ 0xff
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	18d2      	adds	r2, r2, r3
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	6a1a      	ldr	r2, [r3, #32]
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	691b      	ldr	r3, [r3, #16]
 801a5b0:	429a      	cmp	r2, r3
 801a5b2:	d908      	bls.n	801a5c6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	6a1a      	ldr	r2, [r3, #32]
 801a5b8:	1d7b      	adds	r3, r7, #5
 801a5ba:	33ff      	adds	r3, #255	@ 0xff
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	1ad2      	subs	r2, r2, r3
 801a5c0:	683b      	ldr	r3, [r7, #0]
 801a5c2:	621a      	str	r2, [r3, #32]
 801a5c4:	e007      	b.n	801a5d6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a5c6:	683b      	ldr	r3, [r7, #0]
 801a5c8:	6a1b      	ldr	r3, [r3, #32]
 801a5ca:	1d7a      	adds	r2, r7, #5
 801a5cc:	32ff      	adds	r2, #255	@ 0xff
 801a5ce:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a5d0:	683b      	ldr	r3, [r7, #0]
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	643b      	str	r3, [r7, #64]	@ 0x40
 801a5da:	683b      	ldr	r3, [r7, #0]
 801a5dc:	785b      	ldrb	r3, [r3, #1]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d000      	beq.n	801a5e4 <USB_EPStartXfer+0x57c>
 801a5e2:	e070      	b.n	801a6c6 <USB_EPStartXfer+0x65e>
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	2250      	movs	r2, #80	@ 0x50
 801a5ec:	5a9b      	ldrh	r3, [r3, r2]
 801a5ee:	b29b      	uxth	r3, r3
 801a5f0:	001a      	movs	r2, r3
 801a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a5f4:	189b      	adds	r3, r3, r2
 801a5f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	781b      	ldrb	r3, [r3, #0]
 801a5fc:	00da      	lsls	r2, r3, #3
 801a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a600:	18d3      	adds	r3, r2, r3
 801a602:	4a6d      	ldr	r2, [pc, #436]	@ (801a7b8 <USB_EPStartXfer+0x750>)
 801a604:	4694      	mov	ip, r2
 801a606:	4463      	add	r3, ip
 801a608:	637b      	str	r3, [r7, #52]	@ 0x34
 801a60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a60c:	881b      	ldrh	r3, [r3, #0]
 801a60e:	b29b      	uxth	r3, r3
 801a610:	059b      	lsls	r3, r3, #22
 801a612:	0d9b      	lsrs	r3, r3, #22
 801a614:	b29a      	uxth	r2, r3
 801a616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a618:	801a      	strh	r2, [r3, #0]
 801a61a:	1d7b      	adds	r3, r7, #5
 801a61c:	33ff      	adds	r3, #255	@ 0xff
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	2b3e      	cmp	r3, #62	@ 0x3e
 801a622:	d922      	bls.n	801a66a <USB_EPStartXfer+0x602>
 801a624:	1d7b      	adds	r3, r7, #5
 801a626:	33ff      	adds	r3, #255	@ 0xff
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	095b      	lsrs	r3, r3, #5
 801a62c:	21f4      	movs	r1, #244	@ 0xf4
 801a62e:	187a      	adds	r2, r7, r1
 801a630:	6013      	str	r3, [r2, #0]
 801a632:	1d7b      	adds	r3, r7, #5
 801a634:	33ff      	adds	r3, #255	@ 0xff
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	221f      	movs	r2, #31
 801a63a:	4013      	ands	r3, r2
 801a63c:	d104      	bne.n	801a648 <USB_EPStartXfer+0x5e0>
 801a63e:	187b      	adds	r3, r7, r1
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	3b01      	subs	r3, #1
 801a644:	187a      	adds	r2, r7, r1
 801a646:	6013      	str	r3, [r2, #0]
 801a648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a64a:	881b      	ldrh	r3, [r3, #0]
 801a64c:	b29a      	uxth	r2, r3
 801a64e:	23f4      	movs	r3, #244	@ 0xf4
 801a650:	18fb      	adds	r3, r7, r3
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	b29b      	uxth	r3, r3
 801a656:	029b      	lsls	r3, r3, #10
 801a658:	b29b      	uxth	r3, r3
 801a65a:	4313      	orrs	r3, r2
 801a65c:	b29b      	uxth	r3, r3
 801a65e:	4a55      	ldr	r2, [pc, #340]	@ (801a7b4 <USB_EPStartXfer+0x74c>)
 801a660:	4313      	orrs	r3, r2
 801a662:	b29a      	uxth	r2, r3
 801a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a666:	801a      	strh	r2, [r3, #0]
 801a668:	e048      	b.n	801a6fc <USB_EPStartXfer+0x694>
 801a66a:	1d7b      	adds	r3, r7, #5
 801a66c:	33ff      	adds	r3, #255	@ 0xff
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	2b00      	cmp	r3, #0
 801a672:	d108      	bne.n	801a686 <USB_EPStartXfer+0x61e>
 801a674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a676:	881b      	ldrh	r3, [r3, #0]
 801a678:	b29b      	uxth	r3, r3
 801a67a:	4a4e      	ldr	r2, [pc, #312]	@ (801a7b4 <USB_EPStartXfer+0x74c>)
 801a67c:	4313      	orrs	r3, r2
 801a67e:	b29a      	uxth	r2, r3
 801a680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a682:	801a      	strh	r2, [r3, #0]
 801a684:	e03a      	b.n	801a6fc <USB_EPStartXfer+0x694>
 801a686:	1d7b      	adds	r3, r7, #5
 801a688:	33ff      	adds	r3, #255	@ 0xff
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	085b      	lsrs	r3, r3, #1
 801a68e:	21f4      	movs	r1, #244	@ 0xf4
 801a690:	187a      	adds	r2, r7, r1
 801a692:	6013      	str	r3, [r2, #0]
 801a694:	1d7b      	adds	r3, r7, #5
 801a696:	33ff      	adds	r3, #255	@ 0xff
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	2201      	movs	r2, #1
 801a69c:	4013      	ands	r3, r2
 801a69e:	d004      	beq.n	801a6aa <USB_EPStartXfer+0x642>
 801a6a0:	187b      	adds	r3, r7, r1
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	3301      	adds	r3, #1
 801a6a6:	187a      	adds	r2, r7, r1
 801a6a8:	6013      	str	r3, [r2, #0]
 801a6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6ac:	881b      	ldrh	r3, [r3, #0]
 801a6ae:	b29a      	uxth	r2, r3
 801a6b0:	23f4      	movs	r3, #244	@ 0xf4
 801a6b2:	18fb      	adds	r3, r7, r3
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	b29b      	uxth	r3, r3
 801a6b8:	029b      	lsls	r3, r3, #10
 801a6ba:	b29b      	uxth	r3, r3
 801a6bc:	4313      	orrs	r3, r2
 801a6be:	b29a      	uxth	r2, r3
 801a6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6c2:	801a      	strh	r2, [r3, #0]
 801a6c4:	e01a      	b.n	801a6fc <USB_EPStartXfer+0x694>
 801a6c6:	683b      	ldr	r3, [r7, #0]
 801a6c8:	785b      	ldrb	r3, [r3, #1]
 801a6ca:	2b01      	cmp	r3, #1
 801a6cc:	d116      	bne.n	801a6fc <USB_EPStartXfer+0x694>
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	2250      	movs	r2, #80	@ 0x50
 801a6d2:	5a9b      	ldrh	r3, [r3, r2]
 801a6d4:	b29b      	uxth	r3, r3
 801a6d6:	001a      	movs	r2, r3
 801a6d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6da:	189b      	adds	r3, r3, r2
 801a6dc:	643b      	str	r3, [r7, #64]	@ 0x40
 801a6de:	683b      	ldr	r3, [r7, #0]
 801a6e0:	781b      	ldrb	r3, [r3, #0]
 801a6e2:	00da      	lsls	r2, r3, #3
 801a6e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6e6:	18d3      	adds	r3, r2, r3
 801a6e8:	4a33      	ldr	r2, [pc, #204]	@ (801a7b8 <USB_EPStartXfer+0x750>)
 801a6ea:	4694      	mov	ip, r2
 801a6ec:	4463      	add	r3, ip
 801a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a6f0:	1d7b      	adds	r3, r7, #5
 801a6f2:	33ff      	adds	r3, #255	@ 0xff
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	b29a      	uxth	r2, r3
 801a6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a6fc:	2076      	movs	r0, #118	@ 0x76
 801a6fe:	183b      	adds	r3, r7, r0
 801a700:	683a      	ldr	r2, [r7, #0]
 801a702:	8952      	ldrh	r2, [r2, #10]
 801a704:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a706:	683b      	ldr	r3, [r7, #0]
 801a708:	6959      	ldr	r1, [r3, #20]
 801a70a:	1d7b      	adds	r3, r7, #5
 801a70c:	33ff      	adds	r3, #255	@ 0xff
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	b29c      	uxth	r4, r3
 801a712:	183b      	adds	r3, r7, r0
 801a714:	881a      	ldrh	r2, [r3, #0]
 801a716:	6878      	ldr	r0, [r7, #4]
 801a718:	0023      	movs	r3, r4
 801a71a:	f000 ff17 	bl	801b54c <USB_WritePMA>
 801a71e:	e1b6      	b.n	801aa8e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a720:	683b      	ldr	r3, [r7, #0]
 801a722:	6a1b      	ldr	r3, [r3, #32]
 801a724:	1d7a      	adds	r2, r7, #5
 801a726:	32ff      	adds	r2, #255	@ 0xff
 801a728:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a72a:	687a      	ldr	r2, [r7, #4]
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	781b      	ldrb	r3, [r3, #0]
 801a730:	009b      	lsls	r3, r3, #2
 801a732:	18d3      	adds	r3, r2, r3
 801a734:	881b      	ldrh	r3, [r3, #0]
 801a736:	b29a      	uxth	r2, r3
 801a738:	2062      	movs	r0, #98	@ 0x62
 801a73a:	183b      	adds	r3, r7, r0
 801a73c:	491f      	ldr	r1, [pc, #124]	@ (801a7bc <USB_EPStartXfer+0x754>)
 801a73e:	400a      	ands	r2, r1
 801a740:	801a      	strh	r2, [r3, #0]
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	683b      	ldr	r3, [r7, #0]
 801a746:	781b      	ldrb	r3, [r3, #0]
 801a748:	009b      	lsls	r3, r3, #2
 801a74a:	18d3      	adds	r3, r2, r3
 801a74c:	183a      	adds	r2, r7, r0
 801a74e:	8812      	ldrh	r2, [r2, #0]
 801a750:	491b      	ldr	r1, [pc, #108]	@ (801a7c0 <USB_EPStartXfer+0x758>)
 801a752:	430a      	orrs	r2, r1
 801a754:	b292      	uxth	r2, r2
 801a756:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	2250      	movs	r2, #80	@ 0x50
 801a760:	5a9b      	ldrh	r3, [r3, r2]
 801a762:	b29b      	uxth	r3, r3
 801a764:	001a      	movs	r2, r3
 801a766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a768:	189b      	adds	r3, r3, r2
 801a76a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a76c:	683b      	ldr	r3, [r7, #0]
 801a76e:	781b      	ldrb	r3, [r3, #0]
 801a770:	00da      	lsls	r2, r3, #3
 801a772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a774:	18d3      	adds	r3, r2, r3
 801a776:	4a0e      	ldr	r2, [pc, #56]	@ (801a7b0 <USB_EPStartXfer+0x748>)
 801a778:	4694      	mov	ip, r2
 801a77a:	4463      	add	r3, ip
 801a77c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a77e:	1d7b      	adds	r3, r7, #5
 801a780:	33ff      	adds	r3, #255	@ 0xff
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	b29a      	uxth	r2, r3
 801a786:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a788:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a78a:	2076      	movs	r0, #118	@ 0x76
 801a78c:	183b      	adds	r3, r7, r0
 801a78e:	683a      	ldr	r2, [r7, #0]
 801a790:	8912      	ldrh	r2, [r2, #8]
 801a792:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	6959      	ldr	r1, [r3, #20]
 801a798:	1d7b      	adds	r3, r7, #5
 801a79a:	33ff      	adds	r3, #255	@ 0xff
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	b29c      	uxth	r4, r3
 801a7a0:	183b      	adds	r3, r7, r0
 801a7a2:	881a      	ldrh	r2, [r3, #0]
 801a7a4:	6878      	ldr	r0, [r7, #4]
 801a7a6:	0023      	movs	r3, r4
 801a7a8:	f000 fed0 	bl	801b54c <USB_WritePMA>
 801a7ac:	e16f      	b.n	801aa8e <USB_EPStartXfer+0xa26>
 801a7ae:	46c0      	nop			@ (mov r8, r8)
 801a7b0:	00000402 	.word	0x00000402
 801a7b4:	ffff8000 	.word	0xffff8000
 801a7b8:	00000406 	.word	0x00000406
 801a7bc:	ffff8e8f 	.word	0xffff8e8f
 801a7c0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a7c4:	683b      	ldr	r3, [r7, #0]
 801a7c6:	6a1a      	ldr	r2, [r3, #32]
 801a7c8:	1d7b      	adds	r3, r7, #5
 801a7ca:	33ff      	adds	r3, #255	@ 0xff
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	1ad2      	subs	r2, r2, r3
 801a7d0:	683b      	ldr	r3, [r7, #0]
 801a7d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a7d4:	687a      	ldr	r2, [r7, #4]
 801a7d6:	683b      	ldr	r3, [r7, #0]
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	009b      	lsls	r3, r3, #2
 801a7dc:	18d3      	adds	r3, r2, r3
 801a7de:	881b      	ldrh	r3, [r3, #0]
 801a7e0:	b29b      	uxth	r3, r3
 801a7e2:	001a      	movs	r2, r3
 801a7e4:	2340      	movs	r3, #64	@ 0x40
 801a7e6:	4013      	ands	r3, r2
 801a7e8:	d100      	bne.n	801a7ec <USB_EPStartXfer+0x784>
 801a7ea:	e0a4      	b.n	801a936 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	673b      	str	r3, [r7, #112]	@ 0x70
 801a7f0:	683b      	ldr	r3, [r7, #0]
 801a7f2:	785b      	ldrb	r3, [r3, #1]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d000      	beq.n	801a7fa <USB_EPStartXfer+0x792>
 801a7f8:	e070      	b.n	801a8dc <USB_EPStartXfer+0x874>
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	2250      	movs	r2, #80	@ 0x50
 801a802:	5a9b      	ldrh	r3, [r3, r2]
 801a804:	b29b      	uxth	r3, r3
 801a806:	001a      	movs	r2, r3
 801a808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a80a:	189b      	adds	r3, r3, r2
 801a80c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	781b      	ldrb	r3, [r3, #0]
 801a812:	00da      	lsls	r2, r3, #3
 801a814:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a816:	18d3      	adds	r3, r2, r3
 801a818:	4abc      	ldr	r2, [pc, #752]	@ (801ab0c <USB_EPStartXfer+0xaa4>)
 801a81a:	4694      	mov	ip, r2
 801a81c:	4463      	add	r3, ip
 801a81e:	667b      	str	r3, [r7, #100]	@ 0x64
 801a820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a822:	881b      	ldrh	r3, [r3, #0]
 801a824:	b29b      	uxth	r3, r3
 801a826:	059b      	lsls	r3, r3, #22
 801a828:	0d9b      	lsrs	r3, r3, #22
 801a82a:	b29a      	uxth	r2, r3
 801a82c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a82e:	801a      	strh	r2, [r3, #0]
 801a830:	1d7b      	adds	r3, r7, #5
 801a832:	33ff      	adds	r3, #255	@ 0xff
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	2b3e      	cmp	r3, #62	@ 0x3e
 801a838:	d922      	bls.n	801a880 <USB_EPStartXfer+0x818>
 801a83a:	1d7b      	adds	r3, r7, #5
 801a83c:	33ff      	adds	r3, #255	@ 0xff
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	095b      	lsrs	r3, r3, #5
 801a842:	21f0      	movs	r1, #240	@ 0xf0
 801a844:	187a      	adds	r2, r7, r1
 801a846:	6013      	str	r3, [r2, #0]
 801a848:	1d7b      	adds	r3, r7, #5
 801a84a:	33ff      	adds	r3, #255	@ 0xff
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	221f      	movs	r2, #31
 801a850:	4013      	ands	r3, r2
 801a852:	d104      	bne.n	801a85e <USB_EPStartXfer+0x7f6>
 801a854:	187b      	adds	r3, r7, r1
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	3b01      	subs	r3, #1
 801a85a:	187a      	adds	r2, r7, r1
 801a85c:	6013      	str	r3, [r2, #0]
 801a85e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a860:	881b      	ldrh	r3, [r3, #0]
 801a862:	b29a      	uxth	r2, r3
 801a864:	23f0      	movs	r3, #240	@ 0xf0
 801a866:	18fb      	adds	r3, r7, r3
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	029b      	lsls	r3, r3, #10
 801a86e:	b29b      	uxth	r3, r3
 801a870:	4313      	orrs	r3, r2
 801a872:	b29b      	uxth	r3, r3
 801a874:	4aa6      	ldr	r2, [pc, #664]	@ (801ab10 <USB_EPStartXfer+0xaa8>)
 801a876:	4313      	orrs	r3, r2
 801a878:	b29a      	uxth	r2, r3
 801a87a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a87c:	801a      	strh	r2, [r3, #0]
 801a87e:	e048      	b.n	801a912 <USB_EPStartXfer+0x8aa>
 801a880:	1d7b      	adds	r3, r7, #5
 801a882:	33ff      	adds	r3, #255	@ 0xff
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d108      	bne.n	801a89c <USB_EPStartXfer+0x834>
 801a88a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a88c:	881b      	ldrh	r3, [r3, #0]
 801a88e:	b29b      	uxth	r3, r3
 801a890:	4a9f      	ldr	r2, [pc, #636]	@ (801ab10 <USB_EPStartXfer+0xaa8>)
 801a892:	4313      	orrs	r3, r2
 801a894:	b29a      	uxth	r2, r3
 801a896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a898:	801a      	strh	r2, [r3, #0]
 801a89a:	e03a      	b.n	801a912 <USB_EPStartXfer+0x8aa>
 801a89c:	1d7b      	adds	r3, r7, #5
 801a89e:	33ff      	adds	r3, #255	@ 0xff
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	085b      	lsrs	r3, r3, #1
 801a8a4:	21f0      	movs	r1, #240	@ 0xf0
 801a8a6:	187a      	adds	r2, r7, r1
 801a8a8:	6013      	str	r3, [r2, #0]
 801a8aa:	1d7b      	adds	r3, r7, #5
 801a8ac:	33ff      	adds	r3, #255	@ 0xff
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	2201      	movs	r2, #1
 801a8b2:	4013      	ands	r3, r2
 801a8b4:	d004      	beq.n	801a8c0 <USB_EPStartXfer+0x858>
 801a8b6:	187b      	adds	r3, r7, r1
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	3301      	adds	r3, #1
 801a8bc:	187a      	adds	r2, r7, r1
 801a8be:	6013      	str	r3, [r2, #0]
 801a8c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a8c2:	881b      	ldrh	r3, [r3, #0]
 801a8c4:	b29a      	uxth	r2, r3
 801a8c6:	23f0      	movs	r3, #240	@ 0xf0
 801a8c8:	18fb      	adds	r3, r7, r3
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	b29b      	uxth	r3, r3
 801a8ce:	029b      	lsls	r3, r3, #10
 801a8d0:	b29b      	uxth	r3, r3
 801a8d2:	4313      	orrs	r3, r2
 801a8d4:	b29a      	uxth	r2, r3
 801a8d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a8d8:	801a      	strh	r2, [r3, #0]
 801a8da:	e01a      	b.n	801a912 <USB_EPStartXfer+0x8aa>
 801a8dc:	683b      	ldr	r3, [r7, #0]
 801a8de:	785b      	ldrb	r3, [r3, #1]
 801a8e0:	2b01      	cmp	r3, #1
 801a8e2:	d116      	bne.n	801a912 <USB_EPStartXfer+0x8aa>
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	2250      	movs	r2, #80	@ 0x50
 801a8e8:	5a9b      	ldrh	r3, [r3, r2]
 801a8ea:	b29b      	uxth	r3, r3
 801a8ec:	001a      	movs	r2, r3
 801a8ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a8f0:	189b      	adds	r3, r3, r2
 801a8f2:	673b      	str	r3, [r7, #112]	@ 0x70
 801a8f4:	683b      	ldr	r3, [r7, #0]
 801a8f6:	781b      	ldrb	r3, [r3, #0]
 801a8f8:	00da      	lsls	r2, r3, #3
 801a8fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a8fc:	18d3      	adds	r3, r2, r3
 801a8fe:	4a83      	ldr	r2, [pc, #524]	@ (801ab0c <USB_EPStartXfer+0xaa4>)
 801a900:	4694      	mov	ip, r2
 801a902:	4463      	add	r3, ip
 801a904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a906:	1d7b      	adds	r3, r7, #5
 801a908:	33ff      	adds	r3, #255	@ 0xff
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	b29a      	uxth	r2, r3
 801a90e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a910:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a912:	2076      	movs	r0, #118	@ 0x76
 801a914:	183b      	adds	r3, r7, r0
 801a916:	683a      	ldr	r2, [r7, #0]
 801a918:	8952      	ldrh	r2, [r2, #10]
 801a91a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a91c:	683b      	ldr	r3, [r7, #0]
 801a91e:	6959      	ldr	r1, [r3, #20]
 801a920:	1d7b      	adds	r3, r7, #5
 801a922:	33ff      	adds	r3, #255	@ 0xff
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	b29c      	uxth	r4, r3
 801a928:	183b      	adds	r3, r7, r0
 801a92a:	881a      	ldrh	r2, [r3, #0]
 801a92c:	6878      	ldr	r0, [r7, #4]
 801a92e:	0023      	movs	r3, r4
 801a930:	f000 fe0c 	bl	801b54c <USB_WritePMA>
 801a934:	e0ab      	b.n	801aa8e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a936:	683b      	ldr	r3, [r7, #0]
 801a938:	785b      	ldrb	r3, [r3, #1]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d000      	beq.n	801a940 <USB_EPStartXfer+0x8d8>
 801a93e:	e070      	b.n	801aa22 <USB_EPStartXfer+0x9ba>
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	2250      	movs	r2, #80	@ 0x50
 801a948:	5a9b      	ldrh	r3, [r3, r2]
 801a94a:	b29b      	uxth	r3, r3
 801a94c:	001a      	movs	r2, r3
 801a94e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a950:	189b      	adds	r3, r3, r2
 801a952:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a954:	683b      	ldr	r3, [r7, #0]
 801a956:	781b      	ldrb	r3, [r3, #0]
 801a958:	00da      	lsls	r2, r3, #3
 801a95a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a95c:	18d3      	adds	r3, r2, r3
 801a95e:	4a6d      	ldr	r2, [pc, #436]	@ (801ab14 <USB_EPStartXfer+0xaac>)
 801a960:	4694      	mov	ip, r2
 801a962:	4463      	add	r3, ip
 801a964:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a968:	881b      	ldrh	r3, [r3, #0]
 801a96a:	b29b      	uxth	r3, r3
 801a96c:	059b      	lsls	r3, r3, #22
 801a96e:	0d9b      	lsrs	r3, r3, #22
 801a970:	b29a      	uxth	r2, r3
 801a972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a974:	801a      	strh	r2, [r3, #0]
 801a976:	1d7b      	adds	r3, r7, #5
 801a978:	33ff      	adds	r3, #255	@ 0xff
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	2b3e      	cmp	r3, #62	@ 0x3e
 801a97e:	d922      	bls.n	801a9c6 <USB_EPStartXfer+0x95e>
 801a980:	1d7b      	adds	r3, r7, #5
 801a982:	33ff      	adds	r3, #255	@ 0xff
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	095b      	lsrs	r3, r3, #5
 801a988:	21ec      	movs	r1, #236	@ 0xec
 801a98a:	187a      	adds	r2, r7, r1
 801a98c:	6013      	str	r3, [r2, #0]
 801a98e:	1d7b      	adds	r3, r7, #5
 801a990:	33ff      	adds	r3, #255	@ 0xff
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	221f      	movs	r2, #31
 801a996:	4013      	ands	r3, r2
 801a998:	d104      	bne.n	801a9a4 <USB_EPStartXfer+0x93c>
 801a99a:	187b      	adds	r3, r7, r1
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	3b01      	subs	r3, #1
 801a9a0:	187a      	adds	r2, r7, r1
 801a9a2:	6013      	str	r3, [r2, #0]
 801a9a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a9a6:	881b      	ldrh	r3, [r3, #0]
 801a9a8:	b29a      	uxth	r2, r3
 801a9aa:	23ec      	movs	r3, #236	@ 0xec
 801a9ac:	18fb      	adds	r3, r7, r3
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	b29b      	uxth	r3, r3
 801a9b2:	029b      	lsls	r3, r3, #10
 801a9b4:	b29b      	uxth	r3, r3
 801a9b6:	4313      	orrs	r3, r2
 801a9b8:	b29b      	uxth	r3, r3
 801a9ba:	4a55      	ldr	r2, [pc, #340]	@ (801ab10 <USB_EPStartXfer+0xaa8>)
 801a9bc:	4313      	orrs	r3, r2
 801a9be:	b29a      	uxth	r2, r3
 801a9c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a9c2:	801a      	strh	r2, [r3, #0]
 801a9c4:	e052      	b.n	801aa6c <USB_EPStartXfer+0xa04>
 801a9c6:	1d7b      	adds	r3, r7, #5
 801a9c8:	33ff      	adds	r3, #255	@ 0xff
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d108      	bne.n	801a9e2 <USB_EPStartXfer+0x97a>
 801a9d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a9d2:	881b      	ldrh	r3, [r3, #0]
 801a9d4:	b29b      	uxth	r3, r3
 801a9d6:	4a4e      	ldr	r2, [pc, #312]	@ (801ab10 <USB_EPStartXfer+0xaa8>)
 801a9d8:	4313      	orrs	r3, r2
 801a9da:	b29a      	uxth	r2, r3
 801a9dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a9de:	801a      	strh	r2, [r3, #0]
 801a9e0:	e044      	b.n	801aa6c <USB_EPStartXfer+0xa04>
 801a9e2:	1d7b      	adds	r3, r7, #5
 801a9e4:	33ff      	adds	r3, #255	@ 0xff
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	085b      	lsrs	r3, r3, #1
 801a9ea:	21ec      	movs	r1, #236	@ 0xec
 801a9ec:	187a      	adds	r2, r7, r1
 801a9ee:	6013      	str	r3, [r2, #0]
 801a9f0:	1d7b      	adds	r3, r7, #5
 801a9f2:	33ff      	adds	r3, #255	@ 0xff
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	2201      	movs	r2, #1
 801a9f8:	4013      	ands	r3, r2
 801a9fa:	d004      	beq.n	801aa06 <USB_EPStartXfer+0x99e>
 801a9fc:	187b      	adds	r3, r7, r1
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	3301      	adds	r3, #1
 801aa02:	187a      	adds	r2, r7, r1
 801aa04:	6013      	str	r3, [r2, #0]
 801aa06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aa08:	881b      	ldrh	r3, [r3, #0]
 801aa0a:	b29a      	uxth	r2, r3
 801aa0c:	23ec      	movs	r3, #236	@ 0xec
 801aa0e:	18fb      	adds	r3, r7, r3
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	b29b      	uxth	r3, r3
 801aa14:	029b      	lsls	r3, r3, #10
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	4313      	orrs	r3, r2
 801aa1a:	b29a      	uxth	r2, r3
 801aa1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aa1e:	801a      	strh	r2, [r3, #0]
 801aa20:	e024      	b.n	801aa6c <USB_EPStartXfer+0xa04>
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	785b      	ldrb	r3, [r3, #1]
 801aa26:	2b01      	cmp	r3, #1
 801aa28:	d120      	bne.n	801aa6c <USB_EPStartXfer+0xa04>
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	2184      	movs	r1, #132	@ 0x84
 801aa2e:	187a      	adds	r2, r7, r1
 801aa30:	6013      	str	r3, [r2, #0]
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	2250      	movs	r2, #80	@ 0x50
 801aa36:	5a9b      	ldrh	r3, [r3, r2]
 801aa38:	b29b      	uxth	r3, r3
 801aa3a:	001a      	movs	r2, r3
 801aa3c:	187b      	adds	r3, r7, r1
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	189b      	adds	r3, r3, r2
 801aa42:	187a      	adds	r2, r7, r1
 801aa44:	6013      	str	r3, [r2, #0]
 801aa46:	683b      	ldr	r3, [r7, #0]
 801aa48:	781b      	ldrb	r3, [r3, #0]
 801aa4a:	00da      	lsls	r2, r3, #3
 801aa4c:	187b      	adds	r3, r7, r1
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	18d3      	adds	r3, r2, r3
 801aa52:	4a30      	ldr	r2, [pc, #192]	@ (801ab14 <USB_EPStartXfer+0xaac>)
 801aa54:	4694      	mov	ip, r2
 801aa56:	4463      	add	r3, ip
 801aa58:	2180      	movs	r1, #128	@ 0x80
 801aa5a:	187a      	adds	r2, r7, r1
 801aa5c:	6013      	str	r3, [r2, #0]
 801aa5e:	1d7b      	adds	r3, r7, #5
 801aa60:	33ff      	adds	r3, #255	@ 0xff
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	b29a      	uxth	r2, r3
 801aa66:	187b      	adds	r3, r7, r1
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801aa6c:	2076      	movs	r0, #118	@ 0x76
 801aa6e:	183b      	adds	r3, r7, r0
 801aa70:	683a      	ldr	r2, [r7, #0]
 801aa72:	8912      	ldrh	r2, [r2, #8]
 801aa74:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801aa76:	683b      	ldr	r3, [r7, #0]
 801aa78:	6959      	ldr	r1, [r3, #20]
 801aa7a:	1d7b      	adds	r3, r7, #5
 801aa7c:	33ff      	adds	r3, #255	@ 0xff
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	b29c      	uxth	r4, r3
 801aa82:	183b      	adds	r3, r7, r0
 801aa84:	881a      	ldrh	r2, [r3, #0]
 801aa86:	6878      	ldr	r0, [r7, #4]
 801aa88:	0023      	movs	r3, r4
 801aa8a:	f000 fd5f 	bl	801b54c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801aa8e:	687a      	ldr	r2, [r7, #4]
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	781b      	ldrb	r3, [r3, #0]
 801aa94:	009b      	lsls	r3, r3, #2
 801aa96:	18d3      	adds	r3, r2, r3
 801aa98:	881b      	ldrh	r3, [r3, #0]
 801aa9a:	b29a      	uxth	r2, r3
 801aa9c:	200a      	movs	r0, #10
 801aa9e:	183b      	adds	r3, r7, r0
 801aaa0:	491d      	ldr	r1, [pc, #116]	@ (801ab18 <USB_EPStartXfer+0xab0>)
 801aaa2:	400a      	ands	r2, r1
 801aaa4:	801a      	strh	r2, [r3, #0]
 801aaa6:	183b      	adds	r3, r7, r0
 801aaa8:	183a      	adds	r2, r7, r0
 801aaaa:	8812      	ldrh	r2, [r2, #0]
 801aaac:	2110      	movs	r1, #16
 801aaae:	404a      	eors	r2, r1
 801aab0:	801a      	strh	r2, [r3, #0]
 801aab2:	183b      	adds	r3, r7, r0
 801aab4:	183a      	adds	r2, r7, r0
 801aab6:	8812      	ldrh	r2, [r2, #0]
 801aab8:	2120      	movs	r1, #32
 801aaba:	404a      	eors	r2, r1
 801aabc:	801a      	strh	r2, [r3, #0]
 801aabe:	687a      	ldr	r2, [r7, #4]
 801aac0:	683b      	ldr	r3, [r7, #0]
 801aac2:	781b      	ldrb	r3, [r3, #0]
 801aac4:	009b      	lsls	r3, r3, #2
 801aac6:	18d3      	adds	r3, r2, r3
 801aac8:	183a      	adds	r2, r7, r0
 801aaca:	8812      	ldrh	r2, [r2, #0]
 801aacc:	4913      	ldr	r1, [pc, #76]	@ (801ab1c <USB_EPStartXfer+0xab4>)
 801aace:	430a      	orrs	r2, r1
 801aad0:	b292      	uxth	r2, r2
 801aad2:	801a      	strh	r2, [r3, #0]
 801aad4:	f000 fbf4 	bl	801b2c0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	7b1b      	ldrb	r3, [r3, #12]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d000      	beq.n	801aae2 <USB_EPStartXfer+0xa7a>
 801aae0:	e0a9      	b.n	801ac36 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801aae2:	683b      	ldr	r3, [r7, #0]
 801aae4:	699a      	ldr	r2, [r3, #24]
 801aae6:	683b      	ldr	r3, [r7, #0]
 801aae8:	691b      	ldr	r3, [r3, #16]
 801aaea:	429a      	cmp	r2, r3
 801aaec:	d918      	bls.n	801ab20 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801aaee:	683b      	ldr	r3, [r7, #0]
 801aaf0:	691b      	ldr	r3, [r3, #16]
 801aaf2:	1d7a      	adds	r2, r7, #5
 801aaf4:	32ff      	adds	r2, #255	@ 0xff
 801aaf6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	699a      	ldr	r2, [r3, #24]
 801aafc:	1d7b      	adds	r3, r7, #5
 801aafe:	33ff      	adds	r3, #255	@ 0xff
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	1ad2      	subs	r2, r2, r3
 801ab04:	683b      	ldr	r3, [r7, #0]
 801ab06:	619a      	str	r2, [r3, #24]
 801ab08:	e012      	b.n	801ab30 <USB_EPStartXfer+0xac8>
 801ab0a:	46c0      	nop			@ (mov r8, r8)
 801ab0c:	00000406 	.word	0x00000406
 801ab10:	ffff8000 	.word	0xffff8000
 801ab14:	00000402 	.word	0x00000402
 801ab18:	ffff8fbf 	.word	0xffff8fbf
 801ab1c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801ab20:	683b      	ldr	r3, [r7, #0]
 801ab22:	699b      	ldr	r3, [r3, #24]
 801ab24:	1d7a      	adds	r2, r7, #5
 801ab26:	32ff      	adds	r2, #255	@ 0xff
 801ab28:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801ab2a:	683b      	ldr	r3, [r7, #0]
 801ab2c:	2200      	movs	r2, #0
 801ab2e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	2190      	movs	r1, #144	@ 0x90
 801ab34:	187a      	adds	r2, r7, r1
 801ab36:	6013      	str	r3, [r2, #0]
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	2250      	movs	r2, #80	@ 0x50
 801ab3c:	5a9b      	ldrh	r3, [r3, r2]
 801ab3e:	b29b      	uxth	r3, r3
 801ab40:	001a      	movs	r2, r3
 801ab42:	187b      	adds	r3, r7, r1
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	189b      	adds	r3, r3, r2
 801ab48:	187a      	adds	r2, r7, r1
 801ab4a:	6013      	str	r3, [r2, #0]
 801ab4c:	683b      	ldr	r3, [r7, #0]
 801ab4e:	781b      	ldrb	r3, [r3, #0]
 801ab50:	00da      	lsls	r2, r3, #3
 801ab52:	187b      	adds	r3, r7, r1
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	18d3      	adds	r3, r2, r3
 801ab58:	4acf      	ldr	r2, [pc, #828]	@ (801ae98 <USB_EPStartXfer+0xe30>)
 801ab5a:	4694      	mov	ip, r2
 801ab5c:	4463      	add	r3, ip
 801ab5e:	218c      	movs	r1, #140	@ 0x8c
 801ab60:	187a      	adds	r2, r7, r1
 801ab62:	6013      	str	r3, [r2, #0]
 801ab64:	187b      	adds	r3, r7, r1
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	881b      	ldrh	r3, [r3, #0]
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	059b      	lsls	r3, r3, #22
 801ab6e:	0d9b      	lsrs	r3, r3, #22
 801ab70:	b29a      	uxth	r2, r3
 801ab72:	187b      	adds	r3, r7, r1
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	801a      	strh	r2, [r3, #0]
 801ab78:	1d7b      	adds	r3, r7, #5
 801ab7a:	33ff      	adds	r3, #255	@ 0xff
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	2b3e      	cmp	r3, #62	@ 0x3e
 801ab80:	d925      	bls.n	801abce <USB_EPStartXfer+0xb66>
 801ab82:	1d7b      	adds	r3, r7, #5
 801ab84:	33ff      	adds	r3, #255	@ 0xff
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	095b      	lsrs	r3, r3, #5
 801ab8a:	21e8      	movs	r1, #232	@ 0xe8
 801ab8c:	187a      	adds	r2, r7, r1
 801ab8e:	6013      	str	r3, [r2, #0]
 801ab90:	1d7b      	adds	r3, r7, #5
 801ab92:	33ff      	adds	r3, #255	@ 0xff
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	221f      	movs	r2, #31
 801ab98:	4013      	ands	r3, r2
 801ab9a:	d104      	bne.n	801aba6 <USB_EPStartXfer+0xb3e>
 801ab9c:	187b      	adds	r3, r7, r1
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	3b01      	subs	r3, #1
 801aba2:	187a      	adds	r2, r7, r1
 801aba4:	6013      	str	r3, [r2, #0]
 801aba6:	218c      	movs	r1, #140	@ 0x8c
 801aba8:	187b      	adds	r3, r7, r1
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	881b      	ldrh	r3, [r3, #0]
 801abae:	b29a      	uxth	r2, r3
 801abb0:	23e8      	movs	r3, #232	@ 0xe8
 801abb2:	18fb      	adds	r3, r7, r3
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	b29b      	uxth	r3, r3
 801abb8:	029b      	lsls	r3, r3, #10
 801abba:	b29b      	uxth	r3, r3
 801abbc:	4313      	orrs	r3, r2
 801abbe:	b29b      	uxth	r3, r3
 801abc0:	4ab6      	ldr	r2, [pc, #728]	@ (801ae9c <USB_EPStartXfer+0xe34>)
 801abc2:	4313      	orrs	r3, r2
 801abc4:	b29a      	uxth	r2, r3
 801abc6:	187b      	adds	r3, r7, r1
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	801a      	strh	r2, [r3, #0]
 801abcc:	e353      	b.n	801b276 <USB_EPStartXfer+0x120e>
 801abce:	1d7b      	adds	r3, r7, #5
 801abd0:	33ff      	adds	r3, #255	@ 0xff
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d10b      	bne.n	801abf0 <USB_EPStartXfer+0xb88>
 801abd8:	218c      	movs	r1, #140	@ 0x8c
 801abda:	187b      	adds	r3, r7, r1
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	881b      	ldrh	r3, [r3, #0]
 801abe0:	b29b      	uxth	r3, r3
 801abe2:	4aae      	ldr	r2, [pc, #696]	@ (801ae9c <USB_EPStartXfer+0xe34>)
 801abe4:	4313      	orrs	r3, r2
 801abe6:	b29a      	uxth	r2, r3
 801abe8:	187b      	adds	r3, r7, r1
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	801a      	strh	r2, [r3, #0]
 801abee:	e342      	b.n	801b276 <USB_EPStartXfer+0x120e>
 801abf0:	1d7b      	adds	r3, r7, #5
 801abf2:	33ff      	adds	r3, #255	@ 0xff
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	085b      	lsrs	r3, r3, #1
 801abf8:	21e8      	movs	r1, #232	@ 0xe8
 801abfa:	187a      	adds	r2, r7, r1
 801abfc:	6013      	str	r3, [r2, #0]
 801abfe:	1d7b      	adds	r3, r7, #5
 801ac00:	33ff      	adds	r3, #255	@ 0xff
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	2201      	movs	r2, #1
 801ac06:	4013      	ands	r3, r2
 801ac08:	d004      	beq.n	801ac14 <USB_EPStartXfer+0xbac>
 801ac0a:	187b      	adds	r3, r7, r1
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	3301      	adds	r3, #1
 801ac10:	187a      	adds	r2, r7, r1
 801ac12:	6013      	str	r3, [r2, #0]
 801ac14:	218c      	movs	r1, #140	@ 0x8c
 801ac16:	187b      	adds	r3, r7, r1
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	881b      	ldrh	r3, [r3, #0]
 801ac1c:	b29a      	uxth	r2, r3
 801ac1e:	23e8      	movs	r3, #232	@ 0xe8
 801ac20:	18fb      	adds	r3, r7, r3
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	b29b      	uxth	r3, r3
 801ac26:	029b      	lsls	r3, r3, #10
 801ac28:	b29b      	uxth	r3, r3
 801ac2a:	4313      	orrs	r3, r2
 801ac2c:	b29a      	uxth	r2, r3
 801ac2e:	187b      	adds	r3, r7, r1
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	801a      	strh	r2, [r3, #0]
 801ac34:	e31f      	b.n	801b276 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801ac36:	683b      	ldr	r3, [r7, #0]
 801ac38:	78db      	ldrb	r3, [r3, #3]
 801ac3a:	2b02      	cmp	r3, #2
 801ac3c:	d000      	beq.n	801ac40 <USB_EPStartXfer+0xbd8>
 801ac3e:	e191      	b.n	801af64 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	785b      	ldrb	r3, [r3, #1]
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d000      	beq.n	801ac4a <USB_EPStartXfer+0xbe2>
 801ac48:	e07c      	b.n	801ad44 <USB_EPStartXfer+0xcdc>
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	21ac      	movs	r1, #172	@ 0xac
 801ac4e:	187a      	adds	r2, r7, r1
 801ac50:	6013      	str	r3, [r2, #0]
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	2250      	movs	r2, #80	@ 0x50
 801ac56:	5a9b      	ldrh	r3, [r3, r2]
 801ac58:	b29b      	uxth	r3, r3
 801ac5a:	001a      	movs	r2, r3
 801ac5c:	187b      	adds	r3, r7, r1
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	189b      	adds	r3, r3, r2
 801ac62:	187a      	adds	r2, r7, r1
 801ac64:	6013      	str	r3, [r2, #0]
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	781b      	ldrb	r3, [r3, #0]
 801ac6a:	00da      	lsls	r2, r3, #3
 801ac6c:	187b      	adds	r3, r7, r1
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	18d3      	adds	r3, r2, r3
 801ac72:	4a8b      	ldr	r2, [pc, #556]	@ (801aea0 <USB_EPStartXfer+0xe38>)
 801ac74:	4694      	mov	ip, r2
 801ac76:	4463      	add	r3, ip
 801ac78:	21a8      	movs	r1, #168	@ 0xa8
 801ac7a:	187a      	adds	r2, r7, r1
 801ac7c:	6013      	str	r3, [r2, #0]
 801ac7e:	187b      	adds	r3, r7, r1
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	881b      	ldrh	r3, [r3, #0]
 801ac84:	b29b      	uxth	r3, r3
 801ac86:	059b      	lsls	r3, r3, #22
 801ac88:	0d9b      	lsrs	r3, r3, #22
 801ac8a:	b29a      	uxth	r2, r3
 801ac8c:	187b      	adds	r3, r7, r1
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	801a      	strh	r2, [r3, #0]
 801ac92:	683b      	ldr	r3, [r7, #0]
 801ac94:	691b      	ldr	r3, [r3, #16]
 801ac96:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac98:	d923      	bls.n	801ace2 <USB_EPStartXfer+0xc7a>
 801ac9a:	683b      	ldr	r3, [r7, #0]
 801ac9c:	691b      	ldr	r3, [r3, #16]
 801ac9e:	095b      	lsrs	r3, r3, #5
 801aca0:	21e4      	movs	r1, #228	@ 0xe4
 801aca2:	187a      	adds	r2, r7, r1
 801aca4:	6013      	str	r3, [r2, #0]
 801aca6:	683b      	ldr	r3, [r7, #0]
 801aca8:	691b      	ldr	r3, [r3, #16]
 801acaa:	221f      	movs	r2, #31
 801acac:	4013      	ands	r3, r2
 801acae:	d104      	bne.n	801acba <USB_EPStartXfer+0xc52>
 801acb0:	187b      	adds	r3, r7, r1
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	3b01      	subs	r3, #1
 801acb6:	187a      	adds	r2, r7, r1
 801acb8:	6013      	str	r3, [r2, #0]
 801acba:	21a8      	movs	r1, #168	@ 0xa8
 801acbc:	187b      	adds	r3, r7, r1
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	881b      	ldrh	r3, [r3, #0]
 801acc2:	b29a      	uxth	r2, r3
 801acc4:	23e4      	movs	r3, #228	@ 0xe4
 801acc6:	18fb      	adds	r3, r7, r3
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	b29b      	uxth	r3, r3
 801accc:	029b      	lsls	r3, r3, #10
 801acce:	b29b      	uxth	r3, r3
 801acd0:	4313      	orrs	r3, r2
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	4a71      	ldr	r2, [pc, #452]	@ (801ae9c <USB_EPStartXfer+0xe34>)
 801acd6:	4313      	orrs	r3, r2
 801acd8:	b29a      	uxth	r2, r3
 801acda:	187b      	adds	r3, r7, r1
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	801a      	strh	r2, [r3, #0]
 801ace0:	e054      	b.n	801ad8c <USB_EPStartXfer+0xd24>
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	691b      	ldr	r3, [r3, #16]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d10b      	bne.n	801ad02 <USB_EPStartXfer+0xc9a>
 801acea:	21a8      	movs	r1, #168	@ 0xa8
 801acec:	187b      	adds	r3, r7, r1
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	881b      	ldrh	r3, [r3, #0]
 801acf2:	b29b      	uxth	r3, r3
 801acf4:	4a69      	ldr	r2, [pc, #420]	@ (801ae9c <USB_EPStartXfer+0xe34>)
 801acf6:	4313      	orrs	r3, r2
 801acf8:	b29a      	uxth	r2, r3
 801acfa:	187b      	adds	r3, r7, r1
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	801a      	strh	r2, [r3, #0]
 801ad00:	e044      	b.n	801ad8c <USB_EPStartXfer+0xd24>
 801ad02:	683b      	ldr	r3, [r7, #0]
 801ad04:	691b      	ldr	r3, [r3, #16]
 801ad06:	085b      	lsrs	r3, r3, #1
 801ad08:	21e4      	movs	r1, #228	@ 0xe4
 801ad0a:	187a      	adds	r2, r7, r1
 801ad0c:	6013      	str	r3, [r2, #0]
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	691b      	ldr	r3, [r3, #16]
 801ad12:	2201      	movs	r2, #1
 801ad14:	4013      	ands	r3, r2
 801ad16:	d004      	beq.n	801ad22 <USB_EPStartXfer+0xcba>
 801ad18:	187b      	adds	r3, r7, r1
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	3301      	adds	r3, #1
 801ad1e:	187a      	adds	r2, r7, r1
 801ad20:	6013      	str	r3, [r2, #0]
 801ad22:	21a8      	movs	r1, #168	@ 0xa8
 801ad24:	187b      	adds	r3, r7, r1
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	881b      	ldrh	r3, [r3, #0]
 801ad2a:	b29a      	uxth	r2, r3
 801ad2c:	23e4      	movs	r3, #228	@ 0xe4
 801ad2e:	18fb      	adds	r3, r7, r3
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	b29b      	uxth	r3, r3
 801ad34:	029b      	lsls	r3, r3, #10
 801ad36:	b29b      	uxth	r3, r3
 801ad38:	4313      	orrs	r3, r2
 801ad3a:	b29a      	uxth	r2, r3
 801ad3c:	187b      	adds	r3, r7, r1
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	801a      	strh	r2, [r3, #0]
 801ad42:	e023      	b.n	801ad8c <USB_EPStartXfer+0xd24>
 801ad44:	683b      	ldr	r3, [r7, #0]
 801ad46:	785b      	ldrb	r3, [r3, #1]
 801ad48:	2b01      	cmp	r3, #1
 801ad4a:	d11f      	bne.n	801ad8c <USB_EPStartXfer+0xd24>
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	21b4      	movs	r1, #180	@ 0xb4
 801ad50:	187a      	adds	r2, r7, r1
 801ad52:	6013      	str	r3, [r2, #0]
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	2250      	movs	r2, #80	@ 0x50
 801ad58:	5a9b      	ldrh	r3, [r3, r2]
 801ad5a:	b29b      	uxth	r3, r3
 801ad5c:	001a      	movs	r2, r3
 801ad5e:	187b      	adds	r3, r7, r1
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	189b      	adds	r3, r3, r2
 801ad64:	187a      	adds	r2, r7, r1
 801ad66:	6013      	str	r3, [r2, #0]
 801ad68:	683b      	ldr	r3, [r7, #0]
 801ad6a:	781b      	ldrb	r3, [r3, #0]
 801ad6c:	00da      	lsls	r2, r3, #3
 801ad6e:	187b      	adds	r3, r7, r1
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	18d3      	adds	r3, r2, r3
 801ad74:	4a4a      	ldr	r2, [pc, #296]	@ (801aea0 <USB_EPStartXfer+0xe38>)
 801ad76:	4694      	mov	ip, r2
 801ad78:	4463      	add	r3, ip
 801ad7a:	21b0      	movs	r1, #176	@ 0xb0
 801ad7c:	187a      	adds	r2, r7, r1
 801ad7e:	6013      	str	r3, [r2, #0]
 801ad80:	683b      	ldr	r3, [r7, #0]
 801ad82:	691b      	ldr	r3, [r3, #16]
 801ad84:	b29a      	uxth	r2, r3
 801ad86:	187b      	adds	r3, r7, r1
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	801a      	strh	r2, [r3, #0]
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	22a4      	movs	r2, #164	@ 0xa4
 801ad90:	18ba      	adds	r2, r7, r2
 801ad92:	6013      	str	r3, [r2, #0]
 801ad94:	683b      	ldr	r3, [r7, #0]
 801ad96:	785b      	ldrb	r3, [r3, #1]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d000      	beq.n	801ad9e <USB_EPStartXfer+0xd36>
 801ad9c:	e082      	b.n	801aea4 <USB_EPStartXfer+0xe3c>
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	219c      	movs	r1, #156	@ 0x9c
 801ada2:	187a      	adds	r2, r7, r1
 801ada4:	6013      	str	r3, [r2, #0]
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	2250      	movs	r2, #80	@ 0x50
 801adaa:	5a9b      	ldrh	r3, [r3, r2]
 801adac:	b29b      	uxth	r3, r3
 801adae:	001a      	movs	r2, r3
 801adb0:	187b      	adds	r3, r7, r1
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	189b      	adds	r3, r3, r2
 801adb6:	187a      	adds	r2, r7, r1
 801adb8:	6013      	str	r3, [r2, #0]
 801adba:	683b      	ldr	r3, [r7, #0]
 801adbc:	781b      	ldrb	r3, [r3, #0]
 801adbe:	00da      	lsls	r2, r3, #3
 801adc0:	187b      	adds	r3, r7, r1
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	18d3      	adds	r3, r2, r3
 801adc6:	4a34      	ldr	r2, [pc, #208]	@ (801ae98 <USB_EPStartXfer+0xe30>)
 801adc8:	4694      	mov	ip, r2
 801adca:	4463      	add	r3, ip
 801adcc:	2198      	movs	r1, #152	@ 0x98
 801adce:	187a      	adds	r2, r7, r1
 801add0:	6013      	str	r3, [r2, #0]
 801add2:	187b      	adds	r3, r7, r1
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	881b      	ldrh	r3, [r3, #0]
 801add8:	b29b      	uxth	r3, r3
 801adda:	059b      	lsls	r3, r3, #22
 801addc:	0d9b      	lsrs	r3, r3, #22
 801adde:	b29a      	uxth	r2, r3
 801ade0:	187b      	adds	r3, r7, r1
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	801a      	strh	r2, [r3, #0]
 801ade6:	683b      	ldr	r3, [r7, #0]
 801ade8:	691b      	ldr	r3, [r3, #16]
 801adea:	2b3e      	cmp	r3, #62	@ 0x3e
 801adec:	d923      	bls.n	801ae36 <USB_EPStartXfer+0xdce>
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	691b      	ldr	r3, [r3, #16]
 801adf2:	095b      	lsrs	r3, r3, #5
 801adf4:	21e0      	movs	r1, #224	@ 0xe0
 801adf6:	187a      	adds	r2, r7, r1
 801adf8:	6013      	str	r3, [r2, #0]
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	691b      	ldr	r3, [r3, #16]
 801adfe:	221f      	movs	r2, #31
 801ae00:	4013      	ands	r3, r2
 801ae02:	d104      	bne.n	801ae0e <USB_EPStartXfer+0xda6>
 801ae04:	187b      	adds	r3, r7, r1
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	3b01      	subs	r3, #1
 801ae0a:	187a      	adds	r2, r7, r1
 801ae0c:	6013      	str	r3, [r2, #0]
 801ae0e:	2198      	movs	r1, #152	@ 0x98
 801ae10:	187b      	adds	r3, r7, r1
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	881b      	ldrh	r3, [r3, #0]
 801ae16:	b29a      	uxth	r2, r3
 801ae18:	23e0      	movs	r3, #224	@ 0xe0
 801ae1a:	18fb      	adds	r3, r7, r3
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	b29b      	uxth	r3, r3
 801ae20:	029b      	lsls	r3, r3, #10
 801ae22:	b29b      	uxth	r3, r3
 801ae24:	4313      	orrs	r3, r2
 801ae26:	b29b      	uxth	r3, r3
 801ae28:	4a1c      	ldr	r2, [pc, #112]	@ (801ae9c <USB_EPStartXfer+0xe34>)
 801ae2a:	4313      	orrs	r3, r2
 801ae2c:	b29a      	uxth	r2, r3
 801ae2e:	187b      	adds	r3, r7, r1
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	801a      	strh	r2, [r3, #0]
 801ae34:	e057      	b.n	801aee6 <USB_EPStartXfer+0xe7e>
 801ae36:	683b      	ldr	r3, [r7, #0]
 801ae38:	691b      	ldr	r3, [r3, #16]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d10b      	bne.n	801ae56 <USB_EPStartXfer+0xdee>
 801ae3e:	2198      	movs	r1, #152	@ 0x98
 801ae40:	187b      	adds	r3, r7, r1
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	881b      	ldrh	r3, [r3, #0]
 801ae46:	b29b      	uxth	r3, r3
 801ae48:	4a14      	ldr	r2, [pc, #80]	@ (801ae9c <USB_EPStartXfer+0xe34>)
 801ae4a:	4313      	orrs	r3, r2
 801ae4c:	b29a      	uxth	r2, r3
 801ae4e:	187b      	adds	r3, r7, r1
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	801a      	strh	r2, [r3, #0]
 801ae54:	e047      	b.n	801aee6 <USB_EPStartXfer+0xe7e>
 801ae56:	683b      	ldr	r3, [r7, #0]
 801ae58:	691b      	ldr	r3, [r3, #16]
 801ae5a:	085b      	lsrs	r3, r3, #1
 801ae5c:	21e0      	movs	r1, #224	@ 0xe0
 801ae5e:	187a      	adds	r2, r7, r1
 801ae60:	6013      	str	r3, [r2, #0]
 801ae62:	683b      	ldr	r3, [r7, #0]
 801ae64:	691b      	ldr	r3, [r3, #16]
 801ae66:	2201      	movs	r2, #1
 801ae68:	4013      	ands	r3, r2
 801ae6a:	d004      	beq.n	801ae76 <USB_EPStartXfer+0xe0e>
 801ae6c:	187b      	adds	r3, r7, r1
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	3301      	adds	r3, #1
 801ae72:	187a      	adds	r2, r7, r1
 801ae74:	6013      	str	r3, [r2, #0]
 801ae76:	2198      	movs	r1, #152	@ 0x98
 801ae78:	187b      	adds	r3, r7, r1
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	881b      	ldrh	r3, [r3, #0]
 801ae7e:	b29a      	uxth	r2, r3
 801ae80:	23e0      	movs	r3, #224	@ 0xe0
 801ae82:	18fb      	adds	r3, r7, r3
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	b29b      	uxth	r3, r3
 801ae88:	029b      	lsls	r3, r3, #10
 801ae8a:	b29b      	uxth	r3, r3
 801ae8c:	4313      	orrs	r3, r2
 801ae8e:	b29a      	uxth	r2, r3
 801ae90:	187b      	adds	r3, r7, r1
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	801a      	strh	r2, [r3, #0]
 801ae96:	e026      	b.n	801aee6 <USB_EPStartXfer+0xe7e>
 801ae98:	00000406 	.word	0x00000406
 801ae9c:	ffff8000 	.word	0xffff8000
 801aea0:	00000402 	.word	0x00000402
 801aea4:	683b      	ldr	r3, [r7, #0]
 801aea6:	785b      	ldrb	r3, [r3, #1]
 801aea8:	2b01      	cmp	r3, #1
 801aeaa:	d11c      	bne.n	801aee6 <USB_EPStartXfer+0xe7e>
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	2250      	movs	r2, #80	@ 0x50
 801aeb0:	5a9b      	ldrh	r3, [r3, r2]
 801aeb2:	b29b      	uxth	r3, r3
 801aeb4:	001a      	movs	r2, r3
 801aeb6:	21a4      	movs	r1, #164	@ 0xa4
 801aeb8:	187b      	adds	r3, r7, r1
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	189b      	adds	r3, r3, r2
 801aebe:	187a      	adds	r2, r7, r1
 801aec0:	6013      	str	r3, [r2, #0]
 801aec2:	683b      	ldr	r3, [r7, #0]
 801aec4:	781b      	ldrb	r3, [r3, #0]
 801aec6:	00da      	lsls	r2, r3, #3
 801aec8:	187b      	adds	r3, r7, r1
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	18d3      	adds	r3, r2, r3
 801aece:	4ad2      	ldr	r2, [pc, #840]	@ (801b218 <USB_EPStartXfer+0x11b0>)
 801aed0:	4694      	mov	ip, r2
 801aed2:	4463      	add	r3, ip
 801aed4:	21a0      	movs	r1, #160	@ 0xa0
 801aed6:	187a      	adds	r2, r7, r1
 801aed8:	6013      	str	r3, [r2, #0]
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	691b      	ldr	r3, [r3, #16]
 801aede:	b29a      	uxth	r2, r3
 801aee0:	187b      	adds	r3, r7, r1
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801aee6:	683b      	ldr	r3, [r7, #0]
 801aee8:	69db      	ldr	r3, [r3, #28]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d100      	bne.n	801aef0 <USB_EPStartXfer+0xe88>
 801aeee:	e1c2      	b.n	801b276 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801aef0:	687a      	ldr	r2, [r7, #4]
 801aef2:	683b      	ldr	r3, [r7, #0]
 801aef4:	781b      	ldrb	r3, [r3, #0]
 801aef6:	009b      	lsls	r3, r3, #2
 801aef8:	18d2      	adds	r2, r2, r3
 801aefa:	2196      	movs	r1, #150	@ 0x96
 801aefc:	187b      	adds	r3, r7, r1
 801aefe:	8812      	ldrh	r2, [r2, #0]
 801af00:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801af02:	187b      	adds	r3, r7, r1
 801af04:	881a      	ldrh	r2, [r3, #0]
 801af06:	2380      	movs	r3, #128	@ 0x80
 801af08:	01db      	lsls	r3, r3, #7
 801af0a:	4013      	ands	r3, r2
 801af0c:	d004      	beq.n	801af18 <USB_EPStartXfer+0xeb0>
 801af0e:	187b      	adds	r3, r7, r1
 801af10:	881b      	ldrh	r3, [r3, #0]
 801af12:	2240      	movs	r2, #64	@ 0x40
 801af14:	4013      	ands	r3, r2
 801af16:	d10d      	bne.n	801af34 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801af18:	2196      	movs	r1, #150	@ 0x96
 801af1a:	187b      	adds	r3, r7, r1
 801af1c:	881a      	ldrh	r2, [r3, #0]
 801af1e:	2380      	movs	r3, #128	@ 0x80
 801af20:	01db      	lsls	r3, r3, #7
 801af22:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801af24:	d000      	beq.n	801af28 <USB_EPStartXfer+0xec0>
 801af26:	e1a6      	b.n	801b276 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801af28:	187b      	adds	r3, r7, r1
 801af2a:	881b      	ldrh	r3, [r3, #0]
 801af2c:	2240      	movs	r2, #64	@ 0x40
 801af2e:	4013      	ands	r3, r2
 801af30:	d000      	beq.n	801af34 <USB_EPStartXfer+0xecc>
 801af32:	e1a0      	b.n	801b276 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801af34:	687a      	ldr	r2, [r7, #4]
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	781b      	ldrb	r3, [r3, #0]
 801af3a:	009b      	lsls	r3, r3, #2
 801af3c:	18d3      	adds	r3, r2, r3
 801af3e:	881b      	ldrh	r3, [r3, #0]
 801af40:	b29a      	uxth	r2, r3
 801af42:	2094      	movs	r0, #148	@ 0x94
 801af44:	183b      	adds	r3, r7, r0
 801af46:	49b5      	ldr	r1, [pc, #724]	@ (801b21c <USB_EPStartXfer+0x11b4>)
 801af48:	400a      	ands	r2, r1
 801af4a:	801a      	strh	r2, [r3, #0]
 801af4c:	687a      	ldr	r2, [r7, #4]
 801af4e:	683b      	ldr	r3, [r7, #0]
 801af50:	781b      	ldrb	r3, [r3, #0]
 801af52:	009b      	lsls	r3, r3, #2
 801af54:	18d3      	adds	r3, r2, r3
 801af56:	183a      	adds	r2, r7, r0
 801af58:	8812      	ldrh	r2, [r2, #0]
 801af5a:	49b1      	ldr	r1, [pc, #708]	@ (801b220 <USB_EPStartXfer+0x11b8>)
 801af5c:	430a      	orrs	r2, r1
 801af5e:	b292      	uxth	r2, r2
 801af60:	801a      	strh	r2, [r3, #0]
 801af62:	e188      	b.n	801b276 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801af64:	683b      	ldr	r3, [r7, #0]
 801af66:	78db      	ldrb	r3, [r3, #3]
 801af68:	2b01      	cmp	r3, #1
 801af6a:	d000      	beq.n	801af6e <USB_EPStartXfer+0xf06>
 801af6c:	e181      	b.n	801b272 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801af6e:	683b      	ldr	r3, [r7, #0]
 801af70:	699a      	ldr	r2, [r3, #24]
 801af72:	683b      	ldr	r3, [r7, #0]
 801af74:	691b      	ldr	r3, [r3, #16]
 801af76:	429a      	cmp	r2, r3
 801af78:	d90d      	bls.n	801af96 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801af7a:	683b      	ldr	r3, [r7, #0]
 801af7c:	691b      	ldr	r3, [r3, #16]
 801af7e:	1d7a      	adds	r2, r7, #5
 801af80:	32ff      	adds	r2, #255	@ 0xff
 801af82:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801af84:	683b      	ldr	r3, [r7, #0]
 801af86:	699a      	ldr	r2, [r3, #24]
 801af88:	1d7b      	adds	r3, r7, #5
 801af8a:	33ff      	adds	r3, #255	@ 0xff
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	1ad2      	subs	r2, r2, r3
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	619a      	str	r2, [r3, #24]
 801af94:	e007      	b.n	801afa6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801af96:	683b      	ldr	r3, [r7, #0]
 801af98:	699b      	ldr	r3, [r3, #24]
 801af9a:	1d7a      	adds	r2, r7, #5
 801af9c:	32ff      	adds	r2, #255	@ 0xff
 801af9e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801afa0:	683b      	ldr	r3, [r7, #0]
 801afa2:	2200      	movs	r2, #0
 801afa4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801afa6:	683b      	ldr	r3, [r7, #0]
 801afa8:	785b      	ldrb	r3, [r3, #1]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d000      	beq.n	801afb0 <USB_EPStartXfer+0xf48>
 801afae:	e082      	b.n	801b0b6 <USB_EPStartXfer+0x104e>
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	21cc      	movs	r1, #204	@ 0xcc
 801afb4:	187a      	adds	r2, r7, r1
 801afb6:	6013      	str	r3, [r2, #0]
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	2250      	movs	r2, #80	@ 0x50
 801afbc:	5a9b      	ldrh	r3, [r3, r2]
 801afbe:	b29b      	uxth	r3, r3
 801afc0:	001a      	movs	r2, r3
 801afc2:	187b      	adds	r3, r7, r1
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	189b      	adds	r3, r3, r2
 801afc8:	187a      	adds	r2, r7, r1
 801afca:	6013      	str	r3, [r2, #0]
 801afcc:	683b      	ldr	r3, [r7, #0]
 801afce:	781b      	ldrb	r3, [r3, #0]
 801afd0:	00da      	lsls	r2, r3, #3
 801afd2:	187b      	adds	r3, r7, r1
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	18d3      	adds	r3, r2, r3
 801afd8:	4a92      	ldr	r2, [pc, #584]	@ (801b224 <USB_EPStartXfer+0x11bc>)
 801afda:	4694      	mov	ip, r2
 801afdc:	4463      	add	r3, ip
 801afde:	21c8      	movs	r1, #200	@ 0xc8
 801afe0:	187a      	adds	r2, r7, r1
 801afe2:	6013      	str	r3, [r2, #0]
 801afe4:	187b      	adds	r3, r7, r1
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	881b      	ldrh	r3, [r3, #0]
 801afea:	b29b      	uxth	r3, r3
 801afec:	059b      	lsls	r3, r3, #22
 801afee:	0d9b      	lsrs	r3, r3, #22
 801aff0:	b29a      	uxth	r2, r3
 801aff2:	187b      	adds	r3, r7, r1
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	801a      	strh	r2, [r3, #0]
 801aff8:	1d7b      	adds	r3, r7, #5
 801affa:	33ff      	adds	r3, #255	@ 0xff
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	2b3e      	cmp	r3, #62	@ 0x3e
 801b000:	d925      	bls.n	801b04e <USB_EPStartXfer+0xfe6>
 801b002:	1d7b      	adds	r3, r7, #5
 801b004:	33ff      	adds	r3, #255	@ 0xff
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	095b      	lsrs	r3, r3, #5
 801b00a:	21dc      	movs	r1, #220	@ 0xdc
 801b00c:	187a      	adds	r2, r7, r1
 801b00e:	6013      	str	r3, [r2, #0]
 801b010:	1d7b      	adds	r3, r7, #5
 801b012:	33ff      	adds	r3, #255	@ 0xff
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	221f      	movs	r2, #31
 801b018:	4013      	ands	r3, r2
 801b01a:	d104      	bne.n	801b026 <USB_EPStartXfer+0xfbe>
 801b01c:	187b      	adds	r3, r7, r1
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	3b01      	subs	r3, #1
 801b022:	187a      	adds	r2, r7, r1
 801b024:	6013      	str	r3, [r2, #0]
 801b026:	21c8      	movs	r1, #200	@ 0xc8
 801b028:	187b      	adds	r3, r7, r1
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	881b      	ldrh	r3, [r3, #0]
 801b02e:	b29a      	uxth	r2, r3
 801b030:	23dc      	movs	r3, #220	@ 0xdc
 801b032:	18fb      	adds	r3, r7, r3
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	b29b      	uxth	r3, r3
 801b038:	029b      	lsls	r3, r3, #10
 801b03a:	b29b      	uxth	r3, r3
 801b03c:	4313      	orrs	r3, r2
 801b03e:	b29b      	uxth	r3, r3
 801b040:	4a79      	ldr	r2, [pc, #484]	@ (801b228 <USB_EPStartXfer+0x11c0>)
 801b042:	4313      	orrs	r3, r2
 801b044:	b29a      	uxth	r2, r3
 801b046:	187b      	adds	r3, r7, r1
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	801a      	strh	r2, [r3, #0]
 801b04c:	e058      	b.n	801b100 <USB_EPStartXfer+0x1098>
 801b04e:	1d7b      	adds	r3, r7, #5
 801b050:	33ff      	adds	r3, #255	@ 0xff
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d10b      	bne.n	801b070 <USB_EPStartXfer+0x1008>
 801b058:	21c8      	movs	r1, #200	@ 0xc8
 801b05a:	187b      	adds	r3, r7, r1
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	881b      	ldrh	r3, [r3, #0]
 801b060:	b29b      	uxth	r3, r3
 801b062:	4a71      	ldr	r2, [pc, #452]	@ (801b228 <USB_EPStartXfer+0x11c0>)
 801b064:	4313      	orrs	r3, r2
 801b066:	b29a      	uxth	r2, r3
 801b068:	187b      	adds	r3, r7, r1
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	801a      	strh	r2, [r3, #0]
 801b06e:	e047      	b.n	801b100 <USB_EPStartXfer+0x1098>
 801b070:	1d7b      	adds	r3, r7, #5
 801b072:	33ff      	adds	r3, #255	@ 0xff
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	085b      	lsrs	r3, r3, #1
 801b078:	21dc      	movs	r1, #220	@ 0xdc
 801b07a:	187a      	adds	r2, r7, r1
 801b07c:	6013      	str	r3, [r2, #0]
 801b07e:	1d7b      	adds	r3, r7, #5
 801b080:	33ff      	adds	r3, #255	@ 0xff
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	2201      	movs	r2, #1
 801b086:	4013      	ands	r3, r2
 801b088:	d004      	beq.n	801b094 <USB_EPStartXfer+0x102c>
 801b08a:	187b      	adds	r3, r7, r1
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	3301      	adds	r3, #1
 801b090:	187a      	adds	r2, r7, r1
 801b092:	6013      	str	r3, [r2, #0]
 801b094:	21c8      	movs	r1, #200	@ 0xc8
 801b096:	187b      	adds	r3, r7, r1
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	881b      	ldrh	r3, [r3, #0]
 801b09c:	b29a      	uxth	r2, r3
 801b09e:	23dc      	movs	r3, #220	@ 0xdc
 801b0a0:	18fb      	adds	r3, r7, r3
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	b29b      	uxth	r3, r3
 801b0a6:	029b      	lsls	r3, r3, #10
 801b0a8:	b29b      	uxth	r3, r3
 801b0aa:	4313      	orrs	r3, r2
 801b0ac:	b29a      	uxth	r2, r3
 801b0ae:	187b      	adds	r3, r7, r1
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	801a      	strh	r2, [r3, #0]
 801b0b4:	e024      	b.n	801b100 <USB_EPStartXfer+0x1098>
 801b0b6:	683b      	ldr	r3, [r7, #0]
 801b0b8:	785b      	ldrb	r3, [r3, #1]
 801b0ba:	2b01      	cmp	r3, #1
 801b0bc:	d120      	bne.n	801b100 <USB_EPStartXfer+0x1098>
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	21d4      	movs	r1, #212	@ 0xd4
 801b0c2:	187a      	adds	r2, r7, r1
 801b0c4:	6013      	str	r3, [r2, #0]
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	2250      	movs	r2, #80	@ 0x50
 801b0ca:	5a9b      	ldrh	r3, [r3, r2]
 801b0cc:	b29b      	uxth	r3, r3
 801b0ce:	001a      	movs	r2, r3
 801b0d0:	187b      	adds	r3, r7, r1
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	189b      	adds	r3, r3, r2
 801b0d6:	187a      	adds	r2, r7, r1
 801b0d8:	6013      	str	r3, [r2, #0]
 801b0da:	683b      	ldr	r3, [r7, #0]
 801b0dc:	781b      	ldrb	r3, [r3, #0]
 801b0de:	00da      	lsls	r2, r3, #3
 801b0e0:	187b      	adds	r3, r7, r1
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	18d3      	adds	r3, r2, r3
 801b0e6:	4a4f      	ldr	r2, [pc, #316]	@ (801b224 <USB_EPStartXfer+0x11bc>)
 801b0e8:	4694      	mov	ip, r2
 801b0ea:	4463      	add	r3, ip
 801b0ec:	21d0      	movs	r1, #208	@ 0xd0
 801b0ee:	187a      	adds	r2, r7, r1
 801b0f0:	6013      	str	r3, [r2, #0]
 801b0f2:	1d7b      	adds	r3, r7, #5
 801b0f4:	33ff      	adds	r3, #255	@ 0xff
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	b29a      	uxth	r2, r3
 801b0fa:	187b      	adds	r3, r7, r1
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	801a      	strh	r2, [r3, #0]
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	22c4      	movs	r2, #196	@ 0xc4
 801b104:	18ba      	adds	r2, r7, r2
 801b106:	6013      	str	r3, [r2, #0]
 801b108:	683b      	ldr	r3, [r7, #0]
 801b10a:	785b      	ldrb	r3, [r3, #1]
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d000      	beq.n	801b112 <USB_EPStartXfer+0x10aa>
 801b110:	e08c      	b.n	801b22c <USB_EPStartXfer+0x11c4>
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	21bc      	movs	r1, #188	@ 0xbc
 801b116:	187a      	adds	r2, r7, r1
 801b118:	6013      	str	r3, [r2, #0]
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	2250      	movs	r2, #80	@ 0x50
 801b11e:	5a9b      	ldrh	r3, [r3, r2]
 801b120:	b29b      	uxth	r3, r3
 801b122:	001a      	movs	r2, r3
 801b124:	187b      	adds	r3, r7, r1
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	189b      	adds	r3, r3, r2
 801b12a:	187a      	adds	r2, r7, r1
 801b12c:	6013      	str	r3, [r2, #0]
 801b12e:	683b      	ldr	r3, [r7, #0]
 801b130:	781b      	ldrb	r3, [r3, #0]
 801b132:	00da      	lsls	r2, r3, #3
 801b134:	187b      	adds	r3, r7, r1
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	18d3      	adds	r3, r2, r3
 801b13a:	4a37      	ldr	r2, [pc, #220]	@ (801b218 <USB_EPStartXfer+0x11b0>)
 801b13c:	4694      	mov	ip, r2
 801b13e:	4463      	add	r3, ip
 801b140:	21b8      	movs	r1, #184	@ 0xb8
 801b142:	187a      	adds	r2, r7, r1
 801b144:	6013      	str	r3, [r2, #0]
 801b146:	187b      	adds	r3, r7, r1
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	881b      	ldrh	r3, [r3, #0]
 801b14c:	b29b      	uxth	r3, r3
 801b14e:	059b      	lsls	r3, r3, #22
 801b150:	0d9b      	lsrs	r3, r3, #22
 801b152:	b29a      	uxth	r2, r3
 801b154:	187b      	adds	r3, r7, r1
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	801a      	strh	r2, [r3, #0]
 801b15a:	1d7b      	adds	r3, r7, #5
 801b15c:	33ff      	adds	r3, #255	@ 0xff
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	2b3e      	cmp	r3, #62	@ 0x3e
 801b162:	d925      	bls.n	801b1b0 <USB_EPStartXfer+0x1148>
 801b164:	1d7b      	adds	r3, r7, #5
 801b166:	33ff      	adds	r3, #255	@ 0xff
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	095b      	lsrs	r3, r3, #5
 801b16c:	21d8      	movs	r1, #216	@ 0xd8
 801b16e:	187a      	adds	r2, r7, r1
 801b170:	6013      	str	r3, [r2, #0]
 801b172:	1d7b      	adds	r3, r7, #5
 801b174:	33ff      	adds	r3, #255	@ 0xff
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	221f      	movs	r2, #31
 801b17a:	4013      	ands	r3, r2
 801b17c:	d104      	bne.n	801b188 <USB_EPStartXfer+0x1120>
 801b17e:	187b      	adds	r3, r7, r1
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	3b01      	subs	r3, #1
 801b184:	187a      	adds	r2, r7, r1
 801b186:	6013      	str	r3, [r2, #0]
 801b188:	21b8      	movs	r1, #184	@ 0xb8
 801b18a:	187b      	adds	r3, r7, r1
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	881b      	ldrh	r3, [r3, #0]
 801b190:	b29a      	uxth	r2, r3
 801b192:	23d8      	movs	r3, #216	@ 0xd8
 801b194:	18fb      	adds	r3, r7, r3
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	b29b      	uxth	r3, r3
 801b19a:	029b      	lsls	r3, r3, #10
 801b19c:	b29b      	uxth	r3, r3
 801b19e:	4313      	orrs	r3, r2
 801b1a0:	b29b      	uxth	r3, r3
 801b1a2:	4a21      	ldr	r2, [pc, #132]	@ (801b228 <USB_EPStartXfer+0x11c0>)
 801b1a4:	4313      	orrs	r3, r2
 801b1a6:	b29a      	uxth	r2, r3
 801b1a8:	187b      	adds	r3, r7, r1
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	801a      	strh	r2, [r3, #0]
 801b1ae:	e062      	b.n	801b276 <USB_EPStartXfer+0x120e>
 801b1b0:	1d7b      	adds	r3, r7, #5
 801b1b2:	33ff      	adds	r3, #255	@ 0xff
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d10b      	bne.n	801b1d2 <USB_EPStartXfer+0x116a>
 801b1ba:	21b8      	movs	r1, #184	@ 0xb8
 801b1bc:	187b      	adds	r3, r7, r1
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	881b      	ldrh	r3, [r3, #0]
 801b1c2:	b29b      	uxth	r3, r3
 801b1c4:	4a18      	ldr	r2, [pc, #96]	@ (801b228 <USB_EPStartXfer+0x11c0>)
 801b1c6:	4313      	orrs	r3, r2
 801b1c8:	b29a      	uxth	r2, r3
 801b1ca:	187b      	adds	r3, r7, r1
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	801a      	strh	r2, [r3, #0]
 801b1d0:	e051      	b.n	801b276 <USB_EPStartXfer+0x120e>
 801b1d2:	1d7b      	adds	r3, r7, #5
 801b1d4:	33ff      	adds	r3, #255	@ 0xff
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	085b      	lsrs	r3, r3, #1
 801b1da:	21d8      	movs	r1, #216	@ 0xd8
 801b1dc:	187a      	adds	r2, r7, r1
 801b1de:	6013      	str	r3, [r2, #0]
 801b1e0:	1d7b      	adds	r3, r7, #5
 801b1e2:	33ff      	adds	r3, #255	@ 0xff
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	2201      	movs	r2, #1
 801b1e8:	4013      	ands	r3, r2
 801b1ea:	d004      	beq.n	801b1f6 <USB_EPStartXfer+0x118e>
 801b1ec:	187b      	adds	r3, r7, r1
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	3301      	adds	r3, #1
 801b1f2:	187a      	adds	r2, r7, r1
 801b1f4:	6013      	str	r3, [r2, #0]
 801b1f6:	21b8      	movs	r1, #184	@ 0xb8
 801b1f8:	187b      	adds	r3, r7, r1
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	881b      	ldrh	r3, [r3, #0]
 801b1fe:	b29a      	uxth	r2, r3
 801b200:	23d8      	movs	r3, #216	@ 0xd8
 801b202:	18fb      	adds	r3, r7, r3
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	b29b      	uxth	r3, r3
 801b208:	029b      	lsls	r3, r3, #10
 801b20a:	b29b      	uxth	r3, r3
 801b20c:	4313      	orrs	r3, r2
 801b20e:	b29a      	uxth	r2, r3
 801b210:	187b      	adds	r3, r7, r1
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	801a      	strh	r2, [r3, #0]
 801b216:	e02e      	b.n	801b276 <USB_EPStartXfer+0x120e>
 801b218:	00000406 	.word	0x00000406
 801b21c:	ffff8f8f 	.word	0xffff8f8f
 801b220:	ffff80c0 	.word	0xffff80c0
 801b224:	00000402 	.word	0x00000402
 801b228:	ffff8000 	.word	0xffff8000
 801b22c:	683b      	ldr	r3, [r7, #0]
 801b22e:	785b      	ldrb	r3, [r3, #1]
 801b230:	2b01      	cmp	r3, #1
 801b232:	d120      	bne.n	801b276 <USB_EPStartXfer+0x120e>
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	2250      	movs	r2, #80	@ 0x50
 801b238:	5a9b      	ldrh	r3, [r3, r2]
 801b23a:	b29b      	uxth	r3, r3
 801b23c:	001a      	movs	r2, r3
 801b23e:	21c4      	movs	r1, #196	@ 0xc4
 801b240:	187b      	adds	r3, r7, r1
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	189b      	adds	r3, r3, r2
 801b246:	187a      	adds	r2, r7, r1
 801b248:	6013      	str	r3, [r2, #0]
 801b24a:	683b      	ldr	r3, [r7, #0]
 801b24c:	781b      	ldrb	r3, [r3, #0]
 801b24e:	00da      	lsls	r2, r3, #3
 801b250:	187b      	adds	r3, r7, r1
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	18d3      	adds	r3, r2, r3
 801b256:	4a1d      	ldr	r2, [pc, #116]	@ (801b2cc <USB_EPStartXfer+0x1264>)
 801b258:	4694      	mov	ip, r2
 801b25a:	4463      	add	r3, ip
 801b25c:	21c0      	movs	r1, #192	@ 0xc0
 801b25e:	187a      	adds	r2, r7, r1
 801b260:	6013      	str	r3, [r2, #0]
 801b262:	1d7b      	adds	r3, r7, #5
 801b264:	33ff      	adds	r3, #255	@ 0xff
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	b29a      	uxth	r2, r3
 801b26a:	187b      	adds	r3, r7, r1
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	801a      	strh	r2, [r3, #0]
 801b270:	e001      	b.n	801b276 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801b272:	2301      	movs	r3, #1
 801b274:	e025      	b.n	801b2c2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b276:	687a      	ldr	r2, [r7, #4]
 801b278:	683b      	ldr	r3, [r7, #0]
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	009b      	lsls	r3, r3, #2
 801b27e:	18d3      	adds	r3, r2, r3
 801b280:	881b      	ldrh	r3, [r3, #0]
 801b282:	b29a      	uxth	r2, r3
 801b284:	208a      	movs	r0, #138	@ 0x8a
 801b286:	183b      	adds	r3, r7, r0
 801b288:	4911      	ldr	r1, [pc, #68]	@ (801b2d0 <USB_EPStartXfer+0x1268>)
 801b28a:	400a      	ands	r2, r1
 801b28c:	801a      	strh	r2, [r3, #0]
 801b28e:	183b      	adds	r3, r7, r0
 801b290:	183a      	adds	r2, r7, r0
 801b292:	8812      	ldrh	r2, [r2, #0]
 801b294:	2180      	movs	r1, #128	@ 0x80
 801b296:	0149      	lsls	r1, r1, #5
 801b298:	404a      	eors	r2, r1
 801b29a:	801a      	strh	r2, [r3, #0]
 801b29c:	183b      	adds	r3, r7, r0
 801b29e:	183a      	adds	r2, r7, r0
 801b2a0:	8812      	ldrh	r2, [r2, #0]
 801b2a2:	2180      	movs	r1, #128	@ 0x80
 801b2a4:	0189      	lsls	r1, r1, #6
 801b2a6:	404a      	eors	r2, r1
 801b2a8:	801a      	strh	r2, [r3, #0]
 801b2aa:	687a      	ldr	r2, [r7, #4]
 801b2ac:	683b      	ldr	r3, [r7, #0]
 801b2ae:	781b      	ldrb	r3, [r3, #0]
 801b2b0:	009b      	lsls	r3, r3, #2
 801b2b2:	18d3      	adds	r3, r2, r3
 801b2b4:	183a      	adds	r2, r7, r0
 801b2b6:	8812      	ldrh	r2, [r2, #0]
 801b2b8:	4906      	ldr	r1, [pc, #24]	@ (801b2d4 <USB_EPStartXfer+0x126c>)
 801b2ba:	430a      	orrs	r2, r1
 801b2bc:	b292      	uxth	r2, r2
 801b2be:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b2c0:	2300      	movs	r3, #0
}
 801b2c2:	0018      	movs	r0, r3
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	b043      	add	sp, #268	@ 0x10c
 801b2c8:	bd90      	pop	{r4, r7, pc}
 801b2ca:	46c0      	nop			@ (mov r8, r8)
 801b2cc:	00000406 	.word	0x00000406
 801b2d0:	ffffbf8f 	.word	0xffffbf8f
 801b2d4:	ffff8080 	.word	0xffff8080

0801b2d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b084      	sub	sp, #16
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	6078      	str	r0, [r7, #4]
 801b2e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801b2e2:	683b      	ldr	r3, [r7, #0]
 801b2e4:	785b      	ldrb	r3, [r3, #1]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d01d      	beq.n	801b326 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801b2ea:	687a      	ldr	r2, [r7, #4]
 801b2ec:	683b      	ldr	r3, [r7, #0]
 801b2ee:	781b      	ldrb	r3, [r3, #0]
 801b2f0:	009b      	lsls	r3, r3, #2
 801b2f2:	18d3      	adds	r3, r2, r3
 801b2f4:	881b      	ldrh	r3, [r3, #0]
 801b2f6:	b29a      	uxth	r2, r3
 801b2f8:	200c      	movs	r0, #12
 801b2fa:	183b      	adds	r3, r7, r0
 801b2fc:	491b      	ldr	r1, [pc, #108]	@ (801b36c <USB_EPSetStall+0x94>)
 801b2fe:	400a      	ands	r2, r1
 801b300:	801a      	strh	r2, [r3, #0]
 801b302:	183b      	adds	r3, r7, r0
 801b304:	183a      	adds	r2, r7, r0
 801b306:	8812      	ldrh	r2, [r2, #0]
 801b308:	2110      	movs	r1, #16
 801b30a:	404a      	eors	r2, r1
 801b30c:	801a      	strh	r2, [r3, #0]
 801b30e:	687a      	ldr	r2, [r7, #4]
 801b310:	683b      	ldr	r3, [r7, #0]
 801b312:	781b      	ldrb	r3, [r3, #0]
 801b314:	009b      	lsls	r3, r3, #2
 801b316:	18d3      	adds	r3, r2, r3
 801b318:	183a      	adds	r2, r7, r0
 801b31a:	8812      	ldrh	r2, [r2, #0]
 801b31c:	4914      	ldr	r1, [pc, #80]	@ (801b370 <USB_EPSetStall+0x98>)
 801b31e:	430a      	orrs	r2, r1
 801b320:	b292      	uxth	r2, r2
 801b322:	801a      	strh	r2, [r3, #0]
 801b324:	e01d      	b.n	801b362 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801b326:	687a      	ldr	r2, [r7, #4]
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	781b      	ldrb	r3, [r3, #0]
 801b32c:	009b      	lsls	r3, r3, #2
 801b32e:	18d3      	adds	r3, r2, r3
 801b330:	881b      	ldrh	r3, [r3, #0]
 801b332:	b29a      	uxth	r2, r3
 801b334:	200e      	movs	r0, #14
 801b336:	183b      	adds	r3, r7, r0
 801b338:	490e      	ldr	r1, [pc, #56]	@ (801b374 <USB_EPSetStall+0x9c>)
 801b33a:	400a      	ands	r2, r1
 801b33c:	801a      	strh	r2, [r3, #0]
 801b33e:	183b      	adds	r3, r7, r0
 801b340:	183a      	adds	r2, r7, r0
 801b342:	8812      	ldrh	r2, [r2, #0]
 801b344:	2180      	movs	r1, #128	@ 0x80
 801b346:	0149      	lsls	r1, r1, #5
 801b348:	404a      	eors	r2, r1
 801b34a:	801a      	strh	r2, [r3, #0]
 801b34c:	687a      	ldr	r2, [r7, #4]
 801b34e:	683b      	ldr	r3, [r7, #0]
 801b350:	781b      	ldrb	r3, [r3, #0]
 801b352:	009b      	lsls	r3, r3, #2
 801b354:	18d3      	adds	r3, r2, r3
 801b356:	183a      	adds	r2, r7, r0
 801b358:	8812      	ldrh	r2, [r2, #0]
 801b35a:	4905      	ldr	r1, [pc, #20]	@ (801b370 <USB_EPSetStall+0x98>)
 801b35c:	430a      	orrs	r2, r1
 801b35e:	b292      	uxth	r2, r2
 801b360:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b362:	2300      	movs	r3, #0
}
 801b364:	0018      	movs	r0, r3
 801b366:	46bd      	mov	sp, r7
 801b368:	b004      	add	sp, #16
 801b36a:	bd80      	pop	{r7, pc}
 801b36c:	ffff8fbf 	.word	0xffff8fbf
 801b370:	ffff8080 	.word	0xffff8080
 801b374:	ffffbf8f 	.word	0xffffbf8f

0801b378 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b086      	sub	sp, #24
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
 801b380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801b382:	683b      	ldr	r3, [r7, #0]
 801b384:	7b1b      	ldrb	r3, [r3, #12]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d000      	beq.n	801b38c <USB_EPClearStall+0x14>
 801b38a:	e095      	b.n	801b4b8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801b38c:	683b      	ldr	r3, [r7, #0]
 801b38e:	785b      	ldrb	r3, [r3, #1]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d046      	beq.n	801b422 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801b394:	687a      	ldr	r2, [r7, #4]
 801b396:	683b      	ldr	r3, [r7, #0]
 801b398:	781b      	ldrb	r3, [r3, #0]
 801b39a:	009b      	lsls	r3, r3, #2
 801b39c:	18d2      	adds	r2, r2, r3
 801b39e:	2110      	movs	r1, #16
 801b3a0:	187b      	adds	r3, r7, r1
 801b3a2:	8812      	ldrh	r2, [r2, #0]
 801b3a4:	801a      	strh	r2, [r3, #0]
 801b3a6:	187b      	adds	r3, r7, r1
 801b3a8:	881b      	ldrh	r3, [r3, #0]
 801b3aa:	2240      	movs	r2, #64	@ 0x40
 801b3ac:	4013      	ands	r3, r2
 801b3ae:	d016      	beq.n	801b3de <USB_EPClearStall+0x66>
 801b3b0:	687a      	ldr	r2, [r7, #4]
 801b3b2:	683b      	ldr	r3, [r7, #0]
 801b3b4:	781b      	ldrb	r3, [r3, #0]
 801b3b6:	009b      	lsls	r3, r3, #2
 801b3b8:	18d3      	adds	r3, r2, r3
 801b3ba:	881b      	ldrh	r3, [r3, #0]
 801b3bc:	b29a      	uxth	r2, r3
 801b3be:	200e      	movs	r0, #14
 801b3c0:	183b      	adds	r3, r7, r0
 801b3c2:	4940      	ldr	r1, [pc, #256]	@ (801b4c4 <USB_EPClearStall+0x14c>)
 801b3c4:	400a      	ands	r2, r1
 801b3c6:	801a      	strh	r2, [r3, #0]
 801b3c8:	687a      	ldr	r2, [r7, #4]
 801b3ca:	683b      	ldr	r3, [r7, #0]
 801b3cc:	781b      	ldrb	r3, [r3, #0]
 801b3ce:	009b      	lsls	r3, r3, #2
 801b3d0:	18d3      	adds	r3, r2, r3
 801b3d2:	183a      	adds	r2, r7, r0
 801b3d4:	8812      	ldrh	r2, [r2, #0]
 801b3d6:	493c      	ldr	r1, [pc, #240]	@ (801b4c8 <USB_EPClearStall+0x150>)
 801b3d8:	430a      	orrs	r2, r1
 801b3da:	b292      	uxth	r2, r2
 801b3dc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b3de:	683b      	ldr	r3, [r7, #0]
 801b3e0:	78db      	ldrb	r3, [r3, #3]
 801b3e2:	2b01      	cmp	r3, #1
 801b3e4:	d068      	beq.n	801b4b8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b3e6:	687a      	ldr	r2, [r7, #4]
 801b3e8:	683b      	ldr	r3, [r7, #0]
 801b3ea:	781b      	ldrb	r3, [r3, #0]
 801b3ec:	009b      	lsls	r3, r3, #2
 801b3ee:	18d3      	adds	r3, r2, r3
 801b3f0:	881b      	ldrh	r3, [r3, #0]
 801b3f2:	b29a      	uxth	r2, r3
 801b3f4:	200c      	movs	r0, #12
 801b3f6:	183b      	adds	r3, r7, r0
 801b3f8:	4934      	ldr	r1, [pc, #208]	@ (801b4cc <USB_EPClearStall+0x154>)
 801b3fa:	400a      	ands	r2, r1
 801b3fc:	801a      	strh	r2, [r3, #0]
 801b3fe:	183b      	adds	r3, r7, r0
 801b400:	183a      	adds	r2, r7, r0
 801b402:	8812      	ldrh	r2, [r2, #0]
 801b404:	2120      	movs	r1, #32
 801b406:	404a      	eors	r2, r1
 801b408:	801a      	strh	r2, [r3, #0]
 801b40a:	687a      	ldr	r2, [r7, #4]
 801b40c:	683b      	ldr	r3, [r7, #0]
 801b40e:	781b      	ldrb	r3, [r3, #0]
 801b410:	009b      	lsls	r3, r3, #2
 801b412:	18d3      	adds	r3, r2, r3
 801b414:	183a      	adds	r2, r7, r0
 801b416:	8812      	ldrh	r2, [r2, #0]
 801b418:	492d      	ldr	r1, [pc, #180]	@ (801b4d0 <USB_EPClearStall+0x158>)
 801b41a:	430a      	orrs	r2, r1
 801b41c:	b292      	uxth	r2, r2
 801b41e:	801a      	strh	r2, [r3, #0]
 801b420:	e04a      	b.n	801b4b8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801b422:	687a      	ldr	r2, [r7, #4]
 801b424:	683b      	ldr	r3, [r7, #0]
 801b426:	781b      	ldrb	r3, [r3, #0]
 801b428:	009b      	lsls	r3, r3, #2
 801b42a:	18d2      	adds	r2, r2, r3
 801b42c:	2116      	movs	r1, #22
 801b42e:	187b      	adds	r3, r7, r1
 801b430:	8812      	ldrh	r2, [r2, #0]
 801b432:	801a      	strh	r2, [r3, #0]
 801b434:	187b      	adds	r3, r7, r1
 801b436:	881a      	ldrh	r2, [r3, #0]
 801b438:	2380      	movs	r3, #128	@ 0x80
 801b43a:	01db      	lsls	r3, r3, #7
 801b43c:	4013      	ands	r3, r2
 801b43e:	d016      	beq.n	801b46e <USB_EPClearStall+0xf6>
 801b440:	687a      	ldr	r2, [r7, #4]
 801b442:	683b      	ldr	r3, [r7, #0]
 801b444:	781b      	ldrb	r3, [r3, #0]
 801b446:	009b      	lsls	r3, r3, #2
 801b448:	18d3      	adds	r3, r2, r3
 801b44a:	881b      	ldrh	r3, [r3, #0]
 801b44c:	b29a      	uxth	r2, r3
 801b44e:	2014      	movs	r0, #20
 801b450:	183b      	adds	r3, r7, r0
 801b452:	491c      	ldr	r1, [pc, #112]	@ (801b4c4 <USB_EPClearStall+0x14c>)
 801b454:	400a      	ands	r2, r1
 801b456:	801a      	strh	r2, [r3, #0]
 801b458:	687a      	ldr	r2, [r7, #4]
 801b45a:	683b      	ldr	r3, [r7, #0]
 801b45c:	781b      	ldrb	r3, [r3, #0]
 801b45e:	009b      	lsls	r3, r3, #2
 801b460:	18d3      	adds	r3, r2, r3
 801b462:	183a      	adds	r2, r7, r0
 801b464:	8812      	ldrh	r2, [r2, #0]
 801b466:	491b      	ldr	r1, [pc, #108]	@ (801b4d4 <USB_EPClearStall+0x15c>)
 801b468:	430a      	orrs	r2, r1
 801b46a:	b292      	uxth	r2, r2
 801b46c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b46e:	687a      	ldr	r2, [r7, #4]
 801b470:	683b      	ldr	r3, [r7, #0]
 801b472:	781b      	ldrb	r3, [r3, #0]
 801b474:	009b      	lsls	r3, r3, #2
 801b476:	18d3      	adds	r3, r2, r3
 801b478:	881b      	ldrh	r3, [r3, #0]
 801b47a:	b29a      	uxth	r2, r3
 801b47c:	2012      	movs	r0, #18
 801b47e:	183b      	adds	r3, r7, r0
 801b480:	4915      	ldr	r1, [pc, #84]	@ (801b4d8 <USB_EPClearStall+0x160>)
 801b482:	400a      	ands	r2, r1
 801b484:	801a      	strh	r2, [r3, #0]
 801b486:	183b      	adds	r3, r7, r0
 801b488:	183a      	adds	r2, r7, r0
 801b48a:	8812      	ldrh	r2, [r2, #0]
 801b48c:	2180      	movs	r1, #128	@ 0x80
 801b48e:	0149      	lsls	r1, r1, #5
 801b490:	404a      	eors	r2, r1
 801b492:	801a      	strh	r2, [r3, #0]
 801b494:	183b      	adds	r3, r7, r0
 801b496:	183a      	adds	r2, r7, r0
 801b498:	8812      	ldrh	r2, [r2, #0]
 801b49a:	2180      	movs	r1, #128	@ 0x80
 801b49c:	0189      	lsls	r1, r1, #6
 801b49e:	404a      	eors	r2, r1
 801b4a0:	801a      	strh	r2, [r3, #0]
 801b4a2:	687a      	ldr	r2, [r7, #4]
 801b4a4:	683b      	ldr	r3, [r7, #0]
 801b4a6:	781b      	ldrb	r3, [r3, #0]
 801b4a8:	009b      	lsls	r3, r3, #2
 801b4aa:	18d3      	adds	r3, r2, r3
 801b4ac:	183a      	adds	r2, r7, r0
 801b4ae:	8812      	ldrh	r2, [r2, #0]
 801b4b0:	4907      	ldr	r1, [pc, #28]	@ (801b4d0 <USB_EPClearStall+0x158>)
 801b4b2:	430a      	orrs	r2, r1
 801b4b4:	b292      	uxth	r2, r2
 801b4b6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801b4b8:	2300      	movs	r3, #0
}
 801b4ba:	0018      	movs	r0, r3
 801b4bc:	46bd      	mov	sp, r7
 801b4be:	b006      	add	sp, #24
 801b4c0:	bd80      	pop	{r7, pc}
 801b4c2:	46c0      	nop			@ (mov r8, r8)
 801b4c4:	ffff8f8f 	.word	0xffff8f8f
 801b4c8:	ffff80c0 	.word	0xffff80c0
 801b4cc:	ffff8fbf 	.word	0xffff8fbf
 801b4d0:	ffff8080 	.word	0xffff8080
 801b4d4:	ffffc080 	.word	0xffffc080
 801b4d8:	ffffbf8f 	.word	0xffffbf8f

0801b4dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b082      	sub	sp, #8
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
 801b4e4:	000a      	movs	r2, r1
 801b4e6:	1cfb      	adds	r3, r7, #3
 801b4e8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801b4ea:	1cfb      	adds	r3, r7, #3
 801b4ec:	781b      	ldrb	r3, [r3, #0]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d103      	bne.n	801b4fa <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	224c      	movs	r2, #76	@ 0x4c
 801b4f6:	2180      	movs	r1, #128	@ 0x80
 801b4f8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801b4fa:	2300      	movs	r3, #0
}
 801b4fc:	0018      	movs	r0, r3
 801b4fe:	46bd      	mov	sp, r7
 801b500:	b002      	add	sp, #8
 801b502:	bd80      	pop	{r7, pc}

0801b504 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b082      	sub	sp, #8
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	2258      	movs	r2, #88	@ 0x58
 801b510:	5a9b      	ldrh	r3, [r3, r2]
 801b512:	b29b      	uxth	r3, r3
 801b514:	4a05      	ldr	r2, [pc, #20]	@ (801b52c <USB_DevConnect+0x28>)
 801b516:	4313      	orrs	r3, r2
 801b518:	b299      	uxth	r1, r3
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	2258      	movs	r2, #88	@ 0x58
 801b51e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b520:	2300      	movs	r3, #0
}
 801b522:	0018      	movs	r0, r3
 801b524:	46bd      	mov	sp, r7
 801b526:	b002      	add	sp, #8
 801b528:	bd80      	pop	{r7, pc}
 801b52a:	46c0      	nop			@ (mov r8, r8)
 801b52c:	ffff8000 	.word	0xffff8000

0801b530 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801b530:	b580      	push	{r7, lr}
 801b532:	b084      	sub	sp, #16
 801b534:	af00      	add	r7, sp, #0
 801b536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	2244      	movs	r2, #68	@ 0x44
 801b53c:	5a9b      	ldrh	r3, [r3, r2]
 801b53e:	b29b      	uxth	r3, r3
 801b540:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801b542:	68fb      	ldr	r3, [r7, #12]
}
 801b544:	0018      	movs	r0, r3
 801b546:	46bd      	mov	sp, r7
 801b548:	b004      	add	sp, #16
 801b54a:	bd80      	pop	{r7, pc}

0801b54c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b08a      	sub	sp, #40	@ 0x28
 801b550:	af00      	add	r7, sp, #0
 801b552:	60f8      	str	r0, [r7, #12]
 801b554:	60b9      	str	r1, [r7, #8]
 801b556:	0019      	movs	r1, r3
 801b558:	1dbb      	adds	r3, r7, #6
 801b55a:	801a      	strh	r2, [r3, #0]
 801b55c:	1d3b      	adds	r3, r7, #4
 801b55e:	1c0a      	adds	r2, r1, #0
 801b560:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801b562:	1d3b      	adds	r3, r7, #4
 801b564:	881b      	ldrh	r3, [r3, #0]
 801b566:	3301      	adds	r3, #1
 801b568:	085b      	lsrs	r3, r3, #1
 801b56a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b56c:	68fb      	ldr	r3, [r7, #12]
 801b56e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b574:	1dbb      	adds	r3, r7, #6
 801b576:	881a      	ldrh	r2, [r3, #0]
 801b578:	697b      	ldr	r3, [r7, #20]
 801b57a:	18d3      	adds	r3, r2, r3
 801b57c:	2280      	movs	r2, #128	@ 0x80
 801b57e:	00d2      	lsls	r2, r2, #3
 801b580:	4694      	mov	ip, r2
 801b582:	4463      	add	r3, ip
 801b584:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b586:	69bb      	ldr	r3, [r7, #24]
 801b588:	627b      	str	r3, [r7, #36]	@ 0x24
 801b58a:	e020      	b.n	801b5ce <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b58c:	69fb      	ldr	r3, [r7, #28]
 801b58e:	781a      	ldrb	r2, [r3, #0]
 801b590:	2112      	movs	r1, #18
 801b592:	187b      	adds	r3, r7, r1
 801b594:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b596:	69fb      	ldr	r3, [r7, #28]
 801b598:	3301      	adds	r3, #1
 801b59a:	781b      	ldrb	r3, [r3, #0]
 801b59c:	021b      	lsls	r3, r3, #8
 801b59e:	b21a      	sxth	r2, r3
 801b5a0:	187b      	adds	r3, r7, r1
 801b5a2:	2000      	movs	r0, #0
 801b5a4:	5e1b      	ldrsh	r3, [r3, r0]
 801b5a6:	4313      	orrs	r3, r2
 801b5a8:	b21a      	sxth	r2, r3
 801b5aa:	187b      	adds	r3, r7, r1
 801b5ac:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b5ae:	6a3b      	ldr	r3, [r7, #32]
 801b5b0:	187a      	adds	r2, r7, r1
 801b5b2:	8812      	ldrh	r2, [r2, #0]
 801b5b4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b5b6:	6a3b      	ldr	r3, [r7, #32]
 801b5b8:	3302      	adds	r3, #2
 801b5ba:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b5bc:	69fb      	ldr	r3, [r7, #28]
 801b5be:	3301      	adds	r3, #1
 801b5c0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b5c2:	69fb      	ldr	r3, [r7, #28]
 801b5c4:	3301      	adds	r3, #1
 801b5c6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5ca:	3b01      	subs	r3, #1
 801b5cc:	627b      	str	r3, [r7, #36]	@ 0x24
 801b5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d1db      	bne.n	801b58c <USB_WritePMA+0x40>
  }
}
 801b5d4:	46c0      	nop			@ (mov r8, r8)
 801b5d6:	46c0      	nop			@ (mov r8, r8)
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	b00a      	add	sp, #40	@ 0x28
 801b5dc:	bd80      	pop	{r7, pc}

0801b5de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b5de:	b580      	push	{r7, lr}
 801b5e0:	b08a      	sub	sp, #40	@ 0x28
 801b5e2:	af00      	add	r7, sp, #0
 801b5e4:	60f8      	str	r0, [r7, #12]
 801b5e6:	60b9      	str	r1, [r7, #8]
 801b5e8:	0019      	movs	r1, r3
 801b5ea:	1dbb      	adds	r3, r7, #6
 801b5ec:	801a      	strh	r2, [r3, #0]
 801b5ee:	1d3b      	adds	r3, r7, #4
 801b5f0:	1c0a      	adds	r2, r1, #0
 801b5f2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b5f4:	1d3b      	adds	r3, r7, #4
 801b5f6:	881b      	ldrh	r3, [r3, #0]
 801b5f8:	085b      	lsrs	r3, r3, #1
 801b5fa:	b29b      	uxth	r3, r3
 801b5fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b606:	1dbb      	adds	r3, r7, #6
 801b608:	881a      	ldrh	r2, [r3, #0]
 801b60a:	697b      	ldr	r3, [r7, #20]
 801b60c:	18d3      	adds	r3, r2, r3
 801b60e:	2280      	movs	r2, #128	@ 0x80
 801b610:	00d2      	lsls	r2, r2, #3
 801b612:	4694      	mov	ip, r2
 801b614:	4463      	add	r3, ip
 801b616:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b618:	69bb      	ldr	r3, [r7, #24]
 801b61a:	627b      	str	r3, [r7, #36]	@ 0x24
 801b61c:	e018      	b.n	801b650 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b61e:	6a3b      	ldr	r3, [r7, #32]
 801b620:	881b      	ldrh	r3, [r3, #0]
 801b622:	b29b      	uxth	r3, r3
 801b624:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b626:	6a3b      	ldr	r3, [r7, #32]
 801b628:	3302      	adds	r3, #2
 801b62a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b62c:	693b      	ldr	r3, [r7, #16]
 801b62e:	b2da      	uxtb	r2, r3
 801b630:	69fb      	ldr	r3, [r7, #28]
 801b632:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b634:	69fb      	ldr	r3, [r7, #28]
 801b636:	3301      	adds	r3, #1
 801b638:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b63a:	693b      	ldr	r3, [r7, #16]
 801b63c:	0a1b      	lsrs	r3, r3, #8
 801b63e:	b2da      	uxtb	r2, r3
 801b640:	69fb      	ldr	r3, [r7, #28]
 801b642:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b644:	69fb      	ldr	r3, [r7, #28]
 801b646:	3301      	adds	r3, #1
 801b648:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b64c:	3b01      	subs	r3, #1
 801b64e:	627b      	str	r3, [r7, #36]	@ 0x24
 801b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b652:	2b00      	cmp	r3, #0
 801b654:	d1e3      	bne.n	801b61e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b656:	1d3b      	adds	r3, r7, #4
 801b658:	881b      	ldrh	r3, [r3, #0]
 801b65a:	2201      	movs	r2, #1
 801b65c:	4013      	ands	r3, r2
 801b65e:	b29b      	uxth	r3, r3
 801b660:	2b00      	cmp	r3, #0
 801b662:	d007      	beq.n	801b674 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b664:	6a3b      	ldr	r3, [r7, #32]
 801b666:	881b      	ldrh	r3, [r3, #0]
 801b668:	b29b      	uxth	r3, r3
 801b66a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b66c:	693b      	ldr	r3, [r7, #16]
 801b66e:	b2da      	uxtb	r2, r3
 801b670:	69fb      	ldr	r3, [r7, #28]
 801b672:	701a      	strb	r2, [r3, #0]
  }
}
 801b674:	46c0      	nop			@ (mov r8, r8)
 801b676:	46bd      	mov	sp, r7
 801b678:	b00a      	add	sp, #40	@ 0x28
 801b67a:	bd80      	pop	{r7, pc}

0801b67c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b67c:	b580      	push	{r7, lr}
 801b67e:	b084      	sub	sp, #16
 801b680:	af00      	add	r7, sp, #0
 801b682:	6078      	str	r0, [r7, #4]
 801b684:	000a      	movs	r2, r1
 801b686:	1cfb      	adds	r3, r7, #3
 801b688:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b68a:	230f      	movs	r3, #15
 801b68c:	18fb      	adds	r3, r7, r3
 801b68e:	2200      	movs	r2, #0
 801b690:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	7c1b      	ldrb	r3, [r3, #16]
 801b696:	2b00      	cmp	r3, #0
 801b698:	d116      	bne.n	801b6c8 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b69a:	2380      	movs	r3, #128	@ 0x80
 801b69c:	009b      	lsls	r3, r3, #2
 801b69e:	6878      	ldr	r0, [r7, #4]
 801b6a0:	2202      	movs	r2, #2
 801b6a2:	2181      	movs	r1, #129	@ 0x81
 801b6a4:	f002 f8eb 	bl	801d87e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	2201      	movs	r2, #1
 801b6ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b6ae:	2380      	movs	r3, #128	@ 0x80
 801b6b0:	009b      	lsls	r3, r3, #2
 801b6b2:	6878      	ldr	r0, [r7, #4]
 801b6b4:	2202      	movs	r2, #2
 801b6b6:	2101      	movs	r1, #1
 801b6b8:	f002 f8e1 	bl	801d87e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b6bc:	687a      	ldr	r2, [r7, #4]
 801b6be:	23b6      	movs	r3, #182	@ 0xb6
 801b6c0:	005b      	lsls	r3, r3, #1
 801b6c2:	2101      	movs	r1, #1
 801b6c4:	50d1      	str	r1, [r2, r3]
 801b6c6:	e013      	b.n	801b6f0 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b6c8:	6878      	ldr	r0, [r7, #4]
 801b6ca:	2340      	movs	r3, #64	@ 0x40
 801b6cc:	2202      	movs	r2, #2
 801b6ce:	2181      	movs	r1, #129	@ 0x81
 801b6d0:	f002 f8d5 	bl	801d87e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	2201      	movs	r2, #1
 801b6d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b6da:	6878      	ldr	r0, [r7, #4]
 801b6dc:	2340      	movs	r3, #64	@ 0x40
 801b6de:	2202      	movs	r2, #2
 801b6e0:	2101      	movs	r1, #1
 801b6e2:	f002 f8cc 	bl	801d87e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b6e6:	687a      	ldr	r2, [r7, #4]
 801b6e8:	23b6      	movs	r3, #182	@ 0xb6
 801b6ea:	005b      	lsls	r3, r3, #1
 801b6ec:	2101      	movs	r1, #1
 801b6ee:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b6f0:	6878      	ldr	r0, [r7, #4]
 801b6f2:	2308      	movs	r3, #8
 801b6f4:	2203      	movs	r2, #3
 801b6f6:	2182      	movs	r1, #130	@ 0x82
 801b6f8:	f002 f8c1 	bl	801d87e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	2201      	movs	r2, #1
 801b700:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b702:	2387      	movs	r3, #135	@ 0x87
 801b704:	009b      	lsls	r3, r3, #2
 801b706:	0018      	movs	r0, r3
 801b708:	f002 fa52 	bl	801dbb0 <USBD_static_malloc>
 801b70c:	0001      	movs	r1, r0
 801b70e:	687a      	ldr	r2, [r7, #4]
 801b710:	23ae      	movs	r3, #174	@ 0xae
 801b712:	009b      	lsls	r3, r3, #2
 801b714:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b716:	687a      	ldr	r2, [r7, #4]
 801b718:	23ae      	movs	r3, #174	@ 0xae
 801b71a:	009b      	lsls	r3, r3, #2
 801b71c:	58d3      	ldr	r3, [r2, r3]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d104      	bne.n	801b72c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b722:	230f      	movs	r3, #15
 801b724:	18fb      	adds	r3, r7, r3
 801b726:	2201      	movs	r2, #1
 801b728:	701a      	strb	r2, [r3, #0]
 801b72a:	e02c      	b.n	801b786 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b72c:	687a      	ldr	r2, [r7, #4]
 801b72e:	23ae      	movs	r3, #174	@ 0xae
 801b730:	009b      	lsls	r3, r3, #2
 801b732:	58d3      	ldr	r3, [r2, r3]
 801b734:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b736:	687a      	ldr	r2, [r7, #4]
 801b738:	23af      	movs	r3, #175	@ 0xaf
 801b73a:	009b      	lsls	r3, r3, #2
 801b73c:	58d3      	ldr	r3, [r2, r3]
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b742:	68ba      	ldr	r2, [r7, #8]
 801b744:	2385      	movs	r3, #133	@ 0x85
 801b746:	009b      	lsls	r3, r3, #2
 801b748:	2100      	movs	r1, #0
 801b74a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b74c:	68ba      	ldr	r2, [r7, #8]
 801b74e:	2386      	movs	r3, #134	@ 0x86
 801b750:	009b      	lsls	r3, r3, #2
 801b752:	2100      	movs	r1, #0
 801b754:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	7c1b      	ldrb	r3, [r3, #16]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d10a      	bne.n	801b774 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b75e:	68ba      	ldr	r2, [r7, #8]
 801b760:	2381      	movs	r3, #129	@ 0x81
 801b762:	009b      	lsls	r3, r3, #2
 801b764:	58d2      	ldr	r2, [r2, r3]
 801b766:	2380      	movs	r3, #128	@ 0x80
 801b768:	009b      	lsls	r3, r3, #2
 801b76a:	6878      	ldr	r0, [r7, #4]
 801b76c:	2101      	movs	r1, #1
 801b76e:	f002 f9d1 	bl	801db14 <USBD_LL_PrepareReceive>
 801b772:	e008      	b.n	801b786 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b774:	68ba      	ldr	r2, [r7, #8]
 801b776:	2381      	movs	r3, #129	@ 0x81
 801b778:	009b      	lsls	r3, r3, #2
 801b77a:	58d2      	ldr	r2, [r2, r3]
 801b77c:	6878      	ldr	r0, [r7, #4]
 801b77e:	2340      	movs	r3, #64	@ 0x40
 801b780:	2101      	movs	r1, #1
 801b782:	f002 f9c7 	bl	801db14 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b786:	230f      	movs	r3, #15
 801b788:	18fb      	adds	r3, r7, r3
 801b78a:	781b      	ldrb	r3, [r3, #0]
}
 801b78c:	0018      	movs	r0, r3
 801b78e:	46bd      	mov	sp, r7
 801b790:	b004      	add	sp, #16
 801b792:	bd80      	pop	{r7, pc}

0801b794 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b084      	sub	sp, #16
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
 801b79c:	000a      	movs	r2, r1
 801b79e:	1cfb      	adds	r3, r7, #3
 801b7a0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b7a2:	230f      	movs	r3, #15
 801b7a4:	18fb      	adds	r3, r7, r3
 801b7a6:	2200      	movs	r2, #0
 801b7a8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	2181      	movs	r1, #129	@ 0x81
 801b7ae:	0018      	movs	r0, r3
 801b7b0:	f002 f89c 	bl	801d8ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	2200      	movs	r2, #0
 801b7b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	2101      	movs	r1, #1
 801b7be:	0018      	movs	r0, r3
 801b7c0:	f002 f894 	bl	801d8ec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b7c4:	687a      	ldr	r2, [r7, #4]
 801b7c6:	23b6      	movs	r3, #182	@ 0xb6
 801b7c8:	005b      	lsls	r3, r3, #1
 801b7ca:	2100      	movs	r1, #0
 801b7cc:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	2182      	movs	r1, #130	@ 0x82
 801b7d2:	0018      	movs	r0, r3
 801b7d4:	f002 f88a 	bl	801d8ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	2200      	movs	r2, #0
 801b7dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b7de:	687a      	ldr	r2, [r7, #4]
 801b7e0:	23ae      	movs	r3, #174	@ 0xae
 801b7e2:	009b      	lsls	r3, r3, #2
 801b7e4:	58d3      	ldr	r3, [r2, r3]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d011      	beq.n	801b80e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b7ea:	687a      	ldr	r2, [r7, #4]
 801b7ec:	23af      	movs	r3, #175	@ 0xaf
 801b7ee:	009b      	lsls	r3, r3, #2
 801b7f0:	58d3      	ldr	r3, [r2, r3]
 801b7f2:	685b      	ldr	r3, [r3, #4]
 801b7f4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b7f6:	687a      	ldr	r2, [r7, #4]
 801b7f8:	23ae      	movs	r3, #174	@ 0xae
 801b7fa:	009b      	lsls	r3, r3, #2
 801b7fc:	58d3      	ldr	r3, [r2, r3]
 801b7fe:	0018      	movs	r0, r3
 801b800:	f002 f9e2 	bl	801dbc8 <USBD_static_free>
    pdev->pClassData = NULL;
 801b804:	687a      	ldr	r2, [r7, #4]
 801b806:	23ae      	movs	r3, #174	@ 0xae
 801b808:	009b      	lsls	r3, r3, #2
 801b80a:	2100      	movs	r1, #0
 801b80c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b80e:	230f      	movs	r3, #15
 801b810:	18fb      	adds	r3, r7, r3
 801b812:	781b      	ldrb	r3, [r3, #0]
}
 801b814:	0018      	movs	r0, r3
 801b816:	46bd      	mov	sp, r7
 801b818:	b004      	add	sp, #16
 801b81a:	bd80      	pop	{r7, pc}

0801b81c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b086      	sub	sp, #24
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
 801b824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b826:	687a      	ldr	r2, [r7, #4]
 801b828:	23ae      	movs	r3, #174	@ 0xae
 801b82a:	009b      	lsls	r3, r3, #2
 801b82c:	58d3      	ldr	r3, [r2, r3]
 801b82e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b830:	230f      	movs	r3, #15
 801b832:	18fb      	adds	r3, r7, r3
 801b834:	2200      	movs	r2, #0
 801b836:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b838:	230c      	movs	r3, #12
 801b83a:	18fb      	adds	r3, r7, r3
 801b83c:	2200      	movs	r2, #0
 801b83e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b840:	2317      	movs	r3, #23
 801b842:	18fb      	adds	r3, r7, r3
 801b844:	2200      	movs	r2, #0
 801b846:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b848:	683b      	ldr	r3, [r7, #0]
 801b84a:	781b      	ldrb	r3, [r3, #0]
 801b84c:	001a      	movs	r2, r3
 801b84e:	2360      	movs	r3, #96	@ 0x60
 801b850:	4013      	ands	r3, r2
 801b852:	d03d      	beq.n	801b8d0 <USBD_CDC_Setup+0xb4>
 801b854:	2b20      	cmp	r3, #32
 801b856:	d000      	beq.n	801b85a <USBD_CDC_Setup+0x3e>
 801b858:	e094      	b.n	801b984 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b85a:	683b      	ldr	r3, [r7, #0]
 801b85c:	88db      	ldrh	r3, [r3, #6]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d02b      	beq.n	801b8ba <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b862:	683b      	ldr	r3, [r7, #0]
 801b864:	781b      	ldrb	r3, [r3, #0]
 801b866:	b25b      	sxtb	r3, r3
 801b868:	2b00      	cmp	r3, #0
 801b86a:	da12      	bge.n	801b892 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b86c:	687a      	ldr	r2, [r7, #4]
 801b86e:	23af      	movs	r3, #175	@ 0xaf
 801b870:	009b      	lsls	r3, r3, #2
 801b872:	58d3      	ldr	r3, [r2, r3]
 801b874:	689b      	ldr	r3, [r3, #8]
 801b876:	683a      	ldr	r2, [r7, #0]
 801b878:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b87a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b87c:	683a      	ldr	r2, [r7, #0]
 801b87e:	88d2      	ldrh	r2, [r2, #6]
 801b880:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b882:	6939      	ldr	r1, [r7, #16]
 801b884:	683b      	ldr	r3, [r7, #0]
 801b886:	88da      	ldrh	r2, [r3, #6]
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	0018      	movs	r0, r3
 801b88c:	f001 fbaf 	bl	801cfee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b890:	e083      	b.n	801b99a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b892:	683b      	ldr	r3, [r7, #0]
 801b894:	7859      	ldrb	r1, [r3, #1]
 801b896:	693a      	ldr	r2, [r7, #16]
 801b898:	2380      	movs	r3, #128	@ 0x80
 801b89a:	009b      	lsls	r3, r3, #2
 801b89c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b89e:	683b      	ldr	r3, [r7, #0]
 801b8a0:	88db      	ldrh	r3, [r3, #6]
 801b8a2:	b2d9      	uxtb	r1, r3
 801b8a4:	693b      	ldr	r3, [r7, #16]
 801b8a6:	4a40      	ldr	r2, [pc, #256]	@ (801b9a8 <USBD_CDC_Setup+0x18c>)
 801b8a8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b8aa:	6939      	ldr	r1, [r7, #16]
 801b8ac:	683b      	ldr	r3, [r7, #0]
 801b8ae:	88da      	ldrh	r2, [r3, #6]
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	0018      	movs	r0, r3
 801b8b4:	f001 fbce 	bl	801d054 <USBD_CtlPrepareRx>
      break;
 801b8b8:	e06f      	b.n	801b99a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b8ba:	687a      	ldr	r2, [r7, #4]
 801b8bc:	23af      	movs	r3, #175	@ 0xaf
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	58d3      	ldr	r3, [r2, r3]
 801b8c2:	689b      	ldr	r3, [r3, #8]
 801b8c4:	683a      	ldr	r2, [r7, #0]
 801b8c6:	7850      	ldrb	r0, [r2, #1]
 801b8c8:	6839      	ldr	r1, [r7, #0]
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	4798      	blx	r3
      break;
 801b8ce:	e064      	b.n	801b99a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b8d0:	683b      	ldr	r3, [r7, #0]
 801b8d2:	785b      	ldrb	r3, [r3, #1]
 801b8d4:	2b0b      	cmp	r3, #11
 801b8d6:	d037      	beq.n	801b948 <USBD_CDC_Setup+0x12c>
 801b8d8:	dc47      	bgt.n	801b96a <USBD_CDC_Setup+0x14e>
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d002      	beq.n	801b8e4 <USBD_CDC_Setup+0xc8>
 801b8de:	2b0a      	cmp	r3, #10
 801b8e0:	d019      	beq.n	801b916 <USBD_CDC_Setup+0xfa>
 801b8e2:	e042      	b.n	801b96a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b8e4:	687a      	ldr	r2, [r7, #4]
 801b8e6:	23a7      	movs	r3, #167	@ 0xa7
 801b8e8:	009b      	lsls	r3, r3, #2
 801b8ea:	5cd3      	ldrb	r3, [r2, r3]
 801b8ec:	2b03      	cmp	r3, #3
 801b8ee:	d107      	bne.n	801b900 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b8f0:	230c      	movs	r3, #12
 801b8f2:	18f9      	adds	r1, r7, r3
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	2202      	movs	r2, #2
 801b8f8:	0018      	movs	r0, r3
 801b8fa:	f001 fb78 	bl	801cfee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b8fe:	e040      	b.n	801b982 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b900:	683a      	ldr	r2, [r7, #0]
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	0011      	movs	r1, r2
 801b906:	0018      	movs	r0, r3
 801b908:	f001 faf3 	bl	801cef2 <USBD_CtlError>
            ret = USBD_FAIL;
 801b90c:	2317      	movs	r3, #23
 801b90e:	18fb      	adds	r3, r7, r3
 801b910:	2202      	movs	r2, #2
 801b912:	701a      	strb	r2, [r3, #0]
          break;
 801b914:	e035      	b.n	801b982 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b916:	687a      	ldr	r2, [r7, #4]
 801b918:	23a7      	movs	r3, #167	@ 0xa7
 801b91a:	009b      	lsls	r3, r3, #2
 801b91c:	5cd3      	ldrb	r3, [r2, r3]
 801b91e:	2b03      	cmp	r3, #3
 801b920:	d107      	bne.n	801b932 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b922:	230f      	movs	r3, #15
 801b924:	18f9      	adds	r1, r7, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	2201      	movs	r2, #1
 801b92a:	0018      	movs	r0, r3
 801b92c:	f001 fb5f 	bl	801cfee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b930:	e027      	b.n	801b982 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b932:	683a      	ldr	r2, [r7, #0]
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	0011      	movs	r1, r2
 801b938:	0018      	movs	r0, r3
 801b93a:	f001 fada 	bl	801cef2 <USBD_CtlError>
            ret = USBD_FAIL;
 801b93e:	2317      	movs	r3, #23
 801b940:	18fb      	adds	r3, r7, r3
 801b942:	2202      	movs	r2, #2
 801b944:	701a      	strb	r2, [r3, #0]
          break;
 801b946:	e01c      	b.n	801b982 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b948:	687a      	ldr	r2, [r7, #4]
 801b94a:	23a7      	movs	r3, #167	@ 0xa7
 801b94c:	009b      	lsls	r3, r3, #2
 801b94e:	5cd3      	ldrb	r3, [r2, r3]
 801b950:	2b03      	cmp	r3, #3
 801b952:	d015      	beq.n	801b980 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b954:	683a      	ldr	r2, [r7, #0]
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	0011      	movs	r1, r2
 801b95a:	0018      	movs	r0, r3
 801b95c:	f001 fac9 	bl	801cef2 <USBD_CtlError>
            ret = USBD_FAIL;
 801b960:	2317      	movs	r3, #23
 801b962:	18fb      	adds	r3, r7, r3
 801b964:	2202      	movs	r2, #2
 801b966:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b968:	e00a      	b.n	801b980 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b96a:	683a      	ldr	r2, [r7, #0]
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	0011      	movs	r1, r2
 801b970:	0018      	movs	r0, r3
 801b972:	f001 fabe 	bl	801cef2 <USBD_CtlError>
          ret = USBD_FAIL;
 801b976:	2317      	movs	r3, #23
 801b978:	18fb      	adds	r3, r7, r3
 801b97a:	2202      	movs	r2, #2
 801b97c:	701a      	strb	r2, [r3, #0]
          break;
 801b97e:	e000      	b.n	801b982 <USBD_CDC_Setup+0x166>
          break;
 801b980:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b982:	e00a      	b.n	801b99a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b984:	683a      	ldr	r2, [r7, #0]
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	0011      	movs	r1, r2
 801b98a:	0018      	movs	r0, r3
 801b98c:	f001 fab1 	bl	801cef2 <USBD_CtlError>
      ret = USBD_FAIL;
 801b990:	2317      	movs	r3, #23
 801b992:	18fb      	adds	r3, r7, r3
 801b994:	2202      	movs	r2, #2
 801b996:	701a      	strb	r2, [r3, #0]
      break;
 801b998:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b99a:	2317      	movs	r3, #23
 801b99c:	18fb      	adds	r3, r7, r3
 801b99e:	781b      	ldrb	r3, [r3, #0]
}
 801b9a0:	0018      	movs	r0, r3
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	b006      	add	sp, #24
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	00000201 	.word	0x00000201

0801b9ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b084      	sub	sp, #16
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	6078      	str	r0, [r7, #4]
 801b9b4:	000a      	movs	r2, r1
 801b9b6:	1cfb      	adds	r3, r7, #3
 801b9b8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b9ba:	687a      	ldr	r2, [r7, #4]
 801b9bc:	23ae      	movs	r3, #174	@ 0xae
 801b9be:	009b      	lsls	r3, r3, #2
 801b9c0:	58d3      	ldr	r3, [r2, r3]
 801b9c2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b9c4:	687a      	ldr	r2, [r7, #4]
 801b9c6:	23b0      	movs	r3, #176	@ 0xb0
 801b9c8:	009b      	lsls	r3, r3, #2
 801b9ca:	58d3      	ldr	r3, [r2, r3]
 801b9cc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b9ce:	687a      	ldr	r2, [r7, #4]
 801b9d0:	23ae      	movs	r3, #174	@ 0xae
 801b9d2:	009b      	lsls	r3, r3, #2
 801b9d4:	58d3      	ldr	r3, [r2, r3]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d03e      	beq.n	801ba58 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b9da:	1cfb      	adds	r3, r7, #3
 801b9dc:	781a      	ldrb	r2, [r3, #0]
 801b9de:	6879      	ldr	r1, [r7, #4]
 801b9e0:	0013      	movs	r3, r2
 801b9e2:	009b      	lsls	r3, r3, #2
 801b9e4:	189b      	adds	r3, r3, r2
 801b9e6:	009b      	lsls	r3, r3, #2
 801b9e8:	18cb      	adds	r3, r1, r3
 801b9ea:	331c      	adds	r3, #28
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d02b      	beq.n	801ba4a <USBD_CDC_DataIn+0x9e>
 801b9f2:	1cfb      	adds	r3, r7, #3
 801b9f4:	781a      	ldrb	r2, [r3, #0]
 801b9f6:	6879      	ldr	r1, [r7, #4]
 801b9f8:	0013      	movs	r3, r2
 801b9fa:	009b      	lsls	r3, r3, #2
 801b9fc:	189b      	adds	r3, r3, r2
 801b9fe:	009b      	lsls	r3, r3, #2
 801ba00:	18cb      	adds	r3, r1, r3
 801ba02:	331c      	adds	r3, #28
 801ba04:	6818      	ldr	r0, [r3, #0]
 801ba06:	1cfb      	adds	r3, r7, #3
 801ba08:	781a      	ldrb	r2, [r3, #0]
 801ba0a:	68b9      	ldr	r1, [r7, #8]
 801ba0c:	0013      	movs	r3, r2
 801ba0e:	009b      	lsls	r3, r3, #2
 801ba10:	189b      	adds	r3, r3, r2
 801ba12:	00db      	lsls	r3, r3, #3
 801ba14:	18cb      	adds	r3, r1, r3
 801ba16:	3338      	adds	r3, #56	@ 0x38
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	0019      	movs	r1, r3
 801ba1c:	f7e4 fc48 	bl	80002b0 <__aeabi_uidivmod>
 801ba20:	1e0b      	subs	r3, r1, #0
 801ba22:	d112      	bne.n	801ba4a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801ba24:	1cfb      	adds	r3, r7, #3
 801ba26:	781a      	ldrb	r2, [r3, #0]
 801ba28:	6879      	ldr	r1, [r7, #4]
 801ba2a:	0013      	movs	r3, r2
 801ba2c:	009b      	lsls	r3, r3, #2
 801ba2e:	189b      	adds	r3, r3, r2
 801ba30:	009b      	lsls	r3, r3, #2
 801ba32:	18cb      	adds	r3, r1, r3
 801ba34:	331c      	adds	r3, #28
 801ba36:	2200      	movs	r2, #0
 801ba38:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ba3a:	1cfb      	adds	r3, r7, #3
 801ba3c:	7819      	ldrb	r1, [r3, #0]
 801ba3e:	6878      	ldr	r0, [r7, #4]
 801ba40:	2300      	movs	r3, #0
 801ba42:	2200      	movs	r2, #0
 801ba44:	f002 f82f 	bl	801daa6 <USBD_LL_Transmit>
 801ba48:	e004      	b.n	801ba54 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801ba4a:	68fa      	ldr	r2, [r7, #12]
 801ba4c:	2385      	movs	r3, #133	@ 0x85
 801ba4e:	009b      	lsls	r3, r3, #2
 801ba50:	2100      	movs	r1, #0
 801ba52:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801ba54:	2300      	movs	r3, #0
 801ba56:	e000      	b.n	801ba5a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801ba58:	2302      	movs	r3, #2
  }
}
 801ba5a:	0018      	movs	r0, r3
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	b004      	add	sp, #16
 801ba60:	bd80      	pop	{r7, pc}

0801ba62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ba62:	b580      	push	{r7, lr}
 801ba64:	b084      	sub	sp, #16
 801ba66:	af00      	add	r7, sp, #0
 801ba68:	6078      	str	r0, [r7, #4]
 801ba6a:	000a      	movs	r2, r1
 801ba6c:	1cfb      	adds	r3, r7, #3
 801ba6e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ba70:	687a      	ldr	r2, [r7, #4]
 801ba72:	23ae      	movs	r3, #174	@ 0xae
 801ba74:	009b      	lsls	r3, r3, #2
 801ba76:	58d3      	ldr	r3, [r2, r3]
 801ba78:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801ba7a:	1cfb      	adds	r3, r7, #3
 801ba7c:	781a      	ldrb	r2, [r3, #0]
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	0011      	movs	r1, r2
 801ba82:	0018      	movs	r0, r3
 801ba84:	f002 f87d 	bl	801db82 <USBD_LL_GetRxDataSize>
 801ba88:	0001      	movs	r1, r0
 801ba8a:	68fa      	ldr	r2, [r7, #12]
 801ba8c:	2383      	movs	r3, #131	@ 0x83
 801ba8e:	009b      	lsls	r3, r3, #2
 801ba90:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801ba92:	687a      	ldr	r2, [r7, #4]
 801ba94:	23ae      	movs	r3, #174	@ 0xae
 801ba96:	009b      	lsls	r3, r3, #2
 801ba98:	58d3      	ldr	r3, [r2, r3]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d011      	beq.n	801bac2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801ba9e:	687a      	ldr	r2, [r7, #4]
 801baa0:	23af      	movs	r3, #175	@ 0xaf
 801baa2:	009b      	lsls	r3, r3, #2
 801baa4:	58d3      	ldr	r3, [r2, r3]
 801baa6:	68da      	ldr	r2, [r3, #12]
 801baa8:	68f9      	ldr	r1, [r7, #12]
 801baaa:	2381      	movs	r3, #129	@ 0x81
 801baac:	009b      	lsls	r3, r3, #2
 801baae:	58c8      	ldr	r0, [r1, r3]
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	2183      	movs	r1, #131	@ 0x83
 801bab4:	0089      	lsls	r1, r1, #2
 801bab6:	468c      	mov	ip, r1
 801bab8:	4463      	add	r3, ip
 801baba:	0019      	movs	r1, r3
 801babc:	4790      	blx	r2

    return USBD_OK;
 801babe:	2300      	movs	r3, #0
 801bac0:	e000      	b.n	801bac4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801bac2:	2302      	movs	r3, #2
  }
}
 801bac4:	0018      	movs	r0, r3
 801bac6:	46bd      	mov	sp, r7
 801bac8:	b004      	add	sp, #16
 801baca:	bd80      	pop	{r7, pc}

0801bacc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801bacc:	b590      	push	{r4, r7, lr}
 801bace:	b085      	sub	sp, #20
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bad4:	687a      	ldr	r2, [r7, #4]
 801bad6:	23ae      	movs	r3, #174	@ 0xae
 801bad8:	009b      	lsls	r3, r3, #2
 801bada:	58d3      	ldr	r3, [r2, r3]
 801badc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801bade:	687a      	ldr	r2, [r7, #4]
 801bae0:	23af      	movs	r3, #175	@ 0xaf
 801bae2:	009b      	lsls	r3, r3, #2
 801bae4:	58d3      	ldr	r3, [r2, r3]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d018      	beq.n	801bb1c <USBD_CDC_EP0_RxReady+0x50>
 801baea:	68fa      	ldr	r2, [r7, #12]
 801baec:	2380      	movs	r3, #128	@ 0x80
 801baee:	009b      	lsls	r3, r3, #2
 801baf0:	5cd3      	ldrb	r3, [r2, r3]
 801baf2:	2bff      	cmp	r3, #255	@ 0xff
 801baf4:	d012      	beq.n	801bb1c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801baf6:	687a      	ldr	r2, [r7, #4]
 801baf8:	23af      	movs	r3, #175	@ 0xaf
 801bafa:	009b      	lsls	r3, r3, #2
 801bafc:	58d3      	ldr	r3, [r2, r3]
 801bafe:	689b      	ldr	r3, [r3, #8]
 801bb00:	68f9      	ldr	r1, [r7, #12]
 801bb02:	2280      	movs	r2, #128	@ 0x80
 801bb04:	0092      	lsls	r2, r2, #2
 801bb06:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801bb08:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801bb0a:	68fa      	ldr	r2, [r7, #12]
 801bb0c:	4c06      	ldr	r4, [pc, #24]	@ (801bb28 <USBD_CDC_EP0_RxReady+0x5c>)
 801bb0e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801bb10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801bb12:	68fa      	ldr	r2, [r7, #12]
 801bb14:	2380      	movs	r3, #128	@ 0x80
 801bb16:	009b      	lsls	r3, r3, #2
 801bb18:	21ff      	movs	r1, #255	@ 0xff
 801bb1a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801bb1c:	2300      	movs	r3, #0
}
 801bb1e:	0018      	movs	r0, r3
 801bb20:	46bd      	mov	sp, r7
 801bb22:	b005      	add	sp, #20
 801bb24:	bd90      	pop	{r4, r7, pc}
 801bb26:	46c0      	nop			@ (mov r8, r8)
 801bb28:	00000201 	.word	0x00000201

0801bb2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b082      	sub	sp, #8
 801bb30:	af00      	add	r7, sp, #0
 801bb32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	2243      	movs	r2, #67	@ 0x43
 801bb38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801bb3a:	4b02      	ldr	r3, [pc, #8]	@ (801bb44 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801bb3c:	0018      	movs	r0, r3
 801bb3e:	46bd      	mov	sp, r7
 801bb40:	b002      	add	sp, #8
 801bb42:	bd80      	pop	{r7, pc}
 801bb44:	20000170 	.word	0x20000170

0801bb48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b082      	sub	sp, #8
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	2243      	movs	r2, #67	@ 0x43
 801bb54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801bb56:	4b02      	ldr	r3, [pc, #8]	@ (801bb60 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801bb58:	0018      	movs	r0, r3
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	b002      	add	sp, #8
 801bb5e:	bd80      	pop	{r7, pc}
 801bb60:	2000012c 	.word	0x2000012c

0801bb64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b082      	sub	sp, #8
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2243      	movs	r2, #67	@ 0x43
 801bb70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801bb72:	4b02      	ldr	r3, [pc, #8]	@ (801bb7c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801bb74:	0018      	movs	r0, r3
 801bb76:	46bd      	mov	sp, r7
 801bb78:	b002      	add	sp, #8
 801bb7a:	bd80      	pop	{r7, pc}
 801bb7c:	200001b4 	.word	0x200001b4

0801bb80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b082      	sub	sp, #8
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	220a      	movs	r2, #10
 801bb8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801bb8e:	4b02      	ldr	r3, [pc, #8]	@ (801bb98 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801bb90:	0018      	movs	r0, r3
 801bb92:	46bd      	mov	sp, r7
 801bb94:	b002      	add	sp, #8
 801bb96:	bd80      	pop	{r7, pc}
 801bb98:	200000e8 	.word	0x200000e8

0801bb9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b084      	sub	sp, #16
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	6078      	str	r0, [r7, #4]
 801bba4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801bba6:	200f      	movs	r0, #15
 801bba8:	183b      	adds	r3, r7, r0
 801bbaa:	2202      	movs	r2, #2
 801bbac:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801bbae:	683b      	ldr	r3, [r7, #0]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d007      	beq.n	801bbc4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801bbb4:	687a      	ldr	r2, [r7, #4]
 801bbb6:	23af      	movs	r3, #175	@ 0xaf
 801bbb8:	009b      	lsls	r3, r3, #2
 801bbba:	6839      	ldr	r1, [r7, #0]
 801bbbc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801bbbe:	183b      	adds	r3, r7, r0
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801bbc4:	230f      	movs	r3, #15
 801bbc6:	18fb      	adds	r3, r7, r3
 801bbc8:	781b      	ldrb	r3, [r3, #0]
}
 801bbca:	0018      	movs	r0, r3
 801bbcc:	46bd      	mov	sp, r7
 801bbce:	b004      	add	sp, #16
 801bbd0:	bd80      	pop	{r7, pc}

0801bbd2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801bbd2:	b580      	push	{r7, lr}
 801bbd4:	b086      	sub	sp, #24
 801bbd6:	af00      	add	r7, sp, #0
 801bbd8:	60f8      	str	r0, [r7, #12]
 801bbda:	60b9      	str	r1, [r7, #8]
 801bbdc:	1dbb      	adds	r3, r7, #6
 801bbde:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bbe0:	68fa      	ldr	r2, [r7, #12]
 801bbe2:	23ae      	movs	r3, #174	@ 0xae
 801bbe4:	009b      	lsls	r3, r3, #2
 801bbe6:	58d3      	ldr	r3, [r2, r3]
 801bbe8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801bbea:	697a      	ldr	r2, [r7, #20]
 801bbec:	2382      	movs	r3, #130	@ 0x82
 801bbee:	009b      	lsls	r3, r3, #2
 801bbf0:	68b9      	ldr	r1, [r7, #8]
 801bbf2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801bbf4:	1dbb      	adds	r3, r7, #6
 801bbf6:	8819      	ldrh	r1, [r3, #0]
 801bbf8:	697a      	ldr	r2, [r7, #20]
 801bbfa:	2384      	movs	r3, #132	@ 0x84
 801bbfc:	009b      	lsls	r3, r3, #2
 801bbfe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801bc00:	2300      	movs	r3, #0
}
 801bc02:	0018      	movs	r0, r3
 801bc04:	46bd      	mov	sp, r7
 801bc06:	b006      	add	sp, #24
 801bc08:	bd80      	pop	{r7, pc}

0801bc0a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801bc0a:	b580      	push	{r7, lr}
 801bc0c:	b084      	sub	sp, #16
 801bc0e:	af00      	add	r7, sp, #0
 801bc10:	6078      	str	r0, [r7, #4]
 801bc12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bc14:	687a      	ldr	r2, [r7, #4]
 801bc16:	23ae      	movs	r3, #174	@ 0xae
 801bc18:	009b      	lsls	r3, r3, #2
 801bc1a:	58d3      	ldr	r3, [r2, r3]
 801bc1c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801bc1e:	68fa      	ldr	r2, [r7, #12]
 801bc20:	2381      	movs	r3, #129	@ 0x81
 801bc22:	009b      	lsls	r3, r3, #2
 801bc24:	6839      	ldr	r1, [r7, #0]
 801bc26:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801bc28:	2300      	movs	r3, #0
}
 801bc2a:	0018      	movs	r0, r3
 801bc2c:	46bd      	mov	sp, r7
 801bc2e:	b004      	add	sp, #16
 801bc30:	bd80      	pop	{r7, pc}

0801bc32 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801bc32:	b580      	push	{r7, lr}
 801bc34:	b084      	sub	sp, #16
 801bc36:	af00      	add	r7, sp, #0
 801bc38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bc3a:	687a      	ldr	r2, [r7, #4]
 801bc3c:	23ae      	movs	r3, #174	@ 0xae
 801bc3e:	009b      	lsls	r3, r3, #2
 801bc40:	58d3      	ldr	r3, [r2, r3]
 801bc42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801bc44:	687a      	ldr	r2, [r7, #4]
 801bc46:	23ae      	movs	r3, #174	@ 0xae
 801bc48:	009b      	lsls	r3, r3, #2
 801bc4a:	58d3      	ldr	r3, [r2, r3]
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d022      	beq.n	801bc96 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801bc50:	68fa      	ldr	r2, [r7, #12]
 801bc52:	2385      	movs	r3, #133	@ 0x85
 801bc54:	009b      	lsls	r3, r3, #2
 801bc56:	58d3      	ldr	r3, [r2, r3]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d11a      	bne.n	801bc92 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801bc5c:	68fa      	ldr	r2, [r7, #12]
 801bc5e:	2385      	movs	r3, #133	@ 0x85
 801bc60:	009b      	lsls	r3, r3, #2
 801bc62:	2101      	movs	r1, #1
 801bc64:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801bc66:	68fa      	ldr	r2, [r7, #12]
 801bc68:	2384      	movs	r3, #132	@ 0x84
 801bc6a:	009b      	lsls	r3, r3, #2
 801bc6c:	58d2      	ldr	r2, [r2, r3]
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801bc72:	68fa      	ldr	r2, [r7, #12]
 801bc74:	2382      	movs	r3, #130	@ 0x82
 801bc76:	009b      	lsls	r3, r3, #2
 801bc78:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801bc7a:	68fa      	ldr	r2, [r7, #12]
 801bc7c:	2384      	movs	r3, #132	@ 0x84
 801bc7e:	009b      	lsls	r3, r3, #2
 801bc80:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801bc82:	b29b      	uxth	r3, r3
 801bc84:	6878      	ldr	r0, [r7, #4]
 801bc86:	000a      	movs	r2, r1
 801bc88:	2181      	movs	r1, #129	@ 0x81
 801bc8a:	f001 ff0c 	bl	801daa6 <USBD_LL_Transmit>

      return USBD_OK;
 801bc8e:	2300      	movs	r3, #0
 801bc90:	e002      	b.n	801bc98 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801bc92:	2301      	movs	r3, #1
 801bc94:	e000      	b.n	801bc98 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801bc96:	2302      	movs	r3, #2
  }
}
 801bc98:	0018      	movs	r0, r3
 801bc9a:	46bd      	mov	sp, r7
 801bc9c:	b004      	add	sp, #16
 801bc9e:	bd80      	pop	{r7, pc}

0801bca0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b084      	sub	sp, #16
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bca8:	687a      	ldr	r2, [r7, #4]
 801bcaa:	23ae      	movs	r3, #174	@ 0xae
 801bcac:	009b      	lsls	r3, r3, #2
 801bcae:	58d3      	ldr	r3, [r2, r3]
 801bcb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801bcb2:	687a      	ldr	r2, [r7, #4]
 801bcb4:	23ae      	movs	r3, #174	@ 0xae
 801bcb6:	009b      	lsls	r3, r3, #2
 801bcb8:	58d3      	ldr	r3, [r2, r3]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d019      	beq.n	801bcf2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	7c1b      	ldrb	r3, [r3, #16]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d10a      	bne.n	801bcdc <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801bcc6:	68fa      	ldr	r2, [r7, #12]
 801bcc8:	2381      	movs	r3, #129	@ 0x81
 801bcca:	009b      	lsls	r3, r3, #2
 801bccc:	58d2      	ldr	r2, [r2, r3]
 801bcce:	2380      	movs	r3, #128	@ 0x80
 801bcd0:	009b      	lsls	r3, r3, #2
 801bcd2:	6878      	ldr	r0, [r7, #4]
 801bcd4:	2101      	movs	r1, #1
 801bcd6:	f001 ff1d 	bl	801db14 <USBD_LL_PrepareReceive>
 801bcda:	e008      	b.n	801bcee <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801bcdc:	68fa      	ldr	r2, [r7, #12]
 801bcde:	2381      	movs	r3, #129	@ 0x81
 801bce0:	009b      	lsls	r3, r3, #2
 801bce2:	58d2      	ldr	r2, [r2, r3]
 801bce4:	6878      	ldr	r0, [r7, #4]
 801bce6:	2340      	movs	r3, #64	@ 0x40
 801bce8:	2101      	movs	r1, #1
 801bcea:	f001 ff13 	bl	801db14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801bcee:	2300      	movs	r3, #0
 801bcf0:	e000      	b.n	801bcf4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801bcf2:	2302      	movs	r3, #2
  }
}
 801bcf4:	0018      	movs	r0, r3
 801bcf6:	46bd      	mov	sp, r7
 801bcf8:	b004      	add	sp, #16
 801bcfa:	bd80      	pop	{r7, pc}

0801bcfc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801bcfc:	b580      	push	{r7, lr}
 801bcfe:	b084      	sub	sp, #16
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	60f8      	str	r0, [r7, #12]
 801bd04:	60b9      	str	r1, [r7, #8]
 801bd06:	1dfb      	adds	r3, r7, #7
 801bd08:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d101      	bne.n	801bd14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801bd10:	2302      	movs	r3, #2
 801bd12:	e020      	b.n	801bd56 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801bd14:	68fa      	ldr	r2, [r7, #12]
 801bd16:	23ad      	movs	r3, #173	@ 0xad
 801bd18:	009b      	lsls	r3, r3, #2
 801bd1a:	58d3      	ldr	r3, [r2, r3]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d004      	beq.n	801bd2a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801bd20:	68fa      	ldr	r2, [r7, #12]
 801bd22:	23ad      	movs	r3, #173	@ 0xad
 801bd24:	009b      	lsls	r3, r3, #2
 801bd26:	2100      	movs	r1, #0
 801bd28:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801bd2a:	68bb      	ldr	r3, [r7, #8]
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d004      	beq.n	801bd3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801bd30:	68fa      	ldr	r2, [r7, #12]
 801bd32:	23ac      	movs	r3, #172	@ 0xac
 801bd34:	009b      	lsls	r3, r3, #2
 801bd36:	68b9      	ldr	r1, [r7, #8]
 801bd38:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bd3a:	68fa      	ldr	r2, [r7, #12]
 801bd3c:	23a7      	movs	r3, #167	@ 0xa7
 801bd3e:	009b      	lsls	r3, r3, #2
 801bd40:	2101      	movs	r1, #1
 801bd42:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	1dfa      	adds	r2, r7, #7
 801bd48:	7812      	ldrb	r2, [r2, #0]
 801bd4a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	0018      	movs	r0, r3
 801bd50:	f001 fd0c 	bl	801d76c <USBD_LL_Init>

  return USBD_OK;
 801bd54:	2300      	movs	r3, #0
}
 801bd56:	0018      	movs	r0, r3
 801bd58:	46bd      	mov	sp, r7
 801bd5a:	b004      	add	sp, #16
 801bd5c:	bd80      	pop	{r7, pc}

0801bd5e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801bd5e:	b580      	push	{r7, lr}
 801bd60:	b084      	sub	sp, #16
 801bd62:	af00      	add	r7, sp, #0
 801bd64:	6078      	str	r0, [r7, #4]
 801bd66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801bd68:	200f      	movs	r0, #15
 801bd6a:	183b      	adds	r3, r7, r0
 801bd6c:	2200      	movs	r2, #0
 801bd6e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801bd70:	683b      	ldr	r3, [r7, #0]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d008      	beq.n	801bd88 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801bd76:	687a      	ldr	r2, [r7, #4]
 801bd78:	23ad      	movs	r3, #173	@ 0xad
 801bd7a:	009b      	lsls	r3, r3, #2
 801bd7c:	6839      	ldr	r1, [r7, #0]
 801bd7e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801bd80:	183b      	adds	r3, r7, r0
 801bd82:	2200      	movs	r2, #0
 801bd84:	701a      	strb	r2, [r3, #0]
 801bd86:	e003      	b.n	801bd90 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801bd88:	230f      	movs	r3, #15
 801bd8a:	18fb      	adds	r3, r7, r3
 801bd8c:	2202      	movs	r2, #2
 801bd8e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801bd90:	230f      	movs	r3, #15
 801bd92:	18fb      	adds	r3, r7, r3
 801bd94:	781b      	ldrb	r3, [r3, #0]
}
 801bd96:	0018      	movs	r0, r3
 801bd98:	46bd      	mov	sp, r7
 801bd9a:	b004      	add	sp, #16
 801bd9c:	bd80      	pop	{r7, pc}

0801bd9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801bd9e:	b580      	push	{r7, lr}
 801bda0:	b082      	sub	sp, #8
 801bda2:	af00      	add	r7, sp, #0
 801bda4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	0018      	movs	r0, r3
 801bdaa:	f001 fd43 	bl	801d834 <USBD_LL_Start>

  return USBD_OK;
 801bdae:	2300      	movs	r3, #0
}
 801bdb0:	0018      	movs	r0, r3
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	b002      	add	sp, #8
 801bdb6:	bd80      	pop	{r7, pc}

0801bdb8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801bdb8:	b580      	push	{r7, lr}
 801bdba:	b082      	sub	sp, #8
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801bdc0:	2300      	movs	r3, #0
}
 801bdc2:	0018      	movs	r0, r3
 801bdc4:	46bd      	mov	sp, r7
 801bdc6:	b002      	add	sp, #8
 801bdc8:	bd80      	pop	{r7, pc}

0801bdca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801bdca:	b590      	push	{r4, r7, lr}
 801bdcc:	b085      	sub	sp, #20
 801bdce:	af00      	add	r7, sp, #0
 801bdd0:	6078      	str	r0, [r7, #4]
 801bdd2:	000a      	movs	r2, r1
 801bdd4:	1cfb      	adds	r3, r7, #3
 801bdd6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801bdd8:	240f      	movs	r4, #15
 801bdda:	193b      	adds	r3, r7, r4
 801bddc:	2202      	movs	r2, #2
 801bdde:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801bde0:	687a      	ldr	r2, [r7, #4]
 801bde2:	23ad      	movs	r3, #173	@ 0xad
 801bde4:	009b      	lsls	r3, r3, #2
 801bde6:	58d3      	ldr	r3, [r2, r3]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d00e      	beq.n	801be0a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801bdec:	687a      	ldr	r2, [r7, #4]
 801bdee:	23ad      	movs	r3, #173	@ 0xad
 801bdf0:	009b      	lsls	r3, r3, #2
 801bdf2:	58d3      	ldr	r3, [r2, r3]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	1cfa      	adds	r2, r7, #3
 801bdf8:	7811      	ldrb	r1, [r2, #0]
 801bdfa:	687a      	ldr	r2, [r7, #4]
 801bdfc:	0010      	movs	r0, r2
 801bdfe:	4798      	blx	r3
 801be00:	1e03      	subs	r3, r0, #0
 801be02:	d102      	bne.n	801be0a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801be04:	193b      	adds	r3, r7, r4
 801be06:	2200      	movs	r2, #0
 801be08:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801be0a:	230f      	movs	r3, #15
 801be0c:	18fb      	adds	r3, r7, r3
 801be0e:	781b      	ldrb	r3, [r3, #0]
}
 801be10:	0018      	movs	r0, r3
 801be12:	46bd      	mov	sp, r7
 801be14:	b005      	add	sp, #20
 801be16:	bd90      	pop	{r4, r7, pc}

0801be18 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801be18:	b580      	push	{r7, lr}
 801be1a:	b082      	sub	sp, #8
 801be1c:	af00      	add	r7, sp, #0
 801be1e:	6078      	str	r0, [r7, #4]
 801be20:	000a      	movs	r2, r1
 801be22:	1cfb      	adds	r3, r7, #3
 801be24:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801be26:	687a      	ldr	r2, [r7, #4]
 801be28:	23ad      	movs	r3, #173	@ 0xad
 801be2a:	009b      	lsls	r3, r3, #2
 801be2c:	58d3      	ldr	r3, [r2, r3]
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	1cfa      	adds	r2, r7, #3
 801be32:	7811      	ldrb	r1, [r2, #0]
 801be34:	687a      	ldr	r2, [r7, #4]
 801be36:	0010      	movs	r0, r2
 801be38:	4798      	blx	r3

  return USBD_OK;
 801be3a:	2300      	movs	r3, #0
}
 801be3c:	0018      	movs	r0, r3
 801be3e:	46bd      	mov	sp, r7
 801be40:	b002      	add	sp, #8
 801be42:	bd80      	pop	{r7, pc}

0801be44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801be44:	b580      	push	{r7, lr}
 801be46:	b082      	sub	sp, #8
 801be48:	af00      	add	r7, sp, #0
 801be4a:	6078      	str	r0, [r7, #4]
 801be4c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	22aa      	movs	r2, #170	@ 0xaa
 801be52:	0092      	lsls	r2, r2, #2
 801be54:	4694      	mov	ip, r2
 801be56:	4463      	add	r3, ip
 801be58:	683a      	ldr	r2, [r7, #0]
 801be5a:	0011      	movs	r1, r2
 801be5c:	0018      	movs	r0, r3
 801be5e:	f001 f810 	bl	801ce82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801be62:	687a      	ldr	r2, [r7, #4]
 801be64:	23a5      	movs	r3, #165	@ 0xa5
 801be66:	009b      	lsls	r3, r3, #2
 801be68:	2101      	movs	r1, #1
 801be6a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	4a23      	ldr	r2, [pc, #140]	@ (801befc <USBD_LL_SetupStage+0xb8>)
 801be70:	5a9b      	ldrh	r3, [r3, r2]
 801be72:	0019      	movs	r1, r3
 801be74:	687a      	ldr	r2, [r7, #4]
 801be76:	23a6      	movs	r3, #166	@ 0xa6
 801be78:	009b      	lsls	r3, r3, #2
 801be7a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801be7c:	687a      	ldr	r2, [r7, #4]
 801be7e:	23aa      	movs	r3, #170	@ 0xaa
 801be80:	009b      	lsls	r3, r3, #2
 801be82:	5cd3      	ldrb	r3, [r2, r3]
 801be84:	001a      	movs	r2, r3
 801be86:	231f      	movs	r3, #31
 801be88:	4013      	ands	r3, r2
 801be8a:	2b02      	cmp	r3, #2
 801be8c:	d019      	beq.n	801bec2 <USBD_LL_SetupStage+0x7e>
 801be8e:	d822      	bhi.n	801bed6 <USBD_LL_SetupStage+0x92>
 801be90:	2b00      	cmp	r3, #0
 801be92:	d002      	beq.n	801be9a <USBD_LL_SetupStage+0x56>
 801be94:	2b01      	cmp	r3, #1
 801be96:	d00a      	beq.n	801beae <USBD_LL_SetupStage+0x6a>
 801be98:	e01d      	b.n	801bed6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	22aa      	movs	r2, #170	@ 0xaa
 801be9e:	0092      	lsls	r2, r2, #2
 801bea0:	189a      	adds	r2, r3, r2
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	0011      	movs	r1, r2
 801bea6:	0018      	movs	r0, r3
 801bea8:	f000 fa10 	bl	801c2cc <USBD_StdDevReq>
      break;
 801beac:	e020      	b.n	801bef0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	22aa      	movs	r2, #170	@ 0xaa
 801beb2:	0092      	lsls	r2, r2, #2
 801beb4:	189a      	adds	r2, r3, r2
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	0011      	movs	r1, r2
 801beba:	0018      	movs	r0, r3
 801bebc:	f000 fa78 	bl	801c3b0 <USBD_StdItfReq>
      break;
 801bec0:	e016      	b.n	801bef0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	22aa      	movs	r2, #170	@ 0xaa
 801bec6:	0092      	lsls	r2, r2, #2
 801bec8:	189a      	adds	r2, r3, r2
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	0011      	movs	r1, r2
 801bece:	0018      	movs	r0, r3
 801bed0:	f000 fac5 	bl	801c45e <USBD_StdEPReq>
      break;
 801bed4:	e00c      	b.n	801bef0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801bed6:	687a      	ldr	r2, [r7, #4]
 801bed8:	23aa      	movs	r3, #170	@ 0xaa
 801beda:	009b      	lsls	r3, r3, #2
 801bedc:	5cd3      	ldrb	r3, [r2, r3]
 801bede:	227f      	movs	r2, #127	@ 0x7f
 801bee0:	4393      	bics	r3, r2
 801bee2:	b2da      	uxtb	r2, r3
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	0011      	movs	r1, r2
 801bee8:	0018      	movs	r0, r3
 801beea:	f001 fd2a 	bl	801d942 <USBD_LL_StallEP>
      break;
 801beee:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801bef0:	2300      	movs	r3, #0
}
 801bef2:	0018      	movs	r0, r3
 801bef4:	46bd      	mov	sp, r7
 801bef6:	b002      	add	sp, #8
 801bef8:	bd80      	pop	{r7, pc}
 801befa:	46c0      	nop			@ (mov r8, r8)
 801befc:	000002ae 	.word	0x000002ae

0801bf00 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801bf00:	b580      	push	{r7, lr}
 801bf02:	b086      	sub	sp, #24
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	60f8      	str	r0, [r7, #12]
 801bf08:	607a      	str	r2, [r7, #4]
 801bf0a:	200b      	movs	r0, #11
 801bf0c:	183b      	adds	r3, r7, r0
 801bf0e:	1c0a      	adds	r2, r1, #0
 801bf10:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bf12:	183b      	adds	r3, r7, r0
 801bf14:	781b      	ldrb	r3, [r3, #0]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d154      	bne.n	801bfc4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	3355      	adds	r3, #85	@ 0x55
 801bf1e:	33ff      	adds	r3, #255	@ 0xff
 801bf20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801bf22:	68fa      	ldr	r2, [r7, #12]
 801bf24:	23a5      	movs	r3, #165	@ 0xa5
 801bf26:	009b      	lsls	r3, r3, #2
 801bf28:	58d3      	ldr	r3, [r2, r3]
 801bf2a:	2b03      	cmp	r3, #3
 801bf2c:	d139      	bne.n	801bfa2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801bf2e:	697b      	ldr	r3, [r7, #20]
 801bf30:	68da      	ldr	r2, [r3, #12]
 801bf32:	697b      	ldr	r3, [r7, #20]
 801bf34:	691b      	ldr	r3, [r3, #16]
 801bf36:	429a      	cmp	r2, r3
 801bf38:	d919      	bls.n	801bf6e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801bf3a:	697b      	ldr	r3, [r7, #20]
 801bf3c:	68da      	ldr	r2, [r3, #12]
 801bf3e:	697b      	ldr	r3, [r7, #20]
 801bf40:	691b      	ldr	r3, [r3, #16]
 801bf42:	1ad2      	subs	r2, r2, r3
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bf48:	697b      	ldr	r3, [r7, #20]
 801bf4a:	68da      	ldr	r2, [r3, #12]
 801bf4c:	697b      	ldr	r3, [r7, #20]
 801bf4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801bf50:	429a      	cmp	r2, r3
 801bf52:	d203      	bcs.n	801bf5c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bf54:	697b      	ldr	r3, [r7, #20]
 801bf56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801bf58:	b29b      	uxth	r3, r3
 801bf5a:	e002      	b.n	801bf62 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bf5c:	697b      	ldr	r3, [r7, #20]
 801bf5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801bf60:	b29b      	uxth	r3, r3
 801bf62:	6879      	ldr	r1, [r7, #4]
 801bf64:	68f8      	ldr	r0, [r7, #12]
 801bf66:	001a      	movs	r2, r3
 801bf68:	f001 f898 	bl	801d09c <USBD_CtlContinueRx>
 801bf6c:	e045      	b.n	801bffa <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bf6e:	68fa      	ldr	r2, [r7, #12]
 801bf70:	23ad      	movs	r3, #173	@ 0xad
 801bf72:	009b      	lsls	r3, r3, #2
 801bf74:	58d3      	ldr	r3, [r2, r3]
 801bf76:	691b      	ldr	r3, [r3, #16]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d00d      	beq.n	801bf98 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bf7c:	68fa      	ldr	r2, [r7, #12]
 801bf7e:	23a7      	movs	r3, #167	@ 0xa7
 801bf80:	009b      	lsls	r3, r3, #2
 801bf82:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bf84:	2b03      	cmp	r3, #3
 801bf86:	d107      	bne.n	801bf98 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801bf88:	68fa      	ldr	r2, [r7, #12]
 801bf8a:	23ad      	movs	r3, #173	@ 0xad
 801bf8c:	009b      	lsls	r3, r3, #2
 801bf8e:	58d3      	ldr	r3, [r2, r3]
 801bf90:	691b      	ldr	r3, [r3, #16]
 801bf92:	68fa      	ldr	r2, [r7, #12]
 801bf94:	0010      	movs	r0, r2
 801bf96:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	0018      	movs	r0, r3
 801bf9c:	f001 f891 	bl	801d0c2 <USBD_CtlSendStatus>
 801bfa0:	e02b      	b.n	801bffa <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801bfa2:	68fa      	ldr	r2, [r7, #12]
 801bfa4:	23a5      	movs	r3, #165	@ 0xa5
 801bfa6:	009b      	lsls	r3, r3, #2
 801bfa8:	58d3      	ldr	r3, [r2, r3]
 801bfaa:	2b05      	cmp	r3, #5
 801bfac:	d125      	bne.n	801bffa <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801bfae:	68fa      	ldr	r2, [r7, #12]
 801bfb0:	23a5      	movs	r3, #165	@ 0xa5
 801bfb2:	009b      	lsls	r3, r3, #2
 801bfb4:	2100      	movs	r1, #0
 801bfb6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801bfb8:	68fb      	ldr	r3, [r7, #12]
 801bfba:	2100      	movs	r1, #0
 801bfbc:	0018      	movs	r0, r3
 801bfbe:	f001 fcc0 	bl	801d942 <USBD_LL_StallEP>
 801bfc2:	e01a      	b.n	801bffa <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801bfc4:	68fa      	ldr	r2, [r7, #12]
 801bfc6:	23ad      	movs	r3, #173	@ 0xad
 801bfc8:	009b      	lsls	r3, r3, #2
 801bfca:	58d3      	ldr	r3, [r2, r3]
 801bfcc:	699b      	ldr	r3, [r3, #24]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d011      	beq.n	801bff6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bfd2:	68fa      	ldr	r2, [r7, #12]
 801bfd4:	23a7      	movs	r3, #167	@ 0xa7
 801bfd6:	009b      	lsls	r3, r3, #2
 801bfd8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801bfda:	2b03      	cmp	r3, #3
 801bfdc:	d10b      	bne.n	801bff6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801bfde:	68fa      	ldr	r2, [r7, #12]
 801bfe0:	23ad      	movs	r3, #173	@ 0xad
 801bfe2:	009b      	lsls	r3, r3, #2
 801bfe4:	58d3      	ldr	r3, [r2, r3]
 801bfe6:	699b      	ldr	r3, [r3, #24]
 801bfe8:	220b      	movs	r2, #11
 801bfea:	18ba      	adds	r2, r7, r2
 801bfec:	7811      	ldrb	r1, [r2, #0]
 801bfee:	68fa      	ldr	r2, [r7, #12]
 801bff0:	0010      	movs	r0, r2
 801bff2:	4798      	blx	r3
 801bff4:	e001      	b.n	801bffa <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bff6:	2302      	movs	r3, #2
 801bff8:	e000      	b.n	801bffc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801bffa:	2300      	movs	r3, #0
}
 801bffc:	0018      	movs	r0, r3
 801bffe:	46bd      	mov	sp, r7
 801c000:	b006      	add	sp, #24
 801c002:	bd80      	pop	{r7, pc}

0801c004 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c004:	b580      	push	{r7, lr}
 801c006:	b086      	sub	sp, #24
 801c008:	af00      	add	r7, sp, #0
 801c00a:	60f8      	str	r0, [r7, #12]
 801c00c:	607a      	str	r2, [r7, #4]
 801c00e:	200b      	movs	r0, #11
 801c010:	183b      	adds	r3, r7, r0
 801c012:	1c0a      	adds	r2, r1, #0
 801c014:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c016:	183b      	adds	r3, r7, r0
 801c018:	781b      	ldrb	r3, [r3, #0]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d000      	beq.n	801c020 <USBD_LL_DataInStage+0x1c>
 801c01e:	e08e      	b.n	801c13e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	3314      	adds	r3, #20
 801c024:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c026:	68fa      	ldr	r2, [r7, #12]
 801c028:	23a5      	movs	r3, #165	@ 0xa5
 801c02a:	009b      	lsls	r3, r3, #2
 801c02c:	58d3      	ldr	r3, [r2, r3]
 801c02e:	2b02      	cmp	r3, #2
 801c030:	d164      	bne.n	801c0fc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801c032:	697b      	ldr	r3, [r7, #20]
 801c034:	68da      	ldr	r2, [r3, #12]
 801c036:	697b      	ldr	r3, [r7, #20]
 801c038:	691b      	ldr	r3, [r3, #16]
 801c03a:	429a      	cmp	r2, r3
 801c03c:	d915      	bls.n	801c06a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801c03e:	697b      	ldr	r3, [r7, #20]
 801c040:	68da      	ldr	r2, [r3, #12]
 801c042:	697b      	ldr	r3, [r7, #20]
 801c044:	691b      	ldr	r3, [r3, #16]
 801c046:	1ad2      	subs	r2, r2, r3
 801c048:	697b      	ldr	r3, [r7, #20]
 801c04a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801c04c:	697b      	ldr	r3, [r7, #20]
 801c04e:	68db      	ldr	r3, [r3, #12]
 801c050:	b29a      	uxth	r2, r3
 801c052:	6879      	ldr	r1, [r7, #4]
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	0018      	movs	r0, r3
 801c058:	f000 ffe9 	bl	801d02e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c05c:	68f8      	ldr	r0, [r7, #12]
 801c05e:	2300      	movs	r3, #0
 801c060:	2200      	movs	r2, #0
 801c062:	2100      	movs	r1, #0
 801c064:	f001 fd56 	bl	801db14 <USBD_LL_PrepareReceive>
 801c068:	e059      	b.n	801c11e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c06a:	697b      	ldr	r3, [r7, #20]
 801c06c:	689a      	ldr	r2, [r3, #8]
 801c06e:	697b      	ldr	r3, [r7, #20]
 801c070:	691b      	ldr	r3, [r3, #16]
 801c072:	0019      	movs	r1, r3
 801c074:	0010      	movs	r0, r2
 801c076:	f7e4 f91b 	bl	80002b0 <__aeabi_uidivmod>
 801c07a:	1e0b      	subs	r3, r1, #0
 801c07c:	d11f      	bne.n	801c0be <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801c07e:	697b      	ldr	r3, [r7, #20]
 801c080:	689a      	ldr	r2, [r3, #8]
 801c082:	697b      	ldr	r3, [r7, #20]
 801c084:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c086:	429a      	cmp	r2, r3
 801c088:	d319      	bcc.n	801c0be <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801c08a:	697b      	ldr	r3, [r7, #20]
 801c08c:	689a      	ldr	r2, [r3, #8]
 801c08e:	68f9      	ldr	r1, [r7, #12]
 801c090:	23a6      	movs	r3, #166	@ 0xa6
 801c092:	009b      	lsls	r3, r3, #2
 801c094:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801c096:	429a      	cmp	r2, r3
 801c098:	d211      	bcs.n	801c0be <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	2200      	movs	r2, #0
 801c09e:	2100      	movs	r1, #0
 801c0a0:	0018      	movs	r0, r3
 801c0a2:	f000 ffc4 	bl	801d02e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c0a6:	68fa      	ldr	r2, [r7, #12]
 801c0a8:	23a6      	movs	r3, #166	@ 0xa6
 801c0aa:	009b      	lsls	r3, r3, #2
 801c0ac:	2100      	movs	r1, #0
 801c0ae:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c0b0:	68f8      	ldr	r0, [r7, #12]
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	2200      	movs	r2, #0
 801c0b6:	2100      	movs	r1, #0
 801c0b8:	f001 fd2c 	bl	801db14 <USBD_LL_PrepareReceive>
 801c0bc:	e02f      	b.n	801c11e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c0be:	68fa      	ldr	r2, [r7, #12]
 801c0c0:	23ad      	movs	r3, #173	@ 0xad
 801c0c2:	009b      	lsls	r3, r3, #2
 801c0c4:	58d3      	ldr	r3, [r2, r3]
 801c0c6:	68db      	ldr	r3, [r3, #12]
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d00d      	beq.n	801c0e8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c0cc:	68fa      	ldr	r2, [r7, #12]
 801c0ce:	23a7      	movs	r3, #167	@ 0xa7
 801c0d0:	009b      	lsls	r3, r3, #2
 801c0d2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c0d4:	2b03      	cmp	r3, #3
 801c0d6:	d107      	bne.n	801c0e8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c0d8:	68fa      	ldr	r2, [r7, #12]
 801c0da:	23ad      	movs	r3, #173	@ 0xad
 801c0dc:	009b      	lsls	r3, r3, #2
 801c0de:	58d3      	ldr	r3, [r2, r3]
 801c0e0:	68db      	ldr	r3, [r3, #12]
 801c0e2:	68fa      	ldr	r2, [r7, #12]
 801c0e4:	0010      	movs	r0, r2
 801c0e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	2180      	movs	r1, #128	@ 0x80
 801c0ec:	0018      	movs	r0, r3
 801c0ee:	f001 fc28 	bl	801d942 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	0018      	movs	r0, r3
 801c0f6:	f000 fff8 	bl	801d0ea <USBD_CtlReceiveStatus>
 801c0fa:	e010      	b.n	801c11e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c0fc:	68fa      	ldr	r2, [r7, #12]
 801c0fe:	23a5      	movs	r3, #165	@ 0xa5
 801c100:	009b      	lsls	r3, r3, #2
 801c102:	58d3      	ldr	r3, [r2, r3]
 801c104:	2b04      	cmp	r3, #4
 801c106:	d005      	beq.n	801c114 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c108:	68fa      	ldr	r2, [r7, #12]
 801c10a:	23a5      	movs	r3, #165	@ 0xa5
 801c10c:	009b      	lsls	r3, r3, #2
 801c10e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c110:	2b00      	cmp	r3, #0
 801c112:	d104      	bne.n	801c11e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	2180      	movs	r1, #128	@ 0x80
 801c118:	0018      	movs	r0, r3
 801c11a:	f001 fc12 	bl	801d942 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c11e:	68fa      	ldr	r2, [r7, #12]
 801c120:	23a8      	movs	r3, #168	@ 0xa8
 801c122:	009b      	lsls	r3, r3, #2
 801c124:	5cd3      	ldrb	r3, [r2, r3]
 801c126:	2b01      	cmp	r3, #1
 801c128:	d124      	bne.n	801c174 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	0018      	movs	r0, r3
 801c12e:	f7ff fe43 	bl	801bdb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c132:	68fa      	ldr	r2, [r7, #12]
 801c134:	23a8      	movs	r3, #168	@ 0xa8
 801c136:	009b      	lsls	r3, r3, #2
 801c138:	2100      	movs	r1, #0
 801c13a:	54d1      	strb	r1, [r2, r3]
 801c13c:	e01a      	b.n	801c174 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801c13e:	68fa      	ldr	r2, [r7, #12]
 801c140:	23ad      	movs	r3, #173	@ 0xad
 801c142:	009b      	lsls	r3, r3, #2
 801c144:	58d3      	ldr	r3, [r2, r3]
 801c146:	695b      	ldr	r3, [r3, #20]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d011      	beq.n	801c170 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c14c:	68fa      	ldr	r2, [r7, #12]
 801c14e:	23a7      	movs	r3, #167	@ 0xa7
 801c150:	009b      	lsls	r3, r3, #2
 801c152:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801c154:	2b03      	cmp	r3, #3
 801c156:	d10b      	bne.n	801c170 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801c158:	68fa      	ldr	r2, [r7, #12]
 801c15a:	23ad      	movs	r3, #173	@ 0xad
 801c15c:	009b      	lsls	r3, r3, #2
 801c15e:	58d3      	ldr	r3, [r2, r3]
 801c160:	695b      	ldr	r3, [r3, #20]
 801c162:	220b      	movs	r2, #11
 801c164:	18ba      	adds	r2, r7, r2
 801c166:	7811      	ldrb	r1, [r2, #0]
 801c168:	68fa      	ldr	r2, [r7, #12]
 801c16a:	0010      	movs	r0, r2
 801c16c:	4798      	blx	r3
 801c16e:	e001      	b.n	801c174 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c170:	2302      	movs	r3, #2
 801c172:	e000      	b.n	801c176 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801c174:	2300      	movs	r3, #0
}
 801c176:	0018      	movs	r0, r3
 801c178:	46bd      	mov	sp, r7
 801c17a:	b006      	add	sp, #24
 801c17c:	bd80      	pop	{r7, pc}

0801c17e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c17e:	b580      	push	{r7, lr}
 801c180:	b082      	sub	sp, #8
 801c182:	af00      	add	r7, sp, #0
 801c184:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c186:	6878      	ldr	r0, [r7, #4]
 801c188:	2340      	movs	r3, #64	@ 0x40
 801c18a:	2200      	movs	r2, #0
 801c18c:	2100      	movs	r1, #0
 801c18e:	f001 fb76 	bl	801d87e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c192:	687a      	ldr	r2, [r7, #4]
 801c194:	23ac      	movs	r3, #172	@ 0xac
 801c196:	005b      	lsls	r3, r3, #1
 801c198:	2101      	movs	r1, #1
 801c19a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c19c:	687a      	ldr	r2, [r7, #4]
 801c19e:	23b2      	movs	r3, #178	@ 0xb2
 801c1a0:	005b      	lsls	r3, r3, #1
 801c1a2:	2140      	movs	r1, #64	@ 0x40
 801c1a4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c1a6:	6878      	ldr	r0, [r7, #4]
 801c1a8:	2340      	movs	r3, #64	@ 0x40
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	2180      	movs	r1, #128	@ 0x80
 801c1ae:	f001 fb66 	bl	801d87e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2201      	movs	r2, #1
 801c1b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	2240      	movs	r2, #64	@ 0x40
 801c1bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c1be:	687a      	ldr	r2, [r7, #4]
 801c1c0:	23a7      	movs	r3, #167	@ 0xa7
 801c1c2:	009b      	lsls	r3, r3, #2
 801c1c4:	2101      	movs	r1, #1
 801c1c6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801c1c8:	687a      	ldr	r2, [r7, #4]
 801c1ca:	23a5      	movs	r3, #165	@ 0xa5
 801c1cc:	009b      	lsls	r3, r3, #2
 801c1ce:	2100      	movs	r1, #0
 801c1d0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	2200      	movs	r2, #0
 801c1d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c1d8:	687a      	ldr	r2, [r7, #4]
 801c1da:	23a9      	movs	r3, #169	@ 0xa9
 801c1dc:	009b      	lsls	r3, r3, #2
 801c1de:	2100      	movs	r1, #0
 801c1e0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801c1e2:	687a      	ldr	r2, [r7, #4]
 801c1e4:	23ae      	movs	r3, #174	@ 0xae
 801c1e6:	009b      	lsls	r3, r3, #2
 801c1e8:	58d3      	ldr	r3, [r2, r3]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d00a      	beq.n	801c204 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c1ee:	687a      	ldr	r2, [r7, #4]
 801c1f0:	23ad      	movs	r3, #173	@ 0xad
 801c1f2:	009b      	lsls	r3, r3, #2
 801c1f4:	58d3      	ldr	r3, [r2, r3]
 801c1f6:	685a      	ldr	r2, [r3, #4]
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	685b      	ldr	r3, [r3, #4]
 801c1fc:	b2d9      	uxtb	r1, r3
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	0018      	movs	r0, r3
 801c202:	4790      	blx	r2
  }

  return USBD_OK;
 801c204:	2300      	movs	r3, #0
}
 801c206:	0018      	movs	r0, r3
 801c208:	46bd      	mov	sp, r7
 801c20a:	b002      	add	sp, #8
 801c20c:	bd80      	pop	{r7, pc}

0801c20e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c20e:	b580      	push	{r7, lr}
 801c210:	b082      	sub	sp, #8
 801c212:	af00      	add	r7, sp, #0
 801c214:	6078      	str	r0, [r7, #4]
 801c216:	000a      	movs	r2, r1
 801c218:	1cfb      	adds	r3, r7, #3
 801c21a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	1cfa      	adds	r2, r7, #3
 801c220:	7812      	ldrb	r2, [r2, #0]
 801c222:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c224:	2300      	movs	r3, #0
}
 801c226:	0018      	movs	r0, r3
 801c228:	46bd      	mov	sp, r7
 801c22a:	b002      	add	sp, #8
 801c22c:	bd80      	pop	{r7, pc}
	...

0801c230 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c230:	b580      	push	{r7, lr}
 801c232:	b082      	sub	sp, #8
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801c238:	687a      	ldr	r2, [r7, #4]
 801c23a:	23a7      	movs	r3, #167	@ 0xa7
 801c23c:	009b      	lsls	r3, r3, #2
 801c23e:	5cd1      	ldrb	r1, [r2, r3]
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	4a06      	ldr	r2, [pc, #24]	@ (801c25c <USBD_LL_Suspend+0x2c>)
 801c244:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c246:	687a      	ldr	r2, [r7, #4]
 801c248:	23a7      	movs	r3, #167	@ 0xa7
 801c24a:	009b      	lsls	r3, r3, #2
 801c24c:	2104      	movs	r1, #4
 801c24e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801c250:	2300      	movs	r3, #0
}
 801c252:	0018      	movs	r0, r3
 801c254:	46bd      	mov	sp, r7
 801c256:	b002      	add	sp, #8
 801c258:	bd80      	pop	{r7, pc}
 801c25a:	46c0      	nop			@ (mov r8, r8)
 801c25c:	0000029d 	.word	0x0000029d

0801c260 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c260:	b580      	push	{r7, lr}
 801c262:	b082      	sub	sp, #8
 801c264:	af00      	add	r7, sp, #0
 801c266:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c268:	687a      	ldr	r2, [r7, #4]
 801c26a:	23a7      	movs	r3, #167	@ 0xa7
 801c26c:	009b      	lsls	r3, r3, #2
 801c26e:	5cd3      	ldrb	r3, [r2, r3]
 801c270:	2b04      	cmp	r3, #4
 801c272:	d106      	bne.n	801c282 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	4a05      	ldr	r2, [pc, #20]	@ (801c28c <USBD_LL_Resume+0x2c>)
 801c278:	5c99      	ldrb	r1, [r3, r2]
 801c27a:	687a      	ldr	r2, [r7, #4]
 801c27c:	23a7      	movs	r3, #167	@ 0xa7
 801c27e:	009b      	lsls	r3, r3, #2
 801c280:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801c282:	2300      	movs	r3, #0
}
 801c284:	0018      	movs	r0, r3
 801c286:	46bd      	mov	sp, r7
 801c288:	b002      	add	sp, #8
 801c28a:	bd80      	pop	{r7, pc}
 801c28c:	0000029d 	.word	0x0000029d

0801c290 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c290:	b580      	push	{r7, lr}
 801c292:	b082      	sub	sp, #8
 801c294:	af00      	add	r7, sp, #0
 801c296:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c298:	687a      	ldr	r2, [r7, #4]
 801c29a:	23a7      	movs	r3, #167	@ 0xa7
 801c29c:	009b      	lsls	r3, r3, #2
 801c29e:	5cd3      	ldrb	r3, [r2, r3]
 801c2a0:	2b03      	cmp	r3, #3
 801c2a2:	d10e      	bne.n	801c2c2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801c2a4:	687a      	ldr	r2, [r7, #4]
 801c2a6:	23ad      	movs	r3, #173	@ 0xad
 801c2a8:	009b      	lsls	r3, r3, #2
 801c2aa:	58d3      	ldr	r3, [r2, r3]
 801c2ac:	69db      	ldr	r3, [r3, #28]
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d007      	beq.n	801c2c2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801c2b2:	687a      	ldr	r2, [r7, #4]
 801c2b4:	23ad      	movs	r3, #173	@ 0xad
 801c2b6:	009b      	lsls	r3, r3, #2
 801c2b8:	58d3      	ldr	r3, [r2, r3]
 801c2ba:	69db      	ldr	r3, [r3, #28]
 801c2bc:	687a      	ldr	r2, [r7, #4]
 801c2be:	0010      	movs	r0, r2
 801c2c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c2c2:	2300      	movs	r3, #0
}
 801c2c4:	0018      	movs	r0, r3
 801c2c6:	46bd      	mov	sp, r7
 801c2c8:	b002      	add	sp, #8
 801c2ca:	bd80      	pop	{r7, pc}

0801c2cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b084      	sub	sp, #16
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
 801c2d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c2d6:	230f      	movs	r3, #15
 801c2d8:	18fb      	adds	r3, r7, r3
 801c2da:	2200      	movs	r2, #0
 801c2dc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c2de:	683b      	ldr	r3, [r7, #0]
 801c2e0:	781b      	ldrb	r3, [r3, #0]
 801c2e2:	001a      	movs	r2, r3
 801c2e4:	2360      	movs	r3, #96	@ 0x60
 801c2e6:	4013      	ands	r3, r2
 801c2e8:	2b40      	cmp	r3, #64	@ 0x40
 801c2ea:	d004      	beq.n	801c2f6 <USBD_StdDevReq+0x2a>
 801c2ec:	d84f      	bhi.n	801c38e <USBD_StdDevReq+0xc2>
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d00b      	beq.n	801c30a <USBD_StdDevReq+0x3e>
 801c2f2:	2b20      	cmp	r3, #32
 801c2f4:	d14b      	bne.n	801c38e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c2f6:	687a      	ldr	r2, [r7, #4]
 801c2f8:	23ad      	movs	r3, #173	@ 0xad
 801c2fa:	009b      	lsls	r3, r3, #2
 801c2fc:	58d3      	ldr	r3, [r2, r3]
 801c2fe:	689b      	ldr	r3, [r3, #8]
 801c300:	6839      	ldr	r1, [r7, #0]
 801c302:	687a      	ldr	r2, [r7, #4]
 801c304:	0010      	movs	r0, r2
 801c306:	4798      	blx	r3
      break;
 801c308:	e048      	b.n	801c39c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	785b      	ldrb	r3, [r3, #1]
 801c30e:	2b09      	cmp	r3, #9
 801c310:	d835      	bhi.n	801c37e <USBD_StdDevReq+0xb2>
 801c312:	009a      	lsls	r2, r3, #2
 801c314:	4b25      	ldr	r3, [pc, #148]	@ (801c3ac <USBD_StdDevReq+0xe0>)
 801c316:	18d3      	adds	r3, r2, r3
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c31c:	683a      	ldr	r2, [r7, #0]
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	0011      	movs	r1, r2
 801c322:	0018      	movs	r0, r3
 801c324:	f000 fa52 	bl	801c7cc <USBD_GetDescriptor>
          break;
 801c328:	e030      	b.n	801c38c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c32a:	683a      	ldr	r2, [r7, #0]
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	0011      	movs	r1, r2
 801c330:	0018      	movs	r0, r3
 801c332:	f000 fbfd 	bl	801cb30 <USBD_SetAddress>
          break;
 801c336:	e029      	b.n	801c38c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801c338:	683a      	ldr	r2, [r7, #0]
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	0011      	movs	r1, r2
 801c33e:	0018      	movs	r0, r3
 801c340:	f000 fc4a 	bl	801cbd8 <USBD_SetConfig>
          break;
 801c344:	e022      	b.n	801c38c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c346:	683a      	ldr	r2, [r7, #0]
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	0011      	movs	r1, r2
 801c34c:	0018      	movs	r0, r3
 801c34e:	f000 fce7 	bl	801cd20 <USBD_GetConfig>
          break;
 801c352:	e01b      	b.n	801c38c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c354:	683a      	ldr	r2, [r7, #0]
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	0011      	movs	r1, r2
 801c35a:	0018      	movs	r0, r3
 801c35c:	f000 fd1b 	bl	801cd96 <USBD_GetStatus>
          break;
 801c360:	e014      	b.n	801c38c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c362:	683a      	ldr	r2, [r7, #0]
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	0011      	movs	r1, r2
 801c368:	0018      	movs	r0, r3
 801c36a:	f000 fd4e 	bl	801ce0a <USBD_SetFeature>
          break;
 801c36e:	e00d      	b.n	801c38c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c370:	683a      	ldr	r2, [r7, #0]
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	0011      	movs	r1, r2
 801c376:	0018      	movs	r0, r3
 801c378:	f000 fd5d 	bl	801ce36 <USBD_ClrFeature>
          break;
 801c37c:	e006      	b.n	801c38c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801c37e:	683a      	ldr	r2, [r7, #0]
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	0011      	movs	r1, r2
 801c384:	0018      	movs	r0, r3
 801c386:	f000 fdb4 	bl	801cef2 <USBD_CtlError>
          break;
 801c38a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c38c:	e006      	b.n	801c39c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801c38e:	683a      	ldr	r2, [r7, #0]
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	0011      	movs	r1, r2
 801c394:	0018      	movs	r0, r3
 801c396:	f000 fdac 	bl	801cef2 <USBD_CtlError>
      break;
 801c39a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c39c:	230f      	movs	r3, #15
 801c39e:	18fb      	adds	r3, r7, r3
 801c3a0:	781b      	ldrb	r3, [r3, #0]
}
 801c3a2:	0018      	movs	r0, r3
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	b004      	add	sp, #16
 801c3a8:	bd80      	pop	{r7, pc}
 801c3aa:	46c0      	nop			@ (mov r8, r8)
 801c3ac:	08025ec0 	.word	0x08025ec0

0801c3b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801c3b0:	b5b0      	push	{r4, r5, r7, lr}
 801c3b2:	b084      	sub	sp, #16
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
 801c3b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c3ba:	230f      	movs	r3, #15
 801c3bc:	18fb      	adds	r3, r7, r3
 801c3be:	2200      	movs	r2, #0
 801c3c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c3c2:	683b      	ldr	r3, [r7, #0]
 801c3c4:	781b      	ldrb	r3, [r3, #0]
 801c3c6:	001a      	movs	r2, r3
 801c3c8:	2360      	movs	r3, #96	@ 0x60
 801c3ca:	4013      	ands	r3, r2
 801c3cc:	2b40      	cmp	r3, #64	@ 0x40
 801c3ce:	d004      	beq.n	801c3da <USBD_StdItfReq+0x2a>
 801c3d0:	d839      	bhi.n	801c446 <USBD_StdItfReq+0x96>
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d001      	beq.n	801c3da <USBD_StdItfReq+0x2a>
 801c3d6:	2b20      	cmp	r3, #32
 801c3d8:	d135      	bne.n	801c446 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c3da:	687a      	ldr	r2, [r7, #4]
 801c3dc:	23a7      	movs	r3, #167	@ 0xa7
 801c3de:	009b      	lsls	r3, r3, #2
 801c3e0:	5cd3      	ldrb	r3, [r2, r3]
 801c3e2:	3b01      	subs	r3, #1
 801c3e4:	2b02      	cmp	r3, #2
 801c3e6:	d825      	bhi.n	801c434 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c3e8:	683b      	ldr	r3, [r7, #0]
 801c3ea:	889b      	ldrh	r3, [r3, #4]
 801c3ec:	b2db      	uxtb	r3, r3
 801c3ee:	2b01      	cmp	r3, #1
 801c3f0:	d819      	bhi.n	801c426 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c3f2:	687a      	ldr	r2, [r7, #4]
 801c3f4:	23ad      	movs	r3, #173	@ 0xad
 801c3f6:	009b      	lsls	r3, r3, #2
 801c3f8:	58d3      	ldr	r3, [r2, r3]
 801c3fa:	689b      	ldr	r3, [r3, #8]
 801c3fc:	250f      	movs	r5, #15
 801c3fe:	197c      	adds	r4, r7, r5
 801c400:	6839      	ldr	r1, [r7, #0]
 801c402:	687a      	ldr	r2, [r7, #4]
 801c404:	0010      	movs	r0, r2
 801c406:	4798      	blx	r3
 801c408:	0003      	movs	r3, r0
 801c40a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c40c:	683b      	ldr	r3, [r7, #0]
 801c40e:	88db      	ldrh	r3, [r3, #6]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d116      	bne.n	801c442 <USBD_StdItfReq+0x92>
 801c414:	197b      	adds	r3, r7, r5
 801c416:	781b      	ldrb	r3, [r3, #0]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d112      	bne.n	801c442 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	0018      	movs	r0, r3
 801c420:	f000 fe4f 	bl	801d0c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c424:	e00d      	b.n	801c442 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801c426:	683a      	ldr	r2, [r7, #0]
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	0011      	movs	r1, r2
 801c42c:	0018      	movs	r0, r3
 801c42e:	f000 fd60 	bl	801cef2 <USBD_CtlError>
          break;
 801c432:	e006      	b.n	801c442 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801c434:	683a      	ldr	r2, [r7, #0]
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	0011      	movs	r1, r2
 801c43a:	0018      	movs	r0, r3
 801c43c:	f000 fd59 	bl	801cef2 <USBD_CtlError>
          break;
 801c440:	e000      	b.n	801c444 <USBD_StdItfReq+0x94>
          break;
 801c442:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c444:	e006      	b.n	801c454 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801c446:	683a      	ldr	r2, [r7, #0]
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	0011      	movs	r1, r2
 801c44c:	0018      	movs	r0, r3
 801c44e:	f000 fd50 	bl	801cef2 <USBD_CtlError>
      break;
 801c452:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c454:	2300      	movs	r3, #0
}
 801c456:	0018      	movs	r0, r3
 801c458:	46bd      	mov	sp, r7
 801c45a:	b004      	add	sp, #16
 801c45c:	bdb0      	pop	{r4, r5, r7, pc}

0801c45e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801c45e:	b5b0      	push	{r4, r5, r7, lr}
 801c460:	b084      	sub	sp, #16
 801c462:	af00      	add	r7, sp, #0
 801c464:	6078      	str	r0, [r7, #4]
 801c466:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801c468:	230f      	movs	r3, #15
 801c46a:	18fb      	adds	r3, r7, r3
 801c46c:	2200      	movs	r2, #0
 801c46e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801c470:	683b      	ldr	r3, [r7, #0]
 801c472:	889a      	ldrh	r2, [r3, #4]
 801c474:	230e      	movs	r3, #14
 801c476:	18fb      	adds	r3, r7, r3
 801c478:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c47a:	683b      	ldr	r3, [r7, #0]
 801c47c:	781b      	ldrb	r3, [r3, #0]
 801c47e:	001a      	movs	r2, r3
 801c480:	2360      	movs	r3, #96	@ 0x60
 801c482:	4013      	ands	r3, r2
 801c484:	2b40      	cmp	r3, #64	@ 0x40
 801c486:	d006      	beq.n	801c496 <USBD_StdEPReq+0x38>
 801c488:	d900      	bls.n	801c48c <USBD_StdEPReq+0x2e>
 801c48a:	e190      	b.n	801c7ae <USBD_StdEPReq+0x350>
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d00c      	beq.n	801c4aa <USBD_StdEPReq+0x4c>
 801c490:	2b20      	cmp	r3, #32
 801c492:	d000      	beq.n	801c496 <USBD_StdEPReq+0x38>
 801c494:	e18b      	b.n	801c7ae <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c496:	687a      	ldr	r2, [r7, #4]
 801c498:	23ad      	movs	r3, #173	@ 0xad
 801c49a:	009b      	lsls	r3, r3, #2
 801c49c:	58d3      	ldr	r3, [r2, r3]
 801c49e:	689b      	ldr	r3, [r3, #8]
 801c4a0:	6839      	ldr	r1, [r7, #0]
 801c4a2:	687a      	ldr	r2, [r7, #4]
 801c4a4:	0010      	movs	r0, r2
 801c4a6:	4798      	blx	r3
      break;
 801c4a8:	e188      	b.n	801c7bc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801c4aa:	683b      	ldr	r3, [r7, #0]
 801c4ac:	781b      	ldrb	r3, [r3, #0]
 801c4ae:	001a      	movs	r2, r3
 801c4b0:	2360      	movs	r3, #96	@ 0x60
 801c4b2:	4013      	ands	r3, r2
 801c4b4:	2b20      	cmp	r3, #32
 801c4b6:	d10f      	bne.n	801c4d8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c4b8:	687a      	ldr	r2, [r7, #4]
 801c4ba:	23ad      	movs	r3, #173	@ 0xad
 801c4bc:	009b      	lsls	r3, r3, #2
 801c4be:	58d3      	ldr	r3, [r2, r3]
 801c4c0:	689b      	ldr	r3, [r3, #8]
 801c4c2:	250f      	movs	r5, #15
 801c4c4:	197c      	adds	r4, r7, r5
 801c4c6:	6839      	ldr	r1, [r7, #0]
 801c4c8:	687a      	ldr	r2, [r7, #4]
 801c4ca:	0010      	movs	r0, r2
 801c4cc:	4798      	blx	r3
 801c4ce:	0003      	movs	r3, r0
 801c4d0:	7023      	strb	r3, [r4, #0]

        return ret;
 801c4d2:	197b      	adds	r3, r7, r5
 801c4d4:	781b      	ldrb	r3, [r3, #0]
 801c4d6:	e174      	b.n	801c7c2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801c4d8:	683b      	ldr	r3, [r7, #0]
 801c4da:	785b      	ldrb	r3, [r3, #1]
 801c4dc:	2b03      	cmp	r3, #3
 801c4de:	d007      	beq.n	801c4f0 <USBD_StdEPReq+0x92>
 801c4e0:	dd00      	ble.n	801c4e4 <USBD_StdEPReq+0x86>
 801c4e2:	e15c      	b.n	801c79e <USBD_StdEPReq+0x340>
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d100      	bne.n	801c4ea <USBD_StdEPReq+0x8c>
 801c4e8:	e092      	b.n	801c610 <USBD_StdEPReq+0x1b2>
 801c4ea:	2b01      	cmp	r3, #1
 801c4ec:	d04b      	beq.n	801c586 <USBD_StdEPReq+0x128>
 801c4ee:	e156      	b.n	801c79e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801c4f0:	687a      	ldr	r2, [r7, #4]
 801c4f2:	23a7      	movs	r3, #167	@ 0xa7
 801c4f4:	009b      	lsls	r3, r3, #2
 801c4f6:	5cd3      	ldrb	r3, [r2, r3]
 801c4f8:	2b02      	cmp	r3, #2
 801c4fa:	d002      	beq.n	801c502 <USBD_StdEPReq+0xa4>
 801c4fc:	2b03      	cmp	r3, #3
 801c4fe:	d01d      	beq.n	801c53c <USBD_StdEPReq+0xde>
 801c500:	e039      	b.n	801c576 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c502:	220e      	movs	r2, #14
 801c504:	18bb      	adds	r3, r7, r2
 801c506:	781b      	ldrb	r3, [r3, #0]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d010      	beq.n	801c52e <USBD_StdEPReq+0xd0>
 801c50c:	18bb      	adds	r3, r7, r2
 801c50e:	781b      	ldrb	r3, [r3, #0]
 801c510:	2b80      	cmp	r3, #128	@ 0x80
 801c512:	d00c      	beq.n	801c52e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c514:	18bb      	adds	r3, r7, r2
 801c516:	781a      	ldrb	r2, [r3, #0]
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	0011      	movs	r1, r2
 801c51c:	0018      	movs	r0, r3
 801c51e:	f001 fa10 	bl	801d942 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	2180      	movs	r1, #128	@ 0x80
 801c526:	0018      	movs	r0, r3
 801c528:	f001 fa0b 	bl	801d942 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c52c:	e02a      	b.n	801c584 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801c52e:	683a      	ldr	r2, [r7, #0]
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	0011      	movs	r1, r2
 801c534:	0018      	movs	r0, r3
 801c536:	f000 fcdc 	bl	801cef2 <USBD_CtlError>
              break;
 801c53a:	e023      	b.n	801c584 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c53c:	683b      	ldr	r3, [r7, #0]
 801c53e:	885b      	ldrh	r3, [r3, #2]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d113      	bne.n	801c56c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801c544:	220e      	movs	r2, #14
 801c546:	18bb      	adds	r3, r7, r2
 801c548:	781b      	ldrb	r3, [r3, #0]
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d00e      	beq.n	801c56c <USBD_StdEPReq+0x10e>
 801c54e:	18bb      	adds	r3, r7, r2
 801c550:	781b      	ldrb	r3, [r3, #0]
 801c552:	2b80      	cmp	r3, #128	@ 0x80
 801c554:	d00a      	beq.n	801c56c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c556:	683b      	ldr	r3, [r7, #0]
 801c558:	88db      	ldrh	r3, [r3, #6]
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d106      	bne.n	801c56c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801c55e:	18bb      	adds	r3, r7, r2
 801c560:	781a      	ldrb	r2, [r3, #0]
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	0011      	movs	r1, r2
 801c566:	0018      	movs	r0, r3
 801c568:	f001 f9eb 	bl	801d942 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	0018      	movs	r0, r3
 801c570:	f000 fda7 	bl	801d0c2 <USBD_CtlSendStatus>

              break;
 801c574:	e006      	b.n	801c584 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c576:	683a      	ldr	r2, [r7, #0]
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	0011      	movs	r1, r2
 801c57c:	0018      	movs	r0, r3
 801c57e:	f000 fcb8 	bl	801cef2 <USBD_CtlError>
              break;
 801c582:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c584:	e112      	b.n	801c7ac <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c586:	687a      	ldr	r2, [r7, #4]
 801c588:	23a7      	movs	r3, #167	@ 0xa7
 801c58a:	009b      	lsls	r3, r3, #2
 801c58c:	5cd3      	ldrb	r3, [r2, r3]
 801c58e:	2b02      	cmp	r3, #2
 801c590:	d002      	beq.n	801c598 <USBD_StdEPReq+0x13a>
 801c592:	2b03      	cmp	r3, #3
 801c594:	d01d      	beq.n	801c5d2 <USBD_StdEPReq+0x174>
 801c596:	e032      	b.n	801c5fe <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c598:	220e      	movs	r2, #14
 801c59a:	18bb      	adds	r3, r7, r2
 801c59c:	781b      	ldrb	r3, [r3, #0]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d010      	beq.n	801c5c4 <USBD_StdEPReq+0x166>
 801c5a2:	18bb      	adds	r3, r7, r2
 801c5a4:	781b      	ldrb	r3, [r3, #0]
 801c5a6:	2b80      	cmp	r3, #128	@ 0x80
 801c5a8:	d00c      	beq.n	801c5c4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c5aa:	18bb      	adds	r3, r7, r2
 801c5ac:	781a      	ldrb	r2, [r3, #0]
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	0011      	movs	r1, r2
 801c5b2:	0018      	movs	r0, r3
 801c5b4:	f001 f9c5 	bl	801d942 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	2180      	movs	r1, #128	@ 0x80
 801c5bc:	0018      	movs	r0, r3
 801c5be:	f001 f9c0 	bl	801d942 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c5c2:	e024      	b.n	801c60e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c5c4:	683a      	ldr	r2, [r7, #0]
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	0011      	movs	r1, r2
 801c5ca:	0018      	movs	r0, r3
 801c5cc:	f000 fc91 	bl	801cef2 <USBD_CtlError>
              break;
 801c5d0:	e01d      	b.n	801c60e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c5d2:	683b      	ldr	r3, [r7, #0]
 801c5d4:	885b      	ldrh	r3, [r3, #2]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d118      	bne.n	801c60c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c5da:	210e      	movs	r1, #14
 801c5dc:	187b      	adds	r3, r7, r1
 801c5de:	781b      	ldrb	r3, [r3, #0]
 801c5e0:	227f      	movs	r2, #127	@ 0x7f
 801c5e2:	4013      	ands	r3, r2
 801c5e4:	d006      	beq.n	801c5f4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c5e6:	187b      	adds	r3, r7, r1
 801c5e8:	781a      	ldrb	r2, [r3, #0]
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	0011      	movs	r1, r2
 801c5ee:	0018      	movs	r0, r3
 801c5f0:	f001 f9d2 	bl	801d998 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	0018      	movs	r0, r3
 801c5f8:	f000 fd63 	bl	801d0c2 <USBD_CtlSendStatus>
              }
              break;
 801c5fc:	e006      	b.n	801c60c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c5fe:	683a      	ldr	r2, [r7, #0]
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	0011      	movs	r1, r2
 801c604:	0018      	movs	r0, r3
 801c606:	f000 fc74 	bl	801cef2 <USBD_CtlError>
              break;
 801c60a:	e000      	b.n	801c60e <USBD_StdEPReq+0x1b0>
              break;
 801c60c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c60e:	e0cd      	b.n	801c7ac <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c610:	687a      	ldr	r2, [r7, #4]
 801c612:	23a7      	movs	r3, #167	@ 0xa7
 801c614:	009b      	lsls	r3, r3, #2
 801c616:	5cd3      	ldrb	r3, [r2, r3]
 801c618:	2b02      	cmp	r3, #2
 801c61a:	d002      	beq.n	801c622 <USBD_StdEPReq+0x1c4>
 801c61c:	2b03      	cmp	r3, #3
 801c61e:	d03c      	beq.n	801c69a <USBD_StdEPReq+0x23c>
 801c620:	e0b5      	b.n	801c78e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c622:	220e      	movs	r2, #14
 801c624:	18bb      	adds	r3, r7, r2
 801c626:	781b      	ldrb	r3, [r3, #0]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d00a      	beq.n	801c642 <USBD_StdEPReq+0x1e4>
 801c62c:	18bb      	adds	r3, r7, r2
 801c62e:	781b      	ldrb	r3, [r3, #0]
 801c630:	2b80      	cmp	r3, #128	@ 0x80
 801c632:	d006      	beq.n	801c642 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c634:	683a      	ldr	r2, [r7, #0]
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	0011      	movs	r1, r2
 801c63a:	0018      	movs	r0, r3
 801c63c:	f000 fc59 	bl	801cef2 <USBD_CtlError>
                break;
 801c640:	e0ac      	b.n	801c79c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c642:	220e      	movs	r2, #14
 801c644:	18bb      	adds	r3, r7, r2
 801c646:	781b      	ldrb	r3, [r3, #0]
 801c648:	b25b      	sxtb	r3, r3
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	da0c      	bge.n	801c668 <USBD_StdEPReq+0x20a>
 801c64e:	18bb      	adds	r3, r7, r2
 801c650:	781b      	ldrb	r3, [r3, #0]
 801c652:	227f      	movs	r2, #127	@ 0x7f
 801c654:	401a      	ands	r2, r3
 801c656:	0013      	movs	r3, r2
 801c658:	009b      	lsls	r3, r3, #2
 801c65a:	189b      	adds	r3, r3, r2
 801c65c:	009b      	lsls	r3, r3, #2
 801c65e:	3310      	adds	r3, #16
 801c660:	687a      	ldr	r2, [r7, #4]
 801c662:	18d3      	adds	r3, r2, r3
 801c664:	3304      	adds	r3, #4
 801c666:	e00d      	b.n	801c684 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c668:	230e      	movs	r3, #14
 801c66a:	18fb      	adds	r3, r7, r3
 801c66c:	781b      	ldrb	r3, [r3, #0]
 801c66e:	227f      	movs	r2, #127	@ 0x7f
 801c670:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c672:	0013      	movs	r3, r2
 801c674:	009b      	lsls	r3, r3, #2
 801c676:	189b      	adds	r3, r3, r2
 801c678:	009b      	lsls	r3, r3, #2
 801c67a:	3351      	adds	r3, #81	@ 0x51
 801c67c:	33ff      	adds	r3, #255	@ 0xff
 801c67e:	687a      	ldr	r2, [r7, #4]
 801c680:	18d3      	adds	r3, r2, r3
 801c682:	3304      	adds	r3, #4
 801c684:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c686:	68bb      	ldr	r3, [r7, #8]
 801c688:	2200      	movs	r2, #0
 801c68a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c68c:	68b9      	ldr	r1, [r7, #8]
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	2202      	movs	r2, #2
 801c692:	0018      	movs	r0, r3
 801c694:	f000 fcab 	bl	801cfee <USBD_CtlSendData>
              break;
 801c698:	e080      	b.n	801c79c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c69a:	220e      	movs	r2, #14
 801c69c:	18bb      	adds	r3, r7, r2
 801c69e:	781b      	ldrb	r3, [r3, #0]
 801c6a0:	b25b      	sxtb	r3, r3
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	da14      	bge.n	801c6d0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c6a6:	18bb      	adds	r3, r7, r2
 801c6a8:	781b      	ldrb	r3, [r3, #0]
 801c6aa:	220f      	movs	r2, #15
 801c6ac:	401a      	ands	r2, r3
 801c6ae:	6879      	ldr	r1, [r7, #4]
 801c6b0:	0013      	movs	r3, r2
 801c6b2:	009b      	lsls	r3, r3, #2
 801c6b4:	189b      	adds	r3, r3, r2
 801c6b6:	009b      	lsls	r3, r3, #2
 801c6b8:	18cb      	adds	r3, r1, r3
 801c6ba:	3318      	adds	r3, #24
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d11e      	bne.n	801c700 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c6c2:	683a      	ldr	r2, [r7, #0]
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	0011      	movs	r1, r2
 801c6c8:	0018      	movs	r0, r3
 801c6ca:	f000 fc12 	bl	801cef2 <USBD_CtlError>
                  break;
 801c6ce:	e065      	b.n	801c79c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c6d0:	230e      	movs	r3, #14
 801c6d2:	18fb      	adds	r3, r7, r3
 801c6d4:	781b      	ldrb	r3, [r3, #0]
 801c6d6:	220f      	movs	r2, #15
 801c6d8:	401a      	ands	r2, r3
 801c6da:	6878      	ldr	r0, [r7, #4]
 801c6dc:	23ac      	movs	r3, #172	@ 0xac
 801c6de:	0059      	lsls	r1, r3, #1
 801c6e0:	0013      	movs	r3, r2
 801c6e2:	009b      	lsls	r3, r3, #2
 801c6e4:	189b      	adds	r3, r3, r2
 801c6e6:	009b      	lsls	r3, r3, #2
 801c6e8:	18c3      	adds	r3, r0, r3
 801c6ea:	185b      	adds	r3, r3, r1
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d106      	bne.n	801c700 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c6f2:	683a      	ldr	r2, [r7, #0]
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	0011      	movs	r1, r2
 801c6f8:	0018      	movs	r0, r3
 801c6fa:	f000 fbfa 	bl	801cef2 <USBD_CtlError>
                  break;
 801c6fe:	e04d      	b.n	801c79c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c700:	220e      	movs	r2, #14
 801c702:	18bb      	adds	r3, r7, r2
 801c704:	781b      	ldrb	r3, [r3, #0]
 801c706:	b25b      	sxtb	r3, r3
 801c708:	2b00      	cmp	r3, #0
 801c70a:	da0c      	bge.n	801c726 <USBD_StdEPReq+0x2c8>
 801c70c:	18bb      	adds	r3, r7, r2
 801c70e:	781b      	ldrb	r3, [r3, #0]
 801c710:	227f      	movs	r2, #127	@ 0x7f
 801c712:	401a      	ands	r2, r3
 801c714:	0013      	movs	r3, r2
 801c716:	009b      	lsls	r3, r3, #2
 801c718:	189b      	adds	r3, r3, r2
 801c71a:	009b      	lsls	r3, r3, #2
 801c71c:	3310      	adds	r3, #16
 801c71e:	687a      	ldr	r2, [r7, #4]
 801c720:	18d3      	adds	r3, r2, r3
 801c722:	3304      	adds	r3, #4
 801c724:	e00d      	b.n	801c742 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c726:	230e      	movs	r3, #14
 801c728:	18fb      	adds	r3, r7, r3
 801c72a:	781b      	ldrb	r3, [r3, #0]
 801c72c:	227f      	movs	r2, #127	@ 0x7f
 801c72e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c730:	0013      	movs	r3, r2
 801c732:	009b      	lsls	r3, r3, #2
 801c734:	189b      	adds	r3, r3, r2
 801c736:	009b      	lsls	r3, r3, #2
 801c738:	3351      	adds	r3, #81	@ 0x51
 801c73a:	33ff      	adds	r3, #255	@ 0xff
 801c73c:	687a      	ldr	r2, [r7, #4]
 801c73e:	18d3      	adds	r3, r2, r3
 801c740:	3304      	adds	r3, #4
 801c742:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c744:	220e      	movs	r2, #14
 801c746:	18bb      	adds	r3, r7, r2
 801c748:	781b      	ldrb	r3, [r3, #0]
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d003      	beq.n	801c756 <USBD_StdEPReq+0x2f8>
 801c74e:	18bb      	adds	r3, r7, r2
 801c750:	781b      	ldrb	r3, [r3, #0]
 801c752:	2b80      	cmp	r3, #128	@ 0x80
 801c754:	d103      	bne.n	801c75e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c756:	68bb      	ldr	r3, [r7, #8]
 801c758:	2200      	movs	r2, #0
 801c75a:	601a      	str	r2, [r3, #0]
 801c75c:	e010      	b.n	801c780 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c75e:	230e      	movs	r3, #14
 801c760:	18fb      	adds	r3, r7, r3
 801c762:	781a      	ldrb	r2, [r3, #0]
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	0011      	movs	r1, r2
 801c768:	0018      	movs	r0, r3
 801c76a:	f001 f940 	bl	801d9ee <USBD_LL_IsStallEP>
 801c76e:	1e03      	subs	r3, r0, #0
 801c770:	d003      	beq.n	801c77a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c772:	68bb      	ldr	r3, [r7, #8]
 801c774:	2201      	movs	r2, #1
 801c776:	601a      	str	r2, [r3, #0]
 801c778:	e002      	b.n	801c780 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c77a:	68bb      	ldr	r3, [r7, #8]
 801c77c:	2200      	movs	r2, #0
 801c77e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c780:	68b9      	ldr	r1, [r7, #8]
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	2202      	movs	r2, #2
 801c786:	0018      	movs	r0, r3
 801c788:	f000 fc31 	bl	801cfee <USBD_CtlSendData>
              break;
 801c78c:	e006      	b.n	801c79c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c78e:	683a      	ldr	r2, [r7, #0]
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	0011      	movs	r1, r2
 801c794:	0018      	movs	r0, r3
 801c796:	f000 fbac 	bl	801cef2 <USBD_CtlError>
              break;
 801c79a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c79c:	e006      	b.n	801c7ac <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c79e:	683a      	ldr	r2, [r7, #0]
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	0011      	movs	r1, r2
 801c7a4:	0018      	movs	r0, r3
 801c7a6:	f000 fba4 	bl	801cef2 <USBD_CtlError>
          break;
 801c7aa:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c7ac:	e006      	b.n	801c7bc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c7ae:	683a      	ldr	r2, [r7, #0]
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	0011      	movs	r1, r2
 801c7b4:	0018      	movs	r0, r3
 801c7b6:	f000 fb9c 	bl	801cef2 <USBD_CtlError>
      break;
 801c7ba:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c7bc:	230f      	movs	r3, #15
 801c7be:	18fb      	adds	r3, r7, r3
 801c7c0:	781b      	ldrb	r3, [r3, #0]
}
 801c7c2:	0018      	movs	r0, r3
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	b004      	add	sp, #16
 801c7c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c7cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b084      	sub	sp, #16
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
 801c7d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c7d6:	2308      	movs	r3, #8
 801c7d8:	18fb      	adds	r3, r7, r3
 801c7da:	2200      	movs	r2, #0
 801c7dc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c7de:	2300      	movs	r3, #0
 801c7e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c7e2:	230b      	movs	r3, #11
 801c7e4:	18fb      	adds	r3, r7, r3
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c7ea:	683b      	ldr	r3, [r7, #0]
 801c7ec:	885b      	ldrh	r3, [r3, #2]
 801c7ee:	0a1b      	lsrs	r3, r3, #8
 801c7f0:	b29b      	uxth	r3, r3
 801c7f2:	2b07      	cmp	r3, #7
 801c7f4:	d900      	bls.n	801c7f8 <USBD_GetDescriptor+0x2c>
 801c7f6:	e159      	b.n	801caac <USBD_GetDescriptor+0x2e0>
 801c7f8:	009a      	lsls	r2, r3, #2
 801c7fa:	4bcb      	ldr	r3, [pc, #812]	@ (801cb28 <USBD_GetDescriptor+0x35c>)
 801c7fc:	18d3      	adds	r3, r2, r3
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c802:	687a      	ldr	r2, [r7, #4]
 801c804:	23ac      	movs	r3, #172	@ 0xac
 801c806:	009b      	lsls	r3, r3, #2
 801c808:	58d3      	ldr	r3, [r2, r3]
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	687a      	ldr	r2, [r7, #4]
 801c80e:	7c12      	ldrb	r2, [r2, #16]
 801c810:	2108      	movs	r1, #8
 801c812:	1879      	adds	r1, r7, r1
 801c814:	0010      	movs	r0, r2
 801c816:	4798      	blx	r3
 801c818:	0003      	movs	r3, r0
 801c81a:	60fb      	str	r3, [r7, #12]
      break;
 801c81c:	e153      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	7c1b      	ldrb	r3, [r3, #16]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d10f      	bne.n	801c846 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c826:	687a      	ldr	r2, [r7, #4]
 801c828:	23ad      	movs	r3, #173	@ 0xad
 801c82a:	009b      	lsls	r3, r3, #2
 801c82c:	58d3      	ldr	r3, [r2, r3]
 801c82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c830:	2208      	movs	r2, #8
 801c832:	18ba      	adds	r2, r7, r2
 801c834:	0010      	movs	r0, r2
 801c836:	4798      	blx	r3
 801c838:	0003      	movs	r3, r0
 801c83a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	3301      	adds	r3, #1
 801c840:	2202      	movs	r2, #2
 801c842:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c844:	e13f      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c846:	687a      	ldr	r2, [r7, #4]
 801c848:	23ad      	movs	r3, #173	@ 0xad
 801c84a:	009b      	lsls	r3, r3, #2
 801c84c:	58d3      	ldr	r3, [r2, r3]
 801c84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c850:	2208      	movs	r2, #8
 801c852:	18ba      	adds	r2, r7, r2
 801c854:	0010      	movs	r0, r2
 801c856:	4798      	blx	r3
 801c858:	0003      	movs	r3, r0
 801c85a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	3301      	adds	r3, #1
 801c860:	2202      	movs	r2, #2
 801c862:	701a      	strb	r2, [r3, #0]
      break;
 801c864:	e12f      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c866:	683b      	ldr	r3, [r7, #0]
 801c868:	885b      	ldrh	r3, [r3, #2]
 801c86a:	b2db      	uxtb	r3, r3
 801c86c:	2b05      	cmp	r3, #5
 801c86e:	d900      	bls.n	801c872 <USBD_GetDescriptor+0xa6>
 801c870:	e0d0      	b.n	801ca14 <USBD_GetDescriptor+0x248>
 801c872:	009a      	lsls	r2, r3, #2
 801c874:	4bad      	ldr	r3, [pc, #692]	@ (801cb2c <USBD_GetDescriptor+0x360>)
 801c876:	18d3      	adds	r3, r2, r3
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c87c:	687a      	ldr	r2, [r7, #4]
 801c87e:	23ac      	movs	r3, #172	@ 0xac
 801c880:	009b      	lsls	r3, r3, #2
 801c882:	58d3      	ldr	r3, [r2, r3]
 801c884:	685b      	ldr	r3, [r3, #4]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d00d      	beq.n	801c8a6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c88a:	687a      	ldr	r2, [r7, #4]
 801c88c:	23ac      	movs	r3, #172	@ 0xac
 801c88e:	009b      	lsls	r3, r3, #2
 801c890:	58d3      	ldr	r3, [r2, r3]
 801c892:	685b      	ldr	r3, [r3, #4]
 801c894:	687a      	ldr	r2, [r7, #4]
 801c896:	7c12      	ldrb	r2, [r2, #16]
 801c898:	2108      	movs	r1, #8
 801c89a:	1879      	adds	r1, r7, r1
 801c89c:	0010      	movs	r0, r2
 801c89e:	4798      	blx	r3
 801c8a0:	0003      	movs	r3, r0
 801c8a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c8a4:	e0c3      	b.n	801ca2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c8a6:	683a      	ldr	r2, [r7, #0]
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	0011      	movs	r1, r2
 801c8ac:	0018      	movs	r0, r3
 801c8ae:	f000 fb20 	bl	801cef2 <USBD_CtlError>
            err++;
 801c8b2:	210b      	movs	r1, #11
 801c8b4:	187b      	adds	r3, r7, r1
 801c8b6:	781a      	ldrb	r2, [r3, #0]
 801c8b8:	187b      	adds	r3, r7, r1
 801c8ba:	3201      	adds	r2, #1
 801c8bc:	701a      	strb	r2, [r3, #0]
          break;
 801c8be:	e0b6      	b.n	801ca2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c8c0:	687a      	ldr	r2, [r7, #4]
 801c8c2:	23ac      	movs	r3, #172	@ 0xac
 801c8c4:	009b      	lsls	r3, r3, #2
 801c8c6:	58d3      	ldr	r3, [r2, r3]
 801c8c8:	689b      	ldr	r3, [r3, #8]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d00d      	beq.n	801c8ea <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c8ce:	687a      	ldr	r2, [r7, #4]
 801c8d0:	23ac      	movs	r3, #172	@ 0xac
 801c8d2:	009b      	lsls	r3, r3, #2
 801c8d4:	58d3      	ldr	r3, [r2, r3]
 801c8d6:	689b      	ldr	r3, [r3, #8]
 801c8d8:	687a      	ldr	r2, [r7, #4]
 801c8da:	7c12      	ldrb	r2, [r2, #16]
 801c8dc:	2108      	movs	r1, #8
 801c8de:	1879      	adds	r1, r7, r1
 801c8e0:	0010      	movs	r0, r2
 801c8e2:	4798      	blx	r3
 801c8e4:	0003      	movs	r3, r0
 801c8e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c8e8:	e0a1      	b.n	801ca2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c8ea:	683a      	ldr	r2, [r7, #0]
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	0011      	movs	r1, r2
 801c8f0:	0018      	movs	r0, r3
 801c8f2:	f000 fafe 	bl	801cef2 <USBD_CtlError>
            err++;
 801c8f6:	210b      	movs	r1, #11
 801c8f8:	187b      	adds	r3, r7, r1
 801c8fa:	781a      	ldrb	r2, [r3, #0]
 801c8fc:	187b      	adds	r3, r7, r1
 801c8fe:	3201      	adds	r2, #1
 801c900:	701a      	strb	r2, [r3, #0]
          break;
 801c902:	e094      	b.n	801ca2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c904:	687a      	ldr	r2, [r7, #4]
 801c906:	23ac      	movs	r3, #172	@ 0xac
 801c908:	009b      	lsls	r3, r3, #2
 801c90a:	58d3      	ldr	r3, [r2, r3]
 801c90c:	68db      	ldr	r3, [r3, #12]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d00d      	beq.n	801c92e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c912:	687a      	ldr	r2, [r7, #4]
 801c914:	23ac      	movs	r3, #172	@ 0xac
 801c916:	009b      	lsls	r3, r3, #2
 801c918:	58d3      	ldr	r3, [r2, r3]
 801c91a:	68db      	ldr	r3, [r3, #12]
 801c91c:	687a      	ldr	r2, [r7, #4]
 801c91e:	7c12      	ldrb	r2, [r2, #16]
 801c920:	2108      	movs	r1, #8
 801c922:	1879      	adds	r1, r7, r1
 801c924:	0010      	movs	r0, r2
 801c926:	4798      	blx	r3
 801c928:	0003      	movs	r3, r0
 801c92a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c92c:	e07f      	b.n	801ca2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c92e:	683a      	ldr	r2, [r7, #0]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	0011      	movs	r1, r2
 801c934:	0018      	movs	r0, r3
 801c936:	f000 fadc 	bl	801cef2 <USBD_CtlError>
            err++;
 801c93a:	210b      	movs	r1, #11
 801c93c:	187b      	adds	r3, r7, r1
 801c93e:	781a      	ldrb	r2, [r3, #0]
 801c940:	187b      	adds	r3, r7, r1
 801c942:	3201      	adds	r2, #1
 801c944:	701a      	strb	r2, [r3, #0]
          break;
 801c946:	e072      	b.n	801ca2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c948:	687a      	ldr	r2, [r7, #4]
 801c94a:	23ac      	movs	r3, #172	@ 0xac
 801c94c:	009b      	lsls	r3, r3, #2
 801c94e:	58d3      	ldr	r3, [r2, r3]
 801c950:	691b      	ldr	r3, [r3, #16]
 801c952:	2b00      	cmp	r3, #0
 801c954:	d00d      	beq.n	801c972 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c956:	687a      	ldr	r2, [r7, #4]
 801c958:	23ac      	movs	r3, #172	@ 0xac
 801c95a:	009b      	lsls	r3, r3, #2
 801c95c:	58d3      	ldr	r3, [r2, r3]
 801c95e:	691b      	ldr	r3, [r3, #16]
 801c960:	687a      	ldr	r2, [r7, #4]
 801c962:	7c12      	ldrb	r2, [r2, #16]
 801c964:	2108      	movs	r1, #8
 801c966:	1879      	adds	r1, r7, r1
 801c968:	0010      	movs	r0, r2
 801c96a:	4798      	blx	r3
 801c96c:	0003      	movs	r3, r0
 801c96e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c970:	e05d      	b.n	801ca2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c972:	683a      	ldr	r2, [r7, #0]
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	0011      	movs	r1, r2
 801c978:	0018      	movs	r0, r3
 801c97a:	f000 faba 	bl	801cef2 <USBD_CtlError>
            err++;
 801c97e:	210b      	movs	r1, #11
 801c980:	187b      	adds	r3, r7, r1
 801c982:	781a      	ldrb	r2, [r3, #0]
 801c984:	187b      	adds	r3, r7, r1
 801c986:	3201      	adds	r2, #1
 801c988:	701a      	strb	r2, [r3, #0]
          break;
 801c98a:	e050      	b.n	801ca2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c98c:	687a      	ldr	r2, [r7, #4]
 801c98e:	23ac      	movs	r3, #172	@ 0xac
 801c990:	009b      	lsls	r3, r3, #2
 801c992:	58d3      	ldr	r3, [r2, r3]
 801c994:	695b      	ldr	r3, [r3, #20]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d00d      	beq.n	801c9b6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c99a:	687a      	ldr	r2, [r7, #4]
 801c99c:	23ac      	movs	r3, #172	@ 0xac
 801c99e:	009b      	lsls	r3, r3, #2
 801c9a0:	58d3      	ldr	r3, [r2, r3]
 801c9a2:	695b      	ldr	r3, [r3, #20]
 801c9a4:	687a      	ldr	r2, [r7, #4]
 801c9a6:	7c12      	ldrb	r2, [r2, #16]
 801c9a8:	2108      	movs	r1, #8
 801c9aa:	1879      	adds	r1, r7, r1
 801c9ac:	0010      	movs	r0, r2
 801c9ae:	4798      	blx	r3
 801c9b0:	0003      	movs	r3, r0
 801c9b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c9b4:	e03b      	b.n	801ca2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c9b6:	683a      	ldr	r2, [r7, #0]
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	0011      	movs	r1, r2
 801c9bc:	0018      	movs	r0, r3
 801c9be:	f000 fa98 	bl	801cef2 <USBD_CtlError>
            err++;
 801c9c2:	210b      	movs	r1, #11
 801c9c4:	187b      	adds	r3, r7, r1
 801c9c6:	781a      	ldrb	r2, [r3, #0]
 801c9c8:	187b      	adds	r3, r7, r1
 801c9ca:	3201      	adds	r2, #1
 801c9cc:	701a      	strb	r2, [r3, #0]
          break;
 801c9ce:	e02e      	b.n	801ca2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c9d0:	687a      	ldr	r2, [r7, #4]
 801c9d2:	23ac      	movs	r3, #172	@ 0xac
 801c9d4:	009b      	lsls	r3, r3, #2
 801c9d6:	58d3      	ldr	r3, [r2, r3]
 801c9d8:	699b      	ldr	r3, [r3, #24]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d00d      	beq.n	801c9fa <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c9de:	687a      	ldr	r2, [r7, #4]
 801c9e0:	23ac      	movs	r3, #172	@ 0xac
 801c9e2:	009b      	lsls	r3, r3, #2
 801c9e4:	58d3      	ldr	r3, [r2, r3]
 801c9e6:	699b      	ldr	r3, [r3, #24]
 801c9e8:	687a      	ldr	r2, [r7, #4]
 801c9ea:	7c12      	ldrb	r2, [r2, #16]
 801c9ec:	2108      	movs	r1, #8
 801c9ee:	1879      	adds	r1, r7, r1
 801c9f0:	0010      	movs	r0, r2
 801c9f2:	4798      	blx	r3
 801c9f4:	0003      	movs	r3, r0
 801c9f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c9f8:	e019      	b.n	801ca2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c9fa:	683a      	ldr	r2, [r7, #0]
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	0011      	movs	r1, r2
 801ca00:	0018      	movs	r0, r3
 801ca02:	f000 fa76 	bl	801cef2 <USBD_CtlError>
            err++;
 801ca06:	210b      	movs	r1, #11
 801ca08:	187b      	adds	r3, r7, r1
 801ca0a:	781a      	ldrb	r2, [r3, #0]
 801ca0c:	187b      	adds	r3, r7, r1
 801ca0e:	3201      	adds	r2, #1
 801ca10:	701a      	strb	r2, [r3, #0]
          break;
 801ca12:	e00c      	b.n	801ca2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801ca14:	683a      	ldr	r2, [r7, #0]
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	0011      	movs	r1, r2
 801ca1a:	0018      	movs	r0, r3
 801ca1c:	f000 fa69 	bl	801cef2 <USBD_CtlError>
          err++;
 801ca20:	210b      	movs	r1, #11
 801ca22:	187b      	adds	r3, r7, r1
 801ca24:	781a      	ldrb	r2, [r3, #0]
 801ca26:	187b      	adds	r3, r7, r1
 801ca28:	3201      	adds	r2, #1
 801ca2a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801ca2c:	e04b      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>
 801ca2e:	e04a      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	7c1b      	ldrb	r3, [r3, #16]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d10b      	bne.n	801ca50 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801ca38:	687a      	ldr	r2, [r7, #4]
 801ca3a:	23ad      	movs	r3, #173	@ 0xad
 801ca3c:	009b      	lsls	r3, r3, #2
 801ca3e:	58d3      	ldr	r3, [r2, r3]
 801ca40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca42:	2208      	movs	r2, #8
 801ca44:	18ba      	adds	r2, r7, r2
 801ca46:	0010      	movs	r0, r2
 801ca48:	4798      	blx	r3
 801ca4a:	0003      	movs	r3, r0
 801ca4c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ca4e:	e03a      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801ca50:	683a      	ldr	r2, [r7, #0]
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	0011      	movs	r1, r2
 801ca56:	0018      	movs	r0, r3
 801ca58:	f000 fa4b 	bl	801cef2 <USBD_CtlError>
        err++;
 801ca5c:	210b      	movs	r1, #11
 801ca5e:	187b      	adds	r3, r7, r1
 801ca60:	781a      	ldrb	r2, [r3, #0]
 801ca62:	187b      	adds	r3, r7, r1
 801ca64:	3201      	adds	r2, #1
 801ca66:	701a      	strb	r2, [r3, #0]
      break;
 801ca68:	e02d      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	7c1b      	ldrb	r3, [r3, #16]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d10f      	bne.n	801ca92 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ca72:	687a      	ldr	r2, [r7, #4]
 801ca74:	23ad      	movs	r3, #173	@ 0xad
 801ca76:	009b      	lsls	r3, r3, #2
 801ca78:	58d3      	ldr	r3, [r2, r3]
 801ca7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ca7c:	2208      	movs	r2, #8
 801ca7e:	18ba      	adds	r2, r7, r2
 801ca80:	0010      	movs	r0, r2
 801ca82:	4798      	blx	r3
 801ca84:	0003      	movs	r3, r0
 801ca86:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	3301      	adds	r3, #1
 801ca8c:	2207      	movs	r2, #7
 801ca8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ca90:	e019      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801ca92:	683a      	ldr	r2, [r7, #0]
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	0011      	movs	r1, r2
 801ca98:	0018      	movs	r0, r3
 801ca9a:	f000 fa2a 	bl	801cef2 <USBD_CtlError>
        err++;
 801ca9e:	210b      	movs	r1, #11
 801caa0:	187b      	adds	r3, r7, r1
 801caa2:	781a      	ldrb	r2, [r3, #0]
 801caa4:	187b      	adds	r3, r7, r1
 801caa6:	3201      	adds	r2, #1
 801caa8:	701a      	strb	r2, [r3, #0]
      break;
 801caaa:	e00c      	b.n	801cac6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801caac:	683a      	ldr	r2, [r7, #0]
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	0011      	movs	r1, r2
 801cab2:	0018      	movs	r0, r3
 801cab4:	f000 fa1d 	bl	801cef2 <USBD_CtlError>
      err++;
 801cab8:	210b      	movs	r1, #11
 801caba:	187b      	adds	r3, r7, r1
 801cabc:	781a      	ldrb	r2, [r3, #0]
 801cabe:	187b      	adds	r3, r7, r1
 801cac0:	3201      	adds	r2, #1
 801cac2:	701a      	strb	r2, [r3, #0]
      break;
 801cac4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801cac6:	230b      	movs	r3, #11
 801cac8:	18fb      	adds	r3, r7, r3
 801caca:	781b      	ldrb	r3, [r3, #0]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d127      	bne.n	801cb20 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801cad0:	2108      	movs	r1, #8
 801cad2:	187b      	adds	r3, r7, r1
 801cad4:	881b      	ldrh	r3, [r3, #0]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d019      	beq.n	801cb0e <USBD_GetDescriptor+0x342>
 801cada:	683b      	ldr	r3, [r7, #0]
 801cadc:	88db      	ldrh	r3, [r3, #6]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d015      	beq.n	801cb0e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	88da      	ldrh	r2, [r3, #6]
 801cae6:	187b      	adds	r3, r7, r1
 801cae8:	881b      	ldrh	r3, [r3, #0]
 801caea:	1c18      	adds	r0, r3, #0
 801caec:	1c11      	adds	r1, r2, #0
 801caee:	b28a      	uxth	r2, r1
 801caf0:	b283      	uxth	r3, r0
 801caf2:	429a      	cmp	r2, r3
 801caf4:	d900      	bls.n	801caf8 <USBD_GetDescriptor+0x32c>
 801caf6:	1c01      	adds	r1, r0, #0
 801caf8:	b28a      	uxth	r2, r1
 801cafa:	2108      	movs	r1, #8
 801cafc:	187b      	adds	r3, r7, r1
 801cafe:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801cb00:	187b      	adds	r3, r7, r1
 801cb02:	881a      	ldrh	r2, [r3, #0]
 801cb04:	68f9      	ldr	r1, [r7, #12]
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	0018      	movs	r0, r3
 801cb0a:	f000 fa70 	bl	801cfee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801cb0e:	683b      	ldr	r3, [r7, #0]
 801cb10:	88db      	ldrh	r3, [r3, #6]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d105      	bne.n	801cb22 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	0018      	movs	r0, r3
 801cb1a:	f000 fad2 	bl	801d0c2 <USBD_CtlSendStatus>
 801cb1e:	e000      	b.n	801cb22 <USBD_GetDescriptor+0x356>
    return;
 801cb20:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801cb22:	46bd      	mov	sp, r7
 801cb24:	b004      	add	sp, #16
 801cb26:	bd80      	pop	{r7, pc}
 801cb28:	08025ee8 	.word	0x08025ee8
 801cb2c:	08025f08 	.word	0x08025f08

0801cb30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801cb30:	b590      	push	{r4, r7, lr}
 801cb32:	b085      	sub	sp, #20
 801cb34:	af00      	add	r7, sp, #0
 801cb36:	6078      	str	r0, [r7, #4]
 801cb38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801cb3a:	683b      	ldr	r3, [r7, #0]
 801cb3c:	889b      	ldrh	r3, [r3, #4]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d13d      	bne.n	801cbbe <USBD_SetAddress+0x8e>
 801cb42:	683b      	ldr	r3, [r7, #0]
 801cb44:	88db      	ldrh	r3, [r3, #6]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d139      	bne.n	801cbbe <USBD_SetAddress+0x8e>
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	885b      	ldrh	r3, [r3, #2]
 801cb4e:	2b7f      	cmp	r3, #127	@ 0x7f
 801cb50:	d835      	bhi.n	801cbbe <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801cb52:	683b      	ldr	r3, [r7, #0]
 801cb54:	885b      	ldrh	r3, [r3, #2]
 801cb56:	b2da      	uxtb	r2, r3
 801cb58:	230f      	movs	r3, #15
 801cb5a:	18fb      	adds	r3, r7, r3
 801cb5c:	217f      	movs	r1, #127	@ 0x7f
 801cb5e:	400a      	ands	r2, r1
 801cb60:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cb62:	687a      	ldr	r2, [r7, #4]
 801cb64:	23a7      	movs	r3, #167	@ 0xa7
 801cb66:	009b      	lsls	r3, r3, #2
 801cb68:	5cd3      	ldrb	r3, [r2, r3]
 801cb6a:	2b03      	cmp	r3, #3
 801cb6c:	d106      	bne.n	801cb7c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801cb6e:	683a      	ldr	r2, [r7, #0]
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	0011      	movs	r1, r2
 801cb74:	0018      	movs	r0, r3
 801cb76:	f000 f9bc 	bl	801cef2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cb7a:	e027      	b.n	801cbcc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	240f      	movs	r4, #15
 801cb80:	193a      	adds	r2, r7, r4
 801cb82:	4914      	ldr	r1, [pc, #80]	@ (801cbd4 <USBD_SetAddress+0xa4>)
 801cb84:	7812      	ldrb	r2, [r2, #0]
 801cb86:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801cb88:	193b      	adds	r3, r7, r4
 801cb8a:	781a      	ldrb	r2, [r3, #0]
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	0011      	movs	r1, r2
 801cb90:	0018      	movs	r0, r3
 801cb92:	f000 ff5d 	bl	801da50 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	0018      	movs	r0, r3
 801cb9a:	f000 fa92 	bl	801d0c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801cb9e:	193b      	adds	r3, r7, r4
 801cba0:	781b      	ldrb	r3, [r3, #0]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d005      	beq.n	801cbb2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801cba6:	687a      	ldr	r2, [r7, #4]
 801cba8:	23a7      	movs	r3, #167	@ 0xa7
 801cbaa:	009b      	lsls	r3, r3, #2
 801cbac:	2102      	movs	r1, #2
 801cbae:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cbb0:	e00c      	b.n	801cbcc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801cbb2:	687a      	ldr	r2, [r7, #4]
 801cbb4:	23a7      	movs	r3, #167	@ 0xa7
 801cbb6:	009b      	lsls	r3, r3, #2
 801cbb8:	2101      	movs	r1, #1
 801cbba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cbbc:	e006      	b.n	801cbcc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801cbbe:	683a      	ldr	r2, [r7, #0]
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	0011      	movs	r1, r2
 801cbc4:	0018      	movs	r0, r3
 801cbc6:	f000 f994 	bl	801cef2 <USBD_CtlError>
  }
}
 801cbca:	46c0      	nop			@ (mov r8, r8)
 801cbcc:	46c0      	nop			@ (mov r8, r8)
 801cbce:	46bd      	mov	sp, r7
 801cbd0:	b005      	add	sp, #20
 801cbd2:	bd90      	pop	{r4, r7, pc}
 801cbd4:	0000029e 	.word	0x0000029e

0801cbd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	b082      	sub	sp, #8
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	6078      	str	r0, [r7, #4]
 801cbe0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801cbe2:	683b      	ldr	r3, [r7, #0]
 801cbe4:	885b      	ldrh	r3, [r3, #2]
 801cbe6:	b2da      	uxtb	r2, r3
 801cbe8:	4b4c      	ldr	r3, [pc, #304]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cbea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801cbec:	4b4b      	ldr	r3, [pc, #300]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cbee:	781b      	ldrb	r3, [r3, #0]
 801cbf0:	2b01      	cmp	r3, #1
 801cbf2:	d906      	bls.n	801cc02 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801cbf4:	683a      	ldr	r2, [r7, #0]
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	0011      	movs	r1, r2
 801cbfa:	0018      	movs	r0, r3
 801cbfc:	f000 f979 	bl	801cef2 <USBD_CtlError>
 801cc00:	e088      	b.n	801cd14 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801cc02:	687a      	ldr	r2, [r7, #4]
 801cc04:	23a7      	movs	r3, #167	@ 0xa7
 801cc06:	009b      	lsls	r3, r3, #2
 801cc08:	5cd3      	ldrb	r3, [r2, r3]
 801cc0a:	2b02      	cmp	r3, #2
 801cc0c:	d002      	beq.n	801cc14 <USBD_SetConfig+0x3c>
 801cc0e:	2b03      	cmp	r3, #3
 801cc10:	d029      	beq.n	801cc66 <USBD_SetConfig+0x8e>
 801cc12:	e071      	b.n	801ccf8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801cc14:	4b41      	ldr	r3, [pc, #260]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cc16:	781b      	ldrb	r3, [r3, #0]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d01f      	beq.n	801cc5c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801cc1c:	4b3f      	ldr	r3, [pc, #252]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cc1e:	781b      	ldrb	r3, [r3, #0]
 801cc20:	001a      	movs	r2, r3
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801cc26:	687a      	ldr	r2, [r7, #4]
 801cc28:	23a7      	movs	r3, #167	@ 0xa7
 801cc2a:	009b      	lsls	r3, r3, #2
 801cc2c:	2103      	movs	r1, #3
 801cc2e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801cc30:	4b3a      	ldr	r3, [pc, #232]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cc32:	781a      	ldrb	r2, [r3, #0]
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	0011      	movs	r1, r2
 801cc38:	0018      	movs	r0, r3
 801cc3a:	f7ff f8c6 	bl	801bdca <USBD_SetClassConfig>
 801cc3e:	0003      	movs	r3, r0
 801cc40:	2b02      	cmp	r3, #2
 801cc42:	d106      	bne.n	801cc52 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801cc44:	683a      	ldr	r2, [r7, #0]
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	0011      	movs	r1, r2
 801cc4a:	0018      	movs	r0, r3
 801cc4c:	f000 f951 	bl	801cef2 <USBD_CtlError>
            return;
 801cc50:	e060      	b.n	801cd14 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	0018      	movs	r0, r3
 801cc56:	f000 fa34 	bl	801d0c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801cc5a:	e05b      	b.n	801cd14 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	0018      	movs	r0, r3
 801cc60:	f000 fa2f 	bl	801d0c2 <USBD_CtlSendStatus>
        break;
 801cc64:	e056      	b.n	801cd14 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801cc66:	4b2d      	ldr	r3, [pc, #180]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cc68:	781b      	ldrb	r3, [r3, #0]
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d115      	bne.n	801cc9a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801cc6e:	687a      	ldr	r2, [r7, #4]
 801cc70:	23a7      	movs	r3, #167	@ 0xa7
 801cc72:	009b      	lsls	r3, r3, #2
 801cc74:	2102      	movs	r1, #2
 801cc76:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801cc78:	4b28      	ldr	r3, [pc, #160]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cc7a:	781b      	ldrb	r3, [r3, #0]
 801cc7c:	001a      	movs	r2, r3
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801cc82:	4b26      	ldr	r3, [pc, #152]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cc84:	781a      	ldrb	r2, [r3, #0]
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	0011      	movs	r1, r2
 801cc8a:	0018      	movs	r0, r3
 801cc8c:	f7ff f8c4 	bl	801be18 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	0018      	movs	r0, r3
 801cc94:	f000 fa15 	bl	801d0c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801cc98:	e03c      	b.n	801cd14 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801cc9a:	4b20      	ldr	r3, [pc, #128]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cc9c:	781b      	ldrb	r3, [r3, #0]
 801cc9e:	001a      	movs	r2, r3
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	685b      	ldr	r3, [r3, #4]
 801cca4:	429a      	cmp	r2, r3
 801cca6:	d022      	beq.n	801ccee <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	685b      	ldr	r3, [r3, #4]
 801ccac:	b2da      	uxtb	r2, r3
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	0011      	movs	r1, r2
 801ccb2:	0018      	movs	r0, r3
 801ccb4:	f7ff f8b0 	bl	801be18 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801ccb8:	4b18      	ldr	r3, [pc, #96]	@ (801cd1c <USBD_SetConfig+0x144>)
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	001a      	movs	r2, r3
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ccc2:	4b16      	ldr	r3, [pc, #88]	@ (801cd1c <USBD_SetConfig+0x144>)
 801ccc4:	781a      	ldrb	r2, [r3, #0]
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	0011      	movs	r1, r2
 801ccca:	0018      	movs	r0, r3
 801cccc:	f7ff f87d 	bl	801bdca <USBD_SetClassConfig>
 801ccd0:	0003      	movs	r3, r0
 801ccd2:	2b02      	cmp	r3, #2
 801ccd4:	d106      	bne.n	801cce4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801ccd6:	683a      	ldr	r2, [r7, #0]
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	0011      	movs	r1, r2
 801ccdc:	0018      	movs	r0, r3
 801ccde:	f000 f908 	bl	801cef2 <USBD_CtlError>
            return;
 801cce2:	e017      	b.n	801cd14 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	0018      	movs	r0, r3
 801cce8:	f000 f9eb 	bl	801d0c2 <USBD_CtlSendStatus>
        break;
 801ccec:	e012      	b.n	801cd14 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	0018      	movs	r0, r3
 801ccf2:	f000 f9e6 	bl	801d0c2 <USBD_CtlSendStatus>
        break;
 801ccf6:	e00d      	b.n	801cd14 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801ccf8:	683a      	ldr	r2, [r7, #0]
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	0011      	movs	r1, r2
 801ccfe:	0018      	movs	r0, r3
 801cd00:	f000 f8f7 	bl	801cef2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801cd04:	4b05      	ldr	r3, [pc, #20]	@ (801cd1c <USBD_SetConfig+0x144>)
 801cd06:	781a      	ldrb	r2, [r3, #0]
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	0011      	movs	r1, r2
 801cd0c:	0018      	movs	r0, r3
 801cd0e:	f7ff f883 	bl	801be18 <USBD_ClrClassConfig>
        break;
 801cd12:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801cd14:	46bd      	mov	sp, r7
 801cd16:	b002      	add	sp, #8
 801cd18:	bd80      	pop	{r7, pc}
 801cd1a:	46c0      	nop			@ (mov r8, r8)
 801cd1c:	20001ff8 	.word	0x20001ff8

0801cd20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cd20:	b580      	push	{r7, lr}
 801cd22:	b082      	sub	sp, #8
 801cd24:	af00      	add	r7, sp, #0
 801cd26:	6078      	str	r0, [r7, #4]
 801cd28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801cd2a:	683b      	ldr	r3, [r7, #0]
 801cd2c:	88db      	ldrh	r3, [r3, #6]
 801cd2e:	2b01      	cmp	r3, #1
 801cd30:	d006      	beq.n	801cd40 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801cd32:	683a      	ldr	r2, [r7, #0]
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	0011      	movs	r1, r2
 801cd38:	0018      	movs	r0, r3
 801cd3a:	f000 f8da 	bl	801cef2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801cd3e:	e026      	b.n	801cd8e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801cd40:	687a      	ldr	r2, [r7, #4]
 801cd42:	23a7      	movs	r3, #167	@ 0xa7
 801cd44:	009b      	lsls	r3, r3, #2
 801cd46:	5cd3      	ldrb	r3, [r2, r3]
 801cd48:	2b02      	cmp	r3, #2
 801cd4a:	dc02      	bgt.n	801cd52 <USBD_GetConfig+0x32>
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	dc03      	bgt.n	801cd58 <USBD_GetConfig+0x38>
 801cd50:	e016      	b.n	801cd80 <USBD_GetConfig+0x60>
 801cd52:	2b03      	cmp	r3, #3
 801cd54:	d00c      	beq.n	801cd70 <USBD_GetConfig+0x50>
 801cd56:	e013      	b.n	801cd80 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	3308      	adds	r3, #8
 801cd62:	0019      	movs	r1, r3
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	2201      	movs	r2, #1
 801cd68:	0018      	movs	r0, r3
 801cd6a:	f000 f940 	bl	801cfee <USBD_CtlSendData>
        break;
 801cd6e:	e00e      	b.n	801cd8e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	1d19      	adds	r1, r3, #4
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	2201      	movs	r2, #1
 801cd78:	0018      	movs	r0, r3
 801cd7a:	f000 f938 	bl	801cfee <USBD_CtlSendData>
        break;
 801cd7e:	e006      	b.n	801cd8e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801cd80:	683a      	ldr	r2, [r7, #0]
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	0011      	movs	r1, r2
 801cd86:	0018      	movs	r0, r3
 801cd88:	f000 f8b3 	bl	801cef2 <USBD_CtlError>
        break;
 801cd8c:	46c0      	nop			@ (mov r8, r8)
}
 801cd8e:	46c0      	nop			@ (mov r8, r8)
 801cd90:	46bd      	mov	sp, r7
 801cd92:	b002      	add	sp, #8
 801cd94:	bd80      	pop	{r7, pc}

0801cd96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cd96:	b580      	push	{r7, lr}
 801cd98:	b082      	sub	sp, #8
 801cd9a:	af00      	add	r7, sp, #0
 801cd9c:	6078      	str	r0, [r7, #4]
 801cd9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801cda0:	687a      	ldr	r2, [r7, #4]
 801cda2:	23a7      	movs	r3, #167	@ 0xa7
 801cda4:	009b      	lsls	r3, r3, #2
 801cda6:	5cd3      	ldrb	r3, [r2, r3]
 801cda8:	3b01      	subs	r3, #1
 801cdaa:	2b02      	cmp	r3, #2
 801cdac:	d822      	bhi.n	801cdf4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801cdae:	683b      	ldr	r3, [r7, #0]
 801cdb0:	88db      	ldrh	r3, [r3, #6]
 801cdb2:	2b02      	cmp	r3, #2
 801cdb4:	d006      	beq.n	801cdc4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801cdb6:	683a      	ldr	r2, [r7, #0]
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	0011      	movs	r1, r2
 801cdbc:	0018      	movs	r0, r3
 801cdbe:	f000 f898 	bl	801cef2 <USBD_CtlError>
        break;
 801cdc2:	e01e      	b.n	801ce02 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	2201      	movs	r2, #1
 801cdc8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801cdca:	687a      	ldr	r2, [r7, #4]
 801cdcc:	23a9      	movs	r3, #169	@ 0xa9
 801cdce:	009b      	lsls	r3, r3, #2
 801cdd0:	58d3      	ldr	r3, [r2, r3]
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d005      	beq.n	801cde2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	68db      	ldr	r3, [r3, #12]
 801cdda:	2202      	movs	r2, #2
 801cddc:	431a      	orrs	r2, r3
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	330c      	adds	r3, #12
 801cde6:	0019      	movs	r1, r3
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	2202      	movs	r2, #2
 801cdec:	0018      	movs	r0, r3
 801cdee:	f000 f8fe 	bl	801cfee <USBD_CtlSendData>
      break;
 801cdf2:	e006      	b.n	801ce02 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801cdf4:	683a      	ldr	r2, [r7, #0]
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	0011      	movs	r1, r2
 801cdfa:	0018      	movs	r0, r3
 801cdfc:	f000 f879 	bl	801cef2 <USBD_CtlError>
      break;
 801ce00:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ce02:	46c0      	nop			@ (mov r8, r8)
 801ce04:	46bd      	mov	sp, r7
 801ce06:	b002      	add	sp, #8
 801ce08:	bd80      	pop	{r7, pc}

0801ce0a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ce0a:	b580      	push	{r7, lr}
 801ce0c:	b082      	sub	sp, #8
 801ce0e:	af00      	add	r7, sp, #0
 801ce10:	6078      	str	r0, [r7, #4]
 801ce12:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ce14:	683b      	ldr	r3, [r7, #0]
 801ce16:	885b      	ldrh	r3, [r3, #2]
 801ce18:	2b01      	cmp	r3, #1
 801ce1a:	d108      	bne.n	801ce2e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801ce1c:	687a      	ldr	r2, [r7, #4]
 801ce1e:	23a9      	movs	r3, #169	@ 0xa9
 801ce20:	009b      	lsls	r3, r3, #2
 801ce22:	2101      	movs	r1, #1
 801ce24:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	0018      	movs	r0, r3
 801ce2a:	f000 f94a 	bl	801d0c2 <USBD_CtlSendStatus>
  }
}
 801ce2e:	46c0      	nop			@ (mov r8, r8)
 801ce30:	46bd      	mov	sp, r7
 801ce32:	b002      	add	sp, #8
 801ce34:	bd80      	pop	{r7, pc}

0801ce36 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ce36:	b580      	push	{r7, lr}
 801ce38:	b082      	sub	sp, #8
 801ce3a:	af00      	add	r7, sp, #0
 801ce3c:	6078      	str	r0, [r7, #4]
 801ce3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ce40:	687a      	ldr	r2, [r7, #4]
 801ce42:	23a7      	movs	r3, #167	@ 0xa7
 801ce44:	009b      	lsls	r3, r3, #2
 801ce46:	5cd3      	ldrb	r3, [r2, r3]
 801ce48:	3b01      	subs	r3, #1
 801ce4a:	2b02      	cmp	r3, #2
 801ce4c:	d80d      	bhi.n	801ce6a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ce4e:	683b      	ldr	r3, [r7, #0]
 801ce50:	885b      	ldrh	r3, [r3, #2]
 801ce52:	2b01      	cmp	r3, #1
 801ce54:	d110      	bne.n	801ce78 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801ce56:	687a      	ldr	r2, [r7, #4]
 801ce58:	23a9      	movs	r3, #169	@ 0xa9
 801ce5a:	009b      	lsls	r3, r3, #2
 801ce5c:	2100      	movs	r1, #0
 801ce5e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	0018      	movs	r0, r3
 801ce64:	f000 f92d 	bl	801d0c2 <USBD_CtlSendStatus>
      }
      break;
 801ce68:	e006      	b.n	801ce78 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801ce6a:	683a      	ldr	r2, [r7, #0]
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	0011      	movs	r1, r2
 801ce70:	0018      	movs	r0, r3
 801ce72:	f000 f83e 	bl	801cef2 <USBD_CtlError>
      break;
 801ce76:	e000      	b.n	801ce7a <USBD_ClrFeature+0x44>
      break;
 801ce78:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ce7a:	46c0      	nop			@ (mov r8, r8)
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	b002      	add	sp, #8
 801ce80:	bd80      	pop	{r7, pc}

0801ce82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801ce82:	b580      	push	{r7, lr}
 801ce84:	b082      	sub	sp, #8
 801ce86:	af00      	add	r7, sp, #0
 801ce88:	6078      	str	r0, [r7, #4]
 801ce8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801ce8c:	683b      	ldr	r3, [r7, #0]
 801ce8e:	781a      	ldrb	r2, [r3, #0]
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801ce94:	683b      	ldr	r3, [r7, #0]
 801ce96:	785a      	ldrb	r2, [r3, #1]
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801ce9c:	683b      	ldr	r3, [r7, #0]
 801ce9e:	3302      	adds	r3, #2
 801cea0:	781b      	ldrb	r3, [r3, #0]
 801cea2:	001a      	movs	r2, r3
 801cea4:	683b      	ldr	r3, [r7, #0]
 801cea6:	3303      	adds	r3, #3
 801cea8:	781b      	ldrb	r3, [r3, #0]
 801ceaa:	021b      	lsls	r3, r3, #8
 801ceac:	b29b      	uxth	r3, r3
 801ceae:	18d3      	adds	r3, r2, r3
 801ceb0:	b29a      	uxth	r2, r3
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801ceb6:	683b      	ldr	r3, [r7, #0]
 801ceb8:	3304      	adds	r3, #4
 801ceba:	781b      	ldrb	r3, [r3, #0]
 801cebc:	001a      	movs	r2, r3
 801cebe:	683b      	ldr	r3, [r7, #0]
 801cec0:	3305      	adds	r3, #5
 801cec2:	781b      	ldrb	r3, [r3, #0]
 801cec4:	021b      	lsls	r3, r3, #8
 801cec6:	b29b      	uxth	r3, r3
 801cec8:	18d3      	adds	r3, r2, r3
 801ceca:	b29a      	uxth	r2, r3
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801ced0:	683b      	ldr	r3, [r7, #0]
 801ced2:	3306      	adds	r3, #6
 801ced4:	781b      	ldrb	r3, [r3, #0]
 801ced6:	001a      	movs	r2, r3
 801ced8:	683b      	ldr	r3, [r7, #0]
 801ceda:	3307      	adds	r3, #7
 801cedc:	781b      	ldrb	r3, [r3, #0]
 801cede:	021b      	lsls	r3, r3, #8
 801cee0:	b29b      	uxth	r3, r3
 801cee2:	18d3      	adds	r3, r2, r3
 801cee4:	b29a      	uxth	r2, r3
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	80da      	strh	r2, [r3, #6]

}
 801ceea:	46c0      	nop			@ (mov r8, r8)
 801ceec:	46bd      	mov	sp, r7
 801ceee:	b002      	add	sp, #8
 801cef0:	bd80      	pop	{r7, pc}

0801cef2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801cef2:	b580      	push	{r7, lr}
 801cef4:	b082      	sub	sp, #8
 801cef6:	af00      	add	r7, sp, #0
 801cef8:	6078      	str	r0, [r7, #4]
 801cefa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	2180      	movs	r1, #128	@ 0x80
 801cf00:	0018      	movs	r0, r3
 801cf02:	f000 fd1e 	bl	801d942 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	2100      	movs	r1, #0
 801cf0a:	0018      	movs	r0, r3
 801cf0c:	f000 fd19 	bl	801d942 <USBD_LL_StallEP>
}
 801cf10:	46c0      	nop			@ (mov r8, r8)
 801cf12:	46bd      	mov	sp, r7
 801cf14:	b002      	add	sp, #8
 801cf16:	bd80      	pop	{r7, pc}

0801cf18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801cf18:	b590      	push	{r4, r7, lr}
 801cf1a:	b087      	sub	sp, #28
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	60f8      	str	r0, [r7, #12]
 801cf20:	60b9      	str	r1, [r7, #8]
 801cf22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801cf24:	2417      	movs	r4, #23
 801cf26:	193b      	adds	r3, r7, r4
 801cf28:	2200      	movs	r2, #0
 801cf2a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d03c      	beq.n	801cfac <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	0018      	movs	r0, r3
 801cf36:	f000 f83d 	bl	801cfb4 <USBD_GetLen>
 801cf3a:	0003      	movs	r3, r0
 801cf3c:	3301      	adds	r3, #1
 801cf3e:	b29b      	uxth	r3, r3
 801cf40:	18db      	adds	r3, r3, r3
 801cf42:	b29a      	uxth	r2, r3
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801cf48:	193b      	adds	r3, r7, r4
 801cf4a:	781b      	ldrb	r3, [r3, #0]
 801cf4c:	193a      	adds	r2, r7, r4
 801cf4e:	1c59      	adds	r1, r3, #1
 801cf50:	7011      	strb	r1, [r2, #0]
 801cf52:	001a      	movs	r2, r3
 801cf54:	68bb      	ldr	r3, [r7, #8]
 801cf56:	189b      	adds	r3, r3, r2
 801cf58:	687a      	ldr	r2, [r7, #4]
 801cf5a:	7812      	ldrb	r2, [r2, #0]
 801cf5c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801cf5e:	193b      	adds	r3, r7, r4
 801cf60:	781b      	ldrb	r3, [r3, #0]
 801cf62:	193a      	adds	r2, r7, r4
 801cf64:	1c59      	adds	r1, r3, #1
 801cf66:	7011      	strb	r1, [r2, #0]
 801cf68:	001a      	movs	r2, r3
 801cf6a:	68bb      	ldr	r3, [r7, #8]
 801cf6c:	189b      	adds	r3, r3, r2
 801cf6e:	2203      	movs	r2, #3
 801cf70:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801cf72:	e017      	b.n	801cfa4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	1c5a      	adds	r2, r3, #1
 801cf78:	60fa      	str	r2, [r7, #12]
 801cf7a:	2417      	movs	r4, #23
 801cf7c:	193a      	adds	r2, r7, r4
 801cf7e:	7812      	ldrb	r2, [r2, #0]
 801cf80:	1939      	adds	r1, r7, r4
 801cf82:	1c50      	adds	r0, r2, #1
 801cf84:	7008      	strb	r0, [r1, #0]
 801cf86:	0011      	movs	r1, r2
 801cf88:	68ba      	ldr	r2, [r7, #8]
 801cf8a:	1852      	adds	r2, r2, r1
 801cf8c:	781b      	ldrb	r3, [r3, #0]
 801cf8e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801cf90:	193b      	adds	r3, r7, r4
 801cf92:	781b      	ldrb	r3, [r3, #0]
 801cf94:	193a      	adds	r2, r7, r4
 801cf96:	1c59      	adds	r1, r3, #1
 801cf98:	7011      	strb	r1, [r2, #0]
 801cf9a:	001a      	movs	r2, r3
 801cf9c:	68bb      	ldr	r3, [r7, #8]
 801cf9e:	189b      	adds	r3, r3, r2
 801cfa0:	2200      	movs	r2, #0
 801cfa2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	781b      	ldrb	r3, [r3, #0]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d1e3      	bne.n	801cf74 <USBD_GetString+0x5c>
    }
  }
}
 801cfac:	46c0      	nop			@ (mov r8, r8)
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	b007      	add	sp, #28
 801cfb2:	bd90      	pop	{r4, r7, pc}

0801cfb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cfb4:	b580      	push	{r7, lr}
 801cfb6:	b084      	sub	sp, #16
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cfbc:	230f      	movs	r3, #15
 801cfbe:	18fb      	adds	r3, r7, r3
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801cfc4:	e008      	b.n	801cfd8 <USBD_GetLen+0x24>
  {
    len++;
 801cfc6:	210f      	movs	r1, #15
 801cfc8:	187b      	adds	r3, r7, r1
 801cfca:	781a      	ldrb	r2, [r3, #0]
 801cfcc:	187b      	adds	r3, r7, r1
 801cfce:	3201      	adds	r2, #1
 801cfd0:	701a      	strb	r2, [r3, #0]
    buf++;
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	3301      	adds	r3, #1
 801cfd6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	781b      	ldrb	r3, [r3, #0]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d1f2      	bne.n	801cfc6 <USBD_GetLen+0x12>
  }

  return len;
 801cfe0:	230f      	movs	r3, #15
 801cfe2:	18fb      	adds	r3, r7, r3
 801cfe4:	781b      	ldrb	r3, [r3, #0]
}
 801cfe6:	0018      	movs	r0, r3
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	b004      	add	sp, #16
 801cfec:	bd80      	pop	{r7, pc}

0801cfee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801cfee:	b580      	push	{r7, lr}
 801cff0:	b084      	sub	sp, #16
 801cff2:	af00      	add	r7, sp, #0
 801cff4:	60f8      	str	r0, [r7, #12]
 801cff6:	60b9      	str	r1, [r7, #8]
 801cff8:	1dbb      	adds	r3, r7, #6
 801cffa:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801cffc:	68fa      	ldr	r2, [r7, #12]
 801cffe:	23a5      	movs	r3, #165	@ 0xa5
 801d000:	009b      	lsls	r3, r3, #2
 801d002:	2102      	movs	r1, #2
 801d004:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801d006:	1dbb      	adds	r3, r7, #6
 801d008:	881a      	ldrh	r2, [r3, #0]
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801d00e:	1dbb      	adds	r3, r7, #6
 801d010:	881a      	ldrh	r2, [r3, #0]
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d016:	1dbb      	adds	r3, r7, #6
 801d018:	881b      	ldrh	r3, [r3, #0]
 801d01a:	68ba      	ldr	r2, [r7, #8]
 801d01c:	68f8      	ldr	r0, [r7, #12]
 801d01e:	2100      	movs	r1, #0
 801d020:	f000 fd41 	bl	801daa6 <USBD_LL_Transmit>

  return USBD_OK;
 801d024:	2300      	movs	r3, #0
}
 801d026:	0018      	movs	r0, r3
 801d028:	46bd      	mov	sp, r7
 801d02a:	b004      	add	sp, #16
 801d02c:	bd80      	pop	{r7, pc}

0801d02e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801d02e:	b580      	push	{r7, lr}
 801d030:	b084      	sub	sp, #16
 801d032:	af00      	add	r7, sp, #0
 801d034:	60f8      	str	r0, [r7, #12]
 801d036:	60b9      	str	r1, [r7, #8]
 801d038:	1dbb      	adds	r3, r7, #6
 801d03a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d03c:	1dbb      	adds	r3, r7, #6
 801d03e:	881b      	ldrh	r3, [r3, #0]
 801d040:	68ba      	ldr	r2, [r7, #8]
 801d042:	68f8      	ldr	r0, [r7, #12]
 801d044:	2100      	movs	r1, #0
 801d046:	f000 fd2e 	bl	801daa6 <USBD_LL_Transmit>

  return USBD_OK;
 801d04a:	2300      	movs	r3, #0
}
 801d04c:	0018      	movs	r0, r3
 801d04e:	46bd      	mov	sp, r7
 801d050:	b004      	add	sp, #16
 801d052:	bd80      	pop	{r7, pc}

0801d054 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801d054:	b580      	push	{r7, lr}
 801d056:	b084      	sub	sp, #16
 801d058:	af00      	add	r7, sp, #0
 801d05a:	60f8      	str	r0, [r7, #12]
 801d05c:	60b9      	str	r1, [r7, #8]
 801d05e:	1dbb      	adds	r3, r7, #6
 801d060:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d062:	68fa      	ldr	r2, [r7, #12]
 801d064:	23a5      	movs	r3, #165	@ 0xa5
 801d066:	009b      	lsls	r3, r3, #2
 801d068:	2103      	movs	r1, #3
 801d06a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801d06c:	1dbb      	adds	r3, r7, #6
 801d06e:	8819      	ldrh	r1, [r3, #0]
 801d070:	68fa      	ldr	r2, [r7, #12]
 801d072:	23ae      	movs	r3, #174	@ 0xae
 801d074:	005b      	lsls	r3, r3, #1
 801d076:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801d078:	1dbb      	adds	r3, r7, #6
 801d07a:	8819      	ldrh	r1, [r3, #0]
 801d07c:	68fa      	ldr	r2, [r7, #12]
 801d07e:	23b0      	movs	r3, #176	@ 0xb0
 801d080:	005b      	lsls	r3, r3, #1
 801d082:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d084:	1dbb      	adds	r3, r7, #6
 801d086:	881b      	ldrh	r3, [r3, #0]
 801d088:	68ba      	ldr	r2, [r7, #8]
 801d08a:	68f8      	ldr	r0, [r7, #12]
 801d08c:	2100      	movs	r1, #0
 801d08e:	f000 fd41 	bl	801db14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d092:	2300      	movs	r3, #0
}
 801d094:	0018      	movs	r0, r3
 801d096:	46bd      	mov	sp, r7
 801d098:	b004      	add	sp, #16
 801d09a:	bd80      	pop	{r7, pc}

0801d09c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801d09c:	b580      	push	{r7, lr}
 801d09e:	b084      	sub	sp, #16
 801d0a0:	af00      	add	r7, sp, #0
 801d0a2:	60f8      	str	r0, [r7, #12]
 801d0a4:	60b9      	str	r1, [r7, #8]
 801d0a6:	1dbb      	adds	r3, r7, #6
 801d0a8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d0aa:	1dbb      	adds	r3, r7, #6
 801d0ac:	881b      	ldrh	r3, [r3, #0]
 801d0ae:	68ba      	ldr	r2, [r7, #8]
 801d0b0:	68f8      	ldr	r0, [r7, #12]
 801d0b2:	2100      	movs	r1, #0
 801d0b4:	f000 fd2e 	bl	801db14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d0b8:	2300      	movs	r3, #0
}
 801d0ba:	0018      	movs	r0, r3
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	b004      	add	sp, #16
 801d0c0:	bd80      	pop	{r7, pc}

0801d0c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801d0c2:	b580      	push	{r7, lr}
 801d0c4:	b082      	sub	sp, #8
 801d0c6:	af00      	add	r7, sp, #0
 801d0c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801d0ca:	687a      	ldr	r2, [r7, #4]
 801d0cc:	23a5      	movs	r3, #165	@ 0xa5
 801d0ce:	009b      	lsls	r3, r3, #2
 801d0d0:	2104      	movs	r1, #4
 801d0d2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d0d4:	6878      	ldr	r0, [r7, #4]
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	2200      	movs	r2, #0
 801d0da:	2100      	movs	r1, #0
 801d0dc:	f000 fce3 	bl	801daa6 <USBD_LL_Transmit>

  return USBD_OK;
 801d0e0:	2300      	movs	r3, #0
}
 801d0e2:	0018      	movs	r0, r3
 801d0e4:	46bd      	mov	sp, r7
 801d0e6:	b002      	add	sp, #8
 801d0e8:	bd80      	pop	{r7, pc}

0801d0ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d0ea:	b580      	push	{r7, lr}
 801d0ec:	b082      	sub	sp, #8
 801d0ee:	af00      	add	r7, sp, #0
 801d0f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d0f2:	687a      	ldr	r2, [r7, #4]
 801d0f4:	23a5      	movs	r3, #165	@ 0xa5
 801d0f6:	009b      	lsls	r3, r3, #2
 801d0f8:	2105      	movs	r1, #5
 801d0fa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d0fc:	6878      	ldr	r0, [r7, #4]
 801d0fe:	2300      	movs	r3, #0
 801d100:	2200      	movs	r2, #0
 801d102:	2100      	movs	r1, #0
 801d104:	f000 fd06 	bl	801db14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d108:	2300      	movs	r3, #0
}
 801d10a:	0018      	movs	r0, r3
 801d10c:	46bd      	mov	sp, r7
 801d10e:	b002      	add	sp, #8
 801d110:	bd80      	pop	{r7, pc}
	...

0801d114 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d114:	b580      	push	{r7, lr}
 801d116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d118:	4914      	ldr	r1, [pc, #80]	@ (801d16c <MX_USB_DEVICE_Init+0x58>)
 801d11a:	4b15      	ldr	r3, [pc, #84]	@ (801d170 <MX_USB_DEVICE_Init+0x5c>)
 801d11c:	2200      	movs	r2, #0
 801d11e:	0018      	movs	r0, r3
 801d120:	f7fe fdec 	bl	801bcfc <USBD_Init>
 801d124:	1e03      	subs	r3, r0, #0
 801d126:	d001      	beq.n	801d12c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d128:	f7eb fab4 	bl	8008694 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d12c:	4a11      	ldr	r2, [pc, #68]	@ (801d174 <MX_USB_DEVICE_Init+0x60>)
 801d12e:	4b10      	ldr	r3, [pc, #64]	@ (801d170 <MX_USB_DEVICE_Init+0x5c>)
 801d130:	0011      	movs	r1, r2
 801d132:	0018      	movs	r0, r3
 801d134:	f7fe fe13 	bl	801bd5e <USBD_RegisterClass>
 801d138:	1e03      	subs	r3, r0, #0
 801d13a:	d001      	beq.n	801d140 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801d13c:	f7eb faaa 	bl	8008694 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d140:	4a0d      	ldr	r2, [pc, #52]	@ (801d178 <MX_USB_DEVICE_Init+0x64>)
 801d142:	4b0b      	ldr	r3, [pc, #44]	@ (801d170 <MX_USB_DEVICE_Init+0x5c>)
 801d144:	0011      	movs	r1, r2
 801d146:	0018      	movs	r0, r3
 801d148:	f7fe fd28 	bl	801bb9c <USBD_CDC_RegisterInterface>
 801d14c:	1e03      	subs	r3, r0, #0
 801d14e:	d001      	beq.n	801d154 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801d150:	f7eb faa0 	bl	8008694 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d154:	4b06      	ldr	r3, [pc, #24]	@ (801d170 <MX_USB_DEVICE_Init+0x5c>)
 801d156:	0018      	movs	r0, r3
 801d158:	f7fe fe21 	bl	801bd9e <USBD_Start>
 801d15c:	1e03      	subs	r3, r0, #0
 801d15e:	d001      	beq.n	801d164 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801d160:	f7eb fa98 	bl	8008694 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d164:	46c0      	nop			@ (mov r8, r8)
 801d166:	46bd      	mov	sp, r7
 801d168:	bd80      	pop	{r7, pc}
 801d16a:	46c0      	nop			@ (mov r8, r8)
 801d16c:	20000208 	.word	0x20000208
 801d170:	20001ffc 	.word	0x20001ffc
 801d174:	200000f4 	.word	0x200000f4
 801d178:	200001f8 	.word	0x200001f8

0801d17c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d17c:	b580      	push	{r7, lr}
 801d17e:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d180:	4907      	ldr	r1, [pc, #28]	@ (801d1a0 <CDC_Init_FS+0x24>)
 801d182:	4b08      	ldr	r3, [pc, #32]	@ (801d1a4 <CDC_Init_FS+0x28>)
 801d184:	2200      	movs	r2, #0
 801d186:	0018      	movs	r0, r3
 801d188:	f7fe fd23 	bl	801bbd2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d18c:	4a06      	ldr	r2, [pc, #24]	@ (801d1a8 <CDC_Init_FS+0x2c>)
 801d18e:	4b05      	ldr	r3, [pc, #20]	@ (801d1a4 <CDC_Init_FS+0x28>)
 801d190:	0011      	movs	r1, r2
 801d192:	0018      	movs	r0, r3
 801d194:	f7fe fd39 	bl	801bc0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d198:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d19a:	0018      	movs	r0, r3
 801d19c:	46bd      	mov	sp, r7
 801d19e:	bd80      	pop	{r7, pc}
 801d1a0:	20002780 	.word	0x20002780
 801d1a4:	20001ffc 	.word	0x20001ffc
 801d1a8:	20002380 	.word	0x20002380

0801d1ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d1b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d1b2:	0018      	movs	r0, r3
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	bd80      	pop	{r7, pc}

0801d1b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d1b8:	b580      	push	{r7, lr}
 801d1ba:	b082      	sub	sp, #8
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6039      	str	r1, [r7, #0]
 801d1c0:	0011      	movs	r1, r2
 801d1c2:	1dfb      	adds	r3, r7, #7
 801d1c4:	1c02      	adds	r2, r0, #0
 801d1c6:	701a      	strb	r2, [r3, #0]
 801d1c8:	1d3b      	adds	r3, r7, #4
 801d1ca:	1c0a      	adds	r2, r1, #0
 801d1cc:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d1ce:	1dfb      	adds	r3, r7, #7
 801d1d0:	781b      	ldrb	r3, [r3, #0]
 801d1d2:	2b23      	cmp	r3, #35	@ 0x23
 801d1d4:	d804      	bhi.n	801d1e0 <CDC_Control_FS+0x28>
 801d1d6:	009a      	lsls	r2, r3, #2
 801d1d8:	4b04      	ldr	r3, [pc, #16]	@ (801d1ec <CDC_Control_FS+0x34>)
 801d1da:	18d3      	adds	r3, r2, r3
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d1e0:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801d1e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d1e4:	0018      	movs	r0, r3
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	b002      	add	sp, #8
 801d1ea:	bd80      	pop	{r7, pc}
 801d1ec:	08025f20 	.word	0x08025f20

0801d1f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d1f0:	b580      	push	{r7, lr}
 801d1f2:	b082      	sub	sp, #8
 801d1f4:	af00      	add	r7, sp, #0
 801d1f6:	6078      	str	r0, [r7, #4]
 801d1f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801d1fa:	4b12      	ldr	r3, [pc, #72]	@ (801d244 <CDC_Receive_FS+0x54>)
 801d1fc:	781b      	ldrb	r3, [r3, #0]
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d013      	beq.n	801d22a <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801d202:	683b      	ldr	r3, [r7, #0]
 801d204:	681b      	ldr	r3, [r3, #0]
 801d206:	b29a      	uxth	r2, r3
 801d208:	2301      	movs	r3, #1
 801d20a:	425b      	negs	r3, r3
 801d20c:	6879      	ldr	r1, [r7, #4]
 801d20e:	480e      	ldr	r0, [pc, #56]	@ (801d248 <CDC_Receive_FS+0x58>)
 801d210:	f7fa fa46 	bl	80176a0 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d214:	687a      	ldr	r2, [r7, #4]
 801d216:	4b0d      	ldr	r3, [pc, #52]	@ (801d24c <CDC_Receive_FS+0x5c>)
 801d218:	0011      	movs	r1, r2
 801d21a:	0018      	movs	r0, r3
 801d21c:	f7fe fcf5 	bl	801bc0a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d220:	4b0a      	ldr	r3, [pc, #40]	@ (801d24c <CDC_Receive_FS+0x5c>)
 801d222:	0018      	movs	r0, r3
 801d224:	f7fe fd3c 	bl	801bca0 <USBD_CDC_ReceivePacket>
 801d228:	e006      	b.n	801d238 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801d22a:	683b      	ldr	r3, [r7, #0]
 801d22c:	681a      	ldr	r2, [r3, #0]
 801d22e:	4b08      	ldr	r3, [pc, #32]	@ (801d250 <CDC_Receive_FS+0x60>)
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	18d2      	adds	r2, r2, r3
 801d234:	4b06      	ldr	r3, [pc, #24]	@ (801d250 <CDC_Receive_FS+0x60>)
 801d236:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801d238:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d23a:	0018      	movs	r0, r3
 801d23c:	46bd      	mov	sp, r7
 801d23e:	b002      	add	sp, #8
 801d240:	bd80      	pop	{r7, pc}
 801d242:	46c0      	nop			@ (mov r8, r8)
 801d244:	200022c0 	.word	0x200022c0
 801d248:	200022c4 	.word	0x200022c4
 801d24c:	20001ffc 	.word	0x20001ffc
 801d250:	2000237c 	.word	0x2000237c

0801d254 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d254:	b5b0      	push	{r4, r5, r7, lr}
 801d256:	b084      	sub	sp, #16
 801d258:	af00      	add	r7, sp, #0
 801d25a:	6078      	str	r0, [r7, #4]
 801d25c:	000a      	movs	r2, r1
 801d25e:	1cbb      	adds	r3, r7, #2
 801d260:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801d262:	230f      	movs	r3, #15
 801d264:	18fb      	adds	r3, r7, r3
 801d266:	2200      	movs	r2, #0
 801d268:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d26a:	4a11      	ldr	r2, [pc, #68]	@ (801d2b0 <CDC_Transmit_FS+0x5c>)
 801d26c:	23ae      	movs	r3, #174	@ 0xae
 801d26e:	009b      	lsls	r3, r3, #2
 801d270:	58d3      	ldr	r3, [r2, r3]
 801d272:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d274:	68ba      	ldr	r2, [r7, #8]
 801d276:	2385      	movs	r3, #133	@ 0x85
 801d278:	009b      	lsls	r3, r3, #2
 801d27a:	58d3      	ldr	r3, [r2, r3]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d001      	beq.n	801d284 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801d280:	2301      	movs	r3, #1
 801d282:	e010      	b.n	801d2a6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d284:	1cbb      	adds	r3, r7, #2
 801d286:	881a      	ldrh	r2, [r3, #0]
 801d288:	6879      	ldr	r1, [r7, #4]
 801d28a:	4b09      	ldr	r3, [pc, #36]	@ (801d2b0 <CDC_Transmit_FS+0x5c>)
 801d28c:	0018      	movs	r0, r3
 801d28e:	f7fe fca0 	bl	801bbd2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d292:	250f      	movs	r5, #15
 801d294:	197c      	adds	r4, r7, r5
 801d296:	4b06      	ldr	r3, [pc, #24]	@ (801d2b0 <CDC_Transmit_FS+0x5c>)
 801d298:	0018      	movs	r0, r3
 801d29a:	f7fe fcca 	bl	801bc32 <USBD_CDC_TransmitPacket>
 801d29e:	0003      	movs	r3, r0
 801d2a0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801d2a2:	197b      	adds	r3, r7, r5
 801d2a4:	781b      	ldrb	r3, [r3, #0]
}
 801d2a6:	0018      	movs	r0, r3
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	b004      	add	sp, #16
 801d2ac:	bdb0      	pop	{r4, r5, r7, pc}
 801d2ae:	46c0      	nop			@ (mov r8, r8)
 801d2b0:	20001ffc 	.word	0x20001ffc

0801d2b4 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801d2b4:	b580      	push	{r7, lr}
 801d2b6:	af00      	add	r7, sp, #0
  ESPProg = true;
 801d2b8:	4b02      	ldr	r3, [pc, #8]	@ (801d2c4 <EnableESPProg+0x10>)
 801d2ba:	2201      	movs	r2, #1
 801d2bc:	701a      	strb	r2, [r3, #0]
}
 801d2be:	46c0      	nop			@ (mov r8, r8)
 801d2c0:	46bd      	mov	sp, r7
 801d2c2:	bd80      	pop	{r7, pc}
 801d2c4:	200022c0 	.word	0x200022c0

0801d2c8 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801d2c8:	b580      	push	{r7, lr}
 801d2ca:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801d2cc:	4b01      	ldr	r3, [pc, #4]	@ (801d2d4 <GetUsbRxPointer+0xc>)
}
 801d2ce:	0018      	movs	r0, r3
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bd80      	pop	{r7, pc}
 801d2d4:	20002380 	.word	0x20002380

0801d2d8 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801d2d8:	b580      	push	{r7, lr}
 801d2da:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801d2dc:	4b07      	ldr	r3, [pc, #28]	@ (801d2fc <ResetUsbRxDataSize+0x24>)
 801d2de:	2200      	movs	r2, #0
 801d2e0:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801d2e2:	4a07      	ldr	r2, [pc, #28]	@ (801d300 <ResetUsbRxDataSize+0x28>)
 801d2e4:	4b07      	ldr	r3, [pc, #28]	@ (801d304 <ResetUsbRxDataSize+0x2c>)
 801d2e6:	0011      	movs	r1, r2
 801d2e8:	0018      	movs	r0, r3
 801d2ea:	f7fe fc8e 	bl	801bc0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d2ee:	4b05      	ldr	r3, [pc, #20]	@ (801d304 <ResetUsbRxDataSize+0x2c>)
 801d2f0:	0018      	movs	r0, r3
 801d2f2:	f7fe fcd5 	bl	801bca0 <USBD_CDC_ReceivePacket>
}
 801d2f6:	46c0      	nop			@ (mov r8, r8)
 801d2f8:	46bd      	mov	sp, r7
 801d2fa:	bd80      	pop	{r7, pc}
 801d2fc:	2000237c 	.word	0x2000237c
 801d300:	20002380 	.word	0x20002380
 801d304:	20001ffc 	.word	0x20001ffc

0801d308 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801d308:	b580      	push	{r7, lr}
 801d30a:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801d30c:	4b02      	ldr	r3, [pc, #8]	@ (801d318 <GetUsbRxDataSize+0x10>)
 801d30e:	681b      	ldr	r3, [r3, #0]
}
 801d310:	0018      	movs	r0, r3
 801d312:	46bd      	mov	sp, r7
 801d314:	bd80      	pop	{r7, pc}
 801d316:	46c0      	nop			@ (mov r8, r8)
 801d318:	2000237c 	.word	0x2000237c

0801d31c <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801d31c:	b580      	push	{r7, lr}
 801d31e:	b082      	sub	sp, #8
 801d320:	af00      	add	r7, sp, #0
 801d322:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801d324:	687a      	ldr	r2, [r7, #4]
 801d326:	4b07      	ldr	r3, [pc, #28]	@ (801d344 <GetUsbRxNextChunk+0x28>)
 801d328:	18d2      	adds	r2, r2, r3
 801d32a:	4b07      	ldr	r3, [pc, #28]	@ (801d348 <GetUsbRxNextChunk+0x2c>)
 801d32c:	0011      	movs	r1, r2
 801d32e:	0018      	movs	r0, r3
 801d330:	f7fe fc6b 	bl	801bc0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d334:	4b04      	ldr	r3, [pc, #16]	@ (801d348 <GetUsbRxNextChunk+0x2c>)
 801d336:	0018      	movs	r0, r3
 801d338:	f7fe fcb2 	bl	801bca0 <USBD_CDC_ReceivePacket>
}
 801d33c:	46c0      	nop			@ (mov r8, r8)
 801d33e:	46bd      	mov	sp, r7
 801d340:	b002      	add	sp, #8
 801d342:	bd80      	pop	{r7, pc}
 801d344:	20002380 	.word	0x20002380
 801d348:	20001ffc 	.word	0x20001ffc

0801d34c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d34c:	b580      	push	{r7, lr}
 801d34e:	b082      	sub	sp, #8
 801d350:	af00      	add	r7, sp, #0
 801d352:	0002      	movs	r2, r0
 801d354:	6039      	str	r1, [r7, #0]
 801d356:	1dfb      	adds	r3, r7, #7
 801d358:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d35a:	683b      	ldr	r3, [r7, #0]
 801d35c:	2212      	movs	r2, #18
 801d35e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d360:	4b02      	ldr	r3, [pc, #8]	@ (801d36c <USBD_FS_DeviceDescriptor+0x20>)
}
 801d362:	0018      	movs	r0, r3
 801d364:	46bd      	mov	sp, r7
 801d366:	b002      	add	sp, #8
 801d368:	bd80      	pop	{r7, pc}
 801d36a:	46c0      	nop			@ (mov r8, r8)
 801d36c:	20000224 	.word	0x20000224

0801d370 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d370:	b580      	push	{r7, lr}
 801d372:	b082      	sub	sp, #8
 801d374:	af00      	add	r7, sp, #0
 801d376:	0002      	movs	r2, r0
 801d378:	6039      	str	r1, [r7, #0]
 801d37a:	1dfb      	adds	r3, r7, #7
 801d37c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d37e:	683b      	ldr	r3, [r7, #0]
 801d380:	2204      	movs	r2, #4
 801d382:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d384:	4b02      	ldr	r3, [pc, #8]	@ (801d390 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d386:	0018      	movs	r0, r3
 801d388:	46bd      	mov	sp, r7
 801d38a:	b002      	add	sp, #8
 801d38c:	bd80      	pop	{r7, pc}
 801d38e:	46c0      	nop			@ (mov r8, r8)
 801d390:	20000238 	.word	0x20000238

0801d394 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d394:	b580      	push	{r7, lr}
 801d396:	b082      	sub	sp, #8
 801d398:	af00      	add	r7, sp, #0
 801d39a:	0002      	movs	r2, r0
 801d39c:	6039      	str	r1, [r7, #0]
 801d39e:	1dfb      	adds	r3, r7, #7
 801d3a0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d3a2:	1dfb      	adds	r3, r7, #7
 801d3a4:	781b      	ldrb	r3, [r3, #0]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d106      	bne.n	801d3b8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d3aa:	683a      	ldr	r2, [r7, #0]
 801d3ac:	4908      	ldr	r1, [pc, #32]	@ (801d3d0 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d3ae:	4b09      	ldr	r3, [pc, #36]	@ (801d3d4 <USBD_FS_ProductStrDescriptor+0x40>)
 801d3b0:	0018      	movs	r0, r3
 801d3b2:	f7ff fdb1 	bl	801cf18 <USBD_GetString>
 801d3b6:	e005      	b.n	801d3c4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d3b8:	683a      	ldr	r2, [r7, #0]
 801d3ba:	4905      	ldr	r1, [pc, #20]	@ (801d3d0 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d3bc:	4b05      	ldr	r3, [pc, #20]	@ (801d3d4 <USBD_FS_ProductStrDescriptor+0x40>)
 801d3be:	0018      	movs	r0, r3
 801d3c0:	f7ff fdaa 	bl	801cf18 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d3c4:	4b02      	ldr	r3, [pc, #8]	@ (801d3d0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801d3c6:	0018      	movs	r0, r3
 801d3c8:	46bd      	mov	sp, r7
 801d3ca:	b002      	add	sp, #8
 801d3cc:	bd80      	pop	{r7, pc}
 801d3ce:	46c0      	nop			@ (mov r8, r8)
 801d3d0:	20002b80 	.word	0x20002b80
 801d3d4:	08025978 	.word	0x08025978

0801d3d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d3d8:	b580      	push	{r7, lr}
 801d3da:	b082      	sub	sp, #8
 801d3dc:	af00      	add	r7, sp, #0
 801d3de:	0002      	movs	r2, r0
 801d3e0:	6039      	str	r1, [r7, #0]
 801d3e2:	1dfb      	adds	r3, r7, #7
 801d3e4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d3e6:	683a      	ldr	r2, [r7, #0]
 801d3e8:	4904      	ldr	r1, [pc, #16]	@ (801d3fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d3ea:	4b05      	ldr	r3, [pc, #20]	@ (801d400 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801d3ec:	0018      	movs	r0, r3
 801d3ee:	f7ff fd93 	bl	801cf18 <USBD_GetString>
  return USBD_StrDesc;
 801d3f2:	4b02      	ldr	r3, [pc, #8]	@ (801d3fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801d3f4:	0018      	movs	r0, r3
 801d3f6:	46bd      	mov	sp, r7
 801d3f8:	b002      	add	sp, #8
 801d3fa:	bd80      	pop	{r7, pc}
 801d3fc:	20002b80 	.word	0x20002b80
 801d400:	08025990 	.word	0x08025990

0801d404 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d404:	b580      	push	{r7, lr}
 801d406:	b082      	sub	sp, #8
 801d408:	af00      	add	r7, sp, #0
 801d40a:	0002      	movs	r2, r0
 801d40c:	6039      	str	r1, [r7, #0]
 801d40e:	1dfb      	adds	r3, r7, #7
 801d410:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d412:	683b      	ldr	r3, [r7, #0]
 801d414:	221a      	movs	r2, #26
 801d416:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d418:	f000 f84c 	bl	801d4b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d41c:	4b02      	ldr	r3, [pc, #8]	@ (801d428 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801d41e:	0018      	movs	r0, r3
 801d420:	46bd      	mov	sp, r7
 801d422:	b002      	add	sp, #8
 801d424:	bd80      	pop	{r7, pc}
 801d426:	46c0      	nop			@ (mov r8, r8)
 801d428:	2000023c 	.word	0x2000023c

0801d42c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d42c:	b580      	push	{r7, lr}
 801d42e:	b082      	sub	sp, #8
 801d430:	af00      	add	r7, sp, #0
 801d432:	0002      	movs	r2, r0
 801d434:	6039      	str	r1, [r7, #0]
 801d436:	1dfb      	adds	r3, r7, #7
 801d438:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d43a:	1dfb      	adds	r3, r7, #7
 801d43c:	781b      	ldrb	r3, [r3, #0]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d106      	bne.n	801d450 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d442:	683a      	ldr	r2, [r7, #0]
 801d444:	4908      	ldr	r1, [pc, #32]	@ (801d468 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d446:	4b09      	ldr	r3, [pc, #36]	@ (801d46c <USBD_FS_ConfigStrDescriptor+0x40>)
 801d448:	0018      	movs	r0, r3
 801d44a:	f7ff fd65 	bl	801cf18 <USBD_GetString>
 801d44e:	e005      	b.n	801d45c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d450:	683a      	ldr	r2, [r7, #0]
 801d452:	4905      	ldr	r1, [pc, #20]	@ (801d468 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d454:	4b05      	ldr	r3, [pc, #20]	@ (801d46c <USBD_FS_ConfigStrDescriptor+0x40>)
 801d456:	0018      	movs	r0, r3
 801d458:	f7ff fd5e 	bl	801cf18 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d45c:	4b02      	ldr	r3, [pc, #8]	@ (801d468 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801d45e:	0018      	movs	r0, r3
 801d460:	46bd      	mov	sp, r7
 801d462:	b002      	add	sp, #8
 801d464:	bd80      	pop	{r7, pc}
 801d466:	46c0      	nop			@ (mov r8, r8)
 801d468:	20002b80 	.word	0x20002b80
 801d46c:	080259a4 	.word	0x080259a4

0801d470 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d470:	b580      	push	{r7, lr}
 801d472:	b082      	sub	sp, #8
 801d474:	af00      	add	r7, sp, #0
 801d476:	0002      	movs	r2, r0
 801d478:	6039      	str	r1, [r7, #0]
 801d47a:	1dfb      	adds	r3, r7, #7
 801d47c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d47e:	1dfb      	adds	r3, r7, #7
 801d480:	781b      	ldrb	r3, [r3, #0]
 801d482:	2b00      	cmp	r3, #0
 801d484:	d106      	bne.n	801d494 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d486:	683a      	ldr	r2, [r7, #0]
 801d488:	4908      	ldr	r1, [pc, #32]	@ (801d4ac <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d48a:	4b09      	ldr	r3, [pc, #36]	@ (801d4b0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d48c:	0018      	movs	r0, r3
 801d48e:	f7ff fd43 	bl	801cf18 <USBD_GetString>
 801d492:	e005      	b.n	801d4a0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d494:	683a      	ldr	r2, [r7, #0]
 801d496:	4905      	ldr	r1, [pc, #20]	@ (801d4ac <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d498:	4b05      	ldr	r3, [pc, #20]	@ (801d4b0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d49a:	0018      	movs	r0, r3
 801d49c:	f7ff fd3c 	bl	801cf18 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d4a0:	4b02      	ldr	r3, [pc, #8]	@ (801d4ac <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801d4a2:	0018      	movs	r0, r3
 801d4a4:	46bd      	mov	sp, r7
 801d4a6:	b002      	add	sp, #8
 801d4a8:	bd80      	pop	{r7, pc}
 801d4aa:	46c0      	nop			@ (mov r8, r8)
 801d4ac:	20002b80 	.word	0x20002b80
 801d4b0:	080259b0 	.word	0x080259b0

0801d4b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d4b4:	b580      	push	{r7, lr}
 801d4b6:	b084      	sub	sp, #16
 801d4b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d4ba:	4b10      	ldr	r3, [pc, #64]	@ (801d4fc <Get_SerialNum+0x48>)
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d4c0:	4b0f      	ldr	r3, [pc, #60]	@ (801d500 <Get_SerialNum+0x4c>)
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d4c6:	4b0f      	ldr	r3, [pc, #60]	@ (801d504 <Get_SerialNum+0x50>)
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d4cc:	68fa      	ldr	r2, [r7, #12]
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	18d3      	adds	r3, r2, r3
 801d4d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d00b      	beq.n	801d4f2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d4da:	490b      	ldr	r1, [pc, #44]	@ (801d508 <Get_SerialNum+0x54>)
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	2208      	movs	r2, #8
 801d4e0:	0018      	movs	r0, r3
 801d4e2:	f000 f815 	bl	801d510 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d4e6:	4909      	ldr	r1, [pc, #36]	@ (801d50c <Get_SerialNum+0x58>)
 801d4e8:	68bb      	ldr	r3, [r7, #8]
 801d4ea:	2204      	movs	r2, #4
 801d4ec:	0018      	movs	r0, r3
 801d4ee:	f000 f80f 	bl	801d510 <IntToUnicode>
  }
}
 801d4f2:	46c0      	nop			@ (mov r8, r8)
 801d4f4:	46bd      	mov	sp, r7
 801d4f6:	b004      	add	sp, #16
 801d4f8:	bd80      	pop	{r7, pc}
 801d4fa:	46c0      	nop			@ (mov r8, r8)
 801d4fc:	1ff80050 	.word	0x1ff80050
 801d500:	1ff80054 	.word	0x1ff80054
 801d504:	1ff80058 	.word	0x1ff80058
 801d508:	2000023e 	.word	0x2000023e
 801d50c:	2000024e 	.word	0x2000024e

0801d510 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d510:	b580      	push	{r7, lr}
 801d512:	b086      	sub	sp, #24
 801d514:	af00      	add	r7, sp, #0
 801d516:	60f8      	str	r0, [r7, #12]
 801d518:	60b9      	str	r1, [r7, #8]
 801d51a:	1dfb      	adds	r3, r7, #7
 801d51c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801d51e:	2117      	movs	r1, #23
 801d520:	187b      	adds	r3, r7, r1
 801d522:	2200      	movs	r2, #0
 801d524:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801d526:	187b      	adds	r3, r7, r1
 801d528:	2200      	movs	r2, #0
 801d52a:	701a      	strb	r2, [r3, #0]
 801d52c:	e02f      	b.n	801d58e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	0f1b      	lsrs	r3, r3, #28
 801d532:	2b09      	cmp	r3, #9
 801d534:	d80d      	bhi.n	801d552 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	0f1b      	lsrs	r3, r3, #28
 801d53a:	b2da      	uxtb	r2, r3
 801d53c:	2317      	movs	r3, #23
 801d53e:	18fb      	adds	r3, r7, r3
 801d540:	781b      	ldrb	r3, [r3, #0]
 801d542:	005b      	lsls	r3, r3, #1
 801d544:	0019      	movs	r1, r3
 801d546:	68bb      	ldr	r3, [r7, #8]
 801d548:	185b      	adds	r3, r3, r1
 801d54a:	3230      	adds	r2, #48	@ 0x30
 801d54c:	b2d2      	uxtb	r2, r2
 801d54e:	701a      	strb	r2, [r3, #0]
 801d550:	e00c      	b.n	801d56c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	0f1b      	lsrs	r3, r3, #28
 801d556:	b2da      	uxtb	r2, r3
 801d558:	2317      	movs	r3, #23
 801d55a:	18fb      	adds	r3, r7, r3
 801d55c:	781b      	ldrb	r3, [r3, #0]
 801d55e:	005b      	lsls	r3, r3, #1
 801d560:	0019      	movs	r1, r3
 801d562:	68bb      	ldr	r3, [r7, #8]
 801d564:	185b      	adds	r3, r3, r1
 801d566:	3237      	adds	r2, #55	@ 0x37
 801d568:	b2d2      	uxtb	r2, r2
 801d56a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	011b      	lsls	r3, r3, #4
 801d570:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d572:	2117      	movs	r1, #23
 801d574:	187b      	adds	r3, r7, r1
 801d576:	781b      	ldrb	r3, [r3, #0]
 801d578:	005b      	lsls	r3, r3, #1
 801d57a:	3301      	adds	r3, #1
 801d57c:	68ba      	ldr	r2, [r7, #8]
 801d57e:	18d3      	adds	r3, r2, r3
 801d580:	2200      	movs	r2, #0
 801d582:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d584:	187b      	adds	r3, r7, r1
 801d586:	781a      	ldrb	r2, [r3, #0]
 801d588:	187b      	adds	r3, r7, r1
 801d58a:	3201      	adds	r2, #1
 801d58c:	701a      	strb	r2, [r3, #0]
 801d58e:	2317      	movs	r3, #23
 801d590:	18fa      	adds	r2, r7, r3
 801d592:	1dfb      	adds	r3, r7, #7
 801d594:	7812      	ldrb	r2, [r2, #0]
 801d596:	781b      	ldrb	r3, [r3, #0]
 801d598:	429a      	cmp	r2, r3
 801d59a:	d3c8      	bcc.n	801d52e <IntToUnicode+0x1e>
  }
}
 801d59c:	46c0      	nop			@ (mov r8, r8)
 801d59e:	46c0      	nop			@ (mov r8, r8)
 801d5a0:	46bd      	mov	sp, r7
 801d5a2:	b006      	add	sp, #24
 801d5a4:	bd80      	pop	{r7, pc}
	...

0801d5a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d5a8:	b580      	push	{r7, lr}
 801d5aa:	b082      	sub	sp, #8
 801d5ac:	af00      	add	r7, sp, #0
 801d5ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	4a0a      	ldr	r2, [pc, #40]	@ (801d5e0 <HAL_PCD_MspInit+0x38>)
 801d5b6:	4293      	cmp	r3, r2
 801d5b8:	d10e      	bne.n	801d5d8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d5ba:	4b0a      	ldr	r3, [pc, #40]	@ (801d5e4 <HAL_PCD_MspInit+0x3c>)
 801d5bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d5be:	4b09      	ldr	r3, [pc, #36]	@ (801d5e4 <HAL_PCD_MspInit+0x3c>)
 801d5c0:	2180      	movs	r1, #128	@ 0x80
 801d5c2:	0409      	lsls	r1, r1, #16
 801d5c4:	430a      	orrs	r2, r1
 801d5c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d5c8:	2200      	movs	r2, #0
 801d5ca:	2100      	movs	r1, #0
 801d5cc:	201f      	movs	r0, #31
 801d5ce:	f7f2 fadf 	bl	800fb90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d5d2:	201f      	movs	r0, #31
 801d5d4:	f7f2 faf1 	bl	800fbba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d5d8:	46c0      	nop			@ (mov r8, r8)
 801d5da:	46bd      	mov	sp, r7
 801d5dc:	b002      	add	sp, #8
 801d5de:	bd80      	pop	{r7, pc}
 801d5e0:	40005c00 	.word	0x40005c00
 801d5e4:	40021000 	.word	0x40021000

0801d5e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d5e8:	b580      	push	{r7, lr}
 801d5ea:	b082      	sub	sp, #8
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d5f0:	687a      	ldr	r2, [r7, #4]
 801d5f2:	23bc      	movs	r3, #188	@ 0xbc
 801d5f4:	009b      	lsls	r3, r3, #2
 801d5f6:	58d2      	ldr	r2, [r2, r3]
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	21ac      	movs	r1, #172	@ 0xac
 801d5fc:	0089      	lsls	r1, r1, #2
 801d5fe:	468c      	mov	ip, r1
 801d600:	4463      	add	r3, ip
 801d602:	0019      	movs	r1, r3
 801d604:	0010      	movs	r0, r2
 801d606:	f7fe fc1d 	bl	801be44 <USBD_LL_SetupStage>
}
 801d60a:	46c0      	nop			@ (mov r8, r8)
 801d60c:	46bd      	mov	sp, r7
 801d60e:	b002      	add	sp, #8
 801d610:	bd80      	pop	{r7, pc}

0801d612 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d612:	b590      	push	{r4, r7, lr}
 801d614:	b083      	sub	sp, #12
 801d616:	af00      	add	r7, sp, #0
 801d618:	6078      	str	r0, [r7, #4]
 801d61a:	000a      	movs	r2, r1
 801d61c:	1cfb      	adds	r3, r7, #3
 801d61e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d620:	687a      	ldr	r2, [r7, #4]
 801d622:	23bc      	movs	r3, #188	@ 0xbc
 801d624:	009b      	lsls	r3, r3, #2
 801d626:	58d4      	ldr	r4, [r2, r3]
 801d628:	1cfb      	adds	r3, r7, #3
 801d62a:	781a      	ldrb	r2, [r3, #0]
 801d62c:	6878      	ldr	r0, [r7, #4]
 801d62e:	23be      	movs	r3, #190	@ 0xbe
 801d630:	0059      	lsls	r1, r3, #1
 801d632:	0013      	movs	r3, r2
 801d634:	009b      	lsls	r3, r3, #2
 801d636:	189b      	adds	r3, r3, r2
 801d638:	00db      	lsls	r3, r3, #3
 801d63a:	18c3      	adds	r3, r0, r3
 801d63c:	185b      	adds	r3, r3, r1
 801d63e:	681a      	ldr	r2, [r3, #0]
 801d640:	1cfb      	adds	r3, r7, #3
 801d642:	781b      	ldrb	r3, [r3, #0]
 801d644:	0019      	movs	r1, r3
 801d646:	0020      	movs	r0, r4
 801d648:	f7fe fc5a 	bl	801bf00 <USBD_LL_DataOutStage>
}
 801d64c:	46c0      	nop			@ (mov r8, r8)
 801d64e:	46bd      	mov	sp, r7
 801d650:	b003      	add	sp, #12
 801d652:	bd90      	pop	{r4, r7, pc}

0801d654 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b082      	sub	sp, #8
 801d658:	af00      	add	r7, sp, #0
 801d65a:	6078      	str	r0, [r7, #4]
 801d65c:	000a      	movs	r2, r1
 801d65e:	1cfb      	adds	r3, r7, #3
 801d660:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d662:	687a      	ldr	r2, [r7, #4]
 801d664:	23bc      	movs	r3, #188	@ 0xbc
 801d666:	009b      	lsls	r3, r3, #2
 801d668:	58d0      	ldr	r0, [r2, r3]
 801d66a:	1cfb      	adds	r3, r7, #3
 801d66c:	781a      	ldrb	r2, [r3, #0]
 801d66e:	6879      	ldr	r1, [r7, #4]
 801d670:	0013      	movs	r3, r2
 801d672:	009b      	lsls	r3, r3, #2
 801d674:	189b      	adds	r3, r3, r2
 801d676:	00db      	lsls	r3, r3, #3
 801d678:	18cb      	adds	r3, r1, r3
 801d67a:	333c      	adds	r3, #60	@ 0x3c
 801d67c:	681a      	ldr	r2, [r3, #0]
 801d67e:	1cfb      	adds	r3, r7, #3
 801d680:	781b      	ldrb	r3, [r3, #0]
 801d682:	0019      	movs	r1, r3
 801d684:	f7fe fcbe 	bl	801c004 <USBD_LL_DataInStage>
}
 801d688:	46c0      	nop			@ (mov r8, r8)
 801d68a:	46bd      	mov	sp, r7
 801d68c:	b002      	add	sp, #8
 801d68e:	bd80      	pop	{r7, pc}

0801d690 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d690:	b580      	push	{r7, lr}
 801d692:	b082      	sub	sp, #8
 801d694:	af00      	add	r7, sp, #0
 801d696:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d698:	687a      	ldr	r2, [r7, #4]
 801d69a:	23bc      	movs	r3, #188	@ 0xbc
 801d69c:	009b      	lsls	r3, r3, #2
 801d69e:	58d3      	ldr	r3, [r2, r3]
 801d6a0:	0018      	movs	r0, r3
 801d6a2:	f7fe fdf5 	bl	801c290 <USBD_LL_SOF>
}
 801d6a6:	46c0      	nop			@ (mov r8, r8)
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	b002      	add	sp, #8
 801d6ac:	bd80      	pop	{r7, pc}

0801d6ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d6ae:	b580      	push	{r7, lr}
 801d6b0:	b084      	sub	sp, #16
 801d6b2:	af00      	add	r7, sp, #0
 801d6b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d6b6:	230f      	movs	r3, #15
 801d6b8:	18fb      	adds	r3, r7, r3
 801d6ba:	2201      	movs	r2, #1
 801d6bc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	689b      	ldr	r3, [r3, #8]
 801d6c2:	2b02      	cmp	r3, #2
 801d6c4:	d001      	beq.n	801d6ca <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d6c6:	f7ea ffe5 	bl	8008694 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d6ca:	687a      	ldr	r2, [r7, #4]
 801d6cc:	23bc      	movs	r3, #188	@ 0xbc
 801d6ce:	009b      	lsls	r3, r3, #2
 801d6d0:	58d2      	ldr	r2, [r2, r3]
 801d6d2:	230f      	movs	r3, #15
 801d6d4:	18fb      	adds	r3, r7, r3
 801d6d6:	781b      	ldrb	r3, [r3, #0]
 801d6d8:	0019      	movs	r1, r3
 801d6da:	0010      	movs	r0, r2
 801d6dc:	f7fe fd97 	bl	801c20e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d6e0:	687a      	ldr	r2, [r7, #4]
 801d6e2:	23bc      	movs	r3, #188	@ 0xbc
 801d6e4:	009b      	lsls	r3, r3, #2
 801d6e6:	58d3      	ldr	r3, [r2, r3]
 801d6e8:	0018      	movs	r0, r3
 801d6ea:	f7fe fd48 	bl	801c17e <USBD_LL_Reset>
}
 801d6ee:	46c0      	nop			@ (mov r8, r8)
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	b004      	add	sp, #16
 801d6f4:	bd80      	pop	{r7, pc}
	...

0801d6f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d6f8:	b580      	push	{r7, lr}
 801d6fa:	b082      	sub	sp, #8
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d700:	687a      	ldr	r2, [r7, #4]
 801d702:	23bc      	movs	r3, #188	@ 0xbc
 801d704:	009b      	lsls	r3, r3, #2
 801d706:	58d3      	ldr	r3, [r2, r3]
 801d708:	0018      	movs	r0, r3
 801d70a:	f7fe fd91 	bl	801c230 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	699b      	ldr	r3, [r3, #24]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d005      	beq.n	801d722 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d716:	4b05      	ldr	r3, [pc, #20]	@ (801d72c <HAL_PCD_SuspendCallback+0x34>)
 801d718:	691a      	ldr	r2, [r3, #16]
 801d71a:	4b04      	ldr	r3, [pc, #16]	@ (801d72c <HAL_PCD_SuspendCallback+0x34>)
 801d71c:	2106      	movs	r1, #6
 801d71e:	430a      	orrs	r2, r1
 801d720:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d722:	46c0      	nop			@ (mov r8, r8)
 801d724:	46bd      	mov	sp, r7
 801d726:	b002      	add	sp, #8
 801d728:	bd80      	pop	{r7, pc}
 801d72a:	46c0      	nop			@ (mov r8, r8)
 801d72c:	e000ed00 	.word	0xe000ed00

0801d730 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d730:	b580      	push	{r7, lr}
 801d732:	b082      	sub	sp, #8
 801d734:	af00      	add	r7, sp, #0
 801d736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	699b      	ldr	r3, [r3, #24]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d007      	beq.n	801d750 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d740:	4b09      	ldr	r3, [pc, #36]	@ (801d768 <HAL_PCD_ResumeCallback+0x38>)
 801d742:	691a      	ldr	r2, [r3, #16]
 801d744:	4b08      	ldr	r3, [pc, #32]	@ (801d768 <HAL_PCD_ResumeCallback+0x38>)
 801d746:	2106      	movs	r1, #6
 801d748:	438a      	bics	r2, r1
 801d74a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d74c:	f000 fa44 	bl	801dbd8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d750:	687a      	ldr	r2, [r7, #4]
 801d752:	23bc      	movs	r3, #188	@ 0xbc
 801d754:	009b      	lsls	r3, r3, #2
 801d756:	58d3      	ldr	r3, [r2, r3]
 801d758:	0018      	movs	r0, r3
 801d75a:	f7fe fd81 	bl	801c260 <USBD_LL_Resume>
}
 801d75e:	46c0      	nop			@ (mov r8, r8)
 801d760:	46bd      	mov	sp, r7
 801d762:	b002      	add	sp, #8
 801d764:	bd80      	pop	{r7, pc}
 801d766:	46c0      	nop			@ (mov r8, r8)
 801d768:	e000ed00 	.word	0xe000ed00

0801d76c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d76c:	b580      	push	{r7, lr}
 801d76e:	b082      	sub	sp, #8
 801d770:	af00      	add	r7, sp, #0
 801d772:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d774:	4a2d      	ldr	r2, [pc, #180]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d776:	23bc      	movs	r3, #188	@ 0xbc
 801d778:	009b      	lsls	r3, r3, #2
 801d77a:	6879      	ldr	r1, [r7, #4]
 801d77c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d77e:	687a      	ldr	r2, [r7, #4]
 801d780:	23b0      	movs	r3, #176	@ 0xb0
 801d782:	009b      	lsls	r3, r3, #2
 801d784:	4929      	ldr	r1, [pc, #164]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d786:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d788:	4b28      	ldr	r3, [pc, #160]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d78a:	4a29      	ldr	r2, [pc, #164]	@ (801d830 <USBD_LL_Init+0xc4>)
 801d78c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d78e:	4b27      	ldr	r3, [pc, #156]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d790:	2208      	movs	r2, #8
 801d792:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d794:	4b25      	ldr	r3, [pc, #148]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d796:	2202      	movs	r2, #2
 801d798:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d79a:	4b24      	ldr	r3, [pc, #144]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d79c:	2202      	movs	r2, #2
 801d79e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d7a0:	4b22      	ldr	r3, [pc, #136]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d7a2:	2200      	movs	r2, #0
 801d7a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d7a6:	4b21      	ldr	r3, [pc, #132]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d7a8:	2200      	movs	r2, #0
 801d7aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d7ac:	4b1f      	ldr	r3, [pc, #124]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d7ae:	2200      	movs	r2, #0
 801d7b0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d7b2:	4b1e      	ldr	r3, [pc, #120]	@ (801d82c <USBD_LL_Init+0xc0>)
 801d7b4:	0018      	movs	r0, r3
 801d7b6:	f7f5 ff95 	bl	80136e4 <HAL_PCD_Init>
 801d7ba:	1e03      	subs	r3, r0, #0
 801d7bc:	d001      	beq.n	801d7c2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d7be:	f7ea ff69 	bl	8008694 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d7c2:	687a      	ldr	r2, [r7, #4]
 801d7c4:	23b0      	movs	r3, #176	@ 0xb0
 801d7c6:	009b      	lsls	r3, r3, #2
 801d7c8:	58d0      	ldr	r0, [r2, r3]
 801d7ca:	2318      	movs	r3, #24
 801d7cc:	2200      	movs	r2, #0
 801d7ce:	2100      	movs	r1, #0
 801d7d0:	f7f7 fd56 	bl	8015280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d7d4:	687a      	ldr	r2, [r7, #4]
 801d7d6:	23b0      	movs	r3, #176	@ 0xb0
 801d7d8:	009b      	lsls	r3, r3, #2
 801d7da:	58d0      	ldr	r0, [r2, r3]
 801d7dc:	2358      	movs	r3, #88	@ 0x58
 801d7de:	2200      	movs	r2, #0
 801d7e0:	2180      	movs	r1, #128	@ 0x80
 801d7e2:	f7f7 fd4d 	bl	8015280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d7e6:	687a      	ldr	r2, [r7, #4]
 801d7e8:	23b0      	movs	r3, #176	@ 0xb0
 801d7ea:	009b      	lsls	r3, r3, #2
 801d7ec:	58d0      	ldr	r0, [r2, r3]
 801d7ee:	23c0      	movs	r3, #192	@ 0xc0
 801d7f0:	2200      	movs	r2, #0
 801d7f2:	2181      	movs	r1, #129	@ 0x81
 801d7f4:	f7f7 fd44 	bl	8015280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d7f8:	687a      	ldr	r2, [r7, #4]
 801d7fa:	23b0      	movs	r3, #176	@ 0xb0
 801d7fc:	009b      	lsls	r3, r3, #2
 801d7fe:	58d0      	ldr	r0, [r2, r3]
 801d800:	2388      	movs	r3, #136	@ 0x88
 801d802:	005b      	lsls	r3, r3, #1
 801d804:	2200      	movs	r2, #0
 801d806:	2101      	movs	r1, #1
 801d808:	f7f7 fd3a 	bl	8015280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d80c:	687a      	ldr	r2, [r7, #4]
 801d80e:	23b0      	movs	r3, #176	@ 0xb0
 801d810:	009b      	lsls	r3, r3, #2
 801d812:	58d0      	ldr	r0, [r2, r3]
 801d814:	2380      	movs	r3, #128	@ 0x80
 801d816:	005b      	lsls	r3, r3, #1
 801d818:	2200      	movs	r2, #0
 801d81a:	2182      	movs	r1, #130	@ 0x82
 801d81c:	f7f7 fd30 	bl	8015280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d820:	2300      	movs	r3, #0
}
 801d822:	0018      	movs	r0, r3
 801d824:	46bd      	mov	sp, r7
 801d826:	b002      	add	sp, #8
 801d828:	bd80      	pop	{r7, pc}
 801d82a:	46c0      	nop			@ (mov r8, r8)
 801d82c:	20002d80 	.word	0x20002d80
 801d830:	40005c00 	.word	0x40005c00

0801d834 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d834:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d836:	b085      	sub	sp, #20
 801d838:	af00      	add	r7, sp, #0
 801d83a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d83c:	210f      	movs	r1, #15
 801d83e:	187b      	adds	r3, r7, r1
 801d840:	2200      	movs	r2, #0
 801d842:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d844:	260e      	movs	r6, #14
 801d846:	19bb      	adds	r3, r7, r6
 801d848:	2200      	movs	r2, #0
 801d84a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d84c:	687a      	ldr	r2, [r7, #4]
 801d84e:	23b0      	movs	r3, #176	@ 0xb0
 801d850:	009b      	lsls	r3, r3, #2
 801d852:	58d3      	ldr	r3, [r2, r3]
 801d854:	000d      	movs	r5, r1
 801d856:	187c      	adds	r4, r7, r1
 801d858:	0018      	movs	r0, r3
 801d85a:	f7f6 f843 	bl	80138e4 <HAL_PCD_Start>
 801d85e:	0003      	movs	r3, r0
 801d860:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d862:	19bc      	adds	r4, r7, r6
 801d864:	197b      	adds	r3, r7, r5
 801d866:	781b      	ldrb	r3, [r3, #0]
 801d868:	0018      	movs	r0, r3
 801d86a:	f000 f9bc 	bl	801dbe6 <USBD_Get_USB_Status>
 801d86e:	0003      	movs	r3, r0
 801d870:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d872:	19bb      	adds	r3, r7, r6
 801d874:	781b      	ldrb	r3, [r3, #0]
}
 801d876:	0018      	movs	r0, r3
 801d878:	46bd      	mov	sp, r7
 801d87a:	b005      	add	sp, #20
 801d87c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d87e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d87e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d880:	b085      	sub	sp, #20
 801d882:	af00      	add	r7, sp, #0
 801d884:	6078      	str	r0, [r7, #4]
 801d886:	000c      	movs	r4, r1
 801d888:	0010      	movs	r0, r2
 801d88a:	0019      	movs	r1, r3
 801d88c:	1cfb      	adds	r3, r7, #3
 801d88e:	1c22      	adds	r2, r4, #0
 801d890:	701a      	strb	r2, [r3, #0]
 801d892:	1cbb      	adds	r3, r7, #2
 801d894:	1c02      	adds	r2, r0, #0
 801d896:	701a      	strb	r2, [r3, #0]
 801d898:	003b      	movs	r3, r7
 801d89a:	1c0a      	adds	r2, r1, #0
 801d89c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d89e:	260f      	movs	r6, #15
 801d8a0:	19bb      	adds	r3, r7, r6
 801d8a2:	2200      	movs	r2, #0
 801d8a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d8a6:	250e      	movs	r5, #14
 801d8a8:	197b      	adds	r3, r7, r5
 801d8aa:	2200      	movs	r2, #0
 801d8ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d8ae:	687a      	ldr	r2, [r7, #4]
 801d8b0:	23b0      	movs	r3, #176	@ 0xb0
 801d8b2:	009b      	lsls	r3, r3, #2
 801d8b4:	58d0      	ldr	r0, [r2, r3]
 801d8b6:	19bc      	adds	r4, r7, r6
 801d8b8:	1cbb      	adds	r3, r7, #2
 801d8ba:	781d      	ldrb	r5, [r3, #0]
 801d8bc:	003b      	movs	r3, r7
 801d8be:	881a      	ldrh	r2, [r3, #0]
 801d8c0:	1cfb      	adds	r3, r7, #3
 801d8c2:	7819      	ldrb	r1, [r3, #0]
 801d8c4:	002b      	movs	r3, r5
 801d8c6:	f7f6 f9a2 	bl	8013c0e <HAL_PCD_EP_Open>
 801d8ca:	0003      	movs	r3, r0
 801d8cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d8ce:	250e      	movs	r5, #14
 801d8d0:	197c      	adds	r4, r7, r5
 801d8d2:	19bb      	adds	r3, r7, r6
 801d8d4:	781b      	ldrb	r3, [r3, #0]
 801d8d6:	0018      	movs	r0, r3
 801d8d8:	f000 f985 	bl	801dbe6 <USBD_Get_USB_Status>
 801d8dc:	0003      	movs	r3, r0
 801d8de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d8e0:	197b      	adds	r3, r7, r5
 801d8e2:	781b      	ldrb	r3, [r3, #0]
}
 801d8e4:	0018      	movs	r0, r3
 801d8e6:	46bd      	mov	sp, r7
 801d8e8:	b005      	add	sp, #20
 801d8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d8ec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8ee:	b085      	sub	sp, #20
 801d8f0:	af00      	add	r7, sp, #0
 801d8f2:	6078      	str	r0, [r7, #4]
 801d8f4:	000a      	movs	r2, r1
 801d8f6:	1cfb      	adds	r3, r7, #3
 801d8f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d8fa:	210f      	movs	r1, #15
 801d8fc:	187b      	adds	r3, r7, r1
 801d8fe:	2200      	movs	r2, #0
 801d900:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d902:	260e      	movs	r6, #14
 801d904:	19bb      	adds	r3, r7, r6
 801d906:	2200      	movs	r2, #0
 801d908:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d90a:	687a      	ldr	r2, [r7, #4]
 801d90c:	23b0      	movs	r3, #176	@ 0xb0
 801d90e:	009b      	lsls	r3, r3, #2
 801d910:	58d2      	ldr	r2, [r2, r3]
 801d912:	000d      	movs	r5, r1
 801d914:	187c      	adds	r4, r7, r1
 801d916:	1cfb      	adds	r3, r7, #3
 801d918:	781b      	ldrb	r3, [r3, #0]
 801d91a:	0019      	movs	r1, r3
 801d91c:	0010      	movs	r0, r2
 801d91e:	f7f6 f9e5 	bl	8013cec <HAL_PCD_EP_Close>
 801d922:	0003      	movs	r3, r0
 801d924:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d926:	19bc      	adds	r4, r7, r6
 801d928:	197b      	adds	r3, r7, r5
 801d92a:	781b      	ldrb	r3, [r3, #0]
 801d92c:	0018      	movs	r0, r3
 801d92e:	f000 f95a 	bl	801dbe6 <USBD_Get_USB_Status>
 801d932:	0003      	movs	r3, r0
 801d934:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d936:	19bb      	adds	r3, r7, r6
 801d938:	781b      	ldrb	r3, [r3, #0]
}
 801d93a:	0018      	movs	r0, r3
 801d93c:	46bd      	mov	sp, r7
 801d93e:	b005      	add	sp, #20
 801d940:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d942 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d942:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d944:	b085      	sub	sp, #20
 801d946:	af00      	add	r7, sp, #0
 801d948:	6078      	str	r0, [r7, #4]
 801d94a:	000a      	movs	r2, r1
 801d94c:	1cfb      	adds	r3, r7, #3
 801d94e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d950:	210f      	movs	r1, #15
 801d952:	187b      	adds	r3, r7, r1
 801d954:	2200      	movs	r2, #0
 801d956:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d958:	260e      	movs	r6, #14
 801d95a:	19bb      	adds	r3, r7, r6
 801d95c:	2200      	movs	r2, #0
 801d95e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d960:	687a      	ldr	r2, [r7, #4]
 801d962:	23b0      	movs	r3, #176	@ 0xb0
 801d964:	009b      	lsls	r3, r3, #2
 801d966:	58d2      	ldr	r2, [r2, r3]
 801d968:	000d      	movs	r5, r1
 801d96a:	187c      	adds	r4, r7, r1
 801d96c:	1cfb      	adds	r3, r7, #3
 801d96e:	781b      	ldrb	r3, [r3, #0]
 801d970:	0019      	movs	r1, r3
 801d972:	0010      	movs	r0, r2
 801d974:	f7f6 fa97 	bl	8013ea6 <HAL_PCD_EP_SetStall>
 801d978:	0003      	movs	r3, r0
 801d97a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d97c:	19bc      	adds	r4, r7, r6
 801d97e:	197b      	adds	r3, r7, r5
 801d980:	781b      	ldrb	r3, [r3, #0]
 801d982:	0018      	movs	r0, r3
 801d984:	f000 f92f 	bl	801dbe6 <USBD_Get_USB_Status>
 801d988:	0003      	movs	r3, r0
 801d98a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d98c:	19bb      	adds	r3, r7, r6
 801d98e:	781b      	ldrb	r3, [r3, #0]
}
 801d990:	0018      	movs	r0, r3
 801d992:	46bd      	mov	sp, r7
 801d994:	b005      	add	sp, #20
 801d996:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d998 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d99a:	b085      	sub	sp, #20
 801d99c:	af00      	add	r7, sp, #0
 801d99e:	6078      	str	r0, [r7, #4]
 801d9a0:	000a      	movs	r2, r1
 801d9a2:	1cfb      	adds	r3, r7, #3
 801d9a4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d9a6:	210f      	movs	r1, #15
 801d9a8:	187b      	adds	r3, r7, r1
 801d9aa:	2200      	movs	r2, #0
 801d9ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d9ae:	260e      	movs	r6, #14
 801d9b0:	19bb      	adds	r3, r7, r6
 801d9b2:	2200      	movs	r2, #0
 801d9b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d9b6:	687a      	ldr	r2, [r7, #4]
 801d9b8:	23b0      	movs	r3, #176	@ 0xb0
 801d9ba:	009b      	lsls	r3, r3, #2
 801d9bc:	58d2      	ldr	r2, [r2, r3]
 801d9be:	000d      	movs	r5, r1
 801d9c0:	187c      	adds	r4, r7, r1
 801d9c2:	1cfb      	adds	r3, r7, #3
 801d9c4:	781b      	ldrb	r3, [r3, #0]
 801d9c6:	0019      	movs	r1, r3
 801d9c8:	0010      	movs	r0, r2
 801d9ca:	f7f6 fac8 	bl	8013f5e <HAL_PCD_EP_ClrStall>
 801d9ce:	0003      	movs	r3, r0
 801d9d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d9d2:	19bc      	adds	r4, r7, r6
 801d9d4:	197b      	adds	r3, r7, r5
 801d9d6:	781b      	ldrb	r3, [r3, #0]
 801d9d8:	0018      	movs	r0, r3
 801d9da:	f000 f904 	bl	801dbe6 <USBD_Get_USB_Status>
 801d9de:	0003      	movs	r3, r0
 801d9e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d9e2:	19bb      	adds	r3, r7, r6
 801d9e4:	781b      	ldrb	r3, [r3, #0]
}
 801d9e6:	0018      	movs	r0, r3
 801d9e8:	46bd      	mov	sp, r7
 801d9ea:	b005      	add	sp, #20
 801d9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d9ee <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d9ee:	b580      	push	{r7, lr}
 801d9f0:	b084      	sub	sp, #16
 801d9f2:	af00      	add	r7, sp, #0
 801d9f4:	6078      	str	r0, [r7, #4]
 801d9f6:	000a      	movs	r2, r1
 801d9f8:	1cfb      	adds	r3, r7, #3
 801d9fa:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d9fc:	687a      	ldr	r2, [r7, #4]
 801d9fe:	23b0      	movs	r3, #176	@ 0xb0
 801da00:	009b      	lsls	r3, r3, #2
 801da02:	58d3      	ldr	r3, [r2, r3]
 801da04:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801da06:	1cfb      	adds	r3, r7, #3
 801da08:	781b      	ldrb	r3, [r3, #0]
 801da0a:	b25b      	sxtb	r3, r3
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	da0d      	bge.n	801da2c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801da10:	1cfb      	adds	r3, r7, #3
 801da12:	781b      	ldrb	r3, [r3, #0]
 801da14:	227f      	movs	r2, #127	@ 0x7f
 801da16:	4013      	ands	r3, r2
 801da18:	68f9      	ldr	r1, [r7, #12]
 801da1a:	1c5a      	adds	r2, r3, #1
 801da1c:	0013      	movs	r3, r2
 801da1e:	009b      	lsls	r3, r3, #2
 801da20:	189b      	adds	r3, r3, r2
 801da22:	00db      	lsls	r3, r3, #3
 801da24:	18cb      	adds	r3, r1, r3
 801da26:	3302      	adds	r3, #2
 801da28:	781b      	ldrb	r3, [r3, #0]
 801da2a:	e00d      	b.n	801da48 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801da2c:	1cfb      	adds	r3, r7, #3
 801da2e:	781b      	ldrb	r3, [r3, #0]
 801da30:	227f      	movs	r2, #127	@ 0x7f
 801da32:	401a      	ands	r2, r3
 801da34:	68f8      	ldr	r0, [r7, #12]
 801da36:	23b5      	movs	r3, #181	@ 0xb5
 801da38:	0059      	lsls	r1, r3, #1
 801da3a:	0013      	movs	r3, r2
 801da3c:	009b      	lsls	r3, r3, #2
 801da3e:	189b      	adds	r3, r3, r2
 801da40:	00db      	lsls	r3, r3, #3
 801da42:	18c3      	adds	r3, r0, r3
 801da44:	185b      	adds	r3, r3, r1
 801da46:	781b      	ldrb	r3, [r3, #0]
  }
}
 801da48:	0018      	movs	r0, r3
 801da4a:	46bd      	mov	sp, r7
 801da4c:	b004      	add	sp, #16
 801da4e:	bd80      	pop	{r7, pc}

0801da50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801da50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da52:	b085      	sub	sp, #20
 801da54:	af00      	add	r7, sp, #0
 801da56:	6078      	str	r0, [r7, #4]
 801da58:	000a      	movs	r2, r1
 801da5a:	1cfb      	adds	r3, r7, #3
 801da5c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da5e:	210f      	movs	r1, #15
 801da60:	187b      	adds	r3, r7, r1
 801da62:	2200      	movs	r2, #0
 801da64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da66:	260e      	movs	r6, #14
 801da68:	19bb      	adds	r3, r7, r6
 801da6a:	2200      	movs	r2, #0
 801da6c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801da6e:	687a      	ldr	r2, [r7, #4]
 801da70:	23b0      	movs	r3, #176	@ 0xb0
 801da72:	009b      	lsls	r3, r3, #2
 801da74:	58d2      	ldr	r2, [r2, r3]
 801da76:	000d      	movs	r5, r1
 801da78:	187c      	adds	r4, r7, r1
 801da7a:	1cfb      	adds	r3, r7, #3
 801da7c:	781b      	ldrb	r3, [r3, #0]
 801da7e:	0019      	movs	r1, r3
 801da80:	0010      	movs	r0, r2
 801da82:	f7f6 f899 	bl	8013bb8 <HAL_PCD_SetAddress>
 801da86:	0003      	movs	r3, r0
 801da88:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da8a:	19bc      	adds	r4, r7, r6
 801da8c:	197b      	adds	r3, r7, r5
 801da8e:	781b      	ldrb	r3, [r3, #0]
 801da90:	0018      	movs	r0, r3
 801da92:	f000 f8a8 	bl	801dbe6 <USBD_Get_USB_Status>
 801da96:	0003      	movs	r3, r0
 801da98:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801da9a:	19bb      	adds	r3, r7, r6
 801da9c:	781b      	ldrb	r3, [r3, #0]
}
 801da9e:	0018      	movs	r0, r3
 801daa0:	46bd      	mov	sp, r7
 801daa2:	b005      	add	sp, #20
 801daa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801daa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801daa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801daa8:	b087      	sub	sp, #28
 801daaa:	af00      	add	r7, sp, #0
 801daac:	60f8      	str	r0, [r7, #12]
 801daae:	0008      	movs	r0, r1
 801dab0:	607a      	str	r2, [r7, #4]
 801dab2:	0019      	movs	r1, r3
 801dab4:	230b      	movs	r3, #11
 801dab6:	18fb      	adds	r3, r7, r3
 801dab8:	1c02      	adds	r2, r0, #0
 801daba:	701a      	strb	r2, [r3, #0]
 801dabc:	2408      	movs	r4, #8
 801dabe:	193b      	adds	r3, r7, r4
 801dac0:	1c0a      	adds	r2, r1, #0
 801dac2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dac4:	2117      	movs	r1, #23
 801dac6:	187b      	adds	r3, r7, r1
 801dac8:	2200      	movs	r2, #0
 801daca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dacc:	2516      	movs	r5, #22
 801dace:	197b      	adds	r3, r7, r5
 801dad0:	2200      	movs	r2, #0
 801dad2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801dad4:	68fa      	ldr	r2, [r7, #12]
 801dad6:	23b0      	movs	r3, #176	@ 0xb0
 801dad8:	009b      	lsls	r3, r3, #2
 801dada:	58d0      	ldr	r0, [r2, r3]
 801dadc:	193b      	adds	r3, r7, r4
 801dade:	881d      	ldrh	r5, [r3, #0]
 801dae0:	000e      	movs	r6, r1
 801dae2:	187c      	adds	r4, r7, r1
 801dae4:	687a      	ldr	r2, [r7, #4]
 801dae6:	230b      	movs	r3, #11
 801dae8:	18fb      	adds	r3, r7, r3
 801daea:	7819      	ldrb	r1, [r3, #0]
 801daec:	002b      	movs	r3, r5
 801daee:	f7f6 f99e 	bl	8013e2e <HAL_PCD_EP_Transmit>
 801daf2:	0003      	movs	r3, r0
 801daf4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801daf6:	2516      	movs	r5, #22
 801daf8:	197c      	adds	r4, r7, r5
 801dafa:	19bb      	adds	r3, r7, r6
 801dafc:	781b      	ldrb	r3, [r3, #0]
 801dafe:	0018      	movs	r0, r3
 801db00:	f000 f871 	bl	801dbe6 <USBD_Get_USB_Status>
 801db04:	0003      	movs	r3, r0
 801db06:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801db08:	197b      	adds	r3, r7, r5
 801db0a:	781b      	ldrb	r3, [r3, #0]
}
 801db0c:	0018      	movs	r0, r3
 801db0e:	46bd      	mov	sp, r7
 801db10:	b007      	add	sp, #28
 801db12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801db14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801db14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db16:	b087      	sub	sp, #28
 801db18:	af00      	add	r7, sp, #0
 801db1a:	60f8      	str	r0, [r7, #12]
 801db1c:	0008      	movs	r0, r1
 801db1e:	607a      	str	r2, [r7, #4]
 801db20:	0019      	movs	r1, r3
 801db22:	230b      	movs	r3, #11
 801db24:	18fb      	adds	r3, r7, r3
 801db26:	1c02      	adds	r2, r0, #0
 801db28:	701a      	strb	r2, [r3, #0]
 801db2a:	2408      	movs	r4, #8
 801db2c:	193b      	adds	r3, r7, r4
 801db2e:	1c0a      	adds	r2, r1, #0
 801db30:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801db32:	2117      	movs	r1, #23
 801db34:	187b      	adds	r3, r7, r1
 801db36:	2200      	movs	r2, #0
 801db38:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db3a:	2516      	movs	r5, #22
 801db3c:	197b      	adds	r3, r7, r5
 801db3e:	2200      	movs	r2, #0
 801db40:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801db42:	68fa      	ldr	r2, [r7, #12]
 801db44:	23b0      	movs	r3, #176	@ 0xb0
 801db46:	009b      	lsls	r3, r3, #2
 801db48:	58d0      	ldr	r0, [r2, r3]
 801db4a:	193b      	adds	r3, r7, r4
 801db4c:	881d      	ldrh	r5, [r3, #0]
 801db4e:	000e      	movs	r6, r1
 801db50:	187c      	adds	r4, r7, r1
 801db52:	687a      	ldr	r2, [r7, #4]
 801db54:	230b      	movs	r3, #11
 801db56:	18fb      	adds	r3, r7, r3
 801db58:	7819      	ldrb	r1, [r3, #0]
 801db5a:	002b      	movs	r3, r5
 801db5c:	f7f6 f917 	bl	8013d8e <HAL_PCD_EP_Receive>
 801db60:	0003      	movs	r3, r0
 801db62:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801db64:	2516      	movs	r5, #22
 801db66:	197c      	adds	r4, r7, r5
 801db68:	19bb      	adds	r3, r7, r6
 801db6a:	781b      	ldrb	r3, [r3, #0]
 801db6c:	0018      	movs	r0, r3
 801db6e:	f000 f83a 	bl	801dbe6 <USBD_Get_USB_Status>
 801db72:	0003      	movs	r3, r0
 801db74:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801db76:	197b      	adds	r3, r7, r5
 801db78:	781b      	ldrb	r3, [r3, #0]
}
 801db7a:	0018      	movs	r0, r3
 801db7c:	46bd      	mov	sp, r7
 801db7e:	b007      	add	sp, #28
 801db80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801db82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801db82:	b580      	push	{r7, lr}
 801db84:	b082      	sub	sp, #8
 801db86:	af00      	add	r7, sp, #0
 801db88:	6078      	str	r0, [r7, #4]
 801db8a:	000a      	movs	r2, r1
 801db8c:	1cfb      	adds	r3, r7, #3
 801db8e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801db90:	687a      	ldr	r2, [r7, #4]
 801db92:	23b0      	movs	r3, #176	@ 0xb0
 801db94:	009b      	lsls	r3, r3, #2
 801db96:	58d2      	ldr	r2, [r2, r3]
 801db98:	1cfb      	adds	r3, r7, #3
 801db9a:	781b      	ldrb	r3, [r3, #0]
 801db9c:	0019      	movs	r1, r3
 801db9e:	0010      	movs	r0, r2
 801dba0:	f7f6 f92c 	bl	8013dfc <HAL_PCD_EP_GetRxCount>
 801dba4:	0003      	movs	r3, r0
}
 801dba6:	0018      	movs	r0, r3
 801dba8:	46bd      	mov	sp, r7
 801dbaa:	b002      	add	sp, #8
 801dbac:	bd80      	pop	{r7, pc}
	...

0801dbb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801dbb0:	b580      	push	{r7, lr}
 801dbb2:	b082      	sub	sp, #8
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801dbb8:	4b02      	ldr	r3, [pc, #8]	@ (801dbc4 <USBD_static_malloc+0x14>)
}
 801dbba:	0018      	movs	r0, r3
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	b002      	add	sp, #8
 801dbc0:	bd80      	pop	{r7, pc}
 801dbc2:	46c0      	nop			@ (mov r8, r8)
 801dbc4:	20003074 	.word	0x20003074

0801dbc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b082      	sub	sp, #8
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]

}
 801dbd0:	46c0      	nop			@ (mov r8, r8)
 801dbd2:	46bd      	mov	sp, r7
 801dbd4:	b002      	add	sp, #8
 801dbd6:	bd80      	pop	{r7, pc}

0801dbd8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801dbdc:	f7ea fc14 	bl	8008408 <SystemClock_Config>
}
 801dbe0:	46c0      	nop			@ (mov r8, r8)
 801dbe2:	46bd      	mov	sp, r7
 801dbe4:	bd80      	pop	{r7, pc}

0801dbe6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801dbe6:	b580      	push	{r7, lr}
 801dbe8:	b084      	sub	sp, #16
 801dbea:	af00      	add	r7, sp, #0
 801dbec:	0002      	movs	r2, r0
 801dbee:	1dfb      	adds	r3, r7, #7
 801dbf0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dbf2:	230f      	movs	r3, #15
 801dbf4:	18fb      	adds	r3, r7, r3
 801dbf6:	2200      	movs	r2, #0
 801dbf8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801dbfa:	1dfb      	adds	r3, r7, #7
 801dbfc:	781b      	ldrb	r3, [r3, #0]
 801dbfe:	2b03      	cmp	r3, #3
 801dc00:	d017      	beq.n	801dc32 <USBD_Get_USB_Status+0x4c>
 801dc02:	dc1b      	bgt.n	801dc3c <USBD_Get_USB_Status+0x56>
 801dc04:	2b02      	cmp	r3, #2
 801dc06:	d00f      	beq.n	801dc28 <USBD_Get_USB_Status+0x42>
 801dc08:	dc18      	bgt.n	801dc3c <USBD_Get_USB_Status+0x56>
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	d002      	beq.n	801dc14 <USBD_Get_USB_Status+0x2e>
 801dc0e:	2b01      	cmp	r3, #1
 801dc10:	d005      	beq.n	801dc1e <USBD_Get_USB_Status+0x38>
 801dc12:	e013      	b.n	801dc3c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801dc14:	230f      	movs	r3, #15
 801dc16:	18fb      	adds	r3, r7, r3
 801dc18:	2200      	movs	r2, #0
 801dc1a:	701a      	strb	r2, [r3, #0]
    break;
 801dc1c:	e013      	b.n	801dc46 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801dc1e:	230f      	movs	r3, #15
 801dc20:	18fb      	adds	r3, r7, r3
 801dc22:	2202      	movs	r2, #2
 801dc24:	701a      	strb	r2, [r3, #0]
    break;
 801dc26:	e00e      	b.n	801dc46 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801dc28:	230f      	movs	r3, #15
 801dc2a:	18fb      	adds	r3, r7, r3
 801dc2c:	2201      	movs	r2, #1
 801dc2e:	701a      	strb	r2, [r3, #0]
    break;
 801dc30:	e009      	b.n	801dc46 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801dc32:	230f      	movs	r3, #15
 801dc34:	18fb      	adds	r3, r7, r3
 801dc36:	2202      	movs	r2, #2
 801dc38:	701a      	strb	r2, [r3, #0]
    break;
 801dc3a:	e004      	b.n	801dc46 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801dc3c:	230f      	movs	r3, #15
 801dc3e:	18fb      	adds	r3, r7, r3
 801dc40:	2202      	movs	r2, #2
 801dc42:	701a      	strb	r2, [r3, #0]
    break;
 801dc44:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801dc46:	230f      	movs	r3, #15
 801dc48:	18fb      	adds	r3, r7, r3
 801dc4a:	781b      	ldrb	r3, [r3, #0]
}
 801dc4c:	0018      	movs	r0, r3
 801dc4e:	46bd      	mov	sp, r7
 801dc50:	b004      	add	sp, #16
 801dc52:	bd80      	pop	{r7, pc}

0801dc54 <arm_cfft_radix4by2_q31>:
 801dc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc56:	465f      	mov	r7, fp
 801dc58:	4656      	mov	r6, sl
 801dc5a:	464d      	mov	r5, r9
 801dc5c:	4644      	mov	r4, r8
 801dc5e:	000b      	movs	r3, r1
 801dc60:	b4f0      	push	{r4, r5, r6, r7}
 801dc62:	085b      	lsrs	r3, r3, #1
 801dc64:	b08f      	sub	sp, #60	@ 0x3c
 801dc66:	910a      	str	r1, [sp, #40]	@ 0x28
 801dc68:	0007      	movs	r7, r0
 801dc6a:	9009      	str	r0, [sp, #36]	@ 0x24
 801dc6c:	0011      	movs	r1, r2
 801dc6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dc70:	930c      	str	r3, [sp, #48]	@ 0x30
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d100      	bne.n	801dc78 <arm_cfft_radix4by2_q31+0x24>
 801dc76:	e0a0      	b.n	801ddba <arm_cfft_radix4by2_q31+0x166>
 801dc78:	0002      	movs	r2, r0
 801dc7a:	00db      	lsls	r3, r3, #3
 801dc7c:	3204      	adds	r2, #4
 801dc7e:	4691      	mov	r9, r2
 801dc80:	4698      	mov	r8, r3
 801dc82:	000a      	movs	r2, r1
 801dc84:	464e      	mov	r6, r9
 801dc86:	4442      	add	r2, r8
 801dc88:	4699      	mov	r9, r3
 801dc8a:	4688      	mov	r8, r1
 801dc8c:	9208      	str	r2, [sp, #32]
 801dc8e:	900d      	str	r0, [sp, #52]	@ 0x34
 801dc90:	4643      	mov	r3, r8
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	469b      	mov	fp, r3
 801dc96:	4643      	mov	r3, r8
 801dc98:	685b      	ldr	r3, [r3, #4]
 801dc9a:	469a      	mov	sl, r3
 801dc9c:	683b      	ldr	r3, [r7, #0]
 801dc9e:	109c      	asrs	r4, r3, #2
 801dca0:	464b      	mov	r3, r9
 801dca2:	58fb      	ldr	r3, [r7, r3]
 801dca4:	109a      	asrs	r2, r3, #2
 801dca6:	18a3      	adds	r3, r4, r2
 801dca8:	603b      	str	r3, [r7, #0]
 801dcaa:	6833      	ldr	r3, [r6, #0]
 801dcac:	1aa4      	subs	r4, r4, r2
 801dcae:	109d      	asrs	r5, r3, #2
 801dcb0:	464b      	mov	r3, r9
 801dcb2:	58f3      	ldr	r3, [r6, r3]
 801dcb4:	17e2      	asrs	r2, r4, #31
 801dcb6:	109b      	asrs	r3, r3, #2
 801dcb8:	18e9      	adds	r1, r5, r3
 801dcba:	6031      	str	r1, [r6, #0]
 801dcbc:	0011      	movs	r1, r2
 801dcbe:	465a      	mov	r2, fp
 801dcc0:	17d2      	asrs	r2, r2, #31
 801dcc2:	0010      	movs	r0, r2
 801dcc4:	4652      	mov	r2, sl
 801dcc6:	1aed      	subs	r5, r5, r3
 801dcc8:	17eb      	asrs	r3, r5, #31
 801dcca:	17d2      	asrs	r2, r2, #31
 801dccc:	9307      	str	r3, [sp, #28]
 801dcce:	9204      	str	r2, [sp, #16]
 801dcd0:	0003      	movs	r3, r0
 801dcd2:	465a      	mov	r2, fp
 801dcd4:	9006      	str	r0, [sp, #24]
 801dcd6:	0020      	movs	r0, r4
 801dcd8:	9105      	str	r1, [sp, #20]
 801dcda:	f7e2 fc71 	bl	80005c0 <__aeabi_lmul>
 801dcde:	2280      	movs	r2, #128	@ 0x80
 801dce0:	2300      	movs	r3, #0
 801dce2:	0612      	lsls	r2, r2, #24
 801dce4:	1880      	adds	r0, r0, r2
 801dce6:	4159      	adcs	r1, r3
 801dce8:	2300      	movs	r3, #0
 801dcea:	9101      	str	r1, [sp, #4]
 801dcec:	9300      	str	r3, [sp, #0]
 801dcee:	4652      	mov	r2, sl
 801dcf0:	9b04      	ldr	r3, [sp, #16]
 801dcf2:	0028      	movs	r0, r5
 801dcf4:	17e9      	asrs	r1, r5, #31
 801dcf6:	f7e2 fc63 	bl	80005c0 <__aeabi_lmul>
 801dcfa:	9a00      	ldr	r2, [sp, #0]
 801dcfc:	9b01      	ldr	r3, [sp, #4]
 801dcfe:	1880      	adds	r0, r0, r2
 801dd00:	4159      	adcs	r1, r3
 801dd02:	2280      	movs	r2, #128	@ 0x80
 801dd04:	2300      	movs	r3, #0
 801dd06:	0612      	lsls	r2, r2, #24
 801dd08:	1880      	adds	r0, r0, r2
 801dd0a:	4159      	adcs	r1, r3
 801dd0c:	464a      	mov	r2, r9
 801dd0e:	004b      	lsls	r3, r1, #1
 801dd10:	50bb      	str	r3, [r7, r2]
 801dd12:	4658      	mov	r0, fp
 801dd14:	002a      	movs	r2, r5
 801dd16:	9b07      	ldr	r3, [sp, #28]
 801dd18:	9906      	ldr	r1, [sp, #24]
 801dd1a:	f7e2 fc51 	bl	80005c0 <__aeabi_lmul>
 801dd1e:	2280      	movs	r2, #128	@ 0x80
 801dd20:	2300      	movs	r3, #0
 801dd22:	0612      	lsls	r2, r2, #24
 801dd24:	1880      	adds	r0, r0, r2
 801dd26:	4159      	adcs	r1, r3
 801dd28:	2000      	movs	r0, #0
 801dd2a:	9103      	str	r1, [sp, #12]
 801dd2c:	9002      	str	r0, [sp, #8]
 801dd2e:	4652      	mov	r2, sl
 801dd30:	9b04      	ldr	r3, [sp, #16]
 801dd32:	0020      	movs	r0, r4
 801dd34:	9905      	ldr	r1, [sp, #20]
 801dd36:	f7e2 fc43 	bl	80005c0 <__aeabi_lmul>
 801dd3a:	9a02      	ldr	r2, [sp, #8]
 801dd3c:	9b03      	ldr	r3, [sp, #12]
 801dd3e:	1a12      	subs	r2, r2, r0
 801dd40:	418b      	sbcs	r3, r1
 801dd42:	2080      	movs	r0, #128	@ 0x80
 801dd44:	2100      	movs	r1, #0
 801dd46:	0600      	lsls	r0, r0, #24
 801dd48:	1812      	adds	r2, r2, r0
 801dd4a:	414b      	adcs	r3, r1
 801dd4c:	464a      	mov	r2, r9
 801dd4e:	005b      	lsls	r3, r3, #1
 801dd50:	50b3      	str	r3, [r6, r2]
 801dd52:	2308      	movs	r3, #8
 801dd54:	469c      	mov	ip, r3
 801dd56:	9b08      	ldr	r3, [sp, #32]
 801dd58:	44e0      	add	r8, ip
 801dd5a:	3708      	adds	r7, #8
 801dd5c:	3608      	adds	r6, #8
 801dd5e:	4598      	cmp	r8, r3
 801dd60:	d196      	bne.n	801dc90 <arm_cfft_radix4by2_q31+0x3c>
 801dd62:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801dd64:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801dd66:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801dd68:	2302      	movs	r3, #2
 801dd6a:	003a      	movs	r2, r7
 801dd6c:	0029      	movs	r1, r5
 801dd6e:	0020      	movs	r0, r4
 801dd70:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801dd72:	f000 f957 	bl	801e024 <arm_radix4_butterfly_q31>
 801dd76:	46a4      	mov	ip, r4
 801dd78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd7a:	2302      	movs	r3, #2
 801dd7c:	0088      	lsls	r0, r1, #2
 801dd7e:	4460      	add	r0, ip
 801dd80:	003a      	movs	r2, r7
 801dd82:	0029      	movs	r1, r5
 801dd84:	f000 f94e 	bl	801e024 <arm_radix4_butterfly_q31>
 801dd88:	46a4      	mov	ip, r4
 801dd8a:	0128      	lsls	r0, r5, #4
 801dd8c:	4460      	add	r0, ip
 801dd8e:	6833      	ldr	r3, [r6, #0]
 801dd90:	005b      	lsls	r3, r3, #1
 801dd92:	6033      	str	r3, [r6, #0]
 801dd94:	6873      	ldr	r3, [r6, #4]
 801dd96:	005b      	lsls	r3, r3, #1
 801dd98:	6073      	str	r3, [r6, #4]
 801dd9a:	68b3      	ldr	r3, [r6, #8]
 801dd9c:	005b      	lsls	r3, r3, #1
 801dd9e:	60b3      	str	r3, [r6, #8]
 801dda0:	68f3      	ldr	r3, [r6, #12]
 801dda2:	005b      	lsls	r3, r3, #1
 801dda4:	60f3      	str	r3, [r6, #12]
 801dda6:	3610      	adds	r6, #16
 801dda8:	42b0      	cmp	r0, r6
 801ddaa:	d1f0      	bne.n	801dd8e <arm_cfft_radix4by2_q31+0x13a>
 801ddac:	b00f      	add	sp, #60	@ 0x3c
 801ddae:	bc3c      	pop	{r2, r3, r4, r5}
 801ddb0:	4690      	mov	r8, r2
 801ddb2:	4699      	mov	r9, r3
 801ddb4:	46a2      	mov	sl, r4
 801ddb6:	46ab      	mov	fp, r5
 801ddb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddba:	2302      	movs	r3, #2
 801ddbc:	2100      	movs	r1, #0
 801ddbe:	0015      	movs	r5, r2
 801ddc0:	f000 f930 	bl	801e024 <arm_radix4_butterfly_q31>
 801ddc4:	46bc      	mov	ip, r7
 801ddc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ddc8:	002a      	movs	r2, r5
 801ddca:	0098      	lsls	r0, r3, #2
 801ddcc:	4460      	add	r0, ip
 801ddce:	2302      	movs	r3, #2
 801ddd0:	2100      	movs	r1, #0
 801ddd2:	f000 f927 	bl	801e024 <arm_radix4_butterfly_q31>
 801ddd6:	e7e9      	b.n	801ddac <arm_cfft_radix4by2_q31+0x158>

0801ddd8 <arm_cfft_radix4by2_inverse_q31>:
 801ddd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddda:	465f      	mov	r7, fp
 801dddc:	4656      	mov	r6, sl
 801ddde:	464d      	mov	r5, r9
 801dde0:	4644      	mov	r4, r8
 801dde2:	000b      	movs	r3, r1
 801dde4:	b4f0      	push	{r4, r5, r6, r7}
 801dde6:	085b      	lsrs	r3, r3, #1
 801dde8:	b08f      	sub	sp, #60	@ 0x3c
 801ddea:	910a      	str	r1, [sp, #40]	@ 0x28
 801ddec:	0007      	movs	r7, r0
 801ddee:	9009      	str	r0, [sp, #36]	@ 0x24
 801ddf0:	0011      	movs	r1, r2
 801ddf2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ddf4:	930c      	str	r3, [sp, #48]	@ 0x30
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d100      	bne.n	801ddfc <arm_cfft_radix4by2_inverse_q31+0x24>
 801ddfa:	e0a0      	b.n	801df3e <arm_cfft_radix4by2_inverse_q31+0x166>
 801ddfc:	0002      	movs	r2, r0
 801ddfe:	00db      	lsls	r3, r3, #3
 801de00:	3204      	adds	r2, #4
 801de02:	4691      	mov	r9, r2
 801de04:	4698      	mov	r8, r3
 801de06:	000a      	movs	r2, r1
 801de08:	464e      	mov	r6, r9
 801de0a:	4442      	add	r2, r8
 801de0c:	4699      	mov	r9, r3
 801de0e:	4688      	mov	r8, r1
 801de10:	9208      	str	r2, [sp, #32]
 801de12:	900d      	str	r0, [sp, #52]	@ 0x34
 801de14:	4643      	mov	r3, r8
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	469b      	mov	fp, r3
 801de1a:	4643      	mov	r3, r8
 801de1c:	685b      	ldr	r3, [r3, #4]
 801de1e:	469a      	mov	sl, r3
 801de20:	683b      	ldr	r3, [r7, #0]
 801de22:	109c      	asrs	r4, r3, #2
 801de24:	464b      	mov	r3, r9
 801de26:	58fb      	ldr	r3, [r7, r3]
 801de28:	109a      	asrs	r2, r3, #2
 801de2a:	18a3      	adds	r3, r4, r2
 801de2c:	603b      	str	r3, [r7, #0]
 801de2e:	6833      	ldr	r3, [r6, #0]
 801de30:	1aa4      	subs	r4, r4, r2
 801de32:	109d      	asrs	r5, r3, #2
 801de34:	464b      	mov	r3, r9
 801de36:	58f3      	ldr	r3, [r6, r3]
 801de38:	17e2      	asrs	r2, r4, #31
 801de3a:	109b      	asrs	r3, r3, #2
 801de3c:	18e9      	adds	r1, r5, r3
 801de3e:	6031      	str	r1, [r6, #0]
 801de40:	0011      	movs	r1, r2
 801de42:	465a      	mov	r2, fp
 801de44:	17d2      	asrs	r2, r2, #31
 801de46:	0010      	movs	r0, r2
 801de48:	4652      	mov	r2, sl
 801de4a:	1aed      	subs	r5, r5, r3
 801de4c:	17eb      	asrs	r3, r5, #31
 801de4e:	17d2      	asrs	r2, r2, #31
 801de50:	9307      	str	r3, [sp, #28]
 801de52:	9204      	str	r2, [sp, #16]
 801de54:	0003      	movs	r3, r0
 801de56:	465a      	mov	r2, fp
 801de58:	9006      	str	r0, [sp, #24]
 801de5a:	0020      	movs	r0, r4
 801de5c:	9105      	str	r1, [sp, #20]
 801de5e:	f7e2 fbaf 	bl	80005c0 <__aeabi_lmul>
 801de62:	2280      	movs	r2, #128	@ 0x80
 801de64:	2300      	movs	r3, #0
 801de66:	0612      	lsls	r2, r2, #24
 801de68:	1880      	adds	r0, r0, r2
 801de6a:	4159      	adcs	r1, r3
 801de6c:	2300      	movs	r3, #0
 801de6e:	9101      	str	r1, [sp, #4]
 801de70:	9300      	str	r3, [sp, #0]
 801de72:	4652      	mov	r2, sl
 801de74:	9b04      	ldr	r3, [sp, #16]
 801de76:	0028      	movs	r0, r5
 801de78:	17e9      	asrs	r1, r5, #31
 801de7a:	f7e2 fba1 	bl	80005c0 <__aeabi_lmul>
 801de7e:	9a00      	ldr	r2, [sp, #0]
 801de80:	9b01      	ldr	r3, [sp, #4]
 801de82:	1a12      	subs	r2, r2, r0
 801de84:	418b      	sbcs	r3, r1
 801de86:	2080      	movs	r0, #128	@ 0x80
 801de88:	2100      	movs	r1, #0
 801de8a:	0600      	lsls	r0, r0, #24
 801de8c:	1812      	adds	r2, r2, r0
 801de8e:	414b      	adcs	r3, r1
 801de90:	464a      	mov	r2, r9
 801de92:	005b      	lsls	r3, r3, #1
 801de94:	50bb      	str	r3, [r7, r2]
 801de96:	4658      	mov	r0, fp
 801de98:	002a      	movs	r2, r5
 801de9a:	9b07      	ldr	r3, [sp, #28]
 801de9c:	9906      	ldr	r1, [sp, #24]
 801de9e:	f7e2 fb8f 	bl	80005c0 <__aeabi_lmul>
 801dea2:	2280      	movs	r2, #128	@ 0x80
 801dea4:	2300      	movs	r3, #0
 801dea6:	0612      	lsls	r2, r2, #24
 801dea8:	1880      	adds	r0, r0, r2
 801deaa:	4159      	adcs	r1, r3
 801deac:	2000      	movs	r0, #0
 801deae:	9103      	str	r1, [sp, #12]
 801deb0:	9002      	str	r0, [sp, #8]
 801deb2:	4652      	mov	r2, sl
 801deb4:	9b04      	ldr	r3, [sp, #16]
 801deb6:	0020      	movs	r0, r4
 801deb8:	9905      	ldr	r1, [sp, #20]
 801deba:	f7e2 fb81 	bl	80005c0 <__aeabi_lmul>
 801debe:	9b02      	ldr	r3, [sp, #8]
 801dec0:	9c03      	ldr	r4, [sp, #12]
 801dec2:	18c0      	adds	r0, r0, r3
 801dec4:	4161      	adcs	r1, r4
 801dec6:	2380      	movs	r3, #128	@ 0x80
 801dec8:	2400      	movs	r4, #0
 801deca:	061b      	lsls	r3, r3, #24
 801decc:	18c0      	adds	r0, r0, r3
 801dece:	4161      	adcs	r1, r4
 801ded0:	464a      	mov	r2, r9
 801ded2:	004b      	lsls	r3, r1, #1
 801ded4:	50b3      	str	r3, [r6, r2]
 801ded6:	2308      	movs	r3, #8
 801ded8:	469c      	mov	ip, r3
 801deda:	9b08      	ldr	r3, [sp, #32]
 801dedc:	44e0      	add	r8, ip
 801dede:	3708      	adds	r7, #8
 801dee0:	3608      	adds	r6, #8
 801dee2:	4598      	cmp	r8, r3
 801dee4:	d196      	bne.n	801de14 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801dee6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801dee8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801deea:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801deec:	2302      	movs	r3, #2
 801deee:	003a      	movs	r2, r7
 801def0:	0029      	movs	r1, r5
 801def2:	0020      	movs	r0, r4
 801def4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801def6:	f000 fb3b 	bl	801e570 <arm_radix4_butterfly_inverse_q31>
 801defa:	46a4      	mov	ip, r4
 801defc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801defe:	2302      	movs	r3, #2
 801df00:	0088      	lsls	r0, r1, #2
 801df02:	4460      	add	r0, ip
 801df04:	003a      	movs	r2, r7
 801df06:	0029      	movs	r1, r5
 801df08:	f000 fb32 	bl	801e570 <arm_radix4_butterfly_inverse_q31>
 801df0c:	46a4      	mov	ip, r4
 801df0e:	0128      	lsls	r0, r5, #4
 801df10:	4460      	add	r0, ip
 801df12:	6833      	ldr	r3, [r6, #0]
 801df14:	005b      	lsls	r3, r3, #1
 801df16:	6033      	str	r3, [r6, #0]
 801df18:	6873      	ldr	r3, [r6, #4]
 801df1a:	005b      	lsls	r3, r3, #1
 801df1c:	6073      	str	r3, [r6, #4]
 801df1e:	68b3      	ldr	r3, [r6, #8]
 801df20:	005b      	lsls	r3, r3, #1
 801df22:	60b3      	str	r3, [r6, #8]
 801df24:	68f3      	ldr	r3, [r6, #12]
 801df26:	005b      	lsls	r3, r3, #1
 801df28:	60f3      	str	r3, [r6, #12]
 801df2a:	3610      	adds	r6, #16
 801df2c:	42b0      	cmp	r0, r6
 801df2e:	d1f0      	bne.n	801df12 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801df30:	b00f      	add	sp, #60	@ 0x3c
 801df32:	bc3c      	pop	{r2, r3, r4, r5}
 801df34:	4690      	mov	r8, r2
 801df36:	4699      	mov	r9, r3
 801df38:	46a2      	mov	sl, r4
 801df3a:	46ab      	mov	fp, r5
 801df3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df3e:	2302      	movs	r3, #2
 801df40:	2100      	movs	r1, #0
 801df42:	0015      	movs	r5, r2
 801df44:	f000 fb14 	bl	801e570 <arm_radix4_butterfly_inverse_q31>
 801df48:	46bc      	mov	ip, r7
 801df4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df4c:	002a      	movs	r2, r5
 801df4e:	0098      	lsls	r0, r3, #2
 801df50:	4460      	add	r0, ip
 801df52:	2302      	movs	r3, #2
 801df54:	2100      	movs	r1, #0
 801df56:	f000 fb0b 	bl	801e570 <arm_radix4_butterfly_inverse_q31>
 801df5a:	e7e9      	b.n	801df30 <arm_cfft_radix4by2_inverse_q31+0x158>

0801df5c <arm_cfft_q31>:
 801df5c:	b570      	push	{r4, r5, r6, lr}
 801df5e:	001e      	movs	r6, r3
 801df60:	2380      	movs	r3, #128	@ 0x80
 801df62:	000d      	movs	r5, r1
 801df64:	0004      	movs	r4, r0
 801df66:	8801      	ldrh	r1, [r0, #0]
 801df68:	005b      	lsls	r3, r3, #1
 801df6a:	2a01      	cmp	r2, #1
 801df6c:	d028      	beq.n	801dfc0 <arm_cfft_q31+0x64>
 801df6e:	4299      	cmp	r1, r3
 801df70:	d020      	beq.n	801dfb4 <arm_cfft_q31+0x58>
 801df72:	d812      	bhi.n	801df9a <arm_cfft_q31+0x3e>
 801df74:	2920      	cmp	r1, #32
 801df76:	d004      	beq.n	801df82 <arm_cfft_q31+0x26>
 801df78:	d949      	bls.n	801e00e <arm_cfft_q31+0xb2>
 801df7a:	2940      	cmp	r1, #64	@ 0x40
 801df7c:	d01a      	beq.n	801dfb4 <arm_cfft_q31+0x58>
 801df7e:	2980      	cmp	r1, #128	@ 0x80
 801df80:	d103      	bne.n	801df8a <arm_cfft_q31+0x2e>
 801df82:	6862      	ldr	r2, [r4, #4]
 801df84:	0028      	movs	r0, r5
 801df86:	f7ff fe65 	bl	801dc54 <arm_cfft_radix4by2_q31>
 801df8a:	2e00      	cmp	r6, #0
 801df8c:	d004      	beq.n	801df98 <arm_cfft_q31+0x3c>
 801df8e:	68a2      	ldr	r2, [r4, #8]
 801df90:	89a1      	ldrh	r1, [r4, #12]
 801df92:	0028      	movs	r0, r5
 801df94:	f7e2 f8b8 	bl	8000108 <arm_bitreversal_32>
 801df98:	bd70      	pop	{r4, r5, r6, pc}
 801df9a:	2380      	movs	r3, #128	@ 0x80
 801df9c:	00db      	lsls	r3, r3, #3
 801df9e:	4299      	cmp	r1, r3
 801dfa0:	d008      	beq.n	801dfb4 <arm_cfft_q31+0x58>
 801dfa2:	d92f      	bls.n	801e004 <arm_cfft_q31+0xa8>
 801dfa4:	2380      	movs	r3, #128	@ 0x80
 801dfa6:	011b      	lsls	r3, r3, #4
 801dfa8:	4299      	cmp	r1, r3
 801dfaa:	d0ea      	beq.n	801df82 <arm_cfft_q31+0x26>
 801dfac:	2380      	movs	r3, #128	@ 0x80
 801dfae:	015b      	lsls	r3, r3, #5
 801dfb0:	4299      	cmp	r1, r3
 801dfb2:	d1ea      	bne.n	801df8a <arm_cfft_q31+0x2e>
 801dfb4:	2301      	movs	r3, #1
 801dfb6:	6862      	ldr	r2, [r4, #4]
 801dfb8:	0028      	movs	r0, r5
 801dfba:	f000 f833 	bl	801e024 <arm_radix4_butterfly_q31>
 801dfbe:	e7e4      	b.n	801df8a <arm_cfft_q31+0x2e>
 801dfc0:	4299      	cmp	r1, r3
 801dfc2:	d019      	beq.n	801dff8 <arm_cfft_q31+0x9c>
 801dfc4:	d80b      	bhi.n	801dfde <arm_cfft_q31+0x82>
 801dfc6:	2920      	cmp	r1, #32
 801dfc8:	d004      	beq.n	801dfd4 <arm_cfft_q31+0x78>
 801dfca:	d928      	bls.n	801e01e <arm_cfft_q31+0xc2>
 801dfcc:	2940      	cmp	r1, #64	@ 0x40
 801dfce:	d013      	beq.n	801dff8 <arm_cfft_q31+0x9c>
 801dfd0:	2980      	cmp	r1, #128	@ 0x80
 801dfd2:	d1da      	bne.n	801df8a <arm_cfft_q31+0x2e>
 801dfd4:	6862      	ldr	r2, [r4, #4]
 801dfd6:	0028      	movs	r0, r5
 801dfd8:	f7ff fefe 	bl	801ddd8 <arm_cfft_radix4by2_inverse_q31>
 801dfdc:	e7d5      	b.n	801df8a <arm_cfft_q31+0x2e>
 801dfde:	2380      	movs	r3, #128	@ 0x80
 801dfe0:	00db      	lsls	r3, r3, #3
 801dfe2:	4299      	cmp	r1, r3
 801dfe4:	d008      	beq.n	801dff8 <arm_cfft_q31+0x9c>
 801dfe6:	d915      	bls.n	801e014 <arm_cfft_q31+0xb8>
 801dfe8:	2380      	movs	r3, #128	@ 0x80
 801dfea:	011b      	lsls	r3, r3, #4
 801dfec:	4299      	cmp	r1, r3
 801dfee:	d0f1      	beq.n	801dfd4 <arm_cfft_q31+0x78>
 801dff0:	2380      	movs	r3, #128	@ 0x80
 801dff2:	015b      	lsls	r3, r3, #5
 801dff4:	4299      	cmp	r1, r3
 801dff6:	d1c8      	bne.n	801df8a <arm_cfft_q31+0x2e>
 801dff8:	2301      	movs	r3, #1
 801dffa:	6862      	ldr	r2, [r4, #4]
 801dffc:	0028      	movs	r0, r5
 801dffe:	f000 fab7 	bl	801e570 <arm_radix4_butterfly_inverse_q31>
 801e002:	e7c2      	b.n	801df8a <arm_cfft_q31+0x2e>
 801e004:	2380      	movs	r3, #128	@ 0x80
 801e006:	009b      	lsls	r3, r3, #2
 801e008:	4299      	cmp	r1, r3
 801e00a:	d0ba      	beq.n	801df82 <arm_cfft_q31+0x26>
 801e00c:	e7bd      	b.n	801df8a <arm_cfft_q31+0x2e>
 801e00e:	2910      	cmp	r1, #16
 801e010:	d1bb      	bne.n	801df8a <arm_cfft_q31+0x2e>
 801e012:	e7cf      	b.n	801dfb4 <arm_cfft_q31+0x58>
 801e014:	2380      	movs	r3, #128	@ 0x80
 801e016:	009b      	lsls	r3, r3, #2
 801e018:	4299      	cmp	r1, r3
 801e01a:	d0db      	beq.n	801dfd4 <arm_cfft_q31+0x78>
 801e01c:	e7b5      	b.n	801df8a <arm_cfft_q31+0x2e>
 801e01e:	2910      	cmp	r1, #16
 801e020:	d1b3      	bne.n	801df8a <arm_cfft_q31+0x2e>
 801e022:	e7e9      	b.n	801dff8 <arm_cfft_q31+0x9c>

0801e024 <arm_radix4_butterfly_q31>:
 801e024:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e026:	464d      	mov	r5, r9
 801e028:	4644      	mov	r4, r8
 801e02a:	465f      	mov	r7, fp
 801e02c:	4656      	mov	r6, sl
 801e02e:	469c      	mov	ip, r3
 801e030:	b4f0      	push	{r4, r5, r6, r7}
 801e032:	b0a7      	sub	sp, #156	@ 0x9c
 801e034:	9114      	str	r1, [sp, #80]	@ 0x50
 801e036:	0889      	lsrs	r1, r1, #2
 801e038:	9310      	str	r3, [sp, #64]	@ 0x40
 801e03a:	00cb      	lsls	r3, r1, #3
 801e03c:	0015      	movs	r5, r2
 801e03e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e040:	18c2      	adds	r2, r0, r3
 801e042:	000c      	movs	r4, r1
 801e044:	469a      	mov	sl, r3
 801e046:	9124      	str	r1, [sp, #144]	@ 0x90
 801e048:	18d1      	adds	r1, r2, r3
 801e04a:	4663      	mov	r3, ip
 801e04c:	468b      	mov	fp, r1
 801e04e:	0119      	lsls	r1, r3, #4
 801e050:	910d      	str	r1, [sp, #52]	@ 0x34
 801e052:	00d9      	lsls	r1, r3, #3
 801e054:	005b      	lsls	r3, r3, #1
 801e056:	4463      	add	r3, ip
 801e058:	910e      	str	r1, [sp, #56]	@ 0x38
 801e05a:	00d9      	lsls	r1, r3, #3
 801e05c:	465b      	mov	r3, fp
 801e05e:	44da      	add	sl, fp
 801e060:	4690      	mov	r8, r2
 801e062:	4683      	mov	fp, r0
 801e064:	4699      	mov	r9, r3
 801e066:	9022      	str	r0, [sp, #136]	@ 0x88
 801e068:	9025      	str	r0, [sp, #148]	@ 0x94
 801e06a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e06c:	9502      	str	r5, [sp, #8]
 801e06e:	9500      	str	r5, [sp, #0]
 801e070:	9501      	str	r5, [sp, #4]
 801e072:	9407      	str	r4, [sp, #28]
 801e074:	465b      	mov	r3, fp
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	4642      	mov	r2, r8
 801e07a:	111c      	asrs	r4, r3, #4
 801e07c:	464b      	mov	r3, r9
 801e07e:	4658      	mov	r0, fp
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	6812      	ldr	r2, [r2, #0]
 801e084:	111b      	asrs	r3, r3, #4
 801e086:	18e7      	adds	r7, r4, r3
 801e088:	1ae3      	subs	r3, r4, r3
 801e08a:	1114      	asrs	r4, r2, #4
 801e08c:	4652      	mov	r2, sl
 801e08e:	6840      	ldr	r0, [r0, #4]
 801e090:	6812      	ldr	r2, [r2, #0]
 801e092:	1105      	asrs	r5, r0, #4
 801e094:	4648      	mov	r0, r9
 801e096:	9303      	str	r3, [sp, #12]
 801e098:	1113      	asrs	r3, r2, #4
 801e09a:	18e2      	adds	r2, r4, r3
 801e09c:	465c      	mov	r4, fp
 801e09e:	6840      	ldr	r0, [r0, #4]
 801e0a0:	1103      	asrs	r3, r0, #4
 801e0a2:	18ee      	adds	r6, r5, r3
 801e0a4:	1ae8      	subs	r0, r5, r3
 801e0a6:	18bb      	adds	r3, r7, r2
 801e0a8:	6023      	str	r3, [r4, #0]
 801e0aa:	4644      	mov	r4, r8
 801e0ac:	6864      	ldr	r4, [r4, #4]
 801e0ae:	9004      	str	r0, [sp, #16]
 801e0b0:	1125      	asrs	r5, r4, #4
 801e0b2:	4654      	mov	r4, sl
 801e0b4:	6864      	ldr	r4, [r4, #4]
 801e0b6:	1123      	asrs	r3, r4, #4
 801e0b8:	465c      	mov	r4, fp
 801e0ba:	18eb      	adds	r3, r5, r3
 801e0bc:	18f1      	adds	r1, r6, r3
 801e0be:	6061      	str	r1, [r4, #4]
 801e0c0:	4655      	mov	r5, sl
 801e0c2:	4644      	mov	r4, r8
 801e0c4:	686d      	ldr	r5, [r5, #4]
 801e0c6:	6864      	ldr	r4, [r4, #4]
 801e0c8:	1129      	asrs	r1, r5, #4
 801e0ca:	1124      	asrs	r4, r4, #4
 801e0cc:	1a64      	subs	r4, r4, r1
 801e0ce:	4641      	mov	r1, r8
 801e0d0:	6809      	ldr	r1, [r1, #0]
 801e0d2:	9405      	str	r4, [sp, #20]
 801e0d4:	1108      	asrs	r0, r1, #4
 801e0d6:	4651      	mov	r1, sl
 801e0d8:	6809      	ldr	r1, [r1, #0]
 801e0da:	1abc      	subs	r4, r7, r2
 801e0dc:	1109      	asrs	r1, r1, #4
 801e0de:	1a41      	subs	r1, r0, r1
 801e0e0:	17e2      	asrs	r2, r4, #31
 801e0e2:	9106      	str	r1, [sp, #24]
 801e0e4:	0011      	movs	r1, r2
 801e0e6:	9a01      	ldr	r2, [sp, #4]
 801e0e8:	9108      	str	r1, [sp, #32]
 801e0ea:	6817      	ldr	r7, [r2, #0]
 801e0ec:	17fd      	asrs	r5, r7, #31
 801e0ee:	0028      	movs	r0, r5
 801e0f0:	1af5      	subs	r5, r6, r3
 801e0f2:	17ee      	asrs	r6, r5, #31
 801e0f4:	960a      	str	r6, [sp, #40]	@ 0x28
 801e0f6:	6856      	ldr	r6, [r2, #4]
 801e0f8:	9009      	str	r0, [sp, #36]	@ 0x24
 801e0fa:	17f3      	asrs	r3, r6, #31
 801e0fc:	003a      	movs	r2, r7
 801e0fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e100:	0003      	movs	r3, r0
 801e102:	0020      	movs	r0, r4
 801e104:	f7e2 fa5c 	bl	80005c0 <__aeabi_lmul>
 801e108:	0032      	movs	r2, r6
 801e10a:	17f3      	asrs	r3, r6, #31
 801e10c:	910c      	str	r1, [sp, #48]	@ 0x30
 801e10e:	0028      	movs	r0, r5
 801e110:	17e9      	asrs	r1, r5, #31
 801e112:	f7e2 fa55 	bl	80005c0 <__aeabi_lmul>
 801e116:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e118:	002a      	movs	r2, r5
 801e11a:	4684      	mov	ip, r0
 801e11c:	4640      	mov	r0, r8
 801e11e:	4461      	add	r1, ip
 801e120:	0049      	lsls	r1, r1, #1
 801e122:	6001      	str	r1, [r0, #0]
 801e124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e126:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e128:	0038      	movs	r0, r7
 801e12a:	f7e2 fa49 	bl	80005c0 <__aeabi_lmul>
 801e12e:	0032      	movs	r2, r6
 801e130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e132:	000d      	movs	r5, r1
 801e134:	0020      	movs	r0, r4
 801e136:	9908      	ldr	r1, [sp, #32]
 801e138:	f7e2 fa42 	bl	80005c0 <__aeabi_lmul>
 801e13c:	4646      	mov	r6, r8
 801e13e:	1a6d      	subs	r5, r5, r1
 801e140:	006d      	lsls	r5, r5, #1
 801e142:	6075      	str	r5, [r6, #4]
 801e144:	9903      	ldr	r1, [sp, #12]
 801e146:	9d05      	ldr	r5, [sp, #20]
 801e148:	000c      	movs	r4, r1
 801e14a:	46ac      	mov	ip, r5
 801e14c:	4464      	add	r4, ip
 801e14e:	17e6      	asrs	r6, r4, #31
 801e150:	0031      	movs	r1, r6
 801e152:	9b00      	ldr	r3, [sp, #0]
 801e154:	9804      	ldr	r0, [sp, #16]
 801e156:	681e      	ldr	r6, [r3, #0]
 801e158:	17f7      	asrs	r7, r6, #31
 801e15a:	9709      	str	r7, [sp, #36]	@ 0x24
 801e15c:	9f06      	ldr	r7, [sp, #24]
 801e15e:	0032      	movs	r2, r6
 801e160:	1bc7      	subs	r7, r0, r7
 801e162:	17fd      	asrs	r5, r7, #31
 801e164:	950a      	str	r5, [sp, #40]	@ 0x28
 801e166:	685d      	ldr	r5, [r3, #4]
 801e168:	17f3      	asrs	r3, r6, #31
 801e16a:	17e8      	asrs	r0, r5, #31
 801e16c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e16e:	0020      	movs	r0, r4
 801e170:	9108      	str	r1, [sp, #32]
 801e172:	f7e2 fa25 	bl	80005c0 <__aeabi_lmul>
 801e176:	002a      	movs	r2, r5
 801e178:	17eb      	asrs	r3, r5, #31
 801e17a:	910c      	str	r1, [sp, #48]	@ 0x30
 801e17c:	0038      	movs	r0, r7
 801e17e:	17f9      	asrs	r1, r7, #31
 801e180:	f7e2 fa1e 	bl	80005c0 <__aeabi_lmul>
 801e184:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e186:	003a      	movs	r2, r7
 801e188:	4684      	mov	ip, r0
 801e18a:	4648      	mov	r0, r9
 801e18c:	4461      	add	r1, ip
 801e18e:	0049      	lsls	r1, r1, #1
 801e190:	6001      	str	r1, [r0, #0]
 801e192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e194:	0030      	movs	r0, r6
 801e196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e198:	f7e2 fa12 	bl	80005c0 <__aeabi_lmul>
 801e19c:	002a      	movs	r2, r5
 801e19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e1a0:	000e      	movs	r6, r1
 801e1a2:	0020      	movs	r0, r4
 801e1a4:	9908      	ldr	r1, [sp, #32]
 801e1a6:	f7e2 fa0b 	bl	80005c0 <__aeabi_lmul>
 801e1aa:	464c      	mov	r4, r9
 801e1ac:	9d05      	ldr	r5, [sp, #20]
 801e1ae:	1a76      	subs	r6, r6, r1
 801e1b0:	9903      	ldr	r1, [sp, #12]
 801e1b2:	0076      	lsls	r6, r6, #1
 801e1b4:	6066      	str	r6, [r4, #4]
 801e1b6:	1b4c      	subs	r4, r1, r5
 801e1b8:	9e06      	ldr	r6, [sp, #24]
 801e1ba:	17e1      	asrs	r1, r4, #31
 801e1bc:	9103      	str	r1, [sp, #12]
 801e1be:	9902      	ldr	r1, [sp, #8]
 801e1c0:	46b4      	mov	ip, r6
 801e1c2:	680f      	ldr	r7, [r1, #0]
 801e1c4:	9804      	ldr	r0, [sp, #16]
 801e1c6:	17fd      	asrs	r5, r7, #31
 801e1c8:	002b      	movs	r3, r5
 801e1ca:	684e      	ldr	r6, [r1, #4]
 801e1cc:	4460      	add	r0, ip
 801e1ce:	0005      	movs	r5, r0
 801e1d0:	17c0      	asrs	r0, r0, #31
 801e1d2:	9005      	str	r0, [sp, #20]
 801e1d4:	17f0      	asrs	r0, r6, #31
 801e1d6:	9006      	str	r0, [sp, #24]
 801e1d8:	003a      	movs	r2, r7
 801e1da:	0020      	movs	r0, r4
 801e1dc:	17e1      	asrs	r1, r4, #31
 801e1de:	9304      	str	r3, [sp, #16]
 801e1e0:	f7e2 f9ee 	bl	80005c0 <__aeabi_lmul>
 801e1e4:	0032      	movs	r2, r6
 801e1e6:	9108      	str	r1, [sp, #32]
 801e1e8:	17f3      	asrs	r3, r6, #31
 801e1ea:	0028      	movs	r0, r5
 801e1ec:	17e9      	asrs	r1, r5, #31
 801e1ee:	f7e2 f9e7 	bl	80005c0 <__aeabi_lmul>
 801e1f2:	9808      	ldr	r0, [sp, #32]
 801e1f4:	002a      	movs	r2, r5
 801e1f6:	4684      	mov	ip, r0
 801e1f8:	4650      	mov	r0, sl
 801e1fa:	4461      	add	r1, ip
 801e1fc:	0049      	lsls	r1, r1, #1
 801e1fe:	6001      	str	r1, [r0, #0]
 801e200:	9b05      	ldr	r3, [sp, #20]
 801e202:	9904      	ldr	r1, [sp, #16]
 801e204:	0038      	movs	r0, r7
 801e206:	f7e2 f9db 	bl	80005c0 <__aeabi_lmul>
 801e20a:	0020      	movs	r0, r4
 801e20c:	2408      	movs	r4, #8
 801e20e:	000d      	movs	r5, r1
 801e210:	0032      	movs	r2, r6
 801e212:	9b06      	ldr	r3, [sp, #24]
 801e214:	9903      	ldr	r1, [sp, #12]
 801e216:	f7e2 f9d3 	bl	80005c0 <__aeabi_lmul>
 801e21a:	46a4      	mov	ip, r4
 801e21c:	4650      	mov	r0, sl
 801e21e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e220:	44e3      	add	fp, ip
 801e222:	44e0      	add	r8, ip
 801e224:	44e1      	add	r9, ip
 801e226:	44e2      	add	sl, ip
 801e228:	46a4      	mov	ip, r4
 801e22a:	1a6d      	subs	r5, r5, r1
 801e22c:	006d      	lsls	r5, r5, #1
 801e22e:	9a01      	ldr	r2, [sp, #4]
 801e230:	6045      	str	r5, [r0, #4]
 801e232:	9807      	ldr	r0, [sp, #28]
 801e234:	4462      	add	r2, ip
 801e236:	3801      	subs	r0, #1
 801e238:	9201      	str	r2, [sp, #4]
 801e23a:	9007      	str	r0, [sp, #28]
 801e23c:	9b00      	ldr	r3, [sp, #0]
 801e23e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e240:	9902      	ldr	r1, [sp, #8]
 801e242:	4694      	mov	ip, r2
 801e244:	4463      	add	r3, ip
 801e246:	9300      	str	r3, [sp, #0]
 801e248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e24a:	469c      	mov	ip, r3
 801e24c:	4461      	add	r1, ip
 801e24e:	9102      	str	r1, [sp, #8]
 801e250:	2800      	cmp	r0, #0
 801e252:	d000      	beq.n	801e256 <arm_radix4_butterfly_q31+0x232>
 801e254:	e70e      	b.n	801e074 <arm_radix4_butterfly_q31+0x50>
 801e256:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e258:	009b      	lsls	r3, r3, #2
 801e25a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e25c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e25e:	9320      	str	r3, [sp, #128]	@ 0x80
 801e260:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e262:	2b04      	cmp	r3, #4
 801e264:	d800      	bhi.n	801e268 <arm_radix4_butterfly_q31+0x244>
 801e266:	e180      	b.n	801e56a <arm_radix4_butterfly_q31+0x546>
 801e268:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e26a:	0893      	lsrs	r3, r2, #2
 801e26c:	1e59      	subs	r1, r3, #1
 801e26e:	9321      	str	r3, [sp, #132]	@ 0x84
 801e270:	00db      	lsls	r3, r3, #3
 801e272:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e274:	00d3      	lsls	r3, r2, #3
 801e276:	9300      	str	r3, [sp, #0]
 801e278:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e27a:	911a      	str	r1, [sp, #104]	@ 0x68
 801e27c:	00da      	lsls	r2, r3, #3
 801e27e:	921e      	str	r2, [sp, #120]	@ 0x78
 801e280:	011a      	lsls	r2, r3, #4
 801e282:	921d      	str	r2, [sp, #116]	@ 0x74
 801e284:	001a      	movs	r2, r3
 801e286:	4694      	mov	ip, r2
 801e288:	005b      	lsls	r3, r3, #1
 801e28a:	4463      	add	r3, ip
 801e28c:	00db      	lsls	r3, r3, #3
 801e28e:	931c      	str	r3, [sp, #112]	@ 0x70
 801e290:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e292:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e296:	9318      	str	r3, [sp, #96]	@ 0x60
 801e298:	9319      	str	r3, [sp, #100]	@ 0x64
 801e29a:	9316      	str	r3, [sp, #88]	@ 0x58
 801e29c:	2300      	movs	r3, #0
 801e29e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e2a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e2a2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e2a4:	681a      	ldr	r2, [r3, #0]
 801e2a6:	685b      	ldr	r3, [r3, #4]
 801e2a8:	9205      	str	r2, [sp, #20]
 801e2aa:	9306      	str	r3, [sp, #24]
 801e2ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e2ae:	468c      	mov	ip, r1
 801e2b0:	681a      	ldr	r2, [r3, #0]
 801e2b2:	685b      	ldr	r3, [r3, #4]
 801e2b4:	9207      	str	r2, [sp, #28]
 801e2b6:	9308      	str	r3, [sp, #32]
 801e2b8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e2ba:	681a      	ldr	r2, [r3, #0]
 801e2bc:	685b      	ldr	r3, [r3, #4]
 801e2be:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2c0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 801e2c4:	0013      	movs	r3, r2
 801e2c6:	4463      	add	r3, ip
 801e2c8:	4698      	mov	r8, r3
 801e2ca:	0013      	movs	r3, r2
 801e2cc:	4442      	add	r2, r8
 801e2ce:	4691      	mov	r9, r2
 801e2d0:	001a      	movs	r2, r3
 801e2d2:	444a      	add	r2, r9
 801e2d4:	4692      	mov	sl, r2
 801e2d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e2d8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e2da:	4293      	cmp	r3, r2
 801e2dc:	d800      	bhi.n	801e2e0 <arm_radix4_butterfly_q31+0x2bc>
 801e2de:	e0dd      	b.n	801e49c <arm_radix4_butterfly_q31+0x478>
 801e2e0:	4694      	mov	ip, r2
 801e2e2:	468b      	mov	fp, r1
 801e2e4:	4644      	mov	r4, r8
 801e2e6:	4655      	mov	r5, sl
 801e2e8:	9b07      	ldr	r3, [sp, #28]
 801e2ea:	17db      	asrs	r3, r3, #31
 801e2ec:	930c      	str	r3, [sp, #48]	@ 0x30
 801e2ee:	9b08      	ldr	r3, [sp, #32]
 801e2f0:	17db      	asrs	r3, r3, #31
 801e2f2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2f4:	9b05      	ldr	r3, [sp, #20]
 801e2f6:	17db      	asrs	r3, r3, #31
 801e2f8:	930e      	str	r3, [sp, #56]	@ 0x38
 801e2fa:	9b06      	ldr	r3, [sp, #24]
 801e2fc:	17db      	asrs	r3, r3, #31
 801e2fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e302:	17db      	asrs	r3, r3, #31
 801e304:	9310      	str	r3, [sp, #64]	@ 0x40
 801e306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e308:	17db      	asrs	r3, r3, #31
 801e30a:	9311      	str	r3, [sp, #68]	@ 0x44
 801e30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e30e:	4463      	add	r3, ip
 801e310:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e312:	465b      	mov	r3, fp
 801e314:	4659      	mov	r1, fp
 801e316:	681a      	ldr	r2, [r3, #0]
 801e318:	464b      	mov	r3, r9
 801e31a:	684f      	ldr	r7, [r1, #4]
 801e31c:	4649      	mov	r1, r9
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	18d6      	adds	r6, r2, r3
 801e322:	1ad3      	subs	r3, r2, r3
 801e324:	9301      	str	r3, [sp, #4]
 801e326:	684b      	ldr	r3, [r1, #4]
 801e328:	18f8      	adds	r0, r7, r3
 801e32a:	1af9      	subs	r1, r7, r3
 801e32c:	6827      	ldr	r7, [r4, #0]
 801e32e:	9102      	str	r1, [sp, #8]
 801e330:	003a      	movs	r2, r7
 801e332:	682f      	ldr	r7, [r5, #0]
 801e334:	46bc      	mov	ip, r7
 801e336:	465f      	mov	r7, fp
 801e338:	4462      	add	r2, ip
 801e33a:	18b3      	adds	r3, r6, r2
 801e33c:	109b      	asrs	r3, r3, #2
 801e33e:	603b      	str	r3, [r7, #0]
 801e340:	6867      	ldr	r7, [r4, #4]
 801e342:	1ab6      	subs	r6, r6, r2
 801e344:	46b8      	mov	r8, r7
 801e346:	686f      	ldr	r7, [r5, #4]
 801e348:	17f2      	asrs	r2, r6, #31
 801e34a:	46bc      	mov	ip, r7
 801e34c:	44e0      	add	r8, ip
 801e34e:	4643      	mov	r3, r8
 801e350:	465f      	mov	r7, fp
 801e352:	18c1      	adds	r1, r0, r3
 801e354:	1089      	asrs	r1, r1, #2
 801e356:	6079      	str	r1, [r7, #4]
 801e358:	9900      	ldr	r1, [sp, #0]
 801e35a:	4690      	mov	r8, r2
 801e35c:	468c      	mov	ip, r1
 801e35e:	6867      	ldr	r7, [r4, #4]
 801e360:	6869      	ldr	r1, [r5, #4]
 801e362:	44e3      	add	fp, ip
 801e364:	1a7f      	subs	r7, r7, r1
 801e366:	9703      	str	r7, [sp, #12]
 801e368:	6829      	ldr	r1, [r5, #0]
 801e36a:	6827      	ldr	r7, [r4, #0]
 801e36c:	1a7f      	subs	r7, r7, r1
 801e36e:	9704      	str	r7, [sp, #16]
 801e370:	1ac7      	subs	r7, r0, r3
 801e372:	17fa      	asrs	r2, r7, #31
 801e374:	4692      	mov	sl, r2
 801e376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e378:	9a07      	ldr	r2, [sp, #28]
 801e37a:	0030      	movs	r0, r6
 801e37c:	4641      	mov	r1, r8
 801e37e:	f7e2 f91f 	bl	80005c0 <__aeabi_lmul>
 801e382:	9a08      	ldr	r2, [sp, #32]
 801e384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e386:	9112      	str	r1, [sp, #72]	@ 0x48
 801e388:	0038      	movs	r0, r7
 801e38a:	4651      	mov	r1, sl
 801e38c:	f7e2 f918 	bl	80005c0 <__aeabi_lmul>
 801e390:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e392:	9a07      	ldr	r2, [sp, #28]
 801e394:	4684      	mov	ip, r0
 801e396:	4461      	add	r1, ip
 801e398:	1049      	asrs	r1, r1, #1
 801e39a:	6021      	str	r1, [r4, #0]
 801e39c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e39e:	0038      	movs	r0, r7
 801e3a0:	4651      	mov	r1, sl
 801e3a2:	f7e2 f90d 	bl	80005c0 <__aeabi_lmul>
 801e3a6:	9a08      	ldr	r2, [sp, #32]
 801e3a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3aa:	000f      	movs	r7, r1
 801e3ac:	0030      	movs	r0, r6
 801e3ae:	4641      	mov	r1, r8
 801e3b0:	f7e2 f906 	bl	80005c0 <__aeabi_lmul>
 801e3b4:	9b00      	ldr	r3, [sp, #0]
 801e3b6:	9a01      	ldr	r2, [sp, #4]
 801e3b8:	469c      	mov	ip, r3
 801e3ba:	9803      	ldr	r0, [sp, #12]
 801e3bc:	1a7f      	subs	r7, r7, r1
 801e3be:	107f      	asrs	r7, r7, #1
 801e3c0:	6067      	str	r7, [r4, #4]
 801e3c2:	0016      	movs	r6, r2
 801e3c4:	4464      	add	r4, ip
 801e3c6:	4684      	mov	ip, r0
 801e3c8:	4466      	add	r6, ip
 801e3ca:	17f2      	asrs	r2, r6, #31
 801e3cc:	4690      	mov	r8, r2
 801e3ce:	9902      	ldr	r1, [sp, #8]
 801e3d0:	9f04      	ldr	r7, [sp, #16]
 801e3d2:	0030      	movs	r0, r6
 801e3d4:	1bcf      	subs	r7, r1, r7
 801e3d6:	17fa      	asrs	r2, r7, #31
 801e3d8:	4692      	mov	sl, r2
 801e3da:	4641      	mov	r1, r8
 801e3dc:	9a05      	ldr	r2, [sp, #20]
 801e3de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3e0:	f7e2 f8ee 	bl	80005c0 <__aeabi_lmul>
 801e3e4:	9a06      	ldr	r2, [sp, #24]
 801e3e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3e8:	9112      	str	r1, [sp, #72]	@ 0x48
 801e3ea:	0038      	movs	r0, r7
 801e3ec:	4651      	mov	r1, sl
 801e3ee:	f7e2 f8e7 	bl	80005c0 <__aeabi_lmul>
 801e3f2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e3f4:	9a05      	ldr	r2, [sp, #20]
 801e3f6:	4684      	mov	ip, r0
 801e3f8:	4648      	mov	r0, r9
 801e3fa:	4461      	add	r1, ip
 801e3fc:	1049      	asrs	r1, r1, #1
 801e3fe:	6001      	str	r1, [r0, #0]
 801e400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e402:	0038      	movs	r0, r7
 801e404:	4651      	mov	r1, sl
 801e406:	f7e2 f8db 	bl	80005c0 <__aeabi_lmul>
 801e40a:	9a06      	ldr	r2, [sp, #24]
 801e40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e40e:	000f      	movs	r7, r1
 801e410:	0030      	movs	r0, r6
 801e412:	4641      	mov	r1, r8
 801e414:	f7e2 f8d4 	bl	80005c0 <__aeabi_lmul>
 801e418:	464e      	mov	r6, r9
 801e41a:	9a00      	ldr	r2, [sp, #0]
 801e41c:	9b01      	ldr	r3, [sp, #4]
 801e41e:	4694      	mov	ip, r2
 801e420:	9803      	ldr	r0, [sp, #12]
 801e422:	1a7f      	subs	r7, r7, r1
 801e424:	107f      	asrs	r7, r7, #1
 801e426:	6077      	str	r7, [r6, #4]
 801e428:	1a1e      	subs	r6, r3, r0
 801e42a:	9b04      	ldr	r3, [sp, #16]
 801e42c:	44e1      	add	r9, ip
 801e42e:	469c      	mov	ip, r3
 801e430:	17f0      	asrs	r0, r6, #31
 801e432:	4680      	mov	r8, r0
 801e434:	9902      	ldr	r1, [sp, #8]
 801e436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e438:	4461      	add	r1, ip
 801e43a:	17cb      	asrs	r3, r1, #31
 801e43c:	000f      	movs	r7, r1
 801e43e:	469a      	mov	sl, r3
 801e440:	0030      	movs	r0, r6
 801e442:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e444:	4641      	mov	r1, r8
 801e446:	f7e2 f8bb 	bl	80005c0 <__aeabi_lmul>
 801e44a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e44c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e44e:	9101      	str	r1, [sp, #4]
 801e450:	0038      	movs	r0, r7
 801e452:	4651      	mov	r1, sl
 801e454:	f7e2 f8b4 	bl	80005c0 <__aeabi_lmul>
 801e458:	9801      	ldr	r0, [sp, #4]
 801e45a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e45c:	4684      	mov	ip, r0
 801e45e:	4461      	add	r1, ip
 801e460:	1049      	asrs	r1, r1, #1
 801e462:	6029      	str	r1, [r5, #0]
 801e464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e466:	0038      	movs	r0, r7
 801e468:	4651      	mov	r1, sl
 801e46a:	f7e2 f8a9 	bl	80005c0 <__aeabi_lmul>
 801e46e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e470:	000f      	movs	r7, r1
 801e472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e474:	0030      	movs	r0, r6
 801e476:	4641      	mov	r1, r8
 801e478:	f7e2 f8a2 	bl	80005c0 <__aeabi_lmul>
 801e47c:	1a7f      	subs	r7, r7, r1
 801e47e:	107f      	asrs	r7, r7, #1
 801e480:	606f      	str	r7, [r5, #4]
 801e482:	9a00      	ldr	r2, [sp, #0]
 801e484:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e486:	4694      	mov	ip, r2
 801e488:	4465      	add	r5, ip
 801e48a:	468c      	mov	ip, r1
 801e48c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e48e:	0013      	movs	r3, r2
 801e490:	4462      	add	r2, ip
 801e492:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e494:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e496:	429a      	cmp	r2, r3
 801e498:	d900      	bls.n	801e49c <arm_radix4_butterfly_q31+0x478>
 801e49a:	e73a      	b.n	801e312 <arm_radix4_butterfly_q31+0x2ee>
 801e49c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e49e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e4a0:	468c      	mov	ip, r1
 801e4a2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e4a4:	4462      	add	r2, ip
 801e4a6:	468c      	mov	ip, r1
 801e4a8:	9216      	str	r2, [sp, #88]	@ 0x58
 801e4aa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e4ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e4ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e4b0:	4462      	add	r2, ip
 801e4b2:	468c      	mov	ip, r1
 801e4b4:	9219      	str	r2, [sp, #100]	@ 0x64
 801e4b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e4b8:	3301      	adds	r3, #1
 801e4ba:	4462      	add	r2, ip
 801e4bc:	9218      	str	r2, [sp, #96]	@ 0x60
 801e4be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e4c0:	9315      	str	r3, [sp, #84]	@ 0x54
 801e4c2:	3208      	adds	r2, #8
 801e4c4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e4c6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e4c8:	4293      	cmp	r3, r2
 801e4ca:	d800      	bhi.n	801e4ce <arm_radix4_butterfly_q31+0x4aa>
 801e4cc:	e6e8      	b.n	801e2a0 <arm_radix4_butterfly_q31+0x27c>
 801e4ce:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e4d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e4d2:	009b      	lsls	r3, r3, #2
 801e4d4:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e4d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e4d8:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e4da:	089b      	lsrs	r3, r3, #2
 801e4dc:	9320      	str	r3, [sp, #128]	@ 0x80
 801e4de:	2b04      	cmp	r3, #4
 801e4e0:	d900      	bls.n	801e4e4 <arm_radix4_butterfly_q31+0x4c0>
 801e4e2:	e6c1      	b.n	801e268 <arm_radix4_butterfly_q31+0x244>
 801e4e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e4e6:	469a      	mov	sl, r3
 801e4e8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e4ea:	691c      	ldr	r4, [r3, #16]
 801e4ec:	685a      	ldr	r2, [r3, #4]
 801e4ee:	46a1      	mov	r9, r4
 801e4f0:	4690      	mov	r8, r2
 801e4f2:	6819      	ldr	r1, [r3, #0]
 801e4f4:	689a      	ldr	r2, [r3, #8]
 801e4f6:	699f      	ldr	r7, [r3, #24]
 801e4f8:	188d      	adds	r5, r1, r2
 801e4fa:	444d      	add	r5, r9
 801e4fc:	19ed      	adds	r5, r5, r7
 801e4fe:	69de      	ldr	r6, [r3, #28]
 801e500:	601d      	str	r5, [r3, #0]
 801e502:	4645      	mov	r5, r8
 801e504:	46b4      	mov	ip, r6
 801e506:	68d8      	ldr	r0, [r3, #12]
 801e508:	695c      	ldr	r4, [r3, #20]
 801e50a:	182d      	adds	r5, r5, r0
 801e50c:	192d      	adds	r5, r5, r4
 801e50e:	4465      	add	r5, ip
 801e510:	605d      	str	r5, [r3, #4]
 801e512:	1a8d      	subs	r5, r1, r2
 801e514:	444d      	add	r5, r9
 801e516:	1bed      	subs	r5, r5, r7
 801e518:	609d      	str	r5, [r3, #8]
 801e51a:	4645      	mov	r5, r8
 801e51c:	1a2d      	subs	r5, r5, r0
 801e51e:	192d      	adds	r5, r5, r4
 801e520:	1bad      	subs	r5, r5, r6
 801e522:	464e      	mov	r6, r9
 801e524:	60dd      	str	r5, [r3, #12]
 801e526:	180d      	adds	r5, r1, r0
 801e528:	1bad      	subs	r5, r5, r6
 801e52a:	4666      	mov	r6, ip
 801e52c:	1bad      	subs	r5, r5, r6
 801e52e:	611d      	str	r5, [r3, #16]
 801e530:	4645      	mov	r5, r8
 801e532:	1aad      	subs	r5, r5, r2
 801e534:	4442      	add	r2, r8
 801e536:	1b12      	subs	r2, r2, r4
 801e538:	1bd2      	subs	r2, r2, r7
 801e53a:	1a08      	subs	r0, r1, r0
 801e53c:	61da      	str	r2, [r3, #28]
 801e53e:	4649      	mov	r1, r9
 801e540:	2201      	movs	r2, #1
 801e542:	1a41      	subs	r1, r0, r1
 801e544:	4252      	negs	r2, r2
 801e546:	4461      	add	r1, ip
 801e548:	4694      	mov	ip, r2
 801e54a:	44e2      	add	sl, ip
 801e54c:	4652      	mov	r2, sl
 801e54e:	1b2d      	subs	r5, r5, r4
 801e550:	19ed      	adds	r5, r5, r7
 801e552:	615d      	str	r5, [r3, #20]
 801e554:	6199      	str	r1, [r3, #24]
 801e556:	3320      	adds	r3, #32
 801e558:	2a00      	cmp	r2, #0
 801e55a:	d1c6      	bne.n	801e4ea <arm_radix4_butterfly_q31+0x4c6>
 801e55c:	b027      	add	sp, #156	@ 0x9c
 801e55e:	bc3c      	pop	{r2, r3, r4, r5}
 801e560:	4690      	mov	r8, r2
 801e562:	4699      	mov	r9, r3
 801e564:	46a2      	mov	sl, r4
 801e566:	46ab      	mov	fp, r5
 801e568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e56a:	469a      	mov	sl, r3
 801e56c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e56e:	e7bc      	b.n	801e4ea <arm_radix4_butterfly_q31+0x4c6>

0801e570 <arm_radix4_butterfly_inverse_q31>:
 801e570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e572:	464d      	mov	r5, r9
 801e574:	4644      	mov	r4, r8
 801e576:	465f      	mov	r7, fp
 801e578:	4656      	mov	r6, sl
 801e57a:	b4f0      	push	{r4, r5, r6, r7}
 801e57c:	b0a7      	sub	sp, #156	@ 0x9c
 801e57e:	469c      	mov	ip, r3
 801e580:	9114      	str	r1, [sp, #80]	@ 0x50
 801e582:	0889      	lsrs	r1, r1, #2
 801e584:	9310      	str	r3, [sp, #64]	@ 0x40
 801e586:	00cb      	lsls	r3, r1, #3
 801e588:	0015      	movs	r5, r2
 801e58a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e58c:	18c2      	adds	r2, r0, r3
 801e58e:	000c      	movs	r4, r1
 801e590:	9124      	str	r1, [sp, #144]	@ 0x90
 801e592:	18d1      	adds	r1, r2, r3
 801e594:	468b      	mov	fp, r1
 801e596:	469a      	mov	sl, r3
 801e598:	4663      	mov	r3, ip
 801e59a:	44da      	add	sl, fp
 801e59c:	46d0      	mov	r8, sl
 801e59e:	4681      	mov	r9, r0
 801e5a0:	4692      	mov	sl, r2
 801e5a2:	0119      	lsls	r1, r3, #4
 801e5a4:	910d      	str	r1, [sp, #52]	@ 0x34
 801e5a6:	00d9      	lsls	r1, r3, #3
 801e5a8:	005b      	lsls	r3, r3, #1
 801e5aa:	4463      	add	r3, ip
 801e5ac:	910e      	str	r1, [sp, #56]	@ 0x38
 801e5ae:	00d9      	lsls	r1, r3, #3
 801e5b0:	9022      	str	r0, [sp, #136]	@ 0x88
 801e5b2:	9025      	str	r0, [sp, #148]	@ 0x94
 801e5b4:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e5b6:	9502      	str	r5, [sp, #8]
 801e5b8:	9500      	str	r5, [sp, #0]
 801e5ba:	9501      	str	r5, [sp, #4]
 801e5bc:	9409      	str	r4, [sp, #36]	@ 0x24
 801e5be:	464b      	mov	r3, r9
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	4652      	mov	r2, sl
 801e5c4:	111c      	asrs	r4, r3, #4
 801e5c6:	465b      	mov	r3, fp
 801e5c8:	4648      	mov	r0, r9
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	6812      	ldr	r2, [r2, #0]
 801e5ce:	6840      	ldr	r0, [r0, #4]
 801e5d0:	111b      	asrs	r3, r3, #4
 801e5d2:	18e7      	adds	r7, r4, r3
 801e5d4:	1ae3      	subs	r3, r4, r3
 801e5d6:	1114      	asrs	r4, r2, #4
 801e5d8:	4642      	mov	r2, r8
 801e5da:	1105      	asrs	r5, r0, #4
 801e5dc:	4658      	mov	r0, fp
 801e5de:	6812      	ldr	r2, [r2, #0]
 801e5e0:	6840      	ldr	r0, [r0, #4]
 801e5e2:	9303      	str	r3, [sp, #12]
 801e5e4:	1113      	asrs	r3, r2, #4
 801e5e6:	18e2      	adds	r2, r4, r3
 801e5e8:	1103      	asrs	r3, r0, #4
 801e5ea:	18ee      	adds	r6, r5, r3
 801e5ec:	1ae8      	subs	r0, r5, r3
 801e5ee:	464d      	mov	r5, r9
 801e5f0:	18bb      	adds	r3, r7, r2
 801e5f2:	602b      	str	r3, [r5, #0]
 801e5f4:	4641      	mov	r1, r8
 801e5f6:	4655      	mov	r5, sl
 801e5f8:	6849      	ldr	r1, [r1, #4]
 801e5fa:	686d      	ldr	r5, [r5, #4]
 801e5fc:	110b      	asrs	r3, r1, #4
 801e5fe:	112d      	asrs	r5, r5, #4
 801e600:	18eb      	adds	r3, r5, r3
 801e602:	464d      	mov	r5, r9
 801e604:	18f1      	adds	r1, r6, r3
 801e606:	6069      	str	r1, [r5, #4]
 801e608:	4655      	mov	r5, sl
 801e60a:	686d      	ldr	r5, [r5, #4]
 801e60c:	9004      	str	r0, [sp, #16]
 801e60e:	112c      	asrs	r4, r5, #4
 801e610:	4645      	mov	r5, r8
 801e612:	686d      	ldr	r5, [r5, #4]
 801e614:	1129      	asrs	r1, r5, #4
 801e616:	1a65      	subs	r5, r4, r1
 801e618:	4651      	mov	r1, sl
 801e61a:	6809      	ldr	r1, [r1, #0]
 801e61c:	1abc      	subs	r4, r7, r2
 801e61e:	1108      	asrs	r0, r1, #4
 801e620:	4641      	mov	r1, r8
 801e622:	17e2      	asrs	r2, r4, #31
 801e624:	6809      	ldr	r1, [r1, #0]
 801e626:	9207      	str	r2, [sp, #28]
 801e628:	9a01      	ldr	r2, [sp, #4]
 801e62a:	1109      	asrs	r1, r1, #4
 801e62c:	6817      	ldr	r7, [r2, #0]
 801e62e:	1a41      	subs	r1, r0, r1
 801e630:	9106      	str	r1, [sp, #24]
 801e632:	0039      	movs	r1, r7
 801e634:	17ff      	asrs	r7, r7, #31
 801e636:	0038      	movs	r0, r7
 801e638:	9505      	str	r5, [sp, #20]
 801e63a:	1af5      	subs	r5, r6, r3
 801e63c:	17ef      	asrs	r7, r5, #31
 801e63e:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e640:	6857      	ldr	r7, [r2, #4]
 801e642:	0003      	movs	r3, r0
 801e644:	17fe      	asrs	r6, r7, #31
 801e646:	000a      	movs	r2, r1
 801e648:	9108      	str	r1, [sp, #32]
 801e64a:	900a      	str	r0, [sp, #40]	@ 0x28
 801e64c:	17e1      	asrs	r1, r4, #31
 801e64e:	0020      	movs	r0, r4
 801e650:	960c      	str	r6, [sp, #48]	@ 0x30
 801e652:	f7e1 ffb5 	bl	80005c0 <__aeabi_lmul>
 801e656:	003a      	movs	r2, r7
 801e658:	17fb      	asrs	r3, r7, #31
 801e65a:	000e      	movs	r6, r1
 801e65c:	0028      	movs	r0, r5
 801e65e:	17e9      	asrs	r1, r5, #31
 801e660:	f7e1 ffae 	bl	80005c0 <__aeabi_lmul>
 801e664:	4653      	mov	r3, sl
 801e666:	1a76      	subs	r6, r6, r1
 801e668:	0076      	lsls	r6, r6, #1
 801e66a:	601e      	str	r6, [r3, #0]
 801e66c:	002a      	movs	r2, r5
 801e66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e670:	9808      	ldr	r0, [sp, #32]
 801e672:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e674:	f7e1 ffa4 	bl	80005c0 <__aeabi_lmul>
 801e678:	003a      	movs	r2, r7
 801e67a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e67c:	000d      	movs	r5, r1
 801e67e:	0020      	movs	r0, r4
 801e680:	9907      	ldr	r1, [sp, #28]
 801e682:	f7e1 ff9d 	bl	80005c0 <__aeabi_lmul>
 801e686:	4657      	mov	r7, sl
 801e688:	186d      	adds	r5, r5, r1
 801e68a:	006d      	lsls	r5, r5, #1
 801e68c:	607d      	str	r5, [r7, #4]
 801e68e:	9b03      	ldr	r3, [sp, #12]
 801e690:	9e06      	ldr	r6, [sp, #24]
 801e692:	9d05      	ldr	r5, [sp, #20]
 801e694:	46b4      	mov	ip, r6
 801e696:	1b5d      	subs	r5, r3, r5
 801e698:	9b00      	ldr	r3, [sp, #0]
 801e69a:	17ef      	asrs	r7, r5, #31
 801e69c:	0039      	movs	r1, r7
 801e69e:	681f      	ldr	r7, [r3, #0]
 801e6a0:	17fc      	asrs	r4, r7, #31
 801e6a2:	0020      	movs	r0, r4
 801e6a4:	9c04      	ldr	r4, [sp, #16]
 801e6a6:	4464      	add	r4, ip
 801e6a8:	17e6      	asrs	r6, r4, #31
 801e6aa:	9407      	str	r4, [sp, #28]
 801e6ac:	9608      	str	r6, [sp, #32]
 801e6ae:	685e      	ldr	r6, [r3, #4]
 801e6b0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e6b2:	17f2      	asrs	r2, r6, #31
 801e6b4:	0003      	movs	r3, r0
 801e6b6:	920c      	str	r2, [sp, #48]	@ 0x30
 801e6b8:	0028      	movs	r0, r5
 801e6ba:	003a      	movs	r2, r7
 801e6bc:	910a      	str	r1, [sp, #40]	@ 0x28
 801e6be:	f7e1 ff7f 	bl	80005c0 <__aeabi_lmul>
 801e6c2:	0032      	movs	r2, r6
 801e6c4:	17f3      	asrs	r3, r6, #31
 801e6c6:	9807      	ldr	r0, [sp, #28]
 801e6c8:	000c      	movs	r4, r1
 801e6ca:	9908      	ldr	r1, [sp, #32]
 801e6cc:	f7e1 ff78 	bl	80005c0 <__aeabi_lmul>
 801e6d0:	4658      	mov	r0, fp
 801e6d2:	1a64      	subs	r4, r4, r1
 801e6d4:	0064      	lsls	r4, r4, #1
 801e6d6:	9a07      	ldr	r2, [sp, #28]
 801e6d8:	6004      	str	r4, [r0, #0]
 801e6da:	9b08      	ldr	r3, [sp, #32]
 801e6dc:	0038      	movs	r0, r7
 801e6de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e6e0:	f7e1 ff6e 	bl	80005c0 <__aeabi_lmul>
 801e6e4:	0032      	movs	r2, r6
 801e6e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e6e8:	000c      	movs	r4, r1
 801e6ea:	0028      	movs	r0, r5
 801e6ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e6ee:	f7e1 ff67 	bl	80005c0 <__aeabi_lmul>
 801e6f2:	9d05      	ldr	r5, [sp, #20]
 801e6f4:	465f      	mov	r7, fp
 801e6f6:	46ac      	mov	ip, r5
 801e6f8:	1864      	adds	r4, r4, r1
 801e6fa:	9903      	ldr	r1, [sp, #12]
 801e6fc:	0064      	lsls	r4, r4, #1
 801e6fe:	4461      	add	r1, ip
 801e700:	607c      	str	r4, [r7, #4]
 801e702:	000c      	movs	r4, r1
 801e704:	17c9      	asrs	r1, r1, #31
 801e706:	9105      	str	r1, [sp, #20]
 801e708:	9902      	ldr	r1, [sp, #8]
 801e70a:	9804      	ldr	r0, [sp, #16]
 801e70c:	680d      	ldr	r5, [r1, #0]
 801e70e:	9e06      	ldr	r6, [sp, #24]
 801e710:	002b      	movs	r3, r5
 801e712:	17ed      	asrs	r5, r5, #31
 801e714:	684f      	ldr	r7, [r1, #4]
 801e716:	9503      	str	r5, [sp, #12]
 801e718:	1b85      	subs	r5, r0, r6
 801e71a:	17e8      	asrs	r0, r5, #31
 801e71c:	001a      	movs	r2, r3
 801e71e:	9006      	str	r0, [sp, #24]
 801e720:	17fe      	asrs	r6, r7, #31
 801e722:	9304      	str	r3, [sp, #16]
 801e724:	0020      	movs	r0, r4
 801e726:	9b03      	ldr	r3, [sp, #12]
 801e728:	17e1      	asrs	r1, r4, #31
 801e72a:	9607      	str	r6, [sp, #28]
 801e72c:	f7e1 ff48 	bl	80005c0 <__aeabi_lmul>
 801e730:	003a      	movs	r2, r7
 801e732:	000e      	movs	r6, r1
 801e734:	17fb      	asrs	r3, r7, #31
 801e736:	0028      	movs	r0, r5
 801e738:	17e9      	asrs	r1, r5, #31
 801e73a:	f7e1 ff41 	bl	80005c0 <__aeabi_lmul>
 801e73e:	4640      	mov	r0, r8
 801e740:	1a76      	subs	r6, r6, r1
 801e742:	0076      	lsls	r6, r6, #1
 801e744:	002a      	movs	r2, r5
 801e746:	9b06      	ldr	r3, [sp, #24]
 801e748:	6006      	str	r6, [r0, #0]
 801e74a:	9903      	ldr	r1, [sp, #12]
 801e74c:	9804      	ldr	r0, [sp, #16]
 801e74e:	f7e1 ff37 	bl	80005c0 <__aeabi_lmul>
 801e752:	0020      	movs	r0, r4
 801e754:	2408      	movs	r4, #8
 801e756:	9b07      	ldr	r3, [sp, #28]
 801e758:	000d      	movs	r5, r1
 801e75a:	003a      	movs	r2, r7
 801e75c:	9905      	ldr	r1, [sp, #20]
 801e75e:	f7e1 ff2f 	bl	80005c0 <__aeabi_lmul>
 801e762:	4640      	mov	r0, r8
 801e764:	46a4      	mov	ip, r4
 801e766:	186d      	adds	r5, r5, r1
 801e768:	006d      	lsls	r5, r5, #1
 801e76a:	6045      	str	r5, [r0, #4]
 801e76c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e76e:	44e1      	add	r9, ip
 801e770:	3801      	subs	r0, #1
 801e772:	9009      	str	r0, [sp, #36]	@ 0x24
 801e774:	9a01      	ldr	r2, [sp, #4]
 801e776:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e778:	44e2      	add	sl, ip
 801e77a:	44e3      	add	fp, ip
 801e77c:	44e0      	add	r8, ip
 801e77e:	46a4      	mov	ip, r4
 801e780:	4462      	add	r2, ip
 801e782:	9201      	str	r2, [sp, #4]
 801e784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e786:	9b00      	ldr	r3, [sp, #0]
 801e788:	4694      	mov	ip, r2
 801e78a:	4463      	add	r3, ip
 801e78c:	9300      	str	r3, [sp, #0]
 801e78e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e790:	9902      	ldr	r1, [sp, #8]
 801e792:	469c      	mov	ip, r3
 801e794:	4461      	add	r1, ip
 801e796:	9102      	str	r1, [sp, #8]
 801e798:	2800      	cmp	r0, #0
 801e79a:	d000      	beq.n	801e79e <arm_radix4_butterfly_inverse_q31+0x22e>
 801e79c:	e70f      	b.n	801e5be <arm_radix4_butterfly_inverse_q31+0x4e>
 801e79e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e7a0:	009b      	lsls	r3, r3, #2
 801e7a2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e7a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e7a6:	9320      	str	r3, [sp, #128]	@ 0x80
 801e7a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e7aa:	2b04      	cmp	r3, #4
 801e7ac:	d800      	bhi.n	801e7b0 <arm_radix4_butterfly_inverse_q31+0x240>
 801e7ae:	e17c      	b.n	801eaaa <arm_radix4_butterfly_inverse_q31+0x53a>
 801e7b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e7b2:	0893      	lsrs	r3, r2, #2
 801e7b4:	1e59      	subs	r1, r3, #1
 801e7b6:	9321      	str	r3, [sp, #132]	@ 0x84
 801e7b8:	00db      	lsls	r3, r3, #3
 801e7ba:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e7bc:	00d3      	lsls	r3, r2, #3
 801e7be:	9300      	str	r3, [sp, #0]
 801e7c0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e7c2:	911a      	str	r1, [sp, #104]	@ 0x68
 801e7c4:	00da      	lsls	r2, r3, #3
 801e7c6:	921e      	str	r2, [sp, #120]	@ 0x78
 801e7c8:	011a      	lsls	r2, r3, #4
 801e7ca:	921d      	str	r2, [sp, #116]	@ 0x74
 801e7cc:	001a      	movs	r2, r3
 801e7ce:	4694      	mov	ip, r2
 801e7d0:	005b      	lsls	r3, r3, #1
 801e7d2:	4463      	add	r3, ip
 801e7d4:	00db      	lsls	r3, r3, #3
 801e7d6:	931c      	str	r3, [sp, #112]	@ 0x70
 801e7d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e7da:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e7dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e7de:	9318      	str	r3, [sp, #96]	@ 0x60
 801e7e0:	9319      	str	r3, [sp, #100]	@ 0x64
 801e7e2:	9316      	str	r3, [sp, #88]	@ 0x58
 801e7e4:	2300      	movs	r3, #0
 801e7e6:	9315      	str	r3, [sp, #84]	@ 0x54
 801e7e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e7ea:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e7ec:	681a      	ldr	r2, [r3, #0]
 801e7ee:	685b      	ldr	r3, [r3, #4]
 801e7f0:	9205      	str	r2, [sp, #20]
 801e7f2:	9306      	str	r3, [sp, #24]
 801e7f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e7f6:	468c      	mov	ip, r1
 801e7f8:	681a      	ldr	r2, [r3, #0]
 801e7fa:	685b      	ldr	r3, [r3, #4]
 801e7fc:	9207      	str	r2, [sp, #28]
 801e7fe:	9308      	str	r3, [sp, #32]
 801e800:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e802:	681a      	ldr	r2, [r3, #0]
 801e804:	685b      	ldr	r3, [r3, #4]
 801e806:	9209      	str	r2, [sp, #36]	@ 0x24
 801e808:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e80a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e80c:	0013      	movs	r3, r2
 801e80e:	4463      	add	r3, ip
 801e810:	4698      	mov	r8, r3
 801e812:	0013      	movs	r3, r2
 801e814:	4442      	add	r2, r8
 801e816:	4691      	mov	r9, r2
 801e818:	001a      	movs	r2, r3
 801e81a:	444a      	add	r2, r9
 801e81c:	4692      	mov	sl, r2
 801e81e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e820:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e822:	4293      	cmp	r3, r2
 801e824:	d800      	bhi.n	801e828 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e826:	e0d9      	b.n	801e9dc <arm_radix4_butterfly_inverse_q31+0x46c>
 801e828:	4694      	mov	ip, r2
 801e82a:	4644      	mov	r4, r8
 801e82c:	4655      	mov	r5, sl
 801e82e:	4688      	mov	r8, r1
 801e830:	9b07      	ldr	r3, [sp, #28]
 801e832:	17db      	asrs	r3, r3, #31
 801e834:	930c      	str	r3, [sp, #48]	@ 0x30
 801e836:	9b08      	ldr	r3, [sp, #32]
 801e838:	17db      	asrs	r3, r3, #31
 801e83a:	930d      	str	r3, [sp, #52]	@ 0x34
 801e83c:	9b05      	ldr	r3, [sp, #20]
 801e83e:	17db      	asrs	r3, r3, #31
 801e840:	930e      	str	r3, [sp, #56]	@ 0x38
 801e842:	9b06      	ldr	r3, [sp, #24]
 801e844:	17db      	asrs	r3, r3, #31
 801e846:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e84a:	17db      	asrs	r3, r3, #31
 801e84c:	9310      	str	r3, [sp, #64]	@ 0x40
 801e84e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e850:	17db      	asrs	r3, r3, #31
 801e852:	9311      	str	r3, [sp, #68]	@ 0x44
 801e854:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e856:	4463      	add	r3, ip
 801e858:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e85a:	4643      	mov	r3, r8
 801e85c:	4641      	mov	r1, r8
 801e85e:	681a      	ldr	r2, [r3, #0]
 801e860:	464b      	mov	r3, r9
 801e862:	684f      	ldr	r7, [r1, #4]
 801e864:	4649      	mov	r1, r9
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	18d6      	adds	r6, r2, r3
 801e86a:	1ad3      	subs	r3, r2, r3
 801e86c:	9301      	str	r3, [sp, #4]
 801e86e:	684b      	ldr	r3, [r1, #4]
 801e870:	1af9      	subs	r1, r7, r3
 801e872:	9102      	str	r1, [sp, #8]
 801e874:	6829      	ldr	r1, [r5, #0]
 801e876:	18f8      	adds	r0, r7, r3
 801e878:	468c      	mov	ip, r1
 801e87a:	6827      	ldr	r7, [r4, #0]
 801e87c:	4467      	add	r7, ip
 801e87e:	003a      	movs	r2, r7
 801e880:	19f3      	adds	r3, r6, r7
 801e882:	4647      	mov	r7, r8
 801e884:	109b      	asrs	r3, r3, #2
 801e886:	603b      	str	r3, [r7, #0]
 801e888:	6869      	ldr	r1, [r5, #4]
 801e88a:	6867      	ldr	r7, [r4, #4]
 801e88c:	468c      	mov	ip, r1
 801e88e:	4467      	add	r7, ip
 801e890:	003b      	movs	r3, r7
 801e892:	19c1      	adds	r1, r0, r7
 801e894:	4647      	mov	r7, r8
 801e896:	1ab6      	subs	r6, r6, r2
 801e898:	1089      	asrs	r1, r1, #2
 801e89a:	6079      	str	r1, [r7, #4]
 801e89c:	17f2      	asrs	r2, r6, #31
 801e89e:	9900      	ldr	r1, [sp, #0]
 801e8a0:	4692      	mov	sl, r2
 801e8a2:	468c      	mov	ip, r1
 801e8a4:	6867      	ldr	r7, [r4, #4]
 801e8a6:	6869      	ldr	r1, [r5, #4]
 801e8a8:	44e0      	add	r8, ip
 801e8aa:	1a7f      	subs	r7, r7, r1
 801e8ac:	9703      	str	r7, [sp, #12]
 801e8ae:	6821      	ldr	r1, [r4, #0]
 801e8b0:	682f      	ldr	r7, [r5, #0]
 801e8b2:	1bc9      	subs	r1, r1, r7
 801e8b4:	1ac7      	subs	r7, r0, r3
 801e8b6:	17fa      	asrs	r2, r7, #31
 801e8b8:	4693      	mov	fp, r2
 801e8ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e8bc:	9a07      	ldr	r2, [sp, #28]
 801e8be:	9104      	str	r1, [sp, #16]
 801e8c0:	0030      	movs	r0, r6
 801e8c2:	4651      	mov	r1, sl
 801e8c4:	f7e1 fe7c 	bl	80005c0 <__aeabi_lmul>
 801e8c8:	9a08      	ldr	r2, [sp, #32]
 801e8ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e8cc:	9112      	str	r1, [sp, #72]	@ 0x48
 801e8ce:	0038      	movs	r0, r7
 801e8d0:	4659      	mov	r1, fp
 801e8d2:	f7e1 fe75 	bl	80005c0 <__aeabi_lmul>
 801e8d6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e8d8:	9a07      	ldr	r2, [sp, #28]
 801e8da:	1a41      	subs	r1, r0, r1
 801e8dc:	1049      	asrs	r1, r1, #1
 801e8de:	6021      	str	r1, [r4, #0]
 801e8e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e8e2:	0038      	movs	r0, r7
 801e8e4:	4659      	mov	r1, fp
 801e8e6:	f7e1 fe6b 	bl	80005c0 <__aeabi_lmul>
 801e8ea:	9a08      	ldr	r2, [sp, #32]
 801e8ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e8ee:	000f      	movs	r7, r1
 801e8f0:	0030      	movs	r0, r6
 801e8f2:	4651      	mov	r1, sl
 801e8f4:	f7e1 fe64 	bl	80005c0 <__aeabi_lmul>
 801e8f8:	9b00      	ldr	r3, [sp, #0]
 801e8fa:	187f      	adds	r7, r7, r1
 801e8fc:	469c      	mov	ip, r3
 801e8fe:	107f      	asrs	r7, r7, #1
 801e900:	6067      	str	r7, [r4, #4]
 801e902:	9a01      	ldr	r2, [sp, #4]
 801e904:	9f03      	ldr	r7, [sp, #12]
 801e906:	9802      	ldr	r0, [sp, #8]
 801e908:	1bd7      	subs	r7, r2, r7
 801e90a:	17fe      	asrs	r6, r7, #31
 801e90c:	0031      	movs	r1, r6
 801e90e:	9e04      	ldr	r6, [sp, #16]
 801e910:	4682      	mov	sl, r0
 801e912:	4464      	add	r4, ip
 801e914:	46b4      	mov	ip, r6
 801e916:	44e2      	add	sl, ip
 801e918:	4652      	mov	r2, sl
 801e91a:	17d2      	asrs	r2, r2, #31
 801e91c:	4693      	mov	fp, r2
 801e91e:	0038      	movs	r0, r7
 801e920:	9a05      	ldr	r2, [sp, #20]
 801e922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e924:	9112      	str	r1, [sp, #72]	@ 0x48
 801e926:	f7e1 fe4b 	bl	80005c0 <__aeabi_lmul>
 801e92a:	9a06      	ldr	r2, [sp, #24]
 801e92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e92e:	000e      	movs	r6, r1
 801e930:	4650      	mov	r0, sl
 801e932:	4659      	mov	r1, fp
 801e934:	f7e1 fe44 	bl	80005c0 <__aeabi_lmul>
 801e938:	4648      	mov	r0, r9
 801e93a:	1a76      	subs	r6, r6, r1
 801e93c:	1076      	asrs	r6, r6, #1
 801e93e:	6006      	str	r6, [r0, #0]
 801e940:	9a05      	ldr	r2, [sp, #20]
 801e942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e944:	4650      	mov	r0, sl
 801e946:	4659      	mov	r1, fp
 801e948:	f7e1 fe3a 	bl	80005c0 <__aeabi_lmul>
 801e94c:	9a06      	ldr	r2, [sp, #24]
 801e94e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e950:	000e      	movs	r6, r1
 801e952:	0038      	movs	r0, r7
 801e954:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e956:	f7e1 fe33 	bl	80005c0 <__aeabi_lmul>
 801e95a:	9a00      	ldr	r2, [sp, #0]
 801e95c:	9f03      	ldr	r7, [sp, #12]
 801e95e:	4694      	mov	ip, r2
 801e960:	1876      	adds	r6, r6, r1
 801e962:	4649      	mov	r1, r9
 801e964:	44e1      	add	r9, ip
 801e966:	46bc      	mov	ip, r7
 801e968:	9b01      	ldr	r3, [sp, #4]
 801e96a:	1076      	asrs	r6, r6, #1
 801e96c:	4463      	add	r3, ip
 801e96e:	17df      	asrs	r7, r3, #31
 801e970:	604e      	str	r6, [r1, #4]
 801e972:	46ba      	mov	sl, r7
 801e974:	001e      	movs	r6, r3
 801e976:	9802      	ldr	r0, [sp, #8]
 801e978:	9b04      	ldr	r3, [sp, #16]
 801e97a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e97c:	1ac7      	subs	r7, r0, r3
 801e97e:	17fb      	asrs	r3, r7, #31
 801e980:	469b      	mov	fp, r3
 801e982:	0030      	movs	r0, r6
 801e984:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e986:	4651      	mov	r1, sl
 801e988:	f7e1 fe1a 	bl	80005c0 <__aeabi_lmul>
 801e98c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e98e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e990:	9101      	str	r1, [sp, #4]
 801e992:	0038      	movs	r0, r7
 801e994:	4659      	mov	r1, fp
 801e996:	f7e1 fe13 	bl	80005c0 <__aeabi_lmul>
 801e99a:	9801      	ldr	r0, [sp, #4]
 801e99c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e99e:	1a41      	subs	r1, r0, r1
 801e9a0:	1049      	asrs	r1, r1, #1
 801e9a2:	6029      	str	r1, [r5, #0]
 801e9a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e9a6:	0038      	movs	r0, r7
 801e9a8:	4659      	mov	r1, fp
 801e9aa:	f7e1 fe09 	bl	80005c0 <__aeabi_lmul>
 801e9ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e9b0:	000f      	movs	r7, r1
 801e9b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e9b4:	0030      	movs	r0, r6
 801e9b6:	4651      	mov	r1, sl
 801e9b8:	f7e1 fe02 	bl	80005c0 <__aeabi_lmul>
 801e9bc:	187f      	adds	r7, r7, r1
 801e9be:	107f      	asrs	r7, r7, #1
 801e9c0:	606f      	str	r7, [r5, #4]
 801e9c2:	9a00      	ldr	r2, [sp, #0]
 801e9c4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e9c6:	4694      	mov	ip, r2
 801e9c8:	4465      	add	r5, ip
 801e9ca:	468c      	mov	ip, r1
 801e9cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e9ce:	0013      	movs	r3, r2
 801e9d0:	4462      	add	r2, ip
 801e9d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e9d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e9d6:	429a      	cmp	r2, r3
 801e9d8:	d900      	bls.n	801e9dc <arm_radix4_butterfly_inverse_q31+0x46c>
 801e9da:	e73e      	b.n	801e85a <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e9dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e9de:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e9e0:	468c      	mov	ip, r1
 801e9e2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e9e4:	4462      	add	r2, ip
 801e9e6:	468c      	mov	ip, r1
 801e9e8:	9216      	str	r2, [sp, #88]	@ 0x58
 801e9ea:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e9ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e9ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e9f0:	4462      	add	r2, ip
 801e9f2:	468c      	mov	ip, r1
 801e9f4:	9219      	str	r2, [sp, #100]	@ 0x64
 801e9f6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e9f8:	3301      	adds	r3, #1
 801e9fa:	4462      	add	r2, ip
 801e9fc:	9218      	str	r2, [sp, #96]	@ 0x60
 801e9fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801ea00:	9315      	str	r3, [sp, #84]	@ 0x54
 801ea02:	3208      	adds	r2, #8
 801ea04:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ea06:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ea08:	4293      	cmp	r3, r2
 801ea0a:	d800      	bhi.n	801ea0e <arm_radix4_butterfly_inverse_q31+0x49e>
 801ea0c:	e6ec      	b.n	801e7e8 <arm_radix4_butterfly_inverse_q31+0x278>
 801ea0e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ea10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ea12:	009b      	lsls	r3, r3, #2
 801ea14:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ea16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ea18:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ea1a:	089b      	lsrs	r3, r3, #2
 801ea1c:	9320      	str	r3, [sp, #128]	@ 0x80
 801ea1e:	2b04      	cmp	r3, #4
 801ea20:	d900      	bls.n	801ea24 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801ea22:	e6c5      	b.n	801e7b0 <arm_radix4_butterfly_inverse_q31+0x240>
 801ea24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ea26:	469a      	mov	sl, r3
 801ea28:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ea2a:	681a      	ldr	r2, [r3, #0]
 801ea2c:	6918      	ldr	r0, [r3, #16]
 801ea2e:	4691      	mov	r9, r2
 801ea30:	464c      	mov	r4, r9
 801ea32:	4680      	mov	r8, r0
 801ea34:	69de      	ldr	r6, [r3, #28]
 801ea36:	689d      	ldr	r5, [r3, #8]
 801ea38:	46b4      	mov	ip, r6
 801ea3a:	6998      	ldr	r0, [r3, #24]
 801ea3c:	1964      	adds	r4, r4, r5
 801ea3e:	6859      	ldr	r1, [r3, #4]
 801ea40:	68da      	ldr	r2, [r3, #12]
 801ea42:	4444      	add	r4, r8
 801ea44:	695f      	ldr	r7, [r3, #20]
 801ea46:	1824      	adds	r4, r4, r0
 801ea48:	601c      	str	r4, [r3, #0]
 801ea4a:	188c      	adds	r4, r1, r2
 801ea4c:	19e4      	adds	r4, r4, r7
 801ea4e:	4464      	add	r4, ip
 801ea50:	605c      	str	r4, [r3, #4]
 801ea52:	464c      	mov	r4, r9
 801ea54:	1b64      	subs	r4, r4, r5
 801ea56:	4444      	add	r4, r8
 801ea58:	1a24      	subs	r4, r4, r0
 801ea5a:	609c      	str	r4, [r3, #8]
 801ea5c:	1a8c      	subs	r4, r1, r2
 801ea5e:	19e4      	adds	r4, r4, r7
 801ea60:	1ba4      	subs	r4, r4, r6
 801ea62:	60dc      	str	r4, [r3, #12]
 801ea64:	464c      	mov	r4, r9
 801ea66:	4646      	mov	r6, r8
 801ea68:	1aa4      	subs	r4, r4, r2
 801ea6a:	1ba4      	subs	r4, r4, r6
 801ea6c:	4464      	add	r4, ip
 801ea6e:	611c      	str	r4, [r3, #16]
 801ea70:	194c      	adds	r4, r1, r5
 801ea72:	1be4      	subs	r4, r4, r7
 801ea74:	1a24      	subs	r4, r4, r0
 801ea76:	615c      	str	r4, [r3, #20]
 801ea78:	4644      	mov	r4, r8
 801ea7a:	4666      	mov	r6, ip
 801ea7c:	444a      	add	r2, r9
 801ea7e:	1b12      	subs	r2, r2, r4
 801ea80:	1b92      	subs	r2, r2, r6
 801ea82:	619a      	str	r2, [r3, #24]
 801ea84:	1b4a      	subs	r2, r1, r5
 801ea86:	1bd1      	subs	r1, r2, r7
 801ea88:	2201      	movs	r2, #1
 801ea8a:	4252      	negs	r2, r2
 801ea8c:	4694      	mov	ip, r2
 801ea8e:	44e2      	add	sl, ip
 801ea90:	4652      	mov	r2, sl
 801ea92:	1809      	adds	r1, r1, r0
 801ea94:	61d9      	str	r1, [r3, #28]
 801ea96:	3320      	adds	r3, #32
 801ea98:	2a00      	cmp	r2, #0
 801ea9a:	d1c6      	bne.n	801ea2a <arm_radix4_butterfly_inverse_q31+0x4ba>
 801ea9c:	b027      	add	sp, #156	@ 0x9c
 801ea9e:	bc3c      	pop	{r2, r3, r4, r5}
 801eaa0:	4690      	mov	r8, r2
 801eaa2:	4699      	mov	r9, r3
 801eaa4:	46a2      	mov	sl, r4
 801eaa6:	46ab      	mov	fp, r5
 801eaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eaaa:	469a      	mov	sl, r3
 801eaac:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801eaae:	e7bc      	b.n	801ea2a <arm_radix4_butterfly_inverse_q31+0x4ba>

0801eab0 <arm_cmplx_mag_squared_q31>:
 801eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eab2:	464f      	mov	r7, r9
 801eab4:	4646      	mov	r6, r8
 801eab6:	0004      	movs	r4, r0
 801eab8:	b4c0      	push	{r6, r7}
 801eaba:	0016      	movs	r6, r2
 801eabc:	000f      	movs	r7, r1
 801eabe:	2a00      	cmp	r2, #0
 801eac0:	d018      	beq.n	801eaf4 <arm_cmplx_mag_squared_q31+0x44>
 801eac2:	6823      	ldr	r3, [r4, #0]
 801eac4:	6822      	ldr	r2, [r4, #0]
 801eac6:	17d9      	asrs	r1, r3, #31
 801eac8:	6863      	ldr	r3, [r4, #4]
 801eaca:	0010      	movs	r0, r2
 801eacc:	4698      	mov	r8, r3
 801eace:	17db      	asrs	r3, r3, #31
 801ead0:	4699      	mov	r9, r3
 801ead2:	000b      	movs	r3, r1
 801ead4:	f7e1 fd74 	bl	80005c0 <__aeabi_lmul>
 801ead8:	4642      	mov	r2, r8
 801eada:	104d      	asrs	r5, r1, #1
 801eadc:	464b      	mov	r3, r9
 801eade:	4640      	mov	r0, r8
 801eae0:	4649      	mov	r1, r9
 801eae2:	f7e1 fd6d 	bl	80005c0 <__aeabi_lmul>
 801eae6:	1049      	asrs	r1, r1, #1
 801eae8:	1869      	adds	r1, r5, r1
 801eaea:	3e01      	subs	r6, #1
 801eaec:	c702      	stmia	r7!, {r1}
 801eaee:	3408      	adds	r4, #8
 801eaf0:	2e00      	cmp	r6, #0
 801eaf2:	d1e6      	bne.n	801eac2 <arm_cmplx_mag_squared_q31+0x12>
 801eaf4:	bc0c      	pop	{r2, r3}
 801eaf6:	4690      	mov	r8, r2
 801eaf8:	4699      	mov	r9, r3
 801eafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801eafc <arm_mult_q31>:
 801eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eafe:	4646      	mov	r6, r8
 801eb00:	464f      	mov	r7, r9
 801eb02:	4690      	mov	r8, r2
 801eb04:	b4c0      	push	{r6, r7}
 801eb06:	001d      	movs	r5, r3
 801eb08:	0006      	movs	r6, r0
 801eb0a:	000f      	movs	r7, r1
 801eb0c:	2400      	movs	r4, #0
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	d020      	beq.n	801eb54 <arm_mult_q31+0x58>
 801eb12:	4b12      	ldr	r3, [pc, #72]	@ (801eb5c <arm_mult_q31+0x60>)
 801eb14:	4699      	mov	r9, r3
 801eb16:	e007      	b.n	801eb28 <arm_mult_q31+0x2c>
 801eb18:	464b      	mov	r3, r9
 801eb1a:	4059      	eors	r1, r3
 801eb1c:	4643      	mov	r3, r8
 801eb1e:	3d01      	subs	r5, #1
 801eb20:	5119      	str	r1, [r3, r4]
 801eb22:	3404      	adds	r4, #4
 801eb24:	2d00      	cmp	r5, #0
 801eb26:	d015      	beq.n	801eb54 <arm_mult_q31+0x58>
 801eb28:	5933      	ldr	r3, [r6, r4]
 801eb2a:	593a      	ldr	r2, [r7, r4]
 801eb2c:	17d9      	asrs	r1, r3, #31
 801eb2e:	593b      	ldr	r3, [r7, r4]
 801eb30:	5930      	ldr	r0, [r6, r4]
 801eb32:	17db      	asrs	r3, r3, #31
 801eb34:	f7e1 fd44 	bl	80005c0 <__aeabi_lmul>
 801eb38:	004b      	lsls	r3, r1, #1
 801eb3a:	0fc0      	lsrs	r0, r0, #31
 801eb3c:	4318      	orrs	r0, r3
 801eb3e:	17c9      	asrs	r1, r1, #31
 801eb40:	17c3      	asrs	r3, r0, #31
 801eb42:	428b      	cmp	r3, r1
 801eb44:	d1e8      	bne.n	801eb18 <arm_mult_q31+0x1c>
 801eb46:	0001      	movs	r1, r0
 801eb48:	4643      	mov	r3, r8
 801eb4a:	3d01      	subs	r5, #1
 801eb4c:	5119      	str	r1, [r3, r4]
 801eb4e:	3404      	adds	r4, #4
 801eb50:	2d00      	cmp	r5, #0
 801eb52:	d1e9      	bne.n	801eb28 <arm_mult_q31+0x2c>
 801eb54:	bc0c      	pop	{r2, r3}
 801eb56:	4690      	mov	r8, r2
 801eb58:	4699      	mov	r9, r3
 801eb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb5c:	7fffffff 	.word	0x7fffffff

0801eb60 <arm_add_q31>:
 801eb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb62:	465f      	mov	r7, fp
 801eb64:	4656      	mov	r6, sl
 801eb66:	464d      	mov	r5, r9
 801eb68:	4644      	mov	r4, r8
 801eb6a:	b4f0      	push	{r4, r5, r6, r7}
 801eb6c:	4693      	mov	fp, r2
 801eb6e:	b083      	sub	sp, #12
 801eb70:	4681      	mov	r9, r0
 801eb72:	468a      	mov	sl, r1
 801eb74:	4698      	mov	r8, r3
 801eb76:	2200      	movs	r2, #0
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	d020      	beq.n	801ebbe <arm_add_q31+0x5e>
 801eb7c:	4649      	mov	r1, r9
 801eb7e:	4653      	mov	r3, sl
 801eb80:	588e      	ldr	r6, [r1, r2]
 801eb82:	589b      	ldr	r3, [r3, r2]
 801eb84:	17f7      	asrs	r7, r6, #31
 801eb86:	001c      	movs	r4, r3
 801eb88:	0030      	movs	r0, r6
 801eb8a:	0039      	movs	r1, r7
 801eb8c:	17dd      	asrs	r5, r3, #31
 801eb8e:	46b4      	mov	ip, r6
 801eb90:	1900      	adds	r0, r0, r4
 801eb92:	4169      	adcs	r1, r5
 801eb94:	4463      	add	r3, ip
 801eb96:	9000      	str	r0, [sp, #0]
 801eb98:	9101      	str	r1, [sp, #4]
 801eb9a:	17d9      	asrs	r1, r3, #31
 801eb9c:	468c      	mov	ip, r1
 801eb9e:	9901      	ldr	r1, [sp, #4]
 801eba0:	458c      	cmp	ip, r1
 801eba2:	d002      	beq.n	801ebaa <arm_add_q31+0x4a>
 801eba4:	17cb      	asrs	r3, r1, #31
 801eba6:	4909      	ldr	r1, [pc, #36]	@ (801ebcc <arm_add_q31+0x6c>)
 801eba8:	404b      	eors	r3, r1
 801ebaa:	4659      	mov	r1, fp
 801ebac:	508b      	str	r3, [r1, r2]
 801ebae:	2301      	movs	r3, #1
 801ebb0:	425b      	negs	r3, r3
 801ebb2:	469c      	mov	ip, r3
 801ebb4:	44e0      	add	r8, ip
 801ebb6:	4643      	mov	r3, r8
 801ebb8:	3204      	adds	r2, #4
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d1de      	bne.n	801eb7c <arm_add_q31+0x1c>
 801ebbe:	b003      	add	sp, #12
 801ebc0:	bc3c      	pop	{r2, r3, r4, r5}
 801ebc2:	4690      	mov	r8, r2
 801ebc4:	4699      	mov	r9, r3
 801ebc6:	46a2      	mov	sl, r4
 801ebc8:	46ab      	mov	fp, r5
 801ebca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebcc:	7fffffff 	.word	0x7fffffff

0801ebd0 <atof>:
 801ebd0:	b510      	push	{r4, lr}
 801ebd2:	2100      	movs	r1, #0
 801ebd4:	f000 fe12 	bl	801f7fc <strtod>
 801ebd8:	bd10      	pop	{r4, pc}

0801ebda <atoi>:
 801ebda:	b510      	push	{r4, lr}
 801ebdc:	220a      	movs	r2, #10
 801ebde:	2100      	movs	r1, #0
 801ebe0:	f000 fea4 	bl	801f92c <strtol>
 801ebe4:	bd10      	pop	{r4, pc}
	...

0801ebe8 <sulp>:
 801ebe8:	b570      	push	{r4, r5, r6, lr}
 801ebea:	0016      	movs	r6, r2
 801ebec:	000d      	movs	r5, r1
 801ebee:	f003 fcf3 	bl	80225d8 <__ulp>
 801ebf2:	2e00      	cmp	r6, #0
 801ebf4:	d00d      	beq.n	801ec12 <sulp+0x2a>
 801ebf6:	236b      	movs	r3, #107	@ 0x6b
 801ebf8:	006a      	lsls	r2, r5, #1
 801ebfa:	0d52      	lsrs	r2, r2, #21
 801ebfc:	1a9b      	subs	r3, r3, r2
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	dd07      	ble.n	801ec12 <sulp+0x2a>
 801ec02:	2400      	movs	r4, #0
 801ec04:	4a03      	ldr	r2, [pc, #12]	@ (801ec14 <sulp+0x2c>)
 801ec06:	051b      	lsls	r3, r3, #20
 801ec08:	189d      	adds	r5, r3, r2
 801ec0a:	002b      	movs	r3, r5
 801ec0c:	0022      	movs	r2, r4
 801ec0e:	f7e3 fd15 	bl	800263c <__aeabi_dmul>
 801ec12:	bd70      	pop	{r4, r5, r6, pc}
 801ec14:	3ff00000 	.word	0x3ff00000

0801ec18 <_strtod_l>:
 801ec18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec1a:	b0a3      	sub	sp, #140	@ 0x8c
 801ec1c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801ec1e:	2200      	movs	r2, #0
 801ec20:	2600      	movs	r6, #0
 801ec22:	2700      	movs	r7, #0
 801ec24:	9005      	str	r0, [sp, #20]
 801ec26:	9109      	str	r1, [sp, #36]	@ 0x24
 801ec28:	921e      	str	r2, [sp, #120]	@ 0x78
 801ec2a:	911d      	str	r1, [sp, #116]	@ 0x74
 801ec2c:	780a      	ldrb	r2, [r1, #0]
 801ec2e:	2a2b      	cmp	r2, #43	@ 0x2b
 801ec30:	d053      	beq.n	801ecda <_strtod_l+0xc2>
 801ec32:	d83f      	bhi.n	801ecb4 <_strtod_l+0x9c>
 801ec34:	2a0d      	cmp	r2, #13
 801ec36:	d839      	bhi.n	801ecac <_strtod_l+0x94>
 801ec38:	2a08      	cmp	r2, #8
 801ec3a:	d839      	bhi.n	801ecb0 <_strtod_l+0x98>
 801ec3c:	2a00      	cmp	r2, #0
 801ec3e:	d042      	beq.n	801ecc6 <_strtod_l+0xae>
 801ec40:	2200      	movs	r2, #0
 801ec42:	9212      	str	r2, [sp, #72]	@ 0x48
 801ec44:	2100      	movs	r1, #0
 801ec46:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801ec48:	910c      	str	r1, [sp, #48]	@ 0x30
 801ec4a:	782a      	ldrb	r2, [r5, #0]
 801ec4c:	2a30      	cmp	r2, #48	@ 0x30
 801ec4e:	d000      	beq.n	801ec52 <_strtod_l+0x3a>
 801ec50:	e083      	b.n	801ed5a <_strtod_l+0x142>
 801ec52:	786a      	ldrb	r2, [r5, #1]
 801ec54:	3120      	adds	r1, #32
 801ec56:	438a      	bics	r2, r1
 801ec58:	2a58      	cmp	r2, #88	@ 0x58
 801ec5a:	d000      	beq.n	801ec5e <_strtod_l+0x46>
 801ec5c:	e073      	b.n	801ed46 <_strtod_l+0x12e>
 801ec5e:	9302      	str	r3, [sp, #8]
 801ec60:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ec62:	4a95      	ldr	r2, [pc, #596]	@ (801eeb8 <_strtod_l+0x2a0>)
 801ec64:	9301      	str	r3, [sp, #4]
 801ec66:	ab1e      	add	r3, sp, #120	@ 0x78
 801ec68:	9300      	str	r3, [sp, #0]
 801ec6a:	9805      	ldr	r0, [sp, #20]
 801ec6c:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ec6e:	a91d      	add	r1, sp, #116	@ 0x74
 801ec70:	f002 fd62 	bl	8021738 <__gethex>
 801ec74:	230f      	movs	r3, #15
 801ec76:	0002      	movs	r2, r0
 801ec78:	401a      	ands	r2, r3
 801ec7a:	0004      	movs	r4, r0
 801ec7c:	9206      	str	r2, [sp, #24]
 801ec7e:	4218      	tst	r0, r3
 801ec80:	d005      	beq.n	801ec8e <_strtod_l+0x76>
 801ec82:	2a06      	cmp	r2, #6
 801ec84:	d12b      	bne.n	801ecde <_strtod_l+0xc6>
 801ec86:	2300      	movs	r3, #0
 801ec88:	3501      	adds	r5, #1
 801ec8a:	951d      	str	r5, [sp, #116]	@ 0x74
 801ec8c:	9312      	str	r3, [sp, #72]	@ 0x48
 801ec8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d002      	beq.n	801ec9a <_strtod_l+0x82>
 801ec94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec96:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ec98:	6013      	str	r3, [r2, #0]
 801ec9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d019      	beq.n	801ecd4 <_strtod_l+0xbc>
 801eca0:	2380      	movs	r3, #128	@ 0x80
 801eca2:	0030      	movs	r0, r6
 801eca4:	061b      	lsls	r3, r3, #24
 801eca6:	18f9      	adds	r1, r7, r3
 801eca8:	b023      	add	sp, #140	@ 0x8c
 801ecaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ecac:	2a20      	cmp	r2, #32
 801ecae:	d1c7      	bne.n	801ec40 <_strtod_l+0x28>
 801ecb0:	3101      	adds	r1, #1
 801ecb2:	e7ba      	b.n	801ec2a <_strtod_l+0x12>
 801ecb4:	2a2d      	cmp	r2, #45	@ 0x2d
 801ecb6:	d1c3      	bne.n	801ec40 <_strtod_l+0x28>
 801ecb8:	3a2c      	subs	r2, #44	@ 0x2c
 801ecba:	9212      	str	r2, [sp, #72]	@ 0x48
 801ecbc:	1c4a      	adds	r2, r1, #1
 801ecbe:	921d      	str	r2, [sp, #116]	@ 0x74
 801ecc0:	784a      	ldrb	r2, [r1, #1]
 801ecc2:	2a00      	cmp	r2, #0
 801ecc4:	d1be      	bne.n	801ec44 <_strtod_l+0x2c>
 801ecc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecc8:	931d      	str	r3, [sp, #116]	@ 0x74
 801ecca:	2300      	movs	r3, #0
 801eccc:	9312      	str	r3, [sp, #72]	@ 0x48
 801ecce:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	d1df      	bne.n	801ec94 <_strtod_l+0x7c>
 801ecd4:	0030      	movs	r0, r6
 801ecd6:	0039      	movs	r1, r7
 801ecd8:	e7e6      	b.n	801eca8 <_strtod_l+0x90>
 801ecda:	2200      	movs	r2, #0
 801ecdc:	e7ed      	b.n	801ecba <_strtod_l+0xa2>
 801ecde:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ece0:	2a00      	cmp	r2, #0
 801ece2:	d007      	beq.n	801ecf4 <_strtod_l+0xdc>
 801ece4:	2135      	movs	r1, #53	@ 0x35
 801ece6:	a820      	add	r0, sp, #128	@ 0x80
 801ece8:	f003 fd6c 	bl	80227c4 <__copybits>
 801ecec:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ecee:	9805      	ldr	r0, [sp, #20]
 801ecf0:	f003 f926 	bl	8021f40 <_Bfree>
 801ecf4:	9806      	ldr	r0, [sp, #24]
 801ecf6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ecf8:	3801      	subs	r0, #1
 801ecfa:	2804      	cmp	r0, #4
 801ecfc:	d806      	bhi.n	801ed0c <_strtod_l+0xf4>
 801ecfe:	f7e1 fa3d 	bl	800017c <__gnu_thumb1_case_uqi>
 801ed02:	0312      	.short	0x0312
 801ed04:	1e1c      	.short	0x1e1c
 801ed06:	12          	.byte	0x12
 801ed07:	00          	.byte	0x00
 801ed08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ed0a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801ed0c:	05e4      	lsls	r4, r4, #23
 801ed0e:	d502      	bpl.n	801ed16 <_strtod_l+0xfe>
 801ed10:	2380      	movs	r3, #128	@ 0x80
 801ed12:	061b      	lsls	r3, r3, #24
 801ed14:	431f      	orrs	r7, r3
 801ed16:	4b69      	ldr	r3, [pc, #420]	@ (801eebc <_strtod_l+0x2a4>)
 801ed18:	423b      	tst	r3, r7
 801ed1a:	d1b8      	bne.n	801ec8e <_strtod_l+0x76>
 801ed1c:	f001 fd90 	bl	8020840 <__errno>
 801ed20:	2322      	movs	r3, #34	@ 0x22
 801ed22:	6003      	str	r3, [r0, #0]
 801ed24:	e7b3      	b.n	801ec8e <_strtod_l+0x76>
 801ed26:	4966      	ldr	r1, [pc, #408]	@ (801eec0 <_strtod_l+0x2a8>)
 801ed28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ed2a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ed2c:	400a      	ands	r2, r1
 801ed2e:	4965      	ldr	r1, [pc, #404]	@ (801eec4 <_strtod_l+0x2ac>)
 801ed30:	185b      	adds	r3, r3, r1
 801ed32:	051b      	lsls	r3, r3, #20
 801ed34:	431a      	orrs	r2, r3
 801ed36:	0017      	movs	r7, r2
 801ed38:	e7e8      	b.n	801ed0c <_strtod_l+0xf4>
 801ed3a:	4f60      	ldr	r7, [pc, #384]	@ (801eebc <_strtod_l+0x2a4>)
 801ed3c:	e7e6      	b.n	801ed0c <_strtod_l+0xf4>
 801ed3e:	2601      	movs	r6, #1
 801ed40:	4f61      	ldr	r7, [pc, #388]	@ (801eec8 <_strtod_l+0x2b0>)
 801ed42:	4276      	negs	r6, r6
 801ed44:	e7e2      	b.n	801ed0c <_strtod_l+0xf4>
 801ed46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed48:	1c5a      	adds	r2, r3, #1
 801ed4a:	921d      	str	r2, [sp, #116]	@ 0x74
 801ed4c:	785b      	ldrb	r3, [r3, #1]
 801ed4e:	2b30      	cmp	r3, #48	@ 0x30
 801ed50:	d0f9      	beq.n	801ed46 <_strtod_l+0x12e>
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d09b      	beq.n	801ec8e <_strtod_l+0x76>
 801ed56:	2301      	movs	r3, #1
 801ed58:	930c      	str	r3, [sp, #48]	@ 0x30
 801ed5a:	2500      	movs	r5, #0
 801ed5c:	220a      	movs	r2, #10
 801ed5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed60:	950d      	str	r5, [sp, #52]	@ 0x34
 801ed62:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ed64:	9508      	str	r5, [sp, #32]
 801ed66:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ed68:	7804      	ldrb	r4, [r0, #0]
 801ed6a:	0023      	movs	r3, r4
 801ed6c:	3b30      	subs	r3, #48	@ 0x30
 801ed6e:	b2d9      	uxtb	r1, r3
 801ed70:	2909      	cmp	r1, #9
 801ed72:	d927      	bls.n	801edc4 <_strtod_l+0x1ac>
 801ed74:	2201      	movs	r2, #1
 801ed76:	4955      	ldr	r1, [pc, #340]	@ (801eecc <_strtod_l+0x2b4>)
 801ed78:	f001 fcd4 	bl	8020724 <strncmp>
 801ed7c:	2800      	cmp	r0, #0
 801ed7e:	d031      	beq.n	801ede4 <_strtod_l+0x1cc>
 801ed80:	2000      	movs	r0, #0
 801ed82:	0023      	movs	r3, r4
 801ed84:	4684      	mov	ip, r0
 801ed86:	9a08      	ldr	r2, [sp, #32]
 801ed88:	900e      	str	r0, [sp, #56]	@ 0x38
 801ed8a:	9206      	str	r2, [sp, #24]
 801ed8c:	2220      	movs	r2, #32
 801ed8e:	0019      	movs	r1, r3
 801ed90:	4391      	bics	r1, r2
 801ed92:	000a      	movs	r2, r1
 801ed94:	2100      	movs	r1, #0
 801ed96:	9107      	str	r1, [sp, #28]
 801ed98:	2a45      	cmp	r2, #69	@ 0x45
 801ed9a:	d000      	beq.n	801ed9e <_strtod_l+0x186>
 801ed9c:	e0c0      	b.n	801ef20 <_strtod_l+0x308>
 801ed9e:	9b06      	ldr	r3, [sp, #24]
 801eda0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eda2:	4303      	orrs	r3, r0
 801eda4:	4313      	orrs	r3, r2
 801eda6:	428b      	cmp	r3, r1
 801eda8:	d08d      	beq.n	801ecc6 <_strtod_l+0xae>
 801edaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801edac:	9309      	str	r3, [sp, #36]	@ 0x24
 801edae:	3301      	adds	r3, #1
 801edb0:	931d      	str	r3, [sp, #116]	@ 0x74
 801edb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edb4:	785b      	ldrb	r3, [r3, #1]
 801edb6:	2b2b      	cmp	r3, #43	@ 0x2b
 801edb8:	d070      	beq.n	801ee9c <_strtod_l+0x284>
 801edba:	000c      	movs	r4, r1
 801edbc:	2b2d      	cmp	r3, #45	@ 0x2d
 801edbe:	d173      	bne.n	801eea8 <_strtod_l+0x290>
 801edc0:	2401      	movs	r4, #1
 801edc2:	e06c      	b.n	801ee9e <_strtod_l+0x286>
 801edc4:	9908      	ldr	r1, [sp, #32]
 801edc6:	2908      	cmp	r1, #8
 801edc8:	dc09      	bgt.n	801edde <_strtod_l+0x1c6>
 801edca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801edcc:	4351      	muls	r1, r2
 801edce:	185b      	adds	r3, r3, r1
 801edd0:	930d      	str	r3, [sp, #52]	@ 0x34
 801edd2:	9b08      	ldr	r3, [sp, #32]
 801edd4:	3001      	adds	r0, #1
 801edd6:	3301      	adds	r3, #1
 801edd8:	9308      	str	r3, [sp, #32]
 801edda:	901d      	str	r0, [sp, #116]	@ 0x74
 801eddc:	e7c3      	b.n	801ed66 <_strtod_l+0x14e>
 801edde:	4355      	muls	r5, r2
 801ede0:	195d      	adds	r5, r3, r5
 801ede2:	e7f6      	b.n	801edd2 <_strtod_l+0x1ba>
 801ede4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ede6:	1c5a      	adds	r2, r3, #1
 801ede8:	921d      	str	r2, [sp, #116]	@ 0x74
 801edea:	9a08      	ldr	r2, [sp, #32]
 801edec:	785b      	ldrb	r3, [r3, #1]
 801edee:	2a00      	cmp	r2, #0
 801edf0:	d03a      	beq.n	801ee68 <_strtod_l+0x250>
 801edf2:	900e      	str	r0, [sp, #56]	@ 0x38
 801edf4:	9206      	str	r2, [sp, #24]
 801edf6:	001a      	movs	r2, r3
 801edf8:	3a30      	subs	r2, #48	@ 0x30
 801edfa:	2a09      	cmp	r2, #9
 801edfc:	d912      	bls.n	801ee24 <_strtod_l+0x20c>
 801edfe:	2201      	movs	r2, #1
 801ee00:	4694      	mov	ip, r2
 801ee02:	e7c3      	b.n	801ed8c <_strtod_l+0x174>
 801ee04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee06:	3001      	adds	r0, #1
 801ee08:	1c5a      	adds	r2, r3, #1
 801ee0a:	921d      	str	r2, [sp, #116]	@ 0x74
 801ee0c:	785b      	ldrb	r3, [r3, #1]
 801ee0e:	2b30      	cmp	r3, #48	@ 0x30
 801ee10:	d0f8      	beq.n	801ee04 <_strtod_l+0x1ec>
 801ee12:	001a      	movs	r2, r3
 801ee14:	3a31      	subs	r2, #49	@ 0x31
 801ee16:	2a08      	cmp	r2, #8
 801ee18:	d83b      	bhi.n	801ee92 <_strtod_l+0x27a>
 801ee1a:	900e      	str	r0, [sp, #56]	@ 0x38
 801ee1c:	2000      	movs	r0, #0
 801ee1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ee20:	9006      	str	r0, [sp, #24]
 801ee22:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ee24:	001a      	movs	r2, r3
 801ee26:	1c41      	adds	r1, r0, #1
 801ee28:	3a30      	subs	r2, #48	@ 0x30
 801ee2a:	2b30      	cmp	r3, #48	@ 0x30
 801ee2c:	d016      	beq.n	801ee5c <_strtod_l+0x244>
 801ee2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee30:	185b      	adds	r3, r3, r1
 801ee32:	930e      	str	r3, [sp, #56]	@ 0x38
 801ee34:	9b06      	ldr	r3, [sp, #24]
 801ee36:	210a      	movs	r1, #10
 801ee38:	469c      	mov	ip, r3
 801ee3a:	4484      	add	ip, r0
 801ee3c:	459c      	cmp	ip, r3
 801ee3e:	d115      	bne.n	801ee6c <_strtod_l+0x254>
 801ee40:	9906      	ldr	r1, [sp, #24]
 801ee42:	9b06      	ldr	r3, [sp, #24]
 801ee44:	3101      	adds	r1, #1
 801ee46:	1809      	adds	r1, r1, r0
 801ee48:	181b      	adds	r3, r3, r0
 801ee4a:	9106      	str	r1, [sp, #24]
 801ee4c:	2b08      	cmp	r3, #8
 801ee4e:	dc19      	bgt.n	801ee84 <_strtod_l+0x26c>
 801ee50:	230a      	movs	r3, #10
 801ee52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ee54:	434b      	muls	r3, r1
 801ee56:	2100      	movs	r1, #0
 801ee58:	18d3      	adds	r3, r2, r3
 801ee5a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ee5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee5e:	0008      	movs	r0, r1
 801ee60:	1c5a      	adds	r2, r3, #1
 801ee62:	921d      	str	r2, [sp, #116]	@ 0x74
 801ee64:	785b      	ldrb	r3, [r3, #1]
 801ee66:	e7c6      	b.n	801edf6 <_strtod_l+0x1de>
 801ee68:	9808      	ldr	r0, [sp, #32]
 801ee6a:	e7d0      	b.n	801ee0e <_strtod_l+0x1f6>
 801ee6c:	1c5c      	adds	r4, r3, #1
 801ee6e:	2b08      	cmp	r3, #8
 801ee70:	dc04      	bgt.n	801ee7c <_strtod_l+0x264>
 801ee72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ee74:	434b      	muls	r3, r1
 801ee76:	930d      	str	r3, [sp, #52]	@ 0x34
 801ee78:	0023      	movs	r3, r4
 801ee7a:	e7df      	b.n	801ee3c <_strtod_l+0x224>
 801ee7c:	2c10      	cmp	r4, #16
 801ee7e:	dcfb      	bgt.n	801ee78 <_strtod_l+0x260>
 801ee80:	434d      	muls	r5, r1
 801ee82:	e7f9      	b.n	801ee78 <_strtod_l+0x260>
 801ee84:	2100      	movs	r1, #0
 801ee86:	2b0f      	cmp	r3, #15
 801ee88:	dce8      	bgt.n	801ee5c <_strtod_l+0x244>
 801ee8a:	230a      	movs	r3, #10
 801ee8c:	435d      	muls	r5, r3
 801ee8e:	1955      	adds	r5, r2, r5
 801ee90:	e7e4      	b.n	801ee5c <_strtod_l+0x244>
 801ee92:	2200      	movs	r2, #0
 801ee94:	920e      	str	r2, [sp, #56]	@ 0x38
 801ee96:	9206      	str	r2, [sp, #24]
 801ee98:	3201      	adds	r2, #1
 801ee9a:	e7b1      	b.n	801ee00 <_strtod_l+0x1e8>
 801ee9c:	2400      	movs	r4, #0
 801ee9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eea0:	3302      	adds	r3, #2
 801eea2:	931d      	str	r3, [sp, #116]	@ 0x74
 801eea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eea6:	789b      	ldrb	r3, [r3, #2]
 801eea8:	001a      	movs	r2, r3
 801eeaa:	3a30      	subs	r2, #48	@ 0x30
 801eeac:	2a09      	cmp	r2, #9
 801eeae:	d913      	bls.n	801eed8 <_strtod_l+0x2c0>
 801eeb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eeb2:	921d      	str	r2, [sp, #116]	@ 0x74
 801eeb4:	2200      	movs	r2, #0
 801eeb6:	e032      	b.n	801ef1e <_strtod_l+0x306>
 801eeb8:	080263b8 	.word	0x080263b8
 801eebc:	7ff00000 	.word	0x7ff00000
 801eec0:	ffefffff 	.word	0xffefffff
 801eec4:	00000433 	.word	0x00000433
 801eec8:	7fffffff 	.word	0x7fffffff
 801eecc:	080263a0 	.word	0x080263a0
 801eed0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eed2:	1c5a      	adds	r2, r3, #1
 801eed4:	921d      	str	r2, [sp, #116]	@ 0x74
 801eed6:	785b      	ldrb	r3, [r3, #1]
 801eed8:	2b30      	cmp	r3, #48	@ 0x30
 801eeda:	d0f9      	beq.n	801eed0 <_strtod_l+0x2b8>
 801eedc:	2200      	movs	r2, #0
 801eede:	9207      	str	r2, [sp, #28]
 801eee0:	001a      	movs	r2, r3
 801eee2:	3a31      	subs	r2, #49	@ 0x31
 801eee4:	2a08      	cmp	r2, #8
 801eee6:	d81b      	bhi.n	801ef20 <_strtod_l+0x308>
 801eee8:	3b30      	subs	r3, #48	@ 0x30
 801eeea:	9310      	str	r3, [sp, #64]	@ 0x40
 801eeec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eeee:	9307      	str	r3, [sp, #28]
 801eef0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eef2:	1c59      	adds	r1, r3, #1
 801eef4:	911d      	str	r1, [sp, #116]	@ 0x74
 801eef6:	785b      	ldrb	r3, [r3, #1]
 801eef8:	001a      	movs	r2, r3
 801eefa:	3a30      	subs	r2, #48	@ 0x30
 801eefc:	2a09      	cmp	r2, #9
 801eefe:	d93a      	bls.n	801ef76 <_strtod_l+0x35e>
 801ef00:	9a07      	ldr	r2, [sp, #28]
 801ef02:	1a8a      	subs	r2, r1, r2
 801ef04:	49b4      	ldr	r1, [pc, #720]	@ (801f1d8 <_strtod_l+0x5c0>)
 801ef06:	9107      	str	r1, [sp, #28]
 801ef08:	2a08      	cmp	r2, #8
 801ef0a:	dc04      	bgt.n	801ef16 <_strtod_l+0x2fe>
 801ef0c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ef0e:	9207      	str	r2, [sp, #28]
 801ef10:	428a      	cmp	r2, r1
 801ef12:	dd00      	ble.n	801ef16 <_strtod_l+0x2fe>
 801ef14:	9107      	str	r1, [sp, #28]
 801ef16:	2c00      	cmp	r4, #0
 801ef18:	d002      	beq.n	801ef20 <_strtod_l+0x308>
 801ef1a:	9a07      	ldr	r2, [sp, #28]
 801ef1c:	4252      	negs	r2, r2
 801ef1e:	9207      	str	r2, [sp, #28]
 801ef20:	9a06      	ldr	r2, [sp, #24]
 801ef22:	2a00      	cmp	r2, #0
 801ef24:	d14d      	bne.n	801efc2 <_strtod_l+0x3aa>
 801ef26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ef28:	4310      	orrs	r0, r2
 801ef2a:	d000      	beq.n	801ef2e <_strtod_l+0x316>
 801ef2c:	e6af      	b.n	801ec8e <_strtod_l+0x76>
 801ef2e:	4662      	mov	r2, ip
 801ef30:	2a00      	cmp	r2, #0
 801ef32:	d000      	beq.n	801ef36 <_strtod_l+0x31e>
 801ef34:	e6c7      	b.n	801ecc6 <_strtod_l+0xae>
 801ef36:	2b69      	cmp	r3, #105	@ 0x69
 801ef38:	d027      	beq.n	801ef8a <_strtod_l+0x372>
 801ef3a:	dc23      	bgt.n	801ef84 <_strtod_l+0x36c>
 801ef3c:	2b49      	cmp	r3, #73	@ 0x49
 801ef3e:	d024      	beq.n	801ef8a <_strtod_l+0x372>
 801ef40:	2b4e      	cmp	r3, #78	@ 0x4e
 801ef42:	d000      	beq.n	801ef46 <_strtod_l+0x32e>
 801ef44:	e6bf      	b.n	801ecc6 <_strtod_l+0xae>
 801ef46:	49a5      	ldr	r1, [pc, #660]	@ (801f1dc <_strtod_l+0x5c4>)
 801ef48:	a81d      	add	r0, sp, #116	@ 0x74
 801ef4a:	f002 fe2b 	bl	8021ba4 <__match>
 801ef4e:	2800      	cmp	r0, #0
 801ef50:	d100      	bne.n	801ef54 <_strtod_l+0x33c>
 801ef52:	e6b8      	b.n	801ecc6 <_strtod_l+0xae>
 801ef54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ef56:	781b      	ldrb	r3, [r3, #0]
 801ef58:	2b28      	cmp	r3, #40	@ 0x28
 801ef5a:	d12c      	bne.n	801efb6 <_strtod_l+0x39e>
 801ef5c:	49a0      	ldr	r1, [pc, #640]	@ (801f1e0 <_strtod_l+0x5c8>)
 801ef5e:	aa20      	add	r2, sp, #128	@ 0x80
 801ef60:	a81d      	add	r0, sp, #116	@ 0x74
 801ef62:	f002 fe33 	bl	8021bcc <__hexnan>
 801ef66:	2805      	cmp	r0, #5
 801ef68:	d125      	bne.n	801efb6 <_strtod_l+0x39e>
 801ef6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ef6c:	4a9d      	ldr	r2, [pc, #628]	@ (801f1e4 <_strtod_l+0x5cc>)
 801ef6e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ef70:	431a      	orrs	r2, r3
 801ef72:	0017      	movs	r7, r2
 801ef74:	e68b      	b.n	801ec8e <_strtod_l+0x76>
 801ef76:	220a      	movs	r2, #10
 801ef78:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ef7a:	434a      	muls	r2, r1
 801ef7c:	18d2      	adds	r2, r2, r3
 801ef7e:	3a30      	subs	r2, #48	@ 0x30
 801ef80:	9210      	str	r2, [sp, #64]	@ 0x40
 801ef82:	e7b5      	b.n	801eef0 <_strtod_l+0x2d8>
 801ef84:	2b6e      	cmp	r3, #110	@ 0x6e
 801ef86:	d0de      	beq.n	801ef46 <_strtod_l+0x32e>
 801ef88:	e69d      	b.n	801ecc6 <_strtod_l+0xae>
 801ef8a:	4997      	ldr	r1, [pc, #604]	@ (801f1e8 <_strtod_l+0x5d0>)
 801ef8c:	a81d      	add	r0, sp, #116	@ 0x74
 801ef8e:	f002 fe09 	bl	8021ba4 <__match>
 801ef92:	2800      	cmp	r0, #0
 801ef94:	d100      	bne.n	801ef98 <_strtod_l+0x380>
 801ef96:	e696      	b.n	801ecc6 <_strtod_l+0xae>
 801ef98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ef9a:	4994      	ldr	r1, [pc, #592]	@ (801f1ec <_strtod_l+0x5d4>)
 801ef9c:	3b01      	subs	r3, #1
 801ef9e:	a81d      	add	r0, sp, #116	@ 0x74
 801efa0:	931d      	str	r3, [sp, #116]	@ 0x74
 801efa2:	f002 fdff 	bl	8021ba4 <__match>
 801efa6:	2800      	cmp	r0, #0
 801efa8:	d102      	bne.n	801efb0 <_strtod_l+0x398>
 801efaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801efac:	3301      	adds	r3, #1
 801efae:	931d      	str	r3, [sp, #116]	@ 0x74
 801efb0:	2600      	movs	r6, #0
 801efb2:	4f8c      	ldr	r7, [pc, #560]	@ (801f1e4 <_strtod_l+0x5cc>)
 801efb4:	e66b      	b.n	801ec8e <_strtod_l+0x76>
 801efb6:	488e      	ldr	r0, [pc, #568]	@ (801f1f0 <_strtod_l+0x5d8>)
 801efb8:	f001 fc84 	bl	80208c4 <nan>
 801efbc:	0006      	movs	r6, r0
 801efbe:	000f      	movs	r7, r1
 801efc0:	e665      	b.n	801ec8e <_strtod_l+0x76>
 801efc2:	9b07      	ldr	r3, [sp, #28]
 801efc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efc6:	1a9b      	subs	r3, r3, r2
 801efc8:	930c      	str	r3, [sp, #48]	@ 0x30
 801efca:	9b08      	ldr	r3, [sp, #32]
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d101      	bne.n	801efd4 <_strtod_l+0x3bc>
 801efd0:	9b06      	ldr	r3, [sp, #24]
 801efd2:	9308      	str	r3, [sp, #32]
 801efd4:	9c06      	ldr	r4, [sp, #24]
 801efd6:	2c10      	cmp	r4, #16
 801efd8:	dd00      	ble.n	801efdc <_strtod_l+0x3c4>
 801efda:	2410      	movs	r4, #16
 801efdc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801efde:	f7e4 fa1d 	bl	800341c <__aeabi_ui2d>
 801efe2:	9b06      	ldr	r3, [sp, #24]
 801efe4:	0006      	movs	r6, r0
 801efe6:	000f      	movs	r7, r1
 801efe8:	2b09      	cmp	r3, #9
 801efea:	dc13      	bgt.n	801f014 <_strtod_l+0x3fc>
 801efec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d100      	bne.n	801eff4 <_strtod_l+0x3dc>
 801eff2:	e64c      	b.n	801ec8e <_strtod_l+0x76>
 801eff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	dc00      	bgt.n	801effc <_strtod_l+0x3e4>
 801effa:	e07e      	b.n	801f0fa <_strtod_l+0x4e2>
 801effc:	2b16      	cmp	r3, #22
 801effe:	dc63      	bgt.n	801f0c8 <_strtod_l+0x4b0>
 801f000:	497c      	ldr	r1, [pc, #496]	@ (801f1f4 <_strtod_l+0x5dc>)
 801f002:	00db      	lsls	r3, r3, #3
 801f004:	18c9      	adds	r1, r1, r3
 801f006:	0032      	movs	r2, r6
 801f008:	6808      	ldr	r0, [r1, #0]
 801f00a:	6849      	ldr	r1, [r1, #4]
 801f00c:	003b      	movs	r3, r7
 801f00e:	f7e3 fb15 	bl	800263c <__aeabi_dmul>
 801f012:	e7d3      	b.n	801efbc <_strtod_l+0x3a4>
 801f014:	0022      	movs	r2, r4
 801f016:	4b77      	ldr	r3, [pc, #476]	@ (801f1f4 <_strtod_l+0x5dc>)
 801f018:	3a09      	subs	r2, #9
 801f01a:	00d2      	lsls	r2, r2, #3
 801f01c:	189b      	adds	r3, r3, r2
 801f01e:	681a      	ldr	r2, [r3, #0]
 801f020:	685b      	ldr	r3, [r3, #4]
 801f022:	f7e3 fb0b 	bl	800263c <__aeabi_dmul>
 801f026:	0006      	movs	r6, r0
 801f028:	0028      	movs	r0, r5
 801f02a:	000f      	movs	r7, r1
 801f02c:	f7e4 f9f6 	bl	800341c <__aeabi_ui2d>
 801f030:	000b      	movs	r3, r1
 801f032:	0002      	movs	r2, r0
 801f034:	0039      	movs	r1, r7
 801f036:	0030      	movs	r0, r6
 801f038:	f7e2 fb58 	bl	80016ec <__aeabi_dadd>
 801f03c:	9b06      	ldr	r3, [sp, #24]
 801f03e:	0006      	movs	r6, r0
 801f040:	000f      	movs	r7, r1
 801f042:	2b0f      	cmp	r3, #15
 801f044:	ddd2      	ble.n	801efec <_strtod_l+0x3d4>
 801f046:	9b06      	ldr	r3, [sp, #24]
 801f048:	1b1c      	subs	r4, r3, r4
 801f04a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f04c:	18e4      	adds	r4, r4, r3
 801f04e:	2c00      	cmp	r4, #0
 801f050:	dc00      	bgt.n	801f054 <_strtod_l+0x43c>
 801f052:	e09b      	b.n	801f18c <_strtod_l+0x574>
 801f054:	220f      	movs	r2, #15
 801f056:	0023      	movs	r3, r4
 801f058:	4013      	ands	r3, r2
 801f05a:	4214      	tst	r4, r2
 801f05c:	d00a      	beq.n	801f074 <_strtod_l+0x45c>
 801f05e:	4965      	ldr	r1, [pc, #404]	@ (801f1f4 <_strtod_l+0x5dc>)
 801f060:	00db      	lsls	r3, r3, #3
 801f062:	18c9      	adds	r1, r1, r3
 801f064:	0032      	movs	r2, r6
 801f066:	6808      	ldr	r0, [r1, #0]
 801f068:	6849      	ldr	r1, [r1, #4]
 801f06a:	003b      	movs	r3, r7
 801f06c:	f7e3 fae6 	bl	800263c <__aeabi_dmul>
 801f070:	0006      	movs	r6, r0
 801f072:	000f      	movs	r7, r1
 801f074:	230f      	movs	r3, #15
 801f076:	439c      	bics	r4, r3
 801f078:	d073      	beq.n	801f162 <_strtod_l+0x54a>
 801f07a:	3326      	adds	r3, #38	@ 0x26
 801f07c:	33ff      	adds	r3, #255	@ 0xff
 801f07e:	429c      	cmp	r4, r3
 801f080:	dd4b      	ble.n	801f11a <_strtod_l+0x502>
 801f082:	2300      	movs	r3, #0
 801f084:	9306      	str	r3, [sp, #24]
 801f086:	9307      	str	r3, [sp, #28]
 801f088:	930d      	str	r3, [sp, #52]	@ 0x34
 801f08a:	9308      	str	r3, [sp, #32]
 801f08c:	2322      	movs	r3, #34	@ 0x22
 801f08e:	2600      	movs	r6, #0
 801f090:	9a05      	ldr	r2, [sp, #20]
 801f092:	4f54      	ldr	r7, [pc, #336]	@ (801f1e4 <_strtod_l+0x5cc>)
 801f094:	6013      	str	r3, [r2, #0]
 801f096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f098:	42b3      	cmp	r3, r6
 801f09a:	d100      	bne.n	801f09e <_strtod_l+0x486>
 801f09c:	e5f7      	b.n	801ec8e <_strtod_l+0x76>
 801f09e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f0a0:	9805      	ldr	r0, [sp, #20]
 801f0a2:	f002 ff4d 	bl	8021f40 <_Bfree>
 801f0a6:	9908      	ldr	r1, [sp, #32]
 801f0a8:	9805      	ldr	r0, [sp, #20]
 801f0aa:	f002 ff49 	bl	8021f40 <_Bfree>
 801f0ae:	9907      	ldr	r1, [sp, #28]
 801f0b0:	9805      	ldr	r0, [sp, #20]
 801f0b2:	f002 ff45 	bl	8021f40 <_Bfree>
 801f0b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f0b8:	9805      	ldr	r0, [sp, #20]
 801f0ba:	f002 ff41 	bl	8021f40 <_Bfree>
 801f0be:	9906      	ldr	r1, [sp, #24]
 801f0c0:	9805      	ldr	r0, [sp, #20]
 801f0c2:	f002 ff3d 	bl	8021f40 <_Bfree>
 801f0c6:	e5e2      	b.n	801ec8e <_strtod_l+0x76>
 801f0c8:	2325      	movs	r3, #37	@ 0x25
 801f0ca:	9a06      	ldr	r2, [sp, #24]
 801f0cc:	1a9b      	subs	r3, r3, r2
 801f0ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f0d0:	4293      	cmp	r3, r2
 801f0d2:	dbb8      	blt.n	801f046 <_strtod_l+0x42e>
 801f0d4:	240f      	movs	r4, #15
 801f0d6:	9b06      	ldr	r3, [sp, #24]
 801f0d8:	4d46      	ldr	r5, [pc, #280]	@ (801f1f4 <_strtod_l+0x5dc>)
 801f0da:	1ae4      	subs	r4, r4, r3
 801f0dc:	00e1      	lsls	r1, r4, #3
 801f0de:	1869      	adds	r1, r5, r1
 801f0e0:	0032      	movs	r2, r6
 801f0e2:	6808      	ldr	r0, [r1, #0]
 801f0e4:	6849      	ldr	r1, [r1, #4]
 801f0e6:	003b      	movs	r3, r7
 801f0e8:	f7e3 faa8 	bl	800263c <__aeabi_dmul>
 801f0ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f0ee:	1b1c      	subs	r4, r3, r4
 801f0f0:	00e4      	lsls	r4, r4, #3
 801f0f2:	192d      	adds	r5, r5, r4
 801f0f4:	682a      	ldr	r2, [r5, #0]
 801f0f6:	686b      	ldr	r3, [r5, #4]
 801f0f8:	e789      	b.n	801f00e <_strtod_l+0x3f6>
 801f0fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f0fc:	3316      	adds	r3, #22
 801f0fe:	dba2      	blt.n	801f046 <_strtod_l+0x42e>
 801f100:	9907      	ldr	r1, [sp, #28]
 801f102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f104:	4b3b      	ldr	r3, [pc, #236]	@ (801f1f4 <_strtod_l+0x5dc>)
 801f106:	1a52      	subs	r2, r2, r1
 801f108:	00d2      	lsls	r2, r2, #3
 801f10a:	189b      	adds	r3, r3, r2
 801f10c:	0030      	movs	r0, r6
 801f10e:	681a      	ldr	r2, [r3, #0]
 801f110:	685b      	ldr	r3, [r3, #4]
 801f112:	0039      	movs	r1, r7
 801f114:	f7e2 fe4e 	bl	8001db4 <__aeabi_ddiv>
 801f118:	e750      	b.n	801efbc <_strtod_l+0x3a4>
 801f11a:	2300      	movs	r3, #0
 801f11c:	0030      	movs	r0, r6
 801f11e:	0039      	movs	r1, r7
 801f120:	4d35      	ldr	r5, [pc, #212]	@ (801f1f8 <_strtod_l+0x5e0>)
 801f122:	1124      	asrs	r4, r4, #4
 801f124:	9309      	str	r3, [sp, #36]	@ 0x24
 801f126:	2c01      	cmp	r4, #1
 801f128:	dc1e      	bgt.n	801f168 <_strtod_l+0x550>
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	d001      	beq.n	801f132 <_strtod_l+0x51a>
 801f12e:	0006      	movs	r6, r0
 801f130:	000f      	movs	r7, r1
 801f132:	4b32      	ldr	r3, [pc, #200]	@ (801f1fc <_strtod_l+0x5e4>)
 801f134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f136:	18ff      	adds	r7, r7, r3
 801f138:	4b2f      	ldr	r3, [pc, #188]	@ (801f1f8 <_strtod_l+0x5e0>)
 801f13a:	00d5      	lsls	r5, r2, #3
 801f13c:	195d      	adds	r5, r3, r5
 801f13e:	0032      	movs	r2, r6
 801f140:	6828      	ldr	r0, [r5, #0]
 801f142:	6869      	ldr	r1, [r5, #4]
 801f144:	003b      	movs	r3, r7
 801f146:	f7e3 fa79 	bl	800263c <__aeabi_dmul>
 801f14a:	4b26      	ldr	r3, [pc, #152]	@ (801f1e4 <_strtod_l+0x5cc>)
 801f14c:	4a2c      	ldr	r2, [pc, #176]	@ (801f200 <_strtod_l+0x5e8>)
 801f14e:	0006      	movs	r6, r0
 801f150:	400b      	ands	r3, r1
 801f152:	4293      	cmp	r3, r2
 801f154:	d895      	bhi.n	801f082 <_strtod_l+0x46a>
 801f156:	4a2b      	ldr	r2, [pc, #172]	@ (801f204 <_strtod_l+0x5ec>)
 801f158:	4293      	cmp	r3, r2
 801f15a:	d913      	bls.n	801f184 <_strtod_l+0x56c>
 801f15c:	2601      	movs	r6, #1
 801f15e:	4f2a      	ldr	r7, [pc, #168]	@ (801f208 <_strtod_l+0x5f0>)
 801f160:	4276      	negs	r6, r6
 801f162:	2300      	movs	r3, #0
 801f164:	9309      	str	r3, [sp, #36]	@ 0x24
 801f166:	e086      	b.n	801f276 <_strtod_l+0x65e>
 801f168:	2201      	movs	r2, #1
 801f16a:	4214      	tst	r4, r2
 801f16c:	d004      	beq.n	801f178 <_strtod_l+0x560>
 801f16e:	682a      	ldr	r2, [r5, #0]
 801f170:	686b      	ldr	r3, [r5, #4]
 801f172:	f7e3 fa63 	bl	800263c <__aeabi_dmul>
 801f176:	2301      	movs	r3, #1
 801f178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f17a:	1064      	asrs	r4, r4, #1
 801f17c:	3201      	adds	r2, #1
 801f17e:	9209      	str	r2, [sp, #36]	@ 0x24
 801f180:	3508      	adds	r5, #8
 801f182:	e7d0      	b.n	801f126 <_strtod_l+0x50e>
 801f184:	23d4      	movs	r3, #212	@ 0xd4
 801f186:	049b      	lsls	r3, r3, #18
 801f188:	18cf      	adds	r7, r1, r3
 801f18a:	e7ea      	b.n	801f162 <_strtod_l+0x54a>
 801f18c:	2c00      	cmp	r4, #0
 801f18e:	d0e8      	beq.n	801f162 <_strtod_l+0x54a>
 801f190:	4264      	negs	r4, r4
 801f192:	230f      	movs	r3, #15
 801f194:	0022      	movs	r2, r4
 801f196:	401a      	ands	r2, r3
 801f198:	421c      	tst	r4, r3
 801f19a:	d00a      	beq.n	801f1b2 <_strtod_l+0x59a>
 801f19c:	4b15      	ldr	r3, [pc, #84]	@ (801f1f4 <_strtod_l+0x5dc>)
 801f19e:	00d2      	lsls	r2, r2, #3
 801f1a0:	189b      	adds	r3, r3, r2
 801f1a2:	0030      	movs	r0, r6
 801f1a4:	681a      	ldr	r2, [r3, #0]
 801f1a6:	685b      	ldr	r3, [r3, #4]
 801f1a8:	0039      	movs	r1, r7
 801f1aa:	f7e2 fe03 	bl	8001db4 <__aeabi_ddiv>
 801f1ae:	0006      	movs	r6, r0
 801f1b0:	000f      	movs	r7, r1
 801f1b2:	1124      	asrs	r4, r4, #4
 801f1b4:	d0d5      	beq.n	801f162 <_strtod_l+0x54a>
 801f1b6:	2c1f      	cmp	r4, #31
 801f1b8:	dd28      	ble.n	801f20c <_strtod_l+0x5f4>
 801f1ba:	2300      	movs	r3, #0
 801f1bc:	9306      	str	r3, [sp, #24]
 801f1be:	9307      	str	r3, [sp, #28]
 801f1c0:	930d      	str	r3, [sp, #52]	@ 0x34
 801f1c2:	9308      	str	r3, [sp, #32]
 801f1c4:	2322      	movs	r3, #34	@ 0x22
 801f1c6:	9a05      	ldr	r2, [sp, #20]
 801f1c8:	2600      	movs	r6, #0
 801f1ca:	6013      	str	r3, [r2, #0]
 801f1cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1ce:	2700      	movs	r7, #0
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d000      	beq.n	801f1d6 <_strtod_l+0x5be>
 801f1d4:	e763      	b.n	801f09e <_strtod_l+0x486>
 801f1d6:	e55a      	b.n	801ec8e <_strtod_l+0x76>
 801f1d8:	00004e1f 	.word	0x00004e1f
 801f1dc:	08026506 	.word	0x08026506
 801f1e0:	080263a4 	.word	0x080263a4
 801f1e4:	7ff00000 	.word	0x7ff00000
 801f1e8:	080264fe 	.word	0x080264fe
 801f1ec:	08026538 	.word	0x08026538
 801f1f0:	080267c4 	.word	0x080267c4
 801f1f4:	080266b0 	.word	0x080266b0
 801f1f8:	08026688 	.word	0x08026688
 801f1fc:	fcb00000 	.word	0xfcb00000
 801f200:	7ca00000 	.word	0x7ca00000
 801f204:	7c900000 	.word	0x7c900000
 801f208:	7fefffff 	.word	0x7fefffff
 801f20c:	2310      	movs	r3, #16
 801f20e:	0022      	movs	r2, r4
 801f210:	401a      	ands	r2, r3
 801f212:	9209      	str	r2, [sp, #36]	@ 0x24
 801f214:	421c      	tst	r4, r3
 801f216:	d001      	beq.n	801f21c <_strtod_l+0x604>
 801f218:	335a      	adds	r3, #90	@ 0x5a
 801f21a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f21c:	0030      	movs	r0, r6
 801f21e:	0039      	movs	r1, r7
 801f220:	2300      	movs	r3, #0
 801f222:	4dbf      	ldr	r5, [pc, #764]	@ (801f520 <_strtod_l+0x908>)
 801f224:	2201      	movs	r2, #1
 801f226:	4214      	tst	r4, r2
 801f228:	d004      	beq.n	801f234 <_strtod_l+0x61c>
 801f22a:	682a      	ldr	r2, [r5, #0]
 801f22c:	686b      	ldr	r3, [r5, #4]
 801f22e:	f7e3 fa05 	bl	800263c <__aeabi_dmul>
 801f232:	2301      	movs	r3, #1
 801f234:	1064      	asrs	r4, r4, #1
 801f236:	3508      	adds	r5, #8
 801f238:	2c00      	cmp	r4, #0
 801f23a:	d1f3      	bne.n	801f224 <_strtod_l+0x60c>
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d001      	beq.n	801f244 <_strtod_l+0x62c>
 801f240:	0006      	movs	r6, r0
 801f242:	000f      	movs	r7, r1
 801f244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f246:	2b00      	cmp	r3, #0
 801f248:	d00d      	beq.n	801f266 <_strtod_l+0x64e>
 801f24a:	236b      	movs	r3, #107	@ 0x6b
 801f24c:	007a      	lsls	r2, r7, #1
 801f24e:	0d52      	lsrs	r2, r2, #21
 801f250:	0039      	movs	r1, r7
 801f252:	1a9b      	subs	r3, r3, r2
 801f254:	2b00      	cmp	r3, #0
 801f256:	dd06      	ble.n	801f266 <_strtod_l+0x64e>
 801f258:	2b1f      	cmp	r3, #31
 801f25a:	dd5a      	ble.n	801f312 <_strtod_l+0x6fa>
 801f25c:	2600      	movs	r6, #0
 801f25e:	2b34      	cmp	r3, #52	@ 0x34
 801f260:	dd50      	ble.n	801f304 <_strtod_l+0x6ec>
 801f262:	27dc      	movs	r7, #220	@ 0xdc
 801f264:	04bf      	lsls	r7, r7, #18
 801f266:	2200      	movs	r2, #0
 801f268:	2300      	movs	r3, #0
 801f26a:	0030      	movs	r0, r6
 801f26c:	0039      	movs	r1, r7
 801f26e:	f7e1 f91f 	bl	80004b0 <__aeabi_dcmpeq>
 801f272:	2800      	cmp	r0, #0
 801f274:	d1a1      	bne.n	801f1ba <_strtod_l+0x5a2>
 801f276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f278:	9a08      	ldr	r2, [sp, #32]
 801f27a:	9300      	str	r3, [sp, #0]
 801f27c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f27e:	9b06      	ldr	r3, [sp, #24]
 801f280:	9805      	ldr	r0, [sp, #20]
 801f282:	f002 fec5 	bl	8022010 <__s2b>
 801f286:	900d      	str	r0, [sp, #52]	@ 0x34
 801f288:	2800      	cmp	r0, #0
 801f28a:	d100      	bne.n	801f28e <_strtod_l+0x676>
 801f28c:	e6f9      	b.n	801f082 <_strtod_l+0x46a>
 801f28e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f290:	9907      	ldr	r1, [sp, #28]
 801f292:	17da      	asrs	r2, r3, #31
 801f294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f296:	1a5b      	subs	r3, r3, r1
 801f298:	401a      	ands	r2, r3
 801f29a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f29c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f29e:	43db      	mvns	r3, r3
 801f2a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f2a2:	17db      	asrs	r3, r3, #31
 801f2a4:	401a      	ands	r2, r3
 801f2a6:	2300      	movs	r3, #0
 801f2a8:	921a      	str	r2, [sp, #104]	@ 0x68
 801f2aa:	9306      	str	r3, [sp, #24]
 801f2ac:	9307      	str	r3, [sp, #28]
 801f2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f2b0:	9805      	ldr	r0, [sp, #20]
 801f2b2:	6859      	ldr	r1, [r3, #4]
 801f2b4:	f002 fe00 	bl	8021eb8 <_Balloc>
 801f2b8:	9008      	str	r0, [sp, #32]
 801f2ba:	2800      	cmp	r0, #0
 801f2bc:	d100      	bne.n	801f2c0 <_strtod_l+0x6a8>
 801f2be:	e6e5      	b.n	801f08c <_strtod_l+0x474>
 801f2c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f2c2:	300c      	adds	r0, #12
 801f2c4:	0019      	movs	r1, r3
 801f2c6:	691a      	ldr	r2, [r3, #16]
 801f2c8:	310c      	adds	r1, #12
 801f2ca:	3202      	adds	r2, #2
 801f2cc:	0092      	lsls	r2, r2, #2
 801f2ce:	f001 faef 	bl	80208b0 <memcpy>
 801f2d2:	ab20      	add	r3, sp, #128	@ 0x80
 801f2d4:	9301      	str	r3, [sp, #4]
 801f2d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f2d8:	9300      	str	r3, [sp, #0]
 801f2da:	0032      	movs	r2, r6
 801f2dc:	003b      	movs	r3, r7
 801f2de:	9805      	ldr	r0, [sp, #20]
 801f2e0:	9610      	str	r6, [sp, #64]	@ 0x40
 801f2e2:	9711      	str	r7, [sp, #68]	@ 0x44
 801f2e4:	f003 f9e4 	bl	80226b0 <__d2b>
 801f2e8:	901e      	str	r0, [sp, #120]	@ 0x78
 801f2ea:	2800      	cmp	r0, #0
 801f2ec:	d100      	bne.n	801f2f0 <_strtod_l+0x6d8>
 801f2ee:	e6cd      	b.n	801f08c <_strtod_l+0x474>
 801f2f0:	2101      	movs	r1, #1
 801f2f2:	9805      	ldr	r0, [sp, #20]
 801f2f4:	f002 ff28 	bl	8022148 <__i2b>
 801f2f8:	9007      	str	r0, [sp, #28]
 801f2fa:	2800      	cmp	r0, #0
 801f2fc:	d10e      	bne.n	801f31c <_strtod_l+0x704>
 801f2fe:	2300      	movs	r3, #0
 801f300:	9307      	str	r3, [sp, #28]
 801f302:	e6c3      	b.n	801f08c <_strtod_l+0x474>
 801f304:	234b      	movs	r3, #75	@ 0x4b
 801f306:	1a9a      	subs	r2, r3, r2
 801f308:	3b4c      	subs	r3, #76	@ 0x4c
 801f30a:	4093      	lsls	r3, r2
 801f30c:	4019      	ands	r1, r3
 801f30e:	000f      	movs	r7, r1
 801f310:	e7a9      	b.n	801f266 <_strtod_l+0x64e>
 801f312:	2201      	movs	r2, #1
 801f314:	4252      	negs	r2, r2
 801f316:	409a      	lsls	r2, r3
 801f318:	4016      	ands	r6, r2
 801f31a:	e7a4      	b.n	801f266 <_strtod_l+0x64e>
 801f31c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f31e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f320:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801f322:	1ad4      	subs	r4, r2, r3
 801f324:	2b00      	cmp	r3, #0
 801f326:	db01      	blt.n	801f32c <_strtod_l+0x714>
 801f328:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801f32a:	195d      	adds	r5, r3, r5
 801f32c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f32e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f330:	1a5b      	subs	r3, r3, r1
 801f332:	2136      	movs	r1, #54	@ 0x36
 801f334:	189b      	adds	r3, r3, r2
 801f336:	1a8a      	subs	r2, r1, r2
 801f338:	497a      	ldr	r1, [pc, #488]	@ (801f524 <_strtod_l+0x90c>)
 801f33a:	2001      	movs	r0, #1
 801f33c:	468c      	mov	ip, r1
 801f33e:	2100      	movs	r1, #0
 801f340:	3b01      	subs	r3, #1
 801f342:	9116      	str	r1, [sp, #88]	@ 0x58
 801f344:	9014      	str	r0, [sp, #80]	@ 0x50
 801f346:	4563      	cmp	r3, ip
 801f348:	da06      	bge.n	801f358 <_strtod_l+0x740>
 801f34a:	4661      	mov	r1, ip
 801f34c:	1ac9      	subs	r1, r1, r3
 801f34e:	1a52      	subs	r2, r2, r1
 801f350:	291f      	cmp	r1, #31
 801f352:	dc3f      	bgt.n	801f3d4 <_strtod_l+0x7bc>
 801f354:	4088      	lsls	r0, r1
 801f356:	9014      	str	r0, [sp, #80]	@ 0x50
 801f358:	18ab      	adds	r3, r5, r2
 801f35a:	930e      	str	r3, [sp, #56]	@ 0x38
 801f35c:	18a4      	adds	r4, r4, r2
 801f35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f362:	191c      	adds	r4, r3, r4
 801f364:	002b      	movs	r3, r5
 801f366:	4295      	cmp	r5, r2
 801f368:	dd00      	ble.n	801f36c <_strtod_l+0x754>
 801f36a:	0013      	movs	r3, r2
 801f36c:	42a3      	cmp	r3, r4
 801f36e:	dd00      	ble.n	801f372 <_strtod_l+0x75a>
 801f370:	0023      	movs	r3, r4
 801f372:	2b00      	cmp	r3, #0
 801f374:	dd04      	ble.n	801f380 <_strtod_l+0x768>
 801f376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f378:	1ae4      	subs	r4, r4, r3
 801f37a:	1ad2      	subs	r2, r2, r3
 801f37c:	920e      	str	r2, [sp, #56]	@ 0x38
 801f37e:	1aed      	subs	r5, r5, r3
 801f380:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f382:	2b00      	cmp	r3, #0
 801f384:	dd16      	ble.n	801f3b4 <_strtod_l+0x79c>
 801f386:	001a      	movs	r2, r3
 801f388:	9907      	ldr	r1, [sp, #28]
 801f38a:	9805      	ldr	r0, [sp, #20]
 801f38c:	f002 ffa6 	bl	80222dc <__pow5mult>
 801f390:	9007      	str	r0, [sp, #28]
 801f392:	2800      	cmp	r0, #0
 801f394:	d0b3      	beq.n	801f2fe <_strtod_l+0x6e6>
 801f396:	0001      	movs	r1, r0
 801f398:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f39a:	9805      	ldr	r0, [sp, #20]
 801f39c:	f002 feec 	bl	8022178 <__multiply>
 801f3a0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f3a2:	2800      	cmp	r0, #0
 801f3a4:	d100      	bne.n	801f3a8 <_strtod_l+0x790>
 801f3a6:	e671      	b.n	801f08c <_strtod_l+0x474>
 801f3a8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f3aa:	9805      	ldr	r0, [sp, #20]
 801f3ac:	f002 fdc8 	bl	8021f40 <_Bfree>
 801f3b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f3b2:	931e      	str	r3, [sp, #120]	@ 0x78
 801f3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	dc12      	bgt.n	801f3e0 <_strtod_l+0x7c8>
 801f3ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	dd18      	ble.n	801f3f2 <_strtod_l+0x7da>
 801f3c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f3c2:	9908      	ldr	r1, [sp, #32]
 801f3c4:	9805      	ldr	r0, [sp, #20]
 801f3c6:	f002 ff89 	bl	80222dc <__pow5mult>
 801f3ca:	9008      	str	r0, [sp, #32]
 801f3cc:	2800      	cmp	r0, #0
 801f3ce:	d110      	bne.n	801f3f2 <_strtod_l+0x7da>
 801f3d0:	2300      	movs	r3, #0
 801f3d2:	e65a      	b.n	801f08a <_strtod_l+0x472>
 801f3d4:	4954      	ldr	r1, [pc, #336]	@ (801f528 <_strtod_l+0x910>)
 801f3d6:	1acb      	subs	r3, r1, r3
 801f3d8:	0001      	movs	r1, r0
 801f3da:	4099      	lsls	r1, r3
 801f3dc:	9116      	str	r1, [sp, #88]	@ 0x58
 801f3de:	e7ba      	b.n	801f356 <_strtod_l+0x73e>
 801f3e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f3e2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f3e4:	9805      	ldr	r0, [sp, #20]
 801f3e6:	f002 ffd5 	bl	8022394 <__lshift>
 801f3ea:	901e      	str	r0, [sp, #120]	@ 0x78
 801f3ec:	2800      	cmp	r0, #0
 801f3ee:	d1e4      	bne.n	801f3ba <_strtod_l+0x7a2>
 801f3f0:	e64c      	b.n	801f08c <_strtod_l+0x474>
 801f3f2:	2c00      	cmp	r4, #0
 801f3f4:	dd07      	ble.n	801f406 <_strtod_l+0x7ee>
 801f3f6:	0022      	movs	r2, r4
 801f3f8:	9908      	ldr	r1, [sp, #32]
 801f3fa:	9805      	ldr	r0, [sp, #20]
 801f3fc:	f002 ffca 	bl	8022394 <__lshift>
 801f400:	9008      	str	r0, [sp, #32]
 801f402:	2800      	cmp	r0, #0
 801f404:	d0e4      	beq.n	801f3d0 <_strtod_l+0x7b8>
 801f406:	2d00      	cmp	r5, #0
 801f408:	dd08      	ble.n	801f41c <_strtod_l+0x804>
 801f40a:	002a      	movs	r2, r5
 801f40c:	9907      	ldr	r1, [sp, #28]
 801f40e:	9805      	ldr	r0, [sp, #20]
 801f410:	f002 ffc0 	bl	8022394 <__lshift>
 801f414:	9007      	str	r0, [sp, #28]
 801f416:	2800      	cmp	r0, #0
 801f418:	d100      	bne.n	801f41c <_strtod_l+0x804>
 801f41a:	e637      	b.n	801f08c <_strtod_l+0x474>
 801f41c:	9a08      	ldr	r2, [sp, #32]
 801f41e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f420:	9805      	ldr	r0, [sp, #20]
 801f422:	f003 f83f 	bl	80224a4 <__mdiff>
 801f426:	9006      	str	r0, [sp, #24]
 801f428:	2800      	cmp	r0, #0
 801f42a:	d100      	bne.n	801f42e <_strtod_l+0x816>
 801f42c:	e62e      	b.n	801f08c <_strtod_l+0x474>
 801f42e:	68c3      	ldr	r3, [r0, #12]
 801f430:	9907      	ldr	r1, [sp, #28]
 801f432:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f434:	2300      	movs	r3, #0
 801f436:	60c3      	str	r3, [r0, #12]
 801f438:	f003 f818 	bl	802246c <__mcmp>
 801f43c:	2800      	cmp	r0, #0
 801f43e:	da3b      	bge.n	801f4b8 <_strtod_l+0x8a0>
 801f440:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f442:	4333      	orrs	r3, r6
 801f444:	d167      	bne.n	801f516 <_strtod_l+0x8fe>
 801f446:	033b      	lsls	r3, r7, #12
 801f448:	d165      	bne.n	801f516 <_strtod_l+0x8fe>
 801f44a:	22d6      	movs	r2, #214	@ 0xd6
 801f44c:	4b37      	ldr	r3, [pc, #220]	@ (801f52c <_strtod_l+0x914>)
 801f44e:	04d2      	lsls	r2, r2, #19
 801f450:	403b      	ands	r3, r7
 801f452:	4293      	cmp	r3, r2
 801f454:	d95f      	bls.n	801f516 <_strtod_l+0x8fe>
 801f456:	9b06      	ldr	r3, [sp, #24]
 801f458:	695b      	ldr	r3, [r3, #20]
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	d103      	bne.n	801f466 <_strtod_l+0x84e>
 801f45e:	9b06      	ldr	r3, [sp, #24]
 801f460:	691b      	ldr	r3, [r3, #16]
 801f462:	2b01      	cmp	r3, #1
 801f464:	dd57      	ble.n	801f516 <_strtod_l+0x8fe>
 801f466:	9906      	ldr	r1, [sp, #24]
 801f468:	2201      	movs	r2, #1
 801f46a:	9805      	ldr	r0, [sp, #20]
 801f46c:	f002 ff92 	bl	8022394 <__lshift>
 801f470:	9907      	ldr	r1, [sp, #28]
 801f472:	9006      	str	r0, [sp, #24]
 801f474:	f002 fffa 	bl	802246c <__mcmp>
 801f478:	2800      	cmp	r0, #0
 801f47a:	dd4c      	ble.n	801f516 <_strtod_l+0x8fe>
 801f47c:	4b2b      	ldr	r3, [pc, #172]	@ (801f52c <_strtod_l+0x914>)
 801f47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f480:	403b      	ands	r3, r7
 801f482:	2a00      	cmp	r2, #0
 801f484:	d074      	beq.n	801f570 <_strtod_l+0x958>
 801f486:	22d6      	movs	r2, #214	@ 0xd6
 801f488:	04d2      	lsls	r2, r2, #19
 801f48a:	4293      	cmp	r3, r2
 801f48c:	d870      	bhi.n	801f570 <_strtod_l+0x958>
 801f48e:	22dc      	movs	r2, #220	@ 0xdc
 801f490:	0492      	lsls	r2, r2, #18
 801f492:	4293      	cmp	r3, r2
 801f494:	d800      	bhi.n	801f498 <_strtod_l+0x880>
 801f496:	e695      	b.n	801f1c4 <_strtod_l+0x5ac>
 801f498:	0030      	movs	r0, r6
 801f49a:	0039      	movs	r1, r7
 801f49c:	4b24      	ldr	r3, [pc, #144]	@ (801f530 <_strtod_l+0x918>)
 801f49e:	2200      	movs	r2, #0
 801f4a0:	f7e3 f8cc 	bl	800263c <__aeabi_dmul>
 801f4a4:	4b21      	ldr	r3, [pc, #132]	@ (801f52c <_strtod_l+0x914>)
 801f4a6:	0006      	movs	r6, r0
 801f4a8:	000f      	movs	r7, r1
 801f4aa:	420b      	tst	r3, r1
 801f4ac:	d000      	beq.n	801f4b0 <_strtod_l+0x898>
 801f4ae:	e5f6      	b.n	801f09e <_strtod_l+0x486>
 801f4b0:	2322      	movs	r3, #34	@ 0x22
 801f4b2:	9a05      	ldr	r2, [sp, #20]
 801f4b4:	6013      	str	r3, [r2, #0]
 801f4b6:	e5f2      	b.n	801f09e <_strtod_l+0x486>
 801f4b8:	970e      	str	r7, [sp, #56]	@ 0x38
 801f4ba:	2800      	cmp	r0, #0
 801f4bc:	d175      	bne.n	801f5aa <_strtod_l+0x992>
 801f4be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f4c0:	033b      	lsls	r3, r7, #12
 801f4c2:	0b1b      	lsrs	r3, r3, #12
 801f4c4:	2a00      	cmp	r2, #0
 801f4c6:	d039      	beq.n	801f53c <_strtod_l+0x924>
 801f4c8:	4a1a      	ldr	r2, [pc, #104]	@ (801f534 <_strtod_l+0x91c>)
 801f4ca:	4293      	cmp	r3, r2
 801f4cc:	d138      	bne.n	801f540 <_strtod_l+0x928>
 801f4ce:	2101      	movs	r1, #1
 801f4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4d2:	4249      	negs	r1, r1
 801f4d4:	0032      	movs	r2, r6
 801f4d6:	0008      	movs	r0, r1
 801f4d8:	2b00      	cmp	r3, #0
 801f4da:	d00b      	beq.n	801f4f4 <_strtod_l+0x8dc>
 801f4dc:	24d4      	movs	r4, #212	@ 0xd4
 801f4de:	4b13      	ldr	r3, [pc, #76]	@ (801f52c <_strtod_l+0x914>)
 801f4e0:	0008      	movs	r0, r1
 801f4e2:	403b      	ands	r3, r7
 801f4e4:	04e4      	lsls	r4, r4, #19
 801f4e6:	42a3      	cmp	r3, r4
 801f4e8:	d804      	bhi.n	801f4f4 <_strtod_l+0x8dc>
 801f4ea:	306c      	adds	r0, #108	@ 0x6c
 801f4ec:	0d1b      	lsrs	r3, r3, #20
 801f4ee:	1ac3      	subs	r3, r0, r3
 801f4f0:	4099      	lsls	r1, r3
 801f4f2:	0008      	movs	r0, r1
 801f4f4:	4282      	cmp	r2, r0
 801f4f6:	d123      	bne.n	801f540 <_strtod_l+0x928>
 801f4f8:	4b0f      	ldr	r3, [pc, #60]	@ (801f538 <_strtod_l+0x920>)
 801f4fa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f4fc:	4299      	cmp	r1, r3
 801f4fe:	d102      	bne.n	801f506 <_strtod_l+0x8ee>
 801f500:	3201      	adds	r2, #1
 801f502:	d100      	bne.n	801f506 <_strtod_l+0x8ee>
 801f504:	e5c2      	b.n	801f08c <_strtod_l+0x474>
 801f506:	4b09      	ldr	r3, [pc, #36]	@ (801f52c <_strtod_l+0x914>)
 801f508:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f50a:	2600      	movs	r6, #0
 801f50c:	401a      	ands	r2, r3
 801f50e:	0013      	movs	r3, r2
 801f510:	2280      	movs	r2, #128	@ 0x80
 801f512:	0352      	lsls	r2, r2, #13
 801f514:	189f      	adds	r7, r3, r2
 801f516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d1bd      	bne.n	801f498 <_strtod_l+0x880>
 801f51c:	e5bf      	b.n	801f09e <_strtod_l+0x486>
 801f51e:	46c0      	nop			@ (mov r8, r8)
 801f520:	080263d0 	.word	0x080263d0
 801f524:	fffffc02 	.word	0xfffffc02
 801f528:	fffffbe2 	.word	0xfffffbe2
 801f52c:	7ff00000 	.word	0x7ff00000
 801f530:	39500000 	.word	0x39500000
 801f534:	000fffff 	.word	0x000fffff
 801f538:	7fefffff 	.word	0x7fefffff
 801f53c:	4333      	orrs	r3, r6
 801f53e:	d09d      	beq.n	801f47c <_strtod_l+0x864>
 801f540:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f542:	2b00      	cmp	r3, #0
 801f544:	d01c      	beq.n	801f580 <_strtod_l+0x968>
 801f546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f548:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f54a:	4213      	tst	r3, r2
 801f54c:	d0e3      	beq.n	801f516 <_strtod_l+0x8fe>
 801f54e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f550:	0030      	movs	r0, r6
 801f552:	0039      	movs	r1, r7
 801f554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f556:	2b00      	cmp	r3, #0
 801f558:	d016      	beq.n	801f588 <_strtod_l+0x970>
 801f55a:	f7ff fb45 	bl	801ebe8 <sulp>
 801f55e:	0002      	movs	r2, r0
 801f560:	000b      	movs	r3, r1
 801f562:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f564:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f566:	f7e2 f8c1 	bl	80016ec <__aeabi_dadd>
 801f56a:	0006      	movs	r6, r0
 801f56c:	000f      	movs	r7, r1
 801f56e:	e7d2      	b.n	801f516 <_strtod_l+0x8fe>
 801f570:	2601      	movs	r6, #1
 801f572:	4a92      	ldr	r2, [pc, #584]	@ (801f7bc <_strtod_l+0xba4>)
 801f574:	4276      	negs	r6, r6
 801f576:	189b      	adds	r3, r3, r2
 801f578:	4a91      	ldr	r2, [pc, #580]	@ (801f7c0 <_strtod_l+0xba8>)
 801f57a:	431a      	orrs	r2, r3
 801f57c:	0017      	movs	r7, r2
 801f57e:	e7ca      	b.n	801f516 <_strtod_l+0x8fe>
 801f580:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f582:	4233      	tst	r3, r6
 801f584:	d0c7      	beq.n	801f516 <_strtod_l+0x8fe>
 801f586:	e7e2      	b.n	801f54e <_strtod_l+0x936>
 801f588:	f7ff fb2e 	bl	801ebe8 <sulp>
 801f58c:	0002      	movs	r2, r0
 801f58e:	000b      	movs	r3, r1
 801f590:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f592:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f594:	f7e3 fb1a 	bl	8002bcc <__aeabi_dsub>
 801f598:	2200      	movs	r2, #0
 801f59a:	2300      	movs	r3, #0
 801f59c:	0006      	movs	r6, r0
 801f59e:	000f      	movs	r7, r1
 801f5a0:	f7e0 ff86 	bl	80004b0 <__aeabi_dcmpeq>
 801f5a4:	2800      	cmp	r0, #0
 801f5a6:	d0b6      	beq.n	801f516 <_strtod_l+0x8fe>
 801f5a8:	e60c      	b.n	801f1c4 <_strtod_l+0x5ac>
 801f5aa:	9907      	ldr	r1, [sp, #28]
 801f5ac:	9806      	ldr	r0, [sp, #24]
 801f5ae:	f003 f8df 	bl	8022770 <__ratio>
 801f5b2:	2380      	movs	r3, #128	@ 0x80
 801f5b4:	2200      	movs	r2, #0
 801f5b6:	05db      	lsls	r3, r3, #23
 801f5b8:	0004      	movs	r4, r0
 801f5ba:	000d      	movs	r5, r1
 801f5bc:	f7e0 ff88 	bl	80004d0 <__aeabi_dcmple>
 801f5c0:	2800      	cmp	r0, #0
 801f5c2:	d06c      	beq.n	801f69e <_strtod_l+0xa86>
 801f5c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d177      	bne.n	801f6ba <_strtod_l+0xaa2>
 801f5ca:	2e00      	cmp	r6, #0
 801f5cc:	d157      	bne.n	801f67e <_strtod_l+0xa66>
 801f5ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5d0:	031b      	lsls	r3, r3, #12
 801f5d2:	d15a      	bne.n	801f68a <_strtod_l+0xa72>
 801f5d4:	2200      	movs	r2, #0
 801f5d6:	0020      	movs	r0, r4
 801f5d8:	0029      	movs	r1, r5
 801f5da:	4b7a      	ldr	r3, [pc, #488]	@ (801f7c4 <_strtod_l+0xbac>)
 801f5dc:	f7e0 ff6e 	bl	80004bc <__aeabi_dcmplt>
 801f5e0:	2800      	cmp	r0, #0
 801f5e2:	d159      	bne.n	801f698 <_strtod_l+0xa80>
 801f5e4:	0020      	movs	r0, r4
 801f5e6:	0029      	movs	r1, r5
 801f5e8:	2200      	movs	r2, #0
 801f5ea:	4b77      	ldr	r3, [pc, #476]	@ (801f7c8 <_strtod_l+0xbb0>)
 801f5ec:	f7e3 f826 	bl	800263c <__aeabi_dmul>
 801f5f0:	0004      	movs	r4, r0
 801f5f2:	000d      	movs	r5, r1
 801f5f4:	2380      	movs	r3, #128	@ 0x80
 801f5f6:	061b      	lsls	r3, r3, #24
 801f5f8:	18eb      	adds	r3, r5, r3
 801f5fa:	940a      	str	r4, [sp, #40]	@ 0x28
 801f5fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f5fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f600:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f602:	9214      	str	r2, [sp, #80]	@ 0x50
 801f604:	9315      	str	r3, [sp, #84]	@ 0x54
 801f606:	4a71      	ldr	r2, [pc, #452]	@ (801f7cc <_strtod_l+0xbb4>)
 801f608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f60a:	4013      	ands	r3, r2
 801f60c:	9316      	str	r3, [sp, #88]	@ 0x58
 801f60e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f610:	4b6f      	ldr	r3, [pc, #444]	@ (801f7d0 <_strtod_l+0xbb8>)
 801f612:	429a      	cmp	r2, r3
 801f614:	d000      	beq.n	801f618 <_strtod_l+0xa00>
 801f616:	e087      	b.n	801f728 <_strtod_l+0xb10>
 801f618:	4a6e      	ldr	r2, [pc, #440]	@ (801f7d4 <_strtod_l+0xbbc>)
 801f61a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f61c:	4694      	mov	ip, r2
 801f61e:	4463      	add	r3, ip
 801f620:	001f      	movs	r7, r3
 801f622:	0030      	movs	r0, r6
 801f624:	0019      	movs	r1, r3
 801f626:	f002 ffd7 	bl	80225d8 <__ulp>
 801f62a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f62c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f62e:	f7e3 f805 	bl	800263c <__aeabi_dmul>
 801f632:	0032      	movs	r2, r6
 801f634:	003b      	movs	r3, r7
 801f636:	f7e2 f859 	bl	80016ec <__aeabi_dadd>
 801f63a:	4a64      	ldr	r2, [pc, #400]	@ (801f7cc <_strtod_l+0xbb4>)
 801f63c:	4b66      	ldr	r3, [pc, #408]	@ (801f7d8 <_strtod_l+0xbc0>)
 801f63e:	0006      	movs	r6, r0
 801f640:	400a      	ands	r2, r1
 801f642:	429a      	cmp	r2, r3
 801f644:	d940      	bls.n	801f6c8 <_strtod_l+0xab0>
 801f646:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f648:	4a64      	ldr	r2, [pc, #400]	@ (801f7dc <_strtod_l+0xbc4>)
 801f64a:	4293      	cmp	r3, r2
 801f64c:	d103      	bne.n	801f656 <_strtod_l+0xa3e>
 801f64e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f650:	3301      	adds	r3, #1
 801f652:	d100      	bne.n	801f656 <_strtod_l+0xa3e>
 801f654:	e51a      	b.n	801f08c <_strtod_l+0x474>
 801f656:	2601      	movs	r6, #1
 801f658:	4f60      	ldr	r7, [pc, #384]	@ (801f7dc <_strtod_l+0xbc4>)
 801f65a:	4276      	negs	r6, r6
 801f65c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f65e:	9805      	ldr	r0, [sp, #20]
 801f660:	f002 fc6e 	bl	8021f40 <_Bfree>
 801f664:	9908      	ldr	r1, [sp, #32]
 801f666:	9805      	ldr	r0, [sp, #20]
 801f668:	f002 fc6a 	bl	8021f40 <_Bfree>
 801f66c:	9907      	ldr	r1, [sp, #28]
 801f66e:	9805      	ldr	r0, [sp, #20]
 801f670:	f002 fc66 	bl	8021f40 <_Bfree>
 801f674:	9906      	ldr	r1, [sp, #24]
 801f676:	9805      	ldr	r0, [sp, #20]
 801f678:	f002 fc62 	bl	8021f40 <_Bfree>
 801f67c:	e617      	b.n	801f2ae <_strtod_l+0x696>
 801f67e:	2e01      	cmp	r6, #1
 801f680:	d103      	bne.n	801f68a <_strtod_l+0xa72>
 801f682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f684:	2b00      	cmp	r3, #0
 801f686:	d100      	bne.n	801f68a <_strtod_l+0xa72>
 801f688:	e59c      	b.n	801f1c4 <_strtod_l+0x5ac>
 801f68a:	2300      	movs	r3, #0
 801f68c:	4c54      	ldr	r4, [pc, #336]	@ (801f7e0 <_strtod_l+0xbc8>)
 801f68e:	4d4d      	ldr	r5, [pc, #308]	@ (801f7c4 <_strtod_l+0xbac>)
 801f690:	930a      	str	r3, [sp, #40]	@ 0x28
 801f692:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f694:	2400      	movs	r4, #0
 801f696:	e7b2      	b.n	801f5fe <_strtod_l+0x9e6>
 801f698:	2400      	movs	r4, #0
 801f69a:	4d4b      	ldr	r5, [pc, #300]	@ (801f7c8 <_strtod_l+0xbb0>)
 801f69c:	e7aa      	b.n	801f5f4 <_strtod_l+0x9dc>
 801f69e:	0020      	movs	r0, r4
 801f6a0:	0029      	movs	r1, r5
 801f6a2:	4b49      	ldr	r3, [pc, #292]	@ (801f7c8 <_strtod_l+0xbb0>)
 801f6a4:	2200      	movs	r2, #0
 801f6a6:	f7e2 ffc9 	bl	800263c <__aeabi_dmul>
 801f6aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6ac:	0004      	movs	r4, r0
 801f6ae:	000d      	movs	r5, r1
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d09f      	beq.n	801f5f4 <_strtod_l+0x9dc>
 801f6b4:	940a      	str	r4, [sp, #40]	@ 0x28
 801f6b6:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f6b8:	e7a1      	b.n	801f5fe <_strtod_l+0x9e6>
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	4c41      	ldr	r4, [pc, #260]	@ (801f7c4 <_strtod_l+0xbac>)
 801f6be:	0025      	movs	r5, r4
 801f6c0:	930a      	str	r3, [sp, #40]	@ 0x28
 801f6c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f6c4:	001c      	movs	r4, r3
 801f6c6:	e79a      	b.n	801f5fe <_strtod_l+0x9e6>
 801f6c8:	23d4      	movs	r3, #212	@ 0xd4
 801f6ca:	049b      	lsls	r3, r3, #18
 801f6cc:	18cf      	adds	r7, r1, r3
 801f6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6d0:	9710      	str	r7, [sp, #64]	@ 0x40
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d1c2      	bne.n	801f65c <_strtod_l+0xa44>
 801f6d6:	4b3d      	ldr	r3, [pc, #244]	@ (801f7cc <_strtod_l+0xbb4>)
 801f6d8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f6da:	403b      	ands	r3, r7
 801f6dc:	429a      	cmp	r2, r3
 801f6de:	d1bd      	bne.n	801f65c <_strtod_l+0xa44>
 801f6e0:	0020      	movs	r0, r4
 801f6e2:	0029      	movs	r1, r5
 801f6e4:	f7e0 ffd0 	bl	8000688 <__aeabi_d2lz>
 801f6e8:	f7e1 f808 	bl	80006fc <__aeabi_l2d>
 801f6ec:	0002      	movs	r2, r0
 801f6ee:	000b      	movs	r3, r1
 801f6f0:	0020      	movs	r0, r4
 801f6f2:	0029      	movs	r1, r5
 801f6f4:	f7e3 fa6a 	bl	8002bcc <__aeabi_dsub>
 801f6f8:	033c      	lsls	r4, r7, #12
 801f6fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6fc:	0b24      	lsrs	r4, r4, #12
 801f6fe:	4334      	orrs	r4, r6
 801f700:	900e      	str	r0, [sp, #56]	@ 0x38
 801f702:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f704:	4a37      	ldr	r2, [pc, #220]	@ (801f7e4 <_strtod_l+0xbcc>)
 801f706:	431c      	orrs	r4, r3
 801f708:	d052      	beq.n	801f7b0 <_strtod_l+0xb98>
 801f70a:	4b37      	ldr	r3, [pc, #220]	@ (801f7e8 <_strtod_l+0xbd0>)
 801f70c:	f7e0 fed6 	bl	80004bc <__aeabi_dcmplt>
 801f710:	2800      	cmp	r0, #0
 801f712:	d000      	beq.n	801f716 <_strtod_l+0xafe>
 801f714:	e4c3      	b.n	801f09e <_strtod_l+0x486>
 801f716:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f718:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f71a:	4a34      	ldr	r2, [pc, #208]	@ (801f7ec <_strtod_l+0xbd4>)
 801f71c:	4b2a      	ldr	r3, [pc, #168]	@ (801f7c8 <_strtod_l+0xbb0>)
 801f71e:	f7e0 fee1 	bl	80004e4 <__aeabi_dcmpgt>
 801f722:	2800      	cmp	r0, #0
 801f724:	d09a      	beq.n	801f65c <_strtod_l+0xa44>
 801f726:	e4ba      	b.n	801f09e <_strtod_l+0x486>
 801f728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d02a      	beq.n	801f784 <_strtod_l+0xb6c>
 801f72e:	23d4      	movs	r3, #212	@ 0xd4
 801f730:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f732:	04db      	lsls	r3, r3, #19
 801f734:	429a      	cmp	r2, r3
 801f736:	d825      	bhi.n	801f784 <_strtod_l+0xb6c>
 801f738:	0020      	movs	r0, r4
 801f73a:	0029      	movs	r1, r5
 801f73c:	4a2c      	ldr	r2, [pc, #176]	@ (801f7f0 <_strtod_l+0xbd8>)
 801f73e:	4b2d      	ldr	r3, [pc, #180]	@ (801f7f4 <_strtod_l+0xbdc>)
 801f740:	f7e0 fec6 	bl	80004d0 <__aeabi_dcmple>
 801f744:	2800      	cmp	r0, #0
 801f746:	d016      	beq.n	801f776 <_strtod_l+0xb5e>
 801f748:	0020      	movs	r0, r4
 801f74a:	0029      	movs	r1, r5
 801f74c:	f7e0 ff7e 	bl	800064c <__aeabi_d2uiz>
 801f750:	2800      	cmp	r0, #0
 801f752:	d100      	bne.n	801f756 <_strtod_l+0xb3e>
 801f754:	3001      	adds	r0, #1
 801f756:	f7e3 fe61 	bl	800341c <__aeabi_ui2d>
 801f75a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f75c:	0004      	movs	r4, r0
 801f75e:	000d      	movs	r5, r1
 801f760:	2b00      	cmp	r3, #0
 801f762:	d122      	bne.n	801f7aa <_strtod_l+0xb92>
 801f764:	2380      	movs	r3, #128	@ 0x80
 801f766:	061b      	lsls	r3, r3, #24
 801f768:	18cb      	adds	r3, r1, r3
 801f76a:	9018      	str	r0, [sp, #96]	@ 0x60
 801f76c:	9319      	str	r3, [sp, #100]	@ 0x64
 801f76e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f772:	9214      	str	r2, [sp, #80]	@ 0x50
 801f774:	9315      	str	r3, [sp, #84]	@ 0x54
 801f776:	22d6      	movs	r2, #214	@ 0xd6
 801f778:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f77a:	04d2      	lsls	r2, r2, #19
 801f77c:	189b      	adds	r3, r3, r2
 801f77e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f780:	1a9b      	subs	r3, r3, r2
 801f782:	9315      	str	r3, [sp, #84]	@ 0x54
 801f784:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f786:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f788:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f78a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f78c:	f002 ff24 	bl	80225d8 <__ulp>
 801f790:	0002      	movs	r2, r0
 801f792:	000b      	movs	r3, r1
 801f794:	0030      	movs	r0, r6
 801f796:	0039      	movs	r1, r7
 801f798:	f7e2 ff50 	bl	800263c <__aeabi_dmul>
 801f79c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f79e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f7a0:	f7e1 ffa4 	bl	80016ec <__aeabi_dadd>
 801f7a4:	0006      	movs	r6, r0
 801f7a6:	000f      	movs	r7, r1
 801f7a8:	e791      	b.n	801f6ce <_strtod_l+0xab6>
 801f7aa:	9418      	str	r4, [sp, #96]	@ 0x60
 801f7ac:	9519      	str	r5, [sp, #100]	@ 0x64
 801f7ae:	e7de      	b.n	801f76e <_strtod_l+0xb56>
 801f7b0:	4b11      	ldr	r3, [pc, #68]	@ (801f7f8 <_strtod_l+0xbe0>)
 801f7b2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f7b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f7b6:	f7e0 fe81 	bl	80004bc <__aeabi_dcmplt>
 801f7ba:	e7b2      	b.n	801f722 <_strtod_l+0xb0a>
 801f7bc:	fff00000 	.word	0xfff00000
 801f7c0:	000fffff 	.word	0x000fffff
 801f7c4:	3ff00000 	.word	0x3ff00000
 801f7c8:	3fe00000 	.word	0x3fe00000
 801f7cc:	7ff00000 	.word	0x7ff00000
 801f7d0:	7fe00000 	.word	0x7fe00000
 801f7d4:	fcb00000 	.word	0xfcb00000
 801f7d8:	7c9fffff 	.word	0x7c9fffff
 801f7dc:	7fefffff 	.word	0x7fefffff
 801f7e0:	bff00000 	.word	0xbff00000
 801f7e4:	94a03595 	.word	0x94a03595
 801f7e8:	3fdfffff 	.word	0x3fdfffff
 801f7ec:	35afe535 	.word	0x35afe535
 801f7f0:	ffc00000 	.word	0xffc00000
 801f7f4:	41dfffff 	.word	0x41dfffff
 801f7f8:	3fcfffff 	.word	0x3fcfffff

0801f7fc <strtod>:
 801f7fc:	b510      	push	{r4, lr}
 801f7fe:	4c04      	ldr	r4, [pc, #16]	@ (801f810 <strtod+0x14>)
 801f800:	000a      	movs	r2, r1
 801f802:	0001      	movs	r1, r0
 801f804:	4b03      	ldr	r3, [pc, #12]	@ (801f814 <strtod+0x18>)
 801f806:	6820      	ldr	r0, [r4, #0]
 801f808:	f7ff fa06 	bl	801ec18 <_strtod_l>
 801f80c:	bd10      	pop	{r4, pc}
 801f80e:	46c0      	nop			@ (mov r8, r8)
 801f810:	200003d0 	.word	0x200003d0
 801f814:	20000264 	.word	0x20000264

0801f818 <_strtol_l.constprop.0>:
 801f818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f81a:	b085      	sub	sp, #20
 801f81c:	0017      	movs	r7, r2
 801f81e:	001e      	movs	r6, r3
 801f820:	9003      	str	r0, [sp, #12]
 801f822:	9101      	str	r1, [sp, #4]
 801f824:	2b24      	cmp	r3, #36	@ 0x24
 801f826:	d844      	bhi.n	801f8b2 <_strtol_l.constprop.0+0x9a>
 801f828:	000c      	movs	r4, r1
 801f82a:	2b01      	cmp	r3, #1
 801f82c:	d041      	beq.n	801f8b2 <_strtol_l.constprop.0+0x9a>
 801f82e:	4b3d      	ldr	r3, [pc, #244]	@ (801f924 <_strtol_l.constprop.0+0x10c>)
 801f830:	2208      	movs	r2, #8
 801f832:	469c      	mov	ip, r3
 801f834:	0023      	movs	r3, r4
 801f836:	4661      	mov	r1, ip
 801f838:	781d      	ldrb	r5, [r3, #0]
 801f83a:	3401      	adds	r4, #1
 801f83c:	5d48      	ldrb	r0, [r1, r5]
 801f83e:	0001      	movs	r1, r0
 801f840:	4011      	ands	r1, r2
 801f842:	4210      	tst	r0, r2
 801f844:	d1f6      	bne.n	801f834 <_strtol_l.constprop.0+0x1c>
 801f846:	2d2d      	cmp	r5, #45	@ 0x2d
 801f848:	d13a      	bne.n	801f8c0 <_strtol_l.constprop.0+0xa8>
 801f84a:	7825      	ldrb	r5, [r4, #0]
 801f84c:	1c9c      	adds	r4, r3, #2
 801f84e:	2301      	movs	r3, #1
 801f850:	9300      	str	r3, [sp, #0]
 801f852:	2210      	movs	r2, #16
 801f854:	0033      	movs	r3, r6
 801f856:	4393      	bics	r3, r2
 801f858:	d109      	bne.n	801f86e <_strtol_l.constprop.0+0x56>
 801f85a:	2d30      	cmp	r5, #48	@ 0x30
 801f85c:	d136      	bne.n	801f8cc <_strtol_l.constprop.0+0xb4>
 801f85e:	2120      	movs	r1, #32
 801f860:	7823      	ldrb	r3, [r4, #0]
 801f862:	438b      	bics	r3, r1
 801f864:	2b58      	cmp	r3, #88	@ 0x58
 801f866:	d131      	bne.n	801f8cc <_strtol_l.constprop.0+0xb4>
 801f868:	0016      	movs	r6, r2
 801f86a:	7865      	ldrb	r5, [r4, #1]
 801f86c:	3402      	adds	r4, #2
 801f86e:	4a2e      	ldr	r2, [pc, #184]	@ (801f928 <_strtol_l.constprop.0+0x110>)
 801f870:	9b00      	ldr	r3, [sp, #0]
 801f872:	4694      	mov	ip, r2
 801f874:	4463      	add	r3, ip
 801f876:	0031      	movs	r1, r6
 801f878:	0018      	movs	r0, r3
 801f87a:	9302      	str	r3, [sp, #8]
 801f87c:	f7e0 fd18 	bl	80002b0 <__aeabi_uidivmod>
 801f880:	2200      	movs	r2, #0
 801f882:	4684      	mov	ip, r0
 801f884:	0010      	movs	r0, r2
 801f886:	002b      	movs	r3, r5
 801f888:	3b30      	subs	r3, #48	@ 0x30
 801f88a:	2b09      	cmp	r3, #9
 801f88c:	d825      	bhi.n	801f8da <_strtol_l.constprop.0+0xc2>
 801f88e:	001d      	movs	r5, r3
 801f890:	42ae      	cmp	r6, r5
 801f892:	dd31      	ble.n	801f8f8 <_strtol_l.constprop.0+0xe0>
 801f894:	1c53      	adds	r3, r2, #1
 801f896:	d009      	beq.n	801f8ac <_strtol_l.constprop.0+0x94>
 801f898:	2201      	movs	r2, #1
 801f89a:	4252      	negs	r2, r2
 801f89c:	4584      	cmp	ip, r0
 801f89e:	d305      	bcc.n	801f8ac <_strtol_l.constprop.0+0x94>
 801f8a0:	d101      	bne.n	801f8a6 <_strtol_l.constprop.0+0x8e>
 801f8a2:	42a9      	cmp	r1, r5
 801f8a4:	db25      	blt.n	801f8f2 <_strtol_l.constprop.0+0xda>
 801f8a6:	2201      	movs	r2, #1
 801f8a8:	4370      	muls	r0, r6
 801f8aa:	1828      	adds	r0, r5, r0
 801f8ac:	7825      	ldrb	r5, [r4, #0]
 801f8ae:	3401      	adds	r4, #1
 801f8b0:	e7e9      	b.n	801f886 <_strtol_l.constprop.0+0x6e>
 801f8b2:	f000 ffc5 	bl	8020840 <__errno>
 801f8b6:	2316      	movs	r3, #22
 801f8b8:	6003      	str	r3, [r0, #0]
 801f8ba:	2000      	movs	r0, #0
 801f8bc:	b005      	add	sp, #20
 801f8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8c0:	9100      	str	r1, [sp, #0]
 801f8c2:	2d2b      	cmp	r5, #43	@ 0x2b
 801f8c4:	d1c5      	bne.n	801f852 <_strtol_l.constprop.0+0x3a>
 801f8c6:	7825      	ldrb	r5, [r4, #0]
 801f8c8:	1c9c      	adds	r4, r3, #2
 801f8ca:	e7c2      	b.n	801f852 <_strtol_l.constprop.0+0x3a>
 801f8cc:	2e00      	cmp	r6, #0
 801f8ce:	d1ce      	bne.n	801f86e <_strtol_l.constprop.0+0x56>
 801f8d0:	3608      	adds	r6, #8
 801f8d2:	2d30      	cmp	r5, #48	@ 0x30
 801f8d4:	d0cb      	beq.n	801f86e <_strtol_l.constprop.0+0x56>
 801f8d6:	3602      	adds	r6, #2
 801f8d8:	e7c9      	b.n	801f86e <_strtol_l.constprop.0+0x56>
 801f8da:	002b      	movs	r3, r5
 801f8dc:	3b41      	subs	r3, #65	@ 0x41
 801f8de:	2b19      	cmp	r3, #25
 801f8e0:	d801      	bhi.n	801f8e6 <_strtol_l.constprop.0+0xce>
 801f8e2:	3d37      	subs	r5, #55	@ 0x37
 801f8e4:	e7d4      	b.n	801f890 <_strtol_l.constprop.0+0x78>
 801f8e6:	002b      	movs	r3, r5
 801f8e8:	3b61      	subs	r3, #97	@ 0x61
 801f8ea:	2b19      	cmp	r3, #25
 801f8ec:	d804      	bhi.n	801f8f8 <_strtol_l.constprop.0+0xe0>
 801f8ee:	3d57      	subs	r5, #87	@ 0x57
 801f8f0:	e7ce      	b.n	801f890 <_strtol_l.constprop.0+0x78>
 801f8f2:	2201      	movs	r2, #1
 801f8f4:	4252      	negs	r2, r2
 801f8f6:	e7d9      	b.n	801f8ac <_strtol_l.constprop.0+0x94>
 801f8f8:	1c53      	adds	r3, r2, #1
 801f8fa:	d108      	bne.n	801f90e <_strtol_l.constprop.0+0xf6>
 801f8fc:	2322      	movs	r3, #34	@ 0x22
 801f8fe:	9a03      	ldr	r2, [sp, #12]
 801f900:	9802      	ldr	r0, [sp, #8]
 801f902:	6013      	str	r3, [r2, #0]
 801f904:	2f00      	cmp	r7, #0
 801f906:	d0d9      	beq.n	801f8bc <_strtol_l.constprop.0+0xa4>
 801f908:	1e63      	subs	r3, r4, #1
 801f90a:	9301      	str	r3, [sp, #4]
 801f90c:	e007      	b.n	801f91e <_strtol_l.constprop.0+0x106>
 801f90e:	9b00      	ldr	r3, [sp, #0]
 801f910:	2b00      	cmp	r3, #0
 801f912:	d000      	beq.n	801f916 <_strtol_l.constprop.0+0xfe>
 801f914:	4240      	negs	r0, r0
 801f916:	2f00      	cmp	r7, #0
 801f918:	d0d0      	beq.n	801f8bc <_strtol_l.constprop.0+0xa4>
 801f91a:	2a00      	cmp	r2, #0
 801f91c:	d1f4      	bne.n	801f908 <_strtol_l.constprop.0+0xf0>
 801f91e:	9b01      	ldr	r3, [sp, #4]
 801f920:	603b      	str	r3, [r7, #0]
 801f922:	e7cb      	b.n	801f8bc <_strtol_l.constprop.0+0xa4>
 801f924:	080263f9 	.word	0x080263f9
 801f928:	7fffffff 	.word	0x7fffffff

0801f92c <strtol>:
 801f92c:	b510      	push	{r4, lr}
 801f92e:	4c04      	ldr	r4, [pc, #16]	@ (801f940 <strtol+0x14>)
 801f930:	0013      	movs	r3, r2
 801f932:	000a      	movs	r2, r1
 801f934:	0001      	movs	r1, r0
 801f936:	6820      	ldr	r0, [r4, #0]
 801f938:	f7ff ff6e 	bl	801f818 <_strtol_l.constprop.0>
 801f93c:	bd10      	pop	{r4, pc}
 801f93e:	46c0      	nop			@ (mov r8, r8)
 801f940:	200003d0 	.word	0x200003d0

0801f944 <__cvt>:
 801f944:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f946:	001f      	movs	r7, r3
 801f948:	2300      	movs	r3, #0
 801f94a:	0016      	movs	r6, r2
 801f94c:	b08b      	sub	sp, #44	@ 0x2c
 801f94e:	429f      	cmp	r7, r3
 801f950:	da04      	bge.n	801f95c <__cvt+0x18>
 801f952:	2180      	movs	r1, #128	@ 0x80
 801f954:	0609      	lsls	r1, r1, #24
 801f956:	187b      	adds	r3, r7, r1
 801f958:	001f      	movs	r7, r3
 801f95a:	232d      	movs	r3, #45	@ 0x2d
 801f95c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f95e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f960:	7013      	strb	r3, [r2, #0]
 801f962:	2320      	movs	r3, #32
 801f964:	2203      	movs	r2, #3
 801f966:	439d      	bics	r5, r3
 801f968:	2d46      	cmp	r5, #70	@ 0x46
 801f96a:	d007      	beq.n	801f97c <__cvt+0x38>
 801f96c:	002b      	movs	r3, r5
 801f96e:	3b45      	subs	r3, #69	@ 0x45
 801f970:	4259      	negs	r1, r3
 801f972:	414b      	adcs	r3, r1
 801f974:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f976:	3a01      	subs	r2, #1
 801f978:	18cb      	adds	r3, r1, r3
 801f97a:	9310      	str	r3, [sp, #64]	@ 0x40
 801f97c:	ab09      	add	r3, sp, #36	@ 0x24
 801f97e:	9304      	str	r3, [sp, #16]
 801f980:	ab08      	add	r3, sp, #32
 801f982:	9303      	str	r3, [sp, #12]
 801f984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f986:	9200      	str	r2, [sp, #0]
 801f988:	9302      	str	r3, [sp, #8]
 801f98a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f98c:	0032      	movs	r2, r6
 801f98e:	9301      	str	r3, [sp, #4]
 801f990:	003b      	movs	r3, r7
 801f992:	f001 f82b 	bl	80209ec <_dtoa_r>
 801f996:	0004      	movs	r4, r0
 801f998:	2d47      	cmp	r5, #71	@ 0x47
 801f99a:	d11b      	bne.n	801f9d4 <__cvt+0x90>
 801f99c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f99e:	07db      	lsls	r3, r3, #31
 801f9a0:	d511      	bpl.n	801f9c6 <__cvt+0x82>
 801f9a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f9a4:	18c3      	adds	r3, r0, r3
 801f9a6:	9307      	str	r3, [sp, #28]
 801f9a8:	2200      	movs	r2, #0
 801f9aa:	2300      	movs	r3, #0
 801f9ac:	0030      	movs	r0, r6
 801f9ae:	0039      	movs	r1, r7
 801f9b0:	f7e0 fd7e 	bl	80004b0 <__aeabi_dcmpeq>
 801f9b4:	2800      	cmp	r0, #0
 801f9b6:	d001      	beq.n	801f9bc <__cvt+0x78>
 801f9b8:	9b07      	ldr	r3, [sp, #28]
 801f9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9bc:	2230      	movs	r2, #48	@ 0x30
 801f9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9c0:	9907      	ldr	r1, [sp, #28]
 801f9c2:	428b      	cmp	r3, r1
 801f9c4:	d320      	bcc.n	801fa08 <__cvt+0xc4>
 801f9c6:	0020      	movs	r0, r4
 801f9c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f9cc:	1b1b      	subs	r3, r3, r4
 801f9ce:	6013      	str	r3, [r2, #0]
 801f9d0:	b00b      	add	sp, #44	@ 0x2c
 801f9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f9d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f9d6:	18c3      	adds	r3, r0, r3
 801f9d8:	9307      	str	r3, [sp, #28]
 801f9da:	2d46      	cmp	r5, #70	@ 0x46
 801f9dc:	d1e4      	bne.n	801f9a8 <__cvt+0x64>
 801f9de:	7803      	ldrb	r3, [r0, #0]
 801f9e0:	2b30      	cmp	r3, #48	@ 0x30
 801f9e2:	d10c      	bne.n	801f9fe <__cvt+0xba>
 801f9e4:	2200      	movs	r2, #0
 801f9e6:	2300      	movs	r3, #0
 801f9e8:	0030      	movs	r0, r6
 801f9ea:	0039      	movs	r1, r7
 801f9ec:	f7e0 fd60 	bl	80004b0 <__aeabi_dcmpeq>
 801f9f0:	2800      	cmp	r0, #0
 801f9f2:	d104      	bne.n	801f9fe <__cvt+0xba>
 801f9f4:	2301      	movs	r3, #1
 801f9f6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f9f8:	1a9b      	subs	r3, r3, r2
 801f9fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f9fc:	6013      	str	r3, [r2, #0]
 801f9fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa00:	9a07      	ldr	r2, [sp, #28]
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	18d3      	adds	r3, r2, r3
 801fa06:	e7ce      	b.n	801f9a6 <__cvt+0x62>
 801fa08:	1c59      	adds	r1, r3, #1
 801fa0a:	9109      	str	r1, [sp, #36]	@ 0x24
 801fa0c:	701a      	strb	r2, [r3, #0]
 801fa0e:	e7d6      	b.n	801f9be <__cvt+0x7a>

0801fa10 <__exponent>:
 801fa10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa12:	232b      	movs	r3, #43	@ 0x2b
 801fa14:	0005      	movs	r5, r0
 801fa16:	000c      	movs	r4, r1
 801fa18:	b085      	sub	sp, #20
 801fa1a:	7002      	strb	r2, [r0, #0]
 801fa1c:	2900      	cmp	r1, #0
 801fa1e:	da01      	bge.n	801fa24 <__exponent+0x14>
 801fa20:	424c      	negs	r4, r1
 801fa22:	3302      	adds	r3, #2
 801fa24:	706b      	strb	r3, [r5, #1]
 801fa26:	2c09      	cmp	r4, #9
 801fa28:	dd2c      	ble.n	801fa84 <__exponent+0x74>
 801fa2a:	ab02      	add	r3, sp, #8
 801fa2c:	1dde      	adds	r6, r3, #7
 801fa2e:	0020      	movs	r0, r4
 801fa30:	210a      	movs	r1, #10
 801fa32:	f7e0 fd27 	bl	8000484 <__aeabi_idivmod>
 801fa36:	0037      	movs	r7, r6
 801fa38:	3130      	adds	r1, #48	@ 0x30
 801fa3a:	3e01      	subs	r6, #1
 801fa3c:	0020      	movs	r0, r4
 801fa3e:	7031      	strb	r1, [r6, #0]
 801fa40:	210a      	movs	r1, #10
 801fa42:	9401      	str	r4, [sp, #4]
 801fa44:	f7e0 fc38 	bl	80002b8 <__divsi3>
 801fa48:	9b01      	ldr	r3, [sp, #4]
 801fa4a:	0004      	movs	r4, r0
 801fa4c:	2b63      	cmp	r3, #99	@ 0x63
 801fa4e:	dcee      	bgt.n	801fa2e <__exponent+0x1e>
 801fa50:	1eba      	subs	r2, r7, #2
 801fa52:	1ca8      	adds	r0, r5, #2
 801fa54:	0001      	movs	r1, r0
 801fa56:	0013      	movs	r3, r2
 801fa58:	3430      	adds	r4, #48	@ 0x30
 801fa5a:	7014      	strb	r4, [r2, #0]
 801fa5c:	ac02      	add	r4, sp, #8
 801fa5e:	3407      	adds	r4, #7
 801fa60:	429c      	cmp	r4, r3
 801fa62:	d80a      	bhi.n	801fa7a <__exponent+0x6a>
 801fa64:	2300      	movs	r3, #0
 801fa66:	42a2      	cmp	r2, r4
 801fa68:	d803      	bhi.n	801fa72 <__exponent+0x62>
 801fa6a:	3309      	adds	r3, #9
 801fa6c:	aa02      	add	r2, sp, #8
 801fa6e:	189b      	adds	r3, r3, r2
 801fa70:	1bdb      	subs	r3, r3, r7
 801fa72:	18c0      	adds	r0, r0, r3
 801fa74:	1b40      	subs	r0, r0, r5
 801fa76:	b005      	add	sp, #20
 801fa78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa7a:	781c      	ldrb	r4, [r3, #0]
 801fa7c:	3301      	adds	r3, #1
 801fa7e:	700c      	strb	r4, [r1, #0]
 801fa80:	3101      	adds	r1, #1
 801fa82:	e7eb      	b.n	801fa5c <__exponent+0x4c>
 801fa84:	2330      	movs	r3, #48	@ 0x30
 801fa86:	18e4      	adds	r4, r4, r3
 801fa88:	70ab      	strb	r3, [r5, #2]
 801fa8a:	1d28      	adds	r0, r5, #4
 801fa8c:	70ec      	strb	r4, [r5, #3]
 801fa8e:	e7f1      	b.n	801fa74 <__exponent+0x64>

0801fa90 <_printf_float>:
 801fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa92:	b097      	sub	sp, #92	@ 0x5c
 801fa94:	000d      	movs	r5, r1
 801fa96:	920a      	str	r2, [sp, #40]	@ 0x28
 801fa98:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801fa9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fa9c:	9009      	str	r0, [sp, #36]	@ 0x24
 801fa9e:	f000 fe7d 	bl	802079c <_localeconv_r>
 801faa2:	6803      	ldr	r3, [r0, #0]
 801faa4:	0018      	movs	r0, r3
 801faa6:	930d      	str	r3, [sp, #52]	@ 0x34
 801faa8:	f7e0 fb60 	bl	800016c <strlen>
 801faac:	2300      	movs	r3, #0
 801faae:	900f      	str	r0, [sp, #60]	@ 0x3c
 801fab0:	9314      	str	r3, [sp, #80]	@ 0x50
 801fab2:	7e2b      	ldrb	r3, [r5, #24]
 801fab4:	2207      	movs	r2, #7
 801fab6:	930c      	str	r3, [sp, #48]	@ 0x30
 801fab8:	682b      	ldr	r3, [r5, #0]
 801faba:	930e      	str	r3, [sp, #56]	@ 0x38
 801fabc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fabe:	6823      	ldr	r3, [r4, #0]
 801fac0:	05c9      	lsls	r1, r1, #23
 801fac2:	d545      	bpl.n	801fb50 <_printf_float+0xc0>
 801fac4:	189b      	adds	r3, r3, r2
 801fac6:	4393      	bics	r3, r2
 801fac8:	001a      	movs	r2, r3
 801faca:	3208      	adds	r2, #8
 801facc:	6022      	str	r2, [r4, #0]
 801face:	2201      	movs	r2, #1
 801fad0:	681e      	ldr	r6, [r3, #0]
 801fad2:	685f      	ldr	r7, [r3, #4]
 801fad4:	007b      	lsls	r3, r7, #1
 801fad6:	085b      	lsrs	r3, r3, #1
 801fad8:	9311      	str	r3, [sp, #68]	@ 0x44
 801fada:	9610      	str	r6, [sp, #64]	@ 0x40
 801fadc:	64ae      	str	r6, [r5, #72]	@ 0x48
 801fade:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801fae0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fae2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fae4:	4ba7      	ldr	r3, [pc, #668]	@ (801fd84 <_printf_float+0x2f4>)
 801fae6:	4252      	negs	r2, r2
 801fae8:	f7e3 fc0c 	bl	8003304 <__aeabi_dcmpun>
 801faec:	2800      	cmp	r0, #0
 801faee:	d131      	bne.n	801fb54 <_printf_float+0xc4>
 801faf0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801faf2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801faf4:	2201      	movs	r2, #1
 801faf6:	4ba3      	ldr	r3, [pc, #652]	@ (801fd84 <_printf_float+0x2f4>)
 801faf8:	4252      	negs	r2, r2
 801fafa:	f7e0 fce9 	bl	80004d0 <__aeabi_dcmple>
 801fafe:	2800      	cmp	r0, #0
 801fb00:	d128      	bne.n	801fb54 <_printf_float+0xc4>
 801fb02:	2200      	movs	r2, #0
 801fb04:	2300      	movs	r3, #0
 801fb06:	0030      	movs	r0, r6
 801fb08:	0039      	movs	r1, r7
 801fb0a:	f7e0 fcd7 	bl	80004bc <__aeabi_dcmplt>
 801fb0e:	2800      	cmp	r0, #0
 801fb10:	d003      	beq.n	801fb1a <_printf_float+0x8a>
 801fb12:	002b      	movs	r3, r5
 801fb14:	222d      	movs	r2, #45	@ 0x2d
 801fb16:	3343      	adds	r3, #67	@ 0x43
 801fb18:	701a      	strb	r2, [r3, #0]
 801fb1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb1c:	4f9a      	ldr	r7, [pc, #616]	@ (801fd88 <_printf_float+0x2f8>)
 801fb1e:	2b47      	cmp	r3, #71	@ 0x47
 801fb20:	d900      	bls.n	801fb24 <_printf_float+0x94>
 801fb22:	4f9a      	ldr	r7, [pc, #616]	@ (801fd8c <_printf_float+0x2fc>)
 801fb24:	2303      	movs	r3, #3
 801fb26:	2400      	movs	r4, #0
 801fb28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fb2a:	612b      	str	r3, [r5, #16]
 801fb2c:	3301      	adds	r3, #1
 801fb2e:	439a      	bics	r2, r3
 801fb30:	602a      	str	r2, [r5, #0]
 801fb32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb34:	0029      	movs	r1, r5
 801fb36:	9300      	str	r3, [sp, #0]
 801fb38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb3c:	aa15      	add	r2, sp, #84	@ 0x54
 801fb3e:	f000 f9e5 	bl	801ff0c <_printf_common>
 801fb42:	3001      	adds	r0, #1
 801fb44:	d000      	beq.n	801fb48 <_printf_float+0xb8>
 801fb46:	e09f      	b.n	801fc88 <_printf_float+0x1f8>
 801fb48:	2001      	movs	r0, #1
 801fb4a:	4240      	negs	r0, r0
 801fb4c:	b017      	add	sp, #92	@ 0x5c
 801fb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb50:	3307      	adds	r3, #7
 801fb52:	e7b8      	b.n	801fac6 <_printf_float+0x36>
 801fb54:	0032      	movs	r2, r6
 801fb56:	003b      	movs	r3, r7
 801fb58:	0030      	movs	r0, r6
 801fb5a:	0039      	movs	r1, r7
 801fb5c:	f7e3 fbd2 	bl	8003304 <__aeabi_dcmpun>
 801fb60:	2800      	cmp	r0, #0
 801fb62:	d00b      	beq.n	801fb7c <_printf_float+0xec>
 801fb64:	2f00      	cmp	r7, #0
 801fb66:	da03      	bge.n	801fb70 <_printf_float+0xe0>
 801fb68:	002b      	movs	r3, r5
 801fb6a:	222d      	movs	r2, #45	@ 0x2d
 801fb6c:	3343      	adds	r3, #67	@ 0x43
 801fb6e:	701a      	strb	r2, [r3, #0]
 801fb70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb72:	4f87      	ldr	r7, [pc, #540]	@ (801fd90 <_printf_float+0x300>)
 801fb74:	2b47      	cmp	r3, #71	@ 0x47
 801fb76:	d9d5      	bls.n	801fb24 <_printf_float+0x94>
 801fb78:	4f86      	ldr	r7, [pc, #536]	@ (801fd94 <_printf_float+0x304>)
 801fb7a:	e7d3      	b.n	801fb24 <_printf_float+0x94>
 801fb7c:	2220      	movs	r2, #32
 801fb7e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fb80:	686b      	ldr	r3, [r5, #4]
 801fb82:	4394      	bics	r4, r2
 801fb84:	1c5a      	adds	r2, r3, #1
 801fb86:	d146      	bne.n	801fc16 <_printf_float+0x186>
 801fb88:	3307      	adds	r3, #7
 801fb8a:	606b      	str	r3, [r5, #4]
 801fb8c:	2380      	movs	r3, #128	@ 0x80
 801fb8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fb90:	00db      	lsls	r3, r3, #3
 801fb92:	4313      	orrs	r3, r2
 801fb94:	2200      	movs	r2, #0
 801fb96:	602b      	str	r3, [r5, #0]
 801fb98:	9206      	str	r2, [sp, #24]
 801fb9a:	aa14      	add	r2, sp, #80	@ 0x50
 801fb9c:	9205      	str	r2, [sp, #20]
 801fb9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fba0:	a90a      	add	r1, sp, #40	@ 0x28
 801fba2:	9204      	str	r2, [sp, #16]
 801fba4:	aa13      	add	r2, sp, #76	@ 0x4c
 801fba6:	9203      	str	r2, [sp, #12]
 801fba8:	2223      	movs	r2, #35	@ 0x23
 801fbaa:	1852      	adds	r2, r2, r1
 801fbac:	9202      	str	r2, [sp, #8]
 801fbae:	9301      	str	r3, [sp, #4]
 801fbb0:	686b      	ldr	r3, [r5, #4]
 801fbb2:	0032      	movs	r2, r6
 801fbb4:	9300      	str	r3, [sp, #0]
 801fbb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fbb8:	003b      	movs	r3, r7
 801fbba:	f7ff fec3 	bl	801f944 <__cvt>
 801fbbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fbc0:	0007      	movs	r7, r0
 801fbc2:	2c47      	cmp	r4, #71	@ 0x47
 801fbc4:	d12d      	bne.n	801fc22 <_printf_float+0x192>
 801fbc6:	1cd3      	adds	r3, r2, #3
 801fbc8:	db02      	blt.n	801fbd0 <_printf_float+0x140>
 801fbca:	686b      	ldr	r3, [r5, #4]
 801fbcc:	429a      	cmp	r2, r3
 801fbce:	dd48      	ble.n	801fc62 <_printf_float+0x1d2>
 801fbd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fbd2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fbd4:	3b02      	subs	r3, #2
 801fbd6:	b2db      	uxtb	r3, r3
 801fbd8:	930c      	str	r3, [sp, #48]	@ 0x30
 801fbda:	0028      	movs	r0, r5
 801fbdc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fbde:	3901      	subs	r1, #1
 801fbe0:	3050      	adds	r0, #80	@ 0x50
 801fbe2:	9113      	str	r1, [sp, #76]	@ 0x4c
 801fbe4:	f7ff ff14 	bl	801fa10 <__exponent>
 801fbe8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fbea:	0004      	movs	r4, r0
 801fbec:	1813      	adds	r3, r2, r0
 801fbee:	612b      	str	r3, [r5, #16]
 801fbf0:	2a01      	cmp	r2, #1
 801fbf2:	dc02      	bgt.n	801fbfa <_printf_float+0x16a>
 801fbf4:	682a      	ldr	r2, [r5, #0]
 801fbf6:	07d2      	lsls	r2, r2, #31
 801fbf8:	d501      	bpl.n	801fbfe <_printf_float+0x16e>
 801fbfa:	3301      	adds	r3, #1
 801fbfc:	612b      	str	r3, [r5, #16]
 801fbfe:	2323      	movs	r3, #35	@ 0x23
 801fc00:	aa0a      	add	r2, sp, #40	@ 0x28
 801fc02:	189b      	adds	r3, r3, r2
 801fc04:	781b      	ldrb	r3, [r3, #0]
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d100      	bne.n	801fc0c <_printf_float+0x17c>
 801fc0a:	e792      	b.n	801fb32 <_printf_float+0xa2>
 801fc0c:	002b      	movs	r3, r5
 801fc0e:	222d      	movs	r2, #45	@ 0x2d
 801fc10:	3343      	adds	r3, #67	@ 0x43
 801fc12:	701a      	strb	r2, [r3, #0]
 801fc14:	e78d      	b.n	801fb32 <_printf_float+0xa2>
 801fc16:	2c47      	cmp	r4, #71	@ 0x47
 801fc18:	d1b8      	bne.n	801fb8c <_printf_float+0xfc>
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d1b6      	bne.n	801fb8c <_printf_float+0xfc>
 801fc1e:	3301      	adds	r3, #1
 801fc20:	e7b3      	b.n	801fb8a <_printf_float+0xfa>
 801fc22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc24:	0011      	movs	r1, r2
 801fc26:	2b65      	cmp	r3, #101	@ 0x65
 801fc28:	d9d7      	bls.n	801fbda <_printf_float+0x14a>
 801fc2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc2c:	2b66      	cmp	r3, #102	@ 0x66
 801fc2e:	d11a      	bne.n	801fc66 <_printf_float+0x1d6>
 801fc30:	686b      	ldr	r3, [r5, #4]
 801fc32:	2a00      	cmp	r2, #0
 801fc34:	dd09      	ble.n	801fc4a <_printf_float+0x1ba>
 801fc36:	612a      	str	r2, [r5, #16]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d102      	bne.n	801fc42 <_printf_float+0x1b2>
 801fc3c:	6829      	ldr	r1, [r5, #0]
 801fc3e:	07c9      	lsls	r1, r1, #31
 801fc40:	d50b      	bpl.n	801fc5a <_printf_float+0x1ca>
 801fc42:	3301      	adds	r3, #1
 801fc44:	189b      	adds	r3, r3, r2
 801fc46:	612b      	str	r3, [r5, #16]
 801fc48:	e007      	b.n	801fc5a <_printf_float+0x1ca>
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	d103      	bne.n	801fc56 <_printf_float+0x1c6>
 801fc4e:	2201      	movs	r2, #1
 801fc50:	6829      	ldr	r1, [r5, #0]
 801fc52:	4211      	tst	r1, r2
 801fc54:	d000      	beq.n	801fc58 <_printf_float+0x1c8>
 801fc56:	1c9a      	adds	r2, r3, #2
 801fc58:	612a      	str	r2, [r5, #16]
 801fc5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc5c:	2400      	movs	r4, #0
 801fc5e:	65ab      	str	r3, [r5, #88]	@ 0x58
 801fc60:	e7cd      	b.n	801fbfe <_printf_float+0x16e>
 801fc62:	2367      	movs	r3, #103	@ 0x67
 801fc64:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc66:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fc68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fc6a:	4299      	cmp	r1, r3
 801fc6c:	db06      	blt.n	801fc7c <_printf_float+0x1ec>
 801fc6e:	682b      	ldr	r3, [r5, #0]
 801fc70:	6129      	str	r1, [r5, #16]
 801fc72:	07db      	lsls	r3, r3, #31
 801fc74:	d5f1      	bpl.n	801fc5a <_printf_float+0x1ca>
 801fc76:	3101      	adds	r1, #1
 801fc78:	6129      	str	r1, [r5, #16]
 801fc7a:	e7ee      	b.n	801fc5a <_printf_float+0x1ca>
 801fc7c:	2201      	movs	r2, #1
 801fc7e:	2900      	cmp	r1, #0
 801fc80:	dce0      	bgt.n	801fc44 <_printf_float+0x1b4>
 801fc82:	1892      	adds	r2, r2, r2
 801fc84:	1a52      	subs	r2, r2, r1
 801fc86:	e7dd      	b.n	801fc44 <_printf_float+0x1b4>
 801fc88:	682a      	ldr	r2, [r5, #0]
 801fc8a:	0553      	lsls	r3, r2, #21
 801fc8c:	d408      	bmi.n	801fca0 <_printf_float+0x210>
 801fc8e:	692b      	ldr	r3, [r5, #16]
 801fc90:	003a      	movs	r2, r7
 801fc92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc98:	47a0      	blx	r4
 801fc9a:	3001      	adds	r0, #1
 801fc9c:	d129      	bne.n	801fcf2 <_printf_float+0x262>
 801fc9e:	e753      	b.n	801fb48 <_printf_float+0xb8>
 801fca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fca2:	2b65      	cmp	r3, #101	@ 0x65
 801fca4:	d800      	bhi.n	801fca8 <_printf_float+0x218>
 801fca6:	e0da      	b.n	801fe5e <_printf_float+0x3ce>
 801fca8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801fcaa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801fcac:	2200      	movs	r2, #0
 801fcae:	2300      	movs	r3, #0
 801fcb0:	f7e0 fbfe 	bl	80004b0 <__aeabi_dcmpeq>
 801fcb4:	2800      	cmp	r0, #0
 801fcb6:	d033      	beq.n	801fd20 <_printf_float+0x290>
 801fcb8:	2301      	movs	r3, #1
 801fcba:	4a37      	ldr	r2, [pc, #220]	@ (801fd98 <_printf_float+0x308>)
 801fcbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fcbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fcc0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fcc2:	47a0      	blx	r4
 801fcc4:	3001      	adds	r0, #1
 801fcc6:	d100      	bne.n	801fcca <_printf_float+0x23a>
 801fcc8:	e73e      	b.n	801fb48 <_printf_float+0xb8>
 801fcca:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fccc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fcce:	42b3      	cmp	r3, r6
 801fcd0:	db02      	blt.n	801fcd8 <_printf_float+0x248>
 801fcd2:	682b      	ldr	r3, [r5, #0]
 801fcd4:	07db      	lsls	r3, r3, #31
 801fcd6:	d50c      	bpl.n	801fcf2 <_printf_float+0x262>
 801fcd8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fcda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fcdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fcde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fce0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fce2:	47a0      	blx	r4
 801fce4:	2400      	movs	r4, #0
 801fce6:	3001      	adds	r0, #1
 801fce8:	d100      	bne.n	801fcec <_printf_float+0x25c>
 801fcea:	e72d      	b.n	801fb48 <_printf_float+0xb8>
 801fcec:	1e73      	subs	r3, r6, #1
 801fcee:	42a3      	cmp	r3, r4
 801fcf0:	dc0a      	bgt.n	801fd08 <_printf_float+0x278>
 801fcf2:	682b      	ldr	r3, [r5, #0]
 801fcf4:	079b      	lsls	r3, r3, #30
 801fcf6:	d500      	bpl.n	801fcfa <_printf_float+0x26a>
 801fcf8:	e105      	b.n	801ff06 <_printf_float+0x476>
 801fcfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fcfc:	68e8      	ldr	r0, [r5, #12]
 801fcfe:	4298      	cmp	r0, r3
 801fd00:	db00      	blt.n	801fd04 <_printf_float+0x274>
 801fd02:	e723      	b.n	801fb4c <_printf_float+0xbc>
 801fd04:	0018      	movs	r0, r3
 801fd06:	e721      	b.n	801fb4c <_printf_float+0xbc>
 801fd08:	002a      	movs	r2, r5
 801fd0a:	2301      	movs	r3, #1
 801fd0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd10:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fd12:	321a      	adds	r2, #26
 801fd14:	47b8      	blx	r7
 801fd16:	3001      	adds	r0, #1
 801fd18:	d100      	bne.n	801fd1c <_printf_float+0x28c>
 801fd1a:	e715      	b.n	801fb48 <_printf_float+0xb8>
 801fd1c:	3401      	adds	r4, #1
 801fd1e:	e7e5      	b.n	801fcec <_printf_float+0x25c>
 801fd20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	dc3a      	bgt.n	801fd9c <_printf_float+0x30c>
 801fd26:	2301      	movs	r3, #1
 801fd28:	4a1b      	ldr	r2, [pc, #108]	@ (801fd98 <_printf_float+0x308>)
 801fd2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fd30:	47a0      	blx	r4
 801fd32:	3001      	adds	r0, #1
 801fd34:	d100      	bne.n	801fd38 <_printf_float+0x2a8>
 801fd36:	e707      	b.n	801fb48 <_printf_float+0xb8>
 801fd38:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fd3a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fd3c:	4333      	orrs	r3, r6
 801fd3e:	d102      	bne.n	801fd46 <_printf_float+0x2b6>
 801fd40:	682b      	ldr	r3, [r5, #0]
 801fd42:	07db      	lsls	r3, r3, #31
 801fd44:	d5d5      	bpl.n	801fcf2 <_printf_float+0x262>
 801fd46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fd48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fd4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fd50:	47a0      	blx	r4
 801fd52:	2300      	movs	r3, #0
 801fd54:	3001      	adds	r0, #1
 801fd56:	d100      	bne.n	801fd5a <_printf_float+0x2ca>
 801fd58:	e6f6      	b.n	801fb48 <_printf_float+0xb8>
 801fd5a:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fd5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fd60:	425b      	negs	r3, r3
 801fd62:	4293      	cmp	r3, r2
 801fd64:	dc01      	bgt.n	801fd6a <_printf_float+0x2da>
 801fd66:	0033      	movs	r3, r6
 801fd68:	e792      	b.n	801fc90 <_printf_float+0x200>
 801fd6a:	002a      	movs	r2, r5
 801fd6c:	2301      	movs	r3, #1
 801fd6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fd74:	321a      	adds	r2, #26
 801fd76:	47a0      	blx	r4
 801fd78:	3001      	adds	r0, #1
 801fd7a:	d100      	bne.n	801fd7e <_printf_float+0x2ee>
 801fd7c:	e6e4      	b.n	801fb48 <_printf_float+0xb8>
 801fd7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fd80:	3301      	adds	r3, #1
 801fd82:	e7ea      	b.n	801fd5a <_printf_float+0x2ca>
 801fd84:	7fefffff 	.word	0x7fefffff
 801fd88:	080264f9 	.word	0x080264f9
 801fd8c:	080264fd 	.word	0x080264fd
 801fd90:	08026501 	.word	0x08026501
 801fd94:	08026505 	.word	0x08026505
 801fd98:	08026509 	.word	0x08026509
 801fd9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fd9e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fda0:	930c      	str	r3, [sp, #48]	@ 0x30
 801fda2:	429e      	cmp	r6, r3
 801fda4:	dd00      	ble.n	801fda8 <_printf_float+0x318>
 801fda6:	001e      	movs	r6, r3
 801fda8:	2e00      	cmp	r6, #0
 801fdaa:	dc31      	bgt.n	801fe10 <_printf_float+0x380>
 801fdac:	43f3      	mvns	r3, r6
 801fdae:	2400      	movs	r4, #0
 801fdb0:	17db      	asrs	r3, r3, #31
 801fdb2:	4033      	ands	r3, r6
 801fdb4:	930e      	str	r3, [sp, #56]	@ 0x38
 801fdb6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fdb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fdba:	1af3      	subs	r3, r6, r3
 801fdbc:	42a3      	cmp	r3, r4
 801fdbe:	dc30      	bgt.n	801fe22 <_printf_float+0x392>
 801fdc0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fdc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fdc4:	429a      	cmp	r2, r3
 801fdc6:	dc38      	bgt.n	801fe3a <_printf_float+0x3aa>
 801fdc8:	682b      	ldr	r3, [r5, #0]
 801fdca:	07db      	lsls	r3, r3, #31
 801fdcc:	d435      	bmi.n	801fe3a <_printf_float+0x3aa>
 801fdce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fdd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fdd4:	1b9b      	subs	r3, r3, r6
 801fdd6:	1b14      	subs	r4, r2, r4
 801fdd8:	429c      	cmp	r4, r3
 801fdda:	dd00      	ble.n	801fdde <_printf_float+0x34e>
 801fddc:	001c      	movs	r4, r3
 801fdde:	2c00      	cmp	r4, #0
 801fde0:	dc34      	bgt.n	801fe4c <_printf_float+0x3bc>
 801fde2:	43e3      	mvns	r3, r4
 801fde4:	2600      	movs	r6, #0
 801fde6:	17db      	asrs	r3, r3, #31
 801fde8:	401c      	ands	r4, r3
 801fdea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fdec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fdee:	1ad3      	subs	r3, r2, r3
 801fdf0:	1b1b      	subs	r3, r3, r4
 801fdf2:	42b3      	cmp	r3, r6
 801fdf4:	dc00      	bgt.n	801fdf8 <_printf_float+0x368>
 801fdf6:	e77c      	b.n	801fcf2 <_printf_float+0x262>
 801fdf8:	002a      	movs	r2, r5
 801fdfa:	2301      	movs	r3, #1
 801fdfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fdfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe00:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fe02:	321a      	adds	r2, #26
 801fe04:	47b8      	blx	r7
 801fe06:	3001      	adds	r0, #1
 801fe08:	d100      	bne.n	801fe0c <_printf_float+0x37c>
 801fe0a:	e69d      	b.n	801fb48 <_printf_float+0xb8>
 801fe0c:	3601      	adds	r6, #1
 801fe0e:	e7ec      	b.n	801fdea <_printf_float+0x35a>
 801fe10:	0033      	movs	r3, r6
 801fe12:	003a      	movs	r2, r7
 801fe14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe18:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fe1a:	47a0      	blx	r4
 801fe1c:	3001      	adds	r0, #1
 801fe1e:	d1c5      	bne.n	801fdac <_printf_float+0x31c>
 801fe20:	e692      	b.n	801fb48 <_printf_float+0xb8>
 801fe22:	002a      	movs	r2, r5
 801fe24:	2301      	movs	r3, #1
 801fe26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe2a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fe2c:	321a      	adds	r2, #26
 801fe2e:	47b0      	blx	r6
 801fe30:	3001      	adds	r0, #1
 801fe32:	d100      	bne.n	801fe36 <_printf_float+0x3a6>
 801fe34:	e688      	b.n	801fb48 <_printf_float+0xb8>
 801fe36:	3401      	adds	r4, #1
 801fe38:	e7bd      	b.n	801fdb6 <_printf_float+0x326>
 801fe3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fe3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fe3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe42:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fe44:	47a0      	blx	r4
 801fe46:	3001      	adds	r0, #1
 801fe48:	d1c1      	bne.n	801fdce <_printf_float+0x33e>
 801fe4a:	e67d      	b.n	801fb48 <_printf_float+0xb8>
 801fe4c:	19ba      	adds	r2, r7, r6
 801fe4e:	0023      	movs	r3, r4
 801fe50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fe56:	47b0      	blx	r6
 801fe58:	3001      	adds	r0, #1
 801fe5a:	d1c2      	bne.n	801fde2 <_printf_float+0x352>
 801fe5c:	e674      	b.n	801fb48 <_printf_float+0xb8>
 801fe5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fe60:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe62:	2b01      	cmp	r3, #1
 801fe64:	dc02      	bgt.n	801fe6c <_printf_float+0x3dc>
 801fe66:	2301      	movs	r3, #1
 801fe68:	421a      	tst	r2, r3
 801fe6a:	d039      	beq.n	801fee0 <_printf_float+0x450>
 801fe6c:	2301      	movs	r3, #1
 801fe6e:	003a      	movs	r2, r7
 801fe70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fe76:	47b0      	blx	r6
 801fe78:	3001      	adds	r0, #1
 801fe7a:	d100      	bne.n	801fe7e <_printf_float+0x3ee>
 801fe7c:	e664      	b.n	801fb48 <_printf_float+0xb8>
 801fe7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fe80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fe82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe86:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fe88:	47b0      	blx	r6
 801fe8a:	3001      	adds	r0, #1
 801fe8c:	d100      	bne.n	801fe90 <_printf_float+0x400>
 801fe8e:	e65b      	b.n	801fb48 <_printf_float+0xb8>
 801fe90:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801fe92:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801fe94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fe96:	2200      	movs	r2, #0
 801fe98:	3b01      	subs	r3, #1
 801fe9a:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe9c:	2300      	movs	r3, #0
 801fe9e:	f7e0 fb07 	bl	80004b0 <__aeabi_dcmpeq>
 801fea2:	2800      	cmp	r0, #0
 801fea4:	d11a      	bne.n	801fedc <_printf_float+0x44c>
 801fea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fea8:	1c7a      	adds	r2, r7, #1
 801feaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801feac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801feae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801feb0:	47b0      	blx	r6
 801feb2:	3001      	adds	r0, #1
 801feb4:	d10e      	bne.n	801fed4 <_printf_float+0x444>
 801feb6:	e647      	b.n	801fb48 <_printf_float+0xb8>
 801feb8:	002a      	movs	r2, r5
 801feba:	2301      	movs	r3, #1
 801febc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801febe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fec0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fec2:	321a      	adds	r2, #26
 801fec4:	47b8      	blx	r7
 801fec6:	3001      	adds	r0, #1
 801fec8:	d100      	bne.n	801fecc <_printf_float+0x43c>
 801feca:	e63d      	b.n	801fb48 <_printf_float+0xb8>
 801fecc:	3601      	adds	r6, #1
 801fece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fed0:	429e      	cmp	r6, r3
 801fed2:	dbf1      	blt.n	801feb8 <_printf_float+0x428>
 801fed4:	002a      	movs	r2, r5
 801fed6:	0023      	movs	r3, r4
 801fed8:	3250      	adds	r2, #80	@ 0x50
 801feda:	e6da      	b.n	801fc92 <_printf_float+0x202>
 801fedc:	2600      	movs	r6, #0
 801fede:	e7f6      	b.n	801fece <_printf_float+0x43e>
 801fee0:	003a      	movs	r2, r7
 801fee2:	e7e2      	b.n	801feaa <_printf_float+0x41a>
 801fee4:	002a      	movs	r2, r5
 801fee6:	2301      	movs	r3, #1
 801fee8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801feea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801feec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801feee:	3219      	adds	r2, #25
 801fef0:	47b0      	blx	r6
 801fef2:	3001      	adds	r0, #1
 801fef4:	d100      	bne.n	801fef8 <_printf_float+0x468>
 801fef6:	e627      	b.n	801fb48 <_printf_float+0xb8>
 801fef8:	3401      	adds	r4, #1
 801fefa:	68eb      	ldr	r3, [r5, #12]
 801fefc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801fefe:	1a9b      	subs	r3, r3, r2
 801ff00:	42a3      	cmp	r3, r4
 801ff02:	dcef      	bgt.n	801fee4 <_printf_float+0x454>
 801ff04:	e6f9      	b.n	801fcfa <_printf_float+0x26a>
 801ff06:	2400      	movs	r4, #0
 801ff08:	e7f7      	b.n	801fefa <_printf_float+0x46a>
 801ff0a:	46c0      	nop			@ (mov r8, r8)

0801ff0c <_printf_common>:
 801ff0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ff0e:	0016      	movs	r6, r2
 801ff10:	9301      	str	r3, [sp, #4]
 801ff12:	688a      	ldr	r2, [r1, #8]
 801ff14:	690b      	ldr	r3, [r1, #16]
 801ff16:	000c      	movs	r4, r1
 801ff18:	9000      	str	r0, [sp, #0]
 801ff1a:	4293      	cmp	r3, r2
 801ff1c:	da00      	bge.n	801ff20 <_printf_common+0x14>
 801ff1e:	0013      	movs	r3, r2
 801ff20:	0022      	movs	r2, r4
 801ff22:	6033      	str	r3, [r6, #0]
 801ff24:	3243      	adds	r2, #67	@ 0x43
 801ff26:	7812      	ldrb	r2, [r2, #0]
 801ff28:	2a00      	cmp	r2, #0
 801ff2a:	d001      	beq.n	801ff30 <_printf_common+0x24>
 801ff2c:	3301      	adds	r3, #1
 801ff2e:	6033      	str	r3, [r6, #0]
 801ff30:	6823      	ldr	r3, [r4, #0]
 801ff32:	069b      	lsls	r3, r3, #26
 801ff34:	d502      	bpl.n	801ff3c <_printf_common+0x30>
 801ff36:	6833      	ldr	r3, [r6, #0]
 801ff38:	3302      	adds	r3, #2
 801ff3a:	6033      	str	r3, [r6, #0]
 801ff3c:	6822      	ldr	r2, [r4, #0]
 801ff3e:	2306      	movs	r3, #6
 801ff40:	0015      	movs	r5, r2
 801ff42:	401d      	ands	r5, r3
 801ff44:	421a      	tst	r2, r3
 801ff46:	d027      	beq.n	801ff98 <_printf_common+0x8c>
 801ff48:	0023      	movs	r3, r4
 801ff4a:	3343      	adds	r3, #67	@ 0x43
 801ff4c:	781b      	ldrb	r3, [r3, #0]
 801ff4e:	1e5a      	subs	r2, r3, #1
 801ff50:	4193      	sbcs	r3, r2
 801ff52:	6822      	ldr	r2, [r4, #0]
 801ff54:	0692      	lsls	r2, r2, #26
 801ff56:	d430      	bmi.n	801ffba <_printf_common+0xae>
 801ff58:	0022      	movs	r2, r4
 801ff5a:	9901      	ldr	r1, [sp, #4]
 801ff5c:	9800      	ldr	r0, [sp, #0]
 801ff5e:	9d08      	ldr	r5, [sp, #32]
 801ff60:	3243      	adds	r2, #67	@ 0x43
 801ff62:	47a8      	blx	r5
 801ff64:	3001      	adds	r0, #1
 801ff66:	d025      	beq.n	801ffb4 <_printf_common+0xa8>
 801ff68:	2206      	movs	r2, #6
 801ff6a:	6823      	ldr	r3, [r4, #0]
 801ff6c:	2500      	movs	r5, #0
 801ff6e:	4013      	ands	r3, r2
 801ff70:	2b04      	cmp	r3, #4
 801ff72:	d105      	bne.n	801ff80 <_printf_common+0x74>
 801ff74:	6833      	ldr	r3, [r6, #0]
 801ff76:	68e5      	ldr	r5, [r4, #12]
 801ff78:	1aed      	subs	r5, r5, r3
 801ff7a:	43eb      	mvns	r3, r5
 801ff7c:	17db      	asrs	r3, r3, #31
 801ff7e:	401d      	ands	r5, r3
 801ff80:	68a3      	ldr	r3, [r4, #8]
 801ff82:	6922      	ldr	r2, [r4, #16]
 801ff84:	4293      	cmp	r3, r2
 801ff86:	dd01      	ble.n	801ff8c <_printf_common+0x80>
 801ff88:	1a9b      	subs	r3, r3, r2
 801ff8a:	18ed      	adds	r5, r5, r3
 801ff8c:	2600      	movs	r6, #0
 801ff8e:	42b5      	cmp	r5, r6
 801ff90:	d120      	bne.n	801ffd4 <_printf_common+0xc8>
 801ff92:	2000      	movs	r0, #0
 801ff94:	e010      	b.n	801ffb8 <_printf_common+0xac>
 801ff96:	3501      	adds	r5, #1
 801ff98:	68e3      	ldr	r3, [r4, #12]
 801ff9a:	6832      	ldr	r2, [r6, #0]
 801ff9c:	1a9b      	subs	r3, r3, r2
 801ff9e:	42ab      	cmp	r3, r5
 801ffa0:	ddd2      	ble.n	801ff48 <_printf_common+0x3c>
 801ffa2:	0022      	movs	r2, r4
 801ffa4:	2301      	movs	r3, #1
 801ffa6:	9901      	ldr	r1, [sp, #4]
 801ffa8:	9800      	ldr	r0, [sp, #0]
 801ffaa:	9f08      	ldr	r7, [sp, #32]
 801ffac:	3219      	adds	r2, #25
 801ffae:	47b8      	blx	r7
 801ffb0:	3001      	adds	r0, #1
 801ffb2:	d1f0      	bne.n	801ff96 <_printf_common+0x8a>
 801ffb4:	2001      	movs	r0, #1
 801ffb6:	4240      	negs	r0, r0
 801ffb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ffba:	2030      	movs	r0, #48	@ 0x30
 801ffbc:	18e1      	adds	r1, r4, r3
 801ffbe:	3143      	adds	r1, #67	@ 0x43
 801ffc0:	7008      	strb	r0, [r1, #0]
 801ffc2:	0021      	movs	r1, r4
 801ffc4:	1c5a      	adds	r2, r3, #1
 801ffc6:	3145      	adds	r1, #69	@ 0x45
 801ffc8:	7809      	ldrb	r1, [r1, #0]
 801ffca:	18a2      	adds	r2, r4, r2
 801ffcc:	3243      	adds	r2, #67	@ 0x43
 801ffce:	3302      	adds	r3, #2
 801ffd0:	7011      	strb	r1, [r2, #0]
 801ffd2:	e7c1      	b.n	801ff58 <_printf_common+0x4c>
 801ffd4:	0022      	movs	r2, r4
 801ffd6:	2301      	movs	r3, #1
 801ffd8:	9901      	ldr	r1, [sp, #4]
 801ffda:	9800      	ldr	r0, [sp, #0]
 801ffdc:	9f08      	ldr	r7, [sp, #32]
 801ffde:	321a      	adds	r2, #26
 801ffe0:	47b8      	blx	r7
 801ffe2:	3001      	adds	r0, #1
 801ffe4:	d0e6      	beq.n	801ffb4 <_printf_common+0xa8>
 801ffe6:	3601      	adds	r6, #1
 801ffe8:	e7d1      	b.n	801ff8e <_printf_common+0x82>
	...

0801ffec <_printf_i>:
 801ffec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffee:	b08b      	sub	sp, #44	@ 0x2c
 801fff0:	9206      	str	r2, [sp, #24]
 801fff2:	000a      	movs	r2, r1
 801fff4:	3243      	adds	r2, #67	@ 0x43
 801fff6:	9307      	str	r3, [sp, #28]
 801fff8:	9005      	str	r0, [sp, #20]
 801fffa:	9203      	str	r2, [sp, #12]
 801fffc:	7e0a      	ldrb	r2, [r1, #24]
 801fffe:	000c      	movs	r4, r1
 8020000:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020002:	2a78      	cmp	r2, #120	@ 0x78
 8020004:	d809      	bhi.n	802001a <_printf_i+0x2e>
 8020006:	2a62      	cmp	r2, #98	@ 0x62
 8020008:	d80b      	bhi.n	8020022 <_printf_i+0x36>
 802000a:	2a00      	cmp	r2, #0
 802000c:	d100      	bne.n	8020010 <_printf_i+0x24>
 802000e:	e0bc      	b.n	802018a <_printf_i+0x19e>
 8020010:	497b      	ldr	r1, [pc, #492]	@ (8020200 <_printf_i+0x214>)
 8020012:	9104      	str	r1, [sp, #16]
 8020014:	2a58      	cmp	r2, #88	@ 0x58
 8020016:	d100      	bne.n	802001a <_printf_i+0x2e>
 8020018:	e090      	b.n	802013c <_printf_i+0x150>
 802001a:	0025      	movs	r5, r4
 802001c:	3542      	adds	r5, #66	@ 0x42
 802001e:	702a      	strb	r2, [r5, #0]
 8020020:	e022      	b.n	8020068 <_printf_i+0x7c>
 8020022:	0010      	movs	r0, r2
 8020024:	3863      	subs	r0, #99	@ 0x63
 8020026:	2815      	cmp	r0, #21
 8020028:	d8f7      	bhi.n	802001a <_printf_i+0x2e>
 802002a:	f7e0 f8b1 	bl	8000190 <__gnu_thumb1_case_shi>
 802002e:	0016      	.short	0x0016
 8020030:	fff6001f 	.word	0xfff6001f
 8020034:	fff6fff6 	.word	0xfff6fff6
 8020038:	001ffff6 	.word	0x001ffff6
 802003c:	fff6fff6 	.word	0xfff6fff6
 8020040:	fff6fff6 	.word	0xfff6fff6
 8020044:	003600a1 	.word	0x003600a1
 8020048:	fff60080 	.word	0xfff60080
 802004c:	00b2fff6 	.word	0x00b2fff6
 8020050:	0036fff6 	.word	0x0036fff6
 8020054:	fff6fff6 	.word	0xfff6fff6
 8020058:	0084      	.short	0x0084
 802005a:	0025      	movs	r5, r4
 802005c:	681a      	ldr	r2, [r3, #0]
 802005e:	3542      	adds	r5, #66	@ 0x42
 8020060:	1d11      	adds	r1, r2, #4
 8020062:	6019      	str	r1, [r3, #0]
 8020064:	6813      	ldr	r3, [r2, #0]
 8020066:	702b      	strb	r3, [r5, #0]
 8020068:	2301      	movs	r3, #1
 802006a:	e0a0      	b.n	80201ae <_printf_i+0x1c2>
 802006c:	6818      	ldr	r0, [r3, #0]
 802006e:	6809      	ldr	r1, [r1, #0]
 8020070:	1d02      	adds	r2, r0, #4
 8020072:	060d      	lsls	r5, r1, #24
 8020074:	d50b      	bpl.n	802008e <_printf_i+0xa2>
 8020076:	6806      	ldr	r6, [r0, #0]
 8020078:	601a      	str	r2, [r3, #0]
 802007a:	2e00      	cmp	r6, #0
 802007c:	da03      	bge.n	8020086 <_printf_i+0x9a>
 802007e:	232d      	movs	r3, #45	@ 0x2d
 8020080:	9a03      	ldr	r2, [sp, #12]
 8020082:	4276      	negs	r6, r6
 8020084:	7013      	strb	r3, [r2, #0]
 8020086:	4b5e      	ldr	r3, [pc, #376]	@ (8020200 <_printf_i+0x214>)
 8020088:	270a      	movs	r7, #10
 802008a:	9304      	str	r3, [sp, #16]
 802008c:	e018      	b.n	80200c0 <_printf_i+0xd4>
 802008e:	6806      	ldr	r6, [r0, #0]
 8020090:	601a      	str	r2, [r3, #0]
 8020092:	0649      	lsls	r1, r1, #25
 8020094:	d5f1      	bpl.n	802007a <_printf_i+0x8e>
 8020096:	b236      	sxth	r6, r6
 8020098:	e7ef      	b.n	802007a <_printf_i+0x8e>
 802009a:	6808      	ldr	r0, [r1, #0]
 802009c:	6819      	ldr	r1, [r3, #0]
 802009e:	c940      	ldmia	r1!, {r6}
 80200a0:	0605      	lsls	r5, r0, #24
 80200a2:	d402      	bmi.n	80200aa <_printf_i+0xbe>
 80200a4:	0640      	lsls	r0, r0, #25
 80200a6:	d500      	bpl.n	80200aa <_printf_i+0xbe>
 80200a8:	b2b6      	uxth	r6, r6
 80200aa:	6019      	str	r1, [r3, #0]
 80200ac:	4b54      	ldr	r3, [pc, #336]	@ (8020200 <_printf_i+0x214>)
 80200ae:	270a      	movs	r7, #10
 80200b0:	9304      	str	r3, [sp, #16]
 80200b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80200b4:	d100      	bne.n	80200b8 <_printf_i+0xcc>
 80200b6:	3f02      	subs	r7, #2
 80200b8:	0023      	movs	r3, r4
 80200ba:	2200      	movs	r2, #0
 80200bc:	3343      	adds	r3, #67	@ 0x43
 80200be:	701a      	strb	r2, [r3, #0]
 80200c0:	6863      	ldr	r3, [r4, #4]
 80200c2:	60a3      	str	r3, [r4, #8]
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	db03      	blt.n	80200d0 <_printf_i+0xe4>
 80200c8:	2104      	movs	r1, #4
 80200ca:	6822      	ldr	r2, [r4, #0]
 80200cc:	438a      	bics	r2, r1
 80200ce:	6022      	str	r2, [r4, #0]
 80200d0:	2e00      	cmp	r6, #0
 80200d2:	d102      	bne.n	80200da <_printf_i+0xee>
 80200d4:	9d03      	ldr	r5, [sp, #12]
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d00c      	beq.n	80200f4 <_printf_i+0x108>
 80200da:	9d03      	ldr	r5, [sp, #12]
 80200dc:	0030      	movs	r0, r6
 80200de:	0039      	movs	r1, r7
 80200e0:	f7e0 f8e6 	bl	80002b0 <__aeabi_uidivmod>
 80200e4:	9b04      	ldr	r3, [sp, #16]
 80200e6:	3d01      	subs	r5, #1
 80200e8:	5c5b      	ldrb	r3, [r3, r1]
 80200ea:	702b      	strb	r3, [r5, #0]
 80200ec:	0033      	movs	r3, r6
 80200ee:	0006      	movs	r6, r0
 80200f0:	429f      	cmp	r7, r3
 80200f2:	d9f3      	bls.n	80200dc <_printf_i+0xf0>
 80200f4:	2f08      	cmp	r7, #8
 80200f6:	d109      	bne.n	802010c <_printf_i+0x120>
 80200f8:	6823      	ldr	r3, [r4, #0]
 80200fa:	07db      	lsls	r3, r3, #31
 80200fc:	d506      	bpl.n	802010c <_printf_i+0x120>
 80200fe:	6862      	ldr	r2, [r4, #4]
 8020100:	6923      	ldr	r3, [r4, #16]
 8020102:	429a      	cmp	r2, r3
 8020104:	dc02      	bgt.n	802010c <_printf_i+0x120>
 8020106:	2330      	movs	r3, #48	@ 0x30
 8020108:	3d01      	subs	r5, #1
 802010a:	702b      	strb	r3, [r5, #0]
 802010c:	9b03      	ldr	r3, [sp, #12]
 802010e:	1b5b      	subs	r3, r3, r5
 8020110:	6123      	str	r3, [r4, #16]
 8020112:	9b07      	ldr	r3, [sp, #28]
 8020114:	0021      	movs	r1, r4
 8020116:	9300      	str	r3, [sp, #0]
 8020118:	9805      	ldr	r0, [sp, #20]
 802011a:	9b06      	ldr	r3, [sp, #24]
 802011c:	aa09      	add	r2, sp, #36	@ 0x24
 802011e:	f7ff fef5 	bl	801ff0c <_printf_common>
 8020122:	3001      	adds	r0, #1
 8020124:	d148      	bne.n	80201b8 <_printf_i+0x1cc>
 8020126:	2001      	movs	r0, #1
 8020128:	4240      	negs	r0, r0
 802012a:	b00b      	add	sp, #44	@ 0x2c
 802012c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802012e:	2220      	movs	r2, #32
 8020130:	6809      	ldr	r1, [r1, #0]
 8020132:	430a      	orrs	r2, r1
 8020134:	6022      	str	r2, [r4, #0]
 8020136:	2278      	movs	r2, #120	@ 0x78
 8020138:	4932      	ldr	r1, [pc, #200]	@ (8020204 <_printf_i+0x218>)
 802013a:	9104      	str	r1, [sp, #16]
 802013c:	0021      	movs	r1, r4
 802013e:	3145      	adds	r1, #69	@ 0x45
 8020140:	700a      	strb	r2, [r1, #0]
 8020142:	6819      	ldr	r1, [r3, #0]
 8020144:	6822      	ldr	r2, [r4, #0]
 8020146:	c940      	ldmia	r1!, {r6}
 8020148:	0610      	lsls	r0, r2, #24
 802014a:	d402      	bmi.n	8020152 <_printf_i+0x166>
 802014c:	0650      	lsls	r0, r2, #25
 802014e:	d500      	bpl.n	8020152 <_printf_i+0x166>
 8020150:	b2b6      	uxth	r6, r6
 8020152:	6019      	str	r1, [r3, #0]
 8020154:	07d3      	lsls	r3, r2, #31
 8020156:	d502      	bpl.n	802015e <_printf_i+0x172>
 8020158:	2320      	movs	r3, #32
 802015a:	4313      	orrs	r3, r2
 802015c:	6023      	str	r3, [r4, #0]
 802015e:	2e00      	cmp	r6, #0
 8020160:	d001      	beq.n	8020166 <_printf_i+0x17a>
 8020162:	2710      	movs	r7, #16
 8020164:	e7a8      	b.n	80200b8 <_printf_i+0xcc>
 8020166:	2220      	movs	r2, #32
 8020168:	6823      	ldr	r3, [r4, #0]
 802016a:	4393      	bics	r3, r2
 802016c:	6023      	str	r3, [r4, #0]
 802016e:	e7f8      	b.n	8020162 <_printf_i+0x176>
 8020170:	681a      	ldr	r2, [r3, #0]
 8020172:	680d      	ldr	r5, [r1, #0]
 8020174:	1d10      	adds	r0, r2, #4
 8020176:	6949      	ldr	r1, [r1, #20]
 8020178:	6018      	str	r0, [r3, #0]
 802017a:	6813      	ldr	r3, [r2, #0]
 802017c:	062e      	lsls	r6, r5, #24
 802017e:	d501      	bpl.n	8020184 <_printf_i+0x198>
 8020180:	6019      	str	r1, [r3, #0]
 8020182:	e002      	b.n	802018a <_printf_i+0x19e>
 8020184:	066d      	lsls	r5, r5, #25
 8020186:	d5fb      	bpl.n	8020180 <_printf_i+0x194>
 8020188:	8019      	strh	r1, [r3, #0]
 802018a:	2300      	movs	r3, #0
 802018c:	9d03      	ldr	r5, [sp, #12]
 802018e:	6123      	str	r3, [r4, #16]
 8020190:	e7bf      	b.n	8020112 <_printf_i+0x126>
 8020192:	681a      	ldr	r2, [r3, #0]
 8020194:	1d11      	adds	r1, r2, #4
 8020196:	6019      	str	r1, [r3, #0]
 8020198:	6815      	ldr	r5, [r2, #0]
 802019a:	2100      	movs	r1, #0
 802019c:	0028      	movs	r0, r5
 802019e:	6862      	ldr	r2, [r4, #4]
 80201a0:	f000 fb7b 	bl	802089a <memchr>
 80201a4:	2800      	cmp	r0, #0
 80201a6:	d001      	beq.n	80201ac <_printf_i+0x1c0>
 80201a8:	1b40      	subs	r0, r0, r5
 80201aa:	6060      	str	r0, [r4, #4]
 80201ac:	6863      	ldr	r3, [r4, #4]
 80201ae:	6123      	str	r3, [r4, #16]
 80201b0:	2300      	movs	r3, #0
 80201b2:	9a03      	ldr	r2, [sp, #12]
 80201b4:	7013      	strb	r3, [r2, #0]
 80201b6:	e7ac      	b.n	8020112 <_printf_i+0x126>
 80201b8:	002a      	movs	r2, r5
 80201ba:	6923      	ldr	r3, [r4, #16]
 80201bc:	9906      	ldr	r1, [sp, #24]
 80201be:	9805      	ldr	r0, [sp, #20]
 80201c0:	9d07      	ldr	r5, [sp, #28]
 80201c2:	47a8      	blx	r5
 80201c4:	3001      	adds	r0, #1
 80201c6:	d0ae      	beq.n	8020126 <_printf_i+0x13a>
 80201c8:	6823      	ldr	r3, [r4, #0]
 80201ca:	079b      	lsls	r3, r3, #30
 80201cc:	d415      	bmi.n	80201fa <_printf_i+0x20e>
 80201ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201d0:	68e0      	ldr	r0, [r4, #12]
 80201d2:	4298      	cmp	r0, r3
 80201d4:	daa9      	bge.n	802012a <_printf_i+0x13e>
 80201d6:	0018      	movs	r0, r3
 80201d8:	e7a7      	b.n	802012a <_printf_i+0x13e>
 80201da:	0022      	movs	r2, r4
 80201dc:	2301      	movs	r3, #1
 80201de:	9906      	ldr	r1, [sp, #24]
 80201e0:	9805      	ldr	r0, [sp, #20]
 80201e2:	9e07      	ldr	r6, [sp, #28]
 80201e4:	3219      	adds	r2, #25
 80201e6:	47b0      	blx	r6
 80201e8:	3001      	adds	r0, #1
 80201ea:	d09c      	beq.n	8020126 <_printf_i+0x13a>
 80201ec:	3501      	adds	r5, #1
 80201ee:	68e3      	ldr	r3, [r4, #12]
 80201f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80201f2:	1a9b      	subs	r3, r3, r2
 80201f4:	42ab      	cmp	r3, r5
 80201f6:	dcf0      	bgt.n	80201da <_printf_i+0x1ee>
 80201f8:	e7e9      	b.n	80201ce <_printf_i+0x1e2>
 80201fa:	2500      	movs	r5, #0
 80201fc:	e7f7      	b.n	80201ee <_printf_i+0x202>
 80201fe:	46c0      	nop			@ (mov r8, r8)
 8020200:	0802650b 	.word	0x0802650b
 8020204:	0802651c 	.word	0x0802651c

08020208 <std>:
 8020208:	2300      	movs	r3, #0
 802020a:	b510      	push	{r4, lr}
 802020c:	0004      	movs	r4, r0
 802020e:	6003      	str	r3, [r0, #0]
 8020210:	6043      	str	r3, [r0, #4]
 8020212:	6083      	str	r3, [r0, #8]
 8020214:	8181      	strh	r1, [r0, #12]
 8020216:	6643      	str	r3, [r0, #100]	@ 0x64
 8020218:	81c2      	strh	r2, [r0, #14]
 802021a:	6103      	str	r3, [r0, #16]
 802021c:	6143      	str	r3, [r0, #20]
 802021e:	6183      	str	r3, [r0, #24]
 8020220:	0019      	movs	r1, r3
 8020222:	2208      	movs	r2, #8
 8020224:	305c      	adds	r0, #92	@ 0x5c
 8020226:	f000 fa67 	bl	80206f8 <memset>
 802022a:	4b0b      	ldr	r3, [pc, #44]	@ (8020258 <std+0x50>)
 802022c:	6224      	str	r4, [r4, #32]
 802022e:	6263      	str	r3, [r4, #36]	@ 0x24
 8020230:	4b0a      	ldr	r3, [pc, #40]	@ (802025c <std+0x54>)
 8020232:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020234:	4b0a      	ldr	r3, [pc, #40]	@ (8020260 <std+0x58>)
 8020236:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020238:	4b0a      	ldr	r3, [pc, #40]	@ (8020264 <std+0x5c>)
 802023a:	6323      	str	r3, [r4, #48]	@ 0x30
 802023c:	4b0a      	ldr	r3, [pc, #40]	@ (8020268 <std+0x60>)
 802023e:	429c      	cmp	r4, r3
 8020240:	d005      	beq.n	802024e <std+0x46>
 8020242:	4b0a      	ldr	r3, [pc, #40]	@ (802026c <std+0x64>)
 8020244:	429c      	cmp	r4, r3
 8020246:	d002      	beq.n	802024e <std+0x46>
 8020248:	4b09      	ldr	r3, [pc, #36]	@ (8020270 <std+0x68>)
 802024a:	429c      	cmp	r4, r3
 802024c:	d103      	bne.n	8020256 <std+0x4e>
 802024e:	0020      	movs	r0, r4
 8020250:	3058      	adds	r0, #88	@ 0x58
 8020252:	f000 fb1f 	bl	8020894 <__retarget_lock_init_recursive>
 8020256:	bd10      	pop	{r4, pc}
 8020258:	080204b1 	.word	0x080204b1
 802025c:	080204d9 	.word	0x080204d9
 8020260:	08020511 	.word	0x08020511
 8020264:	0802053d 	.word	0x0802053d
 8020268:	20003294 	.word	0x20003294
 802026c:	200032fc 	.word	0x200032fc
 8020270:	20003364 	.word	0x20003364

08020274 <stdio_exit_handler>:
 8020274:	b510      	push	{r4, lr}
 8020276:	4a03      	ldr	r2, [pc, #12]	@ (8020284 <stdio_exit_handler+0x10>)
 8020278:	4903      	ldr	r1, [pc, #12]	@ (8020288 <stdio_exit_handler+0x14>)
 802027a:	4804      	ldr	r0, [pc, #16]	@ (802028c <stdio_exit_handler+0x18>)
 802027c:	f000 f86c 	bl	8020358 <_fwalk_sglue>
 8020280:	bd10      	pop	{r4, pc}
 8020282:	46c0      	nop			@ (mov r8, r8)
 8020284:	20000258 	.word	0x20000258
 8020288:	08022eb9 	.word	0x08022eb9
 802028c:	200003d4 	.word	0x200003d4

08020290 <cleanup_stdio>:
 8020290:	6841      	ldr	r1, [r0, #4]
 8020292:	4b0b      	ldr	r3, [pc, #44]	@ (80202c0 <cleanup_stdio+0x30>)
 8020294:	b510      	push	{r4, lr}
 8020296:	0004      	movs	r4, r0
 8020298:	4299      	cmp	r1, r3
 802029a:	d001      	beq.n	80202a0 <cleanup_stdio+0x10>
 802029c:	f002 fe0c 	bl	8022eb8 <_fflush_r>
 80202a0:	68a1      	ldr	r1, [r4, #8]
 80202a2:	4b08      	ldr	r3, [pc, #32]	@ (80202c4 <cleanup_stdio+0x34>)
 80202a4:	4299      	cmp	r1, r3
 80202a6:	d002      	beq.n	80202ae <cleanup_stdio+0x1e>
 80202a8:	0020      	movs	r0, r4
 80202aa:	f002 fe05 	bl	8022eb8 <_fflush_r>
 80202ae:	68e1      	ldr	r1, [r4, #12]
 80202b0:	4b05      	ldr	r3, [pc, #20]	@ (80202c8 <cleanup_stdio+0x38>)
 80202b2:	4299      	cmp	r1, r3
 80202b4:	d002      	beq.n	80202bc <cleanup_stdio+0x2c>
 80202b6:	0020      	movs	r0, r4
 80202b8:	f002 fdfe 	bl	8022eb8 <_fflush_r>
 80202bc:	bd10      	pop	{r4, pc}
 80202be:	46c0      	nop			@ (mov r8, r8)
 80202c0:	20003294 	.word	0x20003294
 80202c4:	200032fc 	.word	0x200032fc
 80202c8:	20003364 	.word	0x20003364

080202cc <global_stdio_init.part.0>:
 80202cc:	b510      	push	{r4, lr}
 80202ce:	4b09      	ldr	r3, [pc, #36]	@ (80202f4 <global_stdio_init.part.0+0x28>)
 80202d0:	4a09      	ldr	r2, [pc, #36]	@ (80202f8 <global_stdio_init.part.0+0x2c>)
 80202d2:	2104      	movs	r1, #4
 80202d4:	601a      	str	r2, [r3, #0]
 80202d6:	4809      	ldr	r0, [pc, #36]	@ (80202fc <global_stdio_init.part.0+0x30>)
 80202d8:	2200      	movs	r2, #0
 80202da:	f7ff ff95 	bl	8020208 <std>
 80202de:	2201      	movs	r2, #1
 80202e0:	2109      	movs	r1, #9
 80202e2:	4807      	ldr	r0, [pc, #28]	@ (8020300 <global_stdio_init.part.0+0x34>)
 80202e4:	f7ff ff90 	bl	8020208 <std>
 80202e8:	2202      	movs	r2, #2
 80202ea:	2112      	movs	r1, #18
 80202ec:	4805      	ldr	r0, [pc, #20]	@ (8020304 <global_stdio_init.part.0+0x38>)
 80202ee:	f7ff ff8b 	bl	8020208 <std>
 80202f2:	bd10      	pop	{r4, pc}
 80202f4:	200033cc 	.word	0x200033cc
 80202f8:	08020275 	.word	0x08020275
 80202fc:	20003294 	.word	0x20003294
 8020300:	200032fc 	.word	0x200032fc
 8020304:	20003364 	.word	0x20003364

08020308 <__sfp_lock_acquire>:
 8020308:	b510      	push	{r4, lr}
 802030a:	4802      	ldr	r0, [pc, #8]	@ (8020314 <__sfp_lock_acquire+0xc>)
 802030c:	f000 fac3 	bl	8020896 <__retarget_lock_acquire_recursive>
 8020310:	bd10      	pop	{r4, pc}
 8020312:	46c0      	nop			@ (mov r8, r8)
 8020314:	200033d5 	.word	0x200033d5

08020318 <__sfp_lock_release>:
 8020318:	b510      	push	{r4, lr}
 802031a:	4802      	ldr	r0, [pc, #8]	@ (8020324 <__sfp_lock_release+0xc>)
 802031c:	f000 fabc 	bl	8020898 <__retarget_lock_release_recursive>
 8020320:	bd10      	pop	{r4, pc}
 8020322:	46c0      	nop			@ (mov r8, r8)
 8020324:	200033d5 	.word	0x200033d5

08020328 <__sinit>:
 8020328:	b510      	push	{r4, lr}
 802032a:	0004      	movs	r4, r0
 802032c:	f7ff ffec 	bl	8020308 <__sfp_lock_acquire>
 8020330:	6a23      	ldr	r3, [r4, #32]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d002      	beq.n	802033c <__sinit+0x14>
 8020336:	f7ff ffef 	bl	8020318 <__sfp_lock_release>
 802033a:	bd10      	pop	{r4, pc}
 802033c:	4b04      	ldr	r3, [pc, #16]	@ (8020350 <__sinit+0x28>)
 802033e:	6223      	str	r3, [r4, #32]
 8020340:	4b04      	ldr	r3, [pc, #16]	@ (8020354 <__sinit+0x2c>)
 8020342:	681b      	ldr	r3, [r3, #0]
 8020344:	2b00      	cmp	r3, #0
 8020346:	d1f6      	bne.n	8020336 <__sinit+0xe>
 8020348:	f7ff ffc0 	bl	80202cc <global_stdio_init.part.0>
 802034c:	e7f3      	b.n	8020336 <__sinit+0xe>
 802034e:	46c0      	nop			@ (mov r8, r8)
 8020350:	08020291 	.word	0x08020291
 8020354:	200033cc 	.word	0x200033cc

08020358 <_fwalk_sglue>:
 8020358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802035a:	0014      	movs	r4, r2
 802035c:	2600      	movs	r6, #0
 802035e:	9000      	str	r0, [sp, #0]
 8020360:	9101      	str	r1, [sp, #4]
 8020362:	68a5      	ldr	r5, [r4, #8]
 8020364:	6867      	ldr	r7, [r4, #4]
 8020366:	3f01      	subs	r7, #1
 8020368:	d504      	bpl.n	8020374 <_fwalk_sglue+0x1c>
 802036a:	6824      	ldr	r4, [r4, #0]
 802036c:	2c00      	cmp	r4, #0
 802036e:	d1f8      	bne.n	8020362 <_fwalk_sglue+0xa>
 8020370:	0030      	movs	r0, r6
 8020372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020374:	89ab      	ldrh	r3, [r5, #12]
 8020376:	2b01      	cmp	r3, #1
 8020378:	d908      	bls.n	802038c <_fwalk_sglue+0x34>
 802037a:	220e      	movs	r2, #14
 802037c:	5eab      	ldrsh	r3, [r5, r2]
 802037e:	3301      	adds	r3, #1
 8020380:	d004      	beq.n	802038c <_fwalk_sglue+0x34>
 8020382:	0029      	movs	r1, r5
 8020384:	9800      	ldr	r0, [sp, #0]
 8020386:	9b01      	ldr	r3, [sp, #4]
 8020388:	4798      	blx	r3
 802038a:	4306      	orrs	r6, r0
 802038c:	3568      	adds	r5, #104	@ 0x68
 802038e:	e7ea      	b.n	8020366 <_fwalk_sglue+0xe>

08020390 <iprintf>:
 8020390:	b40f      	push	{r0, r1, r2, r3}
 8020392:	b507      	push	{r0, r1, r2, lr}
 8020394:	4905      	ldr	r1, [pc, #20]	@ (80203ac <iprintf+0x1c>)
 8020396:	ab04      	add	r3, sp, #16
 8020398:	6808      	ldr	r0, [r1, #0]
 802039a:	cb04      	ldmia	r3!, {r2}
 802039c:	6881      	ldr	r1, [r0, #8]
 802039e:	9301      	str	r3, [sp, #4]
 80203a0:	f002 fbe8 	bl	8022b74 <_vfiprintf_r>
 80203a4:	b003      	add	sp, #12
 80203a6:	bc08      	pop	{r3}
 80203a8:	b004      	add	sp, #16
 80203aa:	4718      	bx	r3
 80203ac:	200003d0 	.word	0x200003d0

080203b0 <_puts_r>:
 80203b0:	6a03      	ldr	r3, [r0, #32]
 80203b2:	b570      	push	{r4, r5, r6, lr}
 80203b4:	0005      	movs	r5, r0
 80203b6:	000e      	movs	r6, r1
 80203b8:	6884      	ldr	r4, [r0, #8]
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d101      	bne.n	80203c2 <_puts_r+0x12>
 80203be:	f7ff ffb3 	bl	8020328 <__sinit>
 80203c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80203c4:	07db      	lsls	r3, r3, #31
 80203c6:	d405      	bmi.n	80203d4 <_puts_r+0x24>
 80203c8:	89a3      	ldrh	r3, [r4, #12]
 80203ca:	059b      	lsls	r3, r3, #22
 80203cc:	d402      	bmi.n	80203d4 <_puts_r+0x24>
 80203ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80203d0:	f000 fa61 	bl	8020896 <__retarget_lock_acquire_recursive>
 80203d4:	89a3      	ldrh	r3, [r4, #12]
 80203d6:	071b      	lsls	r3, r3, #28
 80203d8:	d502      	bpl.n	80203e0 <_puts_r+0x30>
 80203da:	6923      	ldr	r3, [r4, #16]
 80203dc:	2b00      	cmp	r3, #0
 80203de:	d11f      	bne.n	8020420 <_puts_r+0x70>
 80203e0:	0021      	movs	r1, r4
 80203e2:	0028      	movs	r0, r5
 80203e4:	f000 f92a 	bl	802063c <__swsetup_r>
 80203e8:	2800      	cmp	r0, #0
 80203ea:	d019      	beq.n	8020420 <_puts_r+0x70>
 80203ec:	2501      	movs	r5, #1
 80203ee:	426d      	negs	r5, r5
 80203f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80203f2:	07db      	lsls	r3, r3, #31
 80203f4:	d405      	bmi.n	8020402 <_puts_r+0x52>
 80203f6:	89a3      	ldrh	r3, [r4, #12]
 80203f8:	059b      	lsls	r3, r3, #22
 80203fa:	d402      	bmi.n	8020402 <_puts_r+0x52>
 80203fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80203fe:	f000 fa4b 	bl	8020898 <__retarget_lock_release_recursive>
 8020402:	0028      	movs	r0, r5
 8020404:	bd70      	pop	{r4, r5, r6, pc}
 8020406:	3601      	adds	r6, #1
 8020408:	60a3      	str	r3, [r4, #8]
 802040a:	2b00      	cmp	r3, #0
 802040c:	da04      	bge.n	8020418 <_puts_r+0x68>
 802040e:	69a2      	ldr	r2, [r4, #24]
 8020410:	429a      	cmp	r2, r3
 8020412:	dc16      	bgt.n	8020442 <_puts_r+0x92>
 8020414:	290a      	cmp	r1, #10
 8020416:	d014      	beq.n	8020442 <_puts_r+0x92>
 8020418:	6823      	ldr	r3, [r4, #0]
 802041a:	1c5a      	adds	r2, r3, #1
 802041c:	6022      	str	r2, [r4, #0]
 802041e:	7019      	strb	r1, [r3, #0]
 8020420:	68a3      	ldr	r3, [r4, #8]
 8020422:	7831      	ldrb	r1, [r6, #0]
 8020424:	3b01      	subs	r3, #1
 8020426:	2900      	cmp	r1, #0
 8020428:	d1ed      	bne.n	8020406 <_puts_r+0x56>
 802042a:	60a3      	str	r3, [r4, #8]
 802042c:	2b00      	cmp	r3, #0
 802042e:	da0f      	bge.n	8020450 <_puts_r+0xa0>
 8020430:	0022      	movs	r2, r4
 8020432:	0028      	movs	r0, r5
 8020434:	310a      	adds	r1, #10
 8020436:	f000 f8bf 	bl	80205b8 <__swbuf_r>
 802043a:	3001      	adds	r0, #1
 802043c:	d0d6      	beq.n	80203ec <_puts_r+0x3c>
 802043e:	250a      	movs	r5, #10
 8020440:	e7d6      	b.n	80203f0 <_puts_r+0x40>
 8020442:	0022      	movs	r2, r4
 8020444:	0028      	movs	r0, r5
 8020446:	f000 f8b7 	bl	80205b8 <__swbuf_r>
 802044a:	3001      	adds	r0, #1
 802044c:	d1e8      	bne.n	8020420 <_puts_r+0x70>
 802044e:	e7cd      	b.n	80203ec <_puts_r+0x3c>
 8020450:	6823      	ldr	r3, [r4, #0]
 8020452:	1c5a      	adds	r2, r3, #1
 8020454:	6022      	str	r2, [r4, #0]
 8020456:	220a      	movs	r2, #10
 8020458:	701a      	strb	r2, [r3, #0]
 802045a:	e7f0      	b.n	802043e <_puts_r+0x8e>

0802045c <puts>:
 802045c:	b510      	push	{r4, lr}
 802045e:	4b03      	ldr	r3, [pc, #12]	@ (802046c <puts+0x10>)
 8020460:	0001      	movs	r1, r0
 8020462:	6818      	ldr	r0, [r3, #0]
 8020464:	f7ff ffa4 	bl	80203b0 <_puts_r>
 8020468:	bd10      	pop	{r4, pc}
 802046a:	46c0      	nop			@ (mov r8, r8)
 802046c:	200003d0 	.word	0x200003d0

08020470 <siprintf>:
 8020470:	b40e      	push	{r1, r2, r3}
 8020472:	b500      	push	{lr}
 8020474:	490b      	ldr	r1, [pc, #44]	@ (80204a4 <siprintf+0x34>)
 8020476:	b09c      	sub	sp, #112	@ 0x70
 8020478:	ab1d      	add	r3, sp, #116	@ 0x74
 802047a:	9002      	str	r0, [sp, #8]
 802047c:	9006      	str	r0, [sp, #24]
 802047e:	9107      	str	r1, [sp, #28]
 8020480:	9104      	str	r1, [sp, #16]
 8020482:	4809      	ldr	r0, [pc, #36]	@ (80204a8 <siprintf+0x38>)
 8020484:	4909      	ldr	r1, [pc, #36]	@ (80204ac <siprintf+0x3c>)
 8020486:	cb04      	ldmia	r3!, {r2}
 8020488:	9105      	str	r1, [sp, #20]
 802048a:	6800      	ldr	r0, [r0, #0]
 802048c:	a902      	add	r1, sp, #8
 802048e:	9301      	str	r3, [sp, #4]
 8020490:	f002 fa4a 	bl	8022928 <_svfiprintf_r>
 8020494:	2200      	movs	r2, #0
 8020496:	9b02      	ldr	r3, [sp, #8]
 8020498:	701a      	strb	r2, [r3, #0]
 802049a:	b01c      	add	sp, #112	@ 0x70
 802049c:	bc08      	pop	{r3}
 802049e:	b003      	add	sp, #12
 80204a0:	4718      	bx	r3
 80204a2:	46c0      	nop			@ (mov r8, r8)
 80204a4:	7fffffff 	.word	0x7fffffff
 80204a8:	200003d0 	.word	0x200003d0
 80204ac:	ffff0208 	.word	0xffff0208

080204b0 <__sread>:
 80204b0:	b570      	push	{r4, r5, r6, lr}
 80204b2:	000c      	movs	r4, r1
 80204b4:	250e      	movs	r5, #14
 80204b6:	5f49      	ldrsh	r1, [r1, r5]
 80204b8:	f000 f99a 	bl	80207f0 <_read_r>
 80204bc:	2800      	cmp	r0, #0
 80204be:	db03      	blt.n	80204c8 <__sread+0x18>
 80204c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80204c2:	181b      	adds	r3, r3, r0
 80204c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80204c6:	bd70      	pop	{r4, r5, r6, pc}
 80204c8:	89a3      	ldrh	r3, [r4, #12]
 80204ca:	4a02      	ldr	r2, [pc, #8]	@ (80204d4 <__sread+0x24>)
 80204cc:	4013      	ands	r3, r2
 80204ce:	81a3      	strh	r3, [r4, #12]
 80204d0:	e7f9      	b.n	80204c6 <__sread+0x16>
 80204d2:	46c0      	nop			@ (mov r8, r8)
 80204d4:	ffffefff 	.word	0xffffefff

080204d8 <__swrite>:
 80204d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204da:	001f      	movs	r7, r3
 80204dc:	898b      	ldrh	r3, [r1, #12]
 80204de:	0005      	movs	r5, r0
 80204e0:	000c      	movs	r4, r1
 80204e2:	0016      	movs	r6, r2
 80204e4:	05db      	lsls	r3, r3, #23
 80204e6:	d505      	bpl.n	80204f4 <__swrite+0x1c>
 80204e8:	230e      	movs	r3, #14
 80204ea:	5ec9      	ldrsh	r1, [r1, r3]
 80204ec:	2200      	movs	r2, #0
 80204ee:	2302      	movs	r3, #2
 80204f0:	f000 f96a 	bl	80207c8 <_lseek_r>
 80204f4:	89a3      	ldrh	r3, [r4, #12]
 80204f6:	4a05      	ldr	r2, [pc, #20]	@ (802050c <__swrite+0x34>)
 80204f8:	0028      	movs	r0, r5
 80204fa:	4013      	ands	r3, r2
 80204fc:	81a3      	strh	r3, [r4, #12]
 80204fe:	0032      	movs	r2, r6
 8020500:	230e      	movs	r3, #14
 8020502:	5ee1      	ldrsh	r1, [r4, r3]
 8020504:	003b      	movs	r3, r7
 8020506:	f000 f987 	bl	8020818 <_write_r>
 802050a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802050c:	ffffefff 	.word	0xffffefff

08020510 <__sseek>:
 8020510:	b570      	push	{r4, r5, r6, lr}
 8020512:	000c      	movs	r4, r1
 8020514:	250e      	movs	r5, #14
 8020516:	5f49      	ldrsh	r1, [r1, r5]
 8020518:	f000 f956 	bl	80207c8 <_lseek_r>
 802051c:	89a3      	ldrh	r3, [r4, #12]
 802051e:	1c42      	adds	r2, r0, #1
 8020520:	d103      	bne.n	802052a <__sseek+0x1a>
 8020522:	4a05      	ldr	r2, [pc, #20]	@ (8020538 <__sseek+0x28>)
 8020524:	4013      	ands	r3, r2
 8020526:	81a3      	strh	r3, [r4, #12]
 8020528:	bd70      	pop	{r4, r5, r6, pc}
 802052a:	2280      	movs	r2, #128	@ 0x80
 802052c:	0152      	lsls	r2, r2, #5
 802052e:	4313      	orrs	r3, r2
 8020530:	81a3      	strh	r3, [r4, #12]
 8020532:	6560      	str	r0, [r4, #84]	@ 0x54
 8020534:	e7f8      	b.n	8020528 <__sseek+0x18>
 8020536:	46c0      	nop			@ (mov r8, r8)
 8020538:	ffffefff 	.word	0xffffefff

0802053c <__sclose>:
 802053c:	b510      	push	{r4, lr}
 802053e:	230e      	movs	r3, #14
 8020540:	5ec9      	ldrsh	r1, [r1, r3]
 8020542:	f000 f92f 	bl	80207a4 <_close_r>
 8020546:	bd10      	pop	{r4, pc}

08020548 <_vsniprintf_r>:
 8020548:	b530      	push	{r4, r5, lr}
 802054a:	0014      	movs	r4, r2
 802054c:	0005      	movs	r5, r0
 802054e:	001a      	movs	r2, r3
 8020550:	b09b      	sub	sp, #108	@ 0x6c
 8020552:	2c00      	cmp	r4, #0
 8020554:	da05      	bge.n	8020562 <_vsniprintf_r+0x1a>
 8020556:	238b      	movs	r3, #139	@ 0x8b
 8020558:	6003      	str	r3, [r0, #0]
 802055a:	2001      	movs	r0, #1
 802055c:	4240      	negs	r0, r0
 802055e:	b01b      	add	sp, #108	@ 0x6c
 8020560:	bd30      	pop	{r4, r5, pc}
 8020562:	2382      	movs	r3, #130	@ 0x82
 8020564:	4668      	mov	r0, sp
 8020566:	009b      	lsls	r3, r3, #2
 8020568:	8183      	strh	r3, [r0, #12]
 802056a:	2300      	movs	r3, #0
 802056c:	9100      	str	r1, [sp, #0]
 802056e:	9104      	str	r1, [sp, #16]
 8020570:	429c      	cmp	r4, r3
 8020572:	d000      	beq.n	8020576 <_vsniprintf_r+0x2e>
 8020574:	1e63      	subs	r3, r4, #1
 8020576:	9302      	str	r3, [sp, #8]
 8020578:	9305      	str	r3, [sp, #20]
 802057a:	2301      	movs	r3, #1
 802057c:	4669      	mov	r1, sp
 802057e:	425b      	negs	r3, r3
 8020580:	81cb      	strh	r3, [r1, #14]
 8020582:	0028      	movs	r0, r5
 8020584:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020586:	f002 f9cf 	bl	8022928 <_svfiprintf_r>
 802058a:	1c43      	adds	r3, r0, #1
 802058c:	da01      	bge.n	8020592 <_vsniprintf_r+0x4a>
 802058e:	238b      	movs	r3, #139	@ 0x8b
 8020590:	602b      	str	r3, [r5, #0]
 8020592:	2c00      	cmp	r4, #0
 8020594:	d0e3      	beq.n	802055e <_vsniprintf_r+0x16>
 8020596:	2200      	movs	r2, #0
 8020598:	9b00      	ldr	r3, [sp, #0]
 802059a:	701a      	strb	r2, [r3, #0]
 802059c:	e7df      	b.n	802055e <_vsniprintf_r+0x16>
	...

080205a0 <vsniprintf>:
 80205a0:	b513      	push	{r0, r1, r4, lr}
 80205a2:	4c04      	ldr	r4, [pc, #16]	@ (80205b4 <vsniprintf+0x14>)
 80205a4:	9300      	str	r3, [sp, #0]
 80205a6:	0013      	movs	r3, r2
 80205a8:	000a      	movs	r2, r1
 80205aa:	0001      	movs	r1, r0
 80205ac:	6820      	ldr	r0, [r4, #0]
 80205ae:	f7ff ffcb 	bl	8020548 <_vsniprintf_r>
 80205b2:	bd16      	pop	{r1, r2, r4, pc}
 80205b4:	200003d0 	.word	0x200003d0

080205b8 <__swbuf_r>:
 80205b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205ba:	0006      	movs	r6, r0
 80205bc:	000d      	movs	r5, r1
 80205be:	0014      	movs	r4, r2
 80205c0:	2800      	cmp	r0, #0
 80205c2:	d004      	beq.n	80205ce <__swbuf_r+0x16>
 80205c4:	6a03      	ldr	r3, [r0, #32]
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d101      	bne.n	80205ce <__swbuf_r+0x16>
 80205ca:	f7ff fead 	bl	8020328 <__sinit>
 80205ce:	69a3      	ldr	r3, [r4, #24]
 80205d0:	60a3      	str	r3, [r4, #8]
 80205d2:	89a3      	ldrh	r3, [r4, #12]
 80205d4:	071b      	lsls	r3, r3, #28
 80205d6:	d502      	bpl.n	80205de <__swbuf_r+0x26>
 80205d8:	6923      	ldr	r3, [r4, #16]
 80205da:	2b00      	cmp	r3, #0
 80205dc:	d109      	bne.n	80205f2 <__swbuf_r+0x3a>
 80205de:	0021      	movs	r1, r4
 80205e0:	0030      	movs	r0, r6
 80205e2:	f000 f82b 	bl	802063c <__swsetup_r>
 80205e6:	2800      	cmp	r0, #0
 80205e8:	d003      	beq.n	80205f2 <__swbuf_r+0x3a>
 80205ea:	2501      	movs	r5, #1
 80205ec:	426d      	negs	r5, r5
 80205ee:	0028      	movs	r0, r5
 80205f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205f2:	6923      	ldr	r3, [r4, #16]
 80205f4:	6820      	ldr	r0, [r4, #0]
 80205f6:	b2ef      	uxtb	r7, r5
 80205f8:	1ac0      	subs	r0, r0, r3
 80205fa:	6963      	ldr	r3, [r4, #20]
 80205fc:	b2ed      	uxtb	r5, r5
 80205fe:	4283      	cmp	r3, r0
 8020600:	dc05      	bgt.n	802060e <__swbuf_r+0x56>
 8020602:	0021      	movs	r1, r4
 8020604:	0030      	movs	r0, r6
 8020606:	f002 fc57 	bl	8022eb8 <_fflush_r>
 802060a:	2800      	cmp	r0, #0
 802060c:	d1ed      	bne.n	80205ea <__swbuf_r+0x32>
 802060e:	68a3      	ldr	r3, [r4, #8]
 8020610:	3001      	adds	r0, #1
 8020612:	3b01      	subs	r3, #1
 8020614:	60a3      	str	r3, [r4, #8]
 8020616:	6823      	ldr	r3, [r4, #0]
 8020618:	1c5a      	adds	r2, r3, #1
 802061a:	6022      	str	r2, [r4, #0]
 802061c:	701f      	strb	r7, [r3, #0]
 802061e:	6963      	ldr	r3, [r4, #20]
 8020620:	4283      	cmp	r3, r0
 8020622:	d004      	beq.n	802062e <__swbuf_r+0x76>
 8020624:	89a3      	ldrh	r3, [r4, #12]
 8020626:	07db      	lsls	r3, r3, #31
 8020628:	d5e1      	bpl.n	80205ee <__swbuf_r+0x36>
 802062a:	2d0a      	cmp	r5, #10
 802062c:	d1df      	bne.n	80205ee <__swbuf_r+0x36>
 802062e:	0021      	movs	r1, r4
 8020630:	0030      	movs	r0, r6
 8020632:	f002 fc41 	bl	8022eb8 <_fflush_r>
 8020636:	2800      	cmp	r0, #0
 8020638:	d0d9      	beq.n	80205ee <__swbuf_r+0x36>
 802063a:	e7d6      	b.n	80205ea <__swbuf_r+0x32>

0802063c <__swsetup_r>:
 802063c:	4b2d      	ldr	r3, [pc, #180]	@ (80206f4 <__swsetup_r+0xb8>)
 802063e:	b570      	push	{r4, r5, r6, lr}
 8020640:	0005      	movs	r5, r0
 8020642:	6818      	ldr	r0, [r3, #0]
 8020644:	000c      	movs	r4, r1
 8020646:	2800      	cmp	r0, #0
 8020648:	d004      	beq.n	8020654 <__swsetup_r+0x18>
 802064a:	6a03      	ldr	r3, [r0, #32]
 802064c:	2b00      	cmp	r3, #0
 802064e:	d101      	bne.n	8020654 <__swsetup_r+0x18>
 8020650:	f7ff fe6a 	bl	8020328 <__sinit>
 8020654:	230c      	movs	r3, #12
 8020656:	5ee2      	ldrsh	r2, [r4, r3]
 8020658:	0713      	lsls	r3, r2, #28
 802065a:	d423      	bmi.n	80206a4 <__swsetup_r+0x68>
 802065c:	06d3      	lsls	r3, r2, #27
 802065e:	d407      	bmi.n	8020670 <__swsetup_r+0x34>
 8020660:	2309      	movs	r3, #9
 8020662:	602b      	str	r3, [r5, #0]
 8020664:	2340      	movs	r3, #64	@ 0x40
 8020666:	2001      	movs	r0, #1
 8020668:	4313      	orrs	r3, r2
 802066a:	81a3      	strh	r3, [r4, #12]
 802066c:	4240      	negs	r0, r0
 802066e:	e03a      	b.n	80206e6 <__swsetup_r+0xaa>
 8020670:	0752      	lsls	r2, r2, #29
 8020672:	d513      	bpl.n	802069c <__swsetup_r+0x60>
 8020674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020676:	2900      	cmp	r1, #0
 8020678:	d008      	beq.n	802068c <__swsetup_r+0x50>
 802067a:	0023      	movs	r3, r4
 802067c:	3344      	adds	r3, #68	@ 0x44
 802067e:	4299      	cmp	r1, r3
 8020680:	d002      	beq.n	8020688 <__swsetup_r+0x4c>
 8020682:	0028      	movs	r0, r5
 8020684:	f000 ffa6 	bl	80215d4 <_free_r>
 8020688:	2300      	movs	r3, #0
 802068a:	6363      	str	r3, [r4, #52]	@ 0x34
 802068c:	2224      	movs	r2, #36	@ 0x24
 802068e:	89a3      	ldrh	r3, [r4, #12]
 8020690:	4393      	bics	r3, r2
 8020692:	81a3      	strh	r3, [r4, #12]
 8020694:	2300      	movs	r3, #0
 8020696:	6063      	str	r3, [r4, #4]
 8020698:	6923      	ldr	r3, [r4, #16]
 802069a:	6023      	str	r3, [r4, #0]
 802069c:	2308      	movs	r3, #8
 802069e:	89a2      	ldrh	r2, [r4, #12]
 80206a0:	4313      	orrs	r3, r2
 80206a2:	81a3      	strh	r3, [r4, #12]
 80206a4:	6923      	ldr	r3, [r4, #16]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d10b      	bne.n	80206c2 <__swsetup_r+0x86>
 80206aa:	21a0      	movs	r1, #160	@ 0xa0
 80206ac:	2280      	movs	r2, #128	@ 0x80
 80206ae:	89a3      	ldrh	r3, [r4, #12]
 80206b0:	0089      	lsls	r1, r1, #2
 80206b2:	0092      	lsls	r2, r2, #2
 80206b4:	400b      	ands	r3, r1
 80206b6:	4293      	cmp	r3, r2
 80206b8:	d003      	beq.n	80206c2 <__swsetup_r+0x86>
 80206ba:	0021      	movs	r1, r4
 80206bc:	0028      	movs	r0, r5
 80206be:	f002 fc51 	bl	8022f64 <__smakebuf_r>
 80206c2:	230c      	movs	r3, #12
 80206c4:	5ee2      	ldrsh	r2, [r4, r3]
 80206c6:	2101      	movs	r1, #1
 80206c8:	0013      	movs	r3, r2
 80206ca:	400b      	ands	r3, r1
 80206cc:	420a      	tst	r2, r1
 80206ce:	d00b      	beq.n	80206e8 <__swsetup_r+0xac>
 80206d0:	2300      	movs	r3, #0
 80206d2:	60a3      	str	r3, [r4, #8]
 80206d4:	6963      	ldr	r3, [r4, #20]
 80206d6:	425b      	negs	r3, r3
 80206d8:	61a3      	str	r3, [r4, #24]
 80206da:	2000      	movs	r0, #0
 80206dc:	6923      	ldr	r3, [r4, #16]
 80206de:	4283      	cmp	r3, r0
 80206e0:	d101      	bne.n	80206e6 <__swsetup_r+0xaa>
 80206e2:	0613      	lsls	r3, r2, #24
 80206e4:	d4be      	bmi.n	8020664 <__swsetup_r+0x28>
 80206e6:	bd70      	pop	{r4, r5, r6, pc}
 80206e8:	0791      	lsls	r1, r2, #30
 80206ea:	d400      	bmi.n	80206ee <__swsetup_r+0xb2>
 80206ec:	6963      	ldr	r3, [r4, #20]
 80206ee:	60a3      	str	r3, [r4, #8]
 80206f0:	e7f3      	b.n	80206da <__swsetup_r+0x9e>
 80206f2:	46c0      	nop			@ (mov r8, r8)
 80206f4:	200003d0 	.word	0x200003d0

080206f8 <memset>:
 80206f8:	0003      	movs	r3, r0
 80206fa:	1882      	adds	r2, r0, r2
 80206fc:	4293      	cmp	r3, r2
 80206fe:	d100      	bne.n	8020702 <memset+0xa>
 8020700:	4770      	bx	lr
 8020702:	7019      	strb	r1, [r3, #0]
 8020704:	3301      	adds	r3, #1
 8020706:	e7f9      	b.n	80206fc <memset+0x4>

08020708 <strchr>:
 8020708:	b2c9      	uxtb	r1, r1
 802070a:	7803      	ldrb	r3, [r0, #0]
 802070c:	2b00      	cmp	r3, #0
 802070e:	d004      	beq.n	802071a <strchr+0x12>
 8020710:	428b      	cmp	r3, r1
 8020712:	d100      	bne.n	8020716 <strchr+0xe>
 8020714:	4770      	bx	lr
 8020716:	3001      	adds	r0, #1
 8020718:	e7f7      	b.n	802070a <strchr+0x2>
 802071a:	424b      	negs	r3, r1
 802071c:	4159      	adcs	r1, r3
 802071e:	4249      	negs	r1, r1
 8020720:	4008      	ands	r0, r1
 8020722:	e7f7      	b.n	8020714 <strchr+0xc>

08020724 <strncmp>:
 8020724:	b530      	push	{r4, r5, lr}
 8020726:	0005      	movs	r5, r0
 8020728:	1e10      	subs	r0, r2, #0
 802072a:	d00b      	beq.n	8020744 <strncmp+0x20>
 802072c:	2400      	movs	r4, #0
 802072e:	3a01      	subs	r2, #1
 8020730:	5d2b      	ldrb	r3, [r5, r4]
 8020732:	5d08      	ldrb	r0, [r1, r4]
 8020734:	4283      	cmp	r3, r0
 8020736:	d104      	bne.n	8020742 <strncmp+0x1e>
 8020738:	42a2      	cmp	r2, r4
 802073a:	d002      	beq.n	8020742 <strncmp+0x1e>
 802073c:	3401      	adds	r4, #1
 802073e:	2b00      	cmp	r3, #0
 8020740:	d1f6      	bne.n	8020730 <strncmp+0xc>
 8020742:	1a18      	subs	r0, r3, r0
 8020744:	bd30      	pop	{r4, r5, pc}

08020746 <strncpy>:
 8020746:	0003      	movs	r3, r0
 8020748:	b530      	push	{r4, r5, lr}
 802074a:	001d      	movs	r5, r3
 802074c:	2a00      	cmp	r2, #0
 802074e:	d006      	beq.n	802075e <strncpy+0x18>
 8020750:	780c      	ldrb	r4, [r1, #0]
 8020752:	3a01      	subs	r2, #1
 8020754:	3301      	adds	r3, #1
 8020756:	702c      	strb	r4, [r5, #0]
 8020758:	3101      	adds	r1, #1
 802075a:	2c00      	cmp	r4, #0
 802075c:	d1f5      	bne.n	802074a <strncpy+0x4>
 802075e:	2100      	movs	r1, #0
 8020760:	189a      	adds	r2, r3, r2
 8020762:	4293      	cmp	r3, r2
 8020764:	d100      	bne.n	8020768 <strncpy+0x22>
 8020766:	bd30      	pop	{r4, r5, pc}
 8020768:	7019      	strb	r1, [r3, #0]
 802076a:	3301      	adds	r3, #1
 802076c:	e7f9      	b.n	8020762 <strncpy+0x1c>

0802076e <strstr>:
 802076e:	780a      	ldrb	r2, [r1, #0]
 8020770:	b530      	push	{r4, r5, lr}
 8020772:	2a00      	cmp	r2, #0
 8020774:	d10c      	bne.n	8020790 <strstr+0x22>
 8020776:	bd30      	pop	{r4, r5, pc}
 8020778:	429a      	cmp	r2, r3
 802077a:	d108      	bne.n	802078e <strstr+0x20>
 802077c:	2301      	movs	r3, #1
 802077e:	5ccc      	ldrb	r4, [r1, r3]
 8020780:	2c00      	cmp	r4, #0
 8020782:	d0f8      	beq.n	8020776 <strstr+0x8>
 8020784:	5cc5      	ldrb	r5, [r0, r3]
 8020786:	42a5      	cmp	r5, r4
 8020788:	d101      	bne.n	802078e <strstr+0x20>
 802078a:	3301      	adds	r3, #1
 802078c:	e7f7      	b.n	802077e <strstr+0x10>
 802078e:	3001      	adds	r0, #1
 8020790:	7803      	ldrb	r3, [r0, #0]
 8020792:	2b00      	cmp	r3, #0
 8020794:	d1f0      	bne.n	8020778 <strstr+0xa>
 8020796:	0018      	movs	r0, r3
 8020798:	e7ed      	b.n	8020776 <strstr+0x8>
	...

0802079c <_localeconv_r>:
 802079c:	4800      	ldr	r0, [pc, #0]	@ (80207a0 <_localeconv_r+0x4>)
 802079e:	4770      	bx	lr
 80207a0:	20000354 	.word	0x20000354

080207a4 <_close_r>:
 80207a4:	2300      	movs	r3, #0
 80207a6:	b570      	push	{r4, r5, r6, lr}
 80207a8:	4d06      	ldr	r5, [pc, #24]	@ (80207c4 <_close_r+0x20>)
 80207aa:	0004      	movs	r4, r0
 80207ac:	0008      	movs	r0, r1
 80207ae:	602b      	str	r3, [r5, #0]
 80207b0:	f7ed fca4 	bl	800e0fc <_close>
 80207b4:	1c43      	adds	r3, r0, #1
 80207b6:	d103      	bne.n	80207c0 <_close_r+0x1c>
 80207b8:	682b      	ldr	r3, [r5, #0]
 80207ba:	2b00      	cmp	r3, #0
 80207bc:	d000      	beq.n	80207c0 <_close_r+0x1c>
 80207be:	6023      	str	r3, [r4, #0]
 80207c0:	bd70      	pop	{r4, r5, r6, pc}
 80207c2:	46c0      	nop			@ (mov r8, r8)
 80207c4:	200033d0 	.word	0x200033d0

080207c8 <_lseek_r>:
 80207c8:	b570      	push	{r4, r5, r6, lr}
 80207ca:	0004      	movs	r4, r0
 80207cc:	0008      	movs	r0, r1
 80207ce:	0011      	movs	r1, r2
 80207d0:	001a      	movs	r2, r3
 80207d2:	2300      	movs	r3, #0
 80207d4:	4d05      	ldr	r5, [pc, #20]	@ (80207ec <_lseek_r+0x24>)
 80207d6:	602b      	str	r3, [r5, #0]
 80207d8:	f7ed fcb1 	bl	800e13e <_lseek>
 80207dc:	1c43      	adds	r3, r0, #1
 80207de:	d103      	bne.n	80207e8 <_lseek_r+0x20>
 80207e0:	682b      	ldr	r3, [r5, #0]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d000      	beq.n	80207e8 <_lseek_r+0x20>
 80207e6:	6023      	str	r3, [r4, #0]
 80207e8:	bd70      	pop	{r4, r5, r6, pc}
 80207ea:	46c0      	nop			@ (mov r8, r8)
 80207ec:	200033d0 	.word	0x200033d0

080207f0 <_read_r>:
 80207f0:	b570      	push	{r4, r5, r6, lr}
 80207f2:	0004      	movs	r4, r0
 80207f4:	0008      	movs	r0, r1
 80207f6:	0011      	movs	r1, r2
 80207f8:	001a      	movs	r2, r3
 80207fa:	2300      	movs	r3, #0
 80207fc:	4d05      	ldr	r5, [pc, #20]	@ (8020814 <_read_r+0x24>)
 80207fe:	602b      	str	r3, [r5, #0]
 8020800:	f7ed fc5f 	bl	800e0c2 <_read>
 8020804:	1c43      	adds	r3, r0, #1
 8020806:	d103      	bne.n	8020810 <_read_r+0x20>
 8020808:	682b      	ldr	r3, [r5, #0]
 802080a:	2b00      	cmp	r3, #0
 802080c:	d000      	beq.n	8020810 <_read_r+0x20>
 802080e:	6023      	str	r3, [r4, #0]
 8020810:	bd70      	pop	{r4, r5, r6, pc}
 8020812:	46c0      	nop			@ (mov r8, r8)
 8020814:	200033d0 	.word	0x200033d0

08020818 <_write_r>:
 8020818:	b570      	push	{r4, r5, r6, lr}
 802081a:	0004      	movs	r4, r0
 802081c:	0008      	movs	r0, r1
 802081e:	0011      	movs	r1, r2
 8020820:	001a      	movs	r2, r3
 8020822:	2300      	movs	r3, #0
 8020824:	4d05      	ldr	r5, [pc, #20]	@ (802083c <_write_r+0x24>)
 8020826:	602b      	str	r3, [r5, #0]
 8020828:	f7ee f920 	bl	800ea6c <_write>
 802082c:	1c43      	adds	r3, r0, #1
 802082e:	d103      	bne.n	8020838 <_write_r+0x20>
 8020830:	682b      	ldr	r3, [r5, #0]
 8020832:	2b00      	cmp	r3, #0
 8020834:	d000      	beq.n	8020838 <_write_r+0x20>
 8020836:	6023      	str	r3, [r4, #0]
 8020838:	bd70      	pop	{r4, r5, r6, pc}
 802083a:	46c0      	nop			@ (mov r8, r8)
 802083c:	200033d0 	.word	0x200033d0

08020840 <__errno>:
 8020840:	4b01      	ldr	r3, [pc, #4]	@ (8020848 <__errno+0x8>)
 8020842:	6818      	ldr	r0, [r3, #0]
 8020844:	4770      	bx	lr
 8020846:	46c0      	nop			@ (mov r8, r8)
 8020848:	200003d0 	.word	0x200003d0

0802084c <__libc_init_array>:
 802084c:	b570      	push	{r4, r5, r6, lr}
 802084e:	2600      	movs	r6, #0
 8020850:	4c0c      	ldr	r4, [pc, #48]	@ (8020884 <__libc_init_array+0x38>)
 8020852:	4d0d      	ldr	r5, [pc, #52]	@ (8020888 <__libc_init_array+0x3c>)
 8020854:	1b64      	subs	r4, r4, r5
 8020856:	10a4      	asrs	r4, r4, #2
 8020858:	42a6      	cmp	r6, r4
 802085a:	d109      	bne.n	8020870 <__libc_init_array+0x24>
 802085c:	2600      	movs	r6, #0
 802085e:	f002 fee9 	bl	8023634 <_init>
 8020862:	4c0a      	ldr	r4, [pc, #40]	@ (802088c <__libc_init_array+0x40>)
 8020864:	4d0a      	ldr	r5, [pc, #40]	@ (8020890 <__libc_init_array+0x44>)
 8020866:	1b64      	subs	r4, r4, r5
 8020868:	10a4      	asrs	r4, r4, #2
 802086a:	42a6      	cmp	r6, r4
 802086c:	d105      	bne.n	802087a <__libc_init_array+0x2e>
 802086e:	bd70      	pop	{r4, r5, r6, pc}
 8020870:	00b3      	lsls	r3, r6, #2
 8020872:	58eb      	ldr	r3, [r5, r3]
 8020874:	4798      	blx	r3
 8020876:	3601      	adds	r6, #1
 8020878:	e7ee      	b.n	8020858 <__libc_init_array+0xc>
 802087a:	00b3      	lsls	r3, r6, #2
 802087c:	58eb      	ldr	r3, [r5, r3]
 802087e:	4798      	blx	r3
 8020880:	3601      	adds	r6, #1
 8020882:	e7f2      	b.n	802086a <__libc_init_array+0x1e>
 8020884:	080267e8 	.word	0x080267e8
 8020888:	080267e8 	.word	0x080267e8
 802088c:	080267ec 	.word	0x080267ec
 8020890:	080267e8 	.word	0x080267e8

08020894 <__retarget_lock_init_recursive>:
 8020894:	4770      	bx	lr

08020896 <__retarget_lock_acquire_recursive>:
 8020896:	4770      	bx	lr

08020898 <__retarget_lock_release_recursive>:
 8020898:	4770      	bx	lr

0802089a <memchr>:
 802089a:	b2c9      	uxtb	r1, r1
 802089c:	1882      	adds	r2, r0, r2
 802089e:	4290      	cmp	r0, r2
 80208a0:	d101      	bne.n	80208a6 <memchr+0xc>
 80208a2:	2000      	movs	r0, #0
 80208a4:	4770      	bx	lr
 80208a6:	7803      	ldrb	r3, [r0, #0]
 80208a8:	428b      	cmp	r3, r1
 80208aa:	d0fb      	beq.n	80208a4 <memchr+0xa>
 80208ac:	3001      	adds	r0, #1
 80208ae:	e7f6      	b.n	802089e <memchr+0x4>

080208b0 <memcpy>:
 80208b0:	2300      	movs	r3, #0
 80208b2:	b510      	push	{r4, lr}
 80208b4:	429a      	cmp	r2, r3
 80208b6:	d100      	bne.n	80208ba <memcpy+0xa>
 80208b8:	bd10      	pop	{r4, pc}
 80208ba:	5ccc      	ldrb	r4, [r1, r3]
 80208bc:	54c4      	strb	r4, [r0, r3]
 80208be:	3301      	adds	r3, #1
 80208c0:	e7f8      	b.n	80208b4 <memcpy+0x4>
	...

080208c4 <nan>:
 80208c4:	2000      	movs	r0, #0
 80208c6:	4901      	ldr	r1, [pc, #4]	@ (80208cc <nan+0x8>)
 80208c8:	4770      	bx	lr
 80208ca:	46c0      	nop			@ (mov r8, r8)
 80208cc:	7ff80000 	.word	0x7ff80000

080208d0 <quorem>:
 80208d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208d2:	6902      	ldr	r2, [r0, #16]
 80208d4:	690f      	ldr	r7, [r1, #16]
 80208d6:	b087      	sub	sp, #28
 80208d8:	0006      	movs	r6, r0
 80208da:	000b      	movs	r3, r1
 80208dc:	2000      	movs	r0, #0
 80208de:	9102      	str	r1, [sp, #8]
 80208e0:	42ba      	cmp	r2, r7
 80208e2:	db6d      	blt.n	80209c0 <quorem+0xf0>
 80208e4:	3f01      	subs	r7, #1
 80208e6:	00bc      	lsls	r4, r7, #2
 80208e8:	3314      	adds	r3, #20
 80208ea:	9305      	str	r3, [sp, #20]
 80208ec:	191b      	adds	r3, r3, r4
 80208ee:	9303      	str	r3, [sp, #12]
 80208f0:	0033      	movs	r3, r6
 80208f2:	3314      	adds	r3, #20
 80208f4:	191c      	adds	r4, r3, r4
 80208f6:	9301      	str	r3, [sp, #4]
 80208f8:	6823      	ldr	r3, [r4, #0]
 80208fa:	9304      	str	r3, [sp, #16]
 80208fc:	9b03      	ldr	r3, [sp, #12]
 80208fe:	9804      	ldr	r0, [sp, #16]
 8020900:	681d      	ldr	r5, [r3, #0]
 8020902:	3501      	adds	r5, #1
 8020904:	0029      	movs	r1, r5
 8020906:	f7df fc4d 	bl	80001a4 <__udivsi3>
 802090a:	9b04      	ldr	r3, [sp, #16]
 802090c:	9000      	str	r0, [sp, #0]
 802090e:	42ab      	cmp	r3, r5
 8020910:	d32b      	bcc.n	802096a <quorem+0x9a>
 8020912:	9b05      	ldr	r3, [sp, #20]
 8020914:	9d01      	ldr	r5, [sp, #4]
 8020916:	469c      	mov	ip, r3
 8020918:	2300      	movs	r3, #0
 802091a:	9305      	str	r3, [sp, #20]
 802091c:	9304      	str	r3, [sp, #16]
 802091e:	4662      	mov	r2, ip
 8020920:	ca08      	ldmia	r2!, {r3}
 8020922:	6828      	ldr	r0, [r5, #0]
 8020924:	4694      	mov	ip, r2
 8020926:	9a00      	ldr	r2, [sp, #0]
 8020928:	b299      	uxth	r1, r3
 802092a:	4351      	muls	r1, r2
 802092c:	9a05      	ldr	r2, [sp, #20]
 802092e:	0c1b      	lsrs	r3, r3, #16
 8020930:	1889      	adds	r1, r1, r2
 8020932:	9a00      	ldr	r2, [sp, #0]
 8020934:	4353      	muls	r3, r2
 8020936:	0c0a      	lsrs	r2, r1, #16
 8020938:	189b      	adds	r3, r3, r2
 802093a:	0c1a      	lsrs	r2, r3, #16
 802093c:	b289      	uxth	r1, r1
 802093e:	9205      	str	r2, [sp, #20]
 8020940:	b282      	uxth	r2, r0
 8020942:	1a52      	subs	r2, r2, r1
 8020944:	9904      	ldr	r1, [sp, #16]
 8020946:	0c00      	lsrs	r0, r0, #16
 8020948:	1852      	adds	r2, r2, r1
 802094a:	b29b      	uxth	r3, r3
 802094c:	1411      	asrs	r1, r2, #16
 802094e:	1ac3      	subs	r3, r0, r3
 8020950:	185b      	adds	r3, r3, r1
 8020952:	1419      	asrs	r1, r3, #16
 8020954:	b292      	uxth	r2, r2
 8020956:	041b      	lsls	r3, r3, #16
 8020958:	431a      	orrs	r2, r3
 802095a:	9b03      	ldr	r3, [sp, #12]
 802095c:	9104      	str	r1, [sp, #16]
 802095e:	c504      	stmia	r5!, {r2}
 8020960:	4563      	cmp	r3, ip
 8020962:	d2dc      	bcs.n	802091e <quorem+0x4e>
 8020964:	6823      	ldr	r3, [r4, #0]
 8020966:	2b00      	cmp	r3, #0
 8020968:	d030      	beq.n	80209cc <quorem+0xfc>
 802096a:	0030      	movs	r0, r6
 802096c:	9902      	ldr	r1, [sp, #8]
 802096e:	f001 fd7d 	bl	802246c <__mcmp>
 8020972:	2800      	cmp	r0, #0
 8020974:	db23      	blt.n	80209be <quorem+0xee>
 8020976:	0034      	movs	r4, r6
 8020978:	2500      	movs	r5, #0
 802097a:	9902      	ldr	r1, [sp, #8]
 802097c:	3414      	adds	r4, #20
 802097e:	3114      	adds	r1, #20
 8020980:	6823      	ldr	r3, [r4, #0]
 8020982:	c901      	ldmia	r1!, {r0}
 8020984:	9302      	str	r3, [sp, #8]
 8020986:	466b      	mov	r3, sp
 8020988:	891b      	ldrh	r3, [r3, #8]
 802098a:	b282      	uxth	r2, r0
 802098c:	1a9a      	subs	r2, r3, r2
 802098e:	9b02      	ldr	r3, [sp, #8]
 8020990:	1952      	adds	r2, r2, r5
 8020992:	0c00      	lsrs	r0, r0, #16
 8020994:	0c1b      	lsrs	r3, r3, #16
 8020996:	1a1b      	subs	r3, r3, r0
 8020998:	1410      	asrs	r0, r2, #16
 802099a:	181b      	adds	r3, r3, r0
 802099c:	141d      	asrs	r5, r3, #16
 802099e:	b292      	uxth	r2, r2
 80209a0:	041b      	lsls	r3, r3, #16
 80209a2:	431a      	orrs	r2, r3
 80209a4:	9b03      	ldr	r3, [sp, #12]
 80209a6:	c404      	stmia	r4!, {r2}
 80209a8:	428b      	cmp	r3, r1
 80209aa:	d2e9      	bcs.n	8020980 <quorem+0xb0>
 80209ac:	9a01      	ldr	r2, [sp, #4]
 80209ae:	00bb      	lsls	r3, r7, #2
 80209b0:	18d3      	adds	r3, r2, r3
 80209b2:	681a      	ldr	r2, [r3, #0]
 80209b4:	2a00      	cmp	r2, #0
 80209b6:	d013      	beq.n	80209e0 <quorem+0x110>
 80209b8:	9b00      	ldr	r3, [sp, #0]
 80209ba:	3301      	adds	r3, #1
 80209bc:	9300      	str	r3, [sp, #0]
 80209be:	9800      	ldr	r0, [sp, #0]
 80209c0:	b007      	add	sp, #28
 80209c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209c4:	6823      	ldr	r3, [r4, #0]
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	d104      	bne.n	80209d4 <quorem+0x104>
 80209ca:	3f01      	subs	r7, #1
 80209cc:	9b01      	ldr	r3, [sp, #4]
 80209ce:	3c04      	subs	r4, #4
 80209d0:	42a3      	cmp	r3, r4
 80209d2:	d3f7      	bcc.n	80209c4 <quorem+0xf4>
 80209d4:	6137      	str	r7, [r6, #16]
 80209d6:	e7c8      	b.n	802096a <quorem+0x9a>
 80209d8:	681a      	ldr	r2, [r3, #0]
 80209da:	2a00      	cmp	r2, #0
 80209dc:	d104      	bne.n	80209e8 <quorem+0x118>
 80209de:	3f01      	subs	r7, #1
 80209e0:	9a01      	ldr	r2, [sp, #4]
 80209e2:	3b04      	subs	r3, #4
 80209e4:	429a      	cmp	r2, r3
 80209e6:	d3f7      	bcc.n	80209d8 <quorem+0x108>
 80209e8:	6137      	str	r7, [r6, #16]
 80209ea:	e7e5      	b.n	80209b8 <quorem+0xe8>

080209ec <_dtoa_r>:
 80209ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80209ee:	0014      	movs	r4, r2
 80209f0:	001d      	movs	r5, r3
 80209f2:	69c6      	ldr	r6, [r0, #28]
 80209f4:	b09d      	sub	sp, #116	@ 0x74
 80209f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80209f8:	950b      	str	r5, [sp, #44]	@ 0x2c
 80209fa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80209fc:	9003      	str	r0, [sp, #12]
 80209fe:	2e00      	cmp	r6, #0
 8020a00:	d10f      	bne.n	8020a22 <_dtoa_r+0x36>
 8020a02:	2010      	movs	r0, #16
 8020a04:	f001 f98a 	bl	8021d1c <malloc>
 8020a08:	9b03      	ldr	r3, [sp, #12]
 8020a0a:	1e02      	subs	r2, r0, #0
 8020a0c:	61d8      	str	r0, [r3, #28]
 8020a0e:	d104      	bne.n	8020a1a <_dtoa_r+0x2e>
 8020a10:	21ef      	movs	r1, #239	@ 0xef
 8020a12:	4bc7      	ldr	r3, [pc, #796]	@ (8020d30 <_dtoa_r+0x344>)
 8020a14:	48c7      	ldr	r0, [pc, #796]	@ (8020d34 <_dtoa_r+0x348>)
 8020a16:	f002 fb2f 	bl	8023078 <__assert_func>
 8020a1a:	6046      	str	r6, [r0, #4]
 8020a1c:	6086      	str	r6, [r0, #8]
 8020a1e:	6006      	str	r6, [r0, #0]
 8020a20:	60c6      	str	r6, [r0, #12]
 8020a22:	9b03      	ldr	r3, [sp, #12]
 8020a24:	69db      	ldr	r3, [r3, #28]
 8020a26:	6819      	ldr	r1, [r3, #0]
 8020a28:	2900      	cmp	r1, #0
 8020a2a:	d00b      	beq.n	8020a44 <_dtoa_r+0x58>
 8020a2c:	685a      	ldr	r2, [r3, #4]
 8020a2e:	2301      	movs	r3, #1
 8020a30:	4093      	lsls	r3, r2
 8020a32:	604a      	str	r2, [r1, #4]
 8020a34:	608b      	str	r3, [r1, #8]
 8020a36:	9803      	ldr	r0, [sp, #12]
 8020a38:	f001 fa82 	bl	8021f40 <_Bfree>
 8020a3c:	2200      	movs	r2, #0
 8020a3e:	9b03      	ldr	r3, [sp, #12]
 8020a40:	69db      	ldr	r3, [r3, #28]
 8020a42:	601a      	str	r2, [r3, #0]
 8020a44:	2d00      	cmp	r5, #0
 8020a46:	da1e      	bge.n	8020a86 <_dtoa_r+0x9a>
 8020a48:	2301      	movs	r3, #1
 8020a4a:	603b      	str	r3, [r7, #0]
 8020a4c:	006b      	lsls	r3, r5, #1
 8020a4e:	085b      	lsrs	r3, r3, #1
 8020a50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020a52:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020a54:	4bb8      	ldr	r3, [pc, #736]	@ (8020d38 <_dtoa_r+0x34c>)
 8020a56:	4ab8      	ldr	r2, [pc, #736]	@ (8020d38 <_dtoa_r+0x34c>)
 8020a58:	403b      	ands	r3, r7
 8020a5a:	4293      	cmp	r3, r2
 8020a5c:	d116      	bne.n	8020a8c <_dtoa_r+0xa0>
 8020a5e:	4bb7      	ldr	r3, [pc, #732]	@ (8020d3c <_dtoa_r+0x350>)
 8020a60:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020a62:	6013      	str	r3, [r2, #0]
 8020a64:	033b      	lsls	r3, r7, #12
 8020a66:	0b1b      	lsrs	r3, r3, #12
 8020a68:	4323      	orrs	r3, r4
 8020a6a:	d101      	bne.n	8020a70 <_dtoa_r+0x84>
 8020a6c:	f000 fd83 	bl	8021576 <_dtoa_r+0xb8a>
 8020a70:	4bb3      	ldr	r3, [pc, #716]	@ (8020d40 <_dtoa_r+0x354>)
 8020a72:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020a74:	9308      	str	r3, [sp, #32]
 8020a76:	2a00      	cmp	r2, #0
 8020a78:	d002      	beq.n	8020a80 <_dtoa_r+0x94>
 8020a7a:	4bb2      	ldr	r3, [pc, #712]	@ (8020d44 <_dtoa_r+0x358>)
 8020a7c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020a7e:	6013      	str	r3, [r2, #0]
 8020a80:	9808      	ldr	r0, [sp, #32]
 8020a82:	b01d      	add	sp, #116	@ 0x74
 8020a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a86:	2300      	movs	r3, #0
 8020a88:	603b      	str	r3, [r7, #0]
 8020a8a:	e7e2      	b.n	8020a52 <_dtoa_r+0x66>
 8020a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a90:	9212      	str	r2, [sp, #72]	@ 0x48
 8020a92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020a94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020a96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020a98:	2200      	movs	r2, #0
 8020a9a:	2300      	movs	r3, #0
 8020a9c:	f7df fd08 	bl	80004b0 <__aeabi_dcmpeq>
 8020aa0:	1e06      	subs	r6, r0, #0
 8020aa2:	d00b      	beq.n	8020abc <_dtoa_r+0xd0>
 8020aa4:	2301      	movs	r3, #1
 8020aa6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020aa8:	6013      	str	r3, [r2, #0]
 8020aaa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d002      	beq.n	8020ab6 <_dtoa_r+0xca>
 8020ab0:	4ba5      	ldr	r3, [pc, #660]	@ (8020d48 <_dtoa_r+0x35c>)
 8020ab2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020ab4:	6013      	str	r3, [r2, #0]
 8020ab6:	4ba5      	ldr	r3, [pc, #660]	@ (8020d4c <_dtoa_r+0x360>)
 8020ab8:	9308      	str	r3, [sp, #32]
 8020aba:	e7e1      	b.n	8020a80 <_dtoa_r+0x94>
 8020abc:	ab1a      	add	r3, sp, #104	@ 0x68
 8020abe:	9301      	str	r3, [sp, #4]
 8020ac0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8020ac2:	9300      	str	r3, [sp, #0]
 8020ac4:	9803      	ldr	r0, [sp, #12]
 8020ac6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020ac8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020aca:	f001 fdf1 	bl	80226b0 <__d2b>
 8020ace:	007a      	lsls	r2, r7, #1
 8020ad0:	9005      	str	r0, [sp, #20]
 8020ad2:	0d52      	lsrs	r2, r2, #21
 8020ad4:	d100      	bne.n	8020ad8 <_dtoa_r+0xec>
 8020ad6:	e07b      	b.n	8020bd0 <_dtoa_r+0x1e4>
 8020ad8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020ada:	9618      	str	r6, [sp, #96]	@ 0x60
 8020adc:	0319      	lsls	r1, r3, #12
 8020ade:	4b9c      	ldr	r3, [pc, #624]	@ (8020d50 <_dtoa_r+0x364>)
 8020ae0:	0b09      	lsrs	r1, r1, #12
 8020ae2:	430b      	orrs	r3, r1
 8020ae4:	499b      	ldr	r1, [pc, #620]	@ (8020d54 <_dtoa_r+0x368>)
 8020ae6:	1857      	adds	r7, r2, r1
 8020ae8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020aea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020aec:	0019      	movs	r1, r3
 8020aee:	2200      	movs	r2, #0
 8020af0:	4b99      	ldr	r3, [pc, #612]	@ (8020d58 <_dtoa_r+0x36c>)
 8020af2:	f7e2 f86b 	bl	8002bcc <__aeabi_dsub>
 8020af6:	4a99      	ldr	r2, [pc, #612]	@ (8020d5c <_dtoa_r+0x370>)
 8020af8:	4b99      	ldr	r3, [pc, #612]	@ (8020d60 <_dtoa_r+0x374>)
 8020afa:	f7e1 fd9f 	bl	800263c <__aeabi_dmul>
 8020afe:	4a99      	ldr	r2, [pc, #612]	@ (8020d64 <_dtoa_r+0x378>)
 8020b00:	4b99      	ldr	r3, [pc, #612]	@ (8020d68 <_dtoa_r+0x37c>)
 8020b02:	f7e0 fdf3 	bl	80016ec <__aeabi_dadd>
 8020b06:	0004      	movs	r4, r0
 8020b08:	0038      	movs	r0, r7
 8020b0a:	000d      	movs	r5, r1
 8020b0c:	f7e2 fc58 	bl	80033c0 <__aeabi_i2d>
 8020b10:	4a96      	ldr	r2, [pc, #600]	@ (8020d6c <_dtoa_r+0x380>)
 8020b12:	4b97      	ldr	r3, [pc, #604]	@ (8020d70 <_dtoa_r+0x384>)
 8020b14:	f7e1 fd92 	bl	800263c <__aeabi_dmul>
 8020b18:	0002      	movs	r2, r0
 8020b1a:	000b      	movs	r3, r1
 8020b1c:	0020      	movs	r0, r4
 8020b1e:	0029      	movs	r1, r5
 8020b20:	f7e0 fde4 	bl	80016ec <__aeabi_dadd>
 8020b24:	0004      	movs	r4, r0
 8020b26:	000d      	movs	r5, r1
 8020b28:	f7e2 fc0e 	bl	8003348 <__aeabi_d2iz>
 8020b2c:	2200      	movs	r2, #0
 8020b2e:	9004      	str	r0, [sp, #16]
 8020b30:	2300      	movs	r3, #0
 8020b32:	0020      	movs	r0, r4
 8020b34:	0029      	movs	r1, r5
 8020b36:	f7df fcc1 	bl	80004bc <__aeabi_dcmplt>
 8020b3a:	2800      	cmp	r0, #0
 8020b3c:	d00b      	beq.n	8020b56 <_dtoa_r+0x16a>
 8020b3e:	9804      	ldr	r0, [sp, #16]
 8020b40:	f7e2 fc3e 	bl	80033c0 <__aeabi_i2d>
 8020b44:	002b      	movs	r3, r5
 8020b46:	0022      	movs	r2, r4
 8020b48:	f7df fcb2 	bl	80004b0 <__aeabi_dcmpeq>
 8020b4c:	4243      	negs	r3, r0
 8020b4e:	4158      	adcs	r0, r3
 8020b50:	9b04      	ldr	r3, [sp, #16]
 8020b52:	1a1b      	subs	r3, r3, r0
 8020b54:	9304      	str	r3, [sp, #16]
 8020b56:	2301      	movs	r3, #1
 8020b58:	9315      	str	r3, [sp, #84]	@ 0x54
 8020b5a:	9b04      	ldr	r3, [sp, #16]
 8020b5c:	2b16      	cmp	r3, #22
 8020b5e:	d810      	bhi.n	8020b82 <_dtoa_r+0x196>
 8020b60:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020b62:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020b64:	9a04      	ldr	r2, [sp, #16]
 8020b66:	4b83      	ldr	r3, [pc, #524]	@ (8020d74 <_dtoa_r+0x388>)
 8020b68:	00d2      	lsls	r2, r2, #3
 8020b6a:	189b      	adds	r3, r3, r2
 8020b6c:	681a      	ldr	r2, [r3, #0]
 8020b6e:	685b      	ldr	r3, [r3, #4]
 8020b70:	f7df fca4 	bl	80004bc <__aeabi_dcmplt>
 8020b74:	2800      	cmp	r0, #0
 8020b76:	d047      	beq.n	8020c08 <_dtoa_r+0x21c>
 8020b78:	9b04      	ldr	r3, [sp, #16]
 8020b7a:	3b01      	subs	r3, #1
 8020b7c:	9304      	str	r3, [sp, #16]
 8020b7e:	2300      	movs	r3, #0
 8020b80:	9315      	str	r3, [sp, #84]	@ 0x54
 8020b82:	2200      	movs	r2, #0
 8020b84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020b86:	9206      	str	r2, [sp, #24]
 8020b88:	1bdb      	subs	r3, r3, r7
 8020b8a:	1e5a      	subs	r2, r3, #1
 8020b8c:	d53e      	bpl.n	8020c0c <_dtoa_r+0x220>
 8020b8e:	2201      	movs	r2, #1
 8020b90:	1ad3      	subs	r3, r2, r3
 8020b92:	9306      	str	r3, [sp, #24]
 8020b94:	2300      	movs	r3, #0
 8020b96:	930d      	str	r3, [sp, #52]	@ 0x34
 8020b98:	9b04      	ldr	r3, [sp, #16]
 8020b9a:	2b00      	cmp	r3, #0
 8020b9c:	db38      	blt.n	8020c10 <_dtoa_r+0x224>
 8020b9e:	9a04      	ldr	r2, [sp, #16]
 8020ba0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ba2:	4694      	mov	ip, r2
 8020ba4:	4463      	add	r3, ip
 8020ba6:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ba8:	2300      	movs	r3, #0
 8020baa:	9214      	str	r2, [sp, #80]	@ 0x50
 8020bac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020bae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020bb0:	2401      	movs	r4, #1
 8020bb2:	2b09      	cmp	r3, #9
 8020bb4:	d867      	bhi.n	8020c86 <_dtoa_r+0x29a>
 8020bb6:	2b05      	cmp	r3, #5
 8020bb8:	dd02      	ble.n	8020bc0 <_dtoa_r+0x1d4>
 8020bba:	2400      	movs	r4, #0
 8020bbc:	3b04      	subs	r3, #4
 8020bbe:	9322      	str	r3, [sp, #136]	@ 0x88
 8020bc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020bc2:	1e98      	subs	r0, r3, #2
 8020bc4:	2803      	cmp	r0, #3
 8020bc6:	d867      	bhi.n	8020c98 <_dtoa_r+0x2ac>
 8020bc8:	f7df fad8 	bl	800017c <__gnu_thumb1_case_uqi>
 8020bcc:	5b383a2b 	.word	0x5b383a2b
 8020bd0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020bd2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8020bd4:	18f6      	adds	r6, r6, r3
 8020bd6:	4b68      	ldr	r3, [pc, #416]	@ (8020d78 <_dtoa_r+0x38c>)
 8020bd8:	18f2      	adds	r2, r6, r3
 8020bda:	2a20      	cmp	r2, #32
 8020bdc:	dd0f      	ble.n	8020bfe <_dtoa_r+0x212>
 8020bde:	2340      	movs	r3, #64	@ 0x40
 8020be0:	1a9b      	subs	r3, r3, r2
 8020be2:	409f      	lsls	r7, r3
 8020be4:	4b65      	ldr	r3, [pc, #404]	@ (8020d7c <_dtoa_r+0x390>)
 8020be6:	0038      	movs	r0, r7
 8020be8:	18f3      	adds	r3, r6, r3
 8020bea:	40dc      	lsrs	r4, r3
 8020bec:	4320      	orrs	r0, r4
 8020bee:	f7e2 fc15 	bl	800341c <__aeabi_ui2d>
 8020bf2:	2201      	movs	r2, #1
 8020bf4:	4b62      	ldr	r3, [pc, #392]	@ (8020d80 <_dtoa_r+0x394>)
 8020bf6:	1e77      	subs	r7, r6, #1
 8020bf8:	18cb      	adds	r3, r1, r3
 8020bfa:	9218      	str	r2, [sp, #96]	@ 0x60
 8020bfc:	e776      	b.n	8020aec <_dtoa_r+0x100>
 8020bfe:	2320      	movs	r3, #32
 8020c00:	0020      	movs	r0, r4
 8020c02:	1a9b      	subs	r3, r3, r2
 8020c04:	4098      	lsls	r0, r3
 8020c06:	e7f2      	b.n	8020bee <_dtoa_r+0x202>
 8020c08:	9015      	str	r0, [sp, #84]	@ 0x54
 8020c0a:	e7ba      	b.n	8020b82 <_dtoa_r+0x196>
 8020c0c:	920d      	str	r2, [sp, #52]	@ 0x34
 8020c0e:	e7c3      	b.n	8020b98 <_dtoa_r+0x1ac>
 8020c10:	9b06      	ldr	r3, [sp, #24]
 8020c12:	9a04      	ldr	r2, [sp, #16]
 8020c14:	1a9b      	subs	r3, r3, r2
 8020c16:	9306      	str	r3, [sp, #24]
 8020c18:	4253      	negs	r3, r2
 8020c1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020c1c:	2300      	movs	r3, #0
 8020c1e:	9314      	str	r3, [sp, #80]	@ 0x50
 8020c20:	e7c5      	b.n	8020bae <_dtoa_r+0x1c2>
 8020c22:	2300      	movs	r3, #0
 8020c24:	9310      	str	r3, [sp, #64]	@ 0x40
 8020c26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020c28:	930e      	str	r3, [sp, #56]	@ 0x38
 8020c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	dc13      	bgt.n	8020c58 <_dtoa_r+0x26c>
 8020c30:	2301      	movs	r3, #1
 8020c32:	001a      	movs	r2, r3
 8020c34:	930e      	str	r3, [sp, #56]	@ 0x38
 8020c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c38:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020c3a:	e00d      	b.n	8020c58 <_dtoa_r+0x26c>
 8020c3c:	2301      	movs	r3, #1
 8020c3e:	e7f1      	b.n	8020c24 <_dtoa_r+0x238>
 8020c40:	2300      	movs	r3, #0
 8020c42:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020c44:	9310      	str	r3, [sp, #64]	@ 0x40
 8020c46:	4694      	mov	ip, r2
 8020c48:	9b04      	ldr	r3, [sp, #16]
 8020c4a:	4463      	add	r3, ip
 8020c4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8020c4e:	3301      	adds	r3, #1
 8020c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c52:	2b00      	cmp	r3, #0
 8020c54:	dc00      	bgt.n	8020c58 <_dtoa_r+0x26c>
 8020c56:	2301      	movs	r3, #1
 8020c58:	9a03      	ldr	r2, [sp, #12]
 8020c5a:	2100      	movs	r1, #0
 8020c5c:	69d0      	ldr	r0, [r2, #28]
 8020c5e:	2204      	movs	r2, #4
 8020c60:	0015      	movs	r5, r2
 8020c62:	3514      	adds	r5, #20
 8020c64:	429d      	cmp	r5, r3
 8020c66:	d91b      	bls.n	8020ca0 <_dtoa_r+0x2b4>
 8020c68:	6041      	str	r1, [r0, #4]
 8020c6a:	9803      	ldr	r0, [sp, #12]
 8020c6c:	f001 f924 	bl	8021eb8 <_Balloc>
 8020c70:	9008      	str	r0, [sp, #32]
 8020c72:	2800      	cmp	r0, #0
 8020c74:	d117      	bne.n	8020ca6 <_dtoa_r+0x2ba>
 8020c76:	21b0      	movs	r1, #176	@ 0xb0
 8020c78:	4b42      	ldr	r3, [pc, #264]	@ (8020d84 <_dtoa_r+0x398>)
 8020c7a:	482e      	ldr	r0, [pc, #184]	@ (8020d34 <_dtoa_r+0x348>)
 8020c7c:	9a08      	ldr	r2, [sp, #32]
 8020c7e:	31ff      	adds	r1, #255	@ 0xff
 8020c80:	e6c9      	b.n	8020a16 <_dtoa_r+0x2a>
 8020c82:	2301      	movs	r3, #1
 8020c84:	e7dd      	b.n	8020c42 <_dtoa_r+0x256>
 8020c86:	2300      	movs	r3, #0
 8020c88:	9410      	str	r4, [sp, #64]	@ 0x40
 8020c8a:	9322      	str	r3, [sp, #136]	@ 0x88
 8020c8c:	3b01      	subs	r3, #1
 8020c8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8020c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c92:	2200      	movs	r2, #0
 8020c94:	3313      	adds	r3, #19
 8020c96:	e7cf      	b.n	8020c38 <_dtoa_r+0x24c>
 8020c98:	2301      	movs	r3, #1
 8020c9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8020c9c:	3b02      	subs	r3, #2
 8020c9e:	e7f6      	b.n	8020c8e <_dtoa_r+0x2a2>
 8020ca0:	3101      	adds	r1, #1
 8020ca2:	0052      	lsls	r2, r2, #1
 8020ca4:	e7dc      	b.n	8020c60 <_dtoa_r+0x274>
 8020ca6:	9b03      	ldr	r3, [sp, #12]
 8020ca8:	9a08      	ldr	r2, [sp, #32]
 8020caa:	69db      	ldr	r3, [r3, #28]
 8020cac:	601a      	str	r2, [r3, #0]
 8020cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cb0:	2b0e      	cmp	r3, #14
 8020cb2:	d900      	bls.n	8020cb6 <_dtoa_r+0x2ca>
 8020cb4:	e0d9      	b.n	8020e6a <_dtoa_r+0x47e>
 8020cb6:	2c00      	cmp	r4, #0
 8020cb8:	d100      	bne.n	8020cbc <_dtoa_r+0x2d0>
 8020cba:	e0d6      	b.n	8020e6a <_dtoa_r+0x47e>
 8020cbc:	9b04      	ldr	r3, [sp, #16]
 8020cbe:	2b00      	cmp	r3, #0
 8020cc0:	dd64      	ble.n	8020d8c <_dtoa_r+0x3a0>
 8020cc2:	210f      	movs	r1, #15
 8020cc4:	9a04      	ldr	r2, [sp, #16]
 8020cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8020d74 <_dtoa_r+0x388>)
 8020cc8:	400a      	ands	r2, r1
 8020cca:	00d2      	lsls	r2, r2, #3
 8020ccc:	189b      	adds	r3, r3, r2
 8020cce:	681e      	ldr	r6, [r3, #0]
 8020cd0:	685f      	ldr	r7, [r3, #4]
 8020cd2:	9b04      	ldr	r3, [sp, #16]
 8020cd4:	2402      	movs	r4, #2
 8020cd6:	111d      	asrs	r5, r3, #4
 8020cd8:	05db      	lsls	r3, r3, #23
 8020cda:	d50a      	bpl.n	8020cf2 <_dtoa_r+0x306>
 8020cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8020d88 <_dtoa_r+0x39c>)
 8020cde:	400d      	ands	r5, r1
 8020ce0:	6a1a      	ldr	r2, [r3, #32]
 8020ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020ce4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020ce6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020ce8:	f7e1 f864 	bl	8001db4 <__aeabi_ddiv>
 8020cec:	900a      	str	r0, [sp, #40]	@ 0x28
 8020cee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020cf0:	3401      	adds	r4, #1
 8020cf2:	4b25      	ldr	r3, [pc, #148]	@ (8020d88 <_dtoa_r+0x39c>)
 8020cf4:	930c      	str	r3, [sp, #48]	@ 0x30
 8020cf6:	2d00      	cmp	r5, #0
 8020cf8:	d108      	bne.n	8020d0c <_dtoa_r+0x320>
 8020cfa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020cfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020cfe:	0032      	movs	r2, r6
 8020d00:	003b      	movs	r3, r7
 8020d02:	f7e1 f857 	bl	8001db4 <__aeabi_ddiv>
 8020d06:	900a      	str	r0, [sp, #40]	@ 0x28
 8020d08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020d0a:	e05a      	b.n	8020dc2 <_dtoa_r+0x3d6>
 8020d0c:	2301      	movs	r3, #1
 8020d0e:	421d      	tst	r5, r3
 8020d10:	d009      	beq.n	8020d26 <_dtoa_r+0x33a>
 8020d12:	18e4      	adds	r4, r4, r3
 8020d14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d16:	0030      	movs	r0, r6
 8020d18:	681a      	ldr	r2, [r3, #0]
 8020d1a:	685b      	ldr	r3, [r3, #4]
 8020d1c:	0039      	movs	r1, r7
 8020d1e:	f7e1 fc8d 	bl	800263c <__aeabi_dmul>
 8020d22:	0006      	movs	r6, r0
 8020d24:	000f      	movs	r7, r1
 8020d26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d28:	106d      	asrs	r5, r5, #1
 8020d2a:	3308      	adds	r3, #8
 8020d2c:	e7e2      	b.n	8020cf4 <_dtoa_r+0x308>
 8020d2e:	46c0      	nop			@ (mov r8, r8)
 8020d30:	08026542 	.word	0x08026542
 8020d34:	08026559 	.word	0x08026559
 8020d38:	7ff00000 	.word	0x7ff00000
 8020d3c:	0000270f 	.word	0x0000270f
 8020d40:	0802653e 	.word	0x0802653e
 8020d44:	08026541 	.word	0x08026541
 8020d48:	0802650a 	.word	0x0802650a
 8020d4c:	08026509 	.word	0x08026509
 8020d50:	3ff00000 	.word	0x3ff00000
 8020d54:	fffffc01 	.word	0xfffffc01
 8020d58:	3ff80000 	.word	0x3ff80000
 8020d5c:	636f4361 	.word	0x636f4361
 8020d60:	3fd287a7 	.word	0x3fd287a7
 8020d64:	8b60c8b3 	.word	0x8b60c8b3
 8020d68:	3fc68a28 	.word	0x3fc68a28
 8020d6c:	509f79fb 	.word	0x509f79fb
 8020d70:	3fd34413 	.word	0x3fd34413
 8020d74:	080266b0 	.word	0x080266b0
 8020d78:	00000432 	.word	0x00000432
 8020d7c:	00000412 	.word	0x00000412
 8020d80:	fe100000 	.word	0xfe100000
 8020d84:	080265b1 	.word	0x080265b1
 8020d88:	08026688 	.word	0x08026688
 8020d8c:	9b04      	ldr	r3, [sp, #16]
 8020d8e:	2402      	movs	r4, #2
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d016      	beq.n	8020dc2 <_dtoa_r+0x3d6>
 8020d94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020d96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020d98:	220f      	movs	r2, #15
 8020d9a:	425d      	negs	r5, r3
 8020d9c:	402a      	ands	r2, r5
 8020d9e:	4bd7      	ldr	r3, [pc, #860]	@ (80210fc <_dtoa_r+0x710>)
 8020da0:	00d2      	lsls	r2, r2, #3
 8020da2:	189b      	adds	r3, r3, r2
 8020da4:	681a      	ldr	r2, [r3, #0]
 8020da6:	685b      	ldr	r3, [r3, #4]
 8020da8:	f7e1 fc48 	bl	800263c <__aeabi_dmul>
 8020dac:	2701      	movs	r7, #1
 8020dae:	2300      	movs	r3, #0
 8020db0:	900a      	str	r0, [sp, #40]	@ 0x28
 8020db2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020db4:	4ed2      	ldr	r6, [pc, #840]	@ (8021100 <_dtoa_r+0x714>)
 8020db6:	112d      	asrs	r5, r5, #4
 8020db8:	2d00      	cmp	r5, #0
 8020dba:	d000      	beq.n	8020dbe <_dtoa_r+0x3d2>
 8020dbc:	e0ba      	b.n	8020f34 <_dtoa_r+0x548>
 8020dbe:	2b00      	cmp	r3, #0
 8020dc0:	d1a1      	bne.n	8020d06 <_dtoa_r+0x31a>
 8020dc2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020dc4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020dc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	d100      	bne.n	8020dce <_dtoa_r+0x3e2>
 8020dcc:	e0bd      	b.n	8020f4a <_dtoa_r+0x55e>
 8020dce:	2200      	movs	r2, #0
 8020dd0:	0030      	movs	r0, r6
 8020dd2:	0039      	movs	r1, r7
 8020dd4:	4bcb      	ldr	r3, [pc, #812]	@ (8021104 <_dtoa_r+0x718>)
 8020dd6:	f7df fb71 	bl	80004bc <__aeabi_dcmplt>
 8020dda:	2800      	cmp	r0, #0
 8020ddc:	d100      	bne.n	8020de0 <_dtoa_r+0x3f4>
 8020dde:	e0b4      	b.n	8020f4a <_dtoa_r+0x55e>
 8020de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	d100      	bne.n	8020de8 <_dtoa_r+0x3fc>
 8020de6:	e0b0      	b.n	8020f4a <_dtoa_r+0x55e>
 8020de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	dd39      	ble.n	8020e62 <_dtoa_r+0x476>
 8020dee:	9b04      	ldr	r3, [sp, #16]
 8020df0:	2200      	movs	r2, #0
 8020df2:	3b01      	subs	r3, #1
 8020df4:	930c      	str	r3, [sp, #48]	@ 0x30
 8020df6:	0030      	movs	r0, r6
 8020df8:	4bc3      	ldr	r3, [pc, #780]	@ (8021108 <_dtoa_r+0x71c>)
 8020dfa:	0039      	movs	r1, r7
 8020dfc:	f7e1 fc1e 	bl	800263c <__aeabi_dmul>
 8020e00:	900a      	str	r0, [sp, #40]	@ 0x28
 8020e02:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e06:	3401      	adds	r4, #1
 8020e08:	0020      	movs	r0, r4
 8020e0a:	9311      	str	r3, [sp, #68]	@ 0x44
 8020e0c:	f7e2 fad8 	bl	80033c0 <__aeabi_i2d>
 8020e10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020e12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e14:	f7e1 fc12 	bl	800263c <__aeabi_dmul>
 8020e18:	4bbc      	ldr	r3, [pc, #752]	@ (802110c <_dtoa_r+0x720>)
 8020e1a:	2200      	movs	r2, #0
 8020e1c:	f7e0 fc66 	bl	80016ec <__aeabi_dadd>
 8020e20:	4bbb      	ldr	r3, [pc, #748]	@ (8021110 <_dtoa_r+0x724>)
 8020e22:	0006      	movs	r6, r0
 8020e24:	18cf      	adds	r7, r1, r3
 8020e26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	d000      	beq.n	8020e2e <_dtoa_r+0x442>
 8020e2c:	e091      	b.n	8020f52 <_dtoa_r+0x566>
 8020e2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020e30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020e32:	2200      	movs	r2, #0
 8020e34:	4bb7      	ldr	r3, [pc, #732]	@ (8021114 <_dtoa_r+0x728>)
 8020e36:	f7e1 fec9 	bl	8002bcc <__aeabi_dsub>
 8020e3a:	0032      	movs	r2, r6
 8020e3c:	003b      	movs	r3, r7
 8020e3e:	0004      	movs	r4, r0
 8020e40:	000d      	movs	r5, r1
 8020e42:	f7df fb4f 	bl	80004e4 <__aeabi_dcmpgt>
 8020e46:	2800      	cmp	r0, #0
 8020e48:	d000      	beq.n	8020e4c <_dtoa_r+0x460>
 8020e4a:	e29d      	b.n	8021388 <_dtoa_r+0x99c>
 8020e4c:	2180      	movs	r1, #128	@ 0x80
 8020e4e:	0609      	lsls	r1, r1, #24
 8020e50:	187b      	adds	r3, r7, r1
 8020e52:	0032      	movs	r2, r6
 8020e54:	0020      	movs	r0, r4
 8020e56:	0029      	movs	r1, r5
 8020e58:	f7df fb30 	bl	80004bc <__aeabi_dcmplt>
 8020e5c:	2800      	cmp	r0, #0
 8020e5e:	d000      	beq.n	8020e62 <_dtoa_r+0x476>
 8020e60:	e130      	b.n	80210c4 <_dtoa_r+0x6d8>
 8020e62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020e64:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8020e68:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020e6a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	da00      	bge.n	8020e72 <_dtoa_r+0x486>
 8020e70:	e177      	b.n	8021162 <_dtoa_r+0x776>
 8020e72:	9a04      	ldr	r2, [sp, #16]
 8020e74:	2a0e      	cmp	r2, #14
 8020e76:	dd00      	ble.n	8020e7a <_dtoa_r+0x48e>
 8020e78:	e173      	b.n	8021162 <_dtoa_r+0x776>
 8020e7a:	4ba0      	ldr	r3, [pc, #640]	@ (80210fc <_dtoa_r+0x710>)
 8020e7c:	00d2      	lsls	r2, r2, #3
 8020e7e:	189b      	adds	r3, r3, r2
 8020e80:	685c      	ldr	r4, [r3, #4]
 8020e82:	681b      	ldr	r3, [r3, #0]
 8020e84:	9306      	str	r3, [sp, #24]
 8020e86:	9407      	str	r4, [sp, #28]
 8020e88:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020e8a:	2b00      	cmp	r3, #0
 8020e8c:	da03      	bge.n	8020e96 <_dtoa_r+0x4aa>
 8020e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	dc00      	bgt.n	8020e96 <_dtoa_r+0x4aa>
 8020e94:	e106      	b.n	80210a4 <_dtoa_r+0x6b8>
 8020e96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020e98:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e9c:	9d08      	ldr	r5, [sp, #32]
 8020e9e:	3b01      	subs	r3, #1
 8020ea0:	195b      	adds	r3, r3, r5
 8020ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ea4:	9a06      	ldr	r2, [sp, #24]
 8020ea6:	9b07      	ldr	r3, [sp, #28]
 8020ea8:	0030      	movs	r0, r6
 8020eaa:	0039      	movs	r1, r7
 8020eac:	f7e0 ff82 	bl	8001db4 <__aeabi_ddiv>
 8020eb0:	f7e2 fa4a 	bl	8003348 <__aeabi_d2iz>
 8020eb4:	9009      	str	r0, [sp, #36]	@ 0x24
 8020eb6:	f7e2 fa83 	bl	80033c0 <__aeabi_i2d>
 8020eba:	9a06      	ldr	r2, [sp, #24]
 8020ebc:	9b07      	ldr	r3, [sp, #28]
 8020ebe:	f7e1 fbbd 	bl	800263c <__aeabi_dmul>
 8020ec2:	0002      	movs	r2, r0
 8020ec4:	000b      	movs	r3, r1
 8020ec6:	0030      	movs	r0, r6
 8020ec8:	0039      	movs	r1, r7
 8020eca:	f7e1 fe7f 	bl	8002bcc <__aeabi_dsub>
 8020ece:	002b      	movs	r3, r5
 8020ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ed2:	3501      	adds	r5, #1
 8020ed4:	3230      	adds	r2, #48	@ 0x30
 8020ed6:	701a      	strb	r2, [r3, #0]
 8020ed8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020eda:	002c      	movs	r4, r5
 8020edc:	429a      	cmp	r2, r3
 8020ede:	d000      	beq.n	8020ee2 <_dtoa_r+0x4f6>
 8020ee0:	e131      	b.n	8021146 <_dtoa_r+0x75a>
 8020ee2:	0002      	movs	r2, r0
 8020ee4:	000b      	movs	r3, r1
 8020ee6:	f7e0 fc01 	bl	80016ec <__aeabi_dadd>
 8020eea:	9a06      	ldr	r2, [sp, #24]
 8020eec:	9b07      	ldr	r3, [sp, #28]
 8020eee:	0006      	movs	r6, r0
 8020ef0:	000f      	movs	r7, r1
 8020ef2:	f7df faf7 	bl	80004e4 <__aeabi_dcmpgt>
 8020ef6:	2800      	cmp	r0, #0
 8020ef8:	d000      	beq.n	8020efc <_dtoa_r+0x510>
 8020efa:	e10f      	b.n	802111c <_dtoa_r+0x730>
 8020efc:	9a06      	ldr	r2, [sp, #24]
 8020efe:	9b07      	ldr	r3, [sp, #28]
 8020f00:	0030      	movs	r0, r6
 8020f02:	0039      	movs	r1, r7
 8020f04:	f7df fad4 	bl	80004b0 <__aeabi_dcmpeq>
 8020f08:	2800      	cmp	r0, #0
 8020f0a:	d003      	beq.n	8020f14 <_dtoa_r+0x528>
 8020f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f0e:	07dd      	lsls	r5, r3, #31
 8020f10:	d500      	bpl.n	8020f14 <_dtoa_r+0x528>
 8020f12:	e103      	b.n	802111c <_dtoa_r+0x730>
 8020f14:	9905      	ldr	r1, [sp, #20]
 8020f16:	9803      	ldr	r0, [sp, #12]
 8020f18:	f001 f812 	bl	8021f40 <_Bfree>
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	7023      	strb	r3, [r4, #0]
 8020f20:	9b04      	ldr	r3, [sp, #16]
 8020f22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020f24:	3301      	adds	r3, #1
 8020f26:	6013      	str	r3, [r2, #0]
 8020f28:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d100      	bne.n	8020f30 <_dtoa_r+0x544>
 8020f2e:	e5a7      	b.n	8020a80 <_dtoa_r+0x94>
 8020f30:	601c      	str	r4, [r3, #0]
 8020f32:	e5a5      	b.n	8020a80 <_dtoa_r+0x94>
 8020f34:	423d      	tst	r5, r7
 8020f36:	d005      	beq.n	8020f44 <_dtoa_r+0x558>
 8020f38:	6832      	ldr	r2, [r6, #0]
 8020f3a:	6873      	ldr	r3, [r6, #4]
 8020f3c:	f7e1 fb7e 	bl	800263c <__aeabi_dmul>
 8020f40:	003b      	movs	r3, r7
 8020f42:	3401      	adds	r4, #1
 8020f44:	106d      	asrs	r5, r5, #1
 8020f46:	3608      	adds	r6, #8
 8020f48:	e736      	b.n	8020db8 <_dtoa_r+0x3cc>
 8020f4a:	9b04      	ldr	r3, [sp, #16]
 8020f4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f50:	e75a      	b.n	8020e08 <_dtoa_r+0x41c>
 8020f52:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020f54:	4b69      	ldr	r3, [pc, #420]	@ (80210fc <_dtoa_r+0x710>)
 8020f56:	3a01      	subs	r2, #1
 8020f58:	00d2      	lsls	r2, r2, #3
 8020f5a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020f5c:	189b      	adds	r3, r3, r2
 8020f5e:	681a      	ldr	r2, [r3, #0]
 8020f60:	685b      	ldr	r3, [r3, #4]
 8020f62:	2900      	cmp	r1, #0
 8020f64:	d04c      	beq.n	8021000 <_dtoa_r+0x614>
 8020f66:	2000      	movs	r0, #0
 8020f68:	496b      	ldr	r1, [pc, #428]	@ (8021118 <_dtoa_r+0x72c>)
 8020f6a:	f7e0 ff23 	bl	8001db4 <__aeabi_ddiv>
 8020f6e:	0032      	movs	r2, r6
 8020f70:	003b      	movs	r3, r7
 8020f72:	f7e1 fe2b 	bl	8002bcc <__aeabi_dsub>
 8020f76:	9a08      	ldr	r2, [sp, #32]
 8020f78:	0006      	movs	r6, r0
 8020f7a:	4694      	mov	ip, r2
 8020f7c:	000f      	movs	r7, r1
 8020f7e:	9b08      	ldr	r3, [sp, #32]
 8020f80:	9316      	str	r3, [sp, #88]	@ 0x58
 8020f82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020f84:	4463      	add	r3, ip
 8020f86:	9311      	str	r3, [sp, #68]	@ 0x44
 8020f88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020f8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f8c:	f7e2 f9dc 	bl	8003348 <__aeabi_d2iz>
 8020f90:	0005      	movs	r5, r0
 8020f92:	f7e2 fa15 	bl	80033c0 <__aeabi_i2d>
 8020f96:	0002      	movs	r2, r0
 8020f98:	000b      	movs	r3, r1
 8020f9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020f9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f9e:	f7e1 fe15 	bl	8002bcc <__aeabi_dsub>
 8020fa2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020fa4:	3530      	adds	r5, #48	@ 0x30
 8020fa6:	1c5c      	adds	r4, r3, #1
 8020fa8:	701d      	strb	r5, [r3, #0]
 8020faa:	0032      	movs	r2, r6
 8020fac:	003b      	movs	r3, r7
 8020fae:	900a      	str	r0, [sp, #40]	@ 0x28
 8020fb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020fb2:	f7df fa83 	bl	80004bc <__aeabi_dcmplt>
 8020fb6:	2800      	cmp	r0, #0
 8020fb8:	d16a      	bne.n	8021090 <_dtoa_r+0x6a4>
 8020fba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020fbe:	2000      	movs	r0, #0
 8020fc0:	4950      	ldr	r1, [pc, #320]	@ (8021104 <_dtoa_r+0x718>)
 8020fc2:	f7e1 fe03 	bl	8002bcc <__aeabi_dsub>
 8020fc6:	0032      	movs	r2, r6
 8020fc8:	003b      	movs	r3, r7
 8020fca:	f7df fa77 	bl	80004bc <__aeabi_dcmplt>
 8020fce:	2800      	cmp	r0, #0
 8020fd0:	d000      	beq.n	8020fd4 <_dtoa_r+0x5e8>
 8020fd2:	e0a5      	b.n	8021120 <_dtoa_r+0x734>
 8020fd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020fd6:	42a3      	cmp	r3, r4
 8020fd8:	d100      	bne.n	8020fdc <_dtoa_r+0x5f0>
 8020fda:	e742      	b.n	8020e62 <_dtoa_r+0x476>
 8020fdc:	2200      	movs	r2, #0
 8020fde:	0030      	movs	r0, r6
 8020fe0:	0039      	movs	r1, r7
 8020fe2:	4b49      	ldr	r3, [pc, #292]	@ (8021108 <_dtoa_r+0x71c>)
 8020fe4:	f7e1 fb2a 	bl	800263c <__aeabi_dmul>
 8020fe8:	2200      	movs	r2, #0
 8020fea:	0006      	movs	r6, r0
 8020fec:	000f      	movs	r7, r1
 8020fee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020ff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020ff2:	4b45      	ldr	r3, [pc, #276]	@ (8021108 <_dtoa_r+0x71c>)
 8020ff4:	f7e1 fb22 	bl	800263c <__aeabi_dmul>
 8020ff8:	9416      	str	r4, [sp, #88]	@ 0x58
 8020ffa:	900a      	str	r0, [sp, #40]	@ 0x28
 8020ffc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020ffe:	e7c3      	b.n	8020f88 <_dtoa_r+0x59c>
 8021000:	0030      	movs	r0, r6
 8021002:	0039      	movs	r1, r7
 8021004:	f7e1 fb1a 	bl	800263c <__aeabi_dmul>
 8021008:	9d08      	ldr	r5, [sp, #32]
 802100a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802100c:	002b      	movs	r3, r5
 802100e:	4694      	mov	ip, r2
 8021010:	9016      	str	r0, [sp, #88]	@ 0x58
 8021012:	9117      	str	r1, [sp, #92]	@ 0x5c
 8021014:	4463      	add	r3, ip
 8021016:	9319      	str	r3, [sp, #100]	@ 0x64
 8021018:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802101a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802101c:	f7e2 f994 	bl	8003348 <__aeabi_d2iz>
 8021020:	0004      	movs	r4, r0
 8021022:	f7e2 f9cd 	bl	80033c0 <__aeabi_i2d>
 8021026:	000b      	movs	r3, r1
 8021028:	0002      	movs	r2, r0
 802102a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802102c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802102e:	f7e1 fdcd 	bl	8002bcc <__aeabi_dsub>
 8021032:	3430      	adds	r4, #48	@ 0x30
 8021034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021036:	702c      	strb	r4, [r5, #0]
 8021038:	3501      	adds	r5, #1
 802103a:	0006      	movs	r6, r0
 802103c:	000f      	movs	r7, r1
 802103e:	42ab      	cmp	r3, r5
 8021040:	d129      	bne.n	8021096 <_dtoa_r+0x6aa>
 8021042:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021044:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021046:	9b08      	ldr	r3, [sp, #32]
 8021048:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802104a:	469c      	mov	ip, r3
 802104c:	2200      	movs	r2, #0
 802104e:	4b32      	ldr	r3, [pc, #200]	@ (8021118 <_dtoa_r+0x72c>)
 8021050:	4464      	add	r4, ip
 8021052:	f7e0 fb4b 	bl	80016ec <__aeabi_dadd>
 8021056:	0002      	movs	r2, r0
 8021058:	000b      	movs	r3, r1
 802105a:	0030      	movs	r0, r6
 802105c:	0039      	movs	r1, r7
 802105e:	f7df fa41 	bl	80004e4 <__aeabi_dcmpgt>
 8021062:	2800      	cmp	r0, #0
 8021064:	d15c      	bne.n	8021120 <_dtoa_r+0x734>
 8021066:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021068:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802106a:	2000      	movs	r0, #0
 802106c:	492a      	ldr	r1, [pc, #168]	@ (8021118 <_dtoa_r+0x72c>)
 802106e:	f7e1 fdad 	bl	8002bcc <__aeabi_dsub>
 8021072:	0002      	movs	r2, r0
 8021074:	000b      	movs	r3, r1
 8021076:	0030      	movs	r0, r6
 8021078:	0039      	movs	r1, r7
 802107a:	f7df fa1f 	bl	80004bc <__aeabi_dcmplt>
 802107e:	2800      	cmp	r0, #0
 8021080:	d100      	bne.n	8021084 <_dtoa_r+0x698>
 8021082:	e6ee      	b.n	8020e62 <_dtoa_r+0x476>
 8021084:	0023      	movs	r3, r4
 8021086:	3c01      	subs	r4, #1
 8021088:	7822      	ldrb	r2, [r4, #0]
 802108a:	2a30      	cmp	r2, #48	@ 0x30
 802108c:	d0fa      	beq.n	8021084 <_dtoa_r+0x698>
 802108e:	001c      	movs	r4, r3
 8021090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021092:	9304      	str	r3, [sp, #16]
 8021094:	e73e      	b.n	8020f14 <_dtoa_r+0x528>
 8021096:	2200      	movs	r2, #0
 8021098:	4b1b      	ldr	r3, [pc, #108]	@ (8021108 <_dtoa_r+0x71c>)
 802109a:	f7e1 facf 	bl	800263c <__aeabi_dmul>
 802109e:	900a      	str	r0, [sp, #40]	@ 0x28
 80210a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80210a2:	e7b9      	b.n	8021018 <_dtoa_r+0x62c>
 80210a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	d10c      	bne.n	80210c4 <_dtoa_r+0x6d8>
 80210aa:	9806      	ldr	r0, [sp, #24]
 80210ac:	9907      	ldr	r1, [sp, #28]
 80210ae:	2200      	movs	r2, #0
 80210b0:	4b18      	ldr	r3, [pc, #96]	@ (8021114 <_dtoa_r+0x728>)
 80210b2:	f7e1 fac3 	bl	800263c <__aeabi_dmul>
 80210b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80210b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80210ba:	f7df fa1d 	bl	80004f8 <__aeabi_dcmpge>
 80210be:	2800      	cmp	r0, #0
 80210c0:	d100      	bne.n	80210c4 <_dtoa_r+0x6d8>
 80210c2:	e164      	b.n	802138e <_dtoa_r+0x9a2>
 80210c4:	2600      	movs	r6, #0
 80210c6:	0037      	movs	r7, r6
 80210c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80210ca:	9c08      	ldr	r4, [sp, #32]
 80210cc:	43db      	mvns	r3, r3
 80210ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80210d0:	2300      	movs	r3, #0
 80210d2:	9304      	str	r3, [sp, #16]
 80210d4:	0031      	movs	r1, r6
 80210d6:	9803      	ldr	r0, [sp, #12]
 80210d8:	f000 ff32 	bl	8021f40 <_Bfree>
 80210dc:	2f00      	cmp	r7, #0
 80210de:	d0d7      	beq.n	8021090 <_dtoa_r+0x6a4>
 80210e0:	9b04      	ldr	r3, [sp, #16]
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d005      	beq.n	80210f2 <_dtoa_r+0x706>
 80210e6:	42bb      	cmp	r3, r7
 80210e8:	d003      	beq.n	80210f2 <_dtoa_r+0x706>
 80210ea:	0019      	movs	r1, r3
 80210ec:	9803      	ldr	r0, [sp, #12]
 80210ee:	f000 ff27 	bl	8021f40 <_Bfree>
 80210f2:	0039      	movs	r1, r7
 80210f4:	9803      	ldr	r0, [sp, #12]
 80210f6:	f000 ff23 	bl	8021f40 <_Bfree>
 80210fa:	e7c9      	b.n	8021090 <_dtoa_r+0x6a4>
 80210fc:	080266b0 	.word	0x080266b0
 8021100:	08026688 	.word	0x08026688
 8021104:	3ff00000 	.word	0x3ff00000
 8021108:	40240000 	.word	0x40240000
 802110c:	401c0000 	.word	0x401c0000
 8021110:	fcc00000 	.word	0xfcc00000
 8021114:	40140000 	.word	0x40140000
 8021118:	3fe00000 	.word	0x3fe00000
 802111c:	9b04      	ldr	r3, [sp, #16]
 802111e:	930c      	str	r3, [sp, #48]	@ 0x30
 8021120:	0023      	movs	r3, r4
 8021122:	001c      	movs	r4, r3
 8021124:	3b01      	subs	r3, #1
 8021126:	781a      	ldrb	r2, [r3, #0]
 8021128:	2a39      	cmp	r2, #57	@ 0x39
 802112a:	d108      	bne.n	802113e <_dtoa_r+0x752>
 802112c:	9a08      	ldr	r2, [sp, #32]
 802112e:	429a      	cmp	r2, r3
 8021130:	d1f7      	bne.n	8021122 <_dtoa_r+0x736>
 8021132:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021134:	9908      	ldr	r1, [sp, #32]
 8021136:	3201      	adds	r2, #1
 8021138:	920c      	str	r2, [sp, #48]	@ 0x30
 802113a:	2230      	movs	r2, #48	@ 0x30
 802113c:	700a      	strb	r2, [r1, #0]
 802113e:	781a      	ldrb	r2, [r3, #0]
 8021140:	3201      	adds	r2, #1
 8021142:	701a      	strb	r2, [r3, #0]
 8021144:	e7a4      	b.n	8021090 <_dtoa_r+0x6a4>
 8021146:	2200      	movs	r2, #0
 8021148:	4bc6      	ldr	r3, [pc, #792]	@ (8021464 <_dtoa_r+0xa78>)
 802114a:	f7e1 fa77 	bl	800263c <__aeabi_dmul>
 802114e:	2200      	movs	r2, #0
 8021150:	2300      	movs	r3, #0
 8021152:	0006      	movs	r6, r0
 8021154:	000f      	movs	r7, r1
 8021156:	f7df f9ab 	bl	80004b0 <__aeabi_dcmpeq>
 802115a:	2800      	cmp	r0, #0
 802115c:	d100      	bne.n	8021160 <_dtoa_r+0x774>
 802115e:	e6a1      	b.n	8020ea4 <_dtoa_r+0x4b8>
 8021160:	e6d8      	b.n	8020f14 <_dtoa_r+0x528>
 8021162:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021164:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021166:	9c06      	ldr	r4, [sp, #24]
 8021168:	2f00      	cmp	r7, #0
 802116a:	d014      	beq.n	8021196 <_dtoa_r+0x7aa>
 802116c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802116e:	2a01      	cmp	r2, #1
 8021170:	dd00      	ble.n	8021174 <_dtoa_r+0x788>
 8021172:	e0c8      	b.n	8021306 <_dtoa_r+0x91a>
 8021174:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021176:	2a00      	cmp	r2, #0
 8021178:	d100      	bne.n	802117c <_dtoa_r+0x790>
 802117a:	e0be      	b.n	80212fa <_dtoa_r+0x90e>
 802117c:	4aba      	ldr	r2, [pc, #744]	@ (8021468 <_dtoa_r+0xa7c>)
 802117e:	189b      	adds	r3, r3, r2
 8021180:	9a06      	ldr	r2, [sp, #24]
 8021182:	2101      	movs	r1, #1
 8021184:	18d2      	adds	r2, r2, r3
 8021186:	9206      	str	r2, [sp, #24]
 8021188:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802118a:	9803      	ldr	r0, [sp, #12]
 802118c:	18d3      	adds	r3, r2, r3
 802118e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021190:	f000 ffda 	bl	8022148 <__i2b>
 8021194:	0007      	movs	r7, r0
 8021196:	2c00      	cmp	r4, #0
 8021198:	d00e      	beq.n	80211b8 <_dtoa_r+0x7cc>
 802119a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802119c:	2b00      	cmp	r3, #0
 802119e:	dd0b      	ble.n	80211b8 <_dtoa_r+0x7cc>
 80211a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80211a2:	0023      	movs	r3, r4
 80211a4:	4294      	cmp	r4, r2
 80211a6:	dd00      	ble.n	80211aa <_dtoa_r+0x7be>
 80211a8:	0013      	movs	r3, r2
 80211aa:	9a06      	ldr	r2, [sp, #24]
 80211ac:	1ae4      	subs	r4, r4, r3
 80211ae:	1ad2      	subs	r2, r2, r3
 80211b0:	9206      	str	r2, [sp, #24]
 80211b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80211b4:	1ad3      	subs	r3, r2, r3
 80211b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80211b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	d01f      	beq.n	80211fe <_dtoa_r+0x812>
 80211be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80211c0:	2b00      	cmp	r3, #0
 80211c2:	d100      	bne.n	80211c6 <_dtoa_r+0x7da>
 80211c4:	e0b5      	b.n	8021332 <_dtoa_r+0x946>
 80211c6:	2d00      	cmp	r5, #0
 80211c8:	d010      	beq.n	80211ec <_dtoa_r+0x800>
 80211ca:	0039      	movs	r1, r7
 80211cc:	002a      	movs	r2, r5
 80211ce:	9803      	ldr	r0, [sp, #12]
 80211d0:	f001 f884 	bl	80222dc <__pow5mult>
 80211d4:	9a05      	ldr	r2, [sp, #20]
 80211d6:	0001      	movs	r1, r0
 80211d8:	0007      	movs	r7, r0
 80211da:	9803      	ldr	r0, [sp, #12]
 80211dc:	f000 ffcc 	bl	8022178 <__multiply>
 80211e0:	0006      	movs	r6, r0
 80211e2:	9905      	ldr	r1, [sp, #20]
 80211e4:	9803      	ldr	r0, [sp, #12]
 80211e6:	f000 feab 	bl	8021f40 <_Bfree>
 80211ea:	9605      	str	r6, [sp, #20]
 80211ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80211ee:	1b5a      	subs	r2, r3, r5
 80211f0:	42ab      	cmp	r3, r5
 80211f2:	d004      	beq.n	80211fe <_dtoa_r+0x812>
 80211f4:	9905      	ldr	r1, [sp, #20]
 80211f6:	9803      	ldr	r0, [sp, #12]
 80211f8:	f001 f870 	bl	80222dc <__pow5mult>
 80211fc:	9005      	str	r0, [sp, #20]
 80211fe:	2101      	movs	r1, #1
 8021200:	9803      	ldr	r0, [sp, #12]
 8021202:	f000 ffa1 	bl	8022148 <__i2b>
 8021206:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021208:	0006      	movs	r6, r0
 802120a:	2b00      	cmp	r3, #0
 802120c:	d100      	bne.n	8021210 <_dtoa_r+0x824>
 802120e:	e1bc      	b.n	802158a <_dtoa_r+0xb9e>
 8021210:	001a      	movs	r2, r3
 8021212:	0001      	movs	r1, r0
 8021214:	9803      	ldr	r0, [sp, #12]
 8021216:	f001 f861 	bl	80222dc <__pow5mult>
 802121a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802121c:	0006      	movs	r6, r0
 802121e:	2500      	movs	r5, #0
 8021220:	2b01      	cmp	r3, #1
 8021222:	dc16      	bgt.n	8021252 <_dtoa_r+0x866>
 8021224:	2500      	movs	r5, #0
 8021226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021228:	42ab      	cmp	r3, r5
 802122a:	d10e      	bne.n	802124a <_dtoa_r+0x85e>
 802122c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802122e:	031b      	lsls	r3, r3, #12
 8021230:	42ab      	cmp	r3, r5
 8021232:	d10a      	bne.n	802124a <_dtoa_r+0x85e>
 8021234:	4b8d      	ldr	r3, [pc, #564]	@ (802146c <_dtoa_r+0xa80>)
 8021236:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021238:	4213      	tst	r3, r2
 802123a:	d006      	beq.n	802124a <_dtoa_r+0x85e>
 802123c:	9b06      	ldr	r3, [sp, #24]
 802123e:	3501      	adds	r5, #1
 8021240:	3301      	adds	r3, #1
 8021242:	9306      	str	r3, [sp, #24]
 8021244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021246:	3301      	adds	r3, #1
 8021248:	930d      	str	r3, [sp, #52]	@ 0x34
 802124a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802124c:	2001      	movs	r0, #1
 802124e:	2b00      	cmp	r3, #0
 8021250:	d008      	beq.n	8021264 <_dtoa_r+0x878>
 8021252:	6933      	ldr	r3, [r6, #16]
 8021254:	3303      	adds	r3, #3
 8021256:	009b      	lsls	r3, r3, #2
 8021258:	18f3      	adds	r3, r6, r3
 802125a:	6858      	ldr	r0, [r3, #4]
 802125c:	f000 ff24 	bl	80220a8 <__hi0bits>
 8021260:	2320      	movs	r3, #32
 8021262:	1a18      	subs	r0, r3, r0
 8021264:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021266:	1818      	adds	r0, r3, r0
 8021268:	0002      	movs	r2, r0
 802126a:	231f      	movs	r3, #31
 802126c:	401a      	ands	r2, r3
 802126e:	4218      	tst	r0, r3
 8021270:	d065      	beq.n	802133e <_dtoa_r+0x952>
 8021272:	3301      	adds	r3, #1
 8021274:	1a9b      	subs	r3, r3, r2
 8021276:	2b04      	cmp	r3, #4
 8021278:	dd5d      	ble.n	8021336 <_dtoa_r+0x94a>
 802127a:	231c      	movs	r3, #28
 802127c:	1a9b      	subs	r3, r3, r2
 802127e:	9a06      	ldr	r2, [sp, #24]
 8021280:	18e4      	adds	r4, r4, r3
 8021282:	18d2      	adds	r2, r2, r3
 8021284:	9206      	str	r2, [sp, #24]
 8021286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021288:	18d3      	adds	r3, r2, r3
 802128a:	930d      	str	r3, [sp, #52]	@ 0x34
 802128c:	9b06      	ldr	r3, [sp, #24]
 802128e:	2b00      	cmp	r3, #0
 8021290:	dd05      	ble.n	802129e <_dtoa_r+0x8b2>
 8021292:	001a      	movs	r2, r3
 8021294:	9905      	ldr	r1, [sp, #20]
 8021296:	9803      	ldr	r0, [sp, #12]
 8021298:	f001 f87c 	bl	8022394 <__lshift>
 802129c:	9005      	str	r0, [sp, #20]
 802129e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80212a0:	2b00      	cmp	r3, #0
 80212a2:	dd05      	ble.n	80212b0 <_dtoa_r+0x8c4>
 80212a4:	0031      	movs	r1, r6
 80212a6:	001a      	movs	r2, r3
 80212a8:	9803      	ldr	r0, [sp, #12]
 80212aa:	f001 f873 	bl	8022394 <__lshift>
 80212ae:	0006      	movs	r6, r0
 80212b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d045      	beq.n	8021342 <_dtoa_r+0x956>
 80212b6:	0031      	movs	r1, r6
 80212b8:	9805      	ldr	r0, [sp, #20]
 80212ba:	f001 f8d7 	bl	802246c <__mcmp>
 80212be:	2800      	cmp	r0, #0
 80212c0:	da3f      	bge.n	8021342 <_dtoa_r+0x956>
 80212c2:	9b04      	ldr	r3, [sp, #16]
 80212c4:	220a      	movs	r2, #10
 80212c6:	3b01      	subs	r3, #1
 80212c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80212ca:	9905      	ldr	r1, [sp, #20]
 80212cc:	2300      	movs	r3, #0
 80212ce:	9803      	ldr	r0, [sp, #12]
 80212d0:	f000 fe5a 	bl	8021f88 <__multadd>
 80212d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80212d6:	9005      	str	r0, [sp, #20]
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d100      	bne.n	80212de <_dtoa_r+0x8f2>
 80212dc:	e15c      	b.n	8021598 <_dtoa_r+0xbac>
 80212de:	2300      	movs	r3, #0
 80212e0:	0039      	movs	r1, r7
 80212e2:	220a      	movs	r2, #10
 80212e4:	9803      	ldr	r0, [sp, #12]
 80212e6:	f000 fe4f 	bl	8021f88 <__multadd>
 80212ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80212ec:	0007      	movs	r7, r0
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	dc55      	bgt.n	802139e <_dtoa_r+0x9b2>
 80212f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80212f4:	2b02      	cmp	r3, #2
 80212f6:	dc2d      	bgt.n	8021354 <_dtoa_r+0x968>
 80212f8:	e051      	b.n	802139e <_dtoa_r+0x9b2>
 80212fa:	2336      	movs	r3, #54	@ 0x36
 80212fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80212fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021300:	9c06      	ldr	r4, [sp, #24]
 8021302:	1a9b      	subs	r3, r3, r2
 8021304:	e73c      	b.n	8021180 <_dtoa_r+0x794>
 8021306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021308:	1e5d      	subs	r5, r3, #1
 802130a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802130c:	42ab      	cmp	r3, r5
 802130e:	db08      	blt.n	8021322 <_dtoa_r+0x936>
 8021310:	1b5d      	subs	r5, r3, r5
 8021312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021314:	9c06      	ldr	r4, [sp, #24]
 8021316:	2b00      	cmp	r3, #0
 8021318:	db00      	blt.n	802131c <_dtoa_r+0x930>
 802131a:	e731      	b.n	8021180 <_dtoa_r+0x794>
 802131c:	1ae4      	subs	r4, r4, r3
 802131e:	2300      	movs	r3, #0
 8021320:	e72e      	b.n	8021180 <_dtoa_r+0x794>
 8021322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021324:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021326:	1aeb      	subs	r3, r5, r3
 8021328:	18d3      	adds	r3, r2, r3
 802132a:	950f      	str	r5, [sp, #60]	@ 0x3c
 802132c:	9314      	str	r3, [sp, #80]	@ 0x50
 802132e:	2500      	movs	r5, #0
 8021330:	e7ef      	b.n	8021312 <_dtoa_r+0x926>
 8021332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021334:	e75e      	b.n	80211f4 <_dtoa_r+0x808>
 8021336:	2b04      	cmp	r3, #4
 8021338:	d0a8      	beq.n	802128c <_dtoa_r+0x8a0>
 802133a:	331c      	adds	r3, #28
 802133c:	e79f      	b.n	802127e <_dtoa_r+0x892>
 802133e:	0013      	movs	r3, r2
 8021340:	e7fb      	b.n	802133a <_dtoa_r+0x94e>
 8021342:	9b04      	ldr	r3, [sp, #16]
 8021344:	930c      	str	r3, [sp, #48]	@ 0x30
 8021346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021348:	930e      	str	r3, [sp, #56]	@ 0x38
 802134a:	2b00      	cmp	r3, #0
 802134c:	dc23      	bgt.n	8021396 <_dtoa_r+0x9aa>
 802134e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021350:	2b02      	cmp	r3, #2
 8021352:	dd20      	ble.n	8021396 <_dtoa_r+0x9aa>
 8021354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021356:	2b00      	cmp	r3, #0
 8021358:	d000      	beq.n	802135c <_dtoa_r+0x970>
 802135a:	e6b5      	b.n	80210c8 <_dtoa_r+0x6dc>
 802135c:	0031      	movs	r1, r6
 802135e:	2205      	movs	r2, #5
 8021360:	9803      	ldr	r0, [sp, #12]
 8021362:	f000 fe11 	bl	8021f88 <__multadd>
 8021366:	0006      	movs	r6, r0
 8021368:	0001      	movs	r1, r0
 802136a:	9805      	ldr	r0, [sp, #20]
 802136c:	f001 f87e 	bl	802246c <__mcmp>
 8021370:	2800      	cmp	r0, #0
 8021372:	dc00      	bgt.n	8021376 <_dtoa_r+0x98a>
 8021374:	e6a8      	b.n	80210c8 <_dtoa_r+0x6dc>
 8021376:	9b08      	ldr	r3, [sp, #32]
 8021378:	9a08      	ldr	r2, [sp, #32]
 802137a:	1c5c      	adds	r4, r3, #1
 802137c:	2331      	movs	r3, #49	@ 0x31
 802137e:	7013      	strb	r3, [r2, #0]
 8021380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021382:	3301      	adds	r3, #1
 8021384:	930c      	str	r3, [sp, #48]	@ 0x30
 8021386:	e6a3      	b.n	80210d0 <_dtoa_r+0x6e4>
 8021388:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802138a:	0037      	movs	r7, r6
 802138c:	e7f3      	b.n	8021376 <_dtoa_r+0x98a>
 802138e:	9b04      	ldr	r3, [sp, #16]
 8021390:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021392:	930c      	str	r3, [sp, #48]	@ 0x30
 8021394:	e7f9      	b.n	802138a <_dtoa_r+0x99e>
 8021396:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021398:	2b00      	cmp	r3, #0
 802139a:	d100      	bne.n	802139e <_dtoa_r+0x9b2>
 802139c:	e100      	b.n	80215a0 <_dtoa_r+0xbb4>
 802139e:	2c00      	cmp	r4, #0
 80213a0:	dd05      	ble.n	80213ae <_dtoa_r+0x9c2>
 80213a2:	0039      	movs	r1, r7
 80213a4:	0022      	movs	r2, r4
 80213a6:	9803      	ldr	r0, [sp, #12]
 80213a8:	f000 fff4 	bl	8022394 <__lshift>
 80213ac:	0007      	movs	r7, r0
 80213ae:	0038      	movs	r0, r7
 80213b0:	2d00      	cmp	r5, #0
 80213b2:	d018      	beq.n	80213e6 <_dtoa_r+0x9fa>
 80213b4:	6879      	ldr	r1, [r7, #4]
 80213b6:	9803      	ldr	r0, [sp, #12]
 80213b8:	f000 fd7e 	bl	8021eb8 <_Balloc>
 80213bc:	1e04      	subs	r4, r0, #0
 80213be:	d105      	bne.n	80213cc <_dtoa_r+0x9e0>
 80213c0:	0022      	movs	r2, r4
 80213c2:	4b2b      	ldr	r3, [pc, #172]	@ (8021470 <_dtoa_r+0xa84>)
 80213c4:	482b      	ldr	r0, [pc, #172]	@ (8021474 <_dtoa_r+0xa88>)
 80213c6:	492c      	ldr	r1, [pc, #176]	@ (8021478 <_dtoa_r+0xa8c>)
 80213c8:	f7ff fb25 	bl	8020a16 <_dtoa_r+0x2a>
 80213cc:	0039      	movs	r1, r7
 80213ce:	693a      	ldr	r2, [r7, #16]
 80213d0:	310c      	adds	r1, #12
 80213d2:	3202      	adds	r2, #2
 80213d4:	0092      	lsls	r2, r2, #2
 80213d6:	300c      	adds	r0, #12
 80213d8:	f7ff fa6a 	bl	80208b0 <memcpy>
 80213dc:	2201      	movs	r2, #1
 80213de:	0021      	movs	r1, r4
 80213e0:	9803      	ldr	r0, [sp, #12]
 80213e2:	f000 ffd7 	bl	8022394 <__lshift>
 80213e6:	9b08      	ldr	r3, [sp, #32]
 80213e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80213ea:	9306      	str	r3, [sp, #24]
 80213ec:	3b01      	subs	r3, #1
 80213ee:	189b      	adds	r3, r3, r2
 80213f0:	2201      	movs	r2, #1
 80213f2:	9704      	str	r7, [sp, #16]
 80213f4:	0007      	movs	r7, r0
 80213f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80213f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80213fa:	4013      	ands	r3, r2
 80213fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80213fe:	0031      	movs	r1, r6
 8021400:	9805      	ldr	r0, [sp, #20]
 8021402:	f7ff fa65 	bl	80208d0 <quorem>
 8021406:	9904      	ldr	r1, [sp, #16]
 8021408:	0005      	movs	r5, r0
 802140a:	900a      	str	r0, [sp, #40]	@ 0x28
 802140c:	9805      	ldr	r0, [sp, #20]
 802140e:	f001 f82d 	bl	802246c <__mcmp>
 8021412:	003a      	movs	r2, r7
 8021414:	900d      	str	r0, [sp, #52]	@ 0x34
 8021416:	0031      	movs	r1, r6
 8021418:	9803      	ldr	r0, [sp, #12]
 802141a:	f001 f843 	bl	80224a4 <__mdiff>
 802141e:	2201      	movs	r2, #1
 8021420:	68c3      	ldr	r3, [r0, #12]
 8021422:	0004      	movs	r4, r0
 8021424:	3530      	adds	r5, #48	@ 0x30
 8021426:	9209      	str	r2, [sp, #36]	@ 0x24
 8021428:	2b00      	cmp	r3, #0
 802142a:	d104      	bne.n	8021436 <_dtoa_r+0xa4a>
 802142c:	0001      	movs	r1, r0
 802142e:	9805      	ldr	r0, [sp, #20]
 8021430:	f001 f81c 	bl	802246c <__mcmp>
 8021434:	9009      	str	r0, [sp, #36]	@ 0x24
 8021436:	0021      	movs	r1, r4
 8021438:	9803      	ldr	r0, [sp, #12]
 802143a:	f000 fd81 	bl	8021f40 <_Bfree>
 802143e:	9b06      	ldr	r3, [sp, #24]
 8021440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021442:	1c5c      	adds	r4, r3, #1
 8021444:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021446:	4313      	orrs	r3, r2
 8021448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802144a:	4313      	orrs	r3, r2
 802144c:	d116      	bne.n	802147c <_dtoa_r+0xa90>
 802144e:	2d39      	cmp	r5, #57	@ 0x39
 8021450:	d02f      	beq.n	80214b2 <_dtoa_r+0xac6>
 8021452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021454:	2b00      	cmp	r3, #0
 8021456:	dd01      	ble.n	802145c <_dtoa_r+0xa70>
 8021458:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802145a:	3531      	adds	r5, #49	@ 0x31
 802145c:	9b06      	ldr	r3, [sp, #24]
 802145e:	701d      	strb	r5, [r3, #0]
 8021460:	e638      	b.n	80210d4 <_dtoa_r+0x6e8>
 8021462:	46c0      	nop			@ (mov r8, r8)
 8021464:	40240000 	.word	0x40240000
 8021468:	00000433 	.word	0x00000433
 802146c:	7ff00000 	.word	0x7ff00000
 8021470:	080265b1 	.word	0x080265b1
 8021474:	08026559 	.word	0x08026559
 8021478:	000002ef 	.word	0x000002ef
 802147c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802147e:	2b00      	cmp	r3, #0
 8021480:	db04      	blt.n	802148c <_dtoa_r+0xaa0>
 8021482:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8021484:	4313      	orrs	r3, r2
 8021486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021488:	4313      	orrs	r3, r2
 802148a:	d11e      	bne.n	80214ca <_dtoa_r+0xade>
 802148c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802148e:	2b00      	cmp	r3, #0
 8021490:	dde4      	ble.n	802145c <_dtoa_r+0xa70>
 8021492:	9905      	ldr	r1, [sp, #20]
 8021494:	2201      	movs	r2, #1
 8021496:	9803      	ldr	r0, [sp, #12]
 8021498:	f000 ff7c 	bl	8022394 <__lshift>
 802149c:	0031      	movs	r1, r6
 802149e:	9005      	str	r0, [sp, #20]
 80214a0:	f000 ffe4 	bl	802246c <__mcmp>
 80214a4:	2800      	cmp	r0, #0
 80214a6:	dc02      	bgt.n	80214ae <_dtoa_r+0xac2>
 80214a8:	d1d8      	bne.n	802145c <_dtoa_r+0xa70>
 80214aa:	07eb      	lsls	r3, r5, #31
 80214ac:	d5d6      	bpl.n	802145c <_dtoa_r+0xa70>
 80214ae:	2d39      	cmp	r5, #57	@ 0x39
 80214b0:	d1d2      	bne.n	8021458 <_dtoa_r+0xa6c>
 80214b2:	2339      	movs	r3, #57	@ 0x39
 80214b4:	9a06      	ldr	r2, [sp, #24]
 80214b6:	7013      	strb	r3, [r2, #0]
 80214b8:	0023      	movs	r3, r4
 80214ba:	001c      	movs	r4, r3
 80214bc:	3b01      	subs	r3, #1
 80214be:	781a      	ldrb	r2, [r3, #0]
 80214c0:	2a39      	cmp	r2, #57	@ 0x39
 80214c2:	d04f      	beq.n	8021564 <_dtoa_r+0xb78>
 80214c4:	3201      	adds	r2, #1
 80214c6:	701a      	strb	r2, [r3, #0]
 80214c8:	e604      	b.n	80210d4 <_dtoa_r+0x6e8>
 80214ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	dd03      	ble.n	80214d8 <_dtoa_r+0xaec>
 80214d0:	2d39      	cmp	r5, #57	@ 0x39
 80214d2:	d0ee      	beq.n	80214b2 <_dtoa_r+0xac6>
 80214d4:	3501      	adds	r5, #1
 80214d6:	e7c1      	b.n	802145c <_dtoa_r+0xa70>
 80214d8:	9b06      	ldr	r3, [sp, #24]
 80214da:	9a06      	ldr	r2, [sp, #24]
 80214dc:	701d      	strb	r5, [r3, #0]
 80214de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80214e0:	4293      	cmp	r3, r2
 80214e2:	d02a      	beq.n	802153a <_dtoa_r+0xb4e>
 80214e4:	2300      	movs	r3, #0
 80214e6:	220a      	movs	r2, #10
 80214e8:	9905      	ldr	r1, [sp, #20]
 80214ea:	9803      	ldr	r0, [sp, #12]
 80214ec:	f000 fd4c 	bl	8021f88 <__multadd>
 80214f0:	9b04      	ldr	r3, [sp, #16]
 80214f2:	9005      	str	r0, [sp, #20]
 80214f4:	42bb      	cmp	r3, r7
 80214f6:	d109      	bne.n	802150c <_dtoa_r+0xb20>
 80214f8:	2300      	movs	r3, #0
 80214fa:	220a      	movs	r2, #10
 80214fc:	9904      	ldr	r1, [sp, #16]
 80214fe:	9803      	ldr	r0, [sp, #12]
 8021500:	f000 fd42 	bl	8021f88 <__multadd>
 8021504:	9004      	str	r0, [sp, #16]
 8021506:	0007      	movs	r7, r0
 8021508:	9406      	str	r4, [sp, #24]
 802150a:	e778      	b.n	80213fe <_dtoa_r+0xa12>
 802150c:	9904      	ldr	r1, [sp, #16]
 802150e:	2300      	movs	r3, #0
 8021510:	220a      	movs	r2, #10
 8021512:	9803      	ldr	r0, [sp, #12]
 8021514:	f000 fd38 	bl	8021f88 <__multadd>
 8021518:	2300      	movs	r3, #0
 802151a:	9004      	str	r0, [sp, #16]
 802151c:	220a      	movs	r2, #10
 802151e:	0039      	movs	r1, r7
 8021520:	9803      	ldr	r0, [sp, #12]
 8021522:	f000 fd31 	bl	8021f88 <__multadd>
 8021526:	e7ee      	b.n	8021506 <_dtoa_r+0xb1a>
 8021528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802152a:	2401      	movs	r4, #1
 802152c:	2b00      	cmp	r3, #0
 802152e:	dd00      	ble.n	8021532 <_dtoa_r+0xb46>
 8021530:	001c      	movs	r4, r3
 8021532:	9b08      	ldr	r3, [sp, #32]
 8021534:	191c      	adds	r4, r3, r4
 8021536:	2300      	movs	r3, #0
 8021538:	9304      	str	r3, [sp, #16]
 802153a:	9905      	ldr	r1, [sp, #20]
 802153c:	2201      	movs	r2, #1
 802153e:	9803      	ldr	r0, [sp, #12]
 8021540:	f000 ff28 	bl	8022394 <__lshift>
 8021544:	0031      	movs	r1, r6
 8021546:	9005      	str	r0, [sp, #20]
 8021548:	f000 ff90 	bl	802246c <__mcmp>
 802154c:	2800      	cmp	r0, #0
 802154e:	dcb3      	bgt.n	80214b8 <_dtoa_r+0xacc>
 8021550:	d101      	bne.n	8021556 <_dtoa_r+0xb6a>
 8021552:	07ed      	lsls	r5, r5, #31
 8021554:	d4b0      	bmi.n	80214b8 <_dtoa_r+0xacc>
 8021556:	0023      	movs	r3, r4
 8021558:	001c      	movs	r4, r3
 802155a:	3b01      	subs	r3, #1
 802155c:	781a      	ldrb	r2, [r3, #0]
 802155e:	2a30      	cmp	r2, #48	@ 0x30
 8021560:	d0fa      	beq.n	8021558 <_dtoa_r+0xb6c>
 8021562:	e5b7      	b.n	80210d4 <_dtoa_r+0x6e8>
 8021564:	9a08      	ldr	r2, [sp, #32]
 8021566:	429a      	cmp	r2, r3
 8021568:	d1a7      	bne.n	80214ba <_dtoa_r+0xace>
 802156a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802156c:	3301      	adds	r3, #1
 802156e:	930c      	str	r3, [sp, #48]	@ 0x30
 8021570:	2331      	movs	r3, #49	@ 0x31
 8021572:	7013      	strb	r3, [r2, #0]
 8021574:	e5ae      	b.n	80210d4 <_dtoa_r+0x6e8>
 8021576:	4b15      	ldr	r3, [pc, #84]	@ (80215cc <_dtoa_r+0xbe0>)
 8021578:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802157a:	9308      	str	r3, [sp, #32]
 802157c:	4b14      	ldr	r3, [pc, #80]	@ (80215d0 <_dtoa_r+0xbe4>)
 802157e:	2a00      	cmp	r2, #0
 8021580:	d001      	beq.n	8021586 <_dtoa_r+0xb9a>
 8021582:	f7ff fa7b 	bl	8020a7c <_dtoa_r+0x90>
 8021586:	f7ff fa7b 	bl	8020a80 <_dtoa_r+0x94>
 802158a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802158c:	2b01      	cmp	r3, #1
 802158e:	dc00      	bgt.n	8021592 <_dtoa_r+0xba6>
 8021590:	e648      	b.n	8021224 <_dtoa_r+0x838>
 8021592:	2001      	movs	r0, #1
 8021594:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021596:	e665      	b.n	8021264 <_dtoa_r+0x878>
 8021598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802159a:	2b00      	cmp	r3, #0
 802159c:	dc00      	bgt.n	80215a0 <_dtoa_r+0xbb4>
 802159e:	e6d6      	b.n	802134e <_dtoa_r+0x962>
 80215a0:	2400      	movs	r4, #0
 80215a2:	0031      	movs	r1, r6
 80215a4:	9805      	ldr	r0, [sp, #20]
 80215a6:	f7ff f993 	bl	80208d0 <quorem>
 80215aa:	9b08      	ldr	r3, [sp, #32]
 80215ac:	3030      	adds	r0, #48	@ 0x30
 80215ae:	5518      	strb	r0, [r3, r4]
 80215b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80215b2:	3401      	adds	r4, #1
 80215b4:	0005      	movs	r5, r0
 80215b6:	429c      	cmp	r4, r3
 80215b8:	dab6      	bge.n	8021528 <_dtoa_r+0xb3c>
 80215ba:	2300      	movs	r3, #0
 80215bc:	220a      	movs	r2, #10
 80215be:	9905      	ldr	r1, [sp, #20]
 80215c0:	9803      	ldr	r0, [sp, #12]
 80215c2:	f000 fce1 	bl	8021f88 <__multadd>
 80215c6:	9005      	str	r0, [sp, #20]
 80215c8:	e7eb      	b.n	80215a2 <_dtoa_r+0xbb6>
 80215ca:	46c0      	nop			@ (mov r8, r8)
 80215cc:	08026535 	.word	0x08026535
 80215d0:	0802653d 	.word	0x0802653d

080215d4 <_free_r>:
 80215d4:	b570      	push	{r4, r5, r6, lr}
 80215d6:	0005      	movs	r5, r0
 80215d8:	1e0c      	subs	r4, r1, #0
 80215da:	d010      	beq.n	80215fe <_free_r+0x2a>
 80215dc:	3c04      	subs	r4, #4
 80215de:	6823      	ldr	r3, [r4, #0]
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	da00      	bge.n	80215e6 <_free_r+0x12>
 80215e4:	18e4      	adds	r4, r4, r3
 80215e6:	0028      	movs	r0, r5
 80215e8:	f000 fc56 	bl	8021e98 <__malloc_lock>
 80215ec:	4a1d      	ldr	r2, [pc, #116]	@ (8021664 <_free_r+0x90>)
 80215ee:	6813      	ldr	r3, [r2, #0]
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	d105      	bne.n	8021600 <_free_r+0x2c>
 80215f4:	6063      	str	r3, [r4, #4]
 80215f6:	6014      	str	r4, [r2, #0]
 80215f8:	0028      	movs	r0, r5
 80215fa:	f000 fc55 	bl	8021ea8 <__malloc_unlock>
 80215fe:	bd70      	pop	{r4, r5, r6, pc}
 8021600:	42a3      	cmp	r3, r4
 8021602:	d908      	bls.n	8021616 <_free_r+0x42>
 8021604:	6820      	ldr	r0, [r4, #0]
 8021606:	1821      	adds	r1, r4, r0
 8021608:	428b      	cmp	r3, r1
 802160a:	d1f3      	bne.n	80215f4 <_free_r+0x20>
 802160c:	6819      	ldr	r1, [r3, #0]
 802160e:	685b      	ldr	r3, [r3, #4]
 8021610:	1809      	adds	r1, r1, r0
 8021612:	6021      	str	r1, [r4, #0]
 8021614:	e7ee      	b.n	80215f4 <_free_r+0x20>
 8021616:	001a      	movs	r2, r3
 8021618:	685b      	ldr	r3, [r3, #4]
 802161a:	2b00      	cmp	r3, #0
 802161c:	d001      	beq.n	8021622 <_free_r+0x4e>
 802161e:	42a3      	cmp	r3, r4
 8021620:	d9f9      	bls.n	8021616 <_free_r+0x42>
 8021622:	6811      	ldr	r1, [r2, #0]
 8021624:	1850      	adds	r0, r2, r1
 8021626:	42a0      	cmp	r0, r4
 8021628:	d10b      	bne.n	8021642 <_free_r+0x6e>
 802162a:	6820      	ldr	r0, [r4, #0]
 802162c:	1809      	adds	r1, r1, r0
 802162e:	1850      	adds	r0, r2, r1
 8021630:	6011      	str	r1, [r2, #0]
 8021632:	4283      	cmp	r3, r0
 8021634:	d1e0      	bne.n	80215f8 <_free_r+0x24>
 8021636:	6818      	ldr	r0, [r3, #0]
 8021638:	685b      	ldr	r3, [r3, #4]
 802163a:	1841      	adds	r1, r0, r1
 802163c:	6011      	str	r1, [r2, #0]
 802163e:	6053      	str	r3, [r2, #4]
 8021640:	e7da      	b.n	80215f8 <_free_r+0x24>
 8021642:	42a0      	cmp	r0, r4
 8021644:	d902      	bls.n	802164c <_free_r+0x78>
 8021646:	230c      	movs	r3, #12
 8021648:	602b      	str	r3, [r5, #0]
 802164a:	e7d5      	b.n	80215f8 <_free_r+0x24>
 802164c:	6820      	ldr	r0, [r4, #0]
 802164e:	1821      	adds	r1, r4, r0
 8021650:	428b      	cmp	r3, r1
 8021652:	d103      	bne.n	802165c <_free_r+0x88>
 8021654:	6819      	ldr	r1, [r3, #0]
 8021656:	685b      	ldr	r3, [r3, #4]
 8021658:	1809      	adds	r1, r1, r0
 802165a:	6021      	str	r1, [r4, #0]
 802165c:	6063      	str	r3, [r4, #4]
 802165e:	6054      	str	r4, [r2, #4]
 8021660:	e7ca      	b.n	80215f8 <_free_r+0x24>
 8021662:	46c0      	nop			@ (mov r8, r8)
 8021664:	200033dc 	.word	0x200033dc

08021668 <rshift>:
 8021668:	0002      	movs	r2, r0
 802166a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802166c:	6904      	ldr	r4, [r0, #16]
 802166e:	b085      	sub	sp, #20
 8021670:	3214      	adds	r2, #20
 8021672:	114b      	asrs	r3, r1, #5
 8021674:	0016      	movs	r6, r2
 8021676:	9302      	str	r3, [sp, #8]
 8021678:	429c      	cmp	r4, r3
 802167a:	dd31      	ble.n	80216e0 <rshift+0x78>
 802167c:	261f      	movs	r6, #31
 802167e:	000f      	movs	r7, r1
 8021680:	009b      	lsls	r3, r3, #2
 8021682:	00a5      	lsls	r5, r4, #2
 8021684:	18d3      	adds	r3, r2, r3
 8021686:	4037      	ands	r7, r6
 8021688:	1955      	adds	r5, r2, r5
 802168a:	9300      	str	r3, [sp, #0]
 802168c:	9701      	str	r7, [sp, #4]
 802168e:	4231      	tst	r1, r6
 8021690:	d10d      	bne.n	80216ae <rshift+0x46>
 8021692:	0016      	movs	r6, r2
 8021694:	0019      	movs	r1, r3
 8021696:	428d      	cmp	r5, r1
 8021698:	d836      	bhi.n	8021708 <rshift+0xa0>
 802169a:	9b00      	ldr	r3, [sp, #0]
 802169c:	2600      	movs	r6, #0
 802169e:	3b03      	subs	r3, #3
 80216a0:	429d      	cmp	r5, r3
 80216a2:	d302      	bcc.n	80216aa <rshift+0x42>
 80216a4:	9b02      	ldr	r3, [sp, #8]
 80216a6:	1ae4      	subs	r4, r4, r3
 80216a8:	00a6      	lsls	r6, r4, #2
 80216aa:	1996      	adds	r6, r2, r6
 80216ac:	e018      	b.n	80216e0 <rshift+0x78>
 80216ae:	2120      	movs	r1, #32
 80216b0:	9e01      	ldr	r6, [sp, #4]
 80216b2:	9f01      	ldr	r7, [sp, #4]
 80216b4:	1b89      	subs	r1, r1, r6
 80216b6:	9e00      	ldr	r6, [sp, #0]
 80216b8:	9103      	str	r1, [sp, #12]
 80216ba:	ce02      	ldmia	r6!, {r1}
 80216bc:	4694      	mov	ip, r2
 80216be:	40f9      	lsrs	r1, r7
 80216c0:	42b5      	cmp	r5, r6
 80216c2:	d816      	bhi.n	80216f2 <rshift+0x8a>
 80216c4:	9b00      	ldr	r3, [sp, #0]
 80216c6:	2600      	movs	r6, #0
 80216c8:	3301      	adds	r3, #1
 80216ca:	429d      	cmp	r5, r3
 80216cc:	d303      	bcc.n	80216d6 <rshift+0x6e>
 80216ce:	9b02      	ldr	r3, [sp, #8]
 80216d0:	1ae4      	subs	r4, r4, r3
 80216d2:	00a6      	lsls	r6, r4, #2
 80216d4:	3e04      	subs	r6, #4
 80216d6:	1996      	adds	r6, r2, r6
 80216d8:	6031      	str	r1, [r6, #0]
 80216da:	2900      	cmp	r1, #0
 80216dc:	d000      	beq.n	80216e0 <rshift+0x78>
 80216de:	3604      	adds	r6, #4
 80216e0:	1ab1      	subs	r1, r6, r2
 80216e2:	1089      	asrs	r1, r1, #2
 80216e4:	6101      	str	r1, [r0, #16]
 80216e6:	4296      	cmp	r6, r2
 80216e8:	d101      	bne.n	80216ee <rshift+0x86>
 80216ea:	2300      	movs	r3, #0
 80216ec:	6143      	str	r3, [r0, #20]
 80216ee:	b005      	add	sp, #20
 80216f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216f2:	6837      	ldr	r7, [r6, #0]
 80216f4:	9b03      	ldr	r3, [sp, #12]
 80216f6:	409f      	lsls	r7, r3
 80216f8:	430f      	orrs	r7, r1
 80216fa:	4661      	mov	r1, ip
 80216fc:	c180      	stmia	r1!, {r7}
 80216fe:	468c      	mov	ip, r1
 8021700:	9b01      	ldr	r3, [sp, #4]
 8021702:	ce02      	ldmia	r6!, {r1}
 8021704:	40d9      	lsrs	r1, r3
 8021706:	e7db      	b.n	80216c0 <rshift+0x58>
 8021708:	c980      	ldmia	r1!, {r7}
 802170a:	c680      	stmia	r6!, {r7}
 802170c:	e7c3      	b.n	8021696 <rshift+0x2e>

0802170e <__hexdig_fun>:
 802170e:	0002      	movs	r2, r0
 8021710:	3a30      	subs	r2, #48	@ 0x30
 8021712:	0003      	movs	r3, r0
 8021714:	2a09      	cmp	r2, #9
 8021716:	d802      	bhi.n	802171e <__hexdig_fun+0x10>
 8021718:	3b20      	subs	r3, #32
 802171a:	b2d8      	uxtb	r0, r3
 802171c:	4770      	bx	lr
 802171e:	0002      	movs	r2, r0
 8021720:	3a61      	subs	r2, #97	@ 0x61
 8021722:	2a05      	cmp	r2, #5
 8021724:	d801      	bhi.n	802172a <__hexdig_fun+0x1c>
 8021726:	3b47      	subs	r3, #71	@ 0x47
 8021728:	e7f7      	b.n	802171a <__hexdig_fun+0xc>
 802172a:	001a      	movs	r2, r3
 802172c:	3a41      	subs	r2, #65	@ 0x41
 802172e:	2000      	movs	r0, #0
 8021730:	2a05      	cmp	r2, #5
 8021732:	d8f3      	bhi.n	802171c <__hexdig_fun+0xe>
 8021734:	3b27      	subs	r3, #39	@ 0x27
 8021736:	e7f0      	b.n	802171a <__hexdig_fun+0xc>

08021738 <__gethex>:
 8021738:	b5f0      	push	{r4, r5, r6, r7, lr}
 802173a:	b089      	sub	sp, #36	@ 0x24
 802173c:	9307      	str	r3, [sp, #28]
 802173e:	680b      	ldr	r3, [r1, #0]
 8021740:	9201      	str	r2, [sp, #4]
 8021742:	9003      	str	r0, [sp, #12]
 8021744:	9106      	str	r1, [sp, #24]
 8021746:	1c9a      	adds	r2, r3, #2
 8021748:	0011      	movs	r1, r2
 802174a:	3201      	adds	r2, #1
 802174c:	1e50      	subs	r0, r2, #1
 802174e:	7800      	ldrb	r0, [r0, #0]
 8021750:	2830      	cmp	r0, #48	@ 0x30
 8021752:	d0f9      	beq.n	8021748 <__gethex+0x10>
 8021754:	1acb      	subs	r3, r1, r3
 8021756:	3b02      	subs	r3, #2
 8021758:	9305      	str	r3, [sp, #20]
 802175a:	9100      	str	r1, [sp, #0]
 802175c:	f7ff ffd7 	bl	802170e <__hexdig_fun>
 8021760:	2300      	movs	r3, #0
 8021762:	001d      	movs	r5, r3
 8021764:	9302      	str	r3, [sp, #8]
 8021766:	4298      	cmp	r0, r3
 8021768:	d11e      	bne.n	80217a8 <__gethex+0x70>
 802176a:	2201      	movs	r2, #1
 802176c:	49a6      	ldr	r1, [pc, #664]	@ (8021a08 <__gethex+0x2d0>)
 802176e:	9800      	ldr	r0, [sp, #0]
 8021770:	f7fe ffd8 	bl	8020724 <strncmp>
 8021774:	0007      	movs	r7, r0
 8021776:	42a8      	cmp	r0, r5
 8021778:	d000      	beq.n	802177c <__gethex+0x44>
 802177a:	e06a      	b.n	8021852 <__gethex+0x11a>
 802177c:	9b00      	ldr	r3, [sp, #0]
 802177e:	7858      	ldrb	r0, [r3, #1]
 8021780:	1c5c      	adds	r4, r3, #1
 8021782:	f7ff ffc4 	bl	802170e <__hexdig_fun>
 8021786:	2301      	movs	r3, #1
 8021788:	9302      	str	r3, [sp, #8]
 802178a:	42a8      	cmp	r0, r5
 802178c:	d02f      	beq.n	80217ee <__gethex+0xb6>
 802178e:	9400      	str	r4, [sp, #0]
 8021790:	9b00      	ldr	r3, [sp, #0]
 8021792:	7818      	ldrb	r0, [r3, #0]
 8021794:	2830      	cmp	r0, #48	@ 0x30
 8021796:	d009      	beq.n	80217ac <__gethex+0x74>
 8021798:	f7ff ffb9 	bl	802170e <__hexdig_fun>
 802179c:	4242      	negs	r2, r0
 802179e:	4142      	adcs	r2, r0
 80217a0:	2301      	movs	r3, #1
 80217a2:	0025      	movs	r5, r4
 80217a4:	9202      	str	r2, [sp, #8]
 80217a6:	9305      	str	r3, [sp, #20]
 80217a8:	9c00      	ldr	r4, [sp, #0]
 80217aa:	e004      	b.n	80217b6 <__gethex+0x7e>
 80217ac:	9b00      	ldr	r3, [sp, #0]
 80217ae:	3301      	adds	r3, #1
 80217b0:	9300      	str	r3, [sp, #0]
 80217b2:	e7ed      	b.n	8021790 <__gethex+0x58>
 80217b4:	3401      	adds	r4, #1
 80217b6:	7820      	ldrb	r0, [r4, #0]
 80217b8:	f7ff ffa9 	bl	802170e <__hexdig_fun>
 80217bc:	1e07      	subs	r7, r0, #0
 80217be:	d1f9      	bne.n	80217b4 <__gethex+0x7c>
 80217c0:	2201      	movs	r2, #1
 80217c2:	0020      	movs	r0, r4
 80217c4:	4990      	ldr	r1, [pc, #576]	@ (8021a08 <__gethex+0x2d0>)
 80217c6:	f7fe ffad 	bl	8020724 <strncmp>
 80217ca:	2800      	cmp	r0, #0
 80217cc:	d10d      	bne.n	80217ea <__gethex+0xb2>
 80217ce:	2d00      	cmp	r5, #0
 80217d0:	d106      	bne.n	80217e0 <__gethex+0xa8>
 80217d2:	3401      	adds	r4, #1
 80217d4:	0025      	movs	r5, r4
 80217d6:	7820      	ldrb	r0, [r4, #0]
 80217d8:	f7ff ff99 	bl	802170e <__hexdig_fun>
 80217dc:	2800      	cmp	r0, #0
 80217de:	d102      	bne.n	80217e6 <__gethex+0xae>
 80217e0:	1b2d      	subs	r5, r5, r4
 80217e2:	00af      	lsls	r7, r5, #2
 80217e4:	e003      	b.n	80217ee <__gethex+0xb6>
 80217e6:	3401      	adds	r4, #1
 80217e8:	e7f5      	b.n	80217d6 <__gethex+0x9e>
 80217ea:	2d00      	cmp	r5, #0
 80217ec:	d1f8      	bne.n	80217e0 <__gethex+0xa8>
 80217ee:	2220      	movs	r2, #32
 80217f0:	7823      	ldrb	r3, [r4, #0]
 80217f2:	0026      	movs	r6, r4
 80217f4:	4393      	bics	r3, r2
 80217f6:	2b50      	cmp	r3, #80	@ 0x50
 80217f8:	d11d      	bne.n	8021836 <__gethex+0xfe>
 80217fa:	7863      	ldrb	r3, [r4, #1]
 80217fc:	2b2b      	cmp	r3, #43	@ 0x2b
 80217fe:	d02d      	beq.n	802185c <__gethex+0x124>
 8021800:	2b2d      	cmp	r3, #45	@ 0x2d
 8021802:	d02f      	beq.n	8021864 <__gethex+0x12c>
 8021804:	2300      	movs	r3, #0
 8021806:	1c66      	adds	r6, r4, #1
 8021808:	9304      	str	r3, [sp, #16]
 802180a:	7830      	ldrb	r0, [r6, #0]
 802180c:	f7ff ff7f 	bl	802170e <__hexdig_fun>
 8021810:	1e43      	subs	r3, r0, #1
 8021812:	b2db      	uxtb	r3, r3
 8021814:	0005      	movs	r5, r0
 8021816:	2b18      	cmp	r3, #24
 8021818:	d82a      	bhi.n	8021870 <__gethex+0x138>
 802181a:	7870      	ldrb	r0, [r6, #1]
 802181c:	f7ff ff77 	bl	802170e <__hexdig_fun>
 8021820:	1e43      	subs	r3, r0, #1
 8021822:	b2db      	uxtb	r3, r3
 8021824:	3601      	adds	r6, #1
 8021826:	3d10      	subs	r5, #16
 8021828:	2b18      	cmp	r3, #24
 802182a:	d91d      	bls.n	8021868 <__gethex+0x130>
 802182c:	9b04      	ldr	r3, [sp, #16]
 802182e:	2b00      	cmp	r3, #0
 8021830:	d000      	beq.n	8021834 <__gethex+0xfc>
 8021832:	426d      	negs	r5, r5
 8021834:	197f      	adds	r7, r7, r5
 8021836:	9b06      	ldr	r3, [sp, #24]
 8021838:	601e      	str	r6, [r3, #0]
 802183a:	9b02      	ldr	r3, [sp, #8]
 802183c:	2b00      	cmp	r3, #0
 802183e:	d019      	beq.n	8021874 <__gethex+0x13c>
 8021840:	9b05      	ldr	r3, [sp, #20]
 8021842:	2606      	movs	r6, #6
 8021844:	425a      	negs	r2, r3
 8021846:	4153      	adcs	r3, r2
 8021848:	425b      	negs	r3, r3
 802184a:	401e      	ands	r6, r3
 802184c:	0030      	movs	r0, r6
 802184e:	b009      	add	sp, #36	@ 0x24
 8021850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021852:	2301      	movs	r3, #1
 8021854:	2700      	movs	r7, #0
 8021856:	9c00      	ldr	r4, [sp, #0]
 8021858:	9302      	str	r3, [sp, #8]
 802185a:	e7c8      	b.n	80217ee <__gethex+0xb6>
 802185c:	2300      	movs	r3, #0
 802185e:	9304      	str	r3, [sp, #16]
 8021860:	1ca6      	adds	r6, r4, #2
 8021862:	e7d2      	b.n	802180a <__gethex+0xd2>
 8021864:	2301      	movs	r3, #1
 8021866:	e7fa      	b.n	802185e <__gethex+0x126>
 8021868:	230a      	movs	r3, #10
 802186a:	435d      	muls	r5, r3
 802186c:	182d      	adds	r5, r5, r0
 802186e:	e7d4      	b.n	802181a <__gethex+0xe2>
 8021870:	0026      	movs	r6, r4
 8021872:	e7e0      	b.n	8021836 <__gethex+0xfe>
 8021874:	9b00      	ldr	r3, [sp, #0]
 8021876:	9902      	ldr	r1, [sp, #8]
 8021878:	1ae3      	subs	r3, r4, r3
 802187a:	3b01      	subs	r3, #1
 802187c:	2b07      	cmp	r3, #7
 802187e:	dc0a      	bgt.n	8021896 <__gethex+0x15e>
 8021880:	9803      	ldr	r0, [sp, #12]
 8021882:	f000 fb19 	bl	8021eb8 <_Balloc>
 8021886:	1e05      	subs	r5, r0, #0
 8021888:	d108      	bne.n	802189c <__gethex+0x164>
 802188a:	002a      	movs	r2, r5
 802188c:	21e4      	movs	r1, #228	@ 0xe4
 802188e:	4b5f      	ldr	r3, [pc, #380]	@ (8021a0c <__gethex+0x2d4>)
 8021890:	485f      	ldr	r0, [pc, #380]	@ (8021a10 <__gethex+0x2d8>)
 8021892:	f001 fbf1 	bl	8023078 <__assert_func>
 8021896:	3101      	adds	r1, #1
 8021898:	105b      	asrs	r3, r3, #1
 802189a:	e7ef      	b.n	802187c <__gethex+0x144>
 802189c:	0003      	movs	r3, r0
 802189e:	3314      	adds	r3, #20
 80218a0:	9302      	str	r3, [sp, #8]
 80218a2:	9305      	str	r3, [sp, #20]
 80218a4:	2300      	movs	r3, #0
 80218a6:	001e      	movs	r6, r3
 80218a8:	9304      	str	r3, [sp, #16]
 80218aa:	9b00      	ldr	r3, [sp, #0]
 80218ac:	42a3      	cmp	r3, r4
 80218ae:	d338      	bcc.n	8021922 <__gethex+0x1ea>
 80218b0:	9c05      	ldr	r4, [sp, #20]
 80218b2:	9b02      	ldr	r3, [sp, #8]
 80218b4:	c440      	stmia	r4!, {r6}
 80218b6:	1ae4      	subs	r4, r4, r3
 80218b8:	10a4      	asrs	r4, r4, #2
 80218ba:	0030      	movs	r0, r6
 80218bc:	612c      	str	r4, [r5, #16]
 80218be:	f000 fbf3 	bl	80220a8 <__hi0bits>
 80218c2:	9b01      	ldr	r3, [sp, #4]
 80218c4:	0164      	lsls	r4, r4, #5
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	1a26      	subs	r6, r4, r0
 80218ca:	9300      	str	r3, [sp, #0]
 80218cc:	429e      	cmp	r6, r3
 80218ce:	dd52      	ble.n	8021976 <__gethex+0x23e>
 80218d0:	1af6      	subs	r6, r6, r3
 80218d2:	0031      	movs	r1, r6
 80218d4:	0028      	movs	r0, r5
 80218d6:	f000 ff96 	bl	8022806 <__any_on>
 80218da:	1e04      	subs	r4, r0, #0
 80218dc:	d00f      	beq.n	80218fe <__gethex+0x1c6>
 80218de:	2401      	movs	r4, #1
 80218e0:	231f      	movs	r3, #31
 80218e2:	0020      	movs	r0, r4
 80218e4:	1e72      	subs	r2, r6, #1
 80218e6:	4013      	ands	r3, r2
 80218e8:	4098      	lsls	r0, r3
 80218ea:	0003      	movs	r3, r0
 80218ec:	1151      	asrs	r1, r2, #5
 80218ee:	9802      	ldr	r0, [sp, #8]
 80218f0:	0089      	lsls	r1, r1, #2
 80218f2:	5809      	ldr	r1, [r1, r0]
 80218f4:	4219      	tst	r1, r3
 80218f6:	d002      	beq.n	80218fe <__gethex+0x1c6>
 80218f8:	42a2      	cmp	r2, r4
 80218fa:	dc34      	bgt.n	8021966 <__gethex+0x22e>
 80218fc:	2402      	movs	r4, #2
 80218fe:	0031      	movs	r1, r6
 8021900:	0028      	movs	r0, r5
 8021902:	f7ff feb1 	bl	8021668 <rshift>
 8021906:	19bf      	adds	r7, r7, r6
 8021908:	9b01      	ldr	r3, [sp, #4]
 802190a:	689b      	ldr	r3, [r3, #8]
 802190c:	42bb      	cmp	r3, r7
 802190e:	da42      	bge.n	8021996 <__gethex+0x25e>
 8021910:	0029      	movs	r1, r5
 8021912:	9803      	ldr	r0, [sp, #12]
 8021914:	f000 fb14 	bl	8021f40 <_Bfree>
 8021918:	2300      	movs	r3, #0
 802191a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802191c:	26a3      	movs	r6, #163	@ 0xa3
 802191e:	6013      	str	r3, [r2, #0]
 8021920:	e794      	b.n	802184c <__gethex+0x114>
 8021922:	3c01      	subs	r4, #1
 8021924:	7823      	ldrb	r3, [r4, #0]
 8021926:	2b2e      	cmp	r3, #46	@ 0x2e
 8021928:	d012      	beq.n	8021950 <__gethex+0x218>
 802192a:	9b04      	ldr	r3, [sp, #16]
 802192c:	2b20      	cmp	r3, #32
 802192e:	d104      	bne.n	802193a <__gethex+0x202>
 8021930:	9b05      	ldr	r3, [sp, #20]
 8021932:	c340      	stmia	r3!, {r6}
 8021934:	2600      	movs	r6, #0
 8021936:	9305      	str	r3, [sp, #20]
 8021938:	9604      	str	r6, [sp, #16]
 802193a:	7820      	ldrb	r0, [r4, #0]
 802193c:	f7ff fee7 	bl	802170e <__hexdig_fun>
 8021940:	230f      	movs	r3, #15
 8021942:	4018      	ands	r0, r3
 8021944:	9b04      	ldr	r3, [sp, #16]
 8021946:	4098      	lsls	r0, r3
 8021948:	3304      	adds	r3, #4
 802194a:	4306      	orrs	r6, r0
 802194c:	9304      	str	r3, [sp, #16]
 802194e:	e7ac      	b.n	80218aa <__gethex+0x172>
 8021950:	9b00      	ldr	r3, [sp, #0]
 8021952:	42a3      	cmp	r3, r4
 8021954:	d8e9      	bhi.n	802192a <__gethex+0x1f2>
 8021956:	2201      	movs	r2, #1
 8021958:	0020      	movs	r0, r4
 802195a:	492b      	ldr	r1, [pc, #172]	@ (8021a08 <__gethex+0x2d0>)
 802195c:	f7fe fee2 	bl	8020724 <strncmp>
 8021960:	2800      	cmp	r0, #0
 8021962:	d1e2      	bne.n	802192a <__gethex+0x1f2>
 8021964:	e7a1      	b.n	80218aa <__gethex+0x172>
 8021966:	0028      	movs	r0, r5
 8021968:	1eb1      	subs	r1, r6, #2
 802196a:	f000 ff4c 	bl	8022806 <__any_on>
 802196e:	2800      	cmp	r0, #0
 8021970:	d0c4      	beq.n	80218fc <__gethex+0x1c4>
 8021972:	2403      	movs	r4, #3
 8021974:	e7c3      	b.n	80218fe <__gethex+0x1c6>
 8021976:	9b00      	ldr	r3, [sp, #0]
 8021978:	2400      	movs	r4, #0
 802197a:	429e      	cmp	r6, r3
 802197c:	dac4      	bge.n	8021908 <__gethex+0x1d0>
 802197e:	1b9e      	subs	r6, r3, r6
 8021980:	0029      	movs	r1, r5
 8021982:	0032      	movs	r2, r6
 8021984:	9803      	ldr	r0, [sp, #12]
 8021986:	f000 fd05 	bl	8022394 <__lshift>
 802198a:	0003      	movs	r3, r0
 802198c:	3314      	adds	r3, #20
 802198e:	0005      	movs	r5, r0
 8021990:	1bbf      	subs	r7, r7, r6
 8021992:	9302      	str	r3, [sp, #8]
 8021994:	e7b8      	b.n	8021908 <__gethex+0x1d0>
 8021996:	9b01      	ldr	r3, [sp, #4]
 8021998:	685e      	ldr	r6, [r3, #4]
 802199a:	42be      	cmp	r6, r7
 802199c:	dd6f      	ble.n	8021a7e <__gethex+0x346>
 802199e:	9b00      	ldr	r3, [sp, #0]
 80219a0:	1bf6      	subs	r6, r6, r7
 80219a2:	42b3      	cmp	r3, r6
 80219a4:	dc36      	bgt.n	8021a14 <__gethex+0x2dc>
 80219a6:	9b01      	ldr	r3, [sp, #4]
 80219a8:	68db      	ldr	r3, [r3, #12]
 80219aa:	2b02      	cmp	r3, #2
 80219ac:	d024      	beq.n	80219f8 <__gethex+0x2c0>
 80219ae:	2b03      	cmp	r3, #3
 80219b0:	d026      	beq.n	8021a00 <__gethex+0x2c8>
 80219b2:	2b01      	cmp	r3, #1
 80219b4:	d117      	bne.n	80219e6 <__gethex+0x2ae>
 80219b6:	9b00      	ldr	r3, [sp, #0]
 80219b8:	42b3      	cmp	r3, r6
 80219ba:	d114      	bne.n	80219e6 <__gethex+0x2ae>
 80219bc:	2b01      	cmp	r3, #1
 80219be:	d10b      	bne.n	80219d8 <__gethex+0x2a0>
 80219c0:	9b01      	ldr	r3, [sp, #4]
 80219c2:	9a07      	ldr	r2, [sp, #28]
 80219c4:	685b      	ldr	r3, [r3, #4]
 80219c6:	2662      	movs	r6, #98	@ 0x62
 80219c8:	6013      	str	r3, [r2, #0]
 80219ca:	2301      	movs	r3, #1
 80219cc:	9a02      	ldr	r2, [sp, #8]
 80219ce:	612b      	str	r3, [r5, #16]
 80219d0:	6013      	str	r3, [r2, #0]
 80219d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80219d4:	601d      	str	r5, [r3, #0]
 80219d6:	e739      	b.n	802184c <__gethex+0x114>
 80219d8:	9900      	ldr	r1, [sp, #0]
 80219da:	0028      	movs	r0, r5
 80219dc:	3901      	subs	r1, #1
 80219de:	f000 ff12 	bl	8022806 <__any_on>
 80219e2:	2800      	cmp	r0, #0
 80219e4:	d1ec      	bne.n	80219c0 <__gethex+0x288>
 80219e6:	0029      	movs	r1, r5
 80219e8:	9803      	ldr	r0, [sp, #12]
 80219ea:	f000 faa9 	bl	8021f40 <_Bfree>
 80219ee:	2300      	movs	r3, #0
 80219f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80219f2:	2650      	movs	r6, #80	@ 0x50
 80219f4:	6013      	str	r3, [r2, #0]
 80219f6:	e729      	b.n	802184c <__gethex+0x114>
 80219f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80219fa:	2b00      	cmp	r3, #0
 80219fc:	d1f3      	bne.n	80219e6 <__gethex+0x2ae>
 80219fe:	e7df      	b.n	80219c0 <__gethex+0x288>
 8021a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d1dc      	bne.n	80219c0 <__gethex+0x288>
 8021a06:	e7ee      	b.n	80219e6 <__gethex+0x2ae>
 8021a08:	080263a0 	.word	0x080263a0
 8021a0c:	080265b1 	.word	0x080265b1
 8021a10:	080265c2 	.word	0x080265c2
 8021a14:	1e77      	subs	r7, r6, #1
 8021a16:	2c00      	cmp	r4, #0
 8021a18:	d12f      	bne.n	8021a7a <__gethex+0x342>
 8021a1a:	2f00      	cmp	r7, #0
 8021a1c:	d004      	beq.n	8021a28 <__gethex+0x2f0>
 8021a1e:	0039      	movs	r1, r7
 8021a20:	0028      	movs	r0, r5
 8021a22:	f000 fef0 	bl	8022806 <__any_on>
 8021a26:	0004      	movs	r4, r0
 8021a28:	231f      	movs	r3, #31
 8021a2a:	117a      	asrs	r2, r7, #5
 8021a2c:	401f      	ands	r7, r3
 8021a2e:	3b1e      	subs	r3, #30
 8021a30:	40bb      	lsls	r3, r7
 8021a32:	9902      	ldr	r1, [sp, #8]
 8021a34:	0092      	lsls	r2, r2, #2
 8021a36:	5852      	ldr	r2, [r2, r1]
 8021a38:	421a      	tst	r2, r3
 8021a3a:	d001      	beq.n	8021a40 <__gethex+0x308>
 8021a3c:	2302      	movs	r3, #2
 8021a3e:	431c      	orrs	r4, r3
 8021a40:	9b00      	ldr	r3, [sp, #0]
 8021a42:	0031      	movs	r1, r6
 8021a44:	1b9b      	subs	r3, r3, r6
 8021a46:	2602      	movs	r6, #2
 8021a48:	0028      	movs	r0, r5
 8021a4a:	9300      	str	r3, [sp, #0]
 8021a4c:	f7ff fe0c 	bl	8021668 <rshift>
 8021a50:	9b01      	ldr	r3, [sp, #4]
 8021a52:	685f      	ldr	r7, [r3, #4]
 8021a54:	2c00      	cmp	r4, #0
 8021a56:	d03f      	beq.n	8021ad8 <__gethex+0x3a0>
 8021a58:	9b01      	ldr	r3, [sp, #4]
 8021a5a:	68db      	ldr	r3, [r3, #12]
 8021a5c:	2b02      	cmp	r3, #2
 8021a5e:	d010      	beq.n	8021a82 <__gethex+0x34a>
 8021a60:	2b03      	cmp	r3, #3
 8021a62:	d012      	beq.n	8021a8a <__gethex+0x352>
 8021a64:	2b01      	cmp	r3, #1
 8021a66:	d106      	bne.n	8021a76 <__gethex+0x33e>
 8021a68:	07a2      	lsls	r2, r4, #30
 8021a6a:	d504      	bpl.n	8021a76 <__gethex+0x33e>
 8021a6c:	9a02      	ldr	r2, [sp, #8]
 8021a6e:	6812      	ldr	r2, [r2, #0]
 8021a70:	4314      	orrs	r4, r2
 8021a72:	421c      	tst	r4, r3
 8021a74:	d10c      	bne.n	8021a90 <__gethex+0x358>
 8021a76:	2310      	movs	r3, #16
 8021a78:	e02d      	b.n	8021ad6 <__gethex+0x39e>
 8021a7a:	2401      	movs	r4, #1
 8021a7c:	e7d4      	b.n	8021a28 <__gethex+0x2f0>
 8021a7e:	2601      	movs	r6, #1
 8021a80:	e7e8      	b.n	8021a54 <__gethex+0x31c>
 8021a82:	2301      	movs	r3, #1
 8021a84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021a86:	1a9b      	subs	r3, r3, r2
 8021a88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021a8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d0f2      	beq.n	8021a76 <__gethex+0x33e>
 8021a90:	692b      	ldr	r3, [r5, #16]
 8021a92:	2000      	movs	r0, #0
 8021a94:	9302      	str	r3, [sp, #8]
 8021a96:	009b      	lsls	r3, r3, #2
 8021a98:	9304      	str	r3, [sp, #16]
 8021a9a:	002b      	movs	r3, r5
 8021a9c:	9a04      	ldr	r2, [sp, #16]
 8021a9e:	3314      	adds	r3, #20
 8021aa0:	1899      	adds	r1, r3, r2
 8021aa2:	681a      	ldr	r2, [r3, #0]
 8021aa4:	1c54      	adds	r4, r2, #1
 8021aa6:	d01c      	beq.n	8021ae2 <__gethex+0x3aa>
 8021aa8:	3201      	adds	r2, #1
 8021aaa:	601a      	str	r2, [r3, #0]
 8021aac:	002b      	movs	r3, r5
 8021aae:	3314      	adds	r3, #20
 8021ab0:	2e02      	cmp	r6, #2
 8021ab2:	d13f      	bne.n	8021b34 <__gethex+0x3fc>
 8021ab4:	9a01      	ldr	r2, [sp, #4]
 8021ab6:	9900      	ldr	r1, [sp, #0]
 8021ab8:	6812      	ldr	r2, [r2, #0]
 8021aba:	3a01      	subs	r2, #1
 8021abc:	428a      	cmp	r2, r1
 8021abe:	d109      	bne.n	8021ad4 <__gethex+0x39c>
 8021ac0:	000a      	movs	r2, r1
 8021ac2:	201f      	movs	r0, #31
 8021ac4:	4010      	ands	r0, r2
 8021ac6:	2201      	movs	r2, #1
 8021ac8:	4082      	lsls	r2, r0
 8021aca:	1149      	asrs	r1, r1, #5
 8021acc:	0089      	lsls	r1, r1, #2
 8021ace:	58cb      	ldr	r3, [r1, r3]
 8021ad0:	4213      	tst	r3, r2
 8021ad2:	d13d      	bne.n	8021b50 <__gethex+0x418>
 8021ad4:	2320      	movs	r3, #32
 8021ad6:	431e      	orrs	r6, r3
 8021ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021ada:	601d      	str	r5, [r3, #0]
 8021adc:	9b07      	ldr	r3, [sp, #28]
 8021ade:	601f      	str	r7, [r3, #0]
 8021ae0:	e6b4      	b.n	802184c <__gethex+0x114>
 8021ae2:	c301      	stmia	r3!, {r0}
 8021ae4:	4299      	cmp	r1, r3
 8021ae6:	d8dc      	bhi.n	8021aa2 <__gethex+0x36a>
 8021ae8:	68ab      	ldr	r3, [r5, #8]
 8021aea:	9a02      	ldr	r2, [sp, #8]
 8021aec:	429a      	cmp	r2, r3
 8021aee:	db18      	blt.n	8021b22 <__gethex+0x3ea>
 8021af0:	6869      	ldr	r1, [r5, #4]
 8021af2:	9803      	ldr	r0, [sp, #12]
 8021af4:	3101      	adds	r1, #1
 8021af6:	f000 f9df 	bl	8021eb8 <_Balloc>
 8021afa:	1e04      	subs	r4, r0, #0
 8021afc:	d104      	bne.n	8021b08 <__gethex+0x3d0>
 8021afe:	0022      	movs	r2, r4
 8021b00:	2184      	movs	r1, #132	@ 0x84
 8021b02:	4b1d      	ldr	r3, [pc, #116]	@ (8021b78 <__gethex+0x440>)
 8021b04:	481d      	ldr	r0, [pc, #116]	@ (8021b7c <__gethex+0x444>)
 8021b06:	e6c4      	b.n	8021892 <__gethex+0x15a>
 8021b08:	0029      	movs	r1, r5
 8021b0a:	692a      	ldr	r2, [r5, #16]
 8021b0c:	310c      	adds	r1, #12
 8021b0e:	3202      	adds	r2, #2
 8021b10:	0092      	lsls	r2, r2, #2
 8021b12:	300c      	adds	r0, #12
 8021b14:	f7fe fecc 	bl	80208b0 <memcpy>
 8021b18:	0029      	movs	r1, r5
 8021b1a:	9803      	ldr	r0, [sp, #12]
 8021b1c:	f000 fa10 	bl	8021f40 <_Bfree>
 8021b20:	0025      	movs	r5, r4
 8021b22:	692b      	ldr	r3, [r5, #16]
 8021b24:	1c5a      	adds	r2, r3, #1
 8021b26:	612a      	str	r2, [r5, #16]
 8021b28:	2201      	movs	r2, #1
 8021b2a:	3304      	adds	r3, #4
 8021b2c:	009b      	lsls	r3, r3, #2
 8021b2e:	18eb      	adds	r3, r5, r3
 8021b30:	605a      	str	r2, [r3, #4]
 8021b32:	e7bb      	b.n	8021aac <__gethex+0x374>
 8021b34:	692a      	ldr	r2, [r5, #16]
 8021b36:	9902      	ldr	r1, [sp, #8]
 8021b38:	428a      	cmp	r2, r1
 8021b3a:	dd0b      	ble.n	8021b54 <__gethex+0x41c>
 8021b3c:	2101      	movs	r1, #1
 8021b3e:	0028      	movs	r0, r5
 8021b40:	f7ff fd92 	bl	8021668 <rshift>
 8021b44:	9b01      	ldr	r3, [sp, #4]
 8021b46:	3701      	adds	r7, #1
 8021b48:	689b      	ldr	r3, [r3, #8]
 8021b4a:	42bb      	cmp	r3, r7
 8021b4c:	da00      	bge.n	8021b50 <__gethex+0x418>
 8021b4e:	e6df      	b.n	8021910 <__gethex+0x1d8>
 8021b50:	2601      	movs	r6, #1
 8021b52:	e7bf      	b.n	8021ad4 <__gethex+0x39c>
 8021b54:	221f      	movs	r2, #31
 8021b56:	9c00      	ldr	r4, [sp, #0]
 8021b58:	9900      	ldr	r1, [sp, #0]
 8021b5a:	4014      	ands	r4, r2
 8021b5c:	4211      	tst	r1, r2
 8021b5e:	d0f7      	beq.n	8021b50 <__gethex+0x418>
 8021b60:	9a04      	ldr	r2, [sp, #16]
 8021b62:	189b      	adds	r3, r3, r2
 8021b64:	3b04      	subs	r3, #4
 8021b66:	6818      	ldr	r0, [r3, #0]
 8021b68:	f000 fa9e 	bl	80220a8 <__hi0bits>
 8021b6c:	2320      	movs	r3, #32
 8021b6e:	1b1b      	subs	r3, r3, r4
 8021b70:	4298      	cmp	r0, r3
 8021b72:	dbe3      	blt.n	8021b3c <__gethex+0x404>
 8021b74:	e7ec      	b.n	8021b50 <__gethex+0x418>
 8021b76:	46c0      	nop			@ (mov r8, r8)
 8021b78:	080265b1 	.word	0x080265b1
 8021b7c:	080265c2 	.word	0x080265c2

08021b80 <L_shift>:
 8021b80:	2308      	movs	r3, #8
 8021b82:	b570      	push	{r4, r5, r6, lr}
 8021b84:	2520      	movs	r5, #32
 8021b86:	1a9a      	subs	r2, r3, r2
 8021b88:	0092      	lsls	r2, r2, #2
 8021b8a:	1aad      	subs	r5, r5, r2
 8021b8c:	6843      	ldr	r3, [r0, #4]
 8021b8e:	6804      	ldr	r4, [r0, #0]
 8021b90:	001e      	movs	r6, r3
 8021b92:	40ae      	lsls	r6, r5
 8021b94:	40d3      	lsrs	r3, r2
 8021b96:	4334      	orrs	r4, r6
 8021b98:	6004      	str	r4, [r0, #0]
 8021b9a:	6043      	str	r3, [r0, #4]
 8021b9c:	3004      	adds	r0, #4
 8021b9e:	4288      	cmp	r0, r1
 8021ba0:	d3f4      	bcc.n	8021b8c <L_shift+0xc>
 8021ba2:	bd70      	pop	{r4, r5, r6, pc}

08021ba4 <__match>:
 8021ba4:	b530      	push	{r4, r5, lr}
 8021ba6:	6803      	ldr	r3, [r0, #0]
 8021ba8:	780c      	ldrb	r4, [r1, #0]
 8021baa:	3301      	adds	r3, #1
 8021bac:	2c00      	cmp	r4, #0
 8021bae:	d102      	bne.n	8021bb6 <__match+0x12>
 8021bb0:	6003      	str	r3, [r0, #0]
 8021bb2:	2001      	movs	r0, #1
 8021bb4:	bd30      	pop	{r4, r5, pc}
 8021bb6:	781a      	ldrb	r2, [r3, #0]
 8021bb8:	0015      	movs	r5, r2
 8021bba:	3d41      	subs	r5, #65	@ 0x41
 8021bbc:	2d19      	cmp	r5, #25
 8021bbe:	d800      	bhi.n	8021bc2 <__match+0x1e>
 8021bc0:	3220      	adds	r2, #32
 8021bc2:	3101      	adds	r1, #1
 8021bc4:	42a2      	cmp	r2, r4
 8021bc6:	d0ef      	beq.n	8021ba8 <__match+0x4>
 8021bc8:	2000      	movs	r0, #0
 8021bca:	e7f3      	b.n	8021bb4 <__match+0x10>

08021bcc <__hexnan>:
 8021bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bce:	680b      	ldr	r3, [r1, #0]
 8021bd0:	b08b      	sub	sp, #44	@ 0x2c
 8021bd2:	9201      	str	r2, [sp, #4]
 8021bd4:	9901      	ldr	r1, [sp, #4]
 8021bd6:	115a      	asrs	r2, r3, #5
 8021bd8:	0092      	lsls	r2, r2, #2
 8021bda:	188a      	adds	r2, r1, r2
 8021bdc:	9202      	str	r2, [sp, #8]
 8021bde:	0019      	movs	r1, r3
 8021be0:	221f      	movs	r2, #31
 8021be2:	4011      	ands	r1, r2
 8021be4:	9008      	str	r0, [sp, #32]
 8021be6:	9106      	str	r1, [sp, #24]
 8021be8:	4213      	tst	r3, r2
 8021bea:	d002      	beq.n	8021bf2 <__hexnan+0x26>
 8021bec:	9b02      	ldr	r3, [sp, #8]
 8021bee:	3304      	adds	r3, #4
 8021bf0:	9302      	str	r3, [sp, #8]
 8021bf2:	9b02      	ldr	r3, [sp, #8]
 8021bf4:	2500      	movs	r5, #0
 8021bf6:	1f1f      	subs	r7, r3, #4
 8021bf8:	003e      	movs	r6, r7
 8021bfa:	003c      	movs	r4, r7
 8021bfc:	9b08      	ldr	r3, [sp, #32]
 8021bfe:	603d      	str	r5, [r7, #0]
 8021c00:	681b      	ldr	r3, [r3, #0]
 8021c02:	9507      	str	r5, [sp, #28]
 8021c04:	9305      	str	r3, [sp, #20]
 8021c06:	9503      	str	r5, [sp, #12]
 8021c08:	9b05      	ldr	r3, [sp, #20]
 8021c0a:	3301      	adds	r3, #1
 8021c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c0e:	9b05      	ldr	r3, [sp, #20]
 8021c10:	785b      	ldrb	r3, [r3, #1]
 8021c12:	9304      	str	r3, [sp, #16]
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	d028      	beq.n	8021c6a <__hexnan+0x9e>
 8021c18:	9804      	ldr	r0, [sp, #16]
 8021c1a:	f7ff fd78 	bl	802170e <__hexdig_fun>
 8021c1e:	2800      	cmp	r0, #0
 8021c20:	d155      	bne.n	8021cce <__hexnan+0x102>
 8021c22:	9b04      	ldr	r3, [sp, #16]
 8021c24:	2b20      	cmp	r3, #32
 8021c26:	d819      	bhi.n	8021c5c <__hexnan+0x90>
 8021c28:	9b03      	ldr	r3, [sp, #12]
 8021c2a:	9a07      	ldr	r2, [sp, #28]
 8021c2c:	4293      	cmp	r3, r2
 8021c2e:	dd12      	ble.n	8021c56 <__hexnan+0x8a>
 8021c30:	42b4      	cmp	r4, r6
 8021c32:	d206      	bcs.n	8021c42 <__hexnan+0x76>
 8021c34:	2d07      	cmp	r5, #7
 8021c36:	dc04      	bgt.n	8021c42 <__hexnan+0x76>
 8021c38:	002a      	movs	r2, r5
 8021c3a:	0031      	movs	r1, r6
 8021c3c:	0020      	movs	r0, r4
 8021c3e:	f7ff ff9f 	bl	8021b80 <L_shift>
 8021c42:	9b01      	ldr	r3, [sp, #4]
 8021c44:	2508      	movs	r5, #8
 8021c46:	429c      	cmp	r4, r3
 8021c48:	d905      	bls.n	8021c56 <__hexnan+0x8a>
 8021c4a:	1f26      	subs	r6, r4, #4
 8021c4c:	2500      	movs	r5, #0
 8021c4e:	0034      	movs	r4, r6
 8021c50:	9b03      	ldr	r3, [sp, #12]
 8021c52:	6035      	str	r5, [r6, #0]
 8021c54:	9307      	str	r3, [sp, #28]
 8021c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c58:	9305      	str	r3, [sp, #20]
 8021c5a:	e7d5      	b.n	8021c08 <__hexnan+0x3c>
 8021c5c:	9b04      	ldr	r3, [sp, #16]
 8021c5e:	2b29      	cmp	r3, #41	@ 0x29
 8021c60:	d15a      	bne.n	8021d18 <__hexnan+0x14c>
 8021c62:	9b05      	ldr	r3, [sp, #20]
 8021c64:	9a08      	ldr	r2, [sp, #32]
 8021c66:	3302      	adds	r3, #2
 8021c68:	6013      	str	r3, [r2, #0]
 8021c6a:	9b03      	ldr	r3, [sp, #12]
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d053      	beq.n	8021d18 <__hexnan+0x14c>
 8021c70:	42b4      	cmp	r4, r6
 8021c72:	d206      	bcs.n	8021c82 <__hexnan+0xb6>
 8021c74:	2d07      	cmp	r5, #7
 8021c76:	dc04      	bgt.n	8021c82 <__hexnan+0xb6>
 8021c78:	002a      	movs	r2, r5
 8021c7a:	0031      	movs	r1, r6
 8021c7c:	0020      	movs	r0, r4
 8021c7e:	f7ff ff7f 	bl	8021b80 <L_shift>
 8021c82:	9b01      	ldr	r3, [sp, #4]
 8021c84:	429c      	cmp	r4, r3
 8021c86:	d936      	bls.n	8021cf6 <__hexnan+0x12a>
 8021c88:	001a      	movs	r2, r3
 8021c8a:	0023      	movs	r3, r4
 8021c8c:	cb02      	ldmia	r3!, {r1}
 8021c8e:	c202      	stmia	r2!, {r1}
 8021c90:	429f      	cmp	r7, r3
 8021c92:	d2fb      	bcs.n	8021c8c <__hexnan+0xc0>
 8021c94:	9b02      	ldr	r3, [sp, #8]
 8021c96:	1c61      	adds	r1, r4, #1
 8021c98:	1eda      	subs	r2, r3, #3
 8021c9a:	2304      	movs	r3, #4
 8021c9c:	4291      	cmp	r1, r2
 8021c9e:	d805      	bhi.n	8021cac <__hexnan+0xe0>
 8021ca0:	9b02      	ldr	r3, [sp, #8]
 8021ca2:	3b04      	subs	r3, #4
 8021ca4:	1b1b      	subs	r3, r3, r4
 8021ca6:	089b      	lsrs	r3, r3, #2
 8021ca8:	3301      	adds	r3, #1
 8021caa:	009b      	lsls	r3, r3, #2
 8021cac:	9a01      	ldr	r2, [sp, #4]
 8021cae:	18d3      	adds	r3, r2, r3
 8021cb0:	2200      	movs	r2, #0
 8021cb2:	c304      	stmia	r3!, {r2}
 8021cb4:	429f      	cmp	r7, r3
 8021cb6:	d2fc      	bcs.n	8021cb2 <__hexnan+0xe6>
 8021cb8:	683b      	ldr	r3, [r7, #0]
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d104      	bne.n	8021cc8 <__hexnan+0xfc>
 8021cbe:	9b01      	ldr	r3, [sp, #4]
 8021cc0:	429f      	cmp	r7, r3
 8021cc2:	d127      	bne.n	8021d14 <__hexnan+0x148>
 8021cc4:	2301      	movs	r3, #1
 8021cc6:	603b      	str	r3, [r7, #0]
 8021cc8:	2005      	movs	r0, #5
 8021cca:	b00b      	add	sp, #44	@ 0x2c
 8021ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021cce:	9b03      	ldr	r3, [sp, #12]
 8021cd0:	3501      	adds	r5, #1
 8021cd2:	3301      	adds	r3, #1
 8021cd4:	9303      	str	r3, [sp, #12]
 8021cd6:	2d08      	cmp	r5, #8
 8021cd8:	dd06      	ble.n	8021ce8 <__hexnan+0x11c>
 8021cda:	9b01      	ldr	r3, [sp, #4]
 8021cdc:	429c      	cmp	r4, r3
 8021cde:	d9ba      	bls.n	8021c56 <__hexnan+0x8a>
 8021ce0:	2300      	movs	r3, #0
 8021ce2:	2501      	movs	r5, #1
 8021ce4:	3c04      	subs	r4, #4
 8021ce6:	6023      	str	r3, [r4, #0]
 8021ce8:	220f      	movs	r2, #15
 8021cea:	6823      	ldr	r3, [r4, #0]
 8021cec:	4010      	ands	r0, r2
 8021cee:	011b      	lsls	r3, r3, #4
 8021cf0:	4303      	orrs	r3, r0
 8021cf2:	6023      	str	r3, [r4, #0]
 8021cf4:	e7af      	b.n	8021c56 <__hexnan+0x8a>
 8021cf6:	9b06      	ldr	r3, [sp, #24]
 8021cf8:	2b00      	cmp	r3, #0
 8021cfa:	d0dd      	beq.n	8021cb8 <__hexnan+0xec>
 8021cfc:	2320      	movs	r3, #32
 8021cfe:	9a06      	ldr	r2, [sp, #24]
 8021d00:	9902      	ldr	r1, [sp, #8]
 8021d02:	1a9b      	subs	r3, r3, r2
 8021d04:	2201      	movs	r2, #1
 8021d06:	4252      	negs	r2, r2
 8021d08:	40da      	lsrs	r2, r3
 8021d0a:	3904      	subs	r1, #4
 8021d0c:	680b      	ldr	r3, [r1, #0]
 8021d0e:	4013      	ands	r3, r2
 8021d10:	600b      	str	r3, [r1, #0]
 8021d12:	e7d1      	b.n	8021cb8 <__hexnan+0xec>
 8021d14:	3f04      	subs	r7, #4
 8021d16:	e7cf      	b.n	8021cb8 <__hexnan+0xec>
 8021d18:	2004      	movs	r0, #4
 8021d1a:	e7d6      	b.n	8021cca <__hexnan+0xfe>

08021d1c <malloc>:
 8021d1c:	b510      	push	{r4, lr}
 8021d1e:	4b03      	ldr	r3, [pc, #12]	@ (8021d2c <malloc+0x10>)
 8021d20:	0001      	movs	r1, r0
 8021d22:	6818      	ldr	r0, [r3, #0]
 8021d24:	f000 f826 	bl	8021d74 <_malloc_r>
 8021d28:	bd10      	pop	{r4, pc}
 8021d2a:	46c0      	nop			@ (mov r8, r8)
 8021d2c:	200003d0 	.word	0x200003d0

08021d30 <sbrk_aligned>:
 8021d30:	b570      	push	{r4, r5, r6, lr}
 8021d32:	4e0f      	ldr	r6, [pc, #60]	@ (8021d70 <sbrk_aligned+0x40>)
 8021d34:	000d      	movs	r5, r1
 8021d36:	6831      	ldr	r1, [r6, #0]
 8021d38:	0004      	movs	r4, r0
 8021d3a:	2900      	cmp	r1, #0
 8021d3c:	d102      	bne.n	8021d44 <sbrk_aligned+0x14>
 8021d3e:	f001 f989 	bl	8023054 <_sbrk_r>
 8021d42:	6030      	str	r0, [r6, #0]
 8021d44:	0029      	movs	r1, r5
 8021d46:	0020      	movs	r0, r4
 8021d48:	f001 f984 	bl	8023054 <_sbrk_r>
 8021d4c:	1c43      	adds	r3, r0, #1
 8021d4e:	d103      	bne.n	8021d58 <sbrk_aligned+0x28>
 8021d50:	2501      	movs	r5, #1
 8021d52:	426d      	negs	r5, r5
 8021d54:	0028      	movs	r0, r5
 8021d56:	bd70      	pop	{r4, r5, r6, pc}
 8021d58:	2303      	movs	r3, #3
 8021d5a:	1cc5      	adds	r5, r0, #3
 8021d5c:	439d      	bics	r5, r3
 8021d5e:	42a8      	cmp	r0, r5
 8021d60:	d0f8      	beq.n	8021d54 <sbrk_aligned+0x24>
 8021d62:	1a29      	subs	r1, r5, r0
 8021d64:	0020      	movs	r0, r4
 8021d66:	f001 f975 	bl	8023054 <_sbrk_r>
 8021d6a:	3001      	adds	r0, #1
 8021d6c:	d1f2      	bne.n	8021d54 <sbrk_aligned+0x24>
 8021d6e:	e7ef      	b.n	8021d50 <sbrk_aligned+0x20>
 8021d70:	200033d8 	.word	0x200033d8

08021d74 <_malloc_r>:
 8021d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021d76:	2203      	movs	r2, #3
 8021d78:	1ccb      	adds	r3, r1, #3
 8021d7a:	4393      	bics	r3, r2
 8021d7c:	3308      	adds	r3, #8
 8021d7e:	0005      	movs	r5, r0
 8021d80:	001f      	movs	r7, r3
 8021d82:	2b0c      	cmp	r3, #12
 8021d84:	d234      	bcs.n	8021df0 <_malloc_r+0x7c>
 8021d86:	270c      	movs	r7, #12
 8021d88:	42b9      	cmp	r1, r7
 8021d8a:	d833      	bhi.n	8021df4 <_malloc_r+0x80>
 8021d8c:	0028      	movs	r0, r5
 8021d8e:	f000 f883 	bl	8021e98 <__malloc_lock>
 8021d92:	4e37      	ldr	r6, [pc, #220]	@ (8021e70 <_malloc_r+0xfc>)
 8021d94:	6833      	ldr	r3, [r6, #0]
 8021d96:	001c      	movs	r4, r3
 8021d98:	2c00      	cmp	r4, #0
 8021d9a:	d12f      	bne.n	8021dfc <_malloc_r+0x88>
 8021d9c:	0039      	movs	r1, r7
 8021d9e:	0028      	movs	r0, r5
 8021da0:	f7ff ffc6 	bl	8021d30 <sbrk_aligned>
 8021da4:	0004      	movs	r4, r0
 8021da6:	1c43      	adds	r3, r0, #1
 8021da8:	d15f      	bne.n	8021e6a <_malloc_r+0xf6>
 8021daa:	6834      	ldr	r4, [r6, #0]
 8021dac:	9400      	str	r4, [sp, #0]
 8021dae:	9b00      	ldr	r3, [sp, #0]
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	d14a      	bne.n	8021e4a <_malloc_r+0xd6>
 8021db4:	2c00      	cmp	r4, #0
 8021db6:	d052      	beq.n	8021e5e <_malloc_r+0xea>
 8021db8:	6823      	ldr	r3, [r4, #0]
 8021dba:	0028      	movs	r0, r5
 8021dbc:	18e3      	adds	r3, r4, r3
 8021dbe:	9900      	ldr	r1, [sp, #0]
 8021dc0:	9301      	str	r3, [sp, #4]
 8021dc2:	f001 f947 	bl	8023054 <_sbrk_r>
 8021dc6:	9b01      	ldr	r3, [sp, #4]
 8021dc8:	4283      	cmp	r3, r0
 8021dca:	d148      	bne.n	8021e5e <_malloc_r+0xea>
 8021dcc:	6823      	ldr	r3, [r4, #0]
 8021dce:	0028      	movs	r0, r5
 8021dd0:	1aff      	subs	r7, r7, r3
 8021dd2:	0039      	movs	r1, r7
 8021dd4:	f7ff ffac 	bl	8021d30 <sbrk_aligned>
 8021dd8:	3001      	adds	r0, #1
 8021dda:	d040      	beq.n	8021e5e <_malloc_r+0xea>
 8021ddc:	6823      	ldr	r3, [r4, #0]
 8021dde:	19db      	adds	r3, r3, r7
 8021de0:	6023      	str	r3, [r4, #0]
 8021de2:	6833      	ldr	r3, [r6, #0]
 8021de4:	685a      	ldr	r2, [r3, #4]
 8021de6:	2a00      	cmp	r2, #0
 8021de8:	d133      	bne.n	8021e52 <_malloc_r+0xde>
 8021dea:	9b00      	ldr	r3, [sp, #0]
 8021dec:	6033      	str	r3, [r6, #0]
 8021dee:	e019      	b.n	8021e24 <_malloc_r+0xb0>
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	dac9      	bge.n	8021d88 <_malloc_r+0x14>
 8021df4:	230c      	movs	r3, #12
 8021df6:	602b      	str	r3, [r5, #0]
 8021df8:	2000      	movs	r0, #0
 8021dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021dfc:	6821      	ldr	r1, [r4, #0]
 8021dfe:	1bc9      	subs	r1, r1, r7
 8021e00:	d420      	bmi.n	8021e44 <_malloc_r+0xd0>
 8021e02:	290b      	cmp	r1, #11
 8021e04:	d90a      	bls.n	8021e1c <_malloc_r+0xa8>
 8021e06:	19e2      	adds	r2, r4, r7
 8021e08:	6027      	str	r7, [r4, #0]
 8021e0a:	42a3      	cmp	r3, r4
 8021e0c:	d104      	bne.n	8021e18 <_malloc_r+0xa4>
 8021e0e:	6032      	str	r2, [r6, #0]
 8021e10:	6863      	ldr	r3, [r4, #4]
 8021e12:	6011      	str	r1, [r2, #0]
 8021e14:	6053      	str	r3, [r2, #4]
 8021e16:	e005      	b.n	8021e24 <_malloc_r+0xb0>
 8021e18:	605a      	str	r2, [r3, #4]
 8021e1a:	e7f9      	b.n	8021e10 <_malloc_r+0x9c>
 8021e1c:	6862      	ldr	r2, [r4, #4]
 8021e1e:	42a3      	cmp	r3, r4
 8021e20:	d10e      	bne.n	8021e40 <_malloc_r+0xcc>
 8021e22:	6032      	str	r2, [r6, #0]
 8021e24:	0028      	movs	r0, r5
 8021e26:	f000 f83f 	bl	8021ea8 <__malloc_unlock>
 8021e2a:	0020      	movs	r0, r4
 8021e2c:	2207      	movs	r2, #7
 8021e2e:	300b      	adds	r0, #11
 8021e30:	1d23      	adds	r3, r4, #4
 8021e32:	4390      	bics	r0, r2
 8021e34:	1ac2      	subs	r2, r0, r3
 8021e36:	4298      	cmp	r0, r3
 8021e38:	d0df      	beq.n	8021dfa <_malloc_r+0x86>
 8021e3a:	1a1b      	subs	r3, r3, r0
 8021e3c:	50a3      	str	r3, [r4, r2]
 8021e3e:	e7dc      	b.n	8021dfa <_malloc_r+0x86>
 8021e40:	605a      	str	r2, [r3, #4]
 8021e42:	e7ef      	b.n	8021e24 <_malloc_r+0xb0>
 8021e44:	0023      	movs	r3, r4
 8021e46:	6864      	ldr	r4, [r4, #4]
 8021e48:	e7a6      	b.n	8021d98 <_malloc_r+0x24>
 8021e4a:	9c00      	ldr	r4, [sp, #0]
 8021e4c:	6863      	ldr	r3, [r4, #4]
 8021e4e:	9300      	str	r3, [sp, #0]
 8021e50:	e7ad      	b.n	8021dae <_malloc_r+0x3a>
 8021e52:	001a      	movs	r2, r3
 8021e54:	685b      	ldr	r3, [r3, #4]
 8021e56:	42a3      	cmp	r3, r4
 8021e58:	d1fb      	bne.n	8021e52 <_malloc_r+0xde>
 8021e5a:	2300      	movs	r3, #0
 8021e5c:	e7da      	b.n	8021e14 <_malloc_r+0xa0>
 8021e5e:	230c      	movs	r3, #12
 8021e60:	0028      	movs	r0, r5
 8021e62:	602b      	str	r3, [r5, #0]
 8021e64:	f000 f820 	bl	8021ea8 <__malloc_unlock>
 8021e68:	e7c6      	b.n	8021df8 <_malloc_r+0x84>
 8021e6a:	6007      	str	r7, [r0, #0]
 8021e6c:	e7da      	b.n	8021e24 <_malloc_r+0xb0>
 8021e6e:	46c0      	nop			@ (mov r8, r8)
 8021e70:	200033dc 	.word	0x200033dc

08021e74 <__ascii_mbtowc>:
 8021e74:	b082      	sub	sp, #8
 8021e76:	2900      	cmp	r1, #0
 8021e78:	d100      	bne.n	8021e7c <__ascii_mbtowc+0x8>
 8021e7a:	a901      	add	r1, sp, #4
 8021e7c:	1e10      	subs	r0, r2, #0
 8021e7e:	d006      	beq.n	8021e8e <__ascii_mbtowc+0x1a>
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d006      	beq.n	8021e92 <__ascii_mbtowc+0x1e>
 8021e84:	7813      	ldrb	r3, [r2, #0]
 8021e86:	600b      	str	r3, [r1, #0]
 8021e88:	7810      	ldrb	r0, [r2, #0]
 8021e8a:	1e43      	subs	r3, r0, #1
 8021e8c:	4198      	sbcs	r0, r3
 8021e8e:	b002      	add	sp, #8
 8021e90:	4770      	bx	lr
 8021e92:	2002      	movs	r0, #2
 8021e94:	4240      	negs	r0, r0
 8021e96:	e7fa      	b.n	8021e8e <__ascii_mbtowc+0x1a>

08021e98 <__malloc_lock>:
 8021e98:	b510      	push	{r4, lr}
 8021e9a:	4802      	ldr	r0, [pc, #8]	@ (8021ea4 <__malloc_lock+0xc>)
 8021e9c:	f7fe fcfb 	bl	8020896 <__retarget_lock_acquire_recursive>
 8021ea0:	bd10      	pop	{r4, pc}
 8021ea2:	46c0      	nop			@ (mov r8, r8)
 8021ea4:	200033d4 	.word	0x200033d4

08021ea8 <__malloc_unlock>:
 8021ea8:	b510      	push	{r4, lr}
 8021eaa:	4802      	ldr	r0, [pc, #8]	@ (8021eb4 <__malloc_unlock+0xc>)
 8021eac:	f7fe fcf4 	bl	8020898 <__retarget_lock_release_recursive>
 8021eb0:	bd10      	pop	{r4, pc}
 8021eb2:	46c0      	nop			@ (mov r8, r8)
 8021eb4:	200033d4 	.word	0x200033d4

08021eb8 <_Balloc>:
 8021eb8:	b570      	push	{r4, r5, r6, lr}
 8021eba:	69c5      	ldr	r5, [r0, #28]
 8021ebc:	0006      	movs	r6, r0
 8021ebe:	000c      	movs	r4, r1
 8021ec0:	2d00      	cmp	r5, #0
 8021ec2:	d10e      	bne.n	8021ee2 <_Balloc+0x2a>
 8021ec4:	2010      	movs	r0, #16
 8021ec6:	f7ff ff29 	bl	8021d1c <malloc>
 8021eca:	1e02      	subs	r2, r0, #0
 8021ecc:	61f0      	str	r0, [r6, #28]
 8021ece:	d104      	bne.n	8021eda <_Balloc+0x22>
 8021ed0:	216b      	movs	r1, #107	@ 0x6b
 8021ed2:	4b19      	ldr	r3, [pc, #100]	@ (8021f38 <_Balloc+0x80>)
 8021ed4:	4819      	ldr	r0, [pc, #100]	@ (8021f3c <_Balloc+0x84>)
 8021ed6:	f001 f8cf 	bl	8023078 <__assert_func>
 8021eda:	6045      	str	r5, [r0, #4]
 8021edc:	6085      	str	r5, [r0, #8]
 8021ede:	6005      	str	r5, [r0, #0]
 8021ee0:	60c5      	str	r5, [r0, #12]
 8021ee2:	69f5      	ldr	r5, [r6, #28]
 8021ee4:	68eb      	ldr	r3, [r5, #12]
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d013      	beq.n	8021f12 <_Balloc+0x5a>
 8021eea:	69f3      	ldr	r3, [r6, #28]
 8021eec:	00a2      	lsls	r2, r4, #2
 8021eee:	68db      	ldr	r3, [r3, #12]
 8021ef0:	189b      	adds	r3, r3, r2
 8021ef2:	6818      	ldr	r0, [r3, #0]
 8021ef4:	2800      	cmp	r0, #0
 8021ef6:	d118      	bne.n	8021f2a <_Balloc+0x72>
 8021ef8:	2101      	movs	r1, #1
 8021efa:	000d      	movs	r5, r1
 8021efc:	40a5      	lsls	r5, r4
 8021efe:	1d6a      	adds	r2, r5, #5
 8021f00:	0030      	movs	r0, r6
 8021f02:	0092      	lsls	r2, r2, #2
 8021f04:	f001 f8d6 	bl	80230b4 <_calloc_r>
 8021f08:	2800      	cmp	r0, #0
 8021f0a:	d00c      	beq.n	8021f26 <_Balloc+0x6e>
 8021f0c:	6044      	str	r4, [r0, #4]
 8021f0e:	6085      	str	r5, [r0, #8]
 8021f10:	e00d      	b.n	8021f2e <_Balloc+0x76>
 8021f12:	2221      	movs	r2, #33	@ 0x21
 8021f14:	2104      	movs	r1, #4
 8021f16:	0030      	movs	r0, r6
 8021f18:	f001 f8cc 	bl	80230b4 <_calloc_r>
 8021f1c:	69f3      	ldr	r3, [r6, #28]
 8021f1e:	60e8      	str	r0, [r5, #12]
 8021f20:	68db      	ldr	r3, [r3, #12]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	d1e1      	bne.n	8021eea <_Balloc+0x32>
 8021f26:	2000      	movs	r0, #0
 8021f28:	bd70      	pop	{r4, r5, r6, pc}
 8021f2a:	6802      	ldr	r2, [r0, #0]
 8021f2c:	601a      	str	r2, [r3, #0]
 8021f2e:	2300      	movs	r3, #0
 8021f30:	6103      	str	r3, [r0, #16]
 8021f32:	60c3      	str	r3, [r0, #12]
 8021f34:	e7f8      	b.n	8021f28 <_Balloc+0x70>
 8021f36:	46c0      	nop			@ (mov r8, r8)
 8021f38:	08026542 	.word	0x08026542
 8021f3c:	08026622 	.word	0x08026622

08021f40 <_Bfree>:
 8021f40:	b570      	push	{r4, r5, r6, lr}
 8021f42:	69c6      	ldr	r6, [r0, #28]
 8021f44:	0005      	movs	r5, r0
 8021f46:	000c      	movs	r4, r1
 8021f48:	2e00      	cmp	r6, #0
 8021f4a:	d10e      	bne.n	8021f6a <_Bfree+0x2a>
 8021f4c:	2010      	movs	r0, #16
 8021f4e:	f7ff fee5 	bl	8021d1c <malloc>
 8021f52:	1e02      	subs	r2, r0, #0
 8021f54:	61e8      	str	r0, [r5, #28]
 8021f56:	d104      	bne.n	8021f62 <_Bfree+0x22>
 8021f58:	218f      	movs	r1, #143	@ 0x8f
 8021f5a:	4b09      	ldr	r3, [pc, #36]	@ (8021f80 <_Bfree+0x40>)
 8021f5c:	4809      	ldr	r0, [pc, #36]	@ (8021f84 <_Bfree+0x44>)
 8021f5e:	f001 f88b 	bl	8023078 <__assert_func>
 8021f62:	6046      	str	r6, [r0, #4]
 8021f64:	6086      	str	r6, [r0, #8]
 8021f66:	6006      	str	r6, [r0, #0]
 8021f68:	60c6      	str	r6, [r0, #12]
 8021f6a:	2c00      	cmp	r4, #0
 8021f6c:	d007      	beq.n	8021f7e <_Bfree+0x3e>
 8021f6e:	69eb      	ldr	r3, [r5, #28]
 8021f70:	6862      	ldr	r2, [r4, #4]
 8021f72:	68db      	ldr	r3, [r3, #12]
 8021f74:	0092      	lsls	r2, r2, #2
 8021f76:	189b      	adds	r3, r3, r2
 8021f78:	681a      	ldr	r2, [r3, #0]
 8021f7a:	6022      	str	r2, [r4, #0]
 8021f7c:	601c      	str	r4, [r3, #0]
 8021f7e:	bd70      	pop	{r4, r5, r6, pc}
 8021f80:	08026542 	.word	0x08026542
 8021f84:	08026622 	.word	0x08026622

08021f88 <__multadd>:
 8021f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021f8a:	000f      	movs	r7, r1
 8021f8c:	9001      	str	r0, [sp, #4]
 8021f8e:	000c      	movs	r4, r1
 8021f90:	001e      	movs	r6, r3
 8021f92:	2000      	movs	r0, #0
 8021f94:	690d      	ldr	r5, [r1, #16]
 8021f96:	3714      	adds	r7, #20
 8021f98:	683b      	ldr	r3, [r7, #0]
 8021f9a:	3001      	adds	r0, #1
 8021f9c:	b299      	uxth	r1, r3
 8021f9e:	4351      	muls	r1, r2
 8021fa0:	0c1b      	lsrs	r3, r3, #16
 8021fa2:	4353      	muls	r3, r2
 8021fa4:	1989      	adds	r1, r1, r6
 8021fa6:	0c0e      	lsrs	r6, r1, #16
 8021fa8:	199b      	adds	r3, r3, r6
 8021faa:	0c1e      	lsrs	r6, r3, #16
 8021fac:	b289      	uxth	r1, r1
 8021fae:	041b      	lsls	r3, r3, #16
 8021fb0:	185b      	adds	r3, r3, r1
 8021fb2:	c708      	stmia	r7!, {r3}
 8021fb4:	4285      	cmp	r5, r0
 8021fb6:	dcef      	bgt.n	8021f98 <__multadd+0x10>
 8021fb8:	2e00      	cmp	r6, #0
 8021fba:	d022      	beq.n	8022002 <__multadd+0x7a>
 8021fbc:	68a3      	ldr	r3, [r4, #8]
 8021fbe:	42ab      	cmp	r3, r5
 8021fc0:	dc19      	bgt.n	8021ff6 <__multadd+0x6e>
 8021fc2:	6861      	ldr	r1, [r4, #4]
 8021fc4:	9801      	ldr	r0, [sp, #4]
 8021fc6:	3101      	adds	r1, #1
 8021fc8:	f7ff ff76 	bl	8021eb8 <_Balloc>
 8021fcc:	1e07      	subs	r7, r0, #0
 8021fce:	d105      	bne.n	8021fdc <__multadd+0x54>
 8021fd0:	003a      	movs	r2, r7
 8021fd2:	21ba      	movs	r1, #186	@ 0xba
 8021fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8022008 <__multadd+0x80>)
 8021fd6:	480d      	ldr	r0, [pc, #52]	@ (802200c <__multadd+0x84>)
 8021fd8:	f001 f84e 	bl	8023078 <__assert_func>
 8021fdc:	0021      	movs	r1, r4
 8021fde:	6922      	ldr	r2, [r4, #16]
 8021fe0:	310c      	adds	r1, #12
 8021fe2:	3202      	adds	r2, #2
 8021fe4:	0092      	lsls	r2, r2, #2
 8021fe6:	300c      	adds	r0, #12
 8021fe8:	f7fe fc62 	bl	80208b0 <memcpy>
 8021fec:	0021      	movs	r1, r4
 8021fee:	9801      	ldr	r0, [sp, #4]
 8021ff0:	f7ff ffa6 	bl	8021f40 <_Bfree>
 8021ff4:	003c      	movs	r4, r7
 8021ff6:	1d2b      	adds	r3, r5, #4
 8021ff8:	009b      	lsls	r3, r3, #2
 8021ffa:	18e3      	adds	r3, r4, r3
 8021ffc:	3501      	adds	r5, #1
 8021ffe:	605e      	str	r6, [r3, #4]
 8022000:	6125      	str	r5, [r4, #16]
 8022002:	0020      	movs	r0, r4
 8022004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022006:	46c0      	nop			@ (mov r8, r8)
 8022008:	080265b1 	.word	0x080265b1
 802200c:	08026622 	.word	0x08026622

08022010 <__s2b>:
 8022010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022012:	0007      	movs	r7, r0
 8022014:	0018      	movs	r0, r3
 8022016:	000c      	movs	r4, r1
 8022018:	3008      	adds	r0, #8
 802201a:	2109      	movs	r1, #9
 802201c:	9301      	str	r3, [sp, #4]
 802201e:	0015      	movs	r5, r2
 8022020:	f7de f94a 	bl	80002b8 <__divsi3>
 8022024:	2301      	movs	r3, #1
 8022026:	2100      	movs	r1, #0
 8022028:	4283      	cmp	r3, r0
 802202a:	db0a      	blt.n	8022042 <__s2b+0x32>
 802202c:	0038      	movs	r0, r7
 802202e:	f7ff ff43 	bl	8021eb8 <_Balloc>
 8022032:	1e01      	subs	r1, r0, #0
 8022034:	d108      	bne.n	8022048 <__s2b+0x38>
 8022036:	000a      	movs	r2, r1
 8022038:	4b19      	ldr	r3, [pc, #100]	@ (80220a0 <__s2b+0x90>)
 802203a:	481a      	ldr	r0, [pc, #104]	@ (80220a4 <__s2b+0x94>)
 802203c:	31d3      	adds	r1, #211	@ 0xd3
 802203e:	f001 f81b 	bl	8023078 <__assert_func>
 8022042:	005b      	lsls	r3, r3, #1
 8022044:	3101      	adds	r1, #1
 8022046:	e7ef      	b.n	8022028 <__s2b+0x18>
 8022048:	9b08      	ldr	r3, [sp, #32]
 802204a:	6143      	str	r3, [r0, #20]
 802204c:	2301      	movs	r3, #1
 802204e:	6103      	str	r3, [r0, #16]
 8022050:	2d09      	cmp	r5, #9
 8022052:	dd18      	ble.n	8022086 <__s2b+0x76>
 8022054:	0023      	movs	r3, r4
 8022056:	3309      	adds	r3, #9
 8022058:	001e      	movs	r6, r3
 802205a:	9300      	str	r3, [sp, #0]
 802205c:	1964      	adds	r4, r4, r5
 802205e:	7833      	ldrb	r3, [r6, #0]
 8022060:	220a      	movs	r2, #10
 8022062:	0038      	movs	r0, r7
 8022064:	3b30      	subs	r3, #48	@ 0x30
 8022066:	f7ff ff8f 	bl	8021f88 <__multadd>
 802206a:	3601      	adds	r6, #1
 802206c:	0001      	movs	r1, r0
 802206e:	42a6      	cmp	r6, r4
 8022070:	d1f5      	bne.n	802205e <__s2b+0x4e>
 8022072:	002c      	movs	r4, r5
 8022074:	9b00      	ldr	r3, [sp, #0]
 8022076:	3c08      	subs	r4, #8
 8022078:	191c      	adds	r4, r3, r4
 802207a:	002e      	movs	r6, r5
 802207c:	9b01      	ldr	r3, [sp, #4]
 802207e:	429e      	cmp	r6, r3
 8022080:	db04      	blt.n	802208c <__s2b+0x7c>
 8022082:	0008      	movs	r0, r1
 8022084:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022086:	2509      	movs	r5, #9
 8022088:	340a      	adds	r4, #10
 802208a:	e7f6      	b.n	802207a <__s2b+0x6a>
 802208c:	1b63      	subs	r3, r4, r5
 802208e:	5d9b      	ldrb	r3, [r3, r6]
 8022090:	220a      	movs	r2, #10
 8022092:	0038      	movs	r0, r7
 8022094:	3b30      	subs	r3, #48	@ 0x30
 8022096:	f7ff ff77 	bl	8021f88 <__multadd>
 802209a:	3601      	adds	r6, #1
 802209c:	0001      	movs	r1, r0
 802209e:	e7ed      	b.n	802207c <__s2b+0x6c>
 80220a0:	080265b1 	.word	0x080265b1
 80220a4:	08026622 	.word	0x08026622

080220a8 <__hi0bits>:
 80220a8:	2280      	movs	r2, #128	@ 0x80
 80220aa:	0003      	movs	r3, r0
 80220ac:	0252      	lsls	r2, r2, #9
 80220ae:	2000      	movs	r0, #0
 80220b0:	4293      	cmp	r3, r2
 80220b2:	d201      	bcs.n	80220b8 <__hi0bits+0x10>
 80220b4:	041b      	lsls	r3, r3, #16
 80220b6:	3010      	adds	r0, #16
 80220b8:	2280      	movs	r2, #128	@ 0x80
 80220ba:	0452      	lsls	r2, r2, #17
 80220bc:	4293      	cmp	r3, r2
 80220be:	d201      	bcs.n	80220c4 <__hi0bits+0x1c>
 80220c0:	3008      	adds	r0, #8
 80220c2:	021b      	lsls	r3, r3, #8
 80220c4:	2280      	movs	r2, #128	@ 0x80
 80220c6:	0552      	lsls	r2, r2, #21
 80220c8:	4293      	cmp	r3, r2
 80220ca:	d201      	bcs.n	80220d0 <__hi0bits+0x28>
 80220cc:	3004      	adds	r0, #4
 80220ce:	011b      	lsls	r3, r3, #4
 80220d0:	2280      	movs	r2, #128	@ 0x80
 80220d2:	05d2      	lsls	r2, r2, #23
 80220d4:	4293      	cmp	r3, r2
 80220d6:	d201      	bcs.n	80220dc <__hi0bits+0x34>
 80220d8:	3002      	adds	r0, #2
 80220da:	009b      	lsls	r3, r3, #2
 80220dc:	2b00      	cmp	r3, #0
 80220de:	db03      	blt.n	80220e8 <__hi0bits+0x40>
 80220e0:	3001      	adds	r0, #1
 80220e2:	4213      	tst	r3, r2
 80220e4:	d100      	bne.n	80220e8 <__hi0bits+0x40>
 80220e6:	2020      	movs	r0, #32
 80220e8:	4770      	bx	lr

080220ea <__lo0bits>:
 80220ea:	6803      	ldr	r3, [r0, #0]
 80220ec:	0001      	movs	r1, r0
 80220ee:	2207      	movs	r2, #7
 80220f0:	0018      	movs	r0, r3
 80220f2:	4010      	ands	r0, r2
 80220f4:	4213      	tst	r3, r2
 80220f6:	d00d      	beq.n	8022114 <__lo0bits+0x2a>
 80220f8:	3a06      	subs	r2, #6
 80220fa:	2000      	movs	r0, #0
 80220fc:	4213      	tst	r3, r2
 80220fe:	d105      	bne.n	802210c <__lo0bits+0x22>
 8022100:	3002      	adds	r0, #2
 8022102:	4203      	tst	r3, r0
 8022104:	d003      	beq.n	802210e <__lo0bits+0x24>
 8022106:	40d3      	lsrs	r3, r2
 8022108:	0010      	movs	r0, r2
 802210a:	600b      	str	r3, [r1, #0]
 802210c:	4770      	bx	lr
 802210e:	089b      	lsrs	r3, r3, #2
 8022110:	600b      	str	r3, [r1, #0]
 8022112:	e7fb      	b.n	802210c <__lo0bits+0x22>
 8022114:	b29a      	uxth	r2, r3
 8022116:	2a00      	cmp	r2, #0
 8022118:	d101      	bne.n	802211e <__lo0bits+0x34>
 802211a:	2010      	movs	r0, #16
 802211c:	0c1b      	lsrs	r3, r3, #16
 802211e:	b2da      	uxtb	r2, r3
 8022120:	2a00      	cmp	r2, #0
 8022122:	d101      	bne.n	8022128 <__lo0bits+0x3e>
 8022124:	3008      	adds	r0, #8
 8022126:	0a1b      	lsrs	r3, r3, #8
 8022128:	071a      	lsls	r2, r3, #28
 802212a:	d101      	bne.n	8022130 <__lo0bits+0x46>
 802212c:	3004      	adds	r0, #4
 802212e:	091b      	lsrs	r3, r3, #4
 8022130:	079a      	lsls	r2, r3, #30
 8022132:	d101      	bne.n	8022138 <__lo0bits+0x4e>
 8022134:	3002      	adds	r0, #2
 8022136:	089b      	lsrs	r3, r3, #2
 8022138:	07da      	lsls	r2, r3, #31
 802213a:	d4e9      	bmi.n	8022110 <__lo0bits+0x26>
 802213c:	3001      	adds	r0, #1
 802213e:	085b      	lsrs	r3, r3, #1
 8022140:	d1e6      	bne.n	8022110 <__lo0bits+0x26>
 8022142:	2020      	movs	r0, #32
 8022144:	e7e2      	b.n	802210c <__lo0bits+0x22>
	...

08022148 <__i2b>:
 8022148:	b510      	push	{r4, lr}
 802214a:	000c      	movs	r4, r1
 802214c:	2101      	movs	r1, #1
 802214e:	f7ff feb3 	bl	8021eb8 <_Balloc>
 8022152:	2800      	cmp	r0, #0
 8022154:	d107      	bne.n	8022166 <__i2b+0x1e>
 8022156:	2146      	movs	r1, #70	@ 0x46
 8022158:	4c05      	ldr	r4, [pc, #20]	@ (8022170 <__i2b+0x28>)
 802215a:	0002      	movs	r2, r0
 802215c:	4b05      	ldr	r3, [pc, #20]	@ (8022174 <__i2b+0x2c>)
 802215e:	0020      	movs	r0, r4
 8022160:	31ff      	adds	r1, #255	@ 0xff
 8022162:	f000 ff89 	bl	8023078 <__assert_func>
 8022166:	2301      	movs	r3, #1
 8022168:	6144      	str	r4, [r0, #20]
 802216a:	6103      	str	r3, [r0, #16]
 802216c:	bd10      	pop	{r4, pc}
 802216e:	46c0      	nop			@ (mov r8, r8)
 8022170:	08026622 	.word	0x08026622
 8022174:	080265b1 	.word	0x080265b1

08022178 <__multiply>:
 8022178:	b5f0      	push	{r4, r5, r6, r7, lr}
 802217a:	0014      	movs	r4, r2
 802217c:	690a      	ldr	r2, [r1, #16]
 802217e:	6923      	ldr	r3, [r4, #16]
 8022180:	000d      	movs	r5, r1
 8022182:	b08b      	sub	sp, #44	@ 0x2c
 8022184:	429a      	cmp	r2, r3
 8022186:	db02      	blt.n	802218e <__multiply+0x16>
 8022188:	0023      	movs	r3, r4
 802218a:	000c      	movs	r4, r1
 802218c:	001d      	movs	r5, r3
 802218e:	6927      	ldr	r7, [r4, #16]
 8022190:	692e      	ldr	r6, [r5, #16]
 8022192:	6861      	ldr	r1, [r4, #4]
 8022194:	19bb      	adds	r3, r7, r6
 8022196:	9303      	str	r3, [sp, #12]
 8022198:	68a3      	ldr	r3, [r4, #8]
 802219a:	19ba      	adds	r2, r7, r6
 802219c:	4293      	cmp	r3, r2
 802219e:	da00      	bge.n	80221a2 <__multiply+0x2a>
 80221a0:	3101      	adds	r1, #1
 80221a2:	f7ff fe89 	bl	8021eb8 <_Balloc>
 80221a6:	9002      	str	r0, [sp, #8]
 80221a8:	2800      	cmp	r0, #0
 80221aa:	d106      	bne.n	80221ba <__multiply+0x42>
 80221ac:	21b1      	movs	r1, #177	@ 0xb1
 80221ae:	4b49      	ldr	r3, [pc, #292]	@ (80222d4 <__multiply+0x15c>)
 80221b0:	4849      	ldr	r0, [pc, #292]	@ (80222d8 <__multiply+0x160>)
 80221b2:	9a02      	ldr	r2, [sp, #8]
 80221b4:	0049      	lsls	r1, r1, #1
 80221b6:	f000 ff5f 	bl	8023078 <__assert_func>
 80221ba:	9b02      	ldr	r3, [sp, #8]
 80221bc:	2200      	movs	r2, #0
 80221be:	3314      	adds	r3, #20
 80221c0:	469c      	mov	ip, r3
 80221c2:	19bb      	adds	r3, r7, r6
 80221c4:	009b      	lsls	r3, r3, #2
 80221c6:	4463      	add	r3, ip
 80221c8:	9304      	str	r3, [sp, #16]
 80221ca:	4663      	mov	r3, ip
 80221cc:	9904      	ldr	r1, [sp, #16]
 80221ce:	428b      	cmp	r3, r1
 80221d0:	d32a      	bcc.n	8022228 <__multiply+0xb0>
 80221d2:	0023      	movs	r3, r4
 80221d4:	00bf      	lsls	r7, r7, #2
 80221d6:	3314      	adds	r3, #20
 80221d8:	3514      	adds	r5, #20
 80221da:	9308      	str	r3, [sp, #32]
 80221dc:	00b6      	lsls	r6, r6, #2
 80221de:	19db      	adds	r3, r3, r7
 80221e0:	9305      	str	r3, [sp, #20]
 80221e2:	19ab      	adds	r3, r5, r6
 80221e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80221e6:	2304      	movs	r3, #4
 80221e8:	9306      	str	r3, [sp, #24]
 80221ea:	0023      	movs	r3, r4
 80221ec:	9a05      	ldr	r2, [sp, #20]
 80221ee:	3315      	adds	r3, #21
 80221f0:	9501      	str	r5, [sp, #4]
 80221f2:	429a      	cmp	r2, r3
 80221f4:	d305      	bcc.n	8022202 <__multiply+0x8a>
 80221f6:	1b13      	subs	r3, r2, r4
 80221f8:	3b15      	subs	r3, #21
 80221fa:	089b      	lsrs	r3, r3, #2
 80221fc:	3301      	adds	r3, #1
 80221fe:	009b      	lsls	r3, r3, #2
 8022200:	9306      	str	r3, [sp, #24]
 8022202:	9b01      	ldr	r3, [sp, #4]
 8022204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022206:	4293      	cmp	r3, r2
 8022208:	d310      	bcc.n	802222c <__multiply+0xb4>
 802220a:	9b03      	ldr	r3, [sp, #12]
 802220c:	2b00      	cmp	r3, #0
 802220e:	dd05      	ble.n	802221c <__multiply+0xa4>
 8022210:	9b04      	ldr	r3, [sp, #16]
 8022212:	3b04      	subs	r3, #4
 8022214:	9304      	str	r3, [sp, #16]
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	2b00      	cmp	r3, #0
 802221a:	d056      	beq.n	80222ca <__multiply+0x152>
 802221c:	9b02      	ldr	r3, [sp, #8]
 802221e:	9a03      	ldr	r2, [sp, #12]
 8022220:	0018      	movs	r0, r3
 8022222:	611a      	str	r2, [r3, #16]
 8022224:	b00b      	add	sp, #44	@ 0x2c
 8022226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022228:	c304      	stmia	r3!, {r2}
 802222a:	e7cf      	b.n	80221cc <__multiply+0x54>
 802222c:	9b01      	ldr	r3, [sp, #4]
 802222e:	6818      	ldr	r0, [r3, #0]
 8022230:	b280      	uxth	r0, r0
 8022232:	2800      	cmp	r0, #0
 8022234:	d01e      	beq.n	8022274 <__multiply+0xfc>
 8022236:	4667      	mov	r7, ip
 8022238:	2500      	movs	r5, #0
 802223a:	9e08      	ldr	r6, [sp, #32]
 802223c:	ce02      	ldmia	r6!, {r1}
 802223e:	683b      	ldr	r3, [r7, #0]
 8022240:	9307      	str	r3, [sp, #28]
 8022242:	b28b      	uxth	r3, r1
 8022244:	4343      	muls	r3, r0
 8022246:	001a      	movs	r2, r3
 8022248:	466b      	mov	r3, sp
 802224a:	0c09      	lsrs	r1, r1, #16
 802224c:	8b9b      	ldrh	r3, [r3, #28]
 802224e:	4341      	muls	r1, r0
 8022250:	18d3      	adds	r3, r2, r3
 8022252:	9a07      	ldr	r2, [sp, #28]
 8022254:	195b      	adds	r3, r3, r5
 8022256:	0c12      	lsrs	r2, r2, #16
 8022258:	1889      	adds	r1, r1, r2
 802225a:	0c1a      	lsrs	r2, r3, #16
 802225c:	188a      	adds	r2, r1, r2
 802225e:	b29b      	uxth	r3, r3
 8022260:	0c15      	lsrs	r5, r2, #16
 8022262:	0412      	lsls	r2, r2, #16
 8022264:	431a      	orrs	r2, r3
 8022266:	9b05      	ldr	r3, [sp, #20]
 8022268:	c704      	stmia	r7!, {r2}
 802226a:	42b3      	cmp	r3, r6
 802226c:	d8e6      	bhi.n	802223c <__multiply+0xc4>
 802226e:	4663      	mov	r3, ip
 8022270:	9a06      	ldr	r2, [sp, #24]
 8022272:	509d      	str	r5, [r3, r2]
 8022274:	9b01      	ldr	r3, [sp, #4]
 8022276:	6818      	ldr	r0, [r3, #0]
 8022278:	0c00      	lsrs	r0, r0, #16
 802227a:	d020      	beq.n	80222be <__multiply+0x146>
 802227c:	4663      	mov	r3, ip
 802227e:	0025      	movs	r5, r4
 8022280:	4661      	mov	r1, ip
 8022282:	2700      	movs	r7, #0
 8022284:	681b      	ldr	r3, [r3, #0]
 8022286:	3514      	adds	r5, #20
 8022288:	682a      	ldr	r2, [r5, #0]
 802228a:	680e      	ldr	r6, [r1, #0]
 802228c:	b292      	uxth	r2, r2
 802228e:	4342      	muls	r2, r0
 8022290:	0c36      	lsrs	r6, r6, #16
 8022292:	1992      	adds	r2, r2, r6
 8022294:	19d2      	adds	r2, r2, r7
 8022296:	0416      	lsls	r6, r2, #16
 8022298:	b29b      	uxth	r3, r3
 802229a:	431e      	orrs	r6, r3
 802229c:	600e      	str	r6, [r1, #0]
 802229e:	cd40      	ldmia	r5!, {r6}
 80222a0:	684b      	ldr	r3, [r1, #4]
 80222a2:	0c36      	lsrs	r6, r6, #16
 80222a4:	4346      	muls	r6, r0
 80222a6:	b29b      	uxth	r3, r3
 80222a8:	0c12      	lsrs	r2, r2, #16
 80222aa:	18f3      	adds	r3, r6, r3
 80222ac:	189b      	adds	r3, r3, r2
 80222ae:	9a05      	ldr	r2, [sp, #20]
 80222b0:	0c1f      	lsrs	r7, r3, #16
 80222b2:	3104      	adds	r1, #4
 80222b4:	42aa      	cmp	r2, r5
 80222b6:	d8e7      	bhi.n	8022288 <__multiply+0x110>
 80222b8:	4662      	mov	r2, ip
 80222ba:	9906      	ldr	r1, [sp, #24]
 80222bc:	5053      	str	r3, [r2, r1]
 80222be:	9b01      	ldr	r3, [sp, #4]
 80222c0:	3304      	adds	r3, #4
 80222c2:	9301      	str	r3, [sp, #4]
 80222c4:	2304      	movs	r3, #4
 80222c6:	449c      	add	ip, r3
 80222c8:	e79b      	b.n	8022202 <__multiply+0x8a>
 80222ca:	9b03      	ldr	r3, [sp, #12]
 80222cc:	3b01      	subs	r3, #1
 80222ce:	9303      	str	r3, [sp, #12]
 80222d0:	e79b      	b.n	802220a <__multiply+0x92>
 80222d2:	46c0      	nop			@ (mov r8, r8)
 80222d4:	080265b1 	.word	0x080265b1
 80222d8:	08026622 	.word	0x08026622

080222dc <__pow5mult>:
 80222dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80222de:	2303      	movs	r3, #3
 80222e0:	0015      	movs	r5, r2
 80222e2:	0007      	movs	r7, r0
 80222e4:	000e      	movs	r6, r1
 80222e6:	401a      	ands	r2, r3
 80222e8:	421d      	tst	r5, r3
 80222ea:	d008      	beq.n	80222fe <__pow5mult+0x22>
 80222ec:	4925      	ldr	r1, [pc, #148]	@ (8022384 <__pow5mult+0xa8>)
 80222ee:	3a01      	subs	r2, #1
 80222f0:	0092      	lsls	r2, r2, #2
 80222f2:	5852      	ldr	r2, [r2, r1]
 80222f4:	2300      	movs	r3, #0
 80222f6:	0031      	movs	r1, r6
 80222f8:	f7ff fe46 	bl	8021f88 <__multadd>
 80222fc:	0006      	movs	r6, r0
 80222fe:	10ad      	asrs	r5, r5, #2
 8022300:	d03d      	beq.n	802237e <__pow5mult+0xa2>
 8022302:	69fc      	ldr	r4, [r7, #28]
 8022304:	2c00      	cmp	r4, #0
 8022306:	d10f      	bne.n	8022328 <__pow5mult+0x4c>
 8022308:	2010      	movs	r0, #16
 802230a:	f7ff fd07 	bl	8021d1c <malloc>
 802230e:	1e02      	subs	r2, r0, #0
 8022310:	61f8      	str	r0, [r7, #28]
 8022312:	d105      	bne.n	8022320 <__pow5mult+0x44>
 8022314:	21b4      	movs	r1, #180	@ 0xb4
 8022316:	4b1c      	ldr	r3, [pc, #112]	@ (8022388 <__pow5mult+0xac>)
 8022318:	481c      	ldr	r0, [pc, #112]	@ (802238c <__pow5mult+0xb0>)
 802231a:	31ff      	adds	r1, #255	@ 0xff
 802231c:	f000 feac 	bl	8023078 <__assert_func>
 8022320:	6044      	str	r4, [r0, #4]
 8022322:	6084      	str	r4, [r0, #8]
 8022324:	6004      	str	r4, [r0, #0]
 8022326:	60c4      	str	r4, [r0, #12]
 8022328:	69fb      	ldr	r3, [r7, #28]
 802232a:	689c      	ldr	r4, [r3, #8]
 802232c:	9301      	str	r3, [sp, #4]
 802232e:	2c00      	cmp	r4, #0
 8022330:	d108      	bne.n	8022344 <__pow5mult+0x68>
 8022332:	0038      	movs	r0, r7
 8022334:	4916      	ldr	r1, [pc, #88]	@ (8022390 <__pow5mult+0xb4>)
 8022336:	f7ff ff07 	bl	8022148 <__i2b>
 802233a:	9b01      	ldr	r3, [sp, #4]
 802233c:	0004      	movs	r4, r0
 802233e:	6098      	str	r0, [r3, #8]
 8022340:	2300      	movs	r3, #0
 8022342:	6003      	str	r3, [r0, #0]
 8022344:	2301      	movs	r3, #1
 8022346:	421d      	tst	r5, r3
 8022348:	d00a      	beq.n	8022360 <__pow5mult+0x84>
 802234a:	0031      	movs	r1, r6
 802234c:	0022      	movs	r2, r4
 802234e:	0038      	movs	r0, r7
 8022350:	f7ff ff12 	bl	8022178 <__multiply>
 8022354:	0031      	movs	r1, r6
 8022356:	9001      	str	r0, [sp, #4]
 8022358:	0038      	movs	r0, r7
 802235a:	f7ff fdf1 	bl	8021f40 <_Bfree>
 802235e:	9e01      	ldr	r6, [sp, #4]
 8022360:	106d      	asrs	r5, r5, #1
 8022362:	d00c      	beq.n	802237e <__pow5mult+0xa2>
 8022364:	6820      	ldr	r0, [r4, #0]
 8022366:	2800      	cmp	r0, #0
 8022368:	d107      	bne.n	802237a <__pow5mult+0x9e>
 802236a:	0022      	movs	r2, r4
 802236c:	0021      	movs	r1, r4
 802236e:	0038      	movs	r0, r7
 8022370:	f7ff ff02 	bl	8022178 <__multiply>
 8022374:	2300      	movs	r3, #0
 8022376:	6020      	str	r0, [r4, #0]
 8022378:	6003      	str	r3, [r0, #0]
 802237a:	0004      	movs	r4, r0
 802237c:	e7e2      	b.n	8022344 <__pow5mult+0x68>
 802237e:	0030      	movs	r0, r6
 8022380:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022382:	46c0      	nop			@ (mov r8, r8)
 8022384:	0802667c 	.word	0x0802667c
 8022388:	08026542 	.word	0x08026542
 802238c:	08026622 	.word	0x08026622
 8022390:	00000271 	.word	0x00000271

08022394 <__lshift>:
 8022394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022396:	000c      	movs	r4, r1
 8022398:	0016      	movs	r6, r2
 802239a:	6923      	ldr	r3, [r4, #16]
 802239c:	1157      	asrs	r7, r2, #5
 802239e:	b085      	sub	sp, #20
 80223a0:	18fb      	adds	r3, r7, r3
 80223a2:	9301      	str	r3, [sp, #4]
 80223a4:	3301      	adds	r3, #1
 80223a6:	9300      	str	r3, [sp, #0]
 80223a8:	6849      	ldr	r1, [r1, #4]
 80223aa:	68a3      	ldr	r3, [r4, #8]
 80223ac:	9002      	str	r0, [sp, #8]
 80223ae:	9a00      	ldr	r2, [sp, #0]
 80223b0:	4293      	cmp	r3, r2
 80223b2:	db10      	blt.n	80223d6 <__lshift+0x42>
 80223b4:	9802      	ldr	r0, [sp, #8]
 80223b6:	f7ff fd7f 	bl	8021eb8 <_Balloc>
 80223ba:	2300      	movs	r3, #0
 80223bc:	0001      	movs	r1, r0
 80223be:	0005      	movs	r5, r0
 80223c0:	001a      	movs	r2, r3
 80223c2:	3114      	adds	r1, #20
 80223c4:	4298      	cmp	r0, r3
 80223c6:	d10c      	bne.n	80223e2 <__lshift+0x4e>
 80223c8:	21ef      	movs	r1, #239	@ 0xef
 80223ca:	002a      	movs	r2, r5
 80223cc:	4b25      	ldr	r3, [pc, #148]	@ (8022464 <__lshift+0xd0>)
 80223ce:	4826      	ldr	r0, [pc, #152]	@ (8022468 <__lshift+0xd4>)
 80223d0:	0049      	lsls	r1, r1, #1
 80223d2:	f000 fe51 	bl	8023078 <__assert_func>
 80223d6:	3101      	adds	r1, #1
 80223d8:	005b      	lsls	r3, r3, #1
 80223da:	e7e8      	b.n	80223ae <__lshift+0x1a>
 80223dc:	0098      	lsls	r0, r3, #2
 80223de:	500a      	str	r2, [r1, r0]
 80223e0:	3301      	adds	r3, #1
 80223e2:	42bb      	cmp	r3, r7
 80223e4:	dbfa      	blt.n	80223dc <__lshift+0x48>
 80223e6:	43fb      	mvns	r3, r7
 80223e8:	17db      	asrs	r3, r3, #31
 80223ea:	401f      	ands	r7, r3
 80223ec:	00bf      	lsls	r7, r7, #2
 80223ee:	0023      	movs	r3, r4
 80223f0:	201f      	movs	r0, #31
 80223f2:	19c9      	adds	r1, r1, r7
 80223f4:	0037      	movs	r7, r6
 80223f6:	6922      	ldr	r2, [r4, #16]
 80223f8:	3314      	adds	r3, #20
 80223fa:	0092      	lsls	r2, r2, #2
 80223fc:	189a      	adds	r2, r3, r2
 80223fe:	4007      	ands	r7, r0
 8022400:	4206      	tst	r6, r0
 8022402:	d029      	beq.n	8022458 <__lshift+0xc4>
 8022404:	3001      	adds	r0, #1
 8022406:	1bc0      	subs	r0, r0, r7
 8022408:	9003      	str	r0, [sp, #12]
 802240a:	468c      	mov	ip, r1
 802240c:	2000      	movs	r0, #0
 802240e:	681e      	ldr	r6, [r3, #0]
 8022410:	40be      	lsls	r6, r7
 8022412:	4306      	orrs	r6, r0
 8022414:	4660      	mov	r0, ip
 8022416:	c040      	stmia	r0!, {r6}
 8022418:	4684      	mov	ip, r0
 802241a:	9e03      	ldr	r6, [sp, #12]
 802241c:	cb01      	ldmia	r3!, {r0}
 802241e:	40f0      	lsrs	r0, r6
 8022420:	429a      	cmp	r2, r3
 8022422:	d8f4      	bhi.n	802240e <__lshift+0x7a>
 8022424:	0026      	movs	r6, r4
 8022426:	3615      	adds	r6, #21
 8022428:	2304      	movs	r3, #4
 802242a:	42b2      	cmp	r2, r6
 802242c:	d304      	bcc.n	8022438 <__lshift+0xa4>
 802242e:	1b13      	subs	r3, r2, r4
 8022430:	3b15      	subs	r3, #21
 8022432:	089b      	lsrs	r3, r3, #2
 8022434:	3301      	adds	r3, #1
 8022436:	009b      	lsls	r3, r3, #2
 8022438:	50c8      	str	r0, [r1, r3]
 802243a:	2800      	cmp	r0, #0
 802243c:	d002      	beq.n	8022444 <__lshift+0xb0>
 802243e:	9b01      	ldr	r3, [sp, #4]
 8022440:	3302      	adds	r3, #2
 8022442:	9300      	str	r3, [sp, #0]
 8022444:	9b00      	ldr	r3, [sp, #0]
 8022446:	9802      	ldr	r0, [sp, #8]
 8022448:	3b01      	subs	r3, #1
 802244a:	0021      	movs	r1, r4
 802244c:	612b      	str	r3, [r5, #16]
 802244e:	f7ff fd77 	bl	8021f40 <_Bfree>
 8022452:	0028      	movs	r0, r5
 8022454:	b005      	add	sp, #20
 8022456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022458:	cb01      	ldmia	r3!, {r0}
 802245a:	c101      	stmia	r1!, {r0}
 802245c:	429a      	cmp	r2, r3
 802245e:	d8fb      	bhi.n	8022458 <__lshift+0xc4>
 8022460:	e7f0      	b.n	8022444 <__lshift+0xb0>
 8022462:	46c0      	nop			@ (mov r8, r8)
 8022464:	080265b1 	.word	0x080265b1
 8022468:	08026622 	.word	0x08026622

0802246c <__mcmp>:
 802246c:	b530      	push	{r4, r5, lr}
 802246e:	690b      	ldr	r3, [r1, #16]
 8022470:	6904      	ldr	r4, [r0, #16]
 8022472:	0002      	movs	r2, r0
 8022474:	1ae0      	subs	r0, r4, r3
 8022476:	429c      	cmp	r4, r3
 8022478:	d10f      	bne.n	802249a <__mcmp+0x2e>
 802247a:	3214      	adds	r2, #20
 802247c:	009b      	lsls	r3, r3, #2
 802247e:	3114      	adds	r1, #20
 8022480:	0014      	movs	r4, r2
 8022482:	18c9      	adds	r1, r1, r3
 8022484:	18d2      	adds	r2, r2, r3
 8022486:	3a04      	subs	r2, #4
 8022488:	3904      	subs	r1, #4
 802248a:	6815      	ldr	r5, [r2, #0]
 802248c:	680b      	ldr	r3, [r1, #0]
 802248e:	429d      	cmp	r5, r3
 8022490:	d004      	beq.n	802249c <__mcmp+0x30>
 8022492:	2001      	movs	r0, #1
 8022494:	429d      	cmp	r5, r3
 8022496:	d200      	bcs.n	802249a <__mcmp+0x2e>
 8022498:	3802      	subs	r0, #2
 802249a:	bd30      	pop	{r4, r5, pc}
 802249c:	4294      	cmp	r4, r2
 802249e:	d3f2      	bcc.n	8022486 <__mcmp+0x1a>
 80224a0:	e7fb      	b.n	802249a <__mcmp+0x2e>
	...

080224a4 <__mdiff>:
 80224a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224a6:	000c      	movs	r4, r1
 80224a8:	b087      	sub	sp, #28
 80224aa:	9000      	str	r0, [sp, #0]
 80224ac:	0011      	movs	r1, r2
 80224ae:	0020      	movs	r0, r4
 80224b0:	0017      	movs	r7, r2
 80224b2:	f7ff ffdb 	bl	802246c <__mcmp>
 80224b6:	1e05      	subs	r5, r0, #0
 80224b8:	d110      	bne.n	80224dc <__mdiff+0x38>
 80224ba:	0001      	movs	r1, r0
 80224bc:	9800      	ldr	r0, [sp, #0]
 80224be:	f7ff fcfb 	bl	8021eb8 <_Balloc>
 80224c2:	1e02      	subs	r2, r0, #0
 80224c4:	d104      	bne.n	80224d0 <__mdiff+0x2c>
 80224c6:	4b40      	ldr	r3, [pc, #256]	@ (80225c8 <__mdiff+0x124>)
 80224c8:	4840      	ldr	r0, [pc, #256]	@ (80225cc <__mdiff+0x128>)
 80224ca:	4941      	ldr	r1, [pc, #260]	@ (80225d0 <__mdiff+0x12c>)
 80224cc:	f000 fdd4 	bl	8023078 <__assert_func>
 80224d0:	2301      	movs	r3, #1
 80224d2:	6145      	str	r5, [r0, #20]
 80224d4:	6103      	str	r3, [r0, #16]
 80224d6:	0010      	movs	r0, r2
 80224d8:	b007      	add	sp, #28
 80224da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80224dc:	2600      	movs	r6, #0
 80224de:	42b0      	cmp	r0, r6
 80224e0:	da03      	bge.n	80224ea <__mdiff+0x46>
 80224e2:	0023      	movs	r3, r4
 80224e4:	003c      	movs	r4, r7
 80224e6:	001f      	movs	r7, r3
 80224e8:	3601      	adds	r6, #1
 80224ea:	6861      	ldr	r1, [r4, #4]
 80224ec:	9800      	ldr	r0, [sp, #0]
 80224ee:	f7ff fce3 	bl	8021eb8 <_Balloc>
 80224f2:	1e02      	subs	r2, r0, #0
 80224f4:	d103      	bne.n	80224fe <__mdiff+0x5a>
 80224f6:	4b34      	ldr	r3, [pc, #208]	@ (80225c8 <__mdiff+0x124>)
 80224f8:	4834      	ldr	r0, [pc, #208]	@ (80225cc <__mdiff+0x128>)
 80224fa:	4936      	ldr	r1, [pc, #216]	@ (80225d4 <__mdiff+0x130>)
 80224fc:	e7e6      	b.n	80224cc <__mdiff+0x28>
 80224fe:	6923      	ldr	r3, [r4, #16]
 8022500:	3414      	adds	r4, #20
 8022502:	9300      	str	r3, [sp, #0]
 8022504:	009b      	lsls	r3, r3, #2
 8022506:	18e3      	adds	r3, r4, r3
 8022508:	0021      	movs	r1, r4
 802250a:	9401      	str	r4, [sp, #4]
 802250c:	003c      	movs	r4, r7
 802250e:	9302      	str	r3, [sp, #8]
 8022510:	693b      	ldr	r3, [r7, #16]
 8022512:	3414      	adds	r4, #20
 8022514:	009b      	lsls	r3, r3, #2
 8022516:	18e3      	adds	r3, r4, r3
 8022518:	9303      	str	r3, [sp, #12]
 802251a:	0003      	movs	r3, r0
 802251c:	60c6      	str	r6, [r0, #12]
 802251e:	468c      	mov	ip, r1
 8022520:	2000      	movs	r0, #0
 8022522:	3314      	adds	r3, #20
 8022524:	9304      	str	r3, [sp, #16]
 8022526:	9305      	str	r3, [sp, #20]
 8022528:	4663      	mov	r3, ip
 802252a:	cb20      	ldmia	r3!, {r5}
 802252c:	b2a9      	uxth	r1, r5
 802252e:	000e      	movs	r6, r1
 8022530:	469c      	mov	ip, r3
 8022532:	cc08      	ldmia	r4!, {r3}
 8022534:	0c2d      	lsrs	r5, r5, #16
 8022536:	b299      	uxth	r1, r3
 8022538:	1a71      	subs	r1, r6, r1
 802253a:	1809      	adds	r1, r1, r0
 802253c:	0c1b      	lsrs	r3, r3, #16
 802253e:	1408      	asrs	r0, r1, #16
 8022540:	1aeb      	subs	r3, r5, r3
 8022542:	181b      	adds	r3, r3, r0
 8022544:	1418      	asrs	r0, r3, #16
 8022546:	b289      	uxth	r1, r1
 8022548:	041b      	lsls	r3, r3, #16
 802254a:	4319      	orrs	r1, r3
 802254c:	9b05      	ldr	r3, [sp, #20]
 802254e:	c302      	stmia	r3!, {r1}
 8022550:	9305      	str	r3, [sp, #20]
 8022552:	9b03      	ldr	r3, [sp, #12]
 8022554:	42a3      	cmp	r3, r4
 8022556:	d8e7      	bhi.n	8022528 <__mdiff+0x84>
 8022558:	0039      	movs	r1, r7
 802255a:	9c03      	ldr	r4, [sp, #12]
 802255c:	3115      	adds	r1, #21
 802255e:	2304      	movs	r3, #4
 8022560:	428c      	cmp	r4, r1
 8022562:	d304      	bcc.n	802256e <__mdiff+0xca>
 8022564:	1be3      	subs	r3, r4, r7
 8022566:	3b15      	subs	r3, #21
 8022568:	089b      	lsrs	r3, r3, #2
 802256a:	3301      	adds	r3, #1
 802256c:	009b      	lsls	r3, r3, #2
 802256e:	9901      	ldr	r1, [sp, #4]
 8022570:	18cd      	adds	r5, r1, r3
 8022572:	9904      	ldr	r1, [sp, #16]
 8022574:	002e      	movs	r6, r5
 8022576:	18cb      	adds	r3, r1, r3
 8022578:	001f      	movs	r7, r3
 802257a:	9902      	ldr	r1, [sp, #8]
 802257c:	428e      	cmp	r6, r1
 802257e:	d311      	bcc.n	80225a4 <__mdiff+0x100>
 8022580:	9c02      	ldr	r4, [sp, #8]
 8022582:	1ee9      	subs	r1, r5, #3
 8022584:	2000      	movs	r0, #0
 8022586:	428c      	cmp	r4, r1
 8022588:	d304      	bcc.n	8022594 <__mdiff+0xf0>
 802258a:	0021      	movs	r1, r4
 802258c:	3103      	adds	r1, #3
 802258e:	1b49      	subs	r1, r1, r5
 8022590:	0889      	lsrs	r1, r1, #2
 8022592:	0088      	lsls	r0, r1, #2
 8022594:	181b      	adds	r3, r3, r0
 8022596:	3b04      	subs	r3, #4
 8022598:	6819      	ldr	r1, [r3, #0]
 802259a:	2900      	cmp	r1, #0
 802259c:	d010      	beq.n	80225c0 <__mdiff+0x11c>
 802259e:	9b00      	ldr	r3, [sp, #0]
 80225a0:	6113      	str	r3, [r2, #16]
 80225a2:	e798      	b.n	80224d6 <__mdiff+0x32>
 80225a4:	4684      	mov	ip, r0
 80225a6:	ce02      	ldmia	r6!, {r1}
 80225a8:	b288      	uxth	r0, r1
 80225aa:	4460      	add	r0, ip
 80225ac:	1400      	asrs	r0, r0, #16
 80225ae:	0c0c      	lsrs	r4, r1, #16
 80225b0:	1904      	adds	r4, r0, r4
 80225b2:	4461      	add	r1, ip
 80225b4:	1420      	asrs	r0, r4, #16
 80225b6:	b289      	uxth	r1, r1
 80225b8:	0424      	lsls	r4, r4, #16
 80225ba:	4321      	orrs	r1, r4
 80225bc:	c702      	stmia	r7!, {r1}
 80225be:	e7dc      	b.n	802257a <__mdiff+0xd6>
 80225c0:	9900      	ldr	r1, [sp, #0]
 80225c2:	3901      	subs	r1, #1
 80225c4:	9100      	str	r1, [sp, #0]
 80225c6:	e7e6      	b.n	8022596 <__mdiff+0xf2>
 80225c8:	080265b1 	.word	0x080265b1
 80225cc:	08026622 	.word	0x08026622
 80225d0:	00000237 	.word	0x00000237
 80225d4:	00000245 	.word	0x00000245

080225d8 <__ulp>:
 80225d8:	b510      	push	{r4, lr}
 80225da:	2400      	movs	r4, #0
 80225dc:	4b0c      	ldr	r3, [pc, #48]	@ (8022610 <__ulp+0x38>)
 80225de:	4a0d      	ldr	r2, [pc, #52]	@ (8022614 <__ulp+0x3c>)
 80225e0:	400b      	ands	r3, r1
 80225e2:	189b      	adds	r3, r3, r2
 80225e4:	42a3      	cmp	r3, r4
 80225e6:	dc06      	bgt.n	80225f6 <__ulp+0x1e>
 80225e8:	425b      	negs	r3, r3
 80225ea:	151a      	asrs	r2, r3, #20
 80225ec:	2a13      	cmp	r2, #19
 80225ee:	dc05      	bgt.n	80225fc <__ulp+0x24>
 80225f0:	2380      	movs	r3, #128	@ 0x80
 80225f2:	031b      	lsls	r3, r3, #12
 80225f4:	4113      	asrs	r3, r2
 80225f6:	0019      	movs	r1, r3
 80225f8:	0020      	movs	r0, r4
 80225fa:	bd10      	pop	{r4, pc}
 80225fc:	3a14      	subs	r2, #20
 80225fe:	2401      	movs	r4, #1
 8022600:	2a1e      	cmp	r2, #30
 8022602:	dc02      	bgt.n	802260a <__ulp+0x32>
 8022604:	2480      	movs	r4, #128	@ 0x80
 8022606:	0624      	lsls	r4, r4, #24
 8022608:	40d4      	lsrs	r4, r2
 802260a:	2300      	movs	r3, #0
 802260c:	e7f3      	b.n	80225f6 <__ulp+0x1e>
 802260e:	46c0      	nop			@ (mov r8, r8)
 8022610:	7ff00000 	.word	0x7ff00000
 8022614:	fcc00000 	.word	0xfcc00000

08022618 <__b2d>:
 8022618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802261a:	0006      	movs	r6, r0
 802261c:	6903      	ldr	r3, [r0, #16]
 802261e:	3614      	adds	r6, #20
 8022620:	009b      	lsls	r3, r3, #2
 8022622:	18f3      	adds	r3, r6, r3
 8022624:	1f1d      	subs	r5, r3, #4
 8022626:	682c      	ldr	r4, [r5, #0]
 8022628:	000f      	movs	r7, r1
 802262a:	0020      	movs	r0, r4
 802262c:	9301      	str	r3, [sp, #4]
 802262e:	f7ff fd3b 	bl	80220a8 <__hi0bits>
 8022632:	2220      	movs	r2, #32
 8022634:	1a12      	subs	r2, r2, r0
 8022636:	603a      	str	r2, [r7, #0]
 8022638:	0003      	movs	r3, r0
 802263a:	4a1c      	ldr	r2, [pc, #112]	@ (80226ac <__b2d+0x94>)
 802263c:	280a      	cmp	r0, #10
 802263e:	dc15      	bgt.n	802266c <__b2d+0x54>
 8022640:	210b      	movs	r1, #11
 8022642:	0027      	movs	r7, r4
 8022644:	1a09      	subs	r1, r1, r0
 8022646:	40cf      	lsrs	r7, r1
 8022648:	433a      	orrs	r2, r7
 802264a:	468c      	mov	ip, r1
 802264c:	0011      	movs	r1, r2
 802264e:	2200      	movs	r2, #0
 8022650:	42ae      	cmp	r6, r5
 8022652:	d202      	bcs.n	802265a <__b2d+0x42>
 8022654:	9a01      	ldr	r2, [sp, #4]
 8022656:	3a08      	subs	r2, #8
 8022658:	6812      	ldr	r2, [r2, #0]
 802265a:	3315      	adds	r3, #21
 802265c:	409c      	lsls	r4, r3
 802265e:	4663      	mov	r3, ip
 8022660:	0027      	movs	r7, r4
 8022662:	40da      	lsrs	r2, r3
 8022664:	4317      	orrs	r7, r2
 8022666:	0038      	movs	r0, r7
 8022668:	b003      	add	sp, #12
 802266a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802266c:	2700      	movs	r7, #0
 802266e:	42ae      	cmp	r6, r5
 8022670:	d202      	bcs.n	8022678 <__b2d+0x60>
 8022672:	9d01      	ldr	r5, [sp, #4]
 8022674:	3d08      	subs	r5, #8
 8022676:	682f      	ldr	r7, [r5, #0]
 8022678:	210b      	movs	r1, #11
 802267a:	4249      	negs	r1, r1
 802267c:	468c      	mov	ip, r1
 802267e:	449c      	add	ip, r3
 8022680:	2b0b      	cmp	r3, #11
 8022682:	d010      	beq.n	80226a6 <__b2d+0x8e>
 8022684:	4661      	mov	r1, ip
 8022686:	2320      	movs	r3, #32
 8022688:	408c      	lsls	r4, r1
 802268a:	1a5b      	subs	r3, r3, r1
 802268c:	0039      	movs	r1, r7
 802268e:	40d9      	lsrs	r1, r3
 8022690:	430c      	orrs	r4, r1
 8022692:	4322      	orrs	r2, r4
 8022694:	0011      	movs	r1, r2
 8022696:	2200      	movs	r2, #0
 8022698:	42b5      	cmp	r5, r6
 802269a:	d901      	bls.n	80226a0 <__b2d+0x88>
 802269c:	3d04      	subs	r5, #4
 802269e:	682a      	ldr	r2, [r5, #0]
 80226a0:	4664      	mov	r4, ip
 80226a2:	40a7      	lsls	r7, r4
 80226a4:	e7dd      	b.n	8022662 <__b2d+0x4a>
 80226a6:	4322      	orrs	r2, r4
 80226a8:	0011      	movs	r1, r2
 80226aa:	e7dc      	b.n	8022666 <__b2d+0x4e>
 80226ac:	3ff00000 	.word	0x3ff00000

080226b0 <__d2b>:
 80226b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80226b2:	2101      	movs	r1, #1
 80226b4:	0016      	movs	r6, r2
 80226b6:	001f      	movs	r7, r3
 80226b8:	f7ff fbfe 	bl	8021eb8 <_Balloc>
 80226bc:	1e04      	subs	r4, r0, #0
 80226be:	d105      	bne.n	80226cc <__d2b+0x1c>
 80226c0:	0022      	movs	r2, r4
 80226c2:	4b25      	ldr	r3, [pc, #148]	@ (8022758 <__d2b+0xa8>)
 80226c4:	4825      	ldr	r0, [pc, #148]	@ (802275c <__d2b+0xac>)
 80226c6:	4926      	ldr	r1, [pc, #152]	@ (8022760 <__d2b+0xb0>)
 80226c8:	f000 fcd6 	bl	8023078 <__assert_func>
 80226cc:	033b      	lsls	r3, r7, #12
 80226ce:	007d      	lsls	r5, r7, #1
 80226d0:	0b1b      	lsrs	r3, r3, #12
 80226d2:	0d6d      	lsrs	r5, r5, #21
 80226d4:	d002      	beq.n	80226dc <__d2b+0x2c>
 80226d6:	2280      	movs	r2, #128	@ 0x80
 80226d8:	0352      	lsls	r2, r2, #13
 80226da:	4313      	orrs	r3, r2
 80226dc:	9301      	str	r3, [sp, #4]
 80226de:	2e00      	cmp	r6, #0
 80226e0:	d025      	beq.n	802272e <__d2b+0x7e>
 80226e2:	4668      	mov	r0, sp
 80226e4:	9600      	str	r6, [sp, #0]
 80226e6:	f7ff fd00 	bl	80220ea <__lo0bits>
 80226ea:	9b01      	ldr	r3, [sp, #4]
 80226ec:	9900      	ldr	r1, [sp, #0]
 80226ee:	2800      	cmp	r0, #0
 80226f0:	d01b      	beq.n	802272a <__d2b+0x7a>
 80226f2:	2220      	movs	r2, #32
 80226f4:	001e      	movs	r6, r3
 80226f6:	1a12      	subs	r2, r2, r0
 80226f8:	4096      	lsls	r6, r2
 80226fa:	0032      	movs	r2, r6
 80226fc:	40c3      	lsrs	r3, r0
 80226fe:	430a      	orrs	r2, r1
 8022700:	6162      	str	r2, [r4, #20]
 8022702:	9301      	str	r3, [sp, #4]
 8022704:	9e01      	ldr	r6, [sp, #4]
 8022706:	61a6      	str	r6, [r4, #24]
 8022708:	1e73      	subs	r3, r6, #1
 802270a:	419e      	sbcs	r6, r3
 802270c:	3601      	adds	r6, #1
 802270e:	6126      	str	r6, [r4, #16]
 8022710:	2d00      	cmp	r5, #0
 8022712:	d014      	beq.n	802273e <__d2b+0x8e>
 8022714:	2635      	movs	r6, #53	@ 0x35
 8022716:	4b13      	ldr	r3, [pc, #76]	@ (8022764 <__d2b+0xb4>)
 8022718:	18ed      	adds	r5, r5, r3
 802271a:	9b08      	ldr	r3, [sp, #32]
 802271c:	182d      	adds	r5, r5, r0
 802271e:	601d      	str	r5, [r3, #0]
 8022720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022722:	1a36      	subs	r6, r6, r0
 8022724:	601e      	str	r6, [r3, #0]
 8022726:	0020      	movs	r0, r4
 8022728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802272a:	6161      	str	r1, [r4, #20]
 802272c:	e7ea      	b.n	8022704 <__d2b+0x54>
 802272e:	a801      	add	r0, sp, #4
 8022730:	f7ff fcdb 	bl	80220ea <__lo0bits>
 8022734:	9b01      	ldr	r3, [sp, #4]
 8022736:	2601      	movs	r6, #1
 8022738:	6163      	str	r3, [r4, #20]
 802273a:	3020      	adds	r0, #32
 802273c:	e7e7      	b.n	802270e <__d2b+0x5e>
 802273e:	4b0a      	ldr	r3, [pc, #40]	@ (8022768 <__d2b+0xb8>)
 8022740:	18c0      	adds	r0, r0, r3
 8022742:	9b08      	ldr	r3, [sp, #32]
 8022744:	6018      	str	r0, [r3, #0]
 8022746:	4b09      	ldr	r3, [pc, #36]	@ (802276c <__d2b+0xbc>)
 8022748:	18f3      	adds	r3, r6, r3
 802274a:	009b      	lsls	r3, r3, #2
 802274c:	18e3      	adds	r3, r4, r3
 802274e:	6958      	ldr	r0, [r3, #20]
 8022750:	f7ff fcaa 	bl	80220a8 <__hi0bits>
 8022754:	0176      	lsls	r6, r6, #5
 8022756:	e7e3      	b.n	8022720 <__d2b+0x70>
 8022758:	080265b1 	.word	0x080265b1
 802275c:	08026622 	.word	0x08026622
 8022760:	0000030f 	.word	0x0000030f
 8022764:	fffffbcd 	.word	0xfffffbcd
 8022768:	fffffbce 	.word	0xfffffbce
 802276c:	3fffffff 	.word	0x3fffffff

08022770 <__ratio>:
 8022770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022772:	b087      	sub	sp, #28
 8022774:	000f      	movs	r7, r1
 8022776:	a904      	add	r1, sp, #16
 8022778:	0006      	movs	r6, r0
 802277a:	f7ff ff4d 	bl	8022618 <__b2d>
 802277e:	9000      	str	r0, [sp, #0]
 8022780:	9101      	str	r1, [sp, #4]
 8022782:	9b00      	ldr	r3, [sp, #0]
 8022784:	9c01      	ldr	r4, [sp, #4]
 8022786:	0038      	movs	r0, r7
 8022788:	a905      	add	r1, sp, #20
 802278a:	9302      	str	r3, [sp, #8]
 802278c:	9403      	str	r4, [sp, #12]
 802278e:	f7ff ff43 	bl	8022618 <__b2d>
 8022792:	000d      	movs	r5, r1
 8022794:	0002      	movs	r2, r0
 8022796:	000b      	movs	r3, r1
 8022798:	6930      	ldr	r0, [r6, #16]
 802279a:	6939      	ldr	r1, [r7, #16]
 802279c:	9e04      	ldr	r6, [sp, #16]
 802279e:	1a40      	subs	r0, r0, r1
 80227a0:	9905      	ldr	r1, [sp, #20]
 80227a2:	0140      	lsls	r0, r0, #5
 80227a4:	1a71      	subs	r1, r6, r1
 80227a6:	1841      	adds	r1, r0, r1
 80227a8:	0508      	lsls	r0, r1, #20
 80227aa:	2900      	cmp	r1, #0
 80227ac:	dd08      	ble.n	80227c0 <__ratio+0x50>
 80227ae:	9901      	ldr	r1, [sp, #4]
 80227b0:	1841      	adds	r1, r0, r1
 80227b2:	9103      	str	r1, [sp, #12]
 80227b4:	9802      	ldr	r0, [sp, #8]
 80227b6:	9903      	ldr	r1, [sp, #12]
 80227b8:	f7df fafc 	bl	8001db4 <__aeabi_ddiv>
 80227bc:	b007      	add	sp, #28
 80227be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80227c0:	1a2b      	subs	r3, r5, r0
 80227c2:	e7f7      	b.n	80227b4 <__ratio+0x44>

080227c4 <__copybits>:
 80227c4:	b570      	push	{r4, r5, r6, lr}
 80227c6:	0014      	movs	r4, r2
 80227c8:	0005      	movs	r5, r0
 80227ca:	3901      	subs	r1, #1
 80227cc:	6913      	ldr	r3, [r2, #16]
 80227ce:	1149      	asrs	r1, r1, #5
 80227d0:	3101      	adds	r1, #1
 80227d2:	0089      	lsls	r1, r1, #2
 80227d4:	3414      	adds	r4, #20
 80227d6:	009b      	lsls	r3, r3, #2
 80227d8:	1841      	adds	r1, r0, r1
 80227da:	18e3      	adds	r3, r4, r3
 80227dc:	42a3      	cmp	r3, r4
 80227de:	d80d      	bhi.n	80227fc <__copybits+0x38>
 80227e0:	0014      	movs	r4, r2
 80227e2:	3411      	adds	r4, #17
 80227e4:	2500      	movs	r5, #0
 80227e6:	429c      	cmp	r4, r3
 80227e8:	d803      	bhi.n	80227f2 <__copybits+0x2e>
 80227ea:	1a9b      	subs	r3, r3, r2
 80227ec:	3b11      	subs	r3, #17
 80227ee:	089b      	lsrs	r3, r3, #2
 80227f0:	009d      	lsls	r5, r3, #2
 80227f2:	2300      	movs	r3, #0
 80227f4:	1940      	adds	r0, r0, r5
 80227f6:	4281      	cmp	r1, r0
 80227f8:	d803      	bhi.n	8022802 <__copybits+0x3e>
 80227fa:	bd70      	pop	{r4, r5, r6, pc}
 80227fc:	cc40      	ldmia	r4!, {r6}
 80227fe:	c540      	stmia	r5!, {r6}
 8022800:	e7ec      	b.n	80227dc <__copybits+0x18>
 8022802:	c008      	stmia	r0!, {r3}
 8022804:	e7f7      	b.n	80227f6 <__copybits+0x32>

08022806 <__any_on>:
 8022806:	0002      	movs	r2, r0
 8022808:	6900      	ldr	r0, [r0, #16]
 802280a:	b510      	push	{r4, lr}
 802280c:	3214      	adds	r2, #20
 802280e:	114b      	asrs	r3, r1, #5
 8022810:	4298      	cmp	r0, r3
 8022812:	db13      	blt.n	802283c <__any_on+0x36>
 8022814:	dd0c      	ble.n	8022830 <__any_on+0x2a>
 8022816:	241f      	movs	r4, #31
 8022818:	0008      	movs	r0, r1
 802281a:	4020      	ands	r0, r4
 802281c:	4221      	tst	r1, r4
 802281e:	d007      	beq.n	8022830 <__any_on+0x2a>
 8022820:	0099      	lsls	r1, r3, #2
 8022822:	588c      	ldr	r4, [r1, r2]
 8022824:	0021      	movs	r1, r4
 8022826:	40c1      	lsrs	r1, r0
 8022828:	4081      	lsls	r1, r0
 802282a:	2001      	movs	r0, #1
 802282c:	428c      	cmp	r4, r1
 802282e:	d104      	bne.n	802283a <__any_on+0x34>
 8022830:	009b      	lsls	r3, r3, #2
 8022832:	18d3      	adds	r3, r2, r3
 8022834:	4293      	cmp	r3, r2
 8022836:	d803      	bhi.n	8022840 <__any_on+0x3a>
 8022838:	2000      	movs	r0, #0
 802283a:	bd10      	pop	{r4, pc}
 802283c:	0003      	movs	r3, r0
 802283e:	e7f7      	b.n	8022830 <__any_on+0x2a>
 8022840:	3b04      	subs	r3, #4
 8022842:	6819      	ldr	r1, [r3, #0]
 8022844:	2900      	cmp	r1, #0
 8022846:	d0f5      	beq.n	8022834 <__any_on+0x2e>
 8022848:	2001      	movs	r0, #1
 802284a:	e7f6      	b.n	802283a <__any_on+0x34>

0802284c <__ascii_wctomb>:
 802284c:	0003      	movs	r3, r0
 802284e:	1e08      	subs	r0, r1, #0
 8022850:	d005      	beq.n	802285e <__ascii_wctomb+0x12>
 8022852:	2aff      	cmp	r2, #255	@ 0xff
 8022854:	d904      	bls.n	8022860 <__ascii_wctomb+0x14>
 8022856:	228a      	movs	r2, #138	@ 0x8a
 8022858:	2001      	movs	r0, #1
 802285a:	601a      	str	r2, [r3, #0]
 802285c:	4240      	negs	r0, r0
 802285e:	4770      	bx	lr
 8022860:	2001      	movs	r0, #1
 8022862:	700a      	strb	r2, [r1, #0]
 8022864:	e7fb      	b.n	802285e <__ascii_wctomb+0x12>
	...

08022868 <__ssputs_r>:
 8022868:	b5f0      	push	{r4, r5, r6, r7, lr}
 802286a:	688e      	ldr	r6, [r1, #8]
 802286c:	b085      	sub	sp, #20
 802286e:	001f      	movs	r7, r3
 8022870:	000c      	movs	r4, r1
 8022872:	680b      	ldr	r3, [r1, #0]
 8022874:	9002      	str	r0, [sp, #8]
 8022876:	9203      	str	r2, [sp, #12]
 8022878:	42be      	cmp	r6, r7
 802287a:	d830      	bhi.n	80228de <__ssputs_r+0x76>
 802287c:	210c      	movs	r1, #12
 802287e:	5e62      	ldrsh	r2, [r4, r1]
 8022880:	2190      	movs	r1, #144	@ 0x90
 8022882:	00c9      	lsls	r1, r1, #3
 8022884:	420a      	tst	r2, r1
 8022886:	d028      	beq.n	80228da <__ssputs_r+0x72>
 8022888:	2003      	movs	r0, #3
 802288a:	6921      	ldr	r1, [r4, #16]
 802288c:	1a5b      	subs	r3, r3, r1
 802288e:	9301      	str	r3, [sp, #4]
 8022890:	6963      	ldr	r3, [r4, #20]
 8022892:	4343      	muls	r3, r0
 8022894:	9801      	ldr	r0, [sp, #4]
 8022896:	0fdd      	lsrs	r5, r3, #31
 8022898:	18ed      	adds	r5, r5, r3
 802289a:	1c7b      	adds	r3, r7, #1
 802289c:	181b      	adds	r3, r3, r0
 802289e:	106d      	asrs	r5, r5, #1
 80228a0:	42ab      	cmp	r3, r5
 80228a2:	d900      	bls.n	80228a6 <__ssputs_r+0x3e>
 80228a4:	001d      	movs	r5, r3
 80228a6:	0552      	lsls	r2, r2, #21
 80228a8:	d528      	bpl.n	80228fc <__ssputs_r+0x94>
 80228aa:	0029      	movs	r1, r5
 80228ac:	9802      	ldr	r0, [sp, #8]
 80228ae:	f7ff fa61 	bl	8021d74 <_malloc_r>
 80228b2:	1e06      	subs	r6, r0, #0
 80228b4:	d02c      	beq.n	8022910 <__ssputs_r+0xa8>
 80228b6:	9a01      	ldr	r2, [sp, #4]
 80228b8:	6921      	ldr	r1, [r4, #16]
 80228ba:	f7fd fff9 	bl	80208b0 <memcpy>
 80228be:	89a2      	ldrh	r2, [r4, #12]
 80228c0:	4b18      	ldr	r3, [pc, #96]	@ (8022924 <__ssputs_r+0xbc>)
 80228c2:	401a      	ands	r2, r3
 80228c4:	2380      	movs	r3, #128	@ 0x80
 80228c6:	4313      	orrs	r3, r2
 80228c8:	81a3      	strh	r3, [r4, #12]
 80228ca:	9b01      	ldr	r3, [sp, #4]
 80228cc:	6126      	str	r6, [r4, #16]
 80228ce:	18f6      	adds	r6, r6, r3
 80228d0:	6026      	str	r6, [r4, #0]
 80228d2:	003e      	movs	r6, r7
 80228d4:	6165      	str	r5, [r4, #20]
 80228d6:	1aed      	subs	r5, r5, r3
 80228d8:	60a5      	str	r5, [r4, #8]
 80228da:	42be      	cmp	r6, r7
 80228dc:	d900      	bls.n	80228e0 <__ssputs_r+0x78>
 80228de:	003e      	movs	r6, r7
 80228e0:	0032      	movs	r2, r6
 80228e2:	9903      	ldr	r1, [sp, #12]
 80228e4:	6820      	ldr	r0, [r4, #0]
 80228e6:	f000 fb7e 	bl	8022fe6 <memmove>
 80228ea:	2000      	movs	r0, #0
 80228ec:	68a3      	ldr	r3, [r4, #8]
 80228ee:	1b9b      	subs	r3, r3, r6
 80228f0:	60a3      	str	r3, [r4, #8]
 80228f2:	6823      	ldr	r3, [r4, #0]
 80228f4:	199b      	adds	r3, r3, r6
 80228f6:	6023      	str	r3, [r4, #0]
 80228f8:	b005      	add	sp, #20
 80228fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80228fc:	002a      	movs	r2, r5
 80228fe:	9802      	ldr	r0, [sp, #8]
 8022900:	f000 fc05 	bl	802310e <_realloc_r>
 8022904:	1e06      	subs	r6, r0, #0
 8022906:	d1e0      	bne.n	80228ca <__ssputs_r+0x62>
 8022908:	6921      	ldr	r1, [r4, #16]
 802290a:	9802      	ldr	r0, [sp, #8]
 802290c:	f7fe fe62 	bl	80215d4 <_free_r>
 8022910:	230c      	movs	r3, #12
 8022912:	2001      	movs	r0, #1
 8022914:	9a02      	ldr	r2, [sp, #8]
 8022916:	4240      	negs	r0, r0
 8022918:	6013      	str	r3, [r2, #0]
 802291a:	89a2      	ldrh	r2, [r4, #12]
 802291c:	3334      	adds	r3, #52	@ 0x34
 802291e:	4313      	orrs	r3, r2
 8022920:	81a3      	strh	r3, [r4, #12]
 8022922:	e7e9      	b.n	80228f8 <__ssputs_r+0x90>
 8022924:	fffffb7f 	.word	0xfffffb7f

08022928 <_svfiprintf_r>:
 8022928:	b5f0      	push	{r4, r5, r6, r7, lr}
 802292a:	b0a1      	sub	sp, #132	@ 0x84
 802292c:	9003      	str	r0, [sp, #12]
 802292e:	001d      	movs	r5, r3
 8022930:	898b      	ldrh	r3, [r1, #12]
 8022932:	000f      	movs	r7, r1
 8022934:	0016      	movs	r6, r2
 8022936:	061b      	lsls	r3, r3, #24
 8022938:	d511      	bpl.n	802295e <_svfiprintf_r+0x36>
 802293a:	690b      	ldr	r3, [r1, #16]
 802293c:	2b00      	cmp	r3, #0
 802293e:	d10e      	bne.n	802295e <_svfiprintf_r+0x36>
 8022940:	2140      	movs	r1, #64	@ 0x40
 8022942:	f7ff fa17 	bl	8021d74 <_malloc_r>
 8022946:	6038      	str	r0, [r7, #0]
 8022948:	6138      	str	r0, [r7, #16]
 802294a:	2800      	cmp	r0, #0
 802294c:	d105      	bne.n	802295a <_svfiprintf_r+0x32>
 802294e:	230c      	movs	r3, #12
 8022950:	9a03      	ldr	r2, [sp, #12]
 8022952:	6013      	str	r3, [r2, #0]
 8022954:	2001      	movs	r0, #1
 8022956:	4240      	negs	r0, r0
 8022958:	e0cf      	b.n	8022afa <_svfiprintf_r+0x1d2>
 802295a:	2340      	movs	r3, #64	@ 0x40
 802295c:	617b      	str	r3, [r7, #20]
 802295e:	2300      	movs	r3, #0
 8022960:	ac08      	add	r4, sp, #32
 8022962:	6163      	str	r3, [r4, #20]
 8022964:	3320      	adds	r3, #32
 8022966:	7663      	strb	r3, [r4, #25]
 8022968:	3310      	adds	r3, #16
 802296a:	76a3      	strb	r3, [r4, #26]
 802296c:	9507      	str	r5, [sp, #28]
 802296e:	0035      	movs	r5, r6
 8022970:	782b      	ldrb	r3, [r5, #0]
 8022972:	2b00      	cmp	r3, #0
 8022974:	d001      	beq.n	802297a <_svfiprintf_r+0x52>
 8022976:	2b25      	cmp	r3, #37	@ 0x25
 8022978:	d148      	bne.n	8022a0c <_svfiprintf_r+0xe4>
 802297a:	1bab      	subs	r3, r5, r6
 802297c:	9305      	str	r3, [sp, #20]
 802297e:	42b5      	cmp	r5, r6
 8022980:	d00b      	beq.n	802299a <_svfiprintf_r+0x72>
 8022982:	0032      	movs	r2, r6
 8022984:	0039      	movs	r1, r7
 8022986:	9803      	ldr	r0, [sp, #12]
 8022988:	f7ff ff6e 	bl	8022868 <__ssputs_r>
 802298c:	3001      	adds	r0, #1
 802298e:	d100      	bne.n	8022992 <_svfiprintf_r+0x6a>
 8022990:	e0ae      	b.n	8022af0 <_svfiprintf_r+0x1c8>
 8022992:	6963      	ldr	r3, [r4, #20]
 8022994:	9a05      	ldr	r2, [sp, #20]
 8022996:	189b      	adds	r3, r3, r2
 8022998:	6163      	str	r3, [r4, #20]
 802299a:	782b      	ldrb	r3, [r5, #0]
 802299c:	2b00      	cmp	r3, #0
 802299e:	d100      	bne.n	80229a2 <_svfiprintf_r+0x7a>
 80229a0:	e0a6      	b.n	8022af0 <_svfiprintf_r+0x1c8>
 80229a2:	2201      	movs	r2, #1
 80229a4:	2300      	movs	r3, #0
 80229a6:	4252      	negs	r2, r2
 80229a8:	6062      	str	r2, [r4, #4]
 80229aa:	a904      	add	r1, sp, #16
 80229ac:	3254      	adds	r2, #84	@ 0x54
 80229ae:	1852      	adds	r2, r2, r1
 80229b0:	1c6e      	adds	r6, r5, #1
 80229b2:	6023      	str	r3, [r4, #0]
 80229b4:	60e3      	str	r3, [r4, #12]
 80229b6:	60a3      	str	r3, [r4, #8]
 80229b8:	7013      	strb	r3, [r2, #0]
 80229ba:	65a3      	str	r3, [r4, #88]	@ 0x58
 80229bc:	4b54      	ldr	r3, [pc, #336]	@ (8022b10 <_svfiprintf_r+0x1e8>)
 80229be:	2205      	movs	r2, #5
 80229c0:	0018      	movs	r0, r3
 80229c2:	7831      	ldrb	r1, [r6, #0]
 80229c4:	9305      	str	r3, [sp, #20]
 80229c6:	f7fd ff68 	bl	802089a <memchr>
 80229ca:	1c75      	adds	r5, r6, #1
 80229cc:	2800      	cmp	r0, #0
 80229ce:	d11f      	bne.n	8022a10 <_svfiprintf_r+0xe8>
 80229d0:	6822      	ldr	r2, [r4, #0]
 80229d2:	06d3      	lsls	r3, r2, #27
 80229d4:	d504      	bpl.n	80229e0 <_svfiprintf_r+0xb8>
 80229d6:	2353      	movs	r3, #83	@ 0x53
 80229d8:	a904      	add	r1, sp, #16
 80229da:	185b      	adds	r3, r3, r1
 80229dc:	2120      	movs	r1, #32
 80229de:	7019      	strb	r1, [r3, #0]
 80229e0:	0713      	lsls	r3, r2, #28
 80229e2:	d504      	bpl.n	80229ee <_svfiprintf_r+0xc6>
 80229e4:	2353      	movs	r3, #83	@ 0x53
 80229e6:	a904      	add	r1, sp, #16
 80229e8:	185b      	adds	r3, r3, r1
 80229ea:	212b      	movs	r1, #43	@ 0x2b
 80229ec:	7019      	strb	r1, [r3, #0]
 80229ee:	7833      	ldrb	r3, [r6, #0]
 80229f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80229f2:	d016      	beq.n	8022a22 <_svfiprintf_r+0xfa>
 80229f4:	0035      	movs	r5, r6
 80229f6:	2100      	movs	r1, #0
 80229f8:	200a      	movs	r0, #10
 80229fa:	68e3      	ldr	r3, [r4, #12]
 80229fc:	782a      	ldrb	r2, [r5, #0]
 80229fe:	1c6e      	adds	r6, r5, #1
 8022a00:	3a30      	subs	r2, #48	@ 0x30
 8022a02:	2a09      	cmp	r2, #9
 8022a04:	d950      	bls.n	8022aa8 <_svfiprintf_r+0x180>
 8022a06:	2900      	cmp	r1, #0
 8022a08:	d111      	bne.n	8022a2e <_svfiprintf_r+0x106>
 8022a0a:	e017      	b.n	8022a3c <_svfiprintf_r+0x114>
 8022a0c:	3501      	adds	r5, #1
 8022a0e:	e7af      	b.n	8022970 <_svfiprintf_r+0x48>
 8022a10:	9b05      	ldr	r3, [sp, #20]
 8022a12:	6822      	ldr	r2, [r4, #0]
 8022a14:	1ac0      	subs	r0, r0, r3
 8022a16:	2301      	movs	r3, #1
 8022a18:	4083      	lsls	r3, r0
 8022a1a:	4313      	orrs	r3, r2
 8022a1c:	002e      	movs	r6, r5
 8022a1e:	6023      	str	r3, [r4, #0]
 8022a20:	e7cc      	b.n	80229bc <_svfiprintf_r+0x94>
 8022a22:	9b07      	ldr	r3, [sp, #28]
 8022a24:	1d19      	adds	r1, r3, #4
 8022a26:	681b      	ldr	r3, [r3, #0]
 8022a28:	9107      	str	r1, [sp, #28]
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	db01      	blt.n	8022a32 <_svfiprintf_r+0x10a>
 8022a2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022a30:	e004      	b.n	8022a3c <_svfiprintf_r+0x114>
 8022a32:	425b      	negs	r3, r3
 8022a34:	60e3      	str	r3, [r4, #12]
 8022a36:	2302      	movs	r3, #2
 8022a38:	4313      	orrs	r3, r2
 8022a3a:	6023      	str	r3, [r4, #0]
 8022a3c:	782b      	ldrb	r3, [r5, #0]
 8022a3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8022a40:	d10c      	bne.n	8022a5c <_svfiprintf_r+0x134>
 8022a42:	786b      	ldrb	r3, [r5, #1]
 8022a44:	2b2a      	cmp	r3, #42	@ 0x2a
 8022a46:	d134      	bne.n	8022ab2 <_svfiprintf_r+0x18a>
 8022a48:	9b07      	ldr	r3, [sp, #28]
 8022a4a:	3502      	adds	r5, #2
 8022a4c:	1d1a      	adds	r2, r3, #4
 8022a4e:	681b      	ldr	r3, [r3, #0]
 8022a50:	9207      	str	r2, [sp, #28]
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	da01      	bge.n	8022a5a <_svfiprintf_r+0x132>
 8022a56:	2301      	movs	r3, #1
 8022a58:	425b      	negs	r3, r3
 8022a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a5c:	4e2d      	ldr	r6, [pc, #180]	@ (8022b14 <_svfiprintf_r+0x1ec>)
 8022a5e:	2203      	movs	r2, #3
 8022a60:	0030      	movs	r0, r6
 8022a62:	7829      	ldrb	r1, [r5, #0]
 8022a64:	f7fd ff19 	bl	802089a <memchr>
 8022a68:	2800      	cmp	r0, #0
 8022a6a:	d006      	beq.n	8022a7a <_svfiprintf_r+0x152>
 8022a6c:	2340      	movs	r3, #64	@ 0x40
 8022a6e:	1b80      	subs	r0, r0, r6
 8022a70:	4083      	lsls	r3, r0
 8022a72:	6822      	ldr	r2, [r4, #0]
 8022a74:	3501      	adds	r5, #1
 8022a76:	4313      	orrs	r3, r2
 8022a78:	6023      	str	r3, [r4, #0]
 8022a7a:	7829      	ldrb	r1, [r5, #0]
 8022a7c:	2206      	movs	r2, #6
 8022a7e:	4826      	ldr	r0, [pc, #152]	@ (8022b18 <_svfiprintf_r+0x1f0>)
 8022a80:	1c6e      	adds	r6, r5, #1
 8022a82:	7621      	strb	r1, [r4, #24]
 8022a84:	f7fd ff09 	bl	802089a <memchr>
 8022a88:	2800      	cmp	r0, #0
 8022a8a:	d038      	beq.n	8022afe <_svfiprintf_r+0x1d6>
 8022a8c:	4b23      	ldr	r3, [pc, #140]	@ (8022b1c <_svfiprintf_r+0x1f4>)
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d122      	bne.n	8022ad8 <_svfiprintf_r+0x1b0>
 8022a92:	2207      	movs	r2, #7
 8022a94:	9b07      	ldr	r3, [sp, #28]
 8022a96:	3307      	adds	r3, #7
 8022a98:	4393      	bics	r3, r2
 8022a9a:	3308      	adds	r3, #8
 8022a9c:	9307      	str	r3, [sp, #28]
 8022a9e:	6963      	ldr	r3, [r4, #20]
 8022aa0:	9a04      	ldr	r2, [sp, #16]
 8022aa2:	189b      	adds	r3, r3, r2
 8022aa4:	6163      	str	r3, [r4, #20]
 8022aa6:	e762      	b.n	802296e <_svfiprintf_r+0x46>
 8022aa8:	4343      	muls	r3, r0
 8022aaa:	0035      	movs	r5, r6
 8022aac:	2101      	movs	r1, #1
 8022aae:	189b      	adds	r3, r3, r2
 8022ab0:	e7a4      	b.n	80229fc <_svfiprintf_r+0xd4>
 8022ab2:	2300      	movs	r3, #0
 8022ab4:	200a      	movs	r0, #10
 8022ab6:	0019      	movs	r1, r3
 8022ab8:	3501      	adds	r5, #1
 8022aba:	6063      	str	r3, [r4, #4]
 8022abc:	782a      	ldrb	r2, [r5, #0]
 8022abe:	1c6e      	adds	r6, r5, #1
 8022ac0:	3a30      	subs	r2, #48	@ 0x30
 8022ac2:	2a09      	cmp	r2, #9
 8022ac4:	d903      	bls.n	8022ace <_svfiprintf_r+0x1a6>
 8022ac6:	2b00      	cmp	r3, #0
 8022ac8:	d0c8      	beq.n	8022a5c <_svfiprintf_r+0x134>
 8022aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8022acc:	e7c6      	b.n	8022a5c <_svfiprintf_r+0x134>
 8022ace:	4341      	muls	r1, r0
 8022ad0:	0035      	movs	r5, r6
 8022ad2:	2301      	movs	r3, #1
 8022ad4:	1889      	adds	r1, r1, r2
 8022ad6:	e7f1      	b.n	8022abc <_svfiprintf_r+0x194>
 8022ad8:	aa07      	add	r2, sp, #28
 8022ada:	9200      	str	r2, [sp, #0]
 8022adc:	0021      	movs	r1, r4
 8022ade:	003a      	movs	r2, r7
 8022ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8022b20 <_svfiprintf_r+0x1f8>)
 8022ae2:	9803      	ldr	r0, [sp, #12]
 8022ae4:	f7fc ffd4 	bl	801fa90 <_printf_float>
 8022ae8:	9004      	str	r0, [sp, #16]
 8022aea:	9b04      	ldr	r3, [sp, #16]
 8022aec:	3301      	adds	r3, #1
 8022aee:	d1d6      	bne.n	8022a9e <_svfiprintf_r+0x176>
 8022af0:	89bb      	ldrh	r3, [r7, #12]
 8022af2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022af4:	065b      	lsls	r3, r3, #25
 8022af6:	d500      	bpl.n	8022afa <_svfiprintf_r+0x1d2>
 8022af8:	e72c      	b.n	8022954 <_svfiprintf_r+0x2c>
 8022afa:	b021      	add	sp, #132	@ 0x84
 8022afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022afe:	aa07      	add	r2, sp, #28
 8022b00:	9200      	str	r2, [sp, #0]
 8022b02:	0021      	movs	r1, r4
 8022b04:	003a      	movs	r2, r7
 8022b06:	4b06      	ldr	r3, [pc, #24]	@ (8022b20 <_svfiprintf_r+0x1f8>)
 8022b08:	9803      	ldr	r0, [sp, #12]
 8022b0a:	f7fd fa6f 	bl	801ffec <_printf_i>
 8022b0e:	e7eb      	b.n	8022ae8 <_svfiprintf_r+0x1c0>
 8022b10:	08026778 	.word	0x08026778
 8022b14:	0802677e 	.word	0x0802677e
 8022b18:	08026782 	.word	0x08026782
 8022b1c:	0801fa91 	.word	0x0801fa91
 8022b20:	08022869 	.word	0x08022869

08022b24 <__sfputc_r>:
 8022b24:	6893      	ldr	r3, [r2, #8]
 8022b26:	b510      	push	{r4, lr}
 8022b28:	3b01      	subs	r3, #1
 8022b2a:	6093      	str	r3, [r2, #8]
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	da04      	bge.n	8022b3a <__sfputc_r+0x16>
 8022b30:	6994      	ldr	r4, [r2, #24]
 8022b32:	42a3      	cmp	r3, r4
 8022b34:	db07      	blt.n	8022b46 <__sfputc_r+0x22>
 8022b36:	290a      	cmp	r1, #10
 8022b38:	d005      	beq.n	8022b46 <__sfputc_r+0x22>
 8022b3a:	6813      	ldr	r3, [r2, #0]
 8022b3c:	1c58      	adds	r0, r3, #1
 8022b3e:	6010      	str	r0, [r2, #0]
 8022b40:	7019      	strb	r1, [r3, #0]
 8022b42:	0008      	movs	r0, r1
 8022b44:	bd10      	pop	{r4, pc}
 8022b46:	f7fd fd37 	bl	80205b8 <__swbuf_r>
 8022b4a:	0001      	movs	r1, r0
 8022b4c:	e7f9      	b.n	8022b42 <__sfputc_r+0x1e>

08022b4e <__sfputs_r>:
 8022b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b50:	0006      	movs	r6, r0
 8022b52:	000f      	movs	r7, r1
 8022b54:	0014      	movs	r4, r2
 8022b56:	18d5      	adds	r5, r2, r3
 8022b58:	42ac      	cmp	r4, r5
 8022b5a:	d101      	bne.n	8022b60 <__sfputs_r+0x12>
 8022b5c:	2000      	movs	r0, #0
 8022b5e:	e007      	b.n	8022b70 <__sfputs_r+0x22>
 8022b60:	7821      	ldrb	r1, [r4, #0]
 8022b62:	003a      	movs	r2, r7
 8022b64:	0030      	movs	r0, r6
 8022b66:	f7ff ffdd 	bl	8022b24 <__sfputc_r>
 8022b6a:	3401      	adds	r4, #1
 8022b6c:	1c43      	adds	r3, r0, #1
 8022b6e:	d1f3      	bne.n	8022b58 <__sfputs_r+0xa>
 8022b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022b74 <_vfiprintf_r>:
 8022b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b76:	b0a1      	sub	sp, #132	@ 0x84
 8022b78:	000f      	movs	r7, r1
 8022b7a:	0015      	movs	r5, r2
 8022b7c:	001e      	movs	r6, r3
 8022b7e:	9003      	str	r0, [sp, #12]
 8022b80:	2800      	cmp	r0, #0
 8022b82:	d004      	beq.n	8022b8e <_vfiprintf_r+0x1a>
 8022b84:	6a03      	ldr	r3, [r0, #32]
 8022b86:	2b00      	cmp	r3, #0
 8022b88:	d101      	bne.n	8022b8e <_vfiprintf_r+0x1a>
 8022b8a:	f7fd fbcd 	bl	8020328 <__sinit>
 8022b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022b90:	07db      	lsls	r3, r3, #31
 8022b92:	d405      	bmi.n	8022ba0 <_vfiprintf_r+0x2c>
 8022b94:	89bb      	ldrh	r3, [r7, #12]
 8022b96:	059b      	lsls	r3, r3, #22
 8022b98:	d402      	bmi.n	8022ba0 <_vfiprintf_r+0x2c>
 8022b9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022b9c:	f7fd fe7b 	bl	8020896 <__retarget_lock_acquire_recursive>
 8022ba0:	89bb      	ldrh	r3, [r7, #12]
 8022ba2:	071b      	lsls	r3, r3, #28
 8022ba4:	d502      	bpl.n	8022bac <_vfiprintf_r+0x38>
 8022ba6:	693b      	ldr	r3, [r7, #16]
 8022ba8:	2b00      	cmp	r3, #0
 8022baa:	d113      	bne.n	8022bd4 <_vfiprintf_r+0x60>
 8022bac:	0039      	movs	r1, r7
 8022bae:	9803      	ldr	r0, [sp, #12]
 8022bb0:	f7fd fd44 	bl	802063c <__swsetup_r>
 8022bb4:	2800      	cmp	r0, #0
 8022bb6:	d00d      	beq.n	8022bd4 <_vfiprintf_r+0x60>
 8022bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022bba:	07db      	lsls	r3, r3, #31
 8022bbc:	d503      	bpl.n	8022bc6 <_vfiprintf_r+0x52>
 8022bbe:	2001      	movs	r0, #1
 8022bc0:	4240      	negs	r0, r0
 8022bc2:	b021      	add	sp, #132	@ 0x84
 8022bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022bc6:	89bb      	ldrh	r3, [r7, #12]
 8022bc8:	059b      	lsls	r3, r3, #22
 8022bca:	d4f8      	bmi.n	8022bbe <_vfiprintf_r+0x4a>
 8022bcc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022bce:	f7fd fe63 	bl	8020898 <__retarget_lock_release_recursive>
 8022bd2:	e7f4      	b.n	8022bbe <_vfiprintf_r+0x4a>
 8022bd4:	2300      	movs	r3, #0
 8022bd6:	ac08      	add	r4, sp, #32
 8022bd8:	6163      	str	r3, [r4, #20]
 8022bda:	3320      	adds	r3, #32
 8022bdc:	7663      	strb	r3, [r4, #25]
 8022bde:	3310      	adds	r3, #16
 8022be0:	76a3      	strb	r3, [r4, #26]
 8022be2:	9607      	str	r6, [sp, #28]
 8022be4:	002e      	movs	r6, r5
 8022be6:	7833      	ldrb	r3, [r6, #0]
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	d001      	beq.n	8022bf0 <_vfiprintf_r+0x7c>
 8022bec:	2b25      	cmp	r3, #37	@ 0x25
 8022bee:	d148      	bne.n	8022c82 <_vfiprintf_r+0x10e>
 8022bf0:	1b73      	subs	r3, r6, r5
 8022bf2:	9305      	str	r3, [sp, #20]
 8022bf4:	42ae      	cmp	r6, r5
 8022bf6:	d00b      	beq.n	8022c10 <_vfiprintf_r+0x9c>
 8022bf8:	002a      	movs	r2, r5
 8022bfa:	0039      	movs	r1, r7
 8022bfc:	9803      	ldr	r0, [sp, #12]
 8022bfe:	f7ff ffa6 	bl	8022b4e <__sfputs_r>
 8022c02:	3001      	adds	r0, #1
 8022c04:	d100      	bne.n	8022c08 <_vfiprintf_r+0x94>
 8022c06:	e0ae      	b.n	8022d66 <_vfiprintf_r+0x1f2>
 8022c08:	6963      	ldr	r3, [r4, #20]
 8022c0a:	9a05      	ldr	r2, [sp, #20]
 8022c0c:	189b      	adds	r3, r3, r2
 8022c0e:	6163      	str	r3, [r4, #20]
 8022c10:	7833      	ldrb	r3, [r6, #0]
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d100      	bne.n	8022c18 <_vfiprintf_r+0xa4>
 8022c16:	e0a6      	b.n	8022d66 <_vfiprintf_r+0x1f2>
 8022c18:	2201      	movs	r2, #1
 8022c1a:	2300      	movs	r3, #0
 8022c1c:	4252      	negs	r2, r2
 8022c1e:	6062      	str	r2, [r4, #4]
 8022c20:	a904      	add	r1, sp, #16
 8022c22:	3254      	adds	r2, #84	@ 0x54
 8022c24:	1852      	adds	r2, r2, r1
 8022c26:	1c75      	adds	r5, r6, #1
 8022c28:	6023      	str	r3, [r4, #0]
 8022c2a:	60e3      	str	r3, [r4, #12]
 8022c2c:	60a3      	str	r3, [r4, #8]
 8022c2e:	7013      	strb	r3, [r2, #0]
 8022c30:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022c32:	4b59      	ldr	r3, [pc, #356]	@ (8022d98 <_vfiprintf_r+0x224>)
 8022c34:	2205      	movs	r2, #5
 8022c36:	0018      	movs	r0, r3
 8022c38:	7829      	ldrb	r1, [r5, #0]
 8022c3a:	9305      	str	r3, [sp, #20]
 8022c3c:	f7fd fe2d 	bl	802089a <memchr>
 8022c40:	1c6e      	adds	r6, r5, #1
 8022c42:	2800      	cmp	r0, #0
 8022c44:	d11f      	bne.n	8022c86 <_vfiprintf_r+0x112>
 8022c46:	6822      	ldr	r2, [r4, #0]
 8022c48:	06d3      	lsls	r3, r2, #27
 8022c4a:	d504      	bpl.n	8022c56 <_vfiprintf_r+0xe2>
 8022c4c:	2353      	movs	r3, #83	@ 0x53
 8022c4e:	a904      	add	r1, sp, #16
 8022c50:	185b      	adds	r3, r3, r1
 8022c52:	2120      	movs	r1, #32
 8022c54:	7019      	strb	r1, [r3, #0]
 8022c56:	0713      	lsls	r3, r2, #28
 8022c58:	d504      	bpl.n	8022c64 <_vfiprintf_r+0xf0>
 8022c5a:	2353      	movs	r3, #83	@ 0x53
 8022c5c:	a904      	add	r1, sp, #16
 8022c5e:	185b      	adds	r3, r3, r1
 8022c60:	212b      	movs	r1, #43	@ 0x2b
 8022c62:	7019      	strb	r1, [r3, #0]
 8022c64:	782b      	ldrb	r3, [r5, #0]
 8022c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8022c68:	d016      	beq.n	8022c98 <_vfiprintf_r+0x124>
 8022c6a:	002e      	movs	r6, r5
 8022c6c:	2100      	movs	r1, #0
 8022c6e:	200a      	movs	r0, #10
 8022c70:	68e3      	ldr	r3, [r4, #12]
 8022c72:	7832      	ldrb	r2, [r6, #0]
 8022c74:	1c75      	adds	r5, r6, #1
 8022c76:	3a30      	subs	r2, #48	@ 0x30
 8022c78:	2a09      	cmp	r2, #9
 8022c7a:	d950      	bls.n	8022d1e <_vfiprintf_r+0x1aa>
 8022c7c:	2900      	cmp	r1, #0
 8022c7e:	d111      	bne.n	8022ca4 <_vfiprintf_r+0x130>
 8022c80:	e017      	b.n	8022cb2 <_vfiprintf_r+0x13e>
 8022c82:	3601      	adds	r6, #1
 8022c84:	e7af      	b.n	8022be6 <_vfiprintf_r+0x72>
 8022c86:	9b05      	ldr	r3, [sp, #20]
 8022c88:	6822      	ldr	r2, [r4, #0]
 8022c8a:	1ac0      	subs	r0, r0, r3
 8022c8c:	2301      	movs	r3, #1
 8022c8e:	4083      	lsls	r3, r0
 8022c90:	4313      	orrs	r3, r2
 8022c92:	0035      	movs	r5, r6
 8022c94:	6023      	str	r3, [r4, #0]
 8022c96:	e7cc      	b.n	8022c32 <_vfiprintf_r+0xbe>
 8022c98:	9b07      	ldr	r3, [sp, #28]
 8022c9a:	1d19      	adds	r1, r3, #4
 8022c9c:	681b      	ldr	r3, [r3, #0]
 8022c9e:	9107      	str	r1, [sp, #28]
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	db01      	blt.n	8022ca8 <_vfiprintf_r+0x134>
 8022ca4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022ca6:	e004      	b.n	8022cb2 <_vfiprintf_r+0x13e>
 8022ca8:	425b      	negs	r3, r3
 8022caa:	60e3      	str	r3, [r4, #12]
 8022cac:	2302      	movs	r3, #2
 8022cae:	4313      	orrs	r3, r2
 8022cb0:	6023      	str	r3, [r4, #0]
 8022cb2:	7833      	ldrb	r3, [r6, #0]
 8022cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8022cb6:	d10c      	bne.n	8022cd2 <_vfiprintf_r+0x15e>
 8022cb8:	7873      	ldrb	r3, [r6, #1]
 8022cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8022cbc:	d134      	bne.n	8022d28 <_vfiprintf_r+0x1b4>
 8022cbe:	9b07      	ldr	r3, [sp, #28]
 8022cc0:	3602      	adds	r6, #2
 8022cc2:	1d1a      	adds	r2, r3, #4
 8022cc4:	681b      	ldr	r3, [r3, #0]
 8022cc6:	9207      	str	r2, [sp, #28]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	da01      	bge.n	8022cd0 <_vfiprintf_r+0x15c>
 8022ccc:	2301      	movs	r3, #1
 8022cce:	425b      	negs	r3, r3
 8022cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8022cd2:	4d32      	ldr	r5, [pc, #200]	@ (8022d9c <_vfiprintf_r+0x228>)
 8022cd4:	2203      	movs	r2, #3
 8022cd6:	0028      	movs	r0, r5
 8022cd8:	7831      	ldrb	r1, [r6, #0]
 8022cda:	f7fd fdde 	bl	802089a <memchr>
 8022cde:	2800      	cmp	r0, #0
 8022ce0:	d006      	beq.n	8022cf0 <_vfiprintf_r+0x17c>
 8022ce2:	2340      	movs	r3, #64	@ 0x40
 8022ce4:	1b40      	subs	r0, r0, r5
 8022ce6:	4083      	lsls	r3, r0
 8022ce8:	6822      	ldr	r2, [r4, #0]
 8022cea:	3601      	adds	r6, #1
 8022cec:	4313      	orrs	r3, r2
 8022cee:	6023      	str	r3, [r4, #0]
 8022cf0:	7831      	ldrb	r1, [r6, #0]
 8022cf2:	2206      	movs	r2, #6
 8022cf4:	482a      	ldr	r0, [pc, #168]	@ (8022da0 <_vfiprintf_r+0x22c>)
 8022cf6:	1c75      	adds	r5, r6, #1
 8022cf8:	7621      	strb	r1, [r4, #24]
 8022cfa:	f7fd fdce 	bl	802089a <memchr>
 8022cfe:	2800      	cmp	r0, #0
 8022d00:	d040      	beq.n	8022d84 <_vfiprintf_r+0x210>
 8022d02:	4b28      	ldr	r3, [pc, #160]	@ (8022da4 <_vfiprintf_r+0x230>)
 8022d04:	2b00      	cmp	r3, #0
 8022d06:	d122      	bne.n	8022d4e <_vfiprintf_r+0x1da>
 8022d08:	2207      	movs	r2, #7
 8022d0a:	9b07      	ldr	r3, [sp, #28]
 8022d0c:	3307      	adds	r3, #7
 8022d0e:	4393      	bics	r3, r2
 8022d10:	3308      	adds	r3, #8
 8022d12:	9307      	str	r3, [sp, #28]
 8022d14:	6963      	ldr	r3, [r4, #20]
 8022d16:	9a04      	ldr	r2, [sp, #16]
 8022d18:	189b      	adds	r3, r3, r2
 8022d1a:	6163      	str	r3, [r4, #20]
 8022d1c:	e762      	b.n	8022be4 <_vfiprintf_r+0x70>
 8022d1e:	4343      	muls	r3, r0
 8022d20:	002e      	movs	r6, r5
 8022d22:	2101      	movs	r1, #1
 8022d24:	189b      	adds	r3, r3, r2
 8022d26:	e7a4      	b.n	8022c72 <_vfiprintf_r+0xfe>
 8022d28:	2300      	movs	r3, #0
 8022d2a:	200a      	movs	r0, #10
 8022d2c:	0019      	movs	r1, r3
 8022d2e:	3601      	adds	r6, #1
 8022d30:	6063      	str	r3, [r4, #4]
 8022d32:	7832      	ldrb	r2, [r6, #0]
 8022d34:	1c75      	adds	r5, r6, #1
 8022d36:	3a30      	subs	r2, #48	@ 0x30
 8022d38:	2a09      	cmp	r2, #9
 8022d3a:	d903      	bls.n	8022d44 <_vfiprintf_r+0x1d0>
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	d0c8      	beq.n	8022cd2 <_vfiprintf_r+0x15e>
 8022d40:	9109      	str	r1, [sp, #36]	@ 0x24
 8022d42:	e7c6      	b.n	8022cd2 <_vfiprintf_r+0x15e>
 8022d44:	4341      	muls	r1, r0
 8022d46:	002e      	movs	r6, r5
 8022d48:	2301      	movs	r3, #1
 8022d4a:	1889      	adds	r1, r1, r2
 8022d4c:	e7f1      	b.n	8022d32 <_vfiprintf_r+0x1be>
 8022d4e:	aa07      	add	r2, sp, #28
 8022d50:	9200      	str	r2, [sp, #0]
 8022d52:	0021      	movs	r1, r4
 8022d54:	003a      	movs	r2, r7
 8022d56:	4b14      	ldr	r3, [pc, #80]	@ (8022da8 <_vfiprintf_r+0x234>)
 8022d58:	9803      	ldr	r0, [sp, #12]
 8022d5a:	f7fc fe99 	bl	801fa90 <_printf_float>
 8022d5e:	9004      	str	r0, [sp, #16]
 8022d60:	9b04      	ldr	r3, [sp, #16]
 8022d62:	3301      	adds	r3, #1
 8022d64:	d1d6      	bne.n	8022d14 <_vfiprintf_r+0x1a0>
 8022d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022d68:	07db      	lsls	r3, r3, #31
 8022d6a:	d405      	bmi.n	8022d78 <_vfiprintf_r+0x204>
 8022d6c:	89bb      	ldrh	r3, [r7, #12]
 8022d6e:	059b      	lsls	r3, r3, #22
 8022d70:	d402      	bmi.n	8022d78 <_vfiprintf_r+0x204>
 8022d72:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022d74:	f7fd fd90 	bl	8020898 <__retarget_lock_release_recursive>
 8022d78:	89bb      	ldrh	r3, [r7, #12]
 8022d7a:	065b      	lsls	r3, r3, #25
 8022d7c:	d500      	bpl.n	8022d80 <_vfiprintf_r+0x20c>
 8022d7e:	e71e      	b.n	8022bbe <_vfiprintf_r+0x4a>
 8022d80:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022d82:	e71e      	b.n	8022bc2 <_vfiprintf_r+0x4e>
 8022d84:	aa07      	add	r2, sp, #28
 8022d86:	9200      	str	r2, [sp, #0]
 8022d88:	0021      	movs	r1, r4
 8022d8a:	003a      	movs	r2, r7
 8022d8c:	4b06      	ldr	r3, [pc, #24]	@ (8022da8 <_vfiprintf_r+0x234>)
 8022d8e:	9803      	ldr	r0, [sp, #12]
 8022d90:	f7fd f92c 	bl	801ffec <_printf_i>
 8022d94:	e7e3      	b.n	8022d5e <_vfiprintf_r+0x1ea>
 8022d96:	46c0      	nop			@ (mov r8, r8)
 8022d98:	08026778 	.word	0x08026778
 8022d9c:	0802677e 	.word	0x0802677e
 8022da0:	08026782 	.word	0x08026782
 8022da4:	0801fa91 	.word	0x0801fa91
 8022da8:	08022b4f 	.word	0x08022b4f

08022dac <__sflush_r>:
 8022dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022dae:	220c      	movs	r2, #12
 8022db0:	5e8b      	ldrsh	r3, [r1, r2]
 8022db2:	0005      	movs	r5, r0
 8022db4:	000c      	movs	r4, r1
 8022db6:	071a      	lsls	r2, r3, #28
 8022db8:	d456      	bmi.n	8022e68 <__sflush_r+0xbc>
 8022dba:	684a      	ldr	r2, [r1, #4]
 8022dbc:	2a00      	cmp	r2, #0
 8022dbe:	dc02      	bgt.n	8022dc6 <__sflush_r+0x1a>
 8022dc0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8022dc2:	2a00      	cmp	r2, #0
 8022dc4:	dd4e      	ble.n	8022e64 <__sflush_r+0xb8>
 8022dc6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022dc8:	2f00      	cmp	r7, #0
 8022dca:	d04b      	beq.n	8022e64 <__sflush_r+0xb8>
 8022dcc:	2200      	movs	r2, #0
 8022dce:	2080      	movs	r0, #128	@ 0x80
 8022dd0:	682e      	ldr	r6, [r5, #0]
 8022dd2:	602a      	str	r2, [r5, #0]
 8022dd4:	001a      	movs	r2, r3
 8022dd6:	0140      	lsls	r0, r0, #5
 8022dd8:	6a21      	ldr	r1, [r4, #32]
 8022dda:	4002      	ands	r2, r0
 8022ddc:	4203      	tst	r3, r0
 8022dde:	d033      	beq.n	8022e48 <__sflush_r+0x9c>
 8022de0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022de2:	89a3      	ldrh	r3, [r4, #12]
 8022de4:	075b      	lsls	r3, r3, #29
 8022de6:	d506      	bpl.n	8022df6 <__sflush_r+0x4a>
 8022de8:	6863      	ldr	r3, [r4, #4]
 8022dea:	1ad2      	subs	r2, r2, r3
 8022dec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022dee:	2b00      	cmp	r3, #0
 8022df0:	d001      	beq.n	8022df6 <__sflush_r+0x4a>
 8022df2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022df4:	1ad2      	subs	r2, r2, r3
 8022df6:	2300      	movs	r3, #0
 8022df8:	0028      	movs	r0, r5
 8022dfa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022dfc:	6a21      	ldr	r1, [r4, #32]
 8022dfe:	47b8      	blx	r7
 8022e00:	89a2      	ldrh	r2, [r4, #12]
 8022e02:	1c43      	adds	r3, r0, #1
 8022e04:	d106      	bne.n	8022e14 <__sflush_r+0x68>
 8022e06:	6829      	ldr	r1, [r5, #0]
 8022e08:	291d      	cmp	r1, #29
 8022e0a:	d846      	bhi.n	8022e9a <__sflush_r+0xee>
 8022e0c:	4b29      	ldr	r3, [pc, #164]	@ (8022eb4 <__sflush_r+0x108>)
 8022e0e:	410b      	asrs	r3, r1
 8022e10:	07db      	lsls	r3, r3, #31
 8022e12:	d442      	bmi.n	8022e9a <__sflush_r+0xee>
 8022e14:	2300      	movs	r3, #0
 8022e16:	6063      	str	r3, [r4, #4]
 8022e18:	6923      	ldr	r3, [r4, #16]
 8022e1a:	6023      	str	r3, [r4, #0]
 8022e1c:	04d2      	lsls	r2, r2, #19
 8022e1e:	d505      	bpl.n	8022e2c <__sflush_r+0x80>
 8022e20:	1c43      	adds	r3, r0, #1
 8022e22:	d102      	bne.n	8022e2a <__sflush_r+0x7e>
 8022e24:	682b      	ldr	r3, [r5, #0]
 8022e26:	2b00      	cmp	r3, #0
 8022e28:	d100      	bne.n	8022e2c <__sflush_r+0x80>
 8022e2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8022e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022e2e:	602e      	str	r6, [r5, #0]
 8022e30:	2900      	cmp	r1, #0
 8022e32:	d017      	beq.n	8022e64 <__sflush_r+0xb8>
 8022e34:	0023      	movs	r3, r4
 8022e36:	3344      	adds	r3, #68	@ 0x44
 8022e38:	4299      	cmp	r1, r3
 8022e3a:	d002      	beq.n	8022e42 <__sflush_r+0x96>
 8022e3c:	0028      	movs	r0, r5
 8022e3e:	f7fe fbc9 	bl	80215d4 <_free_r>
 8022e42:	2300      	movs	r3, #0
 8022e44:	6363      	str	r3, [r4, #52]	@ 0x34
 8022e46:	e00d      	b.n	8022e64 <__sflush_r+0xb8>
 8022e48:	2301      	movs	r3, #1
 8022e4a:	0028      	movs	r0, r5
 8022e4c:	47b8      	blx	r7
 8022e4e:	0002      	movs	r2, r0
 8022e50:	1c43      	adds	r3, r0, #1
 8022e52:	d1c6      	bne.n	8022de2 <__sflush_r+0x36>
 8022e54:	682b      	ldr	r3, [r5, #0]
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	d0c3      	beq.n	8022de2 <__sflush_r+0x36>
 8022e5a:	2b1d      	cmp	r3, #29
 8022e5c:	d001      	beq.n	8022e62 <__sflush_r+0xb6>
 8022e5e:	2b16      	cmp	r3, #22
 8022e60:	d11a      	bne.n	8022e98 <__sflush_r+0xec>
 8022e62:	602e      	str	r6, [r5, #0]
 8022e64:	2000      	movs	r0, #0
 8022e66:	e01e      	b.n	8022ea6 <__sflush_r+0xfa>
 8022e68:	690e      	ldr	r6, [r1, #16]
 8022e6a:	2e00      	cmp	r6, #0
 8022e6c:	d0fa      	beq.n	8022e64 <__sflush_r+0xb8>
 8022e6e:	680f      	ldr	r7, [r1, #0]
 8022e70:	600e      	str	r6, [r1, #0]
 8022e72:	1bba      	subs	r2, r7, r6
 8022e74:	9201      	str	r2, [sp, #4]
 8022e76:	2200      	movs	r2, #0
 8022e78:	079b      	lsls	r3, r3, #30
 8022e7a:	d100      	bne.n	8022e7e <__sflush_r+0xd2>
 8022e7c:	694a      	ldr	r2, [r1, #20]
 8022e7e:	60a2      	str	r2, [r4, #8]
 8022e80:	9b01      	ldr	r3, [sp, #4]
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	ddee      	ble.n	8022e64 <__sflush_r+0xb8>
 8022e86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022e88:	0032      	movs	r2, r6
 8022e8a:	001f      	movs	r7, r3
 8022e8c:	0028      	movs	r0, r5
 8022e8e:	9b01      	ldr	r3, [sp, #4]
 8022e90:	6a21      	ldr	r1, [r4, #32]
 8022e92:	47b8      	blx	r7
 8022e94:	2800      	cmp	r0, #0
 8022e96:	dc07      	bgt.n	8022ea8 <__sflush_r+0xfc>
 8022e98:	89a2      	ldrh	r2, [r4, #12]
 8022e9a:	2340      	movs	r3, #64	@ 0x40
 8022e9c:	2001      	movs	r0, #1
 8022e9e:	4313      	orrs	r3, r2
 8022ea0:	b21b      	sxth	r3, r3
 8022ea2:	81a3      	strh	r3, [r4, #12]
 8022ea4:	4240      	negs	r0, r0
 8022ea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022ea8:	9b01      	ldr	r3, [sp, #4]
 8022eaa:	1836      	adds	r6, r6, r0
 8022eac:	1a1b      	subs	r3, r3, r0
 8022eae:	9301      	str	r3, [sp, #4]
 8022eb0:	e7e6      	b.n	8022e80 <__sflush_r+0xd4>
 8022eb2:	46c0      	nop			@ (mov r8, r8)
 8022eb4:	dfbffffe 	.word	0xdfbffffe

08022eb8 <_fflush_r>:
 8022eb8:	690b      	ldr	r3, [r1, #16]
 8022eba:	b570      	push	{r4, r5, r6, lr}
 8022ebc:	0005      	movs	r5, r0
 8022ebe:	000c      	movs	r4, r1
 8022ec0:	2b00      	cmp	r3, #0
 8022ec2:	d102      	bne.n	8022eca <_fflush_r+0x12>
 8022ec4:	2500      	movs	r5, #0
 8022ec6:	0028      	movs	r0, r5
 8022ec8:	bd70      	pop	{r4, r5, r6, pc}
 8022eca:	2800      	cmp	r0, #0
 8022ecc:	d004      	beq.n	8022ed8 <_fflush_r+0x20>
 8022ece:	6a03      	ldr	r3, [r0, #32]
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d101      	bne.n	8022ed8 <_fflush_r+0x20>
 8022ed4:	f7fd fa28 	bl	8020328 <__sinit>
 8022ed8:	220c      	movs	r2, #12
 8022eda:	5ea3      	ldrsh	r3, [r4, r2]
 8022edc:	2b00      	cmp	r3, #0
 8022ede:	d0f1      	beq.n	8022ec4 <_fflush_r+0xc>
 8022ee0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022ee2:	07d2      	lsls	r2, r2, #31
 8022ee4:	d404      	bmi.n	8022ef0 <_fflush_r+0x38>
 8022ee6:	059b      	lsls	r3, r3, #22
 8022ee8:	d402      	bmi.n	8022ef0 <_fflush_r+0x38>
 8022eea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022eec:	f7fd fcd3 	bl	8020896 <__retarget_lock_acquire_recursive>
 8022ef0:	0028      	movs	r0, r5
 8022ef2:	0021      	movs	r1, r4
 8022ef4:	f7ff ff5a 	bl	8022dac <__sflush_r>
 8022ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022efa:	0005      	movs	r5, r0
 8022efc:	07db      	lsls	r3, r3, #31
 8022efe:	d4e2      	bmi.n	8022ec6 <_fflush_r+0xe>
 8022f00:	89a3      	ldrh	r3, [r4, #12]
 8022f02:	059b      	lsls	r3, r3, #22
 8022f04:	d4df      	bmi.n	8022ec6 <_fflush_r+0xe>
 8022f06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022f08:	f7fd fcc6 	bl	8020898 <__retarget_lock_release_recursive>
 8022f0c:	e7db      	b.n	8022ec6 <_fflush_r+0xe>
	...

08022f10 <__swhatbuf_r>:
 8022f10:	b570      	push	{r4, r5, r6, lr}
 8022f12:	000e      	movs	r6, r1
 8022f14:	001d      	movs	r5, r3
 8022f16:	230e      	movs	r3, #14
 8022f18:	5ec9      	ldrsh	r1, [r1, r3]
 8022f1a:	0014      	movs	r4, r2
 8022f1c:	b096      	sub	sp, #88	@ 0x58
 8022f1e:	2900      	cmp	r1, #0
 8022f20:	da0c      	bge.n	8022f3c <__swhatbuf_r+0x2c>
 8022f22:	89b2      	ldrh	r2, [r6, #12]
 8022f24:	2380      	movs	r3, #128	@ 0x80
 8022f26:	0011      	movs	r1, r2
 8022f28:	4019      	ands	r1, r3
 8022f2a:	421a      	tst	r2, r3
 8022f2c:	d114      	bne.n	8022f58 <__swhatbuf_r+0x48>
 8022f2e:	2380      	movs	r3, #128	@ 0x80
 8022f30:	00db      	lsls	r3, r3, #3
 8022f32:	2000      	movs	r0, #0
 8022f34:	6029      	str	r1, [r5, #0]
 8022f36:	6023      	str	r3, [r4, #0]
 8022f38:	b016      	add	sp, #88	@ 0x58
 8022f3a:	bd70      	pop	{r4, r5, r6, pc}
 8022f3c:	466a      	mov	r2, sp
 8022f3e:	f000 f865 	bl	802300c <_fstat_r>
 8022f42:	2800      	cmp	r0, #0
 8022f44:	dbed      	blt.n	8022f22 <__swhatbuf_r+0x12>
 8022f46:	23f0      	movs	r3, #240	@ 0xf0
 8022f48:	9901      	ldr	r1, [sp, #4]
 8022f4a:	021b      	lsls	r3, r3, #8
 8022f4c:	4019      	ands	r1, r3
 8022f4e:	4b04      	ldr	r3, [pc, #16]	@ (8022f60 <__swhatbuf_r+0x50>)
 8022f50:	18c9      	adds	r1, r1, r3
 8022f52:	424b      	negs	r3, r1
 8022f54:	4159      	adcs	r1, r3
 8022f56:	e7ea      	b.n	8022f2e <__swhatbuf_r+0x1e>
 8022f58:	2100      	movs	r1, #0
 8022f5a:	2340      	movs	r3, #64	@ 0x40
 8022f5c:	e7e9      	b.n	8022f32 <__swhatbuf_r+0x22>
 8022f5e:	46c0      	nop			@ (mov r8, r8)
 8022f60:	ffffe000 	.word	0xffffe000

08022f64 <__smakebuf_r>:
 8022f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f66:	2602      	movs	r6, #2
 8022f68:	898b      	ldrh	r3, [r1, #12]
 8022f6a:	0005      	movs	r5, r0
 8022f6c:	000c      	movs	r4, r1
 8022f6e:	b085      	sub	sp, #20
 8022f70:	4233      	tst	r3, r6
 8022f72:	d007      	beq.n	8022f84 <__smakebuf_r+0x20>
 8022f74:	0023      	movs	r3, r4
 8022f76:	3347      	adds	r3, #71	@ 0x47
 8022f78:	6023      	str	r3, [r4, #0]
 8022f7a:	6123      	str	r3, [r4, #16]
 8022f7c:	2301      	movs	r3, #1
 8022f7e:	6163      	str	r3, [r4, #20]
 8022f80:	b005      	add	sp, #20
 8022f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f84:	ab03      	add	r3, sp, #12
 8022f86:	aa02      	add	r2, sp, #8
 8022f88:	f7ff ffc2 	bl	8022f10 <__swhatbuf_r>
 8022f8c:	9f02      	ldr	r7, [sp, #8]
 8022f8e:	9001      	str	r0, [sp, #4]
 8022f90:	0039      	movs	r1, r7
 8022f92:	0028      	movs	r0, r5
 8022f94:	f7fe feee 	bl	8021d74 <_malloc_r>
 8022f98:	2800      	cmp	r0, #0
 8022f9a:	d108      	bne.n	8022fae <__smakebuf_r+0x4a>
 8022f9c:	220c      	movs	r2, #12
 8022f9e:	5ea3      	ldrsh	r3, [r4, r2]
 8022fa0:	059a      	lsls	r2, r3, #22
 8022fa2:	d4ed      	bmi.n	8022f80 <__smakebuf_r+0x1c>
 8022fa4:	2203      	movs	r2, #3
 8022fa6:	4393      	bics	r3, r2
 8022fa8:	431e      	orrs	r6, r3
 8022faa:	81a6      	strh	r6, [r4, #12]
 8022fac:	e7e2      	b.n	8022f74 <__smakebuf_r+0x10>
 8022fae:	2380      	movs	r3, #128	@ 0x80
 8022fb0:	89a2      	ldrh	r2, [r4, #12]
 8022fb2:	6020      	str	r0, [r4, #0]
 8022fb4:	4313      	orrs	r3, r2
 8022fb6:	81a3      	strh	r3, [r4, #12]
 8022fb8:	9b03      	ldr	r3, [sp, #12]
 8022fba:	6120      	str	r0, [r4, #16]
 8022fbc:	6167      	str	r7, [r4, #20]
 8022fbe:	2b00      	cmp	r3, #0
 8022fc0:	d00c      	beq.n	8022fdc <__smakebuf_r+0x78>
 8022fc2:	0028      	movs	r0, r5
 8022fc4:	230e      	movs	r3, #14
 8022fc6:	5ee1      	ldrsh	r1, [r4, r3]
 8022fc8:	f000 f832 	bl	8023030 <_isatty_r>
 8022fcc:	2800      	cmp	r0, #0
 8022fce:	d005      	beq.n	8022fdc <__smakebuf_r+0x78>
 8022fd0:	2303      	movs	r3, #3
 8022fd2:	89a2      	ldrh	r2, [r4, #12]
 8022fd4:	439a      	bics	r2, r3
 8022fd6:	3b02      	subs	r3, #2
 8022fd8:	4313      	orrs	r3, r2
 8022fda:	81a3      	strh	r3, [r4, #12]
 8022fdc:	89a3      	ldrh	r3, [r4, #12]
 8022fde:	9a01      	ldr	r2, [sp, #4]
 8022fe0:	4313      	orrs	r3, r2
 8022fe2:	81a3      	strh	r3, [r4, #12]
 8022fe4:	e7cc      	b.n	8022f80 <__smakebuf_r+0x1c>

08022fe6 <memmove>:
 8022fe6:	b510      	push	{r4, lr}
 8022fe8:	4288      	cmp	r0, r1
 8022fea:	d806      	bhi.n	8022ffa <memmove+0x14>
 8022fec:	2300      	movs	r3, #0
 8022fee:	429a      	cmp	r2, r3
 8022ff0:	d008      	beq.n	8023004 <memmove+0x1e>
 8022ff2:	5ccc      	ldrb	r4, [r1, r3]
 8022ff4:	54c4      	strb	r4, [r0, r3]
 8022ff6:	3301      	adds	r3, #1
 8022ff8:	e7f9      	b.n	8022fee <memmove+0x8>
 8022ffa:	188b      	adds	r3, r1, r2
 8022ffc:	4298      	cmp	r0, r3
 8022ffe:	d2f5      	bcs.n	8022fec <memmove+0x6>
 8023000:	3a01      	subs	r2, #1
 8023002:	d200      	bcs.n	8023006 <memmove+0x20>
 8023004:	bd10      	pop	{r4, pc}
 8023006:	5c8b      	ldrb	r3, [r1, r2]
 8023008:	5483      	strb	r3, [r0, r2]
 802300a:	e7f9      	b.n	8023000 <memmove+0x1a>

0802300c <_fstat_r>:
 802300c:	2300      	movs	r3, #0
 802300e:	b570      	push	{r4, r5, r6, lr}
 8023010:	4d06      	ldr	r5, [pc, #24]	@ (802302c <_fstat_r+0x20>)
 8023012:	0004      	movs	r4, r0
 8023014:	0008      	movs	r0, r1
 8023016:	0011      	movs	r1, r2
 8023018:	602b      	str	r3, [r5, #0]
 802301a:	f7eb f879 	bl	800e110 <_fstat>
 802301e:	1c43      	adds	r3, r0, #1
 8023020:	d103      	bne.n	802302a <_fstat_r+0x1e>
 8023022:	682b      	ldr	r3, [r5, #0]
 8023024:	2b00      	cmp	r3, #0
 8023026:	d000      	beq.n	802302a <_fstat_r+0x1e>
 8023028:	6023      	str	r3, [r4, #0]
 802302a:	bd70      	pop	{r4, r5, r6, pc}
 802302c:	200033d0 	.word	0x200033d0

08023030 <_isatty_r>:
 8023030:	2300      	movs	r3, #0
 8023032:	b570      	push	{r4, r5, r6, lr}
 8023034:	4d06      	ldr	r5, [pc, #24]	@ (8023050 <_isatty_r+0x20>)
 8023036:	0004      	movs	r4, r0
 8023038:	0008      	movs	r0, r1
 802303a:	602b      	str	r3, [r5, #0]
 802303c:	f7eb f876 	bl	800e12c <_isatty>
 8023040:	1c43      	adds	r3, r0, #1
 8023042:	d103      	bne.n	802304c <_isatty_r+0x1c>
 8023044:	682b      	ldr	r3, [r5, #0]
 8023046:	2b00      	cmp	r3, #0
 8023048:	d000      	beq.n	802304c <_isatty_r+0x1c>
 802304a:	6023      	str	r3, [r4, #0]
 802304c:	bd70      	pop	{r4, r5, r6, pc}
 802304e:	46c0      	nop			@ (mov r8, r8)
 8023050:	200033d0 	.word	0x200033d0

08023054 <_sbrk_r>:
 8023054:	2300      	movs	r3, #0
 8023056:	b570      	push	{r4, r5, r6, lr}
 8023058:	4d06      	ldr	r5, [pc, #24]	@ (8023074 <_sbrk_r+0x20>)
 802305a:	0004      	movs	r4, r0
 802305c:	0008      	movs	r0, r1
 802305e:	602b      	str	r3, [r5, #0]
 8023060:	f7eb f878 	bl	800e154 <_sbrk>
 8023064:	1c43      	adds	r3, r0, #1
 8023066:	d103      	bne.n	8023070 <_sbrk_r+0x1c>
 8023068:	682b      	ldr	r3, [r5, #0]
 802306a:	2b00      	cmp	r3, #0
 802306c:	d000      	beq.n	8023070 <_sbrk_r+0x1c>
 802306e:	6023      	str	r3, [r4, #0]
 8023070:	bd70      	pop	{r4, r5, r6, pc}
 8023072:	46c0      	nop			@ (mov r8, r8)
 8023074:	200033d0 	.word	0x200033d0

08023078 <__assert_func>:
 8023078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802307a:	0014      	movs	r4, r2
 802307c:	001a      	movs	r2, r3
 802307e:	4b09      	ldr	r3, [pc, #36]	@ (80230a4 <__assert_func+0x2c>)
 8023080:	0005      	movs	r5, r0
 8023082:	681b      	ldr	r3, [r3, #0]
 8023084:	000e      	movs	r6, r1
 8023086:	68d8      	ldr	r0, [r3, #12]
 8023088:	4b07      	ldr	r3, [pc, #28]	@ (80230a8 <__assert_func+0x30>)
 802308a:	2c00      	cmp	r4, #0
 802308c:	d101      	bne.n	8023092 <__assert_func+0x1a>
 802308e:	4b07      	ldr	r3, [pc, #28]	@ (80230ac <__assert_func+0x34>)
 8023090:	001c      	movs	r4, r3
 8023092:	4907      	ldr	r1, [pc, #28]	@ (80230b0 <__assert_func+0x38>)
 8023094:	9301      	str	r3, [sp, #4]
 8023096:	9402      	str	r4, [sp, #8]
 8023098:	002b      	movs	r3, r5
 802309a:	9600      	str	r6, [sp, #0]
 802309c:	f000 f866 	bl	802316c <fiprintf>
 80230a0:	f000 f874 	bl	802318c <abort>
 80230a4:	200003d0 	.word	0x200003d0
 80230a8:	08026789 	.word	0x08026789
 80230ac:	080267c4 	.word	0x080267c4
 80230b0:	08026796 	.word	0x08026796

080230b4 <_calloc_r>:
 80230b4:	b570      	push	{r4, r5, r6, lr}
 80230b6:	0c0b      	lsrs	r3, r1, #16
 80230b8:	0c15      	lsrs	r5, r2, #16
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	d11e      	bne.n	80230fc <_calloc_r+0x48>
 80230be:	2d00      	cmp	r5, #0
 80230c0:	d10c      	bne.n	80230dc <_calloc_r+0x28>
 80230c2:	b289      	uxth	r1, r1
 80230c4:	b294      	uxth	r4, r2
 80230c6:	434c      	muls	r4, r1
 80230c8:	0021      	movs	r1, r4
 80230ca:	f7fe fe53 	bl	8021d74 <_malloc_r>
 80230ce:	1e05      	subs	r5, r0, #0
 80230d0:	d01a      	beq.n	8023108 <_calloc_r+0x54>
 80230d2:	0022      	movs	r2, r4
 80230d4:	2100      	movs	r1, #0
 80230d6:	f7fd fb0f 	bl	80206f8 <memset>
 80230da:	e016      	b.n	802310a <_calloc_r+0x56>
 80230dc:	1c2b      	adds	r3, r5, #0
 80230de:	1c0c      	adds	r4, r1, #0
 80230e0:	b289      	uxth	r1, r1
 80230e2:	b292      	uxth	r2, r2
 80230e4:	434a      	muls	r2, r1
 80230e6:	b29b      	uxth	r3, r3
 80230e8:	b2a1      	uxth	r1, r4
 80230ea:	4359      	muls	r1, r3
 80230ec:	0c14      	lsrs	r4, r2, #16
 80230ee:	190c      	adds	r4, r1, r4
 80230f0:	0c23      	lsrs	r3, r4, #16
 80230f2:	d107      	bne.n	8023104 <_calloc_r+0x50>
 80230f4:	0424      	lsls	r4, r4, #16
 80230f6:	b292      	uxth	r2, r2
 80230f8:	4314      	orrs	r4, r2
 80230fa:	e7e5      	b.n	80230c8 <_calloc_r+0x14>
 80230fc:	2d00      	cmp	r5, #0
 80230fe:	d101      	bne.n	8023104 <_calloc_r+0x50>
 8023100:	1c14      	adds	r4, r2, #0
 8023102:	e7ed      	b.n	80230e0 <_calloc_r+0x2c>
 8023104:	230c      	movs	r3, #12
 8023106:	6003      	str	r3, [r0, #0]
 8023108:	2500      	movs	r5, #0
 802310a:	0028      	movs	r0, r5
 802310c:	bd70      	pop	{r4, r5, r6, pc}

0802310e <_realloc_r>:
 802310e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023110:	0006      	movs	r6, r0
 8023112:	000c      	movs	r4, r1
 8023114:	0015      	movs	r5, r2
 8023116:	2900      	cmp	r1, #0
 8023118:	d105      	bne.n	8023126 <_realloc_r+0x18>
 802311a:	0011      	movs	r1, r2
 802311c:	f7fe fe2a 	bl	8021d74 <_malloc_r>
 8023120:	0004      	movs	r4, r0
 8023122:	0020      	movs	r0, r4
 8023124:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023126:	2a00      	cmp	r2, #0
 8023128:	d103      	bne.n	8023132 <_realloc_r+0x24>
 802312a:	f7fe fa53 	bl	80215d4 <_free_r>
 802312e:	2400      	movs	r4, #0
 8023130:	e7f7      	b.n	8023122 <_realloc_r+0x14>
 8023132:	f000 f832 	bl	802319a <_malloc_usable_size_r>
 8023136:	0007      	movs	r7, r0
 8023138:	4285      	cmp	r5, r0
 802313a:	d802      	bhi.n	8023142 <_realloc_r+0x34>
 802313c:	0843      	lsrs	r3, r0, #1
 802313e:	42ab      	cmp	r3, r5
 8023140:	d3ef      	bcc.n	8023122 <_realloc_r+0x14>
 8023142:	0029      	movs	r1, r5
 8023144:	0030      	movs	r0, r6
 8023146:	f7fe fe15 	bl	8021d74 <_malloc_r>
 802314a:	9001      	str	r0, [sp, #4]
 802314c:	2800      	cmp	r0, #0
 802314e:	d0ee      	beq.n	802312e <_realloc_r+0x20>
 8023150:	002a      	movs	r2, r5
 8023152:	42bd      	cmp	r5, r7
 8023154:	d900      	bls.n	8023158 <_realloc_r+0x4a>
 8023156:	003a      	movs	r2, r7
 8023158:	0021      	movs	r1, r4
 802315a:	9801      	ldr	r0, [sp, #4]
 802315c:	f7fd fba8 	bl	80208b0 <memcpy>
 8023160:	0021      	movs	r1, r4
 8023162:	0030      	movs	r0, r6
 8023164:	f7fe fa36 	bl	80215d4 <_free_r>
 8023168:	9c01      	ldr	r4, [sp, #4]
 802316a:	e7da      	b.n	8023122 <_realloc_r+0x14>

0802316c <fiprintf>:
 802316c:	b40e      	push	{r1, r2, r3}
 802316e:	b517      	push	{r0, r1, r2, r4, lr}
 8023170:	4c05      	ldr	r4, [pc, #20]	@ (8023188 <fiprintf+0x1c>)
 8023172:	ab05      	add	r3, sp, #20
 8023174:	cb04      	ldmia	r3!, {r2}
 8023176:	0001      	movs	r1, r0
 8023178:	6820      	ldr	r0, [r4, #0]
 802317a:	9301      	str	r3, [sp, #4]
 802317c:	f7ff fcfa 	bl	8022b74 <_vfiprintf_r>
 8023180:	bc1e      	pop	{r1, r2, r3, r4}
 8023182:	bc08      	pop	{r3}
 8023184:	b003      	add	sp, #12
 8023186:	4718      	bx	r3
 8023188:	200003d0 	.word	0x200003d0

0802318c <abort>:
 802318c:	2006      	movs	r0, #6
 802318e:	b510      	push	{r4, lr}
 8023190:	f000 f834 	bl	80231fc <raise>
 8023194:	2001      	movs	r0, #1
 8023196:	f7ea ff87 	bl	800e0a8 <_exit>

0802319a <_malloc_usable_size_r>:
 802319a:	1f0b      	subs	r3, r1, #4
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	1f18      	subs	r0, r3, #4
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	da01      	bge.n	80231a8 <_malloc_usable_size_r+0xe>
 80231a4:	580b      	ldr	r3, [r1, r0]
 80231a6:	18c0      	adds	r0, r0, r3
 80231a8:	4770      	bx	lr

080231aa <_raise_r>:
 80231aa:	b570      	push	{r4, r5, r6, lr}
 80231ac:	0004      	movs	r4, r0
 80231ae:	000d      	movs	r5, r1
 80231b0:	291f      	cmp	r1, #31
 80231b2:	d904      	bls.n	80231be <_raise_r+0x14>
 80231b4:	2316      	movs	r3, #22
 80231b6:	6003      	str	r3, [r0, #0]
 80231b8:	2001      	movs	r0, #1
 80231ba:	4240      	negs	r0, r0
 80231bc:	bd70      	pop	{r4, r5, r6, pc}
 80231be:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80231c0:	2b00      	cmp	r3, #0
 80231c2:	d004      	beq.n	80231ce <_raise_r+0x24>
 80231c4:	008a      	lsls	r2, r1, #2
 80231c6:	189b      	adds	r3, r3, r2
 80231c8:	681a      	ldr	r2, [r3, #0]
 80231ca:	2a00      	cmp	r2, #0
 80231cc:	d108      	bne.n	80231e0 <_raise_r+0x36>
 80231ce:	0020      	movs	r0, r4
 80231d0:	f000 f830 	bl	8023234 <_getpid_r>
 80231d4:	002a      	movs	r2, r5
 80231d6:	0001      	movs	r1, r0
 80231d8:	0020      	movs	r0, r4
 80231da:	f000 f819 	bl	8023210 <_kill_r>
 80231de:	e7ed      	b.n	80231bc <_raise_r+0x12>
 80231e0:	2a01      	cmp	r2, #1
 80231e2:	d009      	beq.n	80231f8 <_raise_r+0x4e>
 80231e4:	1c51      	adds	r1, r2, #1
 80231e6:	d103      	bne.n	80231f0 <_raise_r+0x46>
 80231e8:	2316      	movs	r3, #22
 80231ea:	6003      	str	r3, [r0, #0]
 80231ec:	2001      	movs	r0, #1
 80231ee:	e7e5      	b.n	80231bc <_raise_r+0x12>
 80231f0:	2100      	movs	r1, #0
 80231f2:	0028      	movs	r0, r5
 80231f4:	6019      	str	r1, [r3, #0]
 80231f6:	4790      	blx	r2
 80231f8:	2000      	movs	r0, #0
 80231fa:	e7df      	b.n	80231bc <_raise_r+0x12>

080231fc <raise>:
 80231fc:	b510      	push	{r4, lr}
 80231fe:	4b03      	ldr	r3, [pc, #12]	@ (802320c <raise+0x10>)
 8023200:	0001      	movs	r1, r0
 8023202:	6818      	ldr	r0, [r3, #0]
 8023204:	f7ff ffd1 	bl	80231aa <_raise_r>
 8023208:	bd10      	pop	{r4, pc}
 802320a:	46c0      	nop			@ (mov r8, r8)
 802320c:	200003d0 	.word	0x200003d0

08023210 <_kill_r>:
 8023210:	2300      	movs	r3, #0
 8023212:	b570      	push	{r4, r5, r6, lr}
 8023214:	4d06      	ldr	r5, [pc, #24]	@ (8023230 <_kill_r+0x20>)
 8023216:	0004      	movs	r4, r0
 8023218:	0008      	movs	r0, r1
 802321a:	0011      	movs	r1, r2
 802321c:	602b      	str	r3, [r5, #0]
 802321e:	f7ea ff33 	bl	800e088 <_kill>
 8023222:	1c43      	adds	r3, r0, #1
 8023224:	d103      	bne.n	802322e <_kill_r+0x1e>
 8023226:	682b      	ldr	r3, [r5, #0]
 8023228:	2b00      	cmp	r3, #0
 802322a:	d000      	beq.n	802322e <_kill_r+0x1e>
 802322c:	6023      	str	r3, [r4, #0]
 802322e:	bd70      	pop	{r4, r5, r6, pc}
 8023230:	200033d0 	.word	0x200033d0

08023234 <_getpid_r>:
 8023234:	b510      	push	{r4, lr}
 8023236:	f7ea ff21 	bl	800e07c <_getpid>
 802323a:	bd10      	pop	{r4, pc}

0802323c <expf>:
 802323c:	b570      	push	{r4, r5, r6, lr}
 802323e:	1c04      	adds	r4, r0, #0
 8023240:	f000 f8e6 	bl	8023410 <__ieee754_expf>
 8023244:	1c05      	adds	r5, r0, #0
 8023246:	1c20      	adds	r0, r4, #0
 8023248:	f000 f83c 	bl	80232c4 <finitef>
 802324c:	2800      	cmp	r0, #0
 802324e:	d00b      	beq.n	8023268 <expf+0x2c>
 8023250:	490c      	ldr	r1, [pc, #48]	@ (8023284 <expf+0x48>)
 8023252:	1c20      	adds	r0, r4, #0
 8023254:	f7dd f980 	bl	8000558 <__aeabi_fcmpgt>
 8023258:	2800      	cmp	r0, #0
 802325a:	d007      	beq.n	802326c <expf+0x30>
 802325c:	f7fd faf0 	bl	8020840 <__errno>
 8023260:	25ff      	movs	r5, #255	@ 0xff
 8023262:	2322      	movs	r3, #34	@ 0x22
 8023264:	05ed      	lsls	r5, r5, #23
 8023266:	6003      	str	r3, [r0, #0]
 8023268:	1c28      	adds	r0, r5, #0
 802326a:	bd70      	pop	{r4, r5, r6, pc}
 802326c:	4906      	ldr	r1, [pc, #24]	@ (8023288 <expf+0x4c>)
 802326e:	1c20      	adds	r0, r4, #0
 8023270:	f7dd f95e 	bl	8000530 <__aeabi_fcmplt>
 8023274:	2800      	cmp	r0, #0
 8023276:	d0f7      	beq.n	8023268 <expf+0x2c>
 8023278:	f7fd fae2 	bl	8020840 <__errno>
 802327c:	2322      	movs	r3, #34	@ 0x22
 802327e:	2500      	movs	r5, #0
 8023280:	6003      	str	r3, [r0, #0]
 8023282:	e7f1      	b.n	8023268 <expf+0x2c>
 8023284:	42b17217 	.word	0x42b17217
 8023288:	c2cff1b5 	.word	0xc2cff1b5

0802328c <sqrtf>:
 802328c:	b570      	push	{r4, r5, r6, lr}
 802328e:	1c05      	adds	r5, r0, #0
 8023290:	f000 f822 	bl	80232d8 <__ieee754_sqrtf>
 8023294:	1c29      	adds	r1, r5, #0
 8023296:	1c04      	adds	r4, r0, #0
 8023298:	1c28      	adds	r0, r5, #0
 802329a:	f7de f963 	bl	8001564 <__aeabi_fcmpun>
 802329e:	2800      	cmp	r0, #0
 80232a0:	d10e      	bne.n	80232c0 <sqrtf+0x34>
 80232a2:	2100      	movs	r1, #0
 80232a4:	1c28      	adds	r0, r5, #0
 80232a6:	f7dd f943 	bl	8000530 <__aeabi_fcmplt>
 80232aa:	2800      	cmp	r0, #0
 80232ac:	d008      	beq.n	80232c0 <sqrtf+0x34>
 80232ae:	f7fd fac7 	bl	8020840 <__errno>
 80232b2:	2321      	movs	r3, #33	@ 0x21
 80232b4:	2100      	movs	r1, #0
 80232b6:	6003      	str	r3, [r0, #0]
 80232b8:	1c08      	adds	r0, r1, #0
 80232ba:	f7dd fc8b 	bl	8000bd4 <__aeabi_fdiv>
 80232be:	1c04      	adds	r4, r0, #0
 80232c0:	1c20      	adds	r0, r4, #0
 80232c2:	bd70      	pop	{r4, r5, r6, pc}

080232c4 <finitef>:
 80232c4:	22ff      	movs	r2, #255	@ 0xff
 80232c6:	0043      	lsls	r3, r0, #1
 80232c8:	085b      	lsrs	r3, r3, #1
 80232ca:	2001      	movs	r0, #1
 80232cc:	05d2      	lsls	r2, r2, #23
 80232ce:	4293      	cmp	r3, r2
 80232d0:	db00      	blt.n	80232d4 <finitef+0x10>
 80232d2:	2000      	movs	r0, #0
 80232d4:	4770      	bx	lr
	...

080232d8 <__ieee754_sqrtf>:
 80232d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80232da:	0003      	movs	r3, r0
 80232dc:	0042      	lsls	r2, r0, #1
 80232de:	1c04      	adds	r4, r0, #0
 80232e0:	20ff      	movs	r0, #255	@ 0xff
 80232e2:	0852      	lsrs	r2, r2, #1
 80232e4:	05c0      	lsls	r0, r0, #23
 80232e6:	4282      	cmp	r2, r0
 80232e8:	d30a      	bcc.n	8023300 <__ieee754_sqrtf+0x28>
 80232ea:	1c21      	adds	r1, r4, #0
 80232ec:	1c20      	adds	r0, r4, #0
 80232ee:	f7dd fe57 	bl	8000fa0 <__aeabi_fmul>
 80232f2:	1c01      	adds	r1, r0, #0
 80232f4:	1c20      	adds	r0, r4, #0
 80232f6:	f7dd fae3 	bl	80008c0 <__aeabi_fadd>
 80232fa:	1c04      	adds	r4, r0, #0
 80232fc:	1c20      	adds	r0, r4, #0
 80232fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023300:	2a00      	cmp	r2, #0
 8023302:	d0fb      	beq.n	80232fc <__ieee754_sqrtf+0x24>
 8023304:	2c00      	cmp	r4, #0
 8023306:	da07      	bge.n	8023318 <__ieee754_sqrtf+0x40>
 8023308:	1c21      	adds	r1, r4, #0
 802330a:	1c20      	adds	r0, r4, #0
 802330c:	f7dd ff86 	bl	800121c <__aeabi_fsub>
 8023310:	1c01      	adds	r1, r0, #0
 8023312:	f7dd fc5f 	bl	8000bd4 <__aeabi_fdiv>
 8023316:	e7f0      	b.n	80232fa <__ieee754_sqrtf+0x22>
 8023318:	0022      	movs	r2, r4
 802331a:	15e1      	asrs	r1, r4, #23
 802331c:	4002      	ands	r2, r0
 802331e:	4204      	tst	r4, r0
 8023320:	d046      	beq.n	80233b0 <__ieee754_sqrtf+0xd8>
 8023322:	2280      	movs	r2, #128	@ 0x80
 8023324:	000f      	movs	r7, r1
 8023326:	025b      	lsls	r3, r3, #9
 8023328:	0a5b      	lsrs	r3, r3, #9
 802332a:	0412      	lsls	r2, r2, #16
 802332c:	3f7f      	subs	r7, #127	@ 0x7f
 802332e:	4313      	orrs	r3, r2
 8023330:	07c9      	lsls	r1, r1, #31
 8023332:	d400      	bmi.n	8023336 <__ieee754_sqrtf+0x5e>
 8023334:	005b      	lsls	r3, r3, #1
 8023336:	2400      	movs	r4, #0
 8023338:	2180      	movs	r1, #128	@ 0x80
 802333a:	2019      	movs	r0, #25
 802333c:	0026      	movs	r6, r4
 802333e:	107f      	asrs	r7, r7, #1
 8023340:	005b      	lsls	r3, r3, #1
 8023342:	0449      	lsls	r1, r1, #17
 8023344:	1875      	adds	r5, r6, r1
 8023346:	001a      	movs	r2, r3
 8023348:	429d      	cmp	r5, r3
 802334a:	dc02      	bgt.n	8023352 <__ieee754_sqrtf+0x7a>
 802334c:	186e      	adds	r6, r5, r1
 802334e:	1b5a      	subs	r2, r3, r5
 8023350:	1864      	adds	r4, r4, r1
 8023352:	3801      	subs	r0, #1
 8023354:	0053      	lsls	r3, r2, #1
 8023356:	0849      	lsrs	r1, r1, #1
 8023358:	2800      	cmp	r0, #0
 802335a:	d1f3      	bne.n	8023344 <__ieee754_sqrtf+0x6c>
 802335c:	2a00      	cmp	r2, #0
 802335e:	d019      	beq.n	8023394 <__ieee754_sqrtf+0xbc>
 8023360:	4d17      	ldr	r5, [pc, #92]	@ (80233c0 <__ieee754_sqrtf+0xe8>)
 8023362:	4e18      	ldr	r6, [pc, #96]	@ (80233c4 <__ieee754_sqrtf+0xec>)
 8023364:	6828      	ldr	r0, [r5, #0]
 8023366:	6831      	ldr	r1, [r6, #0]
 8023368:	682b      	ldr	r3, [r5, #0]
 802336a:	9301      	str	r3, [sp, #4]
 802336c:	f7dd ff56 	bl	800121c <__aeabi_fsub>
 8023370:	1c01      	adds	r1, r0, #0
 8023372:	9801      	ldr	r0, [sp, #4]
 8023374:	f7dd f8e6 	bl	8000544 <__aeabi_fcmple>
 8023378:	2800      	cmp	r0, #0
 802337a:	d00b      	beq.n	8023394 <__ieee754_sqrtf+0xbc>
 802337c:	6828      	ldr	r0, [r5, #0]
 802337e:	6831      	ldr	r1, [r6, #0]
 8023380:	f7dd fa9e 	bl	80008c0 <__aeabi_fadd>
 8023384:	682d      	ldr	r5, [r5, #0]
 8023386:	1c01      	adds	r1, r0, #0
 8023388:	1c28      	adds	r0, r5, #0
 802338a:	f7dd f8d1 	bl	8000530 <__aeabi_fcmplt>
 802338e:	2800      	cmp	r0, #0
 8023390:	d011      	beq.n	80233b6 <__ieee754_sqrtf+0xde>
 8023392:	3402      	adds	r4, #2
 8023394:	23fc      	movs	r3, #252	@ 0xfc
 8023396:	1064      	asrs	r4, r4, #1
 8023398:	059b      	lsls	r3, r3, #22
 802339a:	18e3      	adds	r3, r4, r3
 802339c:	05fc      	lsls	r4, r7, #23
 802339e:	18e4      	adds	r4, r4, r3
 80233a0:	e7ac      	b.n	80232fc <__ieee754_sqrtf+0x24>
 80233a2:	005b      	lsls	r3, r3, #1
 80233a4:	3201      	adds	r2, #1
 80233a6:	4203      	tst	r3, r0
 80233a8:	d0fb      	beq.n	80233a2 <__ieee754_sqrtf+0xca>
 80233aa:	3a01      	subs	r2, #1
 80233ac:	1a89      	subs	r1, r1, r2
 80233ae:	e7b8      	b.n	8023322 <__ieee754_sqrtf+0x4a>
 80233b0:	2080      	movs	r0, #128	@ 0x80
 80233b2:	0400      	lsls	r0, r0, #16
 80233b4:	e7f7      	b.n	80233a6 <__ieee754_sqrtf+0xce>
 80233b6:	2301      	movs	r3, #1
 80233b8:	3401      	adds	r4, #1
 80233ba:	439c      	bics	r4, r3
 80233bc:	e7ea      	b.n	8023394 <__ieee754_sqrtf+0xbc>
 80233be:	46c0      	nop			@ (mov r8, r8)
 80233c0:	20000424 	.word	0x20000424
 80233c4:	20000420 	.word	0x20000420

080233c8 <roundf>:
 80233c8:	0dc3      	lsrs	r3, r0, #23
 80233ca:	b2db      	uxtb	r3, r3
 80233cc:	3b7f      	subs	r3, #127	@ 0x7f
 80233ce:	0002      	movs	r2, r0
 80233d0:	b510      	push	{r4, lr}
 80233d2:	2b16      	cmp	r3, #22
 80233d4:	dc13      	bgt.n	80233fe <roundf+0x36>
 80233d6:	2b00      	cmp	r3, #0
 80233d8:	da07      	bge.n	80233ea <roundf+0x22>
 80233da:	0fc2      	lsrs	r2, r0, #31
 80233dc:	07d0      	lsls	r0, r2, #31
 80233de:	3301      	adds	r3, #1
 80233e0:	d102      	bne.n	80233e8 <roundf+0x20>
 80233e2:	23fe      	movs	r3, #254	@ 0xfe
 80233e4:	059b      	lsls	r3, r3, #22
 80233e6:	4318      	orrs	r0, r3
 80233e8:	bd10      	pop	{r4, pc}
 80233ea:	4908      	ldr	r1, [pc, #32]	@ (802340c <roundf+0x44>)
 80233ec:	4119      	asrs	r1, r3
 80233ee:	4208      	tst	r0, r1
 80233f0:	d0fa      	beq.n	80233e8 <roundf+0x20>
 80233f2:	2080      	movs	r0, #128	@ 0x80
 80233f4:	03c0      	lsls	r0, r0, #15
 80233f6:	4118      	asrs	r0, r3
 80233f8:	1880      	adds	r0, r0, r2
 80233fa:	4388      	bics	r0, r1
 80233fc:	e7f4      	b.n	80233e8 <roundf+0x20>
 80233fe:	2b80      	cmp	r3, #128	@ 0x80
 8023400:	d1f2      	bne.n	80233e8 <roundf+0x20>
 8023402:	1c01      	adds	r1, r0, #0
 8023404:	f7dd fa5c 	bl	80008c0 <__aeabi_fadd>
 8023408:	e7ee      	b.n	80233e8 <roundf+0x20>
 802340a:	46c0      	nop			@ (mov r8, r8)
 802340c:	007fffff 	.word	0x007fffff

08023410 <__ieee754_expf>:
 8023410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023412:	21ff      	movs	r1, #255	@ 0xff
 8023414:	0043      	lsls	r3, r0, #1
 8023416:	1c04      	adds	r4, r0, #0
 8023418:	085b      	lsrs	r3, r3, #1
 802341a:	05c9      	lsls	r1, r1, #23
 802341c:	428b      	cmp	r3, r1
 802341e:	d904      	bls.n	802342a <__ieee754_expf+0x1a>
 8023420:	1c01      	adds	r1, r0, #0
 8023422:	1c20      	adds	r0, r4, #0
 8023424:	f7dd fa4c 	bl	80008c0 <__aeabi_fadd>
 8023428:	e00d      	b.n	8023446 <__ieee754_expf+0x36>
 802342a:	0fc6      	lsrs	r6, r0, #31
 802342c:	428b      	cmp	r3, r1
 802342e:	d104      	bne.n	802343a <__ieee754_expf+0x2a>
 8023430:	2e00      	cmp	r6, #0
 8023432:	d000      	beq.n	8023436 <__ieee754_expf+0x26>
 8023434:	e0ba      	b.n	80235ac <__ieee754_expf+0x19c>
 8023436:	1c20      	adds	r0, r4, #0
 8023438:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802343a:	495d      	ldr	r1, [pc, #372]	@ (80235b0 <__ieee754_expf+0x1a0>)
 802343c:	4288      	cmp	r0, r1
 802343e:	dd04      	ble.n	802344a <__ieee754_expf+0x3a>
 8023440:	2000      	movs	r0, #0
 8023442:	f000 f8f1 	bl	8023628 <__math_oflowf>
 8023446:	1c04      	adds	r4, r0, #0
 8023448:	e7f5      	b.n	8023436 <__ieee754_expf+0x26>
 802344a:	2800      	cmp	r0, #0
 802344c:	da06      	bge.n	802345c <__ieee754_expf+0x4c>
 802344e:	4a59      	ldr	r2, [pc, #356]	@ (80235b4 <__ieee754_expf+0x1a4>)
 8023450:	4293      	cmp	r3, r2
 8023452:	d903      	bls.n	802345c <__ieee754_expf+0x4c>
 8023454:	2000      	movs	r0, #0
 8023456:	f000 f8e1 	bl	802361c <__math_uflowf>
 802345a:	e7f4      	b.n	8023446 <__ieee754_expf+0x36>
 802345c:	4a56      	ldr	r2, [pc, #344]	@ (80235b8 <__ieee754_expf+0x1a8>)
 802345e:	4293      	cmp	r3, r2
 8023460:	d96e      	bls.n	8023540 <__ieee754_expf+0x130>
 8023462:	4a56      	ldr	r2, [pc, #344]	@ (80235bc <__ieee754_expf+0x1ac>)
 8023464:	00b5      	lsls	r5, r6, #2
 8023466:	4293      	cmp	r3, r2
 8023468:	d84e      	bhi.n	8023508 <__ieee754_expf+0xf8>
 802346a:	4b55      	ldr	r3, [pc, #340]	@ (80235c0 <__ieee754_expf+0x1b0>)
 802346c:	1c20      	adds	r0, r4, #0
 802346e:	5959      	ldr	r1, [r3, r5]
 8023470:	f7dd fed4 	bl	800121c <__aeabi_fsub>
 8023474:	4b53      	ldr	r3, [pc, #332]	@ (80235c4 <__ieee754_expf+0x1b4>)
 8023476:	1c07      	adds	r7, r0, #0
 8023478:	595b      	ldr	r3, [r3, r5]
 802347a:	2501      	movs	r5, #1
 802347c:	1bad      	subs	r5, r5, r6
 802347e:	9300      	str	r3, [sp, #0]
 8023480:	1bad      	subs	r5, r5, r6
 8023482:	9900      	ldr	r1, [sp, #0]
 8023484:	1c38      	adds	r0, r7, #0
 8023486:	f7dd fec9 	bl	800121c <__aeabi_fsub>
 802348a:	1c04      	adds	r4, r0, #0
 802348c:	1c21      	adds	r1, r4, #0
 802348e:	1c20      	adds	r0, r4, #0
 8023490:	f7dd fd86 	bl	8000fa0 <__aeabi_fmul>
 8023494:	494c      	ldr	r1, [pc, #304]	@ (80235c8 <__ieee754_expf+0x1b8>)
 8023496:	1c06      	adds	r6, r0, #0
 8023498:	f7dd fd82 	bl	8000fa0 <__aeabi_fmul>
 802349c:	494b      	ldr	r1, [pc, #300]	@ (80235cc <__ieee754_expf+0x1bc>)
 802349e:	f7dd febd 	bl	800121c <__aeabi_fsub>
 80234a2:	1c31      	adds	r1, r6, #0
 80234a4:	f7dd fd7c 	bl	8000fa0 <__aeabi_fmul>
 80234a8:	4949      	ldr	r1, [pc, #292]	@ (80235d0 <__ieee754_expf+0x1c0>)
 80234aa:	f7dd fa09 	bl	80008c0 <__aeabi_fadd>
 80234ae:	1c31      	adds	r1, r6, #0
 80234b0:	f7dd fd76 	bl	8000fa0 <__aeabi_fmul>
 80234b4:	4947      	ldr	r1, [pc, #284]	@ (80235d4 <__ieee754_expf+0x1c4>)
 80234b6:	f7dd feb1 	bl	800121c <__aeabi_fsub>
 80234ba:	1c31      	adds	r1, r6, #0
 80234bc:	f7dd fd70 	bl	8000fa0 <__aeabi_fmul>
 80234c0:	4945      	ldr	r1, [pc, #276]	@ (80235d8 <__ieee754_expf+0x1c8>)
 80234c2:	f7dd f9fd 	bl	80008c0 <__aeabi_fadd>
 80234c6:	1c31      	adds	r1, r6, #0
 80234c8:	f7dd fd6a 	bl	8000fa0 <__aeabi_fmul>
 80234cc:	1c01      	adds	r1, r0, #0
 80234ce:	1c20      	adds	r0, r4, #0
 80234d0:	f7dd fea4 	bl	800121c <__aeabi_fsub>
 80234d4:	1c01      	adds	r1, r0, #0
 80234d6:	1c06      	adds	r6, r0, #0
 80234d8:	1c20      	adds	r0, r4, #0
 80234da:	f7dd fd61 	bl	8000fa0 <__aeabi_fmul>
 80234de:	9001      	str	r0, [sp, #4]
 80234e0:	2d00      	cmp	r5, #0
 80234e2:	d140      	bne.n	8023566 <__ieee754_expf+0x156>
 80234e4:	2180      	movs	r1, #128	@ 0x80
 80234e6:	1c30      	adds	r0, r6, #0
 80234e8:	05c9      	lsls	r1, r1, #23
 80234ea:	f7dd fe97 	bl	800121c <__aeabi_fsub>
 80234ee:	1c01      	adds	r1, r0, #0
 80234f0:	9801      	ldr	r0, [sp, #4]
 80234f2:	f7dd fb6f 	bl	8000bd4 <__aeabi_fdiv>
 80234f6:	1c21      	adds	r1, r4, #0
 80234f8:	f7dd fe90 	bl	800121c <__aeabi_fsub>
 80234fc:	1c01      	adds	r1, r0, #0
 80234fe:	20fe      	movs	r0, #254	@ 0xfe
 8023500:	0580      	lsls	r0, r0, #22
 8023502:	f7dd fe8b 	bl	800121c <__aeabi_fsub>
 8023506:	e79e      	b.n	8023446 <__ieee754_expf+0x36>
 8023508:	4934      	ldr	r1, [pc, #208]	@ (80235dc <__ieee754_expf+0x1cc>)
 802350a:	1c20      	adds	r0, r4, #0
 802350c:	f7dd fd48 	bl	8000fa0 <__aeabi_fmul>
 8023510:	4b33      	ldr	r3, [pc, #204]	@ (80235e0 <__ieee754_expf+0x1d0>)
 8023512:	5959      	ldr	r1, [r3, r5]
 8023514:	f7dd f9d4 	bl	80008c0 <__aeabi_fadd>
 8023518:	f7de f83a 	bl	8001590 <__aeabi_f2iz>
 802351c:	0005      	movs	r5, r0
 802351e:	f7de f857 	bl	80015d0 <__aeabi_i2f>
 8023522:	4930      	ldr	r1, [pc, #192]	@ (80235e4 <__ieee754_expf+0x1d4>)
 8023524:	1c06      	adds	r6, r0, #0
 8023526:	f7dd fd3b 	bl	8000fa0 <__aeabi_fmul>
 802352a:	1c01      	adds	r1, r0, #0
 802352c:	1c20      	adds	r0, r4, #0
 802352e:	f7dd fe75 	bl	800121c <__aeabi_fsub>
 8023532:	492d      	ldr	r1, [pc, #180]	@ (80235e8 <__ieee754_expf+0x1d8>)
 8023534:	1c07      	adds	r7, r0, #0
 8023536:	1c30      	adds	r0, r6, #0
 8023538:	f7dd fd32 	bl	8000fa0 <__aeabi_fmul>
 802353c:	9000      	str	r0, [sp, #0]
 802353e:	e7a0      	b.n	8023482 <__ieee754_expf+0x72>
 8023540:	22d0      	movs	r2, #208	@ 0xd0
 8023542:	0592      	lsls	r2, r2, #22
 8023544:	4293      	cmp	r3, r2
 8023546:	d20c      	bcs.n	8023562 <__ieee754_expf+0x152>
 8023548:	4928      	ldr	r1, [pc, #160]	@ (80235ec <__ieee754_expf+0x1dc>)
 802354a:	1c20      	adds	r0, r4, #0
 802354c:	f7dd f9b8 	bl	80008c0 <__aeabi_fadd>
 8023550:	21fe      	movs	r1, #254	@ 0xfe
 8023552:	0589      	lsls	r1, r1, #22
 8023554:	f7dd f800 	bl	8000558 <__aeabi_fcmpgt>
 8023558:	1e05      	subs	r5, r0, #0
 802355a:	d097      	beq.n	802348c <__ieee754_expf+0x7c>
 802355c:	21fe      	movs	r1, #254	@ 0xfe
 802355e:	0589      	lsls	r1, r1, #22
 8023560:	e75f      	b.n	8023422 <__ieee754_expf+0x12>
 8023562:	2500      	movs	r5, #0
 8023564:	e792      	b.n	802348c <__ieee754_expf+0x7c>
 8023566:	2080      	movs	r0, #128	@ 0x80
 8023568:	1c31      	adds	r1, r6, #0
 802356a:	05c0      	lsls	r0, r0, #23
 802356c:	f7dd fe56 	bl	800121c <__aeabi_fsub>
 8023570:	1c01      	adds	r1, r0, #0
 8023572:	9801      	ldr	r0, [sp, #4]
 8023574:	f7dd fb2e 	bl	8000bd4 <__aeabi_fdiv>
 8023578:	1c01      	adds	r1, r0, #0
 802357a:	9800      	ldr	r0, [sp, #0]
 802357c:	f7dd fe4e 	bl	800121c <__aeabi_fsub>
 8023580:	1c39      	adds	r1, r7, #0
 8023582:	f7dd fe4b 	bl	800121c <__aeabi_fsub>
 8023586:	1c01      	adds	r1, r0, #0
 8023588:	20fe      	movs	r0, #254	@ 0xfe
 802358a:	0580      	lsls	r0, r0, #22
 802358c:	f7dd fe46 	bl	800121c <__aeabi_fsub>
 8023590:	002b      	movs	r3, r5
 8023592:	337d      	adds	r3, #125	@ 0x7d
 8023594:	db02      	blt.n	802359c <__ieee754_expf+0x18c>
 8023596:	05ec      	lsls	r4, r5, #23
 8023598:	1824      	adds	r4, r4, r0
 802359a:	e74c      	b.n	8023436 <__ieee754_expf+0x26>
 802359c:	21d8      	movs	r1, #216	@ 0xd8
 802359e:	3564      	adds	r5, #100	@ 0x64
 80235a0:	05ed      	lsls	r5, r5, #23
 80235a2:	1828      	adds	r0, r5, r0
 80235a4:	0509      	lsls	r1, r1, #20
 80235a6:	f7dd fcfb 	bl	8000fa0 <__aeabi_fmul>
 80235aa:	e74c      	b.n	8023446 <__ieee754_expf+0x36>
 80235ac:	2400      	movs	r4, #0
 80235ae:	e742      	b.n	8023436 <__ieee754_expf+0x26>
 80235b0:	42b17217 	.word	0x42b17217
 80235b4:	42cff1b5 	.word	0x42cff1b5
 80235b8:	3eb17218 	.word	0x3eb17218
 80235bc:	3f851591 	.word	0x3f851591
 80235c0:	080267d0 	.word	0x080267d0
 80235c4:	080267c8 	.word	0x080267c8
 80235c8:	3331bb4c 	.word	0x3331bb4c
 80235cc:	35ddea0e 	.word	0x35ddea0e
 80235d0:	388ab355 	.word	0x388ab355
 80235d4:	3b360b61 	.word	0x3b360b61
 80235d8:	3e2aaaab 	.word	0x3e2aaaab
 80235dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80235e0:	080267d8 	.word	0x080267d8
 80235e4:	3f317180 	.word	0x3f317180
 80235e8:	3717f7d1 	.word	0x3717f7d1
 80235ec:	7149f2ca 	.word	0x7149f2ca

080235f0 <with_errnof>:
 80235f0:	b570      	push	{r4, r5, r6, lr}
 80235f2:	000d      	movs	r5, r1
 80235f4:	1c04      	adds	r4, r0, #0
 80235f6:	f7fd f923 	bl	8020840 <__errno>
 80235fa:	6005      	str	r5, [r0, #0]
 80235fc:	1c20      	adds	r0, r4, #0
 80235fe:	bd70      	pop	{r4, r5, r6, pc}

08023600 <xflowf>:
 8023600:	b510      	push	{r4, lr}
 8023602:	1c0b      	adds	r3, r1, #0
 8023604:	2800      	cmp	r0, #0
 8023606:	d002      	beq.n	802360e <xflowf+0xe>
 8023608:	2380      	movs	r3, #128	@ 0x80
 802360a:	061b      	lsls	r3, r3, #24
 802360c:	18cb      	adds	r3, r1, r3
 802360e:	1c18      	adds	r0, r3, #0
 8023610:	f7dd fcc6 	bl	8000fa0 <__aeabi_fmul>
 8023614:	2122      	movs	r1, #34	@ 0x22
 8023616:	f7ff ffeb 	bl	80235f0 <with_errnof>
 802361a:	bd10      	pop	{r4, pc}

0802361c <__math_uflowf>:
 802361c:	2180      	movs	r1, #128	@ 0x80
 802361e:	b510      	push	{r4, lr}
 8023620:	0549      	lsls	r1, r1, #21
 8023622:	f7ff ffed 	bl	8023600 <xflowf>
 8023626:	bd10      	pop	{r4, pc}

08023628 <__math_oflowf>:
 8023628:	21e0      	movs	r1, #224	@ 0xe0
 802362a:	b510      	push	{r4, lr}
 802362c:	05c9      	lsls	r1, r1, #23
 802362e:	f7ff ffe7 	bl	8023600 <xflowf>
 8023632:	bd10      	pop	{r4, pc}

08023634 <_init>:
 8023634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023636:	46c0      	nop			@ (mov r8, r8)
 8023638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802363a:	bc08      	pop	{r3}
 802363c:	469e      	mov	lr, r3
 802363e:	4770      	bx	lr

08023640 <_fini>:
 8023640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023642:	46c0      	nop			@ (mov r8, r8)
 8023644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023646:	bc08      	pop	{r3}
 8023648:	469e      	mov	lr, r3
 802364a:	4770      	bx	lr
